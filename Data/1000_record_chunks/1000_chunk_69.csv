record_number,buggy_code,fixed_code,code_similarity
68001,"public void layout() throws BirtException {
  init();
  boolean isEmptyLine=true;
  boolean innerTextInserted=false;
  if (""String_Node_Str"".equalsIgnoreCase(context.getFormat()) && objectType == TYPE_FLASH_OBJECT) {
    innerTextInserted=true;
    innerText=createInnerTextLayout();
    innerText.content.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
    innerText.setVerticalAlign(IStyle.MIDDLE_VALUE);
    innerText.setIgnoreReordering(true);
    if (PropertyUtil.isInlineElement(image)) {
      InlineStackingArea lineParent=(InlineStackingArea)parent;
      isEmptyLine=lineParent.isEmptyLine();
    }
    int lastIP=root.currentIP;
    int lastBP=root.currentBP;
    innerText.layout();
    innerText.setAllocatedPosition(0,0);
    root.currentIP=lastIP;
    root.currentBP=lastBP;
  }
  if (PropertyUtil.isInlineElement(image)) {
    assert(parent instanceof InlineStackingArea);
    InlineStackingArea lineParent=(InlineStackingArea)parent;
    if (root.getAllocatedWidth() > parent.getCurrentMaxContentWidth()) {
      if ((innerTextInserted && !isEmptyLine) || (!innerTextInserted && !lineParent.isEmptyLine())) {
        lineParent.endLine(false);
        layout();
      }
 else {
        parent.add(root);
        root.finished=true;
        parent.update(root);
        return;
      }
    }
 else {
      parent.add(root);
      root.finished=true;
      parent.update(root);
      return;
    }
  }
 else {
    parent.add(root);
    if (!parent.isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=root.getAllocatedHeight();
      if (aHeight + parent.getAbsoluteBP() > context.getMaxBP()) {
        parent.autoPageBreak();
      }
    }
    root.finished=true;
    parent.update(root);
  }
}","public void layout() throws BirtException {
  init();
  boolean isEmptyLine=true;
  boolean innerTextInserted=false;
  if (""String_Node_Str"".equalsIgnoreCase(context.getFormat()) && objectType == TYPE_FLASH_OBJECT) {
    innerTextInserted=true;
    innerText=createInnerTextLayout();
    innerText.content.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
    innerText.setVerticalAlign(IStyle.MIDDLE_VALUE);
    innerText.setIgnoreReordering(true);
    if (PropertyUtil.isInlineElement(image)) {
      InlineStackingArea lineParent=(InlineStackingArea)parent;
      isEmptyLine=lineParent.isEmptyLine();
    }
    int lastIP=root.currentIP;
    int lastBP=root.currentBP;
    innerText.layout();
    innerText.setAllocatedPosition(0,0);
    int rootHeight=root.getContentHeight();
    if (rootHeight < innerText.getHeight()) {
      innerText.setHeight((rootHeight - 1000) > 0 ? (rootHeight - 1000) : 0);
      innerText.setNeedClip(true);
    }
    root.currentIP=lastIP;
    root.currentBP=lastBP;
  }
  if (PropertyUtil.isInlineElement(image)) {
    assert(parent instanceof InlineStackingArea);
    InlineStackingArea lineParent=(InlineStackingArea)parent;
    if (root.getAllocatedWidth() > parent.getCurrentMaxContentWidth()) {
      if ((innerTextInserted && !isEmptyLine) || (!innerTextInserted && !lineParent.isEmptyLine())) {
        lineParent.endLine(false);
        layout();
      }
 else {
        parent.add(root);
        root.finished=true;
        parent.update(root);
        return;
      }
    }
 else {
      parent.add(root);
      root.finished=true;
      parent.update(root);
      return;
    }
  }
 else {
    parent.add(root);
    if (!parent.isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=root.getAllocatedHeight();
      if (aHeight + parent.getAbsoluteBP() > context.getMaxBP()) {
        parent.autoPageBreak();
      }
    }
    root.finished=true;
    parent.update(root);
  }
}",0.94355927626249
68002,"@Override protected Composite createDropDown(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER | SWT.DOUBLE_BUFFERED);
  GridData gd=new GridData();
  gd.widthHint=CELL_WIDTH * 8 + MARGIN;
  gd.heightHint=CELL_HEIGHT * 8 + MARGIN;
  composite.setLayoutData(gd);
  composite.addListener(SWT.MouseDown,this);
  composite.addListener(SWT.FocusOut,this);
  composite.addListener(SWT.KeyDown,this);
  composite.addListener(SWT.Traverse,this);
  composite.addPaintListener(this);
  return composite;
}","@Override protected Composite createDropDown(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER | SWT.DOUBLE_BUFFERED);
  GridData gd=new GridData();
  gd.widthHint=CELL_WIDTH * 8 + MARGIN;
  gd.heightHint=CELL_HEIGHT * 8 + MARGIN;
  composite.setLayoutData(gd);
  composite.addListener(SWT.MouseDown,this);
  composite.addListener(SWT.FocusOut,this);
  composite.addListener(SWT.KeyDown,this);
  composite.addPaintListener(this);
  return composite;
}",0.9556451612903226
68003,"public void toggleDropDown(){
  if (dropDown == null || dropDown.isDisposed()) {
    Point pt=UIHelper.getScreenLocation(host);
    int x=pt.x;
    int y=pt.y + host.getSize().y;
    Shell shell=new Shell(host.getShell(),SWT.NONE);
    shell.setLayout(new GridLayout());
    shell.setLocation(x,y);
    dropDown=createDropDown(shell);
    dropDown.addListener(SWT.KeyDown,this);
    dropDown.addListener(SWT.FocusOut,this);
    shell.layout();
    shell.pack();
    shell.open();
  }
 else {
    dropDown.getShell().close();
  }
}","public void toggleDropDown(){
  if (dropDown == null || dropDown.isDisposed()) {
    Point pt=UIHelper.getScreenLocation(host);
    int x=pt.x;
    int y=pt.y + host.getSize().y;
    Shell shell=new Shell(host.getShell(),SWT.NONE);
    shell.setLayout(new GridLayout());
    shell.setLocation(x,y);
    dropDown=createDropDown(shell);
    shell.layout();
    shell.pack();
    shell.open();
  }
 else {
    dropDown.getShell().close();
  }
}",0.8877445932028837
68004,"public RDAggrValueHolder(DataInputStream valueStream) throws IOException, DataException {
  this.bindingName=IOUtil.readString(valueStream);
  populateRunningAggrInfo(valueStream);
  this.groupLevel=IOUtil.readInt(valueStream);
  this.size=IOUtil.readInt(valueStream);
  this.valueStream=valueStream;
  if (size > 0) {
    this.currentValue=IOUtil.readObject(valueStream);
  }
}","public RDAggrValueHolder(DataInputStream valueStream) throws IOException, DataException {
  this.bindingName=IOUtil.readString(valueStream);
  populateRunningAggrInfo(valueStream);
  this.groupLevel=IOUtil.readInt(valueStream);
  this.size=IOUtil.readInt(valueStream);
  this.valueStream=valueStream;
  if (size > 0) {
    this.currentValue=IOUtil.readObject(valueStream,DataEngineSession.getCurrentClassLoader());
  }
}",0.9473684210526316
68005,"public Object get(int index) throws IOException {
  if (index == groupInstanceIndex)   return currentValue;
  if (index < groupInstanceIndex || index >= size)   return null;
  while (groupInstanceIndex < index) {
    this.currentValue=IOUtil.readObject(valueStream);
    groupInstanceIndex++;
  }
  return this.currentValue;
}","public Object get(int index) throws IOException {
  if (index == groupInstanceIndex)   return currentValue;
  if (index < groupInstanceIndex || index >= size)   return null;
  while (groupInstanceIndex < index) {
    this.currentValue=IOUtil.readObject(valueStream,DataEngineSession.getCurrentClassLoader());
    groupInstanceIndex++;
  }
  return this.currentValue;
}",0.9394812680115274
68006,"/** 
 * @param value
 * @param parent with of parent, the unit is 1/1000 point.
 * @return
 */
public static int convertDimensionType(DimensionType value,float parent,float dpi){
  float INCH_PX=dpi;
  float PX_PT=INCH_PT / INCH_PX;
  if (value == null) {
    return (int)(parent * 1000);
  }
  if (DimensionType.UNITS_PERCENTAGE.equals(value.getUnits())) {
    return (int)(value.getMeasure() / 100 * parent);
  }
  if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * PX_PT * 1000);
  }
  if (DimensionType.UNITS_EM.equalsIgnoreCase(value.getUnits()) || DimensionType.UNITS_EX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * 12 * 1000);
  }
 else {
    return (int)(value.convertTo(DimensionType.UNITS_PT) * 1000);
  }
}","/** 
 * @param value
 * @param parent with of parent, the unit is 1/1000 point.
 * @return
 */
public static int convertDimensionType(DimensionType value,float parent,float dpi){
  float INCH_PX=dpi;
  float PX_PT=INCH_PT / INCH_PX;
  if (value == null) {
    return (int)(parent);
  }
  if (DimensionType.UNITS_PERCENTAGE.equals(value.getUnits())) {
    return (int)(value.getMeasure() / 100 * parent);
  }
  if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * PX_PT * 1000);
  }
  if (DimensionType.UNITS_EM.equalsIgnoreCase(value.getUnits()) || DimensionType.UNITS_EX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * 12 * 1000);
  }
 else {
    return (int)(value.convertTo(DimensionType.UNITS_PT) * 1000);
  }
}",0.9956057752667922
68007,"public ImageData(IImageContent image,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer,int heightDpi,int widthDpi){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),imageInfo.getHeight() * ExcelUtil.INCH_PT / heightDpi,heightDpi) / 1000;
  imageHeight=(int)height;
  int imageWidth=(int)ExcelUtil.convertDimensionType(image.getWidth(),imageInfo.getWidth() * 1000 * ExcelUtil.INCH_PT / widthDpi,widthDpi);
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}","public ImageData(IImageContent image,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer,int heightDpi,int widthDpi){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),imageInfo.getHeight() * 1000 * ExcelUtil.INCH_PT / heightDpi,heightDpi) / 1000;
  imageHeight=(int)height;
  int imageWidth=(int)ExcelUtil.convertDimensionType(image.getWidth(),imageInfo.getWidth() * 1000 * ExcelUtil.INCH_PT / widthDpi,widthDpi);
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}",0.9951151430565248
68008,"/** 
 * Creates adaptor based on Model OdaDataSourceHandle.
 * @param source model handle
 * @param propBindingScope Javascript scope in which to evaluate property bindings. If null,property bindings are not evaluated.
 */
public OdaDataSourceAdapter(OdaDataSourceHandle source,Scriptable propBindingScope,DataEngineContext dtCotnext,ModelAdapter adapter) throws BirtException {
  super(source.getQualifiedName());
  bindingScope=propBindingScope;
  DataAdapterUtil.adaptBaseDataSource(source,this);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new AdapterException(ResourceConstants.DATASOURCE_EXID_ERROR,source.getName());
  }
  setExtensionID(driverName);
  Map staticProps=DataAdapterUtil.getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue=""String_Node_Str"";
      Expression expression=source.getPropertyBindingExpression(propName);
      org.eclipse.birt.data.engine.api.querydefn.ScriptExpression script=adapter.adaptExpression(expression);
      if (bindingScope != null && script != null && DataSessionContext.MODE_UPDATE != dtCotnext.getMode()) {
        Object value=JavascriptEvalUtil.evaluateScript(null,bindingScope,script.getText(),ScriptExpression.defaultID,0);
        propValue=(value == null ? null : value.toString());
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(this);
}","/** 
 * Creates adaptor based on Model OdaDataSourceHandle.
 * @param source model handle
 * @param propBindingScope Javascript scope in which to evaluate property bindings. If null,property bindings are not evaluated.
 */
public OdaDataSourceAdapter(OdaDataSourceHandle source,Scriptable propBindingScope,DataEngineContext dtCotnext,ModelAdapter adapter) throws BirtException {
  super(source.getQualifiedName());
  bindingScope=propBindingScope;
  DataAdapterUtil.adaptBaseDataSource(source,this);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new AdapterException(ResourceConstants.DATASOURCE_EXID_ERROR,source.getName());
  }
  setExtensionID(driverName);
  Map staticProps=DataAdapterUtil.getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue=""String_Node_Str"";
      Expression expression=source.getPropertyBindingExpression(propName);
      org.eclipse.birt.data.engine.api.querydefn.ScriptExpression script=adapter.adaptExpression(expression);
      if (bindingScope != null && script != null && DataSessionContext.MODE_UPDATE != dtCotnext.getMode()) {
        Object value=JavascriptEvalUtil.evaluateScript(null,bindingScope,script.getText(),ScriptExpression.defaultID,0);
        propValue=(value == null ? null : value.toString());
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(this,source);
}",0.9982830512631836
68009,"/** 
 * Adds the externalized property configuration id for use by  a BIRT consumer application's propertyProvider extension.
 */
private void addPropertyConfigurationId(OdaDataSourceDesign dteSource) throws BirtException {
  String configIdValue=dteSource.getExtensionID() + Constants.ODA_PROP_CONFIG_KEY_SEPARATOR + dteSource.getName();
  dteSource.addPublicProperty(Constants.ODA_PROP_CONFIGURATION_ID,configIdValue);
}","/** 
 * Adds the externalized property configuration id for use by  a BIRT consumer application's propertyProvider extension. Use the name not qualified name as configurationId.
 */
private void addPropertyConfigurationId(OdaDataSourceDesign dteSource,OdaDataSourceHandle sourceHandle) throws BirtException {
  String configIdValue=dteSource.getExtensionID() + Constants.ODA_PROP_CONFIG_KEY_SEPARATOR + sourceHandle.getName();
  dteSource.addPublicProperty(Constants.ODA_PROP_CONFIGURATION_ID,configIdValue);
}",0.8884120171673819
68010,"IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  setResourceIDtoDataSourceHandle(source);
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(MessageConstants.EXTENTION_ID_MISSING_ERROR,source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      Expression expr=source.getPropertyBindingExpression(propName);
      String bindingExpr=getExpressionValue(expr);
      String propValue;
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}","IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  setResourceIDtoDataSourceHandle(source);
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(MessageConstants.EXTENTION_ID_MISSING_ERROR,source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      Expression expr=source.getPropertyBindingExpression(propName);
      String bindingExpr=getExpressionValue(expr);
      String propValue;
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource,source);
  return dteSource;
}",0.9980485085029271
68011,"/** 
 * Adds the externalized property configuration id for use by  a BIRT consumer application's propertyProvider extension.
 */
private void addPropertyConfigurationId(OdaDataSourceDesign dteSource) throws BirtException {
  String configIdValue=dteSource.getExtensionID() + Constants.ODA_PROP_CONFIG_KEY_SEPARATOR + dteSource.getName();
  dteSource.addPublicProperty(Constants.ODA_PROP_CONFIGURATION_ID,configIdValue);
}","/** 
 * Adds the externalized property configuration id for use by  a BIRT consumer application's propertyProvider extension. Use the name not qualified name as configurationId.
 */
private void addPropertyConfigurationId(OdaDataSourceDesign dteSource,OdaDataSourceHandle sourceHandle) throws BirtException {
  String configIdValue=dteSource.getExtensionID() + Constants.ODA_PROP_CONFIG_KEY_SEPARATOR + sourceHandle.getName();
  dteSource.addPublicProperty(Constants.ODA_PROP_CONFIGURATION_ID,configIdValue);
}",0.8884120171673819
68012,"/** 
 * actions of Edit Driver in Driver Page
 */
private void editDriver(){
  if (driverViewer.getTable().getSelectionIndex() >= 0 && driverViewer.getTable().getSelectionIndex() < driverViewer.getTable().getItemCount()) {
    EditJdbcDriverDialog dlg=new EditJdbcDriverDialog(getShell());
    Object obj=driverViewer.getTable().getItem(driverViewer.getTable().getSelectionIndex()).getData();
    DriverInfo driverInfo=(DriverInfo)((Map.Entry)obj).getValue();
    if (obj instanceof Map.Entry) {
      dlg.setDriverClassName(((Map.Entry)obj).getKey().toString());
      dlg.setDisplayName(driverInfo.getDisplayName());
      dlg.setUrlTemplate(driverInfo.getUrlTemplate());
    }
    if (dlg.open() == Window.OK) {
      if (obj instanceof Map.Entry && (!dlg.getDisplayName().trim().equals(driverInfo.getDisplayName().trim()) || !dlg.getUrlTemplate().trim().equals(driverInfo.getUrlTemplate().trim()))) {
        driverInfo.setDisplayName(dlg.getDisplayName());
        driverInfo.setUrlTemplate(dlg.getUrlTemplate());
        driverMap.put(((Map.Entry)obj).getKey(),driverInfo);
        Utility.setPreferenceStoredMap(JdbcPlugin.DRIVER_MAP_PREFERENCE_KEY,driverMap);
        driverChanged=true;
      }
      refreshDriverViewer();
      updateDriverButtons();
    }
  }
}","/** 
 * actions of Edit Driver in Driver Page
 */
private void editDriver(){
  if (driverViewer.getTable().getSelectionIndex() >= 0 && driverViewer.getTable().getSelectionIndex() < driverViewer.getTable().getItemCount()) {
    EditJdbcDriverDialog dlg=new EditJdbcDriverDialog(getShell());
    Object obj=driverViewer.getTable().getItem(driverViewer.getTable().getSelectionIndex()).getData();
    DriverInfo driverInfo=(DriverInfo)((Map.Entry)obj).getValue();
    if (externalDrivers == null || !externalDrivers.contains(driverInfo.getDriverName())) {
      return;
    }
    if (obj instanceof Map.Entry) {
      dlg.setDriverClassName(((Map.Entry)obj).getKey().toString());
      dlg.setDisplayName(driverInfo.getDisplayName());
      dlg.setUrlTemplate(driverInfo.getUrlTemplate());
    }
    if (dlg.open() == Window.OK) {
      if (obj instanceof Map.Entry && (!dlg.getDisplayName().trim().equals(driverInfo.getDisplayName().trim()) || !dlg.getUrlTemplate().trim().equals(driverInfo.getUrlTemplate().trim()))) {
        driverInfo.setDisplayName(dlg.getDisplayName());
        driverInfo.setUrlTemplate(dlg.getUrlTemplate());
        driverMap.put(((Map.Entry)obj).getKey(),driverInfo);
        Utility.setPreferenceStoredMap(JdbcPlugin.DRIVER_MAP_PREFERENCE_KEY,driverMap);
        driverChanged=true;
      }
      refreshDriverViewer();
      updateDriverButtons();
    }
  }
}",0.9578630549285176
68013,"/** 
 * Update states of driver buttons
 */
private void updateDriverButtons(){
  editButton.setEnabled(driverViewer.getTable().getSelectionIndex() >= 0 && driverViewer.getTable().getSelectionIndex() < driverViewer.getTable().getItemCount());
}","/** 
 * Update states of driver buttons
 */
private void updateDriverButtons(){
  if (driverViewer.getTable().getSelectionIndex() >= 0 && driverViewer.getTable().getSelectionIndex() < driverViewer.getTable().getItemCount()) {
    if (externalDrivers != null) {
      Object obj=((Map.Entry)driverViewer.getTable().getSelection()[0].getData()).getValue();
      editButton.setEnabled(externalDrivers.contains(((DriverInfo)obj).getDriverName()));
    }
 else {
      editButton.setEnabled(false);
    }
  }
 else {
    editButton.setEnabled(false);
  }
}",0.5603015075376885
68014,"/** 
 * update driverMap at runtime
 */
private void updateDriverMapRuntime(){
  if (jarsToBeCopiedRuntime.equals(jarsToBeDeletedRuntime))   return;
  List fileList=new ArrayList();
  Iterator jarsCopyIterator=jarsToBeCopiedRuntime.values().iterator();
  while (jarsCopyIterator.hasNext()) {
    fileList.add(new File(((JarFile)jarsCopyIterator.next()).getFilePath()));
  }
  JdbcToolKit.addToDriverList(fileList);
  fileList.clear();
  Iterator jarsDeleteIterator=jarsToBeDeletedRuntime.values().iterator();
  while (jarsDeleteIterator.hasNext()) {
    fileList.add(new File(((JarFile)jarsDeleteIterator.next()).getFilePath()));
  }
  JdbcToolKit.removeFromDriverList(fileList);
  resetRuntimeJars();
  updateDriverMap(JdbcToolKit.getDriverList());
}","/** 
 * update driverMap at runtime
 */
private void updateDriverMapRuntime(){
  if (jarsToBeCopiedRuntime.equals(jarsToBeDeletedRuntime))   return;
  List fileList=new ArrayList();
  Iterator jarsCopyIterator=jarsToBeCopiedRuntime.values().iterator();
  while (jarsCopyIterator.hasNext()) {
    fileList.add(new File(((JarFile)jarsCopyIterator.next()).getFilePath()));
  }
  List addedDrivers=JdbcToolKit.addToDriverList(fileList);
  if (addedDrivers != null) {
    for (int i=0; i < addedDrivers.size(); i++) {
      externalDrivers.add(((JDBCDriverInformation)addedDrivers.get(i)).toString());
    }
  }
  fileList.clear();
  Iterator jarsDeleteIterator=jarsToBeDeletedRuntime.values().iterator();
  while (jarsDeleteIterator.hasNext()) {
    fileList.add(new File(((JarFile)jarsDeleteIterator.next()).getFilePath()));
  }
  List removedDrivers=JdbcToolKit.removeFromDriverList(fileList);
  if (removedDrivers != null) {
    for (int i=0; i < removedDrivers.size(); i++) {
      externalDrivers.remove(((JDBCDriverInformation)removedDrivers.get(i)).toString());
    }
  }
  resetRuntimeJars();
  updateDriverMap(JdbcToolKit.getDriverList());
}",0.7917764891934633
68015,"/** 
 * initialize jarMap,driverMap and Viewer
 */
private void initialize(){
  jarMap=new HashMap();
  driverMap=new HashMap();
  jarsToBeCopied=new Hashtable();
  jarsToBeDeleted=new Hashtable();
  jarsToBeCopiedRuntime=new Hashtable();
  jarsToBeDeletedRuntime=new Hashtable();
  updateJarMap();
  updateDriverMapInit();
  refreshJarViewer();
  refreshDriverViewer();
  updateJarButtons();
  updateDriverButtons();
}","/** 
 * initialize jarMap,driverMap and Viewer
 */
private void initialize(){
  jarMap=new HashMap();
  driverMap=new HashMap();
  jarsToBeCopied=new Hashtable();
  jarsToBeDeleted=new Hashtable();
  jarsToBeCopiedRuntime=new Hashtable();
  jarsToBeDeletedRuntime=new Hashtable();
  updateJarMap();
  updateDriverMapInit();
  updateExternalDriverList();
  refreshJarViewer();
  refreshDriverViewer();
  updateJarButtons();
  updateDriverButtons();
}",0.9654377880184332
68016,"/** 
 * add new found driver(s) to runtime driver list
 * @param fileList
 */
public static void addToDriverList(List fileList){
  if (fileList != null && fileList.size() != 0)   getJdbcDriverFromFile(fileList);
}","/** 
 * add new found driver(s) to runtime driver list
 * @param fileList
 */
public static List addToDriverList(List fileList){
  if (fileList != null && fileList.size() != 0)   return getJdbcDriverFromFile(fileList);
  return null;
}",0.9330357142857144
68017,"/** 
 * remove driver(s) from runtime driver list
 * @param fileList
 */
public static void removeFromDriverList(List fileList){
  for (int i=0; i < fileList.size(); i++) {
    String fileName=((File)fileList.get(i)).getName();
    List driverNames=(List)file2Drivers.get(fileName);
    for (int j=0; j < jdbcDriverInfos.size(); j++) {
      for (int k=0; k < driverNames.size(); k++)       if (((JDBCDriverInformation)jdbcDriverInfos.get(j)).getDriverClassName().equals(((JDBCDriverInformation)driverNames.get(k)).getDriverClassName())) {
        jdbcDriverInfos.remove(j);
      }
    }
    if (failLoadFileList.contains(fileList.get(i)))     failLoadFileList.remove(fileList.get(i));
  }
}","/** 
 * remove driver(s) from runtime driver list
 * @param fileList
 */
public static List removeFromDriverList(List fileList){
  List removedDrivers=new ArrayList();
  for (int i=0; i < fileList.size(); i++) {
    String fileName=((File)fileList.get(i)).getName();
    List driverNames=(List)file2Drivers.get(fileName);
    for (int j=0; j < jdbcDriverInfos.size(); j++) {
      for (int k=0; k < driverNames.size(); k++)       if (((JDBCDriverInformation)jdbcDriverInfos.get(j)).getDriverClassName().equals(((JDBCDriverInformation)driverNames.get(k)).getDriverClassName())) {
        removedDrivers.add(jdbcDriverInfos.get(j));
        jdbcDriverInfos.remove(j);
      }
    }
    if (failLoadFileList.contains(fileList.get(i)))     failLoadFileList.remove(fileList.get(i));
  }
  return removedDrivers;
}",0.9173333333333332
68018,"/** 
 * Found drivers in the Jar file List
 * @param file
 * @return a List of JDBCDriverInformation
 */
public static void getJdbcDriverFromFile(List fileList){
  if (failLoadFileList != null) {
    boolean duplicated;
    for (int i=0; i < failLoadFileList.size(); i++) {
      duplicated=false;
      File failToLoadFile=(File)failLoadFileList.get(i);
      for (int j=0; j < fileList.size(); j++) {
        if (failToLoadFile.getName().equals(((File)fileList.get(j)).getName())) {
          duplicated=true;
          break;
        }
      }
      if (!duplicated)       fileList.add(failToLoadFile);
    }
  }
  List driverInfos=getJDBCDriverInfoList(fileList);
  jdbcDriverInfos.addAll(driverInfos);
  tempAddedInDriverInfos.addAll(driverInfos);
}","/** 
 * Found drivers in the Jar file List
 * @param file
 * @return a List of JDBCDriverInformation
 */
public static List getJdbcDriverFromFile(List fileList){
  if (failLoadFileList != null) {
    boolean duplicated;
    for (int i=0; i < failLoadFileList.size(); i++) {
      duplicated=false;
      File failToLoadFile=(File)failLoadFileList.get(i);
      for (int j=0; j < fileList.size(); j++) {
        if (failToLoadFile.getName().equals(((File)fileList.get(j)).getName())) {
          duplicated=true;
          break;
        }
      }
      if (!duplicated)       fileList.add(failToLoadFile);
    }
  }
  List driverInfos=getJDBCDriverInfoList(fileList);
  jdbcDriverInfos.addAll(driverInfos);
  tempAddedInDriverInfos.addAll(driverInfos);
  return driverInfos;
}",0.9803921568627452
68019,"/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
      EngineConfig ec=new EngineConfig();
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
      DataRequestSession session=engineTask.getDataSession();
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
      engineTask.setAppContext(appContext);
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
      engineTask.close();
      engine.destroy();
    }
 else     if (dataSetHandle.getModuleHandle() instanceof DataMartHandle) {
      DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSetHandle.getModuleHandle());
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
      context.setAppContext(appContext);
      DataRequestSession session=DataRequestSession.newSession(context);
      session.refreshMetaData(dataSetHandle,holdEvent);
      session.shutdown();
    }
 else {
      DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
      DataRequestSession drSession=DataRequestSession.newSession(context);
      drSession.refreshMetaData(dataSetHandle,holdEvent);
      drSession.shutdown();
    }
  }
 catch (  BirtException ex) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{ex});
  }
}","/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  DataService.getInstance().updateColumnCache(dataSetHandle,holdEvent);
}",0.1647058823529411
68020,"public IDataRowExpressionEvaluator prepareRowExpressionEvaluator(Chart cm,List<String> columnExpression,int rowCount,boolean isStringType) throws ChartException {
synchronized (sessionLock) {
    if (engineTask != null) {
      try {
        engineTask.run();
      }
 catch (      EngineException e) {
        throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
      }
    }
    ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
    ClassLoader parentLoader=oldContextLoader;
    if (parentLoader == null)     parentLoader=this.getClass().getClassLoader();
    ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,itemHandle.getModuleHandle());
    Thread.currentThread().setContextClassLoader(newContextLoader);
    IDataRowExpressionEvaluator evaluator=null;
    try {
      CubeHandle cube=ChartCubeUtil.getBindingCube(itemHandle);
      if (cube != null) {
        evaluator=createCubeEvaluator(cube,cm,columnExpression);
        dataSetReference=cube;
      }
 else {
        if (isSharedBinding() && !ChartReportItemUtil.isOldChartUsingInternalGroup(itemHandle,cm) || isInheritColumnsGroups()) {
          if (isSharingChart(true)) {
            evaluator=createBaseEvaluator((ExtendedItemHandle)itemHandle.getDataBindingReference(),cm,columnExpression);
          }
 else {
            evaluator=fShareBindingQueryHelper.createShareBindingEvaluator(cm,columnExpression);
          }
        }
 else {
          evaluator=createBaseEvaluator(itemHandle,cm,columnExpression);
        }
        dataSetReference=ChartItemUtil.getBindingDataSet(itemHandle);
      }
      return evaluator;
    }
 catch (    BirtException e) {
      throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
    }
catch (    RuntimeException e) {
      throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(oldContextLoader);
    }
  }
}","public IDataRowExpressionEvaluator prepareRowExpressionEvaluator(Chart cm,List<String> columnExpression,int rowCount,boolean isStringType) throws ChartException {
synchronized (sessionLock) {
    if (engineTask != null) {
      try {
        engineTask.run();
      }
 catch (      EngineException e) {
        throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
      }
    }
    ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
    ClassLoader parentLoader=oldContextLoader;
    if (parentLoader == null)     parentLoader=this.getClass().getClassLoader();
    ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,itemHandle.getModuleHandle());
    Thread.currentThread().setContextClassLoader(newContextLoader);
    IDataRowExpressionEvaluator evaluator=null;
    try {
      CubeHandle cube=ChartCubeUtil.getBindingCube(itemHandle);
      if (cube != null) {
        evaluator=createCubeEvaluator(cube,cm,columnExpression);
        dataSetReference=cube;
      }
 else {
        if (isSharedBinding() && !ChartReportItemUtil.isOldChartUsingInternalGroup(itemHandle,cm) || isInheritColumnsGroups()) {
          if (isSharingChart(true)) {
            evaluator=createBaseEvaluator((ExtendedItemHandle)ChartReportItemUtil.getReportItemReference(itemHandle),cm,columnExpression);
          }
 else {
            evaluator=fShareBindingQueryHelper.createShareBindingEvaluator(cm,columnExpression);
          }
        }
 else {
          evaluator=createBaseEvaluator(itemHandle,cm,columnExpression);
        }
        dataSetReference=ChartItemUtil.getBindingDataSet(itemHandle);
      }
      return evaluator;
    }
 catch (    BirtException e) {
      throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
    }
catch (    RuntimeException e) {
      throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(oldContextLoader);
    }
  }
}",0.9834791059280856
68021,"/** 
 * Add this method according to GUI's requirement.This method is only for temporarily usage.
 * @param dataSetHandle
 * @return
 * @throws SemanticException
 * @deprecated
 */
public static CachedMetaDataHandle getCachedMetaDataHandle(DataSetHandle dataSetHandle) throws SemanticException {
  if (dataSetHandle.getCachedMetaDataHandle() == null) {
    updateColumnCache(dataSetHandle,true);
  }
  return dataSetHandle.getCachedMetaDataHandle();
}","/** 
 * Add this method according to GUI's requirement.This method is only for temporarily usage.
 * @param dataSetHandle
 * @return
 * @throws SemanticException
 * @deprecated
 */
public static CachedMetaDataHandle getCachedMetaDataHandle(DataSetHandle dataSetHandle) throws SemanticException {
  if (!hasMetaData(dataSetHandle)) {
    updateColumnCache(dataSetHandle,true);
  }
  return dataSetHandle.getCachedMetaDataHandle();
}",0.9387755102040816
68022,"/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
      EngineConfig ec=new EngineConfig();
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
      DataRequestSession session=engineTask.getDataSession();
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      engineTask.setAppContext(appContext);
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
      engineTask.close();
      engine.destroy();
    }
 else {
      DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
      DataRequestSession drSession=DataRequestSession.newSession(context);
      drSession.refreshMetaData(dataSetHandle,holdEvent);
      drSession.shutdown();
    }
  }
 catch (  BirtException ex) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{ex});
  }
}","/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
      EngineConfig ec=new EngineConfig();
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
      DataRequestSession session=engineTask.getDataSession();
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
      engineTask.setAppContext(appContext);
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
      engineTask.close();
      engine.destroy();
    }
 else     if (dataSetHandle.getModuleHandle() instanceof DataMartHandle) {
      DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSetHandle.getModuleHandle());
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
      context.setAppContext(appContext);
      DataRequestSession session=DataRequestSession.newSession(context);
      session.refreshMetaData(dataSetHandle,holdEvent);
      session.shutdown();
    }
 else {
      DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
      DataRequestSession drSession=DataRequestSession.newSession(context);
      drSession.refreshMetaData(dataSetHandle,holdEvent);
      drSession.shutdown();
    }
  }
 catch (  BirtException ex) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{ex});
  }
}",0.7876874506708761
68023,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          axes.get(i).setPercent(true);
        }
 else {
          axes.get(i).setPercent(false);
        }
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        Series firstSeries=seriesdefinitions.get(0).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            seriesdefinitions.get(j).getSeries().clear();
            seriesdefinitions.get(j).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          axes.get(i).setPercent(true);
        }
 else {
          axes.get(i).setPercent(false);
        }
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setType(AxisType.TEXT_LITERAL);
    xAxis.setCategoryAxis(true);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          axes.get(i).setPercent(true);
        }
 else {
          axes.get(i).setPercent(false);
        }
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        Series firstSeries=seriesdefinitions.get(0).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            seriesdefinitions.get(j).getSeries().clear();
            seriesdefinitions.get(j).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          axes.get(i).setPercent(true);
        }
 else {
          axes.get(i).setPercent(false);
        }
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setType(AxisType.TEXT_LITERAL);
    xAxis.setCategoryAxis(true);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}",0.9922432835054196
68024,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
      xAxis.setCategoryAxis(false);
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(false);
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),xAxis.getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setCategoryAxis(false);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll((xAxis.getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
      xAxis.setCategoryAxis(false);
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(false);
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),xAxis.getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setCategoryAxis(false);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll((xAxis.getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.9879767497412214
68025,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
      xAxis.setCategoryAxis(true);
      EList<Axis> axes=xAxis.getAssociatedAxes();
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(false);
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),xAxis.getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setType(AxisType.TEXT_LITERAL);
    xAxis.setCategoryAxis(true);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
      xAxis.setCategoryAxis(true);
      EList<Axis> axes=xAxis.getAssociatedAxes();
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(false);
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),xAxis.getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setType(AxisType.TEXT_LITERAL);
    xAxis.setCategoryAxis(true);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  return currentChart;
}",0.9877544400291948
68026,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
      if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
        ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      }
      return currentChart;
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(BarChart.TYPE_LITERAL)|| currentChart.getType().equals(TubeChart.TYPE_LITERAL)|| currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      ((ChartWithAxes)currentChart).getAxes().get(0).setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        axes.get(i).setPercent(false);
        axes.get(i).setType(AxisType.DATE_TIME_LITERAL);
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),AxisType.DATE_TIME_LITERAL));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setType(AxisType.TEXT_LITERAL);
    xAxis.setCategoryAxis(true);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.DATE_TIME_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),AxisType.DATE_TIME_LITERAL));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  ChartUIUtil.updateDefaultAggregations(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
      if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
        ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      }
      return currentChart;
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(BarChart.TYPE_LITERAL)|| currentChart.getType().equals(TubeChart.TYPE_LITERAL)|| currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      ((ChartWithAxes)currentChart).getAxes().get(0).setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        axes.get(i).setPercent(false);
        axes.get(i).setType(AxisType.DATE_TIME_LITERAL);
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),AxisType.DATE_TIME_LITERAL));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setType(AxisType.TEXT_LITERAL);
    xAxis.setCategoryAxis(true);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.DATE_TIME_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),AxisType.DATE_TIME_LITERAL));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  ChartUIUtil.updateDefaultAggregations(currentChart);
  return currentChart;
}",0.987712588493775
68027,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      ((ChartWithAxes)currentChart).getAxes().get(0).setCategoryAxis(false);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(false);
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setType(AxisType.TEXT_LITERAL);
    xAxis.setCategoryAxis(false);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll((xAxis.getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      ((ChartWithAxes)currentChart).getAxes().get(0).setCategoryAxis(false);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(false);
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setType(AxisType.TEXT_LITERAL);
    xAxis.setCategoryAxis(false);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll((xAxis.getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.9881466363136824
68028,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        for (        Axis yAxis : xAxis.getAssociatedAxes()) {
          yAxis.setPercent(false);
          for (          SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
            Series series=ysd.getDesignTimeSeries();
            series.setStacked(false);
            if (series instanceof StockSeries) {
              ((StockSeries)series).setShowAsBarStick(BAR_STICK_SUBTYPE_LITERAL.equals(currentChart.getSubType()));
            }
          }
        }
      }
    }
 else {
      if (!currentChart.getType().equals(TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),false));
      }
      currentChart.setType(TYPE_LITERAL);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      xAxis.setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      int seriesIndex=0;
      for (      Axis yAxis : xAxis.getAssociatedAxes()) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          yAxis.setType(AxisType.LINEAR_LITERAL);
        }
        yAxis.setPercent(false);
        for (        SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
          Series series=ysd.getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex);
          series.setStacked(false);
          ysd.getSeries().clear();
          ysd.getSeries().add(series);
          seriesIndex++;
        }
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setCategoryAxis(true);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),true));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      SeriesDefinition bsd=xAxis.getSeriesDefinitions().get(0);
      Series series=bsd.getDesignTimeSeries();
      bsd.getSeries().clear();
      bsd.getSeries().add(series);
      int j=0;
      for (      SeriesDefinition vsd : yAxis.getSeriesDefinitions()) {
        series=vsd.getDesignTimeSeries();
        series=getConvertedSeries(series,j++);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        vsd.getSeries().clear();
        vsd.getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  SeriesGrouping sg=ChartUtil.getBaseSeriesDefinitions(currentChart).get(0).getGrouping();
  if (sg.getGroupType().getValue() == DataType.DATE_TIME) {
    ChartUIUtil.updateDefaultAggregations(currentChart);
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        for (        Axis yAxis : xAxis.getAssociatedAxes()) {
          yAxis.setPercent(false);
          for (          SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
            Series series=ysd.getDesignTimeSeries();
            series.setStacked(false);
            if (series instanceof StockSeries) {
              ((StockSeries)series).setShowAsBarStick(BAR_STICK_SUBTYPE_LITERAL.equals(currentChart.getSubType()));
            }
          }
        }
      }
    }
 else {
      if (!currentChart.getType().equals(TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),false));
      }
      currentChart.setType(TYPE_LITERAL);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      xAxis.setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      int seriesIndex=0;
      for (      Axis yAxis : xAxis.getAssociatedAxes()) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          yAxis.setType(AxisType.LINEAR_LITERAL);
        }
        yAxis.setPercent(false);
        for (        SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
          Series series=ysd.getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex);
          series.setStacked(false);
          ysd.getSeries().clear();
          ysd.getSeries().add(series);
          seriesIndex++;
        }
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setCategoryAxis(true);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),true));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      SeriesDefinition bsd=xAxis.getSeriesDefinitions().get(0);
      Series series=bsd.getDesignTimeSeries();
      bsd.getSeries().clear();
      bsd.getSeries().add(series);
      int j=0;
      for (      SeriesDefinition vsd : yAxis.getSeriesDefinitions()) {
        series=vsd.getDesignTimeSeries();
        series=getConvertedSeries(series,j++);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        vsd.getSeries().clear();
        vsd.getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  SeriesGrouping sg=ChartUtil.getBaseSeriesDefinitions(currentChart).get(0).getGrouping();
  if (sg.getGroupType().getValue() == DataType.DATE_TIME) {
    ChartUIUtil.updateDefaultAggregations(currentChart);
  }
  return currentChart;
}",0.9861378867162398
68029,"public HyperlinkDef parseHyperLink(IContent content){
  HyperlinkDef hyperlink=null;
  IHyperlinkAction linkAction=content.getHyperlinkAction();
  if (linkAction != null) {
    String tooltip=linkAction.getTooltip();
    String bookmark=linkAction.getBookmark();
    IReportRunnable reportRunnable=service.getReportRunnable();
    IReportContext reportContext=service.getReportContext();
    IHTMLActionHandler actionHandler=(IHTMLActionHandler)service.getOption(RenderOption.ACTION_HANDLER);
switch (linkAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
      hyperlink=new HyperlinkDef(bookmark,IHyperlinkAction.ACTION_BOOKMARK,tooltip);
    break;
case IHyperlinkAction.ACTION_HYPERLINK:
  String url=EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_HYPERLINK,tooltip);
break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
url=EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_DRILLTHROUGH,tooltip);
break;
}
}
return hyperlink;
}","public HyperlinkDef parseHyperLink(IContent content){
  HyperlinkDef hyperlink=null;
  IHyperlinkAction linkAction=content.getHyperlinkAction();
  if (linkAction != null) {
    String tooltip=linkAction.getTooltip();
    String bookmark=linkAction.getBookmark();
    IReportRunnable reportRunnable=service.getReportRunnable();
    IReportContext reportContext=service.getReportContext();
    IHTMLActionHandler actionHandler=(IHTMLActionHandler)service.getOption(RenderOption.ACTION_HANDLER);
switch (linkAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
      hyperlink=new HyperlinkDef(bookmark,IHyperlinkAction.ACTION_BOOKMARK,tooltip);
    break;
case IHyperlinkAction.ACTION_HYPERLINK:
  String url=EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_HYPERLINK,tooltip);
break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
url=EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_DRILLTHROUGH,tooltip);
break;
}
}
if (hyperlink != null) {
Color color=PropertyUtil.getColor(content.getStyle().getProperty(IStyle.STYLE_COLOR));
hyperlink.setColor(color);
}
return hyperlink;
}",0.9347917543121582
68030,"protected void setlinkStyle(StyleEntry entry,HyperlinkDef link){
  if (link != null) {
    entry.setProperty(StyleConstant.COLOR_PROP,StyleConstant.HYPERLINK_COLOR);
    entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,true);
    entry.setName(StyleEntry.ENTRYNAME_HYPERLINK);
  }
}","protected void setlinkStyle(StyleEntry entry,HyperlinkDef link){
  if (link != null) {
    Color color=link.getColor();
    if (color != null) {
      entry.setProperty(StyleConstant.COLOR_PROP,color);
    }
 else {
      entry.setProperty(StyleConstant.COLOR_PROP,StyleConstant.HYPERLINK_COLOR);
    }
    entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,true);
    entry.setName(StyleEntry.ENTRYNAME_HYPERLINK);
  }
}",0.8062234794908062
68031,"protected HyperlinkInfo getHyperlink(IContent content){
  HyperlinkInfo hyperlink=null;
  IHyperlinkAction linkAction=content.getHyperlinkAction();
  if (linkAction != null) {
    String tooltip=linkAction.getTooltip();
    String bookmark=linkAction.getBookmark();
switch (linkAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
      bookmark=bookmark.replaceAll(""String_Node_Str"",""String_Node_Str"");
    hyperlink=new HyperlinkInfo(HyperlinkInfo.BOOKMARK,bookmark,tooltip);
  break;
case IHyperlinkAction.ACTION_HYPERLINK:
case IHyperlinkAction.ACTION_DRILLTHROUGH:
String url=EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkInfo(HyperlinkInfo.HYPERLINK,url,tooltip);
break;
}
}
return hyperlink;
}","protected HyperlinkInfo getHyperlink(IContent content){
  HyperlinkInfo hyperlink=null;
  IHyperlinkAction linkAction=content.getHyperlinkAction();
  if (linkAction != null) {
    String tooltip=linkAction.getTooltip();
    String bookmark=linkAction.getBookmark();
switch (linkAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
      bookmark=bookmark.replaceAll(""String_Node_Str"",""String_Node_Str"");
    hyperlink=new HyperlinkInfo(HyperlinkInfo.BOOKMARK,bookmark,tooltip);
  break;
case IHyperlinkAction.ACTION_HYPERLINK:
case IHyperlinkAction.ACTION_DRILLTHROUGH:
String url=EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkInfo(HyperlinkInfo.HYPERLINK,url,tooltip);
break;
}
}
if (hyperlink != null) {
String color=WordUtil.parseColor(content.getStyle().getColor());
hyperlink.setColor(color);
}
return hyperlink;
}",0.9207501512401692
68032,"protected void writeRunProperties(IStyle style,String fontFamily,boolean ishyperlink){
  writeHyperlinkStyle(ishyperlink,style);
  writeFont(fontFamily);
  writeFontSize(style);
  writeLetterSpacing(style);
  writeTextLineThrough(style);
  writeFontStyle(style);
  writeFontWeight(style);
}","protected void writeRunProperties(IStyle style,String fontFamily,HyperlinkInfo info){
  writeHyperlinkStyle(info,style);
  writeFont(fontFamily);
  writeFontSize(style);
  writeLetterSpacing(style);
  writeTextLineThrough(style);
  writeFontStyle(style);
  writeFontWeight(style);
}",0.9405594405594404
68033,"private void writeHyperlinkStyle(boolean isHyperlink,IStyle style){
  if (isHyperlink) {
    writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writeTextUnderline(style);
    writeTextColor(style);
  }
}","private void writeHyperlinkStyle(HyperlinkInfo info,IStyle style){
  if (info != null) {
    String color=info.getColor();
    if (color != null) {
      writeAttrTag(""String_Node_Str"",color);
    }
    writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writeTextUnderline(style);
    writeTextColor(style);
  }
}",0.7262773722627737
68034,"/** 
 * from object class to its type index value
 * @param obValue
 * @return
 */
private static int getTypeIndex(Object obValue){
  if (obValue == null)   return TYPE_NULL;
  if (obValue instanceof String) {
    if (isLongString((String)obValue)) {
      return TYPE_LONG_STRING;
    }
 else {
      return TYPE_STRING;
    }
  }
  Integer indexOb=(Integer)type2IndexMap.get(obValue.getClass());
  if (indexOb == null) {
    if (obValue instanceof Map) {
      return TYPE_MAP;
    }
    if (obValue instanceof List) {
      return TYPE_LIST;
    }
    if (obValue instanceof Scriptable) {
      return TYPE_JSObject;
    }
    if (Timestamp.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME_STAMP;
    }
    if (Time.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME;
    }
    if (java.sql.Date.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_DATE;
    }
    if (Date.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_DATE_TIME;
    }
    if (obValue instanceof Serializable) {
      return TYPE_SERIALIZABLE;
    }
    return -1;
  }
  return indexOb.intValue();
}","/** 
 * from object class to its type index value
 * @param obValue
 * @return
 */
public static int getTypeIndex(Object obValue){
  if (obValue == null)   return TYPE_NULL;
  if (obValue instanceof String) {
    if (isLongString((String)obValue)) {
      return TYPE_LONG_STRING;
    }
 else {
      return TYPE_STRING;
    }
  }
  Integer indexOb=(Integer)type2IndexMap.get(obValue.getClass());
  if (indexOb == null) {
    if (obValue instanceof Map) {
      return TYPE_MAP;
    }
    if (obValue instanceof List) {
      return TYPE_LIST;
    }
    if (obValue instanceof Scriptable) {
      if (obValue instanceof IdScriptableObject) {
        IdScriptableObject jsObject=((IdScriptableObject)obValue);
        if (jsObject.getClassName().equals(""String_Node_Str"")) {
          return TYPE_JSObject;
        }
        return -1;
      }
 else       if (obValue instanceof NativeJavaObject) {
        return TYPE_JSObject;
      }
      return -1;
    }
    if (Timestamp.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME_STAMP;
    }
    if (Time.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME;
    }
    if (java.sql.Date.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_DATE;
    }
    if (Date.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_DATE_TIME;
    }
    if (obValue instanceof Serializable) {
      return TYPE_SERIALIZABLE;
    }
    return -1;
  }
  return indexOb.intValue();
}",0.8676639815880323
68035,"/** 
 * execute the multiline text. multiline text have two expressions define the value and type. If the value type is HTML, the value returns string in HTML. If the value type is PLAIN_TEXT, the value returns string in plain text. the handling process is: <li> create forign object <li> push it into the context <li> execute the dataset if any <li> seek to the first record <li> intialize the content <li> process style, action, bookmark, visiblity <li> evaluate the type and value <li> set the rawType to html or text. <li> call the onCreate if necessary <li> pass it to emitter <li> close the data set <li> pop the context.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#excute(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public IContent execute(){
  DynamicTextItemDesign textDesign=(DynamicTextItemDesign)getDesign();
  IForeignContent textContent=report.createForeignContent();
  setContent(textContent);
  executeQuery();
  initializeContent(textDesign,textContent);
  processStyle(textDesign,textContent);
  processBookmark(textDesign,textContent);
  processVisibility(textDesign,textContent);
  processAction(textDesign,textContent);
  processUserProperties(textDesign,textContent);
  String contentType=textDesign.getContentType();
  if (contentType == null) {
    contentType=TextItemDesign.AUTO_TEXT;
  }
  Object content=evaluate(textDesign.getContent());
  String rawType=ForeignContent.getTextRawType(contentType,content);
  if (IForeignContent.TEXT_TYPE.equals(rawType)) {
    rawType=IForeignContent.VALUE_TYPE;
  }
  textContent.setRawType(rawType);
  textContent.setRawValue(content);
  if (context.isInFactory()) {
    handleOnCreate(textContent);
  }
  startTOCEntry(textContent);
  return textContent;
}","/** 
 * execute the multiline text. multiline text have two expressions define the value and type. If the value type is HTML, the value returns string in HTML. If the value type is PLAIN_TEXT, the value returns string in plain text. the handling process is: <li> create forign object <li> push it into the context <li> execute the dataset if any <li> seek to the first record <li> intialize the content <li> process style, action, bookmark, visiblity <li> evaluate the type and value <li> set the rawType to html or text. <li> call the onCreate if necessary <li> pass it to emitter <li> close the data set <li> pop the context.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#excute(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public IContent execute(){
  DynamicTextItemDesign textDesign=(DynamicTextItemDesign)getDesign();
  IForeignContent textContent=report.createForeignContent();
  setContent(textContent);
  executeQuery();
  initializeContent(textDesign,textContent);
  processStyle(textDesign,textContent);
  processBookmark(textDesign,textContent);
  processVisibility(textDesign,textContent);
  processAction(textDesign,textContent);
  processUserProperties(textDesign,textContent);
  String contentType=textDesign.getContentType();
  if (contentType == null) {
    contentType=TextItemDesign.AUTO_TEXT;
  }
  Object content=evaluate(textDesign.getContent());
  if (content != null) {
    if (IOUtil.getTypeIndex(content) == -1) {
      content=content.toString();
    }
  }
  String rawType=ForeignContent.getTextRawType(contentType,content);
  if (IForeignContent.TEXT_TYPE.equals(rawType)) {
    rawType=IForeignContent.VALUE_TYPE;
  }
  textContent.setRawType(rawType);
  textContent.setRawValue(content);
  if (context.isInFactory()) {
    handleOnCreate(textContent);
  }
  startTOCEntry(textContent);
  return textContent;
}",0.9692431131318534
68036,"protected void initialize() throws BirtException {
  checkObjectType();
  IImageContent imageContent=(IImageContent)content;
  Image imageObject=null;
  if (isOutputSupported(objectType)) {
    if (objectType == TYPE_IMAGE_OBJECT) {
      imageObject=EmitterUtil.getImage(imageContent);
    }
    if (imageObject != null && objectType == TYPE_IMAGE_OBJECT || objectType == TYPE_FLASH_OBJECT || objectType == TYPE_SVG_OBJECT) {
      layout=new ConcreteImageLayout(context,parent,content,imageObject);
    }
 else {
      layout=createAltTextLayout(RESOURCE_UNREACHABLE);
    }
  }
 else {
    if (objectType == TYPE_SVG_OBJECT) {
      imageObject=EmitterUtil.getImage(imageContent);
      if (imageObject != null) {
        layout=new ConcreteImageLayout(context,parent,content,imageObject);
        return;
      }
    }
    layout=createAltTextLayout(UNSUPPORTED_OBJECTS);
  }
}","protected void initialize() throws BirtException {
  checkObjectType();
  IImageContent imageContent=(IImageContent)content;
  Image imageObject=null;
  if (isOutputSupported(objectType)) {
    if (objectType == TYPE_IMAGE_OBJECT) {
      imageObject=EmitterUtil.getImage(imageContent);
    }
    if (imageObject != null && objectType == TYPE_IMAGE_OBJECT || objectType == TYPE_FLASH_OBJECT || objectType == TYPE_SVG_OBJECT) {
      layout=new ConcreteImageLayout(context,parent,content,imageObject);
    }
 else {
      layout=createAltTextLayout(RESOURCE_UNREACHABLE);
    }
  }
 else {
    if (objectType == TYPE_SVG_OBJECT) {
      imageObject=EmitterUtil.getImage(imageContent);
      if (imageObject != null) {
        layout=new ConcreteImageLayout(context,parent,content,imageObject);
        return;
      }
 else {
        layout=createAltTextLayout(RESOURCE_UNREACHABLE);
        return;
      }
    }
    layout=createAltTextLayout(UNSUPPORTED_OBJECTS);
  }
}",0.9514038876889848
68037,"/** 
 * Outputs the flash.
 * @param ele
 * @param cssStyles
 * @param content
 */
protected static void outputFlash(Element ele,Map cssStyles,IContent content){
  String src=null;
  String flashVars=null;
  NodeList list=ele.getElementsByTagName(PROPERTY_PARAM);
  for (int i=0; i < list.getLength(); i++) {
    Node node=list.item(i);
    if (node instanceof Element) {
      if (""String_Node_Str"".equalsIgnoreCase(((Element)node).getAttribute(PROPERTY_NAME))) {
        src=((Element)node).getAttribute(PROPERTY_VALUE);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(((Element)node).getAttribute(PROPERTY_NAME))) {
        flashVars=((Element)node).getAttribute(PROPERTY_VALUE);
      }
    }
  }
  if (src != null) {
    ObjectContent flash=(ObjectContent)((ReportContent)(content.getReportContent())).createObjectContent();
    flash.setExtension(""String_Node_Str"");
    flash.setMIMEType(""String_Node_Str"");
    addChild(content,flash);
    handleStyle(ele,cssStyles,flash);
    if (!FileUtil.isLocalResource(src)) {
      flash.setImageSource(IImageContent.IMAGE_URL);
      flash.setURI(src);
    }
 else {
      ReportDesignHandle handle=content.getReportContent().getDesign().getReportDesign();
      URL url=handle.findResource(src,IResourceLocator.IMAGE,content.getReportContent().getReportContext() == null ? null : content.getReportContent().getReportContext().getAppContext());
      if (url != null) {
        src=url.toString();
      }
      flash.setImageSource(IImageContent.IMAGE_FILE);
      flash.setURI(src);
    }
    IForeignContent foreign=getForeignRoot(content);
    if (null != foreign) {
      flash.setWidth(foreign.getWidth());
      flash.setHeight(foreign.getHeight());
    }
    if (flashVars != null && !""String_Node_Str"".equals(flashVars)) {
      flash.addParam(""String_Node_Str"",flashVars);
    }
    String alt=ele.getAttribute(PROPERTY_ALT);
    if (alt != null && !""String_Node_Str"".equals(alt)) {
      flash.setAltText(alt);
    }
  }
}","/** 
 * Outputs the flash.
 * @param ele
 * @param cssStyles
 * @param content
 */
protected static void outputFlash(Element ele,Map cssStyles,IContent content){
  String src=null;
  String flashVars=null;
  String alt=null;
  NodeList list=ele.getElementsByTagName(PROPERTY_PARAM);
  for (int i=0; i < list.getLength(); i++) {
    Node node=list.item(i);
    if (node instanceof Element) {
      if (""String_Node_Str"".equalsIgnoreCase(((Element)node).getAttribute(PROPERTY_NAME))) {
        src=((Element)node).getAttribute(PROPERTY_VALUE);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(((Element)node).getAttribute(PROPERTY_NAME))) {
        flashVars=((Element)node).getAttribute(PROPERTY_VALUE);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(((Element)node).getAttribute(PROPERTY_NAME))) {
        alt=((Element)node).getAttribute(PROPERTY_VALUE);
      }
    }
  }
  if (src != null) {
    ObjectContent flash=(ObjectContent)((ReportContent)(content.getReportContent())).createObjectContent();
    flash.setExtension(""String_Node_Str"");
    flash.setMIMEType(""String_Node_Str"");
    addChild(content,flash);
    handleStyle(ele,cssStyles,flash);
    if (!FileUtil.isLocalResource(src)) {
      flash.setImageSource(IImageContent.IMAGE_URL);
      flash.setURI(src);
    }
 else {
      ReportDesignHandle handle=content.getReportContent().getDesign().getReportDesign();
      URL url=handle.findResource(src,IResourceLocator.IMAGE,content.getReportContent().getReportContext() == null ? null : content.getReportContent().getReportContext().getAppContext());
      if (url != null) {
        src=url.toString();
      }
      flash.setImageSource(IImageContent.IMAGE_FILE);
      flash.setURI(src);
    }
    IForeignContent foreign=getForeignRoot(content);
    if (null != foreign) {
      flash.setWidth(foreign.getWidth());
      flash.setHeight(foreign.getHeight());
    }
    if (flashVars != null && !""String_Node_Str"".equals(flashVars)) {
      flash.addParam(""String_Node_Str"",flashVars);
    }
    if (alt == null) {
      alt=ele.getAttribute(PROPERTY_ALT);
    }
    if (alt != null && !""String_Node_Str"".equals(alt)) {
      flash.setAltText(alt);
    }
  }
}",0.9475441106342394
68038,"/** 
 * update DataSetHandle
 * @param response
 * @param dataSetHandle
 * @param isSourceChanged
 */
public void updateDataSetHandle(DesignSessionResponse response,DataSetDesign requestDesign,OdaDataSetHandle dataSetHandle,boolean isSourceChanged){
  initDesignSessionFields(response);
  if (isSessionOk()) {
    EcoreUtil.EqualityHelper equalityHelper=new EcoreUtil.EqualityHelper();
    if (equalityHelper.equals(response.getDataSetDesign(),requestDesign) && equalityHelper.equals(response.getDesignerState(),this.designerState))     return;
    try {
      DataSetDesign design=response.getDataSetDesign();
      if (ReportPlugin.getDefault().getPluginPreferences().getBoolean(DateSetPreferencePage.PROMPT_ENABLE) == true) {
        IAmbiguousOption ambiguousOption=modelOdaAdapter.getAmbiguousOption(design,dataSetHandle);
        if (ambiguousOption != null && !ambiguousOption.getAmbiguousParameters().isEmpty()) {
          PromptParameterDialog dialog=new PromptParameterDialog(Messages.getString(""String_Node_Str""));
          dialog.setInput(ambiguousOption);
          if (dialog.open() == Dialog.OK) {
            Object result=dialog.getResult();
            if (result instanceof List) {
              List<OdaDataSetParameter> selectedParameters=(List)result;
              updateROMDesignerState(dataSetHandle);
              modelOdaAdapter.updateDataSetHandle(design,dataSetHandle,selectedParameters,null,isSourceChanged);
              return;
            }
          }
 else {
            updateROMDesignerState(dataSetHandle);
            modelOdaAdapter.updateDataSetHandle(design,dataSetHandle,isSourceChanged);
            return;
          }
        }
      }
      updateROMDesignerState(dataSetHandle);
      modelOdaAdapter.updateDataSetHandle(design,dataSetHandle,isSourceChanged);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
  return;
}","/** 
 * update DataSetHandle
 * @param response
 * @param dataSetHandle
 * @param isSourceChanged
 */
public void updateDataSetHandle(DesignSessionResponse response,DataSetDesign requestDesign,OdaDataSetHandle dataSetHandle,boolean isSourceChanged){
  initDesignSessionFields(response);
  if (isSessionOk()) {
    EcoreUtil.EqualityHelper equalityHelper=new EcoreUtil.EqualityHelper();
    if (equalityHelper.equals(response.getDataSetDesign(),requestDesign) && equalityHelper.equals(response.getDesignerState(),this.designerState))     return;
    try {
      DataSetDesign design=response.getDataSetDesign();
      if (ReportPlugin.getDefault().getPluginPreferences().getBoolean(DateSetPreferencePage.PROMPT_ENABLE) == true) {
        IAmbiguousOption ambiguousOption=modelOdaAdapter.getAmbiguousOption(design,dataSetHandle);
        if (ambiguousOption != null && !ambiguousOption.getAmbiguousParameters().isEmpty()) {
          PromptParameterDialog dialog=new PromptParameterDialog(Messages.getString(""String_Node_Str""));
          dialog.setInput(ambiguousOption);
          if (dialog.open() == Dialog.OK) {
            Object result=dialog.getResult();
            if (result instanceof List) {
              List<OdaDataSetParameter> selectedParameters=(List)result;
              updateROMDesignerState(dataSetHandle);
              modelOdaAdapter.updateDataSetHandle(design,dataSetHandle,selectedParameters,null,isSourceChanged);
              DataSetUIUtil.updateColumnCacheAfterCleanRs(dataSetHandle);
              return;
            }
          }
 else {
            updateROMDesignerState(dataSetHandle);
            modelOdaAdapter.updateDataSetHandle(design,dataSetHandle,isSourceChanged);
            DataSetUIUtil.updateColumnCacheAfterCleanRs(dataSetHandle);
            return;
          }
        }
      }
      updateROMDesignerState(dataSetHandle);
      modelOdaAdapter.updateDataSetHandle(design,dataSetHandle,isSourceChanged);
      DataSetUIUtil.updateColumnCacheAfterCleanRs(dataSetHandle);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
  return;
}",0.9473684210526316
68039,"/** 
 * Returns the application properties
 * @param context
 * @param props
 * @return
 */
public synchronized static Map initViewerProps(ServletContext context,Map props){
  if (props == null)   props=new HashMap();
  String file=context.getInitParameter(INIT_PARAM_CONFIG_FILE);
  if (file == null || file.trim().length() <= 0)   file=IBirtConstants.DEFAULT_VIEWER_CONFIG_FILE;
  try {
    InputStream is=null;
    if (isRelativePath(file)) {
      if (!file.startsWith(""String_Node_Str""))       file=""String_Node_Str"" + file;
      is=context.getResourceAsStream(file);
    }
 else {
      is=new FileInputStream(file);
    }
    PropertyResourceBundle bundle=new PropertyResourceBundle(is);
    if (bundle != null) {
      Enumeration keys=bundle.getKeys();
      while (keys != null && keys.hasMoreElements()) {
        String key=(String)keys.nextElement();
        String value=(String)bundle.getObject(key);
        if (key != null && value != null)         props.put(key,value);
      }
    }
  }
 catch (  Exception e) {
  }
  return props;
}","/** 
 * Returns the application properties
 * @param context
 * @param props
 * @return
 */
public synchronized static Map initViewerProps(ServletContext context,Map props){
  if (props == null)   props=new HashMap();
  String file=context.getInitParameter(INIT_PARAM_CONFIG_FILE);
  if (file == null || file.trim().length() <= 0)   file=IBirtConstants.DEFAULT_VIEWER_CONFIG_FILE;
  try {
    InputStream is=null;
    if (isRelativePath(file)) {
      if (!file.startsWith(""String_Node_Str""))       file=""String_Node_Str"" + file;
      is=context.getResourceAsStream(file);
    }
 else {
      is=new FileInputStream(file);
    }
    PropertyResourceBundle bundle=new PropertyResourceBundle(is);
    if (bundle != null) {
      Enumeration<String> keys=bundle.getKeys();
      while (keys != null && keys.hasMoreElements()) {
        String key=keys.nextElement();
        String value=(String)bundle.getObject(key);
        if (key != null && value != null)         props.put(key,value);
      }
    }
  }
 catch (  Exception e) {
  }
  return props;
}",0.9924026590693258
68040,"/** 
 * This function is used to encode an ordinary string that may contain characters or more than one consecutive spaces for appropriate HTML display.
 * @param s
 * @return String
 */
public static final String htmlEncode(String s){
  String sHtmlEncoded=""String_Node_Str"";
  if (s == null) {
    return null;
  }
  StringBuffer sbHtmlEncoded=new StringBuffer();
  final char chrarry[]=s.toCharArray();
  for (int i=0; i < chrarry.length; i++) {
    char c=chrarry[i];
switch (c) {
case '\t':
      sbHtmlEncoded.append(""String_Node_Str"");
    break;
case '\n':
  sbHtmlEncoded.append(""String_Node_Str"");
break;
case '\r':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case ' ':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '""':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '\'':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '<':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '>':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '`':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '&':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '\\':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '/':
sbHtmlEncoded.append(""String_Node_Str"");
break;
default :
sbHtmlEncoded.append(c);
}
}
sHtmlEncoded=sbHtmlEncoded.toString();
return sHtmlEncoded;
}","/** 
 * This function is used to encode an ordinary string that may contain characters or more than one consecutive spaces for appropriate HTML display.
 * @param s
 * @return String
 */
public static final String htmlEncode(String s){
  String sHtmlEncoded=""String_Node_Str"";
  if (s == null) {
    return null;
  }
  StringBuffer sbHtmlEncoded=new StringBuffer();
  final char chrarry[]=s.toCharArray();
  final int length=chrarry.length;
  for (int i=0; i < length; i++) {
    char c=chrarry[i];
switch (c) {
case '\t':
      sbHtmlEncoded.append(""String_Node_Str"");
    break;
case '\n':
  sbHtmlEncoded.append(""String_Node_Str"");
break;
case '\r':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case ' ':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '""':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '\'':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '<':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '>':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '`':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '&':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '\\':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '/':
sbHtmlEncoded.append(""String_Node_Str"");
break;
default :
if ((c > 0xd7ff && c < 0xdc00) && (i + 1) < length) {
i++;
char nc=chrarry[i];
if (nc > 0xdbff && nc < 0xe000) {
int rc=((c - 0xd7c0) << 10) | (nc & 0x3ff);
sbHtmlEncoded.append(""String_Node_Str"").append(rc).append(';');
}
 else {
sbHtmlEncoded.append(c);
sbHtmlEncoded.append(nc);
}
}
 else {
sbHtmlEncoded.append(c);
}
}
}
sHtmlEncoded=sbHtmlEncoded.toString();
return sHtmlEncoded;
}",0.868790681740322
68041,"/** 
 * Get selected column name list.
 * @param request
 * @return
 */
public static Collection getSelectedColumns(HttpServletRequest request){
  ArrayList columns=new ArrayList();
  int columnCount=getParameterAsInt(request,PARAM_SELECTEDCOLUMNNUMBER);
  for (int i=0; i < columnCount; i++) {
    String paramName=PARAM_SELECTEDCOLUMN + String.valueOf(i);
    String columnName=getParameter(request,paramName);
    if (columnName != null && !""String_Node_Str"".equals(columnName)) {
      columns.add(columnName);
    }
  }
  return columns;
}","/** 
 * Get selected column name list.
 * @param request
 * @return
 */
public static Collection getSelectedColumns(HttpServletRequest request){
  ArrayList<String> columns=new ArrayList<String>();
  int columnCount=getParameterAsInt(request,PARAM_SELECTEDCOLUMNNUMBER);
  for (int i=0; i < columnCount; i++) {
    String paramName=PARAM_SELECTEDCOLUMN + String.valueOf(i);
    String columnName=getParameter(request,paramName);
    if (columnName != null && !""String_Node_Str"".equals(columnName)) {
      columns.add(columnName);
    }
  }
  return columns;
}",0.9855072463768116
68042,"/** 
 * Get named parameters from http request. parameter names and values are all in iso-8859-1 format in request.
 * @param request incoming http request
 * @param parameterName parameter name
 * @return
 */
public static Set getParameterValues(HttpServletRequest request,String parameterName){
  Set parameterValues=null;
  String[] parameterValuesArray=request.getParameterValues(parameterName);
  if (parameterValuesArray != null) {
    parameterValues=new LinkedHashSet();
    for (int i=0; i < parameterValuesArray.length; i++) {
      parameterValues.add(parameterValuesArray[i]);
    }
  }
  return parameterValues;
}","/** 
 * Get named parameters from http request. parameter names and values are all in iso-8859-1 format in request.
 * @param request incoming http request
 * @param parameterName parameter name
 * @return
 */
public static Set getParameterValues(HttpServletRequest request,String parameterName){
  Set<String> parameterValues=null;
  String[] parameterValuesArray=request.getParameterValues(parameterName);
  if (parameterValuesArray != null) {
    parameterValues=new LinkedHashSet<String>();
    for (int i=0; i < parameterValuesArray.length; i++) {
      parameterValues.add(parameterValuesArray[i]);
    }
  }
  return parameterValues;
}",0.9873817034700316
68043,"/** 
 * Returns the application classloader
 * @return
 */
public static ClassLoader getAppClassLoader(){
  return reloadableClassLoader;
}","/** 
 * Returns the application classloader reloaded with given parent
 */
public static ClassLoader getAppClassLoader(ClassLoader parent){
  if (reloadableClassLoader != null) {
    reloadableClassLoader.setParent(parent);
    reloadableClassLoader.reload();
  }
  return reloadableClassLoader;
}",0.4587155963302752
68044,"private String getAutoText(IAutoTextContent autoText){
  String result=null;
  int type=autoText.getType();
  if (type == IAutoTextContent.PAGE_NUMBER) {
    result=""String_Node_Str"";
  }
 else   if (type == IAutoTextContent.TOTAL_PAGE) {
    result=""String_Node_Str"";
  }
  return result;
}","private String getAutoText(IAutoTextContent autoText){
  String result=null;
  int type=autoText.getType();
  if (type == IAutoTextContent.PAGE_NUMBER) {
    result=""String_Node_Str"";
  }
 else   if (type == IAutoTextContent.TOTAL_PAGE) {
    result=""String_Node_Str"";
  }
 else {
    result=autoText.getText();
  }
  return result;
}",0.88
68045,"/** 
 * @param imageName
 * @param imageTitle
 * @param width
 * @param height
 * @param x
 * @param y
 */
private void exportImageDefn(String imageName,String imageTitle,double width,double height,double x,double y,HyperlinkDef link){
  println(""String_Node_Str"" + (shapeCount) + ""String_Node_Str"");
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (tooltip != null) {
      tooltip=codeLink(tooltip);
      print(""String_Node_Str"" + tooltip + ""String_Node_Str"");
    }
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
      print(""String_Node_Str"" + link + ""String_Node_Str"");
    }
  }
  println(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + imageName + ""String_Node_Str""+ imageTitle+ ""String_Node_Str"");
  println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * @param imageName
 * @param imageTitle
 * @param width
 * @param height
 * @param x
 * @param y
 */
private void exportImageDefn(String imageName,String imageTitle,double width,double height,double x,double y,HyperlinkDef link){
  println(""String_Node_Str"" + (shapeCount) + ""String_Node_Str"");
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (tooltip != null) {
      tooltip=codeLink(tooltip);
      print(""String_Node_Str"" + tooltip + ""String_Node_Str"");
    }
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
      print(""String_Node_Str"" + hyperlink + ""String_Node_Str"");
    }
  }
  println(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + imageName + ""String_Node_Str""+ imageTitle+ ""String_Node_Str"");
  println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9975857073877354
68046,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,HyperlinkDef link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
    }
    if (tooltip != null) {
      tooltip=codeLink(tooltip);
    }
    println(""String_Node_Str"" + link + ""String_Node_Str""+ tooltip+ ""String_Node_Str""+ link+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,HyperlinkDef link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
    }
    if (tooltip != null) {
      tooltip=codeLink(tooltip);
    }
    println(""String_Node_Str"" + hyperlink + ""String_Node_Str""+ tooltip+ ""String_Node_Str""+ hyperlink+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9975562072336266
68047,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if (currentChart instanceof ChartWithAxes) {
    if (!ChartPreviewPainter.isLivePreviewActive()) {
      helperModel.setSampleData(getConvertedSampleData(helperModel.getSampleData(),(((ChartWithAxes)currentChart).getAxes().get(0)).getType(),AxisType.LINEAR_LITERAL));
    }
    currentChart=ChartWithoutAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getGridColumnCount() > 0) {
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    }
 else {
      currentChart.setGridColumnCount(1);
    }
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add((((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector<SeriesDefinition> vOSD=new Vector<SeriesDefinition>();
    Axis primaryOrthogonalAxis=((ChartWithAxes)helperModel).getAxes().get(0).getAssociatedAxes().get(0);
    EList<SeriesDefinition> osd=primaryOrthogonalAxis.getSeriesDefinitions();
    for (int j=0; j < osd.size(); j++) {
      SeriesDefinition sd=osd.get(j);
      Series series=sd.getDesignTimeSeries();
      sd.getSeries().clear();
      sd.getSeries().add(getConvertedSeries(series,j));
      vOSD.add(sd);
    }
    (((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    (((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
    }
 else {
      currentChart=ChartWithoutAxesImpl.create();
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setBlock(helperModel.getBlock());
      currentChart.setDescription(helperModel.getDescription());
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
      currentChart.setSampleData(helperModel.getSampleData());
      currentChart.setScript(helperModel.getScript());
      currentChart.setUnits(helperModel.getUnits());
      if (helperModel.getInteractivity() != null) {
        currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
        currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
      }
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      EList<SeriesDefinition> seriesdefinitions=(((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        Series series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
    }
  }
 else {
    return null;
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if (currentChart instanceof ChartWithAxes) {
    if (!ChartPreviewPainter.isLivePreviewActive()) {
      helperModel.setSampleData(getConvertedSampleData(helperModel.getSampleData(),(((ChartWithAxes)currentChart).getAxes().get(0)).getType(),AxisType.LINEAR_LITERAL));
    }
    currentChart=ChartWithoutAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getGridColumnCount() > 0) {
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    }
 else {
      currentChart.setGridColumnCount(1);
    }
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add((((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector<SeriesDefinition> vOSD=new Vector<SeriesDefinition>();
    Axis primaryOrthogonalAxis=((ChartWithAxes)helperModel).getAxes().get(0).getAssociatedAxes().get(0);
    EList<SeriesDefinition> osd=primaryOrthogonalAxis.getSeriesDefinitions();
    for (int j=0; j < osd.size(); j++) {
      SeriesDefinition sd=osd.get(j);
      Series series=sd.getDesignTimeSeries();
      sd.getSeries().clear();
      sd.getSeries().add(getConvertedSeries(series,j));
      vOSD.add(sd);
    }
    (((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    (((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
    }
 else {
      currentChart=ChartWithoutAxesImpl.create();
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setBlock(helperModel.getBlock());
      currentChart.setDescription(helperModel.getDescription());
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
      currentChart.setSampleData(helperModel.getSampleData());
      currentChart.setScript(helperModel.getScript());
      currentChart.setUnits(helperModel.getUnits());
      if (helperModel.getInteractivity() != null) {
        currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
        currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
      }
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      EList<SeriesDefinition> seriesdefinitions=(((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        Series series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
      currentChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
    }
  }
 else {
    return null;
  }
  return currentChart;
}",0.9942337547127966
68048,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithoutAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithoutAxes)getConvertedChart(currentChart,sSubType,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithoutAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  if (newChart.getDimension().equals(ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL)) {
    newChart.setSeriesThickness(15);
  }
  newChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  sdX.getSeriesPalette().shift(0);
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getQuery().setDefinition(""String_Node_Str"");
  newChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.setZOrder(1);
  sdY.getSeriesPalette().shift(0);
  RadarSeries valueSeries=RadarSeriesImpl.create();
  LineAttributes lia=LineAttributesImpl.create(ColorDefinitionImpl.GREY(),LineStyle.SOLID_LITERAL,1);
  valueSeries.setWebLineAttributes(lia);
  valueSeries.getLabel().setVisible(true);
  valueSeries.setSeriesIdentifier(""String_Node_Str"");
  sdY.getSeries().add(valueSeries);
  sdX.getSeriesDefinitions().add(sdY);
  newChart.getSeriesDefinitions().add(sdX);
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithoutAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithoutAxes)getConvertedChart(currentChart,sSubType,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithoutAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  if (newChart.getDimension().equals(ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL)) {
    newChart.setSeriesThickness(15);
  }
  newChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  sdX.getSeriesPalette().shift(0);
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getQuery().setDefinition(""String_Node_Str"");
  newChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.setZOrder(1);
  sdY.getSeriesPalette().shift(0);
  RadarSeries valueSeries=RadarSeriesImpl.create();
  LineAttributes lia=LineAttributesImpl.create(ColorDefinitionImpl.GREY(),LineStyle.SOLID_LITERAL,1);
  valueSeries.setWebLineAttributes(lia);
  valueSeries.getLabel().setVisible(true);
  valueSeries.setSeriesIdentifier(""String_Node_Str"");
  sdY.getSeries().add(valueSeries);
  sdX.getSeriesDefinitions().add(sdY);
  newChart.getSeriesDefinitions().add(sdX);
  addSampleData(newChart);
  return newChart;
}",0.9911111111111112
68049,"public RadarChart(){
}","public RadarChart(){
  chartTitle=Messages.getString(""String_Node_Str"");
}",0.4583333333333333
68050,"public ICubeOperation[] getCubeOperations(){
  return cqd.getCubeOperations();
}","public ICubeOperation[] getCubeOperations(){
  return realCubeOperations;
}",0.9290322580645162
68051,"protected void addPages(){
  List formPageList=EditorContributorManager.getInstance().getEditorContributor(getEditorSite().getId()).formPageList;
  boolean error=false;
  String fileName=getProvider().getInputPath(getEditorInput()).toOSString();
  List message=ModuleUtil.checkVersion(fileName);
  if (message.size() > 0) {
    IVersionInfo info=(IVersionInfo)message.get(0);
    if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),info.getLocalizedMessage())) {
      for (Iterator iter=formPageList.iterator(); iter.hasNext(); ) {
        FormPageDef pagedef=(FormPageDef)iter.next();
        if (XMLSourcePage_ID.equals(pagedef.id)) {
          try {
            addPage(pagedef.createPage(),pagedef.displayName);
            break;
          }
 catch (          Exception e) {
          }
        }
      }
      return;
    }
  }
  getProvider().getReportModuleHandle(getEditorInput());
  for (Iterator iter=formPageList.iterator(); iter.hasNext(); ) {
    FormPageDef pagedef=(FormPageDef)iter.next();
    try {
      addPage(pagedef.createPage(),pagedef.displayName);
    }
 catch (    Exception e) {
      error=true;
    }
  }
  if (error) {
    setActivePage(XMLSourcePage_ID);
  }
}","protected void addPages(){
  List formPageList=EditorContributorManager.getInstance().getEditorContributor(getEditorSite().getId()).formPageList;
  boolean error=false;
  String fileName=getProvider().getInputPath(getEditorInput()).toOSString();
  List message=ModuleUtil.checkVersion(fileName);
  if (message.size() > 0) {
    IVersionInfo info=(IVersionInfo)message.get(0);
    if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),info.getLocalizedMessage())) {
      for (Iterator iter=formPageList.iterator(); iter.hasNext(); ) {
        FormPageDef pagedef=(FormPageDef)iter.next();
        if (XMLSourcePage_ID.equals(pagedef.id)) {
          try {
            addPage(pagedef.createPage(),pagedef.displayName);
            break;
          }
 catch (          Exception e) {
          }
        }
      }
      return;
    }
  }
  UIUtil.processSessionResourceFolder(getEditorInput(),UIUtil.getProjectFromInput(getEditorInput()),null);
  getProvider().getReportModuleHandle(getEditorInput());
  for (Iterator iter=formPageList.iterator(); iter.hasNext(); ) {
    FormPageDef pagedef=(FormPageDef)iter.next();
    try {
      addPage(pagedef.createPage(),pagedef.displayName);
    }
 catch (    Exception e) {
      error=true;
    }
  }
  if (error) {
    setActivePage(XMLSourcePage_ID);
  }
}",0.9584788513775708
68052,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws BirtException {
  SecurityListener sl=new SecurityListener(this);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  Map<ReportElementHandle,QueryDefinition> queryMap=new HashMap<ReportElementHandle,QueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,queryMap,metaMap,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=queryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=metaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  sl.end();
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),appContext),this.toStringArray(measureNames),dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  appContext.clear();
  appContext.putAll(backupAppContext);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws BirtException {
  SecurityListener sl=new SecurityListener(this);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  Map<ReportElementHandle,QueryDefinition> queryMap=new HashMap<ReportElementHandle,QueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,queryMap,metaMap,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=new String[keyNames.length];
      dimensionKey[i]=new String[keyNames.length];
      for (int j=0; j < keyNames.length; j++) {
        factTableKey[i][j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        dimensionKey[i][j]=keyNames[j];
      }
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=queryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=metaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  sl.end();
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),appContext),this.toStringArray(measureNames),dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  appContext.clear();
  appContext.putAll(backupAppContext);
}",0.9828149886830412
68053,"/** 
 * Populate all dimensions.
 * @param cubeMaterializer
 * @param dimHandles
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension[] populateDimensions(CubeMaterializer cubeMaterializer,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,QueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap,SecurityListener sl) throws AdapterException {
  List dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  List result=new ArrayList();
  for (int i=0; i < dimHandles.size(); i++) {
    DimensionHandle dh=(DimensionHandle)dimHandles.get(i);
    IDimension dim=createdDimensions.get(dh.getName());
    if (dim == null) {
      dim=populateDimension(cubeMaterializer,dh,cubeHandle,appContext,queryMap,metaMap,sl);
      TabularDimensionHandle dimHandle=(TabularDimensionHandle)cubeHandle.getDimension(dim.getName());
      TabularHierarchyHandle hier=(TabularHierarchyHandle)dimHandle.getDefaultHierarchy();
      if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
        String[] keyNames=dim.getHierarchy().getLevels()[dim.getHierarchy().getLevels().length - 1].getKeyNames();
        for (int j=0; j < keyNames.length; j++) {
          keyNames[j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        }
      }
      createdDimensions.put(dh.getName(),dim);
    }
    result.add(dim);
  }
  IDimension[] dimArray=new IDimension[dimHandles.size()];
  for (int i=0; i < result.size(); i++) {
    dimArray[i]=(IDimension)result.get(i);
  }
  return dimArray;
}","/** 
 * Populate all dimensions.
 * @param cubeMaterializer
 * @param dimHandles
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension[] populateDimensions(CubeMaterializer cubeMaterializer,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,QueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap,SecurityListener sl) throws AdapterException {
  List dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  List result=new ArrayList();
  for (int i=0; i < dimHandles.size(); i++) {
    DimensionHandle dh=(DimensionHandle)dimHandles.get(i);
    IDimension dim=createdDimensions.get(dh.getName());
    if (dim == null) {
      dim=populateDimension(cubeMaterializer,dh,cubeHandle,appContext,queryMap,metaMap,sl);
      createdDimensions.put(dh.getName(),dim);
    }
    result.add(dim);
  }
  IDimension[] dimArray=new IDimension[dimHandles.size()];
  for (int i=0; i < result.size(); i++) {
    dimArray[i]=(IDimension)result.get(i);
  }
  return dimArray;
}",0.6712727272727272
68054,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param containerName
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath containerName,String fileName,final String sourceFileName,String cheatSheetId,boolean showCheatSheet,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  final String cheatId=cheatSheetId;
  final boolean showCheat=showCheatSheet;
  try {
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference(file.getProject())) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference(file.getProject()));
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()) != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()));
    }
    if (isPredifinedTemplate(sourceFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    UIUtil.addCreateBy(handle);
    UIUtil.setDPI(handle);
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
  }
  file.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
        BasicNewProjectResourceWizard.updatePerspective(configElement);
        if (showCheat && !cheatId.equals(""String_Node_Str"")) {
          Object oldData=Display.getCurrent().getActiveShell().getData();
          if (oldData instanceof TrayDialog) {
            Display.getCurrent().getActiveShell().setData(null);
          }
          new OpenCheatSheetAction(cheatId).run();
        }
      }
 catch (      Exception e) {
        ExceptionUtil.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param containerName
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath containerName,String fileName,final String templateFileName,final InputStream templateStream,String cheatSheetId,boolean showCheatSheet,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  final String cheatId=cheatSheetId;
  final boolean showCheat=showCheatSheet;
  try {
    ReportDesignHandle handle;
    if (templateStream == null) {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName);
    }
 else {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName,templateStream);
    }
    if (ReportPlugin.getDefault().getEnableCommentPreference(file.getProject())) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference(file.getProject()));
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()) != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()));
    }
    if (isPredifinedTemplate(templateFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    UIUtil.addCreateBy(handle);
    UIUtil.setDPI(handle);
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e,true);
  }
  file.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
        BasicNewProjectResourceWizard.updatePerspective(configElement);
        if (showCheat && !cheatId.equals(""String_Node_Str"")) {
          Object oldData=Display.getCurrent().getActiveShell().getData();
          if (oldData instanceof TrayDialog) {
            Display.getCurrent().getActiveShell().setData(null);
          }
          new OpenCheatSheetAction(cheatId).run();
        }
      }
 catch (      Exception e) {
        ExceptionUtil.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}",0.9528153507392262
68055,"public boolean performFinish(){
  final IPath containerName=newReportFileWizardPage.getContainerFullPath();
  String fn=newReportFileWizardPage.getFileName();
  final String fileName;
  if (!Platform.getOS().equals(Platform.WS_WIN32)) {
    if (!fn.endsWith(""String_Node_Str"" + fileExtension)) {
      fileName=fn + ""String_Node_Str"" + fileExtension;
    }
 else {
      fileName=fn;
    }
  }
 else {
    if (!fn.toLowerCase(Locale.getDefault()).endsWith(""String_Node_Str"" + fileExtension)) {
      fileName=fn + ""String_Node_Str"" + fileExtension;
    }
 else {
      fileName=fn;
    }
  }
  String cheatSheetIdFromPage=""String_Node_Str"";
  boolean showCheatSheetFromPage=false;
  ReportDesignHandle selTemplate=templateChoicePage.getTemplate();
  final String templateName=selTemplate.getFileName();
  cheatSheetIdFromPage=templateChoicePage.getTemplate().getCheatSheet();
  if (cheatSheetIdFromPage == null) {
    cheatSheetIdFromPage=""String_Node_Str"";
  }
  showCheatSheetFromPage=templateChoicePage.getShowCheatSheet();
  final String cheatSheetId=cheatSheetIdFromPage;
  final boolean showCheatSheet=showCheatSheetFromPage;
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException {
      try {
        doFinish(containerName,fileName,templateName,cheatSheetId,showCheatSheet,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
 finally {
        monitor.done();
      }
    }
  }
;
  try {
    getContainer().run(true,false,op);
  }
 catch (  InterruptedException e) {
    return false;
  }
catch (  InvocationTargetException e) {
    Throwable realException=e.getTargetException();
    ExceptionUtil.handle(realException);
    return false;
  }
  return true;
}","public boolean performFinish(){
  final IPath containerName=newReportFileWizardPage.getContainerFullPath();
  String fn=newReportFileWizardPage.getFileName();
  final String fileName;
  if (!Platform.getOS().equals(Platform.WS_WIN32)) {
    if (!fn.endsWith(""String_Node_Str"" + fileExtension)) {
      fileName=fn + ""String_Node_Str"" + fileExtension;
    }
 else {
      fileName=fn;
    }
  }
 else {
    if (!fn.toLowerCase(Locale.getDefault()).endsWith(""String_Node_Str"" + fileExtension)) {
      fileName=fn + ""String_Node_Str"" + fileExtension;
    }
 else {
      fileName=fn;
    }
  }
  String cheatSheetIdFromPage=""String_Node_Str"";
  boolean showCheatSheetFromPage=false;
  final ReportDesignHandle selTemplate=templateChoicePage.getTemplate();
  final String templateName=selTemplate.getFileName();
  cheatSheetIdFromPage=templateChoicePage.getTemplate().getCheatSheet();
  if (cheatSheetIdFromPage == null) {
    cheatSheetIdFromPage=""String_Node_Str"";
  }
  showCheatSheetFromPage=templateChoicePage.getShowCheatSheet();
  final String cheatSheetId=cheatSheetIdFromPage;
  final boolean showCheatSheet=showCheatSheetFromPage;
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException {
      try {
        doFinish(containerName,fileName,templateName,resolveRemoteStream(templateName,selTemplate),cheatSheetId,showCheatSheet,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
 finally {
        monitor.done();
      }
    }
  }
;
  try {
    getContainer().run(true,false,op);
  }
 catch (  InterruptedException e) {
    return false;
  }
catch (  InvocationTargetException e) {
    Throwable realException=e.getTargetException();
    ExceptionUtil.handle(realException);
    return false;
  }
  return true;
}",0.9858233369683752
68056,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param locationPath
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath locationPath,String fileName,String sourceFileName,final String cheatSheetId,final boolean showCheatSheet,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  final File file=new File(locationPath.toString(),fileName);
  try {
    File container=new File(locationPath.toString());
    boolean conExists=container.exists();
    if (!conExists) {
      conExists=container.mkdirs();
    }
    if (!conExists) {
      ExceptionUtil.openError(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference() != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference());
    }
    if (isPredifinedTemplate(sourceFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    UIUtil.addCreateBy(handle);
    UIUtil.setDPI(handle);
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        if (page == null) {
          throw new IllegalArgumentException();
        }
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
        if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
          Display.getCurrent().getActiveShell().setData(page);
          new OpenCheatSheetAction(cheatSheetId).run();
        }
      }
 catch (      Exception e) {
        ExceptionUtil.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param locationPath
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath locationPath,String fileName,final String templateFileName,final InputStream templateStream,final String cheatSheetId,final boolean showCheatSheet,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  final File file=new File(locationPath.toString(),fileName);
  try {
    File container=new File(locationPath.toString());
    boolean conExists=container.exists();
    if (!conExists) {
      conExists=container.mkdirs();
    }
    if (!conExists) {
      ExceptionUtil.openError(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    ReportDesignHandle handle;
    if (templateStream == null) {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName);
    }
 else {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName,templateStream);
    }
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference() != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference());
    }
    if (isPredifinedTemplate(templateFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    UIUtil.addCreateBy(handle);
    UIUtil.setDPI(handle);
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        if (page == null) {
          throw new IllegalArgumentException();
        }
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
        if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
          Display.getCurrent().getActiveShell().setData(page);
          new OpenCheatSheetAction(cheatSheetId).run();
        }
      }
 catch (      Exception e) {
        ExceptionUtil.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}",0.947681539807524
68057,"public boolean performFinish(){
  final IPath locPath=newReportFileWizardPage.getFileLocationFullPath();
  String fn=newReportFileWizardPage.getFileName();
  final String fileName;
  if (!Platform.getOS().equals(Platform.WS_WIN32)) {
    if (!fn.endsWith(fileExtension)) {
      fileName=fn + fileExtension;
    }
 else {
      fileName=fn;
    }
  }
 else {
    if (!fn.toLowerCase(Locale.getDefault()).endsWith(fileExtension)) {
      fileName=fn + fileExtension;
    }
 else {
      fileName=fn;
    }
  }
  String cheatSheetIdFromPage=""String_Node_Str"";
  boolean showCheatSheetFromPage=false;
  ReportDesignHandle selTemplate=templateChoicePage.getTemplate();
  final String templateFileName=selTemplate.getFileName();
  cheatSheetIdFromPage=selTemplate.getCheatSheet();
  if (cheatSheetIdFromPage == null) {
    cheatSheetIdFromPage=""String_Node_Str"";
  }
  showCheatSheetFromPage=templateChoicePage.getShowCheatSheet();
  final String cheatSheetId=cheatSheetIdFromPage;
  final boolean showCheatSheet=showCheatSheetFromPage;
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor){
      try {
        doFinish(locPath,fileName,templateFileName,cheatSheetId,showCheatSheet,monitor);
      }
  finally {
        monitor.done();
      }
    }
  }
;
  try {
    getContainer().run(true,false,op);
  }
 catch (  InterruptedException e) {
    return false;
  }
catch (  InvocationTargetException e) {
    Throwable realException=e.getTargetException();
    ExceptionUtil.handle(realException);
    return false;
  }
  return true;
}","public boolean performFinish(){
  final IPath locPath=newReportFileWizardPage.getFileLocationFullPath();
  String fn=newReportFileWizardPage.getFileName();
  final String fileName;
  if (!Platform.getOS().equals(Platform.WS_WIN32)) {
    if (!fn.endsWith(fileExtension)) {
      fileName=fn + fileExtension;
    }
 else {
      fileName=fn;
    }
  }
 else {
    if (!fn.toLowerCase(Locale.getDefault()).endsWith(fileExtension)) {
      fileName=fn + fileExtension;
    }
 else {
      fileName=fn;
    }
  }
  String cheatSheetIdFromPage=""String_Node_Str"";
  boolean showCheatSheetFromPage=false;
  final ReportDesignHandle selTemplate=templateChoicePage.getTemplate();
  final String templateFileName=selTemplate.getFileName();
  cheatSheetIdFromPage=selTemplate.getCheatSheet();
  if (cheatSheetIdFromPage == null) {
    cheatSheetIdFromPage=""String_Node_Str"";
  }
  showCheatSheetFromPage=templateChoicePage.getShowCheatSheet();
  final String cheatSheetId=cheatSheetIdFromPage;
  final boolean showCheatSheet=showCheatSheetFromPage;
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor){
      try {
        doFinish(locPath,fileName,templateFileName,resolveRemoteStream(templateFileName,selTemplate),cheatSheetId,showCheatSheet,monitor);
      }
  finally {
        monitor.done();
      }
    }
  }
;
  try {
    getContainer().run(true,false,op);
  }
 catch (  InterruptedException e) {
    return false;
  }
catch (  InvocationTargetException e) {
    Throwable realException=e.getTargetException();
    ExceptionUtil.handle(realException);
    return false;
  }
  return true;
}",0.9826302729528535
68058,"public void cancel(){
  this.session.getStopSign().stop();
}","public void cancel(){
  this.session.cancel();
}",0.7962962962962963
68059,"public void cancel(){
  this.stopSign.stop();
}","public void cancel(){
  this.stopSign.stop();
  this.stopSign=new StopSign();
}",0.746031746031746
68060,"public void fillArc(ArcRenderEvent are) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(are);
  }
  final Fill flBackground=validateMultipleFill(are.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cl=(ColorDefinition)flBackground;
    final Color clrPrevious=_g2d.getColor();
    final Color currentColor=(Color)_ids.getColor(cl);
    _g2d.setColor(currentColor);
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
    _g2d.setColor(clrPrevious);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    Bounds bo=are.getBounds();
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    final Paint pPrevious=_g2d.getPaint();
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
    _g2d.setPaint(pPrevious);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    final Bounds bo=are.getBounds();
    final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
    Shape shPreviousClip=_g2d.getClip();
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        fArea.intersect(ar1);
      }
      _g2d.setClip(fArea);
    }
 else {
      final Shape shArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle()));
      Area ar2=new Area(shArc);
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
    }
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        byte[] data=Base64.decodeBase64(((EmbeddedImage)flBackground).getData().getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(SecurityUtil.newURL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Size szImage=_ids.getSize(img);
    int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
    int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
    ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shPreviousClip);
  }
}","public void fillArc(ArcRenderEvent are) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(are);
  }
  final Fill flBackground=validateMultipleFill(are.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cl=(ColorDefinition)flBackground;
    final Color clrPrevious=_g2d.getColor();
    final Color currentColor=(Color)_ids.getColor(cl);
    _g2d.setColor(currentColor);
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
    _g2d.setColor(clrPrevious);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    Bounds bo=are.getBounds();
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    final Paint pPrevious=_g2d.getPaint();
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
    _g2d.setPaint(pPrevious);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    final Bounds bo=are.getBounds();
    final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
    Shape shPreviousClip=_g2d.getClip();
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        fArea.intersect(ar1);
      }
      _g2d.setClip(fArea);
    }
 else {
      final Shape shArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle()));
      Area ar2=new Area(shArc);
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
    }
    java.awt.Image img=createImageFromModel(flBackground);
    if (img != null) {
      final Size szImage=_ids.getSize(img);
      int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
      int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
      ImageObserver io=(ImageObserver)_ids.getObserver();
      for (int i=0; i < iXRepeat; i++) {
        for (int j=0; j < iYRepeat; j++) {
          _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
        }
      }
    }
    _g2d.setClip(shPreviousClip);
  }
}",0.939486760601729
68061,"public void fillPolygon(PolygonRenderEvent pre) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(pre);
  }
  final Fill flBackground=validateMultipleFill(pre.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Location[] loa=pre.getPoints();
  final int[][] i2a=getCoordinatesAsInts(loa);
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(new Polygon(i2a[0],i2a[1],loa.length));
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    final double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    final double dMinX=BaseRenderer.getX(loa,IConstants.MIN);
    final double dMaxX=BaseRenderer.getX(loa,IConstants.MAX);
    final double dMinY=BaseRenderer.getY(loa,IConstants.MIN);
    final double dMaxY=BaseRenderer.getY(loa,IConstants.MAX);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(dMinX,dMaxY);
      p2dEnd=new Point2D.Double(dMinX,dMinY);
    }
 else     if (dAngleInDegrees == -90) {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMinX,dMaxY);
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(dMinX,dMaxY);
      p2dEnd=new Point2D.Double(dMaxX,dMaxY - (dMaxX - dMinX) * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMaxX,dMinY + (dMaxX - dMinX) * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMaxX,dMinY);
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(new Polygon(i2a[0],i2a[1],loa.length));
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        byte[] data=Base64.decodeBase64(((EmbeddedImage)flBackground).getData().getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(SecurityUtil.newURL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Shape shClip=_g2d.getClip();
    Area ar2=new Area(new Polygon(i2a[0],i2a[1],loa.length));
    if (shClip != null) {
      Area ar1=new Area(shClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    final double dMinX=BaseRenderer.getX(loa,IConstants.MIN);
    final double dMaxX=BaseRenderer.getX(loa,IConstants.MAX);
    final double dMinY=BaseRenderer.getY(loa,IConstants.MIN);
    final double dMaxY=BaseRenderer.getY(loa,IConstants.MAX);
    final Size szImage=_ids.getSize(img);
    final int iXRepeat=(int)(Math.ceil((dMaxX - dMinX) / szImage.getWidth()));
    final int iYRepeat=(int)(Math.ceil((dMaxY - dMinY) / szImage.getHeight()));
    final ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(dMinX + i * szImage.getWidth()),(int)(dMinY + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shClip);
  }
}","public void fillPolygon(PolygonRenderEvent pre) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(pre);
  }
  final Fill flBackground=validateMultipleFill(pre.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Location[] loa=pre.getPoints();
  final int[][] i2a=getCoordinatesAsInts(loa);
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(new Polygon(i2a[0],i2a[1],loa.length));
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    final double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    final double dMinX=BaseRenderer.getX(loa,IConstants.MIN);
    final double dMaxX=BaseRenderer.getX(loa,IConstants.MAX);
    final double dMinY=BaseRenderer.getY(loa,IConstants.MIN);
    final double dMaxY=BaseRenderer.getY(loa,IConstants.MAX);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(dMinX,dMaxY);
      p2dEnd=new Point2D.Double(dMinX,dMinY);
    }
 else     if (dAngleInDegrees == -90) {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMinX,dMaxY);
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(dMinX,dMaxY);
      p2dEnd=new Point2D.Double(dMaxX,dMaxY - (dMaxX - dMinX) * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMaxX,dMinY + (dMaxX - dMinX) * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMaxX,dMinY);
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(new Polygon(i2a[0],i2a[1],loa.length));
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=createImageFromModel(flBackground);
    if (img != null) {
      final Shape shClip=_g2d.getClip();
      Area ar2=new Area(new Polygon(i2a[0],i2a[1],loa.length));
      if (shClip != null) {
        Area ar1=new Area(shClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      final double dMinX=BaseRenderer.getX(loa,IConstants.MIN);
      final double dMaxX=BaseRenderer.getX(loa,IConstants.MAX);
      final double dMinY=BaseRenderer.getY(loa,IConstants.MIN);
      final double dMaxY=BaseRenderer.getY(loa,IConstants.MAX);
      final Size szImage=_ids.getSize(img);
      final int iXRepeat=(int)(Math.ceil((dMaxX - dMinX) / szImage.getWidth()));
      final int iYRepeat=(int)(Math.ceil((dMaxY - dMinY) / szImage.getHeight()));
      final ImageObserver io=(ImageObserver)_ids.getObserver();
      for (int i=0; i < iXRepeat; i++) {
        for (int j=0; j < iYRepeat; j++) {
          _g2d.drawImage(img,(int)(dMinX + i * szImage.getWidth()),(int)(dMinY + j * szImage.getHeight()),io);
        }
      }
      _g2d.setClip(shClip);
    }
  }
}",0.8845012259646406
68062,"public void fillRectangle(RectangleRenderEvent rre) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(rre);
  }
  final Fill flBackground=validateMultipleFill(rre.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Bounds bo=normalizeBounds(rre.getBounds());
  final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(r2d);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(r2d);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        String imageData=((EmbeddedImage)flBackground).getData();
        if (imageData == null) {
          imageData=""String_Node_Str"";
        }
        byte[] data=Base64.decodeBase64(imageData.getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(SecurityUtil.newURL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Shape shClip=_g2d.getClip();
    Area ar2=new Area(r2d);
    if (shClip != null) {
      Area ar1=new Area(shClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    final Size szImage=_ids.getSize(img);
    int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
    int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
    ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shClip);
  }
}","public void fillRectangle(RectangleRenderEvent rre) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(rre);
  }
  final Fill flBackground=validateMultipleFill(rre.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Bounds bo=normalizeBounds(rre.getBounds());
  final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(r2d);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(r2d);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=createImageFromModel(flBackground);
    if (img != null) {
      final Shape shClip=_g2d.getClip();
      Area ar2=new Area(r2d);
      if (shClip != null) {
        Area ar1=new Area(shClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      final Size szImage=_ids.getSize(img);
      int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
      int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
      ImageObserver io=(ImageObserver)_ids.getObserver();
      for (int i=0; i < iXRepeat; i++) {
        for (int j=0; j < iYRepeat; j++) {
          _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
        }
      }
      _g2d.setClip(shClip);
    }
  }
}",0.8132688320663441
68063,"public void fillOval(OvalRenderEvent ore) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(ore);
  }
  final Fill flBackground=validateMultipleFill(ore.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Bounds bo=ore.getBounds();
  final Ellipse2D.Double e2d=new Ellipse2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(e2d);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(e2d);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        byte[] data=Base64.decodeBase64(((EmbeddedImage)flBackground).getData().getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(SecurityUtil.newURL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Shape shClip=_g2d.getClip();
    Area ar2=new Area(e2d);
    if (shClip != null) {
      Area ar1=new Area(shClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    final Size szImage=_ids.getSize(img);
    int iXRepeat=(int)(Math.ceil(e2d.width / szImage.getWidth()));
    int iYRepeat=(int)(Math.ceil(e2d.height / szImage.getHeight()));
    ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(e2d.x + i * szImage.getWidth()),(int)(e2d.y + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shClip);
  }
}","public void fillOval(OvalRenderEvent ore) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(ore);
  }
  final Fill flBackground=validateMultipleFill(ore.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Bounds bo=ore.getBounds();
  final Ellipse2D.Double e2d=new Ellipse2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(e2d);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(e2d);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=createImageFromModel(flBackground);
    if (img != null) {
      final Shape shClip=_g2d.getClip();
      Area ar2=new Area(e2d);
      if (shClip != null) {
        Area ar1=new Area(shClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      final Size szImage=_ids.getSize(img);
      int iXRepeat=(int)(Math.ceil(e2d.width / szImage.getWidth()));
      int iYRepeat=(int)(Math.ceil(e2d.height / szImage.getHeight()));
      ImageObserver io=(ImageObserver)_ids.getObserver();
      for (int i=0; i < iXRepeat; i++) {
        for (int j=0; j < iYRepeat; j++) {
          _g2d.drawImage(img,(int)(e2d.x + i * szImage.getWidth()),(int)(e2d.y + j * szImage.getHeight()),io);
        }
      }
      _g2d.setClip(shClip);
    }
  }
}",0.8283486888731396
68064,"private final void fillPathImage(Path path,org.eclipse.birt.chart.model.attribute.Image g) throws ChartException {
  org.eclipse.swt.graphics.Image img=null;
  if (g instanceof EmbeddedImage) {
    try {
      String imageData=((EmbeddedImage)g).getData();
      if (imageData != null) {
        ByteArrayInputStream bis=new ByteArrayInputStream(Base64.decodeBase64(((EmbeddedImage)g).getData().getBytes()));
        img=new org.eclipse.swt.graphics.Image(((SwtDisplayServer)_ids).getDevice(),bis);
      }
 else {
        img=new org.eclipse.swt.graphics.Image(((SwtDisplayServer)_ids).getDevice(),10,10);
      }
    }
 catch (    Exception ilex) {
      throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,ilex);
    }
  }
 else {
    final String sUrl=g.getURL();
    try {
      img=(org.eclipse.swt.graphics.Image)_ids.loadImage(SecurityUtil.newURL(sUrl));
    }
 catch (    MalformedURLException muex) {
      throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,muex);
    }
  }
  Pattern pattern=new Pattern(_gc.getDevice(),img);
  _gc.setBackgroundPattern(pattern);
  _gc.fillPath(path);
  pattern.dispose();
  img.dispose();
}","private final void fillPathImage(Path path,org.eclipse.birt.chart.model.attribute.Image g) throws ChartException {
  org.eclipse.swt.graphics.Image img=null;
  if (g instanceof EmbeddedImage) {
    try {
      String imageData=((EmbeddedImage)g).getData();
      if (imageData != null) {
        ByteArrayInputStream bis=new ByteArrayInputStream(Base64.decodeBase64(((EmbeddedImage)g).getData().getBytes()));
        img=new org.eclipse.swt.graphics.Image(((SwtDisplayServer)_ids).getDevice(),bis);
      }
 else {
        img=new org.eclipse.swt.graphics.Image(((SwtDisplayServer)_ids).getDevice(),10,10);
      }
    }
 catch (    Exception ilex) {
      throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,ilex);
    }
  }
 else   if (g instanceof PatternImage) {
    PatternImage patternImage=(PatternImage)g;
    img=createImageFromPattern(patternImage);
  }
 else {
    final String sUrl=g.getURL();
    try {
      img=(org.eclipse.swt.graphics.Image)_ids.loadImage(SecurityUtil.newURL(sUrl));
    }
 catch (    MalformedURLException muex) {
      throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,muex);
    }
  }
  Pattern pattern=new Pattern(_gc.getDevice(),img);
  _gc.setBackgroundPattern(pattern);
  _gc.fillPath(path);
  pattern.dispose();
  img.dispose();
}",0.9450199203187252
68065,"protected void loadVariableLazily(){
  if (globalVariables != null) {
    ClassLoader loader=getClassLoader();
    ReportDocumentCoreInfo documentInfo=loadParametersAndVariables(loader);
    this.globalVariables=documentInfo.globalVariables;
    this.parameters=documentInfo.parameters;
  }
}","protected void loadVariableLazily(){
  if (globalVariables == null) {
    ClassLoader loader=getClassLoader();
    ReportDocumentCoreInfo documentInfo=loadParametersAndVariables(loader);
    this.globalVariables=documentInfo.globalVariables;
    this.parameters=documentInfo.parameters;
  }
}",0.9965753424657534
68066,"public Object get(int index){
  RangeCheck(index);
  if (index / cacheSize != this.currentCacheNo) {
    try {
      saveToDisk();
    }
 catch (    DataException e) {
      e.printStackTrace();
    }
    this.currentCacheNo=index / cacheSize;
    try {
      loadFromDisk();
    }
 catch (    DataException e) {
      e.printStackTrace();
    }
  }
  return this.currentCache.get(index - this.currentCacheNo * cacheSize);
}","public Object get(int index){
  RangeCheck(index);
  if (index / cacheSize != this.currentCacheNo) {
    try {
      saveToDisk();
    }
 catch (    DataException e) {
    }
    this.currentCacheNo=index / cacheSize;
    try {
      loadFromDisk();
    }
 catch (    DataException e) {
    }
  }
  return this.currentCache.get(index - this.currentCacheNo * cacheSize);
}",0.7506297229219143
68067,"/** 
 * @param imageName
 * @param imageTitle
 * @param width
 * @param height
 * @param x
 * @param y
 */
private void exportImageDefn(String imageName,String imageTitle,double width,double height,double x,double y,HyperlinkDef link){
  println(""String_Node_Str"" + (shapeCount) + ""String_Node_Str"");
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (tooltip != null) {
      tooltip=codeLink(tooltip);
      print(""String_Node_Str"" + tooltip + ""String_Node_Str"");
    }
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
      print(""String_Node_Str"" + link + ""String_Node_Str"");
    }
  }
  println(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + imageName + ""String_Node_Str""+ imageTitle+ ""String_Node_Str"");
  println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * @param imageName
 * @param imageTitle
 * @param width
 * @param height
 * @param x
 * @param y
 */
private void exportImageDefn(String imageName,String imageTitle,double width,double height,double x,double y,HyperlinkDef link){
  println(""String_Node_Str"" + (shapeCount) + ""String_Node_Str"");
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (tooltip != null) {
      tooltip=codeLink(tooltip);
      print(""String_Node_Str"" + tooltip + ""String_Node_Str"");
    }
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
      print(""String_Node_Str"" + hyperlink + ""String_Node_Str"");
    }
  }
  println(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + imageName + ""String_Node_Str""+ imageTitle+ ""String_Node_Str"");
  println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9975857073877354
68068,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,HyperlinkDef link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
    }
    if (tooltip != null) {
      tooltip=codeLink(tooltip);
    }
    println(""String_Node_Str"" + link + ""String_Node_Str""+ tooltip+ ""String_Node_Str""+ link+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,HyperlinkDef link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
    }
    if (tooltip != null) {
      tooltip=codeLink(tooltip);
    }
    println(""String_Node_Str"" + hyperlink + ""String_Node_Str""+ tooltip+ ""String_Node_Str""+ hyperlink+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9975562072336266
68069,"public void endContainer(IContainerContent container){
  boolean flag=hasForeignParent(container);
  if (flag) {
    if (!CSSConstants.CSS_INLINE_VALUE.equalsIgnoreCase(container.getComputedStyle().getDisplay())) {
      adjustInline();
    }
    if (!styles.isEmpty()) {
      styles.pop();
    }
    if (!inlineStyles.isEmpty()) {
      inlineStyles.pop();
    }
    if (!CSSConstants.CSS_INLINE_VALUE.equalsIgnoreCase(container.getComputedStyle().getDisplay())) {
      if (inForeign && hasPInside) {
        context.addContainer(false);
        hasPInside=false;
      }
 else {
        context.addContainer(true);
      }
      context.setLastIsTable(true);
    }
  }
}","public void endContainer(IContainerContent container){
  boolean flag=hasForeignParent(container);
  if (flag) {
    if (!CSSConstants.CSS_INLINE_VALUE.equalsIgnoreCase(container.getComputedStyle().getDisplay())) {
      adjustInline();
    }
    if (!styles.isEmpty()) {
      styles.pop();
    }
    if (!inlineStyles.isEmpty()) {
      inlineStyles.pop();
    }
    if (!CSSConstants.CSS_INLINE_VALUE.equalsIgnoreCase(container.getComputedStyle().getDisplay())) {
      if (inForeign && hasPInside) {
        context.addContainer(false);
        hasPInside=false;
      }
 else       if (!inForeign) {
        context.addContainer(true);
      }
      context.setLastIsTable(true);
    }
  }
}",0.983941605839416
68070,"public void setUp() throws Exception {
  super.setUp();
  this.dataSet.setDistinctValue(true);
}","public void setUp() throws Exception {
  super.setUp();
}",0.7450980392156863
68071,"/** 
 * @throws Exception
 */
public void testBasic() throws Exception {
  QueryDefinition queryDefn=newReportQuery();
  String[] name=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ScriptExpression[] se=new ScriptExpression[name.length];
  se[0]=new ScriptExpression(""String_Node_Str"");
  se[1]=new ScriptExpression(""String_Node_Str"");
  se[2]=new ScriptExpression(""String_Node_Str"");
  se[3]=new ScriptExpression(""String_Node_Str"");
  se[4]=new ScriptExpression(""String_Node_Str"");
  se[5]=new ScriptExpression(""String_Node_Str"");
  for (int i=0; i < name.length; i++)   queryDefn.addResultSetExpression(name[i],se[i]);
  IResultIterator ri=executeQuery(queryDefn);
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < name.length; i++) {
      str+=ri.getValue(name[i]);
      if (i < name.length - 1)       str+=""String_Node_Str"";
    }
    testPrintln(str);
  }
  checkOutputFile();
}","/** 
 * @throws Exception
 */
public void testBasic() throws Exception {
  this.dataSet.setDistinctValue(true);
  QueryDefinition queryDefn=newReportQuery();
  String[] name=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ScriptExpression[] se=new ScriptExpression[name.length];
  se[0]=new ScriptExpression(""String_Node_Str"");
  se[1]=new ScriptExpression(""String_Node_Str"");
  se[2]=new ScriptExpression(""String_Node_Str"");
  se[3]=new ScriptExpression(""String_Node_Str"");
  se[4]=new ScriptExpression(""String_Node_Str"");
  se[5]=new ScriptExpression(""String_Node_Str"");
  for (int i=0; i < name.length; i++)   queryDefn.addResultSetExpression(name[i],se[i]);
  IResultIterator ri=executeQuery(queryDefn);
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < name.length; i++) {
      str+=ri.getValue(name[i]);
      if (i < name.length - 1)       str+=""String_Node_Str"";
    }
    testPrintln(str);
  }
  checkOutputFile();
}",0.9807217004448838
68072,"private void createPreviewArea(Composite composite){
  Composite previewArea=new Composite(composite,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=250;
  gd.heightHint=200;
  previewArea.setLayoutData(gd);
  previewArea.setLayout(new FillLayout());
  previewCanvas=new IconCanvas(previewArea);
}","private void createPreviewArea(Composite composite){
  Composite previewArea=new Composite(composite,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=250;
  gd.heightHint=200;
  previewArea.setLayoutData(gd);
  previewArea.setLayout(new FillLayout());
  previewCanvas=new IconCanvas(previewArea);
  previewCanvas.setSize(250,200);
}",0.9502923976608189
68073,"private void initURIEditor(){
  String uri=""String_Node_Str"";
  if (cursor.getImage().size() > 0) {
    uri=cursor.getImage().get(0).getURL();
  }
  txtUriEditor.setText(uri);
  txtUriEditor.setFocus();
  updateButtons();
  previewCanvas.pack();
  preview(removeQuote(txtUriEditor.getText()));
}","private void initURIEditor(){
  String uri=""String_Node_Str"";
  if (cursor.getImage().size() > 0) {
    uri=cursor.getImage().get(0).getURL();
  }
  txtUriEditor.setText(uri);
  txtUriEditor.setFocus();
  updateButtons();
  preview(removeQuote(txtUriEditor.getText()));
}",0.9575971731448764
68074,"/** 
 * @param dataSet
 * @param resultSet
 * @throws BirtException
 */
private void saveResultToDataItems(DataSetHandle dataSet,IQueryResults resultSet) throws BirtException {
  IResultMetaData metaData=resultSet.getResultMetaData();
  int columnCount=0;
  if (metaData != null)   columnCount=metaData.getColumnCount();
  DataSetViewData[] columns=new DataSetViewData[columnCount];
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int n=0; n < columns.length; n++) {
    orgColumnNameSet.add(metaData.getColumnName(n + 1));
  }
  for (int n=0; n < columns.length; n++) {
    columns[n]=new DataSetViewData();
    columns[n].setParent(dataSet);
    columns[n].setDataType(metaData.getColumnType(n + 1));
    columns[n].setDataTypeName(metaData.getColumnTypeName(n + 1));
    columns[n].setPosition(n + 1);
    columns[n].setAlias(metaData.getColumnAlias(n + 1));
    columns[n].setComputedColumn(metaData.isComputedColumn(n + 1));
    String columnName=metaData.getColumnName(n + 1);
    String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,n);
    columns[n].setDataSetColumnName(uniqueColumnName);
    uniqueColumnNameSet.add(uniqueColumnName);
    ColumnHintHandle hint=findColumnHint(dataSet,columns[n].getName());
    if (hint != null) {
      columns[n].setAnalysis(hint.getAnalysis());
      columns[n].setACLExpression(hint.getACLExpression());
      columns[n].setFormat(hint.getFormat());
      columns[n].setDisplayLength(hint.getDisplayLength());
      columns[n].setHeading(hint.getHeading());
      columns[n].setHelpText(hint.getHelpText());
      columns[n].setHorizontalAlign(hint.getHorizontalAlign());
      columns[n].setTextFormat(hint.getTextFormat());
      columns[n].setDescription(hint.getDescription());
    }
    if (!uniqueColumnName.equals(columnName))     updateModelColumn(dataSet,columns[n]);
  }
  updateModel(dataSet,columns);
  htColumns.put(dataSet,columns);
}","/** 
 * @param dataSet
 * @param resultSet
 * @throws BirtException
 */
private void saveResultToDataItems(DataSetHandle dataSet,IQueryResults resultSet) throws BirtException {
  IResultMetaData metaData=resultSet.getResultMetaData();
  int columnCount=0;
  if (metaData != null)   columnCount=metaData.getColumnCount();
  DataSetViewData[] columns=new DataSetViewData[columnCount];
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int n=0; n < columns.length; n++) {
    orgColumnNameSet.add(metaData.getColumnName(n + 1));
  }
  for (int n=0; n < columns.length; n++) {
    columns[n]=new DataSetViewData();
    columns[n].setParent(dataSet);
    columns[n].setDataType(metaData.getColumnType(n + 1));
    columns[n].setDataTypeName(metaData.getColumnTypeName(n + 1));
    columns[n].setPosition(n + 1);
    columns[n].setAlias(metaData.getColumnAlias(n + 1));
    columns[n].setComputedColumn(metaData.isComputedColumn(n + 1));
    String columnName=metaData.getColumnName(n + 1);
    String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,n);
    columns[n].setDataSetColumnName(uniqueColumnName);
    uniqueColumnNameSet.add(uniqueColumnName);
    ColumnHintHandle hint=findColumnHint(dataSet,columns[n].getName());
    if (hint != null) {
      columns[n].setAnalysis(hint.getAnalysis());
      columns[n].setACLExpression(hint.getACLExpression());
      columns[n].setFormat(hint.getFormat());
      columns[n].setDisplayLength(hint.getDisplayLength());
      columns[n].setHeading(hint.getHeading());
      columns[n].setHelpText(hint.getHelpText());
      columns[n].setHorizontalAlign(hint.getHorizontalAlign());
      columns[n].setTextFormat(hint.getTextFormat());
      columns[n].setDescription(hint.getDescription());
      columns[n].setWordWrap(hint.wordWrap());
    }
    if (!uniqueColumnName.equals(columnName))     updateModelColumn(dataSet,columns[n]);
  }
  updateModel(dataSet,columns);
  htColumns.put(dataSet,columns);
}",0.9882411808856644
68075,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}",0.986768597471332
68076,"/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
    }
  }
  return items;
}","/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
    }
  }
  return items;
}",0.9840482098546616
68077,"/** 
 * collection all custom properties
 * @param props
 * @return
 */
Properties collectCustomProperties(Properties props){
  if (props == null)   props=new Properties();
  props.setProperty(Constants.ODADriverClass,getDriverClass());
  props.setProperty(Constants.ODAURL,getDriverURL());
  props.setProperty(Constants.ODAUser,getODAUser());
  props.setProperty(Constants.ODAPassword,getODAPassword());
  props.setProperty(Constants.ODAJndiName,getODAJndiName());
  props=bidiSupportObj.addBidiProperties(props);
  return props;
}","/** 
 * collection all custom properties
 * @param props
 * @return
 */
Properties collectCustomProperties(Properties props){
  if (props == null)   props=new Properties();
  if (!EMPTY_STRING.equals(getDriverClass()))   props.setProperty(Constants.ODADriverClass,getDriverClass());
  if (!EMPTY_STRING.equals(getDriverURL()))   props.setProperty(Constants.ODAURL,getDriverURL());
  if (!EMPTY_STRING.equals(getODAUser()))   props.setProperty(Constants.ODAUser,getODAUser());
  if (!EMPTY_STRING.equals(getODAPassword()))   props.setProperty(Constants.ODAPassword,getODAPassword());
  if (!EMPTY_STRING.equals(getODAJndiName()))   props.setProperty(Constants.ODAJndiName,getODAJndiName());
  props=bidiSupportObj.addBidiProperties(props);
  return props;
}",0.8260869565217391
68078,"private void updateButtons(){
  getButton(IDialogConstants.OK_ID).setEnabled(true);
}","private void updateButtons(){
  boolean complete=txtUriEditor.getText() != null && txtUriEditor.getText().trim().length() > 0;
  if (complete) {
    try {
      new URL(removeQuote(txtUriEditor.getText().trim()));
    }
 catch (    Exception e) {
      complete=false;
    }
  }
  if (!complete) {
    previewCanvas.clear();
  }
  btnPreview.setEnabled(complete);
  getButton(IDialogConstants.OK_ID).setEnabled(complete);
}",0.3228346456692913
68079,"public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == btnUriBuilder) {
    try {
      String sExpr=context.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtUriEditor.getText(),context.getExtendedItem(),title.getText());
      txtUriEditor.setText(sExpr == null ? ""String_Node_Str"" : sExpr);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
}","public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == btnPreview) {
    preview(removeQuote(txtUriEditor.getText()));
  }
}",0.4660194174757281
68080,"private void createInputArea(Composite parent){
  inputArea=new Composite(parent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  inputArea.setLayoutData(gd);
  GridLayout gl=new GridLayout();
  gl.numColumns=2;
  inputArea.setLayout(gl);
  title=new Label(inputArea,SWT.NONE);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  title.setLayoutData(gd);
  Label l=new Label(inputArea,SWT.NONE);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  l.setLayoutData(gd);
  l.setText(Messages.getString(""String_Node_Str""));
  txtUriEditor=new Text(inputArea,SWT.SINGLE | SWT.BORDER);
  txtUriEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  txtUriEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  txtUriEditor.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      preview(removeQuote(txtUriEditor.getText()));
    }
  }
);
  btnUriBuilder=new Button(inputArea,SWT.PUSH);
  gd=new GridData();
  ChartUIUtil.setChartImageButtonSizeByPlatform(gd);
  btnUriBuilder.setLayoutData(gd);
  btnUriBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
  btnUriBuilder.addSelectionListener(this);
  btnUriBuilder.setToolTipText(org.eclipse.birt.chart.ui.i18n.Messages.getString(""String_Node_Str""));
}","private void createInputArea(Composite parent){
  inputArea=new Composite(parent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  inputArea.setLayoutData(gd);
  GridLayout gl=new GridLayout();
  gl.numColumns=2;
  inputArea.setLayout(gl);
  title=new Label(inputArea,SWT.NONE);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  title.setLayoutData(gd);
  Label l=new Label(inputArea,SWT.NONE);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  l.setLayoutData(gd);
  l.setText(Messages.getString(""String_Node_Str""));
  txtUriEditor=new Text(inputArea,SWT.SINGLE | SWT.BORDER);
  txtUriEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  txtUriEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  txtUriEditor.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      preview(removeQuote(txtUriEditor.getText()));
    }
  }
);
  btnPreview=new Button(inputArea,SWT.NONE);
  gd=new GridData();
  btnPreview.setLayoutData(gd);
  btnPreview.addSelectionListener(this);
  btnPreview.setText(Messages.getString(""String_Node_Str""));
}",0.8088406359053897
68081,"private void updateButtons(){
  boolean complete=uriEditor.getText() != null && uriEditor.getText().trim().length() > 0;
  URL url=null;
  try {
    url=new URL(removeQuote(uriEditor.getText().trim()));
    if (selectedType == EMBEDDED_TYPE) {
      File file=new File(url.getPath());
      complete=file.exists() && file.isAbsolute();
    }
  }
 catch (  Exception e) {
    complete=false;
  }
  previewButton.setEnabled(complete);
  getButton(IDialogConstants.OK_ID).setEnabled(complete);
  browseButton.setVisible(embedded.getSelection());
}","private void updateButtons(){
  boolean complete=uriEditor.getText() != null && uriEditor.getText().trim().length() > 0;
  URL url=null;
  try {
    url=new URL(removeQuote(uriEditor.getText().trim()));
    if (selectedType == EMBEDDED_TYPE) {
      File file=new File(url.getPath());
      complete=file.exists() && file.isAbsolute();
    }
  }
 catch (  Exception e) {
    complete=false;
  }
  previewButton.setEnabled(complete);
  getButton(IDialogConstants.OK_ID).setEnabled(complete);
  if (!complete) {
    previewCanvas.clear();
  }
  browseButton.setVisible(embedded.getSelection());
}",0.9507908611599296
68082,"private static void addAllBindingAsSortKey(IQueryDefinition queryDefn) throws DataException {
  if (!(queryDefn instanceof BaseQueryDefinition)) {
    return;
  }
  Set<String> sortedBinding=new HashSet<String>();
  List<ISortDefinition> sorts=queryDefn.getSorts();
  if (sorts != null) {
    for (    ISortDefinition sd : sorts) {
      List<String> bindingNames=ExpressionCompilerUtil.extractColumnExpression(sd.getExpression(),ExpressionUtil.ROW_INDICATOR);
      if (bindingNames != null) {
        for (        String bindingName : bindingNames) {
          sortedBinding.add(bindingName);
        }
      }
    }
  }
  Iterator bindings=queryDefn.getBindings().values().iterator();
  BaseQueryDefinition queryDefinition=((BaseQueryDefinition)queryDefn);
  while (bindings.hasNext()) {
    IBinding binding=(IBinding)bindings.next();
    if (!sortedBinding.contains(binding.getBindingName())) {
      SortDefinition sd=new SortDefinition();
      sd.setExpression(ExpressionUtil.createJSRowExpression(binding.getBindingName()));
      queryDefinition.addSort(sd);
    }
  }
}","private static void addAllBindingAsSortKey(IQueryDefinition queryDefn) throws DataException {
  if (!(queryDefn instanceof BaseQueryDefinition)) {
    return;
  }
  Set<String> sortedBinding=new HashSet<String>();
  List<ISortDefinition> sorts=queryDefn.getSorts();
  if (sorts != null) {
    for (    ISortDefinition sd : sorts) {
      List<String> bindingNames=ExpressionCompilerUtil.extractColumnExpression(sd.getExpression(),ExpressionUtil.ROW_INDICATOR);
      if (bindingNames != null && bindingNames.size() > 0) {
        for (        String bindingName : bindingNames) {
          sortedBinding.add(bindingName);
        }
      }
 else {
        if (sd.getColumn() != null)         sortedBinding.add(sd.getColumn());
      }
    }
  }
  Iterator bindings=queryDefn.getBindings().values().iterator();
  BaseQueryDefinition queryDefinition=((BaseQueryDefinition)queryDefn);
  while (bindings.hasNext()) {
    IBinding binding=(IBinding)bindings.next();
    if (!sortedBinding.contains(binding.getBindingName())) {
      SortDefinition sd=new SortDefinition();
      sd.setExpression(ExpressionUtil.createJSRowExpression(binding.getBindingName()));
      queryDefinition.addSort(sd);
    }
  }
}",0.9465381244522348
68083,"/** 
 * @param imageName
 * @param imageTitle
 * @param width
 * @param height
 * @param x
 * @param y
 */
private void exportImageDefn(String imageName,String imageTitle,double width,double height,double x,double y,String link){
  println(""String_Node_Str"" + (shapeCount) + ""String_Node_Str"");
  if (link != null) {
    link=codeLink(link);
    print(""String_Node_Str"" + link + ""String_Node_Str"");
  }
  println(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + imageName + ""String_Node_Str""+ imageTitle+ ""String_Node_Str"");
  println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * @param imageName
 * @param imageTitle
 * @param width
 * @param height
 * @param x
 * @param y
 */
private void exportImageDefn(String imageName,String imageTitle,double width,double height,double x,double y,HyperlinkDef link){
  println(""String_Node_Str"" + (shapeCount) + ""String_Node_Str"");
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (tooltip != null) {
      tooltip=codeLink(tooltip);
      print(""String_Node_Str"" + tooltip + ""String_Node_Str"");
    }
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
      print(""String_Node_Str"" + link + ""String_Node_Str"");
    }
  }
  println(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + imageName + ""String_Node_Str""+ imageTitle+ ""String_Node_Str"");
  println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  println(""String_Node_Str"");
}",0.7754424778761062
68084,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,String link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    link=codeLink(link);
    println(""String_Node_Str"" + link + ""String_Node_Str""+ link+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,HyperlinkDef link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
    }
    if (tooltip != null) {
      tooltip=codeLink(tooltip);
    }
    println(""String_Node_Str"" + link + ""String_Node_Str""+ tooltip+ ""String_Node_Str""+ link+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9238341968911916
68085,"public void drawImage(String imageId,byte[] imageData,String extension,float imageX,float imageY,float height,float width,String helpText,String link) throws Exception {
  ImageInfo imageInfo=getImageInfo(imageId,imageData,extension);
  exportImageDefn(imageInfo.imageName,imageInfo.imageId,width,height,imageX,imageY,link);
}","public void drawImage(String imageId,byte[] imageData,String extension,float imageX,float imageY,float height,float width,String helpText,HyperlinkDef link) throws Exception {
  ImageInfo imageInfo=getImageInfo(imageId,imageData,extension);
  exportImageDefn(imageInfo.imageName,imageInfo.imageId,width,height,imageX,imageY,link);
}",0.972644376899696
68086,"public void setLink(String link){
  this.link=link;
}","public void setLink(HyperlinkDef link){
  this.link=link;
}",0.8928571428571429
68087,"public static String getHyperlink(IArea area,IEmitterServices services,IReportRunnable reportRunnable,IReportContext context){
  IHyperlinkAction hyperlinkAction=area.getAction();
  if (hyperlinkAction != null) {
    try {
      if (hyperlinkAction.getType() != IHyperlinkAction.ACTION_BOOKMARK) {
        String link=hyperlinkAction.getHyperlink();
        Object handler=services.getOption(RenderOption.ACTION_HANDLER);
        if (handler != null && handler instanceof IHTMLActionHandler) {
          IHTMLActionHandler actionHandler=(IHTMLActionHandler)handler;
          String systemId=reportRunnable == null ? null : reportRunnable.getReportName();
          Action action=new Action(systemId,hyperlinkAction);
          link=actionHandler.getURL(action,context);
        }
        return link;
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
  return null;
}","public static HyperlinkDef getHyperlink(IArea area,IEmitterServices services,IReportRunnable reportRunnable,IReportContext context){
  IHyperlinkAction hyperlinkAction=area.getAction();
  if (hyperlinkAction != null) {
    try {
      if (hyperlinkAction.getType() != IHyperlinkAction.ACTION_BOOKMARK) {
        String link=hyperlinkAction.getHyperlink();
        String tooltip=hyperlinkAction.getTooltip();
        Object handler=services.getOption(RenderOption.ACTION_HANDLER);
        if (handler != null && handler instanceof IHTMLActionHandler) {
          IHTMLActionHandler actionHandler=(IHTMLActionHandler)handler;
          String systemId=reportRunnable == null ? null : reportRunnable.getReportName();
          Action action=new Action(systemId,hyperlinkAction);
          link=actionHandler.getURL(action,context);
        }
        return new HyperlinkDef(link,tooltip);
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
  return null;
}",0.9453978159126364
68088,"private void outputData(int type,Object value,StyleEntry style,int column,int colSpan,int rowSpan,int styleId,HyperlinkDef hyperLink,BookmarkDef linkedBookmark){
  startCell(column,colSpan,rowSpan,styleId,hyperLink,linkedBookmark);
  writeText(type,value,style);
  if (hyperLink != null && hyperLink.getToolTip() != null) {
    writeComments(hyperLink);
  }
  endCell();
}","private void outputData(int type,Object value,StyleEntry style,int column,int colSpan,int rowSpan,int styleId,HyperlinkDef hyperLink,BookmarkDef linkedBookmark){
  startCell(column,colSpan,rowSpan,styleId,hyperLink,linkedBookmark);
  writeText(type,value,style);
  endCell();
}",0.8320493066255779
68089,"private void startCell(int cellIndex,int colspan,int rowspan,int styleId,HyperlinkDef hyperLink,BookmarkDef linkedBookmark){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",cellIndex);
  if (styleId > 0) {
    writer.attribute(""String_Node_Str"",styleId);
  }
  if (hyperLink != null) {
    String urlAddress=hyperLink.getUrl();
    if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      if (linkedBookmark != null)       urlAddress=""String_Node_Str"" + linkedBookmark.getValidName();
 else {
        logger.log(Level.WARNING,""String_Node_Str"" + urlAddress + ""String_Node_Str"");
      }
    }
    if (urlAddress != null && urlAddress.length() >= 255) {
      logger.log(Level.WARNING,""String_Node_Str"" + urlAddress + ""String_Node_Str"");
      urlAddress=urlAddress.substring(0,254);
    }
    writer.attribute(""String_Node_Str"",urlAddress);
  }
  if (colspan > 0) {
    writer.attribute(""String_Node_Str"",colspan);
  }
  if (rowspan > 0) {
    writer.attribute(""String_Node_Str"",rowspan);
  }
}","private void startCell(int cellIndex,int colspan,int rowspan,int styleId,HyperlinkDef hyperLink,BookmarkDef linkedBookmark){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",cellIndex);
  if (styleId > 0) {
    writer.attribute(""String_Node_Str"",styleId);
  }
  if (hyperLink != null) {
    String urlAddress=hyperLink.getUrl();
    if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      if (linkedBookmark != null)       urlAddress=""String_Node_Str"" + linkedBookmark.getValidName();
 else {
        logger.log(Level.WARNING,""String_Node_Str"" + urlAddress + ""String_Node_Str"");
      }
    }
    if (urlAddress != null && urlAddress.length() >= 255) {
      logger.log(Level.WARNING,""String_Node_Str"" + urlAddress + ""String_Node_Str"");
      urlAddress=urlAddress.substring(0,254);
    }
    writer.attribute(""String_Node_Str"",urlAddress);
    if (hyperLink.getToolTip() != null) {
      writer.attribute(""String_Node_Str"",hyperLink.getToolTip());
    }
  }
  if (colspan > 0) {
    writer.attribute(""String_Node_Str"",colspan);
  }
  if (rowspan > 0) {
    writer.attribute(""String_Node_Str"",rowspan);
  }
}",0.9476584022038568
68090,"public DataExtractionTaskV1(ReportEngine engine,IReportDocument reader) throws EngineException {
  super(engine,IEngineTask.TASK_DATAEXTRACTION);
  IReportRunnable runnable=getOnPreparedRunnable(reader);
  setReportRunnable(runnable);
  ReportDocumentReader reportDocReaderImpl=(ReportDocumentReader)reader;
  Report reportIR=reportDocReaderImpl.getReportIR(executionContext.getReportDesign());
  executionContext.setReport(reportIR);
  this.report=executionContext.getReport();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  ClassLoader classLoader=executionContext.getApplicationClassLoader();
  ReportDocumentCoreInfo docInfo=reportDocReaderImpl.loadParametersAndVariables(classLoader);
  setParameters(docInfo.parameters);
  executionContext.registerGlobalBeans(docInfo.globalVariables);
}","public DataExtractionTaskV1(ReportEngine engine,IReportDocument reader) throws EngineException {
  super(engine,IEngineTask.TASK_DATAEXTRACTION);
  IReportRunnable runnable=getOnPreparedRunnable(reader);
  setReportRunnable(runnable);
  ReportDocumentReader reportDocReaderImpl=(ReportDocumentReader)reader;
  Report reportIR=reportDocReaderImpl.getReportIR(executionContext.getReportDesign());
  executionContext.setReport(reportIR);
  this.report=executionContext.getReport();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  ClassLoader classLoader=executionContext.getApplicationClassLoader();
  ReportDocumentCoreInfo docInfo=reportDocReaderImpl.loadParametersAndVariables(classLoader);
  setParameters(docInfo.parameters);
  usingParameterValues();
  executionContext.registerGlobalBeans(docInfo.globalVariables);
}",0.986096256684492
68091,"public ReportDocumentCoreInfo loadParametersAndVariables(ClassLoader loader){
  ReportDocumentCoreInfo reportDocInfo=null;
  if (bodyData == null) {
    reportDocInfo=loadCoreStream(loader);
  }
 else {
    try {
      reportDocInfo=new ReportDocumentCoreInfo();
      readCoreStreamBodyFromBuffer(reportDocInfo,loader);
    }
 catch (    IOException ee) {
      logger.log(Level.SEVERE,ee.getLocalizedMessage(),ee);
      return null;
    }
  }
  return reportDocInfo;
}","public ReportDocumentCoreInfo loadParametersAndVariables(ClassLoader loader){
  ReportDocumentCoreInfo reportDocInfo=null;
  if (bodyData == null) {
    reportDocInfo=loadCoreStream(loader);
  }
 else {
    try {
      reportDocInfo=new ReportDocumentCoreInfo();
      reportDocInfo.checkpoint=CHECKPOINT_END;
      readCoreStreamBodyFromBuffer(reportDocInfo,loader);
    }
 catch (    IOException ee) {
      logger.log(Level.SEVERE,ee.getLocalizedMessage(),ee);
      return null;
    }
  }
  return reportDocInfo;
}",0.9524772497472194
68092,"public ITreeNode getTOCTree(ClassLoader loader) throws EngineException {
  try {
    TOCReader tocReader=new TOCReader(archive,loader);
    return tocReader.readTree();
  }
 catch (  IOException ex) {
    throw new EngineException(""String_Node_Str"",ex);
  }
}","public ITreeNode getTOCTree(ClassLoader loader) throws EngineException {
  ReportDocumentCoreInfo documentInfo=loadParametersAndVariables(loader);
  ITOCReader tocReader=null;
  try {
    if (documentInfo.tocReader != null) {
      tocReader=documentInfo.tocReader;
    }
 else {
      tocReader=new TOCReader(archive,loader);
    }
    if (tocReader != null) {
      return tocReader.readTree();
    }
  }
 catch (  IOException ex) {
    throw new EngineException(""String_Node_Str"",ex);
  }
 finally {
    if (tocReader != null) {
      try {
        tocReader.close();
      }
 catch (      IOException ignored) {
      }
    }
  }
  return null;
}",0.5456545654565457
68093,"/** 
 * Pivots a measure in the given position to the specified position.
 * @param fromIndex
 * @param toIndex
 * @throws SemanticException
 */
public void pivotMeasure(int fromIndex,int toIndex) throws SemanticException {
  MeasureViewHandle measureView=getMeasure(fromIndex);
  if (measureView == null) {
    logger.log(Level.INFO,MessageConstants.CROSSTAB_EXCEPTION_MEASURE_NOT_FOUND,new Object[]{String.valueOf(fromIndex),handle.getElement().getIdentifier()});
    return;
  }
  measureView.handle.moveTo(toIndex);
}","/** 
 * Pivots a measure in the given position to the specified position.
 * @param fromIndex
 * @param toIndex
 * @throws SemanticException
 */
public void pivotMeasure(int fromIndex,int toIndex) throws SemanticException {
  MeasureViewHandle measureView=getMeasure(fromIndex);
  if (measureView == null) {
    logger.log(Level.INFO,MessageConstants.CROSSTAB_EXCEPTION_MEASURE_NOT_FOUND,String.valueOf(fromIndex));
    return;
  }
  measureView.handle.moveTo(toIndex);
}",0.7983870967741935
68094,"/** 
 * Inserts a measure into the given position. Position index is 0-based integer.
 * @param measureHandle the OLAP measure handle to use
 * @param index insert position, a 0-based integer
 * @return
 * @throws SemanticException
 */
public MeasureViewHandle insertMeasure(MeasureHandle measureHandle,int index) throws SemanticException {
  if (measureHandle != null && getMeasure(measureHandle.getQualifiedName()) != null) {
    logger.log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_MEASURE,measureHandle.getQualifiedName());
    throw new CrosstabException(handle.getElement(),new String[]{measureHandle.getQualifiedName(),handle.getElement().getIdentifier()},MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_MEASURE);
  }
  CommandStack stack=getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  MeasureViewHandle mv=null;
  try {
    ExtendedItemHandle extendedItemHandle=CrosstabExtendedItemFactory.createMeasureView(moduleHandle,measureHandle);
    if (extendedItemHandle != null) {
      getMeasuresProperty().add(extendedItemHandle,index);
      new CrosstabReportItemTask(this).validateCrosstab();
      mv=(MeasureViewHandle)CrosstabUtil.getReportItem(extendedItemHandle);
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
  return mv;
}","/** 
 * Inserts a measure into the given position. Position index is 0-based integer.
 * @param measureHandle the OLAP measure handle to use
 * @param index insert position, a 0-based integer
 * @return
 * @throws SemanticException
 */
public MeasureViewHandle insertMeasure(MeasureHandle measureHandle,int index) throws SemanticException {
  if (measureHandle != null && getMeasure(measureHandle.getQualifiedName()) != null) {
    logger.log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_MEASURE,measureHandle.getQualifiedName());
    throw new CrosstabException(handle.getElement(),Messages.getString(MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_MEASURE,measureHandle.getQualifiedName()));
  }
  CommandStack stack=getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  MeasureViewHandle mv=null;
  try {
    ExtendedItemHandle extendedItemHandle=CrosstabExtendedItemFactory.createMeasureView(moduleHandle,measureHandle);
    if (extendedItemHandle != null) {
      getMeasuresProperty().add(extendedItemHandle,index);
      new CrosstabReportItemTask(this).validateCrosstab();
      mv=(MeasureViewHandle)CrosstabUtil.getReportItem(extendedItemHandle);
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
  return mv;
}",0.9486404833836858
68095,"/** 
 * Inserts a dimension into the given position. Index is 0-based integer.
 * @param dimensionHandle the OLAP dimension handle to use
 * @param index insert position, a 0-based integer
 * @return
 * @throws SemanticException
 */
public DimensionViewHandle insertDimension(DimensionHandle dimensionHandle,int index) throws SemanticException {
  ExtendedItemHandle extendedItem=CrosstabExtendedItemFactory.createDimensionView(moduleHandle,dimensionHandle);
  if (extendedItem == null)   return null;
  if (dimensionHandle != null && getDimension(dimensionHandle.getQualifiedName()) != null) {
    logger.log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_DIMENSION,dimensionHandle.getQualifiedName());
    throw new CrosstabException(handle.getElement(),new String[]{dimensionHandle.getQualifiedName(),handle.getElement().getIdentifier()},MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_DIMENSION);
  }
  getViewsProperty().add(extendedItem,index);
  return (DimensionViewHandle)CrosstabUtil.getReportItem(extendedItem);
}","/** 
 * Inserts a dimension into the given position. Index is 0-based integer.
 * @param dimensionHandle the OLAP dimension handle to use
 * @param index insert position, a 0-based integer
 * @return
 * @throws SemanticException
 */
public DimensionViewHandle insertDimension(DimensionHandle dimensionHandle,int index) throws SemanticException {
  ExtendedItemHandle extendedItem=CrosstabExtendedItemFactory.createDimensionView(moduleHandle,dimensionHandle);
  if (extendedItem == null)   return null;
  if (dimensionHandle != null && getDimension(dimensionHandle.getQualifiedName()) != null) {
    logger.log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_DIMENSION,dimensionHandle.getQualifiedName());
    throw new CrosstabException(handle.getElement(),Messages.getString(MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_DIMENSION,dimensionHandle.getQualifiedName()));
  }
  getViewsProperty().add(extendedItem,index);
  return (DimensionViewHandle)CrosstabUtil.getReportItem(extendedItem);
}",0.9371933267909716
68096,"/** 
 * Moves the dimension view in the source position of source row/column to the target index in the target row/column. The axis type can be either <code>ICrosstabConstants.ROW_AXIS_TYPE</code> or <code>ICrosstabConstants.COLUMN_AXIS_TYPE</code>. And index is 0-based integer.
 * @param srcAxisType the source row/column axis type
 * @param srcIndex the source position index
 * @param targetAxisType row/column axis type of the move target
 * @param targetIndex the position index of the move target
 * @throws SemanticException
 */
public void pivotDimension(int srcAxisType,int srcIndex,int targetAxisType,int targetIndex) throws SemanticException {
  DimensionViewHandle dimensionView=crosstab.getDimension(srcAxisType,srcIndex);
  if (dimensionView == null) {
    crosstab.getLogger().log(Level.INFO,MessageConstants.CROSSTAB_EXCEPTION_DIMENSION_NOT_FOUND,new Object[]{String.valueOf(srcAxisType),String.valueOf(srcIndex)});
    return;
  }
  moveDimension(dimensionView,targetAxisType,targetIndex);
}","/** 
 * Moves the dimension view in the source position of source row/column to the target index in the target row/column. The axis type can be either <code>ICrosstabConstants.ROW_AXIS_TYPE</code> or <code>ICrosstabConstants.COLUMN_AXIS_TYPE</code>. And index is 0-based integer.
 * @param srcAxisType the source row/column axis type
 * @param srcIndex the source position index
 * @param targetAxisType row/column axis type of the move target
 * @param targetIndex the position index of the move target
 * @throws SemanticException
 */
public void pivotDimension(int srcAxisType,int srcIndex,int targetAxisType,int targetIndex) throws SemanticException {
  DimensionViewHandle dimensionView=crosstab.getDimension(srcAxisType,srcIndex);
  if (dimensionView == null) {
    crosstab.getLogger().log(Level.INFO,MessageConstants.CROSSTAB_EXCEPTION_DIMENSION_NOT_FOUND,String.valueOf(srcAxisType));
    return;
  }
  moveDimension(dimensionView,targetAxisType,targetIndex);
}",0.9802930773117736
68097,"/** 
 * Inserts a row/column dimension into the given position. The axis type can be either <code>ICrosstabConstants.ROW_AXIS_TYPE</code> or <code>ICrosstabConstants.COLUMN_AXIS_TYPE</code>. The index is 0-based integer.
 * @param dimensionHandle the OLAP dimension handle to use
 * @param axisType row/column axis type
 * @param index insert position, a 0-based integer
 * @return
 * @throws SemanticException
 */
public DimensionViewHandle insertDimension(DimensionHandle dimensionHandle,int axisType,int index) throws SemanticException {
  if (dimensionHandle != null && crosstab.getDimension(dimensionHandle.getQualifiedName()) != null) {
    crosstab.getLogger().log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_DIMENSION,dimensionHandle.getQualifiedName());
    throw new CrosstabException(crosstab.getModelHandle().getElement(),new String[]{dimensionHandle.getQualifiedName(),crosstab.getModelHandle().getElement().getIdentifier()},MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_DIMENSION);
  }
  DimensionViewHandle dimensionView=null;
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    CrosstabViewHandle crosstabView=crosstab.getCrosstabView(axisType);
    if (crosstabView == null) {
      crosstabView=crosstab.addCrosstabView(axisType);
    }
    dimensionView=crosstabView.insertDimension(dimensionHandle,index);
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
  return dimensionView;
}","/** 
 * Inserts a row/column dimension into the given position. The axis type can be either <code>ICrosstabConstants.ROW_AXIS_TYPE</code> or <code>ICrosstabConstants.COLUMN_AXIS_TYPE</code>. The index is 0-based integer.
 * @param dimensionHandle the OLAP dimension handle to use
 * @param axisType row/column axis type
 * @param index insert position, a 0-based integer
 * @return
 * @throws SemanticException
 */
public DimensionViewHandle insertDimension(DimensionHandle dimensionHandle,int axisType,int index) throws SemanticException {
  if (dimensionHandle != null && crosstab.getDimension(dimensionHandle.getQualifiedName()) != null) {
    crosstab.getLogger().log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_DIMENSION,dimensionHandle.getQualifiedName());
    throw new CrosstabException(crosstab.getModelHandle().getElement(),Messages.getString(MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_DIMENSION,dimensionHandle.getQualifiedName()));
  }
  DimensionViewHandle dimensionView=null;
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    CrosstabViewHandle crosstabView=crosstab.getCrosstabView(axisType);
    if (crosstabView == null) {
      crosstabView=crosstab.addCrosstabView(axisType);
    }
    dimensionView=crosstabView.insertDimension(dimensionHandle,index);
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
  return dimensionView;
}",0.9477884935151314
68098,"/** 
 * Inserts a level handle into a dimension view. This method will add the aggregations and data-item automatically.
 * @param dimensionView
 * @param levelHandle
 * @param index
 * @return
 * @throws SemanticException
 */
public LevelViewHandle insertLevel(LevelHandle levelHandle,int index) throws SemanticException {
  if (levelHandle != null) {
    if (!levelHandle.getContainer().getContainer().getQualifiedName().equals(dimensionView.getCubeDimensionName())) {
      dimensionView.getLogger().log(Level.WARNING,""String_Node_Str"");
      return null;
    }
    if (dimensionView.getLevel(levelHandle.getQualifiedName()) != null) {
      dimensionView.getLogger().log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_LEVEL,levelHandle.getQualifiedName());
      throw new CrosstabException(dimensionView.getModelHandle().getElement(),new String[]{levelHandle.getQualifiedName(),dimensionView.getModelHandle().getElement().getIdentifier()},MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_LEVEL);
    }
  }
  CommandStack stack=dimensionView.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  LevelViewHandle levelView=null;
  try {
    ExtendedItemHandle extendedItemHandle=CrosstabExtendedItemFactory.createLevelView(dimensionView.getModuleHandle(),levelHandle);
    if (extendedItemHandle != null) {
      dimensionView.getLevelsProperty().add(extendedItemHandle,index);
      levelView=(LevelViewHandle)CrosstabUtil.getReportItem(extendedItemHandle,LEVEL_VIEW_EXTENSION_NAME);
      if (levelHandle != null && crosstab != null) {
        doPostInsert(levelView);
      }
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
  return levelView;
}","/** 
 * Inserts a level handle into a dimension view. This method will add the aggregations and data-item automatically.
 * @param dimensionView
 * @param levelHandle
 * @param index
 * @return
 * @throws SemanticException
 */
public LevelViewHandle insertLevel(LevelHandle levelHandle,int index) throws SemanticException {
  if (levelHandle != null) {
    if (!levelHandle.getContainer().getContainer().getQualifiedName().equals(dimensionView.getCubeDimensionName())) {
      dimensionView.getLogger().log(Level.WARNING,""String_Node_Str"");
      return null;
    }
    if (dimensionView.getLevel(levelHandle.getQualifiedName()) != null) {
      dimensionView.getLogger().log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_LEVEL,levelHandle.getQualifiedName());
      throw new CrosstabException(dimensionView.getModelHandle().getElement(),Messages.getString(MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_LEVEL,levelHandle.getQualifiedName()));
    }
  }
  CommandStack stack=dimensionView.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  LevelViewHandle levelView=null;
  try {
    ExtendedItemHandle extendedItemHandle=CrosstabExtendedItemFactory.createLevelView(dimensionView.getModuleHandle(),levelHandle);
    if (extendedItemHandle != null) {
      dimensionView.getLevelsProperty().add(extendedItemHandle,index);
      levelView=(LevelViewHandle)CrosstabUtil.getReportItem(extendedItemHandle,LEVEL_VIEW_EXTENSION_NAME);
      if (levelHandle != null && crosstab != null) {
        doPostInsert(levelView);
      }
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
  return levelView;
}",0.9579439252336448
68099,"public void testGetParametersAndVariables() throws EngineException {
  String file=""String_Node_Str"";
  removeFile(REPORT_DOCUMENT);
  copyResource(file,REPORT_DOCUMENT);
  ReportDocumentReader document=(ReportDocumentReader)engine.openReportDocument(REPORT_DOCUMENT);
  IRenderTask renderTask=engine.createRenderTask(document);
  HashMap<String,String> expectedParamters=new HashMap<String,String>();
  expectedParamters.put(""String_Node_Str"",""String_Node_Str"");
  expectedParamters.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,String> parameters=renderTask.getParameterValues();
  assertEquals(expectedParamters,parameters);
  HashMap<String,String> expectedVariables=new HashMap<String,String>();
  expectedVariables.put(""String_Node_Str"",""String_Node_Str"");
  expectedVariables.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,String> globalVariables=document.getGlobalVariables(null,null);
  assertEquals(expectedVariables,globalVariables);
  renderTask.close();
}","public void testGetParametersAndVariables() throws EngineException {
  String file=""String_Node_Str"";
  removeFile(REPORT_DOCUMENT);
  copyResource(file,REPORT_DOCUMENT);
  ReportDocumentReader document=(ReportDocumentReader)engine.openReportDocument(REPORT_DOCUMENT);
  IRenderTask renderTask=engine.createRenderTask(document);
  HashMap<String,String> expectedParamters=new HashMap<String,String>();
  expectedParamters.put(""String_Node_Str"",""String_Node_Str"");
  expectedParamters.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,String> parameters=renderTask.getParameterValues();
  assertEquals(expectedParamters,parameters);
  HashMap<String,String> expectedVariables=new HashMap<String,String>();
  renderTask.close();
}",0.8533178114086146
68100,"/** 
 * Loads parameters and global variables from report document. Since the application context is not available and application class loader can't be created when render task is initialized, loading parameters and global variables from document must be deferred until application context is available.
 */
protected void loadDocument(){
  if (!variablesLoaded) {
    ReportDocumentReader documentReader=(ReportDocumentReader)reportDocument;
    ClassLoader classLoader=executionContext.getApplicationClassLoader();
    ReportDocumentCoreInfo docInfo=documentReader.loadParametersAndVariables(classLoader);
    setParameters(docInfo.parameters);
    usingParameterValues();
    executionContext.registerGlobalBeans(docInfo.globalVariables);
    variablesLoaded=true;
  }
}","/** 
 * Loads parameters and global variables from report document. Since the application context is not available and application class loader can't be created when render task is initialized, loading parameters and global variables from document must be deferred until application context is available.
 */
protected void loadDocument(){
  if (!variablesLoaded) {
    ReportDocumentReader documentReader=(ReportDocumentReader)reportDocument;
    ClassLoader classLoader=executionContext.getApplicationClassLoader();
    ReportDocumentCoreInfo docInfo=documentReader.loadParametersAndVariables(classLoader);
    setParameters(docInfo.parameters);
    usingParameterValues();
    executionContext.registerGlobalBeans(docInfo.globalVariables);
    try {
      tocReader=documentReader.getTOCReader(classLoader);
    }
 catch (    EngineException e) {
      log.log(Level.SEVERE,e.getLocalizedMessage(),e);
    }
    variablesLoaded=true;
  }
}",0.8927738927738927
68101,"public ITOCTree getTOCTree() throws EngineException {
  loadDocument();
  IReportDocument document=executionContext.getReportDocument();
  String format=IRenderOption.OUTPUT_FORMAT_HTML;
  if (renderOptions != null) {
    String renderFormat=renderOptions.getOutputFormat();
    if (renderFormat != null) {
      format=renderFormat;
    }
  }
  ULocale ulocale=getULocale();
  TimeZone timeZone=getTimeZone();
  ReportDesignHandle design=executionContext.getReportDesign();
  if (document instanceof IInternalReportDocument) {
    ITreeNode tocTree=((IInternalReportDocument)document).getTOCTree(executionContext.getApplicationClassLoader());
    if (tocTree != null) {
      LogicalPageSequence visiblePages=loadVisiblePages();
      if (visiblePages != null) {
        return new TOCView(tocTree,design,ulocale,timeZone,format,new VisiblePageFilter(document,visiblePages));
      }
 else {
        return new TOCView(tocTree,design,ulocale,timeZone,format);
      }
    }
  }
  return TOCView.EMPTY_TOC_VIEW;
}","public ITOCTree getTOCTree() throws EngineException {
  loadDocument();
  IReportDocument document=executionContext.getReportDocument();
  String format=IRenderOption.OUTPUT_FORMAT_HTML;
  if (renderOptions != null) {
    String renderFormat=renderOptions.getOutputFormat();
    if (renderFormat != null) {
      format=renderFormat;
    }
  }
  ULocale ulocale=getULocale();
  TimeZone timeZone=getTimeZone();
  ReportDesignHandle design=executionContext.getReportDesign();
  if (document instanceof IInternalReportDocument) {
    ITreeNode tocTree=null;
    if (tocReader != null) {
      try {
        tocTree=tocReader.readTree();
      }
 catch (      IOException e) {
        throw new EngineException(""String_Node_Str"",e);
      }
    }
    if (tocTree != null) {
      LogicalPageSequence visiblePages=loadVisiblePages();
      if (visiblePages != null) {
        return new TOCView(tocTree,design,ulocale,timeZone,format,new VisiblePageFilter(document,visiblePages));
      }
 else {
        return new TOCView(tocTree,design,ulocale,timeZone,format);
      }
    }
  }
  return TOCView.EMPTY_TOC_VIEW;
}",0.8682972718720602
68102,"/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
        ClassLoader parentLoader=oldContextLoader;
        if (parentLoader == null)         parentLoader=this.getClass().getClassLoader();
        ModuleHandle handle;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        try {
          if (handle instanceof ReportDesignHandle) {
            ReportDesignHandle copiedReport=(ReportDesignHandle)(handle.copy().getHandle(null));
            ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,copiedReport);
            Thread.currentThread().setContextClassLoader(newContextLoader);
            EngineConfig ec=new EngineConfig();
            ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
            ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
            DataSetUIUtil.clearPropertyBindingMap(dsHandle,dataSetBindingMap,dataSourceBindingMap);
            DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copiedReport),copiedReport);
            DataRequestSession session=engineTask.getDataSession();
            session.getDataSessionContext().getAppContext().put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,DTPUtil.getInstance().createResourceIdentifiers());
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            engineTask.setAppContext(appContext);
            engineTask.run();
            IQueryResults resultSet=executeProcess(session,engineTask.getExecutionContext());
            populateRecords(resultSet);
            engineTask.close();
            engine.destroy();
            monitor.done();
          }
 else {
            DataSessionContext context;
            context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
            DataRequestSession session=DataRequestSession.newSession(context);
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,DTPUtil.getInstance().createResourceIdentifiers());
            if (context.getAppContext() != null) {
              appContext.putAll(context.getAppContext());
            }
            context.setAppContext(appContext);
            IQueryResults resultSet=executeProcess(session,null);
            populateRecords(resultSet);
            session.shutdown();
          }
        }
 catch (        BirtException e) {
          ExceptionHandler.handle(e);
        }
 finally {
          try {
            DataSetUIUtil.resetPropertyBinding(dsHandle,dataSetBindingMap,dataSourceBindingMap);
          }
 catch (          SemanticException e) {
          }
        }
        Thread.currentThread().setContextClassLoader(oldContextLoader);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.handle(e);
  }
catch (  InterruptedException e) {
    ExceptionHandler.handle(e);
  }
  updateResultSetTableUI();
}","/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
        ClassLoader parentLoader=oldContextLoader;
        if (parentLoader == null)         parentLoader=this.getClass().getClassLoader();
        ModuleHandle handle;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        try {
          if (handle instanceof ReportDesignHandle) {
            ReportDesignHandle copiedReport=(ReportDesignHandle)(handle.copy().getHandle(null));
            ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,copiedReport);
            Thread.currentThread().setContextClassLoader(newContextLoader);
            EngineConfig ec=new EngineConfig();
            ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
            ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
            DataSetUIUtil.clearPropertyBindingMap(dsHandle,dataSetBindingMap,dataSourceBindingMap);
            DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copiedReport),copiedReport);
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            engineTask.setAppContext(appContext);
            engineTask.run();
            DataRequestSession session=engineTask.getDataSession();
            session.getDataSessionContext().getAppContext().put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,DTPUtil.getInstance().createResourceIdentifiers());
            IQueryResults resultSet=executeProcess(session,engineTask.getExecutionContext());
            populateRecords(resultSet);
            engineTask.close();
            engine.destroy();
            monitor.done();
          }
 else {
            DataSessionContext context;
            context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
            DataRequestSession session=DataRequestSession.newSession(context);
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,DTPUtil.getInstance().createResourceIdentifiers());
            if (context.getAppContext() != null) {
              appContext.putAll(context.getAppContext());
            }
            context.setAppContext(appContext);
            IQueryResults resultSet=executeProcess(session,null);
            populateRecords(resultSet);
            session.shutdown();
          }
        }
 catch (        BirtException e) {
          ExceptionHandler.handle(e);
        }
 finally {
          try {
            DataSetUIUtil.resetPropertyBinding(dsHandle,dataSetBindingMap,dataSourceBindingMap);
          }
 catch (          SemanticException e) {
          }
        }
        Thread.currentThread().setContextClassLoader(oldContextLoader);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.handle(e);
  }
catch (  InterruptedException e) {
    ExceptionHandler.handle(e);
  }
  updateResultSetTableUI();
}",0.9412887828162292
68103,"protected Data addDataContent(IDataContent data){
  float height=getContentHeight(data);
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  Data excelData=null;
  Object generateBy=data.getGenerateBy();
  IStyle style=data.getComputedStyle();
  DataFormatValue dataformat=style.getDataFormat();
  MapDesign map=null;
  if (generateBy instanceof DataItemDesign) {
    DataItemDesign design=(DataItemDesign)generateBy;
    map=design.getMap();
  }
  if (map != null && map.getRuleCount() > 0 && data.getLabelText() != null) {
    excelData=engine.addData(data.getLabelText().trim(),style,url,bookmark,height);
  }
 else {
    String locale=null;
    int type=ExcelUtil.getType(data.getValue());
    if (type == SheetData.STRING) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addData(data.getText(),style,url,bookmark,locale,height);
    }
 else     if (type == Data.NUMBER) {
      if (dataformat != null) {
        locale=dataformat.getNumberLocale();
      }
      excelData=engine.addData(data.getValue(),style,url,bookmark,locale,height);
    }
 else {
      if (dataformat != null) {
        locale=dataformat.getDateTimeLocale();
      }
      excelData=engine.addDateTime(data,style,url,bookmark,locale,height);
    }
  }
  return excelData;
}","protected Data addDataContent(IDataContent data){
  float height=getContentHeight(data);
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  Data excelData=null;
  Object generateBy=data.getGenerateBy();
  IStyle style=data.getComputedStyle();
  DataFormatValue dataformat=style.getDataFormat();
  MapDesign map=null;
  if (generateBy instanceof DataItemDesign) {
    DataItemDesign design=(DataItemDesign)generateBy;
    map=design.getMap();
  }
  if (map != null && map.getRuleCount() > 0 && data.getLabelText() != null) {
    excelData=engine.addData(data.getText(),style,url,bookmark,height);
  }
 else {
    String locale=null;
    int type=ExcelUtil.getType(data.getValue());
    if (type == SheetData.STRING) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addData(data.getText(),style,url,bookmark,locale,height);
    }
 else     if (type == Data.NUMBER) {
      if (dataformat != null) {
        locale=dataformat.getNumberLocale();
      }
      excelData=engine.addData(data.getValue(),style,url,bookmark,locale,height);
    }
 else {
      if (dataformat != null) {
        locale=dataformat.getDateTimeLocale();
      }
      excelData=engine.addDateTime(data,style,url,bookmark,locale,height);
    }
  }
  return excelData;
}",0.9955223880597016
68104,"/** 
 * Returns the categories list in BIRT chart expression builder
 * @param builderCommand
 * @return category style
 */
public static int getExpressionBuilderStyle(int builderCommand){
  if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_CHART_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_SCRIPT_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_TRIGGERS_SIMPLE) {
    return ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_TOOLTIPS_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT| ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_HYPERLINK) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_HYPERLINK_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS| ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_HYPERLINK_LEGEND) {
    return ChartExpressionProvider.CATEGORY_WITH_LEGEND_ITEMS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT| ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES;
  }
  return ChartExpressionProvider.CATEGORY_BASE;
}","/** 
 * Returns the categories list in BIRT chart expression builder
 * @param builderCommand
 * @return category style
 */
public static int getExpressionBuilderStyle(int builderCommand){
  if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_CHART_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_SCRIPT_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_TRIGGERS_SIMPLE) {
    return ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_TOOLTIPS_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_HYPERLINK) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_HYPERLINK_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS| ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_HYPERLINK_LEGEND) {
    return ChartExpressionProvider.CATEGORY_WITH_LEGEND_ITEMS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT| ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES;
  }
  return ChartExpressionProvider.CATEGORY_BASE;
}",0.9767016902695296
68105,"/** 
 * @param query
 * @param categorySD
 * @param categoryGroupDefinition
 * @param valueExprMap
 */
private void bindSortOnCategorySeries(BaseQueryDefinition query,SeriesDefinition categorySD,GroupDefinition categoryGroupDefinition,Map<String,String[]> valueExprMap) throws ChartException {
  String baseSortExpr=getValidSortExpr(categorySD);
  if (!categorySD.isSetSorting() || baseSortExpr == null) {
    return;
  }
  SortDefinition sd=new SortDefinition();
  if (categorySD.getSortLocale() != null) {
    sd.setSortLocale(new ULocale(categorySD.getSortLocale()));
  }
  if (!categorySD.isSetSortStrength()) {
    sd.setSortStrength(ISortDefinition.DEFAULT_SORT_STRENGTH);
  }
 else {
    sd.setSortStrength(categorySD.getSortStrength());
  }
  sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(categorySD.getSorting()));
  String sortExpr=baseSortExpr;
  if (ChartReportItemUtil.isBaseGroupingDefined(categorySD)) {
    categoryGroupDefinition.addSort(sd);
    String baseExpr=categorySD.getDesignTimeSeries().getDataDefinition().get(0).getDefinition();
    if (baseExpr.equals(getValidSortExpr(categorySD))) {
      sd.setExpression(categoryGroupDefinition.getKeyExpression());
      return;
    }
 else {
      String[] nameNewExprArray=valueExprMap.get(baseSortExpr);
      if (nameNewExprArray != null && nameNewExprArray.length == 2) {
        sortExpr=nameNewExprArray[1];
        exprCodec.decode(sortExpr);
        sd.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
        return;
      }
 else {
        sortExpr=baseSortExpr;
        exprCodec.decode(sortExpr);
        String name=generateUniqueBindingName(exprCodec.getExpression());
        Binding binding=new Binding(name);
        try {
          query.addBinding(binding);
          binding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
          binding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
          binding.addAggregateOn(categoryGroupDefinition.getName());
          binding.setExportable(false);
        }
 catch (        DataException e) {
          throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
        }
        String baseAggFunExpr=categorySD.getGrouping().getAggregateExpression();
        binding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(baseAggFunExpr));
        IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(baseAggFunExpr);
        if (aFunc.getParametersCount() > 0) {
          String[] parameters=categorySD.getGrouping().getAggregateParameters().toArray(new String[1]);
          for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
            String param=parameters[i];
            binding.addArgument(new ScriptExpression(param));
          }
        }
        sd.setExpression(ExpressionUtil.createRowExpression(binding.getBindingName()));
      }
    }
  }
 else {
    sortExpr=baseSortExpr;
    query.addSort(sd);
    exprCodec.decode(sortExpr);
    sd.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
  }
}","/** 
 * @param query
 * @param categorySD
 * @param categoryGroupDefinition
 * @param valueExprMap
 */
private void bindSortOnCategorySeries(BaseQueryDefinition query,SeriesDefinition categorySD,GroupDefinition categoryGroupDefinition,Map<String,String[]> valueExprMap,Axis[] orthAxisArray) throws ChartException {
  String baseSortExpr=getValidSortExpr(categorySD);
  if (!categorySD.isSetSorting() || baseSortExpr == null) {
    return;
  }
  SortDefinition sd=new SortDefinition();
  if (categorySD.getSortLocale() != null) {
    sd.setSortLocale(new ULocale(categorySD.getSortLocale()));
  }
  if (!categorySD.isSetSortStrength()) {
    sd.setSortStrength(ISortDefinition.DEFAULT_SORT_STRENGTH);
  }
 else {
    sd.setSortStrength(categorySD.getSortStrength());
  }
  sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(categorySD.getSorting()));
  String sortExpr=baseSortExpr;
  if (ChartReportItemUtil.isBaseGroupingDefined(categorySD)) {
    categoryGroupDefinition.addSort(sd);
    String baseExpr=categorySD.getDesignTimeSeries().getDataDefinition().get(0).getDefinition();
    if (baseExpr.equals(getValidSortExpr(categorySD))) {
      sd.setExpression(categoryGroupDefinition.getKeyExpression());
      return;
    }
 else {
      String[] nameNewExprArray=valueExprMap.get(baseSortExpr);
      if (nameNewExprArray != null && nameNewExprArray.length == 2) {
        sortExpr=nameNewExprArray[1];
        exprCodec.decode(sortExpr);
        sd.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
        return;
      }
 else {
        sortExpr=baseSortExpr;
        exprCodec.decode(sortExpr);
        String name=generateUniqueBindingName(exprCodec.getExpression());
        Binding binding=new Binding(name);
        try {
          query.addBinding(binding);
          binding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
          binding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
          binding.setExportable(false);
        }
 catch (        DataException e) {
          throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
        }
        if (isYSeriesExpression(sortExpr)) {
          String aggFunc=getAggFunExpr(sortExpr,categorySD,orthAxisArray);
          if (aggFunc != null) {
            try {
              binding.addAggregateOn(categoryGroupDefinition.getName());
            }
 catch (            DataException e) {
              throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
            }
            binding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggFunc));
            IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggFunc);
            if (aFunc.getParametersCount() > 0) {
              String[] parameters=categorySD.getGrouping().getAggregateParameters().toArray(new String[1]);
              for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
                String param=parameters[i];
                binding.addArgument(new ScriptExpression(param));
              }
            }
          }
        }
        sd.setExpression(ExpressionUtil.createRowExpression(binding.getBindingName()));
      }
    }
  }
 else {
    sortExpr=baseSortExpr;
    query.addSort(sd);
    exprCodec.decode(sortExpr);
    sd.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
  }
}",0.8944511459589868
68106,"/** 
 * @param query
 * @param categorySD
 * @param orthSD
 * @param orthAxisArray
 * @return
 * @throws ChartException
 */
private GroupDefinition initYGroupingNSortKey(BaseQueryDefinition query,SeriesDefinition categorySD,SeriesDefinition orthSD,Axis[] orthAxisArray) throws ChartException {
  GroupDefinition yGroupingDefinition=createOrthogonalGroupingDefinition(orthSD);
  if (yGroupingDefinition != null) {
    query.addGroup(yGroupingDefinition);
    if (!orthSD.isSetSorting()) {
      return yGroupingDefinition;
    }
    SortDefinition sortDefinition=new SortDefinition();
    if (categorySD.getSortLocale() != null) {
      sortDefinition.setSortLocale(new ULocale(categorySD.getSortLocale()));
    }
    if (!categorySD.isSetSortStrength()) {
      sortDefinition.setSortStrength(ISortDefinition.DEFAULT_SORT_STRENGTH);
    }
 else {
      sortDefinition.setSortStrength(categorySD.getSortStrength());
    }
    sortDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(orthSD.getSorting()));
    String sortKey=null;
    if (orthSD.getSortKey() != null && orthSD.getSortKey().getDefinition() != null) {
      sortKey=orthSD.getSortKey().getDefinition();
    }
    if (sortKey == null || yGroupingDefinition.getKeyExpression().equals(sortKey)) {
      sortDefinition.setExpression(yGroupingDefinition.getKeyExpression());
    }
 else {
      exprCodec.decode(sortKey);
      String name=generateUniqueBindingName(exprCodec.getExpression());
      Binding binding=new Binding(name);
      try {
        query.addBinding(binding);
        binding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
        binding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        binding.addAggregateOn(yGroupingDefinition.getName());
        binding.setExportable(false);
      }
 catch (      DataException e) {
        throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
      }
      String[] vsExprs=ChartUtil.getValueSeriesExpressions(fChartModel);
      boolean isYSeriesExpression=false;
      for (int i=0; i < vsExprs.length; i++) {
        if (vsExprs[i].equals(sortKey)) {
          isYSeriesExpression=true;
          break;
        }
      }
      if (isYSeriesExpression) {
        String aggFunc=getAggFunExpr(sortKey,categorySD,orthAxisArray);
        if (aggFunc != null) {
          binding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggFunc));
          IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggFunc);
          if (aFunc.getParametersCount() > 0) {
            String[] parameters=ChartUtil.getAggFunParameters(orthSD,categorySD,null);
            for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
              String param=parameters[i];
              binding.addArgument(new ScriptExpression(param));
            }
          }
        }
      }
      sortDefinition.setExpression(ExpressionUtil.createRowExpression(binding.getBindingName()));
    }
    yGroupingDefinition.addSort(sortDefinition);
  }
  return yGroupingDefinition;
}","/** 
 * @param query
 * @param categorySD
 * @param orthSD
 * @param orthAxisArray
 * @return
 * @throws ChartException
 */
private GroupDefinition initYGroupingNSortKey(BaseQueryDefinition query,SeriesDefinition categorySD,SeriesDefinition orthSD,Axis[] orthAxisArray) throws ChartException {
  GroupDefinition yGroupingDefinition=createOrthogonalGroupingDefinition(orthSD);
  if (yGroupingDefinition != null) {
    query.addGroup(yGroupingDefinition);
    if (!orthSD.isSetSorting()) {
      return yGroupingDefinition;
    }
    SortDefinition sortDefinition=new SortDefinition();
    if (categorySD.getSortLocale() != null) {
      sortDefinition.setSortLocale(new ULocale(categorySD.getSortLocale()));
    }
    if (!categorySD.isSetSortStrength()) {
      sortDefinition.setSortStrength(ISortDefinition.DEFAULT_SORT_STRENGTH);
    }
 else {
      sortDefinition.setSortStrength(categorySD.getSortStrength());
    }
    sortDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(orthSD.getSorting()));
    String sortKey=null;
    if (orthSD.getSortKey() != null && orthSD.getSortKey().getDefinition() != null) {
      sortKey=orthSD.getSortKey().getDefinition();
    }
    if (sortKey == null || yGroupingDefinition.getKeyExpression().equals(sortKey)) {
      sortDefinition.setExpression(yGroupingDefinition.getKeyExpression());
    }
 else {
      exprCodec.decode(sortKey);
      String name=generateUniqueBindingName(exprCodec.getExpression());
      Binding binding=new Binding(name);
      try {
        query.addBinding(binding);
        binding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
        binding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        binding.setExportable(false);
      }
 catch (      DataException e) {
        throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
      }
      if (isYSeriesExpression(sortKey)) {
        String aggFunc=getAggFunExpr(sortKey,categorySD,orthAxisArray);
        if (aggFunc != null) {
          try {
            binding.addAggregateOn(yGroupingDefinition.getName());
          }
 catch (          DataException e) {
            throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
          }
          binding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggFunc));
          IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggFunc);
          if (aFunc.getParametersCount() > 0) {
            String[] parameters=ChartUtil.getAggFunParameters(orthSD,categorySD,null);
            for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
              String param=parameters[i];
              binding.addArgument(new ScriptExpression(param));
            }
          }
        }
      }
      sortDefinition.setExpression(ExpressionUtil.createRowExpression(binding.getBindingName()));
    }
    yGroupingDefinition.addSort(sortDefinition);
  }
  return yGroupingDefinition;
}",0.8738651102464332
68107,"/** 
 * Generates extra bindings for grouping and complex expressions. In addition, add them into query definition.
 * @param query
 * @throws ChartException
 */
protected void generateExtraBindings(BaseQueryDefinition query) throws ChartException {
  SeriesDefinition categorySD=null;
  SeriesDefinition orthSD=null;
  Axis[] orthAxisArray=null;
  if (fChartModel instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)fChartModel;
    categorySD=cwa.getBaseAxes()[0].getSeriesDefinitions().get(0);
    orthAxisArray=cwa.getOrthogonalAxes(cwa.getBaseAxes()[0],true);
    orthSD=orthAxisArray[0].getSeriesDefinitions().get(0);
  }
 else   if (fChartModel instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)fChartModel;
    categorySD=cwoa.getSeriesDefinitions().get(0);
    orthSD=categorySD.getSeriesDefinitions().get(0);
  }
  initYGroupingNSortKey(query,categorySD,orthSD,orthAxisArray);
  GroupDefinition categoryGroupDefinition=initCategoryGrouping(query,categorySD);
  Map<String,String[]> valueExprMap=addAggregateBindings(query,categorySD,orthAxisArray);
  if (bCreateBindingForExpression) {
    String exprCategory=(categorySD.getDesignTimeSeries().getDataDefinition().get(0)).getDefinition();
    String exprYGroup=orthSD.getQuery().getDefinition();
    try {
      exprCodec.decode(exprCategory);
      if (!exprCodec.isRowBinding(false)) {
        addExtraBinding(query,exprCodec);
      }
      exprCodec.decode(exprYGroup);
      if (!exprCodec.isRowBinding(false)) {
        addExtraBinding(query,exprCodec);
      }
      if (query instanceof ISubqueryDefinition) {
        ChartReportItemUtil.copyAndInsertBindingFromContainer((ISubqueryDefinition)query,exprCategory);
        ChartReportItemUtil.copyAndInsertBindingFromContainer((ISubqueryDefinition)query,exprYGroup);
        if (!categorySD.getGrouping().isEnabled()) {
          for (          SeriesDefinition sd : ChartUtil.getAllOrthogonalSeriesDefinitions(fChartModel)) {
            List<Query> queries=sd.getDesignTimeSeries().getDataDefinition();
            for (            Query queryExpr : queries) {
              ChartReportItemUtil.copyAndInsertBindingFromContainer((ISubqueryDefinition)query,queryExpr.getDefinition());
            }
          }
        }
      }
    }
 catch (    DataException e) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
    }
  }
  if (categorySD != null) {
    bindSortOnCategorySeries(query,categorySD,categoryGroupDefinition,valueExprMap);
  }
}","/** 
 * Generates extra bindings for grouping and complex expressions. In addition, add them into query definition.
 * @param query
 * @throws ChartException
 */
protected void generateExtraBindings(BaseQueryDefinition query) throws ChartException {
  SeriesDefinition categorySD=null;
  SeriesDefinition orthSD=null;
  Axis[] orthAxisArray=null;
  if (fChartModel instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)fChartModel;
    categorySD=cwa.getBaseAxes()[0].getSeriesDefinitions().get(0);
    orthAxisArray=cwa.getOrthogonalAxes(cwa.getBaseAxes()[0],true);
    orthSD=orthAxisArray[0].getSeriesDefinitions().get(0);
  }
 else   if (fChartModel instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)fChartModel;
    categorySD=cwoa.getSeriesDefinitions().get(0);
    orthSD=categorySD.getSeriesDefinitions().get(0);
  }
  initYGroupingNSortKey(query,categorySD,orthSD,orthAxisArray);
  GroupDefinition categoryGroupDefinition=initCategoryGrouping(query,categorySD);
  Map<String,String[]> valueExprMap=addAggregateBindings(query,categorySD,orthAxisArray);
  if (bCreateBindingForExpression) {
    String exprCategory=(categorySD.getDesignTimeSeries().getDataDefinition().get(0)).getDefinition();
    String exprYGroup=orthSD.getQuery().getDefinition();
    try {
      exprCodec.decode(exprCategory);
      if (!exprCodec.isRowBinding(false)) {
        addExtraBinding(query,exprCodec);
      }
      exprCodec.decode(exprYGroup);
      if (!exprCodec.isRowBinding(false)) {
        addExtraBinding(query,exprCodec);
      }
      if (query instanceof ISubqueryDefinition) {
        ChartReportItemUtil.copyAndInsertBindingFromContainer((ISubqueryDefinition)query,exprCategory);
        ChartReportItemUtil.copyAndInsertBindingFromContainer((ISubqueryDefinition)query,exprYGroup);
        if (!categorySD.getGrouping().isEnabled()) {
          for (          SeriesDefinition sd : ChartUtil.getAllOrthogonalSeriesDefinitions(fChartModel)) {
            List<Query> queries=sd.getDesignTimeSeries().getDataDefinition();
            for (            Query queryExpr : queries) {
              ChartReportItemUtil.copyAndInsertBindingFromContainer((ISubqueryDefinition)query,queryExpr.getDefinition());
            }
          }
        }
      }
    }
 catch (    DataException e) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
    }
  }
  if (categorySD != null) {
    bindSortOnCategorySeries(query,categorySD,categoryGroupDefinition,valueExprMap,orthAxisArray);
  }
}",0.9972495088408644
68108,"/** 
 * Check if Y grouping is enabled and current is using cube, only category expression is allowed as category sort key.
 * @return
 * @since BIRT 2.3
 */
protected boolean onlyCategoryExprAsCategorySortKey(){
  int stateInfo=wizardContext.getDataServiceProvider().getState();
  boolean isCube=(stateInfo & IDataServiceProvider.HAS_CUBE) == IDataServiceProvider.HAS_CUBE && (stateInfo & IDataServiceProvider.SHARE_QUERY) != IDataServiceProvider.SHARE_QUERY;
  if (isYGroupingEnabled() && !isCube) {
    return true;
  }
  return false;
}","/** 
 * Check if Y grouping is enabled and current is using cube, only category expression is allowed as category sort key.
 * @return
 * @since BIRT 2.3
 */
protected boolean onlyCategoryExprAsCategorySortKey(){
  return ChartUIUtil.hasLimitOnCategorySortKey(wizardContext);
}",0.5703794369645043
68109,"/** 
 * check if Y grouping is set.
 * @return
 * @since BIRT 2.3
 */
protected boolean isYGroupingEnabled(){
  SeriesDefinition baseSD=null;
  SeriesDefinition orthSD=null;
  Object[] orthAxisArray=null;
  Chart cm=wizardContext.getModel();
  if (cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)cm;
    orthAxisArray=cwa.getOrthogonalAxes(cwa.getBaseAxes()[0],true);
    orthSD=(SeriesDefinition)((Axis)orthAxisArray[0]).getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    baseSD=(SeriesDefinition)cwoa.getSeriesDefinitions().get(0);
    orthSD=(SeriesDefinition)baseSD.getSeriesDefinitions().get(0);
  }
  String yGroupExpr=null;
  if (orthSD != null && orthSD.getQuery() != null) {
    yGroupExpr=orthSD.getQuery().getDefinition();
  }
  return yGroupExpr != null && !""String_Node_Str"".equals(yGroupExpr);
}","/** 
 * check if Y grouping is set.
 * @return
 * @since BIRT 2.3
 */
protected boolean isYGroupingEnabled(){
  return ChartUtil.isSpecifiedYOptionalExpression(wizardContext.getModel());
}",0.272975432211101
68110,"/** 
 * Create composite of sort area.
 * @param cmpBasic
 */
public void createSortArea(Composite parent){
  cmpSortArea=new Group(parent,SWT.NONE);
{
    cmpSortArea.setText(Messages.getString(""String_Node_Str""));
    cmpSortArea.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpSortArea.setLayoutData(gd);
  }
  lblSorting=new Label(cmpSortArea,SWT.NONE);
  lblSorting.setText(Messages.getString(""String_Node_Str""));
  cmbSorting=new Combo(cmpSortArea,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBSorting=new GridData(GridData.FILL_HORIZONTAL);
  cmbSorting.setLayoutData(gdCMBSorting);
  cmbSorting.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  lblSortExpr=new Label(cmpSortArea,SWT.NONE);
  lblSortExpr.setText(Messages.getString(""String_Node_Str""));
  cmbSortExpr=new Combo(cmpSortArea,SWT.DROP_DOWN);
  GridData gdCMBSortExpr=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortExpr.setLayoutData(gdCMBSortExpr);
  cmbSortExpr.addListener(SWT.Selection,this);
  cmbSortExpr.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      updateSortKey();
    }
  }
);
  try {
    btnSortExprBuilder=(IExpressionButton)wizardContext.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpSortArea,cmbSortExpr,wizardContext.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,null);
    Query query=getSeriesDefinitionForProcessing().getSortKey();
    if (query != null) {
      btnSortExprBuilder.setExpression(query.getDefinition());
    }
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  lblSortLocale=new Label(cmpSortArea,SWT.NONE);
  lblSortLocale.setText(Messages.getString(""String_Node_Str""));
  cmbSortLocale=new Combo(cmpSortArea,SWT.READ_ONLY | SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortLocale.setLayoutData(gd);
  cmbSortLocale.setVisibleItemCount(30);
  cmbSortLocale.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  lblSortStrength=new Label(cmpSortArea,SWT.NONE);
  lblSortStrength.setText(Messages.getString(""String_Node_Str""));
  cmbSortStrength=new Combo(cmpSortArea,SWT.READ_ONLY | SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortStrength.setLayoutData(gd);
  cmbSortStrength.setVisibleItemCount(30);
  cmbSortStrength.addListener(SWT.Selection,this);
  if (isInheritColumnsGroups()) {
    disableSorting();
  }
}","/** 
 * Create composite of sort area.
 * @param cmpBasic
 */
public void createSortArea(Composite parent){
  cmpSortArea=new Group(parent,SWT.NONE);
{
    cmpSortArea.setText(Messages.getString(""String_Node_Str""));
    cmpSortArea.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    gd.widthHint=200;
    cmpSortArea.setLayoutData(gd);
  }
  lblSorting=new Label(cmpSortArea,SWT.NONE);
  lblSorting.setText(Messages.getString(""String_Node_Str""));
  cmbSorting=new Combo(cmpSortArea,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBSorting=new GridData(GridData.FILL_HORIZONTAL);
  cmbSorting.setLayoutData(gdCMBSorting);
  cmbSorting.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  lblSortExpr=new Label(cmpSortArea,SWT.NONE);
  lblSortExpr.setText(Messages.getString(""String_Node_Str""));
  cmbSortExpr=new Combo(cmpSortArea,SWT.DROP_DOWN);
  GridData gdCMBSortExpr=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortExpr.setLayoutData(gdCMBSortExpr);
  cmbSortExpr.addListener(SWT.Selection,this);
  cmbSortExpr.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      updateSortKey();
    }
  }
);
  try {
    btnSortExprBuilder=(IExpressionButton)wizardContext.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpSortArea,cmbSortExpr,wizardContext.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,null);
    Query query=getSeriesDefinitionForProcessing().getSortKey();
    if (query != null) {
      btnSortExprBuilder.setExpression(query.getDefinition());
    }
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  lblSortLocale=new Label(cmpSortArea,SWT.NONE);
  lblSortLocale.setText(Messages.getString(""String_Node_Str""));
  cmbSortLocale=new Combo(cmpSortArea,SWT.READ_ONLY | SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortLocale.setLayoutData(gd);
  cmbSortLocale.setVisibleItemCount(30);
  cmbSortLocale.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  lblSortStrength=new Label(cmpSortArea,SWT.NONE);
  lblSortStrength.setText(Messages.getString(""String_Node_Str""));
  cmbSortStrength=new Combo(cmpSortArea,SWT.READ_ONLY | SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortStrength.setLayoutData(gd);
  cmbSortStrength.setVisibleItemCount(30);
  cmbSortStrength.addListener(SWT.Selection,this);
  if (isInheritColumnsGroups()) {
    disableSorting();
  }
}",0.9956297179181566
68111,"private void setQueryExpression(String expression){
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
 else   if (ChartUIConstants.QUERY_CATEGORY.equals(queryType)) {
    DataType type=context.getDataServiceProvider().getDataType(expression);
    ChartAdapter.beginIgnoreNotifications();
    if (seriesdefinition.getGrouping() == null) {
      seriesdefinition.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
    }
    seriesdefinition.getGrouping().setGroupType(type);
    if (type == DataType.DATE_TIME_LITERAL) {
      seriesdefinition.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
    }
    ChartAdapter.endIgnoreNotifications();
  }
 else   if (ChartUIConstants.QUERY_OPTIONAL.equals(queryType)) {
    ChartAdapter.beginIgnoreNotifications();
    if (expression == null || expression.trim().length() == 0) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
      if (seriesdefinition.getSortKey() != null) {
        seriesdefinition.getSortKey().setDefinition(null);
      }
    }
 else {
      if (seriesdefinition.getSortKey() != null && seriesdefinition.getSortKey().getDefinition() != null && seriesdefinition.getSortKey().getDefinition().equals(query.getDefinition())) {
        seriesdefinition.getSortKey().setDefinition(expression);
      }
      DataType type=context.getDataServiceProvider().getDataType(expression);
      if (query.getGrouping() == null) {
        query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
      }
      query.getGrouping().setGroupType(type);
      if (type == DataType.DATE_TIME_LITERAL) {
        query.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
      }
    }
    ChartAdapter.endIgnoreNotifications();
  }
  if (query != null) {
    query.setDefinition(expression);
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}","private void setQueryExpression(String expression){
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
 else   if (ChartUIConstants.QUERY_CATEGORY.equals(queryType)) {
    DataType type=context.getDataServiceProvider().getDataType(expression);
    ChartAdapter.beginIgnoreNotifications();
    if (seriesdefinition.getGrouping() == null) {
      seriesdefinition.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
    }
    seriesdefinition.getGrouping().setGroupType(type);
    if (type == DataType.DATE_TIME_LITERAL) {
      seriesdefinition.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
    }
    if (ChartUIUtil.hasLimitOnCategorySortKey(context) && ChartUtil.hasSorting(seriesdefinition)) {
      Query sortQuery=seriesdefinition.getSortKey();
      if (sortQuery == null) {
        sortQuery=QueryImpl.create(expression);
        sortQuery.eAdapters().addAll(seriesdefinition.eAdapters());
        seriesdefinition.setSortKey(sortQuery);
      }
 else {
        sortQuery.setDefinition(expression);
      }
    }
    ChartAdapter.endIgnoreNotifications();
  }
 else   if (ChartUIConstants.QUERY_OPTIONAL.equals(queryType)) {
    ChartAdapter.beginIgnoreNotifications();
    if (expression == null || expression.trim().length() == 0) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
      if (seriesdefinition.getSortKey() != null) {
        seriesdefinition.getSortKey().setDefinition(null);
      }
    }
 else {
      if (seriesdefinition.getSortKey() != null && seriesdefinition.getSortKey().getDefinition() != null && seriesdefinition.getSortKey().getDefinition().equals(query.getDefinition())) {
        seriesdefinition.getSortKey().setDefinition(expression);
      }
      DataType type=context.getDataServiceProvider().getDataType(expression);
      if (query.getGrouping() == null) {
        query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
      }
      query.getGrouping().setGroupType(type);
      if (type == DataType.DATE_TIME_LITERAL) {
        query.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
      }
    }
    ChartAdapter.endIgnoreNotifications();
  }
  if (query != null) {
    query.setDefinition(expression);
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}",0.9267786048121862
68112,"public ImageData(IImageContent image,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer,int heightDpi,int widthDpi){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),imageInfo.getHeight() * ExcelUtil.INCH_PT / heightDpi,heightDpi) / 1000;
  imageHeight=(int)height;
  int imageWidth=(int)ExcelUtil.convertDimensionType(image.getWidth(),imageInfo.getWidth() * ExcelUtil.INCH_PT / widthDpi,widthDpi);
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}","public ImageData(IImageContent image,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer,int heightDpi,int widthDpi){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),imageInfo.getHeight() * ExcelUtil.INCH_PT / heightDpi,heightDpi) / 1000;
  imageHeight=(int)height;
  int imageWidth=(int)ExcelUtil.convertDimensionType(image.getWidth(),imageInfo.getWidth() * 1000 * ExcelUtil.INCH_PT / widthDpi,widthDpi);
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}",0.9950669485553206
68113,"private void init(String sTitle){
  display=Display.getDefault();
  if (shellParent == null) {
    shell=new Shell(display,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.APPLICATION_MODAL);
  }
 else {
    shell=new Shell(shellParent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.APPLICATION_MODAL);
  }
  shell.setText(sTitle);
  shell.setSize(DEFAULT_WIDTH,DEFAULT_HEIGHT);
  shell.setLayout(new FillLayout());
  UIHelper.centerOnScreen(shell);
  placeComponents();
  shell.setDefaultButton(btnOK);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
}","private void init(String sTitle){
  display=Display.getDefault();
  if (shellParent == null) {
    shell=new Shell(display,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.APPLICATION_MODAL);
  }
 else {
    shell=new Shell(shellParent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.APPLICATION_MODAL);
  }
  shell.setText(sTitle);
  shell.setLayout(new GridLayout());
  placeComponents();
  UIHelper.centerOnScreen(shell);
  shell.setDefaultButton(btnOK);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
}",0.8720626631853786
68114,"/** 
 */
private void toggleDetails(boolean bVisible){
  if (bVisible) {
    slDetails.topControl=grpDetails;
    shell.setSize(shell.getSize().x,MAX_HEIGHT);
  }
 else {
    slDetails.topControl=cmpDummy;
    shell.setSize(shell.getSize().x,DEFAULT_HEIGHT);
  }
  shell.layout();
}","/** 
 */
private void toggleDetails(boolean bVisible){
  if (bVisible) {
    slDetails.topControl=grpDetails;
    ((GridData)cmpDetails.getLayoutData()).heightHint=MAX_HEIGHT;
  }
 else {
    slDetails.topControl=cmpDummy;
    ((GridData)cmpDetails.getLayoutData()).heightHint=DEFAULT_HEIGHT;
  }
  shell.pack();
  shell.layout();
}",0.7035830618892508
68115,"private void placeComponents(){
  cmpContainer=new Composite(shell,SWT.NONE);
{
    GridLayout glDialog=new GridLayout(3,false);
    glDialog.marginWidth=6;
    glDialog.marginHeight=6;
    glDialog.horizontalSpacing=5;
    glDialog.verticalSpacing=2;
    cmpContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpContainer.setLayout(glDialog);
  }
  mcSheetHeading=new MessageComposite(cmpContainer,""String_Node_Str"",sMessage,""String_Node_Str"",true);
  GridData gdMSGHeading=new GridData(GridData.FILL_HORIZONTAL);
  gdMSGHeading.heightHint=22;
  gdMSGHeading.horizontalSpan=3;
  mcSheetHeading.setLayoutData(gdMSGHeading);
  mcSheetHeading.setBackground(display.getSystemColor(SWT.COLOR_WHITE));
  lblImage=new Label(cmpContainer,SWT.NONE);
  lblImage.setImage(display.getSystemImage(SWT.ICON_ERROR));
  grpProblems=new Group(cmpContainer,SWT.NONE);
{
    GridData gdGrpProblems=new GridData(GridData.FILL_HORIZONTAL);
    gdGrpProblems.horizontalSpan=2;
    gdGrpProblems.heightHint=60;
    grpProblems.setLayoutData(gdGrpProblems);
    GridLayout layout=new GridLayout();
    layout.marginWidth=2;
    layout.marginHeight=2;
    grpProblems.setLayout(layout);
  }
  txtProblems=new Text(grpProblems,SWT.WRAP | SWT.V_SCROLL);
{
    txtProblems.setEditable(false);
    txtProblems.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  new Label(cmpContainer,SWT.NONE);
  btnDetails=new Button(cmpContainer,SWT.TOGGLE);
  GridData gdBtnDetails=new GridData();
  gdBtnDetails.horizontalSpan=2;
  btnDetails.setLayoutData(gdBtnDetails);
  btnDetails.addSelectionListener(this);
  new Label(cmpContainer,SWT.NONE);
  slDetails=new StackLayout();
  cmpDetails=new Composite(cmpContainer,SWT.NONE);
  GridData gdCmpDetails=new GridData(GridData.FILL_BOTH);
  gdCmpDetails.horizontalSpan=2;
  cmpDetails.setLayoutData(gdCmpDetails);
  cmpDetails.setLayout(slDetails);
  cmpDummy=new Composite(cmpDetails,SWT.NONE);
  grpDetails=new Group(cmpDetails,SWT.NONE);
  FillLayout flSolutions=new FillLayout();
  flSolutions.marginWidth=5;
  flSolutions.marginHeight=5;
  grpDetails.setLayout(flSolutions);
  txtDetails=new Text(grpDetails,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL);
  txtDetails.setEditable(false);
  GridLayout glButtons=new GridLayout();
  glButtons.numColumns=2;
  glButtons.horizontalSpacing=5;
  glButtons.marginHeight=5;
  glButtons.marginWidth=5;
  Composite cmpButtons=new Composite(cmpContainer,SWT.NONE);
  GridData gdCmpButtons=new GridData(GridData.FILL_HORIZONTAL);
  gdCmpButtons.horizontalSpan=3;
  cmpButtons.setLayoutData(gdCmpButtons);
  cmpButtons.setLayout(glButtons);
  btnOK=new Button(cmpButtons,SWT.NONE);
  GridData gdBtnOK=null;
  if (bError) {
    gdBtnOK=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_END);
  }
 else {
    gdBtnOK=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_CENTER);
  }
  btnOK.setLayoutData(gdBtnOK);
  btnOK.addSelectionListener(this);
  if (bError) {
    btnCancel=new Button(cmpButtons,SWT.NONE);
    GridData gdBtnCancel=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_BEGINNING);
    btnCancel.setLayoutData(gdBtnCancel);
    btnCancel.addSelectionListener(this);
  }
  if (bError) {
    grpProblems.setText(Messages.getString(""String_Node_Str""));
    txtProblems.setText(sErrors);
    btnDetails.setText(Messages.getString(""String_Node_Str""));
    grpDetails.setText(Messages.getString(""String_Node_Str""));
    btnOK.setText(Messages.getString(""String_Node_Str""));
    btnCancel.setText(Messages.getString(""String_Node_Str""));
    if (sFixes == null || sFixes.length() == 0) {
      btnDetails.setEnabled(false);
    }
 else {
      btnDetails.setEnabled(true);
      txtDetails.setText(sFixes);
    }
  }
 else {
    txtProblems.setText(sExceptionMessage);
    btnDetails.setText(Messages.getString(""String_Node_Str""));
    grpDetails.setText(Messages.getString(""String_Node_Str""));
    btnOK.setText(Messages.getString(""String_Node_Str""));
    if (sTrace == null || sTrace.length() == 0) {
      btnDetails.setEnabled(false);
    }
 else {
      btnDetails.setEnabled(true);
      txtDetails.setText(sTrace);
    }
  }
  slDetails.topControl=cmpDummy;
  shell.setSize(shell.getSize().x,DEFAULT_HEIGHT);
  shell.layout();
}","private void placeComponents(){
  cmpContainer=new Composite(shell,SWT.NONE);
{
    GridLayout glDialog=new GridLayout(3,false);
    glDialog.marginWidth=6;
    glDialog.marginHeight=6;
    glDialog.horizontalSpacing=5;
    glDialog.verticalSpacing=2;
    cmpContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpContainer.setLayout(glDialog);
  }
  mcSheetHeading=new MessageComposite(cmpContainer,""String_Node_Str"",sMessage,""String_Node_Str"",true);
  GridData gdMSGHeading=new GridData(GridData.FILL_HORIZONTAL);
  gdMSGHeading.heightHint=25;
  gdMSGHeading.horizontalSpan=3;
  mcSheetHeading.setLayoutData(gdMSGHeading);
  mcSheetHeading.setBackground(display.getSystemColor(SWT.COLOR_WHITE));
  lblImage=new Label(cmpContainer,SWT.NONE);
  lblImage.setImage(display.getSystemImage(SWT.ICON_ERROR));
  grpProblems=new Group(cmpContainer,SWT.NONE);
{
    GridData gdGrpProblems=new GridData(GridData.FILL_HORIZONTAL);
    gdGrpProblems.horizontalSpan=2;
    gdGrpProblems.heightHint=60;
    grpProblems.setLayoutData(gdGrpProblems);
    GridLayout layout=new GridLayout();
    layout.marginWidth=2;
    layout.marginHeight=2;
    grpProblems.setLayout(layout);
  }
  txtProblems=new Text(grpProblems,SWT.WRAP | SWT.V_SCROLL);
{
    txtProblems.setEditable(false);
    txtProblems.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  new Label(cmpContainer,SWT.NONE);
  btnDetails=new Button(cmpContainer,SWT.TOGGLE);
  GridData gdBtnDetails=new GridData();
  gdBtnDetails.horizontalSpan=2;
  btnDetails.setLayoutData(gdBtnDetails);
  btnDetails.addSelectionListener(this);
  new Label(cmpContainer,SWT.NONE);
  slDetails=new StackLayout();
  cmpDetails=new Composite(cmpContainer,SWT.NONE);
  GridData gdCmpDetails=new GridData(GridData.FILL_BOTH);
  gdCmpDetails.horizontalSpan=2;
  gdCmpDetails.heightHint=DEFAULT_HEIGHT;
  cmpDetails.setLayoutData(gdCmpDetails);
  cmpDetails.setLayout(slDetails);
  cmpDummy=new Composite(cmpDetails,SWT.NONE);
  grpDetails=new Group(cmpDetails,SWT.NONE);
  FillLayout flSolutions=new FillLayout();
  flSolutions.marginWidth=5;
  flSolutions.marginHeight=5;
  grpDetails.setLayout(flSolutions);
  txtDetails=new Text(grpDetails,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL);
  txtDetails.setEditable(false);
  GridLayout glButtons=new GridLayout();
  glButtons.numColumns=2;
  glButtons.horizontalSpacing=5;
  glButtons.marginHeight=5;
  glButtons.marginWidth=5;
  Composite cmpButtons=new Composite(cmpContainer,SWT.NONE);
  GridData gdCmpButtons=new GridData(GridData.FILL_HORIZONTAL);
  gdCmpButtons.horizontalSpan=3;
  cmpButtons.setLayoutData(gdCmpButtons);
  cmpButtons.setLayout(glButtons);
  btnOK=new Button(cmpButtons,SWT.NONE);
  GridData gdBtnOK=null;
  if (bError) {
    gdBtnOK=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_END);
  }
 else {
    gdBtnOK=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_CENTER);
  }
  btnOK.setLayoutData(gdBtnOK);
  btnOK.addSelectionListener(this);
  if (bError) {
    btnCancel=new Button(cmpButtons,SWT.NONE);
    GridData gdBtnCancel=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_BEGINNING);
    btnCancel.setLayoutData(gdBtnCancel);
    btnCancel.addSelectionListener(this);
  }
  if (bError) {
    grpProblems.setText(Messages.getString(""String_Node_Str""));
    txtProblems.setText(sErrors);
    btnDetails.setText(Messages.getString(""String_Node_Str""));
    grpDetails.setText(Messages.getString(""String_Node_Str""));
    btnOK.setText(Messages.getString(""String_Node_Str""));
    btnCancel.setText(Messages.getString(""String_Node_Str""));
    if (sFixes == null || sFixes.length() == 0) {
      btnDetails.setEnabled(false);
    }
 else {
      btnDetails.setEnabled(true);
      txtDetails.setText(sFixes);
    }
  }
 else {
    txtProblems.setText(sExceptionMessage);
    btnDetails.setText(Messages.getString(""String_Node_Str""));
    grpDetails.setText(Messages.getString(""String_Node_Str""));
    btnOK.setText(Messages.getString(""String_Node_Str""));
    if (sTrace == null || sTrace.length() == 0) {
      btnDetails.setEnabled(false);
    }
 else {
      btnDetails.setEnabled(true);
      txtDetails.setText(sTrace);
    }
  }
  slDetails.topControl=cmpDummy;
  shell.pack();
  shell.layout();
}",0.9883597883597884
68116,"/** 
 * @param cwoa
 * @param pie
 * @param dpha
 * @param da
 * @param pa
 */
PieRenderer(ChartWithoutAxes cwoa,Pie pie,DataPointHints[] dpha,double[] da,Palette pa) throws ChartException {
  this.pa=pa;
  this.pie=pie;
  this.cComp=pie.getRunTimeContext().getState(StateKey.CHART_COMPUTATION_KEY);
  ps=(PieSeries)pie.getSeries();
  sExplosionExpression=ps.getExplosionExpression();
  dExplosion=ps.getExplosion() * pie.getDeviceScale();
  dThickness=((cwoa.getDimension() == ChartDimension.TWO_DIMENSIONAL_LITERAL) ? 0 : cwoa.getSeriesThickness()) * pie.getDeviceScale();
  ratio=ps.isSetRatio() ? ps.getRatio() : 1;
  rotation=ps.isSetRotation() ? ps.getRotation() : 0;
  liaLL=ps.getLeaderLineAttributes();
  if (ps.getLeaderLineAttributes().isVisible()) {
    dLeaderLength=ps.getLeaderLineLength() * pie.getDeviceScale();
  }
 else {
    dLeaderLength=0;
  }
  liaEdges=goFactory.createLineAttributes(goFactory.BLACK(),LineStyle.SOLID_LITERAL,1);
  bPaletteByCategory=(cwoa.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL);
  lpDataPoint=ps.getLabelPosition();
  lpSeriesTitle=ps.getTitlePosition();
  laSeriesTitle=goFactory.copyOf(ps.getTitle());
  laSeriesTitle.getCaption().setValue(pie.getRunTimeContext().externalizedMessage(String.valueOf(ps.getSeriesIdentifier())));
  laSeriesTitle.getCaption().getFont().setAlignment(pie.switchTextAlignment(laSeriesTitle.getCaption().getFont().getAlignment()));
  final AbstractScriptHandler sh=pie.getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_SERIES_TITLE,ps,laSeriesTitle,pie.getRunTimeContext().getScriptContext());
  pie.getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_SERIES_TITLE,laSeriesTitle);
  lls=ps.getLeaderLineStyle();
  bMinSliceDefined=cwoa.isSetMinSlice();
  dMinSlice=cwoa.getMinSlice();
  bPercentageMinSlice=cwoa.isMinSlicePercent();
  double dTotal=0;
  orginalSliceCount=da.length;
  for (int i=0; i < da.length; i++) {
    if (da[i] < 0) {
      dTotal-=da[i];
    }
 else     if (!Double.isNaN(da[i])) {
      dTotal+=da[i];
    }
  }
  if (bMinSliceDefined) {
    if (bPercentageMinSlice) {
      dAbsoluteMinSlice=dMinSlice * dTotal / 100d;
    }
 else {
      dAbsoluteMinSlice=dMinSlice;
    }
    double residualPos=0;
    double residualNeg=0;
    DataPointHints dphPos=null;
    DataPointHints dphNeg=null;
    for (int i=0; i < da.length; i++) {
      if (Double.isNaN(da[i])) {
        continue;
      }
      if (Math.abs(da[i]) >= Math.abs(dAbsoluteMinSlice)) {
        pieSliceList.add(new PieSlice(da[i],dpha[i],i));
      }
 else {
        if (da[i] >= 0) {
          residualPos+=da[i];
          if (dphPos == null) {
            dphPos=dpha[i].getVirtualCopy();
          }
 else {
            dphPos.accumulate(dpha[i].getBaseValue(),dpha[i].getOrthogonalValue(),dpha[i].getSeriesValue(),dpha[i].getPercentileOrthogonalValue());
          }
        }
 else {
          residualNeg+=da[i];
          if (dphNeg == null) {
            dphNeg=dpha[i].getVirtualCopy();
          }
 else {
            dphNeg.accumulate(dpha[i].getBaseValue(),dpha[i].getOrthogonalValue(),dpha[i].getSeriesValue(),dpha[i].getPercentileOrthogonalValue());
          }
        }
      }
    }
    String extSliceLabel=pie.getRunTimeContext().externalizedMessage(cwoa.getMinSliceLabel());
    if (dphPos != null) {
      dphPos.setBaseValue(extSliceLabel);
      dphPos.setIndex(orginalSliceCount);
      pieSliceList.add(new PieSlice(residualPos,dphPos,orginalSliceCount));
      bMinSliceApplied=true;
    }
    if (dphNeg != null) {
      dphNeg.setBaseValue(extSliceLabel);
      dphNeg.setIndex(orginalSliceCount);
      pieSliceList.add(new PieSlice(residualNeg,dphNeg,orginalSliceCount));
      bMinSliceApplied=true;
    }
  }
 else {
    for (int i=0; i < da.length; i++) {
      if (Double.isNaN(da[i])) {
        continue;
      }
      pieSliceList.add(new PieSlice(da[i],dpha[i],i));
    }
  }
  double startAngle=rotation;
  double originalStartAngle=rotation;
  if (dTotal == 0) {
    dTotal=1;
  }
  PieSlice slice=null;
  double totalAngle=0d;
  for (Iterator iter=pieSliceList.iterator(); iter.hasNext(); ) {
    slice=(PieSlice)iter.next();
    double length=(Math.abs(slice.getPrimitiveValue()) / dTotal) * 360d;
    double percentage=(slice.getPrimitiveValue() / dTotal) * 100d;
    slice.setStartAngle(startAngle);
    slice.setOriginalStartAngle(originalStartAngle);
    slice.setSliceLength(length);
    slice.setPercentage(percentage);
    startAngle+=length + MIN_DOUBLE;
    originalStartAngle+=length;
    startAngle=wrapAngle(startAngle);
    originalStartAngle=wrapAngle(originalStartAngle);
    totalAngle+=length;
  }
  if (totalAngle > 0 && 360 - totalAngle > 0.001) {
    slice.setSliceLength(360 - slice.getStartAngle());
  }
  initExploded();
}","/** 
 * @param cwoa
 * @param pie
 * @param dpha
 * @param da
 * @param pa
 */
PieRenderer(ChartWithoutAxes cwoa,Pie pie,DataPointHints[] dpha,double[] da,Palette pa) throws ChartException {
  this.pa=pa;
  this.pie=pie;
  this.cComp=pie.getRunTimeContext().getState(StateKey.CHART_COMPUTATION_KEY);
  ps=(PieSeries)pie.getSeries();
  sExplosionExpression=ps.getExplosionExpression();
  dExplosion=ps.getExplosion() * pie.getDeviceScale();
  dThickness=((cwoa.getDimension() == ChartDimension.TWO_DIMENSIONAL_LITERAL) ? 0 : cwoa.getSeriesThickness()) * pie.getDeviceScale();
  ratio=ps.isSetRatio() ? ps.getRatio() : 1;
  rotation=ps.isSetRotation() ? ps.getRotation() : 0;
  liaLL=ps.getLeaderLineAttributes();
  if (ps.getLeaderLineAttributes().isVisible()) {
    dLeaderLength=ps.getLeaderLineLength() * pie.getDeviceScale();
  }
 else {
    dLeaderLength=0;
  }
  liaEdges=goFactory.createLineAttributes(goFactory.BLACK(),LineStyle.SOLID_LITERAL,1);
  bPaletteByCategory=(cwoa.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL);
  lpDataPoint=ps.getLabelPosition();
  lpSeriesTitle=ps.getTitlePosition();
  laSeriesTitle=goFactory.copyOf(ps.getTitle());
  laSeriesTitle.getCaption().setValue(pie.getRunTimeContext().externalizedMessage(String.valueOf(ps.getSeriesIdentifier())));
  laSeriesTitle.getCaption().getFont().setAlignment(pie.switchTextAlignment(laSeriesTitle.getCaption().getFont().getAlignment()));
  final AbstractScriptHandler sh=pie.getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_SERIES_TITLE,ps,laSeriesTitle,pie.getRunTimeContext().getScriptContext());
  pie.getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_SERIES_TITLE,laSeriesTitle);
  lls=ps.getLeaderLineStyle();
  bMinSliceDefined=cwoa.isSetMinSlice();
  dMinSlice=cwoa.getMinSlice();
  bPercentageMinSlice=cwoa.isMinSlicePercent();
  double dTotal=0;
  orginalSliceCount=da.length;
  for (int i=0; i < da.length; i++) {
    if (da[i] < 0) {
      dTotal-=da[i];
    }
 else     if (!Double.isNaN(da[i])) {
      dTotal+=da[i];
    }
  }
  if (bMinSliceDefined) {
    if (bPercentageMinSlice) {
      dAbsoluteMinSlice=dMinSlice * dTotal / 100d;
    }
 else {
      dAbsoluteMinSlice=dMinSlice;
    }
    double residualPos=0;
    double residualNeg=0;
    DataPointHints dphPos=null;
    DataPointHints dphNeg=null;
    for (int i=0; i < da.length; i++) {
      if (Double.isNaN(da[i])) {
        continue;
      }
      if (Math.abs(da[i]) >= Math.abs(dAbsoluteMinSlice)) {
        pieSliceList.add(new PieSlice(da[i],dpha[i],i));
      }
 else {
        if (da[i] >= 0) {
          residualPos+=da[i];
          if (dphPos == null) {
            dphPos=dpha[i].getVirtualCopy();
          }
 else {
            dphPos.accumulate(dpha[i].getBaseValue(),dpha[i].getOrthogonalValue(),dpha[i].getSeriesValue(),dpha[i].getPercentileOrthogonalValue());
          }
        }
 else {
          residualNeg+=da[i];
          if (dphNeg == null) {
            dphNeg=dpha[i].getVirtualCopy();
          }
 else {
            dphNeg.accumulate(dpha[i].getBaseValue(),dpha[i].getOrthogonalValue(),dpha[i].getSeriesValue(),dpha[i].getPercentileOrthogonalValue());
          }
        }
      }
    }
    String extSliceLabel=pie.getRunTimeContext().externalizedMessage(cwoa.getMinSliceLabel());
    if (dphPos != null) {
      dphPos.setBaseValue(extSliceLabel);
      dphPos.setIndex(orginalSliceCount);
      pieSliceList.add(new PieSlice(residualPos,dphPos,orginalSliceCount));
      bMinSliceApplied=true;
    }
    if (dphNeg != null) {
      dphNeg.setBaseValue(extSliceLabel);
      dphNeg.setIndex(orginalSliceCount);
      pieSliceList.add(new PieSlice(residualNeg,dphNeg,orginalSliceCount));
      bMinSliceApplied=true;
    }
  }
 else {
    for (int i=0; i < da.length; i++) {
      if (Double.isNaN(da[i])) {
        continue;
      }
      pieSliceList.add(new PieSlice(da[i],dpha[i],i));
    }
  }
  double startAngle=rotation;
  double originalStartAngle=rotation;
  if (dTotal == 0) {
    dTotal=1;
  }
  if (ps.isClockwise()) {
    Collections.reverse(pieSliceList);
  }
  PieSlice slice=null;
  double totalAngle=0d;
  for (Iterator iter=pieSliceList.iterator(); iter.hasNext(); ) {
    slice=(PieSlice)iter.next();
    double length=(Math.abs(slice.getPrimitiveValue()) / dTotal) * 360d;
    double percentage=(slice.getPrimitiveValue() / dTotal) * 100d;
    slice.setStartAngle(startAngle);
    slice.setOriginalStartAngle(originalStartAngle);
    slice.setSliceLength(length);
    slice.setPercentage(percentage);
    startAngle+=length + MIN_DOUBLE;
    originalStartAngle+=length;
    startAngle=wrapAngle(startAngle);
    originalStartAngle=wrapAngle(originalStartAngle);
    totalAngle+=length;
  }
  if (totalAngle > 0 && 360 - totalAngle > 0.001) {
    slice.setSliceLength(360 - slice.getStartAngle());
  }
  initExploded();
}",0.9929397319144582
68117,"public void endCell(ICellContent cell){
  engine.endCell();
}","public void endCell(ICellContent cell){
  engine.endCell(cell);
}",0.9682539682539684
68118,"private void synchronize(float height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    SheetData lastData=cache.getColumnLastData(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    int span=lastData != null ? lastData.getRowSpanInDesign() : 0;
    if (span == 0 || (span == 1 && !isInContainer(lastData,rowContainer))) {
      maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    }
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex == startRowIndex) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  float resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex; i < maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    SheetData upstair=cache.getColumnLastData(currentColumnIndex);
    if (rowspan > 0) {
      if (upstair != null && canSpan(upstair,rowContainer)) {
        Type blankType=Type.VERTICAL;
        if (upstair.isBlank()) {
          BlankData blankData=(BlankData)upstair;
          if (blankData.getType() == Type.VERTICAL) {
            upstair.setRowSpan(upstair.getRowSpan() + rowspan);
            if (!isInContainer(blankData,rowContainer)) {
              upstair.decreasRowSpanInDesign();
            }
          }
          blankType=blankData.getType();
        }
 else {
          upstair.setRowSpan(upstair.getRowSpan() + rowspan);
          if (!isInContainer(upstair,rowContainer)) {
            upstair.decreasRowSpanInDesign();
          }
        }
        int rowIndex=upstair.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(upstair);
          blank.setRowIndex(rowIndex + p);
          blank.setType(blankType);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
 else     if (upstair.getRowSpanInDesign() > 0 && !isInContainer(upstair,rowContainer)) {
      upstair.decreasRowSpanInDesign();
    }
  }
}","protected void synchronize(float height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    SheetData lastData=cache.getColumnLastData(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    int span=lastData != null ? lastData.getRowSpanInDesign() : 0;
    if (span == 0 || (span == 1 && !isInContainer(lastData,rowContainer))) {
      maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    }
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex <= startRowIndex) {
    maxRowIndex=startRowIndex + 1;
  }
  rowContainer.setRowIndex(maxRowIndex);
  float resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex; i < maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    SheetData upstair=cache.getColumnLastData(currentColumnIndex);
    if (rowspan > 0) {
      if (upstair != null && canSpan(upstair,rowContainer)) {
        Type blankType=Type.VERTICAL;
        if (upstair.isBlank()) {
          BlankData blankData=(BlankData)upstair;
          if (blankData.getType() == Type.VERTICAL) {
            upstair.setRowSpan(upstair.getRowSpan() + rowspan);
            if (!isInContainer(blankData,rowContainer)) {
              upstair.decreasRowSpanInDesign();
            }
          }
          blankType=blankData.getType();
        }
 else {
          upstair.setRowSpan(upstair.getRowSpan() + rowspan);
          if (!isInContainer(upstair,rowContainer)) {
            upstair.decreasRowSpanInDesign();
          }
        }
        int rowIndex=upstair.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(upstair);
          blank.setRowIndex(rowIndex + p);
          blank.setType(blankType);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
 else     if (upstair != null && upstair.getRowSpanInDesign() > 0 && !isInContainer(upstair,rowContainer)) {
      upstair.decreasRowSpanInDesign();
    }
  }
}",0.98134810710988
68119,"public void addCell(ICellContent cellcontent,int col,int colSpan,int rowSpan,IStyle style){
  XlsTable table=tables.peek();
  ContainerSizeInfo cellSizeInfo=table.getColumnSizeInfo(col,colSpan);
  int diagonalNumber=cellcontent.getDiagonalNumber();
  StyleEntry cellStyleEntry=null;
  if (diagonalNumber != 0) {
    String diagonalColor=cellcontent.getDiagonalColor();
    String diagonalStyle=cellcontent.getDiagonalStyle();
    int diagonalWidth=PropertyUtil.getDimensionValue(cellcontent,cellcontent.getDiagonalWidth(),cellSizeInfo.getWidth());
    cellStyleEntry=engine.createCellEntry(cellSizeInfo,style,diagonalColor,diagonalStyle,diagonalWidth,getParentStyle());
  }
 else {
    cellStyleEntry=engine.createEntry(cellSizeInfo,style,getParentStyle());
  }
  XlsCell cell=new XlsCell(cellStyleEntry,cellSizeInfo,getCurrentContainer(),rowSpan);
  addContainer(cell);
}","public void addCell(ICellContent cellcontent,int col,int colSpan,int rowSpan,IStyle style){
  if (!isHidden(cellcontent)) {
    rowVisibilities.pop();
    rowVisibilities.push(true);
    XlsTable table=tables.peek();
    ContainerSizeInfo cellSizeInfo=table.getColumnSizeInfo(col,colSpan);
    int diagonalNumber=cellcontent.getDiagonalNumber();
    StyleEntry cellStyleEntry=null;
    if (diagonalNumber != 0) {
      String diagonalColor=cellcontent.getDiagonalColor();
      String diagonalStyle=cellcontent.getDiagonalStyle();
      int diagonalWidth=PropertyUtil.getDimensionValue(cellcontent,cellcontent.getDiagonalWidth(),cellSizeInfo.getWidth());
      cellStyleEntry=engine.createCellEntry(cellSizeInfo,style,diagonalColor,diagonalStyle,diagonalWidth,getParentStyle());
    }
 else {
      cellStyleEntry=engine.createEntry(cellSizeInfo,style,getParentStyle());
    }
    XlsCell cell=new XlsCell(cellStyleEntry,cellSizeInfo,getCurrentContainer(),rowSpan);
    addContainer(cell);
  }
}",0.9126941617568292
68120,"public void addRow(IStyle style){
  XlsContainer parent=getCurrentContainer();
  ContainerSizeInfo sizeInfo=parent.getSizeInfo();
  XlsContainer container=createContainer(sizeInfo,style,parent);
  container.setEmpty(false);
  addContainer(container);
}","public void addRow(IStyle style){
  rowVisibilities.push(false);
  XlsContainer parent=getCurrentContainer();
  ContainerSizeInfo sizeInfo=parent.getSizeInfo();
  XlsContainer container=createContainer(sizeInfo,style,parent);
  container.setEmpty(false);
  addContainer(container);
}",0.9420560747663552
68121,"public void endRow(float rowHeight){
  synchronize(rowHeight);
  endContainer();
}","public void endRow(float rowHeight){
  if (rowVisibilities.pop()) {
    synchronize(rowHeight);
  }
  endContainer();
}",0.8159203980099502
68122,"public void endCell(){
  endNormalContainer();
}","public void endCell(ICellContent cell){
  if (!isHidden(cell)) {
    endNormalContainer();
  }
}",0.6666666666666666
68123,"public void paintControl(PaintEvent pe){
  if (idr != null && fdCurrent != null && bUseSize) {
    idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,pe.gc);
    TextRenderEvent tre=new TextRenderEvent(this);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    TextAlignment ta=TextAlignmentImpl.create();
    if (fdCurrent != null) {
      ta.setHorizontalAlignment(ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment());
      ta.setVerticalAlignment(ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment());
    }
 else {
      ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
      ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    }
    tre.setBlockAlignment(ta);
    Bounds bo=BoundsImpl.create(0,0,this.getSize().x - 3,this.getSize().y - 3);
    tre.setBlockBounds(bo);
    String fontName=ChartUIUtil.getFontName(fdCurrent);
    Text tx=TextImpl.create(fontName);
    FontDefinition fd=fdCurrent.copyInstance();
    fd.setName(fontName);
    if (!fd.isSetSize()) {
      fd.setSize(9);
    }
    tx.setFont(fd);
    ColorDefinition cdFore, cdBack;
    if (!this.isEnabled()) {
      Color cFore=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
      Color cBack=Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
      cdFore=ColorDefinitionImpl.create(cFore.getRed(),cFore.getGreen(),cFore.getBlue());
      cdBack=ColorDefinitionImpl.create(cBack.getRed(),cBack.getGreen(),cBack.getBlue());
    }
 else {
      Color cBack=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
      cdBack=ColorDefinitionImpl.create(cBack.getRed(),cBack.getGreen(),cBack.getBlue());
      if (cdCurrent != null && bUseColor) {
        cdFore=cdCurrent.copyInstance();
      }
 else {
        cdFore=ColorDefinitionImpl.BLACK();
      }
    }
    tx.setColor(cdFore);
    Label lb=LabelImpl.create();
    lb.setBackground(cdBack);
    lb.setCaption(tx);
    tre.setLabel(lb);
    RectangleRenderEvent rre=new RectangleRenderEvent(this);
    rre.setBounds(bo);
    rre.setBackground(cdBack);
    try {
      idr.fillRectangle(rre);
      idr.drawText(tre);
    }
 catch (    ChartException e) {
    }
    return;
  }
  Font fSize=null;
  Font fCurrent=null;
  Color cFore=null;
  Color cBack=null;
  GC gc=pe.gc;
  gc.setAdvanced(true);
  Font fOld=gc.getFont();
  if (!this.isEnabled()) {
    cFore=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
    cBack=Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
  }
 else {
    cBack=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
    if (cdCurrent != null && bUseColor && cdCurrent.getTransparency() > 0) {
      cFore=new Color(this.getDisplay(),cdCurrent.getRed(),cdCurrent.getGreen(),cdCurrent.getBlue());
    }
 else {
      cFore=new Color(this.getDisplay(),0,0,0);
    }
  }
  gc.setForeground(cFore);
  gc.setBackground(cBack);
  gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
  if (fdCurrent != null) {
    int iStyle=(fdCurrent.isSetBold() && fdCurrent.isBold()) ? SWT.BOLD : SWT.NORMAL;
    iStyle|=(fdCurrent.isSetItalic() && fdCurrent.isItalic()) ? SWT.ITALIC : iStyle;
    String sFontName=ChartUIUtil.getFontName(fdCurrent);
    if (!bUseSize) {
      gc.setClipping(2,2,this.getSize().x - 40,26);
      fCurrent=new Font(this.getDisplay(),ChartUIUtil.getFontName(fdCurrent),fOld.getFontData()[0].getHeight(),iStyle);
    }
 else {
      fCurrent=new Font(this.getDisplay(),ChartUIUtil.getFontName(fdCurrent),fdCurrent.isSetSize() ? (int)fdCurrent.getSize() : 9,iStyle);
    }
    gc.setFont(fCurrent);
    int iStartX=5;
    int iStartY=3;
    if (bUseAlignment) {
      if (ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment().equals(HorizontalAlignment.LEFT_LITERAL)) {
        iStartX=5;
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment().equals(HorizontalAlignment.CENTER_LITERAL)) {
        iStartX=this.getSize().x / 2 - (getStringWidth(gc,sFontName).x / 2);
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment().equals(HorizontalAlignment.RIGHT_LITERAL)) {
        iStartX=this.getSize().x - getStringWidth(gc,sFontName).x - 5;
      }
      if (ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment().equals(VerticalAlignment.TOP_LITERAL)) {
        iStartY=3;
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment().equals(VerticalAlignment.CENTER_LITERAL)) {
        iStartY=(this.getSize().y / 2);
        if (bUseSize) {
          iStartY-=(getStringWidth(gc,sFontName).y / 2);
        }
 else {
          iStartY-=15;
        }
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment().equals(VerticalAlignment.BOTTOM_LITERAL)) {
        iStartY=this.getSize().y;
        if (bUseSize) {
          iStartY-=(getStringWidth(gc,sFontName).y) + 5;
        }
 else {
          iStartY-=30;
        }
      }
    }
    gc.drawText(sFontName,iStartX,iStartY);
    if (fdCurrent.isUnderline()) {
      gc.drawLine(iStartX,iStartY + getStringWidth(gc,sFontName).y - gc.getFontMetrics().getDescent(),iStartX + getStringWidth(gc,sFontName).x - gc.getFontMetrics().getDescent(),iStartY + getStringWidth(gc,sFontName).y - gc.getFontMetrics().getDescent());
    }
    if (fdCurrent.isStrikethrough()) {
      gc.drawLine(iStartX,iStartY + (getStringWidth(gc,sFontName).y / 2) + 1,iStartX + getStringWidth(gc,sFontName).x,iStartY + (getStringWidth(gc,sFontName).y / 2) + 1);
    }
    if (!bUseSize) {
      gc.setClipping(1,1,this.getSize().x,this.getSize().y);
      fSize=new Font(this.getDisplay(),""String_Node_Str"",fOld.getFontData()[0].getHeight(),SWT.NORMAL);
      gc.setFont(fSize);
      String sizeString=""String_Node_Str"" + (fdCurrent.isSetSize() ? String.valueOf((int)fdCurrent.getSize()) : ChartUIUtil.FONT_AUTO) + ""String_Node_Str"";
      Point pt=gc.textExtent(sizeString);
      gc.drawText(sizeString,this.getSize().x - pt.x - this.getBorderWidth()- 2,(this.getSize().y - pt.y) / 2 - 1);
      fSize.dispose();
      preferredWidth=getStringWidth(gc,sFontName).x + getStringWidth(gc,sizeString).x + 5+ iStartX;
    }
    fCurrent.dispose();
  }
  if (this.isEnabled()) {
    cFore.dispose();
  }
  gc.setFont(fOld);
}","public void paintControl(PaintEvent pe){
  if (idr != null && fdCurrent != null && bUseSize) {
    idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,pe.gc);
    TextRenderEvent tre=new TextRenderEvent(this);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    TextAlignment ta=TextAlignmentImpl.create();
    if (fdCurrent != null) {
      ta.setHorizontalAlignment(ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment());
      ta.setVerticalAlignment(ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment());
    }
 else {
      ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
      ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    }
    tre.setBlockAlignment(ta);
    Bounds bo=BoundsImpl.create(0,0,this.getSize().x - 3,this.getSize().y - 3);
    tre.setBlockBounds(bo);
    String fontName=ChartUIUtil.getFontName(fdCurrent);
    Text tx=TextImpl.create(fontName);
    FontDefinition fd=fdCurrent.copyInstance();
    fd.setName(fontName);
    if (!fd.isSetSize()) {
      fd.setSize(9);
    }
    tx.setFont(fd);
    ColorDefinition cdFore, cdBack;
    if (!this.isEnabled()) {
      Color cFore=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
      Color cBack=Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
      cdFore=ColorDefinitionImpl.create(cFore.getRed(),cFore.getGreen(),cFore.getBlue());
      cdBack=ColorDefinitionImpl.create(cBack.getRed(),cBack.getGreen(),cBack.getBlue());
    }
 else {
      Color cBack=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
      cdBack=ColorDefinitionImpl.create(cBack.getRed(),cBack.getGreen(),cBack.getBlue());
      if (cdCurrent != null && bUseColor) {
        cdFore=cdCurrent.copyInstance();
      }
 else {
        Color cFore=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_FOREGROUND);
        cdFore=ColorDefinitionImpl.create(cFore.getRed(),cFore.getGreen(),cFore.getBlue());
      }
    }
    tx.setColor(cdFore);
    Label lb=LabelImpl.create();
    lb.setBackground(cdBack);
    lb.setCaption(tx);
    tre.setLabel(lb);
    RectangleRenderEvent rre=new RectangleRenderEvent(this);
    rre.setBounds(bo);
    rre.setBackground(cdBack);
    try {
      idr.fillRectangle(rre);
      idr.drawText(tre);
    }
 catch (    ChartException e) {
    }
    return;
  }
  Font fSize=null;
  Font fCurrent=null;
  Color cFore=null;
  Color cBack=null;
  GC gc=pe.gc;
  gc.setAdvanced(true);
  Font fOld=gc.getFont();
  if (!this.isEnabled()) {
    cFore=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
    cBack=Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
  }
 else {
    cBack=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
    if (cdCurrent != null && bUseColor && cdCurrent.getTransparency() > 0) {
      cFore=new Color(this.getDisplay(),cdCurrent.getRed(),cdCurrent.getGreen(),cdCurrent.getBlue());
    }
 else {
      cFore=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_FOREGROUND);
    }
  }
  gc.setForeground(cFore);
  gc.setBackground(cBack);
  gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
  if (fdCurrent != null) {
    int iStyle=(fdCurrent.isSetBold() && fdCurrent.isBold()) ? SWT.BOLD : SWT.NORMAL;
    iStyle|=(fdCurrent.isSetItalic() && fdCurrent.isItalic()) ? SWT.ITALIC : iStyle;
    String sFontName=ChartUIUtil.getFontName(fdCurrent);
    if (!bUseSize) {
      gc.setClipping(2,2,this.getSize().x - 40,26);
      fCurrent=new Font(this.getDisplay(),ChartUIUtil.getFontName(fdCurrent),fOld.getFontData()[0].getHeight(),iStyle);
    }
 else {
      fCurrent=new Font(this.getDisplay(),ChartUIUtil.getFontName(fdCurrent),fdCurrent.isSetSize() ? (int)fdCurrent.getSize() : 9,iStyle);
    }
    gc.setFont(fCurrent);
    int iStartX=5;
    int iStartY=3;
    if (bUseAlignment) {
      if (ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment().equals(HorizontalAlignment.LEFT_LITERAL)) {
        iStartX=5;
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment().equals(HorizontalAlignment.CENTER_LITERAL)) {
        iStartX=this.getSize().x / 2 - (getStringWidth(gc,sFontName).x / 2);
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment().equals(HorizontalAlignment.RIGHT_LITERAL)) {
        iStartX=this.getSize().x - getStringWidth(gc,sFontName).x - 5;
      }
      if (ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment().equals(VerticalAlignment.TOP_LITERAL)) {
        iStartY=3;
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment().equals(VerticalAlignment.CENTER_LITERAL)) {
        iStartY=(this.getSize().y / 2);
        if (bUseSize) {
          iStartY-=(getStringWidth(gc,sFontName).y / 2);
        }
 else {
          iStartY-=15;
        }
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment().equals(VerticalAlignment.BOTTOM_LITERAL)) {
        iStartY=this.getSize().y;
        if (bUseSize) {
          iStartY-=(getStringWidth(gc,sFontName).y) + 5;
        }
 else {
          iStartY-=30;
        }
      }
    }
    gc.drawText(sFontName,iStartX,iStartY);
    if (fdCurrent.isUnderline()) {
      gc.drawLine(iStartX,iStartY + getStringWidth(gc,sFontName).y - gc.getFontMetrics().getDescent(),iStartX + getStringWidth(gc,sFontName).x - gc.getFontMetrics().getDescent(),iStartY + getStringWidth(gc,sFontName).y - gc.getFontMetrics().getDescent());
    }
    if (fdCurrent.isStrikethrough()) {
      gc.drawLine(iStartX,iStartY + (getStringWidth(gc,sFontName).y / 2) + 1,iStartX + getStringWidth(gc,sFontName).x,iStartY + (getStringWidth(gc,sFontName).y / 2) + 1);
    }
    if (!bUseSize) {
      gc.setClipping(1,1,this.getSize().x,this.getSize().y);
      fSize=new Font(this.getDisplay(),""String_Node_Str"",fOld.getFontData()[0].getHeight(),SWT.NORMAL);
      gc.setFont(fSize);
      String sizeString=""String_Node_Str"" + (fdCurrent.isSetSize() ? String.valueOf((int)fdCurrent.getSize()) : ChartUIUtil.FONT_AUTO) + ""String_Node_Str"";
      Point pt=gc.textExtent(sizeString);
      gc.drawText(sizeString,this.getSize().x - pt.x - this.getBorderWidth()- 2,(this.getSize().y - pt.y) / 2 - 1);
      fSize.dispose();
      preferredWidth=getStringWidth(gc,sFontName).x + getStringWidth(gc,sizeString).x + 5+ iStartX;
    }
    fCurrent.dispose();
  }
  if (this.isEnabled()) {
    cFore.dispose();
  }
  gc.setFont(fOld);
}",0.9801283054295102
68124,"/** 
 * @param parent Parent composite to which the canvas is to be added
 * @param style SWT style for this composite
 * @param fdSelected FontDefinition instance that holds the font information to be displayed
 * @param cdSelected ColorDefinition instance that provides the foreground color for text to be displayed
 */
public FontCanvas(Composite parent,int style,FontDefinition fdSelected,ColorDefinition cdSelected,boolean bUseSize,boolean bUseColor,boolean bUseAlignment){
  super(parent,style);
  this.setSize(parent.getClientArea().x,parent.getClientArea().x);
  this.fdCurrent=fdSelected == null ? FontDefinitionImpl.createEmpty() : fdSelected;
  this.cdCurrent=cdSelected == null ? ColorDefinitionImpl.create(0,0,0) : cdSelected;
  this.bUseColor=bUseColor;
  this.bUseAlignment=bUseAlignment;
  this.bUseSize=bUseSize;
  try {
    idr=PluginSettings.instance().getDevice(""String_Node_Str"");
  }
 catch (  ChartException pex) {
    idr=null;
    WizardBase.displayException(pex);
  }
  addDisposeListener(this);
  addPaintListener(this);
  GC gc=new GC(this);
  Event e=new Event();
  e.gc=gc;
  notifyListeners(SWT.Paint,e);
}","/** 
 * @param parent Parent composite to which the canvas is to be added
 * @param style SWT style for this composite
 * @param fdSelected FontDefinition instance that holds the font information to be displayed
 * @param cdSelected ColorDefinition instance that provides the foreground color for text to be displayed
 */
public FontCanvas(Composite parent,int style,FontDefinition fdSelected,ColorDefinition cdSelected,boolean bUseSize,boolean bUseColor,boolean bUseAlignment){
  super(parent,style);
  this.setSize(parent.getClientArea().x,parent.getClientArea().x);
  this.fdCurrent=fdSelected == null ? FontDefinitionImpl.createEmpty() : fdSelected;
  this.cdCurrent=cdSelected;
  this.bUseColor=bUseColor;
  this.bUseAlignment=bUseAlignment;
  this.bUseSize=bUseSize;
  try {
    idr=PluginSettings.instance().getDevice(""String_Node_Str"");
  }
 catch (  ChartException pex) {
    idr=null;
    WizardBase.displayException(pex);
  }
  addDisposeListener(this);
  addPaintListener(this);
  GC gc=new GC(this);
  Event e=new Event();
  e.gc=gc;
  notifyListeners(SWT.Paint,e);
}",0.9742895805142084
68125,"/** 
 */
private void init(){
  this.setSize(getParent().getClientArea().width,getParent().getClientArea().height);
  vListeners=new Vector<Listener>();
}","/** 
 */
private void init(){
  if (Display.getCurrent().getHighContrast()) {
    GC gc=new GC(this);
    iSize=gc.getFontMetrics().getHeight() + 2;
  }
  this.setSize(getParent().getClientArea().width,getParent().getClientArea().height);
  vListeners=new Vector<Listener>();
}",0.7146171693735499
68126,"/** 
 * @param glURL
 * @param glParameter
 */
private void createURLComposite(Composite parent){
  GridLayout gl=(GridLayout)parent.getLayout();
  gl.numColumns=2;
  Label lblTarget=new Label(parent,SWT.NONE);
  GridData gdLBLTarget=new GridData();
  gdLBLTarget.horizontalIndent=2;
  lblTarget.setLayoutData(gdLBLTarget);
  lblTarget.setText(Messages.getString(""String_Node_Str""));
  fTxtHyperlinkLabel=new Text(parent,SWT.BORDER);
  GridData gdTXTTarget=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTTarget.widthHint=80;
  fTxtHyperlinkLabel.setLayoutData(gdTXTTarget);
  AssistField af=new TextAssistField(fTxtHyperlinkLabel,null){
    private boolean fIsDuplicate=false;
    public boolean isValid(){
      fIsDuplicate=false;
      String text=fTxtHyperlinkLabel.getText();
      if (text == null || ""String_Node_Str"".equals(text.trim())) {
        return false;
      }
      if (fExistingLabels != null && fExistingLabels.contains(fTxtHyperlinkLabel.getText())) {
        fIsDuplicate=true;
        return false;
      }
      return true;
    }
    public boolean isRequiredField(){
      return true;
    }
    public String getErrorMessage(){
      if (fIsDuplicate) {
        return Messages.getString(""String_Node_Str"");
      }
      return Messages.getString(""String_Node_Str"");
    }
  }
;
  FieldAssistHelper.getInstance().addRequiredFieldIndicator(af,lblTarget);
  Label lblBaseURL=new Label(parent,SWT.NONE);
  GridData gdLBLBaseURL=new GridData();
  gdLBLBaseURL.horizontalIndent=2;
  lblBaseURL.setLayoutData(gdLBLBaseURL);
  lblBaseURL.setText(Messages.getString(""String_Node_Str""));
  fBtnBaseURL=new Button(parent,SWT.NONE);
{
    GridData gd=new GridData();
    fBtnBaseURL.setLayoutData(gd);
    fBtnBaseURL.setText(Messages.getString(""String_Node_Str""));
    fBtnBaseURL.setToolTipText(Messages.getString(""String_Node_Str""));
    fBtnBaseURL.addSelectionListener(this);
    fBtnBaseURL.setEnabled(fContext.getUIServiceProvider().isInvokingSupported());
  }
  Label lblDefine=new Label(parent,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    lblDefine.setLayoutData(gd);
    lblDefine.setText(Messages.getString(""String_Node_Str""));
  }
  fBtnAdvanced=new Button(parent,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    fBtnAdvanced.setLayoutData(gd);
    fBtnAdvanced.setText(getAdvancedButtonText(bAdvanced));
    fBtnAdvanced.setToolTipText(Messages.getString(""String_Node_Str""));
    fBtnAdvanced.addSelectionListener(this);
    fBtnAdvanced.setEnabled(fbEnableURLParameters);
  }
  fGrpParameters=new Group(parent,SWT.NONE);
  GridData gdGRPParameters=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPParameters.horizontalSpan=3;
  fGrpParameters.setLayoutData(gdGRPParameters);
  GridLayout glParameter=new GridLayout();
  glParameter.marginWidth=2;
  glParameter.marginHeight=6;
  glParameter.horizontalSpacing=6;
  glParameter.numColumns=3;
  fGrpParameters.setLayout(glParameter);
  fGrpParameters.setText(Messages.getString(""String_Node_Str""));
  fGrpParameters.setVisible(bAdvanced);
  StyledText stParameters=new StyledText(fGrpParameters,SWT.WRAP | SWT.READ_ONLY);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    stParameters.setLayoutData(gd);
    stParameters.setText(Messages.getString(""String_Node_Str""));
    stParameters.setBackground(parent.getBackground());
  }
  Label lblBaseParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLBaseParm=new GridData();
    gdLBLBaseParm.horizontalIndent=2;
    lblBaseParm.setLayoutData(gdLBLBaseParm);
    lblBaseParm.setText(Messages.getString(""String_Node_Str""));
    lblBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtBaseParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTBaseParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTBaseParm.horizontalSpan=2;
  fTxtBaseParm.setLayoutData(gdTXTBaseParm);
  fTxtBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtBaseParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_CATEGORY_SERIES) != TriggerDataComposite.DISABLE_CATEGORY_SERIES));
  Label lblValueParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLValueParm=new GridData();
    gdLBLValueParm.horizontalIndent=2;
    lblValueParm.setLayoutData(gdLBLValueParm);
    lblValueParm.setText(Messages.getString(""String_Node_Str""));
    lblValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtValueParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTValueParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTValueParm.horizontalSpan=2;
  fTxtValueParm.setLayoutData(gdTXTValueParm);
  fTxtValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtValueParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_VALUE_SERIES) != TriggerDataComposite.DISABLE_VALUE_SERIES));
  Label lblSeriesParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLSeriesParm=new GridData();
    gdLBLSeriesParm.horizontalIndent=2;
    lblSeriesParm.setLayoutData(gdLBLSeriesParm);
    lblSeriesParm.setText(Messages.getString(""String_Node_Str""));
    lblSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtSeriesParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTSeriesParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTSeriesParm.horizontalSpan=2;
  fTxtSeriesParm.setLayoutData(gdTXTSeriesParm);
  fTxtSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtSeriesParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_VALUE_SERIES_NAME) != TriggerDataComposite.DISABLE_VALUE_SERIES_NAME));
}","/** 
 * @param glURL
 * @param glParameter
 */
private void createURLComposite(Composite parent){
  GridLayout gl=(GridLayout)parent.getLayout();
  gl.numColumns=2;
  Label lblTarget=new Label(parent,SWT.NONE);
  GridData gdLBLTarget=new GridData();
  gdLBLTarget.horizontalIndent=2;
  lblTarget.setLayoutData(gdLBLTarget);
  lblTarget.setText(Messages.getString(""String_Node_Str""));
  fTxtHyperlinkLabel=new Text(parent,SWT.BORDER);
  GridData gdTXTTarget=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTTarget.widthHint=80;
  fTxtHyperlinkLabel.setLayoutData(gdTXTTarget);
  AssistField af=new TextAssistField(fTxtHyperlinkLabel,null){
    private boolean fIsDuplicate=false;
    public boolean isValid(){
      fIsDuplicate=false;
      String text=fTxtHyperlinkLabel.getText();
      if (text == null || ""String_Node_Str"".equals(text.trim())) {
        return false;
      }
      if (fExistingLabels != null && fExistingLabels.contains(fTxtHyperlinkLabel.getText())) {
        fIsDuplicate=true;
        return false;
      }
      return true;
    }
    public boolean isRequiredField(){
      return true;
    }
    public String getErrorMessage(){
      if (fIsDuplicate) {
        return Messages.getString(""String_Node_Str"");
      }
      return Messages.getString(""String_Node_Str"");
    }
  }
;
  FieldAssistHelper.getInstance().addRequiredFieldIndicator(af,lblTarget);
  Label lblBaseURL=new Label(parent,SWT.NONE);
  GridData gdLBLBaseURL=new GridData();
  gdLBLBaseURL.horizontalIndent=2;
  lblBaseURL.setLayoutData(gdLBLBaseURL);
  lblBaseURL.setText(Messages.getString(""String_Node_Str""));
  fBtnBaseURL=new Button(parent,SWT.NONE);
{
    GridData gd=new GridData();
    fBtnBaseURL.setLayoutData(gd);
    fBtnBaseURL.setText(Messages.getString(""String_Node_Str""));
    fBtnBaseURL.setToolTipText(Messages.getString(""String_Node_Str""));
    fBtnBaseURL.addSelectionListener(this);
    fBtnBaseURL.setEnabled(fContext.getUIServiceProvider().isInvokingSupported());
  }
  Label lblDefine=new Label(parent,SWT.WRAP);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    lblDefine.setLayoutData(gd);
    lblDefine.setText(Messages.getString(""String_Node_Str""));
  }
  fBtnAdvanced=new Button(parent,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    fBtnAdvanced.setLayoutData(gd);
    fBtnAdvanced.setText(getAdvancedButtonText(bAdvanced));
    fBtnAdvanced.setToolTipText(Messages.getString(""String_Node_Str""));
    fBtnAdvanced.addSelectionListener(this);
    fBtnAdvanced.setEnabled(fbEnableURLParameters);
  }
  fGrpParameters=new Group(parent,SWT.NONE);
  GridData gdGRPParameters=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPParameters.horizontalSpan=3;
  fGrpParameters.setLayoutData(gdGRPParameters);
  GridLayout glParameter=new GridLayout();
  glParameter.marginWidth=2;
  glParameter.marginHeight=6;
  glParameter.horizontalSpacing=6;
  glParameter.numColumns=3;
  fGrpParameters.setLayout(glParameter);
  fGrpParameters.setText(Messages.getString(""String_Node_Str""));
  fGrpParameters.setVisible(bAdvanced);
  StyledText stParameters=new StyledText(fGrpParameters,SWT.WRAP | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    stParameters.setLayoutData(gd);
    stParameters.setText(Messages.getString(""String_Node_Str""));
    stParameters.setBackground(parent.getBackground());
  }
  Label lblBaseParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLBaseParm=new GridData();
    gdLBLBaseParm.horizontalIndent=2;
    lblBaseParm.setLayoutData(gdLBLBaseParm);
    lblBaseParm.setText(Messages.getString(""String_Node_Str""));
    lblBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtBaseParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTBaseParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTBaseParm.horizontalSpan=2;
  fTxtBaseParm.setLayoutData(gdTXTBaseParm);
  fTxtBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtBaseParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_CATEGORY_SERIES) != TriggerDataComposite.DISABLE_CATEGORY_SERIES));
  Label lblValueParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLValueParm=new GridData();
    gdLBLValueParm.horizontalIndent=2;
    lblValueParm.setLayoutData(gdLBLValueParm);
    lblValueParm.setText(Messages.getString(""String_Node_Str""));
    lblValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtValueParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTValueParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTValueParm.horizontalSpan=2;
  fTxtValueParm.setLayoutData(gdTXTValueParm);
  fTxtValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtValueParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_VALUE_SERIES) != TriggerDataComposite.DISABLE_VALUE_SERIES));
  Label lblSeriesParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLSeriesParm=new GridData();
    gdLBLSeriesParm.horizontalIndent=2;
    lblSeriesParm.setLayoutData(gdLBLSeriesParm);
    lblSeriesParm.setText(Messages.getString(""String_Node_Str""));
    lblSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtSeriesParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTSeriesParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTSeriesParm.horizontalSpan=2;
  fTxtSeriesParm.setLayoutData(gdTXTSeriesParm);
  fTxtSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtSeriesParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_VALUE_SERIES_NAME) != TriggerDataComposite.DISABLE_VALUE_SERIES_NAME));
}",0.5642438856355494
68127,"/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glAttributes=new GridLayout();
  glAttributes.horizontalSpacing=5;
  glAttributes.verticalSpacing=5;
  glAttributes.marginHeight=7;
  glAttributes.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=2;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  FillLayout flOutline=new FillLayout();
  this.setLayout(flMain);
  if (sGroupName == null || sGroupName.length() == 0) {
    grpAttributes=new Composite(this,SWT.NONE);
  }
 else {
    grpAttributes=new Group(this,SWT.NONE);
    ((Group)grpAttributes).setText(sGroupName);
  }
  grpAttributes.setLayout(glAttributes);
  cmpGeneral=new Composite(grpAttributes,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_HORIZONTAL);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  boolean bEnableUI=bEnabled && this.lblCurrent.isVisible();
  if (attributesContext.isVisibilityEnabled) {
    cbVisible=new Button(cmpGeneral,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=2;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setSelection(this.lblCurrent.isVisible());
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (attributesContext.isLabelEnabled) {
    lblLabel=new Label(cmpGeneral,SWT.NONE);
{
      GridData gd=new GridData();
      lblLabel.setLayoutData(gd);
      lblLabel.setText(Messages.getString(""String_Node_Str""));
    }
    txtLabel=new ExternalizedTextEditorComposite(cmpGeneral,SWT.BORDER | SWT.SINGLE,-1,-1,wizardContext.getUIServiceProvider().getRegisteredKeys(),wizardContext.getUIServiceProvider(),""String_Node_Str"");
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      txtLabel.setLayoutData(gd);
      txtLabel.addListener(this);
    }
  }
  if (attributesContext.isPositionEnabled) {
    lblPosition=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLPosition=new GridData();
    lblPosition.setLayoutData(gdLBLPosition);
    lblPosition.setText(Messages.getString(""String_Node_Str""));
    lblPosition.setEnabled(bEnableUI);
    cmbPosition=new Combo(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
    cmbPosition.setLayoutData(gdCMBPosition);
    cmbPosition.addSelectionListener(this);
    cmbPosition.setEnabled(bEnableUI);
  }
  if (attributesContext.isFontEnabled) {
    lblFont=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFont=new GridData();
    lblFont.setLayoutData(gdLFont);
    lblFont.setText(Messages.getString(""String_Node_Str""));
    lblFont.setEnabled(bEnableUI);
    fdcFont=new FontDefinitionComposite(cmpGeneral,SWT.NONE,wizardContext,this.fdCurrent,this.cdFont,attributesContext.isFontAlignmentEnabled);
    GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
    gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
    gdFDCFont.grabExcessVerticalSpace=false;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
    fdcFont.setEnabled(bEnableUI);
  }
  lblFill=new Label(cmpGeneral,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  lblFill.setEnabled(bEnableUI);
  fccBackground=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,fBackground,false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  fccBackground.setEnabled(bEnableUI);
  if (attributesContext.isShadowEnabled) {
    lblShadow=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(bEnableUI);
    fccShadow=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,cdShadow,false,false);
    GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(bEnableUI);
  }
  grpOutline=new Group(grpAttributes,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGOutline.heightHint=110;
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(flOutline);
  grpOutline.setEnabled(bEnableUI);
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,wizardContext,laCurrent,true,true,true);
  liacOutline.addListener(this);
  liacOutline.setAttributesEnabled(bEnableUI);
  if (attributesContext.isInsetsEnabled) {
    icInsets=new InsetsComposite(grpAttributes,SWT.NONE,insets,sUnits,wizardContext.getUIServiceProvider());
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.heightHint=icInsets.getPreferredSize().y;
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.addListener(this);
    icInsets.setLayoutData(gdICInsets);
    icInsets.setEnabled(bEnableUI);
  }
  populateLists();
}","/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glAttributes=new GridLayout();
  glAttributes.horizontalSpacing=5;
  glAttributes.verticalSpacing=5;
  glAttributes.marginHeight=7;
  glAttributes.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=2;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  FillLayout flOutline=new FillLayout();
  this.setLayout(flMain);
  if (sGroupName == null || sGroupName.length() == 0) {
    grpAttributes=new Composite(this,SWT.NONE);
  }
 else {
    grpAttributes=new Group(this,SWT.NONE);
    ((Group)grpAttributes).setText(sGroupName);
  }
  grpAttributes.setLayout(glAttributes);
  cmpGeneral=new Composite(grpAttributes,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_HORIZONTAL);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  boolean bEnableUI=bEnabled && this.lblCurrent.isVisible();
  if (attributesContext.isVisibilityEnabled) {
    cbVisible=new Button(cmpGeneral,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=2;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setSelection(this.lblCurrent.isVisible());
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (attributesContext.isLabelEnabled) {
    lblLabel=new Label(cmpGeneral,SWT.NONE);
{
      GridData gd=new GridData();
      lblLabel.setLayoutData(gd);
      lblLabel.setText(Messages.getString(""String_Node_Str""));
    }
    txtLabel=new ExternalizedTextEditorComposite(cmpGeneral,SWT.BORDER | SWT.SINGLE,-1,-1,wizardContext.getUIServiceProvider().getRegisteredKeys(),wizardContext.getUIServiceProvider(),""String_Node_Str"");
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      txtLabel.setLayoutData(gd);
      txtLabel.addListener(this);
    }
  }
  if (attributesContext.isPositionEnabled) {
    lblPosition=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLPosition=new GridData();
    lblPosition.setLayoutData(gdLBLPosition);
    lblPosition.setText(Messages.getString(""String_Node_Str""));
    lblPosition.setEnabled(bEnableUI);
    cmbPosition=new Combo(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
    cmbPosition.setLayoutData(gdCMBPosition);
    cmbPosition.addSelectionListener(this);
    cmbPosition.setEnabled(bEnableUI);
  }
  if (attributesContext.isFontEnabled) {
    lblFont=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFont=new GridData();
    lblFont.setLayoutData(gdLFont);
    lblFont.setText(Messages.getString(""String_Node_Str""));
    lblFont.setEnabled(bEnableUI);
    fdcFont=new FontDefinitionComposite(cmpGeneral,SWT.NONE,wizardContext,this.fdCurrent,this.cdFont,attributesContext.isFontAlignmentEnabled);
    GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
    gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
    gdFDCFont.grabExcessVerticalSpace=false;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
    fdcFont.setEnabled(bEnableUI);
  }
  lblFill=new Label(cmpGeneral,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  lblFill.setEnabled(bEnableUI);
  fccBackground=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,fBackground,false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  fccBackground.setEnabled(bEnableUI);
  if (attributesContext.isShadowEnabled) {
    lblShadow=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(bEnableUI);
    fccShadow=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,cdShadow,false,false);
    GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(bEnableUI);
  }
  grpOutline=new Group(grpAttributes,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(flOutline);
  grpOutline.setEnabled(bEnableUI);
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,wizardContext,laCurrent,true,true,true);
  liacOutline.addListener(this);
  liacOutline.setAttributesEnabled(bEnableUI);
  if (attributesContext.isInsetsEnabled) {
    icInsets=new InsetsComposite(grpAttributes,SWT.NONE,insets,sUnits,wizardContext.getUIServiceProvider());
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.addListener(this);
    icInsets.setLayoutData(gdICInsets);
    icInsets.setEnabled(bEnableUI);
  }
  populateLists();
}",0.9855100278284232
68128,"public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new Button(cmpBasic,SWT.CHECK);
{
      btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
      btnCategoryAxis.addSelectionListener(this);
      btnCategoryAxis.setSelection(getAxisForProcessing().isCategoryAxis());
      btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    }
    btnReverse=new Button(cmpBasic,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnCategoryAxis.setLayoutData(gd);
      btnReverse.setText(Messages.getString(""String_Node_Str""));
      btnReverse.addSelectionListener(this);
      btnReverse.setSelection(((ChartWithAxes)getChart()).isReverseCategory());
      btnReverse.setEnabled(btnCategoryAxis.getSelection());
    }
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getAxisForProcessing().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=250;
    gd.horizontalIndent=5;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.setSelection(getChart().getTitle().isVisible());
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getAxisForProcessing().getTitle().isVisible());
  }
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      gd.horizontalIndent=5;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      ChartUIUtil.setChartImageButtonHeightByPlatform(gdBTNFormatSpecifier);
      gdBTNFormatSpecifier.horizontalIndent=-3;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=2;
        gd.horizontalIndent=5;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=createDataElementComposite(cmpBasic);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=2;
        gd.horizontalIndent=5;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    gdFDCFont.horizontalIndent=5;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new Button(cmpLabel,SWT.CHECK);
{
    btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    btnLabelVisible.setLayoutData(gd);
    btnLabelVisible.addSelectionListener(this);
    btnLabelVisible.setSelection(getAxisForProcessing().getLabel().isVisible());
  }
  cbStaggered=new Button(cmpLabel,SWT.CHECK);
{
    Axis ax=getAxisForProcessing();
    boolean bStaggered=ax.isSetStaggered() && ax.isStaggered();
    boolean bNot3D=!isChart3D(ax);
    cbStaggered.setSelection(bNot3D && bStaggered);
    cbStaggered.setText(Messages.getString(""String_Node_Str""));
    cbStaggered.addSelectionListener(this);
    cbStaggered.setEnabled(bNot3D);
  }
  if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
    Label l=new Label(cmpBasic,SWT.NONE);
    l.setText(Messages.getString(""String_Node_Str""));
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(l);
    Composite cmpEditorWithUnit=new Composite(cmpBasic,SWT.NONE);
{
      GridData gd=new GridData();
      gd.widthHint=250;
      cmpEditorWithUnit.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      layout.marginWidth=0;
      layout.marginHeight=0;
      cmpEditorWithUnit.setLayout(layout);
    }
    lneLabelSpan=new LocalizedNumberEditorComposite(cmpEditorWithUnit,SWT.BORDER);
    new TextNumberEditorAssistField(lneLabelSpan.getTextControl(),null);
{
      lneLabelSpan.setValue(getAxisForProcessing().getLabelSpan());
      lneLabelSpan.addModifyListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalIndent=5;
      lneLabelSpan.setLayoutData(gd);
      lneLabelSpan.setEnabled(getAxisForProcessing().isSetLabelSpan());
    }
    new Label(cmpEditorWithUnit,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    btnFixLabelSpan=new Button(cmpBasic,SWT.CHECK);
{
      btnFixLabelSpan.setText(Messages.getString(""String_Node_Str""));
      btnFixLabelSpan.addSelectionListener(this);
      btnFixLabelSpan.setSelection(getAxisForProcessing().isSetLabelSpan());
    }
  }
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}","public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new Button(cmpBasic,SWT.CHECK);
{
      btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
      btnCategoryAxis.addSelectionListener(this);
      btnCategoryAxis.setSelection(getAxisForProcessing().isCategoryAxis());
      btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    }
    btnReverse=new Button(cmpBasic,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnCategoryAxis.setLayoutData(gd);
      btnReverse.setText(Messages.getString(""String_Node_Str""));
      btnReverse.addSelectionListener(this);
      btnReverse.setSelection(((ChartWithAxes)getChart()).isReverseCategory());
      btnReverse.setEnabled(btnCategoryAxis.getSelection());
    }
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getAxisForProcessing().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=250;
    gd.horizontalIndent=5;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.setSelection(getChart().getTitle().isVisible());
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getAxisForProcessing().getTitle().isVisible());
  }
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      gd.horizontalIndent=5;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      gdBTNFormatSpecifier.horizontalIndent=-3;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=2;
        gd.horizontalIndent=5;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=createDataElementComposite(cmpBasic);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=2;
        gd.horizontalIndent=5;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    gdFDCFont.horizontalIndent=5;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new Button(cmpLabel,SWT.CHECK);
{
    btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    btnLabelVisible.setLayoutData(gd);
    btnLabelVisible.addSelectionListener(this);
    btnLabelVisible.setSelection(getAxisForProcessing().getLabel().isVisible());
  }
  cbStaggered=new Button(cmpLabel,SWT.CHECK);
{
    Axis ax=getAxisForProcessing();
    boolean bStaggered=ax.isSetStaggered() && ax.isStaggered();
    boolean bNot3D=!isChart3D(ax);
    cbStaggered.setSelection(bNot3D && bStaggered);
    cbStaggered.setText(Messages.getString(""String_Node_Str""));
    cbStaggered.addSelectionListener(this);
    cbStaggered.setEnabled(bNot3D);
  }
  if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
    Label l=new Label(cmpBasic,SWT.NONE);
    l.setText(Messages.getString(""String_Node_Str""));
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(l);
    Composite cmpEditorWithUnit=new Composite(cmpBasic,SWT.NONE);
{
      GridData gd=new GridData();
      gd.widthHint=250;
      cmpEditorWithUnit.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      layout.marginWidth=0;
      layout.marginHeight=0;
      cmpEditorWithUnit.setLayout(layout);
    }
    lneLabelSpan=new LocalizedNumberEditorComposite(cmpEditorWithUnit,SWT.BORDER);
    new TextNumberEditorAssistField(lneLabelSpan.getTextControl(),null);
{
      lneLabelSpan.setValue(getAxisForProcessing().getLabelSpan());
      lneLabelSpan.addModifyListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalIndent=5;
      lneLabelSpan.setLayoutData(gd);
      lneLabelSpan.setEnabled(getAxisForProcessing().isSetLabelSpan());
    }
    new Label(cmpEditorWithUnit,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    btnFixLabelSpan=new Button(cmpBasic,SWT.CHECK);
{
      btnFixLabelSpan.setText(Messages.getString(""String_Node_Str""));
      btnFixLabelSpan.addSelectionListener(this);
      btnFixLabelSpan.setSelection(getAxisForProcessing().isSetLabelSpan());
    }
  }
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}",0.994573260976813
68129,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_MARKERS);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  GridLayout glList=new GridLayout();
  glList.numColumns=3;
  glList.horizontalSpacing=5;
  glList.verticalSpacing=5;
  glList.marginHeight=0;
  glList.marginWidth=0;
  cmpList=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPList=new GridData(GridData.FILL_BOTH);
  gdCMPList.horizontalSpan=2;
  cmpList.setLayoutData(gdCMPList);
  cmpList.setLayout(glList);
  GridLayout glButtons=new GridLayout();
  glButtons.numColumns=3;
  glButtons.horizontalSpacing=5;
  glButtons.verticalSpacing=5;
  glButtons.marginHeight=5;
  glButtons.marginWidth=0;
  Composite cmpButtons=new Composite(cmpList,SWT.NONE);
  GridData gdCMPButtons=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPButtons.horizontalSpan=3;
  cmpButtons.setLayoutData(gdCMPButtons);
  cmpButtons.setLayout(glButtons);
  btnAddLine=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAddLine=new GridData(GridData.FILL_HORIZONTAL);
  btnAddLine.setLayoutData(gdBTNAddLine);
  btnAddLine.setText(Messages.getString(""String_Node_Str""));
  btnAddLine.addSelectionListener(this);
  btnAddRange=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAddRange=new GridData(GridData.FILL_HORIZONTAL);
  btnAddRange.setLayoutData(gdBTNAddRange);
  btnAddRange.setText(Messages.getString(""String_Node_Str""));
  btnAddRange.addSelectionListener(this);
  btnRemove=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNRemove=new GridData(GridData.FILL_HORIZONTAL);
  btnRemove.setLayoutData(gdBTNRemove);
  btnRemove.setText(Messages.getString(""String_Node_Str""));
  btnRemove.addSelectionListener(this);
  lstMarkers=new List(cmpList,SWT.BORDER | SWT.SINGLE | SWT.V_SCROLL);
  GridData gdLSTMarkers=new GridData(GridData.FILL_HORIZONTAL);
  gdLSTMarkers.horizontalSpan=3;
  gdLSTMarkers.heightHint=100;
  lstMarkers.setLayoutData(gdLSTMarkers);
  lstMarkers.addSelectionListener(this);
  slMarkers=new StackLayout();
  slMarkers.marginHeight=0;
  slMarkers.marginWidth=0;
  grpGeneral=new Group(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  grpGeneral.setLayoutData(gdCMPGeneral);
  grpGeneral.setLayout(slMarkers);
  grpGeneral.setText(Messages.getString(""String_Node_Str""));
  GridLayout glMarkerLine=new GridLayout();
  glMarkerLine.numColumns=3;
  glMarkerLine.horizontalSpacing=5;
  glMarkerLine.verticalSpacing=5;
  glMarkerLine.marginHeight=7;
  glMarkerLine.marginWidth=7;
  cmpLine=new Composite(grpGeneral,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_HORIZONTAL);
  cmpLine.setLayoutData(gdGRPLine);
  cmpLine.setLayout(glMarkerLine);
  lblValue=new Label(cmpLine,SWT.NONE);
  GridData gdLBLValue=new GridData();
  gdLBLValue.horizontalIndent=5;
  lblValue.setLayoutData(gdLBLValue);
  lblValue.setText(Messages.getString(""String_Node_Str""));
  txtValue=createValuePicker(cmpLine,null);
  btnLineFormatSpecifier=new Button(cmpLine,SWT.PUSH);
  GridData gdBTNLineFormatSpecifier=new GridData();
  gdBTNLineFormatSpecifier.heightHint=20;
  btnLineFormatSpecifier.setLayoutData(gdBTNLineFormatSpecifier);
  btnLineFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnLineFormatSpecifier.addSelectionListener(this);
  btnLineFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblAnchor=new Label(cmpLine,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  gdLBLAnchor.horizontalIndent=5;
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbLineAnchor=new Combo(cmpLine,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBAnchor.horizontalSpan=2;
  cmbLineAnchor.setLayoutData(gdCMBAnchor);
  cmbLineAnchor.addSelectionListener(this);
  cmbLineAnchor.setVisibleItemCount(30);
  grpMarkerLine=new Group(cmpLine,SWT.NONE);
  GridData gdGRPMarkerLine=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPMarkerLine.horizontalSpan=3;
  grpMarkerLine.setLayoutData(gdGRPMarkerLine);
  grpMarkerLine.setLayout(new FillLayout());
  grpMarkerLine.setText(Messages.getString(""String_Node_Str""));
  liacMarkerLine=new LineAttributesComposite(grpMarkerLine,SWT.NONE,getContext(),null,true,true,true);
  liacMarkerLine.addListener(this);
  btnLineTriggers=new Button(cmpLine,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnLineTriggers.setLayoutData(gd);
    btnLineTriggers.setText(Messages.getString(""String_Node_Str""));
    btnLineTriggers.addSelectionListener(this);
    btnLineTriggers.setEnabled(getChart().getInteractivity().isEnable());
  }
  GridLayout glMarkerRange=new GridLayout();
  glMarkerRange.numColumns=3;
  glMarkerRange.horizontalSpacing=5;
  glMarkerRange.verticalSpacing=5;
  glMarkerRange.marginHeight=7;
  glMarkerRange.marginWidth=7;
  cmpRange=new Composite(grpGeneral,SWT.NONE);
  GridData gdGRPRange=new GridData(GridData.FILL_HORIZONTAL);
  cmpRange.setLayoutData(gdGRPRange);
  cmpRange.setLayout(glMarkerRange);
  lblStartValue=new Label(cmpRange,SWT.NONE);
  GridData gdLBLStartValue=new GridData();
  gdLBLStartValue.horizontalIndent=5;
  lblStartValue.setLayoutData(gdLBLStartValue);
  lblStartValue.setText(Messages.getString(""String_Node_Str""));
  txtStartValue=createValuePicker(cmpRange,null);
  btnStartFormatSpecifier=new Button(cmpRange,SWT.PUSH);
  GridData gdBTNStartFormatSpecifier=new GridData();
  gdBTNStartFormatSpecifier.heightHint=18;
  btnStartFormatSpecifier.setLayoutData(gdBTNStartFormatSpecifier);
  btnStartFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnStartFormatSpecifier.addSelectionListener(this);
  btnStartFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblEndValue=new Label(cmpRange,SWT.NONE);
  GridData gdLBLEndValue=new GridData();
  gdLBLEndValue.horizontalIndent=5;
  lblEndValue.setLayoutData(gdLBLEndValue);
  lblEndValue.setText(Messages.getString(""String_Node_Str""));
  txtEndValue=createValuePicker(cmpRange,null);
  btnEndFormatSpecifier=new Button(cmpRange,SWT.PUSH);
  GridData gdBTNEndFormatSpecifier=new GridData();
  gdBTNEndFormatSpecifier.heightHint=18;
  btnEndFormatSpecifier.setLayoutData(gdBTNEndFormatSpecifier);
  btnEndFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnEndFormatSpecifier.addSelectionListener(this);
  btnEndFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblRangeAnchor=new Label(cmpRange,SWT.NONE);
  GridData gdLBLRangeAnchor=new GridData();
  gdLBLRangeAnchor.horizontalIndent=5;
  lblRangeAnchor.setLayoutData(gdLBLRangeAnchor);
  lblRangeAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbRangeAnchor=new Combo(cmpRange,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBRangeAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBRangeAnchor.horizontalSpan=2;
  cmbRangeAnchor.setLayoutData(gdCMBRangeAnchor);
  cmbRangeAnchor.addSelectionListener(this);
  cmbRangeAnchor.setVisibleItemCount(30);
  lblRangeFill=new Label(cmpRange,SWT.NONE);
  GridData gdLBLRangeFill=new GridData();
  gdLBLRangeFill.horizontalIndent=5;
  lblRangeFill.setLayoutData(gdLBLRangeFill);
  lblRangeFill.setText(Messages.getString(""String_Node_Str""));
  fccRange=new FillChooserComposite(cmpRange,SWT.NONE,getContext(),null,true,true);
  GridData gdFCCRange=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCRange.horizontalSpan=2;
  fccRange.setLayoutData(gdFCCRange);
  fccRange.addListener(this);
  grpMarkerRange=new Group(cmpRange,SWT.NONE);
  GridData gdGRPMarkerRange=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPMarkerRange.horizontalSpan=3;
  grpMarkerRange.setLayoutData(gdGRPMarkerRange);
  grpMarkerRange.setLayout(new FillLayout());
  grpMarkerRange.setText(Messages.getString(""String_Node_Str""));
  liacMarkerRange=new LineAttributesComposite(grpMarkerRange,SWT.NONE,getContext(),null,true,true,true);
  liacMarkerRange.addListener(this);
  btnRangeTriggers=new Button(cmpRange,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnRangeTriggers.setLayoutData(gd);
    btnRangeTriggers.setText(Messages.getString(""String_Node_Str""));
    btnRangeTriggers.addSelectionListener(this);
    btnRangeTriggers.setEnabled(getChart().getInteractivity().isEnable());
  }
  LabelAttributesContext attributesContext=new LabelAttributesContext();
  attributesContext.isPositionEnabled=false;
  attributesContext.isFontAlignmentEnabled=false;
  attributesContext.isLabelEnabled=true;
  lacLabel=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),Position.ABOVE_LITERAL,LabelImpl.create(),getChart().getUnits());
  GridData gdLACLabel=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  lacLabel.setLayoutData(gdLACLabel);
  lacLabel.addListener(this);
  slMarkers.topControl=cmpLine;
  populateLists();
  refreshButtons();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_MARKERS);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  GridLayout glList=new GridLayout();
  glList.numColumns=3;
  glList.horizontalSpacing=5;
  glList.verticalSpacing=5;
  glList.marginHeight=0;
  glList.marginWidth=0;
  cmpList=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPList=new GridData(GridData.FILL_BOTH);
  gdCMPList.horizontalSpan=2;
  cmpList.setLayoutData(gdCMPList);
  cmpList.setLayout(glList);
  GridLayout glButtons=new GridLayout();
  glButtons.numColumns=3;
  glButtons.horizontalSpacing=5;
  glButtons.verticalSpacing=5;
  glButtons.marginHeight=5;
  glButtons.marginWidth=0;
  Composite cmpButtons=new Composite(cmpList,SWT.NONE);
  GridData gdCMPButtons=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPButtons.horizontalSpan=3;
  cmpButtons.setLayoutData(gdCMPButtons);
  cmpButtons.setLayout(glButtons);
  btnAddLine=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAddLine=new GridData(GridData.FILL_HORIZONTAL);
  btnAddLine.setLayoutData(gdBTNAddLine);
  btnAddLine.setText(Messages.getString(""String_Node_Str""));
  btnAddLine.addSelectionListener(this);
  btnAddRange=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAddRange=new GridData(GridData.FILL_HORIZONTAL);
  btnAddRange.setLayoutData(gdBTNAddRange);
  btnAddRange.setText(Messages.getString(""String_Node_Str""));
  btnAddRange.addSelectionListener(this);
  btnRemove=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNRemove=new GridData(GridData.FILL_HORIZONTAL);
  btnRemove.setLayoutData(gdBTNRemove);
  btnRemove.setText(Messages.getString(""String_Node_Str""));
  btnRemove.addSelectionListener(this);
  lstMarkers=new List(cmpList,SWT.BORDER | SWT.SINGLE | SWT.V_SCROLL);
  GridData gdLSTMarkers=new GridData(GridData.FILL_HORIZONTAL);
  gdLSTMarkers.horizontalSpan=3;
  gdLSTMarkers.heightHint=100;
  lstMarkers.setLayoutData(gdLSTMarkers);
  lstMarkers.addSelectionListener(this);
  slMarkers=new StackLayout();
  slMarkers.marginHeight=0;
  slMarkers.marginWidth=0;
  grpGeneral=new Group(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  grpGeneral.setLayoutData(gdCMPGeneral);
  grpGeneral.setLayout(slMarkers);
  grpGeneral.setText(Messages.getString(""String_Node_Str""));
  GridLayout glMarkerLine=new GridLayout();
  glMarkerLine.numColumns=3;
  glMarkerLine.horizontalSpacing=5;
  glMarkerLine.verticalSpacing=5;
  glMarkerLine.marginHeight=7;
  glMarkerLine.marginWidth=7;
  cmpLine=new Composite(grpGeneral,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_HORIZONTAL);
  cmpLine.setLayoutData(gdGRPLine);
  cmpLine.setLayout(glMarkerLine);
  lblValue=new Label(cmpLine,SWT.NONE);
  GridData gdLBLValue=new GridData();
  gdLBLValue.horizontalIndent=5;
  lblValue.setLayoutData(gdLBLValue);
  lblValue.setText(Messages.getString(""String_Node_Str""));
  txtValue=createValuePicker(cmpLine,null);
  btnLineFormatSpecifier=new Button(cmpLine,SWT.PUSH);
  GridData gdBTNLineFormatSpecifier=new GridData();
  btnLineFormatSpecifier.setLayoutData(gdBTNLineFormatSpecifier);
  btnLineFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnLineFormatSpecifier.addSelectionListener(this);
  btnLineFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblAnchor=new Label(cmpLine,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  gdLBLAnchor.horizontalIndent=5;
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbLineAnchor=new Combo(cmpLine,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBAnchor.horizontalSpan=2;
  cmbLineAnchor.setLayoutData(gdCMBAnchor);
  cmbLineAnchor.addSelectionListener(this);
  cmbLineAnchor.setVisibleItemCount(30);
  grpMarkerLine=new Group(cmpLine,SWT.NONE);
  GridData gdGRPMarkerLine=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPMarkerLine.horizontalSpan=3;
  grpMarkerLine.setLayoutData(gdGRPMarkerLine);
  grpMarkerLine.setLayout(new FillLayout());
  grpMarkerLine.setText(Messages.getString(""String_Node_Str""));
  liacMarkerLine=new LineAttributesComposite(grpMarkerLine,SWT.NONE,getContext(),null,true,true,true);
  liacMarkerLine.addListener(this);
  btnLineTriggers=new Button(cmpLine,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnLineTriggers.setLayoutData(gd);
    btnLineTriggers.setText(Messages.getString(""String_Node_Str""));
    btnLineTriggers.addSelectionListener(this);
    btnLineTriggers.setEnabled(getChart().getInteractivity().isEnable());
  }
  GridLayout glMarkerRange=new GridLayout();
  glMarkerRange.numColumns=3;
  glMarkerRange.horizontalSpacing=5;
  glMarkerRange.verticalSpacing=5;
  glMarkerRange.marginHeight=7;
  glMarkerRange.marginWidth=7;
  cmpRange=new Composite(grpGeneral,SWT.NONE);
  GridData gdGRPRange=new GridData(GridData.FILL_HORIZONTAL);
  cmpRange.setLayoutData(gdGRPRange);
  cmpRange.setLayout(glMarkerRange);
  lblStartValue=new Label(cmpRange,SWT.NONE);
  GridData gdLBLStartValue=new GridData();
  gdLBLStartValue.horizontalIndent=5;
  lblStartValue.setLayoutData(gdLBLStartValue);
  lblStartValue.setText(Messages.getString(""String_Node_Str""));
  txtStartValue=createValuePicker(cmpRange,null);
  btnStartFormatSpecifier=new Button(cmpRange,SWT.PUSH);
  GridData gdBTNStartFormatSpecifier=new GridData();
  gdBTNStartFormatSpecifier.heightHint=18;
  btnStartFormatSpecifier.setLayoutData(gdBTNStartFormatSpecifier);
  btnStartFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnStartFormatSpecifier.addSelectionListener(this);
  btnStartFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblEndValue=new Label(cmpRange,SWT.NONE);
  GridData gdLBLEndValue=new GridData();
  gdLBLEndValue.horizontalIndent=5;
  lblEndValue.setLayoutData(gdLBLEndValue);
  lblEndValue.setText(Messages.getString(""String_Node_Str""));
  txtEndValue=createValuePicker(cmpRange,null);
  btnEndFormatSpecifier=new Button(cmpRange,SWT.PUSH);
  GridData gdBTNEndFormatSpecifier=new GridData();
  gdBTNEndFormatSpecifier.heightHint=18;
  btnEndFormatSpecifier.setLayoutData(gdBTNEndFormatSpecifier);
  btnEndFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnEndFormatSpecifier.addSelectionListener(this);
  btnEndFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblRangeAnchor=new Label(cmpRange,SWT.NONE);
  GridData gdLBLRangeAnchor=new GridData();
  gdLBLRangeAnchor.horizontalIndent=5;
  lblRangeAnchor.setLayoutData(gdLBLRangeAnchor);
  lblRangeAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbRangeAnchor=new Combo(cmpRange,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBRangeAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBRangeAnchor.horizontalSpan=2;
  cmbRangeAnchor.setLayoutData(gdCMBRangeAnchor);
  cmbRangeAnchor.addSelectionListener(this);
  cmbRangeAnchor.setVisibleItemCount(30);
  lblRangeFill=new Label(cmpRange,SWT.NONE);
  GridData gdLBLRangeFill=new GridData();
  gdLBLRangeFill.horizontalIndent=5;
  lblRangeFill.setLayoutData(gdLBLRangeFill);
  lblRangeFill.setText(Messages.getString(""String_Node_Str""));
  fccRange=new FillChooserComposite(cmpRange,SWT.NONE,getContext(),null,true,true);
  GridData gdFCCRange=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCRange.horizontalSpan=2;
  fccRange.setLayoutData(gdFCCRange);
  fccRange.addListener(this);
  grpMarkerRange=new Group(cmpRange,SWT.NONE);
  GridData gdGRPMarkerRange=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPMarkerRange.horizontalSpan=3;
  grpMarkerRange.setLayoutData(gdGRPMarkerRange);
  grpMarkerRange.setLayout(new FillLayout());
  grpMarkerRange.setText(Messages.getString(""String_Node_Str""));
  liacMarkerRange=new LineAttributesComposite(grpMarkerRange,SWT.NONE,getContext(),null,true,true,true);
  liacMarkerRange.addListener(this);
  btnRangeTriggers=new Button(cmpRange,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnRangeTriggers.setLayoutData(gd);
    btnRangeTriggers.setText(Messages.getString(""String_Node_Str""));
    btnRangeTriggers.addSelectionListener(this);
    btnRangeTriggers.setEnabled(getChart().getInteractivity().isEnable());
  }
  LabelAttributesContext attributesContext=new LabelAttributesContext();
  attributesContext.isPositionEnabled=false;
  attributesContext.isFontAlignmentEnabled=false;
  attributesContext.isLabelEnabled=true;
  lacLabel=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),Position.ABOVE_LITERAL,LabelImpl.create(),getChart().getUnits());
  GridData gdLACLabel=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  lacLabel.setLayoutData(gdLACLabel);
  lacLabel.addListener(this);
  slMarkers.topControl=cmpLine;
  populateLists();
  refreshButtons();
  return cmpContent;
}",0.9977181353906336
68130,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TEXT_FORMAT);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  if (axisType == AngleType.Z) {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isPositionEnabled=false;
    attributesContext.isVisibilityEnabled=false;
    lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getAxisForProcessing().getTitlePosition(),getAxisForProcessing().getTitle(),getChart().getUnits());
  }
 else {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isVisibilityEnabled=false;
    lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getAxisForProcessing().getTitlePosition(),getAxisForProcessing().getTitle(),getChart().getUnits(),getPositionScope());
  }
  GridData gdLACTitle=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  gdLACTitle.widthHint=200;
  lacTitle.setLayoutData(gdLACTitle);
  lacTitle.addListener(this);
  boolean isLabelEnabled=getAxisForProcessing().getLabel().isVisible();
  Group grpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    layout.marginWidth=0;
    layout.marginHeight=0;
    grpLabel.setLayout(layout);
    grpLabel.setText(Messages.getString(""String_Node_Str""));
    grpLabel.setEnabled(isLabelEnabled);
  }
  if (axisType == AngleType.Z) {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isPositionEnabled=false;
    attributesContext.isVisibilityEnabled=false;
    attributesContext.isFontEnabled=false;
    attributesContext.isFontAlignmentEnabled=false;
    lacLabel=new LabelAttributesComposite(grpLabel,SWT.NONE,getContext(),attributesContext,null,getAxisForProcessing().getLabelPosition(),getAxisForProcessing().getLabel(),getChart().getUnits());
  }
 else {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isVisibilityEnabled=false;
    attributesContext.isFontEnabled=false;
    attributesContext.isFontAlignmentEnabled=false;
    lacLabel=new LabelAttributesComposite(grpLabel,SWT.NONE,getContext(),attributesContext,null,getAxisForProcessing().getLabelPosition(),getAxisForProcessing().getLabel(),getChart().getUnits(),getPositionScope());
  }
  GridData gdLACLabel=new GridData(GridData.FILL_HORIZONTAL);
  gdLACLabel.horizontalSpan=2;
  lacLabel.setLayoutData(gdLACLabel);
  lacLabel.addListener(this);
  lacLabel.setEnabled(isLabelEnabled);
  Label lblInterval=new Label(grpLabel,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalIndent=10;
    lblInterval.setLayoutData(gd);
    lblInterval.setText(Messages.getString(""String_Node_Str""));
    lblInterval.setEnabled(isLabelEnabled);
  }
  iscInterval=new Spinner(grpLabel,SWT.BORDER);
{
    iscInterval.setMinimum(1);
    iscInterval.setSelection(getAxisForProcessing().getInterval());
    GridData gd=new GridData();
    gd.widthHint=135;
    iscInterval.setLayoutData(gd);
    iscInterval.addSelectionListener(this);
    iscInterval.setEnabled(isLabelEnabled);
  }
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TEXT_FORMAT);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  if (axisType == AngleType.Z) {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isPositionEnabled=false;
    attributesContext.isVisibilityEnabled=false;
    lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getAxisForProcessing().getTitlePosition(),getAxisForProcessing().getTitle(),getChart().getUnits());
  }
 else {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isVisibilityEnabled=false;
    lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getAxisForProcessing().getTitlePosition(),getAxisForProcessing().getTitle(),getChart().getUnits(),getPositionScope());
  }
  GridData gdLACTitle=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  lacTitle.setLayoutData(gdLACTitle);
  lacTitle.addListener(this);
  boolean isLabelEnabled=getAxisForProcessing().getLabel().isVisible();
  Group grpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    layout.marginWidth=0;
    layout.marginHeight=0;
    grpLabel.setLayout(layout);
    grpLabel.setText(Messages.getString(""String_Node_Str""));
    grpLabel.setEnabled(isLabelEnabled);
  }
  if (axisType == AngleType.Z) {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isPositionEnabled=false;
    attributesContext.isVisibilityEnabled=false;
    attributesContext.isFontEnabled=false;
    attributesContext.isFontAlignmentEnabled=false;
    lacLabel=new LabelAttributesComposite(grpLabel,SWT.NONE,getContext(),attributesContext,null,getAxisForProcessing().getLabelPosition(),getAxisForProcessing().getLabel(),getChart().getUnits());
  }
 else {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isVisibilityEnabled=false;
    attributesContext.isFontEnabled=false;
    attributesContext.isFontAlignmentEnabled=false;
    lacLabel=new LabelAttributesComposite(grpLabel,SWT.NONE,getContext(),attributesContext,null,getAxisForProcessing().getLabelPosition(),getAxisForProcessing().getLabel(),getChart().getUnits(),getPositionScope());
  }
  GridData gdLACLabel=new GridData(GridData.FILL_HORIZONTAL);
  gdLACLabel.horizontalSpan=2;
  lacLabel.setLayoutData(gdLACLabel);
  lacLabel.addListener(this);
  lacLabel.setEnabled(isLabelEnabled);
  Label lblInterval=new Label(grpLabel,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalIndent=10;
    lblInterval.setLayoutData(gd);
    lblInterval.setText(Messages.getString(""String_Node_Str""));
    lblInterval.setEnabled(isLabelEnabled);
  }
  iscInterval=new Spinner(grpLabel,SWT.BORDER);
{
    iscInterval.setMinimum(1);
    iscInterval.setSelection(getAxisForProcessing().getInterval());
    GridData gd=new GridData();
    gd.widthHint=135;
    iscInterval.setLayoutData(gd);
    iscInterval.addSelectionListener(this);
    iscInterval.setEnabled(isLabelEnabled);
  }
  return cmpContent;
}",0.995959595959596
68131,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TEXT_FORMAT);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  if (axisType == AngleType.Z) {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isPositionEnabled=false;
    attributesContext.isVisibilityEnabled=false;
    lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getAxisForProcessing().getTitlePosition(),getAxisForProcessing().getTitle(),getChart().getUnits());
  }
 else {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isVisibilityEnabled=false;
    lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getAxisForProcessing().getTitlePosition(),getAxisForProcessing().getTitle(),getChart().getUnits(),getPositionScope());
  }
  GridData gdLACTitle=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  gdLACTitle.widthHint=200;
  lacTitle.setLayoutData(gdLACTitle);
  lacTitle.addListener(this);
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TEXT_FORMAT);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  if (axisType == AngleType.Z) {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isPositionEnabled=false;
    attributesContext.isVisibilityEnabled=false;
    lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getAxisForProcessing().getTitlePosition(),getAxisForProcessing().getTitle(),getChart().getUnits());
  }
 else {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isVisibilityEnabled=false;
    lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getAxisForProcessing().getTitlePosition(),getAxisForProcessing().getTitle(),getChart().getUnits(),getPositionScope());
  }
  GridData gdLACTitle=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  lacTitle.setLayoutData(gdLACTitle);
  lacTitle.addListener(this);
  return cmpContent;
}",0.9449886963074604
68132,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.heightHint=20;
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.addListener(SWT.Selection,this);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  spnEllipsis=new Spinner(grpTxtArea,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    spnEllipsis.setLayoutData(gd);
    spnEllipsis.setMinimum(0);
    spnEllipsis.setSelection(getLegend().getEllipsis());
    spnEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
    spnEllipsis.addListener(SWT.Selection,this);
  }
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getClientArea().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getLegend().getClientArea().getOutline(),true,true,true);
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=2;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,getContext(),getLegend().getSeparator(),true,true,true);
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.addListener(SWT.Selection,this);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  spnEllipsis=new Spinner(grpTxtArea,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    spnEllipsis.setLayoutData(gd);
    spnEllipsis.setMinimum(0);
    spnEllipsis.setSelection(getLegend().getEllipsis());
    spnEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
    spnEllipsis.addListener(SWT.Selection,this);
  }
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getClientArea().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getLegend().getClientArea().getOutline(),true,true,true);
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=2;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,getContext(),getLegend().getSeparator(),true,true,true);
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}",0.9977995599119824
68133,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_DIAL_LABELS);
  GridLayout glContent=new GridLayout(2,false);
  glContent.verticalSpacing=0;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  LabelAttributesContext attributesContext=new LabelAttributesContext();
  attributesContext.isPositionEnabled=false;
  attributesContext.isFontAlignmentEnabled=false;
  attributesContext.isVisibilityEnabled=false;
  lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,null,null,getSeriesForProcessing().getDial().getLabel(),getChart().getUnits());
  GridData gdLACTitle=new GridData(GridData.FILL_HORIZONTAL);
  gdLACTitle.horizontalSpan=2;
  lacTitle.setLayoutData(gdLACTitle);
  lacTitle.addListener(this);
  Label label=new Label(cmpContent,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalIndent=10;
    label.setLayoutData(gd);
    label.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpFormat=new Composite(cmpContent,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getSeriesForProcessing().getDial().getFormatSpecifier());
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    ChartUIUtil.setChartImageButtonHeightByPlatform(gd);
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.addSelectionListener(this);
  }
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_DIAL_LABELS);
  GridLayout glContent=new GridLayout(2,false);
  glContent.verticalSpacing=0;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  LabelAttributesContext attributesContext=new LabelAttributesContext();
  attributesContext.isPositionEnabled=false;
  attributesContext.isFontAlignmentEnabled=false;
  attributesContext.isVisibilityEnabled=false;
  lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,null,null,getSeriesForProcessing().getDial().getLabel(),getChart().getUnits());
  GridData gdLACTitle=new GridData(GridData.FILL_HORIZONTAL);
  gdLACTitle.horizontalSpan=2;
  lacTitle.setLayoutData(gdLACTitle);
  lacTitle.addListener(this);
  Label label=new Label(cmpContent,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalIndent=10;
    label.setLayoutData(gd);
    label.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpFormat=new Composite(cmpContent,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getSeriesForProcessing().getDial().getFormatSpecifier());
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.addSelectionListener(this);
  }
  return cmpContent;
}",0.9866416686196392
68134,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TEXT_FORMAT);
  GridLayout glContent=new GridLayout();
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  LabelAttributesContext attributesContext=new LabelAttributesContext();
  attributesContext.isFontAlignmentEnabled=false;
  lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getSeriesForProcessing().getTitlePosition(),getLabel(),getChart().getUnits(),LabelAttributesComposite.ALLOW_HORIZONTAL_POSITION | LabelAttributesComposite.ALLOW_VERTICAL_POSITION);
  GridData gdLACTitle=new GridData(GridData.FILL_HORIZONTAL);
  gdLACTitle.widthHint=200;
  lacTitle.setLayoutData(gdLACTitle);
  lacTitle.addListener(this);
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TEXT_FORMAT);
  GridLayout glContent=new GridLayout();
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  LabelAttributesContext attributesContext=new LabelAttributesContext();
  attributesContext.isFontAlignmentEnabled=false;
  lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getSeriesForProcessing().getTitlePosition(),getLabel(),getChart().getUnits(),LabelAttributesComposite.ALLOW_HORIZONTAL_POSITION | LabelAttributesComposite.ALLOW_VERTICAL_POSITION);
  GridData gdLACTitle=new GridData(GridData.FILL_HORIZONTAL);
  lacTitle.setLayoutData(gdLACTitle);
  lacTitle.addListener(this);
  return cmpContent;
}",0.903010033444816
68135,"private void createAttributeArea(Composite parent){
  grpAttributes=new Group(parent,SWT.NONE);
{
    grpAttributes.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpAttributes.setLayout(new GridLayout(2,false));
    grpAttributes.setText(Messages.getString(""String_Node_Str""));
  }
  lblPosition=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLPosition=new GridData();
  lblPosition.setLayoutData(gdLBLPosition);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  cmbPosition=new Combo(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
  gdCMBPosition.verticalAlignment=SWT.CENTER;
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  lblFont=new Label(grpAttributes,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getCaption().getFont(),getSeriesForProcessing().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(grpAttributes,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.verticalAlignment=SWT.CENTER;
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  gdFCCShadow.verticalAlignment=SWT.CENTER;
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
}","private void createAttributeArea(Composite parent){
  grpAttributes=new Group(parent,SWT.NONE);
{
    grpAttributes.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpAttributes.setLayout(new GridLayout(2,false));
    grpAttributes.setText(Messages.getString(""String_Node_Str""));
  }
  lblPosition=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLPosition=new GridData();
  lblPosition.setLayoutData(gdLBLPosition);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  cmbPosition=new Combo(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
  gdCMBPosition.verticalAlignment=SWT.CENTER;
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  lblFont=new Label(grpAttributes,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getCaption().getFont(),getSeriesForProcessing().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(grpAttributes,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.verticalAlignment=SWT.CENTER;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  gdFCCShadow.verticalAlignment=SWT.CENTER;
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
}",0.986335926003784
68136,"private void createDataPointArea(Composite parent){
  grpDataPoint=new Group(parent,SWT.NONE);
{
    GridData gdCMPDataPoint=new GridData(GridData.FILL_BOTH);
    gdCMPDataPoint.heightHint=160;
    grpDataPoint.setLayoutData(gdCMPDataPoint);
    GridLayout glCMPDataPoint=new GridLayout();
    glCMPDataPoint.numColumns=4;
    glCMPDataPoint.horizontalSpacing=4;
    glCMPDataPoint.marginHeight=2;
    glCMPDataPoint.marginWidth=2;
    grpDataPoint.setLayout(glCMPDataPoint);
    grpDataPoint.setText(Messages.getString(""String_Node_Str""));
  }
  lstComponents=new List(grpDataPoint,SWT.BORDER | SWT.SINGLE | SWT.V_SCROLL);
  GridData gdLSTComponents=new GridData(GridData.FILL_BOTH);
  gdLSTComponents.horizontalSpan=4;
  lstComponents.setLayoutData(gdLSTComponents);
  lstComponents.addSelectionListener(this);
  btnFormatSpecifier=new Button(grpDataPoint,SWT.PUSH);
  GridData gdBTNFormatSpecifier=new GridData();
  btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
  btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  btnFormatSpecifier.addSelectionListener(this);
  btnRemoveComponent=new Button(grpDataPoint,SWT.PUSH);
  GridData gdBTNRemoveComponent=new GridData();
  btnRemoveComponent.setLayoutData(gdBTNRemoveComponent);
  btnRemoveComponent.setText(Messages.getString(""String_Node_Str""));
  btnRemoveComponent.addSelectionListener(this);
  btnAddComponent=new Button(grpDataPoint,SWT.PUSH);
  GridData gdBTNAddComponent=new GridData();
  btnAddComponent.setLayoutData(gdBTNAddComponent);
  btnAddComponent.setText(Messages.getString(""String_Node_Str""));
  btnAddComponent.addSelectionListener(this);
  cmbComponentTypes=new Combo(grpDataPoint,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBComponentTypes=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBComponentTypes.grabExcessHorizontalSpace=true;
  cmbComponentTypes.setLayoutData(gdCMBComponentTypes);
  lblPrefix=new Label(grpDataPoint,SWT.NONE);
  GridData gdLBLPrefix=new GridData();
  lblPrefix.setLayoutData(gdLBLPrefix);
  lblPrefix.setText(Messages.getString(""String_Node_Str""));
  txtPrefix=new TextEditorComposite(grpDataPoint,SWT.BORDER | SWT.SINGLE);
  GridData gdTXTPrefix=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTPrefix.horizontalSpan=3;
  txtPrefix.setLayoutData(gdTXTPrefix);
  txtPrefix.addListener(this);
  lblSuffix=new Label(grpDataPoint,SWT.NONE);
  GridData gdLBLSuffix=new GridData();
  lblSuffix.setLayoutData(gdLBLSuffix);
  lblSuffix.setText(Messages.getString(""String_Node_Str""));
  txtSuffix=new TextEditorComposite(grpDataPoint,SWT.BORDER | SWT.SINGLE);
  GridData gdTXTSuffix=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTSuffix.horizontalSpan=3;
  txtSuffix.setLayoutData(gdTXTSuffix);
  txtSuffix.addListener(this);
  lblSeparator=new Label(grpDataPoint,SWT.NONE);
  GridData gdLBLSeparator=new GridData();
  lblSeparator.setLayoutData(gdLBLSeparator);
  lblSeparator.setText(Messages.getString(""String_Node_Str""));
  txtSeparator=new TextEditorComposite(grpDataPoint,SWT.BORDER | SWT.SINGLE);
  GridData gdTXTSeparator=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTSeparator.horizontalSpan=3;
  txtSeparator.setLayoutData(gdTXTSeparator);
  txtSeparator.addListener(this);
}","private void createDataPointArea(Composite parent){
  grpDataPoint=new Group(parent,SWT.NONE);
{
    GridData gdCMPDataPoint=new GridData(GridData.FILL_BOTH);
    grpDataPoint.setLayoutData(gdCMPDataPoint);
    GridLayout glCMPDataPoint=new GridLayout();
    glCMPDataPoint.numColumns=4;
    glCMPDataPoint.horizontalSpacing=4;
    glCMPDataPoint.marginHeight=2;
    glCMPDataPoint.marginWidth=2;
    grpDataPoint.setLayout(glCMPDataPoint);
    grpDataPoint.setText(Messages.getString(""String_Node_Str""));
  }
  lstComponents=new List(grpDataPoint,SWT.BORDER | SWT.SINGLE | SWT.V_SCROLL);
  GridData gdLSTComponents=new GridData(GridData.FILL_BOTH);
  gdLSTComponents.horizontalSpan=4;
  gdLSTComponents.heightHint=100;
  lstComponents.setLayoutData(gdLSTComponents);
  lstComponents.addSelectionListener(this);
  btnFormatSpecifier=new Button(grpDataPoint,SWT.PUSH);
  GridData gdBTNFormatSpecifier=new GridData();
  btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
  btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  btnFormatSpecifier.addSelectionListener(this);
  btnRemoveComponent=new Button(grpDataPoint,SWT.PUSH);
  GridData gdBTNRemoveComponent=new GridData();
  btnRemoveComponent.setLayoutData(gdBTNRemoveComponent);
  btnRemoveComponent.setText(Messages.getString(""String_Node_Str""));
  btnRemoveComponent.addSelectionListener(this);
  btnAddComponent=new Button(grpDataPoint,SWT.PUSH);
  GridData gdBTNAddComponent=new GridData();
  btnAddComponent.setLayoutData(gdBTNAddComponent);
  btnAddComponent.setText(Messages.getString(""String_Node_Str""));
  btnAddComponent.addSelectionListener(this);
  cmbComponentTypes=new Combo(grpDataPoint,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBComponentTypes=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBComponentTypes.grabExcessHorizontalSpace=true;
  cmbComponentTypes.setLayoutData(gdCMBComponentTypes);
  lblPrefix=new Label(grpDataPoint,SWT.NONE);
  GridData gdLBLPrefix=new GridData();
  lblPrefix.setLayoutData(gdLBLPrefix);
  lblPrefix.setText(Messages.getString(""String_Node_Str""));
  txtPrefix=new TextEditorComposite(grpDataPoint,SWT.BORDER | SWT.SINGLE);
  GridData gdTXTPrefix=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTPrefix.horizontalSpan=3;
  txtPrefix.setLayoutData(gdTXTPrefix);
  txtPrefix.addListener(this);
  lblSuffix=new Label(grpDataPoint,SWT.NONE);
  GridData gdLBLSuffix=new GridData();
  lblSuffix.setLayoutData(gdLBLSuffix);
  lblSuffix.setText(Messages.getString(""String_Node_Str""));
  txtSuffix=new TextEditorComposite(grpDataPoint,SWT.BORDER | SWT.SINGLE);
  GridData gdTXTSuffix=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTSuffix.horizontalSpan=3;
  txtSuffix.setLayoutData(gdTXTSuffix);
  txtSuffix.addListener(this);
  lblSeparator=new Label(grpDataPoint,SWT.NONE);
  GridData gdLBLSeparator=new GridData();
  lblSeparator.setLayoutData(gdLBLSeparator);
  lblSeparator.setText(Messages.getString(""String_Node_Str""));
  txtSeparator=new TextEditorComposite(grpDataPoint,SWT.BORDER | SWT.SINGLE);
  GridData gdTXTSeparator=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTSeparator.horizontalSpan=3;
  txtSeparator.setLayoutData(gdTXTSeparator);
  txtSeparator.addListener(this);
}",0.989476894921458
68137,"public Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_LABEL);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=2;
    cmpContent.setLayout(glContent);
  }
  Composite cmpTop=new Composite(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.horizontalSpacing=0;
    cmpTop.setLayout(layout);
    cmpTop.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Composite cmpLeft=new Composite(cmpTop,SWT.NONE);
{
    cmpLeft.setLayout(new GridLayout());
    cmpLeft.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Composite cmpRight=new Composite(cmpTop,SWT.NONE);
{
    cmpRight.setLayout(new GridLayout());
    cmpRight.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  createAttributeArea(cmpLeft);
  grpOutline=new Group(cmpLeft,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGOutline.heightHint=110;
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(new FillLayout());
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getOutline(),true,true,true);
{
    liacOutline.addListener(this);
  }
  createDataPointArea(cmpRight);
  icInsets=new InsetsComposite(cmpRight,SWT.NONE,getSeriesForProcessing().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
{
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.heightHint=icInsets.getPreferredSize().y;
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.setLayoutData(gdICInsets);
    icInsets.addListener(this);
  }
  populateLists(getSeriesForProcessing());
  setEnabled(getSeriesForProcessing().getLabel().isVisible());
  refreshDataPointButtons();
  return cmpContent;
}","public Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_LABEL);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=2;
    cmpContent.setLayout(glContent);
  }
  Composite cmpTop=new Composite(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.horizontalSpacing=0;
    cmpTop.setLayout(layout);
    cmpTop.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Composite cmpLeft=new Composite(cmpTop,SWT.NONE);
{
    cmpLeft.setLayout(new GridLayout());
    cmpLeft.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Composite cmpRight=new Composite(cmpTop,SWT.NONE);
{
    cmpRight.setLayout(new GridLayout());
    cmpRight.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  createAttributeArea(cmpLeft);
  grpOutline=new Group(cmpLeft,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(new FillLayout());
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getOutline(),true,true,true);
{
    liacOutline.addListener(this);
  }
  createDataPointArea(cmpRight);
  icInsets=new InsetsComposite(cmpRight,SWT.NONE,getSeriesForProcessing().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
{
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.setLayoutData(gdICInsets);
    icInsets.addListener(this);
  }
  populateLists(getSeriesForProcessing());
  setEnabled(getSeriesForProcessing().getLabel().isVisible());
  refreshDataPointButtons();
  return cmpContent;
}",0.9770176376269376
68138,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendline().getLabel().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,getContext(),getTrendline().getLineAttributes(),true,true,false);
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnVisible=new Button(cmpLabelInner,SWT.CHECK);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnVisible.setLayoutData(gdCBVisible);
  btnVisible.setSelection(getTrendline().getLabel().isVisible());
  btnVisible.setText(Messages.getString(""String_Node_Str""));
  btnVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getTrendline().getLabel().getOutline(),true,true,true);
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getTrendline().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  populateLists();
  setState(btnVisible.getSelection());
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendline().getLabel().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,getContext(),getTrendline().getLineAttributes(),true,true,false);
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnVisible=new Button(cmpLabelInner,SWT.CHECK);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnVisible.setLayoutData(gdCBVisible);
  btnVisible.setSelection(getTrendline().getLabel().isVisible());
  btnVisible.setText(Messages.getString(""String_Node_Str""));
  btnVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getTrendline().getLabel().getOutline(),true,true,true);
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getTrendline().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  populateLists();
  setState(btnVisible.getSelection());
  return cmpContent;
}",0.9936105376978276
68139,"/** 
 * merge the drill result set with base result into bufferdStructureArray.
 */
public DrilledAggregateResultSet(IAggregationResultSet baseResultSet,List<IAggregationResultSet> drillsRs,List<IEdgeDrillFilter> drillsDefn) throws IOException {
  Object[] params={baseResultSet,drillsRs,drillsDefn};
  logger.entering(AggregationResultSet.class.getName(),""String_Node_Str"",params);
  this.levelCount=baseResultSet.getLevelCount();
  this.metaResultSet=baseResultSet;
  this.statusForRs=new boolean[drillsRs.size()];
  for (int i=0; i < drillsRs.size(); i++) {
    if (levelCount < ((IAggregationResultSet)drillsRs.get(i)).getLevelCount()) {
      metaResultSet=((IAggregationResultSet)drillsRs.get(i));
      levelCount=metaResultSet.getLevelCount();
    }
    ((IAggregationResultSet)drillsRs.get(i)).seek(0);
    statusForRs[i]=true;
  }
  this.bufferedStructureArray=passBaseCubeResultSet(baseResultSet,drillsRs,drillsDefn);
  updateStatus(drillsRs);
  while (!isComplete()) {
    this.bufferedStructureArray=passInterimCubeResultSet(bufferedStructureArray,drillsRs,drillsDefn);
    updateStatus(drillsRs);
  }
  this.resultObject=(IAggregationResultRow)bufferedStructureArray.get(0);
  if (resultObject.getLevelMembers() != null) {
    keyDataTypes=new int[resultObject.getLevelMembers().length][];
    attributeDataTypes=new int[resultObject.getLevelMembers().length][];
    for (int i=0; i < resultObject.getLevelMembers().length; i++) {
      keyDataTypes[i]=new int[resultObject.getLevelMembers()[i].getKeyValues().length];
      for (int j=0; j < resultObject.getLevelMembers()[i].getKeyValues().length; j++) {
        keyDataTypes[i][j]=DataType.getDataType(resultObject.getLevelMembers()[i].getKeyValues()[j].getClass());
      }
      if (resultObject.getLevelMembers()[i].getAttributes() != null) {
        attributeDataTypes[i]=new int[resultObject.getLevelMembers()[i].getAttributes().length];
        for (int j=0; j < attributeDataTypes[i].length; j++) {
          if (resultObject.getLevelMembers()[i].getAttributes()[j] != null)           attributeDataTypes[i][j]=DataType.getDataType(resultObject.getLevelMembers()[i].getAttributes()[j].getClass());
        }
      }
    }
  }
}","/** 
 * merge the drill result set with base result into bufferdStructureArray.
 */
public DrilledAggregateResultSet(IAggregationResultSet baseResultSet,List<IAggregationResultSet> drillsRs,List<IEdgeDrillFilter> drillsDefn) throws IOException {
  Object[] params={baseResultSet,drillsRs,drillsDefn};
  logger.entering(AggregationResultSet.class.getName(),""String_Node_Str"",params);
  this.levelCount=baseResultSet.getLevelCount();
  this.metaResultSet=baseResultSet;
  this.statusForRs=new boolean[drillsRs.size()];
  for (int i=0; i < drillsRs.size(); i++) {
    if (levelCount < ((IAggregationResultSet)drillsRs.get(i)).getLevelCount()) {
      metaResultSet=((IAggregationResultSet)drillsRs.get(i));
      levelCount=metaResultSet.getLevelCount();
    }
    if (((IAggregationResultSet)drillsRs.get(i)).length() > 0)     ((IAggregationResultSet)drillsRs.get(i)).seek(0);
    statusForRs[i]=true;
  }
  this.bufferedStructureArray=passBaseCubeResultSet(baseResultSet,drillsRs,drillsDefn);
  updateStatus(drillsRs);
  while (!isComplete()) {
    this.bufferedStructureArray=passInterimCubeResultSet(bufferedStructureArray,drillsRs,drillsDefn);
    updateStatus(drillsRs);
  }
  this.resultObject=(IAggregationResultRow)bufferedStructureArray.get(0);
  if (resultObject.getLevelMembers() != null) {
    keyDataTypes=new int[resultObject.getLevelMembers().length][];
    attributeDataTypes=new int[resultObject.getLevelMembers().length][];
    for (int i=0; i < resultObject.getLevelMembers().length; i++) {
      keyDataTypes[i]=new int[resultObject.getLevelMembers()[i].getKeyValues().length];
      for (int j=0; j < resultObject.getLevelMembers()[i].getKeyValues().length; j++) {
        keyDataTypes[i][j]=DataType.getDataType(resultObject.getLevelMembers()[i].getKeyValues()[j].getClass());
      }
      if (resultObject.getLevelMembers()[i].getAttributes() != null) {
        attributeDataTypes[i]=new int[resultObject.getLevelMembers()[i].getAttributes().length];
        for (int j=0; j < attributeDataTypes[i].length; j++) {
          if (resultObject.getLevelMembers()[i].getAttributes()[j] != null)           attributeDataTypes[i][j]=DataType.getDataType(resultObject.getLevelMembers()[i].getAttributes()[j].getClass());
        }
      }
    }
  }
}",0.985883934573157
68140,"/** 
 * @param drillsRs
 */
private void updateStatus(List<IAggregationResultSet> drillsRs){
  for (int i=0; i < drillsRs.size(); i++) {
    IAggregationResultSet rs=(IAggregationResultSet)drillsRs.get(i);
    if (rs.getPosition() == rs.length() - 1) {
      this.statusForRs[i]=false;
    }
  }
}","/** 
 * @param drillsRs
 */
private void updateStatus(List<IAggregationResultSet> drillsRs){
  for (int i=0; i < drillsRs.size(); i++) {
    IAggregationResultSet rs=(IAggregationResultSet)drillsRs.get(i);
    if (rs.length() == 0 || rs.getPosition() == rs.length() - 1) {
      this.statusForRs[i]=false;
    }
  }
}",0.96742671009772
68141,"public void save() throws IOException {
  fs.flush();
  fs.setRemoveOnExit(false);
}","public void save() throws IOException {
  fs.setRemoveOnExit(false);
  fs.flush();
}",0.8333333333333334
68142,"private void ensureFileOpened() throws IOException {
  if (rf != null) {
    return;
  }
  if (removeOnExit) {
synchronized (this) {
      if (rf == null) {
        ensureParentFolderCreated(fileName);
        rf=new RandomAccessFile(fileName,""String_Node_Str"");
        rf.setLength(0);
      }
    }
  }
}","private void ensureFileOpened() throws IOException {
  if (rf != null) {
    return;
  }
synchronized (this) {
    if (rf == null) {
      ensureParentFolderCreated(fileName);
      rf=new RandomAccessFile(fileName,""String_Node_Str"");
      rf.setLength(0);
    }
  }
}",0.6111111111111112
68143,"/** 
 * @return
 */
private final boolean isUniqueColumnName(){
  DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),false,true,true);
  for (int i=0; i < items.length; i++) {
    if (!items[i].getName().equals(columnName)) {
      if (!items[i].isComputedColumn()) {
        if ((items[i].getAlias() != null && items[i].getAlias().equals(txtColumnName.getText())) || (items[i].getName() != null && items[i].getName().equals(txtColumnName.getText()))) {
          return false;
        }
      }
    }
  }
  Iterator iter=computedColumns.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ComputedColumnHandle handle=(ComputedColumnHandle)iter.next();
      if (getStructure(getStructureOrHandle()) != handle.getStructure() && handle.getName().equals(txtColumnName.getText())) {
        return false;
      }
    }
  }
  Iterator iter2=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter2.hasNext()) {
    ColumnHintHandle hint=(ColumnHintHandle)iter2.next();
    if (!hint.getColumnName().equals(columnName)) {
      if (txtColumnName.getText().equals(hint.getAlias()) || txtColumnName.getText().equals(hint.getColumnName())) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * @return
 */
private final boolean isUniqueColumnName(){
  DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),true,true,true);
  for (int i=0; i < items.length; i++) {
    if (!items[i].getName().equals(columnName)) {
      if (!items[i].isComputedColumn()) {
        if ((items[i].getAlias() != null && items[i].getAlias().equals(txtColumnName.getText())) || (items[i].getName() != null && items[i].getName().equals(txtColumnName.getText()))) {
          return false;
        }
      }
    }
  }
  Iterator iter=computedColumns.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ComputedColumnHandle handle=(ComputedColumnHandle)iter.next();
      if (getStructure(getStructureOrHandle()) != handle.getStructure() && handle.getName().equals(txtColumnName.getText())) {
        return false;
      }
    }
  }
  Iterator iter2=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter2.hasNext()) {
    ColumnHintHandle hint=(ColumnHintHandle)iter2.next();
    if (!hint.getColumnName().equals(columnName)) {
      if (txtColumnName.getText().equals(hint.getAlias()) || txtColumnName.getText().equals(hint.getColumnName())) {
        return false;
      }
    }
  }
  return true;
}",0.997379258704605
68144,"protected void createTableViewer(Composite parent){
  viewer=new PropertyHandleTableViewer(parent,true,true,true);
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[COLUMN_NAME_INDEX]);
  column.setWidth(150);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[DATA_TYPE_INDEX]);
  column.setWidth(200);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[EXPRESSION_INDEX]);
  column.setWidth(200);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[AGGREGATION_INDEX]);
  column.setWidth(200);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[FILTER_INDEX]);
  column.setWidth(200);
  viewer.getViewer().setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      ArrayList computedColumnsList=new ArrayList(10);
      Iterator iter=computedColumns.iterator();
      if (iter != null) {
        while (iter.hasNext()) {
          computedColumnsList.add(iter.next());
        }
      }
      return computedColumnsList.toArray();
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  viewer.getViewer().setLabelProvider(new TableProvider());
  viewer.getViewer().setInput(computedColumns);
}","protected void createTableViewer(Composite parent){
  viewer=new PropertyHandleTableViewer(parent,true,true,true){
    protected void doRemove(){
      int index=viewer.getTable().getSelectionIndex();
      PropertyHandle handle=(PropertyHandle)viewer.getInput();
      int count=(handle.getListValue() == null) ? 0 : handle.getListValue().size();
      if (index > -1 && index < count) {
        ComputedColumnHandle computedColumn=(ComputedColumnHandle)viewer.getTable().getItems()[index].getData();
        removeColumnHint(computedColumn.getName());
        try {
          handle.removeItem(index);
        }
 catch (        PropertyValueException e1) {
          ExceptionHandler.handle(e1);
        }
        viewer.refresh();
        viewer.getTable().setFocus();
        viewer.getTable().select(index);
        updateButtons();
      }
    }
    private void removeColumnHint(    String columnName){
      if (columnName == null)       return;
      PropertyHandle propertyHandle=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
      Iterator iter=propertyHandle.iterator();
      while (iter.hasNext()) {
        ColumnHintHandle hint=(ColumnHintHandle)iter.next();
        if (columnName.equals(hint.getColumnName())) {
          try {
            propertyHandle.removeItem(hint);
          }
 catch (          PropertyValueException e) {
            ExceptionHandler.handle(e);
          }
        }
      }
    }
  }
;
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[COLUMN_NAME_INDEX]);
  column.setWidth(150);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[DATA_TYPE_INDEX]);
  column.setWidth(200);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[EXPRESSION_INDEX]);
  column.setWidth(200);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[AGGREGATION_INDEX]);
  column.setWidth(200);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[FILTER_INDEX]);
  column.setWidth(200);
  viewer.getViewer().setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      ArrayList computedColumnsList=new ArrayList(10);
      Iterator iter=computedColumns.iterator();
      if (iter != null) {
        while (iter.hasNext()) {
          computedColumnsList.add(iter.next());
        }
      }
      return computedColumnsList.toArray();
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  viewer.getViewer().setLabelProvider(new TableProvider());
  viewer.getViewer().setInput(computedColumns);
}",0.6826319460590561
68145,"/** 
 * @param dataSetHandle
 * @param dataSetDesign
 * @param queryDefn
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSetHandle,IBaseDataSetDesign dataSetDesign,IQueryDefinition queryDefn,ExecutionContext context,DataRequestSession session) throws BirtException {
  if (!(dataSetHandle instanceof JointDataSetHandle || dataSetHandle instanceof DerivedDataSetHandle)) {
    if (dataSetHandle.getDataSource() != null) {
      session.defineDataSource(session.getModelAdaptor().adaptDataSource(dataSetHandle.getDataSource()));
    }
  }
  session.defineDataSet(dataSetDesign);
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSetHandle,resultSet);
  return resultSet;
}","/** 
 * @param dataSetHandle
 * @param dataSetDesign
 * @param queryDefn
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSetHandle,IBaseDataSetDesign dataSetDesign,IQueryDefinition queryDefn,ExecutionContext context,DataRequestSession session) throws BirtException {
  if (!(dataSetHandle instanceof JointDataSetHandle || dataSetHandle instanceof DerivedDataSetHandle)) {
    if (dataSetHandle.getDataSource() != null) {
      session.defineDataSource(session.getModelAdaptor().adaptDataSource(dataSetHandle.getDataSource()));
    }
  }
 else {
    DefineDataSourceSetUtil.defineDataSourceAndDataSet(dataSetHandle,session);
  }
  session.defineDataSet(dataSetDesign);
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSetHandle,resultSet);
  return resultSet;
}",0.9425142135186356
68146,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}",0.9793187347931872
68147,"/** 
 * @param parent
 * @param index
 */
private void createComboBoxCell(Composite parent,final int index){
  Label label=ControlProvider.createLabel(parent,dialogLabels[index]);
  this.maxWidth=computeMaxWidth(label);
  cmbDataType=ControlProvider.createCombo(parent,SWT.READ_ONLY);
  cmbDataType.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  populateDataTypeComboItems();
  cmbDataType.select(Utility.findIndex(cmbDataType.getItems(),getTypeDisplayName((String)getProperty(getStructureOrHandle(),cellProperties[index]))));
  cmbDataType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      validateSyntax();
    }
  }
);
}","/** 
 * @param parent
 * @param index
 */
private void createComboBoxCell(Composite parent,final int index){
  Label label=ControlProvider.createLabel(parent,dialogLabels[index]);
  this.maxWidth=computeMaxWidth(label);
  cmbDataType=ControlProvider.createCombo(parent,SWT.READ_ONLY);
  cmbDataType.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  cmbDataType.setVisibleItemCount(30);
  populateDataTypeComboItems();
  cmbDataType.select(Utility.findIndex(cmbDataType.getItems(),getTypeDisplayName((String)getProperty(getStructureOrHandle(),cellProperties[index]))));
  cmbDataType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      validateSyntax();
    }
  }
);
}",0.9724770642201837
68148,"/** 
 * @param parent
 * @param index
 */
private void createAggrListCell(final Composite parent,final int index){
  Label label=ControlProvider.createLabel(parent,dialogLabels[index]);
  this.maxWidth=computeMaxWidth(label);
  cmbAggregation=ControlProvider.createCombo(parent,SWT.READ_ONLY);
  cmbAggregation.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  cmbAggregation.add(BLANK);
  cmbAggregation.setData(BLANK,new Integer(0));
  for (int i=0; i < functions.length; i++) {
    cmbAggregation.add(functions[i].getDisplayName());
    cmbAggregation.setData(functions[i].getName(),new Integer(i + 1));
  }
  String aggrFuncName=(String)getProperty(getStructureOrHandle(),cellProperties[index]);
  int selectionIndex=getAggrFuncIndex(aggrFuncName);
  cmbAggregation.select(selectionIndex);
  cmbAggregation.setToolTipText(selectionIndex > 0 ? functions[selectionIndex - 1].getDescription() : BLANK);
  cmbAggregation.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleAggrSelectEvent(true);
      validateSyntax();
      updateFilterUIStatus();
    }
  }
);
}","/** 
 * @param parent
 * @param index
 */
private void createAggrListCell(final Composite parent,final int index){
  Label label=ControlProvider.createLabel(parent,dialogLabels[index]);
  this.maxWidth=computeMaxWidth(label);
  cmbAggregation=ControlProvider.createCombo(parent,SWT.READ_ONLY);
  cmbAggregation.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  cmbAggregation.setVisibleItemCount(30);
  cmbAggregation.add(BLANK);
  cmbAggregation.setData(BLANK,new Integer(0));
  for (int i=0; i < functions.length; i++) {
    cmbAggregation.add(functions[i].getDisplayName());
    cmbAggregation.setData(functions[i].getName(),new Integer(i + 1));
  }
  String aggrFuncName=(String)getProperty(getStructureOrHandle(),cellProperties[index]);
  int selectionIndex=getAggrFuncIndex(aggrFuncName);
  cmbAggregation.select(selectionIndex);
  cmbAggregation.setToolTipText(selectionIndex > 0 ? functions[selectionIndex - 1].getDescription() : BLANK);
  cmbAggregation.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleAggrSelectEvent(true);
      validateSyntax();
      updateFilterUIStatus();
    }
  }
);
}",0.9817708333333334
68149,"private void createComboCellDataType(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  dataType=ControlProvider.createCombo(parent,SWT.READ_ONLY);
  dataType.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  if (structureHandle.getNativeDataType() != null && structureHandle.getNativeDataType() == -10) {
    dataType.setEnabled(false);
  }
 else {
    dataType.setItems(ParameterPageUtil.getDataTypeDisplayNames());
    dataType.select(Utility.findIndex(dataType.getItems(),ParameterPageUtil.getTypeDisplayName(structureHandle.getParameterDataType())));
    dataType.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        validateSyntax();
      }
    }
);
  }
}","private void createComboCellDataType(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  dataType=ControlProvider.createCombo(parent,SWT.READ_ONLY);
  dataType.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  dataType.setVisibleItemCount(30);
  if (structureHandle.getNativeDataType() != null && structureHandle.getNativeDataType() == -10) {
    dataType.setEnabled(false);
  }
 else {
    dataType.setItems(ParameterPageUtil.getDataTypeDisplayNames());
    dataType.select(Utility.findIndex(dataType.getItems(),ParameterPageUtil.getTypeDisplayName(structureHandle.getParameterDataType())));
    dataType.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        validateSyntax();
      }
    }
);
  }
}",0.9767441860465116
68150,"private void createSchemaFilterComposite(boolean supportsSchema,boolean supportsProcedure,Composite tablescomposite){
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
  GridLayout groupLayout=new GridLayout();
  groupLayout.numColumns=3;
  groupLayout.verticalSpacing=10;
  selectTableGroup.setLayout(groupLayout);
  GridData selectTableData=new GridData(GridData.FILL_HORIZONTAL);
  selectTableGroup.setLayoutData(selectTableData);
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,prefetchSchema ? SWT.READ_ONLY : SWT.DROP_DOWN);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
  GridData searchTxtData=new GridData(GridData.FILL_HORIZONTAL);
  searchTxtData.horizontalSpan=2;
  searchTxt.setLayoutData(searchTxtData);
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer,supportsProcedure);
  GridData filterData=new GridData(GridData.FILL_HORIZONTAL);
  filterData.horizontalSpan=2;
  filterComboViewer.getControl().setLayoutData(filterData);
  setupShowSystemTableCheckBox(selectTableGroup);
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  GridData btnData=new GridData(GridData.HORIZONTAL_ALIGN_CENTER);
  btnData.horizontalSpan=3;
  findButton.setLayoutData(btnData);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          fc=populateFilterConfig();
          DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()),fc,metadataBidiFormatStr,SQLDataSetEditorPage.this.timeOutLimit * 1000);
        }
      }
);
    }
  }
);
  String[] allSchemaNames=null;
  if (supportsSchema) {
    String allFlag=JdbcPlugin.getResourceString(""String_Node_Str"");
    schemaCombo.add(allFlag);
    if (prefetchSchema) {
      allSchemaNames=JdbcMetaDataProvider.getInstance().getAllSchemaNames(timeOutLimit * 1000);
      for (      String name : allSchemaNames) {
        schemaCombo.add(BidiTransform.transform(name,metadataBidiFormatStr,BidiConstants.DEFAULT_BIDI_FORMAT_STR));
      }
    }
    schemaCombo.select(0);
  }
 else {
    schemaCombo.removeAll();
    schemaCombo.setEnabled(false);
    schemaLabel.setEnabled(false);
  }
  if (prefetchSchema) {
    fc=populateFilterConfig();
    DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName(),allSchemaNames),fc,metadataBidiFormatStr,SQLDataSetEditorPage.this.timeOutLimit * 1000);
  }
 else {
    DBNodeUtil.createRootTip(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()),metadataBidiFormatStr);
  }
}","private void createSchemaFilterComposite(boolean supportsSchema,boolean supportsProcedure,Composite tablescomposite){
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
  GridLayout groupLayout=new GridLayout();
  groupLayout.numColumns=3;
  groupLayout.verticalSpacing=10;
  selectTableGroup.setLayout(groupLayout);
  GridData selectTableData=new GridData(GridData.FILL_HORIZONTAL);
  selectTableGroup.setLayoutData(selectTableData);
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,prefetchSchema ? SWT.READ_ONLY : SWT.DROP_DOWN);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  schemaCombo.setVisibleItemCount(30);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
  GridData searchTxtData=new GridData(GridData.FILL_HORIZONTAL);
  searchTxtData.horizontalSpan=2;
  searchTxt.setLayoutData(searchTxtData);
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer,supportsProcedure);
  GridData filterData=new GridData(GridData.FILL_HORIZONTAL);
  filterData.horizontalSpan=2;
  filterComboViewer.getControl().setLayoutData(filterData);
  setupShowSystemTableCheckBox(selectTableGroup);
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  GridData btnData=new GridData(GridData.HORIZONTAL_ALIGN_CENTER);
  btnData.horizontalSpan=3;
  findButton.setLayoutData(btnData);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          fc=populateFilterConfig();
          DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()),fc,metadataBidiFormatStr,SQLDataSetEditorPage.this.timeOutLimit * 1000);
        }
      }
);
    }
  }
);
  String[] allSchemaNames=null;
  if (supportsSchema) {
    String allFlag=JdbcPlugin.getResourceString(""String_Node_Str"");
    schemaCombo.add(allFlag);
    if (prefetchSchema) {
      allSchemaNames=JdbcMetaDataProvider.getInstance().getAllSchemaNames(timeOutLimit * 1000);
      for (      String name : allSchemaNames) {
        schemaCombo.add(BidiTransform.transform(name,metadataBidiFormatStr,BidiConstants.DEFAULT_BIDI_FORMAT_STR));
      }
    }
    schemaCombo.select(0);
  }
 else {
    schemaCombo.removeAll();
    schemaCombo.setEnabled(false);
    schemaLabel.setEnabled(false);
  }
  if (prefetchSchema) {
    fc=populateFilterConfig();
    DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName(),allSchemaNames),fc,metadataBidiFormatStr,SQLDataSetEditorPage.this.timeOutLimit * 1000);
  }
 else {
    DBNodeUtil.createRootTip(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()),metadataBidiFormatStr);
  }
}",0.9941432647544676
68151,"/** 
 * render series as curve.
 */
protected void renderAsCurve(IPrimitiveRenderer ipr,LineAttributes lia,ISeriesRenderingHints srh,Location[] loa,boolean bShowAsTape,double tapeWidth,Fill paletteEntry,boolean usePaletteLineColor) throws ChartException {
  final CurveRenderer cr=new CurveRenderer(((ChartWithAxes)getModel()),this,lia,loa,bShowAsTape,tapeWidth,true,!isDimension3D(),paletteEntry,usePaletteLineColor,((LineSeries)this.getSeries()).isConnectMissingValue());
  cr.draw(ipr);
}","/** 
 * render series as curve.
 */
protected void renderAsCurve(IPrimitiveRenderer ipr,LineAttributes lia,ISeriesRenderingHints srh,Location[] loa,boolean bShowAsTape,double tapeWidth,Fill paletteEntry,boolean usePaletteLineColor) throws ChartException {
  DataPointHints[] dpha=srh.getDataPoints();
  boolean bStacked=getSeries().isStacked() || getAxis().isPercent();
  LineSeries ls=(LineSeries)getSeries();
  DataPointsSeeker dpSeeker=DataPointsSeeker.create(dpha,ls,bStacked);
  List<Location> list=new LinkedList<Location>();
  while (dpSeeker.next()) {
    list.add(loa[dpSeeker.getIndex()]);
  }
  final CurveRenderer cr=new CurveRenderer(((ChartWithAxes)getModel()),this,lia,list.toArray(new Location[list.size()]),bShowAsTape,tapeWidth,true,!isDimension3D(),paletteEntry,usePaletteLineColor,((LineSeries)this.getSeries()).isConnectMissingValue());
  cr.draw(ipr);
}",0.6412884333821376
68152,"protected void refreshLinkedReportParamStatus(){
  TableItem items[]=viewer.getViewer().getTable().getItems();
  for (int i=0; i < items.length; i++) {
    if (items[i].getData() instanceof OdaDataSetParameterHandle) {
      OdaDataSetParameterHandle handle=(OdaDataSetParameterHandle)items[i].getData();
      if (handle.getParamName() == null) {
        continue;
      }
      ScalarParameterHandle reportParam=ParameterPageUtil.getScalarParameter(handle.getParamName(),true);
      if (reportParam != null) {
        if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(reportParam.getParamType())) {
          getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{handle.getParamName(),handle.getName()}),IMessageProvider.ERROR);
        }
      }
 else {
        getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{handle.getParamName(),handle.getName()}),IMessageProvider.ERROR);
      }
      viewer.getViewer().refresh();
    }
  }
}","protected void refreshLinkedReportParamStatus(){
  TableItem items[]=viewer.getViewer().getTable().getItems();
  for (int i=0; i < items.length; i++) {
    if (items[i].getData() instanceof OdaDataSetParameterHandle) {
      OdaDataSetParameterHandle handle=(OdaDataSetParameterHandle)items[i].getData();
      if (handle.getParamName() == null) {
        continue;
      }
      ScalarParameterHandle reportParam=ParameterPageUtil.getScalarParameter(handle.getParamName(),true);
      if (reportParam != null) {
        if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(reportParam.getParamType())) {
          getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{handle.getName()}),IMessageProvider.ERROR);
        }
      }
 else {
        getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{handle.getParamName(),handle.getName()}),IMessageProvider.ERROR);
      }
      viewer.getViewer().refresh();
    }
  }
}",0.9890547263681592
68153,"/** 
 * API test on IReportEngine.createGetParameterDefinitionTask( ) method
 */
public void testCreateGetParameterDefinitionTask(){
  try {
    ReportEngine engine=new ReportEngine(new EngineConfig());
    IReportRunnable runnable=engine.openReportDesign(REPORT_DESIGN);
    IGetParameterDefinitionTask paramDefnTask=engine.createGetParameterDefinitionTask(runnable);
    IParameterDefnBase paramDefn=paramDefnTask.getParameterDefn(""String_Node_Str"");
    assertTrue(paramDefn instanceof ScalarParameterDefn);
    assertTrue(IScalarParameterDefn.TEXT_BOX == paramDefn.getParameterType());
    assertTrue(""String_Node_Str"".equals(paramDefnTask.getDefaultValue(paramDefn)));
    ScalarParameterDefn scalarParameter=(ScalarParameterDefn)paramDefn;
    Map userProperties=scalarParameter.getUserPropertyValues();
    assertEquals(2,userProperties.size());
    assertEquals(5,userProperties.get(""String_Node_Str""));
    assertEquals(""String_Node_Str"",userProperties.get(""String_Node_Str""));
    assertEquals(5,scalarParameter.getUserPropertyValue(""String_Node_Str""));
    assertEquals(""String_Node_Str"",scalarParameter.getUserPropertyValue(""String_Node_Str""));
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}","/** 
 * API test on IReportEngine.createGetParameterDefinitionTask( ) method
 */
public void testCreateGetParameterDefinitionTask(){
  try {
    ReportEngine engine=new ReportEngine(new EngineConfig());
    IReportRunnable runnable=engine.openReportDesign(REPORT_DESIGN);
    IGetParameterDefinitionTask paramDefnTask=engine.createGetParameterDefinitionTask(runnable);
    IParameterDefnBase paramDefn=paramDefnTask.getParameterDefn(""String_Node_Str"");
    assertTrue(paramDefn instanceof ScalarParameterDefn);
    assertTrue(IScalarParameterDefn.TEXT_BOX == paramDefn.getParameterType());
    assertTrue(""String_Node_Str"".equals(paramDefnTask.getDefaultValue(paramDefn)));
    ScalarParameterDefn scalarParameter=(ScalarParameterDefn)paramDefn;
    Map userProperties=scalarParameter.getUserPropertyValues();
    assertEquals(2,userProperties.size());
    assertEquals(5,userProperties.get(""String_Node_Str""));
    assertEquals(""String_Node_Str"",userProperties.get(""String_Node_Str""));
    assertEquals(""String_Node_Str"",scalarParameter.getUserPropertyValue(""String_Node_Str""));
    assertEquals(""String_Node_Str"",scalarParameter.getUserPropertyValue(""String_Node_Str""));
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}",0.9927302100161552
68154,"public static String formatNumberAsDecimal(Object data){
  Number number=(Number)data;
  DecimalFormat numberFormat=new DecimalFormat(""String_Node_Str"");
  numberFormat.setMaximumFractionDigits(15);
  return numberFormat.format(number);
}","public static String formatNumberAsDecimal(Object data){
  Number number=(Number)data;
  DecimalFormat numberFormat=new DecimalFormat(""String_Node_Str"");
  numberFormat.setMaximumFractionDigits(15);
  updateExcelDecimalSeparator(numberFormat);
  return numberFormat.format(number);
}",0.9136276391554704
68155,"/** 
 * Provides a distinct color as far as possible.
 * @param paletteColor
 * @param paletteSize
 * @param index
 * @return
 */
private static ColorDefinition tunePaletteColor(ColorDefinition paletteColor,int paletteSize,int index){
  ColorDefinition color=goFactory.copyOf(paletteColor);
  int cycle=index / paletteSize;
  int offset=(cycle / 4) * 71;
  int phrase=cycle % 3;
switch (phrase) {
case 0:
    color.setRed((color.getRed() + offset) % 256);
  color.setGreen((color.getGreen() + offset) % 256);
break;
case 1:
color.setRed((color.getRed() + offset) % 256);
color.setBlue((color.getBlue() + offset) % 256);
break;
case 2:
color.setGreen((color.getGreen() + offset) % 256);
color.setBlue((color.getBlue() + offset) % 256);
break;
}
return color;
}","/** 
 * Provides a distinct color as far as possible.
 * @param paletteColor
 * @param paletteSize
 * @param index
 * @return
 */
private static ColorDefinition tunePaletteColor(ColorDefinition paletteColor,int paletteSize,int index){
  ColorDefinition color=goFactory.copyOf(paletteColor);
  int cycle=index / paletteSize;
  int offset=(cycle / 3 + 1) * 71;
  int phrase=cycle % 3;
switch (phrase) {
case 0:
    color.setRed((color.getRed() + offset) % 256);
  color.setGreen((color.getGreen() + offset) % 256);
break;
case 1:
color.setRed((color.getRed() + offset) % 256);
color.setBlue((color.getBlue() + offset) % 256);
break;
case 2:
color.setGreen((color.getGreen() + offset) % 256);
color.setBlue((color.getBlue() + offset) % 256);
break;
}
return color;
}",0.9960578186596584
68156,"public void createControl(Composite parent){
  getDataSheet().setChartModel(getChartModel());
  getDataSheet().addListener(this);
  if (topControl == null || topControl.isDisposed()) {
    topControl=new Composite(parent,SWT.NONE);
    GridLayout gridLayout=new GridLayout(3,false);
    gridLayout.marginWidth=0;
    gridLayout.marginHeight=0;
    topControl.setLayout(gridLayout);
    topControl.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL));
    dynamicArea=createDataComponentsUI();
    getCustomizeUI().init();
    foSashForm=new SashForm(topControl,SWT.VERTICAL);
{
      GridLayout layout=new GridLayout();
      foSashForm.setLayout(layout);
      GridData gridData=new GridData(GridData.FILL_BOTH);
      gridData.widthHint=800;
      foSashForm.setLayoutData(gridData);
    }
    foSashForm.addListener(SWT.Resize,this);
    placeComponents();
    previewPainter=createPreviewPainter();
  }
 else {
    customizeUI();
  }
  resize();
  if (getChartModel() instanceof ChartWithAxes) {
    checkDataTypeForChartWithAxes();
  }
  doPreview();
  DataDefinitionTextManager.getInstance().refreshAll();
  DataDefinitionTextManager.getInstance().setContext((IChartWizardContext)getContext());
  ChartUIUtil.checkGroupType((ChartWizardContext)getContext(),getChartModel());
  ChartUIUtil.checkAggregateType((ChartWizardContext)getContext());
  bindHelp();
}","public void createControl(Composite parent){
  getDataSheet().setChartModel(getChartModel());
  getDataSheet().addListener(this);
  if (topControl == null || topControl.isDisposed()) {
    topControl=new Composite(parent,SWT.NONE);
    GridLayout gridLayout=new GridLayout(3,false);
    gridLayout.marginWidth=0;
    gridLayout.marginHeight=0;
    topControl.setLayout(gridLayout);
    topControl.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL));
    dynamicArea=createDataComponentsUI();
    getCustomizeUI().init();
    ScrolledComposite sc=new ScrolledComposite(topControl,SWT.H_SCROLL);
{
      GridLayout layout=new GridLayout();
      sc.setLayout(layout);
      GridData gridData=new GridData(GridData.FILL_BOTH);
      sc.setLayoutData(gridData);
      sc.setExpandHorizontal(true);
      sc.setExpandVertical(true);
    }
    Composite cmp=new Composite(sc,SWT.None);
    cmp.setLayout(new GridLayout());
    cmp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sc.setContent(cmp);
    sc.setMinWidth(800);
    foSashForm=new SashForm(cmp,SWT.VERTICAL);
{
      GridLayout layout=new GridLayout();
      foSashForm.setLayout(layout);
      GridData gridData=new GridData(GridData.FILL_BOTH);
      gridData.widthHint=800;
      foSashForm.setLayoutData(gridData);
    }
    foSashForm.addListener(SWT.Resize,this);
    placeComponents();
    previewPainter=createPreviewPainter();
  }
 else {
    customizeUI();
  }
  resize();
  if (getChartModel() instanceof ChartWithAxes) {
    checkDataTypeForChartWithAxes();
  }
  doPreview();
  DataDefinitionTextManager.getInstance().refreshAll();
  DataDefinitionTextManager.getInstance().setContext((IChartWizardContext)getContext());
  ChartUIUtil.checkGroupType((ChartWizardContext)getContext(),getChartModel());
  ChartUIUtil.checkAggregateType((ChartWizardContext)getContext());
  bindHelp();
}",0.8427480916030534
68157,"private void createTypeArea(){
  ScrolledComposite sc=new ScrolledComposite(foSashForm,SWT.V_SCROLL);
{
    GridLayout layout=new GridLayout();
    sc.setLayout(layout);
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    sc.setLayoutData(gridData);
    sc.setExpandHorizontal(true);
    sc.setExpandVertical(true);
  }
  cmpType=new Composite(sc,SWT.NONE);
  cmpType.setLayout(new GridLayout(2,false));
  cmpType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  sc.setContent(cmpType);
  createTypeTable();
  addChartTypes();
  createDetails();
  Point size=cmpType.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  sc.setMinSize(size);
}","private void createTypeArea(){
  ScrolledComposite sc=new ScrolledComposite(foSashForm,SWT.V_SCROLL | SWT.H_SCROLL);
{
    GridLayout layout=new GridLayout();
    sc.setLayout(layout);
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    sc.setLayoutData(gridData);
    sc.setExpandHorizontal(true);
    sc.setExpandVertical(true);
  }
  cmpType=new Composite(sc,SWT.NONE);
  cmpType.setLayout(new GridLayout(2,false));
  cmpType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  sc.setContent(cmpType);
  createTypeTable();
  addChartTypes();
  createDetails();
  Point size=cmpType.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  sc.setMinSize(size);
}",0.9886104783599088
68158,"private void createAttributeArea(Composite parent){
  grpAttributes=new Group(parent,SWT.NONE);
{
    grpAttributes.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpAttributes.setLayout(new GridLayout(2,false));
    grpAttributes.setText(Messages.getString(""String_Node_Str""));
  }
  lblPosition=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLPosition=new GridData();
  lblPosition.setLayoutData(gdLBLPosition);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  cmbPosition=new Combo(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  lblFont=new Label(grpAttributes,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getCaption().getFont(),getSeriesForProcessing().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(grpAttributes,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
}","private void createAttributeArea(Composite parent){
  grpAttributes=new Group(parent,SWT.NONE);
{
    grpAttributes.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpAttributes.setLayout(new GridLayout(2,false));
    grpAttributes.setText(Messages.getString(""String_Node_Str""));
  }
  lblPosition=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLPosition=new GridData();
  lblPosition.setLayoutData(gdLBLPosition);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  cmbPosition=new Combo(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
  gdCMBPosition.verticalAlignment=SWT.CENTER;
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  lblFont=new Label(grpAttributes,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getCaption().getFont(),getSeriesForProcessing().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(grpAttributes,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.verticalAlignment=SWT.CENTER;
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  gdFCCShadow.verticalAlignment=SWT.CENTER;
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
}",0.959332191780822
68159,"private void createAttributeArea(Composite parent){
  grpAttributes=new Group(parent,SWT.NONE);
{
    grpAttributes.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpAttributes.setLayout(new GridLayout(2,false));
    grpAttributes.setText(Messages.getString(""String_Node_Str""));
  }
  lblPosition=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLPosition=new GridData();
  lblPosition.setLayoutData(gdLBLPosition);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  cmbPosition=new Combo(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
  gdCMBPosition.verticalAlignment=SWT.CENTER;
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  lblFont=new Label(grpAttributes,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getCaption().getFont(),getSeriesForProcessing().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(grpAttributes,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.verticalAlignment=SWT.CENTER;
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  gdFCCShadow.verticalAlignment=SWT.CENTER;
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
}","private void createAttributeArea(Composite parent){
  grpAttributes=new Group(parent,SWT.NONE);
{
    grpAttributes.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpAttributes.setLayout(new GridLayout(2,false));
    grpAttributes.setText(Messages.getString(""String_Node_Str""));
  }
  lblPosition=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLPosition=new GridData();
  lblPosition.setLayoutData(gdLBLPosition);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  cmbPosition=new Combo(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
  gdCMBPosition.verticalAlignment=SWT.CENTER;
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  lblFont=new Label(grpAttributes,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getCaption().getFont(),getSeriesForProcessing().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(grpAttributes,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.verticalAlignment=SWT.CENTER;
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  gdFCCShadow.verticalAlignment=SWT.CENTER;
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
}",0.9975083056478404
68160,"/** 
 * @param objClass
 * @return
 */
public static int getDataType(Class objClass){
  if (objClass.equals(byte[].class))   return typeCodes[6];
  for (int i=0; i < classes.length; i++) {
    if (classes[i].equals(objClass)) {
      return typeCodes[i];
    }
  }
  return UNKNOWN_TYPE;
}","/** 
 * @param objClass
 * @return
 */
public static int getDataType(Class objClass){
  if (objClass.equals(java.sql.Timestamp.class))   return typeCodes[4];
  if (objClass.equals(byte[].class))   return typeCodes[6];
  for (int i=0; i < classes.length; i++) {
    if (classes[i].equals(objClass)) {
      return typeCodes[i];
    }
  }
  return UNKNOWN_TYPE;
}",0.8892307692307693
68161,"public static String parse(Object txt,String dateTime,ULocale locale){
  if (dateTime == null) {
    DateFormatter format=new DateFormatter(locale);
    if (txt instanceof java.sql.Date) {
      format.applyPattern(DateFormatter.DATE_UNFORMATTED);
    }
 else     if (txt instanceof java.sql.Time) {
      format.applyPattern(DateFormatter.TIME_UNFORMATTED);
    }
 else {
      format.applyPattern(DateFormatter.DATETIME_UNFORMATTED);
    }
    dateTime=format.getLocalizedFormatCode();
    if (dateTime.indexOf('y') == dateTime.lastIndexOf('y')) {
      dateTime=dateTime.replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (dateTime.indexOf(""String_Node_Str"") != -1 || dateTime.indexOf(""String_Node_Str"") != -1) {
    DateFormatter dateFormatter=new DateFormatter(dateTime,locale);
    dateTime=dateFormatter.getLocalizedFormatCode();
  }
  StringBuffer buffer=new StringBuffer();
  boolean inQuto=false;
  for (int count=0; count < dateTime.length(); count++) {
    char tempChar=dateTime.charAt(count);
    if (inQuto) {
      if (tempChar == '\'' && nextIsQuto(dateTime,count)) {
        buffer.append(tempChar);
        count++;
      }
 else {
        if (tempChar == '\'') {
          inQuto=false;
        }
 else {
          if (specialStr.indexOf(tempChar) != -1) {
            buffer.append(""String_Node_Str"" + tempChar);
          }
 else {
            buffer.append(tempChar);
          }
        }
      }
    }
 else {
      if (tempChar == '\'') {
        if (nextIsQuto(dateTime,count)) {
          buffer.append(tempChar);
          count++;
        }
 else {
          inQuto=true;
        }
      }
 else {
        if (tempChar == 'a') {
          buffer.append(""String_Node_Str"");
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          buffer.append(""String_Node_Str"");
          continue;
        }
        buffer.append(tempChar);
      }
    }
  }
  return buffer.toString();
}","public static String parse(Object txt,String dateTime,ULocale locale){
  if (dateTime == null) {
    DateFormatter format=new DateFormatter(locale);
    if (txt instanceof java.sql.Date) {
      format.applyPattern(DateFormatter.DATE_UNFORMATTED);
    }
 else     if (txt instanceof java.sql.Time) {
      format.applyPattern(DateFormatter.TIME_UNFORMATTED);
    }
 else {
      format.applyPattern(DateFormatter.DATETIME_UNFORMATTED);
    }
    dateTime=updateFormat(format.getLocalizedFormatCode());
  }
  if (dateTime.indexOf(""String_Node_Str"") != -1 || dateTime.indexOf(""String_Node_Str"") != -1) {
    DateFormatter dateFormatter=new DateFormatter(dateTime,locale);
    dateTime=updateFormat(dateFormatter.getLocalizedFormatCode());
  }
  StringBuffer buffer=new StringBuffer();
  boolean inQuto=false;
  for (int count=0; count < dateTime.length(); count++) {
    char tempChar=dateTime.charAt(count);
    if (inQuto) {
      if (tempChar == '\'' && nextIsQuto(dateTime,count)) {
        buffer.append(tempChar);
        count++;
      }
 else {
        if (tempChar == '\'') {
          inQuto=false;
        }
 else {
          if (specialStr.indexOf(tempChar) != -1) {
            buffer.append(""String_Node_Str"" + tempChar);
          }
 else {
            buffer.append(tempChar);
          }
        }
      }
    }
 else {
      if (tempChar == '\'') {
        if (nextIsQuto(dateTime,count)) {
          buffer.append(tempChar);
          count++;
        }
 else {
          inQuto=true;
        }
      }
 else {
        if (tempChar == 'a') {
          buffer.append(""String_Node_Str"");
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          buffer.append(""String_Node_Str"");
          continue;
        }
        buffer.append(tempChar);
      }
    }
  }
  return buffer.toString();
}",0.8856998992950654
68162,"/** 
 * Update column cache with clean the resultset property
 * @param dataSetHandle
 * @throws SemanticException
 */
public static void updateColumnCacheAfterCleanRs(DataSetHandle dataSetHandle) throws SemanticException {
  if (dataSetHandle instanceof OdaDataSetHandle) {
    if (dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP).isLocal())     dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP).setValue(new ArrayList());
  }
  updateColumnCache(dataSetHandle);
}","/** 
 * Update column cache with clean the resultset property
 * @param dataSetHandle
 * @throws SemanticException
 */
public static void updateColumnCacheAfterCleanRs(DataSetHandle dataSetHandle) throws SemanticException {
  if (dataSetHandle.getCachedMetaDataHandle() != null && dataSetHandle.getCachedMetaDataHandle().getResultSet() != null)   dataSetHandle.getCachedMetaDataHandle().getResultSet().clearValue();
  if (dataSetHandle instanceof OdaDataSetHandle) {
    if (dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP).isLocal())     dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP).setValue(new ArrayList());
  }
  updateColumnCache(dataSetHandle);
}",0.8383838383838383
68163,"/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
      EngineConfig ec=new EngineConfig();
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
      DataRequestSession session=engineTask.getDataSession();
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      engineTask.setAppContext(appContext);
      engineTask.run();
      session.refreshMetaData(dataSetHandle,holdEvent);
      engineTask.close();
      engine.destroy();
    }
 else {
      DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
      DataRequestSession drSession=DataRequestSession.newSession(context);
      drSession.refreshMetaData(dataSetHandle,holdEvent);
      drSession.shutdown();
    }
  }
 catch (  BirtException ex) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{ex});
  }
}","/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
      EngineConfig ec=new EngineConfig();
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
      DataRequestSession session=engineTask.getDataSession();
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      engineTask.setAppContext(appContext);
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
      engineTask.close();
      engine.destroy();
    }
 else {
      DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
      DataRequestSession drSession=DataRequestSession.newSession(context);
      drSession.refreshMetaData(dataSetHandle,holdEvent);
      drSession.shutdown();
    }
  }
 catch (  BirtException ex) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{ex});
  }
}",0.9755932203389832
68164,"private boolean isTemp(String name){
  return (name.matches(""String_Node_Str"") || name.matches(""String_Node_Str"") || name.matches(""String_Node_Str""));
}","private boolean isTemp(String name){
  return (name.matches(""String_Node_Str"") || name.matches(""String_Node_Str"") || name.matches(""String_Node_Str"")|| ExprMetaUtil.POS_NAME.equals(name));
}",0.8914956011730205
68165,"public final boolean isTickBwtweenCategories(){
  return bTickBwteenCategories;
}","public final boolean isTickBwtweenCategories(){
  return !bCategoryScale || bTickBwteenCategories;
}",0.8950276243093923
68166,"private void init(AxesRenderer renderer,IPrimitiveRenderer ipr,Plot pl,OneAxis ax,int iWhatToDraw) throws ChartException {
  this.renderer=renderer;
  this.ax=ax;
  this.iWhatToDraw=iWhatToDraw;
  this.ipr=ipr;
  axModel=ax.getModelAxis();
  pwa=(PlotWithAxes)renderer.getComputations();
  cComp=pwa.getChartComputation();
  insCA=pwa.getAxes().getInsets();
  sh=getRunTimeContext().getScriptHandler();
  dLocation=ax.getAxisCoordinate();
  sc=ax.getScale();
  iv=ax.getIntersectionValue();
  iMajorTickStyle=ax.getGrid().getTickStyle(IConstants.MAJOR);
  iMinorTickStyle=ax.getGrid().getTickStyle(IConstants.MINOR);
  iLabelLocation=ax.getLabelPosition();
  iOrientation=ax.getOrientation();
  xs=renderer.getDevice().getDisplayServer();
  la=goFactory.copyOf(ax.getLabel());
  daEndPoints=sc.getEndPoints();
  da=sc.getTickCordinates();
  daMinor=sc.getMinorCoordinates(ax.getGrid().getMinorCountPerMajor());
  sText=null;
  iDimension=pwa.getDimension();
  nde=NumberDataElementImpl.create(0);
  dSeriesThickness=pwa.getSeriesThickness();
  bAxisLabelStaggered=sc.isAxisLabelStaggered();
  df=null;
  lia=ax.getLineAttributes();
  liaMajorTick=ax.getGrid().getTickAttributes(IConstants.MAJOR);
  liaMinorTick=ax.getGrid().getTickAttributes(IConstants.MINOR);
  bRenderAxisLabels=ax.isShowLabels() && ((iWhatToDraw & IConstants.LABELS) == IConstants.LABELS && la.isVisible());
  bRenderAxisTitle=((iWhatToDraw & IConstants.LABELS) == IConstants.LABELS);
  lo=goFactory.createLocation(0,0);
  trae=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),TransformationEvent.class);
  tre=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),TextRenderEvent.class);
  lre=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
  bRendering3D=iDimension == IConstants.THREE_D;
  bRenderOrthogonal3DAxis=(iWhatToDraw & IConstants.ORTHOGONAL_AXIS) == IConstants.ORTHOGONAL_AXIS && bRendering3D;
  bRenderBase3DAxis=(iWhatToDraw & IConstants.BASE_AXIS) == IConstants.BASE_AXIS && bRendering3D;
  bRenderAncillary3DAxis=(iWhatToDraw & IConstants.ANCILLARY_AXIS) == IConstants.ANCILLARY_AXIS && bRendering3D;
  dc=renderer.getDeferredCache();
  axisType=ax.getAxisType();
  panningOffset=renderer.getPanningOffset();
  bTransposed=renderer.isTransposed();
  daEndPoints3D=null;
  da3D=null;
  lo3d=null;
  t3dre=null;
  l3dre=null;
  bTickBetweenCategories=axModel.getScale().isTickBetweenCategories();
  bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
}","private void init(AxesRenderer renderer,IPrimitiveRenderer ipr,Plot pl,OneAxis ax,int iWhatToDraw) throws ChartException {
  this.renderer=renderer;
  this.ax=ax;
  this.iWhatToDraw=iWhatToDraw;
  this.ipr=ipr;
  axModel=ax.getModelAxis();
  pwa=(PlotWithAxes)renderer.getComputations();
  cComp=pwa.getChartComputation();
  insCA=pwa.getAxes().getInsets();
  sh=getRunTimeContext().getScriptHandler();
  dLocation=ax.getAxisCoordinate();
  sc=ax.getScale();
  iv=ax.getIntersectionValue();
  iMajorTickStyle=ax.getGrid().getTickStyle(IConstants.MAJOR);
  iMinorTickStyle=ax.getGrid().getTickStyle(IConstants.MINOR);
  iLabelLocation=ax.getLabelPosition();
  iOrientation=ax.getOrientation();
  xs=renderer.getDevice().getDisplayServer();
  la=goFactory.copyOf(ax.getLabel());
  daEndPoints=sc.getEndPoints();
  da=sc.getTickCordinates();
  daMinor=sc.getMinorCoordinates(ax.getGrid().getMinorCountPerMajor());
  sText=null;
  iDimension=pwa.getDimension();
  nde=NumberDataElementImpl.create(0);
  dSeriesThickness=pwa.getSeriesThickness();
  bAxisLabelStaggered=sc.isAxisLabelStaggered();
  df=null;
  lia=ax.getLineAttributes();
  liaMajorTick=ax.getGrid().getTickAttributes(IConstants.MAJOR);
  liaMinorTick=ax.getGrid().getTickAttributes(IConstants.MINOR);
  bRenderAxisLabels=ax.isShowLabels() && ((iWhatToDraw & IConstants.LABELS) == IConstants.LABELS && la.isVisible());
  bRenderAxisTitle=((iWhatToDraw & IConstants.LABELS) == IConstants.LABELS);
  lo=goFactory.createLocation(0,0);
  trae=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),TransformationEvent.class);
  tre=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),TextRenderEvent.class);
  lre=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
  bRendering3D=iDimension == IConstants.THREE_D;
  bRenderOrthogonal3DAxis=(iWhatToDraw & IConstants.ORTHOGONAL_AXIS) == IConstants.ORTHOGONAL_AXIS && bRendering3D;
  bRenderBase3DAxis=(iWhatToDraw & IConstants.BASE_AXIS) == IConstants.BASE_AXIS && bRendering3D;
  bRenderAncillary3DAxis=(iWhatToDraw & IConstants.ANCILLARY_AXIS) == IConstants.ANCILLARY_AXIS && bRendering3D;
  dc=renderer.getDeferredCache();
  axisType=ax.getAxisType();
  panningOffset=renderer.getPanningOffset();
  bTransposed=renderer.isTransposed();
  daEndPoints3D=null;
  da3D=null;
  lo3d=null;
  t3dre=null;
  l3dre=null;
  bTickBetweenCategories=ax.isTickBwtweenCategories();
  bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
}",0.9960521121200158
68167,"private boolean hasParameters(){
  ModuleHandle model=getModel();
  List parameters=model.getFlattenParameters();
  if (parameters != null) {
    for (    Object p : parameters) {
      if (p instanceof ParameterHandle && !((ParameterHandle)p).isHidden()) {
        return true;
      }
    }
  }
  return false;
}","private boolean hasParameters(){
  IWebAppInfo webapp=WebViewer.getCurrentWebApp();
  if (webapp != null && webapp.useCustomParamHandling()) {
    return false;
  }
  ModuleHandle model=getModel();
  List parameters=model.getFlattenParameters();
  if (parameters != null) {
    for (    Object p : parameters) {
      if (p instanceof ParameterHandle && !((ParameterHandle)p).isHidden()) {
        return true;
      }
    }
  }
  return false;
}",0.8263157894736842
68168,"/** 
 */
private void init(){
  this.setSize(getParent().getClientArea().width,getParent().getClientArea().height);
  Display display=Display.getDefault();
  colorArray=this.createColorMap(display);
  vListeners=new Vector<Listener>();
}","/** 
 */
private void init(){
  if (Display.getCurrent().getHighContrast()) {
    GC gc=new GC(this);
    iSize=gc.getFontMetrics().getHeight() + 2;
  }
  this.setSize(getParent().getClientArea().width,getParent().getClientArea().height);
  Display display=Display.getDefault();
  colorArray=this.createColorMap(display);
  vListeners=new Vector<Listener>();
}",0.7939698492462312
68169,"/** 
 */
private void init(){
  this.setSize(getParent().getClientArea().width,getParent().getClientArea().height);
  vListeners=new Vector();
}","/** 
 */
private void init(){
  if (Display.getCurrent().getHighContrast()) {
    GC gc=new GC(this);
    iSize=gc.getFontMetrics().getHeight();
  }
  this.setSize(getParent().getClientArea().width,getParent().getClientArea().height);
  vListeners=new Vector();
}",0.7076167076167076
68170,"private void createDropDownComponent(int iXLoc,int iYLoc){
  if (!bEnabled) {
    return;
  }
  int shellWidth=this.getSize().x;
  Shell shell=new Shell(this.getShell(),SWT.NONE);
  shell.setLayout(new FillLayout(SWT.FILL));
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=shellWidth;
  }
  shell.setLocation(iXLoc,iYLoc);
  cmpDropDown=new Composite(shell,SWT.NONE);
  GridLayout gl=new GridLayout();
  gl.horizontalSpacing=0;
  gl.verticalSpacing=0;
  gl.marginHeight=0;
  gl.marginWidth=0;
  cmpDropDown.setLayout(gl);
  Listener listenerCmpDropDown=new Listener(){
    public void handleEvent(    Event event){
      handleEventCmpDropDown(event);
    }
  }
;
  cmpDropDown.addListener(SWT.KeyDown,listenerCmpDropDown);
  cmpDropDown.addListener(SWT.FocusOut,listenerCmpDropDown);
  final int choiceHigh=18;
  popupCanvases=new ICustomChoice[this.items.length];
  for (int iC=0; iC < items.length; iC++) {
    ICustomChoice cnv=createChoice(cmpDropDown,items[iC]);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.heightHint=choiceHigh;
    cnv.setLayoutData(gd);
    cnv.addListener(SWT.MouseDown,canvasListener);
    cnv.addListener(SWT.MouseEnter,canvasListener);
    cnv.addListener(SWT.KeyDown,canvasListener);
    popupCanvases[iC]=cnv;
    if (cnvSelection.getValue().equals(cnv.getValue())) {
      cnv.notifyListeners(SWT.FocusIn,new Event());
      popupSelection=cnv;
    }
  }
  shell.setSize(shellWidth,choiceHigh * items.length);
  shell.layout();
  shell.open();
}","private void createDropDownComponent(int iXLoc,int iYLoc){
  if (!bEnabled) {
    return;
  }
  int shellWidth=this.getSize().x;
  Shell shell=new Shell(this.getShell(),SWT.NONE);
  shell.setLayout(new FillLayout(SWT.FILL));
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=shellWidth;
  }
  shell.setLocation(iXLoc,iYLoc);
  cmpDropDown=new Composite(shell,SWT.NONE);
  GridLayout gl=new GridLayout();
  gl.horizontalSpacing=0;
  gl.verticalSpacing=0;
  gl.marginHeight=0;
  gl.marginWidth=0;
  cmpDropDown.setLayout(gl);
  Listener listenerCmpDropDown=new Listener(){
    public void handleEvent(    Event event){
      handleEventCmpDropDown(event);
    }
  }
;
  cmpDropDown.addListener(SWT.KeyDown,listenerCmpDropDown);
  cmpDropDown.addListener(SWT.FocusOut,listenerCmpDropDown);
  popupCanvases=new ICustomChoice[this.items.length];
  for (int iC=0; iC < items.length; iC++) {
    ICustomChoice cnv=createChoice(cmpDropDown,items[iC]);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.heightHint=itemHeight;
    cnv.setLayoutData(gd);
    cnv.addListener(SWT.MouseDown,canvasListener);
    cnv.addListener(SWT.MouseEnter,canvasListener);
    cnv.addListener(SWT.KeyDown,canvasListener);
    popupCanvases[iC]=cnv;
    if (cnvSelection.getValue().equals(cnv.getValue())) {
      cnv.notifyListeners(SWT.FocusIn,new Event());
      popupSelection=cnv;
    }
  }
  shell.setSize(shellWidth,itemHeight * items.length);
  shell.layout();
  shell.open();
}",0.978908603950452
68171,"private void initControls(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  setLayout(flMain);
  cmpContent=new Composite(this,SWT.BORDER);
  GridLayout glContentInner=new GridLayout();
  glContentInner.verticalSpacing=0;
  glContentInner.horizontalSpacing=0;
  glContentInner.marginHeight=0;
  glContentInner.marginWidth=0;
  glContentInner.numColumns=2;
  cmpContent.setLayout(glContentInner);
  final int iSize=17;
  cnvSelection=createChoice(cmpContent,null);
  GridData gdCNVSelection=new GridData(GridData.FILL_BOTH);
  gdCNVSelection.heightHint=iSize;
  cnvSelection.setLayoutData(gdCNVSelection);
  cnvSelection.setValue(iCurrentValue);
  cnvSelection.addListener(SWT.KeyDown,canvasListener);
  cnvSelection.addListener(SWT.Traverse,canvasListener);
  cnvSelection.addListener(SWT.FocusIn,canvasListener);
  cnvSelection.addListener(SWT.FocusOut,canvasListener);
  cnvSelection.addListener(SWT.MouseDown,canvasListener);
  btnDown=new Button(cmpContent,SWT.ARROW | SWT.DOWN);
  GridData gdBDown=new GridData(GridData.FILL);
  gdBDown.verticalAlignment=GridData.BEGINNING;
  gdBDown.widthHint=iSize - 1;
  gdBDown.heightHint=iSize;
  btnDown.setLayoutData(gdBDown);
  btnDown.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      toggleDropDown();
    }
  }
);
  layout();
  initAccessible();
}","private void initControls(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  setLayout(flMain);
  cmpContent=new Composite(this,SWT.BORDER);
  GridLayout glContentInner=new GridLayout();
  glContentInner.verticalSpacing=0;
  glContentInner.horizontalSpacing=0;
  glContentInner.marginHeight=0;
  glContentInner.marginWidth=0;
  glContentInner.numColumns=2;
  cmpContent.setLayout(glContentInner);
  final int iSize=itemHeight;
  cnvSelection=createChoice(cmpContent,null);
  GridData gdCNVSelection=new GridData(GridData.FILL_BOTH);
  gdCNVSelection.heightHint=iSize;
  cnvSelection.setLayoutData(gdCNVSelection);
  cnvSelection.setValue(iCurrentValue);
  cnvSelection.addListener(SWT.KeyDown,canvasListener);
  cnvSelection.addListener(SWT.Traverse,canvasListener);
  cnvSelection.addListener(SWT.FocusIn,canvasListener);
  cnvSelection.addListener(SWT.FocusOut,canvasListener);
  cnvSelection.addListener(SWT.MouseDown,canvasListener);
  btnDown=new Button(cmpContent,SWT.ARROW | SWT.DOWN);
  GridData gdBDown=new GridData(GridData.FILL);
  gdBDown.verticalAlignment=GridData.BEGINNING;
  gdBDown.widthHint=iSize - 1;
  gdBDown.heightHint=iSize;
  btnDown.setLayoutData(gdBDown);
  btnDown.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      toggleDropDown();
    }
  }
);
  layout();
  initAccessible();
}",0.9956741167988464
68172,"public TextCombo(Composite parent,int style){
  super(parent,style);
  addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      fontBold.dispose();
      choiceMarkerMap.clear();
    }
  }
);
}","public TextCombo(Composite parent,int style){
  super(parent,style);
  if (Display.getCurrent().getHighContrast()) {
    GC gc=new GC(this);
    itemHeight=gc.getFontMetrics().getHeight() + 2;
  }
  addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      fontBold.dispose();
      choiceMarkerMap.clear();
    }
  }
);
}",0.7866666666666666
68173,"public void handleEvent(Event event){
  if (event.type == IChartDataSheet.EVENT_QUERY) {
    if (event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR_AND_TEXT) {
      updateColorAndText();
    }
 else     if (event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR && event.data instanceof ISelectDataComponent) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataCube(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(!isInheritingSummaryTable() && getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(ChartUIUtil.getText(cmbDataItems))) {
return;
}
getDataServiceProvider().setDataSet(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
switchDataSet(ChartUIUtil.getText(cmbDataItems));
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (ChartUIUtil.getText(cmbDataItems).equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(ChartUIUtil.getText(cmbDataItems));
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=ChartUIUtil.getText(cmbDataItems);
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
String[] datasets=getDataServiceProvider().getAllDataSets();
currentData=datasets[datasets.length - 1];
getDataServiceProvider().setDataSet(currentData);
cmbDataItems.setText(currentData);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
int count=getDataServiceProvider().getAllDataCubes().length;
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
String[] datacubes=getDataServiceProvider().getAllDataCubes();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
if (datacubes.length == count) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
currentData=datacubes[datacubes.length - 1];
getDataServiceProvider().setDataCube(currentData);
cmbDataItems.setText(currentData);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
}
updatePredefinedQueries();
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.type == IChartDataSheet.EVENT_QUERY) {
    if (event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR_AND_TEXT) {
      updateColorAndText();
    }
 else     if (event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR && event.data instanceof ISelectDataComponent) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataCube(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(!isInheritingSummaryTable() && getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
        if (cmbInherit.isEnabled()) {
          getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        }
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(ChartUIUtil.getText(cmbDataItems))) {
return;
}
getDataServiceProvider().setDataSet(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
switchDataSet(ChartUIUtil.getText(cmbDataItems));
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (ChartUIUtil.getText(cmbDataItems).equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(ChartUIUtil.getText(cmbDataItems));
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=ChartUIUtil.getText(cmbDataItems);
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
String[] datasets=getDataServiceProvider().getAllDataSets();
currentData=datasets[datasets.length - 1];
getDataServiceProvider().setDataSet(currentData);
cmbDataItems.setText(currentData);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
int count=getDataServiceProvider().getAllDataCubes().length;
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
String[] datacubes=getDataServiceProvider().getAllDataCubes();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
if (datacubes.length == count) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
currentData=datacubes[datacubes.length - 1];
getDataServiceProvider().setDataCube(currentData);
cmbDataItems.setText(currentData);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
}
updatePredefinedQueries();
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}",0.991149246672522
68174,"/** 
 * Returns the fill from palette. If the index is less than the palette colors size, simply return the fill. If else, first return brighter fill, then darker fill. The color fetching logic is like this: In the first round, use the color from palette directly. In the second round, use the brighter color of respective one in the first round. In the third round, use the darker color of respective one in the first round. In the forth round, use the brighter color of respective one in the second round. In the fifth round, use the darker color of respective one in the third round. ...
 * @param elPalette
 * @param index
 * @since 2.5
 * @return fill from palette
 */
public static Fill getPaletteFill(EList<Fill> elPalette,int index){
  final int iPaletteSize=elPalette.size();
  Fill fill=elPalette.get(index % iPaletteSize);
  if (index < iPaletteSize) {
    return goFactory.copyOf(elPalette.get(index % iPaletteSize));
  }
  int d=index / iPaletteSize;
  if (d % 2 != 0) {
    Fill brighterFill=getBrighterFill(fill);
    while (d / 2 > 0) {
      d-=2;
      brighterFill=getBrighterFill(brighterFill);
    }
    return brighterFill;
  }
  Fill darkerFill=getDarkerFill(fill);
  while ((d - 1) / 2 > 0) {
    d-=2;
    darkerFill=getDarkerFill(darkerFill);
  }
  return darkerFill;
}","/** 
 * Returns the fill from palette. If the index is less than the palette colors size, simply return the fill. If else, first return brighter fill, then darker fill. The color fetching logic is like this: In the first round, use the color from palette directly. In the second round, use the brighter color of respective one in the first round. In the third round, use the darker color of respective one in the first round. In the forth round, use the brighter color of respective one in the second round. In the fifth round, use the darker color of respective one in the third round. ...
 * @param elPalette
 * @param index
 * @since 2.5
 * @return fill from palette
 */
public static Fill getPaletteFill(EList<Fill> elPalette,int index){
  final int iPaletteSize=elPalette.size();
  Fill fill=elPalette.get(index % iPaletteSize);
  if (index < iPaletteSize) {
    return goFactory.copyOf(fill);
  }
  if (fill instanceof ColorDefinition) {
    return tunePaletteColor((ColorDefinition)fill,iPaletteSize,index);
  }
  int d=index / iPaletteSize;
  if (d % 2 != 0) {
    Fill brighterFill=getBrighterFill(fill);
    while (d / 2 > 0) {
      d-=2;
      brighterFill=getBrighterFill(brighterFill);
    }
    return brighterFill;
  }
  Fill darkerFill=getDarkerFill(fill);
  while ((d - 1) / 2 > 0) {
    d-=2;
    darkerFill=getDarkerFill(darkerFill);
  }
  return darkerFill;
}",0.9510280373831776
68175,"public boolean performOk(){
  for (int i=0; i < bindingName.size(); i++) {
    try {
      String value=null;
      Text propertyText=(Text)propertyTextList.get(i);
      if (!propertyText.isDisposed() && propertyText.getText() != null && propertyText.getText().trim().length() > 0) {
        value=propertyText.getText().trim();
      }
      Expression expr=new Expression(value,(String)propertyText.getData(DataUIConstants.EXPR_TYPE));
      if (ds instanceof DesignElementHandle) {
        ((DesignElementHandle)ds).setPropertyBinding((String)bindingName.get(i),expr);
      }
    }
 catch (    Exception e) {
      logger.log(Level.FINE,e.getMessage(),e);
      ExceptionHandler.handle(e);
      return true;
    }
  }
  return super.performOk();
}","public boolean performOk(){
  for (int i=0; i < propList.size(); i++) {
    try {
      String value=null;
      Text propertyText=(Text)propertyTextList.get(i);
      if (!propertyText.isDisposed() && propertyText.getText() != null && propertyText.getText().trim().length() > 0) {
        value=propertyText.getText().trim();
      }
      Expression expr=new Expression(value,(String)propertyText.getData(DataUIConstants.EXPR_TYPE));
      if (ds instanceof DesignElementHandle) {
        if (propList.get(i) instanceof String[]) {
          ((DesignElementHandle)ds).setPropertyBinding(((String[])propList.get(i))[0],expr);
        }
 else         if (propList.get(i) instanceof IPropertyDefn) {
          ((DesignElementHandle)ds).setPropertyBinding(((IPropertyDefn)propList.get(i)).getName(),expr);
        }
      }
    }
 catch (    Exception e) {
      logger.log(Level.FINE,e.getMessage(),e);
      ExceptionHandler.handle(e);
      return true;
    }
  }
  return super.performOk();
}",0.8334287349742415
68176,"private void createExpressionButton(Composite composite,final Text property,String propName){
  ExpressionButton exprButton=ExpressionButtonUtil.createExpressionButton(composite,property,new ExpressionProvider(handle),handle,true,SWT.PUSH);
  if (ODAPASSWORD.equals(propName) || PASSWORD.equals(propName)) {
    exprButton.setExpressionButtonProvider(new ExprButtonProvider(true,property));
  }
  Expression expr=handle.getPropertyBindingExpression(propName);
  property.setData(ExpressionButtonUtil.EXPR_TYPE,expr == null || expr.getType() == null ? UIUtil.getDefaultScriptType() : (String)expr.getType());
  property.setText((expr == null || expr.getStringExpression() == null) ? ""String_Node_Str"" : expr.getStringExpression());
  exprButton.refresh();
}","private void createExpressionButton(Composite composite,final Text property,String propName,boolean isEncryptable){
  ExpressionButton exprButton=ExpressionButtonUtil.createExpressionButton(composite,property,new ExpressionProvider(handle),handle,true,SWT.PUSH);
  if (isEncryptable) {
    exprButton.setExpressionButtonProvider(new ExprButtonProvider(true,property));
  }
  Expression expr=handle.getPropertyBindingExpression(propName);
  property.setData(ExpressionButtonUtil.EXPR_TYPE,expr == null || expr.getType() == null ? UIUtil.getDefaultScriptType() : (String)expr.getType());
  property.setText((expr == null || expr.getStringExpression() == null) ? ""String_Node_Str"" : expr.getStringExpression());
  exprButton.refresh();
}",0.938255033557047
68177,"/** 
 * initial the property binding. If the property binding has not defined, the default binding will be the meta data of the property's value
 */
private void initPropertyBinding(){
  ds=(IDesignElementModel)getContainer().getModel();
  Iterator iterator=null;
  IElementDefn elementDefn=getElementDefn();
  if (elementDefn != null) {
    iterator=elementDefn.getProperties().iterator();
  }
  if (ds instanceof DataSetHandle && ((DataSetHandle)ds).getPropertyHandle(QUERYTEXT).isVisible()) {
    bindingName.add(QUERYTEXT);
    displayName.add(Messages.getString(""String_Node_Str""));
    bindingValue.add(((DataSetHandle)ds).getPropertyBinding(QUERYTEXT) == null ? ""String_Node_Str"" : ((DataSetHandle)ds).getPropertyBinding(QUERYTEXT));
  }
  if (iterator != null) {
    while (iterator.hasNext()) {
      IElementPropertyDefn propertyDefn=(IElementPropertyDefn)iterator.next();
      if (propertyDefn instanceof IPropertyDefn && propertyDefn.getValueType() == IPropertyDefn.ODA_PROPERTY) {
        String name=propertyDefn.getName();
        if (elementDefn != null && !elementDefn.isPropertyVisible(name))         continue;
        bindingName.add(name);
        displayName.add(propertyDefn.getDisplayName());
        if (ds instanceof DataSetHandle) {
          bindingValue.add(((DataSetHandle)ds).getPropertyBinding(name) == null ? ""String_Node_Str"" : ((DataSetHandle)ds).getPropertyBinding(name));
        }
 else         if (ds instanceof DataSourceHandle) {
          bindingValue.add(((DataSourceHandle)ds).getPropertyBinding(name) == null ? ""String_Node_Str"" : ((DataSourceHandle)ds).getPropertyBinding(name));
        }
 else {
          bindingValue.add(""String_Node_Str"");
        }
      }
    }
  }
}","/** 
 * initial the property binding. If the property binding has not defined, the default binding will be the meta data of the property's value
 */
private void initPropertyBinding(){
  ds=(IDesignElementModel)getContainer().getModel();
  Iterator iterator=null;
  IElementDefn elementDefn=getElementDefn();
  if (elementDefn != null) {
    iterator=elementDefn.getProperties().iterator();
  }
  if (ds instanceof DataSetHandle && ((DataSetHandle)ds).getPropertyHandle(QUERYTEXT).isVisible()) {
    propList.add(new String[]{QUERYTEXT,Messages.getString(""String_Node_Str"")});
    bindingValue.add(((DataSetHandle)ds).getPropertyBinding(QUERYTEXT) == null ? ""String_Node_Str"" : ((DataSetHandle)ds).getPropertyBinding(QUERYTEXT));
  }
  if (iterator != null) {
    while (iterator.hasNext()) {
      IElementPropertyDefn propertyDefn=(IElementPropertyDefn)iterator.next();
      if (propertyDefn instanceof IPropertyDefn && propertyDefn.getValueType() == IPropertyDefn.ODA_PROPERTY) {
        String name=propertyDefn.getName();
        if (elementDefn != null && !elementDefn.isPropertyVisible(name))         continue;
        propList.add(propertyDefn);
        if (ds instanceof DataSetHandle) {
          bindingValue.add(((DataSetHandle)ds).getPropertyBinding(name) == null ? ""String_Node_Str"" : ((DataSetHandle)ds).getPropertyBinding(name));
        }
 else         if (ds instanceof DataSourceHandle) {
          bindingValue.add(((DataSourceHandle)ds).getPropertyBinding(name) == null ? ""String_Node_Str"" : ((DataSourceHandle)ds).getPropertyBinding(name));
        }
 else {
          bindingValue.add(""String_Node_Str"");
        }
      }
    }
  }
}",0.950266429840142
68178,"/** 
 * the content
 */
public Control createContents(Composite parent){
  initPropertyBinding();
  int size=bindingName.size();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
  composite.setLayoutData(gridData);
  Label nameLabel;
  Text propertyText=null;
  for (int i=0; i < size; i++) {
    nameLabel=new Label(composite,SWT.NONE);
    nameLabel.setText((String)displayName.get(i) + Messages.getString(""String_Node_Str""));
    nameLabelList.add(nameLabel);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    if (((String)bindingName.get(i)).equals(QUERYTEXT)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
      data.heightHint=100;
    }
 else     if (ODAPASSWORD.equals((String)bindingName.get(i)) || PASSWORD.equals((String)bindingName.get(i))) {
      propertyText=new Text(composite,SWT.BORDER);
      if (ds instanceof DesignElementHandle) {
        Expression expr=((DesignElementHandle)ds).getPropertyBindingExpression((String)bindingName.get(i));
        if (expr != null && ExpressionType.CONSTANT.equals(expr.getType())) {
          Text dummy=new Text(composite,SWT.BORDER | SWT.PASSWORD);
          propertyText.setEchoChar(dummy.getEchoChar());
          dummy.dispose();
        }
      }
    }
 else     propertyText=new Text(composite,SWT.BORDER);
    propertyText.setLayoutData(data);
    propertyText.setText((String)bindingValue.get(i) == null ? ""String_Node_Str"" : (String)bindingValue.get(i));
    propertyTextList.add(propertyText);
    if (ds instanceof OdaDataSourceHandle) {
      handle=(OdaDataSourceHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)ds;
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     if (ds instanceof OdaDataSetHandle) {
      handle=(OdaDataSetHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)(((OdaDataSetHandle)ds).getDataSource());
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    createExpressionButton(composite,propertyText,(String)bindingName.get(i));
  }
  if (size <= 0)   setEmptyPropertyMessages(composite);
  return composite;
}","/** 
 * the content
 */
public Control createContents(Composite parent){
  initPropertyBinding();
  int size=propList.size();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
  composite.setLayoutData(gridData);
  Label nameLabel;
  Text propertyText=null;
  for (int i=0; i < size; i++) {
    nameLabel=new Label(composite,SWT.NONE);
    String bindingName=""String_Node_Str"";
    boolean isEncryptable=false;
    if (propList.get(i) instanceof String[]) {
      bindingName=((String[])propList.get(i))[0];
      nameLabel.setText(((String[])propList.get(i))[1] + Messages.getString(""String_Node_Str""));
    }
 else     if (propList.get(i) instanceof IPropertyDefn) {
      IPropertyDefn propDefn=(IPropertyDefn)propList.get(i);
      bindingName=propDefn.getName();
      nameLabel.setText(propDefn.getDisplayName() + Messages.getString(""String_Node_Str""));
      isEncryptable=propDefn.isEncryptable();
    }
    nameLabelList.add(nameLabel);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    if (QUERYTEXT.equals(bindingName)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
      data.heightHint=100;
    }
 else     if (isEncryptable) {
      propertyText=new Text(composite,SWT.BORDER);
      if (ds instanceof DesignElementHandle) {
        Expression expr=((DesignElementHandle)ds).getPropertyBindingExpression(bindingName);
        if (expr != null && ExpressionType.CONSTANT.equals(expr.getType())) {
          Text dummy=new Text(composite,SWT.BORDER | SWT.PASSWORD);
          propertyText.setEchoChar(dummy.getEchoChar());
          dummy.dispose();
        }
      }
    }
 else     propertyText=new Text(composite,SWT.BORDER);
    propertyText.setLayoutData(data);
    propertyText.setText((String)bindingValue.get(i) == null ? ""String_Node_Str"" : (String)bindingValue.get(i));
    propertyTextList.add(propertyText);
    if (ds instanceof OdaDataSourceHandle) {
      handle=(OdaDataSourceHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)ds;
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     if (ds instanceof OdaDataSetHandle) {
      handle=(OdaDataSetHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)(((OdaDataSetHandle)ds).getDataSource());
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    createExpressionButton(composite,propertyText,bindingName,isEncryptable);
  }
  if (size <= 0)   setEmptyPropertyMessages(composite);
  return composite;
}",0.8571959145775302
68179,"public boolean needRefreshed(NotificationEvent event){
  if (event instanceof PropertyEvent) {
    String propertyName=((PropertyEvent)event).getPropertyName();
    if (ReportItemHandle.BOUND_DATA_COLUMNS_PROP.equals(propertyName)) {
      getDataSetColumns(contentInput.get(0));
    }
    if (ListingHandle.FILTER_PROP.equals(propertyName)) {
      return true;
    }
    if (ReportItemHandle.PARAM_BINDINGS_PROP.equals(propertyName)) {
      return true;
    }
  }
  return false;
}","public boolean needRefreshed(NotificationEvent event){
  if (event instanceof PropertyEvent) {
    String propertyName=((PropertyEvent)event).getPropertyName();
    if (ReportItemHandle.BOUND_DATA_COLUMNS_PROP.equals(propertyName)) {
      getDataSetColumns(contentInput.get(0));
    }
    return true;
  }
  return false;
}",0.7747524752475248
68180,"public boolean needRefreshed(NotificationEvent event){
  if (event instanceof PropertyEvent) {
    String propertyName=((PropertyEvent)event).getPropertyName();
    if (ListingHandle.SORT_PROP.equals(propertyName))     return true;
  }
  return false;
}","public boolean needRefreshed(NotificationEvent event){
  if (event instanceof PropertyEvent) {
    return true;
  }
  return false;
}",0.689119170984456
68181,"private void writeText(int type,Object value,StyleEntry style){
  String txt=ExcelUtil.format(value,type);
  writer.openTag(""String_Node_Str"");
  if (type == SheetData.NUMBER) {
    if (ExcelUtil.isNaN(value) || ExcelUtil.isBigNumber(value) || ExcelUtil.isInfinity(value)) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (type == SheetData.DATE) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (style != null) {
    String textTransform=(String)style.getProperty(StyleConstant.TEXT_TRANSFORM);
    if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(textTransform)) {
      txt=capitalize(txt);
    }
 else     if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(textTransform)) {
      txt=txt.toUpperCase();
    }
 else     if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(textTransform)) {
      txt=txt.toLowerCase();
    }
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}","private void writeText(int type,Object value,StyleEntry style){
  String txt=ExcelUtil.format(value,type);
  writer.openTag(""String_Node_Str"");
  if (type == SheetData.NUMBER) {
    if (ExcelUtil.isNaN(value) || ExcelUtil.isBigNumber(value) || ExcelUtil.isInfinity(value)) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (type == SheetData.DATE) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (style != null) {
    String textTransform=(String)style.getProperty(StyleConstant.TEXT_TRANSFORM);
    if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(textTransform)) {
      txt=capitalize(txt);
    }
 else     if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(textTransform)) {
      txt=txt.toUpperCase();
    }
 else     if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(textTransform)) {
      txt=txt.toLowerCase();
    }
  }
  writer.text(ExcelUtil.truncateCellText(txt));
  writer.closeTag(""String_Node_Str"");
}",0.9848078641644326
68182,"public Word getNextWord(){
  start=end;
  if (start == text.length())   return null;
  keepWithNext();
  keepWithLast();
  return new Word(text,start,end);
}","public Word getNextWord(){
  start=end;
  end=breakIterator.next();
  if (end != BreakIterator.DONE) {
    return new Word(text,start,end);
  }
  return null;
}",0.6182965299684543
68183,"public WordRecognizerWrapper(String text,Locale locale){
  this.text=text;
  wr=new ICUWordRecognizer(text,locale);
}","public WordRecognizerWrapper(String text,Locale locale){
  this.text=text;
  breakIterator=BreakIterator.getLineInstance(locale);
  breakIterator.setText(text);
}",0.6738351254480287
68184,"public boolean hasWord(){
  return end != text.length();
}","public boolean hasWord(){
  return end != BreakIterator.DONE && end < text.length();
}",0.8055555555555556
68185,"public void startList(IListContent list){
  adjustInline();
  styles.push(list.getComputedStyle());
  writeBookmark(list);
  Object listToc=list.getTOC();
  if (listToc != null) {
    tableTocs.add(new TocInfo(listToc.toString(),tocLevel));
  }
  increaseTOCLevel(list);
  if (context.isLastTable()) {
    wordWriter.insertHiddenParagraph();
  }
  wordWriter.startTable(list.getComputedStyle(),context.getCurrentWidth());
}","public void startList(IListContent list){
  adjustInline();
  styles.push(list.getComputedStyle());
  writeBookmark(list);
  Object listToc=list.getTOC();
  if (listToc != null) {
    tableTocs.add(new TocInfo(listToc.toString(),tocLevel));
  }
  increaseTOCLevel(list);
  if (context.isLastTable()) {
    wordWriter.insertHiddenParagraph();
  }
  int width=WordUtil.convertTo(list.getWidth(),context.getCurrentWidth(),reportDpi);
  width=Math.min(width,context.getCurrentWidth());
  wordWriter.startTable(list.getComputedStyle(),width);
}",0.8191268191268192
68186,"private IDialogHelper createHyperLinkPart(Composite parent){
  Object[] helperProviders=ElementAdapterManager.getAdapters(input,IDialogHelperProvider.class);
  if (helperProviders != null) {
    for (int i=0; i < helperProviders.length; i++) {
      IDialogHelperProvider helperProvider=(IDialogHelperProvider)helperProviders[i];
      if (helperProvider != null) {
        final IDialogHelper hyperLinkHelper=helperProvider.createHelper(this,BuilderConstants.HYPERLINK_HELPER_KEY);
        if (hyperLinkHelper != null) {
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_LABEL,Messages.getString(""String_Node_Str""));
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_BUTTON_TEXT,Messages.getString(""String_Node_Str""));
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_REPORT_ITEM_HANDLE,input);
          hyperLinkHelper.createContent(parent);
          hyperLinkHelper.addListener(SWT.Modify,new Listener(){
            public void handleEvent(            Event event){
              hyperLinkHelper.update(false);
            }
          }
);
          hyperLinkHelper.update(true);
          return hyperLinkHelper;
        }
      }
    }
  }
  return null;
}","private IDialogHelper createHyperLinkPart(Composite parent){
  Object[] helperProviders=ElementAdapterManager.getAdapters(input,IDialogHelperProvider.class);
  if (helperProviders != null) {
    for (int i=0; i < helperProviders.length; i++) {
      IDialogHelperProvider helperProvider=(IDialogHelperProvider)helperProviders[i];
      if (helperProvider != null) {
        final IDialogHelper hyperLinkHelper=helperProvider.createHelper(this,BuilderConstants.HYPERLINK_HELPER_KEY);
        if (hyperLinkHelper != null) {
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_LABEL,Messages.getString(""String_Node_Str""));
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_BUTTON_TEXT,Messages.getString(""String_Node_Str""));
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_REPORT_ITEM_HANDLE,input);
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_REPORT_ITEM_PROVIDER,new LinkToCubeExpressionProvider(input));
          hyperLinkHelper.createContent(parent);
          hyperLinkHelper.addListener(SWT.Modify,new Listener(){
            public void handleEvent(            Event event){
              hyperLinkHelper.update(false);
            }
          }
);
          hyperLinkHelper.update(true);
          return hyperLinkHelper;
        }
      }
    }
  }
  return null;
}",0.9497645211930926
68187,"private void initDialog(){
  nameText.setText(hierarchy.getContainer().getName());
  if (!isNew) {
    if (((DimensionHandle)hierarchy.getContainer()).isTimeType()) {
      dateButton.setSelection(true);
      handleButtonSelection(dateButton);
    }
 else {
      regularButton.setSelection(true);
      handleButtonSelection(regularButton);
    }
  }
 else {
    dateButton.setSelection(true);
    handleButtonSelection(dateButton);
  }
  if (!isNew) {
    WidgetUtil.setExcludeGridData(regularButton,true);
    WidgetUtil.setExcludeGridData(dateButton,true);
  }
  if (!isNew && !((DimensionHandle)hierarchy.getContainer()).isTimeType())   levelViewer.getTree().setVisible(false);
  levelViewer.setInput(getDateTypeNames(getLevelTypesByDateType()));
  levelViewer.expandAll();
  TreeItem topNode=levelViewer.getTree().getItem(0);
  do {
    if (levelList.contains(topNode.getData()))     topNode.setChecked(true);
    topNode=topNode.getItem(0);
  }
 while (topNode.getItemCount() > 0);
  if (levelList.contains(topNode.getData()))   topNode.setChecked(true);
  checkOKButtonStatus();
}","private void initDialog(){
  nameText.setText(hierarchy.getContainer().getName());
  if (!isNew) {
    if (((DimensionHandle)hierarchy.getContainer()).isTimeType()) {
      dateButton.setSelection(true);
      handleButtonSelection(dateButton);
    }
 else {
      regularButton.setSelection(true);
      handleButtonSelection(regularButton);
    }
  }
 else {
    dateButton.setSelection(true);
    handleButtonSelection(dateButton);
  }
  if (!isNew) {
    WidgetUtil.setExcludeGridData(regularButton,true);
    WidgetUtil.setExcludeGridData(dateButton,true);
  }
  if (!isNew && !((DimensionHandle)hierarchy.getContainer()).isTimeType())   levelViewer.getTree().setVisible(false);
  levelViewer.setInput(getDateTypeNames(getLevelTypesByDateType()));
  levelViewer.expandAll();
  if (levelViewer.getTree().getItemCount() > 0) {
    TreeItem topNode=levelViewer.getTree().getItem(0);
    do {
      if (levelList.contains(topNode.getData()))       topNode.setChecked(true);
      topNode=topNode.getItem(0);
    }
 while (topNode.getItemCount() > 0);
    if (levelList.contains(topNode.getData()))     topNode.setChecked(true);
  }
  checkOKButtonStatus();
}",0.8202846975088968
68188,"public Object[] getElements(Object inputElement){
  return new Object[]{getDateTypeNames(getLevelTypesByDateType()).get(0)};
}","public Object[] getElements(Object inputElement){
  if (getLevelTypesByDateType() != null && getLevelTypesByDateType().length > 0)   return new Object[]{getDateTypeNames(getLevelTypesByDateType()).get(0)};
  return new Object[0];
}",0.7058823529411765
68189,"private IDialogHelper createHyperLinkPart(Composite parent){
  Object[] helperProviders=ElementAdapterManager.getAdapters(input,IDialogHelperProvider.class);
  if (helperProviders != null) {
    for (int i=0; i < helperProviders.length; i++) {
      IDialogHelperProvider helperProvider=(IDialogHelperProvider)helperProviders[i];
      if (helperProvider != null) {
        final IDialogHelper hyperLinkHelper=helperProvider.createHelper(this,BuilderConstants.HYPERLINK_HELPER_KEY);
        if (hyperLinkHelper != null) {
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_LABEL,Messages.getString(""String_Node_Str""));
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_BUTTON_TEXT,Messages.getString(""String_Node_Str""));
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_REPORT_ITEM_HANDLE,input);
          hyperLinkHelper.createContent(parent);
          hyperLinkHelper.addListener(SWT.Modify,new Listener(){
            public void handleEvent(            Event event){
              hyperLinkHelper.update(false);
            }
          }
);
          hyperLinkHelper.update(true);
          return hyperLinkHelper;
        }
      }
    }
  }
  return null;
}","private IDialogHelper createHyperLinkPart(Composite parent){
  Object[] helperProviders=ElementAdapterManager.getAdapters(input,IDialogHelperProvider.class);
  if (helperProviders != null) {
    for (int i=0; i < helperProviders.length; i++) {
      IDialogHelperProvider helperProvider=(IDialogHelperProvider)helperProviders[i];
      if (helperProvider != null) {
        final IDialogHelper hyperLinkHelper=helperProvider.createHelper(this,BuilderConstants.HYPERLINK_HELPER_KEY);
        if (hyperLinkHelper != null) {
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_LABEL,Messages.getString(""String_Node_Str""));
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_BUTTON_TEXT,Messages.getString(""String_Node_Str""));
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_REPORT_ITEM_HANDLE,input);
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_REPORT_ITEM_PROVIDER,new LinkToCubeExpressionProvider(input));
          hyperLinkHelper.createContent(parent);
          hyperLinkHelper.addListener(SWT.Modify,new Listener(){
            public void handleEvent(            Event event){
              hyperLinkHelper.update(false);
            }
          }
);
          hyperLinkHelper.update(true);
          return hyperLinkHelper;
        }
      }
    }
  }
  return null;
}",0.9497645211930926
68190,"private IDialogHelper createHyperLinkPart(Composite parent){
  Object[] helperProviders=ElementAdapterManager.getAdapters(input,IDialogHelperProvider.class);
  if (helperProviders != null) {
    for (int i=0; i < helperProviders.length; i++) {
      IDialogHelperProvider helperProvider=(IDialogHelperProvider)helperProviders[i];
      if (helperProvider != null) {
        final IDialogHelper hyperLinkHelper=helperProvider.createHelper(this,BuilderConstants.HYPERLINK_HELPER_KEY);
        if (hyperLinkHelper != null) {
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_LABEL,Messages.getString(""String_Node_Str""));
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_BUTTON_TEXT,Messages.getString(""String_Node_Str""));
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_REPORT_ITEM_HANDLE,input);
          hyperLinkHelper.createContent(parent);
          hyperLinkHelper.addListener(SWT.Modify,new Listener(){
            public void handleEvent(            Event event){
              hyperLinkHelper.update(false);
            }
          }
);
          hyperLinkHelper.update(true);
          return hyperLinkHelper;
        }
      }
    }
  }
  return null;
}","private IDialogHelper createHyperLinkPart(Composite parent){
  Object[] helperProviders=ElementAdapterManager.getAdapters(input,IDialogHelperProvider.class);
  if (helperProviders != null) {
    for (int i=0; i < helperProviders.length; i++) {
      IDialogHelperProvider helperProvider=(IDialogHelperProvider)helperProviders[i];
      if (helperProvider != null) {
        final IDialogHelper hyperLinkHelper=helperProvider.createHelper(this,BuilderConstants.HYPERLINK_HELPER_KEY);
        if (hyperLinkHelper != null) {
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_LABEL,Messages.getString(""String_Node_Str""));
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_BUTTON_TEXT,Messages.getString(""String_Node_Str""));
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_REPORT_ITEM_HANDLE,input);
          hyperLinkHelper.setProperty(BuilderConstants.HYPERLINK_REPORT_ITEM_PROVIDER,new LinkToCubeExpressionProvider(input));
          hyperLinkHelper.createContent(parent);
          hyperLinkHelper.addListener(SWT.Modify,new Listener(){
            public void handleEvent(            Event event){
              hyperLinkHelper.update(false);
            }
          }
);
          hyperLinkHelper.update(true);
          return hyperLinkHelper;
        }
      }
    }
  }
  return null;
}",0.9497645211930926
68191,"public boolean isValidExpression(String expression){
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) || context.getDataServiceProvider().checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS)) {
    if (cmbDefinition == null)     return false;
    int index=cmbDefinition.indexOf(expression);
    if (index < 0) {
      return false;
    }
    return true;
  }
  return true;
}","public boolean isValidExpression(String expression){
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) || context.getDataServiceProvider().checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS)) {
    if (cmbDefinition == null)     return false;
    int index=cmbDefinition.indexOf(expression);
    if (index < 0) {
      return false;
    }
    return true;
  }
  if (cmbDefinition != null && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_CUBE)) {
    String[] items=cmbDefinition.getItems();
    for (    String s : items) {
      if (s.indexOf(expression) > 0) {
        return true;
      }
    }
    return false;
  }
  return true;
}",0.7218721872187218
68192,"public void dragEnter(DropTargetEvent event){
  event.detail=DND.DROP_COPY;
}","public void dragEnter(DropTargetEvent event){
  event.detail=DND.DROP_COPY;
  Object object=null;
  Transfer[] transferAgents=((DropTarget)event.widget).getTransfer();
  for (int i=0; i < transferAgents.length; i++) {
    Transfer transfer=transferAgents[i];
    if (transfer != null && transfer instanceof SimpleTextTransfer) {
      object=SimpleTextTransfer.getInstance().nativeToJava(event.currentDataType);
      break;
    }
  }
  if (object != null && !DataDefinitionTextManager.getInstance().isValidExpression(txtDataDefn,object.toString())) {
    event.detail=DND.DROP_NONE;
  }
}",0.2312312312312312
68193,"public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  clearTempFile();
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}","public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  clearTempFile();
  if (this.getContext().getDocWriter() != null) {
    RAOutputStream outputStream;
    try {
      if (this.getContext().getDocWriter().exists(DataEngineContext.QUERY_STARTING_ID)) {
        outputStream=this.getContext().getDocWriter().getOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
 else {
        outputStream=this.getContext().getDocWriter().createOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
      outputStream.writeInt(this.getSession().getQueryResultIDUtil().getCurrentQueryId());
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}",0.7751524390243902
68194,"/** 
 * Constructor.
 * @param engine
 * @throws BirtException 
 */
public DataEngineSession(DataEngineImpl engine) throws BirtException {
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  this.stopSign=new StopSign();
  IDataScriptEngine scriptEngine=(IDataScriptEngine)engine.getContext().getScriptContext().getScriptEngine(IDataScriptEngine.ENGINE_NAME);
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(scriptEngine.getJSContext(engine.getContext().getScriptContext()));
  }
  new CoreJavaScriptInitializer().initialize(scriptEngine.getJSContext(engine.getContext().getScriptContext()),scope);
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ ""String_Node_Str""+ getCount()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  this.cancelManager=new CancelManager();
  this.currentTimer=new Timer();
  this.currentTimer.schedule(cancelManager,1000,1000);
  classLoaderHolder.set(engine.getContext().getClassLoader());
  engine.addShutdownListener(new IShutdownListener(){
    public void dataEngineShutdown(){
      classLoaderHolder.set(null);
      houseKeepCancelManager();
    }
  }
);
  engine.addShutdownListener(new ReportDocumentShutdownListener(this));
  this.cancelManager.register(new StopSignCancellable(stopSign));
  this.queryResultIDUtil=new QueryResultIDUtil();
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}","/** 
 * Constructor.
 * @param engine
 * @throws BirtException 
 */
public DataEngineSession(DataEngineImpl engine) throws BirtException {
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  this.stopSign=new StopSign();
  IDataScriptEngine scriptEngine=(IDataScriptEngine)engine.getContext().getScriptContext().getScriptEngine(IDataScriptEngine.ENGINE_NAME);
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(scriptEngine.getJSContext(engine.getContext().getScriptContext()));
  }
  new CoreJavaScriptInitializer().initialize(scriptEngine.getJSContext(engine.getContext().getScriptContext()),scope);
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ ""String_Node_Str""+ getCount()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  this.cancelManager=new CancelManager();
  this.currentTimer=new Timer();
  this.currentTimer.schedule(cancelManager,1000,1000);
  classLoaderHolder.set(engine.getContext().getClassLoader());
  engine.addShutdownListener(new IShutdownListener(){
    public void dataEngineShutdown(){
      classLoaderHolder.set(null);
      houseKeepCancelManager();
    }
  }
);
  engine.addShutdownListener(new ReportDocumentShutdownListener(this));
  this.cancelManager.register(new StopSignCancellable(stopSign));
  int currentQueryID=0;
  if (engine.getContext().getDocReader() != null) {
    try {
      if (engine.getContext().getDocReader().exists(DataEngineContext.QUERY_STARTING_ID)) {
        RAInputStream stream=engine.getContext().getDocReader().getInputStream(DataEngineContext.QUERY_STARTING_ID);
        currentQueryID=stream.readInt();
        stream.close();
      }
    }
 catch (    IOException e) {
    }
  }
  this.queryResultIDUtil=new QueryResultIDUtil(currentQueryID);
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}",0.8817502076986984
68195,"/** 
 * No instance
 */
public QueryResultIDUtil(){
}","public QueryResultIDUtil(int startingID){
  this.currentId=startingID;
}",0.464
68196,"public void endTable(ITableContent table){
  engine.endTable();
}","public void endTable(ITableContent table){
  engine.endTable(table);
}",0.9629629629629628
68197,"public void endList(IListContent list){
  engine.endTable();
}","public void endList(IListContent list){
  engine.endTable(list);
}",0.96875
68198,"public void endTable(){
  if (!tables.isEmpty()) {
    tables.pop();
    endContainer();
  }
}","public void endTable(IContent content){
  if (!tables.isEmpty()) {
    tables.pop();
    endContainer();
  }
}",0.9215686274509804
68199,"public void launch(String filePath){
  init();
  Chart chart=null;
  Serializer serializer=null;
  final File chartFile=new File(filePath);
  InputStream is=null;
  try {
    serializer=SerializerImpl.instance();
    if (chartFile.exists()) {
      is=new FileInputStream(chartFile);
      chart=serializer.read(is);
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
  }
  final ChartWizard chartWizard=new ChartWizard();
  IDataServiceProvider dataProvider=new DefaultDataServiceProviderImpl();
  final ChartWizardContext context=new ChartWizardContext(chart,new SimpleUIServiceProviderImpl(),dataProvider,new SampleStandardDataSheet(dataProvider));
  context.setEnabled(SUBTASK_TITLE,false);
  context.setEnabled(SUBTASK_LEGEND + BUTTON_LAYOUT,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_LABEL,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_CURVE,false);
  context.addPredefinedQuery(QUERY_CATEGORY,new String[]{""String_Node_Str"",""String_Node_Str""});
  context.setRtL(ChartUtil.isRightToLeftLocale(ULocale.getDefault()));
  final Object[] applyData=new Object[1];
  chartWizard.addCustomButton(new ApplyButtonHandler(chartWizard){
    public void run(){
      super.run();
      applyData[0]=context.getModel().copyInstance();
    }
  }
);
  ChartWizardContext contextResult=(ChartWizardContext)chartWizard.open(context);
  OutputStream os=null;
  try {
    os=new FileOutputStream(chartFile);
    if (contextResult != null) {
      serializer.write(contextResult.getModel(),os);
    }
 else     if (applyData[0] != null) {
      serializer.write((Chart)applyData[0],os);
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","public void launch(String filePath){
  init();
  Chart chart=null;
  Serializer serializer=null;
  final File chartFile=new File(filePath);
  InputStream is=null;
  try {
    serializer=SerializerImpl.instance();
    if (chartFile.exists()) {
      is=new FileInputStream(chartFile);
      chart=serializer.read(is);
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
  }
  final ChartWizard chartWizard=new ChartWizard();
  IDataServiceProvider dataProvider=new DefaultDataServiceProviderImpl();
  final ChartWizardContext context=new ChartWizardContext(chart,new SimpleUIServiceProviderImpl(),dataProvider,new SampleStandardDataSheet(dataProvider));
  context.setEnabled(SUBTASK_TITLE,false);
  context.setEnabled(SUBTASK_LEGEND + BUTTON_LAYOUT,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_LABEL,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_CURVE,false);
  context.addPredefinedQuery(QUERY_CATEGORY,new String[]{""String_Node_Str"",""String_Node_Str""});
  context.setRtL(ChartUtil.isRightToLeftLocale(ULocale.getDefault()));
  final Object[] applyData=new Object[1];
  chartWizard.addCustomButton(new ApplyButtonHandler(chartWizard){
    public void run(){
      super.run();
      applyData[0]=context.getModel().copyInstance();
    }
  }
);
  ChartLivePreviewThread livePreviewThread=new ChartLivePreviewThread(dataProvider);
  livePreviewThread.start();
  context.setLivePreviewThread(livePreviewThread);
  ChartWizardContext contextResult=(ChartWizardContext)chartWizard.open(context);
  OutputStream os=null;
  try {
    os=new FileOutputStream(chartFile);
    if (contextResult != null) {
      serializer.write(contextResult.getModel(),os);
    }
 else     if (applyData[0] != null) {
      serializer.write((Chart)applyData[0],os);
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.94971228421316
68200,"public Object invoke(Command command,Object... inData) throws ChartException {
  return null;
}","public Object invoke(Command command,Object... inData) throws ChartException {
  Object outData=null;
switch (command) {
case EXPRESS_BUTTON_CREATE:
    final Control control=(Control)inData[1];
  IExpressionButton ceb=new IExpressionButton(){
    public void setExpression(    String expr){
      ChartUIUtil.setText(control,expr);
    }
    public void setEnabled(    boolean bEnabled){
      control.setEnabled(bEnabled);
    }
    public boolean isEnabled(){
      return control.isEnabled();
    }
    public String getExpression(){
      return ChartUIUtil.getText(control);
    }
    public String getDisplayExpression(){
      return getExpression();
    }
    public void addListener(    Listener listener){
    }
    public void setAccessor(    EAttributeAccessor<String> accessor){
    }
    public String getExpressionType(){
      return null;
    }
    public boolean isCube(){
      return false;
    }
    public void setBindingName(    String bindingName,    boolean bNotifyEvents){
    }
    public void setExpression(    String expr,    boolean bNotifyEvents){
    }
    public void setAssitField(    IAssistField assistField){
    }
    public void setPredefinedQuery(    Object[] predefinedQuery){
    }
  }
;
outData=ceb;
break;
}
return outData;
}",0.1274725274725274
68201,"public List<String> getAllValueDefinitions(){
  return null;
}","public List<String> getAllValueDefinitions(){
  return new ArrayList<String>(2);
}",0.8194444444444444
68202,"protected void writeText(int type,String txt,IContent content,InlineFlag inlineFlag,IStyle computedStyle,IStyle inlineStyle){
  HyperlinkInfo hyper=getHyperlink(content);
  int paragraphWidth=(int)WordUtil.twipToPt(context.getCurrentWidth());
  if (content instanceof TextContent) {
    TextFlag textFlag=TextFlag.START;
    String fontFamily=null;
    if (""String_Node_Str"".equals(txt) || txt == null || WordUtil.isField(content)) {
      wordWriter.writeContent(type,txt,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth);
    }
 else {
      FontSplitter fontSplitter=getFontSplitter(content);
      while (fontSplitter.hasMore()) {
        Chunk ch=fontSplitter.getNext();
        int offset=ch.getOffset();
        int length=ch.getLength();
        fontFamily=getFontFamily(computedStyle,ch);
        wordWriter.writeContent(type,txt.substring(offset,offset + length),computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth);
        textFlag=fontSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
      }
    }
    if (inlineFlag == InlineFlag.BLOCK) {
      wordWriter.writeContent(type,null,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,TextFlag.END,paragraphWidth);
    }
  }
 else {
    wordWriter.writeContent(type,txt,computedStyle,inlineStyle,computedStyle.getFontFamily(),hyper,inlineFlag,TextFlag.WHOLE,paragraphWidth);
  }
}","protected void writeText(int type,String txt,IContent content,InlineFlag inlineFlag,IStyle computedStyle,IStyle inlineStyle){
  HyperlinkInfo hyper=getHyperlink(content);
  int paragraphWidth=(int)WordUtil.twipToPt(context.getCurrentWidth());
  if (content instanceof TextContent) {
    TextFlag textFlag=TextFlag.START;
    String fontFamily=null;
    if (""String_Node_Str"".equals(txt) || txt == null || WordUtil.isField(content)) {
      wordWriter.writeContent(type,txt,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth);
    }
 else {
      FontSplitter fontSplitter=getFontSplitter(content);
      while (fontSplitter.hasMore()) {
        Chunk ch=fontSplitter.getNext();
        int offset=ch.getOffset();
        int length=ch.getLength();
        fontFamily=getFontFamily(computedStyle,ch);
        String string=null;
        if (ch == Chunk.HARD_LINE_BREAK) {
          string=ch.getText();
        }
 else {
          string=txt.substring(offset,offset + length);
        }
        wordWriter.writeContent(type,string,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth);
        textFlag=fontSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
      }
    }
    if (inlineFlag == InlineFlag.BLOCK) {
      wordWriter.writeContent(type,null,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,TextFlag.END,paragraphWidth);
    }
  }
 else {
    wordWriter.writeContent(type,txt,computedStyle,inlineStyle,computedStyle.getFontFamily(),hyper,inlineFlag,TextFlag.WHOLE,paragraphWidth);
  }
}",0.9286438958403788
68203,"static String getTypeName(String typeDisplayName){
  String name=dataTypes[0].getName();
  for (int i=0; i < dataTypes.length; i++) {
    if (dataTypes[i].getDisplayName().equals(typeDisplayName))     return dataTypes[i].getName();
  }
  return name;
}","public static String getTypeName(String typeDisplayName){
  String name=dataTypes[0].getName();
  for (int i=0; i < dataTypes.length; i++) {
    if (dataTypes[i].getDisplayName().equals(typeDisplayName))     return dataTypes[i].getName();
  }
  return name;
}",0.9863013698630136
68204,"static String getTypeDisplayName(String typeName){
  for (int i=0; i < dataTypes.length; i++) {
    if (dataTypes[i].getName().equals(typeName))     return dataTypes[i].getDisplayName();
  }
  return typeName;
}","public static String getTypeDisplayName(String typeName){
  for (int i=0; i < dataTypes.length; i++) {
    if (dataTypes[i].getName().equals(typeName))     return dataTypes[i].getDisplayName();
  }
  return typeName;
}",0.9836829836829836
68205,"public void endListBand(IListBandContent listBand){
  adjustInline();
  context.endCell();
  wordWriter.endTableCell(true);
  wordWriter.endTableRow();
}","public void endListBand(IListBandContent listBand){
  adjustInline();
  wordWriter.endTableCell(context.needEmptyP());
  context.endCell();
  wordWriter.endTableRow();
}",0.7453416149068323
68206,"public static String parse(Object txt,String dateTime,ULocale locale){
  if (dateTime == null) {
    DateFormatter format=new DateFormatter(locale);
    if (txt instanceof java.sql.Date) {
      format.applyPattern(DateFormatter.DATE_UNFORMATTED);
    }
 else     if (txt instanceof java.sql.Time) {
      format.applyPattern(DateFormatter.TIME_UNFORMATTED);
    }
 else {
      format.applyPattern(DateFormatter.DATETIME_UNFORMATTED);
    }
    dateTime=format.getLocalizedFormatCode();
  }
  if (dateTime.indexOf(""String_Node_Str"") != -1 || dateTime.indexOf(""String_Node_Str"") != -1) {
    DateFormatter dateFormatter=new DateFormatter(dateTime,locale);
    dateTime=dateFormatter.getLocalizedFormatCode();
  }
  StringBuffer buffer=new StringBuffer();
  boolean inQuto=false;
  for (int count=0; count < dateTime.length(); count++) {
    char tempChar=dateTime.charAt(count);
    if (inQuto) {
      if (tempChar == '\'' && nextIsQuto(dateTime,count)) {
        buffer.append(tempChar);
        count++;
      }
 else {
        if (tempChar == '\'') {
          inQuto=false;
        }
 else {
          if (specialStr.indexOf(tempChar) != -1) {
            buffer.append(""String_Node_Str"" + tempChar);
          }
 else {
            buffer.append(tempChar);
          }
        }
      }
    }
 else {
      if (tempChar == '\'') {
        if (nextIsQuto(dateTime,count)) {
          buffer.append(tempChar);
          count++;
        }
 else {
          inQuto=true;
        }
      }
 else {
        if (tempChar == 'a') {
          buffer.append(""String_Node_Str"");
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          buffer.append(""String_Node_Str"");
          continue;
        }
        buffer.append(tempChar);
      }
    }
  }
  return buffer.toString();
}","public static String parse(Object txt,String dateTime,ULocale locale){
  if (dateTime == null) {
    DateFormatter format=new DateFormatter(locale);
    if (txt instanceof java.sql.Date) {
      format.applyPattern(DateFormatter.DATE_UNFORMATTED);
    }
 else     if (txt instanceof java.sql.Time) {
      format.applyPattern(DateFormatter.TIME_UNFORMATTED);
    }
 else {
      format.applyPattern(DateFormatter.DATETIME_UNFORMATTED);
    }
    dateTime=format.getLocalizedFormatCode();
    if (dateTime.indexOf('y') == dateTime.lastIndexOf('y')) {
      dateTime=dateTime.replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (dateTime.indexOf(""String_Node_Str"") != -1 || dateTime.indexOf(""String_Node_Str"") != -1) {
    DateFormatter dateFormatter=new DateFormatter(dateTime,locale);
    dateTime=dateFormatter.getLocalizedFormatCode();
  }
  StringBuffer buffer=new StringBuffer();
  boolean inQuto=false;
  for (int count=0; count < dateTime.length(); count++) {
    char tempChar=dateTime.charAt(count);
    if (inQuto) {
      if (tempChar == '\'' && nextIsQuto(dateTime,count)) {
        buffer.append(tempChar);
        count++;
      }
 else {
        if (tempChar == '\'') {
          inQuto=false;
        }
 else {
          if (specialStr.indexOf(tempChar) != -1) {
            buffer.append(""String_Node_Str"" + tempChar);
          }
 else {
            buffer.append(tempChar);
          }
        }
      }
    }
 else {
      if (tempChar == '\'') {
        if (nextIsQuto(dateTime,count)) {
          buffer.append(tempChar);
          count++;
        }
 else {
          inQuto=true;
        }
      }
 else {
        if (tempChar == 'a') {
          buffer.append(""String_Node_Str"");
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          buffer.append(""String_Node_Str"");
          continue;
        }
        buffer.append(tempChar);
      }
    }
  }
  return buffer.toString();
}",0.9650101419878296
68207,"public static int[] resizeTableColumn(int tableWidth,int[] tblColumns,int count,int totalAssigned){
  int remainWidth=tableWidth - totalAssigned;
  int average=0;
  if (remainWidth > 0) {
    if (count > 0) {
      average=remainWidth / count;
      for (int i=0; i < tblColumns.length; i++) {
        if (tblColumns[i] == -1) {
          tblColumns[i]=average;
        }
      }
    }
 else {
      average=remainWidth / tblColumns.length;
      for (int i=0; i < tblColumns.length; i++) {
        tblColumns[i]+=average;
      }
    }
  }
 else   if (remainWidth <= 0 && count > 0) {
    for (int i=0; i < tblColumns.length; i++) {
      if (tblColumns[i] == -1) {
        tblColumns[i]=0;
      }
    }
  }
  return tblColumns;
}","public static int[] resizeTableColumn(int tableWidth,int[] tblColumns,int count,int totalAssigned){
  int remainWidth=tableWidth - totalAssigned;
  int average=0;
  if (remainWidth > 0) {
    if (count > 0) {
      average=remainWidth / count;
      for (int i=0; i < tblColumns.length; i++) {
        if (tblColumns[i] == -1) {
          tblColumns[i]=average;
        }
      }
    }
 else     if (tblColumns.length > 0) {
      average=remainWidth / tblColumns.length;
      for (int i=0; i < tblColumns.length; i++) {
        tblColumns[i]+=average;
      }
    }
  }
 else   if (remainWidth <= 0 && count > 0) {
    for (int i=0; i < tblColumns.length; i++) {
      if (tblColumns[i] == -1) {
        tblColumns[i]=0;
      }
    }
  }
  return tblColumns;
}",0.9792642140468228
68208,"/** 
 * Create parameter page control, if the datasetHandle is ODA, add the ""linked with report parameter"" cell.
 * @param parent
 * @return
 */
protected Control createParameterPageControl(Composite parent){
  DataSetHandle dataSetHandle=(DataSetHandle)getContainer().getModel();
  isOdaDataSetHandle=ParameterPageUtil.isOdaDataSetHandle(dataSetHandle);
  isJointOrDerivedDataSetHandle=ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle);
  viewer=new PropertyHandleTableViewer(parent,true,true,true,!isJointOrDerivedDataSetHandle);
  createTableColumns();
  setContentProvider();
  setLabelProvider(dataSetHandle);
  adjustParameterOnPosition(parameters);
  if (ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle)) {
    viewer.getViewer().setInput(dataSetHandle);
  }
 else {
    viewer.getViewer().setInput(parameters);
  }
  setToolTips();
  if (!isJointOrDerivedDataSetHandle) {
    addRefreshMenu();
    addListeners();
  }
  dataSetHandle.addListener(this);
  return viewer.getControl();
}","/** 
 * Create parameter page control, if the datasetHandle is ODA, add the ""linked with report parameter"" cell.
 * @param parent
 * @return
 */
protected Control createParameterPageControl(Composite parent){
  DataSetHandle dataSetHandle=(DataSetHandle)getContainer().getModel();
  isOdaDataSetHandle=ParameterPageUtil.isOdaDataSetHandle(dataSetHandle);
  isJointOrDerivedDataSetHandle=ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle);
  viewer=new PropertyHandleTableViewer(parent,!isJointOrDerivedDataSetHandle,true,true,!isJointOrDerivedDataSetHandle);
  createTableColumns();
  setContentProvider();
  setLabelProvider(dataSetHandle);
  adjustParameterOnPosition(parameters);
  if (ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle)) {
    viewer.getViewer().setInput(dataSetHandle);
  }
 else {
    viewer.getViewer().setInput(parameters);
  }
  setToolTips();
  if (!isJointOrDerivedDataSetHandle) {
    addRefreshMenu();
    addListeners();
  }
  dataSetHandle.addListener(this);
  return viewer.getControl();
}",0.9844961240310076
68209,"protected void updateButtons(){
  int[] indices=getViewer().getTable().getSelectionIndices();
  getUpButton().setEnabled(getUpButton().isVisible() && viewer.getTable().getItemCount() > 1 && indices.length == 1 && indices[0] != 0);
  getDownButton().setEnabled(getDownButton().isVisible() && viewer.getTable().getItemCount() > 1 && indices.length == 1 && indices[0] != viewer.getTable().getItemCount() - 1);
  getEditButton().setEnabled(getEditButton().isVisible() && indices.length == 1);
  getRemoveButton().setEnabled(getRemoveButton().isVisible() && indices.length > 0);
  getRemoveMenuItem().setEnabled(indices.length > 0);
  getRemoveAllMenuItem().setEnabled(viewer.getTable().getItemCount() > 0);
}","protected void updateButtons(){
  int[] indices=getViewer().getTable().getSelectionIndices();
  getUpButton().setEnabled(getUpButton().isVisible() && viewer.getTable().getItemCount() > 1 && indices.length == 1 && indices[0] != 0);
  getDownButton().setEnabled(getDownButton().isVisible() && viewer.getTable().getItemCount() > 1 && indices.length == 1 && indices[0] != viewer.getTable().getItemCount() - 1);
  getEditButton().setEnabled(getEditButton().isVisible() && indices.length == 1);
  getRemoveButton().setEnabled(getRemoveButton().isVisible() && indices.length > 0);
  if (getRemoveMenuItem() != null) {
    getRemoveMenuItem().setEnabled(indices.length > 0);
    getRemoveAllMenuItem().setEnabled(viewer.getTable().getItemCount() > 0);
  }
}",0.969029593943565
68210,"public void widgetSelected(SelectionEvent e){
  try {
    PropertyHandle handle=(PropertyHandle)viewer.getInput();
    handle.clearValue();
    viewer.refresh();
    updateButtons();
  }
 catch (  SemanticException e1) {
    ExceptionHandler.handle(e1);
  }
}","public void widgetSelected(SelectionEvent e){
  try {
    if (viewer.getInput() instanceof PropertyHandle) {
      PropertyHandle handle=(PropertyHandle)viewer.getInput();
      handle.clearValue();
      viewer.refresh();
      updateButtons();
    }
  }
 catch (  SemanticException e1) {
    ExceptionHandler.handle(e1);
  }
}",0.8517887563884157
68211,"private void createMenuComposite(){
  menu=new Menu(viewer.getTable());
  menu.addMenuListener(new MenuAdapter(){
    public void menuShown(    MenuEvent e){
      viewer.cancelEditing();
    }
  }
);
  itmRemove=new MenuItem(menu,SWT.NONE);
  itmRemove.setText(Messages.getString(""String_Node_Str""));
  itmRemove.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doRemove();
    }
  }
);
  itmRemoveAll=new MenuItem(menu,SWT.NONE);
  itmRemoveAll.setText(Messages.getString(""String_Node_Str""));
  itmRemoveAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      try {
        PropertyHandle handle=(PropertyHandle)viewer.getInput();
        handle.clearValue();
        viewer.refresh();
        updateButtons();
      }
 catch (      SemanticException e1) {
        ExceptionHandler.handle(e1);
      }
    }
  }
);
  viewer.getTable().setMenu(menu);
}","private void createMenuComposite(){
  menu=new Menu(viewer.getTable());
  menu.addMenuListener(new MenuAdapter(){
    public void menuShown(    MenuEvent e){
      viewer.cancelEditing();
    }
  }
);
  itmRemove=new MenuItem(menu,SWT.NONE);
  itmRemove.setText(Messages.getString(""String_Node_Str""));
  itmRemove.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doRemove();
    }
  }
);
  itmRemoveAll=new MenuItem(menu,SWT.NONE);
  itmRemoveAll.setText(Messages.getString(""String_Node_Str""));
  itmRemoveAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      try {
        if (viewer.getInput() instanceof PropertyHandle) {
          PropertyHandle handle=(PropertyHandle)viewer.getInput();
          handle.clearValue();
          viewer.refresh();
          updateButtons();
        }
      }
 catch (      SemanticException e1) {
        ExceptionHandler.handle(e1);
      }
    }
  }
);
  viewer.getTable().setMenu(menu);
}",0.9525237381309344
68212,"public IQueryResults executeQuery(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws BirtException {
  return new QueryExecutionHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).executeQuery(queryDefn,paramBindingIt,filterIt,bindingIt,this.sessionContext.getTopScope());
}","public IQueryResults executeQuery(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws BirtException {
  return new QueryExecutionHelper(this.dataEngine,this.modelAdaptor,this.sessionContext,this).executeQuery(queryDefn,paramBindingIt,filterIt,bindingIt,this.sessionContext.getTopScope());
}",0.9924585218702866
68213,"public IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  return new DataSetMetaDataHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).refreshMetaData(dataSetHandle,holdEvent);
}","public IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  return new DataSetMetaDataHelper(this.dataEngine,this.modelAdaptor,this.sessionContext,this).refreshMetaData(dataSetHandle,holdEvent);
}",0.9897750511247444
68214,"public IResultMetaData getDataSetMetaData(DataSetHandle dataSetHandle,boolean useCache) throws BirtException {
  return new DataSetMetaDataHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).getDataSetMetaData(dataSetHandle,useCache);
}","public IResultMetaData getDataSetMetaData(DataSetHandle dataSetHandle,boolean useCache) throws BirtException {
  return new DataSetMetaDataHelper(this.dataEngine,this.modelAdaptor,this.sessionContext,this).getDataSetMetaData(dataSetHandle,useCache);
}",0.9899396378269618
68215,"/** 
 * @param dataEngine
 * @param modelAdaptor
 * @param moduleHandle
 */
DataSetMetaDataHelper(DataEngine dataEngine,IModelAdapter modelAdaptor,DataSessionContext sessionContext){
  this.dataEngine=dataEngine;
  this.modelAdaptor=modelAdaptor;
  this.sessionContext=sessionContext;
}","/** 
 * @param dataEngine
 * @param modelAdaptor
 * @param moduleHandle
 */
DataSetMetaDataHelper(DataEngine dataEngine,IModelAdapter modelAdaptor,DataSessionContext sessionContext,DataRequestSession session){
  this.dataEngine=dataEngine;
  this.modelAdaptor=modelAdaptor;
  this.sessionContext=sessionContext;
  this.session=session;
}",0.9181380417335474
68216,"private IResultMetaData getRuntimeMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  query.setAutoBinding(true);
  IResultMetaData metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,false).executeQuery(query).getResultMetaData();
  addResultSetColumn(dataSetHandle,metaData);
  if (MetaDataPopulator.needsUseResultHint(dataSetHandle,metaData)) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,true).executeQuery(query).getResultMetaData();
  }
  return metaData;
}","private IResultMetaData getRuntimeMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  query.setAutoBinding(true);
  IResultMetaData metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,false,this.session).executeQuery(query).getResultMetaData();
  addResultSetColumn(dataSetHandle,metaData);
  if (MetaDataPopulator.needsUseResultHint(dataSetHandle,metaData)) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,true,this.session).executeQuery(query).getResultMetaData();
  }
  return metaData;
}",0.9805680119581464
68217,"/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle,boolean keepDataSetFilter,boolean disAllowAggregation) throws AdapterException, BirtException {
  if (handle == null) {
    return;
  }
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=this.modelAdaptor.adaptDataSource(dataSourceHandle);
    dataEngine.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    defineSourceDataSets((JointDataSetHandle)handle);
  }
  if (handle instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSet((DataSetHandle)inputDataSet.get(i),keepDataSetFilter,disAllowAggregation);
    }
  }
  BaseDataSetDesign baseDS=this.modelAdaptor.adaptDataSet(handle);
  if (useResultHints == false && handle.equals(major)) {
    baseDS.getResultSetHints().clear();
  }
  if (!keepDataSetFilter) {
    if (baseDS.getFilters() != null)     baseDS.getFilters().clear();
  }
  if (disAllowAggregation) {
    List computedColumns=baseDS.getComputedColumns();
    if (computedColumns != null && computedColumns.size() != 0) {
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null) {
          computedColumns.set(i,new ComputedColumn(computedColumn.getName(),""String_Node_Str""));
        }
      }
    }
  }
  dataEngine.defineDataSet(baseDS);
}","/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle,boolean keepDataSetFilter,boolean disAllowAggregation) throws AdapterException, BirtException {
  if (handle == null) {
    return;
  }
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=this.modelAdaptor.adaptDataSource(dataSourceHandle);
    dataEngine.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    defineSourceDataSets((JointDataSetHandle)handle);
  }
  if (handle instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSet((DataSetHandle)inputDataSet.get(i),keepDataSetFilter,disAllowAggregation);
    }
  }
  BaseDataSetDesign baseDS=this.modelAdaptor.adaptDataSet(handle);
  if (useResultHints == false && handle.equals(major)) {
    baseDS.getResultSetHints().clear();
  }
  if (!keepDataSetFilter) {
    if (baseDS.getFilters() != null)     baseDS.getFilters().clear();
  }
  if (disAllowAggregation) {
    List computedColumns=baseDS.getComputedColumns();
    if (computedColumns != null && computedColumns.size() != 0) {
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null) {
          computedColumns.set(i,new ComputedColumn(computedColumn.getName(),""String_Node_Str""));
        }
      }
    }
  }
  if (handle.getDataSourceName() != null) {
    TransientDataMartUtil.prepareDataSet(sessionContext.getAppContext(),sessionContext.getDataEngineContext(),((DataEngineImpl)dataEngine).getDataSourceDesign(baseDS.getDataSourceName()),baseDS,session);
  }
  dataEngine.defineDataSet(baseDS);
}",0.9212290502793296
68218,"/** 
 * @param dataEngine
 * @param modelAdaptor
 * @param moduleHandle
 * @param useResultHints
 */
QueryExecutionHelper(DataEngine dataEngine,IModelAdapter modelAdaptor,DataSessionContext sessionContext,boolean useResultHints){
  this.dataEngine=dataEngine;
  this.modelAdaptor=modelAdaptor;
  this.sessionContext=sessionContext;
  this.useResultHints=useResultHints;
}","/** 
 * @param dataEngine
 * @param modelAdaptor
 * @param moduleHandle
 * @param useResultHints
 */
QueryExecutionHelper(DataEngine dataEngine,IModelAdapter modelAdaptor,DataSessionContext sessionContext,boolean useResultHints,DataRequestSession session){
  this.dataEngine=dataEngine;
  this.modelAdaptor=modelAdaptor;
  this.sessionContext=sessionContext;
  this.useResultHints=useResultHints;
  this.session=session;
}",0.935687263556116
68219,"private static Object[] populateObArray(Object obj,Object[] obArray){
  try {
    if (obj instanceof Number && !(obj instanceof BigDecimal)) {
      for (int i=0; i < obArray.length; i++) {
        obArray[i]=DataTypeUtil.toDouble(obArray[i]);
      }
    }
 else     if (obj instanceof java.sql.Date) {
      for (int i=0; i < obArray.length; i++) {
        obArray[i]=DataTypeUtil.toSqlDate(obArray[i]);
      }
    }
 else     if (obj instanceof java.sql.Time) {
      for (int i=0; i < obArray.length; i++) {
        obArray[i]=DataTypeUtil.toSqlTime(obArray[i]);
      }
    }
 else     if (obj instanceof Date) {
      for (int i=0; i < obArray.length; i++) {
        obArray[i]=DataTypeUtil.toDate(obArray[i]);
      }
    }
  }
 catch (  BirtException e) {
    try {
      makeObjectArrayStringArray(obArray);
    }
 catch (    BirtException e1) {
    }
  }
  return obArray;
}","private static Object[] populateObArray(Object obj,Object[] obArray){
  try {
    for (int i=0; i < obArray.length; i++) {
      if (obArray[i] instanceof Object[])       return obArray;
    }
    if (obj instanceof Number && !(obj instanceof BigDecimal)) {
      for (int i=0; i < obArray.length; i++) {
        obArray[i]=DataTypeUtil.toDouble(obArray[i]);
      }
    }
 else     if (obj instanceof java.sql.Date) {
      for (int i=0; i < obArray.length; i++) {
        obArray[i]=DataTypeUtil.toSqlDate(obArray[i]);
      }
    }
 else     if (obj instanceof java.sql.Time) {
      for (int i=0; i < obArray.length; i++) {
        obArray[i]=DataTypeUtil.toSqlTime(obArray[i]);
      }
    }
 else     if (obj instanceof Date) {
      for (int i=0; i < obArray.length; i++) {
        obArray[i]=DataTypeUtil.toDate(obArray[i]);
      }
    }
  }
 catch (  BirtException e) {
    try {
      makeObjectArrayStringArray(obArray);
    }
 catch (    BirtException e1) {
    }
  }
  return obArray;
}",0.9389920424403184
68220,"/** 
 * Parses out bookmark name from a url for interanl bookmark.
 * @param url the url string
 * @return the bookmark name.
 */
private String getBookmark(String url){
  int start=url.indexOf(BOOKMARK_PREFIX) + BOOKMARK_PREFIX.length();
  int end=url.length() - 2;
  return url.substring(start,end);
}","/** 
 * Parses out bookmark name from a url for interanl bookmark.
 * @param url the url string
 * @return the bookmark name.
 */
private String getBookmark(String url){
  int start=url.indexOf(BOOKMARK_URL_PREFIX);
  int end=-1;
  if (start != -1) {
    start+=BOOKMARK_URL_PREFIX.length();
    end=url.indexOf(""String_Node_Str"",start);
    if (end == -1) {
      end=url.length();
    }
    return url.substring(start,end);
  }
 else   if (url.startsWith(BOOKMARK_ANCHOR_PREFIX)) {
    start=BOOKMARK_ANCHOR_PREFIX.length();
    end=url.length();
    return url.substring(start,end);
  }
 else   if (url.startsWith(BOOKMARK_JAVASCRIPT_PREFIX) && url.endsWith(""String_Node_Str"")) {
    start=BOOKMARK_JAVASCRIPT_PREFIX.length();
    end=url.length() - 2;
    return url.substring(start,end);
  }
  return null;
}",0.503584229390681
68221,"private void createImageMap(int[] area,IImageArea imageArea,String url,String targetWindow){
  if (url == null) {
    return;
  }
  url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  ActionContent link=new ActionContent();
  if (isBookmark(url)) {
    String bookmark=getBookmark(url);
    link.setBookmark(bookmark);
  }
 else {
    link.setHyperlink(url,targetWindow);
  }
  area=getAbsoluteArea(area,imageArea);
  createImageMapContainer(area[0],area[1],area[2],area[3],link);
}","private void createImageMap(int[] area,IImageArea imageArea,String url,String targetWindow){
  if (url == null) {
    return;
  }
  url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  ActionContent link=new ActionContent();
  String bookmark=getBookmark(url);
  if (bookmark != null) {
    link.setBookmark(bookmark);
  }
 else {
    link.setHyperlink(url,targetWindow);
  }
  area=getAbsoluteArea(area,imageArea);
  createImageMapContainer(area[0],area[1],area[2],area[3],link);
}",0.8925281473899693
68222,"/** 
 * Parse specified script, using correct expression instead of chart variables.
 * @param script
 * @param categoryExpr
 * @param seriesExpr
 * @param seriesName
 * @return
 */
private static String parseChartVariables(String script,String categoryExpr,String seriesExpr,String seriesName){
  if (script == null) {
    return null;
  }
  List<StringBuffer> symbols=new ArrayList<StringBuffer>();
  BufferedReader br=new BufferedReader(new StringReader(script));
  boolean isComments=false;
  boolean isCPlusCommnets=false;
  boolean isInQuotation=false;
  StringBuffer sb=new StringBuffer();
  String operations=""String_Node_Str"";
  try {
    int line=-1;
    do {
      String str=br.readLine();
      if (str == null) {
        break;
      }
      line++;
      if (line > 0) {
        sb.append('\n');
        sb=addToSymbolList(symbols,sb);
      }
      for (int i=0; i < str.length(); i++) {
        char c=str.charAt(i);
switch (c) {
case '+':
case '-':
case '!':
case '=':
case '<':
case '>':
case '&':
case '|':
case '(':
case ')':
          if (isCPlusCommnets || isComments) {
            sb.append(c);
          }
 else {
            sb=addToSymbolList(symbols,sb);
            sb.append(c);
          }
        break;
case '/':
      if (sb.length() == 0) {
        sb.append(c);
      }
 else       if (isComments && sb.charAt(sb.length() - 1) == '*') {
        isComments=false;
        sb.append(c);
        sb=addToSymbolList(symbols,sb);
      }
 else       if (isCPlusCommnets || isComments) {
        sb.append(c);
      }
 else       if (sb.charAt(sb.length() - 1) == '/') {
        isCPlusCommnets=true;
        sb.append(c);
      }
 else {
        sb=addToSymbolList(symbols,sb);
        sb.append(c);
      }
    break;
case '*':
  if (isCPlusCommnets || isComments) {
    sb.append(c);
  }
 else   if (sb.charAt(sb.length() - 1) == '/') {
    isComments=true;
    sb.append(c);
  }
 else {
    sb=addToSymbolList(symbols,sb);
    sb.append(c);
  }
break;
case '""':
case '\'':
if (isCPlusCommnets || isComments) {
sb.append(c);
}
 else {
sb.append(c);
if (!isInQuotation) {
  isInQuotation=true;
}
 else {
  isInQuotation=false;
  sb=addToSymbolList(symbols,sb);
}
}
break;
default :
if (!isComments && !isCPlusCommnets && !isInQuotation&& operations.indexOf(c) >= 0) {
sb=addToSymbolList(symbols,sb);
}
sb.append(c);
}
}
isCPlusCommnets=false;
isInQuotation=false;
sb=addToSymbolList(symbols,sb);
}
 while (true);
}
 catch (IOException e) {
return script;
}
StringBuffer returnSB=new StringBuffer();
for (StringBuffer s : symbols) {
String src=s.toString();
String expr=src.trim();
if (expr.equals(ScriptHandler.BASE_VALUE)) {
returnSB.append(src.replace(ScriptHandler.BASE_VALUE,categoryExpr == null ? ""String_Node_Str"" : categoryExpr));
}
 else if (expr.equals(ScriptHandler.ORTHOGONAL_VALUE)) {
returnSB.append(src.replace(ScriptHandler.ORTHOGONAL_VALUE,seriesExpr == null ? ""String_Node_Str"" : seriesExpr));
}
 else if (expr.equals(ScriptHandler.SERIES_VALUE)) {
StringBuffer ssb=new StringBuffer();
ssb.append(""String_Node_Str"");
ssb.append(seriesName);
ssb.append(""String_Node_Str"");
returnSB.append(src.replace(ScriptHandler.SERIES_VALUE,seriesName == null ? ""String_Node_Str"" : ssb));
}
 else {
returnSB.append(src);
}
}
return returnSB.toString();
}","/** 
 * Parse specified script, using correct expression instead of chart variables.
 * @param script
 * @param categoryExpr
 * @param seriesExpr
 * @param seriesName
 * @return
 */
private static String parseChartVariables(String script,String categoryExpr,String seriesExpr,String seriesName){
  if (script == null) {
    return null;
  }
  List<StringBuffer> symbols=new ArrayList<StringBuffer>();
  BufferedReader br=new BufferedReader(new StringReader(script));
  boolean isComments=false;
  boolean isCPlusCommnets=false;
  boolean isInQuotation=false;
  StringBuffer sb=new StringBuffer();
  try {
    int line=-1;
    do {
      String str=br.readLine();
      if (str == null) {
        break;
      }
      line++;
      if (line > 0) {
        sb.append('\n');
        sb=addToSymbolList(symbols,sb);
      }
      for (int i=0; i < str.length(); i++) {
        char c=str.charAt(i);
switch (c) {
case '+':
case '-':
case '!':
case '=':
case '<':
case '>':
case '&':
case '|':
case '(':
case ')':
          if (isCPlusCommnets || isComments) {
            sb.append(c);
          }
 else {
            sb=addToSymbolList(symbols,sb);
            sb.append(c);
          }
        break;
case '/':
      if (sb.length() == 0) {
        sb.append(c);
      }
 else       if (isComments && sb.charAt(sb.length() - 1) == '*') {
        isComments=false;
        sb.append(c);
        sb=addToSymbolList(symbols,sb);
      }
 else       if (isCPlusCommnets || isComments) {
        sb.append(c);
      }
 else       if (sb.charAt(sb.length() - 1) == '/') {
        isCPlusCommnets=true;
        sb.append(c);
      }
 else {
        sb=addToSymbolList(symbols,sb);
        sb.append(c);
      }
    break;
case '*':
  if (isCPlusCommnets || isComments) {
    sb.append(c);
  }
 else   if (sb.charAt(sb.length() - 1) == '/') {
    isComments=true;
    sb.append(c);
  }
 else {
    sb=addToSymbolList(symbols,sb);
    sb.append(c);
  }
break;
case '""':
case '\'':
if (isCPlusCommnets || isComments) {
sb.append(c);
}
 else {
sb.append(c);
if (!isInQuotation) {
  isInQuotation=true;
}
 else {
  isInQuotation=false;
  sb=addToSymbolList(symbols,sb);
}
}
break;
default :
if (!isComments && !isCPlusCommnets && !isInQuotation&& sb.length() > 0 && isOperator(sb.charAt(sb.length() - 1)) && !isOperator(c)) {
sb=addToSymbolList(symbols,sb);
}
sb.append(c);
}
}
isCPlusCommnets=false;
isInQuotation=false;
sb=addToSymbolList(symbols,sb);
}
 while (true);
}
 catch (IOException e) {
return script;
}
StringBuffer returnSB=new StringBuffer();
for (StringBuffer s : symbols) {
String src=s.toString();
String expr=src.trim();
if (expr.equals(ScriptHandler.BASE_VALUE)) {
returnSB.append(src.replace(ScriptHandler.BASE_VALUE,categoryExpr == null ? ""String_Node_Str"" : categoryExpr));
}
 else if (expr.equals(ScriptHandler.ORTHOGONAL_VALUE)) {
returnSB.append(src.replace(ScriptHandler.ORTHOGONAL_VALUE,seriesExpr == null ? ""String_Node_Str"" : seriesExpr));
}
 else if (expr.equals(ScriptHandler.SERIES_VALUE)) {
StringBuffer ssb=new StringBuffer();
ssb.append(""String_Node_Str"");
ssb.append(seriesName);
ssb.append(""String_Node_Str"");
returnSB.append(src.replace(ScriptHandler.SERIES_VALUE,seriesName == null ? ""String_Node_Str"" : ssb));
}
 else {
returnSB.append(src);
}
}
return returnSB.toString();
}",0.9790591805766312
68223,"/** 
 * The method test  {@link org.eclipse.birt.chart.internal.datafeed.ChartVariableHelper#parseChartVariables(String,String,String,String)}
 * @throws NoSuchMethodException
 * @throws SecurityException
 * @throws SecurityException
 * @throws NoSuchMethodException
 * @throws IllegalArgumentException
 * @throws IllegalAccessException
 * @throws InvocationTargetException
 */
public void testParseChartVariables() throws SecurityException, NoSuchMethodException {
  Method m=ChartVariableHelper.class.getDeclaredMethod(""String_Node_Str"",String.class,String.class,String.class,String.class);
  m.setAccessible(true);
  try {
    String v1Src=""String_Node_Str"";
    String v1Target=""String_Node_Str"";
    fParams[0]=v1Src;
    Object result=m.invoke(fTestInstance,fParams);
    assertEquals(v1Target,result);
    String v2Src=""String_Node_Str"";
    String v2Target=""String_Node_Str"";
    fParams[0]=v2Src;
    result=m.invoke(fTestInstance,fParams);
    assertEquals(v2Target,result);
    String v3Src=""String_Node_Str"" + ""String_Node_Str"";
    String v3Target=""String_Node_Str"" + ""String_Node_Str"";
    fParams[0]=v3Src;
    result=m.invoke(fTestInstance,fParams);
    assertEquals(v3Target,result);
    String v4Src=""String_Node_Str"" + ""String_Node_Str"";
    String v4Target=""String_Node_Str"" + ""String_Node_Str"";
    fParams[0]=v4Src;
    result=m.invoke(fTestInstance,fParams);
    assertEquals(v4Target,result);
    String v5Src=""String_Node_Str"" + ""String_Node_Str"";
    String v5Target=""String_Node_Str"" + ""String_Node_Str"";
    fParams[0]=v5Src;
    result=m.invoke(fTestInstance,fParams);
    assertEquals(v5Target,result);
  }
 catch (  IllegalArgumentException e) {
    fail(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    fail(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    fail(""String_Node_Str"");
    e.printStackTrace();
  }
  m.setAccessible(false);
}","/** 
 * The method test  {@link org.eclipse.birt.chart.internal.datafeed.ChartVariableHelper#parseChartVariables(String,String,String,String)}
 * @throws NoSuchMethodException
 * @throws SecurityException
 * @throws SecurityException
 * @throws NoSuchMethodException
 * @throws IllegalArgumentException
 * @throws IllegalAccessException
 * @throws InvocationTargetException
 */
public void testParseChartVariables() throws SecurityException, NoSuchMethodException {
  Method m=ChartVariableHelper.class.getDeclaredMethod(""String_Node_Str"",String.class,String.class,String.class,String.class);
  m.setAccessible(true);
  try {
    String v1Src=""String_Node_Str"";
    String v1Target=""String_Node_Str"";
    fParams[0]=v1Src;
    Object result=m.invoke(fTestInstance,fParams);
    assertEquals(v1Target,result);
    String v2Src=""String_Node_Str"";
    String v2Target=""String_Node_Str"";
    fParams[0]=v2Src;
    result=m.invoke(fTestInstance,fParams);
    assertEquals(v2Target,result);
    String v3Src=""String_Node_Str"" + ""String_Node_Str"";
    String v3Target=""String_Node_Str"" + ""String_Node_Str"";
    fParams[0]=v3Src;
    result=m.invoke(fTestInstance,fParams);
    assertEquals(v3Target,result);
    String v4Src=""String_Node_Str"" + ""String_Node_Str"";
    String v4Target=""String_Node_Str"" + ""String_Node_Str"";
    fParams[0]=v4Src;
    result=m.invoke(fTestInstance,fParams);
    assertEquals(v4Target,result);
    String v5Src=""String_Node_Str"" + ""String_Node_Str"";
    String v5Target=""String_Node_Str"" + ""String_Node_Str"";
    fParams[0]=v5Src;
    result=m.invoke(fTestInstance,fParams);
    assertEquals(v5Target,result);
    String v6Src=""String_Node_Str"" + ""String_Node_Str"";
    String v6Target=""String_Node_Str"" + ""String_Node_Str"";
    fParams[0]=v6Src;
    result=m.invoke(fTestInstance,fParams);
    assertEquals(v6Target,result);
  }
 catch (  IllegalArgumentException e) {
    fail(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    fail(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    fail(""String_Node_Str"");
    e.printStackTrace();
  }
  m.setAccessible(false);
}",0.9476490547746
68224,"public ImageData(IImageContent image,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer,int heightDpi,int widthDpi){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),imageInfo.getHeight() * ExcelUtil.INCH_PT / heightDpi,heightDpi) / 1000;
  int imageWidth=(int)ExcelUtil.convertDimensionType(image.getWidth(),imageInfo.getWidth() * ExcelUtil.INCH_PT / widthDpi,widthDpi);
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}","public ImageData(IImageContent image,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer,int heightDpi,int widthDpi){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),imageInfo.getHeight() * ExcelUtil.INCH_PT / heightDpi,heightDpi) / 1000;
  imageHeight=(int)height;
  int imageWidth=(int)ExcelUtil.convertDimensionType(image.getWidth(),imageInfo.getWidth() * ExcelUtil.INCH_PT / widthDpi,widthDpi);
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}",0.9805054151624548
68225,"public List<IBookmarkInfo> getBookmarkInfos(Locale locale) throws EngineException {
  ArrayList<IBookmarkInfo> results=new ArrayList<IBookmarkInfo>();
  loadCoreStreamLazily();
  if (indexReader != null) {
    try {
      List<BookmarkContent> bookmarks=indexReader.getBookmarkContents();
      if (bookmarks == null) {
        return null;
      }
      ReportDesignHandle report=this.getReportDesign();
      for (      BookmarkContent bookmark : bookmarks) {
        long designId=bookmark.getElementId();
        DesignElementHandle handle=report.getElementByID(designId);
        if (handle == null)         continue;
        String elementType=handle.getName();
        String displayName=null;
        if (handle instanceof ReportItemHandle) {
          displayName=((ReportItemHandle)handle).getBookmarkDisplayName();
        }
        if (locale != null) {
          if (handle instanceof ReportElementHandle) {
            ReportElementHandle elementHandle=(ReportElementHandle)handle;
            displayName=ModuleUtil.getExternalizedValue(elementHandle,bookmark.getBookmark(),displayName,ULocale.forLocale(locale));
          }
        }
        results.add(new BookmarkInfo(bookmark.getBookmark(),displayName,elementType));
      }
    }
 catch (    IOException ex) {
      throw new EngineException(""String_Node_Str"",ex);
    }
  }
  return results;
}","public List<IBookmarkInfo> getBookmarkInfos(Locale locale) throws EngineException {
  if (!isComplete()) {
    return null;
  }
  ArrayList<IBookmarkInfo> results=new ArrayList<IBookmarkInfo>();
  loadCoreStreamLazily();
  if (indexReader != null) {
    try {
      List<BookmarkContent> bookmarks=indexReader.getBookmarkContents();
      if (bookmarks == null) {
        return null;
      }
      ReportDesignHandle report=this.getReportDesign();
      for (      BookmarkContent bookmark : bookmarks) {
        long designId=bookmark.getElementId();
        DesignElementHandle handle=report.getElementByID(designId);
        if (handle == null)         continue;
        String elementType=handle.getName();
        String displayName=null;
        if (handle instanceof ReportItemHandle) {
          displayName=((ReportItemHandle)handle).getBookmarkDisplayName();
        }
        if (locale != null) {
          if (handle instanceof ReportElementHandle) {
            ReportElementHandle elementHandle=(ReportElementHandle)handle;
            displayName=ModuleUtil.getExternalizedValue(elementHandle,bookmark.getBookmark(),displayName,ULocale.forLocale(locale));
          }
        }
        results.add(new BookmarkInfo(bookmark.getBookmark(),displayName,elementType));
      }
    }
 catch (    IOException ex) {
      throw new EngineException(""String_Node_Str"",ex);
    }
  }
  return results;
}",0.984149855907781
68226,"public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartCubeUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  ReportDataServiceProvider dataProvider=null;
  ChartLivePreviewThread livePreviewThread=null;
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemConstants.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : cm.copyInstance();
    if (cmClone != null) {
      maintainCompatibility(cmClone);
    }
    final Object[] applyData=new Object[3];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    dataProvider=new ReportDataServiceProvider(extendedHandle);
    ChartReportItemUIFactory uiFactory=ChartReportItemUIFactory.instance();
    IChartDataSheet dataSheet=uiFactory.createDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=uiFactory.createWizardContext(cmClone,this,dataProvider,dataSheet);
    this.wizardContext=context;
    livePreviewThread=new ChartLivePreviewThread(dataProvider);
    livePreviewThread.start();
    context.setLivePreviewThread(livePreviewThread);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=context.getModel().copyInstance();
        applyData[1]=context.getOutputFormat();
        applyData[2]=context.isInheritColumnsOnly();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemConstants.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else {
        context.setOutputFormat((String)of);
      }
    }
    context.setInheritColumnsOnly(extendedHandle.getBooleanProperty(ChartReportItemConstants.PROPERTY_INHERIT_COLUMNS));
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartAdapter.beginIgnoreNotifications();
    if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      dataProvider.update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
    }
    ChartWizard.clearExceptions();
    context.setActionEvaluator(new BIRTActionEvaluator());
    ChartAdapter.endIgnoreNotifications();
    isChartWizardOpen=true;
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    isChartWizardOpen=false;
    if (contextResult != null && contextResult.getModel() != null) {
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat(),contextResult.isInheritColumnsOnly());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartCubeUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1],(Boolean)applyData[2]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartCubeUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
    isChartWizardOpen=false;
    if (livePreviewThread != null) {
      livePreviewThread.end();
    }
  }
}","public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartCubeUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  ReportDataServiceProvider dataProvider=null;
  ChartLivePreviewThread livePreviewThread=null;
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemConstants.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : cm.copyInstance();
    if (cmClone != null) {
      maintainCompatibility(cmClone);
    }
    final Object[] applyData=new Object[3];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    dataProvider=new ReportDataServiceProvider(extendedHandle);
    ChartReportItemUIFactory uiFactory=ChartReportItemUIFactory.instance();
    IChartDataSheet dataSheet=uiFactory.createDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=uiFactory.createWizardContext(cmClone,this,dataProvider,dataSheet);
    this.wizardContext=context;
    livePreviewThread=new ChartLivePreviewThread(dataProvider);
    livePreviewThread.start();
    context.setLivePreviewThread(livePreviewThread);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=context.getModel().copyInstance();
        applyData[1]=context.getOutputFormat();
        applyData[2]=context.isInheritColumnsOnly();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemConstants.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else {
        context.setOutputFormat((String)of);
      }
    }
    context.setInheritColumnsOnly(extendedHandle.getBooleanProperty(ChartReportItemConstants.PROPERTY_INHERIT_COLUMNS));
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartAdapter.beginIgnoreNotifications();
    if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      dataProvider.update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
    }
    ChartWizard.clearExceptions();
    context.setActionEvaluator(new BIRTActionEvaluator());
    ChartAdapter.endIgnoreNotifications();
    isChartWizardOpen=true;
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    isChartWizardOpen=false;
    if (contextResult != null && contextResult.getModel() != null) {
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat(),contextResult.isInheritColumnsOnly());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartCubeUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1],(Boolean)applyData[2]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartCubeUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
    isChartWizardOpen=false;
    if (livePreviewThread != null) {
      livePreviewThread.end();
    }
    ChartWizard.clearExceptions();
  }
}",0.9970743124634288
68227,"public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator iterEntries=series.getDataDefinition().iterator();
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    if (idsp.getDataType(query.getDefinition()) == DataType.TEXT_LITERAL) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}","public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator iterEntries=series.getDataDefinition().iterator();
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    if (idsp.getDataType(query.getDefinition()) == DataType.TEXT_LITERAL) {
      final ExpressionCodec codec=ChartModelHelper.instance().createExpressionCodec();
      codec.decode(query.getDefinition());
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,codec.getExpression());
    }
  }
}",0.8389662027833003
68228,"public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator iterEntries=series.getDataDefinition().iterator();
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    if (idsp.getDataType(query.getDefinition()) == DataType.TEXT_LITERAL) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}","public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator iterEntries=series.getDataDefinition().iterator();
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    if (idsp.getDataType(query.getDefinition()) == DataType.TEXT_LITERAL) {
      final ExpressionCodec codec=ChartModelHelper.instance().createExpressionCodec();
      codec.decode(query.getDefinition());
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,codec.getExpression());
    }
  }
}",0.8389662027833003
68229,"public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  List<Query> entries=series.getDataDefinition();
  if (entries.size() >= 2) {
    Query query=entries.get(1);
    DataType dataType=idsp.getDataType(query.getDefinition());
    if (dataType == DataType.TEXT_LITERAL || dataType == DataType.DATE_TIME_LITERAL) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}","public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  List<Query> entries=series.getDataDefinition();
  if (entries.size() >= 2) {
    Query query=entries.get(1);
    DataType dataType=idsp.getDataType(query.getDefinition());
    if (dataType == DataType.TEXT_LITERAL || dataType == DataType.DATE_TIME_LITERAL) {
      final ExpressionCodec codec=ChartModelHelper.instance().createExpressionCodec();
      codec.decode(query.getDefinition());
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,codec.getExpression());
    }
  }
}",0.8524590163934426
68230,"public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator iterEntries=series.getDataDefinition().iterator();
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    DataType dataType=idsp.getDataType(query.getDefinition());
    if (dataType == DataType.TEXT_LITERAL || dataType == DataType.DATE_TIME_LITERAL) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}","public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator iterEntries=series.getDataDefinition().iterator();
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    DataType dataType=idsp.getDataType(query.getDefinition());
    if (dataType == DataType.TEXT_LITERAL || dataType == DataType.DATE_TIME_LITERAL) {
      final ExpressionCodec codec=ChartModelHelper.instance().createExpressionCodec();
      codec.decode(query.getDefinition());
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,codec.getExpression());
    }
  }
}",0.8665511265164645
68231,"public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  ArrayList<Query> al=new ArrayList<Query>();
  al.addAll(series.getDataDefinition());
  for (int i=0; i < al.size(); i++) {
    Query query=al.get(i);
    DataType dataType=idsp.getDataType(query.getDefinition());
    if ((i != 2) && (dataType == DataType.TEXT_LITERAL || dataType == DataType.NUMERIC_LITERAL)) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}","public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  ArrayList<Query> al=new ArrayList<Query>();
  al.addAll(series.getDataDefinition());
  for (int i=0; i < al.size(); i++) {
    Query query=al.get(i);
    DataType dataType=idsp.getDataType(query.getDefinition());
    if ((i != 2) && (dataType == DataType.TEXT_LITERAL || dataType == DataType.NUMERIC_LITERAL)) {
      final ExpressionCodec codec=ChartModelHelper.instance().createExpressionCodec();
      codec.decode(query.getDefinition());
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,codec.getExpression());
    }
  }
}",0.8654485049833887
68232,"public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator iterEntries=series.getDataDefinition().iterator();
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    if (idsp.getDataType(query.getDefinition()) == DataType.TEXT_LITERAL) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}","public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator iterEntries=series.getDataDefinition().iterator();
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    if (idsp.getDataType(query.getDefinition()) == DataType.TEXT_LITERAL) {
      final ExpressionCodec codec=ChartModelHelper.instance().createExpressionCodec();
      codec.decode(query.getDefinition());
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,codec.getExpression());
    }
  }
}",0.8389662027833003
68233,"public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator<?> iterEntries=series.getDataDefinition().iterator();
  boolean bIsNumericAgg=ChartUIUtil.isNumericAggregate(series);
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    DataType dataType=idsp.getDataType(query.getDefinition());
    if (bIsNumericAgg) {
      dataType=DataType.NUMERIC_LITERAL;
    }
    if (dataType == DataType.TEXT_LITERAL || dataType == DataType.DATE_TIME_LITERAL) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}","public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator<?> iterEntries=series.getDataDefinition().iterator();
  boolean bIsNumericAgg=ChartUIUtil.isNumericAggregate(series);
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    DataType dataType=idsp.getDataType(query.getDefinition());
    if (bIsNumericAgg) {
      dataType=DataType.NUMERIC_LITERAL;
    }
    if (dataType == DataType.TEXT_LITERAL || dataType == DataType.DATE_TIME_LITERAL) {
      final ExpressionCodec codec=ChartModelHelper.instance().createExpressionCodec();
      codec.decode(query.getDefinition());
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,codec.getExpression());
    }
  }
}",0.8868715083798883
68234,"public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator<?> iterEntries=series.getDataDefinition().iterator();
  boolean bIsNumericAgg=ChartUIUtil.isNumericAggregate(series);
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    DataType dataType=idsp.getDataType(query.getDefinition());
    if (bIsNumericAgg) {
      dataType=DataType.NUMERIC_LITERAL;
    }
    if (dataType == DataType.TEXT_LITERAL || dataType == DataType.DATE_TIME_LITERAL) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}","public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator<?> iterEntries=series.getDataDefinition().iterator();
  boolean bIsNumericAgg=ChartUIUtil.isNumericAggregate(series);
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    DataType dataType=idsp.getDataType(query.getDefinition());
    if (bIsNumericAgg) {
      dataType=DataType.NUMERIC_LITERAL;
    }
    if (dataType == DataType.TEXT_LITERAL || dataType == DataType.DATE_TIME_LITERAL) {
      final ExpressionCodec codec=ChartModelHelper.instance().createExpressionCodec();
      codec.decode(query.getDefinition());
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,codec.getExpression());
    }
  }
}",0.8868715083798883
68235,"public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator iterEntries=series.getDataDefinition().iterator();
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    if (idsp.getDataType(query.getDefinition()) == DataType.TEXT_LITERAL) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}","public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator iterEntries=series.getDataDefinition().iterator();
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    if (idsp.getDataType(query.getDefinition()) == DataType.TEXT_LITERAL) {
      final ExpressionCodec codec=ChartModelHelper.instance().createExpressionCodec();
      codec.decode(query.getDefinition());
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,codec.getExpression());
    }
  }
}",0.8389662027833003
68236,"public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator iterEntries=series.getDataDefinition().iterator();
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    DataType dataType=idsp.getDataType(query.getDefinition());
    if (dataType == DataType.TEXT_LITERAL || dataType == DataType.DATE_TIME_LITERAL) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}","public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  Iterator iterEntries=series.getDataDefinition().iterator();
  while (iterEntries.hasNext()) {
    Query query=(Query)iterEntries.next();
    DataType dataType=idsp.getDataType(query.getDefinition());
    if (dataType == DataType.TEXT_LITERAL || dataType == DataType.DATE_TIME_LITERAL) {
      final ExpressionCodec codec=ChartModelHelper.instance().createExpressionCodec();
      codec.decode(query.getDefinition());
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,codec.getExpression());
    }
  }
}",0.8665511265164645
68237,"/** 
 * @param parent
 * @param style
 */
public CustomPreviewTable(Composite parent,int style){
  super(parent,SWT.BORDER);
  fHeadings=new Vector();
  columnWidths=new Vector<Integer>();
  btnHeaders=new Vector<Button>();
  vListeners=new Vector<Listener>();
  placeComponents();
  createDummyTable();
}","/** 
 * @param parent
 * @param style
 */
public CustomPreviewTable(Composite parent,int style){
  super(parent,SWT.BORDER);
  fHeadings=new Vector<ColumnBindingInfo>();
  columnWidths=new Vector<Integer>();
  btnHeaders=new Vector<Button>();
  vListeners=new Vector<Listener>();
  placeComponents();
  createDummyTable();
}",0.9697933227344993
68238,"public void setHeaderAlignment(int iAlignment){
  this.iHeaderAlignment=iAlignment;
  for (int i=0; i < btnHeaders.size(); i++) {
    ((Button)btnHeaders.get(i)).setAlignment(iHeaderAlignment);
  }
}","public void setHeaderAlignment(int iAlignment){
  this.iHeaderAlignment=iAlignment;
  for (int i=0; i < btnHeaders.size(); i++) {
    btnHeaders.get(i).setAlignment(iHeaderAlignment);
  }
}",0.9742268041237112
68239,"public String getColumnHeading(int iIndex) throws IllegalArgumentException {
  if (fHeadings == null || iIndex >= fHeadings.size()) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",String.valueOf(iIndex)));
  }
  return (String)((ColumnBindingInfo)fHeadings.get(iIndex)).getName();
}","public String getColumnHeading(int iIndex) throws IllegalArgumentException {
  if (isDummy) {
    return ""String_Node_Str"";
  }
  if (fHeadings == null || iIndex >= fHeadings.size()) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",String.valueOf(iIndex)));
  }
  return fHeadings.get(iIndex).getName();
}",0.8761609907120743
68240,"private void placeComponents(){
  if (cmpHeaders == null) {
    GridLayout glTable=new GridLayout();
    glTable.numColumns=1;
    glTable.marginWidth=1;
    glTable.marginHeight=1;
    glTable.horizontalSpacing=0;
    glTable.verticalSpacing=0;
    setLayout(glTable);
    cmpHeaders=new Composite(this,SWT.NONE);
    GridData gdCmpHeaders=new GridData(GridData.FILL_HORIZONTAL);
    cmpHeaders.setLayoutData(gdCmpHeaders);
    FormLayout glHeaders=new FormLayout();
    glHeaders.marginHeight=0;
    glHeaders.marginWidth=0;
    cmpHeaders.setLayout(glHeaders);
    cmpHeaders.addMouseListener(this);
  }
 else {
    Control[] buttons=cmpHeaders.getChildren();
    for (int i=0; i < buttons.length; i++) {
      buttons[i].dispose();
    }
  }
  btnHeaders.clear();
  for (int i=0; i < fHeadings.size(); i++) {
    if (fHeadings.elementAt(i) instanceof ColumnBindingInfo) {
      addHeaderButton(iHeaderAlignment,(ColumnBindingInfo)fHeadings.elementAt(i),columnWidths.get(i),i);
    }
 else {
      addHeaderButton(iHeaderAlignment,(String)fHeadings.elementAt(i),columnWidths.get(i));
    }
  }
  cmpHeaders.layout();
  if (cnvCells != null && !cnvCells.isDisposed()) {
    cnvCells.dispose();
  }
  cnvCells=new TableCanvas(this,SWT.NONE,fHeadings.size(),new Color[]{},this);
  cnvCells.setLayoutData(new GridData(GridData.FILL_BOTH));
  cnvCells.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  cnvCells.addMouseMoveListener(this);
  getShell().addControlListener(this);
  addDisposeListener(this);
}","private void placeComponents(){
  if (cmpHeaders == null) {
    GridLayout glTable=new GridLayout();
    glTable.numColumns=1;
    glTable.marginWidth=1;
    glTable.marginHeight=1;
    glTable.horizontalSpacing=0;
    glTable.verticalSpacing=0;
    setLayout(glTable);
    cmpHeaders=new Composite(this,SWT.NONE);
    GridData gdCmpHeaders=new GridData(GridData.FILL_HORIZONTAL);
    cmpHeaders.setLayoutData(gdCmpHeaders);
    FormLayout glHeaders=new FormLayout();
    glHeaders.marginHeight=0;
    glHeaders.marginWidth=0;
    cmpHeaders.setLayout(glHeaders);
    cmpHeaders.addMouseListener(this);
  }
 else {
    Control[] buttons=cmpHeaders.getChildren();
    for (int i=0; i < buttons.length; i++) {
      buttons[i].dispose();
    }
  }
  btnHeaders.clear();
  if (isDummy) {
    for (int i=0; i < columnWidths.size(); i++) {
      addHeaderButton(iHeaderAlignment,""String_Node_Str"",columnWidths.get(i));
    }
  }
 else {
    for (int i=0; i < fHeadings.size(); i++) {
      addHeaderButton(iHeaderAlignment,fHeadings.elementAt(i),columnWidths.get(i),i);
    }
  }
  cmpHeaders.layout();
  if (cnvCells != null && !cnvCells.isDisposed()) {
    cnvCells.dispose();
  }
  cnvCells=new TableCanvas(this,SWT.NONE,fHeadings.size(),new Color[]{},this);
  cnvCells.setLayoutData(new GridData(GridData.FILL_BOTH));
  cnvCells.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  cnvCells.addMouseMoveListener(this);
  getShell().addControlListener(this);
  addDisposeListener(this);
}",0.84
68241,"private int getMaxTableWidth(){
  int max=0;
  for (int i=0; i < columnWidths.size(); i++) {
    max+=((Integer)columnWidths.get(i)).intValue();
  }
  return max;
}","private int getMaxTableWidth(){
  int max=0;
  for (int i=0; i < columnWidths.size(); i++) {
    max+=columnWidths.get(i).intValue();
  }
  return max;
}",0.9652996845425869
68242,"public void setColumns(String[] headers,int[] widths){
  clearContents();
  if (headers.length == 0) {
    createDummyTable();
    return;
  }
  for (int i=0; i < headers.length; i++) {
    fHeadings.add(headers[i]);
    columnWidths.add(Integer.valueOf(widths[i]));
  }
  placeComponents();
}","public void setColumns(ColumnBindingInfo[] headers){
  clearContents();
  if (headers.length == 0) {
    createDummyTable();
    return;
  }
  isDummy=false;
  int iW=cnvCells.getVisibleTableWidth() / headers.length;
  if (iW < TableCanvas.SCROLL_HORIZONTAL_STEP) {
    iW=TableCanvas.SCROLL_HORIZONTAL_STEP;
  }
  for (int i=0; i < headers.length; i++) {
    fHeadings.add(headers[i]);
    columnWidths.add(Integer.valueOf(iW));
  }
  placeComponents();
}",0.7076101468624834
68243,"/** 
 * Returns head object of current column, if it is sharing query, the head object should be instance of <code>ColumnBindingInfo</code>, else it is String object.
 * @return
 * @since 2.3
 */
public Object getCurrentColumnHeadObject(){
  return (iColumnIndex != -1) ? fHeadings.get(iColumnIndex) : null;
}","/** 
 * Returns head object of current column, if it is sharing query, the head object should be instance of <code>ColumnBindingInfo</code>, else it is String object.
 * @return column head object
 * @since 2.3
 */
public Object getCurrentColumnHeadObject(){
  return (iColumnIndex != -1) ? fHeadings.get(iColumnIndex) : null;
}",0.9701726844583988
68244,"public void createDummyTable(){
  setColumns(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new int[]{200,200,200});
  layout(true);
  WizardBase.removeException();
}","public void createDummyTable(){
  isDummy=true;
  for (int i=0; i < 3; i++) {
    columnWidths.add(Integer.valueOf(200));
  }
  placeComponents();
  layout(true);
  WizardBase.removeException();
}",0.5326370757180157
68245,"/** 
 * Returns the column heading of the column that the user right-clicked on last. null if user hasn't right-clicked in the table yet. This method is for use to determine the column for which the popup-menu is to be displayed...since the menu is handled externally.
 * @return the last column in which the user has right-clicked.
 */
public String getCurrentColumnHeading(){
  return (iColumnIndex != -1) ? (String)((ColumnBindingInfo)fHeadings.get(iColumnIndex)).getName() : null;
}","/** 
 * Returns the column heading of the column that the user right-clicked on last. null if user hasn't right-clicked in the table yet. This method is for use to determine the column for which the popup-menu is to be displayed...since the menu is handled externally.
 * @return the last column in which the user has right-clicked.
 */
public String getCurrentColumnHeading(){
  return (iColumnIndex != -1) ? fHeadings.get(iColumnIndex).getName() : null;
}",0.9692470837751856
68246,"public List<IBookmarkInfo> getBookmarkInfos(Locale locale) throws EngineException {
  if (!isComplete()) {
    return null;
  }
  ArrayList<IBookmarkInfo> results=new ArrayList<IBookmarkInfo>();
  loadCoreStreamLazily();
  if (indexReader != null) {
    try {
      List<BookmarkContent> bookmarks=indexReader.getBookmarkContents();
      if (bookmarks == null) {
        return null;
      }
      ReportDesignHandle report=this.getReportDesign();
      for (      BookmarkContent bookmark : bookmarks) {
        long designId=bookmark.getElementId();
        DesignElementHandle handle=report.getElementByID(designId);
        if (handle == null)         continue;
        String elementType=handle.getName();
        String displayName=null;
        if (handle instanceof ReportItemHandle) {
          displayName=((ReportItemHandle)handle).getBookmarkDisplayName();
        }
        if (locale != null) {
          if (handle instanceof ReportElementHandle) {
            ReportElementHandle elementHandle=(ReportElementHandle)handle;
            displayName=ModuleUtil.getExternalizedValue(elementHandle,bookmark.getBookmark(),displayName,ULocale.forLocale(locale));
          }
        }
        results.add(new BookmarkInfo(bookmark.getBookmark(),displayName,elementType));
      }
    }
 catch (    IOException ex) {
      throw new EngineException(""String_Node_Str"",ex);
    }
  }
  return results;
}","public List<IBookmarkInfo> getBookmarkInfos(Locale locale) throws EngineException {
  if (!isComplete()) {
    return null;
  }
  ArrayList<IBookmarkInfo> results=new ArrayList<IBookmarkInfo>();
  loadCoreStreamLazily();
  if (indexReader != null) {
    try {
      List<BookmarkContent> bookmarks=indexReader.getBookmarkContents();
      if (bookmarks == null) {
        return null;
      }
      ReportDesignHandle report=this.getReportDesign();
      for (      BookmarkContent bookmark : bookmarks) {
        long designId=bookmark.getElementId();
        DesignElementHandle handle=report.getElementByID(designId);
        if (handle == null)         continue;
        String elementType=handle.getDefn().getName();
        String displayName=null;
        if (handle instanceof ReportItemHandle) {
          displayName=((ReportItemHandle)handle).getBookmarkDisplayName();
        }
        if (locale != null) {
          if (handle instanceof ReportElementHandle) {
            ReportElementHandle elementHandle=(ReportElementHandle)handle;
            displayName=ModuleUtil.getExternalizedValue(elementHandle,bookmark.getBookmark(),displayName,ULocale.forLocale(locale));
          }
        }
        results.add(new BookmarkInfo(bookmark.getBookmark(),displayName,elementType));
      }
    }
 catch (    IOException ex) {
      throw new EngineException(""String_Node_Str"",ex);
    }
  }
  return results;
}",0.9964664310954064
68247,"public SplitResult split(int height,boolean force) throws BirtException {
  assert(height < this.height);
  LineArea result=null;
  Iterator iter=children.iterator();
  while (iter.hasNext()) {
    ContainerArea child=(ContainerArea)iter.next();
    if (iter.hasNext()) {
      if (child.getX() < height) {
        continue;
      }
 else {
        if (child.getMinYPosition() <= height) {
          iter.remove();
          if (result == null) {
            result=cloneArea();
          }
          result.addChild(child);
          child.setParent(result);
        }
 else {
          SplitResult splitChild=child.split(height - child.getY(),force);
          ContainerArea splitChildArea=splitChild.getResult();
          if (splitChildArea != null) {
            if (result == null) {
              result=cloneArea();
            }
            result.addChild(splitChildArea);
            splitChildArea.setParent(result);
          }
        }
      }
    }
 else {
      break;
    }
  }
  if (result != null) {
    int h=0;
    iter=result.getChildren();
    while (iter.hasNext()) {
      ContainerArea child=(ContainerArea)iter.next();
      h=Math.max(h,child.getAllocatedHeight());
    }
    result.setHeight(h);
  }
  if (children.size() > 0) {
    int h=0;
    iter=getChildren();
    while (iter.hasNext()) {
      ContainerArea child=(ContainerArea)iter.next();
      h=Math.max(h,child.getAllocatedHeight());
    }
    setHeight(h);
  }
  if (result != null) {
    return new SplitResult(result,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
 else {
    return SplitResult.SUCCEED_WITH_NULL;
  }
}","public SplitResult split(int height,boolean force) throws BirtException {
  assert(height < this.height);
  LineArea result=null;
  Iterator iter=children.iterator();
  while (iter.hasNext()) {
    ContainerArea child=(ContainerArea)iter.next();
    if (child.getMinYPosition() <= height) {
      iter.remove();
      if (result == null) {
        result=cloneArea();
      }
      result.addChild(child);
      child.setParent(result);
    }
 else {
      SplitResult splitChild=child.split(height - child.getY(),force);
      ContainerArea splitChildArea=splitChild.getResult();
      if (splitChildArea != null) {
        if (result == null) {
          result=cloneArea();
        }
        result.addChild(splitChildArea);
        splitChildArea.setParent(result);
      }
    }
  }
  if (result != null) {
    int h=0;
    iter=result.getChildren();
    while (iter.hasNext()) {
      ContainerArea child=(ContainerArea)iter.next();
      h=Math.max(h,child.getAllocatedHeight());
    }
    result.setHeight(h);
  }
  if (children.size() > 0) {
    int h=0;
    iter=getChildren();
    while (iter.hasNext()) {
      ContainerArea child=(ContainerArea)iter.next();
      h=Math.max(h,child.getAllocatedHeight());
    }
    setHeight(h);
  }
  if (result != null) {
    return new SplitResult(result,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
 else {
    return SplitResult.SUCCEED_WITH_NULL;
  }
}",0.8884462151394422
68248,"private DataSetParameter getStructure(Object structureOrHandle){
  DataSetParameter structure=null;
  if (structureOrHandle instanceof DataSetParameter) {
    structure=(DataSetParameter)structureOrHandle;
  }
 else {
    structure=(DataSetParameter)((DataSetParameterHandle)structureOrHandle).getStructure();
  }
  return structure;
}","protected DataSetParameter getStructure(Object structureOrHandle){
  DataSetParameter structure=null;
  if (structureOrHandle instanceof DataSetParameter) {
    structure=(DataSetParameter)structureOrHandle;
  }
 else {
    structure=(DataSetParameter)((DataSetParameterHandle)structureOrHandle).getStructure();
  }
  return structure;
}",0.9821428571428572
68249,"private void refreshMessage(){
  getContainer().setMessage(DEFAULT_MESSAGE,IMessageProvider.NONE);
  if (!doSaveEmptyParameter(parameters)) {
    getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{this.getNoneValuedParameterName()}),IMessageProvider.ERROR);
  }
}","protected void refreshMessage(){
  getContainer().setMessage(DEFAULT_MESSAGE,IMessageProvider.NONE);
  if (!doSaveEmptyParameter(parameters)) {
    getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{this.getNoneValuedParameterName()}),IMessageProvider.ERROR);
  }
}",0.9798657718120806
68250,"private void doEdit(Object structureOrHandle){
  ParameterInputDialog dlg=new ParameterInputDialog(structureOrHandle,isOdaDataSetHandle);
  if (dlg.open() == Window.OK) {
    viewer.getViewer().refresh();
    refreshMessage();
    refreshLinkedReportParamStatus();
  }
}","protected void doEdit(Object structureOrHandle){
  ParameterInputDialog dlg=new ParameterInputDialog(structureOrHandle,isOdaDataSetHandle);
  if (dlg.open() == Window.OK) {
    viewer.getViewer().refresh();
    refreshMessage();
    refreshLinkedReportParamStatus();
  }
}",0.977859778597786
68251,"private void refreshLinkedReportParamStatus(){
  TableItem items[]=viewer.getViewer().getTable().getItems();
  for (int i=0; i < items.length; i++) {
    if (items[i].getData() instanceof OdaDataSetParameterHandle) {
      OdaDataSetParameterHandle handle=(OdaDataSetParameterHandle)items[i].getData();
      if (handle.getParamName() == null) {
        continue;
      }
      ScalarParameterHandle reportParam=ParameterPageUtil.getScalarParameter(handle.getParamName(),true);
      if (reportParam != null) {
        if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(reportParam.getParamType())) {
          getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{handle.getParamName(),handle.getName()}),IMessageProvider.ERROR);
        }
      }
 else {
        getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{handle.getParamName()}),IMessageProvider.ERROR);
      }
      viewer.getViewer().refresh();
    }
  }
}","protected void refreshLinkedReportParamStatus(){
  TableItem items[]=viewer.getViewer().getTable().getItems();
  for (int i=0; i < items.length; i++) {
    if (items[i].getData() instanceof OdaDataSetParameterHandle) {
      OdaDataSetParameterHandle handle=(OdaDataSetParameterHandle)items[i].getData();
      if (handle.getParamName() == null) {
        continue;
      }
      ScalarParameterHandle reportParam=ParameterPageUtil.getScalarParameter(handle.getParamName(),true);
      if (reportParam != null) {
        if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(reportParam.getParamType())) {
          getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{handle.getParamName(),handle.getName()}),IMessageProvider.ERROR);
        }
      }
 else {
        getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{handle.getParamName(),handle.getName()}),IMessageProvider.ERROR);
      }
      viewer.getViewer().refresh();
    }
  }
}",0.9855936413313464
68252,"/** 
 * get the right direction for different dataset type
 * @return
 */
private String[] getDirections(){
  String[] directions;
  boolean supportInput=((DataSetEditor)this.getContainer()).supportsInParameters();
  boolean supportOutput=((DataSetEditor)this.getContainer()).supportsOutputParameters();
  if (supportInput && supportOutput) {
    directions=new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")};
  }
 else   if (supportInput) {
    directions=new String[]{Messages.getString(""String_Node_Str"")};
  }
 else   if (supportOutput) {
    directions=new String[]{Messages.getString(""String_Node_Str"")};
  }
 else {
    directions=new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")};
  }
  return directions;
}","/** 
 * get the right direction for different dataset type
 * @return
 */
protected String[] getDirections(){
  String[] directions;
  boolean supportInput=((DataSetEditor)this.getContainer()).supportsInParameters();
  boolean supportOutput=((DataSetEditor)this.getContainer()).supportsOutputParameters();
  if (supportInput && supportOutput) {
    directions=new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")};
  }
 else   if (supportInput) {
    directions=new String[]{Messages.getString(""String_Node_Str"")};
  }
 else   if (supportOutput) {
    directions=new String[]{Messages.getString(""String_Node_Str"")};
  }
 else {
    directions=new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")};
  }
  return directions;
}",0.9931113662456946
68253,"/** 
 * Create parameter page control, if the datasetHandle is ODA, add the ""linked with report parameter"" cell.
 * @param parent
 * @return
 */
private Control createParameterPageControl(Composite parent){
  DataSetHandle dataSetHandle=(DataSetHandle)getContainer().getModel();
  isOdaDataSetHandle=ParameterPageUtil.isOdaDataSetHandle(dataSetHandle);
  isJointOrDerivedDataSetHandle=ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle);
  viewer=new PropertyHandleTableViewer(parent,true,true,true,!isJointOrDerivedDataSetHandle);
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setResizable(false);
  column.setWidth(23);
  if (isOdaDataSetHandle) {
    String[] cellLabels=ParameterPageUtil.odaCellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[4]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[5]);
    column.setWidth(180);
  }
 else {
    String[] cellLabels=ParameterPageUtil.cellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    if (isJointOrDerivedDataSetHandle) {
      column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
      column.setText(ParameterPageUtil.odaCellLabels[5]);
      column.setWidth(180);
    }
  }
  viewer.getViewer().setContentProvider(new ParameterViewContentProvider());
  viewer.getViewer().setLabelProvider(new ParameterViewLableProvider(dataSetHandle));
  adjustParameterOnPosition(parameters);
  if (ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle)) {
    viewer.getViewer().setInput(dataSetHandle);
  }
 else {
    viewer.getViewer().setInput(parameters);
  }
  setToolTips();
  if (!isJointOrDerivedDataSetHandle) {
    addRefreshMenu();
    addListeners();
  }
  dataSetHandle.addListener(this);
  return viewer.getControl();
}","/** 
 * Create parameter page control, if the datasetHandle is ODA, add the ""linked with report parameter"" cell.
 * @param parent
 * @return
 */
protected Control createParameterPageControl(Composite parent){
  DataSetHandle dataSetHandle=(DataSetHandle)getContainer().getModel();
  isOdaDataSetHandle=ParameterPageUtil.isOdaDataSetHandle(dataSetHandle);
  isJointOrDerivedDataSetHandle=ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle);
  viewer=new PropertyHandleTableViewer(parent,true,true,true,!isJointOrDerivedDataSetHandle);
  createTableColumns();
  setContentProvider();
  setLabelProvider(dataSetHandle);
  adjustParameterOnPosition(parameters);
  if (ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle)) {
    viewer.getViewer().setInput(dataSetHandle);
  }
 else {
    viewer.getViewer().setInput(parameters);
  }
  setToolTips();
  if (!isJointOrDerivedDataSetHandle) {
    addRefreshMenu();
    addListeners();
  }
  dataSetHandle.addListener(this);
  return viewer.getControl();
}",0.3143438453713123
68254,"private String getTooltipForDataText(String queryText){
  if (isTableSharedBinding()) {
    int index=cmbDefinition.getSelectionIndex();
    if (index >= 0) {
      ColumnBindingInfo cbi=(ColumnBindingInfo)((Object[])cmbDefinition.getData())[index];
      if (cbi.getColumnType() == ColumnBindingInfo.GROUP_COLUMN || cbi.getColumnType() == ColumnBindingInfo.AGGREGATE_COLUMN) {
        return cbi.getTooltip();
      }
    }
  }
  if (queryText.trim().length() == 0) {
    return tooltipWhenBlank;
  }
  if (ChartUIConstants.QUERY_VALUE.equals(queryType) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
    SeriesDefinition baseSd=ChartUIUtil.getBaseSeriesDefinitions(context.getModel()).get(0);
    SeriesGrouping sg=null;
    boolean baseEnabled=baseSd.getGrouping() != null && baseSd.getGrouping().isEnabled();
    if (baseEnabled) {
      sg=baseSd.getGrouping();
      if (seriesdefinition.getGrouping() != null && seriesdefinition.getGrouping().isEnabled()) {
        sg=seriesdefinition.getGrouping();
      }
    }
    if (query.getGrouping() != null && query.getGrouping().isEnabled()) {
      sg=query.getGrouping();
    }
    if (sg != null) {
      StringBuffer sbuf=new StringBuffer();
      sbuf.append(sg.getAggregateExpression());
      sbuf.append(""String_Node_Str"");
      sbuf.append(queryText);
      IAggregateFunction aFunc=null;
      try {
        aFunc=PluginSettings.instance().getAggregateFunction(sg.getAggregateExpression());
      }
 catch (      ChartException e) {
      }
      if (!baseEnabled && aFunc != null && aFunc.getType() == IAggregateFunction.SUMMARY_AGGR) {
        return queryText;
      }
      int count=aFunc != null ? aFunc.getParametersCount() : sg.getAggregateParameters().size();
      for (int i=0; i < sg.getAggregateParameters().size(); i++) {
        if (i < count) {
          sbuf.append(""String_Node_Str"");
          sbuf.append(sg.getAggregateParameters().get(i));
        }
      }
      sbuf.append(""String_Node_Str"");
      return sbuf.toString();
    }
  }
  return queryText;
}","private String getTooltipForDataText(String queryText){
  if (isTableSharedBinding()) {
    int index=cmbDefinition.getSelectionIndex();
    if (index >= 0 && cmbDefinition.getData() != null) {
      ColumnBindingInfo cbi=(ColumnBindingInfo)((Object[])cmbDefinition.getData())[index];
      if (cbi.getColumnType() == ColumnBindingInfo.GROUP_COLUMN || cbi.getColumnType() == ColumnBindingInfo.AGGREGATE_COLUMN) {
        return cbi.getTooltip();
      }
    }
  }
  if (queryText.trim().length() == 0) {
    return tooltipWhenBlank;
  }
  if (ChartUIConstants.QUERY_VALUE.equals(queryType) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
    SeriesDefinition baseSd=ChartUIUtil.getBaseSeriesDefinitions(context.getModel()).get(0);
    SeriesGrouping sg=null;
    boolean baseEnabled=baseSd.getGrouping() != null && baseSd.getGrouping().isEnabled();
    if (baseEnabled) {
      sg=baseSd.getGrouping();
      if (seriesdefinition.getGrouping() != null && seriesdefinition.getGrouping().isEnabled()) {
        sg=seriesdefinition.getGrouping();
      }
    }
    if (query.getGrouping() != null && query.getGrouping().isEnabled()) {
      sg=query.getGrouping();
    }
    if (sg != null) {
      StringBuffer sbuf=new StringBuffer();
      sbuf.append(sg.getAggregateExpression());
      sbuf.append(""String_Node_Str"");
      sbuf.append(queryText);
      IAggregateFunction aFunc=null;
      try {
        aFunc=PluginSettings.instance().getAggregateFunction(sg.getAggregateExpression());
      }
 catch (      ChartException e) {
      }
      if (!baseEnabled && aFunc != null && aFunc.getType() == IAggregateFunction.SUMMARY_AGGR) {
        return queryText;
      }
      int count=aFunc != null ? aFunc.getParametersCount() : sg.getAggregateParameters().size();
      for (int i=0; i < sg.getAggregateParameters().size(); i++) {
        if (i < count) {
          sbuf.append(""String_Node_Str"");
          sbuf.append(sg.getAggregateParameters().get(i));
        }
      }
      sbuf.append(""String_Node_Str"");
      return sbuf.toString();
    }
  }
  return queryText;
}",0.9916567342073898
68255,"public void run(){
  if (eb != null) {
    eb.setBindingName(bindingName,true);
  }
}","public void run(){
  if (eb != null) {
    eb.setBindingName(bindingName,true);
  }
 else {
    exprCodec.setBindingName(bindingName,isCubeMode());
    query.setDefinition(exprCodec.encode());
    ColorPalette.getInstance().putColor(bindingName);
    updateColorAndText();
  }
}",0.4683195592286501
68256,"public void menuAboutToShow(IMenuManager manager){
  if (data instanceof ColumnBindingInfo) {
    addMenu(manager,new HeaderShowAction(((ColumnBindingInfo)data).getName()));
    List<Object> actions=getActionsForTableHead(((ColumnBindingInfo)data).getName());
    for (    Object act : actions) {
      addMenu(manager,act);
    }
  }
 else   if (data instanceof Integer) {
    addMenu(manager,new HeaderShowAction(tablePreview.getCurrentColumnHeading()));
    String expr=ExpressionUtil.createJSRowExpression(tablePreview.getCurrentColumnHeading());
    List<Object> actions=getActionsForTableHead(expr);
    for (    Object act : actions) {
      addMenu(manager,act);
    }
  }
 else   if (data instanceof MeasureHandle) {
    String expr=createCubeExpression();
    if (expr != null) {
      addMenu(manager,getMenuForMeasure(getChartModel(),expr));
    }
  }
 else   if (data instanceof LevelHandle) {
    String expr=createCubeExpression();
    if (expr != null) {
      addMenu(manager,getMenuForDimension(getChartModel(),expr));
    }
  }
}","public void menuAboutToShow(IMenuManager manager){
  if (data instanceof ColumnBindingInfo) {
    addMenu(manager,new HeaderShowAction(((ColumnBindingInfo)data).getName()));
    List<Object> actions=getActionsForTableHead(((ColumnBindingInfo)data).getName());
    for (    Object act : actions) {
      addMenu(manager,act);
    }
  }
 else   if (data instanceof Integer) {
    addMenu(manager,new HeaderShowAction(tablePreview.getCurrentColumnHeading()));
    String expr=tablePreview.getCurrentColumnHeading();
    List<Object> actions=getActionsForTableHead(expr);
    for (    Object act : actions) {
      addMenu(manager,act);
    }
  }
 else   if (data instanceof MeasureHandle) {
    String expr=createCubeExpression();
    if (expr != null) {
      addMenu(manager,getMenuForMeasure(getChartModel(),expr));
    }
  }
 else   if (data instanceof LevelHandle) {
    String expr=createCubeExpression();
    if (expr != null) {
      addMenu(manager,getMenuForDimension(getChartModel(),expr));
    }
  }
}",0.5354713313896987
68257,"private MenuManager createMenuManager(final Object data){
  MenuManager menuManager=new MenuManager();
  menuManager.setRemoveAllWhenShown(true);
  menuManager.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      if (data instanceof ColumnBindingInfo) {
        addMenu(manager,new HeaderShowAction(((ColumnBindingInfo)data).getName()));
        List<Object> actions=getActionsForTableHead(((ColumnBindingInfo)data).getName());
        for (        Object act : actions) {
          addMenu(manager,act);
        }
      }
 else       if (data instanceof Integer) {
        addMenu(manager,new HeaderShowAction(tablePreview.getCurrentColumnHeading()));
        String expr=ExpressionUtil.createJSRowExpression(tablePreview.getCurrentColumnHeading());
        List<Object> actions=getActionsForTableHead(expr);
        for (        Object act : actions) {
          addMenu(manager,act);
        }
      }
 else       if (data instanceof MeasureHandle) {
        String expr=createCubeExpression();
        if (expr != null) {
          addMenu(manager,getMenuForMeasure(getChartModel(),expr));
        }
      }
 else       if (data instanceof LevelHandle) {
        String expr=createCubeExpression();
        if (expr != null) {
          addMenu(manager,getMenuForDimension(getChartModel(),expr));
        }
      }
    }
    private void addMenu(    IMenuManager manager,    Object item){
      if (item instanceof IAction) {
        manager.add((IAction)item);
      }
 else       if (item instanceof IContributionItem) {
        manager.add((IContributionItem)item);
      }
 else       if (item instanceof List<?>) {
        for (        Object o : (List<?>)item) {
          addMenu(manager,o);
        }
      }
      if (getDataServiceProvider().isPartChart()) {
        if (item instanceof IAction) {
          ((IAction)item).setEnabled(false);
        }
      }
    }
  }
);
  return menuManager;
}","private MenuManager createMenuManager(final Object data){
  MenuManager menuManager=new MenuManager();
  menuManager.setRemoveAllWhenShown(true);
  menuManager.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      if (data instanceof ColumnBindingInfo) {
        addMenu(manager,new HeaderShowAction(((ColumnBindingInfo)data).getName()));
        List<Object> actions=getActionsForTableHead(((ColumnBindingInfo)data).getName());
        for (        Object act : actions) {
          addMenu(manager,act);
        }
      }
 else       if (data instanceof Integer) {
        addMenu(manager,new HeaderShowAction(tablePreview.getCurrentColumnHeading()));
        String expr=tablePreview.getCurrentColumnHeading();
        List<Object> actions=getActionsForTableHead(expr);
        for (        Object act : actions) {
          addMenu(manager,act);
        }
      }
 else       if (data instanceof MeasureHandle) {
        String expr=createCubeExpression();
        if (expr != null) {
          addMenu(manager,getMenuForMeasure(getChartModel(),expr));
        }
      }
 else       if (data instanceof LevelHandle) {
        String expr=createCubeExpression();
        if (expr != null) {
          addMenu(manager,getMenuForDimension(getChartModel(),expr));
        }
      }
    }
    private void addMenu(    IMenuManager manager,    Object item){
      if (item instanceof IAction) {
        manager.add((IAction)item);
      }
 else       if (item instanceof IContributionItem) {
        manager.add((IContributionItem)item);
      }
 else       if (item instanceof List<?>) {
        for (        Object o : (List<?>)item) {
          addMenu(manager,o);
        }
      }
      if (getDataServiceProvider().isPartChart()) {
        if (item instanceof IAction) {
          ((IAction)item).setEnabled(false);
        }
      }
    }
  }
);
  return menuManager;
}",0.9902112313240596
68258,"ValueYSeriesAction(Query query,String bindingName){
  super(getOrthogonalSeriesTitle(getChartModel()));
  this.bindingName=bindingName;
  this.eb=DataDefinitionTextManager.getInstance().findExpressionButton(query);
  boolean enabled=eb != null;
  if (dataProvider.isSharedBinding() || dataProvider.isInheritColumnsGroups()) {
    Object obj=getCurrentColumnHeadObject();
    if (obj instanceof ColumnBindingInfo && ((ColumnBindingInfo)obj).getColumnType() == ColumnBindingInfo.GROUP_COLUMN) {
      enabled=false;
    }
  }
  setEnabled(enabled);
}","ValueYSeriesAction(Query query,String bindingName){
  super(getOrthogonalSeriesTitle(getChartModel()));
  this.bindingName=bindingName;
  this.eb=DataDefinitionTextManager.getInstance().findExpressionButton(query);
  this.query=query;
  boolean enabled=true;
  if (dataProvider.isSharedBinding() || dataProvider.isInheritColumnsGroups()) {
    Object obj=getCurrentColumnHeadObject();
    if (obj instanceof ColumnBindingInfo && ((ColumnBindingInfo)obj).getColumnType() == ColumnBindingInfo.GROUP_COLUMN) {
      enabled=false;
    }
  }
  setEnabled(enabled);
}",0.9405405405405406
68259,"public void createControl(Composite parent){
  getDataSheet().setChartModel(getChartModel());
  getDataSheet().addListener(this);
  if (topControl == null || topControl.isDisposed()) {
    topControl=new Composite(parent,SWT.NONE);
    GridLayout gridLayout=new GridLayout(3,false);
    gridLayout.marginWidth=0;
    gridLayout.marginHeight=0;
    topControl.setLayout(gridLayout);
    topControl.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL));
    dynamicArea=createDataComponentsUI();
    getCustomizeUI().init();
    foSashForm=new SashForm(topControl,SWT.VERTICAL);
{
      GridLayout layout=new GridLayout();
      foSashForm.setLayout(layout);
      GridData gridData=new GridData(GridData.FILL_BOTH);
      gridData.widthHint=800;
      foSashForm.setLayoutData(gridData);
    }
    foSashForm.addListener(SWT.Resize,this);
    placeComponents();
    previewPainter=createPreviewPainter();
  }
 else {
    customizeUI();
  }
  resize();
  if (getChartModel() instanceof ChartWithAxes) {
    checkDataTypeForChartWithAxes();
  }
  doPreview();
  DataDefinitionTextManager.getInstance().refreshAll();
  ChartUIUtil.checkGroupType((ChartWizardContext)getContext(),getChartModel());
  ChartUIUtil.checkAggregateType((ChartWizardContext)getContext());
  bindHelp();
}","public void createControl(Composite parent){
  getDataSheet().setChartModel(getChartModel());
  getDataSheet().addListener(this);
  if (topControl == null || topControl.isDisposed()) {
    topControl=new Composite(parent,SWT.NONE);
    GridLayout gridLayout=new GridLayout(3,false);
    gridLayout.marginWidth=0;
    gridLayout.marginHeight=0;
    topControl.setLayout(gridLayout);
    topControl.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL));
    dynamicArea=createDataComponentsUI();
    getCustomizeUI().init();
    foSashForm=new SashForm(topControl,SWT.VERTICAL);
{
      GridLayout layout=new GridLayout();
      foSashForm.setLayout(layout);
      GridData gridData=new GridData(GridData.FILL_BOTH);
      gridData.widthHint=800;
      foSashForm.setLayoutData(gridData);
    }
    foSashForm.addListener(SWT.Resize,this);
    placeComponents();
    previewPainter=createPreviewPainter();
  }
 else {
    customizeUI();
  }
  resize();
  if (getChartModel() instanceof ChartWithAxes) {
    checkDataTypeForChartWithAxes();
  }
  doPreview();
  DataDefinitionTextManager.getInstance().refreshAll();
  DataDefinitionTextManager.getInstance().setContext((IChartWizardContext)getContext());
  ChartUIUtil.checkGroupType((ChartWizardContext)getContext(),getChartModel());
  ChartUIUtil.checkAggregateType((ChartWizardContext)getContext());
  bindHelp();
}",0.9669267930137496
68260,"public void dispose(){
  super.dispose();
  if (previewPainter != null) {
    previewPainter.dispose();
  }
  previewPainter=null;
  if (dynamicArea != null) {
    dynamicArea.dispose();
  }
  dynamicArea=null;
  ColorPalette.getInstance().restore();
  DataDefinitionTextManager.getInstance().removeAll();
}","public void dispose(){
  super.dispose();
  if (previewPainter != null) {
    previewPainter.dispose();
  }
  previewPainter=null;
  if (dynamicArea != null) {
    dynamicArea.dispose();
  }
  dynamicArea=null;
  ColorPalette.getInstance().restore();
  DataDefinitionTextManager.getInstance().removeAll();
  DataDefinitionTextManager.getInstance().setContext(null);
}",0.9109792284866468
68261,"/** 
 * Updates the color registry and refresh all background color of the text field
 * @param seriesIndex -1 means all series under selected axis
 */
private void updateColorRegistry(int seriesIndex){
  List<Query> dataDefinitions=null;
  if (seriesIndex > -1) {
    dataDefinitions=seriesDefns.get(seriesIndex).getDesignTimeSeries().getDataDefinition();
  }
 else {
    List<SeriesDefinition> allSeriesDefns=ChartUIUtil.getAllOrthogonalSeriesDefinitions(getChart());
    dataDefinitions=new ArrayList<Query>();
    for (int i=0; i < allSeriesDefns.size(); i++) {
      dataDefinitions.addAll(allSeriesDefns.get(i).getDesignTimeSeries().getDataDefinition());
    }
  }
  Map<String,Integer> queryMap=new HashMap<String,Integer>();
  for (int i=0; i < dataDefinitions.size(); i++) {
    String expression=dataDefinitions.get(i).getDefinition();
    if (queryMap.containsKey(expression)) {
      int expCount=queryMap.get(expression).intValue();
      queryMap.put(expression,Integer.valueOf(expCount++));
    }
 else {
      queryMap.put(expression,Integer.valueOf(1));
    }
  }
  for (Iterator<Entry<String,Integer>> iterator=queryMap.entrySet().iterator(); iterator.hasNext(); ) {
    Entry<String,Integer> entry=iterator.next();
    String expression=entry.getKey();
    if (DataDefinitionTextManager.getInstance().getNumberOfSameDataDefinition(expression) == entry.getValue().intValue()) {
      ColorPalette.getInstance().retrieveColor(expression);
    }
  }
  final Event e=new Event();
  e.data=DataDefinitionSelector.this;
  e.type=IChartDataSheet.EVENT_QUERY;
  e.detail=IChartDataSheet.DETAIL_UPDATE_COLOR;
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      wizardContext.getDataSheet().notifyListeners(e);
    }
  }
);
}","/** 
 * Updates the color registry and refresh all background color of the text field
 * @param seriesIndex -1 means all series under selected axis
 */
private void updateColorRegistry(int seriesIndex){
  List<Query> dataDefinitions=null;
  if (seriesIndex > -1) {
    dataDefinitions=seriesDefns.get(seriesIndex).getDesignTimeSeries().getDataDefinition();
  }
 else {
    List<SeriesDefinition> allSeriesDefns=ChartUIUtil.getAllOrthogonalSeriesDefinitions(getChart());
    dataDefinitions=new ArrayList<Query>();
    for (int i=0; i < allSeriesDefns.size(); i++) {
      dataDefinitions.addAll(allSeriesDefns.get(i).getDesignTimeSeries().getDataDefinition());
    }
  }
  Map<String,Integer> queryMap=new HashMap<String,Integer>();
  for (int i=0; i < dataDefinitions.size(); i++) {
    String expression=dataDefinitions.get(i).getDefinition();
    if (queryMap.containsKey(expression)) {
      int expCount=queryMap.get(expression).intValue();
      queryMap.put(expression,Integer.valueOf(expCount++));
    }
 else {
      queryMap.put(expression,Integer.valueOf(1));
    }
  }
  for (Iterator<Entry<String,Integer>> iterator=queryMap.entrySet().iterator(); iterator.hasNext(); ) {
    Entry<String,Integer> entry=iterator.next();
    String expression=entry.getKey();
    if (DataDefinitionTextManager.getInstance().getNumberOfSameDataDefinition(expression) == entry.getValue().intValue()) {
      ColorPalette.getInstance().retrieveColor(expression);
    }
  }
  final Event e=new Event();
  e.data=DataDefinitionSelector.this;
  e.type=IChartDataSheet.EVENT_QUERY;
  e.detail=IChartDataSheet.DETAIL_UPDATE_COLOR_AND_TEXT;
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      wizardContext.getDataSheet().notifyListeners(e);
    }
  }
);
}",0.9974497024652876
68262,"private Collection<String> getAllUsedBindingNames(){
  Set<String> set=new HashSet<String>();
  for (  IQueryExpressionManager iqem : textCollection.values()) {
    IExpressionButton eb=iqem.getExpressionButton();
    if (eb != null) {
      String name=exprCodec.getBindingName(eb.getExpression());
      if (name != null) {
        set.add(name);
      }
    }
  }
  return set;
}","private Collection<String> getAllUsedBindingNames(){
  Set<String> set=new HashSet<String>(5);
  for (  IQueryExpressionManager iqem : textCollection.values()) {
    IExpressionButton eb=iqem.getExpressionButton();
    if (eb != null) {
      String name=exprCodec.getBindingName(eb.getExpression());
      if (name != null) {
        set.add(name);
      }
    }
  }
  if (context != null) {
    set.addAll(((DefaultChartDataSheet)context.getDataSheet()).getAllValueDefinitions());
  }
  return set;
}",0.8416289592760181
68263,"public void addDataDefinitionText(Control text,IQueryExpressionManager queryManager){
  textCollection.put(text,queryManager);
  text.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      if (e.widget instanceof Control) {
        removeDataDefinitionText((Control)e.widget);
      }
    }
  }
);
}","public void addDataDefinitionText(Control text,IQueryExpressionManager queryManager){
  textCollection.put(text,queryManager);
  updateControlBackground(text,queryManager.getQuery().getDefinition());
  text.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      if (e.widget instanceof Control) {
        removeDataDefinitionText((Control)e.widget);
      }
    }
  }
);
}",0.9040735873850198
68264,"/** 
 * @param dataSet
 * @param resultSet
 * @throws BirtException
 */
private void saveResultToDataItems(DataSetHandle dataSet,IQueryResults resultSet) throws BirtException {
  IResultMetaData metaData=resultSet.getResultMetaData();
  int columnCount=0;
  if (metaData != null)   columnCount=metaData.getColumnCount();
  DataSetViewData[] columns=new DataSetViewData[columnCount];
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int n=0; n < columns.length; n++) {
    orgColumnNameSet.add(metaData.getColumnName(n + 1));
  }
  for (int n=0; n < columns.length; n++) {
    columns[n]=new DataSetViewData();
    columns[n].setParent(dataSet);
    columns[n].setDataType(metaData.getColumnType(n + 1));
    columns[n].setDataTypeName(metaData.getColumnTypeName(n + 1));
    columns[n].setPosition(n + 1);
    columns[n].setAlias(metaData.getColumnAlias(n + 1));
    columns[n].setComputedColumn(metaData.isComputedColumn(n + 1));
    String columnName=metaData.getColumnName(n + 1);
    String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,n);
    columns[n].setDataSetColumnName(uniqueColumnName);
    uniqueColumnNameSet.add(uniqueColumnName);
    if (!uniqueColumnName.equals(columnName))     updateModelColumn(dataSet,columns[n]);
  }
  updateModel(dataSet,columns);
  htColumns.put(dataSet,columns);
}","/** 
 * @param dataSet
 * @param resultSet
 * @throws BirtException
 */
private void saveResultToDataItems(DataSetHandle dataSet,IQueryResults resultSet) throws BirtException {
  IResultMetaData metaData=resultSet.getResultMetaData();
  int columnCount=0;
  if (metaData != null)   columnCount=metaData.getColumnCount();
  DataSetViewData[] columns=new DataSetViewData[columnCount];
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int n=0; n < columns.length; n++) {
    orgColumnNameSet.add(metaData.getColumnName(n + 1));
  }
  for (int n=0; n < columns.length; n++) {
    columns[n]=new DataSetViewData();
    columns[n].setParent(dataSet);
    columns[n].setDataType(metaData.getColumnType(n + 1));
    columns[n].setDataTypeName(metaData.getColumnTypeName(n + 1));
    columns[n].setPosition(n + 1);
    columns[n].setAlias(metaData.getColumnAlias(n + 1));
    columns[n].setComputedColumn(metaData.isComputedColumn(n + 1));
    String columnName=metaData.getColumnName(n + 1);
    String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,n);
    columns[n].setDataSetColumnName(uniqueColumnName);
    uniqueColumnNameSet.add(uniqueColumnName);
    ColumnHintHandle hint=findColumnHint(dataSet,columns[n].getName());
    if (hint != null) {
      columns[n].setAnalysis(hint.getAnalysis());
      columns[n].setACLExpression(hint.getACLExpression());
      columns[n].setFormat(hint.getFormat());
      columns[n].setDisplayLength(hint.getDisplayLength());
      columns[n].setHeading(hint.getHeading());
      columns[n].setHelpText(hint.getHelpText());
      columns[n].setHorizontalAlign(hint.getHorizontalAlign());
      columns[n].setTextFormat(hint.getTextFormat());
      columns[n].setDescription(hint.getDescription());
    }
    if (!uniqueColumnName.equals(columnName))     updateModelColumn(dataSet,columns[n]);
  }
  updateModel(dataSet,columns);
  htColumns.put(dataSet,columns);
}",0.8226190476190476
68265,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}",0.8725490196078431
68266,"/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
    }
  }
  return items;
}","/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
    }
  }
  return items;
}",0.8490878938640133
68267,"/** 
 * Rounds a number up, away from zero, to the nearest multiple of significance.
 * @param n
 * @param significance
 * @return
 */
private static double ceiling(double n,double significance){
  if (significance == 0 || n == 0)   return 0;
  if (n * significance < 0)   throw new IllegalArgumentException(Messages.getFormattedString(""String_Node_Str"",new Object[]{significance,n}));
  if (Math.abs(n) < Math.abs(significance))   return significance;
  double multiple=Math.ceil(n / significance);
  return multiple * significance;
}","/** 
 * Rounds a number up, away from zero, to the nearest multiple of significance.
 * @param n
 * @param significance
 * @return
 */
private static double ceiling(double n,double significance){
  if (significance == 0 || n == 0)   return 0;
  if (n * significance < 0)   throw new IllegalArgumentException(Messages.getFormattedString(""String_Node_Str"",new Object[]{significance,n}));
  if (Math.abs(n) < Math.abs(significance))   return significance;
  double multiple=Math.ceil(n / significance);
  long multiIntValue=Math.round(multiple);
  int divisor=1;
  double temp=significance;
  double MIN_VALUE=1.0E-10;
  for (int i=1; i < 30; i++) {
    divisor=divisor * 10;
    if (Math.abs(Math.round(temp * divisor) - temp * divisor) <= MIN_VALUE)     break;
  }
  return multiIntValue * (significance * divisor) / divisor;
}",0.7391623806024982
68268,"/** 
 * Creates adaptor based on Model OdaDataSourceHandle.
 * @param source model handle
 * @param propBindingScope Javascript scope in which to evaluate property bindings. If null,property bindings are not evaluated.
 */
public OdaDataSourceAdapter(OdaDataSourceHandle source,Scriptable propBindingScope,DataEngineContext dtCotnext) throws BirtException {
  super(source.getQualifiedName());
  bindingScope=propBindingScope;
  DataAdapterUtil.adaptBaseDataSource(source,this);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new AdapterException(ResourceConstants.DATASOURCE_EXID_ERROR,source.getName());
  }
  setExtensionID(driverName);
  Map staticProps=DataAdapterUtil.getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (bindingScope != null && bindingExpr != null && bindingExpr.length() > 0 && DataSessionContext.MODE_UPDATE != dtCotnext.getMode()) {
        propValue=JavascriptEvalUtil.evaluateScript(null,bindingScope,bindingExpr,ScriptExpression.defaultID,0).toString();
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(this);
}","/** 
 * Creates adaptor based on Model OdaDataSourceHandle.
 * @param source model handle
 * @param propBindingScope Javascript scope in which to evaluate property bindings. If null,property bindings are not evaluated.
 */
public OdaDataSourceAdapter(OdaDataSourceHandle source,Scriptable propBindingScope,DataEngineContext dtCotnext) throws BirtException {
  super(source.getQualifiedName());
  bindingScope=propBindingScope;
  DataAdapterUtil.adaptBaseDataSource(source,this);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new AdapterException(ResourceConstants.DATASOURCE_EXID_ERROR,source.getName());
  }
  setExtensionID(driverName);
  Map staticProps=DataAdapterUtil.getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (bindingScope != null && bindingExpr != null && bindingExpr.length() > 0 && DataSessionContext.MODE_UPDATE != dtCotnext.getMode()) {
        Object value=JavascriptEvalUtil.evaluateScript(null,bindingScope,bindingExpr,ScriptExpression.defaultID,0);
        propValue=(value == null ? null : value.toString());
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(this);
}",0.9778607628700988
68269,"/** 
 * @param aggregations
 * @param resultSet
 * @param stopSign
 * @throws IOException
 * @throws DataException
 * @throws BirtException
 */
private void applyAggrFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,StopSign stopSign) throws IOException, DataException, BirtException {
  boolean recalculate=false;
  if (!aggrMeasureFilters.isEmpty()) {
    AggrMeasureFilterHelper filter=new AggrMeasureFilterHelper(cube,resultSet);
    cubePosFilters=filter.getCubePosFilters(aggrMeasureFilters);
    recalculate=true;
  }
  if (!aggrFilterHelpers.isEmpty()) {
    AggregationFilterHelper filterHelper=new AggregationFilterHelper(cube,aggrFilterHelpers);
    List newFilters=filterHelper.generateLevelFilters(aggregations,resultSet);
    if (newFilters == null) {
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].clear();
        recalculate=false;
      }
    }
 else {
      levelFilters.addAll(newFilters);
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].close();
        resultSet[i]=null;
      }
      recalculate=true;
    }
  }
  if (recalculate) {
    IAggregationResultSet[] temp=onePassExecute(aggregations,stopSign);
    System.arraycopy(temp,0,resultSet,0,resultSet.length);
  }
}","/** 
 * @param aggregations
 * @param resultSet
 * @param stopSign
 * @throws IOException
 * @throws DataException
 * @throws BirtException
 */
private void applyAggrFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,StopSign stopSign) throws IOException, DataException, BirtException {
  boolean recalculate=false;
  if (!aggrMeasureFilters.isEmpty()) {
    AggrMeasureFilterHelper filter=new AggrMeasureFilterHelper(cube,resultSet);
    cubePosFilters=filter.getCubePosFilters(aggrMeasureFilters);
    if (cubePosFilters == null) {
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].clear();
      }
      return;
    }
    recalculate=true;
  }
  if (!aggrFilterHelpers.isEmpty()) {
    AggregationFilterHelper filterHelper=new AggregationFilterHelper(cube,aggrFilterHelpers);
    List newFilters=filterHelper.generateLevelFilters(aggregations,resultSet);
    if (newFilters == null) {
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].clear();
        recalculate=false;
      }
    }
 else {
      levelFilters.addAll(newFilters);
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].close();
        resultSet[i]=null;
      }
      recalculate=true;
    }
  }
  if (recalculate) {
    IAggregationResultSet[] temp=onePassExecute(aggregations,stopSign);
    System.arraycopy(temp,0,resultSet,0,resultSet.length);
  }
}",0.9472897196261684
68270,"/** 
 * @param resultSet
 * @throws DataException
 * @throws IOException
 */
public List getCubePosFilters(List jsMeasureEvalFilterHelper) throws DataException, IOException {
  String[] aggregationNames=populateAggregationNames(jsMeasureEvalFilterHelper);
  List cubePosFilterList=new ArrayList();
  for (int i=0; i < resultSet.length; i++) {
    if (hasDefinition(resultSet[i],aggregationNames)) {
      Map levelMap=populateLevelMap(resultSet[i]);
      final int dimSize=levelMap.size();
      List[] levelListArray=new List[dimSize];
      levelMap.values().toArray(levelListArray);
      String[] dimensionNames=new String[dimSize];
      levelMap.keySet().toArray(dimensionNames);
      IDiskArray rowIndexArray=collectValidRowIndexArray(resultSet[i],jsMeasureEvalFilterHelper,aggregationNames);
      CubePosFilter cubePosFilter=null;
      ;
      if (rowIndexArray.size() <= resultSet[i].length() / 2) {
        cubePosFilter=getValidPosFilter(resultSet[i],rowIndexArray,dimensionNames,levelListArray);
      }
 else {
        cubePosFilter=getInvalidPosFilter(resultSet[i],rowIndexArray,dimensionNames,levelListArray);
      }
      cubePosFilterList.add(cubePosFilter);
    }
  }
  return cubePosFilterList;
}","/** 
 * @param resultSet
 * @throws DataException
 * @throws IOException
 */
public List getCubePosFilters(List jsMeasureEvalFilterHelper) throws DataException, IOException {
  String[] aggregationNames=populateAggregationNames(jsMeasureEvalFilterHelper);
  List cubePosFilterList=new ArrayList();
  for (int i=0; i < resultSet.length; i++) {
    if (hasDefinition(resultSet[i],aggregationNames)) {
      if (resultSet[i].getAllLevels() == null || resultSet[i].getAllLevels().length == 0) {
        AggregationRowAccessor rowAccessor=new AggregationRowAccessor(resultSet[i]);
        for (int j=0; j < jsMeasureEvalFilterHelper.size(); j++) {
          if (resultSet[i].getAggregationIndex(aggregationNames[j]) >= 0) {
            IAggrMeasureFilterEvalHelper filterHelper=(IAggrMeasureFilterEvalHelper)jsMeasureEvalFilterHelper.get(j);
            if (!filterHelper.evaluateFilter(rowAccessor)) {
              return null;
            }
          }
        }
        continue;
      }
      Map levelMap=populateLevelMap(resultSet[i]);
      final int dimSize=levelMap.size();
      List[] levelListArray=new List[dimSize];
      levelMap.values().toArray(levelListArray);
      String[] dimensionNames=new String[dimSize];
      levelMap.keySet().toArray(dimensionNames);
      IDiskArray rowIndexArray=collectValidRowIndexArray(resultSet[i],jsMeasureEvalFilterHelper,aggregationNames);
      CubePosFilter cubePosFilter=null;
      ;
      if (rowIndexArray.size() <= resultSet[i].length() / 2) {
        cubePosFilter=getValidPosFilter(resultSet[i],rowIndexArray,dimensionNames,levelListArray);
      }
 else {
        cubePosFilter=getInvalidPosFilter(resultSet[i],rowIndexArray,dimensionNames,levelListArray);
      }
      cubePosFilterList.add(cubePosFilter);
    }
  }
  return cubePosFilterList;
}",0.8058124174372523
68271,"synchronized public void close() throws IOException {
  try {
    closeFiles();
    if (!readOnly && !removeOnExit) {
      writeProperties();
      entryTable.write();
      nodeTable.write();
      freeTable.write();
      nodeTable.write(NodeTable.INODE_FREE_TABLE);
      writeHeader();
    }
  }
  finally {
    try {
      cacheManager.clear();
    }
  finally {
      if (rf != null) {
        rf.close();
        rf=null;
      }
      if (removeOnExit) {
        new File(fileName).delete();
      }
    }
  }
}","synchronized public void close() throws IOException {
  try {
    closeFiles();
    if (!readOnly && !removeOnExit) {
      writeProperties();
      entryTable.write();
      nodeTable.write();
      freeTable.write();
      nodeTable.write(NodeTable.INODE_FREE_TABLE);
      cacheManager.clear();
      writeHeader();
    }
  }
  finally {
    if (rf != null) {
      rf.close();
      rf=null;
    }
    if (removeOnExit) {
      new File(fileName).delete();
    }
  }
}",0.8528225806451613
68272,"private void generateOutputParmsBindings(DataSetHandle datasetHandle){
  List<DataSetParameterHandle> outputParams=new ArrayList<DataSetParameterHandle>();
  for (Iterator iter=datasetHandle.parametersIterator(); iter.hasNext(); ) {
    Object obj=iter.next();
    if ((obj instanceof DataSetParameterHandle) && ((DataSetParameterHandle)obj).isOutput() == true) {
      outputParams.add((DataSetParameterHandle)obj);
    }
  }
  int ret=-1;
  if (outputParams.size() > 0) {
    MessageDialog prefDialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.QUESTION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
    ret=prefDialog.open();
  }
  if (ret == 0)   for (int i=0; i < outputParams.size(); i++) {
    DataSetParameterHandle param=outputParams.get(i);
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(bindingObject,param.getName());
    bindingColumn.setDataType(param.getDataType());
    String groupType=DEUtil.getGroupControlType(bindingObject);
    List groupList=DEUtil.getGroups(bindingObject);
    ExpressionUtility.setBindingColumnExpression(param,bindingColumn);
    if (bindingObject instanceof ReportItemHandle) {
      try {
        ((ReportItemHandle)bindingObject).addColumnBinding(bindingColumn,false);
      }
 catch (      SemanticException e) {
        ExceptionUtil.handle(e);
      }
      continue;
    }
    if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
      if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))       bindingColumn.setAggregrateOn(((GroupHandle)groupList.get(0)).getName());
 else       if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))       bindingColumn.setAggregrateOn(null);
    }
  }
}","private void generateOutputParmsBindings(DataSetHandle datasetHandle){
  List<DataSetParameterHandle> outputParams=new ArrayList<DataSetParameterHandle>();
  for (Iterator iter=datasetHandle.parametersIterator(); iter.hasNext(); ) {
    Object obj=iter.next();
    if ((obj instanceof DataSetParameterHandle) && ((DataSetParameterHandle)obj).isOutput() == true) {
      outputParams.add((DataSetParameterHandle)obj);
    }
  }
  int ret=-1;
  if (outputParams.size() > 0) {
    MessageDialog prefDialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.QUESTION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
    ret=prefDialog.open();
  }
  if (ret == 0)   for (int i=0; i < outputParams.size(); i++) {
    DataSetParameterHandle param=outputParams.get(i);
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(bindingObject,param.getName());
    bindingColumn.setDataType(param.getDataType());
    String groupType=DEUtil.getGroupControlType(bindingObject);
    List groupList=DEUtil.getGroups(bindingObject);
    ExpressionUtility.setBindingColumnExpression(param,bindingColumn,true);
    if (bindingObject instanceof ReportItemHandle) {
      try {
        ((ReportItemHandle)bindingObject).addColumnBinding(bindingColumn,false);
      }
 catch (      SemanticException e) {
        ExceptionUtil.handle(e);
      }
      continue;
    }
    if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
      if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))       bindingColumn.setAggregrateOn(((GroupHandle)groupList.get(0)).getName());
 else       if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))       bindingColumn.setAggregrateOn(null);
    }
  }
}",0.9986176389272878
68273,"public void initialize() throws BirtException {
  hasStyle=false;
  boxStyle=BoxStyle.DEFAULT;
  localProperties=LocalProperties.DEFAULT;
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  if (parent.content != null) {
    if (CSSConstants.CSS_RTL_VALUE.equals(parent.content.getComputedStyle().getDirection()))     baseLevel=Bidi.DIRECTION_RIGHT_TO_LEFT;
  }
}","public void initialize() throws BirtException {
  hasStyle=false;
  boxStyle=BoxStyle.DEFAULT;
  localProperties=LocalProperties.DEFAULT;
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  width=maxAvaWidth;
  if (parent.content != null) {
    if (CSSConstants.CSS_RTL_VALUE.equals(parent.content.getComputedStyle().getDirection()))     baseLevel=Bidi.DIRECTION_RIGHT_TO_LEFT;
  }
}",0.9718120805369128
68274,"private void generateOutputParmsBindings(DataSetHandle datasetHandle){
  List<DataSetParameterHandle> outputParams=new ArrayList<DataSetParameterHandle>();
  for (Iterator iter=datasetHandle.parametersIterator(); iter.hasNext(); ) {
    Object obj=iter.next();
    if ((obj instanceof DataSetParameterHandle) && ((DataSetParameterHandle)obj).isOutput() == true) {
      outputParams.add((DataSetParameterHandle)obj);
    }
  }
  int ret=-1;
  if (outputParams.size() > 0) {
    MessageDialog prefDialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.QUESTION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
    ret=prefDialog.open();
  }
  if (ret == 0)   for (int i=0; i < outputParams.size(); i++) {
    DataSetParameterHandle param=outputParams.get(i);
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(bindingObject,param.getName());
    bindingColumn.setDataType(param.getDataType());
    String groupType=DEUtil.getGroupControlType(bindingObject);
    List groupList=DEUtil.getGroups(bindingObject);
    ExpressionUtility.setBindingColumnExpression(param,bindingColumn);
    if (bindingObject instanceof ReportItemHandle) {
      try {
        ((ReportItemHandle)bindingObject).addColumnBinding(bindingColumn,false);
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
      continue;
    }
    if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
      if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))       bindingColumn.setAggregrateOn(((GroupHandle)groupList.get(0)).getName());
 else       if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))       bindingColumn.setAggregrateOn(null);
    }
  }
}","private void generateOutputParmsBindings(DataSetHandle datasetHandle){
  List<DataSetParameterHandle> outputParams=new ArrayList<DataSetParameterHandle>();
  for (Iterator iter=datasetHandle.parametersIterator(); iter.hasNext(); ) {
    Object obj=iter.next();
    if ((obj instanceof DataSetParameterHandle) && ((DataSetParameterHandle)obj).isOutput() == true) {
      outputParams.add((DataSetParameterHandle)obj);
    }
  }
  int ret=-1;
  if (outputParams.size() > 0) {
    MessageDialog prefDialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.QUESTION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
    ret=prefDialog.open();
  }
  if (ret == 0)   for (int i=0; i < outputParams.size(); i++) {
    DataSetParameterHandle param=outputParams.get(i);
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(bindingObject,param.getName());
    bindingColumn.setDataType(param.getDataType());
    String groupType=DEUtil.getGroupControlType(bindingObject);
    List groupList=DEUtil.getGroups(bindingObject);
    ExpressionUtility.setBindingColumnExpression(param,bindingColumn,true);
    if (bindingObject instanceof ReportItemHandle) {
      try {
        ((ReportItemHandle)bindingObject).addColumnBinding(bindingColumn,false);
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
      continue;
    }
    if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
      if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))       bindingColumn.setAggregrateOn(((GroupHandle)groupList.get(0)).getName());
 else       if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))       bindingColumn.setAggregrateOn(null);
    }
  }
}",0.9986199282362684
68275,"private void generateOutputParmsBindings(DataSetHandle datasetHandle){
  List<DataSetParameterHandle> outputParams=new ArrayList<DataSetParameterHandle>();
  for (Iterator iter=datasetHandle.parametersIterator(); iter.hasNext(); ) {
    Object obj=iter.next();
    if ((obj instanceof DataSetParameterHandle) && ((DataSetParameterHandle)obj).isOutput() == true) {
      outputParams.add((DataSetParameterHandle)obj);
    }
  }
  int ret=-1;
  if (outputParams.size() > 0) {
    MessageDialog prefDialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.QUESTION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
    ret=prefDialog.open();
  }
  if (ret == 0)   for (int i=0; i < outputParams.size(); i++) {
    DataSetParameterHandle param=outputParams.get(i);
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(inputElement,param.getName());
    bindingColumn.setDataType(param.getDataType());
    ExpressionUtility.setBindingColumnExpression(param,bindingColumn);
    try {
      inputElement.addColumnBinding(bindingColumn,false);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
    continue;
  }
}","private void generateOutputParmsBindings(DataSetHandle datasetHandle){
  List<DataSetParameterHandle> outputParams=new ArrayList<DataSetParameterHandle>();
  for (Iterator iter=datasetHandle.parametersIterator(); iter.hasNext(); ) {
    Object obj=iter.next();
    if ((obj instanceof DataSetParameterHandle) && ((DataSetParameterHandle)obj).isOutput() == true) {
      outputParams.add((DataSetParameterHandle)obj);
    }
  }
  int ret=-1;
  if (outputParams.size() > 0) {
    MessageDialog prefDialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.QUESTION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
    ret=prefDialog.open();
  }
  if (ret == 0)   for (int i=0; i < outputParams.size(); i++) {
    DataSetParameterHandle param=outputParams.get(i);
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(inputElement,param.getName());
    bindingColumn.setDataType(param.getDataType());
    ExpressionUtility.setBindingColumnExpression(param,bindingColumn,true);
    try {
      inputElement.addColumnBinding(bindingColumn,false);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
    continue;
  }
}",0.99805523142746
68276,"/** 
 * Adapts the specified Model Data Source to a Data Engine API data source design object
 */
public IBaseDataSourceDesign createDataSourceDesign(DataSourceHandle dataSource) throws BirtException {
  return this.dteSession.getModelAdaptor().adaptDataSource(dataSource);
}","/** 
 * Adapts the specified Model Data Source to a Data Engine API data source design object
 */
public IBaseDataSourceDesign createDataSourceDesign(DataSourceHandle dataSource) throws BirtException {
  BaseDataSourceDesign datasourceDesign=this.dteSession.getModelAdaptor().adaptDataSource(dataSource);
  IBaseDataSourceEventHandler eventHandler=null;
  if (dataSource instanceof OdaDataSourceHandle)   eventHandler=new DataSourceScriptExecutor(dataSource,context);
 else   if (dataSource instanceof ScriptDataSourceHandle)   eventHandler=new ScriptDataSourceScriptExecutor((ScriptDataSourceHandle)dataSource,context);
  datasourceDesign.setEventHandler(eventHandler);
  return datasourceDesign;
}",0.5503080082135524
68277,"/** 
 * @param name
 * @param expression
 * @param type
 */
private void populateDataSet(String name,String expression,int type){
  int selectionIndex=-1;
  for (int i=0; i < dataSetList.size(); i++) {
    DataSetHandle dataHandle=(DataSetHandle)dataSetList.get(i);
    if (dataHandle.getQualifiedName().equals(name)) {
      selectionIndex=i;
      break;
    }
  }
  if (type == LEFT_DATASET) {
    if (selectionIndex >= 0) {
      leftDataSetChooser.setSelection(new StructuredSelection(dataSetList.get(selectionIndex)));
      if (leftColumnList.getInput() != null && leftColumnList.getInput() instanceof DataSetViewData[]) {
        DataSetViewData[] dataSetItems=(DataSetViewData[])leftColumnList.getInput();
        String rowExpr;
        for (int i=0; i < dataSetItems.length; i++) {
          rowExpr=ExpressionUtil.createJSDataSetRowExpression(dataSetItems[i].getName());
          if (rowExpr.equals(expression)) {
            selectionIndex=i;
            break;
          }
        }
        leftColumnList.setSelection(new StructuredSelection(dataSetItems[selectionIndex]));
      }
    }
 else {
      setPageMessage(Messages.getString(""String_Node_Str""),IMessageProvider.ERROR);
    }
  }
  if (type == RIGHT_DATASET) {
    if (selectionIndex >= 0) {
      rightDataSetChooser.setSelection(new StructuredSelection(dataSetList.get(selectionIndex)));
      if (rightColumnList.getInput() != null && rightColumnList.getInput() instanceof DataSetViewData[]) {
        DataSetViewData[] dataSetItems=(DataSetViewData[])rightColumnList.getInput();
        String rowExpr;
        for (int i=0; i < dataSetItems.length; i++) {
          rowExpr=ExpressionUtil.createJSDataSetRowExpression(dataSetItems[i].getName());
          if (rowExpr.equals(expression)) {
            selectionIndex=i;
            break;
          }
        }
        rightColumnList.setSelection(new StructuredSelection(dataSetItems[selectionIndex]));
      }
    }
 else {
      setPageMessage(Messages.getString(""String_Node_Str""),IMessageProvider.ERROR);
    }
  }
}","/** 
 * @param name
 * @param expression
 * @param type
 */
private void populateDataSet(String name,String expression,int type){
  int selectionIndex=-1;
  for (int i=0; i < dataSetList.size(); i++) {
    DataSetHandle dataHandle=(DataSetHandle)dataSetList.get(i);
    if (dataHandle.getQualifiedName().equals(name)) {
      selectionIndex=i;
      break;
    }
  }
  if (type == LEFT_DATASET) {
    if (selectionIndex >= 0) {
      leftDataSetChooser.setSelection(new StructuredSelection(dataSetList.get(selectionIndex)));
      if (leftColumnList.getInput() != null && leftColumnList.getInput() instanceof DataSetViewData[]) {
        DataSetViewData[] dataSetItems=(DataSetViewData[])leftColumnList.getInput();
        if (dataSetItems.length > 0) {
          String rowExpr;
          for (int i=0; i < dataSetItems.length; i++) {
            rowExpr=ExpressionUtil.createJSDataSetRowExpression(dataSetItems[i].getName());
            if (rowExpr.equals(expression)) {
              selectionIndex=i;
              break;
            }
          }
          leftColumnList.setSelection(new StructuredSelection(dataSetItems[selectionIndex]));
        }
      }
    }
 else {
      setPageMessage(Messages.getString(""String_Node_Str""),IMessageProvider.ERROR);
    }
  }
  if (type == RIGHT_DATASET) {
    if (selectionIndex >= 0) {
      rightDataSetChooser.setSelection(new StructuredSelection(dataSetList.get(selectionIndex)));
      if (rightColumnList.getInput() != null && rightColumnList.getInput() instanceof DataSetViewData[]) {
        DataSetViewData[] dataSetItems=(DataSetViewData[])rightColumnList.getInput();
        if (dataSetItems.length > 0) {
          String rowExpr;
          for (int i=0; i < dataSetItems.length; i++) {
            rowExpr=ExpressionUtil.createJSDataSetRowExpression(dataSetItems[i].getName());
            if (rowExpr.equals(expression)) {
              selectionIndex=i;
              break;
            }
          }
          rightColumnList.setSelection(new StructuredSelection(dataSetItems[selectionIndex]));
        }
      }
    }
 else {
      setPageMessage(Messages.getString(""String_Node_Str""),IMessageProvider.ERROR);
    }
  }
}",0.9683813119395942
68278,"public Object get(int index){
  RangeCheck(index);
  if (index / CACHESIZE != this.currentCacheNo) {
    try {
      saveToDisk();
    }
 catch (    DataException e) {
      e.printStackTrace();
    }
    this.currentCacheNo=index / CACHESIZE;
    try {
      loadFromDisk();
    }
 catch (    DataException e) {
      e.printStackTrace();
    }
  }
  return this.currentCache.get(index - this.currentCacheNo * CACHESIZE);
}","public Object get(int index){
  RangeCheck(index);
  if (index / cacheSize != this.currentCacheNo) {
    try {
      saveToDisk();
    }
 catch (    DataException e) {
      e.printStackTrace();
    }
    this.currentCacheNo=index / cacheSize;
    try {
      loadFromDisk();
    }
 catch (    DataException e) {
      e.printStackTrace();
    }
  }
  return this.currentCache.get(index - this.currentCacheNo * cacheSize);
}",0.9339622641509434
68279,"public Object set(int index,Object element){
  RangeCheck(index);
  Object oldValue=get(index);
  this.currentCache.set(index - this.currentCacheNo * CACHESIZE,element);
  return oldValue;
}","public Object set(int index,Object element){
  RangeCheck(index);
  Object oldValue=get(index);
  this.currentCache.set(index - this.currentCacheNo * cacheSize,element);
  return oldValue;
}",0.9578947368421052
68280,"public IPreparedCubeQuery prepare(ICubeQueryDefinition query,Map appContext) throws BirtException {
  ICubeQueryDefinition preparedQuery=new PreparedCubeQueryDefinition(query);
  adaptCubeQueryDefinition(preparedQuery);
  return QueryPrepareUtil.prepareQuery(this.cubeDataSourceMap,this.cubeDataObjectMap,session,context,preparedQuery,appContext);
}","public IPreparedCubeQuery prepare(ICubeQueryDefinition query,Map appContext) throws BirtException {
  setMemoryUsage(appContext);
  ICubeQueryDefinition preparedQuery=new PreparedCubeQueryDefinition(query);
  adaptCubeQueryDefinition(preparedQuery);
  return QueryPrepareUtil.prepareQuery(this.cubeDataSourceMap,this.cubeDataObjectMap,session,context,preparedQuery,appContext);
}",0.9587912087912088
68281,"/** 
 * @param base
 * @return
 * @throws IOException
 */
private static IDiskArray getRowsFromBaseResultSet(IAggregationResultSet base) throws IOException {
  int bufferSize=4096;
  String useMemoryOnly=System.getProperty(""String_Node_Str"");
  if (useMemoryOnly != null && useMemoryOnly.equalsIgnoreCase(""String_Node_Str"")) {
    bufferSize=base.length();
  }
  IDiskArray diskArray=new BufferedStructureArray(AggregationResultRow.getCreator(),bufferSize);
  for (int j=0; j < base.length(); j++) {
    base.seek(j);
    IAggregationResultRow temp=base.getCurrentRow();
    diskArray.add(temp);
  }
  return diskArray;
}","/** 
 * @param base
 * @return
 * @throws IOException
 */
private static IDiskArray getRowsFromBaseResultSet(IAggregationResultSet base) throws IOException {
  int bufferSize=4096;
  String useMemoryOnly=System.getProperty(""String_Node_Str"");
  if (Constants.isAggressiveMemoryUsage() || (useMemoryOnly != null && useMemoryOnly.equalsIgnoreCase(""String_Node_Str""))) {
    bufferSize=base.length();
  }
  IDiskArray diskArray=new BufferedStructureArray(AggregationResultRow.getCreator(),bufferSize);
  for (int j=0; j < base.length(); j++) {
    base.seek(j);
    IAggregationResultRow temp=base.getCurrentRow();
    diskArray.add(temp);
  }
  return diskArray;
}",0.9680436477007016
68282,"private boolean validateSingleColumn(ComputedColumn computedColumn){
  if (computedColumn.getName() == null || computedColumn.getName().trim().length() == 0) {
    getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{computedColumn.getName()}),IMessageProvider.ERROR);
    return false;
  }
  Iterator iter=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter.hasNext()) {
    ColumnHintHandle hint=(ColumnHintHandle)iter.next();
    if (computedColumn.getName().equals(hint.getAlias())) {
      getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{computedColumn.getName()}),IMessageProvider.ERROR);
      return false;
    }
  }
  return true;
}","private boolean validateSingleColumn(ComputedColumn computedColumn){
  if (computedColumn.getName() == null || computedColumn.getName().trim().length() == 0) {
    getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{computedColumn.getName()}),IMessageProvider.ERROR);
    return false;
  }
  Iterator iter=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter.hasNext()) {
    ColumnHintHandle hint=(ColumnHintHandle)iter.next();
    if (!computedColumn.getName().equals(hint.getColumnName()) && computedColumn.getName().equals(hint.getAlias())) {
      getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{computedColumn.getName()}),IMessageProvider.ERROR);
      return false;
    }
  }
  return true;
}",0.9640644361833952
68283,"/** 
 * Destroy action
 * @param rollback true: rollback to savedItemModel false: do nothing
 */
public void destory(boolean rollback){
  if (rollback) {
    if (ds instanceof OdaDataSetHandle) {
      try {
        ((OdaDataSetHandle)ds).setQueryText(this.savedQueryText);
        DataSetProvider.getCurrentInstance().getDataSetDesign(ds,true,true);
      }
 catch (      SemanticException e) {
      }
catch (      BirtException e) {
      }
    }
    DataSetProvider.getCurrentInstance().setModelOfDataSetHandle(this.ds,savedItemModel);
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
  ds.removeListener(this);
}","/** 
 * Destroy action
 * @param rollback true: rollback to savedItemModel false: do nothing
 */
public void destory(boolean rollback){
  if (rollback) {
    if (ds instanceof OdaDataSetHandle) {
      try {
        ((OdaDataSetHandle)ds).setQueryText(this.savedQueryText);
        DataSetProvider.getCurrentInstance().getDataSetDesign(ds,true,true);
      }
 catch (      SemanticException e) {
      }
catch (      BirtException e) {
      }
    }
    DataSetProvider.getCurrentInstance().setModelOfDataSetHandle(this.ds,savedItemModel);
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
  if (ds != null)   ds.removeListener(this);
}",0.9860896445131376
68284,"/** 
 * The constructor.
 * @param parentShell
 */
public DataSetEditor(Shell parentShell,DataSetHandle ds,boolean needToFocusOnOutput){
  super(parentShell,ds);
  ExternalUIUtil.validateDataSetHandle(ds);
  this.needToFocusOnOutput=needToFocusOnOutput;
  String dataSourceType, dataSetType;
  if (ds instanceof OdaDataSetHandle) {
    OdaDataSourceHandle dataSource=(OdaDataSourceHandle)((OdaDataSetHandle)ds).getDataSource();
    dataSourceType=dataSource.getExtensionID();
    dataSetType=((OdaDataSetHandle)ds).getExtensionID();
  }
 else   if (ds instanceof ScriptDataSetHandle) {
    dataSourceType=DataUIConstants.DATA_SOURCE_SCRIPT;
    dataSetType=DataUIConstants.DATA_SET_SCRIPT;
  }
 else   if (ds instanceof JointDataSetHandle) {
    dataSourceType=""String_Node_Str"";
    dataSetType=""String_Node_Str"";
  }
 else {
    dataSourceType=ExternalUIUtil.getDataSourceType(ds);
    dataSetType=ExternalUIUtil.getDataSetType(ds);
  }
  boolean containsDataSource=ExternalUIUtil.containsDataSource(ds);
  if (containsDataSource) {
    addPageTo(""String_Node_Str"",DATA_SOURCE_SELECTION_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetDataSourceSelectionPage());
    if (DesignSessionUtil.hasValidOdaDesignUIExtension(dataSourceType)) {
      addCustomPageODAV3((OdaDataSetHandle)ds,dataSourceType,dataSetType);
    }
 else     addBirtPage(dataSourceType,dataSetType);
  }
  addCommonPages(ds);
  setPageFocus();
  itemModelManager.start(ds);
}","/** 
 * The constructor.
 * @param parentShell
 */
public DataSetEditor(Shell parentShell,DataSetHandle ds,boolean needToFocusOnOutput){
  super(parentShell,ds);
  ExternalUIUtil.validateDataSetHandle(ds);
  initModelManager();
  this.needToFocusOnOutput=needToFocusOnOutput;
  String dataSourceType, dataSetType;
  if (ds instanceof OdaDataSetHandle) {
    OdaDataSourceHandle dataSource=(OdaDataSourceHandle)((OdaDataSetHandle)ds).getDataSource();
    dataSourceType=dataSource.getExtensionID();
    dataSetType=((OdaDataSetHandle)ds).getExtensionID();
  }
 else   if (ds instanceof ScriptDataSetHandle) {
    dataSourceType=DataUIConstants.DATA_SOURCE_SCRIPT;
    dataSetType=DataUIConstants.DATA_SET_SCRIPT;
  }
 else   if (ds instanceof JointDataSetHandle) {
    dataSourceType=""String_Node_Str"";
    dataSetType=""String_Node_Str"";
  }
 else {
    dataSourceType=ExternalUIUtil.getDataSourceType(ds);
    dataSetType=ExternalUIUtil.getDataSetType(ds);
  }
  boolean containsDataSource=ExternalUIUtil.containsDataSource(ds);
  if (containsDataSource) {
    addPageTo(""String_Node_Str"",DATA_SOURCE_SELECTION_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetDataSourceSelectionPage());
    if (DesignSessionUtil.hasValidOdaDesignUIExtension(dataSourceType)) {
      addCustomPageODAV3((OdaDataSetHandle)ds,dataSourceType,dataSetType);
    }
 else     addBirtPage(dataSourceType,dataSetType);
  }
  addCommonPages(ds);
  setPageFocus();
  itemModelManager.start(ds);
}",0.9925068119891008
68285,"/** 
 * @param dataSet
 */
private void setContextLoader(DataSetHandle dataSet){
  oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,dataSet.getModuleHandle());
  Thread.currentThread().setContextClassLoader(newContextLoader);
}","/** 
 * @param dataSet
 */
protected void setContextLoader(DataSetHandle dataSet){
  oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,dataSet.getModuleHandle());
  Thread.currentThread().setContextClassLoader(newContextLoader);
}",0.9867549668874172
68286,"private static Set<String> getInternalPageNames(){
  Set<String> result=new HashSet<String>();
  result.add(DATASET_SETTINGS_PAGE);
  result.add(OUTPUT_PARAMETER_PREVIEW_PAGE);
  result.add(DATASOURCE_EDITOR_PROPERTY_PAGE);
  result.add(COMPUTED_COLUMNS_PAGE);
  result.add(RESULTSET_PREVIEW_PAGE);
  result.add(FILTERS_PAGE);
  result.add(PARAMETERS_PAGE);
  result.add(OUTPUTCOLUMN_PAGE);
  result.add(JOINT_DATA_SET_PAGE);
  result.add(DATA_SOURCE_SELECTION_PAGE);
  String extensionName=""String_Node_Str"";
  IExtensionRegistry extReg=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=extReg.getExtensionPoint(extensionName);
  if (extPoint == null)   return result;
  IExtension[] exts=extPoint.getExtensions();
  if (exts == null)   return result;
  for (int e=0; e < exts.length; e++) {
    IConfigurationElement[] configElems=exts[e].getConfigurationElements();
    if (configElems == null)     continue;
    for (int i=0; i < configElems.length; i++) {
      if (configElems[i].getName().equals(""String_Node_Str"")) {
        IConfigurationElement[] elems=configElems[i].getChildren(""String_Node_Str"");
        if (elems != null && elems.length > 0) {
          for (int j=0; j < elems.length; j++) {
            String value=elems[j].getAttribute(""String_Node_Str"");
            if (value != null)             result.add(value);
          }
        }
      }
    }
  }
  return result;
}","protected static Set<String> getInternalPageNames(){
  Set<String> result=new HashSet<String>();
  result.add(DATASET_SETTINGS_PAGE);
  result.add(OUTPUT_PARAMETER_PREVIEW_PAGE);
  result.add(DATASOURCE_EDITOR_PROPERTY_PAGE);
  result.add(COMPUTED_COLUMNS_PAGE);
  result.add(RESULTSET_PREVIEW_PAGE);
  result.add(FILTERS_PAGE);
  result.add(PARAMETERS_PAGE);
  result.add(OUTPUTCOLUMN_PAGE);
  result.add(JOINT_DATA_SET_PAGE);
  result.add(DATA_SOURCE_SELECTION_PAGE);
  String extensionName=""String_Node_Str"";
  IExtensionRegistry extReg=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=extReg.getExtensionPoint(extensionName);
  if (extPoint == null)   return result;
  IExtension[] exts=extPoint.getExtensions();
  if (exts == null)   return result;
  for (int e=0; e < exts.length; e++) {
    IConfigurationElement[] configElems=exts[e].getConfigurationElements();
    if (configElems == null)     continue;
    for (int i=0; i < configElems.length; i++) {
      if (configElems[i].getName().equals(""String_Node_Str"")) {
        IConfigurationElement[] elems=configElems[i].getChildren(""String_Node_Str"");
        if (elems != null && elems.length > 0) {
          for (int j=0; j < elems.length; j++) {
            String value=elems[j].getAttribute(""String_Node_Str"");
            if (value != null)             result.add(value);
          }
        }
      }
    }
  }
  return result;
}",0.9957325746799432
68287,"private void setPageProperties(){
  viewer.getNewButton().setEnabled(viewer.getViewer().getInput() != null && ((DataSetViewData[])viewer.getViewer().getInput()).length != 0);
  viewer.getNewButton().setText(Messages.getString(""String_Node_Str""));
  viewer.getNewButton().setToolTipText(Messages.getString(""String_Node_Str""));
  viewer.getEditButton().setVisible(false);
  viewer.getRemoveButton().setVisible(false);
  viewer.getUpButton().setVisible(false);
  viewer.getDownButton().setVisible(false);
}","protected void setPageProperties(){
  viewer.getNewButton().setEnabled(viewer.getViewer().getInput() != null && ((DataSetViewData[])viewer.getViewer().getInput()).length != 0);
  viewer.getNewButton().setText(Messages.getString(""String_Node_Str""));
  viewer.getNewButton().setToolTipText(Messages.getString(""String_Node_Str""));
  viewer.getEditButton().setVisible(false);
  viewer.getRemoveButton().setVisible(false);
  viewer.getUpButton().setVisible(false);
  viewer.getDownButton().setVisible(false);
}",0.988095238095238
68288,"/** 
 * @param handle
 */
public void saveResult(DataSetHandle handle){
  PropertyHandle resultSetPropertyHandle=handle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
  PropertyHandle columnHintPropertyHandle=handle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  try {
    resultSetPropertyHandle.setStringValue(null);
    ArrayList removeList=new ArrayList();
    for (Iterator iter=columnHintPropertyHandle.iterator(); iter.hasNext(); ) {
      ColumnHintHandle columnHintHandle=(ColumnHintHandle)iter.next();
      if (!isDuplicatedName(null,columnHintHandle.getColumnName())) {
        removeList.add(columnHintHandle);
      }
    }
    columnHintPropertyHandle.removeItems(removeList);
    Iterator iter=columnList.iterator();
    for (int i=0; iter.hasNext(); i++) {
      ResultSetColumnModel model=(ResultSetColumnModel)iter.next();
      ResultSetColumn column=StructureFactory.createResultSetColumn();
      column.setColumnName(model.columnName);
      column.setDataType(dataTypes[model.dataType].getName());
      column.setPosition(new Integer(i));
      resultSetPropertyHandle.addItem(column);
      ColumnHintHandle columnHintHandle=null;
      for (Iterator hintIter=columnHintPropertyHandle.iterator(); hintIter.hasNext(); ) {
        columnHintHandle=(ColumnHintHandle)hintIter.next();
        if (columnHintHandle.getColumnName().equals(model.columnName)) {
          break;
        }
        columnHintHandle=null;
      }
      if (columnHintHandle == null) {
        ColumnHint columnHint=StructureFactory.createColumnHint();
        columnHint.setProperty(ColumnHint.COLUMN_NAME_MEMBER,model.columnName);
        columnHintHandle=(ColumnHintHandle)columnHintPropertyHandle.addItem(columnHint);
      }
      columnHintHandle.setAnalysis(model.analysis);
      columnHintHandle.setAlias(model.alias);
      columnHintHandle.setDisplayName(model.displayName);
      columnHintHandle.setHelpText(model.helpText);
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
}","/** 
 * @param handle
 */
public void saveResult(DataSetHandle handle){
  PropertyHandle resultSetPropertyHandle=handle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
  PropertyHandle columnHintPropertyHandle=handle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  try {
    resultSetPropertyHandle.setStringValue(null);
    ArrayList removeList=new ArrayList();
    for (Iterator iter=columnHintPropertyHandle.iterator(); iter.hasNext(); ) {
      ColumnHintHandle columnHintHandle=(ColumnHintHandle)iter.next();
      if (!isDuplicatedName(null,columnHintHandle.getColumnName())) {
        removeList.add(columnHintHandle);
      }
    }
    columnHintPropertyHandle.removeItems(removeList);
    Iterator iter=columnList.iterator();
    for (int i=0; iter.hasNext(); i++) {
      ResultSetColumnModel model=(ResultSetColumnModel)iter.next();
      ResultSetColumn column=StructureFactory.createResultSetColumn();
      column.setColumnName(model.columnName);
      column.setDataType(dataTypes[model.dataType].getName());
      column.setPosition(new Integer(i));
      resultSetPropertyHandle.addItem(column);
      ColumnHintHandle columnHintHandle=null;
      for (Iterator hintIter=columnHintPropertyHandle.iterator(); hintIter.hasNext(); ) {
        columnHintHandle=(ColumnHintHandle)hintIter.next();
        if (columnHintHandle.getColumnName().equals(model.columnName)) {
          break;
        }
        columnHintHandle=null;
      }
      if (columnHintHandle == null) {
        ColumnHint columnHint=StructureFactory.createColumnHint();
        columnHint.setProperty(ColumnHint.COLUMN_NAME_MEMBER,model.columnName);
        columnHintHandle=(ColumnHintHandle)columnHintPropertyHandle.addItem(columnHint);
      }
      updateColumnHintProperties(model,columnHintHandle);
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
}",0.9366377107818088
68289,"/** 
 * @param ds
 * @param columns
 */
public void updateModel(DataSetHandle ds,DataSetViewData[] columns){
  PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  PropertyHandle resultSetColumnHandle=ds.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
  Iterator iter=handle.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ColumnHintHandle hint=(ColumnHintHandle)iter.next();
      for (int n=0; n < columns.length; n++) {
        String columnName=columns[n].getName();
        if (resultSetColumnHandle != null && (columnName == null || columnName.trim().length() == 0)) {
          Iterator resultIter=resultSetColumnHandle.iterator();
          if (resultIter != null) {
            while (resultIter.hasNext()) {
              ResultSetColumnHandle column=(ResultSetColumnHandle)resultIter.next();
              if (column.getPosition().intValue() == n + 1) {
                columnName=column.getColumnName();
                break;
              }
            }
          }
          if (columnName == null) {
            columnName=""String_Node_Str"";
          }
          columns[n].setName(columnName);
        }
        if (columns[n].getName().equals(hint.getColumnName())) {
          columns[n].setDisplayName(hint.getDisplayName());
          columns[n].setDisplayNameKey(hint.getDisplayNameKey());
          columns[n].setAlias(hint.getAlias());
          columns[n].setHelpText(hint.getHelpText());
          columns[n].setAnalysis(hint.getAnalysis());
          break;
        }
      }
    }
  }
}","/** 
 * @param ds
 * @param columns
 */
public void updateModel(DataSetHandle ds,DataSetViewData[] columns){
  PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  PropertyHandle resultSetColumnHandle=ds.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
  Iterator iter=handle.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ColumnHintHandle hint=(ColumnHintHandle)iter.next();
      for (int n=0; n < columns.length; n++) {
        String columnName=columns[n].getName();
        if (resultSetColumnHandle != null && (columnName == null || columnName.trim().length() == 0)) {
          Iterator resultIter=resultSetColumnHandle.iterator();
          if (resultIter != null) {
            while (resultIter.hasNext()) {
              ResultSetColumnHandle column=(ResultSetColumnHandle)resultIter.next();
              if (column.getPosition().intValue() == n + 1) {
                columnName=column.getColumnName();
                break;
              }
            }
          }
          if (columnName == null) {
            columnName=""String_Node_Str"";
          }
          columns[n].setName(columnName);
        }
        if (columns[n].getName().equals(hint.getColumnName())) {
          columns[n].setDisplayName(hint.getDisplayName());
          columns[n].setDisplayNameKey(hint.getDisplayNameKey());
          columns[n].setAlias(hint.getAlias());
          columns[n].setHelpText(hint.getHelpText());
          columns[n].setAnalysis(hint.getAnalysis());
          columns[n].setACLExpression(hint.getACLExpression());
          break;
        }
      }
    }
  }
}",0.9800374298190891
68290,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null)     items[i].setAnalysis(hint.getAnalysis());
  }
  updateModel(dataSetHandle,items);
  return items;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}",0.971947194719472
68291,"/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null)     items[i].setAnalysis(hint.getAnalysis());
  }
  return items;
}","/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
    }
  }
  return items;
}",0.9515151515151516
68292,"/** 
 * This method is used to get the level name that reference by a level reference expression of following format: dimension[""dimensionName""][""levelName""]. String[0] dimensionName; String[1] levelName;
 * @param expr
 * @return String[]
 */
private static String[] getTargetLevel(String expr){
  if (expr == null)   return null;
  if (!expr.matches(""String_Node_Str""))   return null;
  expr=expr.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  String[] result=expr.split(""String_Node_Str"");
  result[0]=result[0].replaceAll(""String_Node_Str"",""String_Node_Str"");
  result[1]=result[1].replaceAll(""String_Node_Str"",""String_Node_Str"");
  return result;
}","/** 
 * This method is used to get the level name that reference by a level reference expression of following format: dimension[""dimensionName""][""levelName""]. String[0] dimensionName; String[1] levelName;
 * @param expr
 * @return String[]
 */
private static String[] getTargetLevel(String expr){
  if (expr == null)   return null;
  if (!expr.matches(""String_Node_Str""))   return null;
  expr=expr.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  String[] result=expr.split(""String_Node_Str"");
  result[0]=result[0].replaceAll(""String_Node_Str"",""String_Node_Str"");
  result[1]=result[1].replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (result.length > 2)   result[2]=result[2].replaceAll(""String_Node_Str"",""String_Node_Str"");
  return result;
}",0.932107496463932
68293,"/** 
 * Generate share bindings with table into query.
 * @param headers
 * @param queryDefn
 * @param session
 * @param bindingExprsMap
 * @return
 * @throws AdapterException
 * @throws DataException
 */
private List<String> generateShareBindingsWithTable(ColumnBindingInfo[] headers,QueryDefinition queryDefn,DataRequestSession session,Map<String,String> bindingExprsMap) throws AdapterException, DataException {
  List<String> columns=new ArrayList<String>();
  ReportItemHandle reportItemHandle=getReportItemHandle();
  if (isInheritColumnsGroups()) {
    reportItemHandle=findListingInheritance();
  }
  queryDefn.setDataSetName(reportItemHandle.getDataSet().getQualifiedName());
  IModelAdapter modelAdapter=session.getModelAdaptor();
  for (int i=0; i < headers.length; i++) {
    ColumnBindingInfo chi=headers[i];
    int type=chi.getColumnType();
switch (type) {
case ColumnBindingInfo.COMMON_COLUMN:
case ColumnBindingInfo.AGGREGATE_COLUMN:
      IBinding binding=modelAdapter.adaptBinding((ComputedColumnHandle)chi.getObjectHandle());
    queryDefn.addBinding(binding);
  columns.add(binding.getBindingName());
bindingExprsMap.put(chi.getExpression(),binding.getBindingName());
break;
case ColumnBindingInfo.GROUP_COLUMN:
GroupDefinition gd=modelAdapter.adaptGroup((GroupHandle)chi.getObjectHandle());
queryDefn.addGroup(gd);
String name=StructureFactory.newComputedColumn(reportItemHandle,gd.getName()).getName();
binding=new Binding(name);
binding.setExpression(modelAdapter.adaptExpression(ChartReportItemUtil.getExpression((GroupHandle)chi.getObjectHandle())));
queryDefn.addBinding(binding);
columns.add(name);
bindingExprsMap.put(((ScriptExpression)binding.getExpression()).getText(),binding.getBindingName());
break;
}
}
if (reportItemHandle instanceof ListingHandle) {
queryDefn.getSorts().addAll(ChartBaseQueryHelper.createSorts(((ListingHandle)reportItemHandle).sortsIterator(),modelAdapter));
}
return columns;
}","/** 
 * Generate share bindings with table into query.
 * @param headers
 * @param queryDefn
 * @param session
 * @param bindingExprsMap
 * @return
 * @throws AdapterException
 * @throws DataException
 */
private List<String> generateShareBindingsWithTable(ColumnBindingInfo[] headers,QueryDefinition queryDefn,DataRequestSession session,Map<String,String> bindingExprsMap) throws AdapterException, DataException {
  List<String> columns=new ArrayList<String>();
  ReportItemHandle reportItemHandle=getReportItemHandle();
  if (isInheritColumnsGroups()) {
    reportItemHandle=findListingInheritance();
  }
  queryDefn.setDataSetName(reportItemHandle.getDataSet().getQualifiedName());
  IModelAdapter modelAdapter=session.getModelAdaptor();
  for (int i=0; i < headers.length; i++) {
    ColumnBindingInfo chi=headers[i];
    int type=chi.getColumnType();
switch (type) {
case ColumnBindingInfo.COMMON_COLUMN:
case ColumnBindingInfo.AGGREGATE_COLUMN:
      IBinding binding=modelAdapter.adaptBinding((ComputedColumnHandle)chi.getObjectHandle());
    queryDefn.addBinding(binding);
  columns.add(binding.getBindingName());
bindingExprsMap.put(chi.getExpression(),binding.getBindingName());
break;
case ColumnBindingInfo.GROUP_COLUMN:
GroupDefinition gd=modelAdapter.adaptGroup((GroupHandle)chi.getObjectHandle());
queryDefn.addGroup(gd);
String name=StructureFactory.newComputedColumn(reportItemHandle,gd.getName()).getName();
binding=new Binding(name);
binding.setExpression(modelAdapter.adaptExpression(ChartReportItemUtil.getExpression((GroupHandle)chi.getObjectHandle())));
queryDefn.addBinding(binding);
columns.add(name);
bindingExprsMap.put(((ScriptExpression)binding.getExpression()).getText(),binding.getBindingName());
break;
}
}
if (reportItemHandle instanceof ListingHandle) {
queryDefn.getSorts().addAll(ChartBaseQueryHelper.createSorts(((ListingHandle)reportItemHandle).sortsIterator()));
}
return columns;
}",0.99662775616083
68294,"@Override public void run(){
  try {
    AggregationCellHandle containerCell=ChartCubeUtil.getXtabContainerCell(eih);
    if (containerCell != null) {
      ChartReportItemImpl reportItem=(ChartReportItemImpl)eih.getReportItem();
      ChartWithAxes cmOld=(ChartWithAxes)reportItem.getProperty(ChartReportItemConstants.PROPERTY_CHART);
      ChartWithAxes cmNew=cmOld.copyInstance();
      List<String> exprs=ChartCubeUtil.getAllLevelsBindingExpression(containerCell.getCrosstab());
      Query query=cmNew.getAxes().get(0).getSeriesDefinitions().get(0).getDesignTimeSeries().getDataDefinition().get(0);
      eih.getRoot().getCommandStack().startTrans(getText());
      if (cmNew.isTransposed()) {
        cmNew.setTransposed(false);
        cmNew.getBaseAxes()[0].setType(AxisType.TEXT_LITERAL);
        query.setDefinition(exprs.get(0));
        ChartCubeUtil.updateXTabForAxis(containerCell,eih,true,cmNew);
      }
 else {
        cmNew.setTransposed(true);
        cmNew.getBaseAxes()[0].setType(AxisType.TEXT_LITERAL);
        query.setDefinition(exprs.get(1));
        ChartCubeUtil.updateXTabForAxis(containerCell,eih,false,cmNew);
      }
      cmNew.setReverseCategory(cmNew.isTransposed());
      reportItem.executeSetModelCommand(eih,cmOld,cmNew);
    }
    eih.getRoot().getCommandStack().commit();
  }
 catch (  BirtException e) {
    WizardBase.displayException(e);
    eih.getRoot().getCommandStack().rollback();
  }
}","@Override public void run(){
  try {
    AggregationCellHandle containerCell=ChartCubeUtil.getXtabContainerCell(eih);
    if (containerCell != null) {
      ChartReportItemImpl reportItem=(ChartReportItemImpl)eih.getReportItem();
      ChartWithAxes cmOld=(ChartWithAxes)reportItem.getProperty(ChartReportItemConstants.PROPERTY_CHART);
      ChartWithAxes cmNew=cmOld.copyInstance();
      List<String> exprs=ChartCubeUtil.getAllLevelsBindingName(containerCell.getCrosstab());
      Query query=cmNew.getAxes().get(0).getSeriesDefinitions().get(0).getDesignTimeSeries().getDataDefinition().get(0);
      eih.getRoot().getCommandStack().startTrans(getText());
      if (cmNew.isTransposed()) {
        cmNew.setTransposed(false);
        cmNew.getBaseAxes()[0].setType(AxisType.TEXT_LITERAL);
        query.setDefinition(exprs.get(0));
        ChartCubeUtil.updateXTabForAxis(containerCell,eih,true,cmNew);
      }
 else {
        cmNew.setTransposed(true);
        cmNew.getBaseAxes()[0].setType(AxisType.TEXT_LITERAL);
        query.setDefinition(exprs.get(1));
        ChartCubeUtil.updateXTabForAxis(containerCell,eih,false,cmNew);
      }
      cmNew.setReverseCategory(cmNew.isTransposed());
      reportItem.executeSetModelCommand(eih,cmOld,cmNew);
    }
    eih.getRoot().getCommandStack().commit();
  }
 catch (  BirtException e) {
    WizardBase.displayException(e);
    eih.getRoot().getCommandStack().rollback();
  }
}",0.9951117318435754
68295,"private boolean checkEnabled(){
  try {
    if (ChartCubeUtil.isAxisChart(eih)) {
      eih=(ExtendedItemHandle)eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
    }
    if (ChartCubeUtil.isPlotChart(eih)) {
      AggregationCellHandle containerCell=ChartCubeUtil.getXtabContainerCell(eih);
      if (containerCell != null) {
        if (DEUtil.isLinkedElement(containerCell.getCrosstabHandle())) {
          return false;
        }
        List<String> exprs=ChartCubeUtil.getAllLevelsBindingExpression(containerCell.getCrosstab());
        return exprs.size() == 2 && !ChartCubeUtil.isAggregationCell(containerCell);
      }
    }
  }
 catch (  BirtException e) {
    WizardBase.displayException(e);
  }
  return false;
}","private boolean checkEnabled(){
  try {
    if (ChartCubeUtil.isAxisChart(eih)) {
      eih=(ExtendedItemHandle)eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
    }
    if (ChartCubeUtil.isPlotChart(eih)) {
      AggregationCellHandle containerCell=ChartCubeUtil.getXtabContainerCell(eih);
      if (containerCell != null) {
        if (DEUtil.isLinkedElement(containerCell.getCrosstabHandle())) {
          return false;
        }
        List<String> exprs=ChartCubeUtil.getAllLevelsBindingName(containerCell.getCrosstab());
        return exprs.size() == 2 && !ChartCubeUtil.isAggregationCell(containerCell);
      }
    }
  }
 catch (  BirtException e) {
    WizardBase.displayException(e);
  }
  return false;
}",0.9905660377358492
68296,"/** 
 * Get resultSet
 * @return
 */
private IQueryResults executeProcess(DataRequestSession session,ExecutionContext context){
  errorList=new ArrayList();
  try {
    metaData=((DataSetEditor)this.getContainer()).getCurrentItemModel();
    columnCount=metaData == null ? 0 : metaData.length;
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(ExternalUIUtil.getQulifiedDataSetHandle(((DataSetEditor)getContainer()).getHandle()).getQualifiedName());
    int maxRow=getMaxRowPreference();
    query.setMaxRows(maxRow);
    PropertyHandle handle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    if (handle != null) {
      Iterator paramIter=handle.iterator();
      while (paramIter.hasNext()) {
        String value=null;
        DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
        if (paramDefn.isInput()) {
          if (paramDefn instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)paramDefn).getParamName() != null) {
            String linkedReportParam=((OdaDataSetParameterHandle)paramDefn).getParamName();
            if (linkedReportParam != null) {
              ParameterHandle ph=((DataSetEditor)getContainer()).getHandle().getModuleHandle().findParameter(linkedReportParam);
              if (ph instanceof ScalarParameterHandle) {
                if (((ScalarParameterHandle)ph).getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
                  throw new BirtException(Messages.getFormattedString(""String_Node_Str"",new String[]{linkedReportParam}),null);
                }
              }
            }
            value=DataUtil.getParamValue(((DataSetEditor)getContainer()).getHandle(),(OdaDataSetParameterHandle)paramDefn);
          }
          if (value != null) {
            InputParameterBinding binding=new InputParameterBinding(paramDefn.getName(),new ScriptExpression(value));
            query.addInputParamBinding(binding);
          }
        }
      }
    }
    columnBindingNames=new String[columnCount];
    ScriptExpression[] expressions=new ScriptExpression[columnCount];
    for (int n=0; n < columnCount; n++) {
      columnBindingNames[n]=metaData[n].getName();
      expressions[n]=new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(metaData[n].getName()));
      expressions[n].setDataType(metaData[n].getDataType());
      query.addResultSetExpression(columnBindingNames[n],expressions[n]);
    }
    boolean needCache=false;
    if (this.previousMaxRow != maxRow) {
      this.previousMaxRow=maxRow;
      needCache=true;
    }
    DataSetExecutorHelper helper=new DataSetExecutorHelper();
    IQueryResults resultSet=helper.execute(ExternalUIUtil.getQulifiedDataSetHandle(((DataSetEditor)getContainer()).getHandle()),query,true,true,needCache,context,session);
    return resultSet;
  }
 catch (  BirtException e) {
    errorList.add(e);
    return null;
  }
}","/** 
 * Get resultSet
 * @return
 */
private IQueryResults executeProcess(DataRequestSession session,ExecutionContext context){
  errorList=new ArrayList();
  try {
    metaData=((DataSetEditor)this.getContainer()).getCurrentItemModel();
    columnCount=metaData == null ? 0 : metaData.length;
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(ExternalUIUtil.getQulifiedDataSetHandle(((DataSetEditor)getContainer()).getHandle()).getQualifiedName());
    int maxRow=getMaxRowPreference();
    query.setMaxRows(maxRow);
    registerParameterBinding(query,((DataSetEditor)getContainer()).getHandle(),session);
    columnBindingNames=new String[columnCount];
    ScriptExpression[] expressions=new ScriptExpression[columnCount];
    for (int n=0; n < columnCount; n++) {
      columnBindingNames[n]=metaData[n].getName();
      expressions[n]=new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(metaData[n].getName()));
      expressions[n].setDataType(metaData[n].getDataType());
      query.addResultSetExpression(columnBindingNames[n],expressions[n]);
    }
    boolean needCache=false;
    if (this.previousMaxRow != maxRow) {
      this.previousMaxRow=maxRow;
      needCache=true;
    }
    DataSetExecutorHelper helper=new DataSetExecutorHelper();
    IQueryResults resultSet=helper.execute(ExternalUIUtil.getQulifiedDataSetHandle(((DataSetEditor)getContainer()).getHandle()),query,true,true,needCache,context,session);
    return resultSet;
  }
 catch (  BirtException e) {
    errorList.add(e);
    return null;
  }
}",0.6560565870910698
68297,"private void createExpressionButton(Composite composite,final Text property,String propName){
  ExpressionButton exprButton=ExpressionButtonUtil.createExpressionButton(composite,property,new ExpressionProvider(handle),handle,true,SWT.PUSH);
  if (PASSWORD.equals(propName)) {
    exprButton.setExpressionButtonProvider(new ExprButtonProvider(true,property));
  }
  Expression expr=handle.getPropertyBindingExpression(propName);
  property.setData(ExpressionButtonUtil.EXPR_TYPE,expr == null || expr.getType() == null ? UIUtil.getDefaultScriptType() : (String)expr.getType());
  property.setText((expr == null || expr.getStringExpression() == null) ? ""String_Node_Str"" : expr.getStringExpression());
  exprButton.refresh();
}","private void createExpressionButton(Composite composite,final Text property,String propName){
  ExpressionButton exprButton=ExpressionButtonUtil.createExpressionButton(composite,property,new ExpressionProvider(handle),handle,true,SWT.PUSH);
  if (ODAPASSWORD.equals(propName) || PASSWORD.equals(propName)) {
    exprButton.setExpressionButtonProvider(new ExprButtonProvider(true,property));
  }
  Expression expr=handle.getPropertyBindingExpression(propName);
  property.setData(ExpressionButtonUtil.EXPR_TYPE,expr == null || expr.getType() == null ? UIUtil.getDefaultScriptType() : (String)expr.getType());
  property.setText((expr == null || expr.getStringExpression() == null) ? ""String_Node_Str"" : expr.getStringExpression());
  exprButton.refresh();
}",0.9783783783783784
68298,"/** 
 * the content
 */
public Control createContents(Composite parent){
  initPropertyBinding();
  int size=bindingName.size();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
  composite.setLayoutData(gridData);
  Label nameLabel;
  Text propertyText=null;
  for (int i=0; i < size; i++) {
    nameLabel=new Label(composite,SWT.NONE);
    nameLabel.setText((String)displayName.get(i) + Messages.getString(""String_Node_Str""));
    nameLabelList.add(nameLabel);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    if (((String)bindingName.get(i)).equals(QUERYTEXT)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
      data.heightHint=100;
    }
 else     if (((String)bindingName.get(i)).equals(PASSWORD)) {
      propertyText=new Text(composite,SWT.BORDER);
      if (ds instanceof DesignElementHandle) {
        Expression expr=((DesignElementHandle)ds).getPropertyBindingExpression((String)bindingName.get(i));
        if (expr != null && ExpressionType.CONSTANT.equals(expr.getType())) {
          Text dummy=new Text(composite,SWT.BORDER | SWT.PASSWORD);
          propertyText.setEchoChar(dummy.getEchoChar());
          dummy.dispose();
        }
      }
    }
 else     propertyText=new Text(composite,SWT.BORDER);
    propertyText.setLayoutData(data);
    propertyText.setText((String)bindingValue.get(i) == null ? ""String_Node_Str"" : (String)bindingValue.get(i));
    propertyTextList.add(propertyText);
    if (ds instanceof OdaDataSourceHandle) {
      handle=(OdaDataSourceHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)ds;
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     if (ds instanceof OdaDataSetHandle) {
      handle=(OdaDataSetHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)(((OdaDataSetHandle)ds).getDataSource());
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    createExpressionButton(composite,propertyText,(String)bindingName.get(i));
  }
  if (size <= 0)   setEmptyPropertyMessages(composite);
  return composite;
}","/** 
 * the content
 */
public Control createContents(Composite parent){
  initPropertyBinding();
  int size=bindingName.size();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
  composite.setLayoutData(gridData);
  Label nameLabel;
  Text propertyText=null;
  for (int i=0; i < size; i++) {
    nameLabel=new Label(composite,SWT.NONE);
    nameLabel.setText((String)displayName.get(i) + Messages.getString(""String_Node_Str""));
    nameLabelList.add(nameLabel);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    if (((String)bindingName.get(i)).equals(QUERYTEXT)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
      data.heightHint=100;
    }
 else     if (ODAPASSWORD.equals((String)bindingName.get(i)) || PASSWORD.equals((String)bindingName.get(i))) {
      propertyText=new Text(composite,SWT.BORDER);
      if (ds instanceof DesignElementHandle) {
        Expression expr=((DesignElementHandle)ds).getPropertyBindingExpression((String)bindingName.get(i));
        if (expr != null && ExpressionType.CONSTANT.equals(expr.getType())) {
          Text dummy=new Text(composite,SWT.BORDER | SWT.PASSWORD);
          propertyText.setEchoChar(dummy.getEchoChar());
          dummy.dispose();
        }
      }
    }
 else     propertyText=new Text(composite,SWT.BORDER);
    propertyText.setLayoutData(data);
    propertyText.setText((String)bindingValue.get(i) == null ? ""String_Node_Str"" : (String)bindingValue.get(i));
    propertyTextList.add(propertyText);
    if (ds instanceof OdaDataSourceHandle) {
      handle=(OdaDataSourceHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)ds;
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     if (ds instanceof OdaDataSetHandle) {
      handle=(OdaDataSetHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)(((OdaDataSetHandle)ds).getDataSource());
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    createExpressionButton(composite,propertyText,(String)bindingName.get(i));
  }
  if (size <= 0)   setEmptyPropertyMessages(composite);
  return composite;
}",0.9758454106280192
68299,"public void handleEvent(Event event){
  TreeItem item=(TreeItem)event.item;
  if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
    Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
    if (!item.getForeground().equals(gray)) {
      item.setForeground(gray);
    }
  }
 else {
    INodeProvider provider=ProviderFactory.createProvider(event.item.getData());
    if (provider != null && provider.isReadOnly(event.item.getData())) {
      Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
      if (!item.getForeground().equals(gray)) {
        item.setForeground(gray);
      }
    }
 else {
      Color black=ReportColorConstants.ReportForeground;
      if (!item.getForeground().equals(black)) {
        item.setForeground(black);
      }
    }
  }
}","public void handleEvent(Event event){
  TreeItem item=(TreeItem)event.item;
  if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
    Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
    if (!item.getForeground().equals(gray)) {
      item.setForeground(gray);
    }
  }
 else {
    INodeProvider provider=null;
    if (event.item != null && event.item.getData() != null) {
      provider=ProviderFactory.createProvider(event.item.getData());
    }
    if (provider != null && provider.isReadOnly(event.item.getData())) {
      Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
      if (!item.getForeground().equals(gray)) {
        item.setForeground(gray);
      }
    }
 else {
      Color black=ReportColorConstants.ReportForeground;
      if (!item.getForeground().equals(black)) {
        item.setForeground(black);
      }
    }
  }
}",0.9505280711506392
68300,"/** 
 * Creates the SWT control for this page under the given parent control. <p> Clients should not call this method (the workbench calls this method when it needs to, which may be never). </p>
 * @param parent the parent control
 */
public void createControl(Composite parent){
  super.createControl(parent);
  createContextMenu();
  ViewsTreeProvider provider=new ViewsTreeProvider();
  getTreeViewer().setContentProvider(provider);
  getTreeViewer().setLabelProvider(provider);
  getSelectionSynchronizer().setTreeViewer(getTreeViewer());
  new RenameListener(getTreeViewer()).apply();
  getTreeViewer().setSorter(new ItemSorter());
  addDragAndDropListener();
  init(reportHandle);
  getTreeViewer().expandToLevel(2);
  final Tree tree=getTreeViewer().getTree();
  tree.addListener(SWT.PaintItem,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
        Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
        if (!item.getForeground().equals(gray)) {
          item.setForeground(gray);
        }
      }
 else {
        INodeProvider provider=ProviderFactory.createProvider(event.item.getData());
        if (provider != null && provider.isReadOnly(event.item.getData())) {
          Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
          if (!item.getForeground().equals(gray)) {
            item.setForeground(gray);
          }
        }
 else {
          Color black=ReportColorConstants.ReportForeground;
          if (!item.getForeground().equals(black)) {
            item.setForeground(black);
          }
        }
      }
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if ((e.stateMask & SWT.CTRL) != 0 || (e.stateMask & SWT.SHIFT) != 0) {
        setSingleSelection(e);
      }
    }
    private void setSingleSelection(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)getSelection();
      if (!selection.isEmpty() && selection.size() > 1) {
        boolean includeCell=false;
        for (Iterator iterator=selection.iterator(); iterator.hasNext(); ) {
          Object obj=iterator.next();
          if (obj instanceof CellHandle) {
            if (includeCell) {
              TreeItem item=getTreeViewer().getTree().getItem(new Point(e.x,e.y));
              if (item != null)               getTreeViewer().getTree().setSelection(new TreeItem[]{item});
              break;
            }
            includeCell=true;
          }
        }
      }
    }
  }
);
  tree.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      if (getSelection() instanceof StructuredSelection) {
        List list=new ArrayList();
        Object selectedObject=((StructuredSelection)getSelection()).getFirstElement();
        list.add(selectedObject);
        ReportRequest r=new ReportRequest();
        r.setType(ReportRequest.OPEN_EDITOR);
        r.setRequestConvert(new IRequestConvert(){
          public List convertSelectionToModelLisr(          List list){
            List lst=new ArrayList();
            for (Iterator itr=list.iterator(); itr.hasNext(); ) {
              Object obj=itr.next();
              lst.add(obj);
            }
            return lst;
          }
        }
);
        r.setSelectionObject(list);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
        try {
          Tree tree=(Tree)e.getSource();
          TreeItem[] selectedItems=tree.getSelection();
          if (selectedItems.length > 0) {
            if (selectedItems[0].getExpanded()) {
              selectedItems[0].setExpanded(false);
            }
 else {
              getTreeViewer().expandToLevel(selectedObject,selectedItems[0].getExpanded() ? 0 : 1);
            }
          }
        }
 catch (        Exception e2) {
        }
      }
    }
  }
);
  tree.addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == tree) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=tree.getItem(pt);
        if (item == null || item.getData() == null) {
          tree.setToolTipText(null);
        }
 else {
          tree.setToolTipText(getTooltip(item.getData()));
        }
      }
    }
  }
);
  SessionHandleAdapter.getInstance().getMediator(reportHandle).addColleague(getSelectionSynchronizer());
  if (backup != null) {
    backup.restoreBackup(getTreeViewer());
    getTreeViewer().getTree().addTreeListener(new TreeListener(){
      public void treeCollapsed(      TreeEvent e){
        Item item=(Item)e.item;
        backup.updateCollapsedStatus(getTreeViewer(),item.getData());
      }
      public void treeExpanded(      TreeEvent e){
        Item item=(Item)e.item;
        backup.updateExpandedStatus(getTreeViewer(),item.getData());
      }
    }
);
  }
}","/** 
 * Creates the SWT control for this page under the given parent control. <p> Clients should not call this method (the workbench calls this method when it needs to, which may be never). </p>
 * @param parent the parent control
 */
public void createControl(Composite parent){
  super.createControl(parent);
  createContextMenu();
  ViewsTreeProvider provider=new ViewsTreeProvider();
  getTreeViewer().setContentProvider(provider);
  getTreeViewer().setLabelProvider(provider);
  getSelectionSynchronizer().setTreeViewer(getTreeViewer());
  new RenameListener(getTreeViewer()).apply();
  getTreeViewer().setSorter(new ItemSorter());
  addDragAndDropListener();
  init(reportHandle);
  getTreeViewer().expandToLevel(2);
  final Tree tree=getTreeViewer().getTree();
  tree.addListener(SWT.PaintItem,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
        Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
        if (!item.getForeground().equals(gray)) {
          item.setForeground(gray);
        }
      }
 else {
        INodeProvider provider=null;
        if (event.item != null && event.item.getData() != null) {
          provider=ProviderFactory.createProvider(event.item.getData());
        }
        if (provider != null && provider.isReadOnly(event.item.getData())) {
          Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
          if (!item.getForeground().equals(gray)) {
            item.setForeground(gray);
          }
        }
 else {
          Color black=ReportColorConstants.ReportForeground;
          if (!item.getForeground().equals(black)) {
            item.setForeground(black);
          }
        }
      }
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if ((e.stateMask & SWT.CTRL) != 0 || (e.stateMask & SWT.SHIFT) != 0) {
        setSingleSelection(e);
      }
    }
    private void setSingleSelection(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)getSelection();
      if (!selection.isEmpty() && selection.size() > 1) {
        boolean includeCell=false;
        for (Iterator iterator=selection.iterator(); iterator.hasNext(); ) {
          Object obj=iterator.next();
          if (obj instanceof CellHandle) {
            if (includeCell) {
              TreeItem item=getTreeViewer().getTree().getItem(new Point(e.x,e.y));
              if (item != null)               getTreeViewer().getTree().setSelection(new TreeItem[]{item});
              break;
            }
            includeCell=true;
          }
        }
      }
    }
  }
);
  tree.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      if (getSelection() instanceof StructuredSelection) {
        List list=new ArrayList();
        Object selectedObject=((StructuredSelection)getSelection()).getFirstElement();
        list.add(selectedObject);
        ReportRequest r=new ReportRequest();
        r.setType(ReportRequest.OPEN_EDITOR);
        r.setRequestConvert(new IRequestConvert(){
          public List convertSelectionToModelLisr(          List list){
            List lst=new ArrayList();
            for (Iterator itr=list.iterator(); itr.hasNext(); ) {
              Object obj=itr.next();
              lst.add(obj);
            }
            return lst;
          }
        }
);
        r.setSelectionObject(list);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
        try {
          Tree tree=(Tree)e.getSource();
          TreeItem[] selectedItems=tree.getSelection();
          if (selectedItems.length > 0) {
            if (selectedItems[0].getExpanded()) {
              selectedItems[0].setExpanded(false);
            }
 else {
              getTreeViewer().expandToLevel(selectedObject,selectedItems[0].getExpanded() ? 0 : 1);
            }
          }
        }
 catch (        Exception e2) {
        }
      }
    }
  }
);
  tree.addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == tree) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=tree.getItem(pt);
        if (item == null || item.getData() == null) {
          tree.setToolTipText(null);
        }
 else {
          tree.setToolTipText(getTooltip(item.getData()));
        }
      }
    }
  }
);
  SessionHandleAdapter.getInstance().getMediator(reportHandle).addColleague(getSelectionSynchronizer());
  if (backup != null) {
    backup.restoreBackup(getTreeViewer());
    getTreeViewer().getTree().addTreeListener(new TreeListener(){
      public void treeCollapsed(      TreeEvent e){
        Item item=(Item)e.item;
        backup.updateCollapsedStatus(getTreeViewer(),item.getData());
      }
      public void treeExpanded(      TreeEvent e){
        Item item=(Item)e.item;
        backup.updateExpandedStatus(getTreeViewer(),item.getData());
      }
    }
);
  }
}",0.9902688120242796
68301,"public IDataRowExpressionEvaluator prepareRowExpressionEvaluator(Chart cm,List<String> columnExpression,int rowCount,boolean isStringType) throws ChartException {
  if (engineTask != null) {
    try {
      engineTask.run();
    }
 catch (    EngineException e) {
      throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
    }
  }
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,itemHandle.getModuleHandle());
  Thread.currentThread().setContextClassLoader(newContextLoader);
  IDataRowExpressionEvaluator evaluator=null;
  try {
    CubeHandle cube=ChartCubeUtil.getBindingCube(itemHandle);
    if (cube != null) {
      evaluator=createCubeEvaluator(cube,cm);
      cubeReference=cube;
    }
 else {
      cubeReference=null;
      if (isSharedBinding() && !ChartReportItemUtil.isOldChartUsingInternalGroup(itemHandle,cm) || isInheritColumnsGroups()) {
        if (isSharingChart(true)) {
          evaluator=createBaseEvaluator((ExtendedItemHandle)itemHandle.getDataBindingReference(),cm,columnExpression);
        }
 else {
          evaluator=fShareBindingQueryHelper.createShareBindingEvaluator(cm,columnExpression);
        }
      }
 else {
        evaluator=createBaseEvaluator(itemHandle,cm,columnExpression);
      }
    }
    return evaluator;
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
catch (  RuntimeException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldContextLoader);
  }
}","public IDataRowExpressionEvaluator prepareRowExpressionEvaluator(Chart cm,List<String> columnExpression,int rowCount,boolean isStringType) throws ChartException {
  if (engineTask != null) {
    try {
      engineTask.run();
    }
 catch (    EngineException e) {
      throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
    }
  }
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,itemHandle.getModuleHandle());
  Thread.currentThread().setContextClassLoader(newContextLoader);
  IDataRowExpressionEvaluator evaluator=null;
  try {
    CubeHandle cube=ChartCubeUtil.getBindingCube(itemHandle);
    if (cube != null) {
      evaluator=createCubeEvaluator(cube,cm);
      dataSetReference=cube;
    }
 else {
      if (isSharedBinding() && !ChartReportItemUtil.isOldChartUsingInternalGroup(itemHandle,cm) || isInheritColumnsGroups()) {
        if (isSharingChart(true)) {
          evaluator=createBaseEvaluator((ExtendedItemHandle)itemHandle.getDataBindingReference(),cm,columnExpression);
        }
 else {
          evaluator=fShareBindingQueryHelper.createShareBindingEvaluator(cm,columnExpression);
        }
      }
 else {
        evaluator=createBaseEvaluator(itemHandle,cm,columnExpression);
      }
      dataSetReference=ChartItemUtil.getBindingDataSet(itemHandle);
    }
    return evaluator;
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
catch (  RuntimeException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldContextLoader);
  }
}",0.9669749009247028
68302,"/** 
 * Create base evaluator for chart using data set.
 * @param handle
 * @param cm
 * @param columnExpression
 * @return
 * @throws ChartException
 */
private IDataRowExpressionEvaluator createBaseEvaluator(ExtendedItemHandle handle,Chart cm,List<String> columnExpression) throws ChartException {
  IQueryResults actualResultSet;
  BaseQueryHelper cbqh=new BaseQueryHelper(handle,cm);
  QueryDefinition queryDefn=(QueryDefinition)cbqh.createBaseQuery(columnExpression);
  resetParametersForDataPreview(getDataSetFromHandle(),queryDefn);
  handleGroup(queryDefn,handle,session.getModelAdaptor());
  processQueryDefinition(queryDefn);
  try {
    Iterator<?> bindingIt=ChartReportItemUtil.getColumnDataBindings(handle,true);
    while (bindingIt != null && bindingIt.hasNext()) {
      Object computedBinding=bindingIt.next();
      IBinding binding=session.getModelAdaptor().adaptBinding((ComputedColumnHandle)computedBinding);
      if (binding == null || queryDefn.getBindings().containsKey(binding.getBindingName())) {
        continue;
      }
      queryDefn.addBinding(binding);
    }
    Iterator<FilterConditionHandle> filtersIterator=getFiltersIterator();
    if (filtersIterator != null) {
      while (filtersIterator.hasNext()) {
        IFilterDefinition filter=session.getModelAdaptor().adaptFilter(filtersIterator.next());
        queryDefn.addFilter(filter);
      }
    }
    IPreparedQuery pq=session.prepare(queryDefn,getAppContext(getMaxRow(),false));
    actualResultSet=(IQueryResults)session.execute(pq,null,new ScriptContext());
    if (actualResultSet != null) {
      if (ChartReportItemUtil.isOldChartUsingInternalGroup(itemHandle,cm)) {
        return createSimpleExpressionEvaluator(actualResultSet);
      }
 else {
        return new BaseGroupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.isSetSummaryAggregation(cm),cm);
      }
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
  return null;
}","/** 
 * Create base evaluator for chart using data set.
 * @param handle
 * @param cm
 * @param columnExpression
 * @return
 * @throws ChartException
 */
private IDataRowExpressionEvaluator createBaseEvaluator(ExtendedItemHandle handle,Chart cm,List<String> columnExpression) throws ChartException {
  IQueryResults actualResultSet;
  BaseQueryHelper cbqh=new BaseQueryHelper(handle,cm);
  QueryDefinition queryDefn=(QueryDefinition)cbqh.createBaseQuery(columnExpression);
  resetParametersForDataPreview(getDataSetFromHandle(),queryDefn);
  handleGroup(queryDefn,handle,session.getModelAdaptor());
  processQueryDefinition(queryDefn);
  try {
    Iterator<?> bindingIt=ChartReportItemUtil.getColumnDataBindings(handle,true);
    while (bindingIt != null && bindingIt.hasNext()) {
      Object computedBinding=bindingIt.next();
      IBinding binding=session.getModelAdaptor().adaptBinding((ComputedColumnHandle)computedBinding);
      if (binding == null || queryDefn.getBindings().containsKey(binding.getBindingName())) {
        continue;
      }
      queryDefn.addBinding(binding);
    }
    Iterator<FilterConditionHandle> filtersIterator=getFiltersIterator();
    if (filtersIterator != null) {
      while (filtersIterator.hasNext()) {
        IFilterDefinition filter=session.getModelAdaptor().adaptFilter(filtersIterator.next());
        queryDefn.addFilter(filter);
      }
    }
    if (needDefineDataSet(itemHandle.getDataSet())) {
      defineDataSet(itemHandle.getDataSet(),session,true,false);
    }
    IPreparedQuery pq=session.prepare(queryDefn,getAppContext(getMaxRow(),false));
    actualResultSet=(IQueryResults)session.execute(pq,null,new ScriptContext());
    if (actualResultSet != null) {
      if (ChartReportItemUtil.isOldChartUsingInternalGroup(itemHandle,cm)) {
        return createSimpleExpressionEvaluator(actualResultSet);
      }
 else {
        return new BaseGroupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.isSetSummaryAggregation(cm),cm);
      }
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
  return null;
}",0.9704001894387876
68303,"/** 
 * Prepare data expression evaluator for query share with table.
 * @param cm
 * @param columnExpression
 * @return
 * @throws BirtException
 * @throws AdapterException
 * @throws DataException
 * @throws ChartException
 */
private IDataRowExpressionEvaluator createShareBindingEvaluator(Chart cm,List<String> columnExpression) throws BirtException, AdapterException, DataException, ChartException {
  IQueryResults actualResultSet;
  QueryDefinition queryDefn=new QueryDefinition();
  int maxRow=getMaxRow();
  queryDefn.setMaxRows(maxRow);
  final Map<String,String> bindingExprsMap=new HashMap<String,String>();
  Iterator<ComputedColumnHandle> iterator=ChartReportItemUtil.getColumnDataBindings(itemHandle);
  List<ComputedColumnHandle> columnList=new ArrayList<ComputedColumnHandle>();
  while (iterator.hasNext()) {
    columnList.add(iterator.next());
  }
  generateShareBindingsWithTable(getPreviewHeadersInfo(columnList),queryDefn,session,bindingExprsMap);
  addCustomExpressions(queryDefn,cm,columnExpression,bindingExprsMap);
  Iterator<?> filtersIterator=getPropertyIterator(itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP));
  if (filtersIterator != null) {
    while (filtersIterator.hasNext()) {
      IFilterDefinition filter=session.getModelAdaptor().adaptFilter((FilterConditionHandle)filtersIterator.next());
      queryDefn.addFilter(filter);
    }
  }
  IPreparedQuery pq=session.prepare(queryDefn,getAppContext(getMaxRow(),false));
  actualResultSet=(IQueryResults)session.execute(pq,null,new ScriptContext());
  if (actualResultSet != null) {
    return new BaseGroupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.isSetSummaryAggregation(cm),cm){
      public Object evaluate(      String expression){
        try {
          String newExpr=bindingExprsMap.get(expression);
          if (newExpr != null) {
            return fResultIterator.getValue(newExpr);
          }
 else {
            return fResultIterator.getValue(expression);
          }
        }
 catch (        BirtException e) {
          sLogger.log(e);
        }
        return null;
      }
    }
;
  }
  return null;
}","/** 
 * Prepare data expression evaluator for query share with table.
 * @param cm
 * @param columnExpression
 * @return
 * @throws BirtException
 * @throws AdapterException
 * @throws DataException
 * @throws ChartException
 */
private IDataRowExpressionEvaluator createShareBindingEvaluator(Chart cm,List<String> columnExpression) throws BirtException, AdapterException, DataException, ChartException {
  IQueryResults actualResultSet;
  QueryDefinition queryDefn=new QueryDefinition();
  int maxRow=getMaxRow();
  queryDefn.setMaxRows(maxRow);
  final Map<String,String> bindingExprsMap=new HashMap<String,String>();
  Iterator<ComputedColumnHandle> iterator=ChartReportItemUtil.getColumnDataBindings(itemHandle);
  List<ComputedColumnHandle> columnList=new ArrayList<ComputedColumnHandle>();
  while (iterator.hasNext()) {
    columnList.add(iterator.next());
  }
  generateShareBindingsWithTable(getPreviewHeadersInfo(columnList),queryDefn,session,bindingExprsMap);
  addCustomExpressions(queryDefn,cm,columnExpression,bindingExprsMap);
  Iterator<?> filtersIterator=getPropertyIterator(itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP));
  if (filtersIterator != null) {
    while (filtersIterator.hasNext()) {
      IFilterDefinition filter=session.getModelAdaptor().adaptFilter((FilterConditionHandle)filtersIterator.next());
      queryDefn.addFilter(filter);
    }
  }
  DataSetHandle dataSetHandle=ChartItemUtil.getBindingDataSet(itemHandle);
  if (needDefineDataSet(dataSetHandle)) {
    defineDataSet(dataSetHandle,session,true,false);
  }
  IPreparedQuery pq=session.prepare(queryDefn,getAppContext(getMaxRow(),false));
  actualResultSet=(IQueryResults)session.execute(pq,null,new ScriptContext());
  if (actualResultSet != null) {
    return new BaseGroupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.isSetSummaryAggregation(cm),cm){
      public Object evaluate(      String expression){
        try {
          String newExpr=bindingExprsMap.get(expression);
          if (newExpr != null) {
            return fResultIterator.getValue(newExpr);
          }
 else {
            return fResultIterator.getValue(expression);
          }
        }
 catch (        BirtException e) {
          sLogger.log(e);
        }
        return null;
      }
    }
;
  }
  return null;
}",0.9613333333333334
68304,"/** 
 * Check it should set cube into query session.
 * @param cube
 * @return
 */
private boolean needDefineCube(CubeHandle cube){
  return cubeReference != cube;
}","/** 
 * Check it should set cube into query session.
 * @param cube
 * @return
 */
private boolean needDefineCube(CubeHandle cube){
  return dataSetReference != cube;
}",0.972972972972973
68305,"public void setAppContext(Map appContext){
  this.appContext=appContext;
}","public void setAppContext(Map appContext){
  this.appContext.clear();
  if (appContext != null) {
    this.appContext.putAll(appContext);
  }
}",0.6728110599078341
68306,"/** 
 */
private void updateDataTypeCombo(){
  final IAggrFunction aggrFunc=getSelectedFunction();
  if (aggrFunc != null) {
    String dataType=DataAdapterUtil.adapterToModelDataType(aggrFunc.getDataType());
    Integer index=(Integer)cmbDataType.getData(dataType);
    cmbDataType.select(index != null ? index.intValue() : 0);
  }
}","/** 
 */
private void updateDataTypeCombo(){
  final IAggrFunction aggrFunc=getSelectedFunction();
  if (aggrFunc != null) {
    String dataType=DataAdapterUtil.adapterToModelDataType(aggrFunc.getDataType());
    cmbDataType.setText(getTypeDisplayName(dataType));
  }
}",0.7728026533996684
68307,"public ExcelEmitterDescriptor(Locale locale){
  this.locale=locale;
  initOptions();
}","public ExcelEmitterDescriptor(){
  initOptions();
}",0.7445255474452555
68308,"public HTMLEmitterDescriptor(Locale locale){
  this.locale=locale;
}","public HTMLEmitterDescriptor(){
}",0.6534653465346535
68309,"public PDFEmitterDescriptor(Locale locale){
  this.locale=locale;
  initOptions();
}","public PDFEmitterDescriptor(){
  initOptions();
}",0.7368421052631579
68310,"public PostscriptEmitterDescriptor(Locale locale){
  this.locale=locale;
  initOptions();
}","public PostscriptEmitterDescriptor(){
  initOptions();
}",0.7619047619047619
68311,"public PPTEmitterDescriptor(Locale locale){
  this.locale=locale;
  initOptions();
}","public PPTEmitterDescriptor(){
  initOptions();
}",0.7368421052631579
68312,"public WordEmitterDescriptor(Locale locale){
  this.locale=locale;
  initOptions();
}","public WordEmitterDescriptor(){
  initOptions();
}",0.7407407407407407
68313,"private void addContent(IContent content){
  if (!bufferAllContents) {
    ReportItemDesign design=getGenerateDesign(content);
    if (design != null) {
      if (design.getOnPageBreak() != null) {
        if (!contents.contains(content)) {
          contents.add(content);
        }
      }
    }
  }
 else {
    if (!contents.contains(content)) {
      contents.add(content);
    }
  }
}","private void addContent(IContent content){
  if (!bufferAllContents) {
    ReportItemDesign design=getGenerateDesign(content);
    if (design != null) {
      if (design.getOnPageBreak() != null || design.getClass() != null) {
        if (!contents.contains(content)) {
          contents.add(content);
        }
      }
    }
  }
 else {
    if (!contents.contains(content)) {
      contents.add(content);
    }
  }
}",0.9640644361833952
68314,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws BirtException {
  SecurityListener sl=new SecurityListener(this);
  sl.start();
  sl.process(cubeHandle,null);
  sl.end();
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  Map<ReportElementHandle,QueryDefinition> queryMap=new HashMap<ReportElementHandle,QueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,queryMap,metaMap);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=queryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=metaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),appContext),this.toStringArray(measureNames),dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  appContext.clear();
  appContext.putAll(backupAppContext);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws BirtException {
  SecurityListener sl=new SecurityListener(this);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  Map<ReportElementHandle,QueryDefinition> queryMap=new HashMap<ReportElementHandle,QueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,queryMap,metaMap,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=queryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=metaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  sl.end();
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),appContext),this.toStringArray(measureNames),dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  appContext.clear();
  appContext.putAll(backupAppContext);
}",0.9960046612285668
68315,"/** 
 * Populate all dimensions.
 * @param cubeMaterializer
 * @param dimHandles
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension[] populateDimensions(CubeMaterializer cubeMaterializer,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,QueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap) throws AdapterException {
  List dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  List result=new ArrayList();
  for (int i=0; i < dimHandles.size(); i++) {
    result.add(populateDimension(cubeMaterializer,(DimensionHandle)dimHandles.get(i),cubeHandle,appContext,queryMap,metaMap));
  }
  IDimension[] dimArray=new IDimension[dimHandles.size()];
  for (int i=0; i < result.size(); i++) {
    dimArray[i]=(IDimension)result.get(i);
  }
  return dimArray;
}","/** 
 * Populate all dimensions.
 * @param cubeMaterializer
 * @param dimHandles
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension[] populateDimensions(CubeMaterializer cubeMaterializer,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,QueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap,SecurityListener sl) throws AdapterException {
  List dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  List result=new ArrayList();
  for (int i=0; i < dimHandles.size(); i++) {
    result.add(populateDimension(cubeMaterializer,(DimensionHandle)dimHandles.get(i),cubeHandle,appContext,queryMap,metaMap,sl));
  }
  IDimension[] dimArray=new IDimension[dimHandles.size()];
  for (int i=0; i < result.size(); i++) {
    dimArray[i]=(IDimension)result.get(i);
  }
  return dimArray;
}",0.9874932028276238
68316,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,QueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelKeys=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelKeys.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelKeys.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelKeys)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    for (    String jointKey : jointHierarchyKeys) {
      if (!columnNamesForLevels.contains(jointKey)) {
        leafLevelKeyColumn.add(getDummyLevelNameForJointHierarchyKey(jointKey));
        levelInHier.add(CubeElementFactory.createLevelDefinition(getDummyLevelNameForJointHierarchyKey(jointKey),new String[]{getDummyLevelNameForJointHierarchyKey(jointKey)},new String[0]));
      }
    }
    if (levelInHier.size() > 1) {
      levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
    }
    Object rowLimit=appContext.get(DataEngine.MEMORY_DATA_SET_CACHE);
    try {
      if (rowLimit != null && !(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
        iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext),levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,rowLimit);
      }
 else {
        iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext),levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
      }
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,QueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelKeys=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelKeys.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelKeys.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelKeys)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    for (    String jointKey : jointHierarchyKeys) {
      if (!columnNamesForLevels.contains(jointKey)) {
        leafLevelKeyColumn.add(getDummyLevelNameForJointHierarchyKey(jointKey));
        levelInHier.add(CubeElementFactory.createLevelDefinition(getDummyLevelNameForJointHierarchyKey(jointKey),new String[]{getDummyLevelNameForJointHierarchyKey(jointKey)},new String[0]));
      }
    }
    if (levelInHier.size() > 1) {
      levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
    }
    Object rowLimit=appContext.get(DataEngine.MEMORY_DATA_SET_CACHE);
    try {
      if (rowLimit != null && !(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
        iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext),levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,rowLimit);
      }
 else {
        iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext),levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
      }
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}",0.9973311982919668
68317,"public void process(TabularCubeHandle o1,Object o2){
}","public void process(DimensionHandle dimHandle,IDatasetIterator iterator) throws BirtException {
}",0.4768211920529801
68318,"public void start(){
}","public void start(TabularCubeHandle cubeHandle) throws BirtException {
}",0.4680851063829787
68319,"public void end(){
}","public void end() throws BirtException {
}",0.6451612903225806
68320,"public Object getLevelAttribute(int levelIndex,int attributeIndex){
  return metaResultSet.getLevelAttribute(levelIndex,attributeIndex);
}","public Object getLevelAttribute(int levelIndex,int attributeIndex){
  if (resultObject.getLevelMembers() == null || levelIndex < 0 || levelIndex > resultObject.getLevelMembers().length - 1) {
    return null;
  }
  return resultObject.getLevelMembers()[levelIndex].getAttributes()[attributeIndex];
}",0.3432494279176201
68321,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
    Map appContext=reportContext.getAppContext();
    if (appContext != null) {
      Object tmp=appContext.get(EngineConstants.APPCONTEXT_CHART_RESOLUTION);
      if (tmp != null && tmp instanceof Number) {
        imageDpi=((Number)tmp).intValue();
      }
    }
    if (imageDpi <= 0) {
      imageDpi=designHandle.getImageDPI();
    }
    if (imageDpi <= 0) {
      imageDpi=96;
    }
  }
  retrieveRtLFlag();
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
        fixedReport=true;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
        fixedReport=false;
      }
    }
  }
 else {
    fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,fixedReport,enableInlineStyle,browserVersion);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,fixedReport,enableInlineStyle,htmlRtLFlag,browserVersion);
  }
  if (isEmbeddable) {
    outputCSSStyles(reportDesign,designHandle);
    if (needFixTransparentPNG) {
      fixTransparentPNG();
    }
    fixRedirect();
    openRootTag();
    writeBidiFlag();
    if (report != null) {
      String defaultStyleName=report.getDesign().getRootStyleName();
      if (defaultStyleName != null) {
        if (enableInlineStyle) {
          StringBuffer defaultStyleBuffer=new StringBuffer();
          IStyle defaultStyle=report.findStyle(defaultStyleName);
          htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
          if (defaultStyleBuffer.length() > 0) {
            writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
          }
        }
 else {
          if (htmlIDNamespace != null) {
            writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
          }
 else {
            writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
          }
        }
      }
    }
    outputClientScript(report);
    return;
  }
  openRootTag();
  writeBidiFlag();
  writer.openTag(HTMLTags.TAG_HEAD);
  outputReportTitle(report);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  if (!OUTPUT_FORMAT_HTML.equals(getOutputFormat())) {
    writer.closeTag(HTMLTags.TAG_META);
  }
  outputCSSStyles(reportDesign,designHandle);
  if (needFixTransparentPNG) {
    fixTransparentPNG();
  }
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String defaultStyleName=report.getDesign().getRootStyleName();
    if (defaultStyleName != null) {
      if (enableInlineStyle) {
        IStyle defaultStyle=report.findStyle(defaultStyleName);
        htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
      }
 else {
        if (htmlIDNamespace != null) {
          writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
        }
 else {
          writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
        }
      }
    }
  }
  if (outputMasterPageContent) {
    defaultStyleBuffer.append(""String_Node_Str"");
  }
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
  }
  outputClientScript(report);
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
    Map appContext=reportContext.getAppContext();
    if (appContext != null) {
      Object tmp=appContext.get(EngineConstants.APPCONTEXT_CHART_RESOLUTION);
      if (tmp != null && tmp instanceof Number) {
        imageDpi=((Number)tmp).intValue();
      }
    }
    if (imageDpi <= 0) {
      imageDpi=designHandle.getImageDPI();
    }
    if (imageDpi <= 0) {
      imageDpi=96;
    }
  }
  retrieveRtLFlag();
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
        fixedReport=true;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
        fixedReport=false;
      }
    }
  }
 else {
    fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,fixedReport,enableInlineStyle,browserVersion);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,fixedReport,enableInlineStyle,htmlRtLFlag,browserVersion);
  }
  if (isEmbeddable) {
    outputCSSStyles(reportDesign,designHandle);
    if (needFixTransparentPNG) {
      fixTransparentPNG();
    }
    fixRedirect();
    openRootTag();
    writeBidiFlag();
    if (report != null) {
      String defaultStyleName=report.getDesign().getRootStyleName();
      if (defaultStyleName != null) {
        if (enableInlineStyle) {
          StringBuffer defaultStyleBuffer=new StringBuffer();
          IStyle defaultStyle=report.findStyle(defaultStyleName);
          htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
          if (defaultStyleBuffer.length() > 0) {
            writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
          }
        }
 else {
          if (htmlIDNamespace != null) {
            writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
          }
 else {
            writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
          }
        }
      }
    }
    outputClientScript(report);
    return;
  }
  openRootTag();
  writeBidiFlag();
  writer.openTag(HTMLTags.TAG_HEAD);
  outputReportTitle(report);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  boolean needCloseTag=!OUTPUT_FORMAT_HTML.equals(getOutputFormat());
  if (needCloseTag) {
    writer.closeTag(HTMLTags.TAG_META);
  }
  String viewport=new HTMLRenderOption(renderOption).getViewportMeta();
  if (viewport != null) {
    writer.openTag(HTMLTags.TAG_META);
    writer.attribute(HTMLTags.ATTR_NAME,""String_Node_Str"");
    writer.attribute(HTMLTags.ATTR_CONTENT,viewport);
    if (needCloseTag) {
      writer.closeTag(HTMLTags.TAG_META);
    }
  }
  outputCSSStyles(reportDesign,designHandle);
  if (needFixTransparentPNG) {
    fixTransparentPNG();
  }
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String defaultStyleName=report.getDesign().getRootStyleName();
    if (defaultStyleName != null) {
      if (enableInlineStyle) {
        IStyle defaultStyle=report.findStyle(defaultStyleName);
        htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
      }
 else {
        if (htmlIDNamespace != null) {
          writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
        }
 else {
          writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
        }
      }
    }
  }
  if (outputMasterPageContent) {
    defaultStyleBuffer.append(""String_Node_Str"");
  }
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
  }
  outputClientScript(report);
}",0.95630725863284
68322,"/** 
 * API test on IReportEngine.createGetParameterDefinitionTask( ) method
 */
public void testCreateGetParameterDefinitionTask(){
  try {
    ReportEngine engine=new ReportEngine(new EngineConfig());
    IReportRunnable runnable=engine.openReportDesign(REPORT_DESIGN);
    IGetParameterDefinitionTask paramDefnTask=engine.createGetParameterDefinitionTask(runnable);
    IParameterDefnBase paramDefn=paramDefnTask.getParameterDefn(""String_Node_Str"");
    assertTrue(paramDefn instanceof ScalarParameterDefn);
    assertTrue(IScalarParameterDefn.TEXT_BOX == paramDefn.getParameterType());
    assertTrue(""String_Node_Str"".equals(paramDefnTask.getDefaultValue(paramDefn)));
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}","/** 
 * API test on IReportEngine.createGetParameterDefinitionTask( ) method
 */
public void testCreateGetParameterDefinitionTask(){
  try {
    ReportEngine engine=new ReportEngine(new EngineConfig());
    IReportRunnable runnable=engine.openReportDesign(REPORT_DESIGN);
    IGetParameterDefinitionTask paramDefnTask=engine.createGetParameterDefinitionTask(runnable);
    IParameterDefnBase paramDefn=paramDefnTask.getParameterDefn(""String_Node_Str"");
    assertTrue(paramDefn instanceof ScalarParameterDefn);
    assertTrue(IScalarParameterDefn.TEXT_BOX == paramDefn.getParameterType());
    assertTrue(""String_Node_Str"".equals(paramDefnTask.getDefaultValue(paramDefn)));
    ScalarParameterDefn scalarParameter=(ScalarParameterDefn)paramDefn;
    Map userProperties=scalarParameter.getUserPropertyValues();
    assertEquals(2,userProperties.size());
    assertEquals(5,userProperties.get(""String_Node_Str""));
    assertEquals(""String_Node_Str"",userProperties.get(""String_Node_Str""));
    assertEquals(5,scalarParameter.getUserPropertyValue(""String_Node_Str""));
    assertEquals(""String_Node_Str"",scalarParameter.getUserPropertyValue(""String_Node_Str""));
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}",0.7556904400606981
68323,"private void setQueryExpression(String expression,boolean isSharing){
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
 else   if (ChartUIConstants.QUERY_CATEGORY.equals(queryType)) {
    DataType type=context.getDataServiceProvider().getDataType(expression);
    ChartAdapter.beginIgnoreNotifications();
    if (seriesdefinition.getGrouping() == null) {
      seriesdefinition.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
    }
    seriesdefinition.getGrouping().setGroupType(type);
    if (type == DataType.DATE_TIME_LITERAL) {
      seriesdefinition.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
    }
    ChartAdapter.endIgnoreNotifications();
  }
 else   if (ChartUIConstants.QUERY_OPTIONAL.equals(queryType)) {
    ChartAdapter.beginIgnoreNotifications();
    if (expression == null || expression.trim().length() == 0) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
      seriesdefinition.getSortKey().setDefinition(null);
    }
 else {
      if (seriesdefinition.getSortKey() != null && seriesdefinition.getSortKey().getDefinition() != null && seriesdefinition.getSortKey().getDefinition().equals(query.getDefinition())) {
        seriesdefinition.getSortKey().setDefinition(expression);
      }
      DataType type=context.getDataServiceProvider().getDataType(expression);
      if (query.getGrouping() == null) {
        query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
      }
      query.getGrouping().setGroupType(type);
      if (type == DataType.DATE_TIME_LITERAL) {
        query.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
      }
    }
    ChartAdapter.endIgnoreNotifications();
  }
  if (query != null) {
    if (isSharing) {
      query.setDefinition(expression);
    }
 else {
      query.setDefinition(btnBuilder.getExpression());
    }
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}","private void setQueryExpression(String expression,boolean isSharing){
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
 else   if (ChartUIConstants.QUERY_CATEGORY.equals(queryType)) {
    DataType type=context.getDataServiceProvider().getDataType(expression);
    ChartAdapter.beginIgnoreNotifications();
    if (seriesdefinition.getGrouping() == null) {
      seriesdefinition.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
    }
    seriesdefinition.getGrouping().setGroupType(type);
    if (type == DataType.DATE_TIME_LITERAL) {
      seriesdefinition.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
    }
    ChartAdapter.endIgnoreNotifications();
  }
 else   if (ChartUIConstants.QUERY_OPTIONAL.equals(queryType)) {
    ChartAdapter.beginIgnoreNotifications();
    if (expression == null || expression.trim().length() == 0) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
      if (seriesdefinition.getSortKey() != null) {
        seriesdefinition.getSortKey().setDefinition(null);
      }
    }
 else {
      if (seriesdefinition.getSortKey() != null && seriesdefinition.getSortKey().getDefinition() != null && seriesdefinition.getSortKey().getDefinition().equals(query.getDefinition())) {
        seriesdefinition.getSortKey().setDefinition(expression);
      }
      DataType type=context.getDataServiceProvider().getDataType(expression);
      if (query.getGrouping() == null) {
        query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
      }
      query.getGrouping().setGroupType(type);
      if (type == DataType.DATE_TIME_LITERAL) {
        query.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
      }
    }
    ChartAdapter.endIgnoreNotifications();
  }
  if (query != null) {
    if (isSharing) {
      query.setDefinition(expression);
    }
 else {
      query.setDefinition(btnBuilder.getExpression());
    }
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}",0.9889592760180996
68324,"protected ImageArea createImageArea(IImageContent content){
  ImageArea area=new ImageArea();
  String mimeType=content.getMIMEType();
  String extension=content.getExtension();
  area.setExtension(extension);
  area.setMIMEType(mimeType);
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
    area.setUrl(content.getURI());
  break;
case IImageContent.IMAGE_NAME:
area.setUrl(""String_Node_Str"" + content.getURI());
break;
case IImageContent.IMAGE_EXPRESSION:
break;
}
if (SvgFile.isSvg(mimeType,null,extension) && imageObject != null) {
area.setMIMEType(""String_Node_Str"");
area.setExtension(""String_Node_Str"");
area.setData(imageObject.rawData());
}
 else {
area.setMIMEType(""String_Node_Str"");
area.setExtension(""String_Node_Str"");
area.setData(content.getData());
}
if (content instanceof ObjectContent) {
ObjectContent object=(ObjectContent)content;
area.setParameters(object.getParamters());
}
area.setAction(content.getHyperlinkAction());
return area;
}","protected ImageArea createImageArea(IImageContent content){
  ImageArea area=new ImageArea();
  String mimeType=content.getMIMEType();
  String extension=content.getExtension();
  area.setExtension(extension);
  area.setMIMEType(mimeType);
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
    area.setUrl(content.getURI());
  break;
case IImageContent.IMAGE_NAME:
area.setUrl(""String_Node_Str"" + content.getURI());
break;
case IImageContent.IMAGE_EXPRESSION:
break;
}
if (SvgFile.isSvg(mimeType,null,extension)) {
if (imageObject != null) {
area.setMIMEType(""String_Node_Str"");
area.setExtension(""String_Node_Str"");
area.setData(imageObject.rawData());
}
 else {
area.setMIMEType(""String_Node_Str"");
area.setExtension(""String_Node_Str"");
area.setData(content.getData());
}
}
 else {
area.setData(content.getData());
}
if (content instanceof ObjectContent) {
ObjectContent object=(ObjectContent)content;
area.setParameters(object.getParamters());
}
area.setAction(content.getHyperlinkAction());
return area;
}",0.9723703344643724
68325,"/** 
 * populate the name prefix of cached file
 */
private void setFileNamePrefix(){
  this.fileNamePrefix=""String_Node_Str"" + new Long(System.currentTimeMillis()).toString() + ""String_Node_Str""+ Integer.toHexString(hashCode());
}","/** 
 * populate the name prefix of cached file
 */
private void setFileNamePrefix(){
  this.fileNamePrefix=""String_Node_Str"" + new Long(System.nanoTime()).toString() + ""String_Node_Str""+ getID()+ ""String_Node_Str""+ Integer.toHexString(hashCode());
}",0.7567567567567568
68326,"protected void addEmptyData(SheetData data,XlsContainer container){
  int parentStartCoordinate=container.getSizeInfo().getStartCoordinate();
  int parentEndCoordinate=container.getSizeInfo().getEndCoordinate();
  int childStartCoordinate=data.getStartX();
  int childEndCoordinate=data.getEndX();
  if (childEndCoordinate < parentEndCoordinate) {
    StyleEntry style=container.getStyle();
    removeLeftBorder(style);
    int column=axis.getColumnIndexByCoordinate(childEndCoordinate);
    Data empty=createEmptyData(style);
    empty.setStartX(childEndCoordinate);
    empty.setEndX(parentEndCoordinate);
    empty.setRowIndex(data.getRowIndex());
    addDatatoCache(column,empty);
  }
  if (childStartCoordinate > parentStartCoordinate) {
    StyleEntry style=container.getStyle();
    removeRightBorder(style);
    int column=axis.getColumnIndexByCoordinate(childStartCoordinate);
    Data empty=createEmptyData(style);
    empty.setStartX(childStartCoordinate);
    empty.setEndX(parentEndCoordinate);
    empty.setRowIndex(data.getRowIndex());
    addDatatoCache(column,empty);
  }
}","protected void addEmptyData(SheetData data,XlsContainer container){
  int parentStartCoordinate=container.getSizeInfo().getStartCoordinate();
  int parentEndCoordinate=container.getSizeInfo().getEndCoordinate();
  int childStartCoordinate=data.getStartX();
  int childEndCoordinate=data.getEndX();
  if (childEndCoordinate < parentEndCoordinate) {
    StyleEntry style=container.getStyle();
    removeLeftBorder(style);
    int column=axis.getColumnIndexByCoordinate(childEndCoordinate);
    int num=axis.getColumnIndexByCoordinate(parentEndCoordinate) - column - 1;
    Data empty=createEmptyData(style);
    empty.setStartX(childEndCoordinate);
    empty.setEndX(parentEndCoordinate);
    empty.setRowIndex(data.getRowIndex());
    addDatatoCache(column,empty);
    addBlankData(column,num,empty);
  }
  if (childStartCoordinate > parentStartCoordinate) {
    StyleEntry style=container.getStyle();
    removeRightBorder(style);
    int column=axis.getColumnIndexByCoordinate(childStartCoordinate);
    int num=column - axis.getColumnIndexByCoordinate(parentStartCoordinate) - 1;
    Data empty=createEmptyData(style);
    empty.setStartX(childStartCoordinate);
    empty.setEndX(parentEndCoordinate);
    empty.setRowIndex(data.getRowIndex());
    addDatatoCache(column,empty);
    addBlankData(column - num - 1,num,empty);
  }
}",0.9000825763831544
68327,"public boolean exist(String documentObjectName){
  return archiveReader.exists(documentObjectName);
}","public boolean exist(String documentObjectName){
  if (archiveReader == null)   return false;
  return archiveReader.exists(documentObjectName);
}",0.8178137651821862
68328,"public IDocumentObject openDocumentObject(String documentObjectName) throws IOException {
  RAInputStream inputStream=archiveReader.getStream(documentObjectName);
  if (inputStream == null)   return null;
  return new DocumentObject(new RandomDataAccessObject(new RAReader(inputStream)));
}","public IDocumentObject openDocumentObject(String documentObjectName) throws IOException {
  if (archiveReader == null)   return null;
  RAInputStream inputStream=archiveReader.getStream(documentObjectName);
  if (inputStream == null)   return null;
  return new DocumentObject(new RandomDataAccessObject(new RAReader(inputStream)));
}",0.9294871794871796
68329,"/** 
 * Clean up the execution context before finishing using it
 */
public void close(){
  if (extendedItemManager != null) {
    extendedItemManager.close();
    extendedItemManager=null;
  }
  if (engineExtensionManager != null) {
    engineExtensionManager.close();
    engineExtensionManager=null;
  }
  if (scriptContext != null) {
    scriptContext.close();
    scriptContext=null;
  }
  if (dataSource != null) {
    try {
      dataSource.close();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"",e);
    }
    dataSource=null;
  }
  if (dataEngine != null) {
    dataEngine.shutdown();
    dataEngine=null;
  }
  if (closeClassLoader && applicationClassLoader instanceof ApplicationClassLoader) {
    ((ApplicationClassLoader)applicationClassLoader).close();
  }
  IStatusHandler handler=task.getStatusHandler();
  if (handler != null) {
    handler.finish();
  }
  applicationClassLoader=null;
  engine=null;
  task=null;
  executor=null;
  tocBuilder=null;
  runnable=null;
  originalRunnable=null;
  configs=null;
  params=null;
  persistentBeans=null;
  transientBeans=null;
  pageVariables=null;
  docWriter=null;
  reportIR=null;
  appContext=null;
  reportContext=null;
  renderOption=null;
  reportDoc=null;
  reportContent=null;
  design=null;
  content=null;
  rsets=null;
  reportHandles=null;
  onPrepareErrors=null;
  stringFormatters=null;
  numberFormatters=null;
  dateFormatters=null;
  pageBreakListeners=null;
  eventHandlerManager=null;
  progressMonitor=null;
  element=null;
}","/** 
 * Clean up the execution context before finishing using it
 */
public void close(){
  if (extendedItemManager != null) {
    extendedItemManager.close();
    extendedItemManager=null;
  }
  if (engineExtensionManager != null) {
    engineExtensionManager.close();
    engineExtensionManager=null;
  }
  if (scriptContext != null) {
    scriptContext.close();
    scriptContext=null;
  }
  if (dataSource != null) {
    try {
      dataSource.close();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"",e);
    }
    dataSource=null;
  }
  if (dataEngine != null) {
    dataEngine.shutdown();
    dataEngine=null;
  }
  if (closeClassLoader && applicationClassLoader instanceof ApplicationClassLoader) {
    ((ApplicationClassLoader)applicationClassLoader).close();
  }
  IStatusHandler handler=task.getStatusHandler();
  if (handler != null) {
    handler.finish();
  }
  applicationClassLoader=null;
  engine=null;
  executor=null;
  tocBuilder=null;
  configs=null;
  params=null;
  persistentBeans=null;
  transientBeans=null;
  pageVariables=null;
  docWriter=null;
  reportIR=null;
  appContext=null;
  reportContext=null;
  renderOption=null;
  reportDoc=null;
  reportContent=null;
  design=null;
  content=null;
  rsets=null;
  reportHandles=null;
  onPrepareErrors=null;
  stringFormatters=null;
  numberFormatters=null;
  dateFormatters=null;
  pageBreakListeners=null;
  eventHandlerManager=null;
  progressMonitor=null;
  element=null;
}",0.9818061528283164
68330,"private Expression createUserProperty(DesignElementHandle handle,UserPropertyDefn userDef){
  String propName=userDef.getName();
  String valueExpr=handle.getStringProperty(propName);
switch (userDef.getTypeCode()) {
case IPropertyType.SCRIPT_TYPE:
case IPropertyType.EXPRESSION_TYPE:
    ExpressionHandle property=handle.getExpressionProperty(propName);
  if (property == null) {
    return null;
  }
Object expression=property.getExpression();
if (expression == null) {
expression=userDef.getDefault();
}
if (expression instanceof org.eclipse.birt.report.model.api.Expression) {
return createExpression((org.eclipse.birt.report.model.api.Expression)expression);
}
return null;
case IPropertyType.NUMBER_TYPE:
case IPropertyType.INTEGER_TYPE:
case IPropertyType.FLOAT_TYPE:
return createConstant(DataType.DOUBLE_TYPE,valueExpr);
case IPropertyType.BOOLEAN_TYPE:
return createConstant(DataType.BOOLEAN_TYPE,valueExpr);
case IPropertyType.DATE_TIME_TYPE:
return createConstant(DataType.DATE_TYPE,valueExpr);
default :
return createConstant(DataType.STRING_TYPE,valueExpr);
}
}","private Expression createUserProperty(DesignElementHandle handle,UserPropertyDefn userDef){
  String propName=userDef.getName();
  String valueExpr=handle.getStringProperty(propName);
switch (userDef.getTypeCode()) {
case IPropertyType.SCRIPT_TYPE:
case IPropertyType.EXPRESSION_TYPE:
    ExpressionHandle property=handle.getExpressionProperty(propName);
  if (property == null) {
    return null;
  }
Object expression=property.getValue();
if (expression == null) {
expression=userDef.getDefault();
}
if (expression instanceof org.eclipse.birt.report.model.api.Expression) {
return createExpression((org.eclipse.birt.report.model.api.Expression)expression);
}
return null;
case IPropertyType.NUMBER_TYPE:
case IPropertyType.INTEGER_TYPE:
case IPropertyType.FLOAT_TYPE:
return createConstant(DataType.DOUBLE_TYPE,valueExpr);
case IPropertyType.BOOLEAN_TYPE:
return createConstant(DataType.BOOLEAN_TYPE,valueExpr);
case IPropertyType.DATE_TIME_TYPE:
return createConstant(DataType.DATE_TYPE,valueExpr);
default :
return createConstant(DataType.STRING_TYPE,valueExpr);
}
}",0.993006993006993
68331,"private static void overwriteProp(StyleEntry cEntry,StyleEntry entry,int id){
  if (StyleEntry.isNull(entry.getProperty(id))) {
    entry.setProperty(id,cEntry.getProperty(id));
  }
}","private static boolean overwriteProp(StyleEntry cEntry,StyleEntry entry,int id){
  if (StyleEntry.isNull(entry.getProperty(id))) {
    Object property=cEntry.getProperty(id);
    if (property != null) {
      entry.setProperty(id,property);
      return true;
    }
    return false;
  }
  return false;
}",0.6311475409836066
68332,"public static void applyBottomBorder(StyleEntry cEntry,StyleEntry entry){
  if (entry == null) {
    return;
  }
  overwriteProp(cEntry,entry,StyleConstant.BORDER_BOTTOM_COLOR_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_BOTTOM_STYLE_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
}","public static boolean applyBottomBorder(StyleEntry cEntry,StyleEntry entry){
  if (entry == null) {
    return false;
  }
  boolean isChanged=false;
  isChanged|=overwriteProp(cEntry,entry,StyleConstant.BORDER_BOTTOM_COLOR_PROP);
  isChanged|=overwriteProp(cEntry,entry,StyleConstant.BORDER_BOTTOM_STYLE_PROP);
  isChanged|=overwriteProp(cEntry,entry,StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
  return isChanged;
}",0.8683853459972863
68333,"public void applyContainerBottomStyle(XlsContainer container){
  ContainerSizeInfo rule=container.getSizeInfo();
  StyleEntry entry=container.getStyle();
  int start=rule.getStartCoordinate();
  int col=engine.getAxis().getColumnIndexByCoordinate(start);
  int span=engine.getAxis().getColumnIndexByCoordinate(rule.getEndCoordinate());
  for (int i=col; i < span; i++) {
    SheetData data=engine.getColumnLastData(i);
    if (data == null) {
      continue;
    }
    int styleId=data.getStyleId();
    if (styleId != -1) {
      StyleEntry originalStyle=getStyle(styleId);
      StyleEntry newStyle=new StyleEntry(originalStyle);
      StyleBuilder.applyBottomBorder(entry,newStyle);
      data.setStyleId(getStyleId(newStyle));
    }
  }
}","public void applyContainerBottomStyle(XlsContainer container){
  ContainerSizeInfo rule=container.getSizeInfo();
  StyleEntry entry=container.getStyle();
  int start=rule.getStartCoordinate();
  int col=engine.getAxis().getColumnIndexByCoordinate(start);
  int span=engine.getAxis().getColumnIndexByCoordinate(rule.getEndCoordinate());
  for (int i=col; i < span; i++) {
    SheetData data=engine.getColumnLastData(i);
    if (data == null) {
      continue;
    }
    int styleId=data.getStyleId();
    if (styleId != -1) {
      StyleEntry originalStyle=getStyle(styleId);
      StyleEntry newStyle=new StyleEntry(originalStyle);
      boolean isChanged=StyleBuilder.applyBottomBorder(entry,newStyle);
      if (isChanged)       data.setStyleId(getStyleId(newStyle));
    }
  }
}",0.9743926460932372
68334,"public int getStyleId(StyleEntry entry){
  if (entry == null) {
    return 0;
  }
  int styleId=0;
  if (style2id.get(entry) != null) {
    styleId=style2id.get(entry).intValue();
  }
 else {
    styleId=styleID;
    style2id.put(entry,new Integer(styleId));
    styleID++;
  }
  return styleId;
}","public int getStyleId(StyleEntry entry){
  if (entry == null) {
    return 0;
  }
  int styleId=0;
  Integer id=style2id.get(entry);
  if (id != null) {
    styleId=id.intValue();
  }
 else {
    styleId=styleID;
    style2id.put(entry,new Integer(styleId));
    id2Style.put(new Integer(styleId),entry);
    styleID++;
  }
  return styleId;
}",0.809375
68335,"public StyleEntry getStyle(int id){
  for (  Entry<StyleEntry,Integer> entry : style2id.entrySet()) {
    if (entry.getValue() == id) {
      return entry.getKey();
    }
  }
  return null;
}","public StyleEntry getStyle(int id){
  return id2Style.get(id);
}",0.4313725490196078
68336,"public int hashCode(){
  int code=0;
  for (int i=0; i < StyleConstant.COUNT; i++) {
    int hashCode=props[i] == null ? 0 : props[i].hashCode();
    code+=hashCode * 2 + 1;
    if (Integer.MAX_VALUE == code) {
      break;
    }
  }
  return code;
}","public int hashCode(){
  if (hashCode == null) {
    int code=0;
    for (int i=0; i < StyleConstant.COUNT; i++) {
      int hashCode=props[i] == null ? 0 : props[i].hashCode();
      code+=hashCode * 2 + 1;
    }
    hashCode=new Integer(code);
    ;
  }
  return hashCode.intValue();
}",0.7001862197392924
68337,"public void setProperty(int id,Object value){
  props[id]=value;
}","public void setProperty(int id,Object value){
  props[id]=value;
  hashCode=null;
}",0.8859060402684564
68338,"public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof StyleEntry)) {
    return false;
  }
  if (obj == this) {
    return true;
  }
  StyleEntry tar=(StyleEntry)obj;
  for (int i=0; i < StyleConstant.COUNT; i++) {
    if (props[i] != null) {
      if (!props[i].equals(tar.getProperty(i))) {
        return false;
      }
    }
 else {
      if (props[i] != tar.getProperty(i)) {
        return false;
      }
    }
  }
  return true;
}","public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof StyleEntry)) {
    return false;
  }
  StyleEntry tar=(StyleEntry)obj;
  for (int i=0; i < StyleConstant.COUNT; i++) {
    if (props[i] != null) {
      if (!props[i].equals(tar.getProperty(i))) {
        return false;
      }
    }
 else {
      if (props[i] != tar.getProperty(i)) {
        return false;
      }
    }
  }
  return true;
}",0.905945945945946
68339,"protected void justify(){
  int spacing=width - currentIP;
  int whiteSpaceNumber=getWhiteSpaceNumber(this);
  if (whiteSpaceNumber > 0) {
    int wordSpacing=spacing / whiteSpaceNumber;
    adjustWordSpacing(wordSpacing,this);
  }
 else {
    int letterNumber=getLetterNumber(this);
    if (letterNumber > 0) {
      int letterSpacing=spacing / (letterNumber - 1);
      adjustLetterSpacing(letterSpacing,this);
    }
  }
}","protected void justify(){
  int spacing=width - currentIP;
  int whiteSpaceNumber=getWhiteSpaceNumber(this);
  if (whiteSpaceNumber > 0) {
    int wordSpacing=spacing / whiteSpaceNumber;
    adjustWordSpacing(wordSpacing,this);
  }
 else {
    int letterNumber=getLetterNumber(this);
    if (letterNumber > 1) {
      int letterSpacing=spacing / (letterNumber - 1);
      adjustLetterSpacing(letterSpacing,this);
    }
  }
}",0.9976415094339622
68340,"private static String getAdaptedExprText(IModelAdapter adapter,ComputedColumnHandle target){
  ExpressionHandle eh=target.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.EXPRESSION_MEMBER);
  if (eh == null) {
    return null;
  }
  Expression expr=(Expression)eh.getValue();
  return adapter.adaptExpression(expr).getText();
}","private static String getAdaptedExprText(IModelAdapter adapter,ComputedColumnHandle target){
  ExpressionHandle eh=target.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.EXPRESSION_MEMBER);
  if (eh == null) {
    return null;
  }
  Expression expr=(Expression)eh.getValue();
  ScriptExpression scriptExpr=adapter.adaptExpression(expr);
  if (scriptExpr == null)   return null;
  return scriptExpr.getText();
}",0.8116646415552855
68341,"boolean nodeCreated(){
  return node_created;
}","public boolean nodeCreated(){
  return node_created;
}",0.9306930693069309
68342,"Node popNode(){
  if (--sp < mk) {
    mk=((Integer)marks.pop()).intValue();
  }
  return (Node)nodes.pop();
}","public Node popNode(){
  if (--sp < mk) {
    mk=marks.remove(marks.size() - 1);
  }
  return nodes.remove(nodes.size() - 1);
}",0.6666666666666666
68343,"void pushNode(Node n){
  nodes.push(n);
  ++sp;
}","public void pushNode(Node n){
  nodes.add(n);
  ++sp;
}",0.8653846153846154
68344,"JJTParserState(){
  nodes=new java.util.Stack();
  marks=new java.util.Stack();
  sp=0;
  mk=0;
}","public JJTParserState(){
  nodes=new java.util.ArrayList<Node>();
  marks=new java.util.ArrayList<Integer>();
  sp=0;
  mk=0;
}",0.7946428571428571
68345,"Node peekNode(){
  return (Node)nodes.peek();
}","public Node peekNode(){
  return nodes.get(nodes.size() - 1);
}",0.7090909090909091
68346,"void clearNodeScope(Node n){
  while (sp > mk) {
    popNode();
  }
  mk=((Integer)marks.pop()).intValue();
}","public void clearNodeScope(Node n){
  while (sp > mk) {
    popNode();
  }
  mk=marks.remove(marks.size() - 1);
}",0.7747747747747747
68347,"int nodeArity(){
  return sp - mk;
}","public int nodeArity(){
  return sp - mk;
}",0.9113924050632912
68348,"void closeNodeScope(Node n,boolean condition){
  if (condition) {
    int a=nodeArity();
    mk=((Integer)marks.pop()).intValue();
    while (a-- > 0) {
      Node c=popNode();
      c.jjtSetParent(n);
      n.jjtAddChild(c,a);
    }
    n.jjtClose();
    pushNode(n);
    node_created=true;
  }
 else {
    mk=((Integer)marks.pop()).intValue();
    node_created=false;
  }
}","public void closeNodeScope(Node n,boolean condition){
  if (condition) {
    int a=nodeArity();
    mk=marks.remove(marks.size() - 1);
    while (a-- > 0) {
      Node c=popNode();
      c.jjtSetParent(n);
      n.jjtAddChild(c,a);
    }
    n.jjtClose();
    pushNode(n);
    node_created=true;
  }
 else {
    mk=marks.remove(marks.size() - 1);
    node_created=false;
  }
}",0.8282290279627164
68349,"void reset(){
  nodes.removeAllElements();
  marks.removeAllElements();
  sp=0;
  mk=0;
}","public void reset(){
  nodes.clear();
  marks.clear();
  sp=0;
  mk=0;
}",0.7329192546583851
68350,"void openNodeScope(Node n){
  marks.push(new Integer(mk));
  mk=sp;
  n.jjtOpen();
}","public void openNodeScope(Node n){
  marks.add(mk);
  mk=sp;
  n.jjtOpen();
}",0.8322981366459627
68351,"Node rootNode(){
  return (Node)nodes.elementAt(0);
}","public Node rootNode(){
  return nodes.get(0);
}",0.7920792079207921
68352,"/** 
 * Used to convert raw characters to their escaped version when these raw version cannot be used as part of an ASCII string literal.
 */
protected String add_escapes(String str){
  StringBuffer retval=new StringBuffer();
  char ch;
  for (int i=0; i < str.length(); i++) {
switch (str.charAt(i)) {
case 0:
      continue;
case '\b':
    retval.append(""String_Node_Str"");
  continue;
case '\t':
retval.append(""String_Node_Str"");
continue;
case '\n':
retval.append(""String_Node_Str"");
continue;
case '\f':
retval.append(""String_Node_Str"");
continue;
case '\r':
retval.append(""String_Node_Str"");
continue;
case '\""':
retval.append(""String_Node_Str"");
continue;
case '\'':
retval.append(""String_Node_Str"");
continue;
case '\\':
retval.append(""String_Node_Str"");
continue;
default :
if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {
String s=""String_Node_Str"" + Integer.toString(ch,16);
retval.append(""String_Node_Str"" + s.substring(s.length() - 4,s.length()));
}
 else {
retval.append(ch);
}
continue;
}
}
return retval.toString();
}","/** 
 * Used to convert raw characters to their escaped version when these raw version cannot be used as part of an ASCII string literal.
 */
static String add_escapes(String str){
  StringBuffer retval=new StringBuffer();
  char ch;
  for (int i=0; i < str.length(); i++) {
switch (str.charAt(i)) {
case 0:
      continue;
case '\b':
    retval.append(""String_Node_Str"");
  continue;
case '\t':
retval.append(""String_Node_Str"");
continue;
case '\n':
retval.append(""String_Node_Str"");
continue;
case '\f':
retval.append(""String_Node_Str"");
continue;
case '\r':
retval.append(""String_Node_Str"");
continue;
case '\""':
retval.append(""String_Node_Str"");
continue;
case '\'':
retval.append(""String_Node_Str"");
continue;
case '\\':
retval.append(""String_Node_Str"");
continue;
default :
if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {
String s=""String_Node_Str"" + Integer.toString(ch,16);
retval.append(""String_Node_Str"" + s.substring(s.length() - 4,s.length()));
}
 else {
retval.append(ch);
}
continue;
}
}
return retval.toString();
}",0.992707826932426
68353,"public ParseException(String message){
  super(message);
  specialConstructor=false;
}","/** 
 * Constructor with message. 
 */
public ParseException(String message){
  super(message);
}",0.6338797814207651
68354,"/** 
 * Set scripts class folder
 */
protected void setScriptingPath(){
  System.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,this.getClassFolder() + ""String_Node_Str"");
}","/** 
 * Set scripts class folder
 */
protected void setScriptingPath(){
}",0.5887096774193549
68355,"public void testCancelRunAndRenderTask(){
  String input=this.genInputFile(""String_Node_Str"");
  long bTime, eTime, timeSpan1, timeSpan2, timeSpan3;
  try {
    IReportRunnable runnable=engine.openReportDesign(new FileInputStream(new File(input)));
    IRunAndRenderTask task=engine.createRunAndRenderTask(runnable);
    HTMLRenderOption option=new HTMLRenderOption();
    option.setOutputFormat(""String_Node_Str"");
    task.setRenderOption(option);
    task.setAppContext(new HashMap());
    CancelTask cancelThread=new CancelTask(""String_Node_Str"",task);
    cancelThread.start();
    bTime=System.currentTimeMillis();
    task.run();
    eTime=System.currentTimeMillis();
    task.close();
    timeSpan1=eTime - bTime;
    CancelWithFlagTask cancelWithFlagTask=new CancelWithFlagTask(""String_Node_Str"",task);
    cancelWithFlagTask.start();
    bTime=System.currentTimeMillis();
    task.run();
    eTime=System.currentTimeMillis();
    task.close();
    timeSpan2=eTime - bTime;
    task=engine.createRunAndRenderTask(runnable);
    task.setRenderOption(option);
    task.setAppContext(new HashMap());
    bTime=System.currentTimeMillis();
    task.run();
    eTime=System.currentTimeMillis();
    task.close();
    timeSpan3=eTime - bTime;
    assertTrue(""String_Node_Str"",timeSpan3 > timeSpan1);
    assertTrue(""String_Node_Str"",timeSpan3 > timeSpan2);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}","public void testCancelRunAndRenderTask(){
  String input=this.genInputFile(""String_Node_Str"");
  long bTime, eTime, timeSpan1=0, timeSpan2=0, timeSpan3=0;
  try {
    IReportRunnable runnable=engine.openReportDesign(new FileInputStream(new File(input)));
    IRunAndRenderTask task=engine.createRunAndRenderTask(runnable);
    HTMLRenderOption option=new HTMLRenderOption();
    option.setOutputFormat(""String_Node_Str"");
    for (int i=0; i < 3; i++) {
      task=engine.createRunAndRenderTask(runnable);
      task.setRenderOption(option);
      task.setAppContext(new HashMap());
      task.run();
      task.close();
    }
    for (int i=0; i < 10; i++) {
      task=engine.createRunAndRenderTask(runnable);
      task.setRenderOption(option);
      task.setAppContext(new HashMap());
      engine.getConfig().getAppContext().put(""String_Node_Str"",task);
      bTime=System.currentTimeMillis();
      task.run();
      eTime=System.currentTimeMillis();
      task.close();
      timeSpan1+=eTime - bTime;
      task=engine.createRunAndRenderTask(runnable);
      engine.getConfig().getAppContext().put(""String_Node_Str"",task);
      task.setRenderOption(option);
      bTime=System.currentTimeMillis();
      task.run();
      eTime=System.currentTimeMillis();
      task.close();
      timeSpan2+=eTime - bTime;
      task=engine.createRunAndRenderTask(runnable);
      engine.getConfig().getAppContext().put(""String_Node_Str"",null);
      engine.getConfig().getAppContext().put(""String_Node_Str"",null);
      task.setRenderOption(option);
      bTime=System.currentTimeMillis();
      task.run();
      eTime=System.currentTimeMillis();
      task.close();
      timeSpan3+=eTime - bTime;
    }
    assertTrue(""String_Node_Str"",timeSpan3 > timeSpan1);
    assertTrue(""String_Node_Str"",timeSpan3 > timeSpan2);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}",0.5988059701492537
68356,"/** 
 * Calculates the absolute positions of image map when given the position of image. The image map position is relative to the left up corner of the image. The argument and returned value are both 4 length integer area, the four value of which are x, y of up left corner, width and height respectively.
 * @param vertex the vertex coordinates.
 * @param imageArea image area of the image in which the image map is.
 * @return absolute position of the image map.
 */
private int[] getAbsoluteVertices(int[] vertex,IImageArea imageArea){
  assert(intrinsic != null);
  int[] result=null;
  int imageHeight=imageArea.getHeight();
  int imageWidth=imageArea.getWidth();
  int intrinsicWidth=intrinsic.getWidth();
  int intrinsicHeight=intrinsic.getHeight();
  float ratioX=(float)imageWidth / (float)intrinsicWidth;
  float ratioY=(float)imageHeight / (float)intrinsicHeight;
  int imageX=imageArea.getX();
  int imageY=imageArea.getY();
  if (""String_Node_Str"".equalsIgnoreCase(context.getFormat())) {
    result=new int[vertex.length];
    for (int i=0; i < vertex.length; ) {
      result[i]=imageX + (int)(getTranslatedLengthX(vertex[i]) * ratioX);
      i++;
      result[i]=imageY + (int)(getTranslatedLengthY(vertex[i]) * ratioY);
      i++;
    }
  }
 else {
    for (int i=0; i < 4; ) {
      vertex[i]=getTranslatedLengthX(vertex[i]);
      i++;
      vertex[i]=getTranslatedLengthY(vertex[i]);
      i++;
    }
    result=new int[4];
    result[0]=imageX + (int)(vertex[0] * ratioX);
    result[1]=imageY + (int)(vertex[1] * ratioY);
    result[2]=(int)(vertex[2] * ratioX);
    result[3]=(int)(vertex[3] * ratioY);
  }
  return result;
}","/** 
 * Calculates the absolute positions of image map when given the position of image. The image map position is relative to the left up corner of the image. The argument and returned value are both 4 length integer area, the four value of which are x, y of up left corner, width and height respectively.
 * @param vertex the vertex coordinates.
 * @param imageArea image area of the image in which the image map is.
 * @return absolute position of the image map.
 */
private int[] getAbsoluteVertices(int[] vertex,IImageArea imageArea){
  int[] result=null;
  float ratioX=1.0f;
  float ratioY=1.0f;
  if (intrinsic != null) {
    int imageHeight=imageArea.getHeight();
    int imageWidth=imageArea.getWidth();
    int intrinsicWidth=intrinsic.getWidth();
    int intrinsicHeight=intrinsic.getHeight();
    ratioX=(float)imageWidth / (float)intrinsicWidth;
    ratioY=(float)imageHeight / (float)intrinsicHeight;
  }
  int imageX=imageArea.getX();
  int imageY=imageArea.getY();
  if (""String_Node_Str"".equalsIgnoreCase(context.getFormat())) {
    result=new int[vertex.length];
    for (int i=0; i < vertex.length; ) {
      result[i]=imageX + (int)(getTranslatedLengthX(vertex[i]) * ratioX);
      i++;
      result[i]=imageY + (int)(getTranslatedLengthY(vertex[i]) * ratioY);
      i++;
    }
  }
 else {
    for (int i=0; i < 4; ) {
      vertex[i]=getTranslatedLengthX(vertex[i]);
      i++;
      vertex[i]=getTranslatedLengthY(vertex[i]);
      i++;
    }
    result=new int[4];
    result[0]=imageX + (int)(vertex[0] * ratioX);
    result[1]=imageY + (int)(vertex[1] * ratioY);
    result[2]=(int)(vertex[2] * ratioX);
    result[3]=(int)(vertex[3] * ratioY);
  }
  return result;
}",0.9634949132256134
68357,"public void layout() throws BirtException {
  init();
  boolean isEmptyLine=true;
  boolean innerTextInserted=false;
  if (""String_Node_Str"".equalsIgnoreCase(context.getFormat()) && objectType == TYPE_FLASH_OBJECT) {
    innerTextInserted=true;
    innerText=createInnerTextLayout();
    innerText.content.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
    innerText.setVerticalAlign(IStyle.MIDDLE_VALUE);
    if (PropertyUtil.isInlineElement(image)) {
      InlineStackingArea lineParent=(InlineStackingArea)parent;
      isEmptyLine=lineParent.isEmptyLine();
    }
    int lastIP=root.currentIP;
    int lastBP=root.currentBP;
    innerText.layout();
    innerText.setAllocatedPosition(0,0);
    root.currentIP=lastIP;
    root.currentBP=lastBP;
  }
  if (PropertyUtil.isInlineElement(image)) {
    assert(parent instanceof InlineStackingArea);
    InlineStackingArea lineParent=(InlineStackingArea)parent;
    if (root.getAllocatedWidth() > parent.getCurrentMaxContentWidth()) {
      if ((innerTextInserted && !isEmptyLine) || (!innerTextInserted && !lineParent.isEmptyLine())) {
        lineParent.endLine(false);
        layout();
      }
 else {
        parent.add(root);
        root.finished=true;
        parent.update(root);
        return;
      }
    }
 else {
      parent.add(root);
      root.finished=true;
      parent.update(root);
      return;
    }
  }
 else {
    parent.add(root);
    if (!parent.isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=root.getAllocatedHeight();
      if (aHeight + parent.getAbsoluteBP() > context.getMaxBP()) {
        parent.autoPageBreak();
      }
    }
    root.finished=true;
    parent.update(root);
  }
}","public void layout() throws BirtException {
  init();
  boolean isEmptyLine=true;
  boolean innerTextInserted=false;
  if (""String_Node_Str"".equalsIgnoreCase(context.getFormat()) && objectType == TYPE_FLASH_OBJECT) {
    innerTextInserted=true;
    innerText=createInnerTextLayout();
    innerText.content.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
    innerText.setVerticalAlign(IStyle.MIDDLE_VALUE);
    innerText.setIgnoreReordering(true);
    if (PropertyUtil.isInlineElement(image)) {
      InlineStackingArea lineParent=(InlineStackingArea)parent;
      isEmptyLine=lineParent.isEmptyLine();
    }
    int lastIP=root.currentIP;
    int lastBP=root.currentBP;
    innerText.layout();
    innerText.setAllocatedPosition(0,0);
    root.currentIP=lastIP;
    root.currentBP=lastBP;
  }
  if (PropertyUtil.isInlineElement(image)) {
    assert(parent instanceof InlineStackingArea);
    InlineStackingArea lineParent=(InlineStackingArea)parent;
    if (root.getAllocatedWidth() > parent.getCurrentMaxContentWidth()) {
      if ((innerTextInserted && !isEmptyLine) || (!innerTextInserted && !lineParent.isEmptyLine())) {
        lineParent.endLine(false);
        layout();
      }
 else {
        parent.add(root);
        root.finished=true;
        parent.update(root);
        return;
      }
    }
 else {
      parent.add(root);
      root.finished=true;
      parent.update(root);
      return;
    }
  }
 else {
    parent.add(root);
    if (!parent.isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=root.getAllocatedHeight();
      if (aHeight + parent.getAbsoluteBP() > context.getMaxBP()) {
        parent.autoPageBreak();
      }
    }
    root.finished=true;
    parent.update(root);
  }
}",0.9881262670141906
68358,"protected void checkObjectType(){
  IImageContent image=(IImageContent)content;
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    objectType=TYPE_FLASH_OBJECT;
  }
 else   if (SvgFile.isSvg(mimeType,uri,extension)) {
    objectType=TYPE_SVG_OBJECT;
  }
 else {
    objectType=TYPE_IMAGE_OBJECT;
  }
}","protected void checkObjectType(){
  IImageContent image=(IImageContent)content;
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    objectType=TYPE_FLASH_OBJECT;
  }
 else   if (SvgFile.isSvg(mimeType,uri,extension)) {
    image.setMIMEType(""String_Node_Str"");
    image.setExtension(""String_Node_Str"");
    objectType=TYPE_SVG_OBJECT;
  }
 else {
    objectType=TYPE_IMAGE_OBJECT;
  }
}",0.9069003285870756
68359,"/** 
 * Creates legend for chart.
 * @param imageContent the image content of the chart.
 * @param imageArea the imageArea of the chart.
 */
private void processChartLegend(IImageContent imageContent,IImageArea imageArea){
  if (null == intrinsic) {
    return;
  }
  Object imageMapObject=imageContent.getImageMap();
  boolean hasImageMap=(imageMapObject != null) && (imageMapObject instanceof String) && (((String)imageMapObject).length() > 0);
  if (hasImageMap) {
    createImageMap((String)imageMapObject,imageArea);
  }
}","/** 
 * Creates legend for chart.
 * @param imageContent the image content of the chart.
 * @param imageArea the imageArea of the chart.
 */
private void processChartLegend(IImageContent imageContent,IImageArea imageArea){
  Object imageMapObject=imageContent.getImageMap();
  boolean hasImageMap=(imageMapObject != null) && (imageMapObject instanceof String) && (((String)imageMapObject).length() > 0);
  if (hasImageMap) {
    createImageMap((String)imageMapObject,imageArea);
  }
}",0.7774480712166172
68360,"/** 
 * Puts container's child areas into the visual (display) order and repositions them following that order horizontally.
 * @author Lina Kemmel
 */
private void reorderVisually(ContainerArea parent){
  int n=parent.getChildrenCount();
  if (n == 0)   return;
  int i=0;
  AbstractArea[] areas=new AbstractArea[n];
  byte[] levels=new byte[n];
  Iterator<?> iter=parent.getChildren();
  for (; i < n && iter.hasNext(); i++) {
    AbstractArea area=(AbstractArea)iter.next();
    areas[i]=area;
    if (area instanceof TextArea)     levels[i]=(byte)((TextArea)area).getRunLevel();
 else {
      levels[i]=baseLevel;
      if (area instanceof InlineStackingArea) {
        reorderVisually((ContainerArea)area);
      }
    }
  }
  if (n > 1) {
    int parentWidth=parent.getContentWidth();
    Bidi.reorderVisually(levels,0,areas,0,n);
    for (i=0; i < n; i++) {
      int x=areas[i].getAllocatedX();
      areas[i].setAllocatedPosition(parentWidth - x - areas[i].getAllocatedWidth(),areas[i].getAllocatedY());
    }
  }
}","/** 
 * Puts container's child areas into the visual (display) order and repositions them following that order horizontally.
 * @author Lina Kemmel
 */
private void reorderVisually(ContainerArea parent){
  int n=parent.getChildrenCount();
  if (n == 0)   return;
  int i=0;
  AbstractArea[] areas=new AbstractArea[n];
  byte[] levels=new byte[n];
  Iterator<?> iter=parent.getChildren();
  for (; i < n && iter.hasNext(); i++) {
    AbstractArea area=(AbstractArea)iter.next();
    areas[i]=area;
    if (area instanceof TextArea)     levels[i]=(byte)((TextArea)area).getRunLevel();
 else {
      levels[i]=baseLevel;
      if (area instanceof InlineStackingArea) {
        reorderVisually((ContainerArea)area);
      }
    }
  }
  if (n > 1) {
    int x=areas[0].getAllocatedX();
    Bidi.reorderVisually(levels,0,areas,0,n);
    for (i=0; i < n - 1; i++) {
      if (!areas[i].isIgnoreReordering()) {
        areas[i].setAllocatedPosition(x,areas[i].getAllocatedY());
        x+=areas[i].getAllocatedWidth();
      }
    }
    if (!areas[i].isIgnoreReordering()) {
      areas[i].setAllocatedPosition(x,areas[i].getAllocatedY());
    }
  }
}",0.8454083987078911
68361,"public void setExpression(String expr){
  if (expr != null && expr.length() > 0) {
    codec.decode(expr);
    eHelper.setExpression(codec.getExpression());
    eHelper.setExpressionType(codec.getType());
  }
 else {
    eHelper.setExpression(codec.getExpression());
  }
  eb.refresh();
}","public void setExpression(String expr){
  if (expr != null && expr.length() > 0) {
    codec.decode(expr);
    eHelper.setExpression(codec.getExpression());
    eHelper.setExpressionType(codec.getType());
  }
 else {
    eHelper.setExpression(expr);
  }
  eb.refresh();
}",0.9552772808586762
68362,"@Override public Object visitExpressionValue(ExpressionValueNode node,Object value){
  StringBuffer buffer=(StringBuffer)value;
  buffer.append(""String_Node_Str"");
  if (node.getFormat() != null) {
    buffer.append(""String_Node_Str"");
    buffer.append(node.getFormat());
    buffer.append(""String_Node_Str"");
  }
  buffer.append(""String_Node_Str"");
  buffer.append(node.getValue());
  buffer.append(""String_Node_Str"");
  return buffer;
}","public Object visitExpressionValue(ExpressionValueNode node,Object value){
  StringBuffer buffer=(StringBuffer)value;
  buffer.append(""String_Node_Str"");
  if (node.getFormat() != null) {
    buffer.append(""String_Node_Str"");
    buffer.append(node.getFormat());
    buffer.append(""String_Node_Str"");
  }
  buffer.append(""String_Node_Str"");
  buffer.append(node.getValue());
  buffer.append(""String_Node_Str"");
  return buffer;
}",0.988479262672811
68363,"private Expression createUserProperty(DesignElementHandle handle,UserPropertyDefn userDef){
  String propName=userDef.getName();
  String valueExpr=handle.getStringProperty(propName);
switch (userDef.getTypeCode()) {
case IPropertyType.SCRIPT_TYPE:
case IPropertyType.EXPRESSION_TYPE:
    if (valueExpr != null) {
      return createExpression(valueExpr);
    }
 else {
      Object defaultValue=userDef.getDefault();
      if (defaultValue instanceof org.eclipse.birt.report.model.api.Expression) {
        return createExpression((org.eclipse.birt.report.model.api.Expression)defaultValue);
      }
 else {
        return null;
      }
    }
case IPropertyType.NUMBER_TYPE:
case IPropertyType.INTEGER_TYPE:
case IPropertyType.FLOAT_TYPE:
  return createConstant(DataType.DOUBLE_TYPE,valueExpr);
case IPropertyType.BOOLEAN_TYPE:
return createConstant(DataType.BOOLEAN_TYPE,valueExpr);
case IPropertyType.DATE_TIME_TYPE:
return createConstant(DataType.DATE_TYPE,valueExpr);
default :
return createConstant(DataType.STRING_TYPE,valueExpr);
}
}","private Expression createUserProperty(DesignElementHandle handle,UserPropertyDefn userDef){
  String propName=userDef.getName();
  String valueExpr=handle.getStringProperty(propName);
switch (userDef.getTypeCode()) {
case IPropertyType.SCRIPT_TYPE:
case IPropertyType.EXPRESSION_TYPE:
    ExpressionHandle property=handle.getExpressionProperty(propName);
  if (property == null) {
    return null;
  }
Object expression=property.getExpression();
if (expression == null) {
expression=userDef.getDefault();
}
if (expression instanceof org.eclipse.birt.report.model.api.Expression) {
return createExpression((org.eclipse.birt.report.model.api.Expression)expression);
}
return null;
case IPropertyType.NUMBER_TYPE:
case IPropertyType.INTEGER_TYPE:
case IPropertyType.FLOAT_TYPE:
return createConstant(DataType.DOUBLE_TYPE,valueExpr);
case IPropertyType.BOOLEAN_TYPE:
return createConstant(DataType.BOOLEAN_TYPE,valueExpr);
case IPropertyType.DATE_TIME_TYPE:
return createConstant(DataType.DATE_TYPE,valueExpr);
default :
return createConstant(DataType.STRING_TYPE,valueExpr);
}
}",0.6811525743977327
68364,"private void createNewDataSet(){
  List existingDataSets=getDataSets();
  DefaultDataSetWizard wizard=new DefaultDataSetWizard();
  wizard.setWindowTitle(Messages.getString(""String_Node_Str""));
  WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),wizard);
  if (dialog.open() == WizardDialog.OK) {
    List newDataSets=getDataSets();
    if (editDataSet(existingDataSets,newDataSets)) {
      notifyResult(true);
    }
 else {
      notifyResult(false);
    }
    ReportRequest request=new ReportRequest(ReportRequest.CREATE_ELEMENT);
    List selectionObjects=new ArrayList();
    selectionObjects.add(dataSetHandle);
    request.setSelectionObject(selectionObjects);
    SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
    SessionHandleAdapter.getInstance().getCommandStack().commit();
  }
 else {
    notifyResult(false);
    SessionHandleAdapter.getInstance().getCommandStack().rollback();
  }
}","private void createNewDataSet(){
  DefaultDataSetWizard wizard=new DefaultDataSetWizard();
  wizard.setWindowTitle(Messages.getString(""String_Node_Str""));
  WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),wizard);
  if (dialog.open() == WizardDialog.OK) {
    DataSetHandle ds=wizard.getNewCreateDataSetHandle();
    if (editDataSet(ds)) {
      notifyResult(true);
    }
 else {
      notifyResult(false);
    }
    ReportRequest request=new ReportRequest(ReportRequest.CREATE_ELEMENT);
    List selectionObjects=new ArrayList();
    selectionObjects.add(dataSetHandle);
    request.setSelectionObject(selectionObjects);
    SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
    SessionHandleAdapter.getInstance().getCommandStack().commit();
  }
 else {
    notifyResult(false);
    SessionHandleAdapter.getInstance().getCommandStack().rollback();
  }
}",0.9004237288135594
68365,"private boolean editDataSet(List existingDataSets,List newDataSets){
  if (existingDataSets == null || newDataSets == null) {
    return false;
  }
  if (newDataSets.size() <= existingDataSets.size()) {
    return false;
  }
  dataSetHandle=findNewDataSet(existingDataSets,newDataSets);
  if (dataSetHandle == null)   return false;
  if (dataSetHandle instanceof ScriptDataSetHandle) {
    return false;
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dataSetHandle,true);
  return (dialog.open() == Window.OK);
}","private boolean editDataSet(DataSetHandle ds){
  dataSetHandle=ds;
  if (dataSetHandle == null)   return false;
  if (dataSetHandle instanceof ScriptDataSetHandle) {
    return false;
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dataSetHandle,true);
  return (dialog.open() == Window.OK);
}",0.6961206896551724
68366,"public boolean performFinish(){
  if (!canFinish())   return false;
  if (useTransaction) {
    Utility.getCommandStack().startTrans(CREATE_DATA_SET_TRANS_NAME);
  }
  DataSetHandle dataSetHandle=dataSetPage.createSelectedDataSet();
  if (dataSetHandle != null) {
    if (dataSetHandle instanceof ScriptDataSetHandle) {
      columnDefPage.saveResult(dataSetHandle);
    }
    if (useTransaction) {
      Utility.getCommandStack().commit();
    }
    try {
      createSelectedDataSetTearDown(dataSetHandle);
      DataSetUIUtil.updateColumnCache(dataSetHandle);
    }
 catch (    Exception e) {
      if (e instanceof SWTException) {
        SWTException swtException=(SWTException)e;
        if (swtException.code == SWT.ERROR_WIDGET_DISPOSED)         Utility.log(e);
      }
      ExceptionHandler.handle(e);
    }
  }
 else {
    if (useTransaction) {
      Utility.getCommandStack().rollback();
    }
    return false;
  }
  return true;
}","public boolean performFinish(){
  if (!canFinish())   return false;
  if (useTransaction) {
    Utility.getCommandStack().startTrans(CREATE_DATA_SET_TRANS_NAME);
  }
  dataSetHandle=dataSetPage.createSelectedDataSet();
  if (dataSetHandle != null) {
    if (dataSetHandle instanceof ScriptDataSetHandle) {
      columnDefPage.saveResult(dataSetHandle);
    }
    if (useTransaction) {
      Utility.getCommandStack().commit();
    }
    try {
      createSelectedDataSetTearDown(dataSetHandle);
      DataSetUIUtil.updateColumnCache(dataSetHandle);
    }
 catch (    Exception e) {
      if (e instanceof SWTException) {
        SWTException swtException=(SWTException)e;
        if (swtException.code == SWT.ERROR_WIDGET_DISPOSED)         Utility.log(e);
      }
      ExceptionHandler.handle(e);
    }
  }
 else {
    if (useTransaction) {
      Utility.getCommandStack().rollback();
    }
    return false;
  }
  return true;
}",0.992529348986126
68367,"private static ICubeQueryDefinition cloneCubeQueryDefinition(ICubeQueryDefinition query,IEdgeDrillFilter columnDrill,IEdgeDrillFilter rowDrill,ICube cube) throws DataException {
  ICubeQueryDefinition cloneQuery=null;
  if (query != null) {
    cloneQuery=new DrillCubeQueryDefinition(query.getName());
    if (query.getEdge(ICubeQueryDefinition.COLUMN_EDGE) != null) {
      if (columnDrill != null)       ((DrillCubeQueryDefinition)cloneQuery).setTupleOnColumn(columnDrill.getTuple());
      cloneEdgeDefinition(cloneQuery,query.getEdge(ICubeQueryDefinition.COLUMN_EDGE),ICubeQueryDefinition.COLUMN_EDGE,columnDrill,cube);
    }
    if (query.getEdge(ICubeQueryDefinition.ROW_EDGE) != null) {
      if (rowDrill != null)       ((DrillCubeQueryDefinition)cloneQuery).setTupleOnRow(rowDrill.getTuple());
      cloneEdgeDefinition(cloneQuery,query.getEdge(ICubeQueryDefinition.ROW_EDGE),ICubeQueryDefinition.ROW_EDGE,rowDrill,cube);
    }
    for (int i=0; i < query.getMeasures().size(); i++) {
      IMeasureDefinition measure=((IMeasureDefinition)query.getMeasures().get(i));
      IMeasureDefinition cloneMeasure=cloneQuery.createMeasure(measure.getName());
      cloneMeasure.setAggrFunction(measure.getAggrFunction());
    }
    for (int i=0; i < query.getComputedMeasures().size(); i++) {
      IComputedMeasureDefinition measure=((IComputedMeasureDefinition)query.getComputedMeasures().get(i));
      IMeasureDefinition cloneMeasure=cloneQuery.createComputedMeasure(measure.getName(),measure.getType(),measure.getExpression());
      cloneMeasure.setAggrFunction(measure.getAggrFunction());
    }
    List<String> levelDefnOnColumn=new ArrayList<String>();
    List<String> levelDefnOnRow=new ArrayList<String>();
    if (columnDrill != null) {
      levelDefnOnColumn=findLevelExpressionFromQuery(query.getEdge(ICubeQueryDefinition.COLUMN_EDGE),columnDrill,cube);
    }
    if (rowDrill != null) {
      levelDefnOnRow=findLevelExpressionFromQuery(query.getEdge(ICubeQueryDefinition.ROW_EDGE),rowDrill,cube);
    }
    for (int i=0; i < query.getBindings().size(); i++) {
      IBinding binding=(IBinding)query.getBindings().get(i);
      if (binding.getAggrFunction() != null) {
        List dimLevelOnColumn=getReferenceDimLevelOnEdge(query,ICubeQueryDefinition.COLUMN_EDGE);
        List dimLevelOnRow=getReferenceDimLevelOnEdge(query,ICubeQueryDefinition.ROW_EDGE);
        IBinding newBinding=new Binding(binding.getBindingName(),binding.getExpression());
        newBinding.setDataType(binding.getDataType());
        newBinding.setAggrFunction(binding.getAggrFunction());
        newBinding.setDisplayName(binding.getDisplayName());
        newBinding.setExportable(binding.exportable());
        newBinding.setFilter(newBinding.getFilter());
        for (int k=0; k < binding.getArguments().size(); k++) {
          newBinding.addArgument((IBaseExpression)binding.getArguments().get(k));
        }
        List aggrOns=binding.getAggregatOns();
        if (aggrOns != null && !aggrOns.isEmpty()) {
          boolean columnExist=false, rowExist=false;
          boolean detailLevelOnColumn=isGrandTotalOnEdge(aggrOns,dimLevelOnColumn);
          boolean detailLevelOnRow=isGrandTotalOnEdge(aggrOns,dimLevelOnRow);
          if (!detailLevelOnColumn && !detailLevelOnRow) {
            continue;
          }
          if ((detailLevelOnColumn && columnDrill != null) || (detailLevelOnRow && rowDrill != null)) {
            for (int k=0; k < aggrOns.size(); k++) {
              String aggrExpr=aggrOns.get(k).toString();
              DimLevel target=OlapExpressionUtil.getTargetDimLevel(aggrExpr);
              String dimensionNameOnColumn=columnDrill != null ? columnDrill.getTargetHierarchy().getDimension().getName() : null;
              String dimensionNameOnRow=rowDrill != null ? rowDrill.getTargetHierarchy().getDimension().getName() : null;
              if (!columnExist && target.getDimensionName().equals(dimensionNameOnColumn)) {
                if (!detailLevelOnColumn) {
                  newBinding.addAggregateOn(aggrExpr);
                }
 else {
                  columnExist=true;
                  for (int t=0; t < levelDefnOnColumn.size(); t++)                   newBinding.addAggregateOn((String)levelDefnOnColumn.get(t));
                }
              }
 else               if (!rowExist && target.getDimensionName().equals(dimensionNameOnRow)) {
                if (!detailLevelOnRow) {
                  newBinding.addAggregateOn(aggrExpr);
                }
 else {
                  rowExist=true;
                  for (int t=0; t < levelDefnOnRow.size(); t++)                   newBinding.addAggregateOn((String)levelDefnOnRow.get(t));
                }
              }
 else               if (!target.getDimensionName().equals(dimensionNameOnColumn) && !target.getDimensionName().equals(dimensionNameOnRow))               newBinding.addAggregateOn(aggrExpr);
            }
            cloneQuery.addBinding(newBinding);
          }
        }
      }
 else       cloneQuery.addBinding((IBinding)query.getBindings().get(i));
    }
    for (int i=0; i < query.getFilters().size(); i++) {
      cloneQuery.addFilter((IFilterDefinition)query.getFilters().get(i));
    }
    for (int i=0; i < query.getSorts().size(); i++) {
      cloneQuery.addSort((ISortDefinition)query.getSorts().get(i));
    }
  }
  return cloneQuery;
}","private static ICubeQueryDefinition cloneCubeQueryDefinition(ICubeQueryDefinition query,IEdgeDrillFilter columnDrill,IEdgeDrillFilter rowDrill,ICube cube) throws DataException {
  DrillCubeQueryDefinition cloneQuery=null;
  if (query != null) {
    cloneQuery=new DrillCubeQueryDefinition(query.getName());
    if (query.getEdge(ICubeQueryDefinition.COLUMN_EDGE) != null) {
      if (columnDrill != null) {
        ((DrillCubeQueryDefinition)cloneQuery).setTupleOnColumn(columnDrill.getTuple());
      }
      cloneEdgeDefinition(cloneQuery,query.getEdge(ICubeQueryDefinition.COLUMN_EDGE),ICubeQueryDefinition.COLUMN_EDGE,columnDrill,cube);
    }
    if (query.getEdge(ICubeQueryDefinition.ROW_EDGE) != null) {
      if (rowDrill != null) {
        ((DrillCubeQueryDefinition)cloneQuery).setTupleOnRow(rowDrill.getTuple());
      }
      cloneEdgeDefinition(cloneQuery,query.getEdge(ICubeQueryDefinition.ROW_EDGE),ICubeQueryDefinition.ROW_EDGE,rowDrill,cube);
    }
    for (int i=0; i < query.getMeasures().size(); i++) {
      IMeasureDefinition measure=((IMeasureDefinition)query.getMeasures().get(i));
      IMeasureDefinition cloneMeasure=cloneQuery.createMeasure(measure.getName());
      cloneMeasure.setAggrFunction(measure.getAggrFunction());
    }
    for (int i=0; i < query.getComputedMeasures().size(); i++) {
      IComputedMeasureDefinition measure=((IComputedMeasureDefinition)query.getComputedMeasures().get(i));
      IMeasureDefinition cloneMeasure=cloneQuery.createComputedMeasure(measure.getName(),measure.getType(),measure.getExpression());
      cloneMeasure.setAggrFunction(measure.getAggrFunction());
    }
    List<String> levelDefnOnColumn=new ArrayList<String>();
    List<String> levelDefnOnRow=new ArrayList<String>();
    if (columnDrill != null) {
      levelDefnOnColumn=findLevelExpressionFromQuery(query.getEdge(ICubeQueryDefinition.COLUMN_EDGE),columnDrill,cube);
    }
    if (rowDrill != null) {
      levelDefnOnRow=findLevelExpressionFromQuery(query.getEdge(ICubeQueryDefinition.ROW_EDGE),rowDrill,cube);
    }
    for (int i=0; i < query.getBindings().size(); i++) {
      IBinding binding=(IBinding)query.getBindings().get(i);
      if (binding.getAggrFunction() != null) {
        List dimLevelOnColumn=getReferenceDimLevelOnEdge(query,ICubeQueryDefinition.COLUMN_EDGE);
        List dimLevelOnRow=getReferenceDimLevelOnEdge(query,ICubeQueryDefinition.ROW_EDGE);
        IBinding newBinding=new Binding(binding.getBindingName(),binding.getExpression());
        newBinding.setDataType(binding.getDataType());
        newBinding.setAggrFunction(binding.getAggrFunction());
        newBinding.setDisplayName(binding.getDisplayName());
        newBinding.setExportable(binding.exportable());
        newBinding.setFilter(newBinding.getFilter());
        for (int k=0; k < binding.getArguments().size(); k++) {
          newBinding.addArgument((IBaseExpression)binding.getArguments().get(k));
        }
        List aggrOns=binding.getAggregatOns();
        if (aggrOns != null && !aggrOns.isEmpty()) {
          boolean columnExist=false, rowExist=false;
          boolean detailLevelOnColumn=isGrandTotalOnEdge(aggrOns,dimLevelOnColumn);
          boolean detailLevelOnRow=isGrandTotalOnEdge(aggrOns,dimLevelOnRow);
          if (!detailLevelOnColumn && !detailLevelOnRow) {
            continue;
          }
          if ((detailLevelOnColumn && columnDrill != null) || (detailLevelOnRow && rowDrill != null)) {
            for (int k=0; k < aggrOns.size(); k++) {
              String aggrExpr=aggrOns.get(k).toString();
              DimLevel target=OlapExpressionUtil.getTargetDimLevel(aggrExpr);
              String dimensionNameOnColumn=columnDrill != null ? columnDrill.getTargetHierarchy().getDimension().getName() : null;
              String dimensionNameOnRow=rowDrill != null ? rowDrill.getTargetHierarchy().getDimension().getName() : null;
              if (!columnExist && target.getDimensionName().equals(dimensionNameOnColumn)) {
                if (!detailLevelOnColumn) {
                  newBinding.addAggregateOn(aggrExpr);
                }
 else {
                  columnExist=true;
                  for (int t=0; t < levelDefnOnColumn.size(); t++)                   newBinding.addAggregateOn((String)levelDefnOnColumn.get(t));
                }
              }
 else               if (!rowExist && target.getDimensionName().equals(dimensionNameOnRow)) {
                if (!detailLevelOnRow) {
                  newBinding.addAggregateOn(aggrExpr);
                }
 else {
                  rowExist=true;
                  for (int t=0; t < levelDefnOnRow.size(); t++)                   newBinding.addAggregateOn((String)levelDefnOnRow.get(t));
                }
              }
 else               if (!target.getDimensionName().equals(dimensionNameOnColumn) && !target.getDimensionName().equals(dimensionNameOnRow))               newBinding.addAggregateOn(aggrExpr);
            }
            cloneQuery.addBinding(newBinding);
          }
        }
      }
 else       cloneQuery.addBinding((IBinding)query.getBindings().get(i));
    }
    for (int i=0; i < query.getFilters().size(); i++) {
      cloneQuery.addFilter((IFilterDefinition)query.getFilters().get(i));
    }
    for (int i=0; i < query.getSorts().size(); i++) {
      cloneQuery.addSort((ISortDefinition)query.getSorts().get(i));
    }
  }
  return cloneQuery;
}",0.9972155188416558
68368,"private static void cloneEdgeDefinition(ICubeQueryDefinition cloneQuery,IEdgeDefinition edge,int type,IEdgeDrillFilter drill,ICube cube) throws DataException {
  IEdgeDefinition cloneEdge=cloneQuery.createEdge(type);
  Iterator<IDimensionDefinition> dimension=edge.getDimensions().iterator();
  List<ILevelDefinition> levelDefnList=new ArrayList<ILevelDefinition>();
  while (dimension.hasNext()) {
    IDimensionDefinition dim=(IDimensionDefinition)dimension.next();
    IDimensionDefinition cloneDim=cloneEdge.createDimension(dim.getName());
    Iterator<IHierarchyDefinition> hierarchyIter=dim.getHierarchy().iterator();
    while (hierarchyIter.hasNext()) {
      IHierarchyDefinition hierarchy=(IHierarchyDefinition)hierarchyIter.next();
      IHierarchyDefinition cloneHier=cloneDim.createHierarchy(hierarchy.getName());
      if (drill != null && hierarchy.getName().equals(drill.getTargetHierarchy().getName())) {
{
          IHierarchy cubeHierarchy=findHierarchyFromCube(cube,hierarchy);
          for (          ILevel cubeLevel : cubeHierarchy.getLevels()) {
            ILevelDefinition cloneLevel;
            if (cubeLevel.getName().equals(drill.getTargetLevelName())) {
              cloneLevel=cloneHier.createLevel(cubeLevel.getName());
              levelDefnList.add(cloneLevel);
              break;
            }
            cloneLevel=cloneHier.createLevel(cubeLevel.getName());
            levelDefnList.add(cloneLevel);
          }
        }
      }
 else {
        Iterator<ILevelDefinition> levels=hierarchy.getLevels().iterator();
        while (levels.hasNext()) {
          ILevelDefinition level=(ILevelDefinition)levels.next();
          ILevelDefinition cloneLevel=cloneHier.createLevel(level.getName());
          levelDefnList.add(cloneLevel);
        }
      }
    }
  }
  if (drill != null) {
    Iterator members=drill.getTuple().iterator();
    Iterator levels=levelDefnList.iterator();
    while (members.hasNext() && levels.hasNext()) {
      Object[] key=(Object[])members.next();
      if (key != null && key.length > 0 && key[0] != null) {
        Object[][] multipleKey=new Object[key.length][];
        for (int i=0; i < key.length; i++) {
          multipleKey[i]=new Object[]{key[i]};
        }
        ISelection selection=SelectionFactory.createMutiKeySelection(multipleKey);
        ((DrillCubeQueryDefinition)cloneQuery).addLevelFilter(new LevelFilter(new DimLevel((ILevelDefinition)levels.next()),new ISelection[]{selection}));
      }
    }
  }
}","private static void cloneEdgeDefinition(DrillCubeQueryDefinition cloneQuery,IEdgeDefinition edge,int type,IEdgeDrillFilter drill,ICube cube) throws DataException {
  IEdgeDefinition cloneEdge=cloneQuery.createEdge(type);
  Iterator<IDimensionDefinition> dimension=edge.getDimensions().iterator();
  List<ILevelDefinition> levelDefnList=new ArrayList<ILevelDefinition>();
  while (dimension.hasNext()) {
    IDimensionDefinition dim=(IDimensionDefinition)dimension.next();
    IDimensionDefinition cloneDim=cloneEdge.createDimension(dim.getName());
    Iterator<IHierarchyDefinition> hierarchyIter=dim.getHierarchy().iterator();
    while (hierarchyIter.hasNext()) {
      IHierarchyDefinition hierarchy=(IHierarchyDefinition)hierarchyIter.next();
      IHierarchyDefinition cloneHier=cloneDim.createHierarchy(hierarchy.getName());
      if (drill != null && hierarchy.getName().equals(drill.getTargetHierarchy().getName())) {
{
          IHierarchy cubeHierarchy=findHierarchyFromCube(cube,hierarchy);
          for (          ILevel cubeLevel : cubeHierarchy.getLevels()) {
            ILevelDefinition cloneLevel;
            if (cubeLevel.getName().equals(drill.getTargetLevelName())) {
              cloneLevel=cloneHier.createLevel(cubeLevel.getName());
              levelDefnList.add(cloneLevel);
              break;
            }
            cloneLevel=cloneHier.createLevel(cubeLevel.getName());
            levelDefnList.add(cloneLevel);
          }
        }
      }
 else {
        Iterator<ILevelDefinition> levels=hierarchy.getLevels().iterator();
        while (levels.hasNext()) {
          ILevelDefinition level=(ILevelDefinition)levels.next();
          ILevelDefinition cloneLevel=cloneHier.createLevel(level.getName());
          levelDefnList.add(cloneLevel);
        }
      }
    }
  }
  if (drill != null) {
    Iterator members=drill.getTuple().iterator();
    Iterator levels=levelDefnList.iterator();
    Collection<Object[]> qulifiedTuple=new ArrayList<Object[]>();
    while (members.hasNext() && levels.hasNext()) {
      Object[] key=(Object[])members.next();
      if (key != null && key.length > 0 && key[0] != null) {
        ILevelDefinition level=(ILevelDefinition)levels.next();
        int dataType=getLevelDataType(level,cube);
        Object[] qualifiedKey=new Object[key.length];
        Object[][] multipleKey=new Object[key.length][];
        for (int i=0; i < key.length; i++) {
          try {
            Object value=DataTypeUtil.convert(key[i],dataType);
            qualifiedKey[i]=value;
            multipleKey[i]=new Object[]{value};
          }
 catch (          BirtException e) {
          }
        }
        qulifiedTuple.add(qualifiedKey);
        ISelection selection=SelectionFactory.createMutiKeySelection(multipleKey);
        ((DrillCubeQueryDefinition)cloneQuery).addLevelFilter(new LevelFilter(new DimLevel((ILevelDefinition)level),new ISelection[]{selection}));
      }
    }
    if (type == ICubeQueryDefinition.COLUMN_EDGE)     cloneQuery.setTupleOnColumn(qulifiedTuple);
 else     cloneQuery.setTupleOnRow(qulifiedTuple);
    drill.setTuple(qulifiedTuple);
  }
}",0.8546067814663589
68369,"private void copyOutputData() throws IOException {
  if (tempWriter != null) {
    BufferedReader reader=null;
    try {
      reader=new BufferedReader(new FileReader(new File(tempFilePath)));
      String line=reader.readLine();
      XMLWriterXLS xlsWriter=writer.getWriter();
      while (line != null) {
        xlsWriter.literal(""String_Node_Str"");
        xlsWriter.literal(line);
        line=reader.readLine();
      }
    }
  finally {
      if (reader != null) {
        reader.close();
        reader=null;
      }
    }
  }
}","private void copyOutputData() throws IOException {
  if (tempWriter != null) {
    tempWriter.close();
    BufferedReader reader=null;
    try {
      reader=new BufferedReader(new FileReader(new File(tempFilePath)));
      String line=reader.readLine();
      XMLWriterXLS xlsWriter=writer.getWriter();
      while (line != null) {
        xlsWriter.literal(""String_Node_Str"");
        xlsWriter.literal(line);
        line=reader.readLine();
      }
    }
  finally {
      if (reader != null) {
        reader.close();
        reader=null;
      }
    }
  }
}",0.9781818181818182
68370,"public void end() throws IOException {
  writer.end();
}","public void end() throws IOException {
  writer.end();
  File file=new File(tempFilePath);
  if (file.exists() && file.isFile()) {
    file.delete();
  }
}",0.5308056872037915
68371,"/** 
 * @param dataSetHandle
 * @param dataSetDesign
 * @param queryDefn
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSetHandle,IBaseDataSetDesign dataSetDesign,IQueryDefinition queryDefn,ExecutionContext context,DataRequestSession session) throws BirtException {
  if (!(dataSetHandle instanceof JointDataSetHandle || dataSetHandle instanceof DerivedDataSetHandle) && context != null) {
    if (dataSetHandle.getDataSource() != null) {
      session.defineDataSource(session.getModelAdaptor().adaptDataSource(dataSetHandle.getDataSource()));
    }
    session.defineDataSet(dataSetDesign);
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSetHandle,resultSet);
  return resultSet;
}","/** 
 * @param dataSetHandle
 * @param dataSetDesign
 * @param queryDefn
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSetHandle,IBaseDataSetDesign dataSetDesign,IQueryDefinition queryDefn,ExecutionContext context,DataRequestSession session) throws BirtException {
  if (!(dataSetHandle instanceof JointDataSetHandle || dataSetHandle instanceof DerivedDataSetHandle)) {
    if (dataSetHandle.getDataSource() != null) {
      session.defineDataSource(session.getModelAdaptor().adaptDataSource(dataSetHandle.getDataSource()));
    }
    session.defineDataSet(dataSetDesign);
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSetHandle,resultSet);
  return resultSet;
}",0.8316831683168316
68372,"protected boolean doAction() throws Exception {
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  DataSourceHandle handle=(DataSourceHandle)getSelection();
  DataSourceEditor dialog=new DataSourceEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),handle);
  return (dialog.open() == IDialogConstants.OK_ID);
}","protected boolean doAction() throws Exception {
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  DataSourceHandle handle=(DataSourceHandle)getSelection();
  DataSourceEditor dialog=new AdvancedDataSourceEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),handle);
  return (dialog.open() == IDialogConstants.OK_ID);
}",0.9887640449438202
68373,"protected boolean performEdit(ReportElementHandle handle){
  if (!(handle instanceof ScriptDataSourceHandle) && handle.canEdit()) {
    DataSourceEditor dialog=new DataSourceEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),(DataSourceHandle)handle);
    return dialog.open() == Dialog.OK;
  }
  return false;
}","protected boolean performEdit(ReportElementHandle handle){
  if (!(handle instanceof ScriptDataSourceHandle) && handle.canEdit()) {
    DataSourceEditor dialog=new AdvancedDataSourceEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),(DataSourceHandle)handle);
    return dialog.open() == Dialog.OK;
  }
  return false;
}",0.9878048780487804
68374,"/** 
 * @see org.eclipse.birt.report.data.adapter.api.IModelAdapter#adaptDataSet(org.eclipse.birt.report.model.api.DataSetHandle)
 */
public BaseDataSetDesign adaptDataSet(DataSetHandle handle) throws BirtException {
  BaseDataSetDesign design=null;
  if (handle instanceof OdaDataSetHandle) {
    Scriptable propBindingScope=context.hasExternalScope() ? context.getTopScope() : null;
    design=new OdaDataSetAdapter((OdaDataSetHandle)handle,propBindingScope,this,context.getDataEngineContext());
  }
  if (handle instanceof ScriptDataSetHandle)   design=new ScriptDataSetAdapter((ScriptDataSetHandle)handle,this);
  if (handle instanceof JointDataSetHandle)   design=new JointDataSetAdapter((JointDataSetHandle)handle,this);
  if (design != null) {
    if (handle.getACLExpression() != null)     design.setDataSetACL(this.adaptExpression((Expression)handle.getACLExpression().getValue()));
    if (handle.getRowACLExpression() != null)     design.setRowACL(this.adaptExpression((Expression)handle.getRowACLExpression().getValue()));
    Iterator columnHintIterator=handle.columnHintsIterator();
    while (columnHintIterator.hasNext()) {
      ColumnHintHandle ch=(ColumnHintHandle)columnHintIterator.next();
      design.setDataSetColumnACL(ch.getColumnName(),this.adaptExpression((Expression)ch.getACLExpression().getValue()));
    }
  }
  logger.warning(""String_Node_Str"" + (handle == null ? ""String_Node_Str"" : handle.getClass().getName()));
  return null;
}","/** 
 * @see org.eclipse.birt.report.data.adapter.api.IModelAdapter#adaptDataSet(org.eclipse.birt.report.model.api.DataSetHandle)
 */
public BaseDataSetDesign adaptDataSet(DataSetHandle handle) throws BirtException {
  BaseDataSetDesign design=null;
  if (handle instanceof OdaDataSetHandle) {
    Scriptable propBindingScope=context.hasExternalScope() ? context.getTopScope() : null;
    design=new OdaDataSetAdapter((OdaDataSetHandle)handle,propBindingScope,this,context.getDataEngineContext());
  }
  if (handle instanceof ScriptDataSetHandle)   design=new ScriptDataSetAdapter((ScriptDataSetHandle)handle,this);
  if (handle instanceof JointDataSetHandle)   design=new JointDataSetAdapter((JointDataSetHandle)handle,this);
  if (design != null) {
    if (handle.getACLExpression() != null)     design.setDataSetACL(this.adaptExpression((Expression)handle.getACLExpression().getValue()));
    if (handle.getRowACLExpression() != null)     design.setRowACL(this.adaptExpression((Expression)handle.getRowACLExpression().getValue()));
    Iterator columnHintIterator=handle.columnHintsIterator();
    while (columnHintIterator.hasNext()) {
      ColumnHintHandle ch=(ColumnHintHandle)columnHintIterator.next();
      design.setDataSetColumnACL(ch.getColumnName(),this.adaptExpression((Expression)ch.getACLExpression().getValue()));
    }
  }
  logger.warning(""String_Node_Str"" + (handle == null ? ""String_Node_Str"" : handle.getClass().getName()));
  return design;
}",0.9965870307167236
68375,"public void after() throws ChartException {
  super.after();
  if (_oOutputIdentifier != null) {
    ImageWriter iw=ImageWriterFactory.instance().createByFormatName(getFormat());
    if (iw == null) {
      String s=getMimeType();
      if (s == null) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{getMimeType(),getFormat(),getClass().getName()},Messages.getResourceBundle(getULocale()));
      }
      Iterator<ImageWriter> it=ImageIO.getImageWritersByMIMEType(s);
      if (!it.hasNext()) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{getMimeType()},Messages.getResourceBundle(getULocale()));
      }
      iw=it.next();
    }
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()) + getFormat() + iw.getClass().getName());
    final Object o=(_oOutputIdentifier instanceof String) ? new File((String)_oOutputIdentifier) : _oOutputIdentifier;
    try {
      final ImageOutputStream ios=SecurityUtil.newImageOutputStream(o);
      updateWriterParameters(iw.getDefaultWriteParam());
      iw.setOutput(ios);
      iw.write((RenderedImage)_img);
      ios.close();
    }
 catch (    Exception ex) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ex);
    }
 finally {
      iw.dispose();
    }
  }
  if (!_bImageExternallySpecified) {
    _img.flush();
    _img=null;
  }
  _g2d.dispose();
  _g2d=null;
}","public void after() throws ChartException {
  super.after();
  if (_oOutputIdentifier != null) {
    ImageWriter iw=ImageWriterFactory.instance().createByFormatName(getFormat());
    if (iw == null) {
      String s=getMimeType();
      if (s == null) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{getMimeType(),getFormat(),getClass().getName()},Messages.getResourceBundle(getULocale()));
      }
      Iterator<ImageWriter> it=ImageIO.getImageWritersByMIMEType(s);
      if (!it.hasNext()) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{getMimeType()},Messages.getResourceBundle(getULocale()));
      }
      iw=it.next();
    }
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()) + getFormat() + iw.getClass().getName());
    final Object o=(_oOutputIdentifier instanceof String) ? new File((String)_oOutputIdentifier) : _oOutputIdentifier;
    try {
      final ImageOutputStream ios=SecurityUtil.newImageOutputStream(o);
      ImageWriteParam iwp=iw.getDefaultWriteParam();
      updateWriterParameters(iwp);
      iw.setOutput(ios);
      iw.write((IIOMetadata)null,new IIOImage((BufferedImage)_img,null,null),iwp);
      ios.close();
    }
 catch (    Exception ex) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ex);
    }
 finally {
      iw.dispose();
    }
  }
  if (!_bImageExternallySpecified) {
    _img.flush();
    _img=null;
  }
  _g2d.dispose();
  _g2d=null;
}",0.96512
68376,"protected void updateWriterParameters(ImageWriteParam iwp){
  if (isQualitySet) {
    iwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
    iwp.setCompressionQuality(jpegQuality);
  }
}","protected void updateWriterParameters(ImageWriteParam iwp){
  float quality=isQualitySet ? jpegQuality : 0.95f;
  iwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
  iwp.setCompressionQuality(quality);
}",0.8542713567839196
68377,"/** 
 * Set the Jpeg compression quality into the renderer. The value must be  between 0 (better compression) and 1 (better quality). The default value is 0.75 (no visual loss)
 * @param jpegQuality
 */
public void setCompressionQuality(final int jpegQuality){
  if (jpegQuality < 0 || jpegQuality > 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    isQualitySet=true;
    this.jpegQuality=jpegQuality;
  }
}","/** 
 * Set the Jpeg compression quality into the renderer. The value must be between 0 (better compression) and 1 (better quality). The default value is 0.95 (no visual loss)
 * @param jpegQuality
 */
public void setCompressionQuality(final int jpegQuality){
  if (jpegQuality < 0 || jpegQuality > 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    isQualitySet=true;
    this.jpegQuality=jpegQuality;
  }
}",0.9965714285714286
68378,"private void setQueryExpression(String expression,boolean isSharing){
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
 else   if (ChartUIConstants.QUERY_CATEGORY.equals(queryType)) {
    DataType type=context.getDataServiceProvider().getDataType(expression);
    ChartAdapter.beginIgnoreNotifications();
    if (seriesdefinition.getGrouping() == null) {
      seriesdefinition.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
    }
    seriesdefinition.getGrouping().setGroupType(type);
    if (type == DataType.DATE_TIME_LITERAL) {
      seriesdefinition.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
    }
    ChartAdapter.endIgnoreNotifications();
  }
 else   if (ChartUIConstants.QUERY_OPTIONAL.equals(queryType)) {
    if (seriesdefinition.getSortKey() != null && seriesdefinition.getSortKey().getDefinition() != null && seriesdefinition.getSortKey().getDefinition().equals(query.getDefinition())) {
      ChartAdapter.beginIgnoreNotifications();
      seriesdefinition.getSortKey().setDefinition(expression);
      ChartAdapter.endIgnoreNotifications();
    }
    DataType type=context.getDataServiceProvider().getDataType(expression);
    ChartAdapter.beginIgnoreNotifications();
    if (query.getGrouping() == null) {
      query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
    }
    query.getGrouping().setGroupType(type);
    if (type == DataType.DATE_TIME_LITERAL) {
      query.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
    }
    ChartAdapter.endIgnoreNotifications();
  }
  if (query != null) {
    if (isSharing) {
      query.setDefinition(expression);
    }
 else {
      query.setDefinition(btnBuilder.getExpression());
    }
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}","private void setQueryExpression(String expression,boolean isSharing){
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
 else   if (ChartUIConstants.QUERY_CATEGORY.equals(queryType)) {
    DataType type=context.getDataServiceProvider().getDataType(expression);
    ChartAdapter.beginIgnoreNotifications();
    if (seriesdefinition.getGrouping() == null) {
      seriesdefinition.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
    }
    seriesdefinition.getGrouping().setGroupType(type);
    if (type == DataType.DATE_TIME_LITERAL) {
      seriesdefinition.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
    }
    ChartAdapter.endIgnoreNotifications();
  }
 else   if (ChartUIConstants.QUERY_OPTIONAL.equals(queryType)) {
    ChartAdapter.beginIgnoreNotifications();
    if (expression == null || expression.trim().length() == 0) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
      seriesdefinition.getSortKey().setDefinition(null);
    }
 else {
      if (seriesdefinition.getSortKey() != null && seriesdefinition.getSortKey().getDefinition() != null && seriesdefinition.getSortKey().getDefinition().equals(query.getDefinition())) {
        seriesdefinition.getSortKey().setDefinition(expression);
      }
      DataType type=context.getDataServiceProvider().getDataType(expression);
      if (query.getGrouping() == null) {
        query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
      }
      query.getGrouping().setGroupType(type);
      if (type == DataType.DATE_TIME_LITERAL) {
        query.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
      }
    }
    ChartAdapter.endIgnoreNotifications();
  }
  if (query != null) {
    if (isSharing) {
      query.setDefinition(expression);
    }
 else {
      query.setDefinition(btnBuilder.getExpression());
    }
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}",0.8756593820648079
68379,"protected Control createContents(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_COLOR_GRADIENT);
  getShell().setText(Messages.getString(""String_Node_Str""));
  getShell().setSize(420,220);
  UIHelper.centerOnScreen(getShell());
  return super.createContents(parent);
}","protected Control createContents(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_COLOR_POSNEG);
  getShell().setText(Messages.getString(""String_Node_Str""));
  getShell().setSize(420,220);
  UIHelper.centerOnScreen(getShell());
  return super.createContents(parent);
}",0.9797297297297296
68380,"public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  EditPart part=ReportElementEditPart.this;
  while (part.getParent() != null && !(part instanceof RootEditPart)) {
    part=part.getParent();
  }
  if (getModelAdapter() != null || part == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}","public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  EditPart part=ReportElementEditPart.this;
  while (part.getParent() != null && !(part instanceof RootEditPart)) {
    part=part.getParent();
  }
  if (getModelAdapter() == null || part == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}",0.9986282578875172
68381,"public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      EditPart part=ReportElementEditPart.this;
      while (part.getParent() != null && !(part instanceof RootEditPart)) {
        part=part.getParent();
      }
      if (getModelAdapter() != null || part == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}","public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      EditPart part=ReportElementEditPart.this;
      while (part.getParent() != null && !(part instanceof RootEditPart)) {
        part=part.getParent();
      }
      if (getModelAdapter() == null || part == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}",0.9993131868131868
68382,"/** 
 * populate output columns
 * @throws BirtException
 */
private void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetUIUtil.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)handle),handle);
      DataRequestSession session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      if (((DataSetEditor)getContainer()).getHandle() instanceof JointDataSetHandle) {
        PropertyHandle properyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
        if (properyHandle != null) {
          for (int i=0; i < viewDatas.length; i++) {
            for (Iterator columns=properyHandle.iterator(); columns.hasNext(); ) {
              ColumnHintHandle column=(ColumnHintHandle)columns.next();
              if (viewDatas[i].getName().equals(column.getColumnName())) {
                viewDatas[i].setAlias(column.getAlias());
                break;
              }
            }
          }
        }
      }
      viewer.getViewer().setInput(viewDatas);
      engineTask.close();
      engine.destroy();
    }
  finally {
      DataSetUIUtil.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
    if (viewDatas == null) {
      viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
    }
    viewer.getViewer().setInput(viewDatas);
    session.shutdown();
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}","/** 
 * populate output columns
 * @throws BirtException
 */
private void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetUIUtil.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      ReportDesignHandle copy=(ReportDesignHandle)(handle.copy().getHandle(null));
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)copy),copy);
      DataRequestSession session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      if (((DataSetEditor)getContainer()).getHandle() instanceof JointDataSetHandle) {
        PropertyHandle properyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
        if (properyHandle != null) {
          for (int i=0; i < viewDatas.length; i++) {
            for (Iterator columns=properyHandle.iterator(); columns.hasNext(); ) {
              ColumnHintHandle column=(ColumnHintHandle)columns.next();
              if (viewDatas[i].getName().equals(column.getColumnName())) {
                viewDatas[i].setAlias(column.getAlias());
                break;
              }
            }
          }
        }
      }
      viewer.getViewer().setInput(viewDatas);
      engineTask.close();
      engine.destroy();
    }
  finally {
      DataSetUIUtil.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
    if (viewDatas == null) {
      viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
    }
    viewer.getViewer().setInput(viewDatas);
    session.shutdown();
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}",0.9835908873665764
68383,"/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
        ClassLoader parentLoader=oldContextLoader;
        if (parentLoader == null)         parentLoader=this.getClass().getClassLoader();
        ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
        Thread.currentThread().setContextClassLoader(newContextLoader);
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        ModuleHandle handle;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        try {
          if (handle instanceof ReportDesignHandle) {
            EngineConfig ec=new EngineConfig();
            ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
            ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
            DataSetUIUtil.clearPropertyBindingMap(dsHandle,dataSetBindingMap,dataSourceBindingMap);
            DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)handle),handle);
            DataRequestSession session=engineTask.getDataSession();
            session.getDataSessionContext().getAppContext().put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,DTPUtil.getInstance().createResourceIdentifiers());
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            engineTask.setAppContext(appContext);
            engineTask.run();
            IQueryResults resultSet=executeProcess(session,engineTask.getExecutionContext());
            populateRecords(resultSet);
            engineTask.close();
            engine.destroy();
            monitor.done();
          }
 else {
            DataSessionContext context;
            context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
            DataRequestSession session=DataRequestSession.newSession(context);
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,DTPUtil.getInstance().createResourceIdentifiers());
            if (context.getAppContext() != null) {
              appContext.putAll(context.getAppContext());
            }
            context.setAppContext(appContext);
            IQueryResults resultSet=executeProcess(session,null);
            populateRecords(resultSet);
            session.shutdown();
          }
        }
 catch (        BirtException e) {
          ExceptionHandler.handle(e);
        }
 finally {
          try {
            DataSetUIUtil.resetPropertyBinding(dsHandle,dataSetBindingMap,dataSourceBindingMap);
          }
 catch (          SemanticException e) {
          }
        }
        Thread.currentThread().setContextClassLoader(oldContextLoader);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.handle(e);
  }
catch (  InterruptedException e) {
    ExceptionHandler.handle(e);
  }
  updateResultSetTableUI();
}","/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
        ClassLoader parentLoader=oldContextLoader;
        if (parentLoader == null)         parentLoader=this.getClass().getClassLoader();
        ModuleHandle handle;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        try {
          if (handle instanceof ReportDesignHandle) {
            ReportDesignHandle copiedReport=(ReportDesignHandle)(handle.copy().getHandle(null));
            ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,copiedReport);
            Thread.currentThread().setContextClassLoader(newContextLoader);
            EngineConfig ec=new EngineConfig();
            ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
            ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
            DataSetUIUtil.clearPropertyBindingMap(dsHandle,dataSetBindingMap,dataSourceBindingMap);
            DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copiedReport),copiedReport);
            DataRequestSession session=engineTask.getDataSession();
            session.getDataSessionContext().getAppContext().put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,DTPUtil.getInstance().createResourceIdentifiers());
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            engineTask.setAppContext(appContext);
            engineTask.run();
            IQueryResults resultSet=executeProcess(session,engineTask.getExecutionContext());
            populateRecords(resultSet);
            engineTask.close();
            engine.destroy();
            monitor.done();
          }
 else {
            DataSessionContext context;
            context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
            DataRequestSession session=DataRequestSession.newSession(context);
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,DTPUtil.getInstance().createResourceIdentifiers());
            if (context.getAppContext() != null) {
              appContext.putAll(context.getAppContext());
            }
            context.setAppContext(appContext);
            IQueryResults resultSet=executeProcess(session,null);
            populateRecords(resultSet);
            session.shutdown();
          }
        }
 catch (        BirtException e) {
          ExceptionHandler.handle(e);
        }
 finally {
          try {
            DataSetUIUtil.resetPropertyBinding(dsHandle,dataSetBindingMap,dataSourceBindingMap);
          }
 catch (          SemanticException e) {
          }
        }
        Thread.currentThread().setContextClassLoader(oldContextLoader);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.handle(e);
  }
catch (  InterruptedException e) {
    ExceptionHandler.handle(e);
  }
  updateResultSetTableUI();
}",0.8984637542006721
68384,"/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
      EngineConfig ec=new EngineConfig();
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)dataSetHandle.getModuleHandle()),dataSetHandle.getModuleHandle());
      DataRequestSession session=engineTask.getDataSession();
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      engineTask.setAppContext(appContext);
      engineTask.run();
      session.refreshMetaData(dataSetHandle,holdEvent);
      engineTask.close();
      engine.destroy();
    }
 else {
      DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
      DataRequestSession drSession=DataRequestSession.newSession(context);
      drSession.refreshMetaData(dataSetHandle,holdEvent);
      drSession.shutdown();
    }
  }
 catch (  BirtException ex) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{ex});
  }
}","/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
      EngineConfig ec=new EngineConfig();
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
      DataRequestSession session=engineTask.getDataSession();
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      engineTask.setAppContext(appContext);
      engineTask.run();
      session.refreshMetaData(dataSetHandle,holdEvent);
      engineTask.close();
      engine.destroy();
    }
 else {
      DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
      DataRequestSession drSession=DataRequestSession.newSession(context);
      drSession.refreshMetaData(dataSetHandle,holdEvent);
      drSession.shutdown();
    }
  }
 catch (  BirtException ex) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{ex});
  }
}",0.930379746835443
68385,"public void startContent(IContent content) throws BirtException {
  boolean isInline=PropertyUtil.isInlineElement(content);
  if (isInline) {
    if (current.isInlineStacking()) {
    }
 else {
      setContainer(af.createLineArea(current,context));
    }
  }
 else {
    if (current.isInlineStacking()) {
      while (current.isInlineStacking()) {
        closeContainer();
      }
    }
  }
  ILayout layout=af.createLayout(current,context,content);
  if (layout != null) {
    layout.layout();
  }
}","public void startContent(IContent content) throws BirtException {
  boolean isInline=PropertyUtil.isInlineElement(content);
  if (isInline) {
    if (!unfinishedContents.isEmpty() && content.getParent() == unfinishedContents.peek()) {
      IContent parent=unfinishedContents.poll();
      _startContainer(parent);
    }
 else {
      if (current != null && current.isInlineStacking()) {
      }
 else {
        setContainer(af.createLineArea(current,context));
      }
    }
  }
 else {
    while (current != null && current.isInlineStacking()) {
      if (null != current.getContent()) {
        unfinishedContents.add(current.getContent());
      }
      closeContainer();
    }
  }
  ILayout layout=af.createLayout(current,context,content);
  if (layout != null) {
    layout.layout();
  }
}",0.6337702390131071
68386,"protected void _startContainer(IContent container) throws BirtException {
  boolean isInline=PropertyUtil.isInlineElement(container);
  if (isInline) {
    if (current != null && current.isInlineStacking()) {
    }
 else {
      setContainer(af.createLineArea(current,context));
    }
  }
 else {
    if (current != null && current.isInlineStacking()) {
      while (current != null && current.isInlineStacking()) {
        closeContainer();
      }
    }
  }
  ContainerArea area=(ContainerArea)af.createArea(current,context,container);
  setContainer(area);
}","protected void _startContainer(IContent container) throws BirtException {
  boolean isInline=PropertyUtil.isInlineElement(container);
  if (isInline) {
    if (!unfinishedContents.isEmpty() && container.getParent() == unfinishedContents.peek()) {
      IContent parent=unfinishedContents.poll();
      _startContainer(parent);
    }
 else {
      if (current != null && current.isInlineStacking()) {
      }
 else {
        setContainer(af.createLineArea(current,context));
      }
    }
  }
 else {
    while (current != null && current.isInlineStacking()) {
      if (null != current.getContent()) {
        unfinishedContents.add(current.getContent());
      }
      closeContainer();
    }
  }
  ContainerArea area=(ContainerArea)af.createArea(current,context,container);
  setContainer(area);
}",0.6720588235294118
68387,"public void endContent(IContent content) throws BirtException {
}","public void endContent(IContent content) throws BirtException {
  if (!unfinishedContents.isEmpty()) {
    IContent c=unfinishedContents.peek();
    if (c == content) {
      unfinishedContents.poll();
    }
  }
}",0.4676258992805755
68388,"protected void _endContainer(IContent container) throws BirtException {
  boolean isInline=PropertyUtil.isInlineElement(container);
  if (isInline) {
    if (current != null && current.isInlineStacking()) {
    }
 else {
    }
  }
 else {
    if (current != null && current.isInlineStacking()) {
      while (current != null && current.isInlineStacking()) {
        closeContainer();
      }
    }
 else {
    }
  }
  closeContainer();
}","protected void _endContainer(IContent container) throws BirtException {
  if (!unfinishedContents.isEmpty()) {
    IContent content=unfinishedContents.peek();
    if (container == content) {
      unfinishedContents.poll();
      return;
    }
  }
  boolean isInline=PropertyUtil.isInlineElement(container);
  if (isInline) {
    if (current != null && current.isInlineStacking()) {
    }
 else {
    }
  }
 else {
    while (current != null && current.isInlineStacking()) {
      closeContainer();
    }
  }
  closeContainer();
}",0.7218200620475698
68389,"public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  if (getModelAdapter() == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}","public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  EditPart part=ReportElementEditPart.this;
  while (part.getParent() != null && !(part instanceof RootEditPart)) {
    part=part.getParent();
  }
  if (getModelAdapter() != null || part == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}",0.8741312741312741
68390,"public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      if (getModelAdapter() == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}","public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      EditPart part=ReportElementEditPart.this;
      while (part.getParent() != null && !(part instanceof RootEditPart)) {
        part=part.getParent();
      }
      if (getModelAdapter() != null || part == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}",0.9345042078302233
68391,"public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  EditPart part=ReportElementEditPart.this;
  while (part.getParent() != null && !(part instanceof RootEditPart)) {
    part=part.getParent();
  }
  if (getModelAdapter() == null || part == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}","public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  EditPart part=ReportElementEditPart.this;
  while (part != null && !(part instanceof RootEditPart)) {
    part=part.getParent();
  }
  if (getModelAdapter() == null || part == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}",0.991701244813278
68392,"public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      EditPart part=ReportElementEditPart.this;
      while (part.getParent() != null && !(part instanceof RootEditPart)) {
        part=part.getParent();
      }
      if (getModelAdapter() == null || part == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}","public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      EditPart part=ReportElementEditPart.this;
      while (part != null && !(part instanceof RootEditPart)) {
        part=part.getParent();
      }
      if (getModelAdapter() == null || part == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}",0.9958620689655172
68393,"public final void paintClientArea(Graphics g){
  if (bPainting) {
    return;
  }
  final Rectangle r=getClientArea().getCopy();
  if (r.width <= 0 || r.height <= 0) {
    return;
  }
  bPainting=true;
  if (bDirty) {
    bDirty=false;
    final Display d=Display.getCurrent();
    Dimension dSize=r.getSize();
    if (imgChart == null || imgChart.getImageData().width != dSize.width || imgChart.getImageData().height != dSize.height) {
      if (gc != null) {
        gc.dispose();
      }
      if (imgChart != null) {
        imgChart.dispose();
      }
      bDirty=true;
      final ImageData ida=new ImageData(dSize.width,dSize.height,32,PALETTE_DATA);
      ida.transparentPixel=TRANSPARENT_COLOR;
      imgChart=new Image(d,ida);
      gc=new GC(imgChart);
    }
    final Color clrPreviousBG=gc.getBackground();
    gc.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    gc.fillRectangle(0,0,imgChart.getImageData().width,imgChart.getImageData().height);
    gc.setBackground(clrPreviousBG);
    if (cm == null) {
      showNullChart(dSize);
    }
 else {
      showChart(dSize);
    }
  }
  if (imgChart != null) {
    g.drawImage(imgChart,r.x,r.y);
  }
  bPainting=false;
}","public final void paintClientArea(Graphics g){
  if (bPainting) {
    return;
  }
  final Rectangle r=getClientArea().getCopy();
  if (r.width <= 0 || r.height <= 0) {
    return;
  }
  bPainting=true;
  if (bDirty) {
    bDirty=false;
    final Display d=Display.getCurrent();
    Dimension dSize=r.getSize();
    if (imgChart == null || imgChart.getImageData().width != dSize.width || imgChart.getImageData().height != dSize.height) {
      if (gc != null) {
        gc.dispose();
      }
      if (imgChart != null) {
        imgChart.dispose();
      }
      bDirty=true;
      final ImageData ida=new ImageData(dSize.width,dSize.height,32,PALETTE_DATA);
      ida.transparentPixel=TRANSPARENT_COLOR;
      imgChart=new Image(d,ida);
      gc=new GC(imgChart);
    }
    if (Platform.OS_MACOSX.equals(Platform.getOS()) && gc != null && !gc.isDisposed()) {
      gc.dispose();
      gc=new GC(imgChart);
    }
    final Color clrPreviousBG=gc.getBackground();
    gc.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    gc.fillRectangle(0,0,imgChart.getImageData().width,imgChart.getImageData().height);
    gc.setBackground(clrPreviousBG);
    if (cm == null) {
      showNullChart(dSize);
    }
 else {
      showChart(dSize);
    }
  }
  if (imgChart != null) {
    g.drawImage(imgChart,r.x,r.y);
  }
  bPainting=false;
}",0.9447900466562986
68394,"public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}","public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  if (getModelAdapter() == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}",0.9528214616096208
68395,"public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}","public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      if (getModelAdapter() == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}",0.9747089522280208
68396,"/** 
 * @param obj1
 * @param obj2
 * @return -1,0 and 1 standing for <,= and > respectively
 * @throws BirtException
 * @throws DataException
 */
private static int compare(Object obj1,Object obj2) throws BirtException {
  if (obj1 == null || obj2 == null) {
    if (obj1 == null && obj2 != null)     return -1;
 else     if (obj1 != null && obj2 == null)     return 1;
 else     return 0;
  }
  if (isSameType(obj1,obj2)) {
    if (obj1 instanceof Boolean) {
      if (obj1.equals(obj2))       return 0;
      Boolean bool=(Boolean)obj1;
      if (bool.equals(Boolean.TRUE))       return 1;
 else       return -1;
    }
 else     if (obj1 instanceof Comparable) {
      if (obj1 instanceof String) {
        return myCollator.compare(obj1,obj2);
      }
 else {
        return ((Comparable)obj1).compareTo(obj2);
      }
    }
 else {
      return myCollator.compare(obj1.toString(),obj2.toString());
    }
  }
 else   if (obj1 instanceof BigDecimal || obj2 instanceof BigDecimal) {
    BigDecimal a=DataTypeUtil.toBigDecimal(obj1);
    BigDecimal b=DataTypeUtil.toBigDecimal(obj2);
    return a.compareTo(b);
  }
 else   if (isNumericOrString(obj1) && isNumericOrString(obj2)) {
    return DataTypeUtil.toDouble(obj1).compareTo(DataTypeUtil.toDouble(obj2));
  }
 else   if (isTimeOrString(obj1) && isTimeOrString(obj2)) {
    return DataTypeUtil.toSqlTime(obj1).compareTo(DataTypeUtil.toSqlTime(obj2));
  }
 else   if (isSQLDateOrString(obj1) && isSQLDateOrString(obj2)) {
    return DataTypeUtil.toSqlDate(obj1).compareTo(DataTypeUtil.toSqlDate(obj2));
  }
 else   if (isDateOrString(obj1) && isDateOrString(obj2)) {
    return DataTypeUtil.toDate(obj1).compareTo(DataTypeUtil.toDate(obj2));
  }
 else   throw new IllegalArgumentException();
}","/** 
 * @param obj1
 * @param obj2
 * @return -1,0 and 1 standing for <,= and > respectively
 * @throws BirtException
 * @throws DataException
 */
private static int compare(Object obj1,Object obj2) throws BirtException {
  if (obj1 == null || obj2 == null) {
    if (obj1 == null && obj2 != null)     return -1;
 else     if (obj1 != null && obj2 == null)     return 1;
 else     return 0;
  }
  if (isSameType(obj1,obj2)) {
    if (obj1 instanceof Boolean) {
      if (obj1.equals(obj2))       return 0;
      Boolean bool=(Boolean)obj1;
      if (bool.equals(Boolean.TRUE))       return 1;
 else       return -1;
    }
 else     if (obj1 instanceof Comparable) {
      if (obj1 instanceof String) {
        return myCollator.compare(obj1,obj2);
      }
 else {
        return ((Comparable)obj1).compareTo(obj2);
      }
    }
 else {
      return myCollator.compare(obj1.toString(),obj2.toString());
    }
  }
 else   if (obj1 instanceof BigDecimal || obj2 instanceof BigDecimal) {
    BigDecimal a=DataTypeUtil.toBigDecimal(obj1);
    BigDecimal b=DataTypeUtil.toBigDecimal(obj2);
    return a.compareTo(b);
  }
 else   if (isNumericOrString(obj1) && isNumericOrString(obj2)) {
    return DataTypeUtil.toDouble(obj1).compareTo(DataTypeUtil.toDouble(obj2));
  }
 else   if (isTimeOrString(obj1) && isTimeOrString(obj2)) {
    return DataTypeUtil.toSqlTime(obj1).compareTo(DataTypeUtil.toSqlTime(obj2));
  }
 else   if (isSQLDateOrString(obj1) && isSQLDateOrString(obj2)) {
    return DataTypeUtil.toSqlDate(obj1).compareTo(DataTypeUtil.toSqlDate(obj2));
  }
 else   if (isDateOrString(obj1) && isDateOrString(obj2)) {
    return DataTypeUtil.toDate(obj1).compareTo(DataTypeUtil.toDate(obj2));
  }
 else {
    String object1=null;
    String object2=null;
    if (obj1 instanceof ScriptableObject)     object1=DataTypeUtil.toString(((ScriptableObject)obj1).getDefaultValue(null));
 else     object1=DataTypeUtil.toString(obj1);
    if (obj2 instanceof ScriptableObject)     object2=DataTypeUtil.toString(((ScriptableObject)obj2).getDefaultValue(null));
 else     object2=DataTypeUtil.toString(obj2);
    return compare(object1,object2);
  }
}",0.8774094063222821
68397,"/** 
 * @param n
 * @param objectName
 * @return
 */
private static String getScriptObjectName(Node n,String objectName){
  if (n == null)   return null;
  String result=null;
  if (n.getType() == Token.NAME) {
    if (objectName.equals(n.getString())) {
      Node dimNameNode=n.getNext();
      if (dimNameNode == null || dimNameNode.getType() != Token.STRING)       return null;
      return dimNameNode.getString();
    }
  }
  result=getScriptObjectName(n.getFirstChild(),objectName);
  if (result == null)   result=getScriptObjectName(n.getLastChild(),objectName);
  return result;
}","/** 
 * @param n
 * @param objectName
 * @return
 */
private static String getScriptObjectName(Node n,String objectName){
  if (n == null)   return null;
  String result=null;
  if (n.getType() == Token.NAME) {
    if (objectName.equals(n.getString())) {
      Node dimNameNode=n.getNext();
      if (dimNameNode == null || dimNameNode.getType() != Token.STRING)       return null;
      return dimNameNode.getString();
    }
  }
  result=getScriptObjectName(n.getFirstChild(),objectName);
  if (result == null)   result=getScriptObjectName(n.getLastChild(),objectName);
  if (result == null)   result=getScriptObjectName(n.getNext(),objectName);
  return result;
}",0.9393939393939394
68398,"public int getParameterMode(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,SPParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paramMetadataArray);
  int result=IParameterMetaData.parameterModeUnknown;
  ParameterDefn paramDefn=(ParameterDefn)paramMetadataArray[param - 1];
  if (paramDefn.getParamInOutType() == java.sql.ParameterMetaData.parameterModeIn)   result=IParameterMetaData.parameterModeIn;
 else   if (paramDefn.getParamInOutType() == java.sql.ParameterMetaData.parameterModeOut)   result=IParameterMetaData.parameterModeOut;
 else   if (paramDefn.getParamInOutType() == java.sql.ParameterMetaData.parameterModeInOut)   result=IParameterMetaData.parameterModeInOut;
  return result;
}","public int getParameterMode(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,SPParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paramMetadataArray);
  int result=IParameterMetaData.parameterModeUnknown;
  ParameterDefn paramDefn=(ParameterDefn)paramMetadataArray[param - 1];
  if (paramDefn.getParamInOutType() == java.sql.ParameterMetaData.parameterModeIn)   result=IParameterMetaData.parameterModeIn;
 else   if (paramDefn.getParamInOutType() == java.sql.ParameterMetaData.parameterModeOut)   result=IParameterMetaData.parameterModeOut;
 else   if (paramDefn.getParamInOutType() == java.sql.ParameterMetaData.parameterModeInOut)   result=IParameterMetaData.parameterModeInOut;
 else   if (paramDefn.getParamInOutType() == 5)   result=IParameterMetaData.parameterModeOut;
  return result;
}",0.925925925925926
68399,"public void visitReportDesign(ReportDesignHandle handle){
  this.defaultScriptLanguage=""String_Node_Str"";
  Map<String,Expression> userProperties=createUserProperties(handle);
  if (userProperties != null && !userProperties.isEmpty()) {
    report.setUserProperties(userProperties);
  }
  ULocale locale=handle.getLocale();
  if (locale != null)   report.setLocale(locale.toString());
  createReportDefaultStyles(handle);
  List<VariableElementHandle> varElements=handle.getPageVariables();
  Collection<PageVariableDesign> varDesigns=report.getPageVariables();
  for (  VariableElementHandle varElement : varElements) {
    String scope=varElement.getType();
    String name=varElement.getVariableName();
    ExpressionHandle exprHandle=varElement.getExpressionProperty(VariableElementHandle.VALUE_PROP);
    Expression defaultValue=createExpression(exprHandle);
    PageVariableDesign pv=new PageVariableDesign(name,scope);
    pv.setDefaultValue(defaultValue);
    varDesigns.add(pv);
  }
  String onPageEnd=handle.getOnPageEnd();
  Expression.Script onPageEndScript=createScript(onPageEnd);
  if (onPageEndScript != null) {
    String scriptId=ModuleUtil.getScriptUID(handle.getPropertyHandle(IReportDesignModel.ON_PAGE_END_METHOD));
    onPageEndScript.setFileName(scriptId);
    report.setOnPageEnd(onPageEndScript);
  }
  String onPageStart=handle.getOnPageStart();
  Expression.Script onPageStartScript=createScript(onPageStart);
  if (onPageStartScript != null) {
    String scriptId=ModuleUtil.getScriptUID(handle.getPropertyHandle(IReportDesignModel.ON_PAGE_START_METHOD));
    onPageStartScript.setFileName(scriptId);
    report.setOnPageStart(onPageStartScript);
  }
  PageSetupDesign pageSetup=new PageSetupDesign();
  SlotHandle pageSlot=handle.getMasterPages();
  for (int i=0; i < pageSlot.getCount(); i++) {
    apply(pageSlot.get(i));
    if (currentElement != null) {
      pageSetup.addMasterPage((MasterPageDesign)currentElement);
    }
  }
  if (pageSlot.getCount() < 1) {
    MasterPageDesign masterPage=new SimpleMasterPageDesign();
    masterPage.setID(generateUniqueID());
    masterPage.setName(DEFAULT_MASTERPAGE_NAME);
    masterPage.setPageType(DesignChoiceConstants.PAGE_SIZE_US_LETTER);
    masterPage.setOrientation(DesignChoiceConstants.PAGE_ORIENTATION_AUTO);
    DimensionType width=new DimensionType(DEFAULT_MASTERPAGE_WIDTH,DimensionType.UNITS_IN);
    DimensionType height=new DimensionType(DEFAULT_MASTERPAGE_HEIGHT,DimensionType.UNITS_IN);
    masterPage.setPageSize(width,height);
    DimensionType top=new DimensionType(DEFAULT_MASTERPAGE_TOP_MARGIN,DimensionType.UNITS_IN);
    DimensionType left=new DimensionType(DEFAULT_MASTERPAGE_LEFT_MARGIN,DimensionType.UNITS_IN);
    DimensionType bottom=new DimensionType(DEFAULT_MASTERPAGE_BOTTOM_MARGIN,DimensionType.UNITS_IN);
    DimensionType right=new DimensionType(DEFAULT_MASTERPAGE_RIGHT_MARGIN,DimensionType.UNITS_IN);
    masterPage.setMargin(top,left,bottom,right);
    pageSetup.addMasterPage(masterPage);
  }
  report.setPageSetup(pageSetup);
  SlotHandle bodySlot=handle.getBody();
  for (int i=0; i < bodySlot.getCount(); i++) {
    apply(bodySlot.get(i));
    if (currentElement != null) {
      report.addContent((ReportItemDesign)currentElement);
    }
  }
}","public void visitReportDesign(ReportDesignHandle handle){
  this.defaultScriptLanguage=""String_Node_Str"";
  Map<String,Expression> userProperties=createUserProperties(handle);
  if (userProperties != null && !userProperties.isEmpty()) {
    report.setUserProperties(userProperties);
  }
  ULocale locale=handle.getLocale();
  if (locale != null)   report.setLocale(locale.toString());
  createReportDefaultStyles(handle);
  List<VariableElementHandle> varElements=handle.getPageVariables();
  Collection<PageVariableDesign> varDesigns=report.getPageVariables();
  for (  VariableElementHandle varElement : varElements) {
    String scope=varElement.getType();
    String name=varElement.getVariableName();
    ExpressionHandle exprHandle=varElement.getExpressionProperty(VariableElementHandle.VALUE_PROP);
    Expression defaultValue=createExpression(exprHandle);
    PageVariableDesign pv=new PageVariableDesign(name,scope);
    pv.setDefaultValue(defaultValue);
    varDesigns.add(pv);
  }
  String onPageEnd=handle.getOnPageEnd();
  Expression.Script onPageEndScript=createScript(onPageEnd);
  if (onPageEndScript != null) {
    String scriptId=ModuleUtil.getScriptUID(handle.getPropertyHandle(IReportDesignModel.ON_PAGE_END_METHOD));
    onPageEndScript.setFileName(scriptId);
    report.setOnPageEnd(onPageEndScript);
  }
  String onPageStart=handle.getOnPageStart();
  Expression.Script onPageStartScript=createScript(onPageStart);
  if (onPageStartScript != null) {
    String scriptId=ModuleUtil.getScriptUID(handle.getPropertyHandle(IReportDesignModel.ON_PAGE_START_METHOD));
    onPageStartScript.setFileName(scriptId);
    report.setOnPageStart(onPageStartScript);
  }
  PageSetupDesign pageSetup=new PageSetupDesign();
  SlotHandle pageSlot=handle.getMasterPages();
  for (int i=0; i < pageSlot.getCount(); i++) {
    apply(pageSlot.get(i));
    if (currentElement != null) {
      pageSetup.addMasterPage((MasterPageDesign)currentElement);
    }
  }
  if (pageSlot.getCount() < 1) {
    MasterPageDesign masterPage=new SimpleMasterPageDesign();
    masterPage.setID(generateUniqueID());
    masterPage.setName(DEFAULT_MASTERPAGE_NAME);
    masterPage.setPageType(DesignChoiceConstants.PAGE_SIZE_US_LETTER);
    masterPage.setOrientation(DesignChoiceConstants.PAGE_ORIENTATION_AUTO);
    DimensionType width=new DimensionType(DEFAULT_MASTERPAGE_WIDTH,DimensionType.UNITS_IN);
    DimensionType height=new DimensionType(DEFAULT_MASTERPAGE_HEIGHT,DimensionType.UNITS_IN);
    masterPage.setPageSize(width,height);
    DimensionType top=new DimensionType(DEFAULT_MASTERPAGE_TOP_MARGIN,DimensionType.UNITS_IN);
    DimensionType left=new DimensionType(DEFAULT_MASTERPAGE_LEFT_MARGIN,DimensionType.UNITS_IN);
    DimensionType bottom=new DimensionType(DEFAULT_MASTERPAGE_BOTTOM_MARGIN,DimensionType.UNITS_IN);
    DimensionType right=new DimensionType(DEFAULT_MASTERPAGE_RIGHT_MARGIN,DimensionType.UNITS_IN);
    masterPage.setMargin(top,left,bottom,right);
    setupElementIDMap(masterPage);
    pageSetup.addMasterPage(masterPage);
  }
  report.setPageSetup(pageSetup);
  SlotHandle bodySlot=handle.getBody();
  for (int i=0; i < bodySlot.getCount(); i++) {
    apply(bodySlot.get(i));
    if (currentElement != null) {
      report.addContent((ReportItemDesign)currentElement);
    }
  }
}",0.9946670729849154
68400,"protected void createAndInitCustomControl(Composite parent,Properties profileProps){
  if (m_pageHelper == null)   m_pageHelper=new JDBCSelectionPageHelper(this);
  m_pageHelper.createCustomControl(parent);
  m_pageHelper.addBidiSettingsButton(parent,profileProps);
  this.setPingButtonVisible(false);
  m_pageHelper.initCustomControl(profileProps);
}","protected void createAndInitCustomControl(Composite parent,Properties profileProps){
  if (m_pageHelper == null)   m_pageHelper=new JDBCSelectionPageHelper(this);
  Composite content=m_pageHelper.createCustomControl(parent);
  m_pageHelper.addBidiSettingsButton(content,profileProps);
  this.setPingButtonVisible(false);
  m_pageHelper.initCustomControl(profileProps);
}",0.9653259361997226
68401,"public void testMemoryCache() throws IOException {
  long used1=ArchiveFile.getTotalUsedCache();
  System.out.println(used1);
  ArchiveFile[] afs=new ArchiveFile[100];
  for (int i=0; i < afs.length; i++) {
    afs[i]=createArchiveFile(""String_Node_Str"" + i);
  }
  long used2=ArchiveFile.getTotalUsedCache();
  System.out.println(used2);
  ArchiveEntry[] entries=openEntries(afs[0],100);
  long used3=ArchiveFile.getTotalUsedCache();
  System.out.println(used3);
  closeEntries(entries);
  long used4=ArchiveFile.getTotalUsedCache();
  System.out.println(used4);
  for (int i=0; i < afs.length; i++) {
    afs[i].close();
  }
  long used5=ArchiveFile.getTotalUsedCache();
  System.out.println(used5);
}","public void testMemoryCache() throws IOException {
  long used1=ArchiveFile.getTotalUsedCache();
  System.out.println(""String_Node_Str"" + used1);
  ArchiveFile[] afs=new ArchiveFile[10];
  for (int i=0; i < afs.length; i++) {
    afs[i]=createArchiveFile(""String_Node_Str"" + i);
  }
  long used2=ArchiveFile.getTotalUsedCache();
  System.out.println(""String_Node_Str"" + used2);
  ArchiveEntry[] entries=openEntries(afs[0],100);
  long used3=ArchiveFile.getTotalUsedCache();
  System.out.println(""String_Node_Str"" + used3);
  closeEntries(entries);
  long used4=ArchiveFile.getTotalUsedCache();
  System.out.println(""String_Node_Str"" + used4);
  for (int i=0; i < afs.length; i++) {
    afs[i].close();
  }
  long used5=ArchiveFile.getTotalUsedCache();
  System.out.println(""String_Node_Str"" + used5);
}",0.8664451827242525
68402,"protected ArchiveEntry[] openEntries(ArchiveFile af,int size) throws IOException {
  ArchiveEntry[] entries=new ArchiveEntry[size];
  for (int i=0; i < entries.length; i++) {
    entries[i]=af.openEntry(""String_Node_Str"" + i);
  }
  return entries;
}","protected ArchiveEntry[] openEntries(ArchiveFile af,int size) throws IOException {
  ArchiveEntry[] entries=new ArchiveEntry[size];
  for (int i=0; i < entries.length; i++) {
    entries[i]=af.openEntry(""String_Node_Str"" + i);
    entries[i].read(0,new byte[13],0,13);
  }
  return entries;
}",0.922509225092251
68403,"public synchronized boolean removeEntry(String name) throws IOException {
  assertWritable();
  ArchiveEntryV2 entry=(ArchiveEntryV2)entries.get(name);
  if (entry != null) {
    entries.remove(name);
    entryTbl.removeEntry(entry.entry);
    if (entry.index != null) {
      allocTbl.removeEntry(entry.index);
    }
    return true;
  }
  return false;
}","public synchronized boolean removeEntry(String name) throws IOException {
  assertWritable();
  NameEntry nameEntry=entries.get(name);
  if (nameEntry != null) {
    entries.remove(name);
    entryTbl.removeEntry(nameEntry);
    int blockId=nameEntry.getBlock();
    if (blockId != -1) {
      AllocEntry allocEntry=allocTbl.loadEntry(blockId);
      if (allocEntry != null) {
        allocTbl.removeEntry(allocEntry);
      }
    }
    return true;
  }
  return false;
}",0.2563482466747279
68404,"synchronized public Object lockEntry(String name) throws IOException {
  assertOpen();
  ArchiveEntryV2 entry=entries.get(name);
  if (entry == null) {
    if (!isWritable) {
      throw new FileNotFoundException(name);
    }
    entry=(ArchiveEntryV2)createEntry(name);
  }
  if (useNativeLock) {
    if (!isTransient) {
      entry.ensureSize(1);
      int blockId=entry.index.getBlock(0);
      return rf.getChannel().lock(blockId * BLOCK_SIZE,1,false);
    }
  }
  return entry;
}","synchronized public Object lockEntry(String name) throws IOException {
  assertOpen();
  NameEntry entry=entries.get(name);
  if (entry == null) {
    if (!isWritable) {
      throw new FileNotFoundException(name);
    }
    entry=entryTbl.createEntry(name);
    entries.put(name,entry);
  }
  return entry;
}",0.5851197982345523
68405,"/** 
 * open the archive file for read or rw.
 * @throws IOException
 */
private void openDocument() throws IOException {
  try {
    if (rf == null) {
      if (!isWritable && !useNativeLock) {
        rf=new RandomAccessFile(archiveName,""String_Node_Str"");
      }
 else {
        ensureParentFolderCreated();
        rf=new RandomAccessFile(archiveName,""String_Node_Str"");
      }
    }
    head=ArchiveHeader.read(rf);
    if (systemId == null) {
      systemId=head.systemId;
    }
    if (dependId == null) {
      dependId=head.dependId;
    }
    BLOCK_SIZE=head.blockSize;
    totalBlocks=(int)((rf.length() + BLOCK_SIZE - 1) / BLOCK_SIZE);
    totalDiskBlocks=totalBlocks;
    allocTbl=AllocTable.loadTable(this);
    entryTbl=NameTable.loadTable(this);
    entries=new HashMap();
    Iterator iter=entryTbl.listEntries().iterator();
    while (iter.hasNext()) {
      NameEntry nameEnt=(NameEntry)iter.next();
      entries.put(nameEnt.getName(),new ArchiveEntryV2(this,nameEnt));
    }
  }
 catch (  IOException ex) {
    if (rf != null) {
      rf.close();
      rf=null;
    }
    throw ex;
  }
}","/** 
 * open the archive file for read or rw.
 * @throws IOException
 */
private void openDocument() throws IOException {
  try {
    if (rf == null) {
      if (!isWritable) {
        rf=new RandomAccessFile(archiveName,""String_Node_Str"");
      }
 else {
        ensureParentFolderCreated();
        rf=new RandomAccessFile(archiveName,""String_Node_Str"");
      }
    }
    head=ArchiveHeader.read(rf);
    if (systemId == null) {
      systemId=head.systemId;
    }
    if (dependId == null) {
      dependId=head.dependId;
    }
    BLOCK_SIZE=head.blockSize;
    totalBlocks=(int)((rf.length() + BLOCK_SIZE - 1) / BLOCK_SIZE);
    totalDiskBlocks=totalBlocks;
    allocTbl=AllocTable.loadTable(this);
    entryTbl=NameTable.loadTable(this);
    entries=new HashMap();
    Iterator iter=entryTbl.listEntries().iterator();
    while (iter.hasNext()) {
      NameEntry nameEnt=(NameEntry)iter.next();
      entries.put(nameEnt.getName(),nameEnt);
    }
  }
 catch (  IOException ex) {
    if (rf != null) {
      rf.close();
      rf=null;
    }
    throw ex;
  }
}",0.8700045934772623
68406,"public synchronized ArchiveEntry openEntry(String name) throws IOException {
  ArchiveEntryV2 entry=entries.get(name);
  if (entry != null) {
    return entry;
  }
  throw new FileNotFoundException(name);
}","public synchronized ArchiveEntry openEntry(String name) throws IOException {
  NameEntry nameEnt=entries.get(name);
  if (nameEnt != null) {
    return new ArchiveEntryV2(this,nameEnt);
  }
  throw new FileNotFoundException(name);
}",0.4611872146118721
68407,"public synchronized ArchiveEntry createEntry(String name) throws IOException {
  assertWritable();
  ArchiveEntryV2 entry=entries.get(name);
  if (entry != null) {
    entry.setLength(0L);
    return entry;
  }
  NameEntry nameEnt=entryTbl.createEntry(name);
  entry=new ArchiveEntryV2(this,nameEnt);
  entries.put(name,entry);
  return entry;
}","public synchronized ArchiveEntry createEntry(String name) throws IOException {
  assertWritable();
  NameEntry nameEnt=entries.get(name);
  if (nameEnt != null) {
    ArchiveEntryV2 entry=new ArchiveEntryV2(this,nameEnt);
    entry.setLength(0L);
    return entry;
  }
  nameEnt=entryTbl.createEntry(name);
  entries.put(name,nameEnt);
  return new ArchiveEntryV2(this,nameEnt);
}",0.6868965517241379
68408,"synchronized public void unlockEntry(Object locker) throws IOException {
  assertOpen();
  if (locker instanceof FileLock) {
    FileLock flck=(FileLock)locker;
    flck.release();
  }
  if (!(locker instanceof ArchiveEntry)) {
    throw new IOException(""String_Node_Str"" + locker);
  }
}","synchronized public void unlockEntry(Object locker) throws IOException {
  assertOpen();
  if (!(locker instanceof NameEntry)) {
    throw new IOException(""String_Node_Str"" + locker);
  }
}",0.779874213836478
68409,"protected final void clearResultSetTable(){
  if (recordList == null)   recordList=new ArrayList();
 else   recordList.clear();
  TableColumn[] columns=resultSetTable.getColumns();
  for (int n=0; n < columns.length; n++) {
    columns[n].dispose();
  }
  resultSetTable.removeAll();
}","protected final void clearResultSetTable(){
  if (recordList == null)   recordList=new ArrayList();
 else   recordList.clear();
  resultSetTable.removeAll();
  TableColumn[] columns=resultSetTable.getColumns();
  for (int n=0; n < columns.length; n++) {
    columns[n].dispose();
  }
}",0.8947368421052632
68410,"/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    if (!meta.isComputedColumn(i)) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i - 1);
      rsColumn.setColumnName(uniqueName);
      rsColumn.setDataType(DataAdapterUtil.adapterToModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompatibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}","/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  Set computedColumnNameSet=new HashSet();
  Iterator computedIter=dataSetHandle.computedColumnsIterator();
  while (computedIter.hasNext()) {
    ComputedColumnHandle handle=(ComputedColumnHandle)computedIter.next();
    computedColumnNameSet.add(handle.getName());
  }
  List columnList=new ArrayList();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    if (!computedColumnNameSet.contains(meta.getColumnName(i))) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i - 1);
      rsColumn.setColumnName(uniqueName);
      if (meta.getColumnType(i) != DataType.ANY_TYPE)       rsColumn.setDataType(DataAdapterUtil.adapterToModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompatibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}",0.7823185988323603
68411,"/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,new ArrayList());
    }
 else {
      if (dataSetHandle.getCachedMetaDataHandle() != null)       dataSetHandle.getCachedMetaDataHandle().getResultSet().clearValue();
 else       dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
    }
    throw e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(DataAdapterUtil.adapterToModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      if (dataSetHandle.getCachedMetaDataHandle() != null) {
        List resultSetColumnHandles=getResultSetColumnHandles(dataSetHandle.getCachedMetaDataHandle());
        int i=0;
        for (; i < columnList.size(); i++) {
          ResultSetColumn rsc=(ResultSetColumn)columnList.get(i);
          if (i < resultSetColumnHandles.size()) {
            ResultSetColumnHandle rsh=(ResultSetColumnHandle)resultSetColumnHandles.get(i);
            if (!rsh.getColumnName().equals(rsc.getColumnName())) {
              rsh.setColumnName(rsc.getColumnName());
            }
            if (!rsh.getDataType().equals(rsc.getDataType())) {
              rsh.setDataType(rsc.getDataType());
            }
          }
 else {
            dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem(rsc);
          }
        }
        if (i < resultSetColumnHandles.size()) {
          List toRemoved=resultSetColumnHandles.subList(i,resultSetColumnHandles.size());
          dataSetHandle.getCachedMetaDataHandle().getResultSet().removeItems(toRemoved);
        }
      }
 else {
        dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
        for (int i=0; i < columnList.size(); i++) {
          dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
        }
      }
    }
  }
  return rsMeta;
}","/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,new ArrayList());
    }
 else {
      if (dataSetHandle.getCachedMetaDataHandle() != null)       dataSetHandle.getCachedMetaDataHandle().getResultSet().clearValue();
 else       dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
    }
    throw e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        if (rsMeta.getColumnType(i) != DataType.ANY_TYPE)         rsc.setDataType(DataAdapterUtil.adapterToModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      if (dataSetHandle.getCachedMetaDataHandle() != null) {
        List resultSetColumnHandles=getResultSetColumnHandles(dataSetHandle.getCachedMetaDataHandle());
        int i=0;
        for (; i < columnList.size(); i++) {
          ResultSetColumn rsc=(ResultSetColumn)columnList.get(i);
          if (i < resultSetColumnHandles.size()) {
            ResultSetColumnHandle rsh=(ResultSetColumnHandle)resultSetColumnHandles.get(i);
            if (!rsh.getColumnName().equals(rsc.getColumnName())) {
              rsh.setColumnName(rsc.getColumnName());
            }
            if (!rsh.getDataType().equals(rsc.getDataType())) {
              rsh.setDataType(rsc.getDataType());
            }
          }
 else {
            dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem(rsc);
          }
        }
        if (i < resultSetColumnHandles.size()) {
          List toRemoved=resultSetColumnHandles.subList(i,resultSetColumnHandles.size());
          dataSetHandle.getCachedMetaDataHandle().getResultSet().removeItems(toRemoved);
        }
      }
 else {
        dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
        for (int i=0; i < columnList.size(); i++) {
          dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
        }
      }
    }
  }
  return rsMeta;
}",0.6565693430656935
68412,"/** 
 * Creates the top level control for this dialog page under the given parent composite. <p> Implementors are responsible for ensuring that the created control can be accessed via <code>getControl</code> </p>
 * @param parent the parent composite
 */
public void createControl(Composite parent){
  helper=new DataSetBasePageHelper();
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  final Group group=new Group(composite,SWT.NONE);
  group.setLayout(new GridLayout());
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,8));
  wizardFilter=new WizardFilter();
  dataSourceFilteredTree=new FilteredTree(group,SWT.BORDER | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL,this.wizardFilter,true);
  GridData treeData=new GridData(GridData.FILL_BOTH);
  treeData.grabExcessHorizontalSpace=true;
  treeData.grabExcessVerticalSpace=true;
  treeData.heightHint=300;
  treeData.widthHint=600;
  dataSourceFilteredTree.setLayoutData(treeData);
  SelectionListener listener=new SelectionListener(){
    TreeItem parent=null;
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent event){
      if (event.item.getData() instanceof DataSourceHandle) {
        dataSetTypeChooser.getCombo().setEnabled(true);
        if (parent == null || parent != ((TreeItem)event.item).getParentItem()) {
          parent=((TreeItem)event.item).getParentItem();
          doDataSourceSelectionChanged(parent.getData());
        }
        setPageComplete(!hasWizard() && (getMessageType() != ERROR));
      }
 else {
        dataSetTypeChooser.getCombo().clearSelection();
        dataSetTypeChooser.getCombo().setEnabled(false);
        setPageComplete(false);
      }
    }
  }
;
  dataSourceFilteredTree.getViewer().getTree().addSelectionListener(listener);
  createDataSetTypeViewer(composite);
  setDataSourceTreeViewer();
  new Label(composite,SWT.RIGHT).setText(Messages.getString(""String_Node_Str""));
  nameEditor=new Text(composite,SWT.BORDER);
  String name=ReportPlugin.getDefault().getCustomName(ReportDesignConstants.DATA_SET_ELEMENT);
  if (name != null) {
    nameEditor.setText(Utility.getUniqueDataSetName(name));
  }
 else {
    nameEditor.setText(Utility.getUniqueDataSetName(Messages.getString(""String_Node_Str"")));
  }
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameEditor.setToolTipText(Messages.getString(""String_Node_Str""));
  nameEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (StringUtil.isBlank(nameEditor.getText().trim())) {
        setMessage(EMPTY_NAME,ERROR);
      }
 else       if (isDuplicateName()) {
        setMessage(DUPLICATE_NAME,ERROR);
      }
 else       if (containInvalidCharactor(nameEditor.getText())) {
        String msg=Messages.getFormattedString(""String_Node_Str"",new Object[]{nameEditor.getText()});
        setMessage(msg,ERROR);
      }
 else {
        setMessage(CREATE_PROMPT);
      }
      setPageComplete(!hasWizard() && (getMessageType() != ERROR) && getSelectedDataSource() != null);
    }
  }
);
  setControl(composite);
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASET_NEW);
}","/** 
 * Creates the top level control for this dialog page under the given parent composite. <p> Implementors are responsible for ensuring that the created control can be accessed via <code>getControl</code> </p>
 * @param parent the parent composite
 */
public void createControl(Composite parent){
  helper=new DataSetBasePageHelper();
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  final Group group=new Group(composite,SWT.NONE);
  group.setLayout(new GridLayout());
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,8));
  wizardFilter=new WizardFilter();
  dataSourceFilteredTree=new FilteredTree(group,SWT.BORDER | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL,this.wizardFilter,true);
  GridData treeData=new GridData(GridData.FILL_BOTH);
  treeData.grabExcessHorizontalSpace=true;
  treeData.grabExcessVerticalSpace=true;
  treeData.heightHint=300;
  treeData.widthHint=600;
  dataSourceFilteredTree.setLayoutData(treeData);
  SelectionListener listener=new SelectionListener(){
    TreeItem parent=null;
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent event){
      if (event.item.getData() instanceof DataSourceHandle) {
        dataSetTypeChooser.getCombo().setEnabled(true);
        if (parent == null || parent != ((TreeItem)event.item).getParentItem()) {
          parent=((TreeItem)event.item).getParentItem();
          doDataSourceSelectionChanged(parent.getData());
        }
        setPageComplete(!hasWizard() && (getMessageType() != ERROR));
      }
 else {
        dataSetTypeChooser.getCombo().clearSelection();
        dataSetTypeChooser.getCombo().setEnabled(false);
        setPageComplete(false);
      }
    }
  }
;
  dataSourceFilteredTree.getViewer().getTree().addSelectionListener(listener);
  createDataSetTypeViewer(composite);
  setDataSourceTreeViewer();
  setPageStatus();
  new Label(composite,SWT.RIGHT).setText(Messages.getString(""String_Node_Str""));
  nameEditor=new Text(composite,SWT.BORDER);
  String name=ReportPlugin.getDefault().getCustomName(ReportDesignConstants.DATA_SET_ELEMENT);
  if (name != null) {
    nameEditor.setText(Utility.getUniqueDataSetName(name));
  }
 else {
    nameEditor.setText(Utility.getUniqueDataSetName(Messages.getString(""String_Node_Str"")));
  }
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameEditor.setToolTipText(Messages.getString(""String_Node_Str""));
  nameEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (StringUtil.isBlank(nameEditor.getText().trim())) {
        setMessage(EMPTY_NAME,ERROR);
      }
 else       if (isDuplicateName()) {
        setMessage(DUPLICATE_NAME,ERROR);
      }
 else       if (containInvalidCharactor(nameEditor.getText())) {
        String msg=Messages.getFormattedString(""String_Node_Str"",new Object[]{nameEditor.getText()});
        setMessage(msg,ERROR);
      }
 else {
        setMessage(CREATE_PROMPT);
      }
      setPageComplete(!hasWizard() && (getMessageType() != ERROR) && getSelectedDataSource() != null);
    }
  }
);
  setControl(composite);
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASET_NEW);
}",0.9972128502273728
68413,"private void setDataSourceTreeViewer(){
  dataSourceFilteredTree.getViewer().setContentProvider(new ITreeContentProvider(){
    DataSourceType[] types=null;
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      types=new DataSourceType[((Collection)inputElement).size()];
      Iterator iter=((Collection)inputElement).iterator();
      int i=0;
      while (iter.hasNext()) {
        types[i]=(DataSourceType)iter.next();
        i++;
      }
      setPageComplete(false);
      return types;
    }
    public Object[] getChildren(    Object parentElement){
      if (parentElement instanceof DataSourceType) {
        return ((DataSourceType)parentElement).getDataSourceList().toArray();
      }
 else {
        return new Object[0];
      }
    }
    public Object getParent(    Object element){
      if (types != null) {
        for (int i=0; i < types.length; i++) {
          if (types[i].getDataSourceList().contains(element))           return types[i];
        }
      }
      return null;
    }
    public boolean hasChildren(    Object element){
      if (element instanceof DataSourceType) {
        return true;
      }
 else       if (element instanceof DataSourceHandle) {
        return false;
      }
      return false;
    }
  }
);
  dataSourceFilteredTree.getViewer().setLabelProvider(new ILabelProvider(){
    public Image getImage(    Object element){
      return null;
    }
    public String getText(    Object element){
      if (element instanceof DataSourceType) {
        return ((DataSourceType)element).getDataSourceDisplayName();
      }
 else       if (element instanceof DataSourceHandle) {
        return ((DataSourceHandle)element).getName();
      }
      return element.toString();
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void dispose(){
    }
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void removeListener(    ILabelProviderListener listener){
    }
  }
);
  dataSourceFilteredTree.getViewer().setComparator(new ViewerComparator(new Comparator(){
    public int compare(    Object o1,    Object o2){
      return o1.toString().compareTo(o2.toString());
    }
  }
));
  Map sourceMap=getDataSourceMap();
  dataSourceFilteredTree.getViewer().setInput(sourceMap.values());
  dataSourceFilteredTree.getViewer().expandAll();
  if (dataSourceFilteredTree.getViewer().getTree().getItems().length > 0) {
    dataSourceFilteredTree.getViewer().getTree().select(dataSourceFilteredTree.getViewer().getTree().getItem(0).getItem(0));
    doDataSourceSelectionChanged(dataSourceFilteredTree.getViewer().getTree().getItem(0).getData());
    dataSetTypeChooser.getCombo().setEnabled(true);
  }
  setPageComplete(!hasWizard() && (getMessageType() != ERROR));
}","private void setDataSourceTreeViewer(){
  dataSourceFilteredTree.getViewer().setContentProvider(new ITreeContentProvider(){
    DataSourceType[] types=null;
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      types=new DataSourceType[((Collection)inputElement).size()];
      Iterator iter=((Collection)inputElement).iterator();
      int i=0;
      while (iter.hasNext()) {
        types[i]=(DataSourceType)iter.next();
        i++;
      }
      return types;
    }
    public Object[] getChildren(    Object parentElement){
      if (parentElement instanceof DataSourceType) {
        return ((DataSourceType)parentElement).getDataSourceList().toArray();
      }
 else {
        return new Object[0];
      }
    }
    public Object getParent(    Object element){
      if (types != null) {
        for (int i=0; i < types.length; i++) {
          if (types[i].getDataSourceList().contains(element))           return types[i];
        }
      }
      return null;
    }
    public boolean hasChildren(    Object element){
      if (element instanceof DataSourceType) {
        return true;
      }
 else       if (element instanceof DataSourceHandle) {
        return false;
      }
      return false;
    }
  }
);
  dataSourceFilteredTree.getViewer().setLabelProvider(new ILabelProvider(){
    public Image getImage(    Object element){
      return null;
    }
    public String getText(    Object element){
      if (element instanceof DataSourceType) {
        return ((DataSourceType)element).getDataSourceDisplayName();
      }
 else       if (element instanceof DataSourceHandle) {
        return ((DataSourceHandle)element).getName();
      }
      return element.toString();
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void dispose(){
    }
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void removeListener(    ILabelProviderListener listener){
    }
  }
);
  dataSourceFilteredTree.getViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      setPageStatus();
    }
  }
);
  dataSourceFilteredTree.getViewer().setComparator(new ViewerComparator(new Comparator(){
    public int compare(    Object o1,    Object o2){
      return o1.toString().compareTo(o2.toString());
    }
  }
));
  Map sourceMap=getDataSourceMap();
  dataSourceFilteredTree.getViewer().setInput(sourceMap.values());
  dataSourceFilteredTree.getViewer().expandAll();
  if (dataSourceFilteredTree.getViewer().getTree().getItems().length > 0) {
    dataSourceFilteredTree.getViewer().getTree().select(dataSourceFilteredTree.getViewer().getTree().getItem(0).getItem(0));
    doDataSourceSelectionChanged(dataSourceFilteredTree.getViewer().getTree().getItem(0).getData());
    dataSetTypeChooser.getCombo().setEnabled(true);
  }
  setPageComplete(!hasWizard() && (getMessageType() != ERROR));
}",0.961811869730534
68414,"protected Composite getTogglesControl(Composite parent){
  if (toggles == null && providers != null) {
    composite=new Composite(parent,SWT.NONE);
    GridLayout layout=new GridLayout();
    layout.horizontalSpacing=7;
    layout.numColumns=providers.length;
    composite.setLayout(layout);
    composite.setLayoutData(new GridData());
    toggles=new TogglePropertyDescriptor[providers.length];
    for (int i=0; i < providers.length; i++) {
      toggle=DescriptorToolkit.createTogglePropertyDescriptor();
      toggles[i]=toggle;
      toggle.setDescriptorProvider(providers[i]);
      toggle.createControl(composite);
      toggle.getControl().setLayoutData(new GridData());
      toggle.getControl().addDisposeListener(new DisposeListener(){
        public void widgetDisposed(        DisposeEvent event){
          toggle=null;
          boolean flag=true;
          for (int i=0; i < providers.length; i++) {
            if (toggles[i] != null) {
              flag=false;
              break;
            }
          }
          if (flag)           toggles=null;
        }
      }
);
    }
  }
 else {
    checkParent(composite,parent);
  }
  return composite;
}","protected Composite getTogglesControl(Composite parent){
  if (toggles == null && providers != null) {
    composite=new Composite(parent,SWT.NONE);
    GridLayout layout=new GridLayout();
    layout.horizontalSpacing=7;
    layout.numColumns=providers.length;
    composite.setLayout(layout);
    composite.setLayoutData(new GridData());
    toggles=new TogglePropertyDescriptor[providers.length];
    for (int i=0; i < providers.length; i++) {
      toggle=DescriptorToolkit.createTogglePropertyDescriptor();
      toggles[i]=toggle;
      toggle.setDescriptorProvider(providers[i]);
      toggle.createControl(composite);
      GridData gd=new GridData();
      toggle.getControl().setLayoutData(gd);
      toggle.getControl().addDisposeListener(new DisposeListener(){
        public void widgetDisposed(        DisposeEvent event){
          toggle=null;
          boolean flag=true;
          for (int i=0; i < providers.length; i++) {
            if (toggles[i] != null) {
              flag=false;
              break;
            }
          }
          if (flag)           toggles=null;
        }
      }
);
    }
  }
 else {
    checkParent(composite,parent);
  }
  return composite;
}",0.9788851351351352
68415,"public void load(){
  for (int i=0; i < toggles.length; i++) {
    if (toggles[i] != null && !toggles[i].getControl().isDisposed())     toggles[i].load();
  }
}","public void load(){
  for (int i=0; i < toggles.length; i++) {
    if (toggles[i] != null && !toggles[i].getControl().isDisposed())     toggles[i].load();
  }
  composite.layout();
}",0.935672514619883
68416,"private void initColorBuilder(Composite parent,int style,boolean isFormStyle){
  setLayout(WidgetUtil.createSpaceGridLayout(2,1));
  if (isFormStyle)   ((GridLayout)getLayout()).horizontalSpacing=3;
  colorSelector=new ColorSelector(this);
  GridData data=new GridData();
  data.widthHint=50;
  data.horizontalAlignment=GridData.HORIZONTAL_ALIGN_BEGINNING;
  colorSelector.getButton().setLayoutData(data);
  colorSelector.getButton().setToolTipText(Messages.getString(""String_Node_Str""));
  colorSelector.addListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      predefinedColor=null;
      processAction(colorSelector.getColorValue());
    }
  }
);
  if (isFormStyle)   combo=FormWidgetFactory.getInstance().createCCombo(this,false);
 else {
    combo=new CCombo(this,SWT.DROP_DOWN);
    combo.setVisibleItemCount(30);
  }
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  combo.setLayoutData(data);
  combo.add(NONE_CHOICE);
  combo.addFocusListener(new FocusListener(){
    public void focusGained(    org.eclipse.swt.events.FocusEvent e){
      handleComboFocusGainedEvent(e);
    }
    public void focusLost(    org.eclipse.swt.events.FocusEvent e){
      handleComboFocusLostEvent(e);
    }
  }
);
  combo.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      handleComboSelectedEvent(e);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      handleComboDefaultSelectedEvent(e);
    }
  }
);
  initAccessible();
}","private void initColorBuilder(Composite parent,int style,boolean isFormStyle){
  setLayout(WidgetUtil.createSpaceGridLayout(2,1));
  if (isFormStyle)   ((GridLayout)getLayout()).horizontalSpacing=3;
  colorSelector=new ColorSelector(this);
  GridData data=new GridData();
  data.horizontalAlignment=GridData.HORIZONTAL_ALIGN_BEGINNING;
  colorSelector.getButton().setLayoutData(data);
  colorSelector.getButton().setToolTipText(Messages.getString(""String_Node_Str""));
  colorSelector.addListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      predefinedColor=null;
      processAction(colorSelector.getColorValue());
    }
  }
);
  if (isFormStyle)   combo=FormWidgetFactory.getInstance().createCCombo(this,false);
 else {
    combo=new CCombo(this,SWT.DROP_DOWN);
    combo.setVisibleItemCount(30);
  }
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  combo.setLayoutData(data);
  combo.add(NONE_CHOICE);
  combo.addFocusListener(new FocusListener(){
    public void focusGained(    org.eclipse.swt.events.FocusEvent e){
      handleComboFocusGainedEvent(e);
    }
    public void focusLost(    org.eclipse.swt.events.FocusEvent e){
      handleComboFocusLostEvent(e);
    }
  }
);
  combo.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      handleComboSelectedEvent(e);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      handleComboDefaultSelectedEvent(e);
    }
  }
);
  initAccessible();
}",0.9933941491034916
68417,"/** 
 * Update the image being displayed on the button using the current color setting.
 */
protected void updateColorImage(){
  Display display=fButton.getDisplay();
  GC gc=new GC(fImage);
  if (fColor != null) {
    fColor.dispose();
  }
  if (fColorValue == null) {
    gc.setBackground(fButton.getBackground());
    gc.fillRectangle(0,0,fExtent.x,fExtent.y);
  }
 else {
    gc.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
    gc.drawRectangle(0,2,fExtent.x - 1,fExtent.y - 4);
    fColor=new Color(display,fColorValue);
    gc.setBackground(fColor);
    gc.fillRectangle(1,3,fExtent.x - 2,fExtent.y - 5);
  }
  gc.dispose();
  fButton.setImage(fImage);
}","/** 
 * Update the image being displayed on the button using the current color setting.
 */
protected void updateColorImage(){
  Display display=fButton.getDisplay();
  GC gc=new GC(fImage);
  if (fColor != null) {
    fColor.dispose();
  }
  if (fColorValue == null) {
    gc.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
    gc.drawRectangle(0,2,fExtent.x - 1,fExtent.y - 4);
    gc.setBackground(fButton.getBackground());
    gc.fillRectangle(1,3,fExtent.x - 2,fExtent.y - 5);
  }
 else {
    gc.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
    gc.drawRectangle(0,2,fExtent.x - 1,fExtent.y - 4);
    fColor=new Color(display,fColorValue);
    gc.setBackground(fColor);
    gc.fillRectangle(1,3,fExtent.x - 2,fExtent.y - 5);
  }
  gc.dispose();
  fButton.setImage(fImage);
}",0.7697547683923706
68418,"/** 
 * Compute the size of the image to be displayed.
 * @param window -the window used to calculate
 * @return <code>Point</code>
 */
private Point computeImageSize(Control window){
  GC gc=new GC(window);
  Font f=JFaceResources.getFontRegistry().get(JFaceResources.DIALOG_FONT);
  gc.setFont(f);
  int height=gc.getFontMetrics().getHeight();
  gc.dispose();
  Point p=new Point(height * 3 - 6,height);
  return p;
}","/** 
 * Compute the size of the image to be displayed.
 * @param window - the window used to calculate
 * @return <code>Point</code>
 */
private Point computeImageSize(Control window){
  GC gc=new GC(window);
  Font f=JFaceResources.getFontRegistry().get(JFaceResources.DIALOG_FONT);
  gc.setFont(f);
  int height=gc.getFontMetrics().getHeight();
  gc.dispose();
  Point p=new Point(height * 3 - 6,height);
  return p;
}",0.99880810488677
68419,"public void run(){
  if (guideHandle != null && guideHandle.isCanDeleteGuide()) {
    removeGuideFeedBack();
  }
}","public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}",0.178060413354531
68420,"public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
}","public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}",0.6359550561797753
68421,"protected ConfigurableOption initializeWrappingText(){
  ConfigurableOption wrappingText=new ConfigurableOption(TEXT_WRAPPING);
  wrappingText.setDisplayName(Messages.getString(""String_Node_Str""));
  wrappingText.setDataType(IConfigurableOption.DataType.BOOLEAN);
  wrappingText.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  wrappingText.setDefaultValue(Boolean.TRUE);
  wrappingText.setToolTip(null);
  wrappingText.setDescription(Messages.getString(""String_Node_Str""));
  return wrappingText;
}","protected ConfigurableOption initializeWrappingText(){
  ConfigurableOption wrappingText=new ConfigurableOption(TEXT_WRAPPING);
  wrappingText.setDisplayName(getMessage(""String_Node_Str""));
  wrappingText.setDataType(IConfigurableOption.DataType.BOOLEAN);
  wrappingText.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  wrappingText.setDefaultValue(Boolean.TRUE);
  wrappingText.setToolTip(null);
  wrappingText.setDescription(getMessage(""String_Node_Str""));
  return wrappingText;
}",0.9721115537848606
68422,"public String getDisplayName(){
  return Messages.getString(""String_Node_Str"");
}","public String getDisplayName(){
  return getMessage(""String_Node_Str"");
}",0.9090909090909092
68423,"private void initOptions(){
  ConfigurableOption wrappingText=initializeWrappingText();
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(Messages.getString(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(null);
  chartDpi.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{wrappingText,chartDpi};
}","private void initOptions(){
  ConfigurableOption wrappingText=initializeWrappingText();
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(null);
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{wrappingText,chartDpi};
}",0.974074074074074
68424,"public ExcelEmitterDescriptor(){
  initOptions();
}","public ExcelEmitterDescriptor(Locale locale){
  this.locale=locale;
  initOptions();
}",0.7445255474452555
68425,"public String getDescription(){
  return Messages.getString(""String_Node_Str"");
}","public String getDescription(){
  return getMessage(""String_Node_Str"");
}",0.9090909090909092
68426,"/** 
 * Returns the resource bundle.
 * @return the resource bundle.
 */
public static ResourceBundle getReportResourceBundle(){
  return RESOURCE_BUNDLE;
}","/** 
 * Returns the resource bundle.
 * @return the resource bundle.
 */
public static ResourceBundle getReportResourceBundle(Locale locale){
  ResourceBundle bundle=getReportResourceBundle();
  if (locale != null) {
    bundle=localeToBundle.get(locale);
    if (bundle == null) {
      bundle=ResourceBundle.getBundle(BUNDLE_NAME,locale);
      localeToBundle.put(locale,bundle);
    }
  }
  return bundle == null ? RESOURCE_BUNDLE : bundle;
}",0.4658901830282861
68427,"/** 
 * Returns formatted translation for current local.
 * @param key the key to translate.
 * @return translated value string.
 */
public static String getFormattedString(String key,Object[] arguments){
  return MessageFormat.format(getString(key),arguments);
}","/** 
 * Returns formatted translation for current local.
 * @param key the key to translate.
 * @return translated value string.
 */
public static String getFormattedString(String key,Object[] arguments,Locale locale){
  return MessageFormat.format(getString(key,locale),arguments);
}",0.9616087751371116
68428,"/** 
 * Returns common translation for current local.
 * @param key the key to translate.
 * @return translated value string.
 */
public static String getString(String key){
}","/** 
 * Returns common translation for current local.
 * @param key the key to translate.
 * @return translated value string.
 */
public static String getString(String key,Locale locale){
}",0.9615384615384616
68429,"public String getDisplayName(){
  return Messages.getString(""String_Node_Str"");
}","public String getDisplayName(){
  return getMessage(""String_Node_Str"");
}",0.9090909090909092
68430,"public String getDescription(){
  return Messages.getString(""String_Node_Str"");
}","public String getDescription(){
  return getMessage(""String_Node_Str"");
}",0.9090909090909092
68431,"/** 
 * Returns the resource bundle.
 * @return the resource bundle.
 */
public static ResourceBundle getReportResourceBundle(){
  return RESOURCE_BUNDLE;
}","/** 
 * Returns the resource bundle.
 * @return the resource bundle.
 */
public static ResourceBundle getReportResourceBundle(Locale locale){
  ResourceBundle bundle=getReportResourceBundle();
  if (locale != null) {
    bundle=localeToBundle.get(locale);
    if (bundle == null) {
      bundle=ResourceBundle.getBundle(BUNDLE_NAME,locale);
      localeToBundle.put(locale,bundle);
    }
  }
  return bundle == null ? RESOURCE_BUNDLE : bundle;
}",0.4658901830282861
68432,"/** 
 * Returns formatted translation for current local.
 * @param key the key to translate.
 * @return translated value string.
 */
public static String getFormattedString(String key,Object[] arguments){
  return MessageFormat.format(getString(key),arguments);
}","/** 
 * Returns formatted translation for current local.
 * @param key the key to translate.
 * @return translated value string.
 */
public static String getFormattedString(String key,Object[] arguments,Locale locale){
  return MessageFormat.format(getString(key,locale),arguments);
}",0.9616087751371116
68433,"/** 
 * Returns common translation for current local.
 * @param key the key to translate.
 * @return translated value string.
 */
public static String getString(String key){
}","/** 
 * Returns common translation for current local.
 * @param key the key to translate.
 * @return translated value string.
 */
public static String getString(String key,Locale locale){
}",0.9615384615384616
68434,"public void partActivated(IWorkbenchPart part){
  fActivePart=part;
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    confirmSave();
    final ModuleHandle oldHandle=getModel();
    if (needReset) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        getProvider().getReportModuleHandle(getEditorInput(),true);
      }
 else {
        needReset=false;
      }
      needReload=false;
    }
    if (needReload) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        UIUtil.reloadModuleHandleLibraries(getModel());
      }
 else {
        needReload=false;
      }
    }
    if (getEditorInput().exists()) {
      handleActivation();
      ModuleHandle currentModel=getModel();
      SessionHandleAdapter.getInstance().setReportDesignHandle(currentModel);
      String str=SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder();
      UIUtil.processSessionResourceFolder(getEditorInput(),UIUtil.getProjectFromInput(getEditorInput()),currentModel);
      if (!str.equals(SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder()) && getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        ((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getRootEditPart();
        refreshGraphicalEditor();
      }
    }
    if (getActivePageInstance() instanceof IReportEditorPage) {
      boolean isDispatch=false;
      if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        isDispatch=true;
      }
 else       if (needReload || needReset) {
        isDispatch=true;
      }
      final boolean tempDispatch=isDispatch;
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          IReportEditorPage curPage=(IReportEditorPage)getActivePageInstance();
          if (needReload || needReset) {
            curPage.markPageStale(IPageStaleType.MODEL_RELOAD);
          }
          if (getActivePageInstance() != null) {
            curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
          }
          if (!tempDispatch) {
            return;
          }
          if (needReload || needReset) {
            updateRelatedViews();
            curPage.markPageStale(IPageStaleType.NONE);
          }
          if (needReset) {
            SessionHandleAdapter.getInstance().resetReportDesign(oldHandle,getModel());
            oldHandle.close();
          }
          needReload=false;
          needReset=false;
        }
      }
);
    }
  }
}","public void partActivated(IWorkbenchPart part){
  fActivePart=part;
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    confirmSave();
    final ModuleHandle oldHandle=getModel();
    if (needReset) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        getProvider().getReportModuleHandle(getEditorInput(),true);
      }
 else {
        needReset=false;
      }
      needReload=false;
    }
    if (needReload) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        UIUtil.reloadModuleHandleLibraries(getModel());
      }
 else {
        needReload=false;
      }
    }
    if (getEditorInput().exists()) {
      handleActivation();
      ModuleHandle currentModel=getModel();
      SessionHandleAdapter.getInstance().setReportDesignHandle(currentModel);
      String str=SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder();
      UIUtil.processSessionResourceFolder(getEditorInput(),UIUtil.getProjectFromInput(getEditorInput()),currentModel);
      if (!str.equals(SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder()) && getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        ((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getRootEditPart();
        refreshGraphicalEditor();
      }
    }
    if (getActivePageInstance() instanceof IReportEditorPage) {
      boolean isDispatch=false;
      if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        isDispatch=true;
      }
 else       if (needReload || needReset) {
        isDispatch=true;
      }
      final boolean tempDispatch=isDispatch;
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          IReportEditorPage curPage=(IReportEditorPage)getActivePageInstance();
          if (needReload || needReset) {
            curPage.markPageStale(IPageStaleType.MODEL_RELOAD);
          }
          if (getActivePageInstance() != null) {
            if (curPage instanceof IAdvanceReportEditorPage) {
              if (((IAdvanceReportEditorPage)curPage).isSensitivePartChange()) {
                curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
              }
            }
 else {
              curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
            }
          }
          if (!tempDispatch) {
            return;
          }
          if (needReload || needReset) {
            updateRelatedViews();
            curPage.markPageStale(IPageStaleType.NONE);
          }
          if (needReset) {
            SessionHandleAdapter.getInstance().resetReportDesign(oldHandle,getModel());
            oldHandle.close();
          }
          needReload=false;
          needReset=false;
        }
      }
);
    }
  }
}",0.9650124069478908
68435,"/** 
 * without row edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel2() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IDimensionDefinition dim3=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier3=dim3.createHierarchy(""String_Node_Str"");
  hier3.createLevel(""String_Node_Str"");
  IDimensionDefinition dim4=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier4=dim4.createHierarchy(""String_Node_Str"");
  hier4.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  testOut.print(creator.printCubeAlongDimension(dataCursor,countryCursor,cityCursor,streetCursor,timeCursor,null,null));
  try {
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * without row edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel2() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IDimensionDefinition dim3=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier3=dim3.createHierarchy(""String_Node_Str"");
  hier3.createLevel(""String_Node_Str"");
  IDimensionDefinition dim4=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier4=dim4.createHierarchy(""String_Node_Str"");
  hier4.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  testOut.print(creator.printCubeAlongDimension(dataCursor,countryCursor,cityCursor,streetCursor,timeCursor,null,null));
  try {
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9984383133784488
68436,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorOnCountry() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=this.creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List grandBindingNames=new ArrayList();
  grandBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,grandBindingNames));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorOnCountry() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=this.creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List grandBindingNames=new ArrayList();
  grandBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,grandBindingNames));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9981012658227848
68437,"/** 
 * @throws OLAPException
 * @throws BirtException 
 * @throws IOException 
 */
public void testCursorModel1() throws OLAPException, BirtException, IOException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 * @throws IOException 
 */
public void testCursorModel1() throws OLAPException, BirtException, IOException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.998687089715536
68438,"/** 
 * test populate data along dimension cursor
 * @throws DataException 
 * @throws OLAPException 
 */
public void testCursorModel4() throws DataException, OLAPException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List dimCursorOnColumn=cubeView.getColumnEdgeView().getEdgeCursor().getDimensionCursor();
  List dimCursorOnRow=cubeView.getRowEdgeView().getEdgeCursor().getDimensionCursor();
  testOut.print(creator.printCubeAlongDimension(dataCursor,(DimensionCursor)dimCursorOnColumn.get(0),(DimensionCursor)dimCursorOnColumn.get(1),(DimensionCursor)dimCursorOnColumn.get(2),(DimensionCursor)dimCursorOnColumn.get(3),(DimensionCursor)dimCursorOnRow.get(0),(DimensionCursor)dimCursorOnRow.get(1)));
  try {
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * test populate data along dimension cursor
 * @throws DataException 
 * @throws OLAPException 
 */
public void testCursorModel4() throws DataException, OLAPException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List dimCursorOnColumn=cubeView.getColumnEdgeView().getEdgeCursor().getDimensionCursor();
  List dimCursorOnRow=cubeView.getRowEdgeView().getEdgeCursor().getDimensionCursor();
  testOut.print(creator.printCubeAlongDimension(dataCursor,(DimensionCursor)dimCursorOnColumn.get(0),(DimensionCursor)dimCursorOnColumn.get(1),(DimensionCursor)dimCursorOnColumn.get(2),(DimensionCursor)dimCursorOnColumn.get(3),(DimensionCursor)dimCursorOnRow.get(0),(DimensionCursor)dimCursorOnRow.get(1)));
  try {
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.998678996036988
68439,"/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel3() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  DimensionCursor productCursor1=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  DimensionCursor productCursor2=(DimensionCursor)rowCursor.getDimensionCursor().get(1);
  testOut.print(creator.printCubeAlongDimension(dataCursor,null,null,null,null,productCursor1,productCursor2));
  try {
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel3() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  DimensionCursor productCursor1=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  DimensionCursor productCursor2=(DimensionCursor)rowCursor.getDimensionCursor().get(1);
  testOut.print(creator.printCubeAlongDimension(dataCursor,null,null,null,null,productCursor1,productCursor2));
  try {
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.997774480712166
68440,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel6() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition dimHier=dim.createHierarchy(""String_Node_Str"");
  dimHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IDimensionDefinition geographyDim3=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier3=geographyDim3.createHierarchy(""String_Node_Str"");
  geographyHier3.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_COUNTDISTINCT_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel6() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition dimHier=dim.createHierarchy(""String_Node_Str"");
  dimHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IDimensionDefinition geographyDim3=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier3=geographyDim3.createHierarchy(""String_Node_Str"");
  geographyHier3.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_COUNTDISTINCT_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9989208633093524
68441,"/** 
 * @throws OLAPException
 * @throws BirtException
 */
public void testCursorModel5() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=this.creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding rowGrandAvg=new Binding(""String_Node_Str"");
  rowGrandAvg.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  rowGrandAvg.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(rowGrandAvg);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException
 */
public void testCursorModel5() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=this.creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding rowGrandAvg=new Binding(""String_Node_Str"");
  rowGrandAvg.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  rowGrandAvg.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(rowGrandAvg);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.998416050686378
68442,"/** 
 * with measure filter
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel8() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.setFilter(new ScriptExpression(""String_Node_Str""));
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.setFilter(new ScriptExpression(""String_Node_Str""));
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * with measure filter
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel8() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.setFilter(new ScriptExpression(""String_Node_Str""));
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.setFilter(new ScriptExpression(""String_Node_Str""));
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9987551867219916
68443,"/** 
 * Test aggregation on measure with arguments
 * @throws OLAPException
 * @throws BirtException
 */
public void testCursorModel7() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=this.creator.createQueryDefinition();
  IBinding rowGrandAvg=new Binding(""String_Node_Str"");
  rowGrandAvg.setAggrFunction(IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  rowGrandAvg.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  rowGrandAvg.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandAvg);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * Test aggregation on measure with arguments
 * @throws OLAPException
 * @throws BirtException
 */
public void testCursorModel7() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=this.creator.createQueryDefinition();
  IBinding rowGrandAvg=new Binding(""String_Node_Str"");
  rowGrandAvg.setAggrFunction(IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  rowGrandAvg.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  rowGrandAvg.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandAvg);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9981684981684982
68444,"/** 
 * without measure
 * @throws Exception 
 */
public void testCursorWithoutMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition rowdim1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition rowhier1=rowdim1.createHierarchy(""String_Node_Str"");
  rowhier1.createLevel(""String_Node_Str"");
  IDimensionDefinition rowdim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition rowhier2=rowdim2.createHierarchy(""String_Node_Str"");
  rowhier2.createLevel(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IDimensionDefinition dim3=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier3=dim3.createHierarchy(""String_Node_Str"");
  hier3.createLevel(""String_Node_Str"");
  IDimensionDefinition dim4=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier4=dim4.createHierarchy(""String_Node_Str"");
  hier4.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,null,null,null,null,null));
  this.checkOutputFile();
  try {
    dataCursor.getObject(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertTrue(e instanceof OLAPException);
  }
}","/** 
 * without measure
 * @throws Exception 
 */
public void testCursorWithoutMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition rowdim1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition rowhier1=rowdim1.createHierarchy(""String_Node_Str"");
  rowhier1.createLevel(""String_Node_Str"");
  IDimensionDefinition rowdim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition rowhier2=rowdim2.createHierarchy(""String_Node_Str"");
  rowhier2.createLevel(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IDimensionDefinition dim3=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier3=dim3.createHierarchy(""String_Node_Str"");
  hier3.createLevel(""String_Node_Str"");
  IDimensionDefinition dim4=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier4=dim4.createHierarchy(""String_Node_Str"");
  hier4.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,null,null,null,null,null));
  this.checkOutputFile();
  try {
    dataCursor.getObject(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertTrue(e instanceof OLAPException);
  }
}",0.9987029831387808
68445,"public void testCursorWithPageEdge1() throws Exception {
  ICubeQueryDefinition cqd=creator.createQueryDefintionWithPage1();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List pageEdgeBindingNames=new ArrayList();
  pageEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongPageEdge(dataCursor,pageEdgeBindingNames,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
  this.checkOutputFile();
}","public void testCursorWithPageEdge1() throws Exception {
  ICubeQueryDefinition cqd=creator.createQueryDefintionWithPage1();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List pageEdgeBindingNames=new ArrayList();
  pageEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongPageEdge(dataCursor,pageEdgeBindingNames,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
  this.checkOutputFile();
}",0.9986882378662004
68446,"public void testCursorWithPageEdge2() throws Exception {
  ICubeQueryDefinition cqd=creator.createQueryDefintionWithPage2();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List pageEdgeBindingNames=new ArrayList();
  pageEdgeBindingNames.add(""String_Node_Str"");
  pageEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongPageEdge(dataCursor,pageEdgeBindingNames,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
  this.checkOutputFile();
}","public void testCursorWithPageEdge2() throws Exception {
  ICubeQueryDefinition cqd=creator.createQueryDefintionWithPage2();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List pageEdgeBindingNames=new ArrayList();
  pageEdgeBindingNames.add(""String_Node_Str"");
  pageEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongPageEdge(dataCursor,pageEdgeBindingNames,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
  this.checkOutputFile();
}",0.9987442444537464
68447,"/** 
 * without one row/column edge
 * @throws Exception
 */
public void testCursorWithPageEdge3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IEdgeDefinition pageEdge=cqd.createEdge(ICubeQueryDefinition.PAGE_EDGE);
  IDimensionDefinition dim3=pageEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier3=dim3.createHierarchy(""String_Node_Str"");
  hier3.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List pageEdgeBindingNames=new ArrayList();
  pageEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongPageEdge(dataCursor,pageEdgeBindingNames,new ArrayList(),rowEdgeBindingNames,measureBindingNames,null,null,null,null));
  this.checkOutputFile();
}","/** 
 * without one row/column edge
 * @throws Exception
 */
public void testCursorWithPageEdge3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IEdgeDefinition pageEdge=cqd.createEdge(ICubeQueryDefinition.PAGE_EDGE);
  IDimensionDefinition dim3=pageEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier3=dim3.createHierarchy(""String_Node_Str"");
  hier3.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List pageEdgeBindingNames=new ArrayList();
  pageEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongPageEdge(dataCursor,pageEdgeBindingNames,new ArrayList(),rowEdgeBindingNames,measureBindingNames,null,null,null,null));
  this.checkOutputFile();
}",0.998148148148148
68448,"/** 
 * with appContext's fetch limit
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel9WithFetchLimit() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  Map appContext=new HashMap();
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),appContext);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * with appContext's fetch limit
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel9WithFetchLimit() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  Map appContext=new HashMap();
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),appContext);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9987745098039216
68449,"public void testNavigatorOnPage() throws Exception {
  ICubeQueryDefinition cqd=creator.createQueryDefintionWithPage1();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  EdgeCursor pageCursor=(EdgeCursor)dataCursor.getPageEdge().toArray()[0];
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  pageCursor.setPosition(0);
  dataCursor.synchronizePages();
  String output=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  pageCursor.setPosition(3);
  dataCursor.synchronizePages();
  output+=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  pageCursor.setPosition(1);
  dataCursor.synchronizePages();
  output+=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  pageCursor.last();
  dataCursor.synchronizePages();
  output+=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  testOut.print(output);
  checkOutputFile();
  close(dataCursor);
}","public void testNavigatorOnPage() throws Exception {
  ICubeQueryDefinition cqd=creator.createQueryDefintionWithPage1();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  EdgeCursor pageCursor=(EdgeCursor)dataCursor.getPageEdge().toArray()[0];
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  pageCursor.setPosition(0);
  dataCursor.synchronizePages();
  String output=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  pageCursor.setPosition(3);
  dataCursor.synchronizePages();
  output+=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  pageCursor.setPosition(1);
  dataCursor.synchronizePages();
  output+=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  pageCursor.last();
  dataCursor.synchronizePages();
  output+=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  testOut.print(output);
  checkOutputFile();
  close(dataCursor);
}",0.9992884250474384
68450,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  columnCursor.beforeFirst();
  assertTrue(countryCursor.isBeforeFirst());
  assertTrue(cityCursor.isBeforeFirst());
  assertTrue(streetCursor.isBeforeFirst());
  assertTrue(timeCursor.isBeforeFirst());
  columnCursor.afterLast();
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(timeCursor.isAfterLast());
  columnCursor.first();
  assertTrue(columnCursor.isFirst());
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isFirst());
  assertTrue(streetCursor.isFirst());
  assertTrue(timeCursor.isFirst());
  columnCursor.last();
  assertTrue(columnCursor.last());
  assertTrue(countryCursor.last());
  assertTrue(cityCursor.last());
  assertTrue(streetCursor.last());
  assertTrue(timeCursor.last());
  columnCursor.setPosition(5);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(24);
  try {
    countryCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.relative(6);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  columnCursor.next();
  columnCursor.next();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.setPosition(4);
  timeCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  countryCursor.next();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.afterLast();
  try {
    streetCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 7);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 2);
  assertTrue(streetCursor.getEdgeStart() == 0);
  assertTrue(streetCursor.getEdgeEnd() == 1);
  assertTrue(timeCursor.getEdgeStart() == 1);
  assertTrue(timeCursor.getEdgeEnd() == 1);
  columnCursor.setPosition(9);
  assertTrue(countryCursor.getEdgeStart() == 8);
  assertTrue(countryCursor.getEdgeEnd() == 11);
  assertTrue(cityCursor.getEdgeStart() == 8);
  assertTrue(cityCursor.getEdgeEnd() == 10);
  assertTrue(streetCursor.getEdgeStart() == 8);
  assertTrue(streetCursor.getEdgeEnd() == 10);
  assertTrue(timeCursor.getEdgeStart() == 9);
  assertTrue(timeCursor.getEdgeEnd() == 9);
  columnCursor.setPosition(23);
  assertTrue(countryCursor.getEdgeStart() == 15);
  assertTrue(countryCursor.getEdgeEnd() == 23);
  assertTrue(cityCursor.getEdgeStart() == 23);
  assertTrue(cityCursor.getEdgeEnd() == 23);
  assertTrue(streetCursor.getEdgeStart() == 23);
  assertTrue(streetCursor.getEdgeEnd() == 23);
  assertTrue(timeCursor.getEdgeStart() == 23);
  assertTrue(timeCursor.getEdgeEnd() == 23);
  columnCursor.setPosition(12);
  assertTrue(countryCursor.getEdgeStart() == 12);
  assertTrue(countryCursor.getEdgeEnd() == 14);
  assertTrue(cityCursor.getEdgeStart() == 12);
  assertTrue(cityCursor.getEdgeEnd() == 13);
  assertTrue(streetCursor.getEdgeStart() == 12);
  assertTrue(streetCursor.getEdgeEnd() == 12);
  assertTrue(timeCursor.getEdgeStart() == 12);
  assertTrue(timeCursor.getEdgeEnd() == 12);
  columnCursor.beforeFirst();
  columnCursor.setPosition(24);
  assertTrue(countryCursor.getEdgeStart() == -1);
  assertTrue(countryCursor.getEdgeEnd() == -1);
  close(dataCursor);
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  columnCursor.beforeFirst();
  assertTrue(countryCursor.isBeforeFirst());
  assertTrue(cityCursor.isBeforeFirst());
  assertTrue(streetCursor.isBeforeFirst());
  assertTrue(timeCursor.isBeforeFirst());
  columnCursor.afterLast();
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(timeCursor.isAfterLast());
  columnCursor.first();
  assertTrue(columnCursor.isFirst());
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isFirst());
  assertTrue(streetCursor.isFirst());
  assertTrue(timeCursor.isFirst());
  columnCursor.last();
  assertTrue(columnCursor.last());
  assertTrue(countryCursor.last());
  assertTrue(cityCursor.last());
  assertTrue(streetCursor.last());
  assertTrue(timeCursor.last());
  columnCursor.setPosition(5);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(24);
  try {
    countryCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.relative(6);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  columnCursor.next();
  columnCursor.next();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.setPosition(4);
  timeCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  countryCursor.next();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.afterLast();
  try {
    streetCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 7);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 2);
  assertTrue(streetCursor.getEdgeStart() == 0);
  assertTrue(streetCursor.getEdgeEnd() == 1);
  assertTrue(timeCursor.getEdgeStart() == 1);
  assertTrue(timeCursor.getEdgeEnd() == 1);
  columnCursor.setPosition(9);
  assertTrue(countryCursor.getEdgeStart() == 8);
  assertTrue(countryCursor.getEdgeEnd() == 11);
  assertTrue(cityCursor.getEdgeStart() == 8);
  assertTrue(cityCursor.getEdgeEnd() == 10);
  assertTrue(streetCursor.getEdgeStart() == 8);
  assertTrue(streetCursor.getEdgeEnd() == 10);
  assertTrue(timeCursor.getEdgeStart() == 9);
  assertTrue(timeCursor.getEdgeEnd() == 9);
  columnCursor.setPosition(23);
  assertTrue(countryCursor.getEdgeStart() == 15);
  assertTrue(countryCursor.getEdgeEnd() == 23);
  assertTrue(cityCursor.getEdgeStart() == 23);
  assertTrue(cityCursor.getEdgeEnd() == 23);
  assertTrue(streetCursor.getEdgeStart() == 23);
  assertTrue(streetCursor.getEdgeEnd() == 23);
  assertTrue(timeCursor.getEdgeStart() == 23);
  assertTrue(timeCursor.getEdgeEnd() == 23);
  columnCursor.setPosition(12);
  assertTrue(countryCursor.getEdgeStart() == 12);
  assertTrue(countryCursor.getEdgeEnd() == 14);
  assertTrue(cityCursor.getEdgeStart() == 12);
  assertTrue(cityCursor.getEdgeEnd() == 13);
  assertTrue(streetCursor.getEdgeStart() == 12);
  assertTrue(streetCursor.getEdgeEnd() == 12);
  assertTrue(timeCursor.getEdgeStart() == 12);
  assertTrue(timeCursor.getEdgeEnd() == 12);
  columnCursor.beforeFirst();
  columnCursor.setPosition(24);
  assertTrue(countryCursor.getEdgeStart() == -1);
  assertTrue(countryCursor.getEdgeEnd() == -1);
  close(dataCursor);
}",0.9995711222301644
68451,"public void testNavigatorOnSubCursor() throws DataException, OLAPException, IOException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  BirtCubeView subCubeView=new BirtCubeView(cubeView.getCubeQueryExecutor(),null);
  columnCursor.beforeFirst();
  rowCursor.next();
  columnCursor.setPosition(8);
  CubeCursor subCursor=subCubeView.getCubeCursor(new StopSign(),""String_Node_Str"",""String_Node_Str"",cubeView);
  EdgeCursor subRowCursor=subCubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor subColumnCursor=subCubeView.getColumnEdgeView().getEdgeCursor();
  subRowCursor.beforeFirst();
  subColumnCursor.beforeFirst();
  assertTrue(subRowCursor.isBeforeFirst());
  assertTrue(subColumnCursor.isBeforeFirst());
  subRowCursor.first();
  subColumnCursor.first();
  assertTrue(subRowCursor.isFirst());
  assertTrue(subColumnCursor.isFirst());
  assertTrue(subRowCursor.getPosition() == 0);
  assertTrue(subColumnCursor.getPosition() == 0);
  subColumnCursor.setPosition(3);
  assertTrue(subColumnCursor.getPosition() == 3);
  subRowCursor.beforeFirst();
  subRowCursor.next();
  subColumnCursor.setPosition(3);
  DimensionCursor c1=(DimensionCursor)subColumnCursor.getDimensionCursor().get(0);
  DimensionCursor c2=(DimensionCursor)subColumnCursor.getDimensionCursor().get(1);
  DimensionCursor c3=(DimensionCursor)subColumnCursor.getDimensionCursor().get(2);
  DimensionCursor c4=(DimensionCursor)subColumnCursor.getDimensionCursor().get(3);
  assertTrue(c1.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c2.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c3.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c4.getObject(0).toString().equals(""String_Node_Str""));
  columnCursor.setPosition(5);
  subCursor=subCubeView.getCubeCursor(new StopSign(),""String_Node_Str"",""String_Node_Str"",cubeView);
  subRowCursor=subCubeView.getRowEdgeView().getEdgeCursor();
  subColumnCursor=subCubeView.getColumnEdgeView().getEdgeCursor();
  subColumnCursor.setPosition(7);
  c1=(DimensionCursor)subColumnCursor.getDimensionCursor().get(0);
  c2=(DimensionCursor)subColumnCursor.getDimensionCursor().get(1);
  c3=(DimensionCursor)subColumnCursor.getDimensionCursor().get(2);
  c4=(DimensionCursor)subColumnCursor.getDimensionCursor().get(3);
  assertTrue(c1.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c2.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c3.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c4.getObject(0).toString().equals(""String_Node_Str""));
  close(dataCursor);
}","public void testNavigatorOnSubCursor() throws DataException, OLAPException, IOException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  BirtCubeView subCubeView=new BirtCubeView(cubeView.getCubeQueryExecutor(),null);
  columnCursor.beforeFirst();
  rowCursor.next();
  columnCursor.setPosition(8);
  CubeCursor subCursor=subCubeView.getCubeCursor(new StopSign(),""String_Node_Str"",""String_Node_Str"",cubeView);
  EdgeCursor subRowCursor=subCubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor subColumnCursor=subCubeView.getColumnEdgeView().getEdgeCursor();
  subRowCursor.beforeFirst();
  subColumnCursor.beforeFirst();
  assertTrue(subRowCursor.isBeforeFirst());
  assertTrue(subColumnCursor.isBeforeFirst());
  subRowCursor.first();
  subColumnCursor.first();
  assertTrue(subRowCursor.isFirst());
  assertTrue(subColumnCursor.isFirst());
  assertTrue(subRowCursor.getPosition() == 0);
  assertTrue(subColumnCursor.getPosition() == 0);
  subColumnCursor.setPosition(3);
  assertTrue(subColumnCursor.getPosition() == 3);
  subRowCursor.beforeFirst();
  subRowCursor.next();
  subColumnCursor.setPosition(3);
  DimensionCursor c1=(DimensionCursor)subColumnCursor.getDimensionCursor().get(0);
  DimensionCursor c2=(DimensionCursor)subColumnCursor.getDimensionCursor().get(1);
  DimensionCursor c3=(DimensionCursor)subColumnCursor.getDimensionCursor().get(2);
  DimensionCursor c4=(DimensionCursor)subColumnCursor.getDimensionCursor().get(3);
  assertTrue(c1.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c2.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c3.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c4.getObject(0).toString().equals(""String_Node_Str""));
  columnCursor.setPosition(5);
  subCursor=subCubeView.getCubeCursor(new StopSign(),""String_Node_Str"",""String_Node_Str"",cubeView);
  subRowCursor=subCubeView.getRowEdgeView().getEdgeCursor();
  subColumnCursor=subCubeView.getColumnEdgeView().getEdgeCursor();
  subColumnCursor.setPosition(7);
  c1=(DimensionCursor)subColumnCursor.getDimensionCursor().get(0);
  c2=(DimensionCursor)subColumnCursor.getDimensionCursor().get(1);
  c3=(DimensionCursor)subColumnCursor.getDimensionCursor().get(2);
  c4=(DimensionCursor)subColumnCursor.getDimensionCursor().get(3);
  assertTrue(c1.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c2.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c3.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c4.getObject(0).toString().equals(""String_Node_Str""));
  close(dataCursor);
}",0.999190501888829
68452,"public void testNavigator() throws DataException, OLAPException, IOException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  columnCursor.beforeFirst();
  String out=""String_Node_Str"";
  while (columnCursor.next()) {
    out+=""String_Node_Str"" + columnCursor.getPosition() + ""String_Node_Str"";
    out+=""String_Node_Str"" + countryCursor.getEdgeStart() + ""String_Node_Str"";
    out+=""String_Node_Str"" + countryCursor.getEdgeEnd() + ""String_Node_Str"";
    out+=""String_Node_Str"" + cityCursor.getEdgeStart() + ""String_Node_Str"";
    out+=""String_Node_Str"" + cityCursor.getEdgeEnd() + ""String_Node_Str"";
    out+=""String_Node_Str"" + streetCursor.getEdgeStart() + ""String_Node_Str"";
    out+=""String_Node_Str"" + streetCursor.getEdgeEnd() + ""String_Node_Str"";
    out+=""String_Node_Str"" + timeCursor.getEdgeStart() + ""String_Node_Str"";
    out+=""String_Node_Str"" + timeCursor.getEdgeEnd() + ""String_Node_Str"";
    out+=""String_Node_Str"";
  }
  System.out.print(out);
  testOut.print(out);
  checkOutputFile();
  close(dataCursor);
}","public void testNavigator() throws DataException, OLAPException, IOException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  columnCursor.beforeFirst();
  String out=""String_Node_Str"";
  while (columnCursor.next()) {
    out+=""String_Node_Str"" + columnCursor.getPosition() + ""String_Node_Str"";
    out+=""String_Node_Str"" + countryCursor.getEdgeStart() + ""String_Node_Str"";
    out+=""String_Node_Str"" + countryCursor.getEdgeEnd() + ""String_Node_Str"";
    out+=""String_Node_Str"" + cityCursor.getEdgeStart() + ""String_Node_Str"";
    out+=""String_Node_Str"" + cityCursor.getEdgeEnd() + ""String_Node_Str"";
    out+=""String_Node_Str"" + streetCursor.getEdgeStart() + ""String_Node_Str"";
    out+=""String_Node_Str"" + streetCursor.getEdgeEnd() + ""String_Node_Str"";
    out+=""String_Node_Str"" + timeCursor.getEdgeStart() + ""String_Node_Str"";
    out+=""String_Node_Str"" + timeCursor.getEdgeEnd() + ""String_Node_Str"";
    out+=""String_Node_Str"";
  }
  System.out.print(out);
  testOut.print(out);
  checkOutputFile();
  close(dataCursor);
}",0.998809051210798
68453,"public void testMirrorOnQuarterDimension() throws DataException {
  ICubeQueryDefinition cqd=createMirroredQueryDefinition(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(new CubeUtility().printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testMirrorOnQuarterDimension() throws DataException {
  ICubeQueryDefinition cqd=createMirroredQueryDefinition(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(new CubeUtility().printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.996993987975952
68454,"public void testMirrorOnYearDimension() throws DataException {
  ICubeQueryDefinition cqd=createMirroredQueryDefinition(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(new CubeUtility().printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testMirrorOnYearDimension() throws DataException {
  ICubeQueryDefinition cqd=createMirroredQueryDefinition(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(new CubeUtility().printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9969849246231156
68455,"public void testMirrorOnMonthDimension() throws DataException {
  ICubeQueryDefinition cqd=createMirroredQueryDefinition(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(new CubeUtility().printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testMirrorOnMonthDimension() throws DataException {
  ICubeQueryDefinition cqd=createMirroredQueryDefinition(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(new CubeUtility().printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9969879518072288
68456,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModelNoBreakHierarchy() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition(""String_Node_Str"",false);
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube2);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModelNoBreakHierarchy() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition(""String_Node_Str"",false);
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube2,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.99873417721519
68457,"public void testCursorOnPageEdge() throws Exception {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinitionWithPage();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube1);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  List pageBindingNames=new ArrayList();
  pageBindingNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongPageEdge(dataCursor,pageBindingNames,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
  this.checkOutputFile();
}","public void testCursorOnPageEdge() throws Exception {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinitionWithPage();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube1,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  List pageBindingNames=new ArrayList();
  pageBindingNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongPageEdge(dataCursor,pageBindingNames,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
  this.checkOutputFile();
}",0.9986853637160386
68458,"/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorOnCountry() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition(""String_Node_Str"",true);
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube1);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List grandBindingNames=new ArrayList();
  grandBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,grandBindingNames));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorOnCountry() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition(""String_Node_Str"",true);
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube1,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List grandBindingNames=new ArrayList();
  grandBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,grandBindingNames));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.998158379373849
68459,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition(""String_Node_Str"",true);
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube1);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition(""String_Node_Str"",true);
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube1,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9987255734919286
68460,"public void testNavigator() throws DataException, OLAPException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition(""String_Node_Str"",true);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor yearCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  DimensionCursor productLineCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  DimensionCursor productNameCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(1);
  columnCursor.beforeFirst();
  assertTrue(columnCursor.isBeforeFirst());
  assertTrue(countryCursor.isBeforeFirst());
  assertTrue(cityCursor.isBeforeFirst());
  assertTrue(streetCursor.isBeforeFirst());
  assertTrue(yearCursor.isBeforeFirst());
  columnCursor.afterLast();
  assertTrue(columnCursor.isAfterLast());
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(yearCursor.isAfterLast());
  columnCursor.first();
  countryCursor.afterLast();
  cityCursor.afterLast();
  streetCursor.afterLast();
  yearCursor.afterLast();
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(yearCursor.isAfterLast());
  columnCursor.first();
  columnCursor.next();
  cityCursor.afterLast();
  streetCursor.afterLast();
  yearCursor.afterLast();
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(yearCursor.isAfterLast());
  columnCursor.first();
  assertTrue(columnCursor.isFirst());
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isFirst());
  assertTrue(streetCursor.isFirst());
  assertTrue(yearCursor.isFirst());
  columnCursor.last();
  assertTrue(columnCursor.last());
  assertTrue(countryCursor.last());
  assertTrue(cityCursor.last());
  assertTrue(streetCursor.last());
  assertTrue(yearCursor.last());
  columnCursor.setPosition(5);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(85);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(220);
  try {
    countryCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.setPosition(225);
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(86);
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.relative(6);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  columnCursor.next();
  columnCursor.next();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.setPosition(80);
  streetCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.setPosition(80);
  columnCursor.next();
  countryCursor.next();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.afterLast();
  try {
    streetCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.next();
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 79);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 19);
  assertTrue(streetCursor.getEdgeStart() == 0);
  assertTrue(streetCursor.getEdgeEnd() == 4);
  assertTrue(yearCursor.getEdgeStart() == 0);
  assertTrue(yearCursor.getEdgeEnd() == 0);
  columnCursor.beforeFirst();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 79);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 19);
  assertTrue(streetCursor.getEdgeStart() == 0);
  assertTrue(streetCursor.getEdgeEnd() == 4);
  assertTrue(yearCursor.getEdgeStart() == 1);
  assertTrue(yearCursor.getEdgeEnd() == 1);
  columnCursor.setPosition(81);
  assertTrue(countryCursor.getEdgeStart() == 80);
  assertTrue(countryCursor.getEdgeEnd() == 119);
  assertTrue(cityCursor.getEdgeStart() == 80);
  assertTrue(cityCursor.getEdgeEnd() == 99);
  assertTrue(streetCursor.getEdgeStart() == 80);
  assertTrue(streetCursor.getEdgeEnd() == 84);
  assertTrue(yearCursor.getEdgeStart() == 81);
  assertTrue(yearCursor.getEdgeEnd() == 81);
  columnCursor.setPosition(146);
  assertTrue(countryCursor.getEdgeStart() == 120);
  assertTrue(countryCursor.getEdgeEnd() == 159);
  assertTrue(cityCursor.getEdgeStart() == 140);
  assertTrue(cityCursor.getEdgeEnd() == 159);
  assertTrue(streetCursor.getEdgeStart() == 145);
  assertTrue(streetCursor.getEdgeEnd() == 149);
  assertTrue(yearCursor.getEdgeStart() == 146);
  assertTrue(yearCursor.getEdgeEnd() == 146);
  columnCursor.beforeFirst();
  columnCursor.setPosition(220);
  assertTrue(countryCursor.getEdgeStart() == -1);
  assertTrue(countryCursor.getEdgeEnd() == -1);
  assertTrue(cityCursor.getEdgeStart() == -1);
  assertTrue(cityCursor.getEdgeEnd() == -1);
  assertTrue(streetCursor.getEdgeStart() == -1);
  assertTrue(streetCursor.getEdgeEnd() == -1);
  assertTrue(yearCursor.getEdgeStart() == -1);
  assertTrue(yearCursor.getEdgeEnd() == -1);
  this.close(dataCursor);
}","public void testNavigator() throws DataException, OLAPException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition(""String_Node_Str"",true);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor yearCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  DimensionCursor productLineCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  DimensionCursor productNameCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(1);
  columnCursor.beforeFirst();
  assertTrue(columnCursor.isBeforeFirst());
  assertTrue(countryCursor.isBeforeFirst());
  assertTrue(cityCursor.isBeforeFirst());
  assertTrue(streetCursor.isBeforeFirst());
  assertTrue(yearCursor.isBeforeFirst());
  columnCursor.afterLast();
  assertTrue(columnCursor.isAfterLast());
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(yearCursor.isAfterLast());
  columnCursor.first();
  countryCursor.afterLast();
  cityCursor.afterLast();
  streetCursor.afterLast();
  yearCursor.afterLast();
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(yearCursor.isAfterLast());
  columnCursor.first();
  columnCursor.next();
  cityCursor.afterLast();
  streetCursor.afterLast();
  yearCursor.afterLast();
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(yearCursor.isAfterLast());
  columnCursor.first();
  assertTrue(columnCursor.isFirst());
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isFirst());
  assertTrue(streetCursor.isFirst());
  assertTrue(yearCursor.isFirst());
  columnCursor.last();
  assertTrue(columnCursor.last());
  assertTrue(countryCursor.last());
  assertTrue(cityCursor.last());
  assertTrue(streetCursor.last());
  assertTrue(yearCursor.last());
  columnCursor.setPosition(5);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(85);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(220);
  try {
    countryCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.setPosition(225);
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(86);
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.relative(6);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  columnCursor.next();
  columnCursor.next();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.setPosition(80);
  streetCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.setPosition(80);
  columnCursor.next();
  countryCursor.next();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.afterLast();
  try {
    streetCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.next();
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 79);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 19);
  assertTrue(streetCursor.getEdgeStart() == 0);
  assertTrue(streetCursor.getEdgeEnd() == 4);
  assertTrue(yearCursor.getEdgeStart() == 0);
  assertTrue(yearCursor.getEdgeEnd() == 0);
  columnCursor.beforeFirst();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 79);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 19);
  assertTrue(streetCursor.getEdgeStart() == 0);
  assertTrue(streetCursor.getEdgeEnd() == 4);
  assertTrue(yearCursor.getEdgeStart() == 1);
  assertTrue(yearCursor.getEdgeEnd() == 1);
  columnCursor.setPosition(81);
  assertTrue(countryCursor.getEdgeStart() == 80);
  assertTrue(countryCursor.getEdgeEnd() == 119);
  assertTrue(cityCursor.getEdgeStart() == 80);
  assertTrue(cityCursor.getEdgeEnd() == 99);
  assertTrue(streetCursor.getEdgeStart() == 80);
  assertTrue(streetCursor.getEdgeEnd() == 84);
  assertTrue(yearCursor.getEdgeStart() == 81);
  assertTrue(yearCursor.getEdgeEnd() == 81);
  columnCursor.setPosition(146);
  assertTrue(countryCursor.getEdgeStart() == 120);
  assertTrue(countryCursor.getEdgeEnd() == 159);
  assertTrue(cityCursor.getEdgeStart() == 140);
  assertTrue(cityCursor.getEdgeEnd() == 159);
  assertTrue(streetCursor.getEdgeStart() == 145);
  assertTrue(streetCursor.getEdgeEnd() == 149);
  assertTrue(yearCursor.getEdgeStart() == 146);
  assertTrue(yearCursor.getEdgeEnd() == 146);
  columnCursor.beforeFirst();
  columnCursor.setPosition(220);
  assertTrue(countryCursor.getEdgeStart() == -1);
  assertTrue(countryCursor.getEdgeEnd() == -1);
  assertTrue(cityCursor.getEdgeStart() == -1);
  assertTrue(cityCursor.getEdgeEnd() == -1);
  assertTrue(streetCursor.getEdgeStart() == -1);
  assertTrue(streetCursor.getEdgeEnd() == -1);
  assertTrue(yearCursor.getEdgeStart() == -1);
  assertTrue(yearCursor.getEdgeEnd() == -1);
  this.close(dataCursor);
}",0.9996324880558618
68461,"public void doSave(DataOutputStream outputStream,DataOutputStream rowLensStream,List<IBinding> cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.resultObjects.length;
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    long offset=4;
    for (int i=0; i < rowCount; i++) {
      IOUtil.writeLong(rowLensStream,offset);
      offset+=ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount,resultSetNameSet);
    }
    dos.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","public void doSave(DataOutputStream outputStream,DataOutputStream rowLensStream,List<IBinding> cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.resultObjects.length;
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    long offset=4;
    for (int i=0; i < rowCount; i++) {
      IOUtil.writeLong(rowLensStream,offset);
      offset+=ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount,resultSetNameSet);
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9881533101045296
68462,"public void doSave(DataOutputStream outputStream,DataOutputStream rowLensStream,List<IBinding> cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.diskBasedResultSet.getCount();
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    int currIndex=this.currResultIndex;
    this.reset();
    long offset=4;
    for (int i=0; i < rowCount; i++) {
      IOUtil.writeLong(rowLensStream,offset);
      offset+=ResultSetUtil.writeResultObject(dos,this.diskBasedResultSet.nextRow(),colCount,resultSetNameSet);
    }
    this.reset();
    this.moveTo(currIndex);
    dos.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","public void doSave(DataOutputStream outputStream,DataOutputStream rowLensStream,List<IBinding> cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.diskBasedResultSet.getCount();
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    int currIndex=this.currResultIndex;
    this.reset();
    long offset=4;
    for (int i=0; i < rowCount; i++) {
      IOUtil.writeLong(rowLensStream,offset);
      offset+=ResultSetUtil.writeResultObject(dos,this.diskBasedResultSet.nextRow(),colCount,resultSetNameSet);
    }
    this.reset();
    this.moveTo(currIndex);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9899705014749264
68463,"/** 
 * @param outputStream
 * @param resultSet
 * @throws IOException
 */
private static void saveOneResultSet(DataOutputStream outputStream,IAggregationResultSet resultSet) throws IOException {
  saveMetaData(outputStream,resultSet);
  saveAggregationRowSet(outputStream,resultSet);
  outputStream.close();
}","/** 
 * @param outputStream
 * @param resultSet
 * @throws IOException
 */
private static void saveOneResultSet(DataOutputStream outputStream,IAggregationResultSet resultSet) throws IOException {
  saveMetaData(outputStream,resultSet);
  saveAggregationRowSet(outputStream,resultSet);
}",0.959731543624161
68464,"/** 
 * Gets the BIRT resource path
 * @return
 * @throws URISyntaxException
 */
public URI getReportDesignPath(){
  if (Utility.getReportModuleHandle() == null || Utility.getReportModuleHandle().getSystemId() == null) {
    return null;
  }
  try {
    return new URI(Utility.getReportModuleHandle().getSystemId().getPath());
  }
 catch (  URISyntaxException e) {
  }
  return null;
}","/** 
 * Gets the BIRT resource path
 * @return
 * @throws URISyntaxException
 */
public URI getReportDesignPath(){
  if (Utility.getReportModuleHandle() == null || Utility.getReportModuleHandle().getSystemId() == null) {
    return null;
  }
  try {
    return new URI(encode(Utility.getReportModuleHandle().getSystemId().getPath()));
  }
 catch (  URISyntaxException e) {
    return null;
  }
}",0.9487179487179488
68465,"/** 
 * Gets the report design file path
 * @return
 */
public URI getBIRTResourcePath(){
  try {
    return new URI(ReportPlugin.getDefault().getResourceFolder());
  }
 catch (  URISyntaxException e) {
  }
  return null;
}","/** 
 * Gets the report design file path
 * @return
 */
public URI getBIRTResourcePath(){
  try {
    return new URI(encode(ReportPlugin.getDefault().getResourceFolder()));
  }
 catch (  URISyntaxException e) {
    return null;
  }
}",0.912280701754386
68466,"/** 
 * Create query definition by related report item handle.
 * @param parent
 * @return query definition
 * @throws BirtException
 */
public IDataQueryDefinition createQuery(IDataQueryDefinition parent) throws BirtException {
  BaseQueryDefinition query=createQueryDefinition(parent);
  if (query == null) {
    return null;
  }
  List<GroupHandle> groups=getGroups();
  for (Iterator<GroupHandle> iter=groups.iterator(); iter.hasNext(); ) {
    handleGroup(iter.next(),query,modelAdapter);
  }
  if (ChartReportItemUtil.isChartInheritGroups(fReportItemHandle)) {
    ListingHandle table=null;
    DesignElementHandle container=fReportItemHandle.getContainer();
    while (container != null) {
      if (container instanceof ListingHandle) {
        table=(ListingHandle)container;
        break;
      }
      container=container.getContainer();
    }
    if (table != null) {
      Iterator<ComputedColumnHandle> iterator=table.columnBindingsIterator();
      while (iterator.hasNext()) {
        ComputedColumnHandle binding=iterator.next();
        if (binding.getAggregateFunction() != null) {
          addColumnBinding(query,binding);
        }
      }
    }
  }
  return query;
}","/** 
 * Create query definition by related report item handle.
 * @param parent
 * @return query definition
 * @throws BirtException
 */
public IDataQueryDefinition createQuery(IDataQueryDefinition parent) throws BirtException {
  BaseQueryDefinition query=createQueryDefinition(parent);
  if (query == null) {
    return null;
  }
  List<GroupHandle> groups=getGroups();
  for (Iterator<GroupHandle> iter=groups.iterator(); iter.hasNext(); ) {
    handleGroup(iter.next(),query,modelAdapter);
  }
  if (ChartReportItemUtil.isChartInheritGroups(fReportItemHandle)) {
    ListingHandle table=null;
    DesignElementHandle container=fReportItemHandle.getContainer();
    while (container != null) {
      if (container instanceof ListingHandle) {
        table=(ListingHandle)container;
        break;
      }
      container=container.getContainer();
    }
    if (table != null) {
      Iterator<ComputedColumnHandle> iterator=table.columnBindingsIterator();
      while (iterator.hasNext()) {
        ComputedColumnHandle binding=iterator.next();
        if (binding.getAggregateFunction() != null) {
          addAggregateBindings(query,binding,table);
        }
      }
    }
  }
  return query;
}",0.990794979079498
68467,"public void seek(int index) throws IOException {
  if (index >= length) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + index + ""String_Node_Str""+ length);
  }
  if (index >= aggregationResultRow.size()) {
    for (int i=0; i <= index - aggregationResultRow.size(); i++) {
      aggregationResultRow.add(AggregationResultSetSaveUtil.loadAggregationRow(inputStream));
    }
  }
  currentPosition=index;
  resultObject=(AggregationResultRow)aggregationResultRow.get(index);
}","public void seek(int index) throws IOException {
  if (index >= length) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + index + ""String_Node_Str""+ length);
  }
  currentPosition=index;
  resultObject=(AggregationResultRow)aggregationResultRow.get(index);
}",0.71334214002642
68468,"public void close() throws IOException {
  inputStream.close();
}","public void close() throws IOException {
  aggregationResultRow.close();
}",0.8201438848920863
68469,"CachedAggregationResultSet(DataInputStream inputStream,int length,DimLevel[] levels,int[] sortTypes,String[][] keyNames,String[][] attributeNames,int[][] keyDataTypes,int[][] attributeDataTypes,String[] aggregationNames,int[] aggregationDataType) throws IOException {
  Object[] params={inputStream,new Integer(length),levels,sortTypes,keyNames,attributeNames,keyDataTypes,attributeDataTypes,aggregationNames,aggregationDataType};
  logger.entering(CachedAggregationResultSet.class.getName(),""String_Node_Str"",params);
  this.inputStream=inputStream;
  this.currentPosition=0;
  this.length=length;
  this.levels=levels;
  this.sortType=sortTypes;
  this.keyNames=keyNames;
  this.attributeNames=attributeNames;
  this.keyDataTypes=keyDataTypes;
  this.attributeDataTypes=attributeDataTypes;
  this.aggregationDataType=aggregationDataType;
  this.aggregationResultNameMap=new HashMap();
  if (aggregationNames != null) {
    this.aggregationNames=new String[aggregationNames.length];
    for (int i=0; i < aggregationNames.length; i++) {
      this.aggregationNames[i]=aggregationNames[i];
      aggregationResultNameMap.put(aggregationNames[i],new Integer(i));
    }
  }
  aggregationResultRow=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  if (this.length > 0)   seek(0);
  logger.exiting(CachedAggregationResultSet.class.getName(),""String_Node_Str"");
}","CachedAggregationResultSet(DataInputStream inputStream,int length,DimLevel[] levels,int[] sortTypes,String[][] keyNames,String[][] attributeNames,int[][] keyDataTypes,int[][] attributeDataTypes,String[] aggregationNames,int[] aggregationDataType) throws IOException {
  Object[] params={inputStream,new Integer(length),levels,sortTypes,keyNames,attributeNames,keyDataTypes,attributeDataTypes,aggregationNames,aggregationDataType};
  logger.entering(CachedAggregationResultSet.class.getName(),""String_Node_Str"",params);
  this.currentPosition=0;
  this.length=length;
  this.levels=levels;
  this.sortType=sortTypes;
  this.keyNames=keyNames;
  this.attributeNames=attributeNames;
  this.keyDataTypes=keyDataTypes;
  this.attributeDataTypes=attributeDataTypes;
  this.aggregationDataType=aggregationDataType;
  this.aggregationResultNameMap=new HashMap();
  if (aggregationNames != null) {
    this.aggregationNames=new String[aggregationNames.length];
    for (int i=0; i < aggregationNames.length; i++) {
      this.aggregationNames[i]=aggregationNames[i];
      aggregationResultNameMap.put(aggregationNames[i],new Integer(i));
    }
  }
  aggregationResultRow=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  for (int i=0; i < length; i++) {
    aggregationResultRow.add(AggregationResultSetSaveUtil.loadAggregationRow(inputStream));
  }
  if (this.length > 0)   seek(0);
  logger.exiting(CachedAggregationResultSet.class.getName(),""String_Node_Str"");
}",0.901690238013108
68470,"public void clear() throws IOException {
  inputStream.close();
  length=0;
}","public void clear() throws IOException {
  aggregationResultRow.clear();
  length=0;
}",0.8220858895705522
68471,"/** 
 * Adds reference bindings of aggregate binding into query.  
 * @param qd
 * @param table
 * @param expression
 * @throws BirtException
 * @throws ChartException
 */
private void addReferenceBindings(IBaseQueryDefinition qd,ListingHandle table,String expression) throws BirtException, ChartException {
  List<IColumnBinding> exprs=ExpressionUtil.extractColumnExpressions(expression);
  for (Iterator<IColumnBinding> iter=exprs.iterator(); iter.hasNext(); ) {
    IColumnBinding cb=iter.next();
    String cname=cb.getResultSetColumnName();
    for (Iterator<ComputedColumnHandle> cbIter=table.columnBindingsIterator(); cbIter.hasNext(); ) {
      ComputedColumnHandle cch=cbIter.next();
      if (cch.getName().equals(cname)) {
        if (cch.getAggregateFunction() == null && !qd.getBindings().containsKey(cname)) {
          addColumnBinding(qd,cch);
          addReferenceBindings(qd,table,cch.getExpression());
        }
        break;
      }
    }
  }
}","/** 
 * Adds reference bindings of aggregate binding into query.  
 * @param qd
 * @param table
 * @param expression
 * @throws BirtException
 * @throws ChartException
 */
private void addReferenceBindings(IBaseQueryDefinition qd,ListingHandle table,String expression) throws BirtException, ChartException {
  List<IColumnBinding> exprs=ExpressionUtil.extractColumnExpressions(expression);
  for (Iterator<IColumnBinding> iter=exprs.iterator(); iter.hasNext(); ) {
    IColumnBinding cb=iter.next();
    String cname=cb.getResultSetColumnName();
    for (Iterator<ComputedColumnHandle> cbIter=table.columnBindingsIterator(); cbIter.hasNext(); ) {
      ComputedColumnHandle cch=cbIter.next();
      if (cch.getName().equals(cname)) {
        if (cch.getAggregateFunction() == null && !qd.getBindings().containsKey(cname)) {
          addColumnBinding(qd,cch);
          ScriptExpression se=ChartReportItemUtil.newExpression(modelAdapter,cch);
          addReferenceBindings(qd,table,se.getText());
        }
        break;
      }
    }
  }
}",0.9422310756972112
68472,"/** 
 * Returns the DPI info of given image if applicable.
 * @param imageStream
 * @return the DPI values in format of {hdpi, vdpi}.
 */
public static int[] getImageResolution(InputStream imageStream){
  int[] dpi={0,0};
  if (imageStream != null) {
    try {
      ImageInputStream iis=ImageIO.createImageInputStream(imageStream);
      Iterator<ImageReader> i=ImageIO.getImageReaders(iis);
      ImageReader r=i.next();
      r.setInput(iis);
      r.read(0);
      IIOMetadata meta=r.getImageMetadata(0);
      if (meta != null) {
        double mm2inch=25.4;
        NodeList lst;
        Element node=(Element)meta.getAsTree(""String_Node_Str"");
        lst=node.getElementsByTagName(""String_Node_Str"");
        if (lst != null && lst.getLength() == 1) {
          dpi[0]=(int)(mm2inch / Float.parseFloat(((Element)lst.item(0)).getAttribute(""String_Node_Str"")));
        }
        lst=node.getElementsByTagName(""String_Node_Str"");
        if (lst != null && lst.getLength() == 1) {
          dpi[1]=(int)(mm2inch / Float.parseFloat(((Element)lst.item(0)).getAttribute(""String_Node_Str"")));
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return dpi;
}","/** 
 * Returns the DPI info of given image if applicable.
 * @param imageStream
 * @return the DPI values in format of {hdpi, vdpi}.
 */
public static int[] getImageResolution(InputStream imageStream){
  int[] dpi={0,0};
  if (imageStream != null) {
    try {
      ImageInputStream iis=ImageIO.createImageInputStream(imageStream);
      Iterator<ImageReader> i=ImageIO.getImageReaders(iis);
      ImageReader r=i.next();
      r.setInput(iis);
      r.read(0);
      IIOMetadata meta=r.getImageMetadata(0);
      if (meta != null) {
        double mm2inch=25.4;
        NodeList lst;
        Element node=(Element)meta.getAsTree(""String_Node_Str"");
        lst=node.getElementsByTagName(""String_Node_Str"");
        if (lst != null && lst.getLength() == 1) {
          dpi[0]=(int)(mm2inch / Float.parseFloat(((Element)lst.item(0)).getAttribute(""String_Node_Str"")));
        }
        lst=node.getElementsByTagName(""String_Node_Str"");
        if (lst != null && lst.getLength() == 1) {
          dpi[1]=(int)(mm2inch / Float.parseFloat(((Element)lst.item(0)).getAttribute(""String_Node_Str"")));
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return dpi;
}",0.999165971643036
68473,"/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName()))           return null;
        }
        DesignElementFactory factory=DesignElementFactory.getInstance(tableHandle.getModuleHandle());
        GroupHandle groupHandle=factory.newTableGroup();
        int columnCount=tableHandle.getColumnCount();
        groupHandle.getHeader().add(factory.newTableRow(columnCount));
        groupHandle.getFooter().add(factory.newTableRow(columnCount));
        groupHandle.setName(model.getColumnName());
        Expression newKeyExpr=new Expression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)),ExpressionType.JAVASCRIPT);
        groupHandle.setExpressionProperty(IGroupElementModel.KEY_EXPR_PROP,newKeyExpr);
        TOC toc=StructureFactory.createTOC();
        toc.setExpression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)));
        groupHandle.addTOC(toc);
        slotHandle.add(groupHandle,slotHandle.getCount());
        RowHandle rowHandle=((RowHandle)groupHandle.getHeader().get(0));
        CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
        cellHandle.getContent().add(dataHandle);
        return groupHandle;
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)) || DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        if (target instanceof CellHandle && ((CellHandle)target).getContainer().getContainer() instanceof GroupHandle) {
          CellHandle cellHandle=(CellHandle)target;
          GroupHandle group=(GroupHandle)cellHandle.getContainer().getContainer();
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,true);
          binding.setAggregateOn(group.getName());
          if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)))           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
 else           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
          binding.setExpression(ExpressionUtil.createJSRowExpression(model.getColumnName()));
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(container,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      DEUtil.getBindingHolder(container).addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}","/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName()))           return null;
        }
        DesignElementFactory factory=DesignElementFactory.getInstance(tableHandle.getModuleHandle());
        GroupHandle groupHandle=factory.newTableGroup();
        int columnCount=tableHandle.getColumnCount();
        groupHandle.getHeader().add(factory.newTableRow(columnCount));
        groupHandle.getFooter().add(factory.newTableRow(columnCount));
        groupHandle.setName(model.getColumnName());
        Expression newKeyExpr=new Expression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)),ExpressionType.JAVASCRIPT);
        groupHandle.setExpressionProperty(IGroupElementModel.KEY_EXPR_PROP,newKeyExpr);
        TOC toc=StructureFactory.createTOC();
        toc.setExpression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)));
        groupHandle.addTOC(toc);
        slotHandle.add(groupHandle,slotHandle.getCount());
        RowHandle rowHandle=((RowHandle)groupHandle.getHeader().get(0));
        CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
        cellHandle.getContent().add(dataHandle);
        return groupHandle;
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)) || DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        if (target instanceof CellHandle && ((CellHandle)target).getContainer().getContainer() instanceof GroupHandle) {
          CellHandle cellHandle=(CellHandle)target;
          GroupHandle group=(GroupHandle)cellHandle.getContainer().getContainer();
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,true);
          binding.setAggregateOn(group.getName());
          if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)))           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
 else           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
          binding.setExpression(ExpressionUtil.createJSRowExpression(model.getColumnName()));
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        ComputedColumn bindingColumn=createBindingColumn(target,dataHandle,model);
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        ComputedColumn bindingColumn=createBindingColumn(target,container,model);
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      container=DEUtil.getBindingHolder(container);
      ComputedColumn bindingColumn=createBindingColumn(target,container,model);
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        ComputedColumn bindingColumn=createBindingColumn(target,listingHandle,model);
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}",0.7647369115125939
68474,"/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName()))           return null;
        }
        DesignElementFactory factory=DesignElementFactory.getInstance(tableHandle.getModuleHandle());
        GroupHandle groupHandle=factory.newTableGroup();
        int columnCount=tableHandle.getColumnCount();
        groupHandle.getHeader().add(factory.newTableRow(columnCount));
        groupHandle.getFooter().add(factory.newTableRow(columnCount));
        groupHandle.setName(model.getColumnName());
        Expression newKeyExpr=new Expression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)),ExpressionType.JAVASCRIPT);
        groupHandle.setExpressionProperty(IGroupElementModel.KEY_EXPR_PROP,newKeyExpr);
        TOC toc=StructureFactory.createTOC();
        toc.setExpression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)));
        groupHandle.addTOC(toc);
        slotHandle.add(groupHandle,slotHandle.getCount());
        RowHandle rowHandle=((RowHandle)groupHandle.getHeader().get(0));
        CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
        cellHandle.getContent().add(dataHandle);
        return groupHandle;
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)) || DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        if (target instanceof CellHandle && ((CellHandle)target).getContainer().getContainer() instanceof GroupHandle) {
          CellHandle cellHandle=(CellHandle)target;
          GroupHandle group=(GroupHandle)cellHandle.getContainer().getContainer();
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,true);
          binding.setAggregateOn(group.getName());
          if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)))           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
 else           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
          binding.setExpression(ExpressionUtil.createJSRowExpression(model.getColumnName()));
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      DEUtil.getBindingHolder(container).addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}","/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName()))           return null;
        }
        DesignElementFactory factory=DesignElementFactory.getInstance(tableHandle.getModuleHandle());
        GroupHandle groupHandle=factory.newTableGroup();
        int columnCount=tableHandle.getColumnCount();
        groupHandle.getHeader().add(factory.newTableRow(columnCount));
        groupHandle.getFooter().add(factory.newTableRow(columnCount));
        groupHandle.setName(model.getColumnName());
        Expression newKeyExpr=new Expression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)),ExpressionType.JAVASCRIPT);
        groupHandle.setExpressionProperty(IGroupElementModel.KEY_EXPR_PROP,newKeyExpr);
        TOC toc=StructureFactory.createTOC();
        toc.setExpression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)));
        groupHandle.addTOC(toc);
        slotHandle.add(groupHandle,slotHandle.getCount());
        RowHandle rowHandle=((RowHandle)groupHandle.getHeader().get(0));
        CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
        cellHandle.getContent().add(dataHandle);
        return groupHandle;
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)) || DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        if (target instanceof CellHandle && ((CellHandle)target).getContainer().getContainer() instanceof GroupHandle) {
          CellHandle cellHandle=(CellHandle)target;
          GroupHandle group=(GroupHandle)cellHandle.getContainer().getContainer();
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,true);
          binding.setAggregateOn(group.getName());
          if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)))           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
 else           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
          binding.setExpression(ExpressionUtil.createJSRowExpression(model.getColumnName()));
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(container,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      DEUtil.getBindingHolder(container).addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}",0.9982208666920828
68475,"public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartCubeUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  ReportDataServiceProvider dataProvider=null;
  ChartLivePreviewThread livePreviewThread=null;
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemConstants.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : cm.copyInstance();
    if (cmClone != null) {
      maintainCompatibility(cmClone);
    }
    final Object[] applyData=new Object[3];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    dataProvider=new ReportDataServiceProvider(extendedHandle);
    ChartReportItemUIFactory uiFactory=ChartReportItemUIFactory.instance();
    IChartDataSheet dataSheet=uiFactory.createDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=uiFactory.createWizardContext(cmClone,this,dataProvider,dataSheet);
    this.wizardContext=context;
    livePreviewThread=new ChartLivePreviewThread(dataProvider);
    livePreviewThread.start();
    context.setLivePreviewThread(livePreviewThread);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=context.getModel().copyInstance();
        applyData[1]=context.getOutputFormat();
        applyData[2]=context.isInheritColumnsOnly();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemConstants.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else {
        context.setOutputFormat((String)of);
      }
    }
    context.setInheritColumnsOnly(extendedHandle.getBooleanProperty(ChartReportItemConstants.PROPERTY_INHERIT_COLUMNS));
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartAdapter.beginIgnoreNotifications();
    if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      dataProvider.update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
    }
    ChartWizard.clearExceptions();
    if (eih.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_NONE && eih.getContainer() instanceof ModuleHandle) {
      String[] dataSets=dataProvider.getAllDataSets();
      if (dataProvider.getAllDataCubes().length == 0 && dataSets.length == 1) {
        dataProvider.setDataSet(dataSets[0]);
      }
    }
    context.setActionEvaluator(new BIRTActionEvaluator());
    ChartAdapter.endIgnoreNotifications();
    isChartWizardOpen=true;
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    isChartWizardOpen=false;
    if (contextResult != null && contextResult.getModel() != null) {
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat(),contextResult.isInheritColumnsOnly());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartCubeUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1],(Boolean)applyData[2]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartCubeUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
    isChartWizardOpen=false;
    if (livePreviewThread != null) {
      livePreviewThread.end();
    }
  }
}","public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartCubeUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  ReportDataServiceProvider dataProvider=null;
  ChartLivePreviewThread livePreviewThread=null;
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemConstants.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : cm.copyInstance();
    if (cmClone != null) {
      maintainCompatibility(cmClone);
    }
    final Object[] applyData=new Object[3];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    dataProvider=new ReportDataServiceProvider(extendedHandle);
    ChartReportItemUIFactory uiFactory=ChartReportItemUIFactory.instance();
    IChartDataSheet dataSheet=uiFactory.createDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=uiFactory.createWizardContext(cmClone,this,dataProvider,dataSheet);
    this.wizardContext=context;
    livePreviewThread=new ChartLivePreviewThread(dataProvider);
    livePreviewThread.start();
    context.setLivePreviewThread(livePreviewThread);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=context.getModel().copyInstance();
        applyData[1]=context.getOutputFormat();
        applyData[2]=context.isInheritColumnsOnly();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemConstants.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else {
        context.setOutputFormat((String)of);
      }
    }
    context.setInheritColumnsOnly(extendedHandle.getBooleanProperty(ChartReportItemConstants.PROPERTY_INHERIT_COLUMNS));
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartAdapter.beginIgnoreNotifications();
    if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      dataProvider.update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
    }
    ChartWizard.clearExceptions();
    context.setActionEvaluator(new BIRTActionEvaluator());
    ChartAdapter.endIgnoreNotifications();
    isChartWizardOpen=true;
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    isChartWizardOpen=false;
    if (contextResult != null && contextResult.getModel() != null) {
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat(),contextResult.isInheritColumnsOnly());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartCubeUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1],(Boolean)applyData[2]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartCubeUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
    isChartWizardOpen=false;
    if (livePreviewThread != null) {
      livePreviewThread.end();
    }
  }
}",0.9739528047685148
68476,"public void setDataSet(String datasetName){
  try {
    boolean isPreviousDataBindingReference=false;
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      isPreviousDataBindingReference=true;
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setCube(null);
    if (datasetName == null) {
      if (getDataSet() != null) {
        clearBindings();
      }
      itemHandle.setDataSet(null);
    }
 else {
      DataSetHandle dataset=getReportDesignHandle().findDataSet(datasetName);
      if (isPreviousDataBindingReference || itemHandle.getDataSet() != dataset) {
        itemHandle.setDataSet(dataset);
        clearBindings();
        generateBindings(generateComputedColumns(dataset));
      }
    }
    ChartWizard.removeException(ChartWizard.RepDSProvider_Set_ID);
  }
 catch (  SemanticException e) {
    ChartWizard.showException(ChartWizard.RepDSProvider_Set_ID,e.getLocalizedMessage());
  }
}","public void setDataSet(String datasetName){
  try {
    boolean isPreviousDataBindingReference=false;
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      isPreviousDataBindingReference=true;
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setCube(null);
    if (datasetName == null) {
      if (getDataSet() != null) {
        clearBindings();
      }
      itemHandle.setDataSet(null);
    }
 else {
      DataSetHandle dataset=getReportDesignHandle().findDataSet(datasetName);
      if (isPreviousDataBindingReference || itemHandle.getDataSet() != dataset) {
        itemHandle.setDataSet(dataset);
        clearBindings();
        generateBindings(generateComputedColumns(dataset));
        List<SeriesDefinition> sds=ChartUIUtil.getBaseSeriesDefinitions(context.getModel());
        if (sds != null && sds.size() > 0) {
          SeriesDefinition base=sds.get(0);
          if (!ChartUIConstants.TYPE_GANTT.equals(context.getModel().getType())) {
            if (base.getGrouping() == null) {
              base.setGrouping(SeriesGroupingImpl.create());
            }
            base.getGrouping().setEnabled(true);
          }
        }
      }
    }
    ChartWizard.removeException(ChartWizard.RepDSProvider_Set_ID);
  }
 catch (  SemanticException e) {
    ChartWizard.showException(ChartWizard.RepDSProvider_Set_ID,e.getLocalizedMessage());
  }
}",0.8091858037578288
68477,"public Composite createDataSelector(Composite parent){
  Composite cmpDataSet=ChartUIUtil.createCompositeWrapper(parent);
{
    cmpDataSet.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label label=new Label(cmpDataSet,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  Composite cmpDetail=new Composite(cmpDataSet,SWT.NONE);
{
    GridLayout gridLayout=new GridLayout(2,false);
    gridLayout.marginWidth=10;
    gridLayout.marginHeight=0;
    cmpDetail.setLayout(gridLayout);
    cmpDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Composite compRadios=ChartUIUtil.createCompositeWrapper(cmpDetail);
{
    GridData gd=new GridData();
    gd.verticalSpan=2;
    compRadios.setLayoutData(gd);
  }
  btnInherit=new Button(compRadios,SWT.RADIO);
  btnInherit.setText(Messages.getString(""String_Node_Str""));
  btnInherit.addListener(SWT.Selection,this);
  btnUseData=new Button(compRadios,SWT.RADIO);
  btnUseData.setText(Messages.getString(""String_Node_Str""));
  btnUseData.addListener(SWT.Selection,this);
  cmbInherit=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbInherit.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbInherit.addListener(SWT.Selection,this);
  cmbDataItems=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbDataItems.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbDataItems.addListener(SWT.Selection,this);
  cmbDataItems.setVisibleItemCount(30);
  initDataSelector();
  updatePredefinedQueries();
  checkColBindingForCube();
  if (dataProvider.checkState(IDataServiceProvider.IN_MULTI_VIEWS)) {
    autoSelect(false);
  }
  return cmpDataSet;
}","public Composite createDataSelector(Composite parent){
  if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_NONE && itemHandle.getContainer() instanceof ModuleHandle) {
    String[] dataSets=dataProvider.getAllDataSets();
    if (dataProvider.getAllDataCubes().length == 0 && dataSets.length == 1) {
      dataProvider.setDataSet(dataSets[0]);
    }
  }
  Composite cmpDataSet=ChartUIUtil.createCompositeWrapper(parent);
{
    cmpDataSet.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label label=new Label(cmpDataSet,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  Composite cmpDetail=new Composite(cmpDataSet,SWT.NONE);
{
    GridLayout gridLayout=new GridLayout(2,false);
    gridLayout.marginWidth=10;
    gridLayout.marginHeight=0;
    cmpDetail.setLayout(gridLayout);
    cmpDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Composite compRadios=ChartUIUtil.createCompositeWrapper(cmpDetail);
{
    GridData gd=new GridData();
    gd.verticalSpan=2;
    compRadios.setLayoutData(gd);
  }
  btnInherit=new Button(compRadios,SWT.RADIO);
  btnInherit.setText(Messages.getString(""String_Node_Str""));
  btnInherit.addListener(SWT.Selection,this);
  btnUseData=new Button(compRadios,SWT.RADIO);
  btnUseData.setText(Messages.getString(""String_Node_Str""));
  btnUseData.addListener(SWT.Selection,this);
  cmbInherit=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbInherit.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbInherit.addListener(SWT.Selection,this);
  cmbDataItems=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbDataItems.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbDataItems.addListener(SWT.Selection,this);
  cmbDataItems.setVisibleItemCount(30);
  initDataSelector();
  updatePredefinedQueries();
  checkColBindingForCube();
  if (dataProvider.checkState(IDataServiceProvider.IN_MULTI_VIEWS)) {
    autoSelect(false);
  }
  return cmpDataSet;
}",0.91577013907111
68478,"public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataCube(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(ChartUIUtil.getText(cmbDataItems))) {
return;
}
getDataServiceProvider().setDataSet(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
switchDataSet(ChartUIUtil.getText(cmbDataItems));
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (ChartUIUtil.getText(cmbDataItems).equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(ChartUIUtil.getText(cmbDataItems));
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=ChartUIUtil.getText(cmbDataItems);
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
String[] datasets=getDataServiceProvider().getAllDataSets();
currentData=datasets[datasets.length - 1];
getDataServiceProvider().setDataSet(currentData);
cmbDataItems.setText(currentData);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
int count=getDataServiceProvider().getAllDataCubes().length;
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
String[] datacubes=getDataServiceProvider().getAllDataCubes();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
if (datacubes.length == count) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
currentData=datacubes[datacubes.length - 1];
getDataServiceProvider().setDataCube(currentData);
cmbDataItems.setText(currentData);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
if (event.widget == btnInherit || event.widget == cmbDataItems) {
List<SeriesDefinition> sds=ChartUIUtil.getBaseSeriesDefinitions(getChartModel());
if (sds != null && sds.size() > 0) {
SeriesDefinition base=sds.get(0);
if (selectDataTypes.get(cmbDataItems.getSelectionIndex()).intValue() == SELECT_DATA_SET && !ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() == null) {
base.setGrouping(SeriesGroupingImpl.create());
}
base.getGrouping().setEnabled(true);
}
 else if (ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() != null) {
base.getGrouping().setEnabled(false);
}
}
}
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataCube(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(ChartUIUtil.getText(cmbDataItems))) {
return;
}
getDataServiceProvider().setDataSet(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
switchDataSet(ChartUIUtil.getText(cmbDataItems));
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (ChartUIUtil.getText(cmbDataItems).equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(ChartUIUtil.getText(cmbDataItems));
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=ChartUIUtil.getText(cmbDataItems);
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
String[] datasets=getDataServiceProvider().getAllDataSets();
currentData=datasets[datasets.length - 1];
getDataServiceProvider().setDataSet(currentData);
cmbDataItems.setText(currentData);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
int count=getDataServiceProvider().getAllDataCubes().length;
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
String[] datacubes=getDataServiceProvider().getAllDataCubes();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
if (datacubes.length == count) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
currentData=datacubes[datacubes.length - 1];
getDataServiceProvider().setDataCube(currentData);
cmbDataItems.setText(currentData);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}",0.9566775028196112
68479,"private void updateQuery(String queryType,Query query,String expr,SeriesDefinition seriesDefinition){
  String actualExpr=expr;
  if (dataProvider.checkState(IDataServiceProvider.SHARE_QUERY) || dataProvider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS)) {
    boolean isGroupOrAggr=false;
    Object obj=getCurrentColumnHeadObject();
    if (obj instanceof ColumnBindingInfo) {
      ColumnBindingInfo cbi=(ColumnBindingInfo)obj;
      int type=cbi.getColumnType();
      if (type == ColumnBindingInfo.GROUP_COLUMN || type == ColumnBindingInfo.AGGREGATE_COLUMN) {
        actualExpr=cbi.getExpression();
        isGroupOrAggr=true;
      }
    }
    if (seriesDefinition != null && (queryType.equals(ChartUIConstants.QUERY_CATEGORY) || queryType.equals(ChartUIConstants.QUERY_VALUE))) {
      seriesDefinition.getGrouping().setEnabled(isGroupOrAggr);
    }
  }
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!dataProvider.checkState(IDataServiceProvider.SHARE_QUERY) && dataProvider.checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (dataProvider.getDataType(actualExpr) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
  query.setDefinition(actualExpr);
}","private void updateQuery(String queryType,Query query,String expr,SeriesDefinition seriesDefinition){
  String actualExpr=expr;
  if (dataProvider.checkState(IDataServiceProvider.SHARE_QUERY) || dataProvider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS)) {
    boolean isGroupOrAggr=false;
    Object obj=getCurrentColumnHeadObject();
    if (obj instanceof ColumnBindingInfo) {
      ColumnBindingInfo cbi=(ColumnBindingInfo)obj;
      int type=cbi.getColumnType();
      if (type == ColumnBindingInfo.GROUP_COLUMN || type == ColumnBindingInfo.AGGREGATE_COLUMN) {
        actualExpr=cbi.getExpression();
        isGroupOrAggr=true;
      }
    }
    if (seriesDefinition != null && (queryType.equals(ChartUIConstants.QUERY_CATEGORY) || queryType.equals(ChartUIConstants.QUERY_VALUE))) {
      seriesDefinition.getGrouping().setEnabled(isGroupOrAggr);
    }
  }
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!dataProvider.checkState(IDataServiceProvider.SHARE_QUERY) && dataProvider.checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (dataProvider.getDataType(actualExpr) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
 else   if (ChartUIConstants.QUERY_CATEGORY.equals(queryType)) {
    DataType type=context.getDataServiceProvider().getDataType(expr);
    ChartAdapter.beginIgnoreNotifications();
    if (seriesDefinition.getGrouping() == null) {
      query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
    }
    seriesDefinition.getGrouping().setGroupType(type);
    if (type == DataType.DATE_TIME_LITERAL) {
      seriesDefinition.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
    }
    ChartAdapter.endIgnoreNotifications();
  }
  query.setDefinition(actualExpr);
}",0.8362445414847162
68480,"private void setQueryExpression(String expression,boolean isSharing){
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
  if (query != null) {
    if (isSharing) {
      query.setDefinition(expression);
    }
 else {
      query.setDefinition(btnBuilder.getExpression());
    }
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}","private void setQueryExpression(String expression,boolean isSharing){
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
 else   if (ChartUIConstants.QUERY_CATEGORY.equals(queryType)) {
    DataType type=context.getDataServiceProvider().getDataType(expression);
    ChartAdapter.beginIgnoreNotifications();
    if (seriesdefinition.getGrouping() == null) {
      query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
    }
    seriesdefinition.getGrouping().setGroupType(type);
    if (type == DataType.DATE_TIME_LITERAL) {
      seriesdefinition.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
    }
    ChartAdapter.endIgnoreNotifications();
  }
  if (query != null) {
    if (isSharing) {
      query.setDefinition(expression);
    }
 else {
      query.setDefinition(btnBuilder.getExpression());
    }
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}",0.8050668543279381
68481,"public AbstractParseState startElement(String tagName){
  ElementDefn defn=(ElementDefn)getElement().getDefn();
  if (DesignSchemaConstants.OVERRIDDEN_VALUES_TAG.equalsIgnoreCase(tagName)) {
    if ((defn.getSlotCount() > 0 || getElement().getContents().size() > 0) && getElement().canContainVirtualElements()) {
      return new OverriddenValuesState((ModuleParserHandler)getHandler(),getElement(),this);
    }
  }
  return super.startElement(tagName);
}","public AbstractParseState startElement(String tagName){
  ElementDefn defn=(ElementDefn)getElement().getDefn();
  if (DesignSchemaConstants.OVERRIDDEN_VALUES_TAG.equalsIgnoreCase(tagName)) {
    if (((defn.getSlotCount() > 0 || getElement().getContents().size() > 0) && defn.canExtend()) || (!defn.canExtend() && getElement().canContainVirtualElements())) {
      return new OverriddenValuesState((ModuleParserHandler)getHandler(),getElement(),this);
    }
  }
  return super.startElement(tagName);
}",0.9277486910994764
68482,"/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param innerMostGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws ChartException
 */
protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList<SeriesDefinition> seriesDefinitions,GroupDefinition innerMostGroupDef,Map<String,String[]> valueExprMap,SeriesDefinition baseSD) throws ChartException {
  for (  SeriesDefinition orthSD : seriesDefinitions) {
    Series series=orthSD.getDesignTimeSeries();
    List<Query> qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    for (    Query qry : series.getDataDefinition()) {
      String expr=qry.getDefinition();
      if (expr == null || ""String_Node_Str"".equals(expr)) {
        continue;
      }
      String aggName=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,qry);
      if (aggName == null) {
        if (!bCreateBindingForExpression || ChartExpressionUtil.isRowBinding(expr,false)) {
          continue;
        }
      }
      String name=ChartUtil.generateBindingNameOfValueSeries(qry,orthSD,baseSD);
      if (fNameSet.contains(name)) {
        continue;
      }
      fNameSet.add(name);
      Binding colBinding=new Binding(name);
      colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
      if (qlist.contains(qry)) {
        try {
          colBinding.setExportable(false);
          if (aggName != null) {
            setBindingExpressionDueToAggregation(colBinding,expr,aggName);
            if (innerMostGroupDef != null) {
              colBinding.addAggregateOn(innerMostGroupDef.getName());
            }
            colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
            IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
            if (aFunc.getParametersCount() > 0) {
              String[] parameters=ChartUtil.getAggFunParameters(orthSD,baseSD,qry);
              for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
                String param=parameters[i];
                colBinding.addArgument(new ScriptExpression(param));
              }
            }
          }
 else {
            exprCodec.decode(expr);
            colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
          }
        }
 catch (        DataException e1) {
          throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e1);
        }
      }
 else {
        colBinding.setExpression(new ScriptExpression(expr));
      }
      String newExpr=getExpressionForEvaluator(name);
      try {
        query.addBinding(colBinding);
      }
 catch (      DataException e) {
        throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
      }
      valueExprMap.put(expr,new String[]{name,newExpr});
    }
  }
}","/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param innerMostGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws ChartException
 */
protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList<SeriesDefinition> seriesDefinitions,GroupDefinition innerMostGroupDef,Map<String,String[]> valueExprMap,SeriesDefinition baseSD) throws ChartException {
  for (  SeriesDefinition orthSD : seriesDefinitions) {
    Series series=orthSD.getDesignTimeSeries();
    List<Query> qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    for (    Query qry : series.getDataDefinition()) {
      String expr=qry.getDefinition();
      if (expr == null || ""String_Node_Str"".equals(expr)) {
        continue;
      }
      String aggName=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,qry);
      if (aggName == null) {
        if (!bCreateBindingForExpression || exprCodec.isRowBinding(expr,false)) {
          continue;
        }
      }
      String name=ChartUtil.generateBindingNameOfValueSeries(qry,orthSD,baseSD);
      if (fNameSet.contains(name)) {
        continue;
      }
      fNameSet.add(name);
      Binding colBinding=new Binding(name);
      colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
      if (qlist.contains(qry)) {
        try {
          colBinding.setExportable(false);
          if (aggName != null) {
            setBindingExpressionDueToAggregation(colBinding,expr,aggName);
            if (innerMostGroupDef != null) {
              colBinding.addAggregateOn(innerMostGroupDef.getName());
            }
            colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
            IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
            if (aFunc.getParametersCount() > 0) {
              String[] parameters=ChartUtil.getAggFunParameters(orthSD,baseSD,qry);
              for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
                String param=parameters[i];
                colBinding.addArgument(new ScriptExpression(param));
              }
            }
          }
 else {
            exprCodec.decode(expr);
            colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
          }
        }
 catch (        DataException e1) {
          throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e1);
        }
      }
 else {
        exprCodec.decode(expr);
        colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
      }
      String newExpr=getExpressionForEvaluator(name);
      try {
        query.addBinding(colBinding);
      }
 catch (      DataException e) {
        throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
      }
      valueExprMap.put(expr,new String[]{name,newExpr});
    }
  }
}",0.9812385854225468
68483,"private float getContentHeight(IContent content){
  return ExcelUtil.convertDimensionType(content.getHeight(),0) / 1000;
}","private float getContentHeight(IContent content){
  return ExcelUtil.convertDimensionType(content.getHeight(),0,reportDpi) / 1000;
}",0.9606299212598424
68484,"private void parsePageSize(IReportContent report){
  SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  this.pageWidth=ExcelUtil.convertDimensionType(masterPage.getPageWidth(),0);
  int leftmargin=ExcelUtil.convertDimensionType(masterPage.getLeftMargin(),pageWidth);
  int rightmargin=ExcelUtil.convertDimensionType(masterPage.getRightMargin(),pageWidth);
  this.contentwidth=pageWidth - leftmargin - rightmargin;
  this.pageHeight=ExcelUtil.convertDimensionType(masterPage.getPageHeight(),0);
}","private void parsePageSize(IReportContent report){
  reportDpi=PropertyUtil.getRenderDpi(report,0);
  SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  this.pageWidth=ExcelUtil.convertDimensionType(masterPage.getPageWidth(),0,reportDpi);
  int leftmargin=ExcelUtil.convertDimensionType(masterPage.getLeftMargin(),pageWidth,reportDpi);
  int rightmargin=ExcelUtil.convertDimensionType(masterPage.getRightMargin(),pageWidth,reportDpi);
  this.contentwidth=pageWidth - leftmargin - rightmargin;
  this.pageHeight=ExcelUtil.convertDimensionType(masterPage.getPageHeight(),0,reportDpi);
}",0.925895087427144
68485,"public void startTable(ITableContent table){
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  ColumnsInfo info=null;
  boolean isAutoTable=true;
  if (isAutoTable) {
    info=LayoutUtil.createTable(table,width);
  }
 else {
    int[] columns=LayoutUtil.createFixedTable(table,LayoutUtil.getElementWidth(table,width));
    info=new ColumnsInfo(columns);
  }
  if (info == null)   return;
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption,table.getComputedStyle());
  }
  engine.addTable(table,info,sizeInfo);
}","public void startTable(ITableContent table){
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  ColumnsInfo info=null;
  boolean isAutoTable=true;
  if (isAutoTable) {
    info=LayoutUtil.createTable(table,width,reportDpi);
  }
 else {
    int[] columns=LayoutUtil.createFixedTable(table,LayoutUtil.getElementWidth(table,width,reportDpi),reportDpi);
    info=new ColumnsInfo(columns);
  }
  if (info == null)   return;
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption,table.getComputedStyle());
  }
  engine.addTable(table,info,sizeInfo);
}",0.9744
68486,"public void startList(IListContent list){
  ContainerSizeInfo size=engine.getCurrentContainer().getSizeInfo();
  ColumnsInfo table=LayoutUtil.createTable(list,size.getWidth());
  engine.addTable(list,table,size);
  if (list.getChildren() == null) {
    HyperlinkDef link=parseHyperLink(list);
    BookmarkDef bookmark=getBookmark(list);
    float height=getContentHeight(list);
    engine.addData(ExcelLayoutEngine.EMPTY,list.getComputedStyle(),link,bookmark,height);
  }
}","public void startList(IListContent list){
  ContainerSizeInfo size=engine.getCurrentContainer().getSizeInfo();
  ColumnsInfo table=LayoutUtil.createTable(list,size.getWidth(),reportDpi);
  engine.addTable(list,table,size);
  if (list.getChildren() == null) {
    HyperlinkDef link=parseHyperLink(list);
    BookmarkDef bookmark=getBookmark(list);
    float height=getContentHeight(list);
    engine.addData(ExcelLayoutEngine.EMPTY,list.getComputedStyle(),link,bookmark,height);
  }
}",0.9895397489539748
68487,"public void start(IReportContent report){
  setupRenderOptions();
  ReportDesignHandle designHandle=report.getDesign().getReportDesign();
  parseReportOrientation(designHandle);
  parseReportLayout(designHandle);
  parseSheetName(designHandle);
  parsePageSize(report);
  IStyle style=report.getRoot().getComputedStyle();
  engine=createLayoutEngine(context,this);
  engine.initalize(contentwidth,style);
  createWriter();
}","public void start(IReportContent report){
  setupRenderOptions();
  ReportDesignHandle designHandle=report.getDesign().getReportDesign();
  parseReportOrientation(designHandle);
  parseReportLayout(designHandle);
  parseSheetName(designHandle);
  parsePageSize(report);
  IStyle style=report.getRoot().getComputedStyle();
  engine=createLayoutEngine(context,this);
  engine.initalize(contentwidth,style,reportDpi);
  createWriter();
}",0.9883449883449884
68488,"public void endRow(IRowContent row){
  DimensionType height=row.getHeight();
  float rowHeight=ExcelUtil.convertDimensionType(height,0) / 1000;
  engine.endRow(rowHeight);
}","public void endRow(IRowContent row){
  DimensionType height=row.getHeight();
  float rowHeight=ExcelUtil.convertDimensionType(height,0,reportDpi) / 1000;
  engine.endRow(rowHeight);
}",0.9719101123595506
68489,"public static double convertColWidth(int width){
  if (width < 0)   return 0;
  double result=0;
  double widthInPixel=width / PX_PT;
  double digitalWidth=7;
  result=(int)((widthInPixel - 5) / digitalWidth * 100 + 0.5);
  double characterNumber=(double)result / 100;
  result=(int)((characterNumber * digitalWidth + 5) / digitalWidth * 256);
  return result / 256;
}","public static double convertColWidth(int width,int dpi){
  float PX_PT=INCH_PT / dpi;
  if (width < 0)   return 0;
  double result=0;
  double widthInPixel=width / PX_PT;
  double digitalWidth=7;
  result=(int)((widthInPixel - 5) / digitalWidth * 100 + 0.5);
  double characterNumber=(double)result / 100;
  result=(int)((characterNumber * digitalWidth + 5) / digitalWidth * 256);
  return result / 256;
}",0.9521345407503234
68490,"/** 
 * @param value
 * @param parent with of parent, the unit is 1/1000 point.
 * @return
 */
public static int convertDimensionType(DimensionType value,float parent){
  if (value == null) {
    return (int)(parent * 1000);
  }
  if (DimensionType.UNITS_PERCENTAGE.equals(value.getUnits())) {
    return (int)(value.getMeasure() / 100 * parent);
  }
  if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * PX_PT * 1000);
  }
  if (DimensionType.UNITS_EM.equalsIgnoreCase(value.getUnits()) || DimensionType.UNITS_EX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * 12 * 1000);
  }
 else {
    return (int)(value.convertTo(DimensionType.UNITS_PT) * 1000);
  }
}","/** 
 * @param value
 * @param parent with of parent, the unit is 1/1000 point.
 * @return
 */
public static int convertDimensionType(DimensionType value,float parent,float dpi){
  float INCH_PX=dpi;
  float PX_PT=INCH_PT / INCH_PX;
  if (value == null) {
    return (int)(parent * 1000);
  }
  if (DimensionType.UNITS_PERCENTAGE.equals(value.getUnits())) {
    return (int)(value.getMeasure() / 100 * parent);
  }
  if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * PX_PT * 1000);
  }
  if (DimensionType.UNITS_EM.equalsIgnoreCase(value.getUnits()) || DimensionType.UNITS_EX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * 12 * 1000);
  }
 else {
    return (int)(value.convertTo(DimensionType.UNITS_PT) * 1000);
  }
}",0.9583333333333334
68491,"public ImageData(IImageContent image,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),imageInfo.getHeight() * ExcelUtil.PX_PT) / 1000;
  int imageWidth=(int)ExcelUtil.convertDimensionType(image.getWidth(),imageInfo.getWidth() * ExcelUtil.PX_PT);
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}","public ImageData(IImageContent image,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer,int heightDpi,int widthDpi){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),imageInfo.getHeight() * ExcelUtil.INCH_PT / heightDpi,heightDpi) / 1000;
  int imageWidth=(int)ExcelUtil.convertDimensionType(image.getWidth(),imageInfo.getWidth() * ExcelUtil.INCH_PT / widthDpi,widthDpi);
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}",0.9369649805447472
68492,"public void initalize(int contentWidth,IStyle style){
  axis=new AxisProcessor();
  axis.addCoordinate(contentWidth);
  setCacheSize();
  ContainerSizeInfo rule=new ContainerSizeInfo(0,contentWidth);
  cache=createDataCache(maxCol,maxRow);
  engine=new StyleEngine(this);
  containers.push(createContainer(rule,style,null));
}","public void initalize(int contentWidth,IStyle style,int dpi){
  axis=new AxisProcessor();
  axis.addCoordinate(contentWidth);
  setCacheSize();
  ContainerSizeInfo rule=new ContainerSizeInfo(0,contentWidth);
  cache=createDataCache(maxCol,maxRow);
  engine=new StyleEngine(this);
  containers.push(createContainer(rule,style,null));
  this.reportDpi=dpi;
}",0.9560117302052786
68493,"private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(altText,entry);
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    byte[] data=imageInfo.getData();
    if (data != null) {
      return createData(image,entry,container,type,imageInfo);
    }
 else {
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
      return createData(image.getAltText(),entry);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(image.getAltText(),entry);
  }
}","private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container,int imageHeightDpi,int imageWidhtDpi){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(altText,entry);
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    byte[] data=imageInfo.getData();
    if (data != null) {
      return createData(image,entry,container,type,imageInfo,imageHeightDpi,imageWidhtDpi);
    }
 else {
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
      return createData(image.getAltText(),entry);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(image.getAltText(),entry);
  }
}",0.9728618421052632
68494,"public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(image,parentSizeInfo.getWidth());
  splitColumns(imageColumnsInfo,parentSizeInfo);
  ContainerSizeInfo imageSize=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  StyleEntry entry=engine.getStyle(style,imageSize,parentSizeInfo,getParentStyle(container));
  setlinkStyle(entry,link);
  SheetData data=createImageData(image,entry,container);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setStartX(imageSize.getStartCoordinate());
  data.setEndX(imageSize.getEndCoordinate());
  addData(data);
}","public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  int imageWidthDpi;
  int imageHeightDpi;
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    imageWidthDpi=PropertyUtil.getImageDpi(image,imageFileWidthDpi,0);
    imageHeightDpi=PropertyUtil.getImageDpi(image,imageFileHeightDpi,0);
  }
 catch (  IOException ex) {
    imageWidthDpi=reportDpi;
    imageHeightDpi=reportDpi;
  }
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(image,parentSizeInfo.getWidth(),imageWidthDpi);
  splitColumns(imageColumnsInfo,parentSizeInfo);
  ContainerSizeInfo imageSize=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  StyleEntry entry=engine.getStyle(style,imageSize,parentSizeInfo,getParentStyle(container));
  setlinkStyle(entry,link);
  SheetData data=createImageData(image,entry,container,imageHeightDpi,imageWidthDpi);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setStartX(imageSize.getStartCoordinate());
  data.setEndX(imageSize.getEndCoordinate());
  addData(data);
}",0.6980968858131488
68495,"protected Bounds computeBounds() throws ChartException {
  final Bounds originalBounds=cm.getBlock().getBounds();
  Bounds bounds=originalBounds.copyInstance();
  if (cm instanceof ChartWithAxes) {
    try {
      ChartWithAxes chart=(ChartWithAxes)cm;
      AggregationCellHandle xtabCell=ChartCubeUtil.getXtabContainerCell(modelHandle);
      if (chart.isTransposed()) {
        bounds.setHeight(0);
        double dWidth=ChartReportItemPresentationPlotImpl.getColumnCellWidth(xtabCell.getCrosstab(),dpi);
        if (!ChartUtil.mathEqual(dWidth,0) && !ChartUtil.mathEqual(dWidth,ChartCubeUtil.DEFAULT_COLUMN_WIDTH.getMeasure())) {
          bounds.setWidth(dWidth);
        }
      }
 else {
        bounds.setWidth(0);
        double dHeight=ChartReportItemPresentationPlotImpl.getRowCellHeight(xtabCell.getCrosstab(),dpi);
        if (!ChartUtil.mathEqual(dHeight,0) && !ChartUtil.mathEqual(dHeight,ChartCubeUtil.DEFAULT_ROW_HEIGHT.getMeasure())) {
          bounds.setHeight(dHeight);
        }
      }
    }
 catch (    BirtException e) {
      throw new ChartException(ChartReportItemConstants.ID,ChartException.GENERATION,e);
    }
  }
  return bounds;
}","protected Bounds computeBounds() throws ChartException {
  final Bounds originalBounds=cm.getBlock().getBounds();
  Bounds bounds=originalBounds.copyInstance();
  if (cm instanceof ChartWithAxes) {
    try {
      ChartWithAxes chart=(ChartWithAxes)cm;
      AggregationCellHandle xtabCell=ChartCubeUtil.getXtabContainerCell(modelHandle);
      if (chart.isTransposed()) {
        bounds.setHeight(0);
        double dWidth=ChartReportItemPresentationPlotImpl.getColumnCellWidth(xtabCell.getCrosstab(),dpi);
        if (!ChartUtil.mathEqual(dWidth,0) && !ChartUtil.mathEqual(dWidth,ChartCubeUtil.DEFAULT_COLUMN_WIDTH.getMeasure())) {
          bounds.setWidth(dWidth);
        }
 else         if (!bounds.isSetWidth() || ChartUtil.mathEqual(bounds.getWidth(),0)) {
          bounds.setWidth(ChartCubeUtil.DEFAULT_COLUMN_WIDTH.getMeasure());
        }
      }
 else {
        bounds.setWidth(0);
        double dHeight=ChartReportItemPresentationPlotImpl.getRowCellHeight(xtabCell.getCrosstab(),dpi);
        if (!ChartUtil.mathEqual(dHeight,0) && !ChartUtil.mathEqual(dHeight,ChartCubeUtil.DEFAULT_ROW_HEIGHT.getMeasure())) {
          bounds.setHeight(dHeight);
        }
 else         if (!bounds.isSetHeight() || ChartUtil.mathEqual(bounds.getHeight(),0)) {
          bounds.setHeight(ChartCubeUtil.DEFAULT_ROW_HEIGHT.getMeasure());
        }
      }
    }
 catch (    BirtException e) {
      throw new ChartException(ChartReportItemConstants.ID,ChartException.GENERATION,e);
    }
  }
  return bounds;
}",0.8708348932983901
68496,"protected Bounds computeBounds() throws ChartException {
  final Bounds originalBounds=cm.getBlock().getBounds();
  Bounds bounds=originalBounds.copyInstance();
  try {
    AggregationCellHandle xtabCell=ChartCubeUtil.getXtabContainerCell(modelHandle);
    if (xtabCell != null) {
      if (xtabCell.getSpanOverOnColumn() != null) {
        double dWidth=getColumnCellWidth(xtabCell.getCrosstab(),dpi);
        if (ChartUtil.mathEqual(dWidth,0)) {
          dWidth=ChartCubeUtil.DEFAULT_COLUMN_WIDTH.getMeasure();
        }
        StyleHandle style=xtabCell.getModelHandle().getPrivateStyle();
        double dLeftBorder=ChartItemUtil.convertToPoints(style.getBorderLeftWidth(),dpi);
        double dRightBorder=ChartItemUtil.convertToPoints(style.getBorderRightWidth(),dpi);
        bounds.setWidth(-roundPointsWithPixels(dWidth + (dLeftBorder + dRightBorder) / 2));
        double dHeight=getRowCellHeight(xtabCell.getCrosstab(),dpi);
        if (!ChartUtil.mathEqual(dHeight,0) && !ChartUtil.mathEqual(dHeight,ChartCubeUtil.DEFAULT_ROW_HEIGHT.getMeasure())) {
          bounds.setHeight(dHeight);
        }
      }
 else       if (xtabCell.getSpanOverOnRow() != null) {
        double dHeight=getRowCellHeight(xtabCell.getCrosstab(),dpi);
        if (ChartUtil.mathEqual(dHeight,0)) {
          dHeight=ChartCubeUtil.DEFAULT_ROW_HEIGHT.getMeasure();
        }
        StyleHandle style=xtabCell.getModelHandle().getPrivateStyle();
        double dTopBorder=ChartItemUtil.convertToPoints(style.getBorderTopWidth(),dpi);
        double dBottomBorder=ChartItemUtil.convertToPoints(style.getBorderBottomWidth(),dpi);
        bounds.setHeight(-roundPointsWithPixels(dHeight + (dTopBorder + dBottomBorder) / 2));
        double dWidth=getColumnCellWidth(xtabCell.getCrosstab(),dpi);
        if (!ChartUtil.mathEqual(dWidth,0) && !ChartUtil.mathEqual(dWidth,ChartCubeUtil.DEFAULT_COLUMN_WIDTH.getMeasure())) {
          bounds.setWidth(dWidth);
        }
      }
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemConstants.ID,ChartException.GENERATION,e);
  }
  return bounds;
}","protected Bounds computeBounds() throws ChartException {
  final Bounds originalBounds=cm.getBlock().getBounds();
  Bounds bounds=originalBounds.copyInstance();
  try {
    AggregationCellHandle xtabCell=ChartCubeUtil.getXtabContainerCell(modelHandle);
    if (xtabCell != null) {
      if (xtabCell.getSpanOverOnColumn() != null) {
        double dWidth=getColumnCellWidth(xtabCell.getCrosstab(),dpi);
        if (ChartUtil.mathEqual(dWidth,0)) {
          dWidth=ChartCubeUtil.DEFAULT_COLUMN_WIDTH.getMeasure();
        }
        StyleHandle style=xtabCell.getModelHandle().getPrivateStyle();
        double dLeftBorder=ChartItemUtil.convertToPoints(style.getBorderLeftWidth(),dpi);
        double dRightBorder=ChartItemUtil.convertToPoints(style.getBorderRightWidth(),dpi);
        bounds.setWidth(-roundPointsWithPixels(dWidth + (dLeftBorder + dRightBorder) / 2));
        double dHeight=getRowCellHeight(xtabCell.getCrosstab(),dpi);
        if (!ChartUtil.mathEqual(dHeight,0) && !ChartUtil.mathEqual(dHeight,ChartCubeUtil.DEFAULT_ROW_HEIGHT.getMeasure())) {
          bounds.setHeight(dHeight);
        }
 else         if (!bounds.isSetHeight() || ChartUtil.mathEqual(bounds.getHeight(),0)) {
          bounds.setHeight(ChartCubeUtil.DEFAULT_ROW_HEIGHT.getMeasure());
        }
      }
 else       if (xtabCell.getSpanOverOnRow() != null) {
        double dHeight=getRowCellHeight(xtabCell.getCrosstab(),dpi);
        if (ChartUtil.mathEqual(dHeight,0)) {
          dHeight=ChartCubeUtil.DEFAULT_ROW_HEIGHT.getMeasure();
        }
        StyleHandle style=xtabCell.getModelHandle().getPrivateStyle();
        double dTopBorder=ChartItemUtil.convertToPoints(style.getBorderTopWidth(),dpi);
        double dBottomBorder=ChartItemUtil.convertToPoints(style.getBorderBottomWidth(),dpi);
        bounds.setHeight(-roundPointsWithPixels(dHeight + (dTopBorder + dBottomBorder) / 2));
        double dWidth=getColumnCellWidth(xtabCell.getCrosstab(),dpi);
        if (!ChartUtil.mathEqual(dWidth,0) && !ChartUtil.mathEqual(dWidth,ChartCubeUtil.DEFAULT_COLUMN_WIDTH.getMeasure())) {
          bounds.setWidth(dWidth);
        }
 else         if (!bounds.isSetWidth() || ChartUtil.mathEqual(bounds.getWidth(),0)) {
          bounds.setWidth(ChartCubeUtil.DEFAULT_COLUMN_WIDTH.getMeasure());
        }
      }
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemConstants.ID,ChartException.GENERATION,e);
  }
  return bounds;
}",0.6709055031791273
68497,"private void initDataSelector(){
  cmbInherit.setItems(new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")});
  if (dataProvider.isInheritColumnsSet()) {
    cmbInherit.select(dataProvider.isInheritColumnsOnly() ? 1 : 0);
  }
 else {
    if (ChartReportItemUtil.hasAggregation(getChartModel())) {
      cmbInherit.select(1);
      getContext().setInheritColumnsOnly(true);
    }
 else {
      cmbInherit.select(0);
      getContext().setInheritColumnsOnly(false);
    }
  }
  cmbInherit.setEnabled(false);
  cmbDataItems.setItems(createDataComboItems());
  cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
  String sItemRef=getDataServiceProvider().getReportItemReference();
  if (sItemRef != null) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    ChartUIUtil.setText(cmbDataItems,sItemRef);
    currentData=sItemRef;
    return;
  }
  String sDataSet=getDataServiceProvider().getDataSet();
  if (sDataSet != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    ChartUIUtil.setText(cmbDataItems,sDataSet);
    currentData=sDataSet;
    return;
  }
  String sDataCube=getDataServiceProvider().getDataCube();
  if (sDataCube != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    ChartUIUtil.setText(cmbDataItems,sDataCube);
    currentData=sDataCube;
    return;
  }
  cmbInherit.setEnabled(getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
  if (!cmbInherit.isEnabled()) {
    if (itemHandle.getContainer() instanceof MultiViewsHandle || itemHandle.getDataBindingReference() != null) {
      cmbInherit.select(0);
    }
 else {
      cmbInherit.select(1);
    }
  }
  btnInherit.setSelection(true);
  bIsInheritSelected=true;
  if (getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(false);
    btnUseData.setEnabled(false);
  }
  cmbDataItems.select(0);
  currentData=null;
  cmbDataItems.setEnabled(false);
  getDataServiceProvider().setDataSet(null);
}","private void initDataSelector(){
  cmbInherit.setItems(new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")});
  if (dataProvider.isInheritColumnsSet()) {
    cmbInherit.select(dataProvider.isInheritColumnsOnly() ? 1 : 0);
  }
 else {
    if (ChartReportItemUtil.hasAggregation(getChartModel())) {
      cmbInherit.select(1);
      getContext().setInheritColumnsOnly(true);
    }
 else {
      cmbInherit.select(0);
      getContext().setInheritColumnsOnly(false);
    }
  }
  cmbInherit.setEnabled(false);
  cmbDataItems.setItems(createDataComboItems());
  String sItemRef=getDataServiceProvider().getReportItemReference();
  if (sItemRef != null) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    ChartUIUtil.setText(cmbDataItems,sItemRef);
    currentData=sItemRef;
    return;
  }
  String sDataSet=getDataServiceProvider().getDataSet();
  if (sDataSet != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    ChartUIUtil.setText(cmbDataItems,sDataSet);
    currentData=sDataSet;
    return;
  }
  String sDataCube=getDataServiceProvider().getDataCube();
  if (sDataCube != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    ChartUIUtil.setText(cmbDataItems,sDataCube);
    currentData=sDataCube;
    return;
  }
  cmbInherit.setEnabled(getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
  if (!cmbInherit.isEnabled()) {
    if (itemHandle.getContainer() instanceof MultiViewsHandle || itemHandle.getDataBindingReference() != null) {
      cmbInherit.select(0);
    }
 else {
      cmbInherit.select(1);
    }
  }
  btnInherit.setSelection(true);
  bIsInheritSelected=true;
  if (getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(false);
    btnUseData.setEnabled(false);
  }
  cmbDataItems.select(0);
  currentData=null;
  cmbDataItems.setEnabled(false);
  getDataServiceProvider().setDataSet(null);
}",0.984759671746776
68498,"public Composite createDataSelector(Composite parent){
  Composite cmpDataSet=ChartUIUtil.createCompositeWrapper(parent);
{
    cmpDataSet.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label label=new Label(cmpDataSet,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  Composite cmpDetail=new Composite(cmpDataSet,SWT.NONE);
{
    GridLayout gridLayout=new GridLayout(2,false);
    gridLayout.marginWidth=10;
    gridLayout.marginHeight=0;
    cmpDetail.setLayout(gridLayout);
    cmpDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Composite compRadios=ChartUIUtil.createCompositeWrapper(cmpDetail);
{
    GridData gd=new GridData();
    gd.verticalSpan=2;
    compRadios.setLayoutData(gd);
  }
  btnInherit=new Button(compRadios,SWT.RADIO);
  btnInherit.setText(Messages.getString(""String_Node_Str""));
  btnInherit.addListener(SWT.Selection,this);
  btnUseData=new Button(compRadios,SWT.RADIO);
  btnUseData.setText(Messages.getString(""String_Node_Str""));
  btnUseData.addListener(SWT.Selection,this);
  cmbInherit=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbInherit.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbInherit.addListener(SWT.Selection,this);
  cmbDataItems=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbDataItems.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbDataItems.addListener(SWT.Selection,this);
  initDataSelector();
  updatePredefinedQueries();
  checkColBindingForCube();
  if (dataProvider.checkState(IDataServiceProvider.IN_MULTI_VIEWS)) {
    autoSelect(false);
  }
  return cmpDataSet;
}","public Composite createDataSelector(Composite parent){
  Composite cmpDataSet=ChartUIUtil.createCompositeWrapper(parent);
{
    cmpDataSet.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label label=new Label(cmpDataSet,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  Composite cmpDetail=new Composite(cmpDataSet,SWT.NONE);
{
    GridLayout gridLayout=new GridLayout(2,false);
    gridLayout.marginWidth=10;
    gridLayout.marginHeight=0;
    cmpDetail.setLayout(gridLayout);
    cmpDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Composite compRadios=ChartUIUtil.createCompositeWrapper(cmpDetail);
{
    GridData gd=new GridData();
    gd.verticalSpan=2;
    compRadios.setLayoutData(gd);
  }
  btnInherit=new Button(compRadios,SWT.RADIO);
  btnInherit.setText(Messages.getString(""String_Node_Str""));
  btnInherit.addListener(SWT.Selection,this);
  btnUseData=new Button(compRadios,SWT.RADIO);
  btnUseData.setText(Messages.getString(""String_Node_Str""));
  btnUseData.addListener(SWT.Selection,this);
  cmbInherit=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbInherit.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbInherit.addListener(SWT.Selection,this);
  cmbDataItems=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbDataItems.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbDataItems.addListener(SWT.Selection,this);
  cmbDataItems.setVisibleItemCount(30);
  initDataSelector();
  updatePredefinedQueries();
  checkColBindingForCube();
  if (dataProvider.checkState(IDataServiceProvider.IN_MULTI_VIEWS)) {
    autoSelect(false);
  }
  return cmpDataSet;
}",0.9884057971014492
68499,"public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataCube(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(ChartUIUtil.getText(cmbDataItems))) {
return;
}
getDataServiceProvider().setDataSet(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
switchDataSet(ChartUIUtil.getText(cmbDataItems));
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (ChartUIUtil.getText(cmbDataItems).equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(ChartUIUtil.getText(cmbDataItems));
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=ChartUIUtil.getText(cmbDataItems);
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
String[] datasets=getDataServiceProvider().getAllDataSets();
currentData=datasets[datasets.length - 1];
getDataServiceProvider().setDataSet(currentData);
cmbDataItems.setText(currentData);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
int count=getDataServiceProvider().getAllDataCubes().length;
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
String[] datacubes=getDataServiceProvider().getAllDataCubes();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (datacubes.length == count) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
currentData=datacubes[datacubes.length - 1];
getDataServiceProvider().setDataCube(currentData);
cmbDataItems.setText(currentData);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
if (event.widget == btnInherit || event.widget == cmbDataItems) {
List<SeriesDefinition> sds=ChartUIUtil.getBaseSeriesDefinitions(getChartModel());
if (sds != null && sds.size() > 0) {
SeriesDefinition base=sds.get(0);
if (selectDataTypes.get(cmbDataItems.getSelectionIndex()).intValue() == SELECT_DATA_SET && !ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() == null) {
base.setGrouping(SeriesGroupingImpl.create());
}
base.getGrouping().setEnabled(true);
}
 else if (ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() != null) {
base.getGrouping().setEnabled(false);
}
}
}
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataCube(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(ChartUIUtil.getText(cmbDataItems))) {
return;
}
getDataServiceProvider().setDataSet(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
switchDataSet(ChartUIUtil.getText(cmbDataItems));
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (ChartUIUtil.getText(cmbDataItems).equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(ChartUIUtil.getText(cmbDataItems));
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=ChartUIUtil.getText(cmbDataItems);
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
String[] datasets=getDataServiceProvider().getAllDataSets();
currentData=datasets[datasets.length - 1];
getDataServiceProvider().setDataSet(currentData);
cmbDataItems.setText(currentData);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
int count=getDataServiceProvider().getAllDataCubes().length;
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
String[] datacubes=getDataServiceProvider().getAllDataCubes();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
if (datacubes.length == count) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
currentData=datacubes[datacubes.length - 1];
getDataServiceProvider().setDataCube(currentData);
cmbDataItems.setText(currentData);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
if (event.widget == btnInherit || event.widget == cmbDataItems) {
List<SeriesDefinition> sds=ChartUIUtil.getBaseSeriesDefinitions(getChartModel());
if (sds != null && sds.size() > 0) {
SeriesDefinition base=sds.get(0);
if (selectDataTypes.get(cmbDataItems.getSelectionIndex()).intValue() == SELECT_DATA_SET && !ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() == null) {
base.setGrouping(SeriesGroupingImpl.create());
}
base.getGrouping().setEnabled(true);
}
 else if (ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() != null) {
base.getGrouping().setEnabled(false);
}
}
}
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}",0.9920514761544283
68500,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
    Map appContext=reportContext.getAppContext();
    if (appContext != null) {
      Object tmp=appContext.get(EngineConstants.APPCONTEXT_CHART_RESOLUTION);
      if (tmp != null && tmp instanceof Number) {
        imageDpi=((Number)tmp).intValue();
      }
    }
    if (imageDpi <= 0) {
      imageDpi=designHandle.getImageDPI();
    }
    if (imageDpi <= 0) {
      imageDpi=96;
    }
  }
  retrieveRtLFlag();
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
        fixedReport=true;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
        fixedReport=false;
      }
    }
  }
 else {
    fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,fixedReport,enableInlineStyle,browserVersion);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,fixedReport,enableInlineStyle,htmlRtLFlag,browserVersion);
  }
  if (isEmbeddable) {
    outputCSSStyles(reportDesign,designHandle);
    if (needFixTransparentPNG) {
      fixTransparentPNG();
    }
    fixRedirect();
    openRootTag();
    writeBidiFlag();
    if (report != null) {
      String defaultStyleName=report.getDesign().getRootStyleName();
      if (defaultStyleName != null) {
        if (enableInlineStyle) {
          StringBuffer defaultStyleBuffer=new StringBuffer();
          IStyle defaultStyle=report.findStyle(defaultStyleName);
          htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
          if (defaultStyleBuffer.length() > 0) {
            writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
          }
        }
 else {
          if (htmlIDNamespace != null) {
            writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
          }
 else {
            writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
          }
        }
      }
    }
    outputClientScript(report);
    return;
  }
  openRootTag();
  writeBidiFlag();
  writer.openTag(HTMLTags.TAG_HEAD);
  outputReportTitle(report);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  outputCSSStyles(reportDesign,designHandle);
  if (needFixTransparentPNG) {
    fixTransparentPNG();
  }
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String defaultStyleName=report.getDesign().getRootStyleName();
    if (defaultStyleName != null) {
      if (enableInlineStyle) {
        IStyle defaultStyle=report.findStyle(defaultStyleName);
        htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
      }
 else {
        if (htmlIDNamespace != null) {
          writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
        }
 else {
          writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
        }
      }
    }
  }
  if (outputMasterPageContent) {
    defaultStyleBuffer.append(""String_Node_Str"");
  }
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
  }
  outputClientScript(report);
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
    Map appContext=reportContext.getAppContext();
    if (appContext != null) {
      Object tmp=appContext.get(EngineConstants.APPCONTEXT_CHART_RESOLUTION);
      if (tmp != null && tmp instanceof Number) {
        imageDpi=((Number)tmp).intValue();
      }
    }
    if (imageDpi <= 0) {
      imageDpi=designHandle.getImageDPI();
    }
    if (imageDpi <= 0) {
      imageDpi=96;
    }
  }
  retrieveRtLFlag();
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
        fixedReport=true;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
        fixedReport=false;
      }
    }
  }
 else {
    fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,fixedReport,enableInlineStyle,browserVersion);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,fixedReport,enableInlineStyle,htmlRtLFlag,browserVersion);
  }
  if (isEmbeddable) {
    outputCSSStyles(reportDesign,designHandle);
    if (needFixTransparentPNG) {
      fixTransparentPNG();
    }
    fixRedirect();
    openRootTag();
    writeBidiFlag();
    if (report != null) {
      String defaultStyleName=report.getDesign().getRootStyleName();
      if (defaultStyleName != null) {
        if (enableInlineStyle) {
          StringBuffer defaultStyleBuffer=new StringBuffer();
          IStyle defaultStyle=report.findStyle(defaultStyleName);
          htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
          if (defaultStyleBuffer.length() > 0) {
            writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
          }
        }
 else {
          if (htmlIDNamespace != null) {
            writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
          }
 else {
            writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
          }
        }
      }
    }
    outputClientScript(report);
    return;
  }
  openRootTag();
  writeBidiFlag();
  writer.openTag(HTMLTags.TAG_HEAD);
  outputReportTitle(report);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  if (!OUTPUT_FORMAT_HTML.equals(getOutputFormat())) {
    writer.closeTag(HTMLTags.TAG_META);
  }
  outputCSSStyles(reportDesign,designHandle);
  if (needFixTransparentPNG) {
    fixTransparentPNG();
  }
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String defaultStyleName=report.getDesign().getRootStyleName();
    if (defaultStyleName != null) {
      if (enableInlineStyle) {
        IStyle defaultStyle=report.findStyle(defaultStyleName);
        htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
      }
 else {
        if (htmlIDNamespace != null) {
          writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
        }
 else {
          writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
        }
      }
    }
  }
  if (outputMasterPageContent) {
    defaultStyleBuffer.append(""String_Node_Str"");
  }
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
  }
  outputClientScript(report);
}",0.988502905179874
68501,"protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(4,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,comboModifyListener);
  expression.setItems(getDataSetColumns());
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
      expression.setText(getExpression(expression.getText()));
    }
  }
);
  expression.addMouseListener(new MouseAdapter(){
    public void mouseUp(    MouseEvent e){
      if (expression.getItem(0).length() == 0 && tipsForCube != null) {
        updateMessage(tipsForCube,IMessageProvider.INFORMATION);
        tipsForCube=null;
      }
    }
  }
);
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
      if (!expression.getText().equals(fCurrentExpr)) {
        needRefreshList=true;
        fCurrentExpr=expression.getText();
      }
    }
  }
);
  try {
    expButton=(IExpressionButton)context.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,condition,expression,context.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,new Listener(){
      public void handleEvent(      Event event){
        if (event.data instanceof String[]) {
          updateButtons();
        }
      }
    }
);
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(operatorSelectionListener);
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(4,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,comboModifyListener);
  expression.setItems(getDataSetColumns());
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
      expression.setText(getExpression(expression.getText()));
    }
  }
);
  expression.addMouseListener(new MouseAdapter(){
    public void mouseUp(    MouseEvent e){
      if (expression.getItem(0).length() == 0 && tipsForCube != null) {
        updateMessage(tipsForCube,IMessageProvider.INFORMATION);
        tipsForCube=null;
      }
    }
  }
);
  try {
    expButton=(IExpressionButton)context.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,condition,expression,context.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,new Listener(){
      public void handleEvent(      Event event){
        if (event.data instanceof String[]) {
          updateButtons();
        }
      }
    }
);
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(operatorSelectionListener);
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
      if (!expression.getText().equals(fCurrentExpr)) {
        needRefreshList=true;
        fCurrentExpr=expression.getText();
      }
    }
  }
);
}",0.9074889867841408
68502,"protected Control createContents(Composite parent){
  String title=Messages.getFormattedString(""String_Node_Str"",new String[]{getHandle().getName()});
  getShell().setText(title);
  Control control=super.createContents(parent);
  Utility.setSystemHelp(control,IHelpConstants.CONEXT_ID_DATASET_EDIT);
  return control;
}","protected Control createContents(Composite parent){
  String title=Messages.getFormattedString(""String_Node_Str"",new String[]{getHandle().getName()});
  getShell().setText(title);
  Control control=super.createContents(parent);
  setPageHelpContent(control);
  return control;
}",0.8576214405360134
68503,"public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  Bounds boDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    if (laDataPoint.isVisible()) {
      pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
      loDataPoint=goFactory.createLocation(0,0);
      loDataPoint3d=goFactory.createLocation3D(0,0,0);
      boDataPoint=goFactory.createBounds(0,0,0,0);
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=ChartUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
          dStart=Methods.asDouble(srh.getOrthogonalScale().getMinimum()).doubleValue();
          dEnd=dValue;
          try {
            double dMargin=srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart));
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(new Double(dStart)) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth < 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
          dStart=Methods.asDouble(srh.getOrthogonalScale().getMinimum()).doubleValue();
          dEnd=dValue;
          try {
            double dMargin=srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart));
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(new Double(dStart));
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs));
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          int zorder_hint=0;
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
            zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,zorder_hint);
        }
 else {
          int zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,zorder_hint);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside) && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}","public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  Bounds boDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    if (laDataPoint.isVisible()) {
      pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
      loDataPoint=goFactory.createLocation(0,0);
      loDataPoint3d=goFactory.createLocation3D(0,0,0);
      boDataPoint=goFactory.createBounds(0,0,0,0);
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=ChartUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=Methods.asDouble(dpha[i].getOrthogonalValue());
          try {
            double dMargin=srh.getLocationOnOrthogonal(dpha[i].getOrthogonalValue()) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum()) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth < 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=Methods.asDouble(dpha[i].getOrthogonalValue());
          try {
            double dMargin=srh.getLocationOnOrthogonal(dpha[i].getOrthogonalValue()) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs));
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          int zorder_hint=0;
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
            zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,zorder_hint);
        }
 else {
          int zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,zorder_hint);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside) && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}",0.9779692865936628
68504,"/** 
 * Restores the clipping
 * @param ipr
 * @throws ChartException
 */
protected void restoreClipping(final IPrimitiveRenderer ipr) throws ChartException {
  final boolean bLastInSequence=iSeriesIndex == (iSeriesCount - 1);
  if (bLastInSequence && !isDimension3D() && (!isShowOutside() || !baseIsShowOutside())) {
    flushClipping();
    ClipRenderEvent clip=new ClipRenderEvent(this);
    clip.setVertices(null);
    ipr.setClip(clip);
  }
}","/** 
 * Restores the clipping
 * @param ipr
 * @throws ChartException
 */
protected void restoreClipping(final IPrimitiveRenderer ipr) throws ChartException {
  final boolean bLastInSequence=isLastSeries();
  if (bLastInSequence && !isDimension3D() && (!isShowOutside() || !baseIsShowOutside())) {
    flushClipping();
    ClipRenderEvent clip=new ClipRenderEvent(this);
    clip.setVertices(null);
    ipr.setClip(clip);
  }
}",0.9633867276887872
68505,"protected Control createDialogArea(Composite parent){
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  glContent.numColumns=9;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  cmpContent.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label lblFont=new Label(cmpContent,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  cmbFontNames=new Combo(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBFontNames=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBFontNames.horizontalSpan=8;
  cmbFontNames.setLayoutData(gdCMBFontNames);
  cmbFontNames.addSelectionListener(this);
  Label lblSize=new Label(cmpContent,SWT.NONE);
  GridData gdLSize=new GridData();
  lblSize.setLayoutData(gdLSize);
  lblSize.setText(Messages.getString(""String_Node_Str""));
  cmbFontSizes=new Combo(cmpContent,SWT.NONE);
{
    cmbFontSizes.setItems(FONT_SIZE);
    cmbFontSizes.setText(fdCurrent.isSetSize() ? String.valueOf((int)fdCurrent.getSize()) : ChartUIUtil.FONT_AUTO);
    GridData gdISCFontSizes=new GridData(GridData.FILL_HORIZONTAL);
    gdISCFontSizes.horizontalSpan=3;
    cmbFontSizes.setLayoutData(gdISCFontSizes);
    cmbFontSizes.addSelectionListener(this);
    cmbFontSizes.addFocusListener(this);
  }
  Label lblForeground=new Label(cmpContent,SWT.NONE);
  GridData gdLForeground=new GridData();
  gdLForeground.horizontalSpan=2;
  gdLForeground.horizontalIndent=40;
  lblForeground.setLayoutData(gdLForeground);
  lblForeground.setText(Messages.getString(""String_Node_Str""));
  fccColor=new FillChooserComposite(cmpContent,SWT.NONE,wizardContext,cdCurrent,false,false,true,false);
{
    GridData gdFCCColor=new GridData(GridData.FILL_HORIZONTAL);
    gdFCCColor.horizontalSpan=3;
    fccColor.setLayoutData(gdFCCColor);
    fccColor.addListener(this);
  }
  createFontStylePanel();
  if (isAlignmentEnabled) {
    createAlignmentPanel();
  }
  createRotationPanel();
  populateLists();
  updatePreview();
  return cmpContent;
}","protected Control createDialogArea(Composite parent){
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  glContent.numColumns=9;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  cmpContent.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label lblFont=new Label(cmpContent,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  cmbFontNames=new Combo(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBFontNames=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBFontNames.horizontalSpan=8;
  cmbFontNames.setLayoutData(gdCMBFontNames);
  cmbFontNames.addSelectionListener(this);
  cmbFontNames.setVisibleItemCount(30);
  Label lblSize=new Label(cmpContent,SWT.NONE);
  GridData gdLSize=new GridData();
  lblSize.setLayoutData(gdLSize);
  lblSize.setText(Messages.getString(""String_Node_Str""));
  cmbFontSizes=new Combo(cmpContent,SWT.NONE);
{
    cmbFontSizes.setItems(FONT_SIZE);
    cmbFontSizes.setText(fdCurrent.isSetSize() ? String.valueOf((int)fdCurrent.getSize()) : ChartUIUtil.FONT_AUTO);
    GridData gdISCFontSizes=new GridData(GridData.FILL_HORIZONTAL);
    gdISCFontSizes.horizontalSpan=3;
    cmbFontSizes.setLayoutData(gdISCFontSizes);
    cmbFontSizes.addSelectionListener(this);
    cmbFontSizes.addFocusListener(this);
    cmbFontSizes.setVisibleItemCount(30);
  }
  Label lblForeground=new Label(cmpContent,SWT.NONE);
  GridData gdLForeground=new GridData();
  gdLForeground.horizontalSpan=2;
  gdLForeground.horizontalIndent=40;
  lblForeground.setLayoutData(gdLForeground);
  lblForeground.setText(Messages.getString(""String_Node_Str""));
  fccColor=new FillChooserComposite(cmpContent,SWT.NONE,wizardContext,cdCurrent,false,false,true,false);
{
    GridData gdFCCColor=new GridData(GridData.FILL_HORIZONTAL);
    gdFCCColor.horizontalSpan=3;
    fccColor.setLayoutData(gdFCCColor);
    fccColor.addListener(this);
  }
  createFontStylePanel();
  if (isAlignmentEnabled) {
    createAlignmentPanel();
  }
  createRotationPanel();
  populateLists();
  updatePreview();
  return cmpContent;
}",0.9813974591651544
68506,"private void placeComponents(){
  GridLayout glContent=new GridLayout();
  glContent.numColumns=4;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginWidth=7;
  glContent.marginHeight=7;
  this.setLayout(new FillLayout());
  grpContent=new Group(this,SWT.NONE);
  grpContent.setLayout(glContent);
  grpContent.setText(Messages.getString(""String_Node_Str""));
  btnEnabled=new Button(grpContent,SWT.CHECK);
  GridData gdBTNEnabled=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  gdBTNEnabled.horizontalSpan=4;
  btnEnabled.setLayoutData(gdBTNEnabled);
  btnEnabled.setText(Messages.getString(""String_Node_Str""));
  btnEnabled.addSelectionListener(this);
  lblType=new Label(grpContent,SWT.NONE);
  GridData gdLBLType=new GridData();
  lblType.setLayoutData(gdLBLType);
  lblType.setText(Messages.getString(""String_Node_Str""));
  cmbType=new Combo(grpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBType=new GridData(GridData.FILL_HORIZONTAL);
  cmbType.setLayoutData(gdCMBType);
  cmbType.addSelectionListener(this);
  lblUnit=new Label(grpContent,SWT.NONE);
  GridData gdLBLUnit=new GridData();
  lblUnit.setLayoutData(gdLBLUnit);
  lblUnit.setText(Messages.getString(""String_Node_Str""));
  cmbUnit=new Combo(grpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBUnit=new GridData(GridData.FILL_HORIZONTAL);
  cmbUnit.setLayoutData(gdCMBUnit);
  cmbUnit.addSelectionListener(this);
  lblInterval=new Label(grpContent,SWT.NONE);
  GridData gdLBLInterval=new GridData();
  lblInterval.setLayoutData(gdLBLInterval);
  lblInterval.setText(Messages.getString(""String_Node_Str""));
  iscInterval=new Text(grpContent,SWT.BORDER);
  GridData gdISCInterval=new GridData(GridData.FILL_HORIZONTAL);
  iscInterval.setLayoutData(gdISCInterval);
  iscInterval.setToolTipText(Messages.getString(""String_Node_Str""));
  iscInterval.addSelectionListener(this);
  iscInterval.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
    }
    public void focusLost(    FocusEvent e){
      String text=iscInterval.getText();
      if (text == null || text.trim().length() == 0) {
        text=""String_Node_Str"";
      }
      fGrouping.setGroupingInterval(Double.valueOf(text).doubleValue());
    }
  }
);
  iscInterval.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent e){
      String text=((Text)e.getSource()).getText();
      if (e.text != null && e.text.length() > 0) {
        StringBuffer sb=new StringBuffer();
        sb.append(text.substring(0,e.start));
        sb.append(e.text);
        sb.append(text.substring(e.start));
        text=sb.toString();
      }
      if (text != null && text.length() > 0 && !text.matches(""String_Node_Str"")) {
        e.doit=false;
      }
    }
  }
);
  Label lblDummy=new Label(grpContent,SWT.NONE);
  GridData gdLBLDummy=new GridData(GridData.FILL_HORIZONTAL);
  gdLBLDummy.horizontalSpan=2;
  lblDummy.setLayoutData(gdLBLDummy);
  GridLayout glAggregate=new GridLayout();
  glAggregate.numColumns=2;
  glAggregate.marginHeight=0;
  glAggregate.marginWidth=0;
  glAggregate.horizontalSpacing=5;
  glAggregate.verticalSpacing=5;
  if (fbAggEnabled) {
    fCmpAggregate=new Composite(grpContent,SWT.NONE);
    GridData gdCMPAggregate=new GridData(GridData.FILL_HORIZONTAL);
    gdCMPAggregate.horizontalSpan=2;
    fCmpAggregate.setLayoutData(gdCMPAggregate);
    fCmpAggregate.setLayout(glAggregate);
    lblAggregate=new Label(fCmpAggregate,SWT.NONE);
    GridData gdLBLAggregate=new GridData();
    lblAggregate.setLayoutData(gdLBLAggregate);
    lblAggregate.setText(Messages.getString(""String_Node_Str""));
    cmbAggregate=new Combo(fCmpAggregate,SWT.DROP_DOWN | SWT.READ_ONLY);
    cmbAggregate.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmbAggregate.addSelectionListener(this);
    Series series=fChartContext.getChartType().getSeries();
    if (ChartUIUtil.getSeriesUIProvider(series).validationIndex(series).length > 1) {
      lblAggregate.setVisible(false);
      cmbAggregate.setVisible(false);
    }
  }
  if (fbAggEnabled) {
    fAggParameterComposite=new Composite(fCmpAggregate,SWT.NONE);
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
    gridData.horizontalIndent=0;
    gridData.horizontalSpan=2;
    gridData.exclude=true;
    fAggParameterComposite.setLayoutData(gridData);
    GridLayout layout=new GridLayout();
    layout.marginWidth=layout.marginHeight=0;
    layout.numColumns=3;
    fAggParameterComposite.setLayout(layout);
  }
}","private void placeComponents(){
  GridLayout glContent=new GridLayout();
  glContent.numColumns=4;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginWidth=7;
  glContent.marginHeight=7;
  this.setLayout(new FillLayout());
  grpContent=new Group(this,SWT.NONE);
  grpContent.setLayout(glContent);
  grpContent.setText(Messages.getString(""String_Node_Str""));
  btnEnabled=new Button(grpContent,SWT.CHECK);
  GridData gdBTNEnabled=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  gdBTNEnabled.horizontalSpan=4;
  btnEnabled.setLayoutData(gdBTNEnabled);
  btnEnabled.setText(Messages.getString(""String_Node_Str""));
  btnEnabled.addSelectionListener(this);
  lblType=new Label(grpContent,SWT.NONE);
  GridData gdLBLType=new GridData();
  lblType.setLayoutData(gdLBLType);
  lblType.setText(Messages.getString(""String_Node_Str""));
  cmbType=new Combo(grpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBType=new GridData(GridData.FILL_HORIZONTAL);
  cmbType.setLayoutData(gdCMBType);
  cmbType.addSelectionListener(this);
  lblUnit=new Label(grpContent,SWT.NONE);
  GridData gdLBLUnit=new GridData();
  lblUnit.setLayoutData(gdLBLUnit);
  lblUnit.setText(Messages.getString(""String_Node_Str""));
  cmbUnit=new Combo(grpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBUnit=new GridData(GridData.FILL_HORIZONTAL);
  cmbUnit.setLayoutData(gdCMBUnit);
  cmbUnit.addSelectionListener(this);
  lblInterval=new Label(grpContent,SWT.NONE);
  GridData gdLBLInterval=new GridData();
  lblInterval.setLayoutData(gdLBLInterval);
  lblInterval.setText(Messages.getString(""String_Node_Str""));
  iscInterval=new Text(grpContent,SWT.BORDER);
  GridData gdISCInterval=new GridData(GridData.FILL_HORIZONTAL);
  iscInterval.setLayoutData(gdISCInterval);
  iscInterval.setToolTipText(Messages.getString(""String_Node_Str""));
  iscInterval.addSelectionListener(this);
  iscInterval.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
    }
    public void focusLost(    FocusEvent e){
      String text=iscInterval.getText();
      if (text == null || text.trim().length() == 0) {
        text=""String_Node_Str"";
      }
      fGrouping.setGroupingInterval(Double.valueOf(text).doubleValue());
    }
  }
);
  iscInterval.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent e){
      String text=((Text)e.getSource()).getText();
      if (e.text != null && e.text.length() > 0) {
        StringBuffer sb=new StringBuffer();
        sb.append(text.substring(0,e.start));
        sb.append(e.text);
        sb.append(text.substring(e.start));
        text=sb.toString();
      }
      if (text != null && text.length() > 0 && !text.matches(""String_Node_Str"")) {
        e.doit=false;
      }
    }
  }
);
  Label lblDummy=new Label(grpContent,SWT.NONE);
  GridData gdLBLDummy=new GridData(GridData.FILL_HORIZONTAL);
  gdLBLDummy.horizontalSpan=2;
  lblDummy.setLayoutData(gdLBLDummy);
  GridLayout glAggregate=new GridLayout();
  glAggregate.numColumns=2;
  glAggregate.marginHeight=0;
  glAggregate.marginWidth=0;
  glAggregate.horizontalSpacing=5;
  glAggregate.verticalSpacing=5;
  if (fbAggEnabled) {
    fCmpAggregate=new Composite(grpContent,SWT.NONE);
    GridData gdCMPAggregate=new GridData(GridData.FILL_HORIZONTAL);
    gdCMPAggregate.horizontalSpan=2;
    fCmpAggregate.setLayoutData(gdCMPAggregate);
    fCmpAggregate.setLayout(glAggregate);
    lblAggregate=new Label(fCmpAggregate,SWT.NONE);
    GridData gdLBLAggregate=new GridData();
    lblAggregate.setLayoutData(gdLBLAggregate);
    lblAggregate.setText(Messages.getString(""String_Node_Str""));
    cmbAggregate=new Combo(fCmpAggregate,SWT.DROP_DOWN | SWT.READ_ONLY);
    cmbAggregate.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmbAggregate.addSelectionListener(this);
    cmbAggregate.setVisibleItemCount(30);
    Series series=fChartContext.getChartType().getSeries();
    if (ChartUIUtil.getSeriesUIProvider(series).validationIndex(series).length > 1) {
      lblAggregate.setVisible(false);
      cmbAggregate.setVisible(false);
    }
  }
  if (fbAggEnabled) {
    fAggParameterComposite=new Composite(fCmpAggregate,SWT.NONE);
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
    gridData.horizontalIndent=0;
    gridData.horizontalSpan=2;
    gridData.exclude=true;
    fAggParameterComposite.setLayoutData(gridData);
    GridLayout layout=new GridLayout();
    layout.marginWidth=layout.marginHeight=0;
    layout.numColumns=3;
    fAggParameterComposite.setLayout(layout);
  }
}",0.9954068241469816
68507,"private void placeComponents(){
  GridLayout glCMPTrigger=new GridLayout();
  glCMPTrigger.numColumns=3;
  glCMPTrigger.horizontalSpacing=16;
  glCMPTrigger.verticalSpacing=5;
  slValues=new StackLayout();
  GridLayout glURL=new GridLayout();
  glURL.marginWidth=2;
  glURL.marginHeight=6;
  glURL.horizontalSpacing=6;
  glURL.numColumns=3;
  GridLayout glParameter=new GridLayout();
  glParameter.marginWidth=2;
  glParameter.marginHeight=6;
  glParameter.horizontalSpacing=6;
  glParameter.numColumns=3;
  this.setLayout(glCMPTrigger);
  Label lblTriggerEvent=new Label(this,SWT.NONE);
  GridData gdLBLTriggerEvent=new GridData();
  gdLBLTriggerEvent.horizontalIndent=4;
  lblTriggerEvent.setLayoutData(gdLBLTriggerEvent);
  lblTriggerEvent.setText(Messages.getString(""String_Node_Str""));
  cmbTriggerType=new TextCombo(this,SWT.NONE);
  GridData gdCMBTriggerType=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBTriggerType.horizontalSpan=2;
  cmbTriggerType.setLayoutData(gdCMBTriggerType);
  cmbTriggerType.addListener(TextCombo.SELECTION_EVENT,new Listener(){
    public void handleEvent(    Event event){
      updateTrigger(lastTriggerType);
      updateActionTypeItems();
      Trigger trigger=(Trigger)triggersMap.get(cmbTriggerType.getText());
      if (trigger != null && triggerMatrix.check(trigger)) {
        cmbActionType.setText(getActionText(trigger));
      }
 else {
        cmbActionType.select(0);
      }
      updateUI(trigger);
      switchUI();
      lastTriggerType=cmbTriggerType.getText();
    }
  }
);
  Label lblActionType=new Label(this,SWT.NONE);
  GridData gdLBLActionType=new GridData();
  gdLBLActionType.horizontalIndent=4;
  lblActionType.setLayoutData(gdLBLActionType);
  lblActionType.setText(Messages.getString(""String_Node_Str""));
  cmbActionType=new Combo(this,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBActionType=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBActionType.horizontalSpan=2;
  cmbActionType.setLayoutData(gdCMBActionType);
  cmbActionType.addSelectionListener(this);
  cmbActionType.setVisibleItemCount(10);
  Label lblCursorType=new Label(this,SWT.NONE);
  GridData gdLBLCursorType=new GridData();
  gdLBLCursorType.horizontalIndent=4;
  lblCursorType.setLayoutData(gdLBLCursorType);
  lblCursorType.setText(Messages.getString(""String_Node_Str""));
  cmbCursorType=new Combo(this,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBCursorType=new GridData(GridData.FILL_HORIZONTAL);
  cmbCursorType.setLayoutData(gdCMBCursorType);
  cmbCursorType.addSelectionListener(this);
  btnCursorImage=new Button(this,SWT.NONE);
  btnCursorImage.setText(Messages.getString(""String_Node_Str""));
  GridData gdBTNCursorImage=new GridData();
  btnCursorImage.setLayoutData(gdBTNCursorImage);
  btnCursorImage.addSelectionListener(this);
  btnCursorImage.setEnabled(false);
  grpValue=new Group(this,SWT.NONE);
  GridData gdGRPValue=new GridData(GridData.FILL_BOTH);
  gdGRPValue.horizontalSpan=3;
  grpValue.setLayoutData(gdGRPValue);
  grpValue.setText(Messages.getString(""String_Node_Str""));
  grpValue.setLayout(slValues);
  cmpDefault=new Composite(grpValue,SWT.NONE);
  cmpCallback=new Composite(grpValue,SWT.NONE);
  cmpCallback.setLayout(new GridLayout());
  addDescriptionLabel(cmpCallback,1,Messages.getString(""String_Node_Str""));
  cmpHighlight=new Composite(grpValue,SWT.NONE);
  cmpHighlight.setLayout(new GridLayout());
  addDescriptionLabel(cmpHighlight,1,Messages.getString(""String_Node_Str""));
  cmpVisiblity=new Composite(grpValue,SWT.NONE);
  cmpVisiblity.setLayout(new GridLayout());
  addDescriptionLabel(cmpVisiblity,1,Messages.getString(""String_Node_Str""));
  cmpDPVisibility=new Composite(grpValue,SWT.NONE);
  cmpDPVisibility.setLayout(new GridLayout());
  addDescriptionLabel(cmpDPVisibility,1,Messages.getString(""String_Node_Str""));
  cmpScript=new Composite(grpValue,SWT.NONE);
  cmpScript.setLayout(new GridLayout(2,false));
  Label lblScript=new Label(cmpScript,SWT.NONE);
{
    GridData gdLBLScript=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
    lblScript.setLayoutData(gdLBLScript);
    lblScript.setText(Messages.getString(""String_Node_Str""));
  }
  txtScript=new Text(cmpScript,SWT.MULTI | SWT.BORDER | SWT.V_SCROLL| SWT.H_SCROLL);
{
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalSpan=2;
    txtScript.setLayoutData(gd);
    txtScript.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  try {
    btnScriptExpBuilder=(IExpressionButton)wizardContext.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpScript,txtScript,wizardContext.getExtendedItem(),getExpressionBuilderScriptCommand(),null);
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  cmpTooltip=new Composite(grpValue,SWT.NONE);
  cmpTooltip.setLayout(new GridLayout(3,false));
  Label lblText=new Label(cmpTooltip,SWT.NONE);
  lblText.setText(Messages.getString(""String_Node_Str""));
  if (bEnableShowTooltipValue) {
    GridData lblGd=new GridData();
    lblGd.horizontalSpan=3;
    lblText.setLayoutData(lblGd);
    txtTooltipText=new Text(cmpTooltip,SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    GridData gdTXTTooltipText=new GridData(GridData.FILL_BOTH);
    gdTXTTooltipText.horizontalSpan=3;
    txtTooltipText.setLayoutData(gdTXTTooltipText);
  }
 else {
    txtTooltipText=new Text(cmpTooltip,SWT.BORDER | SWT.SINGLE);
    txtTooltipText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    try {
      btnTooltipExpBuilder=(IExpressionButton)wizardContext.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpTooltip,txtTooltipText,wizardContext.getExtendedItem(),getExpressionBuilderTooltipCommand(),null);
    }
 catch (    ChartException e) {
      WizardBase.displayException(e);
    }
    addDescriptionLabel(cmpTooltip,3,Messages.getString(""String_Node_Str""));
  }
  createURLComposite(glURL,glParameter);
  multiHyperlinksComposite=new MultipleHyperlinksComposite(grpValue,SWT.NONE,wizardContext,triggerMatrix,optionalStyle);
  populateLists();
}","private void placeComponents(){
  GridLayout glCMPTrigger=new GridLayout();
  glCMPTrigger.numColumns=3;
  glCMPTrigger.horizontalSpacing=16;
  glCMPTrigger.verticalSpacing=5;
  slValues=new StackLayout();
  GridLayout glURL=new GridLayout();
  glURL.marginWidth=2;
  glURL.marginHeight=6;
  glURL.horizontalSpacing=6;
  glURL.numColumns=3;
  GridLayout glParameter=new GridLayout();
  glParameter.marginWidth=2;
  glParameter.marginHeight=6;
  glParameter.horizontalSpacing=6;
  glParameter.numColumns=3;
  this.setLayout(glCMPTrigger);
  Label lblTriggerEvent=new Label(this,SWT.NONE);
  GridData gdLBLTriggerEvent=new GridData();
  gdLBLTriggerEvent.horizontalIndent=4;
  lblTriggerEvent.setLayoutData(gdLBLTriggerEvent);
  lblTriggerEvent.setText(Messages.getString(""String_Node_Str""));
  cmbTriggerType=new TextCombo(this,SWT.NONE);
  GridData gdCMBTriggerType=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBTriggerType.horizontalSpan=2;
  cmbTriggerType.setLayoutData(gdCMBTriggerType);
  cmbTriggerType.addListener(TextCombo.SELECTION_EVENT,new Listener(){
    public void handleEvent(    Event event){
      updateTrigger(lastTriggerType);
      updateActionTypeItems();
      Trigger trigger=(Trigger)triggersMap.get(cmbTriggerType.getText());
      if (trigger != null && triggerMatrix.check(trigger)) {
        cmbActionType.setText(getActionText(trigger));
      }
 else {
        cmbActionType.select(0);
      }
      updateUI(trigger);
      switchUI();
      lastTriggerType=cmbTriggerType.getText();
    }
  }
);
  Label lblActionType=new Label(this,SWT.NONE);
  GridData gdLBLActionType=new GridData();
  gdLBLActionType.horizontalIndent=4;
  lblActionType.setLayoutData(gdLBLActionType);
  lblActionType.setText(Messages.getString(""String_Node_Str""));
  cmbActionType=new Combo(this,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBActionType=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBActionType.horizontalSpan=2;
  cmbActionType.setLayoutData(gdCMBActionType);
  cmbActionType.addSelectionListener(this);
  cmbActionType.setVisibleItemCount(10);
  Label lblCursorType=new Label(this,SWT.NONE);
  GridData gdLBLCursorType=new GridData();
  gdLBLCursorType.horizontalIndent=4;
  lblCursorType.setLayoutData(gdLBLCursorType);
  lblCursorType.setText(Messages.getString(""String_Node_Str""));
  cmbCursorType=new Combo(this,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBCursorType=new GridData(GridData.FILL_HORIZONTAL);
  cmbCursorType.setLayoutData(gdCMBCursorType);
  cmbCursorType.addSelectionListener(this);
  cmbCursorType.setVisibleItemCount(30);
  btnCursorImage=new Button(this,SWT.NONE);
  btnCursorImage.setText(Messages.getString(""String_Node_Str""));
  GridData gdBTNCursorImage=new GridData();
  btnCursorImage.setLayoutData(gdBTNCursorImage);
  btnCursorImage.addSelectionListener(this);
  btnCursorImage.setEnabled(false);
  grpValue=new Group(this,SWT.NONE);
  GridData gdGRPValue=new GridData(GridData.FILL_BOTH);
  gdGRPValue.horizontalSpan=3;
  grpValue.setLayoutData(gdGRPValue);
  grpValue.setText(Messages.getString(""String_Node_Str""));
  grpValue.setLayout(slValues);
  cmpDefault=new Composite(grpValue,SWT.NONE);
  cmpCallback=new Composite(grpValue,SWT.NONE);
  cmpCallback.setLayout(new GridLayout());
  addDescriptionLabel(cmpCallback,1,Messages.getString(""String_Node_Str""));
  cmpHighlight=new Composite(grpValue,SWT.NONE);
  cmpHighlight.setLayout(new GridLayout());
  addDescriptionLabel(cmpHighlight,1,Messages.getString(""String_Node_Str""));
  cmpVisiblity=new Composite(grpValue,SWT.NONE);
  cmpVisiblity.setLayout(new GridLayout());
  addDescriptionLabel(cmpVisiblity,1,Messages.getString(""String_Node_Str""));
  cmpDPVisibility=new Composite(grpValue,SWT.NONE);
  cmpDPVisibility.setLayout(new GridLayout());
  addDescriptionLabel(cmpDPVisibility,1,Messages.getString(""String_Node_Str""));
  cmpScript=new Composite(grpValue,SWT.NONE);
  cmpScript.setLayout(new GridLayout(2,false));
  Label lblScript=new Label(cmpScript,SWT.NONE);
{
    GridData gdLBLScript=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
    lblScript.setLayoutData(gdLBLScript);
    lblScript.setText(Messages.getString(""String_Node_Str""));
  }
  txtScript=new Text(cmpScript,SWT.MULTI | SWT.BORDER | SWT.V_SCROLL| SWT.H_SCROLL);
{
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalSpan=2;
    txtScript.setLayoutData(gd);
    txtScript.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  try {
    btnScriptExpBuilder=(IExpressionButton)wizardContext.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpScript,txtScript,wizardContext.getExtendedItem(),getExpressionBuilderScriptCommand(),null);
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  cmpTooltip=new Composite(grpValue,SWT.NONE);
  cmpTooltip.setLayout(new GridLayout(3,false));
  Label lblText=new Label(cmpTooltip,SWT.NONE);
  lblText.setText(Messages.getString(""String_Node_Str""));
  if (bEnableShowTooltipValue) {
    GridData lblGd=new GridData();
    lblGd.horizontalSpan=3;
    lblText.setLayoutData(lblGd);
    txtTooltipText=new Text(cmpTooltip,SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    GridData gdTXTTooltipText=new GridData(GridData.FILL_BOTH);
    gdTXTTooltipText.horizontalSpan=3;
    txtTooltipText.setLayoutData(gdTXTTooltipText);
  }
 else {
    txtTooltipText=new Text(cmpTooltip,SWT.BORDER | SWT.SINGLE);
    txtTooltipText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    try {
      btnTooltipExpBuilder=(IExpressionButton)wizardContext.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpTooltip,txtTooltipText,wizardContext.getExtendedItem(),getExpressionBuilderTooltipCommand(),null);
    }
 catch (    ChartException e) {
      WizardBase.displayException(e);
    }
    addDescriptionLabel(cmpTooltip,3,Messages.getString(""String_Node_Str""));
  }
  createURLComposite(glURL,glParameter);
  multiHyperlinksComposite=new MultipleHyperlinksComposite(grpValue,SWT.NONE,wizardContext,triggerMatrix,optionalStyle);
  populateLists();
}",0.996607364501448
68508,"private void populateAggFuncNames(){
  String aggFuncName=null;
  fCmbAggregate.removeAll();
  populateAggregationCombo(fCmbAggregate);
  if (fGrouping.isEnabled() && fGrouping.getAggregateExpression() != null) {
    int idx=getAggregateIndexByName(fGrouping.getAggregateExpression());
    if (fCmbAggregate.getItemCount() > idx) {
      fCmbAggregate.select(idx);
    }
  }
 else   if (fCmbAggregate.getItemCount() > 0) {
    fCmbAggregate.select(0);
  }
  aggFuncName=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
  showAggregateParameters(aggFuncName);
}","private void populateAggFuncNames(){
  String aggFuncName=null;
  fCmbAggregate.removeAll();
  populateAggregationCombo(fCmbAggregate);
  fCmbAggregate.setVisibleItemCount(30);
  if (fGrouping.isEnabled() && fGrouping.getAggregateExpression() != null) {
    int idx=getAggregateIndexByName(fGrouping.getAggregateExpression());
    if (fCmbAggregate.getItemCount() > idx) {
      fCmbAggregate.select(idx);
    }
  }
 else   if (fCmbAggregate.getItemCount() > 0) {
    fCmbAggregate.select(0);
  }
  aggFuncName=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
  showAggregateParameters(aggFuncName);
}",0.9660314830157416
68509,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_MARKERS);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  GridLayout glList=new GridLayout();
  glList.numColumns=3;
  glList.horizontalSpacing=5;
  glList.verticalSpacing=5;
  glList.marginHeight=0;
  glList.marginWidth=0;
  cmpList=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPList=new GridData(GridData.FILL_BOTH);
  gdCMPList.horizontalSpan=2;
  cmpList.setLayoutData(gdCMPList);
  cmpList.setLayout(glList);
  GridLayout glButtons=new GridLayout();
  glButtons.numColumns=3;
  glButtons.horizontalSpacing=5;
  glButtons.verticalSpacing=5;
  glButtons.marginHeight=5;
  glButtons.marginWidth=0;
  Composite cmpButtons=new Composite(cmpList,SWT.NONE);
  GridData gdCMPButtons=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPButtons.horizontalSpan=3;
  cmpButtons.setLayoutData(gdCMPButtons);
  cmpButtons.setLayout(glButtons);
  btnAddLine=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAddLine=new GridData(GridData.FILL_HORIZONTAL);
  btnAddLine.setLayoutData(gdBTNAddLine);
  btnAddLine.setText(Messages.getString(""String_Node_Str""));
  btnAddLine.addSelectionListener(this);
  btnAddRange=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAddRange=new GridData(GridData.FILL_HORIZONTAL);
  btnAddRange.setLayoutData(gdBTNAddRange);
  btnAddRange.setText(Messages.getString(""String_Node_Str""));
  btnAddRange.addSelectionListener(this);
  btnRemove=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNRemove=new GridData(GridData.FILL_HORIZONTAL);
  btnRemove.setLayoutData(gdBTNRemove);
  btnRemove.setText(Messages.getString(""String_Node_Str""));
  btnRemove.addSelectionListener(this);
  lstMarkers=new List(cmpList,SWT.BORDER | SWT.SINGLE | SWT.V_SCROLL);
  GridData gdLSTMarkers=new GridData(GridData.FILL_HORIZONTAL);
  gdLSTMarkers.horizontalSpan=3;
  gdLSTMarkers.heightHint=100;
  lstMarkers.setLayoutData(gdLSTMarkers);
  lstMarkers.addSelectionListener(this);
  slMarkers=new StackLayout();
  slMarkers.marginHeight=0;
  slMarkers.marginWidth=0;
  grpGeneral=new Group(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  grpGeneral.setLayoutData(gdCMPGeneral);
  grpGeneral.setLayout(slMarkers);
  grpGeneral.setText(Messages.getString(""String_Node_Str""));
  GridLayout glMarkerLine=new GridLayout();
  glMarkerLine.numColumns=3;
  glMarkerLine.horizontalSpacing=5;
  glMarkerLine.verticalSpacing=5;
  glMarkerLine.marginHeight=7;
  glMarkerLine.marginWidth=7;
  cmpLine=new Composite(grpGeneral,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_HORIZONTAL);
  cmpLine.setLayoutData(gdGRPLine);
  cmpLine.setLayout(glMarkerLine);
  lblValue=new Label(cmpLine,SWT.NONE);
  GridData gdLBLValue=new GridData();
  gdLBLValue.horizontalIndent=5;
  lblValue.setLayoutData(gdLBLValue);
  lblValue.setText(Messages.getString(""String_Node_Str""));
  txtValue=createValuePicker(cmpLine,null);
  btnLineFormatSpecifier=new Button(cmpLine,SWT.PUSH);
  GridData gdBTNLineFormatSpecifier=new GridData();
  gdBTNLineFormatSpecifier.heightHint=20;
  btnLineFormatSpecifier.setLayoutData(gdBTNLineFormatSpecifier);
  btnLineFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnLineFormatSpecifier.addSelectionListener(this);
  btnLineFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblAnchor=new Label(cmpLine,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  gdLBLAnchor.horizontalIndent=5;
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbLineAnchor=new Combo(cmpLine,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBAnchor.horizontalSpan=2;
  cmbLineAnchor.setLayoutData(gdCMBAnchor);
  cmbLineAnchor.addSelectionListener(this);
  grpMarkerLine=new Group(cmpLine,SWT.NONE);
  GridData gdGRPMarkerLine=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPMarkerLine.horizontalSpan=3;
  grpMarkerLine.setLayoutData(gdGRPMarkerLine);
  grpMarkerLine.setLayout(new FillLayout());
  grpMarkerLine.setText(Messages.getString(""String_Node_Str""));
  liacMarkerLine=new LineAttributesComposite(grpMarkerLine,SWT.NONE,getContext(),null,true,true,true);
  liacMarkerLine.addListener(this);
  btnLineTriggers=new Button(cmpLine,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnLineTriggers.setLayoutData(gd);
    btnLineTriggers.setText(Messages.getString(""String_Node_Str""));
    btnLineTriggers.addSelectionListener(this);
    btnLineTriggers.setEnabled(getChart().getInteractivity().isEnable());
  }
  GridLayout glMarkerRange=new GridLayout();
  glMarkerRange.numColumns=3;
  glMarkerRange.horizontalSpacing=5;
  glMarkerRange.verticalSpacing=5;
  glMarkerRange.marginHeight=7;
  glMarkerRange.marginWidth=7;
  cmpRange=new Composite(grpGeneral,SWT.NONE);
  GridData gdGRPRange=new GridData(GridData.FILL_HORIZONTAL);
  cmpRange.setLayoutData(gdGRPRange);
  cmpRange.setLayout(glMarkerRange);
  lblStartValue=new Label(cmpRange,SWT.NONE);
  GridData gdLBLStartValue=new GridData();
  gdLBLStartValue.horizontalIndent=5;
  lblStartValue.setLayoutData(gdLBLStartValue);
  lblStartValue.setText(Messages.getString(""String_Node_Str""));
  txtStartValue=createValuePicker(cmpRange,null);
  btnStartFormatSpecifier=new Button(cmpRange,SWT.PUSH);
  GridData gdBTNStartFormatSpecifier=new GridData();
  gdBTNStartFormatSpecifier.heightHint=18;
  btnStartFormatSpecifier.setLayoutData(gdBTNStartFormatSpecifier);
  btnStartFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnStartFormatSpecifier.addSelectionListener(this);
  btnStartFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblEndValue=new Label(cmpRange,SWT.NONE);
  GridData gdLBLEndValue=new GridData();
  gdLBLEndValue.horizontalIndent=5;
  lblEndValue.setLayoutData(gdLBLEndValue);
  lblEndValue.setText(Messages.getString(""String_Node_Str""));
  txtEndValue=createValuePicker(cmpRange,null);
  btnEndFormatSpecifier=new Button(cmpRange,SWT.PUSH);
  GridData gdBTNEndFormatSpecifier=new GridData();
  gdBTNEndFormatSpecifier.heightHint=18;
  btnEndFormatSpecifier.setLayoutData(gdBTNEndFormatSpecifier);
  btnEndFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnEndFormatSpecifier.addSelectionListener(this);
  btnEndFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblRangeAnchor=new Label(cmpRange,SWT.NONE);
  GridData gdLBLRangeAnchor=new GridData();
  gdLBLRangeAnchor.horizontalIndent=5;
  lblRangeAnchor.setLayoutData(gdLBLRangeAnchor);
  lblRangeAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbRangeAnchor=new Combo(cmpRange,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBRangeAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBRangeAnchor.horizontalSpan=2;
  cmbRangeAnchor.setLayoutData(gdCMBRangeAnchor);
  cmbRangeAnchor.addSelectionListener(this);
  lblRangeFill=new Label(cmpRange,SWT.NONE);
  GridData gdLBLRangeFill=new GridData();
  gdLBLRangeFill.horizontalIndent=5;
  lblRangeFill.setLayoutData(gdLBLRangeFill);
  lblRangeFill.setText(Messages.getString(""String_Node_Str""));
  fccRange=new FillChooserComposite(cmpRange,SWT.NONE,getContext(),null,true,true);
  GridData gdFCCRange=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCRange.horizontalSpan=2;
  fccRange.setLayoutData(gdFCCRange);
  fccRange.addListener(this);
  grpMarkerRange=new Group(cmpRange,SWT.NONE);
  GridData gdGRPMarkerRange=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPMarkerRange.horizontalSpan=3;
  grpMarkerRange.setLayoutData(gdGRPMarkerRange);
  grpMarkerRange.setLayout(new FillLayout());
  grpMarkerRange.setText(Messages.getString(""String_Node_Str""));
  liacMarkerRange=new LineAttributesComposite(grpMarkerRange,SWT.NONE,getContext(),null,true,true,true);
  liacMarkerRange.addListener(this);
  btnRangeTriggers=new Button(cmpRange,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnRangeTriggers.setLayoutData(gd);
    btnRangeTriggers.setText(Messages.getString(""String_Node_Str""));
    btnRangeTriggers.addSelectionListener(this);
    btnRangeTriggers.setEnabled(getChart().getInteractivity().isEnable());
  }
  LabelAttributesContext attributesContext=new LabelAttributesContext();
  attributesContext.isPositionEnabled=false;
  attributesContext.isFontAlignmentEnabled=false;
  attributesContext.isLabelEnabled=true;
  lacLabel=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),Position.ABOVE_LITERAL,LabelImpl.create(),getChart().getUnits());
  GridData gdLACLabel=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  lacLabel.setLayoutData(gdLACLabel);
  lacLabel.addListener(this);
  slMarkers.topControl=cmpLine;
  populateLists();
  refreshButtons();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_MARKERS);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  GridLayout glList=new GridLayout();
  glList.numColumns=3;
  glList.horizontalSpacing=5;
  glList.verticalSpacing=5;
  glList.marginHeight=0;
  glList.marginWidth=0;
  cmpList=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPList=new GridData(GridData.FILL_BOTH);
  gdCMPList.horizontalSpan=2;
  cmpList.setLayoutData(gdCMPList);
  cmpList.setLayout(glList);
  GridLayout glButtons=new GridLayout();
  glButtons.numColumns=3;
  glButtons.horizontalSpacing=5;
  glButtons.verticalSpacing=5;
  glButtons.marginHeight=5;
  glButtons.marginWidth=0;
  Composite cmpButtons=new Composite(cmpList,SWT.NONE);
  GridData gdCMPButtons=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPButtons.horizontalSpan=3;
  cmpButtons.setLayoutData(gdCMPButtons);
  cmpButtons.setLayout(glButtons);
  btnAddLine=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAddLine=new GridData(GridData.FILL_HORIZONTAL);
  btnAddLine.setLayoutData(gdBTNAddLine);
  btnAddLine.setText(Messages.getString(""String_Node_Str""));
  btnAddLine.addSelectionListener(this);
  btnAddRange=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAddRange=new GridData(GridData.FILL_HORIZONTAL);
  btnAddRange.setLayoutData(gdBTNAddRange);
  btnAddRange.setText(Messages.getString(""String_Node_Str""));
  btnAddRange.addSelectionListener(this);
  btnRemove=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNRemove=new GridData(GridData.FILL_HORIZONTAL);
  btnRemove.setLayoutData(gdBTNRemove);
  btnRemove.setText(Messages.getString(""String_Node_Str""));
  btnRemove.addSelectionListener(this);
  lstMarkers=new List(cmpList,SWT.BORDER | SWT.SINGLE | SWT.V_SCROLL);
  GridData gdLSTMarkers=new GridData(GridData.FILL_HORIZONTAL);
  gdLSTMarkers.horizontalSpan=3;
  gdLSTMarkers.heightHint=100;
  lstMarkers.setLayoutData(gdLSTMarkers);
  lstMarkers.addSelectionListener(this);
  slMarkers=new StackLayout();
  slMarkers.marginHeight=0;
  slMarkers.marginWidth=0;
  grpGeneral=new Group(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  grpGeneral.setLayoutData(gdCMPGeneral);
  grpGeneral.setLayout(slMarkers);
  grpGeneral.setText(Messages.getString(""String_Node_Str""));
  GridLayout glMarkerLine=new GridLayout();
  glMarkerLine.numColumns=3;
  glMarkerLine.horizontalSpacing=5;
  glMarkerLine.verticalSpacing=5;
  glMarkerLine.marginHeight=7;
  glMarkerLine.marginWidth=7;
  cmpLine=new Composite(grpGeneral,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_HORIZONTAL);
  cmpLine.setLayoutData(gdGRPLine);
  cmpLine.setLayout(glMarkerLine);
  lblValue=new Label(cmpLine,SWT.NONE);
  GridData gdLBLValue=new GridData();
  gdLBLValue.horizontalIndent=5;
  lblValue.setLayoutData(gdLBLValue);
  lblValue.setText(Messages.getString(""String_Node_Str""));
  txtValue=createValuePicker(cmpLine,null);
  btnLineFormatSpecifier=new Button(cmpLine,SWT.PUSH);
  GridData gdBTNLineFormatSpecifier=new GridData();
  gdBTNLineFormatSpecifier.heightHint=20;
  btnLineFormatSpecifier.setLayoutData(gdBTNLineFormatSpecifier);
  btnLineFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnLineFormatSpecifier.addSelectionListener(this);
  btnLineFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblAnchor=new Label(cmpLine,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  gdLBLAnchor.horizontalIndent=5;
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbLineAnchor=new Combo(cmpLine,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBAnchor.horizontalSpan=2;
  cmbLineAnchor.setLayoutData(gdCMBAnchor);
  cmbLineAnchor.addSelectionListener(this);
  cmbLineAnchor.setVisibleItemCount(30);
  grpMarkerLine=new Group(cmpLine,SWT.NONE);
  GridData gdGRPMarkerLine=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPMarkerLine.horizontalSpan=3;
  grpMarkerLine.setLayoutData(gdGRPMarkerLine);
  grpMarkerLine.setLayout(new FillLayout());
  grpMarkerLine.setText(Messages.getString(""String_Node_Str""));
  liacMarkerLine=new LineAttributesComposite(grpMarkerLine,SWT.NONE,getContext(),null,true,true,true);
  liacMarkerLine.addListener(this);
  btnLineTriggers=new Button(cmpLine,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnLineTriggers.setLayoutData(gd);
    btnLineTriggers.setText(Messages.getString(""String_Node_Str""));
    btnLineTriggers.addSelectionListener(this);
    btnLineTriggers.setEnabled(getChart().getInteractivity().isEnable());
  }
  GridLayout glMarkerRange=new GridLayout();
  glMarkerRange.numColumns=3;
  glMarkerRange.horizontalSpacing=5;
  glMarkerRange.verticalSpacing=5;
  glMarkerRange.marginHeight=7;
  glMarkerRange.marginWidth=7;
  cmpRange=new Composite(grpGeneral,SWT.NONE);
  GridData gdGRPRange=new GridData(GridData.FILL_HORIZONTAL);
  cmpRange.setLayoutData(gdGRPRange);
  cmpRange.setLayout(glMarkerRange);
  lblStartValue=new Label(cmpRange,SWT.NONE);
  GridData gdLBLStartValue=new GridData();
  gdLBLStartValue.horizontalIndent=5;
  lblStartValue.setLayoutData(gdLBLStartValue);
  lblStartValue.setText(Messages.getString(""String_Node_Str""));
  txtStartValue=createValuePicker(cmpRange,null);
  btnStartFormatSpecifier=new Button(cmpRange,SWT.PUSH);
  GridData gdBTNStartFormatSpecifier=new GridData();
  gdBTNStartFormatSpecifier.heightHint=18;
  btnStartFormatSpecifier.setLayoutData(gdBTNStartFormatSpecifier);
  btnStartFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnStartFormatSpecifier.addSelectionListener(this);
  btnStartFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblEndValue=new Label(cmpRange,SWT.NONE);
  GridData gdLBLEndValue=new GridData();
  gdLBLEndValue.horizontalIndent=5;
  lblEndValue.setLayoutData(gdLBLEndValue);
  lblEndValue.setText(Messages.getString(""String_Node_Str""));
  txtEndValue=createValuePicker(cmpRange,null);
  btnEndFormatSpecifier=new Button(cmpRange,SWT.PUSH);
  GridData gdBTNEndFormatSpecifier=new GridData();
  gdBTNEndFormatSpecifier.heightHint=18;
  btnEndFormatSpecifier.setLayoutData(gdBTNEndFormatSpecifier);
  btnEndFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnEndFormatSpecifier.addSelectionListener(this);
  btnEndFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblRangeAnchor=new Label(cmpRange,SWT.NONE);
  GridData gdLBLRangeAnchor=new GridData();
  gdLBLRangeAnchor.horizontalIndent=5;
  lblRangeAnchor.setLayoutData(gdLBLRangeAnchor);
  lblRangeAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbRangeAnchor=new Combo(cmpRange,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBRangeAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBRangeAnchor.horizontalSpan=2;
  cmbRangeAnchor.setLayoutData(gdCMBRangeAnchor);
  cmbRangeAnchor.addSelectionListener(this);
  cmbRangeAnchor.setVisibleItemCount(30);
  lblRangeFill=new Label(cmpRange,SWT.NONE);
  GridData gdLBLRangeFill=new GridData();
  gdLBLRangeFill.horizontalIndent=5;
  lblRangeFill.setLayoutData(gdLBLRangeFill);
  lblRangeFill.setText(Messages.getString(""String_Node_Str""));
  fccRange=new FillChooserComposite(cmpRange,SWT.NONE,getContext(),null,true,true);
  GridData gdFCCRange=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCRange.horizontalSpan=2;
  fccRange.setLayoutData(gdFCCRange);
  fccRange.addListener(this);
  grpMarkerRange=new Group(cmpRange,SWT.NONE);
  GridData gdGRPMarkerRange=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPMarkerRange.horizontalSpan=3;
  grpMarkerRange.setLayoutData(gdGRPMarkerRange);
  grpMarkerRange.setLayout(new FillLayout());
  grpMarkerRange.setText(Messages.getString(""String_Node_Str""));
  liacMarkerRange=new LineAttributesComposite(grpMarkerRange,SWT.NONE,getContext(),null,true,true,true);
  liacMarkerRange.addListener(this);
  btnRangeTriggers=new Button(cmpRange,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnRangeTriggers.setLayoutData(gd);
    btnRangeTriggers.setText(Messages.getString(""String_Node_Str""));
    btnRangeTriggers.addSelectionListener(this);
    btnRangeTriggers.setEnabled(getChart().getInteractivity().isEnable());
  }
  LabelAttributesContext attributesContext=new LabelAttributesContext();
  attributesContext.isPositionEnabled=false;
  attributesContext.isFontAlignmentEnabled=false;
  attributesContext.isLabelEnabled=true;
  lacLabel=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),Position.ABOVE_LITERAL,LabelImpl.create(),getChart().getUnits());
  GridData gdLACLabel=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  lacLabel.setLayoutData(gdLACLabel);
  lacLabel.addListener(this);
  slMarkers.topControl=cmpLine;
  populateLists();
  refreshButtons();
  return cmpContent;
}",0.9954805336237408
68510,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_PLOT_AREA_FORMAT);
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(new GridLayout());
  Group grpAreaIncluding=new Group(cmpContent,SWT.NONE);
{
    grpAreaIncluding.setLayout(new GridLayout(2,true));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    grpAreaIncluding.setLayoutData(gd);
    grpAreaIncluding.setText(getChart() instanceof ChartWithAxes ? Messages.getString(""String_Node_Str"") : Messages.getString(""String_Node_Str""));
  }
  Composite leftComp=new Composite(grpAreaIncluding,SWT.NONE);
  GridData gdL=new GridData(GridData.FILL_HORIZONTAL);
  leftComp.setLayout(new GridLayout(3,false));
  leftComp.setLayoutData(gdL);
  Composite rightComp=new Composite(grpAreaIncluding,SWT.NONE);
  GridData gdR=new GridData(GridData.FILL_HORIZONTAL);
  rightComp.setLayout(new GridLayout(1,false));
  rightComp.setLayoutData(gdR);
  Label lblAnchor=new Label(leftComp,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(leftComp,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCBAnchor.horizontalSpan=2;
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  Label lblStretch=new Label(leftComp,SWT.NONE);
{
    GridData gd=new GridData();
    lblStretch.setLayoutData(gd);
    lblStretch.setText(Messages.getString(""String_Node_Str""));
  }
  cmbStretch=new Combo(leftComp,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmbStretch.setLayoutData(gd);
    cmbStretch.addSelectionListener(this);
  }
  Label lblVerticalSpacing=new Label(leftComp,SWT.NONE);
  lblVerticalSpacing.setLayoutData(new GridData());
  lblVerticalSpacing.setText(Messages.getString(""String_Node_Str""));
  iscVSpacing=new IntegerSpinControl(leftComp,SWT.NONE,getBlockForProcessing().getVerticalSpacing());
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  iscVSpacing.setLayoutData(gd);
  iscVSpacing.addListener(this);
  Label lblHorizontalSpacing=new Label(leftComp,SWT.NONE);
  lblHorizontalSpacing.setLayoutData(new GridData());
  lblHorizontalSpacing.setText(Messages.getString(""String_Node_Str""));
  iscHSpacing=new IntegerSpinControl(leftComp,SWT.NONE,getBlockForProcessing().getHorizontalSpacing());
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  iscHSpacing.setLayoutData(gd);
  iscHSpacing.addListener(this);
  new Label(leftComp,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  txtHeight=new LocalizedNumberEditorComposite(leftComp,SWT.BORDER);
  new TextNumberEditorAssistField(txtHeight.getTextControl(),null);
{
    txtHeight.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    txtHeight.addModifyListener(this);
  }
  btnHeight=new Button(leftComp,SWT.CHECK);
  btnHeight.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData();
  btnHeight.setLayoutData(gd);
  btnHeight.addSelectionListener(this);
  new Label(leftComp,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  txtWidth=new LocalizedNumberEditorComposite(leftComp,SWT.BORDER);
  new TextNumberEditorAssistField(txtWidth.getTextControl(),null);
{
    txtWidth.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    txtWidth.addModifyListener(this);
  }
  btnWidth=new Button(leftComp,SWT.CHECK);
  btnWidth.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData();
  btnWidth.setLayoutData(gd);
  btnWidth.addSelectionListener(this);
  updateHeightWidthHint();
  Group grpOutline=new Group(rightComp,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.widthHint=150;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineIncluding=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getBlockForProcessing().getOutline(),true,true,false);
  outlineIncluding.addListener(this);
  icIncluding=new InsetsComposite(rightComp,SWT.NONE,getBlockForProcessing().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  icIncluding.setLayoutData(gdInsets);
  Group grpAreaWithin=new Group(cmpContent,SWT.NONE);
{
    grpAreaWithin.setLayout(new GridLayout(4,false));
    gd=new GridData(GridData.FILL_HORIZONTAL);
    grpAreaWithin.setLayoutData(gd);
    grpAreaWithin.setText(getChart() instanceof ChartWithAxes ? Messages.getString(""String_Node_Str"") : Messages.getString(""String_Node_Str""));
  }
  createClientArea(grpAreaWithin);
  populateLists();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_PLOT_AREA_FORMAT);
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(new GridLayout());
  Group grpAreaIncluding=new Group(cmpContent,SWT.NONE);
{
    grpAreaIncluding.setLayout(new GridLayout(2,true));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    grpAreaIncluding.setLayoutData(gd);
    grpAreaIncluding.setText(getChart() instanceof ChartWithAxes ? Messages.getString(""String_Node_Str"") : Messages.getString(""String_Node_Str""));
  }
  Composite leftComp=new Composite(grpAreaIncluding,SWT.NONE);
  GridData gdL=new GridData(GridData.FILL_HORIZONTAL);
  leftComp.setLayout(new GridLayout(3,false));
  leftComp.setLayoutData(gdL);
  Composite rightComp=new Composite(grpAreaIncluding,SWT.NONE);
  GridData gdR=new GridData(GridData.FILL_HORIZONTAL);
  rightComp.setLayout(new GridLayout(1,false));
  rightComp.setLayoutData(gdR);
  Label lblAnchor=new Label(leftComp,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(leftComp,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCBAnchor.horizontalSpan=2;
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Label lblStretch=new Label(leftComp,SWT.NONE);
{
    GridData gd=new GridData();
    lblStretch.setLayoutData(gd);
    lblStretch.setText(Messages.getString(""String_Node_Str""));
  }
  cmbStretch=new Combo(leftComp,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmbStretch.setLayoutData(gd);
    cmbStretch.addSelectionListener(this);
  }
  Label lblVerticalSpacing=new Label(leftComp,SWT.NONE);
  lblVerticalSpacing.setLayoutData(new GridData());
  lblVerticalSpacing.setText(Messages.getString(""String_Node_Str""));
  iscVSpacing=new IntegerSpinControl(leftComp,SWT.NONE,getBlockForProcessing().getVerticalSpacing());
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  iscVSpacing.setLayoutData(gd);
  iscVSpacing.addListener(this);
  Label lblHorizontalSpacing=new Label(leftComp,SWT.NONE);
  lblHorizontalSpacing.setLayoutData(new GridData());
  lblHorizontalSpacing.setText(Messages.getString(""String_Node_Str""));
  iscHSpacing=new IntegerSpinControl(leftComp,SWT.NONE,getBlockForProcessing().getHorizontalSpacing());
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  iscHSpacing.setLayoutData(gd);
  iscHSpacing.addListener(this);
  new Label(leftComp,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  txtHeight=new LocalizedNumberEditorComposite(leftComp,SWT.BORDER);
  new TextNumberEditorAssistField(txtHeight.getTextControl(),null);
{
    txtHeight.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    txtHeight.addModifyListener(this);
  }
  btnHeight=new Button(leftComp,SWT.CHECK);
  btnHeight.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData();
  btnHeight.setLayoutData(gd);
  btnHeight.addSelectionListener(this);
  new Label(leftComp,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  txtWidth=new LocalizedNumberEditorComposite(leftComp,SWT.BORDER);
  new TextNumberEditorAssistField(txtWidth.getTextControl(),null);
{
    txtWidth.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    txtWidth.addModifyListener(this);
  }
  btnWidth=new Button(leftComp,SWT.CHECK);
  btnWidth.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData();
  btnWidth.setLayoutData(gd);
  btnWidth.addSelectionListener(this);
  updateHeightWidthHint();
  Group grpOutline=new Group(rightComp,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.widthHint=150;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineIncluding=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getBlockForProcessing().getOutline(),true,true,false);
  outlineIncluding.addListener(this);
  icIncluding=new InsetsComposite(rightComp,SWT.NONE,getBlockForProcessing().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  icIncluding.setLayoutData(gdInsets);
  Group grpAreaWithin=new Group(cmpContent,SWT.NONE);
{
    grpAreaWithin.setLayout(new GridLayout(4,false));
    gd=new GridData(GridData.FILL_HORIZONTAL);
    grpAreaWithin.setLayoutData(gd);
    grpAreaWithin.setText(getChart() instanceof ChartWithAxes ? Messages.getString(""String_Node_Str"") : Messages.getString(""String_Node_Str""));
  }
  createClientArea(grpAreaWithin);
  populateLists();
  return cmpContent;
}",0.9961992809450436
68511,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TITLE_BLOCK);
  GridLayout glContent=new GridLayout();
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  grpGeneral=new Group(cmpContent,SWT.NONE);
{
    GridLayout glGeneral=new GridLayout();
    glGeneral.verticalSpacing=10;
    glGeneral.marginHeight=7;
    glGeneral.marginWidth=7;
    GridData gdCMPGeneral=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
    grpGeneral.setLayoutData(gdCMPGeneral);
    grpGeneral.setLayout(glGeneral);
    grpGeneral.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpGeneralTop=new Composite(grpGeneral,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    layout.horizontalSpacing=5;
    layout.verticalSpacing=5;
    cmpGeneralTop.setLayout(layout);
    cmpGeneralTop.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label lblAnchor=new Label(cmpGeneralTop,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpGeneralTop,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  Label lblStretch=new Label(cmpGeneralTop,SWT.NONE);
  GridData gdLBLStretch=new GridData();
  lblStretch.setLayoutData(gdLBLStretch);
  lblStretch.setText(Messages.getString(""String_Node_Str""));
  cmbStretch=new Combo(cmpGeneralTop,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBStretch=new GridData(GridData.FILL_HORIZONTAL);
  cmbStretch.setLayoutData(gdCBStretch);
  cmbStretch.addSelectionListener(this);
  Label lblBackground=new Label(cmpGeneralTop,SWT.NONE);
  GridData gdLBLBackground=new GridData();
  lblBackground.setLayoutData(gdLBLBackground);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(cmpGeneralTop,SWT.NONE,getContext(),getBlockForProcessing().getBackground(),true,true);
  GridData gdFCCBackground=new GridData(GridData.FILL_HORIZONTAL);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  grpOutline=new Group(grpGeneral,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getBlockForProcessing().getOutline(),true,true,true);
  liacOutline.addListener(this);
  ic=new InsetsComposite(grpGeneral,SWT.NONE,getBlockForProcessing().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  ic.setLayoutData(gdInsets);
  populateLists();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TITLE_BLOCK);
  GridLayout glContent=new GridLayout();
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  grpGeneral=new Group(cmpContent,SWT.NONE);
{
    GridLayout glGeneral=new GridLayout();
    glGeneral.verticalSpacing=10;
    glGeneral.marginHeight=7;
    glGeneral.marginWidth=7;
    GridData gdCMPGeneral=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
    grpGeneral.setLayoutData(gdCMPGeneral);
    grpGeneral.setLayout(glGeneral);
    grpGeneral.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpGeneralTop=new Composite(grpGeneral,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    layout.horizontalSpacing=5;
    layout.verticalSpacing=5;
    cmpGeneralTop.setLayout(layout);
    cmpGeneralTop.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label lblAnchor=new Label(cmpGeneralTop,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpGeneralTop,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Label lblStretch=new Label(cmpGeneralTop,SWT.NONE);
  GridData gdLBLStretch=new GridData();
  lblStretch.setLayoutData(gdLBLStretch);
  lblStretch.setText(Messages.getString(""String_Node_Str""));
  cmbStretch=new Combo(cmpGeneralTop,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBStretch=new GridData(GridData.FILL_HORIZONTAL);
  cmbStretch.setLayoutData(gdCBStretch);
  cmbStretch.addSelectionListener(this);
  Label lblBackground=new Label(cmpGeneralTop,SWT.NONE);
  GridData gdLBLBackground=new GridData();
  lblBackground.setLayoutData(gdLBLBackground);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(cmpGeneralTop,SWT.NONE,getContext(),getBlockForProcessing().getBackground(),true,true);
  GridData gdFCCBackground=new GridData(GridData.FILL_HORIZONTAL);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  grpOutline=new Group(grpGeneral,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getBlockForProcessing().getOutline(),true,true,true);
  liacOutline.addListener(this);
  ic=new InsetsComposite(grpGeneral,SWT.NONE,getBlockForProcessing().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  ic.setLayoutData(gdInsets);
  populateLists();
  return cmpContent;
}",0.9940504904325456
68512,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendline().getLabel().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,getContext(),getTrendline().getLineAttributes(),true,true,false);
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnVisible=new Button(cmpLabelInner,SWT.CHECK);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnVisible.setLayoutData(gdCBVisible);
  btnVisible.setSelection(getTrendline().getLabel().isVisible());
  btnVisible.setText(Messages.getString(""String_Node_Str""));
  btnVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getTrendline().getLabel().getOutline(),true,true,true);
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getTrendline().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  populateLists();
  setState(btnVisible.getSelection());
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendline().getLabel().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,getContext(),getTrendline().getLineAttributes(),true,true,false);
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnVisible=new Button(cmpLabelInner,SWT.CHECK);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnVisible.setLayoutData(gdCBVisible);
  btnVisible.setSelection(getTrendline().getLabel().isVisible());
  btnVisible.setText(Messages.getString(""String_Node_Str""));
  btnVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getTrendline().getLabel().getOutline(),true,true,true);
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getTrendline().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  populateLists();
  setState(btnVisible.getSelection());
  return cmpContent;
}",0.9963729046171944
68513,"private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(altText,entry);
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    byte[] data=imageInfo.getData();
    if (data != null) {
      return createData(image,entry,container,type,imageInfo);
    }
 else {
      return createData(image.getAltText(),entry);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    return createData(image.getAltText(),entry);
  }
}","private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(altText,entry);
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    byte[] data=imageInfo.getData();
    if (data != null) {
      return createData(image,entry,container,type,imageInfo);
    }
 else {
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
      return createData(image.getAltText(),entry);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(image.getAltText(),entry);
  }
}",0.9361510791366906
68514,"private Location[] computeRiserRectangle2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[4];
  dX=Math.round(dX);
  dY=Math.round(dY);
  dWidth=Math.round(dWidth);
  dHeight=Math.round(dHeight);
  loaFrontFace[0]=goFactory.createLocation(dX,dY);
  loaFrontFace[1]=goFactory.createLocation(dX,dY + dHeight);
  loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY + dHeight);
  loaFrontFace[3]=goFactory.createLocation(dX + dWidth,dY);
  if (isTransposed()) {
    faX[i]=bInverted ? dX + dWidth : dX;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    faX[i]=(dX + dWidth / 2);
    faY[i]=bInverted ? dY + dHeight : dY;
  }
  return loaFrontFace;
}","private Location[] computeRiserRectangle2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[4];
  loaFrontFace[0]=goFactory.createLocation(dX,dY);
  loaFrontFace[1]=goFactory.createLocation(dX,dY + dHeight);
  loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY + dHeight);
  loaFrontFace[3]=goFactory.createLocation(dX + dWidth,dY);
  if (isTransposed()) {
    faX[i]=bInverted ? dX + dWidth : dX;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    faX[i]=(dX + dWidth / 2);
    faY[i]=bInverted ? dY + dHeight : dY;
  }
  return loaFrontFace;
}",0.9258720930232558
68515,"private Location[] computeRiserTube2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[4];
  dX=Math.round(dX);
  dY=Math.round(dY);
  dWidth=Math.round(dWidth);
  dHeight=Math.round(dHeight);
  loaFrontFace[0]=goFactory.createLocation(dX,dY);
  loaFrontFace[1]=goFactory.createLocation(dX,dY + dHeight);
  loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY + dHeight);
  loaFrontFace[3]=goFactory.createLocation(dX + dWidth,dY);
  if (isTransposed()) {
    faX[i]=bInverted ? (dX + dWidth) : dX;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    faX[i]=(dX + dWidth / 2);
    faY[i]=bInverted ? dY + dHeight : dY;
  }
  return loaFrontFace;
}","private Location[] computeRiserTube2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[4];
  loaFrontFace[0]=goFactory.createLocation(dX,dY);
  loaFrontFace[1]=goFactory.createLocation(dX,dY + dHeight);
  loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY + dHeight);
  loaFrontFace[3]=goFactory.createLocation(dX + dWidth,dY);
  if (isTransposed()) {
    faX[i]=bInverted ? (dX + dWidth) : dX;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    faX[i]=(dX + dWidth / 2);
    faY[i]=bInverted ? dY + dHeight : dY;
  }
  return loaFrontFace;
}",0.9255474452554744
68516,"private Location[] computeRiserTriangle2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[3];
  dX=Math.round(dX);
  dY=Math.round(dY);
  dWidth=Math.round(dWidth);
  dHeight=Math.round(dHeight);
  if (isTransposed()) {
    final double dX1=bInverted ? dX : dX + dWidth;
    final double dX2=bInverted ? dX + dWidth : dX;
    loaFrontFace[0]=goFactory.createLocation(dX1,dY + dHeight);
    loaFrontFace[1]=goFactory.createLocation(dX2,dY + dHeight / 2);
    loaFrontFace[2]=goFactory.createLocation(dX1,dY);
    faX[i]=dX2;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    final double dY1=bInverted ? dY : dY + dHeight;
    final double dY2=bInverted ? dY + dHeight : dY;
    loaFrontFace[0]=goFactory.createLocation(dX,dY1);
    loaFrontFace[1]=goFactory.createLocation(dX + dWidth / 2,dY2);
    loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY1);
    faX[i]=(dX + dWidth / 2);
    faY[i]=(dY2);
  }
  return loaFrontFace;
}","private Location[] computeRiserTriangle2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[3];
  if (isTransposed()) {
    final double dX1=bInverted ? dX : dX + dWidth;
    final double dX2=bInverted ? dX + dWidth : dX;
    loaFrontFace[0]=goFactory.createLocation(dX1,dY + dHeight);
    loaFrontFace[1]=goFactory.createLocation(dX2,dY + dHeight / 2);
    loaFrontFace[2]=goFactory.createLocation(dX1,dY);
    faX[i]=dX2;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    final double dY1=bInverted ? dY : dY + dHeight;
    final double dY2=bInverted ? dY + dHeight : dY;
    loaFrontFace[0]=goFactory.createLocation(dX,dY1);
    loaFrontFace[1]=goFactory.createLocation(dX + dWidth / 2,dY2);
    loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY1);
    faX[i]=(dX + dWidth / 2);
    faY[i]=(dY2);
  }
  return loaFrontFace;
}",0.9475308641975309
68517,"private Location[] computeRiserCone2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[3];
  dX=Math.round(dX);
  dY=Math.round(dY);
  dWidth=Math.round(dWidth);
  dHeight=Math.round(dHeight);
  if (isTransposed()) {
    final double dX1=bInverted ? dX : dX + dWidth;
    final double dX2=bInverted ? dX + dWidth : dX;
    loaFrontFace[0]=goFactory.createLocation(dX1,dY);
    loaFrontFace[1]=goFactory.createLocation(dX2,dY + dHeight / 2);
    loaFrontFace[2]=goFactory.createLocation(dX1,dY + dHeight);
    faX[i]=dX2;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    final double dY1=bInverted ? dY : dY + dHeight;
    final double dY2=bInverted ? dY + dHeight : dY;
    loaFrontFace[0]=goFactory.createLocation(dX,dY1);
    loaFrontFace[1]=goFactory.createLocation(dX + dWidth / 2,dY2);
    loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY1);
    faX[i]=(dX + dWidth / 2);
    faY[i]=(dY2);
  }
  return loaFrontFace;
}","private Location[] computeRiserCone2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[3];
  if (isTransposed()) {
    final double dX1=bInverted ? dX : dX + dWidth;
    final double dX2=bInverted ? dX + dWidth : dX;
    loaFrontFace[0]=goFactory.createLocation(dX1,dY);
    loaFrontFace[1]=goFactory.createLocation(dX2,dY + dHeight / 2);
    loaFrontFace[2]=goFactory.createLocation(dX1,dY + dHeight);
    faX[i]=dX2;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    final double dY1=bInverted ? dY : dY + dHeight;
    final double dY2=bInverted ? dY + dHeight : dY;
    loaFrontFace[0]=goFactory.createLocation(dX,dY1);
    loaFrontFace[1]=goFactory.createLocation(dX + dWidth / 2,dY2);
    loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY1);
    faX[i]=(dX + dWidth / 2);
    faY[i]=(dY2);
  }
  return loaFrontFace;
}",0.9473140495867768
68518,"private void updateBindings(){
  LevelViewHandle level=null;
  if (comboGroupLevel.getSelectionIndex() != -1 && groupLevelList != null && groupLevelList.size() > 0) {
    level=(LevelViewHandle)groupLevelList.get(comboGroupLevel.getSelectionIndex());
  }
  if (level == null) {
    textKey.setItems(new String[]{DEUtil.resolveNull(null)});
    return;
  }
  textKey.removeAll();
  List bindingList=getReferableBindings(level);
  for (int i=0; i < bindingList.size(); i++) {
    textKey.add(((IBindingMetaInfo)(bindingList.get(i))).getBindingName());
  }
  if (textKey.getItemCount() == 0) {
    textKey.add(DEUtil.resolveNull(null));
  }
  if (textKey.indexOf(textKey.getText()) < 0) {
    textKey.setText(ExpressionUtil.createJSDataExpression(textKey.getItem(0)));
  }
}","private void updateBindings(){
  LevelViewHandle level=null;
  if (comboGroupLevel.getSelectionIndex() != -1 && groupLevelList != null && groupLevelList.size() > 0) {
    level=(LevelViewHandle)groupLevelList.get(comboGroupLevel.getSelectionIndex());
  }
  if (level == null) {
    textKey.setItems(new String[]{DEUtil.resolveNull(null)});
    return;
  }
  textKey.removeAll();
  List bindingList=getReferableBindings(level);
  for (int i=0; i < bindingList.size(); i++) {
    textKey.add(((IBindingMetaInfo)(bindingList.get(i))).getBindingName());
  }
  if (textKey.getItemCount() == 0) {
    textKey.add(DEUtil.resolveNull(null));
  }
  if (textKey.indexOf(textKey.getText()) < 0) {
    if (ExpressionButtonUtil.getCurrentExpressionConverter(textKey) != null) {
      textKey.setText(ExpressionButtonUtil.getCurrentExpressionConverter(textKey).getCubeBindingExpression(textKey.getItem(0)));
    }
  }
}",0.905727923627685
68519,"protected boolean isNullValue(CSSValue value){
  if (value == null) {
    return true;
  }
  if (value instanceof DataFormatValue) {
    return true;
  }
  String cssText=value.getCssText();
  return ""String_Node_Str"".equalsIgnoreCase(cssText) || ""String_Node_Str"".equalsIgnoreCase(cssText);
}","protected boolean isNullValue(CSSValue value){
  if (value == null) {
    return true;
  }
  if (value instanceof DataFormatValue) {
    return true;
  }
  if (value instanceof FloatValue) {
    return false;
  }
  String cssText=value.getCssText();
  return ""String_Node_Str"".equalsIgnoreCase(cssText) || ""String_Node_Str"".equalsIgnoreCase(cssText);
}",0.9085271317829458
68520,"public int compare(ShapedAction o1,ShapedAction o2){
  return o2.getZOrder() - o1.getZOrder();
}","public int compare(ShapedAction o1,ShapedAction o2){
  if (o1.getZOrder() == 0 || o2.getZOrder() == 0) {
    return 0;
  }
 else {
    return o2.getZOrder() - o1.getZOrder();
  }
}",0.6956521739130435
68521,"public String getImageMap(){
  List<ShapedAction> saList=getShapeActions();
  Collections.sort(saList,new Comparator<ShapedAction>(){
    public int compare(    ShapedAction o1,    ShapedAction o2){
      return o2.getZOrder() - o1.getZOrder();
    }
  }
);
  if (saList == null || saList.size() == 0) {
    return null;
  }
  StringBuffer sb=new StringBuffer();
  for (ListIterator<ShapedAction> iter=saList.listIterator(saList.size()); iter.hasPrevious(); ) {
    ShapedAction sa=iter.previous();
    userCallback(sa,sb);
    String coords=shape2polyCoords(sa.getShape());
    if (coords != null) {
      HTMLTag tag=new HTMLTag(""String_Node_Str"");
      tag.addAttribute(HTMLAttribute.SHAPE,POLY_SHAPE);
      tag.addAttribute(HTMLAttribute.COORDS,coords);
      tag.addAttribute(HTMLAttribute.ALT,_bAltEnabled ? sa.getSource().getSource().toString() : ""String_Node_Str"");
      setCursorAttribute(tag,sa);
      boolean changed=false;
      changed|=processOnFocus(sa,tag);
      changed|=processOnBlur(sa,tag);
      changed|=processOnClick(sa,tag);
      changed|=processOnDoubleClick(sa,tag);
      changed|=processOnMouseOver(sa,tag);
      if (changed) {
        sb.append(tag);
      }
    }
  }
  return sb.toString();
}","public String getImageMap(){
  List<ShapedAction> saList=getShapeActions();
  Collections.sort(saList,new Comparator<ShapedAction>(){
    public int compare(    ShapedAction o1,    ShapedAction o2){
      if (o1.getZOrder() == 0 || o2.getZOrder() == 0) {
        return 0;
      }
 else {
        return o2.getZOrder() - o1.getZOrder();
      }
    }
  }
);
  if (saList == null || saList.size() == 0) {
    return null;
  }
  StringBuffer sb=new StringBuffer();
  for (ListIterator<ShapedAction> iter=saList.listIterator(saList.size()); iter.hasPrevious(); ) {
    ShapedAction sa=iter.previous();
    userCallback(sa,sb);
    String coords=shape2polyCoords(sa.getShape());
    if (coords != null) {
      HTMLTag tag=new HTMLTag(""String_Node_Str"");
      tag.addAttribute(HTMLAttribute.SHAPE,POLY_SHAPE);
      tag.addAttribute(HTMLAttribute.COORDS,coords);
      tag.addAttribute(HTMLAttribute.ALT,_bAltEnabled ? sa.getSource().getSource().toString() : ""String_Node_Str"");
      setCursorAttribute(tag,sa);
      boolean changed=false;
      changed|=processOnFocus(sa,tag);
      changed|=processOnBlur(sa,tag);
      changed|=processOnClick(sa,tag);
      changed|=processOnDoubleClick(sa,tag);
      changed|=processOnMouseOver(sa,tag);
      if (changed) {
        sb.append(tag);
      }
    }
  }
  return sb.toString();
}",0.9500390320062452
68522,"/** 
 * Tests name space. nameSpace of element can only be one of followings: <ul> <li>none</li> <li>masterPage</li> <li>parameter</li> <li>element</li> <li>dataSource</li> <li>dataSet</li> <li>style</li> </ul> <p> In this case, input file set the DataSource.namespace = ""invalid-namespace""
 */
public void test_INVALID_NAME_SPACE(){
  loadMeta(""String_Node_Str"");
  assertEquals(1,errorList.size());
  assertErrorCode(MetaDataParserException.DESIGN_EXCEPTION_INVALID_NAME_SPACE,0,METAREADER_EXCEPTION);
}","/** 
 * Tests name space. nameSpace of element can only be one of followings: <ul> <li>none</li> <li>masterPage</li> <li>parameter</li> <li>element</li> <li>dataSource</li> <li>dataSet</li> <li>style</li> </ul> <p> In this case, input file set the DataSource.namespace = ""invalid-namespace""
 */
public void test_INVALID_NAME_SPACE(){
  loadMeta(""String_Node_Str"");
  assertEquals(1,errorList.size());
  assertErrorCode(MetaDataException.DESIGN_EXCEPTION_INVALID_NAME_SPACE,0,METAREADER_EXCEPTION);
}",0.99402390438247
68523,"public boolean isSupportSchema(){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return false;
    }
    try {
      return connection.getMetaData().supportsSchemasInTableDefinitions();
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return false;
    }
  }
  try {
    return connection.getMetaData().supportsSchemasInTableDefinitions();
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().supportsSchemasInTableDefinitions();
    }
 catch (    Exception e1) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return false;
    }
  }
}","public boolean isSupportSchema(){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return false;
    }
    try {
      return connection.getMetaData().supportsSchemasInTableDefinitions();
    }
 catch (    SQLException e) {
      try {
        ResultSet rs=connection.getMetaData().getSchemas();
        if (rs != null)         return true;
 else         return false;
      }
 catch (      SQLException e1) {
        logger.log(Level.WARNING,e.getMessage(),e);
        return false;
      }
    }
  }
  try {
    return connection.getMetaData().supportsSchemasInTableDefinitions();
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().supportsSchemasInTableDefinitions();
    }
 catch (    Exception e1) {
      try {
        ResultSet rs=connection.getMetaData().getSchemas();
        if (rs != null)         return true;
 else         return false;
      }
 catch (      SQLException e2) {
        logger.log(Level.WARNING,e.getMessage(),e1);
        return false;
      }
    }
  }
}",0.7761674718196457
68524,"public boolean isSupportProcedure(){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return false;
    }
    try {
      return connection.getMetaData().supportsStoredProcedures();
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return false;
    }
  }
  try {
    return connection.getMetaData().supportsStoredProcedures();
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().supportsStoredProcedures();
    }
 catch (    Exception e1) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return false;
    }
  }
}","public boolean isSupportProcedure(){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return false;
    }
    try {
      return connection.getMetaData().supportsStoredProcedures();
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return false;
    }
  }
  try {
    return connection.getMetaData().supportsStoredProcedures();
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().supportsStoredProcedures();
    }
 catch (    Exception e1) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return true;
    }
  }
}",0.9752999294283698
68525,"public int getMaxQueries() throws OdaException {
  if (jdbcConn != null) {
    try {
      DatabaseMetaData dbMetadata=jdbcConn.getMetaData();
      return dbMetadata.getMaxStatements();
    }
 catch (    SQLException e) {
      throw new JDBCException(ResourceConstants.CANNOT_GET_MAXQUERIES,e);
    }
  }
  return 0;
}","public int getMaxQueries() throws OdaException {
  if (jdbcConn != null) {
    try {
      DatabaseMetaData dbMetadata=jdbcConn.getMetaData();
      return dbMetadata.getMaxStatements();
    }
 catch (    SQLException e) {
      return 0;
    }
  }
  return 0;
}",0.8213058419243986
68526,"public void earlyStartup(){
  WorkspaceClassPathFinder finder=new WorkspaceClassPathFinder();
  WorkspaceClasspathManager.registerClassPathFinder(finder);
  String projectClassPaths=finder.getClassPath();
  if (projectClassPaths == null) {
    projectClassPaths=""String_Node_Str"";
  }
  System.setProperty(WORKSPACE_CLASSPATH_KEY,projectClassPaths);
  String value=System.getProperty(""String_Node_Str"");
  if (value == null || value.length() == 0) {
    return;
  }
  StringTokenizer token=new StringTokenizer(value,""String_Node_Str"");
  while (token.hasMoreTokens()) {
    String str=token.nextToken();
    try {
      DebugUtil.importProject(str);
    }
 catch (    Exception e1) {
      logger.log(Level.SEVERE,e1.getMessage(),e1);
    }
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      int openCount=0;
      try {
        String value=System.getProperty(""String_Node_Str"");
        if (value == null || value.length() == 0) {
          return;
        }
        StringTokenizer token=new StringTokenizer(value,""String_Node_Str"");
        while (token.hasMoreTokens()) {
          String str=token.nextToken();
          final IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(str));
          IWorkbench workbench=PlatformUI.getWorkbench();
          IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
          IWorkbenchPage page=window.getActivePage();
          IDE.openEditor(page,file,true);
          openCount++;
        }
      }
 catch (      PartInitException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
      if (openCount == 1) {
        FormEditor editor=getActiveReportEditor();
        editor.setActivePage(ReportPreviewFormPage.ID);
      }
    }
  }
);
}","public void earlyStartup(){
  WorkspaceClassPathFinder finder=new WorkspaceClassPathFinder();
  WorkspaceClasspathManager.registerClassPathFinder(finder);
  String projectClassPaths=finder.getClassPath();
  if (projectClassPaths == null) {
    projectClassPaths=""String_Node_Str"";
  }
  System.setProperty(WORKSPACE_CLASSPATH_KEY,projectClassPaths);
  String value=System.getProperty(""String_Node_Str"");
  if (value == null || value.length() == 0) {
    return;
  }
  StringTokenizer token=new StringTokenizer(value,""String_Node_Str"");
  while (token.hasMoreTokens()) {
    String str=token.nextToken();
    try {
    }
 catch (    Exception e1) {
      logger.log(Level.SEVERE,e1.getMessage(),e1);
    }
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      int openCount=0;
      try {
        String value=System.getProperty(""String_Node_Str"");
        if (value == null || value.length() == 0) {
          return;
        }
        StringTokenizer token=new StringTokenizer(value,""String_Node_Str"");
        while (token.hasMoreTokens()) {
          String str=token.nextToken();
          final IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(str));
          IWorkbench workbench=PlatformUI.getWorkbench();
          IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
          IWorkbenchPage page=window.getActivePage();
          IDE.openEditor(page,file,true);
          openCount++;
        }
      }
 catch (      PartInitException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
      if (openCount == 1) {
        FormEditor editor=getActiveReportEditor();
        editor.setActivePage(ReportPreviewFormPage.ID);
      }
    }
  }
);
}",0.989667049368542
68527,"private Location[] computeRiserRectangle2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[4];
  loaFrontFace[0]=goFactory.createLocation(dX,dY);
  loaFrontFace[1]=goFactory.createLocation(dX,dY + dHeight);
  loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY + dHeight);
  loaFrontFace[3]=goFactory.createLocation(dX + dWidth,dY);
  if (isTransposed()) {
    faX[i]=bInverted ? dX + dWidth : dX;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    faX[i]=(dX + dWidth / 2);
    faY[i]=bInverted ? dY + dHeight : dY;
  }
  return loaFrontFace;
}","private Location[] computeRiserRectangle2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[4];
  dX=Math.round(dX);
  dY=Math.round(dY);
  dWidth=Math.round(dWidth);
  dHeight=Math.round(dHeight);
  loaFrontFace[0]=goFactory.createLocation(dX,dY);
  loaFrontFace[1]=goFactory.createLocation(dX,dY + dHeight);
  loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY + dHeight);
  loaFrontFace[3]=goFactory.createLocation(dX + dWidth,dY);
  if (isTransposed()) {
    faX[i]=bInverted ? dX + dWidth : dX;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    faX[i]=(dX + dWidth / 2);
    faY[i]=bInverted ? dY + dHeight : dY;
  }
  return loaFrontFace;
}",0.9258720930232558
68528,"private Location[] computeRiserTube2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[4];
  loaFrontFace[0]=goFactory.createLocation(dX,dY);
  loaFrontFace[1]=goFactory.createLocation(dX,dY + dHeight);
  loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY + dHeight);
  loaFrontFace[3]=goFactory.createLocation(dX + dWidth,dY);
  if (isTransposed()) {
    faX[i]=bInverted ? (dX + dWidth) : dX;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    faX[i]=(dX + dWidth / 2);
    faY[i]=bInverted ? dY + dHeight : dY;
  }
  return loaFrontFace;
}","private Location[] computeRiserTube2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[4];
  dX=Math.round(dX);
  dY=Math.round(dY);
  dWidth=Math.round(dWidth);
  dHeight=Math.round(dHeight);
  loaFrontFace[0]=goFactory.createLocation(dX,dY);
  loaFrontFace[1]=goFactory.createLocation(dX,dY + dHeight);
  loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY + dHeight);
  loaFrontFace[3]=goFactory.createLocation(dX + dWidth,dY);
  if (isTransposed()) {
    faX[i]=bInverted ? (dX + dWidth) : dX;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    faX[i]=(dX + dWidth / 2);
    faY[i]=bInverted ? dY + dHeight : dY;
  }
  return loaFrontFace;
}",0.9255474452554744
68529,"private Location[] computeRiserTriangle2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[3];
  if (isTransposed()) {
    final double dX1=bInverted ? dX : dX + dWidth;
    final double dX2=bInverted ? dX + dWidth : dX;
    loaFrontFace[0]=goFactory.createLocation(dX1,dY + dHeight);
    loaFrontFace[1]=goFactory.createLocation(dX2,dY + dHeight / 2);
    loaFrontFace[2]=goFactory.createLocation(dX1,dY);
    faX[i]=dX2;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    final double dY1=bInverted ? dY : dY + dHeight;
    final double dY2=bInverted ? dY + dHeight : dY;
    loaFrontFace[0]=goFactory.createLocation(dX,dY1);
    loaFrontFace[1]=goFactory.createLocation(dX + dWidth / 2,dY2);
    loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY1);
    faX[i]=(dX + dWidth / 2);
    faY[i]=(dY2);
  }
  return loaFrontFace;
}","private Location[] computeRiserTriangle2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[3];
  dX=Math.round(dX);
  dY=Math.round(dY);
  dWidth=Math.round(dWidth);
  dHeight=Math.round(dHeight);
  if (isTransposed()) {
    final double dX1=bInverted ? dX : dX + dWidth;
    final double dX2=bInverted ? dX + dWidth : dX;
    loaFrontFace[0]=goFactory.createLocation(dX1,dY + dHeight);
    loaFrontFace[1]=goFactory.createLocation(dX2,dY + dHeight / 2);
    loaFrontFace[2]=goFactory.createLocation(dX1,dY);
    faX[i]=dX2;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    final double dY1=bInverted ? dY : dY + dHeight;
    final double dY2=bInverted ? dY + dHeight : dY;
    loaFrontFace[0]=goFactory.createLocation(dX,dY1);
    loaFrontFace[1]=goFactory.createLocation(dX + dWidth / 2,dY2);
    loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY1);
    faX[i]=(dX + dWidth / 2);
    faY[i]=(dY2);
  }
  return loaFrontFace;
}",0.9475308641975309
68530,"private Location[] computeRiserCone2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[3];
  if (isTransposed()) {
    final double dX1=bInverted ? dX : dX + dWidth;
    final double dX2=bInverted ? dX + dWidth : dX;
    loaFrontFace[0]=goFactory.createLocation(dX1,dY);
    loaFrontFace[1]=goFactory.createLocation(dX2,dY + dHeight / 2);
    loaFrontFace[2]=goFactory.createLocation(dX1,dY + dHeight);
    faX[i]=dX2;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    final double dY1=bInverted ? dY : dY + dHeight;
    final double dY2=bInverted ? dY + dHeight : dY;
    loaFrontFace[0]=goFactory.createLocation(dX,dY1);
    loaFrontFace[1]=goFactory.createLocation(dX + dWidth / 2,dY2);
    loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY1);
    faX[i]=(dX + dWidth / 2);
    faY[i]=(dY2);
  }
  return loaFrontFace;
}","private Location[] computeRiserCone2D(boolean bInverted,int i,double[] faX,double[] faY,double dX,double dY,double dHeight,double dWidth){
  Location[] loaFrontFace=new Location[3];
  dX=Math.round(dX);
  dY=Math.round(dY);
  dWidth=Math.round(dWidth);
  dHeight=Math.round(dHeight);
  if (isTransposed()) {
    final double dX1=bInverted ? dX : dX + dWidth;
    final double dX2=bInverted ? dX + dWidth : dX;
    loaFrontFace[0]=goFactory.createLocation(dX1,dY);
    loaFrontFace[1]=goFactory.createLocation(dX2,dY + dHeight / 2);
    loaFrontFace[2]=goFactory.createLocation(dX1,dY + dHeight);
    faX[i]=dX2;
    faY[i]=(dY + dHeight / 2);
  }
 else {
    final double dY1=bInverted ? dY : dY + dHeight;
    final double dY2=bInverted ? dY + dHeight : dY;
    loaFrontFace[0]=goFactory.createLocation(dX,dY1);
    loaFrontFace[1]=goFactory.createLocation(dX + dWidth / 2,dY2);
    loaFrontFace[2]=goFactory.createLocation(dX + dWidth,dY1);
    faX[i]=(dX + dWidth / 2);
    faY[i]=(dY2);
  }
  return loaFrontFace;
}",0.9473140495867768
68531,"public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  Bounds boDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    if (laDataPoint.isVisible()) {
      pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
      loDataPoint=goFactory.createLocation(0,0);
      loDataPoint3d=goFactory.createLocation3D(0,0,0);
      boDataPoint=goFactory.createBounds(0,0,0,0);
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=ChartUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart)));
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=Math.floor(srh.getLocationOnOrthogonal(new Double(dStart)));
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
          dStart=Methods.asDouble(srh.getOrthogonalScale().getMinimum()).doubleValue();
          dEnd=dValue;
          try {
            double dMargin=srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart));
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(new Double(dStart)) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth <= 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart)));
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=Math.floor(srh.getLocationOnOrthogonal(new Double(dStart)));
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
          dStart=Methods.asDouble(srh.getOrthogonalScale().getMinimum()).doubleValue();
          dEnd=dValue;
          try {
            double dMargin=srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart));
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(new Double(dStart));
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs));
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          int zorder_hint=0;
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
            zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,zorder_hint);
        }
 else {
          int zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,zorder_hint);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside) && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}","public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  Bounds boDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    if (laDataPoint.isVisible()) {
      pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
      loDataPoint=goFactory.createLocation(0,0);
      loDataPoint3d=goFactory.createLocation3D(0,0,0);
      boDataPoint=goFactory.createBounds(0,0,0,0);
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=ChartUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
          dStart=Methods.asDouble(srh.getOrthogonalScale().getMinimum()).doubleValue();
          dEnd=dValue;
          try {
            double dMargin=srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart));
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(new Double(dStart)) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth < 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
          dStart=Methods.asDouble(srh.getOrthogonalScale().getMinimum()).doubleValue();
          dEnd=dValue;
          try {
            double dMargin=srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart));
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(new Double(dStart));
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs));
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          int zorder_hint=0;
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
            zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,zorder_hint);
        }
 else {
          int zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,zorder_hint);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside) && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}",0.9838987831412684
68532,"public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL && cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  BubbleSeries bs=(BubbleSeries)getSeries();
  if (!bs.isVisible()) {
    return;
  }
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  DataPointHints[] dpha=srh.getDataPoints();
  Location lo;
  LineAttributes lia=bs.getLineAttributes();
  LineAttributes accLia=bs.getAccLineAttributes();
  Orientation accOrientation=bs.getAccOrientation();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  Integer[] iSize=new Integer[dpha.length];
  double[] dSizePixel=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && bs.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)bs.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,bs);
  }
  Marker m=null;
  if (bs.getMarkers().size() > 0) {
    m=bs.getMarkers().get(iThisSeriesIndex % bs.getMarkers().size());
  }
  final boolean isCategoryAxis=srh.isCategoryScale();
  final Bounds plotBounds=getPlotBoundsWithMargin();
  double dPointCoefficient=computeBestFit(srh,plotBounds,isCategoryAxis);
  if (dPointCoefficient == 0) {
    restoreClipping(ipr);
    return;
  }
  for (int i=0; i < dpha.length; i++) {
    BubbleEntry be=(BubbleEntry)dpha[i].getOrthogonalValue();
    if (!isValidBubbleEntry(be)) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    double unitSize=dpha[i].getSize();
    lo=dpha[i].getLocation();
    if (cwa.isTransposed()) {
      faX[i]=srh.getLocationOnOrthogonal(be.getValue());
      faY[i]=lo.getY() + (isCategoryAxis ? (unitSize / 2) : 0);
    }
 else {
      faX[i]=lo.getX() + (isCategoryAxis ? (unitSize / 2) : 0);
      faY[i]=srh.getLocationOnOrthogonal(be.getValue());
    }
    dSizePixel[i]=be.getSize() * dPointCoefficient;
    iSize[i]=Integer.valueOf((int)(dSizePixel[i] / getDeviceScale()));
  }
  handleOutsideDataPoints(ipr,srh,faX,faY,false);
  PlotWith2DAxes pwa=(PlotWith2DAxes)getComputations();
  double dAxisMin;
  if (accOrientation == Orientation.HORIZONTAL_LITERAL) {
    OneAxis oaxaBase=pwa.getAxes().getPrimaryBase();
    AutoScale sc=oaxaBase.getScale();
    dAxisMin=sc.getTickCordinates().getStart();
  }
 else {
    OneAxis oaxaBase=pwa.getAxes().getPrimaryOrthogonal();
    AutoScale sc=oaxaBase.getScale();
    dAxisMin=sc.getTickCordinates().getStart();
  }
  if (accLia.isVisible()) {
    Location[] loa=new Location[2];
    for (int i=0; i < dpha.length; i++) {
      if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue())) {
        continue;
      }
      LineRenderEvent lre;
      if (accOrientation == Orientation.HORIZONTAL_LITERAL) {
        if (cwa.isTransposed()) {
          loa[0]=goFactory.createLocation(faX[i],dAxisMin);
        }
 else {
          loa[0]=goFactory.createLocation(dAxisMin,faY[i]);
        }
      }
 else {
        if (cwa.isTransposed()) {
          loa[0]=goFactory.createLocation(dAxisMin,faY[i]);
        }
 else {
          loa[0]=goFactory.createLocation(faX[i],dAxisMin);
        }
      }
      loa[1]=goFactory.createLocation(faX[i],faY[i]);
      lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),LineRenderEvent.class);
      lre.setLineAttributes(accLia);
      lre.setStart(loa[0]);
      lre.setEnd(loa[1]);
      ipr.drawLine(lre);
    }
  }
  if (bs.isCurve()) {
    CurveRenderer cr=new CurveRenderer(cwa,this,lia,goFactory.createLocations(faX,faY),false,-1,true,true,fPaletteEntry,bs.isPaletteLineColor(),true);
    cr.draw(ipr);
    renderShadowAsCurve(ipr,lia,srh,goFactory.createLocations(faX,faY),false,-1);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,bs);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(bs,ipr,m,goFactory.createLocation(faX[i],faY[i]),bs.getLineAttributes(),fPaletteEntry,dpha[i],iSize[i],true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    LineRenderEvent lre;
    final Location positionDelta=(cwa.isTransposed()) ? goFactory.createLocation(-3 * getDeviceScale(),0) : goFactory.createLocation(0,3 * getDeviceScale());
    Location[] loaShadow=null;
    lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),LineRenderEvent.class);
    final ColorDefinition cLineShadow=bs.getShadowColor();
    if (cLineShadow != null && cLineShadow.getTransparency() != goFactory.TRANSPARENT().getTransparency()) {
      for (int i=1; i < dpha.length; i++) {
        if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue())) {
          continue;
        }
        int pindex=getPreviousNonNullIndex(i,dpha);
        if (pindex == -1) {
          continue;
        }
        if (loaShadow == null) {
          loaShadow=new Location[2];
          loaShadow[0]=goFactory.createLocation(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1]=goFactory.createLocation(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
 else {
          loaShadow[0].set(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1].set(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
        lre.setStart(loaShadow[0]);
        lre.setEnd(loaShadow[1]);
        LineAttributes liaShadow=goFactory.copyOf(lia);
        liaShadow.setColor(cLineShadow);
        lre.setLineAttributes(liaShadow);
        ipr.drawLine(lre);
      }
    }
    if (lia.isVisible()) {
      Location[] loa=new Location[2];
      for (int i=1; i < dpha.length; i++) {
        if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue())) {
          continue;
        }
        int pindex=getPreviousNonNullIndex(i,dpha);
        if (pindex == -1) {
          continue;
        }
        loa[0]=goFactory.createLocation(faX[pindex],faY[pindex]);
        loa[1]=goFactory.createLocation(faX[i],faY[i]);
        lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),LineRenderEvent.class);
        if (bs.isPaletteLineColor()) {
          LineAttributes newLia=goFactory.copyOf(lia);
          newLia.setColor(FillUtil.getColor(fPaletteEntry));
          lre.setLineAttributes(newLia);
        }
 else {
          lre.setLineAttributes(lia);
        }
        lre.setStart(loa[0]);
        lre.setEnd(loa[1]);
        ipr.drawLine(lre);
      }
    }
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,bs);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(bs,ipr,m,goFactory.createLocation(faX[i],faY[i]),bs.getLineAttributes(),fPaletteEntry,dpha[i],iSize[i],true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  try {
    laDataPoint=srh.getLabelAttributes(bs);
    pDataPoint=srh.getLabelPosition(bs);
    loDataPoint=goFactory.createLocation(0,0);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    for (int i=0; i < dpha.length; i++) {
      if (!isValidBubbleEntry(((BubbleEntry)dpha[i].getOrthogonalValue())) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
      final double dSize=dSizePixel[i];
switch (pDataPoint.getValue()) {
case Position.ABOVE:
        loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
      break;
case Position.BELOW:
    loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
  break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
case Position.INSIDE:
loDataPoint.set(faX[i],faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i]);
if (laDataPoint.isVisible()) {
renderLabel(StructureSource.createSeries(bs),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,dpha[i]);
}
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
restoreClipping(ipr);
}","public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL && cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  BubbleSeries bs=(BubbleSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  DataPointHints[] dpha=srh.getDataPoints();
  Location lo;
  LineAttributes lia=bs.getLineAttributes();
  LineAttributes accLia=bs.getAccLineAttributes();
  Orientation accOrientation=bs.getAccOrientation();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  Integer[] iSize=new Integer[dpha.length];
  double[] dSizePixel=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && bs.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)bs.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,bs);
  }
  Marker m=null;
  if (bs.getMarkers().size() > 0) {
    m=bs.getMarkers().get(iThisSeriesIndex % bs.getMarkers().size());
  }
  final boolean isCategoryAxis=srh.isCategoryScale();
  final Bounds plotBounds=getPlotBoundsWithMargin();
  double dPointCoefficient=computeBestFit(srh,plotBounds,isCategoryAxis);
  if (dPointCoefficient == 0) {
    restoreClipping(ipr);
    return;
  }
  for (int i=0; i < dpha.length; i++) {
    BubbleEntry be=(BubbleEntry)dpha[i].getOrthogonalValue();
    if (!isValidBubbleEntry(be)) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    double unitSize=dpha[i].getSize();
    lo=dpha[i].getLocation();
    if (cwa.isTransposed()) {
      faX[i]=srh.getLocationOnOrthogonal(be.getValue());
      faY[i]=lo.getY() + (isCategoryAxis ? (unitSize / 2) : 0);
    }
 else {
      faX[i]=lo.getX() + (isCategoryAxis ? (unitSize / 2) : 0);
      faY[i]=srh.getLocationOnOrthogonal(be.getValue());
    }
    dSizePixel[i]=be.getSize() * dPointCoefficient;
    iSize[i]=Integer.valueOf((int)(dSizePixel[i] / getDeviceScale()));
  }
  handleOutsideDataPoints(ipr,srh,faX,faY,false);
  PlotWith2DAxes pwa=(PlotWith2DAxes)getComputations();
  double dAxisMin;
  if (accOrientation == Orientation.HORIZONTAL_LITERAL) {
    OneAxis oaxaBase=pwa.getAxes().getPrimaryBase();
    AutoScale sc=oaxaBase.getScale();
    dAxisMin=sc.getTickCordinates().getStart();
  }
 else {
    OneAxis oaxaBase=pwa.getAxes().getPrimaryOrthogonal();
    AutoScale sc=oaxaBase.getScale();
    dAxisMin=sc.getTickCordinates().getStart();
  }
  if (accLia.isVisible()) {
    Location[] loa=new Location[2];
    for (int i=0; i < dpha.length; i++) {
      if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue())) {
        continue;
      }
      LineRenderEvent lre;
      if (accOrientation == Orientation.HORIZONTAL_LITERAL) {
        if (cwa.isTransposed()) {
          loa[0]=goFactory.createLocation(faX[i],dAxisMin);
        }
 else {
          loa[0]=goFactory.createLocation(dAxisMin,faY[i]);
        }
      }
 else {
        if (cwa.isTransposed()) {
          loa[0]=goFactory.createLocation(dAxisMin,faY[i]);
        }
 else {
          loa[0]=goFactory.createLocation(faX[i],dAxisMin);
        }
      }
      loa[1]=goFactory.createLocation(faX[i],faY[i]);
      lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),LineRenderEvent.class);
      lre.setLineAttributes(accLia);
      lre.setStart(loa[0]);
      lre.setEnd(loa[1]);
      ipr.drawLine(lre);
    }
  }
  if (bs.isCurve()) {
    CurveRenderer cr=new CurveRenderer(cwa,this,lia,goFactory.createLocations(faX,faY),false,-1,true,true,fPaletteEntry,bs.isPaletteLineColor(),true);
    cr.draw(ipr);
    renderShadowAsCurve(ipr,lia,srh,goFactory.createLocations(faX,faY),false,-1);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,bs);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(bs,ipr,m,goFactory.createLocation(faX[i],faY[i]),bs.getLineAttributes(),fPaletteEntry,dpha[i],iSize[i],true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    LineRenderEvent lre;
    final Location positionDelta=(cwa.isTransposed()) ? goFactory.createLocation(-3 * getDeviceScale(),0) : goFactory.createLocation(0,3 * getDeviceScale());
    Location[] loaShadow=null;
    lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),LineRenderEvent.class);
    final ColorDefinition cLineShadow=bs.getShadowColor();
    if (cLineShadow != null && cLineShadow.getTransparency() != goFactory.TRANSPARENT().getTransparency()) {
      for (int i=1; i < dpha.length; i++) {
        if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue())) {
          continue;
        }
        int pindex=getPreviousNonNullIndex(i,dpha);
        if (pindex == -1) {
          continue;
        }
        if (loaShadow == null) {
          loaShadow=new Location[2];
          loaShadow[0]=goFactory.createLocation(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1]=goFactory.createLocation(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
 else {
          loaShadow[0].set(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1].set(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
        lre.setStart(loaShadow[0]);
        lre.setEnd(loaShadow[1]);
        LineAttributes liaShadow=goFactory.copyOf(lia);
        liaShadow.setColor(cLineShadow);
        lre.setLineAttributes(liaShadow);
        ipr.drawLine(lre);
      }
    }
    if (lia.isVisible()) {
      Location[] loa=new Location[2];
      for (int i=1; i < dpha.length; i++) {
        if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue())) {
          continue;
        }
        int pindex=getPreviousNonNullIndex(i,dpha);
        if (pindex == -1) {
          continue;
        }
        loa[0]=goFactory.createLocation(faX[pindex],faY[pindex]);
        loa[1]=goFactory.createLocation(faX[i],faY[i]);
        lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),LineRenderEvent.class);
        if (bs.isPaletteLineColor()) {
          LineAttributes newLia=goFactory.copyOf(lia);
          newLia.setColor(FillUtil.getColor(fPaletteEntry));
          lre.setLineAttributes(newLia);
        }
 else {
          lre.setLineAttributes(lia);
        }
        lre.setStart(loa[0]);
        lre.setEnd(loa[1]);
        ipr.drawLine(lre);
      }
    }
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,bs);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(bs,ipr,m,goFactory.createLocation(faX[i],faY[i]),bs.getLineAttributes(),fPaletteEntry,dpha[i],iSize[i],true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  try {
    laDataPoint=srh.getLabelAttributes(bs);
    pDataPoint=srh.getLabelPosition(bs);
    loDataPoint=goFactory.createLocation(0,0);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    for (int i=0; i < dpha.length; i++) {
      if (!isValidBubbleEntry(((BubbleEntry)dpha[i].getOrthogonalValue())) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
      final double dSize=dSizePixel[i];
switch (pDataPoint.getValue()) {
case Position.ABOVE:
        loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
      break;
case Position.BELOW:
    loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
  break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
case Position.INSIDE:
loDataPoint.set(faX[i],faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i]);
if (laDataPoint.isVisible()) {
renderLabel(StructureSource.createSeries(bs),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,dpha[i]);
}
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
restoreClipping(ipr);
}",0.9989133160578452
68533,"public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  DifferenceSeries ds=(DifferenceSeries)getSeries();
  if (!ds.isVisible()) {
    return;
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double fX, fY, fUnit, fPos, fNeg;
  double[] faX=new double[dpha.length];
  double[][] faY=new double[2][dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ds},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean isTransposed=isTransposed();
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ds.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ds.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ds);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ds,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker posMarker=null;
  if (ds.getMarkers().size() > 0) {
    posMarker=ds.getMarkers().get(iThisSeriesIndex % ds.getMarkers().size());
  }
  Marker negMarker=null;
  if (ds.getNegativeMarkers().size() > 0) {
    negMarker=ds.getNegativeMarkers().get(iThisSeriesIndex % ds.getNegativeMarkers().size());
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
  }
 else   if (iSeriesIndex > 0) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iSeriesIndex - 1);
  }
  updateTranslucency(fPaletteEntry,ds);
  LineAttributes liaPos=ds.getLineAttributes();
  LineAttributes liaNeg=ds.getNegativeLineAttributes();
  if (((LineSeries)getSeries()).isPaletteLineColor()) {
    final Fill[] fills=DifferenceRenderer.createDifferenceFillFromPalette(fPaletteEntry,true);
    liaPos.setColor(FillUtil.getColor(fills[0]));
    liaNeg.setColor(FillUtil.getColor(fills[1]));
  }
  for (int i=0; i < dpha.length; i++) {
    DifferenceEntry de=(DifferenceEntry)dpha[i].getOrthogonalValue();
    faX[i]=Double.NaN;
    faY[0][i]=Double.NaN;
    faY[1][i]=Double.NaN;
    if (!DifferenceRenderer.isValidDifferenceEntry(de)) {
      continue;
    }
    Location lo=dpha[i].getLocation();
    fPos=srh.getLocationOnOrthogonal(new Double(de.getPositiveValue()));
    fNeg=srh.getLocationOnOrthogonal(new Double(de.getNegativeValue()));
    if (isTransposed) {
      fUnit=dpha[i].getSize();
      fY=(lo.getY() + fUnit / 2.0);
      faX[i]=fY;
      faY[0][i]=fPos;
      faY[1][i]=fNeg;
    }
 else {
      fUnit=dpha[i].getSize();
      fX=(lo.getX() + fUnit / 2.0);
      faX[i]=fX;
      faY[0][i]=fPos;
      faY[1][i]=fNeg;
    }
  }
  if (isTransposed) {
    handleOutsideDataPoints(ipr,srh,faY[0],faX,false);
    handleOutsideDataPoints(ipr,srh,faY[1],faX,false);
  }
 else {
    handleOutsideDataPoints(ipr,srh,faX,faY[0],false);
    handleOutsideDataPoints(ipr,srh,faX,faY[1],false);
  }
  if (ds.isCurve()) {
    DifferenceRenderer.renderDifferenceCurve(this,ipr,dpha,isTransposed ? goFactory.createLocations(faY[0],faX) : goFactory.createLocations(faX,faY[0]),isTransposed ? goFactory.createLocations(faY[1],faX) : goFactory.createLocations(faX,faY[1]),liaPos,liaNeg,fPaletteEntry);
  }
 else {
    DifferenceRenderer.renderDifferencePolygon(this,ipr,dpha,isTransposed ? goFactory.createLocations(faY[0],faX) : goFactory.createLocations(faX,faY[0]),isTransposed ? goFactory.createLocations(faY[1],faX) : goFactory.createLocations(faX,faY[1]),liaPos,liaNeg,fPaletteEntry);
  }
  if (negMarker != null || posMarker != null) {
    for (int i=0; i < dpha.length; i++) {
      DifferenceEntry de=(DifferenceEntry)dpha[i].getOrthogonalValue();
      if (!DifferenceRenderer.isValidDifferenceEntry(de) || dpha[i].isOutside()) {
        continue;
      }
      if (bPaletteByCategory) {
        fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
      }
 else {
        fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
      updateTranslucency(fPaletteEntry,ds);
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
      if (negMarker != null) {
        Fill negFill=FillUtil.convertFill(fPaletteEntry,-1,null);
        renderMarker(ds,ipr,negMarker,isTransposed ? goFactory.createLocation(faY[1][i],faX[i]) : goFactory.createLocation(faX[i],faY[1][i]),liaNeg,negFill,dpha[i],null,true,true);
      }
      if (posMarker != null) {
        Fill posFill=FillUtil.convertFill(fPaletteEntry,1,null);
        renderMarker(ds,ipr,posMarker,isTransposed ? goFactory.createLocation(faY[0][i],faX[i]) : goFactory.createLocation(faX[i],faY[0][i]),liaPos,posFill,dpha[i],null,true,true);
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    }
  }
  Label laDataPoint=srh.getLabelAttributes(ds);
  if (laDataPoint.isVisible()) {
    Position posDataPoint=srh.getLabelPosition(ds);
    Location loDataPoint=goFactory.createLocation(0,0);
    final double dSize=(posMarker == null) ? 0 : posMarker.getSize();
    for (int i=0; i < dpha.length; i++) {
      DifferenceEntry de=(DifferenceEntry)dpha[i].getOrthogonalValue();
      if (!DifferenceRenderer.isValidDifferenceEntry(de) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
      if (laDataPoint.isVisible()) {
        fX=faX[i];
        fY=faY[1][i];
        if (isTransposed) {
          fX=faY[1][i];
          fY=faX[i];
        }
switch (posDataPoint.getValue()) {
case Position.ABOVE:
          loDataPoint.set(fX,fY - dSize - p.getVerticalSpacing());
        break;
case Position.BELOW:
      loDataPoint.set(fX,fY + dSize + p.getVerticalSpacing());
    break;
case Position.LEFT:
  loDataPoint.set(fX - dSize - p.getHorizontalSpacing(),fY);
break;
case Position.RIGHT:
loDataPoint.set(fX + dSize + p.getHorizontalSpacing(),fY);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{posDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
renderLabel(WrappedStructureSource.createSeriesDataPoint(ds,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,posDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
}
restoreClipping(ipr);
}","public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  DifferenceSeries ds=(DifferenceSeries)getSeries();
  if (!ds.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double fX, fY, fUnit, fPos, fNeg;
  double[] faX=new double[dpha.length];
  double[][] faY=new double[2][dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ds},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean isTransposed=isTransposed();
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ds.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ds.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ds);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ds,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker posMarker=null;
  if (ds.getMarkers().size() > 0) {
    posMarker=ds.getMarkers().get(iThisSeriesIndex % ds.getMarkers().size());
  }
  Marker negMarker=null;
  if (ds.getNegativeMarkers().size() > 0) {
    negMarker=ds.getNegativeMarkers().get(iThisSeriesIndex % ds.getNegativeMarkers().size());
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
  }
 else   if (iSeriesIndex > 0) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iSeriesIndex - 1);
  }
  updateTranslucency(fPaletteEntry,ds);
  LineAttributes liaPos=ds.getLineAttributes();
  LineAttributes liaNeg=ds.getNegativeLineAttributes();
  if (((LineSeries)getSeries()).isPaletteLineColor()) {
    final Fill[] fills=DifferenceRenderer.createDifferenceFillFromPalette(fPaletteEntry,true);
    liaPos.setColor(FillUtil.getColor(fills[0]));
    liaNeg.setColor(FillUtil.getColor(fills[1]));
  }
  for (int i=0; i < dpha.length; i++) {
    DifferenceEntry de=(DifferenceEntry)dpha[i].getOrthogonalValue();
    faX[i]=Double.NaN;
    faY[0][i]=Double.NaN;
    faY[1][i]=Double.NaN;
    if (!DifferenceRenderer.isValidDifferenceEntry(de)) {
      continue;
    }
    Location lo=dpha[i].getLocation();
    fPos=srh.getLocationOnOrthogonal(new Double(de.getPositiveValue()));
    fNeg=srh.getLocationOnOrthogonal(new Double(de.getNegativeValue()));
    if (isTransposed) {
      fUnit=dpha[i].getSize();
      fY=(lo.getY() + fUnit / 2.0);
      faX[i]=fY;
      faY[0][i]=fPos;
      faY[1][i]=fNeg;
    }
 else {
      fUnit=dpha[i].getSize();
      fX=(lo.getX() + fUnit / 2.0);
      faX[i]=fX;
      faY[0][i]=fPos;
      faY[1][i]=fNeg;
    }
  }
  if (isTransposed) {
    handleOutsideDataPoints(ipr,srh,faY[0],faX,false);
    handleOutsideDataPoints(ipr,srh,faY[1],faX,false);
  }
 else {
    handleOutsideDataPoints(ipr,srh,faX,faY[0],false);
    handleOutsideDataPoints(ipr,srh,faX,faY[1],false);
  }
  if (ds.isCurve()) {
    DifferenceRenderer.renderDifferenceCurve(this,ipr,dpha,isTransposed ? goFactory.createLocations(faY[0],faX) : goFactory.createLocations(faX,faY[0]),isTransposed ? goFactory.createLocations(faY[1],faX) : goFactory.createLocations(faX,faY[1]),liaPos,liaNeg,fPaletteEntry);
  }
 else {
    DifferenceRenderer.renderDifferencePolygon(this,ipr,dpha,isTransposed ? goFactory.createLocations(faY[0],faX) : goFactory.createLocations(faX,faY[0]),isTransposed ? goFactory.createLocations(faY[1],faX) : goFactory.createLocations(faX,faY[1]),liaPos,liaNeg,fPaletteEntry);
  }
  if (negMarker != null || posMarker != null) {
    for (int i=0; i < dpha.length; i++) {
      DifferenceEntry de=(DifferenceEntry)dpha[i].getOrthogonalValue();
      if (!DifferenceRenderer.isValidDifferenceEntry(de) || dpha[i].isOutside()) {
        continue;
      }
      if (bPaletteByCategory) {
        fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
      }
 else {
        fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
      updateTranslucency(fPaletteEntry,ds);
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
      if (negMarker != null) {
        Fill negFill=FillUtil.convertFill(fPaletteEntry,-1,null);
        renderMarker(ds,ipr,negMarker,isTransposed ? goFactory.createLocation(faY[1][i],faX[i]) : goFactory.createLocation(faX[i],faY[1][i]),liaNeg,negFill,dpha[i],null,true,true);
      }
      if (posMarker != null) {
        Fill posFill=FillUtil.convertFill(fPaletteEntry,1,null);
        renderMarker(ds,ipr,posMarker,isTransposed ? goFactory.createLocation(faY[0][i],faX[i]) : goFactory.createLocation(faX[i],faY[0][i]),liaPos,posFill,dpha[i],null,true,true);
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    }
  }
  Label laDataPoint=srh.getLabelAttributes(ds);
  if (laDataPoint.isVisible()) {
    Position posDataPoint=srh.getLabelPosition(ds);
    Location loDataPoint=goFactory.createLocation(0,0);
    final double dSize=(posMarker == null) ? 0 : posMarker.getSize();
    for (int i=0; i < dpha.length; i++) {
      DifferenceEntry de=(DifferenceEntry)dpha[i].getOrthogonalValue();
      if (!DifferenceRenderer.isValidDifferenceEntry(de) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
      if (laDataPoint.isVisible()) {
        fX=faX[i];
        fY=faY[1][i];
        if (isTransposed) {
          fX=faY[1][i];
          fY=faX[i];
        }
switch (posDataPoint.getValue()) {
case Position.ABOVE:
          loDataPoint.set(fX,fY - dSize - p.getVerticalSpacing());
        break;
case Position.BELOW:
      loDataPoint.set(fX,fY + dSize + p.getVerticalSpacing());
    break;
case Position.LEFT:
  loDataPoint.set(fX - dSize - p.getHorizontalSpacing(),fY);
break;
case Position.RIGHT:
loDataPoint.set(fX + dSize + p.getHorizontalSpacing(),fY);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{posDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
renderLabel(WrappedStructureSource.createSeriesDataPoint(ds,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,posDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
}
restoreClipping(ipr);
}",0.9984202211690364
68534,"public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final GanttSeries gs=(GanttSeries)getSeries();
  if (!gs.isVisible()) {
    return;
  }
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final DataPointHints[] dpha=srh.getDataPoints();
  final LineAttributes lia=goFactory.copyOf(gs.getConnectionLine());
  final LineAttributes outlinelia=gs.getOutline();
  final int iLineWidth=lia.getThickness();
  final Marker mStart=gs.getStartMarker();
  final Marker mEnd=gs.getEndMarker();
  final boolean bTransposed=isTransposed();
  float[] faX=new float[dpha.length];
  float[][] faY=new float[dpha.length][2];
  Location lo;
  Location loStart=null, loEnd=null;
  Location[] loaLine=null;
  LineRenderEvent lre;
  PolygonRenderEvent pre;
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{gs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && gs.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)gs.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(gs);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{gs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,gs);
  }
  Fill fLineFill;
  if (gs.isPaletteLineColor()) {
    fLineFill=fPaletteEntry;
    lia.setColor(FillUtil.getColor(fPaletteEntry));
  }
 else {
    Fill outlineFill=gs.getOutlineFill();
    fLineFill=lia.getColor() == null ? outlineFill : lia.getColor();
    if (outlineFill != null) {
      lia.setColor(FillUtil.getColor(outlineFill));
    }
  }
  renderClipping(ipr,getPlotBounds());
  final AutoScale scale=getInternalOrthogonalAxis().getScale();
  for (int i=0; i < dpha.length; i++) {
    GanttEntry ge=(GanttEntry)dpha[i].getOrthogonalValue();
    if (!isValidGanttEntry(ge)) {
      continue;
    }
    if (checkEntryInRange(se,scale.getMinimum(),scale.getMaximum()) > 0) {
      dpha[i].markOutside();
    }
    CDateTime geStart=ge.getStart();
    CDateTime geEnd=ge.getEnd();
    double dX=0, dY=0;
    double dStart=0, dEnd=0;
    lo=dpha[i].getLocation();
    dX=(int)lo.getX();
    dY=(int)lo.getY();
    if (srh.isCategoryScale()) {
      double fSize=dpha[i].getSize();
      if (bTransposed) {
        dY+=fSize / 2;
      }
 else {
        dX+=fSize / 2;
      }
    }
    if (geStart != null) {
      dStart=srh.getLocationOnOrthogonal(geStart);
    }
    if (geEnd != null) {
      dEnd=srh.getLocationOnOrthogonal(geEnd);
    }
 else {
      dEnd=dStart;
    }
    if (geStart == null) {
      dStart=dEnd;
    }
    if (loStart == null) {
      loStart=goFactory.createLocation(0,0);
      loEnd=goFactory.createLocation(0,0);
    }
    if (cwa.isTransposed()) {
      loStart.set(dStart,dY);
      loEnd.set(dEnd,dY);
      faX[i]=(float)dY;
      faY[i][0]=(float)dStart;
      faY[i][1]=(float)dEnd;
      loaLine=new Location[4];
      loaLine[0]=goFactory.createLocation(dStart,dY + iLineWidth / 2.0);
      loaLine[1]=goFactory.createLocation(dStart,dY - iLineWidth / 2.0);
      loaLine[2]=goFactory.createLocation(dEnd,dY - iLineWidth / 2.0);
      loaLine[3]=goFactory.createLocation(dEnd,dY + iLineWidth / 2.0);
    }
 else {
      loStart.set(dX,dStart);
      loEnd.set(dX,dEnd);
      faX[i]=(float)dX;
      faY[i][0]=(float)dStart;
      faY[i][1]=(float)dEnd;
      loaLine=new Location[4];
      loaLine[0]=goFactory.createLocation(dX + iLineWidth / 2.0,dStart);
      loaLine[1]=goFactory.createLocation(dX - iLineWidth / 2.0,dStart);
      loaLine[2]=goFactory.createLocation(dX - iLineWidth / 2.0,dEnd);
      loaLine[3]=goFactory.createLocation(dX + iLineWidth / 2.0,dEnd);
    }
    if (bPaletteByCategory) {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    }
    updateTranslucency(fPaletteEntry,gs);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (lia.isVisible() && geStart != null && geEnd != null) {
      if (gs.isPaletteLineColor()) {
        fLineFill=fPaletteEntry;
        lia.setColor(FillUtil.getColor(fPaletteEntry));
      }
      if ((iLineWidth == 1) || (lia.getStyle() != LineStyle.SOLID_LITERAL)) {
        lre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(gs,dpha[i]),LineRenderEvent.class);
        lre.setLineAttributes(lia);
        lre.setStart(loStart);
        lre.setEnd(loEnd);
        ipr.drawLine(lre);
        renderInteractivity(ipr,dpha[i],lre);
      }
 else {
        pre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(gs,dpha[i]),PolygonRenderEvent.class);
        pre.setPoints(loaLine);
        pre.setBackground(fLineFill);
        ipr.fillPolygon(pre);
        renderInteractivity(ipr,dpha[i],pre);
      }
    }
    if (outlinelia.isVisible() && geStart != null && geEnd != null) {
      pre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(gs,dpha[i]),PolygonRenderEvent.class);
      pre.setPoints(loaLine);
      pre.setOutline(outlinelia);
      ipr.drawPolygon(pre);
    }
    if (geStart != null && mStart.isVisible() || dpha[i].isOutside()) {
      Location loStartMarker=loStart.copyInstance();
      Position mStartPosition=transposePosition(gs.getStartMarkerPosition());
switch (mStartPosition.getValue()) {
case Position.ABOVE:
        if (bTransposed) {
          loStartMarker.set(loStart.getX(),loStart.getY() - mStart.getSize());
        }
      break;
case Position.BELOW:
    if (bTransposed) {
      loStartMarker.set(loStart.getX(),loStart.getY() + mStart.getSize());
    }
  break;
}
Fill startFill=fPaletteEntry;
if (fPaletteEntry instanceof MultipleFill && ((MultipleFill)fPaletteEntry).getFills().size() > 0) {
startFill=((MultipleFill)fPaletteEntry).getFills().get(0);
}
renderMarker(gs,ipr,mStart,loStartMarker,outlinelia,startFill,dpha[i],null,true,false);
}
if (geEnd != null && mEnd.isVisible() || dpha[i].isOutside()) {
Location loEndMarker=loEnd.copyInstance();
Position mEndPosition=transposePosition(gs.getEndMarkerPosition());
switch (mEndPosition.getValue()) {
case Position.ABOVE:
if (bTransposed) {
  loEndMarker.set(loEnd.getX(),loEnd.getY() - mEnd.getSize());
}
break;
case Position.BELOW:
if (bTransposed) {
loEndMarker.set(loEnd.getX(),loEnd.getY() + mEnd.getSize());
}
break;
}
Fill endFill=fPaletteEntry;
if (fPaletteEntry instanceof MultipleFill && ((MultipleFill)fPaletteEntry).getFills().size() > 1) {
endFill=((MultipleFill)fPaletteEntry).getFills().get(1);
}
renderMarker(gs,ipr,mEnd,loEndMarker,outlinelia,endFill,dpha[i],null,true,false);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
}
Label laDataPoint=srh.getLabelAttributes(gs);
if (laDataPoint.isVisible()) {
Position pDataPoint=srh.getLabelPosition(gs);
Location loDataPoint=goFactory.createLocation(0,0);
final boolean useDecorationLabel=gs.isUseDecorationLabelValue();
final double dLabelGap=Math.max(Math.max(mStart.isVisible() ? mStart.getSize() : 0,mEnd.isVisible() ? mEnd.getSize() : 0),(lia.isVisible() ? iLineWidth / 2 : 0) + (outlinelia.isVisible() ? outlinelia.getThickness() : 0));
for (int i=0; i < dpha.length; i++) {
GanttEntry ge=(GanttEntry)dpha[i].getOrthogonalValue();
if (ge == null || ge.getStart() == null || ge.getEnd() == null) {
continue;
}
if (!isValidGanttEntry(ge) || dpha[i].isOutside()) {
continue;
}
if (useDecorationLabel) {
laDataPoint.getCaption().setValue(ge.getLabel());
}
 else {
laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
}
switch (pDataPoint.getValue()) {
case Position.ABOVE:
if (!cwa.isTransposed()) {
loDataPoint.set(faX[i],faY[i][1] - mEnd.getSize() - p.getVerticalSpacing());
}
 else {
loDataPoint.set((faY[i][0] + faY[i][1]) / 2,faX[i] - dLabelGap - p.getVerticalSpacing());
}
break;
case Position.BELOW:
if (!cwa.isTransposed()) {
loDataPoint.set(faX[i],faY[i][0] + mStart.getSize() + p.getVerticalSpacing());
}
 else {
loDataPoint.set((faY[i][0] + faY[i][1]) / 2,faX[i] + dLabelGap + p.getVerticalSpacing());
}
break;
case Position.LEFT:
if (!cwa.isTransposed()) {
loDataPoint.set(faX[i] - dLabelGap - p.getHorizontalSpacing(),(faY[i][0] + faY[i][1]) / 2);
}
 else {
loDataPoint.set(faY[i][0] - dLabelGap - p.getHorizontalSpacing(),faX[i]);
}
break;
case Position.RIGHT:
if (!cwa.isTransposed()) {
loDataPoint.set(faX[i] + dLabelGap + p.getHorizontalSpacing(),(faY[i][0] + faY[i][1]) / 2);
}
 else {
loDataPoint.set(faY[i][1] + dLabelGap + p.getHorizontalSpacing(),faX[i]);
}
break;
case Position.INSIDE:
if (!cwa.isTransposed()) {
loDataPoint.set(faX[i],(faY[i][0] + faY[i][1]) / 2);
}
 else {
loDataPoint.set((faY[i][0] + faY[i][1]) / 2,faX[i]);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
if (laDataPoint.isVisible()) {
renderLabel(WrappedStructureSource.createSeriesDataPoint(gs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
}
restoreClipping(ipr);
}","public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final GanttSeries gs=(GanttSeries)getSeries();
  if (!gs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final DataPointHints[] dpha=srh.getDataPoints();
  final LineAttributes lia=goFactory.copyOf(gs.getConnectionLine());
  final LineAttributes outlinelia=gs.getOutline();
  final int iLineWidth=lia.getThickness();
  final Marker mStart=gs.getStartMarker();
  final Marker mEnd=gs.getEndMarker();
  final boolean bTransposed=isTransposed();
  float[] faX=new float[dpha.length];
  float[][] faY=new float[dpha.length][2];
  Location lo;
  Location loStart=null, loEnd=null;
  Location[] loaLine=null;
  LineRenderEvent lre;
  PolygonRenderEvent pre;
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{gs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && gs.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)gs.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(gs);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{gs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,gs);
  }
  Fill fLineFill;
  if (gs.isPaletteLineColor()) {
    fLineFill=fPaletteEntry;
    lia.setColor(FillUtil.getColor(fPaletteEntry));
  }
 else {
    Fill outlineFill=gs.getOutlineFill();
    fLineFill=lia.getColor() == null ? outlineFill : lia.getColor();
    if (outlineFill != null) {
      lia.setColor(FillUtil.getColor(outlineFill));
    }
  }
  renderClipping(ipr,getPlotBounds());
  final AutoScale scale=getInternalOrthogonalAxis().getScale();
  for (int i=0; i < dpha.length; i++) {
    GanttEntry ge=(GanttEntry)dpha[i].getOrthogonalValue();
    if (!isValidGanttEntry(ge)) {
      continue;
    }
    if (checkEntryInRange(se,scale.getMinimum(),scale.getMaximum()) > 0) {
      dpha[i].markOutside();
    }
    CDateTime geStart=ge.getStart();
    CDateTime geEnd=ge.getEnd();
    double dX=0, dY=0;
    double dStart=0, dEnd=0;
    lo=dpha[i].getLocation();
    dX=(int)lo.getX();
    dY=(int)lo.getY();
    if (srh.isCategoryScale()) {
      double fSize=dpha[i].getSize();
      if (bTransposed) {
        dY+=fSize / 2;
      }
 else {
        dX+=fSize / 2;
      }
    }
    if (geStart != null) {
      dStart=srh.getLocationOnOrthogonal(geStart);
    }
    if (geEnd != null) {
      dEnd=srh.getLocationOnOrthogonal(geEnd);
    }
 else {
      dEnd=dStart;
    }
    if (geStart == null) {
      dStart=dEnd;
    }
    if (loStart == null) {
      loStart=goFactory.createLocation(0,0);
      loEnd=goFactory.createLocation(0,0);
    }
    if (cwa.isTransposed()) {
      loStart.set(dStart,dY);
      loEnd.set(dEnd,dY);
      faX[i]=(float)dY;
      faY[i][0]=(float)dStart;
      faY[i][1]=(float)dEnd;
      loaLine=new Location[4];
      loaLine[0]=goFactory.createLocation(dStart,dY + iLineWidth / 2.0);
      loaLine[1]=goFactory.createLocation(dStart,dY - iLineWidth / 2.0);
      loaLine[2]=goFactory.createLocation(dEnd,dY - iLineWidth / 2.0);
      loaLine[3]=goFactory.createLocation(dEnd,dY + iLineWidth / 2.0);
    }
 else {
      loStart.set(dX,dStart);
      loEnd.set(dX,dEnd);
      faX[i]=(float)dX;
      faY[i][0]=(float)dStart;
      faY[i][1]=(float)dEnd;
      loaLine=new Location[4];
      loaLine[0]=goFactory.createLocation(dX + iLineWidth / 2.0,dStart);
      loaLine[1]=goFactory.createLocation(dX - iLineWidth / 2.0,dStart);
      loaLine[2]=goFactory.createLocation(dX - iLineWidth / 2.0,dEnd);
      loaLine[3]=goFactory.createLocation(dX + iLineWidth / 2.0,dEnd);
    }
    if (bPaletteByCategory) {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    }
    updateTranslucency(fPaletteEntry,gs);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (lia.isVisible() && geStart != null && geEnd != null) {
      if (gs.isPaletteLineColor()) {
        fLineFill=fPaletteEntry;
        lia.setColor(FillUtil.getColor(fPaletteEntry));
      }
      if ((iLineWidth == 1) || (lia.getStyle() != LineStyle.SOLID_LITERAL)) {
        lre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(gs,dpha[i]),LineRenderEvent.class);
        lre.setLineAttributes(lia);
        lre.setStart(loStart);
        lre.setEnd(loEnd);
        ipr.drawLine(lre);
        renderInteractivity(ipr,dpha[i],lre);
      }
 else {
        pre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(gs,dpha[i]),PolygonRenderEvent.class);
        pre.setPoints(loaLine);
        pre.setBackground(fLineFill);
        ipr.fillPolygon(pre);
        renderInteractivity(ipr,dpha[i],pre);
      }
    }
    if (outlinelia.isVisible() && geStart != null && geEnd != null) {
      pre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(gs,dpha[i]),PolygonRenderEvent.class);
      pre.setPoints(loaLine);
      pre.setOutline(outlinelia);
      ipr.drawPolygon(pre);
    }
    if (geStart != null && mStart.isVisible() || dpha[i].isOutside()) {
      Location loStartMarker=loStart.copyInstance();
      Position mStartPosition=transposePosition(gs.getStartMarkerPosition());
switch (mStartPosition.getValue()) {
case Position.ABOVE:
        if (bTransposed) {
          loStartMarker.set(loStart.getX(),loStart.getY() - mStart.getSize());
        }
      break;
case Position.BELOW:
    if (bTransposed) {
      loStartMarker.set(loStart.getX(),loStart.getY() + mStart.getSize());
    }
  break;
}
Fill startFill=fPaletteEntry;
if (fPaletteEntry instanceof MultipleFill && ((MultipleFill)fPaletteEntry).getFills().size() > 0) {
startFill=((MultipleFill)fPaletteEntry).getFills().get(0);
}
renderMarker(gs,ipr,mStart,loStartMarker,outlinelia,startFill,dpha[i],null,true,false);
}
if (geEnd != null && mEnd.isVisible() || dpha[i].isOutside()) {
Location loEndMarker=loEnd.copyInstance();
Position mEndPosition=transposePosition(gs.getEndMarkerPosition());
switch (mEndPosition.getValue()) {
case Position.ABOVE:
if (bTransposed) {
  loEndMarker.set(loEnd.getX(),loEnd.getY() - mEnd.getSize());
}
break;
case Position.BELOW:
if (bTransposed) {
loEndMarker.set(loEnd.getX(),loEnd.getY() + mEnd.getSize());
}
break;
}
Fill endFill=fPaletteEntry;
if (fPaletteEntry instanceof MultipleFill && ((MultipleFill)fPaletteEntry).getFills().size() > 1) {
endFill=((MultipleFill)fPaletteEntry).getFills().get(1);
}
renderMarker(gs,ipr,mEnd,loEndMarker,outlinelia,endFill,dpha[i],null,true,false);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
}
Label laDataPoint=srh.getLabelAttributes(gs);
if (laDataPoint.isVisible()) {
Position pDataPoint=srh.getLabelPosition(gs);
Location loDataPoint=goFactory.createLocation(0,0);
final boolean useDecorationLabel=gs.isUseDecorationLabelValue();
final double dLabelGap=Math.max(Math.max(mStart.isVisible() ? mStart.getSize() : 0,mEnd.isVisible() ? mEnd.getSize() : 0),(lia.isVisible() ? iLineWidth / 2 : 0) + (outlinelia.isVisible() ? outlinelia.getThickness() : 0));
for (int i=0; i < dpha.length; i++) {
GanttEntry ge=(GanttEntry)dpha[i].getOrthogonalValue();
if (ge == null || ge.getStart() == null || ge.getEnd() == null) {
continue;
}
if (!isValidGanttEntry(ge) || dpha[i].isOutside()) {
continue;
}
if (useDecorationLabel) {
laDataPoint.getCaption().setValue(ge.getLabel());
}
 else {
laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
}
switch (pDataPoint.getValue()) {
case Position.ABOVE:
if (!cwa.isTransposed()) {
loDataPoint.set(faX[i],faY[i][1] - mEnd.getSize() - p.getVerticalSpacing());
}
 else {
loDataPoint.set((faY[i][0] + faY[i][1]) / 2,faX[i] - dLabelGap - p.getVerticalSpacing());
}
break;
case Position.BELOW:
if (!cwa.isTransposed()) {
loDataPoint.set(faX[i],faY[i][0] + mStart.getSize() + p.getVerticalSpacing());
}
 else {
loDataPoint.set((faY[i][0] + faY[i][1]) / 2,faX[i] + dLabelGap + p.getVerticalSpacing());
}
break;
case Position.LEFT:
if (!cwa.isTransposed()) {
loDataPoint.set(faX[i] - dLabelGap - p.getHorizontalSpacing(),(faY[i][0] + faY[i][1]) / 2);
}
 else {
loDataPoint.set(faY[i][0] - dLabelGap - p.getHorizontalSpacing(),faX[i]);
}
break;
case Position.RIGHT:
if (!cwa.isTransposed()) {
loDataPoint.set(faX[i] + dLabelGap + p.getHorizontalSpacing(),(faY[i][0] + faY[i][1]) / 2);
}
 else {
loDataPoint.set(faY[i][1] + dLabelGap + p.getHorizontalSpacing(),faX[i]);
}
break;
case Position.INSIDE:
if (!cwa.isTransposed()) {
loDataPoint.set(faX[i],(faY[i][0] + faY[i][1]) / 2);
}
 else {
loDataPoint.set((faY[i][0] + faY[i][1]) / 2,faX[i]);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
if (laDataPoint.isVisible()) {
renderLabel(WrappedStructureSource.createSeriesDataPoint(gs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
}
restoreClipping(ipr);
}",0.9988304093567252
68535,"@SuppressWarnings(""String_Node_Str"") public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  ChartWithAxes cwa=(ChartWithAxes)getModel();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
  }
  LineSeries ls=(LineSeries)getSeries();
  if (!ls.isVisible()) {
    return;
  }
  ChartDimension cd=cwa.getDimension();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double fX=0, fY=0, fZ=0, fWidth=0, fWidthZ=0, fHeight=0;
  Location lo=null;
  Location3D lo3d=null;
  boolean isAreaSeries=(getSeries() instanceof AreaSeries && !(getSeries() instanceof DifferenceSeries));
  boolean bShowAsTape=(cd.getValue() == ChartDimension.THREE_DIMENSIONAL) || (isAreaSeries && cd.getValue() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH);
  if (bShowAsTape) {
    bShowAsTape=validateShowAsTape();
  }
  AxisSubUnit au;
  Axis ax=getAxis();
  double dValue, dEnd;
  StackedSeriesLookup ssl=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
  }
  LineAttributes lia=ls.getLineAttributes();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  double[] faZ=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ls},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ls.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ls.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ls);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ls,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker m=null;
  if (ls.getMarkers().size() > 0) {
    m=ls.getMarkers().get(iThisSeriesIndex % ls.getMarkers().size());
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
  }
 else   if (iSeriesIndex > 0) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iSeriesIndex - 1);
  }
  updateTranslucency(fPaletteEntry,ls);
  double dTapeWidth=-1;
  double dUnitSpacingZ=0;
  for (int i=0; i < dpha.length; i++) {
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      if (ChartUtil.mathEqual(dTapeWidth,-1)) {
        final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
        dTapeWidth=dpha[i].getSize2D().getHeight() * (100 - dUnitSpacing) / 100;
        dUnitSpacingZ=dpha[i].getSize2D().getHeight() * dUnitSpacing / 200;
      }
    }
 else {
      lo=dpha[i].getLocation();
    }
    if (cwa.isTransposed()) {
      if (srh.isCategoryScale()) {
        fHeight=dpha[i].getSize();
      }
      fY=(lo.getY() + fHeight / 2.0);
      faY[i]=fY;
      if (ls.isStacked() || ax.isPercent()) {
        au=ssl.getUnit(ls,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        dEnd=computeStackPosition(au,dValue,ax);
        try {
          faX[i]=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)));
          dpha[i].setStackOrthogonalValue(new Double(dEnd));
          if (faX[i] < srh.getPlotBaseLocation()) {
            faX[i]=srh.getPlotBaseLocation();
          }
          au.setLastPosition(dValue,faX[i],0);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        faX[i]=lo.getX();
      }
    }
 else {
      if (bRendering3D) {
        fWidth=dpha[i].getSize2D().getWidth();
        fWidthZ=dpha[i].getSize2D().getHeight();
        fX=lo3d.getX() + fWidth / 2;
        fZ=lo3d.getZ() + fWidthZ - dUnitSpacingZ;
        faX[i]=fX;
        faZ[i]=fZ;
      }
 else {
        if (srh.isCategoryScale()) {
          fWidth=dpha[i].getSize();
        }
        fX=(lo.getX() + fWidth / 2.0);
        faX[i]=fX;
      }
      if (ls.isStacked() || ax.isPercent()) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(ls,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        dEnd=computeStackPosition(au,dValue,ax);
        try {
          faY[i]=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)));
          dpha[i].setStackOrthogonalValue(new Double(dEnd));
          au.setLastPosition(dValue,faY[i],0);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (bRendering3D) {
          faY[i]=lo3d.getY();
        }
 else {
          faY[i]=lo.getY();
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (faY[i] < plotBaseLocation) {
          faY[i]=plotBaseLocation;
        }
        if (faY[i] > plotBaseLocation + srh3d.getPlotHeight()) {
          faY[i]=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
    }
  }
  if (!bRendering3D) {
    handleOutsideDataPoints(ipr,srh,faX,faY,bShowAsTape);
  }
  if (ls.isCurve()) {
    renderAsCurve(ipr,ls.getLineAttributes(),bRendering3D ? (ISeriesRenderingHints)srh3d : srh,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dTapeWidth,fPaletteEntry,ls.isPaletteLineColor());
    renderShadowAsCurve(ipr,lia,bRendering3D ? (ISeriesRenderingHints)srh3d : srh,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dTapeWidth);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ls);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ls,ipr,m,bRendering3D ? goFactory.createLocation3D(faX[i],faY[i],faZ[i]) : goFactory.createLocation(faX[i],faY[i]),ls.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    renderShadow(ipr,p,lia,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dpha);
    renderDataPoints(ipr,p,bRendering3D ? (ISeriesRenderingHints)srh3d : srh,dpha,lia,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dTapeWidth,fPaletteEntry,ls.isPaletteLineColor());
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ls);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ls,ipr,m,bRendering3D ? goFactory.createLocation3D(faX[i],faY[i],faZ[i]) : goFactory.createLocation(faX[i],faY[i]),ls.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  try {
    if (bRendering3D) {
      laDataPoint=srh3d.getLabelAttributes(ls);
      if (laDataPoint.isVisible()) {
        pDataPoint=srh3d.getLabelPosition(ls);
        loDataPoint3d=goFactory.createLocation3D(0,0,0);
      }
    }
 else {
      laDataPoint=srh.getLabelAttributes(ls);
      if (laDataPoint.isVisible()) {
        pDataPoint=srh.getLabelPosition(ls);
        loDataPoint=goFactory.createLocation(0,0);
      }
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    final double dSize=m == null ? 0 : m.getSize();
    for (int i=0; i < dpha.length; i++) {
      if (isNaN(dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint=bRendering3D ? srh3d.getLabelAttributes(ls) : srh.getLabelAttributes(ls);
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
      if (laDataPoint.isVisible()) {
        if (bRendering3D) {
switch (pDataPoint.getValue()) {
case Position.ABOVE:
            loDataPoint3d.set(faX[i],faY[i] + dSize + p.getVerticalSpacing(),faZ[i] + 1);
          break;
case Position.BELOW:
        loDataPoint3d.set(faX[i],faY[i] - dSize - p.getVerticalSpacing(),faZ[i] + 1);
      break;
case Position.LEFT:
    loDataPoint3d.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i],faZ[i] + 1);
  break;
case Position.RIGHT:
loDataPoint3d.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i],faZ[i] + 1);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
final Text3DRenderEvent tre3d=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ls,dpha[i]),Text3DRenderEvent.class);
tre3d.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
tre3d.setLabel(laDataPoint);
tre3d.setTextPosition(Methods.getLabelPosition(pDataPoint));
tre3d.setLocation3D(loDataPoint3d);
getDeferredCache().addLabel(tre3d);
}
 else {
switch (pDataPoint.getValue()) {
case Position.ABOVE:
loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
break;
case Position.BELOW:
loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
renderLabel(WrappedStructureSource.createSeriesDataPoint(ls,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
}
if (!bRendering3D && getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
if (!bRendering3D) {
restoreClipping(ipr);
}
}","@SuppressWarnings(""String_Node_Str"") public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  ChartWithAxes cwa=(ChartWithAxes)getModel();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
  }
  LineSeries ls=(LineSeries)getSeries();
  if (!ls.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  ChartDimension cd=cwa.getDimension();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double fX=0, fY=0, fZ=0, fWidth=0, fWidthZ=0, fHeight=0;
  Location lo=null;
  Location3D lo3d=null;
  boolean isAreaSeries=(getSeries() instanceof AreaSeries && !(getSeries() instanceof DifferenceSeries));
  boolean bShowAsTape=(cd.getValue() == ChartDimension.THREE_DIMENSIONAL) || (isAreaSeries && cd.getValue() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH);
  if (bShowAsTape) {
    bShowAsTape=validateShowAsTape();
  }
  AxisSubUnit au;
  Axis ax=getAxis();
  double dValue, dEnd;
  StackedSeriesLookup ssl=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
  }
  LineAttributes lia=ls.getLineAttributes();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  double[] faZ=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ls},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ls.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ls.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ls);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ls,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker m=null;
  if (ls.getMarkers().size() > 0) {
    m=ls.getMarkers().get(iThisSeriesIndex % ls.getMarkers().size());
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
  }
 else   if (iSeriesIndex > 0) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iSeriesIndex - 1);
  }
  updateTranslucency(fPaletteEntry,ls);
  double dTapeWidth=-1;
  double dUnitSpacingZ=0;
  for (int i=0; i < dpha.length; i++) {
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      if (ChartUtil.mathEqual(dTapeWidth,-1)) {
        final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
        dTapeWidth=dpha[i].getSize2D().getHeight() * (100 - dUnitSpacing) / 100;
        dUnitSpacingZ=dpha[i].getSize2D().getHeight() * dUnitSpacing / 200;
      }
    }
 else {
      lo=dpha[i].getLocation();
    }
    if (cwa.isTransposed()) {
      if (srh.isCategoryScale()) {
        fHeight=dpha[i].getSize();
      }
      fY=(lo.getY() + fHeight / 2.0);
      faY[i]=fY;
      if (ls.isStacked() || ax.isPercent()) {
        au=ssl.getUnit(ls,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        dEnd=computeStackPosition(au,dValue,ax);
        try {
          faX[i]=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)));
          dpha[i].setStackOrthogonalValue(new Double(dEnd));
          if (faX[i] < srh.getPlotBaseLocation()) {
            faX[i]=srh.getPlotBaseLocation();
          }
          au.setLastPosition(dValue,faX[i],0);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        faX[i]=lo.getX();
      }
    }
 else {
      if (bRendering3D) {
        fWidth=dpha[i].getSize2D().getWidth();
        fWidthZ=dpha[i].getSize2D().getHeight();
        fX=lo3d.getX() + fWidth / 2;
        fZ=lo3d.getZ() + fWidthZ - dUnitSpacingZ;
        faX[i]=fX;
        faZ[i]=fZ;
      }
 else {
        if (srh.isCategoryScale()) {
          fWidth=dpha[i].getSize();
        }
        fX=(lo.getX() + fWidth / 2.0);
        faX[i]=fX;
      }
      if (ls.isStacked() || ax.isPercent()) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(ls,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        dEnd=computeStackPosition(au,dValue,ax);
        try {
          faY[i]=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)));
          dpha[i].setStackOrthogonalValue(new Double(dEnd));
          au.setLastPosition(dValue,faY[i],0);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (bRendering3D) {
          faY[i]=lo3d.getY();
        }
 else {
          faY[i]=lo.getY();
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (faY[i] < plotBaseLocation) {
          faY[i]=plotBaseLocation;
        }
        if (faY[i] > plotBaseLocation + srh3d.getPlotHeight()) {
          faY[i]=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
    }
  }
  if (!bRendering3D) {
    handleOutsideDataPoints(ipr,srh,faX,faY,bShowAsTape);
  }
  if (ls.isCurve()) {
    renderAsCurve(ipr,ls.getLineAttributes(),bRendering3D ? (ISeriesRenderingHints)srh3d : srh,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dTapeWidth,fPaletteEntry,ls.isPaletteLineColor());
    renderShadowAsCurve(ipr,lia,bRendering3D ? (ISeriesRenderingHints)srh3d : srh,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dTapeWidth);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ls);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ls,ipr,m,bRendering3D ? goFactory.createLocation3D(faX[i],faY[i],faZ[i]) : goFactory.createLocation(faX[i],faY[i]),ls.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    renderShadow(ipr,p,lia,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dpha);
    renderDataPoints(ipr,p,bRendering3D ? (ISeriesRenderingHints)srh3d : srh,dpha,lia,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dTapeWidth,fPaletteEntry,ls.isPaletteLineColor());
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ls);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ls,ipr,m,bRendering3D ? goFactory.createLocation3D(faX[i],faY[i],faZ[i]) : goFactory.createLocation(faX[i],faY[i]),ls.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  try {
    if (bRendering3D) {
      laDataPoint=srh3d.getLabelAttributes(ls);
      if (laDataPoint.isVisible()) {
        pDataPoint=srh3d.getLabelPosition(ls);
        loDataPoint3d=goFactory.createLocation3D(0,0,0);
      }
    }
 else {
      laDataPoint=srh.getLabelAttributes(ls);
      if (laDataPoint.isVisible()) {
        pDataPoint=srh.getLabelPosition(ls);
        loDataPoint=goFactory.createLocation(0,0);
      }
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    final double dSize=m == null ? 0 : m.getSize();
    for (int i=0; i < dpha.length; i++) {
      if (isNaN(dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint=bRendering3D ? srh3d.getLabelAttributes(ls) : srh.getLabelAttributes(ls);
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
      if (laDataPoint.isVisible()) {
        if (bRendering3D) {
switch (pDataPoint.getValue()) {
case Position.ABOVE:
            loDataPoint3d.set(faX[i],faY[i] + dSize + p.getVerticalSpacing(),faZ[i] + 1);
          break;
case Position.BELOW:
        loDataPoint3d.set(faX[i],faY[i] - dSize - p.getVerticalSpacing(),faZ[i] + 1);
      break;
case Position.LEFT:
    loDataPoint3d.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i],faZ[i] + 1);
  break;
case Position.RIGHT:
loDataPoint3d.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i],faZ[i] + 1);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
final Text3DRenderEvent tre3d=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ls,dpha[i]),Text3DRenderEvent.class);
tre3d.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
tre3d.setLabel(laDataPoint);
tre3d.setTextPosition(Methods.getLabelPosition(pDataPoint));
tre3d.setLocation3D(loDataPoint3d);
getDeferredCache().addLabel(tre3d);
}
 else {
switch (pDataPoint.getValue()) {
case Position.ABOVE:
loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
break;
case Position.BELOW:
loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
renderLabel(WrappedStructureSource.createSeriesDataPoint(ls,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
}
if (!bRendering3D && getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
if (!bRendering3D) {
restoreClipping(ipr);
}
}",0.999079059223576
68536,"public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  ScatterSeries ss=(ScatterSeries)getSeries();
  if (!ss.isVisible()) {
    return;
  }
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  DataPointHints[] dpha=srh.getDataPoints();
  Location lo;
  LineAttributes lia=ss.getLineAttributes();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ss.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ss.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ss);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker m=null;
  if (ss.getMarkers().size() > 0) {
    m=ss.getMarkers().get(iThisSeriesIndex % ss.getMarkers().size());
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,ss);
  }
  boolean isCategoryAxis=srh.isCategoryScale();
  for (int i=0; i < dpha.length; i++) {
    double unitSize=dpha[i].getSize();
    lo=dpha[i].getLocation();
    if (cwa.isTransposed()) {
      faX[i]=lo.getX();
      faY[i]=lo.getY() + (isCategoryAxis ? (unitSize / 2) : 0);
    }
 else {
      faX[i]=lo.getX() + (isCategoryAxis ? (unitSize / 2) : 0);
      faY[i]=lo.getY();
    }
  }
  handleOutsideDataPoints(ipr,srh,faX,faY,false);
  if (ss.isCurve()) {
    CurveRenderer cr=new CurveRenderer(cwa,this,ss.getLineAttributes(),goFactory.createLocations(faX,faY),false,-1,false,true,fPaletteEntry,ss.isPaletteLineColor(),true);
    cr.draw(ipr);
    renderShadowAsCurve(ipr,lia,srh,goFactory.createLocations(faX,faY),false,-1);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ss);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ss,ipr,m,goFactory.createLocation(faX[i],faY[i]),ss.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    LineRenderEvent lre;
    final Location positionDelta=(cwa.isTransposed()) ? goFactory.createLocation(-3 * getDeviceScale(),0) : goFactory.createLocation(0,3 * getDeviceScale());
    Location[] loaShadow=null;
    lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),LineRenderEvent.class);
    final ColorDefinition cLineShadow=ss.getShadowColor();
    boolean bConnectMissing=ss.isConnectMissingValue();
    if (!ChartUtil.isColorTransparent(cLineShadow)) {
      for (int i=1; i < dpha.length; i++) {
        int pindex=-1;
        if (bConnectMissing) {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          pindex=getPreviousNonNullIndex(i,dpha);
          if (pindex == -1) {
            continue;
          }
        }
 else {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          if (i > 0 && isNaN(dpha[i - 1].getOrthogonalValue())) {
            continue;
          }
          pindex=i - 1;
        }
        if (loaShadow == null) {
          loaShadow=new Location[2];
          loaShadow[0]=goFactory.createLocation(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1]=goFactory.createLocation(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
 else {
          loaShadow[0].set(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1].set(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
        lre.setStart(loaShadow[0]);
        lre.setEnd(loaShadow[1]);
        LineAttributes liaShadow=goFactory.copyOf(lia);
        liaShadow.setColor(cLineShadow);
        lre.setLineAttributes(liaShadow);
        ipr.drawLine(lre);
      }
    }
    if (lia.isVisible()) {
      Location[] loa=new Location[2];
      for (int i=1; i < dpha.length; i++) {
        int pindex=-1;
        if (bConnectMissing) {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          pindex=getPreviousNonNullIndex(i,dpha);
          if (pindex == -1) {
            continue;
          }
        }
 else {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          if (i > 0 && isNaN(dpha[i - 1].getOrthogonalValue())) {
            continue;
          }
          pindex=i - 1;
        }
        loa[0]=goFactory.createLocation(faX[pindex],faY[pindex]);
        loa[1]=goFactory.createLocation(faX[i],faY[i]);
{
          lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),LineRenderEvent.class);
          if (ss.isPaletteLineColor() && fPaletteEntry instanceof ColorDefinition) {
            LineAttributes newLia=goFactory.copyOf(lia);
            newLia.setColor((ColorDefinition)fPaletteEntry);
            lre.setLineAttributes(newLia);
          }
 else {
            lre.setLineAttributes(lia);
          }
          lre.setStart(loa[0]);
          lre.setEnd(loa[1]);
          ipr.drawLine(lre);
        }
      }
    }
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ss);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ss,ipr,m,goFactory.createLocation(faX[i],faY[i]),ss.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  try {
    laDataPoint=srh.getLabelAttributes(ss);
    pDataPoint=srh.getLabelPosition(ss);
    loDataPoint=goFactory.createLocation(0,0);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    final double dSize=m == null ? 0 : m.getSize();
    for (int i=0; i < dpha.length; i++) {
      if (isNaN(dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint=srh.getLabelAttributes(ss);
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
switch (pDataPoint.getValue()) {
case Position.ABOVE:
        loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
      break;
case Position.BELOW:
    loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
  break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i]);
if (laDataPoint.isVisible()) {
renderLabel(WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,dpha[i]);
}
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
restoreClipping(ipr);
}","public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  ScatterSeries ss=(ScatterSeries)getSeries();
  if (!ss.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  DataPointHints[] dpha=srh.getDataPoints();
  Location lo;
  LineAttributes lia=ss.getLineAttributes();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ss.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ss.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ss);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker m=null;
  if (ss.getMarkers().size() > 0) {
    m=ss.getMarkers().get(iThisSeriesIndex % ss.getMarkers().size());
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,ss);
  }
  boolean isCategoryAxis=srh.isCategoryScale();
  for (int i=0; i < dpha.length; i++) {
    double unitSize=dpha[i].getSize();
    lo=dpha[i].getLocation();
    if (cwa.isTransposed()) {
      faX[i]=lo.getX();
      faY[i]=lo.getY() + (isCategoryAxis ? (unitSize / 2) : 0);
    }
 else {
      faX[i]=lo.getX() + (isCategoryAxis ? (unitSize / 2) : 0);
      faY[i]=lo.getY();
    }
  }
  handleOutsideDataPoints(ipr,srh,faX,faY,false);
  if (ss.isCurve()) {
    CurveRenderer cr=new CurveRenderer(cwa,this,ss.getLineAttributes(),goFactory.createLocations(faX,faY),false,-1,false,true,fPaletteEntry,ss.isPaletteLineColor(),true);
    cr.draw(ipr);
    renderShadowAsCurve(ipr,lia,srh,goFactory.createLocations(faX,faY),false,-1);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ss);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ss,ipr,m,goFactory.createLocation(faX[i],faY[i]),ss.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    LineRenderEvent lre;
    final Location positionDelta=(cwa.isTransposed()) ? goFactory.createLocation(-3 * getDeviceScale(),0) : goFactory.createLocation(0,3 * getDeviceScale());
    Location[] loaShadow=null;
    lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),LineRenderEvent.class);
    final ColorDefinition cLineShadow=ss.getShadowColor();
    boolean bConnectMissing=ss.isConnectMissingValue();
    if (!ChartUtil.isColorTransparent(cLineShadow)) {
      for (int i=1; i < dpha.length; i++) {
        int pindex=-1;
        if (bConnectMissing) {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          pindex=getPreviousNonNullIndex(i,dpha);
          if (pindex == -1) {
            continue;
          }
        }
 else {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          if (i > 0 && isNaN(dpha[i - 1].getOrthogonalValue())) {
            continue;
          }
          pindex=i - 1;
        }
        if (loaShadow == null) {
          loaShadow=new Location[2];
          loaShadow[0]=goFactory.createLocation(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1]=goFactory.createLocation(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
 else {
          loaShadow[0].set(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1].set(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
        lre.setStart(loaShadow[0]);
        lre.setEnd(loaShadow[1]);
        LineAttributes liaShadow=goFactory.copyOf(lia);
        liaShadow.setColor(cLineShadow);
        lre.setLineAttributes(liaShadow);
        ipr.drawLine(lre);
      }
    }
    if (lia.isVisible()) {
      Location[] loa=new Location[2];
      for (int i=1; i < dpha.length; i++) {
        int pindex=-1;
        if (bConnectMissing) {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          pindex=getPreviousNonNullIndex(i,dpha);
          if (pindex == -1) {
            continue;
          }
        }
 else {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          if (i > 0 && isNaN(dpha[i - 1].getOrthogonalValue())) {
            continue;
          }
          pindex=i - 1;
        }
        loa[0]=goFactory.createLocation(faX[pindex],faY[pindex]);
        loa[1]=goFactory.createLocation(faX[i],faY[i]);
{
          lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),LineRenderEvent.class);
          if (ss.isPaletteLineColor() && fPaletteEntry instanceof ColorDefinition) {
            LineAttributes newLia=goFactory.copyOf(lia);
            newLia.setColor((ColorDefinition)fPaletteEntry);
            lre.setLineAttributes(newLia);
          }
 else {
            lre.setLineAttributes(lia);
          }
          lre.setStart(loa[0]);
          lre.setEnd(loa[1]);
          ipr.drawLine(lre);
        }
      }
    }
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ss);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ss,ipr,m,goFactory.createLocation(faX[i],faY[i]),ss.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  try {
    laDataPoint=srh.getLabelAttributes(ss);
    pDataPoint=srh.getLabelPosition(ss);
    loDataPoint=goFactory.createLocation(0,0);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    final double dSize=m == null ? 0 : m.getSize();
    for (int i=0; i < dpha.length; i++) {
      if (isNaN(dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint=srh.getLabelAttributes(ss);
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
switch (pDataPoint.getValue()) {
case Position.ABOVE:
        loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
      break;
case Position.BELOW:
    loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
  break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i]);
if (laDataPoint.isVisible()) {
renderLabel(WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,dpha[i]);
}
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
restoreClipping(ipr);
}",0.998829461552314
68537,"public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  if (isTransposed()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final StockSeries ss=(StockSeries)getSeries();
  if (!ss.isVisible()) {
    return;
  }
  final double dSeriesThickness=srh.getSeriesThickness();
  final DataPointHints[] dpha=srh.getDataPoints();
  final LineAttributes lia=ss.getLineAttributes();
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  double dX=0, dY=0, dWidth=0, dHeight=0, dSpacing=0;
  double dLow, dHigh, dOpen, dClose;
  Location lo, loStart=null, loEnd=null, loUpper=goFactory.createLocation(0,0), loLower=goFactory.createLocation(0,0);
  Location[] loaFrontFace=null;
  LineRenderEvent lre;
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  int iThisSeriesIndex=-1;
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ss);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
  }
  renderClipping(ipr,getPlotBounds());
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  ssl=srh.getStackedSeriesLookup();
  sg=ssl.getStackGroup(ss);
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  if (iSharedUnitCount == 1) {
    iSharedUnitIndex=0;
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  final AutoScale scale=getInternalOrthogonalAxis().getScale();
  for (int i=0; i < dpha.length; i++) {
    StockEntry se=(StockEntry)dpha[i].getOrthogonalValue();
    if (!isValidEntry(se)) {
      continue;
    }
    correctEntry(se);
    if (checkEntryInRange(se,scale.getMinimum(),scale.getMaximum()) > 0) {
      dpha[i].markOutside();
    }
    if (bPaletteByCategory) {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    }
    updateTranslucency(fPaletteEntry,ss);
    lo=dpha[i].getLocation();
    dX=lo.getX();
    dY=lo.getY();
    try {
      dLow=srh.getLocationOnOrthogonal(new Double(se.getLow()));
      dHigh=srh.getLocationOnOrthogonal(new Double(se.getHigh()));
      dOpen=srh.getLocationOnOrthogonal(new Double(se.getOpen()));
      dClose=srh.getLocationOnOrthogonal(new Double(se.getClose()));
    }
 catch (    Exception ex) {
      logger.log(ex);
      continue;
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    dSpacing=(dpha[i].getSize() * dUnitSpacing) / 200;
    if (loStart == null) {
      loStart=goFactory.createLocation(0,0);
      loEnd=goFactory.createLocation(0,0);
      loaFrontFace=new Location[4];
      for (int j=0; j < 4; j++) {
        loaFrontFace[j]=goFactory.createLocation(0,0);
      }
    }
    dWidth=dpha[i].getSize();
    dWidth-=2 * dSpacing;
    dWidth/=iSharedUnitCount;
    if (cwa.getBaseAxes()[0].isCategoryAxis()) {
      dX+=dSpacing + dWidth / 2 + iSharedUnitIndex * dWidth;
    }
    if (ss.isShowAsBarStick()) {
      int stickLength=ss.getStickLength();
      Location loStart2=goFactory.createLocation(0,0), loEnd2=goFactory.createLocation(0,0);
{
        loStart.set(dX - stickLength,dOpen);
        loEnd.set(dX + stickLength,dClose);
        loStart2.set(dX,dOpen);
        loEnd2.set(dX,dClose);
        loUpper.set(dX,dHigh > dLow ? dHigh : dLow);
        loLower.set(dX,dHigh < dLow ? dHigh : dLow);
        loaFrontFace[0].set(dX - stickLength,dHigh);
        loaFrontFace[1].set(dX - stickLength,dLow);
        loaFrontFace[2].set(dX + stickLength,dLow);
        loaFrontFace[3].set(dX + stickLength,dHigh);
      }
      lre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),LineRenderEvent.class);
      lre.setLineAttributes(lia);
      lre.setStart(loUpper);
      lre.setEnd(loLower);
      ipr.drawLine(lre);
      lre.setStart(loStart);
      lre.setEnd(loStart2);
      ipr.drawLine(lre);
      lre.setStart(loEnd);
      lre.setEnd(loEnd2);
      ipr.drawLine(lre);
    }
 else {
{
        loStart.set(dX,dLow);
        loEnd.set(dX,dHigh);
        loaFrontFace[0].set(dX - dWidth / 2,dOpen);
        loaFrontFace[1].set(dX - dWidth / 2,dClose);
        loaFrontFace[2].set(dX + dWidth / 2,dClose);
        loaFrontFace[3].set(dX + dWidth / 2,dOpen);
        loUpper.set(dX,dOpen > dClose ? dOpen : dClose);
        loLower.set(dX,dOpen < dClose ? dOpen : dClose);
      }
      lre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),LineRenderEvent.class);
      lre.setLineAttributes(lia);
      lre.setStart(loStart);
      lre.setEnd(loUpper);
      ipr.drawLine(lre);
      lre.setStart(loLower);
      lre.setEnd(loEnd);
      ipr.drawLine(lre);
      renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),loaFrontFace,convertFill(fPaletteEntry,se.getClose() > se.getOpen()),lia,cwa.getDimension(),dSeriesThickness,true);
    }
    if (cwa.isTransposed()) {
      faX[i]=((loUpper.getX() + loLower.getX()) / 2);
      faY[i]=loUpper.getY();
    }
 else {
      faX[i]=loLower.getX();
      faY[i]=((loUpper.getY() + loLower.getY()) / 2);
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=ss.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]);
        final InteractionEvent iev=((EventObjectCache)ipr).getEventObject(iSource,InteractionEvent.class);
        iev.setCursor(ss.getCursor());
        Trigger tg;
        for (int t=0; t < elTriggers.size(); t++) {
          tg=goFactory.copyOf(elTriggers.get(t));
          processTrigger(tg,iSource);
          iev.addTrigger(tg);
        }
        final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),PolygonRenderEvent.class);
        pre.setPoints(loaFrontFace);
        iev.setHotSpot(pre);
        ipr.enableInteraction(iev);
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    renderDataPointLabel(srh.getLabelAttributes(getSeries()),dpha[i],srh.getLabelPosition(getSeries()),loaFrontFace,p,sh,dX,dY,dWidth,dHeight,dHigh,dLow,dOpen,dClose);
  }
  if (getSeries().getCurveFitting() != null) {
    Location[] larray=new Location[faX.length];
    for (int i=0; i < larray.length; i++) {
      larray[i]=goFactory.createLocation(faX[i],faY[i]);
    }
    larray=filterNull(larray);
    renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
  }
  restoreClipping(ipr);
}","public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  if (isTransposed()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final StockSeries ss=(StockSeries)getSeries();
  if (!ss.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final double dSeriesThickness=srh.getSeriesThickness();
  final DataPointHints[] dpha=srh.getDataPoints();
  final LineAttributes lia=ss.getLineAttributes();
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  double dX=0, dY=0, dWidth=0, dHeight=0, dSpacing=0;
  double dLow, dHigh, dOpen, dClose;
  Location lo, loStart=null, loEnd=null, loUpper=goFactory.createLocation(0,0), loLower=goFactory.createLocation(0,0);
  Location[] loaFrontFace=null;
  LineRenderEvent lre;
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  int iThisSeriesIndex=-1;
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ss);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
  }
  renderClipping(ipr,getPlotBounds());
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  ssl=srh.getStackedSeriesLookup();
  sg=ssl.getStackGroup(ss);
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  if (iSharedUnitCount == 1) {
    iSharedUnitIndex=0;
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  final AutoScale scale=getInternalOrthogonalAxis().getScale();
  for (int i=0; i < dpha.length; i++) {
    StockEntry se=(StockEntry)dpha[i].getOrthogonalValue();
    if (!isValidEntry(se)) {
      continue;
    }
    correctEntry(se);
    if (checkEntryInRange(se,scale.getMinimum(),scale.getMaximum()) > 0) {
      dpha[i].markOutside();
    }
    if (bPaletteByCategory) {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    }
    updateTranslucency(fPaletteEntry,ss);
    lo=dpha[i].getLocation();
    dX=lo.getX();
    dY=lo.getY();
    try {
      dLow=srh.getLocationOnOrthogonal(new Double(se.getLow()));
      dHigh=srh.getLocationOnOrthogonal(new Double(se.getHigh()));
      dOpen=srh.getLocationOnOrthogonal(new Double(se.getOpen()));
      dClose=srh.getLocationOnOrthogonal(new Double(se.getClose()));
    }
 catch (    Exception ex) {
      logger.log(ex);
      continue;
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    dSpacing=(dpha[i].getSize() * dUnitSpacing) / 200;
    if (loStart == null) {
      loStart=goFactory.createLocation(0,0);
      loEnd=goFactory.createLocation(0,0);
      loaFrontFace=new Location[4];
      for (int j=0; j < 4; j++) {
        loaFrontFace[j]=goFactory.createLocation(0,0);
      }
    }
    dWidth=dpha[i].getSize();
    dWidth-=2 * dSpacing;
    dWidth/=iSharedUnitCount;
    if (cwa.getBaseAxes()[0].isCategoryAxis()) {
      dX+=dSpacing + dWidth / 2 + iSharedUnitIndex * dWidth;
    }
    if (ss.isShowAsBarStick()) {
      int stickLength=ss.getStickLength();
      Location loStart2=goFactory.createLocation(0,0), loEnd2=goFactory.createLocation(0,0);
{
        loStart.set(dX - stickLength,dOpen);
        loEnd.set(dX + stickLength,dClose);
        loStart2.set(dX,dOpen);
        loEnd2.set(dX,dClose);
        loUpper.set(dX,dHigh > dLow ? dHigh : dLow);
        loLower.set(dX,dHigh < dLow ? dHigh : dLow);
        loaFrontFace[0].set(dX - stickLength,dHigh);
        loaFrontFace[1].set(dX - stickLength,dLow);
        loaFrontFace[2].set(dX + stickLength,dLow);
        loaFrontFace[3].set(dX + stickLength,dHigh);
      }
      lre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),LineRenderEvent.class);
      lre.setLineAttributes(lia);
      lre.setStart(loUpper);
      lre.setEnd(loLower);
      ipr.drawLine(lre);
      lre.setStart(loStart);
      lre.setEnd(loStart2);
      ipr.drawLine(lre);
      lre.setStart(loEnd);
      lre.setEnd(loEnd2);
      ipr.drawLine(lre);
    }
 else {
{
        loStart.set(dX,dLow);
        loEnd.set(dX,dHigh);
        loaFrontFace[0].set(dX - dWidth / 2,dOpen);
        loaFrontFace[1].set(dX - dWidth / 2,dClose);
        loaFrontFace[2].set(dX + dWidth / 2,dClose);
        loaFrontFace[3].set(dX + dWidth / 2,dOpen);
        loUpper.set(dX,dOpen > dClose ? dOpen : dClose);
        loLower.set(dX,dOpen < dClose ? dOpen : dClose);
      }
      lre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),LineRenderEvent.class);
      lre.setLineAttributes(lia);
      lre.setStart(loStart);
      lre.setEnd(loUpper);
      ipr.drawLine(lre);
      lre.setStart(loLower);
      lre.setEnd(loEnd);
      ipr.drawLine(lre);
      renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),loaFrontFace,convertFill(fPaletteEntry,se.getClose() > se.getOpen()),lia,cwa.getDimension(),dSeriesThickness,true);
    }
    if (cwa.isTransposed()) {
      faX[i]=((loUpper.getX() + loLower.getX()) / 2);
      faY[i]=loUpper.getY();
    }
 else {
      faX[i]=loLower.getX();
      faY[i]=((loUpper.getY() + loLower.getY()) / 2);
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=ss.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]);
        final InteractionEvent iev=((EventObjectCache)ipr).getEventObject(iSource,InteractionEvent.class);
        iev.setCursor(ss.getCursor());
        Trigger tg;
        for (int t=0; t < elTriggers.size(); t++) {
          tg=goFactory.copyOf(elTriggers.get(t));
          processTrigger(tg,iSource);
          iev.addTrigger(tg);
        }
        final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),PolygonRenderEvent.class);
        pre.setPoints(loaFrontFace);
        iev.setHotSpot(pre);
        ipr.enableInteraction(iev);
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    renderDataPointLabel(srh.getLabelAttributes(getSeries()),dpha[i],srh.getLabelPosition(getSeries()),loaFrontFace,p,sh,dX,dY,dWidth,dHeight,dHigh,dLow,dOpen,dClose);
  }
  if (getSeries().getCurveFitting() != null) {
    Location[] larray=new Location[faX.length];
    for (int i=0; i < larray.length; i++) {
      larray[i]=goFactory.createLocation(faX[i],faY[i]);
    }
    larray=filterNull(larray);
    renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
  }
  restoreClipping(ipr);
}",0.9985417835109366
68538,"/** 
 * Restores the clipping
 * @param ipr
 * @throws ChartException
 */
protected void restoreClipping(final IPrimitiveRenderer ipr) throws ChartException {
  final boolean bLastInSequence=isLastVisibleSeries();
  if (bLastInSequence && !isDimension3D() && (!isShowOutside() || !baseIsShowOutside())) {
    flushClipping();
    ClipRenderEvent clip=new ClipRenderEvent(this);
    clip.setVertices(null);
    ipr.setClip(clip);
  }
}","/** 
 * Restores the clipping
 * @param ipr
 * @throws ChartException
 */
protected void restoreClipping(final IPrimitiveRenderer ipr) throws ChartException {
  final boolean bLastInSequence=iSeriesIndex == (iSeriesCount - 1);
  if (bLastInSequence && !isDimension3D() && (!isShowOutside() || !baseIsShowOutside())) {
    flushClipping();
    ClipRenderEvent clip=new ClipRenderEvent(this);
    clip.setVertices(null);
    ipr.setClip(clip);
  }
}",0.94211123723042
68539,"/** 
 * re-create URLClassLoader to reload class by URLs.
 */
public void reload(){
  this.loader=new URLClassLoader(this.urls,this.parent);
}","/** 
 * re-create URLClassLoader to reload class by URLs.
 */
public void reload(){
  if (this.loader != null) {
    this.loader.close();
  }
  this.loader=new URLClassLoader(this.urls,this.parent);
}",0.8304093567251462
68540,"public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL && cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  BubbleSeries bs=(BubbleSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  DataPointHints[] dpha=srh.getDataPoints();
  Location lo;
  LineAttributes lia=bs.getLineAttributes();
  LineAttributes accLia=bs.getAccLineAttributes();
  Orientation accOrientation=bs.getAccOrientation();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  Integer[] iSize=new Integer[dpha.length];
  double[] dSizePixel=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && bs.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)bs.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,bs);
  }
  Marker m=null;
  if (bs.getMarkers().size() > 0) {
    m=bs.getMarkers().get(iThisSeriesIndex % bs.getMarkers().size());
  }
  final boolean isCategoryAxis=srh.isCategoryScale();
  final Bounds plotBounds=getPlotBoundsWithMargin();
  double dPointCoefficient=computeBestFit(srh,plotBounds,isCategoryAxis);
  if (dPointCoefficient == 0) {
    restoreClipping(ipr);
    return;
  }
  for (int i=0; i < dpha.length; i++) {
    BubbleEntry be=(BubbleEntry)dpha[i].getOrthogonalValue();
    if (!isValidBubbleEntry(be)) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    double unitSize=dpha[i].getSize();
    lo=dpha[i].getLocation();
    if (cwa.isTransposed()) {
      faX[i]=srh.getLocationOnOrthogonal(be.getValue());
      faY[i]=lo.getY() + (isCategoryAxis ? (unitSize / 2) : 0);
    }
 else {
      faX[i]=lo.getX() + (isCategoryAxis ? (unitSize / 2) : 0);
      faY[i]=srh.getLocationOnOrthogonal(be.getValue());
    }
    dSizePixel[i]=be.getSize() * dPointCoefficient;
    iSize[i]=Integer.valueOf((int)(dSizePixel[i] / getDeviceScale()));
  }
  handleOutsideDataPoints(ipr,srh,faX,faY,false);
  PlotWith2DAxes pwa=(PlotWith2DAxes)getComputations();
  double dAxisMin;
  if (accOrientation == Orientation.HORIZONTAL_LITERAL) {
    OneAxis oaxaBase=pwa.getAxes().getPrimaryBase();
    AutoScale sc=oaxaBase.getScale();
    dAxisMin=sc.getTickCordinates().getStart();
  }
 else {
    OneAxis oaxaBase=pwa.getAxes().getPrimaryOrthogonal();
    AutoScale sc=oaxaBase.getScale();
    dAxisMin=sc.getTickCordinates().getStart();
  }
  if (accLia.isVisible()) {
    Location[] loa=new Location[2];
    for (int i=0; i < dpha.length; i++) {
      if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue())) {
        continue;
      }
      LineRenderEvent lre;
      if (accOrientation == Orientation.HORIZONTAL_LITERAL) {
        if (cwa.isTransposed()) {
          loa[0]=goFactory.createLocation(faX[i],dAxisMin);
        }
 else {
          loa[0]=goFactory.createLocation(dAxisMin,faY[i]);
        }
      }
 else {
        if (cwa.isTransposed()) {
          loa[0]=goFactory.createLocation(dAxisMin,faY[i]);
        }
 else {
          loa[0]=goFactory.createLocation(faX[i],dAxisMin);
        }
      }
      loa[1]=goFactory.createLocation(faX[i],faY[i]);
      lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),LineRenderEvent.class);
      lre.setLineAttributes(accLia);
      lre.setStart(loa[0]);
      lre.setEnd(loa[1]);
      ipr.drawLine(lre);
    }
  }
  if (bs.isCurve()) {
    CurveRenderer cr=new CurveRenderer(cwa,this,lia,goFactory.createLocations(faX,faY),false,-1,true,true,fPaletteEntry,bs.isPaletteLineColor(),true);
    cr.draw(ipr);
    renderShadowAsCurve(ipr,lia,srh,goFactory.createLocations(faX,faY),false,-1);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,bs);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(bs,ipr,m,goFactory.createLocation(faX[i],faY[i]),bs.getLineAttributes(),fPaletteEntry,dpha[i],iSize[i],true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    LineRenderEvent lre;
    final Location positionDelta=(cwa.isTransposed()) ? goFactory.createLocation(-3 * getDeviceScale(),0) : goFactory.createLocation(0,3 * getDeviceScale());
    Location[] loaShadow=null;
    lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),LineRenderEvent.class);
    final ColorDefinition cLineShadow=bs.getShadowColor();
    if (cLineShadow != null && cLineShadow.getTransparency() != goFactory.TRANSPARENT().getTransparency()) {
      for (int i=1; i < dpha.length; i++) {
        if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue())) {
          continue;
        }
        int pindex=getPreviousNonNullIndex(i,dpha);
        if (pindex == -1) {
          continue;
        }
        if (loaShadow == null) {
          loaShadow=new Location[2];
          loaShadow[0]=goFactory.createLocation(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1]=goFactory.createLocation(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
 else {
          loaShadow[0].set(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1].set(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
        lre.setStart(loaShadow[0]);
        lre.setEnd(loaShadow[1]);
        LineAttributes liaShadow=goFactory.copyOf(lia);
        liaShadow.setColor(cLineShadow);
        lre.setLineAttributes(liaShadow);
        ipr.drawLine(lre);
      }
    }
    if (lia.isVisible()) {
      Location[] loa=new Location[2];
      for (int i=1; i < dpha.length; i++) {
        if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue())) {
          continue;
        }
        int pindex=getPreviousNonNullIndex(i,dpha);
        if (pindex == -1) {
          continue;
        }
        loa[0]=goFactory.createLocation(faX[pindex],faY[pindex]);
        loa[1]=goFactory.createLocation(faX[i],faY[i]);
        lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),LineRenderEvent.class);
        if (bs.isPaletteLineColor()) {
          LineAttributes newLia=goFactory.copyOf(lia);
          newLia.setColor(FillUtil.getColor(fPaletteEntry));
          lre.setLineAttributes(newLia);
        }
 else {
          lre.setLineAttributes(lia);
        }
        lre.setStart(loa[0]);
        lre.setEnd(loa[1]);
        ipr.drawLine(lre);
      }
    }
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,bs);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(bs,ipr,m,goFactory.createLocation(faX[i],faY[i]),bs.getLineAttributes(),fPaletteEntry,dpha[i],iSize[i],true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  try {
    laDataPoint=srh.getLabelAttributes(bs);
    pDataPoint=srh.getLabelPosition(bs);
    loDataPoint=goFactory.createLocation(0,0);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    for (int i=0; i < dpha.length; i++) {
      if (!isValidBubbleEntry(((BubbleEntry)dpha[i].getOrthogonalValue())) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
      final double dSize=dSizePixel[i];
switch (pDataPoint.getValue()) {
case Position.ABOVE:
        loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
      break;
case Position.BELOW:
    loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
  break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
case Position.INSIDE:
loDataPoint.set(faX[i],faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i]);
if (laDataPoint.isVisible()) {
renderLabel(StructureSource.createSeries(bs),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,dpha[i]);
}
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
restoreClipping(ipr);
}","public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL && cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  BubbleSeries bs=(BubbleSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  DataPointHints[] dpha=srh.getDataPoints();
  Location lo;
  LineAttributes lia=bs.getLineAttributes();
  LineAttributes accLia=bs.getAccLineAttributes();
  Orientation accOrientation=bs.getAccOrientation();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  Integer[] iSize=new Integer[dpha.length];
  double[] dSizePixel=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && bs.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)bs.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,bs);
  }
  Marker m=null;
  if (bs.getMarkers().size() > 0) {
    m=bs.getMarkers().get(iThisSeriesIndex % bs.getMarkers().size());
  }
  final boolean isCategoryAxis=srh.isCategoryScale();
  final Bounds plotBounds=getPlotBoundsWithMargin();
  double dPointCoefficient=computeBestFit(srh,plotBounds,isCategoryAxis);
  if (dPointCoefficient == 0) {
    restoreClipping(ipr);
    return;
  }
  for (int i=0; i < dpha.length; i++) {
    BubbleEntry be=(BubbleEntry)dpha[i].getOrthogonalValue();
    if (!isValidBubbleEntry(be)) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    double unitSize=dpha[i].getSize();
    lo=dpha[i].getLocation();
    if (cwa.isTransposed()) {
      faX[i]=srh.getLocationOnOrthogonal(be.getValue());
      faY[i]=lo.getY() + (isCategoryAxis ? (unitSize / 2) : 0);
    }
 else {
      faX[i]=lo.getX() + (isCategoryAxis ? (unitSize / 2) : 0);
      faY[i]=srh.getLocationOnOrthogonal(be.getValue());
    }
    dSizePixel[i]=be.getSize() * dPointCoefficient;
    iSize[i]=Integer.valueOf((int)(dSizePixel[i] / getDeviceScale()));
  }
  handleOutsideDataPoints(ipr,srh,faX,faY,false);
  PlotWith2DAxes pwa=(PlotWith2DAxes)getComputations();
  double dAxisMin;
  if (accOrientation == Orientation.HORIZONTAL_LITERAL) {
    OneAxis oaxaBase=pwa.getAxes().getPrimaryBase();
    AutoScale sc=oaxaBase.getScale();
    dAxisMin=sc.getTickCordinates().getStart();
  }
 else {
    OneAxis oaxaBase=pwa.getAxes().getPrimaryOrthogonal();
    AutoScale sc=oaxaBase.getScale();
    dAxisMin=sc.getTickCordinates().getStart();
  }
  if (accLia.isVisible()) {
    Location[] loa=new Location[2];
    for (int i=0; i < dpha.length; i++) {
      if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue())) {
        continue;
      }
      LineRenderEvent lre;
      if (accOrientation == Orientation.HORIZONTAL_LITERAL) {
        if (cwa.isTransposed()) {
          loa[0]=goFactory.createLocation(faX[i],dAxisMin);
        }
 else {
          loa[0]=goFactory.createLocation(dAxisMin,faY[i]);
        }
      }
 else {
        if (cwa.isTransposed()) {
          loa[0]=goFactory.createLocation(dAxisMin,faY[i]);
        }
 else {
          loa[0]=goFactory.createLocation(faX[i],dAxisMin);
        }
      }
      loa[1]=goFactory.createLocation(faX[i],faY[i]);
      lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),LineRenderEvent.class);
      lre.setLineAttributes(accLia);
      lre.setStart(loa[0]);
      lre.setEnd(loa[1]);
      ipr.drawLine(lre);
    }
  }
  if (bs.isCurve()) {
    CurveRenderer cr=new CurveRenderer(cwa,this,lia,goFactory.createLocations(faX,faY),false,-1,true,true,fPaletteEntry,bs.isPaletteLineColor(),true);
    cr.draw(ipr);
    renderShadowAsCurve(ipr,lia,srh,goFactory.createLocations(faX,faY),false,-1);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,bs);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(bs,ipr,m,goFactory.createLocation(faX[i],faY[i]),bs.getLineAttributes(),fPaletteEntry,dpha[i],iSize[i],true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    LineRenderEvent lre;
    final Location positionDelta=(cwa.isTransposed()) ? goFactory.createLocation(-3 * getDeviceScale(),0) : goFactory.createLocation(0,3 * getDeviceScale());
    Location[] loaShadow=null;
    lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),LineRenderEvent.class);
    final ColorDefinition cLineShadow=bs.getShadowColor();
    if (cLineShadow != null && cLineShadow.getTransparency() != goFactory.TRANSPARENT().getTransparency()) {
      for (int i=1; i < dpha.length; i++) {
        if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue())) {
          continue;
        }
        int pindex=getPreviousNonNullIndex(i,dpha);
        if (pindex == -1) {
          continue;
        }
        if (loaShadow == null) {
          loaShadow=new Location[2];
          loaShadow[0]=goFactory.createLocation(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1]=goFactory.createLocation(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
 else {
          loaShadow[0].set(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1].set(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
        lre.setStart(loaShadow[0]);
        lre.setEnd(loaShadow[1]);
        LineAttributes liaShadow=goFactory.copyOf(lia);
        liaShadow.setColor(cLineShadow);
        lre.setLineAttributes(liaShadow);
        ipr.drawLine(lre);
      }
    }
    if (lia.isVisible()) {
      Location[] loa=new Location[2];
      for (int i=1; i < dpha.length; i++) {
        if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue())) {
          continue;
        }
        int pindex=getPreviousNonNullIndex(i,dpha);
        if (pindex == -1) {
          continue;
        }
        loa[0]=goFactory.createLocation(faX[pindex],faY[pindex]);
        loa[1]=goFactory.createLocation(faX[i],faY[i]);
        lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),LineRenderEvent.class);
        if (bs.isPaletteLineColor()) {
          LineAttributes newLia=goFactory.copyOf(lia);
          newLia.setColor(FillUtil.getColor(fPaletteEntry));
          lre.setLineAttributes(newLia);
        }
 else {
          lre.setLineAttributes(lia);
        }
        lre.setStart(loa[0]);
        lre.setEnd(loa[1]);
        ipr.drawLine(lre);
      }
    }
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (!isValidBubbleEntry((BubbleEntry)dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,bs);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(bs,ipr,m,goFactory.createLocation(faX[i],faY[i]),bs.getLineAttributes(),fPaletteEntry,dpha[i],iSize[i],true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  try {
    laDataPoint=srh.getLabelAttributes(bs);
    pDataPoint=srh.getLabelPosition(bs);
    loDataPoint=goFactory.createLocation(0,0);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    for (int i=0; i < dpha.length; i++) {
      if (!isValidBubbleEntry(((BubbleEntry)dpha[i].getOrthogonalValue())) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
      final double dSize=dSizePixel[i];
switch (pDataPoint.getValue()) {
case Position.ABOVE:
        loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
      break;
case Position.BELOW:
    loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
  break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
case Position.INSIDE:
loDataPoint.set(faX[i],faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i]);
if (laDataPoint.isVisible()) {
renderLabel(StructureSource.createSeries(bs),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,dpha[i]);
}
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray,isrh.getDataPoints());
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
restoreClipping(ipr);
}",0.9991240145163308
68541,"@SuppressWarnings(""String_Node_Str"") public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  ChartWithAxes cwa=(ChartWithAxes)getModel();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
  }
  LineSeries ls=(LineSeries)getSeries();
  if (!ls.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  ChartDimension cd=cwa.getDimension();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double fX=0, fY=0, fZ=0, fWidth=0, fWidthZ=0, fHeight=0;
  Location lo=null;
  Location3D lo3d=null;
  boolean isAreaSeries=(getSeries() instanceof AreaSeries && !(getSeries() instanceof DifferenceSeries));
  boolean bShowAsTape=(cd.getValue() == ChartDimension.THREE_DIMENSIONAL) || (isAreaSeries && cd.getValue() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH);
  if (bShowAsTape) {
    bShowAsTape=validateShowAsTape();
  }
  AxisSubUnit au;
  Axis ax=getAxis();
  double dValue, dEnd;
  StackedSeriesLookup ssl=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
  }
  LineAttributes lia=ls.getLineAttributes();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  double[] faZ=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ls},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ls.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ls.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ls);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ls,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker m=null;
  if (ls.getMarkers().size() > 0) {
    m=ls.getMarkers().get(iThisSeriesIndex % ls.getMarkers().size());
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
  }
 else   if (iSeriesIndex > 0) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iSeriesIndex - 1);
  }
  updateTranslucency(fPaletteEntry,ls);
  double dTapeWidth=-1;
  double dUnitSpacingZ=0;
  for (int i=0; i < dpha.length; i++) {
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      if (ChartUtil.mathEqual(dTapeWidth,-1)) {
        final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
        dTapeWidth=dpha[i].getSize2D().getHeight() * (100 - dUnitSpacing) / 100;
        dUnitSpacingZ=dpha[i].getSize2D().getHeight() * dUnitSpacing / 200;
      }
    }
 else {
      lo=dpha[i].getLocation();
    }
    if (cwa.isTransposed()) {
      if (srh.isCategoryScale()) {
        fHeight=dpha[i].getSize();
      }
      fY=(lo.getY() + fHeight / 2.0);
      faY[i]=fY;
      if (ls.isStacked() || ax.isPercent()) {
        au=ssl.getUnit(ls,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        dEnd=computeStackPosition(au,dValue,ax);
        try {
          faX[i]=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)));
          dpha[i].setStackOrthogonalValue(new Double(dEnd));
          if (faX[i] < srh.getPlotBaseLocation()) {
            faX[i]=srh.getPlotBaseLocation();
          }
          au.setLastPosition(dValue,faX[i],0);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        faX[i]=lo.getX();
      }
    }
 else {
      if (bRendering3D) {
        fWidth=dpha[i].getSize2D().getWidth();
        fWidthZ=dpha[i].getSize2D().getHeight();
        fX=lo3d.getX() + fWidth / 2;
        fZ=lo3d.getZ() + fWidthZ - dUnitSpacingZ;
        faX[i]=fX;
        faZ[i]=fZ;
      }
 else {
        if (srh.isCategoryScale()) {
          fWidth=dpha[i].getSize();
        }
        fX=(lo.getX() + fWidth / 2.0);
        faX[i]=fX;
      }
      if (ls.isStacked() || ax.isPercent()) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(ls,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        dEnd=computeStackPosition(au,dValue,ax);
        try {
          faY[i]=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)));
          dpha[i].setStackOrthogonalValue(new Double(dEnd));
          au.setLastPosition(dValue,faY[i],0);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (bRendering3D) {
          faY[i]=lo3d.getY();
        }
 else {
          faY[i]=lo.getY();
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (faY[i] < plotBaseLocation) {
          faY[i]=plotBaseLocation;
        }
        if (faY[i] > plotBaseLocation + srh3d.getPlotHeight()) {
          faY[i]=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
    }
  }
  if (!bRendering3D) {
    handleOutsideDataPoints(ipr,srh,faX,faY,bShowAsTape);
  }
  if (ls.isCurve()) {
    renderAsCurve(ipr,ls.getLineAttributes(),bRendering3D ? (ISeriesRenderingHints)srh3d : srh,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dTapeWidth,fPaletteEntry,ls.isPaletteLineColor());
    renderShadowAsCurve(ipr,lia,bRendering3D ? (ISeriesRenderingHints)srh3d : srh,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dTapeWidth);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ls);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ls,ipr,m,bRendering3D ? goFactory.createLocation3D(faX[i],faY[i],faZ[i]) : goFactory.createLocation(faX[i],faY[i]),ls.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    renderShadow(ipr,p,lia,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dpha);
    renderDataPoints(ipr,p,bRendering3D ? (ISeriesRenderingHints)srh3d : srh,dpha,lia,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dTapeWidth,fPaletteEntry,ls.isPaletteLineColor());
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ls);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ls,ipr,m,bRendering3D ? goFactory.createLocation3D(faX[i],faY[i],faZ[i]) : goFactory.createLocation(faX[i],faY[i]),ls.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  try {
    if (bRendering3D) {
      laDataPoint=srh3d.getLabelAttributes(ls);
      if (laDataPoint.isVisible()) {
        pDataPoint=srh3d.getLabelPosition(ls);
        loDataPoint3d=goFactory.createLocation3D(0,0,0);
      }
    }
 else {
      laDataPoint=srh.getLabelAttributes(ls);
      if (laDataPoint.isVisible()) {
        pDataPoint=srh.getLabelPosition(ls);
        loDataPoint=goFactory.createLocation(0,0);
      }
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    final double dSize=m == null ? 0 : m.getSize();
    for (int i=0; i < dpha.length; i++) {
      if (isNaN(dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint=bRendering3D ? srh3d.getLabelAttributes(ls) : srh.getLabelAttributes(ls);
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
      if (laDataPoint.isVisible()) {
        if (bRendering3D) {
switch (pDataPoint.getValue()) {
case Position.ABOVE:
            loDataPoint3d.set(faX[i],faY[i] + dSize + p.getVerticalSpacing(),faZ[i] + 1);
          break;
case Position.BELOW:
        loDataPoint3d.set(faX[i],faY[i] - dSize - p.getVerticalSpacing(),faZ[i] + 1);
      break;
case Position.LEFT:
    loDataPoint3d.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i],faZ[i] + 1);
  break;
case Position.RIGHT:
loDataPoint3d.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i],faZ[i] + 1);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
final Text3DRenderEvent tre3d=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ls,dpha[i]),Text3DRenderEvent.class);
tre3d.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
tre3d.setLabel(laDataPoint);
tre3d.setTextPosition(Methods.getLabelPosition(pDataPoint));
tre3d.setLocation3D(loDataPoint3d);
getDeferredCache().addLabel(tre3d);
}
 else {
switch (pDataPoint.getValue()) {
case Position.ABOVE:
loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
break;
case Position.BELOW:
loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
renderLabel(WrappedStructureSource.createSeriesDataPoint(ls,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
}
if (!bRendering3D && getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
if (!bRendering3D) {
restoreClipping(ipr);
}
}","@SuppressWarnings(""String_Node_Str"") public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  ChartWithAxes cwa=(ChartWithAxes)getModel();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
  }
  LineSeries ls=(LineSeries)getSeries();
  if (!ls.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  ChartDimension cd=cwa.getDimension();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double fX=0, fY=0, fZ=0, fWidth=0, fWidthZ=0, fHeight=0;
  Location lo=null;
  Location3D lo3d=null;
  boolean isAreaSeries=(getSeries() instanceof AreaSeries && !(getSeries() instanceof DifferenceSeries));
  boolean bShowAsTape=(cd.getValue() == ChartDimension.THREE_DIMENSIONAL) || (isAreaSeries && cd.getValue() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH);
  if (bShowAsTape) {
    bShowAsTape=validateShowAsTape();
  }
  AxisSubUnit au;
  Axis ax=getAxis();
  double dValue, dEnd;
  StackedSeriesLookup ssl=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
  }
  LineAttributes lia=ls.getLineAttributes();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  double[] faZ=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ls},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ls.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ls.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ls);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ls,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker m=null;
  if (ls.getMarkers().size() > 0) {
    m=ls.getMarkers().get(iThisSeriesIndex % ls.getMarkers().size());
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
  }
 else   if (iSeriesIndex > 0) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iSeriesIndex - 1);
  }
  updateTranslucency(fPaletteEntry,ls);
  double dTapeWidth=-1;
  double dUnitSpacingZ=0;
  for (int i=0; i < dpha.length; i++) {
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      if (ChartUtil.mathEqual(dTapeWidth,-1)) {
        final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
        dTapeWidth=dpha[i].getSize2D().getHeight() * (100 - dUnitSpacing) / 100;
        dUnitSpacingZ=dpha[i].getSize2D().getHeight() * dUnitSpacing / 200;
      }
    }
 else {
      lo=dpha[i].getLocation();
    }
    if (cwa.isTransposed()) {
      if (srh.isCategoryScale()) {
        fHeight=dpha[i].getSize();
      }
      fY=(lo.getY() + fHeight / 2.0);
      faY[i]=fY;
      if (ls.isStacked() || ax.isPercent()) {
        au=ssl.getUnit(ls,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        dEnd=computeStackPosition(au,dValue,ax);
        try {
          faX[i]=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)));
          dpha[i].setStackOrthogonalValue(new Double(dEnd));
          if (faX[i] < srh.getPlotBaseLocation()) {
            faX[i]=srh.getPlotBaseLocation();
          }
          au.setLastPosition(dValue,faX[i],0);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        faX[i]=lo.getX();
      }
    }
 else {
      if (bRendering3D) {
        fWidth=dpha[i].getSize2D().getWidth();
        fWidthZ=dpha[i].getSize2D().getHeight();
        fX=lo3d.getX() + fWidth / 2;
        fZ=lo3d.getZ() + fWidthZ - dUnitSpacingZ;
        faX[i]=fX;
        faZ[i]=fZ;
      }
 else {
        if (srh.isCategoryScale()) {
          fWidth=dpha[i].getSize();
        }
        fX=(lo.getX() + fWidth / 2.0);
        faX[i]=fX;
      }
      if (ls.isStacked() || ax.isPercent()) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(ls,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        dEnd=computeStackPosition(au,dValue,ax);
        try {
          faY[i]=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)));
          dpha[i].setStackOrthogonalValue(new Double(dEnd));
          au.setLastPosition(dValue,faY[i],0);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (bRendering3D) {
          faY[i]=lo3d.getY();
        }
 else {
          faY[i]=lo.getY();
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (faY[i] < plotBaseLocation) {
          faY[i]=plotBaseLocation;
        }
        if (faY[i] > plotBaseLocation + srh3d.getPlotHeight()) {
          faY[i]=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
    }
  }
  if (!bRendering3D) {
    handleOutsideDataPoints(ipr,srh,faX,faY,bShowAsTape);
  }
  if (ls.isCurve()) {
    renderAsCurve(ipr,ls.getLineAttributes(),bRendering3D ? (ISeriesRenderingHints)srh3d : srh,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dTapeWidth,fPaletteEntry,ls.isPaletteLineColor());
    renderShadowAsCurve(ipr,lia,bRendering3D ? (ISeriesRenderingHints)srh3d : srh,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dTapeWidth);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ls);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ls,ipr,m,bRendering3D ? goFactory.createLocation3D(faX[i],faY[i],faZ[i]) : goFactory.createLocation(faX[i],faY[i]),ls.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    renderShadow(ipr,p,lia,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dpha);
    renderDataPoints(ipr,p,bRendering3D ? (ISeriesRenderingHints)srh3d : srh,dpha,lia,bRendering3D ? goFactory.createLocation3Ds(faX,faY,faZ) : goFactory.createLocations(faX,faY),bShowAsTape,dTapeWidth,fPaletteEntry,ls.isPaletteLineColor());
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ls);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ls,ipr,m,bRendering3D ? goFactory.createLocation3D(faX[i],faY[i],faZ[i]) : goFactory.createLocation(faX[i],faY[i]),ls.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  try {
    if (bRendering3D) {
      laDataPoint=srh3d.getLabelAttributes(ls);
      if (laDataPoint.isVisible()) {
        pDataPoint=srh3d.getLabelPosition(ls);
        loDataPoint3d=goFactory.createLocation3D(0,0,0);
      }
    }
 else {
      laDataPoint=srh.getLabelAttributes(ls);
      if (laDataPoint.isVisible()) {
        pDataPoint=srh.getLabelPosition(ls);
        loDataPoint=goFactory.createLocation(0,0);
      }
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    final double dSize=m == null ? 0 : m.getSize();
    for (int i=0; i < dpha.length; i++) {
      if (isNaN(dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint=bRendering3D ? srh3d.getLabelAttributes(ls) : srh.getLabelAttributes(ls);
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
      if (laDataPoint.isVisible()) {
        if (bRendering3D) {
switch (pDataPoint.getValue()) {
case Position.ABOVE:
            loDataPoint3d.set(faX[i],faY[i] + dSize + p.getVerticalSpacing(),faZ[i] + 1);
          break;
case Position.BELOW:
        loDataPoint3d.set(faX[i],faY[i] - dSize - p.getVerticalSpacing(),faZ[i] + 1);
      break;
case Position.LEFT:
    loDataPoint3d.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i],faZ[i] + 1);
  break;
case Position.RIGHT:
loDataPoint3d.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i],faZ[i] + 1);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
final Text3DRenderEvent tre3d=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ls,dpha[i]),Text3DRenderEvent.class);
tre3d.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
tre3d.setLabel(laDataPoint);
tre3d.setTextPosition(Methods.getLabelPosition(pDataPoint));
tre3d.setLocation3D(loDataPoint3d);
getDeferredCache().addLabel(tre3d);
}
 else {
switch (pDataPoint.getValue()) {
case Position.ABOVE:
loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
break;
case Position.BELOW:
loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
renderLabel(WrappedStructureSource.createSeriesDataPoint(ls,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
}
if (!bRendering3D && getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray,isrh.getDataPoints());
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
if (!bRendering3D) {
restoreClipping(ipr);
}
}",0.9992573994837158
68542,"public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  ScatterSeries ss=(ScatterSeries)getSeries();
  if (!ss.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  DataPointHints[] dpha=srh.getDataPoints();
  Location lo;
  LineAttributes lia=ss.getLineAttributes();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ss.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ss.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ss);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker m=null;
  if (ss.getMarkers().size() > 0) {
    m=ss.getMarkers().get(iThisSeriesIndex % ss.getMarkers().size());
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,ss);
  }
  boolean isCategoryAxis=srh.isCategoryScale();
  for (int i=0; i < dpha.length; i++) {
    double unitSize=dpha[i].getSize();
    lo=dpha[i].getLocation();
    if (cwa.isTransposed()) {
      faX[i]=lo.getX();
      faY[i]=lo.getY() + (isCategoryAxis ? (unitSize / 2) : 0);
    }
 else {
      faX[i]=lo.getX() + (isCategoryAxis ? (unitSize / 2) : 0);
      faY[i]=lo.getY();
    }
  }
  handleOutsideDataPoints(ipr,srh,faX,faY,false);
  if (ss.isCurve()) {
    CurveRenderer cr=new CurveRenderer(cwa,this,ss.getLineAttributes(),goFactory.createLocations(faX,faY),false,-1,false,true,fPaletteEntry,ss.isPaletteLineColor(),true);
    cr.draw(ipr);
    renderShadowAsCurve(ipr,lia,srh,goFactory.createLocations(faX,faY),false,-1);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ss);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ss,ipr,m,goFactory.createLocation(faX[i],faY[i]),ss.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    LineRenderEvent lre;
    final Location positionDelta=(cwa.isTransposed()) ? goFactory.createLocation(-3 * getDeviceScale(),0) : goFactory.createLocation(0,3 * getDeviceScale());
    Location[] loaShadow=null;
    lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),LineRenderEvent.class);
    final ColorDefinition cLineShadow=ss.getShadowColor();
    boolean bConnectMissing=ss.isConnectMissingValue();
    if (!ChartUtil.isColorTransparent(cLineShadow)) {
      for (int i=1; i < dpha.length; i++) {
        int pindex=-1;
        if (bConnectMissing) {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          pindex=getPreviousNonNullIndex(i,dpha);
          if (pindex == -1) {
            continue;
          }
        }
 else {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          if (i > 0 && isNaN(dpha[i - 1].getOrthogonalValue())) {
            continue;
          }
          pindex=i - 1;
        }
        if (loaShadow == null) {
          loaShadow=new Location[2];
          loaShadow[0]=goFactory.createLocation(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1]=goFactory.createLocation(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
 else {
          loaShadow[0].set(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1].set(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
        lre.setStart(loaShadow[0]);
        lre.setEnd(loaShadow[1]);
        LineAttributes liaShadow=goFactory.copyOf(lia);
        liaShadow.setColor(cLineShadow);
        lre.setLineAttributes(liaShadow);
        ipr.drawLine(lre);
      }
    }
    if (lia.isVisible()) {
      Location[] loa=new Location[2];
      for (int i=1; i < dpha.length; i++) {
        int pindex=-1;
        if (bConnectMissing) {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          pindex=getPreviousNonNullIndex(i,dpha);
          if (pindex == -1) {
            continue;
          }
        }
 else {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          if (i > 0 && isNaN(dpha[i - 1].getOrthogonalValue())) {
            continue;
          }
          pindex=i - 1;
        }
        loa[0]=goFactory.createLocation(faX[pindex],faY[pindex]);
        loa[1]=goFactory.createLocation(faX[i],faY[i]);
{
          lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),LineRenderEvent.class);
          if (ss.isPaletteLineColor() && fPaletteEntry instanceof ColorDefinition) {
            LineAttributes newLia=goFactory.copyOf(lia);
            newLia.setColor((ColorDefinition)fPaletteEntry);
            lre.setLineAttributes(newLia);
          }
 else {
            lre.setLineAttributes(lia);
          }
          lre.setStart(loa[0]);
          lre.setEnd(loa[1]);
          ipr.drawLine(lre);
        }
      }
    }
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ss);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ss,ipr,m,goFactory.createLocation(faX[i],faY[i]),ss.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  try {
    laDataPoint=srh.getLabelAttributes(ss);
    pDataPoint=srh.getLabelPosition(ss);
    loDataPoint=goFactory.createLocation(0,0);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    final double dSize=m == null ? 0 : m.getSize();
    for (int i=0; i < dpha.length; i++) {
      if (isNaN(dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint=srh.getLabelAttributes(ss);
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
switch (pDataPoint.getValue()) {
case Position.ABOVE:
        loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
      break;
case Position.BELOW:
    loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
  break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i]);
if (laDataPoint.isVisible()) {
renderLabel(WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,dpha[i]);
}
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
restoreClipping(ipr);
}","public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  ScatterSeries ss=(ScatterSeries)getSeries();
  if (!ss.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  DataPointHints[] dpha=srh.getDataPoints();
  Location lo;
  LineAttributes lia=ss.getLineAttributes();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ss.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ss.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ss);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker m=null;
  if (ss.getMarkers().size() > 0) {
    m=ss.getMarkers().get(iThisSeriesIndex % ss.getMarkers().size());
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,ss);
  }
  boolean isCategoryAxis=srh.isCategoryScale();
  for (int i=0; i < dpha.length; i++) {
    double unitSize=dpha[i].getSize();
    lo=dpha[i].getLocation();
    if (cwa.isTransposed()) {
      faX[i]=lo.getX();
      faY[i]=lo.getY() + (isCategoryAxis ? (unitSize / 2) : 0);
    }
 else {
      faX[i]=lo.getX() + (isCategoryAxis ? (unitSize / 2) : 0);
      faY[i]=lo.getY();
    }
  }
  handleOutsideDataPoints(ipr,srh,faX,faY,false);
  if (ss.isCurve()) {
    CurveRenderer cr=new CurveRenderer(cwa,this,ss.getLineAttributes(),goFactory.createLocations(faX,faY),false,-1,false,true,fPaletteEntry,ss.isPaletteLineColor(),true);
    cr.draw(ipr);
    renderShadowAsCurve(ipr,lia,srh,goFactory.createLocations(faX,faY),false,-1);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ss);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ss,ipr,m,goFactory.createLocation(faX[i],faY[i]),ss.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    LineRenderEvent lre;
    final Location positionDelta=(cwa.isTransposed()) ? goFactory.createLocation(-3 * getDeviceScale(),0) : goFactory.createLocation(0,3 * getDeviceScale());
    Location[] loaShadow=null;
    lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),LineRenderEvent.class);
    final ColorDefinition cLineShadow=ss.getShadowColor();
    boolean bConnectMissing=ss.isConnectMissingValue();
    if (!ChartUtil.isColorTransparent(cLineShadow)) {
      for (int i=1; i < dpha.length; i++) {
        int pindex=-1;
        if (bConnectMissing) {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          pindex=getPreviousNonNullIndex(i,dpha);
          if (pindex == -1) {
            continue;
          }
        }
 else {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          if (i > 0 && isNaN(dpha[i - 1].getOrthogonalValue())) {
            continue;
          }
          pindex=i - 1;
        }
        if (loaShadow == null) {
          loaShadow=new Location[2];
          loaShadow[0]=goFactory.createLocation(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1]=goFactory.createLocation(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
 else {
          loaShadow[0].set(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1].set(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
        lre.setStart(loaShadow[0]);
        lre.setEnd(loaShadow[1]);
        LineAttributes liaShadow=goFactory.copyOf(lia);
        liaShadow.setColor(cLineShadow);
        lre.setLineAttributes(liaShadow);
        ipr.drawLine(lre);
      }
    }
    if (lia.isVisible()) {
      Location[] loa=new Location[2];
      for (int i=1; i < dpha.length; i++) {
        int pindex=-1;
        if (bConnectMissing) {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          pindex=getPreviousNonNullIndex(i,dpha);
          if (pindex == -1) {
            continue;
          }
        }
 else {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          if (i > 0 && isNaN(dpha[i - 1].getOrthogonalValue())) {
            continue;
          }
          pindex=i - 1;
        }
        loa[0]=goFactory.createLocation(faX[pindex],faY[pindex]);
        loa[1]=goFactory.createLocation(faX[i],faY[i]);
{
          lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),LineRenderEvent.class);
          if (ss.isPaletteLineColor() && fPaletteEntry instanceof ColorDefinition) {
            LineAttributes newLia=goFactory.copyOf(lia);
            newLia.setColor((ColorDefinition)fPaletteEntry);
            lre.setLineAttributes(newLia);
          }
 else {
            lre.setLineAttributes(lia);
          }
          lre.setStart(loa[0]);
          lre.setEnd(loa[1]);
          ipr.drawLine(lre);
        }
      }
    }
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ss);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ss,ipr,m,goFactory.createLocation(faX[i],faY[i]),ss.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  try {
    laDataPoint=srh.getLabelAttributes(ss);
    pDataPoint=srh.getLabelPosition(ss);
    loDataPoint=goFactory.createLocation(0,0);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    final double dSize=m == null ? 0 : m.getSize();
    for (int i=0; i < dpha.length; i++) {
      if (isNaN(dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint=srh.getLabelAttributes(ss);
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
switch (pDataPoint.getValue()) {
case Position.ABOVE:
        loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
      break;
case Position.BELOW:
    loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
  break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i]);
if (laDataPoint.isVisible()) {
renderLabel(WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,dpha[i]);
}
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray,isrh.getDataPoints());
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
restoreClipping(ipr);
}",0.999056561390898
68543,"public int compare(double[] l1,double[] l2){
  if (sortFirstArray) {
    if (l1[0] == l2[0]) {
      return 0;
    }
    if (l1[0] < l2[0]) {
      return -1;
    }
  }
 else {
    if (l1[1] == l2[1]) {
      return 0;
    }
    if (l1[1] < l2[1]) {
      return -1;
    }
  }
  return 1;
}","public int compare(double[] l1,double[] l2){
  if (l1[0] == l2[0]) {
    return 0;
  }
  if (l1[0] < l2[0]) {
    return -1;
  }
  return 1;
}",0.6574074074074074
68544,"private void sort(double[] a,double[] b,final boolean sortFirstArray){
  double[][] sa=new double[a.length][2];
  for (int i=0; i < a.length; i++) {
    double[] ca=new double[2];
    ca[0]=a[i];
    ca[1]=b[i];
    sa[i]=ca;
  }
  Arrays.sort(sa,new Comparator<double[]>(){
    public int compare(    double[] l1,    double[] l2){
      if (sortFirstArray) {
        if (l1[0] == l2[0]) {
          return 0;
        }
        if (l1[0] < l2[0]) {
          return -1;
        }
      }
 else {
        if (l1[1] == l2[1]) {
          return 0;
        }
        if (l1[1] < l2[1]) {
          return -1;
        }
      }
      return 1;
    }
  }
);
  for (int i=0; i < a.length; i++) {
    a[i]=sa[i][0];
    b[i]=sa[i][1];
  }
}","private static double[][] sort(double[] a,double[] b,final boolean isTransposed){
  double[] baseArray=isTransposed ? b : a;
  double[] orthogonalArray=isTransposed ? a : b;
  double[][] sa=new double[a.length][2];
  for (int i=0; i < a.length; i++) {
    double[] ca=new double[2];
    ca[0]=baseArray[i];
    ca[1]=orthogonalArray[i];
    sa[i]=ca;
  }
  Arrays.sort(sa,new Comparator<double[]>(){
    public int compare(    double[] l1,    double[] l2){
      if (l1[0] == l2[0]) {
        return 0;
      }
      if (l1[0] < l2[0]) {
        return -1;
      }
      return 1;
    }
  }
);
  return sa;
}",0.5846383296047726
68545,"/** 
 * Renders the FittingCurve if defined for supported series.
 * @param ipr
 * @param points
 * @param curve
 * @param bDeferred
 * @throws ChartException
 */
protected final void renderFittingCurve(IPrimitiveRenderer ipr,Location[] points,CurveFitting curve,boolean bShowAsTape,boolean bDeferred) throws ChartException {
  boolean isTransposed=((ChartWithAxes)getModel()).isTransposed();
  if (curve.getLineAttributes().isVisible()) {
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.BEFORE_DRAW_FITTING_CURVE,curve,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_FITTING_CURVE,curve);
    double[] xArray=new double[points.length];
    double[] yArray=new double[points.length];
    for (int i=0; i < xArray.length; i++) {
      xArray[i]=points[i].getX();
      yArray[i]=points[i].getY();
    }
    sort(xArray,yArray,!isTransposed);
    double[] baseArray=xArray, orthogonalArray=yArray;
    if (isTransposed) {
      baseArray=yArray;
      orthogonalArray=xArray;
    }
    FittingCalculator fc=new FittingCalculator(baseArray,orthogonalArray,0.33);
    double[] fitYarray=fc.getFittedValue();
    orthogonalArray=fitYarray;
    if (isTransposed) {
      baseArray=fitYarray;
      orthogonalArray=yArray;
      sort(baseArray,orthogonalArray,false);
    }
    if (curve.getLineAttributes().getColor() != null) {
      CurveRenderer crdr=new CurveRenderer((ChartWithAxes)getModel(),this,curve.getLineAttributes(),goFactory.createLocations(baseArray,orthogonalArray),bShowAsTape,-1,bDeferred,false,null,false,true);
      crdr.draw(ipr);
    }
    if (curve.getLabel().isVisible()) {
      Label lb=goFactory.copyOf(curve.getLabel());
      final String sPreviousValue=lb.getCaption().getValue();
      lb.getCaption().setValue(getRunTimeContext().externalizedMessage(sPreviousValue));
      BoundingBox bb=cComp.computeBox(getXServer(),IConstants.LEFT,lb,0,0);
      Anchor lbAnchor=curve.getLabelAnchor();
      if (lbAnchor == null) {
        lbAnchor=Anchor.NORTH_LITERAL;
      }
      int horizontal=IConstants.CENTER;
      int vertical=IConstants.ABOVE;
switch (lbAnchor.getValue()) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
        horizontal=IConstants.LEFT;
      break;
case Anchor.NORTH:
case Anchor.SOUTH:
    horizontal=IConstants.CENTER;
  break;
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
horizontal=IConstants.RIGHT;
break;
}
switch (lbAnchor.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_WEST:
case Anchor.NORTH_EAST:
case Anchor.WEST:
case Anchor.EAST:
vertical=IConstants.ABOVE;
break;
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
vertical=IConstants.BELOW;
break;
}
double xs, ys;
if (isTransposed) {
if (horizontal == IConstants.LEFT) {
ys=orthogonalArray[orthogonalArray.length - 1] - bb.getHeight();
horizontal=IConstants.RIGHT;
}
 else if (horizontal == IConstants.RIGHT) {
ys=orthogonalArray[0];
horizontal=IConstants.LEFT;
}
 else {
ys=orthogonalArray[0] + (orthogonalArray[orthogonalArray.length - 1] - orthogonalArray[0]) / 2d - bb.getHeight() / 2d;
}
xs=getFitYPosition(orthogonalArray,baseArray,horizontal,bb.getHeight(),bb.getWidth(),vertical == IConstants.BELOW);
}
 else {
if (horizontal == IConstants.LEFT) {
xs=xArray[0];
}
 else if (horizontal == IConstants.RIGHT) {
xs=xArray[xArray.length - 1] - bb.getWidth();
}
 else {
xs=xArray[0] + (xArray[xArray.length - 1] - xArray[0]) / 2d - bb.getWidth() / 2d;
}
ys=getFitYPosition(xArray,fitYarray,horizontal,bb.getWidth(),bb.getHeight(),vertical == IConstants.ABOVE);
}
bb.setLeft(xs);
bb.setTop(ys);
renderLabel(StructureSource.createSeries(getSeries()),TextRenderEvent.RENDER_TEXT_IN_BLOCK,lb,Position.RIGHT_LITERAL,goFactory.createLocation(bb.getLeft(),bb.getTop()),goFactory.createBounds(bb.getLeft(),bb.getTop(),bb.getWidth(),bb.getHeight()),fDeferredCacheManager.getLastDeferredCache());
}
ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.AFTER_DRAW_FITTING_CURVE,curve,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_FITTING_CURVE,curve);
}
}","/** 
 * Renders the FittingCurve if defined for supported series.
 * @param ipr
 * @param points
 * @param curve
 * @param bDeferred
 * @throws ChartException
 */
protected final void renderFittingCurve(IPrimitiveRenderer ipr,Location[] points,CurveFitting curve,boolean bShowAsTape,boolean bDeferred) throws ChartException {
  boolean isTransposed=((ChartWithAxes)getModel()).isTransposed();
  if (curve.getLineAttributes().isVisible()) {
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.BEFORE_DRAW_FITTING_CURVE,curve,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_FITTING_CURVE,curve);
    double[] xArray=new double[points.length];
    double[] yArray=new double[points.length];
    for (int i=0; i < xArray.length; i++) {
      xArray[i]=points[i].getX();
      yArray[i]=points[i].getY();
    }
    FittingCurveHelper fch=FittingCurveHelper.instance(xArray,yArray,isTransposed);
    double[] baseArray=fch.getBaseArray();
    double[] orthogonalArray=fch.getOrthogonalArray();
    FittingCalculator fc=new FittingCalculator(baseArray,orthogonalArray,0.33);
    double[] fitYarray=fc.getFittedValue();
    orthogonalArray=fitYarray;
    if (isTransposed) {
      orthogonalArray=baseArray;
      baseArray=fitYarray;
    }
    if (curve.getLineAttributes().getColor() != null) {
      CurveRenderer crdr=new CurveRenderer((ChartWithAxes)getModel(),this,curve.getLineAttributes(),goFactory.createLocations(baseArray,orthogonalArray),bShowAsTape,-1,bDeferred,false,null,false,true);
      crdr.draw(ipr);
    }
    if (curve.getLabel().isVisible()) {
      Label lb=goFactory.copyOf(curve.getLabel());
      final String sPreviousValue=lb.getCaption().getValue();
      lb.getCaption().setValue(getRunTimeContext().externalizedMessage(sPreviousValue));
      BoundingBox bb=cComp.computeBox(getXServer(),IConstants.LEFT,lb,0,0);
      Anchor lbAnchor=curve.getLabelAnchor();
      if (lbAnchor == null) {
        lbAnchor=Anchor.NORTH_LITERAL;
      }
      int horizontal=IConstants.CENTER;
      int vertical=IConstants.ABOVE;
switch (lbAnchor.getValue()) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
        horizontal=IConstants.LEFT;
      break;
case Anchor.NORTH:
case Anchor.SOUTH:
    horizontal=IConstants.CENTER;
  break;
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
horizontal=IConstants.RIGHT;
break;
}
switch (lbAnchor.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_WEST:
case Anchor.NORTH_EAST:
case Anchor.WEST:
case Anchor.EAST:
vertical=IConstants.ABOVE;
break;
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
vertical=IConstants.BELOW;
break;
}
double xs, ys;
if (isTransposed) {
if (horizontal == IConstants.LEFT) {
ys=orthogonalArray[orthogonalArray.length - 1] - bb.getHeight();
horizontal=IConstants.RIGHT;
}
 else if (horizontal == IConstants.RIGHT) {
ys=orthogonalArray[0];
horizontal=IConstants.LEFT;
}
 else {
ys=orthogonalArray[0] + (orthogonalArray[orthogonalArray.length - 1] - orthogonalArray[0]) / 2d - bb.getHeight() / 2d;
}
xs=getFitYPosition(orthogonalArray,baseArray,horizontal,bb.getHeight(),bb.getWidth(),vertical == IConstants.BELOW);
}
 else {
if (horizontal == IConstants.LEFT) {
xs=xArray[0];
}
 else if (horizontal == IConstants.RIGHT) {
xs=xArray[xArray.length - 1] - bb.getWidth();
}
 else {
xs=xArray[0] + (xArray[xArray.length - 1] - xArray[0]) / 2d - bb.getWidth() / 2d;
}
ys=getFitYPosition(xArray,fitYarray,horizontal,bb.getWidth(),bb.getHeight(),vertical == IConstants.ABOVE);
}
bb.setLeft(xs);
bb.setTop(ys);
renderLabel(StructureSource.createSeries(getSeries()),TextRenderEvent.RENDER_TEXT_IN_BLOCK,lb,Position.RIGHT_LITERAL,goFactory.createLocation(bb.getLeft(),bb.getTop()),goFactory.createBounds(bb.getLeft(),bb.getTop(),bb.getWidth(),bb.getHeight()),fDeferredCacheManager.getLastDeferredCache());
}
ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.AFTER_DRAW_FITTING_CURVE,curve,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_FITTING_CURVE,curve);
}
}",0.9585406301824212
68546,"/** 
 * Filters the Null or invalid entry(contains NaN value) from the array.
 * @param ll
 * @return
 */
protected Location[] filterNull(Location[] ll){
  ArrayList<Location> al=new ArrayList<Location>();
  for (int i=0; i < ll.length; i++) {
    if (Double.isNaN(ll[i].getX()) || Double.isNaN(ll[i].getY())) {
      continue;
    }
    al.add(ll[i]);
  }
  if (ll instanceof Location3D[]) {
    return al.toArray(new Location3D[al.size()]);
  }
  return al.toArray(new Location[al.size()]);
}","/** 
 * Filters the Null or invalid entry(contains NaN value) from the array in respect of DataPointHints.
 * @param ll
 * @return
 */
protected static Location[] filterNull(Location[] ll,DataPointHints[] dpha) throws ChartException {
  if (ll == null || dpha == null || ll.length != dpha.length) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new IllegalArgumentException());
  }
  int iLen=dpha.length;
  ArrayList<Location> al=new ArrayList<Location>(iLen);
  for (int i=0; i < iLen; i++) {
    if (dpha[i].getBaseValue() != null && dpha[i].getOrthogonalValue() != null) {
      al.add(ll[i]);
    }
  }
  if (ll instanceof Location3D[]) {
    return al.toArray(new Location3D[al.size()]);
  }
  return al.toArray(new Location[al.size()]);
}",0.6319936958234831
68547,"/** 
 * Add the createby property to the mudule handle 
 * @param handles
 */
public static void addCreateBy(ModuleHandle handle){
  String VERSION_MESSAGE=Messages.getString(""String_Node_Str"");
  String designerVersion=MessageFormat.format(VERSION_MESSAGE,new String[]{ReportPlugin.getVersion(),ReportPlugin.getBuildInfo()});
  handle.setCreatedBy(designerVersion);
}","/** 
 * Add the createby property to the mudule handle
 * @param handles
 */
public static void addCreateBy(ModuleHandle handle){
  String VERSION_MESSAGE=Messages.getString(""String_Node_Str"");
  String designerVersion=MessageFormat.format(VERSION_MESSAGE,new String[]{ReportPlugin.getVersion(),ReportPlugin.getBuildInfo()});
  handle.setCreatedBy(designerVersion);
}",0.998639455782313
68548,"/** 
 * @throws IOException
 */
public void outputCacheData() throws IOException {
  writer.startSheet(engine.getCoordinates(),pageHeader,pageFooter,sheetName);
  sheetName=DEFAULT_SHEET_NAME + sheetIndex;
  Iterator<RowData> it=engine.getIterator();
  while (it.hasNext()) {
    outputRowData(it.next());
  }
  writer.endSheet(orientation);
}","/** 
 * @throws IOException
 */
public void outputCacheData() throws IOException {
  writer.startSheet(engine.getCoordinates(),pageHeader,pageFooter,sheetName);
  sheetName=DEFAULT_SHEET_NAME + sheetIndex;
  Iterator<RowData> it=engine.getIterator();
  while (it.hasNext()) {
    outputRowData(it.next());
  }
  writer.endSheet(orientation,pageWidth,pageHeight);
}",0.9702970297029704
68549,"public void start(IReportContent report){
  setupRenderOptions();
  ReportDesignHandle designHandle=report.getDesign().getReportDesign();
  String reportOrientation=designHandle.getBidiOrientation();
  if (""String_Node_Str"".equalsIgnoreCase(reportOrientation)) {
    isRTLSheet=true;
  }
  String reportLayoutPreference=designHandle.getLayoutPreference();
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
    isAuto=false;
  }
  IStyle style=report.getRoot().getComputedStyle();
  SimpleMasterPageDesign master=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  engine=createLayoutEngine(context,this);
  engine.initalize(new PageDef(master,style));
  String reportTitle=report.getDesign().getReportDesign().getStringProperty(IModuleModel.TITLE_PROP);
  if (reportTitle != null) {
    sheetName=reportTitle;
  }
 else {
    sheetName=DEFAULT_SHEET_NAME;
  }
  sheetName=ExcelUtil.getValidSheetName(sheetName);
  createWriter();
}","public void start(IReportContent report){
  setupRenderOptions();
  ReportDesignHandle designHandle=report.getDesign().getReportDesign();
  parseReportOrientation(designHandle);
  parseReportLayout(designHandle);
  parseSheetName(designHandle);
  parsePageSize(report);
  IStyle style=report.getRoot().getComputedStyle();
  engine=createLayoutEngine(context,this);
  engine.initalize(contentwidth,style);
  createWriter();
}",0.4178895877009084
68550,"private void declareWorkSheetOptions(String orientation,String pageHeader,String pageFooter){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  if (orientation != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",orientation);
    writer.closeTag(""String_Node_Str"");
  }
  if (pageHeader != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",pageHeader);
    writer.closeTag(""String_Node_Str"");
  }
  if (pageFooter != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",pageFooter);
    writer.closeTag(""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}","private void declareWorkSheetOptions(String orientation,int pageWidth,int pageHeight){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  if (orientation != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",orientation);
    writer.closeTag(""String_Node_Str"");
  }
  if (pageHeader != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",pageHeader);
    writer.closeTag(""String_Node_Str"");
  }
  if (pageFooter != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",pageFooter);
    writer.closeTag(""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  int index=ExcelUtil.getPageSizeIndex(pageWidth / 1000,pageHeight / 1000);
  writer.text(String.valueOf(index));
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}",0.8301682040151926
68551,"public void endSheet(){
  endSheet(null);
}","public void endSheet(){
  endSheet(null,0,0);
}",0.9555555555555556
68552,"public void initalize(PageDef page){
  axis=new AxisProcessor();
  axis.addCoordinate(page.contentwidth);
  setCacheSize();
  ContainerSizeInfo rule=new ContainerSizeInfo(0,page.contentwidth);
  cache=createDataCache(maxCol,maxRow);
  engine=new StyleEngine(this);
  containers.push(createContainer(rule,page.style,null));
}","public void initalize(int contentWidth,IStyle style){
  axis=new AxisProcessor();
  axis.addCoordinate(contentWidth);
  setCacheSize();
  ContainerSizeInfo rule=new ContainerSizeInfo(0,contentWidth);
  cache=createDataCache(maxCol,maxRow);
  engine=new StyleEngine(this);
  containers.push(createContainer(rule,style,null));
}",0.5323076923076923
68553,"public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  populateColor(style,StyleConstants.STYLE_BACKGROUND_COLOR,entry,StyleConstant.BACKGROUND_COLOR_PROP);
  CSSValue borderWidth=style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH);
  int width=PropertyUtil.getDimensionValue(borderWidth);
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_BOTTOM_COLOR,entry,StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(width));
  }
  borderWidth=style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH);
  width=PropertyUtil.getDimensionValue(borderWidth);
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_TOP_COLOR,entry,StyleConstant.BORDER_TOP_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(width));
  }
  borderWidth=style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH);
  width=PropertyUtil.getDimensionValue(borderWidth);
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_LEFT_COLOR,entry,StyleConstant.BORDER_LEFT_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(width));
  }
  borderWidth=style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH);
  width=PropertyUtil.getDimensionValue(borderWidth);
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_RIGHT_COLOR,entry,StyleConstant.BORDER_RIGHT_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(width));
  }
  populateColor(style,StyleConstants.STYLE_COLOR,entry,StyleConstant.COLOR_PROP);
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getProperty(IStyle.STYLE_FONT_SIZE)));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontStyle()));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontWeight()));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextLineThrough()));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextUnderline()));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign(),style.getDirection()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  entry.setProperty(StyleConstant.WHITE_SPACE,style.getWhiteSpace());
  return entry;
}","public static StyleEntry createStyleEntry(IStyle style,StyleEntry parent){
  StyleEntry entry=new StyleEntry();
  populateColor(style,StyleConstants.STYLE_BACKGROUND_COLOR,entry,StyleConstant.BACKGROUND_COLOR_PROP);
  CSSValue borderWidth=style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH);
  int width=PropertyUtil.getDimensionValue(borderWidth);
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_BOTTOM_COLOR,entry,StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(width));
  }
  borderWidth=style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH);
  width=PropertyUtil.getDimensionValue(borderWidth);
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_TOP_COLOR,entry,StyleConstant.BORDER_TOP_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(width));
  }
  borderWidth=style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH);
  width=PropertyUtil.getDimensionValue(borderWidth);
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_LEFT_COLOR,entry,StyleConstant.BORDER_LEFT_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(width));
  }
  borderWidth=style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH);
  width=PropertyUtil.getDimensionValue(borderWidth);
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_RIGHT_COLOR,entry,StyleConstant.BORDER_RIGHT_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(width));
  }
  populateColor(style,StyleConstants.STYLE_COLOR,entry,StyleConstant.COLOR_PROP);
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getProperty(IStyle.STYLE_FONT_SIZE)));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontStyle()));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontWeight()));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextLineThrough()));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextUnderline()));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign(),style.getDirection()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(parent,style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  entry.setProperty(StyleConstant.WHITE_SPACE,style.getWhiteSpace());
  return entry;
}",0.9963498320922762
68554,"public static String convertVAlign(String align){
  String va=""String_Node_Str"";
  align=ExcelUtil.getValue(align);
  if (""String_Node_Str"".equalsIgnoreCase(align)) {
    va=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(align)) {
    va=""String_Node_Str"";
  }
  return va;
}","public static String convertVAlign(StyleEntry parent,String align){
  align=ExcelUtil.getValue(align);
  if (""String_Node_Str"".equalsIgnoreCase(align)) {
    return ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(align)) {
    return ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(align) && parent != null) {
    return (String)parent.getProperty(StyleConstant.V_ALIGN_PROP);
  }
  return ""String_Node_Str"";
}",0.4468085106382978
68555,"public StyleEntry createCellEntry(ContainerSizeInfo sizeInfo,IStyle style,String diagonalLineColor,String diagonalLineStyle,int diagonalLineWidth){
  StyleEntry entry;
  if (style == null) {
    entry=StyleBuilder.createEmptyStyleEntry();
  }
 else   entry=initStyle(style,sizeInfo);
  StyleBuilder.applyDiagonalLine(entry,PropertyUtil.getColor(diagonalLineColor),diagonalLineStyle,diagonalLineWidth);
  return entry;
}","public StyleEntry createCellEntry(ContainerSizeInfo sizeInfo,IStyle style,String diagonalLineColor,String diagonalLineStyle,int diagonalLineWidth,StyleEntry parent){
  StyleEntry entry;
  if (style == null) {
    entry=StyleBuilder.createEmptyStyleEntry();
  }
 else   entry=initStyle(style,sizeInfo,parent);
  StyleBuilder.applyDiagonalLine(entry,PropertyUtil.getColor(diagonalLineColor),diagonalLineStyle,diagonalLineWidth);
  return entry;
}",0.9710312862108922
68556,"public StyleEntry createEntry(ContainerSizeInfo sizeInfo,IStyle style){
  if (style == null) {
    return StyleBuilder.createEmptyStyleEntry();
  }
  StyleEntry entry=initStyle(style,sizeInfo);
  return entry;
}","public StyleEntry createEntry(ContainerSizeInfo sizeInfo,IStyle style,StyleEntry parent){
  if (style == null) {
    return StyleBuilder.createEmptyStyleEntry();
  }
  StyleEntry entry=initStyle(style,sizeInfo,parent);
  return entry;
}",0.9440715883668904
68557,"private StyleEntry initStyle(IStyle style,ContainerSizeInfo rule){
  return initStyle(style,null,rule);
}","private StyleEntry initStyle(IStyle style,ContainerSizeInfo rule,StyleEntry parent){
  return initStyle(style,null,rule,parent);
}",0.8936170212765957
68558,"public void addContainderStyle(IStyle computedStyle){
  StyleEntry entry=StyleBuilder.createStyleEntry(computedStyle);
  if (!containerStyles.isEmpty()) {
    StyleEntry centry=containerStyles.peek();
    StyleBuilder.mergeInheritableProp(centry,entry);
  }
  containerStyles.add(entry);
}","public void addContainderStyle(IStyle computedStyle,StyleEntry parent){
  StyleEntry entry=StyleBuilder.createStyleEntry(computedStyle,parent);
  if (!containerStyles.isEmpty()) {
    StyleEntry centry=containerStyles.peek();
    StyleBuilder.mergeInheritableProp(centry,entry);
  }
  containerStyles.add(entry);
}",0.9585406301824212
68559,"public Data addDateTime(Object txt,IStyle style,HyperlinkDef link,BookmarkDef bookmark,String dateTimeLocale,float height){
  ContainerSizeInfo containerSize=getCurrentContainer().getSizeInfo();
  StyleEntry entry=engine.getStyle(style,containerSize);
  setlinkStyle(entry,link);
  Data data=null;
  IDataContent dataContent=(IDataContent)txt;
  Object value=dataContent.getValue();
  Date date=ExcelUtil.getDate(value);
  if (date != null && ((date instanceof Time) || date.getYear() >= 0)) {
    data=createDateData(value,entry,style.getDateTimeFormat(),dateTimeLocale);
    data.setHeight(height);
    data.setBookmark(bookmark);
    data.setHyperlinkDef(link);
    data.setStartX(containerSize.getStartCoordinate());
    data.setEndX(containerSize.getEndCoordinate());
    addData(data);
    return data;
  }
 else {
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return addData(dataContent.getText(),style,link,bookmark,dateTimeLocale,height);
  }
}","public Data addDateTime(Object txt,IStyle style,HyperlinkDef link,BookmarkDef bookmark,String dateTimeLocale,float height){
  XlsContainer currentContainer=getCurrentContainer();
  ContainerSizeInfo containerSize=currentContainer.getSizeInfo();
  StyleEntry entry=engine.getStyle(style,containerSize,getParentStyle(currentContainer));
  setlinkStyle(entry,link);
  Data data=null;
  IDataContent dataContent=(IDataContent)txt;
  Object value=dataContent.getValue();
  Date date=ExcelUtil.getDate(value);
  if (date != null && ((date instanceof Time) || date.getYear() >= 0)) {
    data=createDateData(value,entry,style.getDateTimeFormat(),dateTimeLocale);
    data.setHeight(height);
    data.setBookmark(bookmark);
    data.setHyperlinkDef(link);
    data.setStartX(containerSize.getStartCoordinate());
    data.setEndX(containerSize.getEndCoordinate());
    addData(data);
    return data;
  }
 else {
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return addData(dataContent.getText(),style,link,bookmark,dateTimeLocale,height);
  }
}",0.938875305623472
68560,"public void addContainerStyle(IStyle computedStyle){
  engine.addContainderStyle(computedStyle);
}","public void addContainerStyle(IStyle computedStyle){
  engine.addContainderStyle(computedStyle,getParentStyle());
}",0.92018779342723
68561,"public void addCell(ICellContent cellcontent,int col,int colSpan,int rowSpan,IStyle style){
  XlsTable table=tables.peek();
  ContainerSizeInfo cellSizeInfo=table.getColumnSizeInfo(col,colSpan);
  int diagonalNumber=cellcontent.getDiagonalNumber();
  StyleEntry cellStyleEntry=null;
  if (diagonalNumber != 0) {
    String diagonalColor=cellcontent.getDiagonalColor();
    String diagonalStyle=cellcontent.getDiagonalStyle();
    int diagonalWidth=PropertyUtil.getDimensionValue(cellcontent,cellcontent.getDiagonalWidth(),cellSizeInfo.getWidth());
    cellStyleEntry=engine.createCellEntry(cellSizeInfo,style,diagonalColor,diagonalStyle,diagonalWidth);
  }
 else {
    cellStyleEntry=engine.createEntry(cellSizeInfo,style);
  }
  XlsCell cell=new XlsCell(cellStyleEntry,cellSizeInfo,getCurrentContainer(),rowSpan);
  addContainer(cell);
}","public void addCell(ICellContent cellcontent,int col,int colSpan,int rowSpan,IStyle style){
  XlsTable table=tables.peek();
  ContainerSizeInfo cellSizeInfo=table.getColumnSizeInfo(col,colSpan);
  int diagonalNumber=cellcontent.getDiagonalNumber();
  StyleEntry cellStyleEntry=null;
  if (diagonalNumber != 0) {
    String diagonalColor=cellcontent.getDiagonalColor();
    String diagonalStyle=cellcontent.getDiagonalStyle();
    int diagonalWidth=PropertyUtil.getDimensionValue(cellcontent,cellcontent.getDiagonalWidth(),cellSizeInfo.getWidth());
    cellStyleEntry=engine.createCellEntry(cellSizeInfo,style,diagonalColor,diagonalStyle,diagonalWidth,getParentStyle());
  }
 else {
    cellStyleEntry=engine.createEntry(cellSizeInfo,style,getParentStyle());
  }
  XlsCell cell=new XlsCell(cellStyleEntry,cellSizeInfo,getCurrentContainer(),rowSpan);
  addContainer(cell);
}",0.9801169590643276
68562,"private void createTable(ColumnsInfo tableInfo,IStyle style,XlsContainer currentContainer,int[] columnStartCoordinates){
  int leftCordinate=columnStartCoordinates[0];
  int width=columnStartCoordinates[columnStartCoordinates.length - 1] - leftCordinate;
  ContainerSizeInfo sizeInfo=new ContainerSizeInfo(leftCordinate,width);
  StyleEntry styleEntry=engine.createEntry(sizeInfo,style);
  XlsTable table=new XlsTable(tableInfo,styleEntry,sizeInfo,currentContainer);
  tables.push(table);
  addContainer(table);
}","private void createTable(ColumnsInfo tableInfo,IStyle style,XlsContainer currentContainer,int[] columnStartCoordinates){
  int leftCordinate=columnStartCoordinates[0];
  int width=columnStartCoordinates[columnStartCoordinates.length - 1] - leftCordinate;
  ContainerSizeInfo sizeInfo=new ContainerSizeInfo(leftCordinate,width);
  StyleEntry styleEntry=engine.createEntry(sizeInfo,style,getParentStyle());
  XlsTable table=new XlsTable(tableInfo,styleEntry,sizeInfo,currentContainer);
  tables.push(table);
  addContainer(table);
}",0.9837008628954936
68563,"private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    return createData(altText,entry);
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    byte[] data=imageInfo.getData();
    if (data != null) {
      return createData(image,entry,container,type,imageInfo);
    }
 else {
      return createData(image.getAltText(),entry);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    return createData(image.getAltText(),entry);
  }
}","private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(altText,entry);
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    byte[] data=imageInfo.getData();
    if (data != null) {
      return createData(image,entry,container,type,imageInfo);
    }
 else {
      return createData(image.getAltText(),entry);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    return createData(image.getAltText(),entry);
  }
}",0.9652087475149106
68564,"public XlsContainer createContainer(ContainerSizeInfo sizeInfo,IStyle style,XlsContainer parent){
  return new XlsContainer(engine.createEntry(sizeInfo,style),sizeInfo,parent);
}","public XlsContainer createContainer(ContainerSizeInfo sizeInfo,IStyle style,XlsContainer parent){
  return new XlsContainer(engine.createEntry(sizeInfo,style,getParentStyle(parent)),sizeInfo,parent);
}",0.9393139841688656
68565,"public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(image,parentSizeInfo.getWidth());
  splitColumns(imageColumnsInfo,parentSizeInfo);
  ContainerSizeInfo imageSize=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  StyleEntry entry=engine.getStyle(style,imageSize,parentSizeInfo);
  setlinkStyle(entry,link);
  SheetData data=createImageData(image,entry,container);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setStartX(imageSize.getStartCoordinate());
  data.setEndX(imageSize.getEndCoordinate());
  addData(data);
}","public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(image,parentSizeInfo.getWidth());
  splitColumns(imageColumnsInfo,parentSizeInfo);
  ContainerSizeInfo imageSize=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  StyleEntry entry=engine.getStyle(style,imageSize,parentSizeInfo,getParentStyle(container));
  setlinkStyle(entry,link);
  SheetData data=createImageData(image,entry,container);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setStartX(imageSize.getStartCoordinate());
  data.setEndX(imageSize.getEndCoordinate());
  addData(data);
}",0.9838909541511772
68566,"public XlsContainer createCellContainer(IStyle style,XlsContainer parent,int rowSpan){
  ContainerSizeInfo sizeInfo=parent.getSizeInfo();
  return new XlsCell(engine.createEntry(sizeInfo,style),sizeInfo,parent,rowSpan);
}","public XlsContainer createCellContainer(IStyle style,XlsContainer parent,int rowSpan){
  ContainerSizeInfo sizeInfo=parent.getSizeInfo();
  return new XlsCell(engine.createEntry(sizeInfo,style,getParentStyle(parent)),sizeInfo,parent,rowSpan);
}",0.9505376344086022
68567,"public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (oSource.equals(cbHidden)) {
    getAxisForProcessing().getLineAttributes().setVisible(!cbHidden.getSelection());
  }
 else   if (oSource.equals(cbTickBetweenCategory)) {
    getAxisForProcessing().getScale().setTickBetweenCategories(cbTickBetweenCategory.getSelection());
  }
  if (oSource.equals(iscGridCount)) {
    getAxisForProcessing().getScale().setMinorGridsPerUnit(iscGridCount.getSelection());
  }
 else   if (oSource.equals(majGridStNum)) {
    getAxisForProcessing().getScale().setMajorGridsStepNumber(majGridStNum.getSelection());
  }
}","public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (oSource.equals(cbHidden)) {
    getAxisForProcessing().getLineAttributes().setVisible(!cbHidden.getSelection());
    lblColor.setEnabled(!cbHidden.getSelection());
    fccLine.setEnabled(!cbHidden.getSelection());
  }
 else   if (oSource.equals(cbTickBetweenCategory)) {
    getAxisForProcessing().getScale().setTickBetweenCategories(cbTickBetweenCategory.getSelection());
  }
  if (oSource.equals(iscGridCount)) {
    getAxisForProcessing().getScale().setMinorGridsPerUnit(iscGridCount.getSelection());
  }
 else   if (oSource.equals(majGridStNum)) {
    getAxisForProcessing().getScale().setMajorGridsStepNumber(majGridStNum.getSelection());
  }
}",0.926007326007326
68568,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_GRIDLINES);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  Composite choiceComposite=new Composite(cmpContent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  choiceComposite.setLayoutData(gd);
  choiceComposite.setLayout(new GridLayout(2,true));
  cbHidden=new Button(choiceComposite,SWT.CHECK);
  cbHidden.setLayoutData(new GridData(GridData.FILL_BOTH));
  cbHidden.setText(Messages.getString(""String_Node_Str""));
  cbHidden.setSelection(!axis.getLineAttributes().isVisible());
  cbHidden.addSelectionListener(this);
  cbTickBetweenCategory=new Button(choiceComposite,SWT.CHECK);
  cbTickBetweenCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
  cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories());
  cbTickBetweenCategory.addSelectionListener(this);
  cbTickBetweenCategory.setEnabled(axis.isCategoryAxis());
  cbTickBetweenCategory.setVisible((angleType == AngleType.X) && axis.isCategoryAxis());
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  gdCMPGeneral.horizontalSpan=2;
  gdCMPGeneral.grabExcessVerticalSpace=false;
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  Label lblColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpGeneral,SWT.NONE,getContext(),clrCurrent,false,false,true,true,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=9;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  lblGridStepNum=new Label(cmpGeneral,SWT.NONE);
  GridData gdLblGridStepNum=new GridData(GridData.FILL);
  lblGridStepNum.setLayoutData(gdLblGridStepNum);
  lblGridStepNum.setText(Messages.getString(""String_Node_Str""));
  majGridStNum=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    majGridStNum.setLayoutData(gd);
    majGridStNum.setMinimum(1);
    majGridStNum.setSelection(getAxisForProcessing().getScale().getMajorGridsStepNumber());
    majGridStNum.addSelectionListener(this);
  }
  lblGridCount=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLGridCount=new GridData();
  lblGridCount.setLayoutData(gdLBLGridCount);
  lblGridCount.setText(Messages.getString(""String_Node_Str""));
  iscGridCount=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    iscGridCount.setLayoutData(gd);
    iscGridCount.setMinimum(1);
    iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit());
    iscGridCount.addSelectionListener(this);
  }
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue());
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue());
  gacMinor.addListener(this);
  setStateOfMajorGrid();
  setStateOfMinorGrid();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_GRIDLINES);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  Composite choiceComposite=new Composite(cmpContent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  choiceComposite.setLayoutData(gd);
  choiceComposite.setLayout(new GridLayout(2,true));
  cbHidden=new Button(choiceComposite,SWT.CHECK);
  cbHidden.setLayoutData(new GridData(GridData.FILL_BOTH));
  cbHidden.setText(Messages.getString(""String_Node_Str""));
  cbHidden.setSelection(!axis.getLineAttributes().isVisible());
  cbHidden.addSelectionListener(this);
  cbTickBetweenCategory=new Button(choiceComposite,SWT.CHECK);
  cbTickBetweenCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
  cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories());
  cbTickBetweenCategory.addSelectionListener(this);
  cbTickBetweenCategory.setEnabled(axis.isCategoryAxis());
  cbTickBetweenCategory.setVisible((angleType == AngleType.X) && axis.isCategoryAxis());
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  gdCMPGeneral.horizontalSpan=2;
  gdCMPGeneral.grabExcessVerticalSpace=false;
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  lblColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpGeneral,SWT.NONE,getContext(),clrCurrent,false,false,true,true,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=9;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  lblColor.setEnabled(!cbHidden.getSelection());
  fccLine.setEnabled(!cbHidden.getSelection());
  lblGridStepNum=new Label(cmpGeneral,SWT.NONE);
  GridData gdLblGridStepNum=new GridData(GridData.FILL);
  lblGridStepNum.setLayoutData(gdLblGridStepNum);
  lblGridStepNum.setText(Messages.getString(""String_Node_Str""));
  majGridStNum=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    majGridStNum.setLayoutData(gd);
    majGridStNum.setMinimum(1);
    majGridStNum.setSelection(getAxisForProcessing().getScale().getMajorGridsStepNumber());
    majGridStNum.addSelectionListener(this);
  }
  lblGridCount=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLGridCount=new GridData();
  lblGridCount.setLayoutData(gdLBLGridCount);
  lblGridCount.setText(Messages.getString(""String_Node_Str""));
  iscGridCount=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    iscGridCount.setLayoutData(gd);
    iscGridCount.setMinimum(1);
    iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit());
    iscGridCount.addSelectionListener(this);
  }
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue());
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue());
  gacMinor.addListener(this);
  setStateOfMajorGrid();
  setStateOfMinorGrid();
  return cmpContent;
}",0.9888201454466514
68569,"public Object getMinimum(DataSet ds) throws ChartException {
  DataSetIterator dsi=null;
  try {
    dsi=new DataSetIterator(ds);
    dsi.reset();
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,uiex);
  }
  if (dsi.size() == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  if (ds instanceof NumberDataSet) {
    boolean bAnyNonNull=false;
    Object o;
    double d, dMin=0;
    while (dsi.hasNext()) {
      o=dsi.next();
      if (o == null) {
        continue;
      }
      d=((Number)o).doubleValue();
      if (Double.isNaN(d) || Double.isInfinite(d)) {
        continue;
      }
      if (!bAnyNonNull) {
        dMin=d;
        bAnyNonNull=true;
      }
 else       if (dMin > d) {
        dMin=d;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return new Double(dMin);
  }
 else   if (ds instanceof DateTimeDataSet) {
    boolean bAnyNonNull=false;
    Calendar cal=null;
    Calendar calMin=Calendar.getInstance(getULocale());
    while (dsi.hasNext()) {
      cal=(Calendar)dsi.next();
      if (cal == null) {
        continue;
      }
      if (!bAnyNonNull) {
        calMin=cal;
        bAnyNonNull=true;
      }
 else       if (calMin.after(cal)) {
        calMin=cal;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return calMin;
  }
  return null;
}","public Object getMinimum(DataSet ds) throws ChartException {
  DataSetIterator dsi=null;
  try {
    dsi=new DataSetIterator(ds);
    dsi.reset();
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,uiex);
  }
  if (dsi.size() == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  if (ds instanceof NumberDataSet) {
    boolean bAnyNonNull=false;
    Object o;
    double d, dMin=0;
    while (dsi.hasNext()) {
      o=dsi.next();
      if (o == null) {
        continue;
      }
      d=((Number)o).doubleValue();
      if (Double.isNaN(d) || Double.isInfinite(d)) {
        continue;
      }
      if (!bAnyNonNull) {
        dMin=d;
        bAnyNonNull=true;
      }
 else       if (dMin > d) {
        dMin=d;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
      return null;
    }
    return new Double(dMin);
  }
 else   if (ds instanceof DateTimeDataSet) {
    boolean bAnyNonNull=false;
    Calendar cal=null;
    Calendar calMin=Calendar.getInstance(getULocale());
    while (dsi.hasNext()) {
      cal=(Calendar)dsi.next();
      if (cal == null) {
        continue;
      }
      if (!bAnyNonNull) {
        calMin=cal;
        bAnyNonNull=true;
      }
 else       if (calMin.after(cal)) {
        calMin=cal;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return calMin;
  }
  return null;
}",0.9946882862734134
68570,"public Object getMaximum(DataSet ds) throws ChartException {
  DataSetIterator dsi=null;
  try {
    dsi=new DataSetIterator(ds);
    dsi.reset();
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,uiex);
  }
  if (dsi.size() == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  if (ds instanceof NumberDataSet) {
    boolean bAnyNonNull=false;
    Object o;
    double d, dMax=0;
    while (dsi.hasNext()) {
      o=dsi.next();
      if (o == null) {
        continue;
      }
      d=((Number)o).doubleValue();
      if (Double.isNaN(d) || Double.isInfinite(dMax)) {
        continue;
      }
      if (!bAnyNonNull) {
        dMax=d;
        bAnyNonNull=true;
      }
 else       if (dMax < d) {
        dMax=d;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return new Double(dMax);
  }
 else   if (ds instanceof DateTimeDataSet) {
    boolean bAnyNonNull=false;
    Calendar cal=null;
    Calendar calMax=Calendar.getInstance(getULocale());
    while (dsi.hasNext()) {
      cal=(Calendar)dsi.next();
      if (cal == null) {
        continue;
      }
      if (!bAnyNonNull) {
        calMax=cal;
        bAnyNonNull=true;
      }
 else       if (calMax.before(cal)) {
        calMax=cal;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return calMax;
  }
  return null;
}","public Object getMaximum(DataSet ds) throws ChartException {
  DataSetIterator dsi=null;
  try {
    dsi=new DataSetIterator(ds);
    dsi.reset();
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,uiex);
  }
  if (dsi.size() == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  if (ds instanceof NumberDataSet) {
    boolean bAnyNonNull=false;
    Object o;
    double d, dMax=0;
    while (dsi.hasNext()) {
      o=dsi.next();
      if (o == null) {
        continue;
      }
      d=((Number)o).doubleValue();
      if (Double.isNaN(d) || Double.isInfinite(dMax)) {
        continue;
      }
      if (!bAnyNonNull) {
        dMax=d;
        bAnyNonNull=true;
      }
 else       if (dMax < d) {
        dMax=d;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
      return null;
    }
    return new Double(dMax);
  }
 else   if (ds instanceof DateTimeDataSet) {
    boolean bAnyNonNull=false;
    Calendar cal=null;
    Calendar calMax=Calendar.getInstance(getULocale());
    while (dsi.hasNext()) {
      cal=(Calendar)dsi.next();
      if (cal == null) {
        continue;
      }
      if (!bAnyNonNull) {
        calMax=cal;
        bAnyNonNull=true;
      }
 else       if (calMax.before(cal)) {
        calMax=cal;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return calMax;
  }
  return null;
}",0.994700139470014
68571,"/** 
 * @param cwoa
 * @param pie
 * @param dpha
 * @param da
 * @param pa
 */
PieRenderer(ChartWithoutAxes cwoa,Pie pie,DataPointHints[] dpha,double[] da,Palette pa) throws ChartException {
  this.pa=pa;
  this.pie=pie;
  this.cComp=pie.getRunTimeContext().getState(StateKey.CHART_COMPUTATION_KEY);
  ps=(PieSeries)pie.getSeries();
  sExplosionExpression=ps.getExplosionExpression();
  dExplosion=ps.getExplosion() * pie.getDeviceScale();
  dThickness=((cwoa.getDimension() == ChartDimension.TWO_DIMENSIONAL_LITERAL) ? 0 : cwoa.getSeriesThickness()) * pie.getDeviceScale();
  ratio=ps.isSetRatio() ? ps.getRatio() : 1;
  rotation=ps.isSetRotation() ? ps.getRotation() : 0;
  liaLL=ps.getLeaderLineAttributes();
  if (ps.getLeaderLineAttributes().isVisible()) {
    dLeaderLength=ps.getLeaderLineLength() * pie.getDeviceScale();
  }
 else {
    dLeaderLength=0;
  }
  liaEdges=goFactory.createLineAttributes(goFactory.BLACK(),LineStyle.SOLID_LITERAL,1);
  bPaletteByCategory=(cwoa.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL);
  lpDataPoint=ps.getLabelPosition();
  lpSeriesTitle=ps.getTitlePosition();
  laSeriesTitle=goFactory.copyOf(ps.getTitle());
  laSeriesTitle.getCaption().setValue(pie.getRunTimeContext().externalizedMessage(String.valueOf(ps.getSeriesIdentifier())));
  laSeriesTitle.getCaption().getFont().setAlignment(pie.switchTextAlignment(laSeriesTitle.getCaption().getFont().getAlignment()));
  final AbstractScriptHandler sh=pie.getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_SERIES_TITLE,ps,laSeriesTitle,pie.getRunTimeContext().getScriptContext());
  pie.getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_SERIES_TITLE,laSeriesTitle);
  lls=ps.getLeaderLineStyle();
  bMinSliceDefined=cwoa.isSetMinSlice();
  dMinSlice=cwoa.getMinSlice();
  bPercentageMinSlice=cwoa.isMinSlicePercent();
  double dTotal=0;
  orginalSliceCount=da.length;
  for (int i=0; i < da.length; i++) {
    if (da[i] < 0) {
      dTotal-=da[i];
    }
 else     if (!Double.isNaN(da[i])) {
      dTotal+=da[i];
    }
  }
  if (bMinSliceDefined) {
    if (bPercentageMinSlice) {
      dAbsoluteMinSlice=dMinSlice * dTotal / 100d;
    }
 else {
      dAbsoluteMinSlice=dMinSlice;
    }
    double residualPos=0;
    double residualNeg=0;
    DataPointHints dphPos=null;
    DataPointHints dphNeg=null;
    for (int i=0; i < da.length; i++) {
      if (Double.isNaN(da[i])) {
        continue;
      }
      if (Math.abs(da[i]) >= Math.abs(dAbsoluteMinSlice)) {
        pieSliceList.add(new PieSlice(da[i],dpha[i],i));
      }
 else {
        if (da[i] >= 0) {
          residualPos+=da[i];
          if (dphPos == null) {
            dphPos=dpha[i].getVirtualCopy();
          }
 else {
            dphPos.accumulate(dpha[i].getBaseValue(),dpha[i].getOrthogonalValue(),dpha[i].getSeriesValue(),dpha[i].getPercentileOrthogonalValue());
          }
        }
 else {
          residualNeg+=da[i];
          if (dphNeg == null) {
            dphNeg=dpha[i].getVirtualCopy();
          }
 else {
            dphNeg.accumulate(dpha[i].getBaseValue(),dpha[i].getOrthogonalValue(),dpha[i].getSeriesValue(),dpha[i].getPercentileOrthogonalValue());
          }
        }
      }
    }
    if (dphPos != null) {
      dphPos.setBaseValue(cwoa.getMinSliceLabel());
      dphPos.setIndex(orginalSliceCount);
      pieSliceList.add(new PieSlice(residualPos,dphPos,orginalSliceCount));
      bMinSliceApplied=true;
    }
    if (dphNeg != null) {
      dphNeg.setBaseValue(cwoa.getMinSliceLabel());
      dphNeg.setIndex(orginalSliceCount);
      pieSliceList.add(new PieSlice(residualNeg,dphNeg,orginalSliceCount));
      bMinSliceApplied=true;
    }
  }
 else {
    for (int i=0; i < da.length; i++) {
      if (Double.isNaN(da[i])) {
        continue;
      }
      pieSliceList.add(new PieSlice(da[i],dpha[i],i));
    }
  }
  double startAngle=rotation;
  double originalStartAngle=rotation;
  if (dTotal == 0) {
    dTotal=1;
  }
  PieSlice slice=null;
  double totalAngle=0d;
  for (Iterator iter=pieSliceList.iterator(); iter.hasNext(); ) {
    slice=(PieSlice)iter.next();
    double length=(Math.abs(slice.getPrimitiveValue()) / dTotal) * 360d;
    double percentage=(slice.getPrimitiveValue() / dTotal) * 100d;
    slice.setStartAngle(startAngle);
    slice.setOriginalStartAngle(originalStartAngle);
    slice.setSliceLength(length);
    slice.setPercentage(percentage);
    startAngle+=length + MIN_DOUBLE;
    originalStartAngle+=length;
    startAngle=wrapAngle(startAngle);
    originalStartAngle=wrapAngle(originalStartAngle);
    totalAngle+=length;
  }
  if (totalAngle > 0 && 360 - totalAngle > 0.001) {
    slice.setSliceLength(360 - slice.getStartAngle());
  }
  initExploded();
}","/** 
 * @param cwoa
 * @param pie
 * @param dpha
 * @param da
 * @param pa
 */
PieRenderer(ChartWithoutAxes cwoa,Pie pie,DataPointHints[] dpha,double[] da,Palette pa) throws ChartException {
  this.pa=pa;
  this.pie=pie;
  this.cComp=pie.getRunTimeContext().getState(StateKey.CHART_COMPUTATION_KEY);
  ps=(PieSeries)pie.getSeries();
  sExplosionExpression=ps.getExplosionExpression();
  dExplosion=ps.getExplosion() * pie.getDeviceScale();
  dThickness=((cwoa.getDimension() == ChartDimension.TWO_DIMENSIONAL_LITERAL) ? 0 : cwoa.getSeriesThickness()) * pie.getDeviceScale();
  ratio=ps.isSetRatio() ? ps.getRatio() : 1;
  rotation=ps.isSetRotation() ? ps.getRotation() : 0;
  liaLL=ps.getLeaderLineAttributes();
  if (ps.getLeaderLineAttributes().isVisible()) {
    dLeaderLength=ps.getLeaderLineLength() * pie.getDeviceScale();
  }
 else {
    dLeaderLength=0;
  }
  liaEdges=goFactory.createLineAttributes(goFactory.BLACK(),LineStyle.SOLID_LITERAL,1);
  bPaletteByCategory=(cwoa.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL);
  lpDataPoint=ps.getLabelPosition();
  lpSeriesTitle=ps.getTitlePosition();
  laSeriesTitle=goFactory.copyOf(ps.getTitle());
  laSeriesTitle.getCaption().setValue(pie.getRunTimeContext().externalizedMessage(String.valueOf(ps.getSeriesIdentifier())));
  laSeriesTitle.getCaption().getFont().setAlignment(pie.switchTextAlignment(laSeriesTitle.getCaption().getFont().getAlignment()));
  final AbstractScriptHandler sh=pie.getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_SERIES_TITLE,ps,laSeriesTitle,pie.getRunTimeContext().getScriptContext());
  pie.getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_SERIES_TITLE,laSeriesTitle);
  lls=ps.getLeaderLineStyle();
  bMinSliceDefined=cwoa.isSetMinSlice();
  dMinSlice=cwoa.getMinSlice();
  bPercentageMinSlice=cwoa.isMinSlicePercent();
  double dTotal=0;
  orginalSliceCount=da.length;
  for (int i=0; i < da.length; i++) {
    if (da[i] < 0) {
      dTotal-=da[i];
    }
 else     if (!Double.isNaN(da[i])) {
      dTotal+=da[i];
    }
  }
  if (bMinSliceDefined) {
    if (bPercentageMinSlice) {
      dAbsoluteMinSlice=dMinSlice * dTotal / 100d;
    }
 else {
      dAbsoluteMinSlice=dMinSlice;
    }
    double residualPos=0;
    double residualNeg=0;
    DataPointHints dphPos=null;
    DataPointHints dphNeg=null;
    for (int i=0; i < da.length; i++) {
      if (Double.isNaN(da[i])) {
        continue;
      }
      if (Math.abs(da[i]) >= Math.abs(dAbsoluteMinSlice)) {
        pieSliceList.add(new PieSlice(da[i],dpha[i],i));
      }
 else {
        if (da[i] >= 0) {
          residualPos+=da[i];
          if (dphPos == null) {
            dphPos=dpha[i].getVirtualCopy();
          }
 else {
            dphPos.accumulate(dpha[i].getBaseValue(),dpha[i].getOrthogonalValue(),dpha[i].getSeriesValue(),dpha[i].getPercentileOrthogonalValue());
          }
        }
 else {
          residualNeg+=da[i];
          if (dphNeg == null) {
            dphNeg=dpha[i].getVirtualCopy();
          }
 else {
            dphNeg.accumulate(dpha[i].getBaseValue(),dpha[i].getOrthogonalValue(),dpha[i].getSeriesValue(),dpha[i].getPercentileOrthogonalValue());
          }
        }
      }
    }
    String extSliceLabel=pie.getRunTimeContext().externalizedMessage(cwoa.getMinSliceLabel());
    if (dphPos != null) {
      dphPos.setBaseValue(extSliceLabel);
      dphPos.setIndex(orginalSliceCount);
      pieSliceList.add(new PieSlice(residualPos,dphPos,orginalSliceCount));
      bMinSliceApplied=true;
    }
    if (dphNeg != null) {
      dphNeg.setBaseValue(extSliceLabel);
      dphNeg.setIndex(orginalSliceCount);
      pieSliceList.add(new PieSlice(residualNeg,dphNeg,orginalSliceCount));
      bMinSliceApplied=true;
    }
  }
 else {
    for (int i=0; i < da.length; i++) {
      if (Double.isNaN(da[i])) {
        continue;
      }
      pieSliceList.add(new PieSlice(da[i],dpha[i],i));
    }
  }
  double startAngle=rotation;
  double originalStartAngle=rotation;
  if (dTotal == 0) {
    dTotal=1;
  }
  PieSlice slice=null;
  double totalAngle=0d;
  for (Iterator iter=pieSliceList.iterator(); iter.hasNext(); ) {
    slice=(PieSlice)iter.next();
    double length=(Math.abs(slice.getPrimitiveValue()) / dTotal) * 360d;
    double percentage=(slice.getPrimitiveValue() / dTotal) * 100d;
    slice.setStartAngle(startAngle);
    slice.setOriginalStartAngle(originalStartAngle);
    slice.setSliceLength(length);
    slice.setPercentage(percentage);
    startAngle+=length + MIN_DOUBLE;
    originalStartAngle+=length;
    startAngle=wrapAngle(startAngle);
    originalStartAngle=wrapAngle(originalStartAngle);
    totalAngle+=length;
  }
  if (totalAngle > 0 && 360 - totalAngle > 0.001) {
    slice.setSliceLength(360 - slice.getStartAngle());
  }
  initExploded();
}",0.9868106760826668
68572,"private void fireEvent(boolean bByModifyText){
  boolean isFractionConverted=false;
  String sText=txtValue.getText();
  if (sText == null || sText.trim().length() == 0) {
    bValueIsSet=false;
  }
 else {
    int iDelimiter=sText.indexOf('/');
    if (iDelimiter < 0) {
      iDelimiter=sText.indexOf(':');
    }
    if (iDelimiter > 0) {
      isFractionConverted=true;
      String numerator=sText.substring(0,iDelimiter);
      String denominator=sText.substring(iDelimiter + 1);
      try {
        Number nume=numberFormat.parse(numerator);
        Number deno=numberFormat.parse(denominator);
        dValue=nume.doubleValue() / deno.doubleValue();
        bValueIsSet=true;
        sText=numberFormat.format(dValue);
        if (!bByModifyText) {
          this.txtValue.setText(sText);
        }
      }
 catch (      ParseException e) {
        if (!this.bTextModified) {
          handleFormatError(sText);
        }
      }
    }
 else {
      try {
        Number num=numberFormat.parse(sText);
        dValue=num.doubleValue();
        bValueIsSet=true;
        sText=numberFormat.format(dValue);
      }
 catch (      ParseException e) {
        if (!this.bTextModified) {
          handleFormatError(sText);
        }
      }
    }
  }
  for (int i=0; i < vModifyListeners.size(); i++) {
    Event e=new Event();
    e.data=bByModifyText ? Boolean.FALSE : Boolean.TRUE;
    e.widget=this;
    e.type=TEXT_MODIFIED;
    ((ModifyListener)vModifyListeners.get(i)).modifyText(new ModifyEvent(e));
  }
  if (isFractionConverted) {
    for (int i=0; i < vFractionListeners.size(); i++) {
      Event e=new Event();
      e.data=sText;
      e.widget=this;
      e.type=TEXT_FRACTION_CONVERTED;
      ((Listener)vFractionListeners.get(i)).handleEvent(e);
    }
  }
}","private void fireEvent(boolean bByModifyText){
  boolean isFractionConverted=false;
  String sText=txtValue.getText();
  if (sText == null || sText.trim().length() == 0) {
    bValueIsSet=false;
    dValue=0d;
  }
 else {
    int iDelimiter=sText.indexOf('/');
    if (iDelimiter < 0) {
      iDelimiter=sText.indexOf(':');
    }
    if (iDelimiter > 0) {
      isFractionConverted=true;
      String numerator=sText.substring(0,iDelimiter);
      String denominator=sText.substring(iDelimiter + 1);
      try {
        Number nume=numberFormat.parse(numerator);
        Number deno=numberFormat.parse(denominator);
        dValue=nume.doubleValue() / deno.doubleValue();
        bValueIsSet=true;
        sText=numberFormat.format(dValue);
        if (!bByModifyText) {
          this.txtValue.setText(sText);
        }
      }
 catch (      ParseException e) {
        if (!this.bTextModified) {
          handleFormatError(sText);
        }
      }
    }
 else {
      try {
        Number num=numberFormat.parse(sText);
        dValue=num.doubleValue();
        bValueIsSet=true;
        sText=numberFormat.format(dValue);
      }
 catch (      ParseException e) {
        if (!this.bTextModified) {
          handleFormatError(sText);
        }
      }
    }
  }
  for (int i=0; i < vModifyListeners.size(); i++) {
    Event e=new Event();
    e.data=bByModifyText ? Boolean.FALSE : Boolean.TRUE;
    e.widget=this;
    e.type=TEXT_MODIFIED;
    ((ModifyListener)vModifyListeners.get(i)).modifyText(new ModifyEvent(e));
  }
  if (isFractionConverted) {
    for (int i=0; i < vFractionListeners.size(); i++) {
      Event e=new Event();
      e.data=sText;
      e.widget=this;
      e.type=TEXT_FRACTION_CONVERTED;
      ((Listener)vFractionListeners.get(i)).handleEvent(e);
    }
  }
}",0.9957947855340622
68573,"/** 
 * Build the style of image content.
 */
public void buildImageStyle(IImageContent image,StringBuffer styleBuffer,int display){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,image.getWidth());
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,image.getHeight());
  setDisplayProperty(display,0,styleBuffer);
  IStyle style=image.getStyle();
  String verticalAlign=style.getVerticalAlign();
  if (verticalAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(verticalAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(image);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of image content.
 */
public void buildImageStyle(IImageContent image,StringBuffer styleBuffer,int display){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,image.getWidth());
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,image.getHeight());
  setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK,styleBuffer);
  IStyle style=image.getStyle();
  String verticalAlign=style.getVerticalAlign();
  if (verticalAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(verticalAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(image);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.9843587069864442
68574,"/** 
 * Build the style of image content.
 */
public void buildImageStyle(IImageContent image,StringBuffer styleBuffer,int display){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,image.getWidth());
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,image.getHeight());
  setDisplayProperty(display,0,styleBuffer);
  IStyle imageComputedStyle=image.getComputedStyle();
  if (null != imageComputedStyle) {
    AttributeBuilder.buildTextDecoration(styleBuffer,imageComputedStyle);
  }
  IStyle style=image.getStyle();
  String verticalAlign=style.getVerticalAlign();
  if (verticalAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(verticalAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(image);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}","/** 
 * Build the style of image content.
 */
public void buildImageStyle(IImageContent image,StringBuffer styleBuffer,int display){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,image.getWidth());
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,image.getHeight());
  setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK,styleBuffer);
  IStyle imageComputedStyle=image.getComputedStyle();
  if (null != imageComputedStyle) {
    AttributeBuilder.buildTextDecoration(styleBuffer,imageComputedStyle);
  }
  IStyle style=image.getStyle();
  String verticalAlign=style.getVerticalAlign();
  if (verticalAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(verticalAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(image);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}",0.9859550561797752
68575,"protected boolean needPageBreakBefore(){
  if (content == null || content.getContentType() == IContent.CELL_CONTENT) {
    return false;
  }
  if (hasMasterPageChanged()) {
    return true;
  }
  IStyle style=content.getStyle();
  CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
  if (IStyle.ALWAYS_VALUE == pageBreak || IStyle.RIGHT_VALUE == pageBreak || IStyle.LEFT_VALUE == pageBreak || IStyle.SOFT_VALUE == pageBreak) {
    return true;
  }
  if (parent != null && parent instanceof HTMLListingBandLM) {
    HTMLListingBandLM bandLayout=(HTMLListingBandLM)parent;
    if (isVisible && bandLayout.needSoftPageBreak) {
      if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
        return true;
      }
    }
  }
  return false;
}","protected boolean needPageBreakBefore(){
  if (content == null || content.getContentType() == IContent.CELL_CONTENT) {
    return false;
  }
  if (hasMasterPageChanged()) {
    return true;
  }
  IStyle style=content.getStyle();
  CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
  if (IStyle.ALWAYS_VALUE == pageBreak || IStyle.RIGHT_VALUE == pageBreak || IStyle.LEFT_VALUE == pageBreak || IStyle.SOFT_VALUE == pageBreak) {
    return true;
  }
  if (parent != null && parent instanceof HTMLListingBandLM) {
    HTMLListingBandLM bandLayout=(HTMLListingBandLM)parent;
    if (isVisible && bandLayout.needSoftPageBreak) {
      if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
        bandLayout.needSoftPageBreak=false;
        return true;
      }
    }
  }
  return false;
}",0.9595448798988622
68576,"private static List<String> getRowExpressions(ChartWithAxes cwa,IActionEvaluator iae,boolean needChangeValueExpr) throws ChartException {
  final List<String> alExpressions=new ArrayList<String>(4);
  final Axis axPrimaryBase=cwa.getPrimaryBaseAxes()[0];
  EList<SeriesDefinition> elSD=axPrimaryBase.getSeriesDefinitions();
  if (elSD.size() != 1) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle());
  }
  SeriesDefinition categorySD=elSD.get(0);
  final Query qBaseSeriesDefinition=categorySD.getQuery();
  String sExpression=qBaseSeriesDefinition.getDefinition();
  if (sExpression != null && sExpression.trim().length() > 0) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",sExpression,ULocale.getDefault()));
  }
  final Series seBase=categorySD.getDesignTimeSeries();
  EList<Query> elBaseSeries=seBase.getDataDefinition();
  if (elBaseSeries.size() != 1) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(elBaseSeries.size())},Messages.getResourceBundle());
  }
  final Query qBaseSeries=elBaseSeries.get(0);
  sExpression=qBaseSeries.getDefinition();
  if (sExpression != null && sExpression.trim().length() > 0) {
    alExpressions.add(sExpression);
    addSortExperssion(alExpressions,categorySD,sExpression);
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",Messages.getResourceBundle());
  }
  Query qOrthogonalSeriesDefinition, qOrthogonalSeries;
  Series seOrthogonal;
  EList<Query> elOrthogonalSeries;
  final Axis[] axaOrthogonal=cwa.getOrthogonalAxes(axPrimaryBase,true);
  int iCount=0;
  boolean bAnyQueries;
  for (int j=0; j < axaOrthogonal.length; j++) {
    elSD=axaOrthogonal[j].getSeriesDefinitions();
    for (int k=0; k < elSD.size(); k++) {
      SeriesDefinition sd=elSD.get(k);
      qOrthogonalSeriesDefinition=sd.getQuery();
      if (qOrthogonalSeriesDefinition == null) {
        continue;
      }
      sExpression=qOrthogonalSeriesDefinition.getDefinition();
      if (sExpression != null && sExpression.trim().length() > 0) {
        if (alExpressions.contains(sExpression)) {
          int iRemovalIndex=alExpressions.indexOf(sExpression);
          if (iRemovalIndex > iCount) {
            alExpressions.remove(iRemovalIndex);
            alExpressions.add(iCount++,sExpression);
          }
 else {
          }
        }
 else {
          alExpressions.add(iCount++,sExpression);
          addSortExperssion(alExpressions,sd,sExpression);
        }
      }
      seOrthogonal=sd.getDesignTimeSeries();
      elOrthogonalSeries=seOrthogonal.getDataDefinition();
      if (elOrthogonalSeries.isEmpty()) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(iCount),seOrthogonal},Messages.getResourceBundle());
      }
      bAnyQueries=false;
      for (int i=0; i < elOrthogonalSeries.size(); i++) {
        qOrthogonalSeries=elOrthogonalSeries.get(i);
        if (qOrthogonalSeries == null) {
          continue;
        }
        sExpression=qOrthogonalSeries.getDefinition();
        if (sExpression != null && sExpression.trim().length() > 0) {
          if (needChangeValueExpr) {
            sExpression=ChartUtil.createValueSeriesRowFullExpression(qOrthogonalSeries,sd,categorySD);
          }
          bAnyQueries=true;
          if (!alExpressions.contains(sExpression)) {
            alExpressions.add(sExpression);
          }
        }
      }
      if (!bAnyQueries) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(iCount),seOrthogonal},Messages.getResourceBundle());
      }
      String[] triggerExprs=DataProcessor.getSeriesTriggerExpressions(seOrthogonal,iae,categorySD,sd);
      if (triggerExprs != null) {
        for (int t=0; t < triggerExprs.length; t++) {
          String tgexp=triggerExprs[t];
          if (!alExpressions.contains(tgexp)) {
            alExpressions.add(tgexp);
          }
        }
      }
    }
  }
  return alExpressions;
}","private static List<String> getRowExpressions(ChartWithAxes cwa,IActionEvaluator iae,boolean needChangeValueExpr) throws ChartException {
  final List<String> alExpressions=new ArrayList<String>(4);
  final Axis axPrimaryBase=cwa.getPrimaryBaseAxes()[0];
  EList<SeriesDefinition> elSD=axPrimaryBase.getSeriesDefinitions();
  if (elSD.size() != 1) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle());
  }
  SeriesDefinition categorySD=elSD.get(0);
  final Query qBaseSeriesDefinition=categorySD.getQuery();
  String sExpression=qBaseSeriesDefinition.getDefinition();
  if (sExpression != null && sExpression.trim().length() > 0) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",sExpression,ULocale.getDefault()));
  }
  final Series seBase=categorySD.getDesignTimeSeries();
  EList<Query> elBaseSeries=seBase.getDataDefinition();
  if (elBaseSeries.size() != 1) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(elBaseSeries.size())},Messages.getResourceBundle());
  }
  final Query qBaseSeries=elBaseSeries.get(0);
  sExpression=qBaseSeries.getDefinition();
  if (sExpression != null && sExpression.trim().length() > 0) {
    alExpressions.add(sExpression);
    addSortExperssion(alExpressions,categorySD,sExpression);
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",Messages.getResourceBundle());
  }
  Query qOrthogonalSeriesDefinition, qOrthogonalSeries;
  Series seOrthogonal;
  EList<Query> elOrthogonalSeries;
  final Axis[] axaOrthogonal=cwa.getOrthogonalAxes(axPrimaryBase,true);
  int iCount=0;
  boolean bAnyQueries;
  for (int j=0; j < axaOrthogonal.length; j++) {
    elSD=axaOrthogonal[j].getSeriesDefinitions();
    for (int k=0; k < elSD.size(); k++) {
      SeriesDefinition sd=elSD.get(k);
      qOrthogonalSeriesDefinition=sd.getQuery();
      if (qOrthogonalSeriesDefinition == null) {
        continue;
      }
      sExpression=qOrthogonalSeriesDefinition.getDefinition();
      if (sExpression != null && sExpression.trim().length() > 0) {
        if (alExpressions.contains(sExpression)) {
          int iRemovalIndex=alExpressions.indexOf(sExpression);
          if (iRemovalIndex > iCount) {
            alExpressions.remove(iRemovalIndex);
            alExpressions.add(iCount++,sExpression);
          }
 else {
          }
        }
 else {
          alExpressions.add(iCount++,sExpression);
          addSortExperssion(alExpressions,sd,sExpression);
        }
      }
      seOrthogonal=sd.getDesignTimeSeries();
      elOrthogonalSeries=seOrthogonal.getDataDefinition();
      if (elOrthogonalSeries.isEmpty()) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(iCount),seOrthogonal},Messages.getResourceBundle());
      }
      bAnyQueries=false;
      for (int i=0; i < elOrthogonalSeries.size(); i++) {
        qOrthogonalSeries=elOrthogonalSeries.get(i);
        if (qOrthogonalSeries == null) {
          continue;
        }
        sExpression=qOrthogonalSeries.getDefinition();
        if (sExpression != null && sExpression.trim().length() > 0) {
          if (needChangeValueExpr) {
            sExpression=ChartUtil.createValueSeriesRowFullExpression(qOrthogonalSeries,sd,categorySD);
          }
          bAnyQueries=true;
          String fullAggExpr=ChartUtil.getFullAggregateExpression(sd,categorySD,qOrthogonalSeries);
          if (fullAggExpr != null) {
            continue;
          }
          if (!alExpressions.contains(sExpression)) {
            alExpressions.add(sExpression);
          }
        }
      }
      if (!bAnyQueries) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(iCount),seOrthogonal},Messages.getResourceBundle());
      }
      String[] triggerExprs=DataProcessor.getSeriesTriggerExpressions(seOrthogonal,iae,categorySD,sd);
      if (triggerExprs != null) {
        for (int t=0; t < triggerExprs.length; t++) {
          String tgexp=triggerExprs[t];
          if (!alExpressions.contains(tgexp)) {
            alExpressions.add(tgexp);
          }
        }
      }
    }
  }
  return alExpressions;
}",0.9800536568295812
68577,"/** 
 * Gets the binding name list in complex expression like data[""year""]+"" Q""+data[""quarter""]
 * @param indicator indicator like row or data
 * @param expr expression
 * @return binding name list or empty list
 */
@SuppressWarnings(""String_Node_Str"") protected static List<String> getBindingNameList(String indicator,String expr){
  List<String> names=new ArrayList<String>();
  try {
    List<IColumnBinding> bindings=ExpressionUtil.extractColumnExpressions(expr,indicator);
    for (    IColumnBinding binding : bindings) {
      names.add(binding.getResultSetColumnName());
    }
  }
 catch (  BirtException e) {
    logger.log(e);
  }
  return names;
}","/** 
 * Gets the binding name list in complex expression like data[""year""]+"" Q""+data[""quarter""]
 * @param indicator indicator like row or data
 * @param expr expression
 * @return binding name list or empty list
 */
protected static List<String> getBindingNameList(String indicator,String expr){
  List<String> names=new ArrayList<String>();
  fillBindingNameCollection(names,indicator,expr);
  return names;
}",0.6872659176029963
68578,"/** 
 * Checks if the expression references a data binding name
 * @param expr expression
 * @param hasOperation indicates if operation can be allowed in expression
 */
public static boolean isCubeBinding(String expr,boolean hasOperation){
  return isBinding(ExpressionUtil.DATA_INDICATOR,expr,hasOperation);
}","public boolean isCubeBinding(String expr,boolean hasOperation){
  decode(expr);
  return isCubeBinding(hasOperation);
}",0.4615384615384615
68579,"/** 
 * Return the binding name of row[""binding""]
 * @param expr expression
 * @param hasOperation indicates if operation can be allowed in expression
 */
public static String getRowBindingName(String expr,boolean hasOperation){
  return getBindingName(ExpressionUtil.ROW_INDICATOR,expr,hasOperation);
}","public String getRowBindingName(String expr,boolean hasOperation){
  decode(expr);
  return getRowBindingName(hasOperation);
}",0.4988344988344988
68580,"/** 
 * Checks if the expression references a row binding name
 * @param expr expression
 * @param hasOperation indicates if operation can be allowed in expression
 */
public static boolean isRowBinding(String expr,boolean hasOperation){
  return isBinding(ExpressionUtil.ROW_INDICATOR,expr,hasOperation);
}","public boolean isRowBinding(String expr,boolean hasOperation){
  decode(expr);
  return isRowBinding(hasOperation);
}",0.4622641509433962
68581,"/** 
 * Return the binding name of data[""binding""]
 * @param expr expression
 * @param hasOperation indicates if operation can be allowed in expression
 */
public static String getCubeBindingName(String expr,boolean hasOperation){
  return getBindingName(ExpressionUtil.DATA_INDICATOR,expr,hasOperation);
}","public String getCubeBindingName(String expr,boolean hasOperation){
  decode(expr);
  return getCubeBindingName(hasOperation);
}",0.4976958525345622
68582,"/** 
 * Gets the cube binding name list in complex expression like data[""year""]+"" Q""+data[""quarter""]
 * @param expr expression
 * @return binding name list or empty list
 */
public static List<String> getCubeBindingNameList(String expr){
  return getBindingNameList(ExpressionUtil.DATA_INDICATOR,expr);
}","public List<String> getCubeBindingNameList(String expr){
  decode(expr);
  return getCubeBindingNameList();
}",0.4309927360774818
68583,"/** 
 * Returns value of aggregate function parameters.
 * @param orthSD
 * @param baseSD
 * @param orthQuery
 * @since 2.5
 */
public static String[] getAggFunParameters(SeriesDefinition orthSD,SeriesDefinition baseSD,Query orthQuery){
  if (baseSD.getGrouping() != null && baseSD.getGrouping().isEnabled()) {
    SeriesGrouping grouping=orthSD.getGrouping();
    if (grouping != null && grouping.isEnabled()) {
      if (orthQuery != null && orthQuery.getGrouping() != null) {
        return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
      }
      return grouping.getAggregateParameters().toArray(new String[0]);
    }
    return baseSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
 else {
    if (orthQuery != null && orthQuery.getGrouping() != null && orthQuery.getGrouping().isEnabled()) {
      return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
    }
    return orthSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
}","/** 
 * Returns value of aggregate function parameters.
 * @param orthSD
 * @param baseSD
 * @param orthQuery
 * @since 2.5
 */
public static String[] getAggFunParameters(SeriesDefinition orthSD,SeriesDefinition baseSD,Query orthQuery){
  if (baseSD.getGrouping() != null && baseSD.getGrouping().isEnabled()) {
    SeriesGrouping grouping=orthSD.getGrouping();
    if (grouping != null && grouping.isEnabled()) {
      return grouping.getAggregateParameters().toArray(new String[0]);
    }
 else     if (orthQuery != null && orthQuery.getGrouping() != null) {
      return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
    }
    return baseSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
 else {
    if (orthQuery != null && orthQuery.getGrouping() != null && orthQuery.getGrouping().isEnabled()) {
      return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
    }
    return orthSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
}",0.8830409356725146
68584,"/** 
 * Returns row full expression of value series.
 * @param orthQuery
 * @param orthoSD
 * @param categorySD
 * @throws ChartException
 * @since 2.3
 */
public static String getValueSeriesRowFullExpression(Query orthQuery,SeriesDefinition orthoSD,SeriesDefinition categorySD) throws ChartException {
  String fullAggExpr=getFullAggregateExpression(orthoSD,categorySD,orthQuery);
  if (fullAggExpr == null) {
    return orthQuery.getDefinition();
  }
 else {
    return ExpressionUtil.createRowExpression(escapeSpecialCharacters((orthQuery.getDefinition() + ""String_Node_Str"" + fullAggExpr)));
  }
}","/** 
 * Returns row full expression of value series.
 * @param orthQuery
 * @param orthoSD
 * @param categorySD
 * @throws ChartException
 * @since 2.3
 */
public static String getValueSeriesRowFullExpression(Query orthQuery,SeriesDefinition orthoSD,SeriesDefinition categorySD) throws ChartException {
  String fullAggExpr=getFullAggregateExpression(orthoSD,categorySD,orthQuery);
  if (fullAggExpr == null) {
    return orthQuery.getDefinition();
  }
 else {
    ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
    exprCodec.decode(orthQuery.getDefinition());
    String expr=exprCodec.getExpression();
    return ExpressionUtil.createRowExpression(escapeSpecialCharacters((expr + ""String_Node_Str"" + fullAggExpr)));
  }
}",0.8495575221238938
68585,"/** 
 * Returns a binding name for a value series.
 * @param orthQuery
 * @param orthoSD
 * @param categorySD
 * @return binding name
 * @throws ChartException
 * @since 2.5.1
 */
public static String generateBindingNameOfValueSeries(Query orthQuery,SeriesDefinition orthoSD,SeriesDefinition categorySD) throws ChartException {
  String returnExpr=orthQuery.getDefinition();
  if (ChartExpressionUtil.isCubeBinding(returnExpr,true)) {
    if (ChartExpressionUtil.isCubeBinding(returnExpr,false)) {
      return ChartExpressionUtil.getCubeBindingName(returnExpr,false);
    }
    return escapeSpecialCharacters(returnExpr);
  }
  String fullAggExpr=getFullAggregateExpression(orthoSD,categorySD,orthQuery);
  if (fullAggExpr != null) {
    returnExpr+=""String_Node_Str"" + fullAggExpr;
  }
  return escapeSpecialCharacters(returnExpr);
}","/** 
 * Returns a binding name for a value series.
 * @param orthQuery
 * @param orthoSD
 * @param categorySD
 * @return binding name
 * @throws ChartException
 * @since 2.5.1
 */
public static String generateBindingNameOfValueSeries(Query orthQuery,SeriesDefinition orthoSD,SeriesDefinition categorySD) throws ChartException {
  ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
  String returnExpr=orthQuery.getDefinition();
  exprCodec.decode(returnExpr);
  returnExpr=exprCodec.getExpression();
  if (ChartExpressionUtil.isCubeBinding(returnExpr,true)) {
    if (ChartExpressionUtil.isCubeBinding(returnExpr,false)) {
      return ChartExpressionUtil.getCubeBindingName(returnExpr,false);
    }
    return escapeSpecialCharacters(returnExpr);
  }
  String fullAggExpr=getFullAggregateExpression(orthoSD,categorySD,orthQuery);
  if (fullAggExpr != null) {
    returnExpr+=""String_Node_Str"" + fullAggExpr;
  }
  return escapeSpecialCharacters(returnExpr);
}",0.8974218321448162
68586,"public void setExpression(String expr){
  codec.decode(expr);
  eHelper.setExpressionType(codec.getType());
  eHelper.setExpression(codec.getExpression());
  eb.refresh();
}","public void setExpression(String expr){
  if (expr != null && expr.length() > 0) {
    codec.decode(expr);
    eHelper.setExpression(codec.getExpression());
    eHelper.setExpressionType(codec.getType());
  }
 else {
    eHelper.setExpression(codec.getExpression());
  }
  eb.refresh();
}",0.6637744034707158
68587,"/** 
 * Update query by specified expression. <p> Under shared binding case, update grouping/aggregate attributes of chart model if the selected item is group/aggregate expression.
 */
public void updateQuery(String expression){
  if (getInputControl() instanceof CCombo) {
    Object checkResult=context.getDataServiceProvider().checkData(queryType,expression);
    if (checkResult != null && checkResult instanceof Boolean) {
      if (!((Boolean)checkResult).booleanValue()) {
        return;
      }
    }
  }
  if (!isTableSharedBinding()) {
    setQueryExpression(expression,false);
    return;
  }
  updateQueryForSharedBinding(expression);
  String regex=""String_Node_Str"";
  if (expression.matches(regex)) {
    DataDefinitionTextManager.getInstance().updateText(query);
    final Event e=new Event();
    e.data=BaseDataDefinitionComponent.this;
    e.widget=getInputControl();
    e.type=IChartDataSheet.EVENT_QUERY;
    e.detail=IChartDataSheet.DETAIL_UPDATE_COLOR;
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        context.getDataSheet().notifyListeners(e);
      }
    }
);
  }
 else {
    getInputControl().setBackground(null);
  }
}","/** 
 * Update query by specified expression. <p> Under shared binding case, update grouping/aggregate attributes of chart model if the selected item is group/aggregate expression.
 */
public void updateQuery(String expression){
  if (getInputControl() instanceof CCombo) {
    Object checkResult=context.getDataServiceProvider().checkData(queryType,expression);
    if (checkResult != null && checkResult instanceof Boolean) {
      if (!((Boolean)checkResult).booleanValue()) {
        return;
      }
    }
  }
  if (!isTableSharedBinding()) {
    setQueryExpression(expression,false);
    return;
  }
  updateQueryForSharedBinding(expression);
  String regex=""String_Node_Str"";
  if (expression.matches(regex)) {
    DataDefinitionTextManager.getInstance().updateText(query);
    final Event e=new Event();
    e.data=BaseDataDefinitionComponent.this;
    e.widget=getInputControl();
    e.type=IChartDataSheet.EVENT_QUERY;
    e.detail=IChartDataSheet.DETAIL_UPDATE_COLOR;
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        context.getDataSheet().notifyListeners(e);
      }
    }
);
  }
 else {
    DataDefinitionTextManager.getInstance().findText(query).setBackground(null);
  }
}",0.9750208159866778
68588,"private List<String> resolveClasspathEntries(IClasspathEntry[] classpathEntries,boolean needExported){
  ArrayList<String> newClassPath=new ArrayList<String>();
  IWorkspace space=ResourcesPlugin.getWorkspace();
  IWorkspaceRoot root=space.getRoot();
  for (int i=0; i < classpathEntries.length; i++) {
    IClasspathEntry curr=classpathEntries[i];
    if (!needExported && !curr.isExported()) {
      continue;
    }
    IPath path=curr.getPath();
    if (curr.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {
      path=JavaCore.getClasspathVariable(path.segment(0));
    }
 else {
      path=JavaCore.getResolvedClasspathEntry(curr).getPath();
    }
    if (curr.getEntryKind() == IClasspathEntry.CPE_PROJECT) {
      if (root.findMember(path) instanceof IProject) {
        List<String> strs=getProjectClasspath((IProject)root.findMember(path),false,false);
        for (int j=0; j < strs.size(); j++) {
          addToList(newClassPath,strs.get(j));
        }
      }
    }
 else     if (curr.getEntryKind() == IClasspathEntry.CPE_LIBRARY || curr.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {
      boolean inWorkSpace=true;
      if (space == null || space.getRoot() == null) {
        inWorkSpace=false;
      }
      if (root.findMember(path) == null) {
        inWorkSpace=false;
      }
      if (inWorkSpace) {
        String absPath=getFullPath(path,root.findMember(path).getProject());
        newClassPath.add(absPath);
      }
 else {
        newClassPath.add(curr.getPath().toFile().getAbsolutePath());
      }
    }
  }
  return newClassPath;
}","private List<String> resolveClasspathEntries(IClasspathEntry[] classpathEntries,boolean needExported,IJavaProject project){
  ArrayList<String> newClassPath=new ArrayList<String>();
  IWorkspace space=ResourcesPlugin.getWorkspace();
  IWorkspaceRoot root=space.getRoot();
  for (int i=0; i < classpathEntries.length; i++) {
    IClasspathEntry curr=classpathEntries[i];
    if (!needExported && !curr.isExported()) {
      continue;
    }
    IPath path=curr.getPath();
    if (curr.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {
      path=JavaCore.getClasspathVariable(path.segment(0));
    }
 else {
      path=JavaCore.getResolvedClasspathEntry(curr).getPath();
    }
    if (project != null && curr.getEntryKind() == IClasspathEntry.CPE_CONTAINER) {
      try {
        IClasspathContainer contianer=JavaCore.getClasspathContainer(path,project);
        if (contianer.getKind() == IClasspathContainer.K_APPLICATION) {
          IClasspathEntry[] entrys=contianer.getClasspathEntries();
          List<String> list=resolveClasspathEntries(entrys,needExported,project);
          for (int j=0; j < list.size(); j++) {
            addToList(newClassPath,list.get(j));
          }
        }
      }
 catch (      JavaModelException e) {
      }
      continue;
    }
    if (curr.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
      path=curr.getOutputLocation();
    }
    if (path == null) {
      continue;
    }
    if (curr.getEntryKind() == IClasspathEntry.CPE_PROJECT) {
      if (root.findMember(path) instanceof IProject) {
        List<String> strs=getProjectClasspath((IProject)root.findMember(path),false,false);
        for (int j=0; j < strs.size(); j++) {
          addToList(newClassPath,strs.get(j));
        }
      }
    }
 else     if (curr.getEntryKind() == IClasspathEntry.CPE_LIBRARY || curr.getEntryKind() == IClasspathEntry.CPE_VARIABLE || curr.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
      boolean inWorkSpace=true;
      if (space == null || space.getRoot() == null) {
        inWorkSpace=false;
      }
      if (root.findMember(path) == null) {
        inWorkSpace=false;
      }
      if (inWorkSpace) {
        String absPath=getFullPath(path,root.findMember(path).getProject());
        newClassPath.add(absPath);
      }
 else {
        newClassPath.add(curr.getPath().toFile().getAbsolutePath());
      }
    }
  }
  return newClassPath;
}",0.7925101214574899
68589,"private List<String> getProjectDependentClasspath(IProject project,boolean needExported){
  if (!hasJavaNature(project)) {
    return Collections.emptyList();
  }
  List<String> retValue=new ArrayList<String>();
  IJavaProject fCurrJProject=JavaCore.create(project);
  IClasspathEntry[] classpathEntries=null;
  boolean projectExists=(project.exists() && project.getFile(""String_Node_Str"").exists());
  if (projectExists) {
    if (classpathEntries == null) {
      classpathEntries=fCurrJProject.readRawClasspath();
    }
  }
  if (classpathEntries != null) {
    retValue=resolveClasspathEntries(classpathEntries,needExported);
  }
  return retValue;
}","private List<String> getProjectDependentClasspath(IProject project,boolean needExported){
  if (!hasJavaNature(project)) {
    return Collections.emptyList();
  }
  List<String> retValue=new ArrayList<String>();
  IJavaProject fCurrJProject=JavaCore.create(project);
  IClasspathEntry[] classpathEntries=null;
  boolean projectExists=(project.exists() && project.getFile(""String_Node_Str"").exists());
  if (projectExists) {
    if (classpathEntries == null) {
      classpathEntries=fCurrJProject.readRawClasspath();
    }
  }
  if (classpathEntries != null) {
    retValue=resolveClasspathEntries(classpathEntries,needExported,fCurrJProject);
  }
  return retValue;
}",0.989409984871407
68590,"public void run(){
  if (previewPainter != null) {
    Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
    if (cm instanceof ChartWithAxes) {
      ChartAdapter.beginIgnoreNotifications();
      checkDataTypeForChartWithAxes(cm);
      ChartAdapter.endIgnoreNotifications();
    }
 else {
      ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
    }
    previewPainter.renderModel(cm);
  }
}","public void run(){
  if (previewPainter != null) {
    Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
    if (cm instanceof ChartWithAxes) {
      ChartAdapter.beginIgnoreNotifications();
      checkDataTypeForChartWithAxes();
      ChartAdapter.endIgnoreNotifications();
    }
 else {
      ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
    }
    previewPainter.renderModel(cm);
  }
}",0.9977116704805492
68591,"public void doPreview(){
  LivePreviewTask lpt=new LivePreviewTask(Messages.getString(""String_Node_Str""),null);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewPainter != null) {
        setParameter(ChartLivePreviewThread.PARAM_CHART_MODEL,ChartUIUtil.prepareLivePreview(chartModel,getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator()));
      }
    }
  }
);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewCanvas != null && previewCanvas.getDisplay() != null && !previewCanvas.getDisplay().isDisposed()) {
        previewCanvas.getDisplay().syncExec(new Runnable(){
          public void run(){
            if (previewPainter != null) {
              Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
              if (cm instanceof ChartWithAxes) {
                ChartAdapter.beginIgnoreNotifications();
                checkDataTypeForChartWithAxes(cm);
                ChartAdapter.endIgnoreNotifications();
              }
 else {
                ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
              }
              previewPainter.renderModel(cm);
            }
          }
        }
);
      }
    }
  }
);
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).setParentShell(getPreviewCanvas().getShell());
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).add(lpt);
}","public void doPreview(){
  LivePreviewTask lpt=new LivePreviewTask(Messages.getString(""String_Node_Str""),null);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewPainter != null) {
        setParameter(ChartLivePreviewThread.PARAM_CHART_MODEL,ChartUIUtil.prepareLivePreview(chartModel,getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator()));
      }
    }
  }
);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewCanvas != null && previewCanvas.getDisplay() != null && !previewCanvas.getDisplay().isDisposed()) {
        previewCanvas.getDisplay().syncExec(new Runnable(){
          public void run(){
            if (previewPainter != null) {
              Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
              if (cm instanceof ChartWithAxes) {
                ChartAdapter.beginIgnoreNotifications();
                checkDataTypeForChartWithAxes();
                ChartAdapter.endIgnoreNotifications();
              }
 else {
                ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
              }
              previewPainter.renderModel(cm);
            }
          }
        }
);
      }
    }
  }
);
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).setParentShell(getPreviewCanvas().getShell());
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).add(lpt);
}",0.9993201903467028
68592,"private void checkDataTypeForChartWithAxes(Chart cm){
  List<SeriesDefinition> sdList=new ArrayList<SeriesDefinition>();
  sdList.addAll(ChartUIUtil.getBaseSeriesDefinitions(cm));
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=sdList.get(i);
    Series series=sd.getDesignTimeSeries();
    checkDataTypeForBaseSeries(ChartUIUtil.getDataQuery(sd,0),series);
  }
  sdList.clear();
  sdList.addAll(ChartUIUtil.getAllOrthogonalSeriesDefinitions(cm));
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=sdList.get(i);
    Series series=sd.getDesignTimeSeries();
    checkDataTypeForOrthoSeries(ChartUIUtil.getDataQuery(sd,0),series);
  }
}","private void checkDataTypeForChartWithAxes(){
  List<SeriesDefinition> sdList=new ArrayList<SeriesDefinition>();
  sdList.addAll(ChartUIUtil.getBaseSeriesDefinitions(getChartModel()));
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=sdList.get(i);
    Series series=sd.getDesignTimeSeries();
    checkDataTypeForBaseSeries(ChartUIUtil.getDataQuery(sd,0),series);
  }
  sdList.clear();
  sdList.addAll(ChartUIUtil.getAllOrthogonalSeriesDefinitions(getChartModel()));
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=sdList.get(i);
    Series series=sd.getDesignTimeSeries();
    checkDataTypeForOrthoSeries(ChartUIUtil.getDataQuery(sd,0),series);
  }
}",0.8020679468242246
68593,"/** 
 * If the BaseFont can NOT find the correct physical glyph, we need to simulate the proper style for the font. The ""simulate"" flag will be set if we need to simulate it.
 */
private boolean needSimulate(BaseFont font){
  if (fontStyle != Font.NORMAL) {
    String[][] familyNames=bf.getFamilyFontName();
    String[][] fullNames=bf.getFullFontName();
    String familyName=getEnglishName(familyNames);
    String fullName=getEnglishName(fullNames);
    return familyName.equals(fullName);
  }
  return false;
}","/** 
 * If the BaseFont can NOT find the correct physical glyph, we need to simulate the proper style for the font. The ""simulate"" flag will be set if we need to simulate it.
 */
private boolean needSimulate(BaseFont font){
  if (fontStyle != Font.NORMAL) {
    String[][] fullNames=bf.getFullFontName();
    String fullName=getEnglishName(fullNames);
    String lcf=fullName.toLowerCase();
    int fs=Font.NORMAL;
    if (lcf.indexOf(""String_Node_Str"") != -1) {
      fs|=Font.BOLD;
    }
    if (lcf.indexOf(""String_Node_Str"") != -1 || lcf.indexOf(""String_Node_Str"") != -1) {
      fs|=Font.ITALIC;
    }
    if ((fontStyle & Font.BOLDITALIC) == fs) {
      return false;
    }
 else {
      return true;
    }
  }
  return false;
}",0.4499599679743795
68594,"/** 
 * Creates iText BaseFont with the given font family name.
 * @param ffn the specified font family name.
 * @return the created BaseFont.
 */
public BaseFont createFont(String familyName,int fontStyle){
  String key=familyName + fontStyle;
synchronized (baseFonts) {
    BaseFont font=(BaseFont)baseFonts.get(key);
    if (font == null) {
      if (baseFonts.containsKey(key)) {
        return null;
      }
      try {
        String fontEncoding=(String)fontEncodings.get(familyName);
        if (fontEncoding == null) {
          fontEncoding=BaseFont.IDENTITY_H;
        }
        font=FontFactory.getFont(familyName,fontEncoding,BaseFont.EMBEDDED,14,fontStyle).getBaseFont();
        baseFonts.put(key,font);
      }
 catch (      Throwable de) {
        baseFonts.put(key,font);
        return null;
      }
    }
    return font;
  }
}","/** 
 * Creates iText BaseFont with the given font family name.
 * @param ffn the specified font family name.
 * @return the created BaseFont.
 */
public BaseFont createFont(String familyName,int fontStyle){
  String key=familyName + fontStyle;
  BaseFont bf=null;
synchronized (baseFonts) {
    if (baseFonts.containsKey(key)) {
      bf=(BaseFont)baseFonts.get(key);
    }
 else {
      try {
        String fontEncoding=(String)fontEncodings.get(familyName);
        if (fontEncoding == null) {
          fontEncoding=BaseFont.IDENTITY_H;
        }
        bf=FontFactory.getFont(familyName,fontEncoding,BaseFont.EMBEDDED,14,fontStyle).getBaseFont();
      }
 catch (      Throwable de) {
        logger.log(Level.WARNING,de.getMessage(),de);
      }
      baseFonts.put(key,bf);
    }
    if (bf == null && fontStyle != Font.NORMAL) {
      return createFont(familyName,Font.NORMAL);
    }
  }
  return bf;
}",0.7367822626492325
68595,"private Data createDateData(Object txt,StyleEntry entry,String timeFormat,String dlocale){
  ULocale dateLocale=getLocale(dlocale);
  timeFormat=ExcelUtil.parse(txt,timeFormat,dateLocale);
  timeFormat=DateTimeUtil.formatDateTime(timeFormat,dateLocale);
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,timeFormat);
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.DATE);
  return createData(txt,entry,SheetData.DATE);
}","private Data createDateData(Object txt,StyleEntry entry,String timeFormat,String dlocale){
  ULocale dateLocale=getLocale(dlocale);
  timeFormat=ExcelUtil.parse(txt,timeFormat,dateLocale);
  timeFormat=DateTimeUtil.formatDateTime(timeFormat,dateLocale);
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,timeFormat);
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.DATE);
  return createData(txt,entry);
}",0.9823321554770318
68596,"protected Data createEmptyData(StyleEntry style){
  return createData(EMPTY,style,Data.STRING);
}","protected Data createEmptyData(StyleEntry style){
  return createData(EMPTY,style);
}",0.934065934065934
68597,"public String getSupportedImageFormats(String emitterId){
  if (emitterId != null) {
    for (    EmitterInfo emitterInfo : emitterExtensions) {
      if (emitterId.equals(emitterInfo.getID())) {
        String supportedImageFormats=emitterInfo.getSupportedImageFormats();
        if (null != supportedImageFormats) {
          return supportedImageFormats;
        }
 else {
          return DEFAULT_SUPPORTED_IMAGE_FORMATS;
        }
      }
    }
  }
  return DEFAULT_SUPPORTED_IMAGE_FORMATS;
}","public String getSupportedImageFormats(String emitterId){
  if (emitterId != null) {
    EmitterInfo emitterInfo=(EmitterInfo)emitters.get(emitterId);
    if (emitterInfo != null) {
      String supportedImageFormats=emitterInfo.getSupportedImageFormats();
      if (null != supportedImageFormats) {
        return supportedImageFormats;
      }
    }
  }
  return DEFAULT_SUPPORTED_IMAGE_FORMATS;
}",0.3705357142857143
68598,"/** 
 * load report item emitters extension definitions
 */
protected void loadEmitterExtensionDefns(){
  IExtension[] exts=getExtensions(EXTENSION_POINT_EMITTERS);
  if (exts == null) {
    return;
  }
  for (int i=0; i < exts.length; i++) {
    String namespace=exts[i].getNamespace();
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String format=configs[j].getAttribute(""String_Node_Str"");
      String mimeType=configs[j].getAttribute(""String_Node_Str"");
      String id=configs[j].getAttribute(""String_Node_Str"");
      String pagination=configs[j].getAttribute(""String_Node_Str"");
      String supportedImageFormats=configs[j].getAttribute(""String_Node_Str"");
      if (pagination == null) {
        pagination=PAGE_BREAK_PAGINATION;
      }
      String icon=configs[j].getAttribute(""String_Node_Str"");
      Boolean outDisplayNone=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      String fileExtension=configs[j].getAttribute(""String_Node_Str"");
      Boolean isHidden=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      boolean needOutputResultSet=Boolean.valueOf(configs[j].getAttribute(""String_Node_Str""));
      EmitterInfo emitterInfo=new EmitterInfo(format,id,pagination,mimeType,icon,namespace,fileExtension,outDisplayNone,isHidden,supportedImageFormats,needOutputResultSet,configs[j]);
      emitterExtensions.add(emitterInfo);
      assert(format != null);
      formats.put(format,emitterInfo);
      emitters.put(id,emitterInfo);
      logger.log(Level.FINE,""String_Node_Str"",new String[]{format,id});
    }
  }
}","/** 
 * load report item emitters extension definitions
 */
protected void loadEmitterExtensionDefns(){
  IExtension[] exts=getExtensions(EXTENSION_POINT_EMITTERS);
  if (exts == null) {
    return;
  }
  for (int i=0; i < exts.length; i++) {
    String namespace=exts[i].getNamespace();
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String id=configs[j].getAttribute(""String_Node_Str"");
      String overridePriority=configs[j].getAttribute(""String_Node_Str"");
      int priority=0;
      if (null != overridePriority) {
        priority=new Integer(overridePriority).intValue();
      }
      EmitterInfo info=(EmitterInfo)emitters.get(id);
      if (info != null) {
        if (info.getOverridePriority() >= priority) {
          continue;
        }
 else {
          emitterExtensions.remove(info);
        }
      }
      String format=configs[j].getAttribute(""String_Node_Str"");
      String mimeType=configs[j].getAttribute(""String_Node_Str"");
      String pagination=configs[j].getAttribute(""String_Node_Str"");
      String supportedImageFormats=configs[j].getAttribute(""String_Node_Str"");
      if (pagination == null) {
        pagination=PAGE_BREAK_PAGINATION;
      }
      String icon=configs[j].getAttribute(""String_Node_Str"");
      Boolean outDisplayNone=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      String fileExtension=configs[j].getAttribute(""String_Node_Str"");
      Boolean isHidden=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      boolean needOutputResultSet=Boolean.valueOf(configs[j].getAttribute(""String_Node_Str""));
      EmitterInfo emitterInfo=new EmitterInfo(format,id,pagination,mimeType,icon,namespace,fileExtension,outDisplayNone,isHidden,supportedImageFormats,needOutputResultSet,configs[j]);
      emitterInfo.setOverridePriority(priority);
      emitterExtensions.add(emitterInfo);
      assert(format != null);
      formats.put(format,emitterInfo);
      emitters.put(id,emitterInfo);
      logger.log(Level.FINE,""String_Node_Str"",new String[]{format,id});
    }
  }
}",0.8595835557928457
68599,"public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataCube(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(ChartUIUtil.getText(cmbDataItems))) {
return;
}
getDataServiceProvider().setDataSet(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
switchDataSet(ChartUIUtil.getText(cmbDataItems));
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (ChartUIUtil.getText(cmbDataItems).equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(ChartUIUtil.getText(cmbDataItems));
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=ChartUIUtil.getText(cmbDataItems);
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
String[] datasets=getDataServiceProvider().getAllDataSets();
currentData=datasets[datasets.length - 1];
getDataServiceProvider().setDataSet(currentData);
ChartUIUtil.setText(cmbDataItems,currentData);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
String[] datacubes=getDataServiceProvider().getAllDataCubes();
currentData=datacubes[datacubes.length - 1];
getDataServiceProvider().setDataCube(currentData);
ChartUIUtil.setText(cmbDataItems,currentData);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
if (event.widget == btnInherit || event.widget == cmbDataItems) {
List<SeriesDefinition> sds=ChartUIUtil.getBaseSeriesDefinitions(getChartModel());
if (sds != null && sds.size() > 0) {
SeriesDefinition base=sds.get(0);
if (selectDataTypes.get(cmbDataItems.getSelectionIndex()).intValue() == SELECT_DATA_SET && !ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() == null) {
base.setGrouping(SeriesGroupingImpl.create());
}
base.getGrouping().setEnabled(true);
}
 else if (ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() != null) {
base.getGrouping().setEnabled(false);
}
}
}
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataCube(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(ChartUIUtil.getText(cmbDataItems))) {
return;
}
getDataServiceProvider().setDataSet(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
switchDataSet(ChartUIUtil.getText(cmbDataItems));
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (ChartUIUtil.getText(cmbDataItems).equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(ChartUIUtil.getText(cmbDataItems));
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=ChartUIUtil.getText(cmbDataItems);
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
String[] datasets=getDataServiceProvider().getAllDataSets();
currentData=datasets[datasets.length - 1];
getDataServiceProvider().setDataSet(currentData);
cmbDataItems.setText(currentData);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
int count=getDataServiceProvider().getAllDataCubes().length;
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
String[] datacubes=getDataServiceProvider().getAllDataCubes();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (datacubes.length == count) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
currentData=datacubes[datacubes.length - 1];
getDataServiceProvider().setDataCube(currentData);
cmbDataItems.setText(currentData);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
if (event.widget == btnInherit || event.widget == cmbDataItems) {
List<SeriesDefinition> sds=ChartUIUtil.getBaseSeriesDefinitions(getChartModel());
if (sds != null && sds.size() > 0) {
SeriesDefinition base=sds.get(0);
if (selectDataTypes.get(cmbDataItems.getSelectionIndex()).intValue() == SELECT_DATA_SET && !ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() == null) {
base.setGrouping(SeriesGroupingImpl.create());
}
base.getGrouping().setEnabled(true);
}
 else if (ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() != null) {
base.getGrouping().setEnabled(false);
}
}
}
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}",0.9589861164182908
68600,"int invokeNewDataSet(){
  DataService.getInstance().createDataSet();
  return Window.OK;
}","int invokeNewDataSet(){
  int count=getDataServiceProvider().getAllDataSets().length;
  DataService.getInstance().createDataSet();
  if (getDataServiceProvider().getAllDataSets().length == count) {
    return Window.CANCEL;
  }
 else {
    return Window.OK;
  }
}",0.509915014164306
68601,"public Object evaluate(IBaseExpression expr){
  return null;
}","public Object evaluate(String language,String expr) throws BirtException {
  return null;
}",0.6797385620915033
68602,"public String getDisplayExpression(){
  if (cmbDefinition != null && isTableSharedBinding()) {
    return getDisplayExpressionForSharedBinding(cmbDefinition,query.getDefinition());
  }
 else {
    return btnBuilder.getExpressionString();
  }
}","public String getDisplayExpression(){
  if (cmbDefinition != null && isTableSharedBinding()) {
    return getDisplayExpressionForSharedBinding(cmbDefinition,query.getDefinition());
  }
 else {
    String expr=query.getDefinition();
    return (expr == null) ? ""String_Node_Str"" : expr;
  }
}",0.7865168539325843
68603,"public static void showException(String key,String errorMessage){
  if (errorMessage != null) {
    try {
      WizardBase.showException(errorMessage);
    }
 catch (    Exception e) {
    }
    errors.put(key,errorMessage);
  }
}","public static void showException(String key,final String errorMessage){
  if (errorMessage != null) {
    try {
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          WizardBase.showException(errorMessage);
        }
      }
);
    }
 catch (    Exception e) {
    }
    errors.put(key,errorMessage);
  }
}",0.8070175438596491
68604,"public static void removeException(String key){
  boolean removed=false;
  String error=errors.get(key);
  if (error != null && error.equals(WizardBase.getErrors())) {
    try {
      WizardBase.removeException();
    }
 catch (    Exception e) {
    }
    removed=true;
  }
  errors.remove(key);
  if ((removed || WizardBase.getErrors() == null) && errors.size() > 0) {
    String es=errors.values().toArray(new String[errors.size()])[0];
    WizardBase.showException(es);
  }
}","public static void removeException(String key){
  boolean removed=false;
  String error=errors.get(key);
  if (error != null && error.equals(WizardBase.getErrors())) {
    try {
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          WizardBase.removeException();
        }
      }
);
    }
 catch (    Exception e) {
    }
    removed=true;
  }
  errors.remove(key);
  if ((removed || WizardBase.getErrors() == null) && errors.size() > 0) {
    final String es=errors.values().toArray(new String[errors.size()])[0];
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        WizardBase.showException(es);
      }
    }
);
  }
}",0.8178694158075601
68605,"/** 
 * Remove all the exceptions which the keys contain the argument.
 * @param subKey
 */
public static void removeAllExceptions(String subKey){
  boolean removed=false;
  Iterator<String> iter=errors.keySet().iterator();
  List<String> needToRemove=new ArrayList<String>(2);
  while (iter.hasNext()) {
    String key=iter.next();
    if (key.indexOf(subKey) > -1) {
      needToRemove.add(key);
    }
  }
  for (  String s : needToRemove) {
    String e=errors.get(s);
    if (e != null && e.equals(WizardBase.getErrors())) {
      WizardBase.removeException();
      removed=true;
    }
    errors.remove(s);
  }
  if ((removed || WizardBase.getErrors() == null) && errors.size() > 0) {
    String es=errors.values().toArray(new String[errors.size()])[0];
    WizardBase.showException(es);
  }
}","/** 
 * Remove all the exceptions which the keys contain the argument.
 * @param subKey
 */
public static void removeAllExceptions(String subKey){
  boolean removed=false;
  Iterator<String> iter=errors.keySet().iterator();
  List<String> needToRemove=new ArrayList<String>(2);
  while (iter.hasNext()) {
    String key=iter.next();
    if (key.indexOf(subKey) > -1) {
      needToRemove.add(key);
    }
  }
  for (  String s : needToRemove) {
    String e=errors.get(s);
    if (e != null && e.equals(WizardBase.getErrors())) {
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          WizardBase.removeException();
        }
      }
);
      removed=true;
    }
    errors.remove(s);
  }
  if ((removed || WizardBase.getErrors() == null) && errors.size() > 0) {
    final String es=errors.values().toArray(new String[errors.size()])[0];
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        WizardBase.showException(es);
      }
    }
);
  }
}",0.8592017738359202
68606,"public ImageData(IImageContent image,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer){
  super();
  this.styleId=styleId;
  this.dataType=datatype;
  height=ExcelUtil.convertImageSize(image.getHeight(),(int)(imageInfo.getHeight() * ExcelUtil.PX_PT));
  int imageWidth=(int)ExcelUtil.convertImageSize(image.getWidth(),(int)(imageInfo.getWidth() * ExcelUtil.PX_PT));
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}","public ImageData(IImageContent image,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),(int)(imageInfo.getHeight() * ExcelUtil.PX_PT)) / 1000;
  int imageWidth=(int)ExcelUtil.convertDimensionType(image.getWidth(),(int)(imageInfo.getWidth() * ExcelUtil.PX_PT));
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}",0.9224489795918368
68607,"private int getLetterNumber(ContainerArea area){
  int count=0;
  Iterator iter=area.getChildren();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    if (child instanceof TextArea) {
      String text=((TextArea)child).getText();
      count=(text.length() > 1 ? (text.length() - 1) : 0) - 1;
    }
 else     if (child instanceof ContainerArea) {
      count+=getLetterNumber((ContainerArea)child);
    }
  }
  return count;
}","private int getLetterNumber(ContainerArea area){
  int count=0;
  Iterator iter=area.getChildren();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    if (child instanceof TextArea) {
      String text=((TextArea)child).getText();
      count=text.length();
    }
 else     if (child instanceof ContainerArea) {
      count+=getLetterNumber((ContainerArea)child);
    }
  }
  return count;
}",0.958997722095672
68608,"protected void justify(){
  int spacing=width - currentIP;
  int whiteSpaceNumber=getWhiteSpaceNumber(this);
  if (whiteSpaceNumber > 0) {
    int wordSpacing=spacing / whiteSpaceNumber;
    adjustWordSpacing(wordSpacing,this);
  }
 else {
    int letterNumber=getLetterNumber(this);
    if (letterNumber > 0) {
      int letterSpacing=spacing / letterNumber;
      adjustLetterSpacing(letterSpacing,this);
    }
  }
}","protected void justify(){
  int spacing=width - currentIP;
  int whiteSpaceNumber=getWhiteSpaceNumber(this);
  if (whiteSpaceNumber > 0) {
    int wordSpacing=spacing / whiteSpaceNumber;
    adjustWordSpacing(wordSpacing,this);
  }
 else {
    int letterNumber=getLetterNumber(this);
    if (letterNumber > 0) {
      int letterSpacing=spacing / (letterNumber - 1);
      adjustLetterSpacing(letterSpacing,this);
    }
  }
}",0.9643705463182898
68609,"private int adjustLetterSpacing(int letterSpacing,ContainerArea area){
  Iterator iter=area.getChildren();
  int delta=0;
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    if (child instanceof TextArea) {
      TextArea textArea=(TextArea)child;
      String text=textArea.getText();
      int letterNumber=(text.length() > 1 ? (text.length() - 1) : 0);
      TextStyle style=textArea.getStyle();
      int original=style.getLetterSpacing();
      style.setLetterSpacing(original + letterSpacing);
      int spacing=letterSpacing * letterNumber;
      child.setWidth(child.getWidth() + spacing);
      child.setPosition(child.getX() + delta,child.getY());
      delta+=spacing;
    }
 else     if (child instanceof ContainerArea) {
      child.setPosition(child.getX() + delta,child.getY());
      int spacing=adjustLetterSpacing(letterSpacing,(ContainerArea)child);
      child.setWidth(child.getWidth() + spacing);
      delta+=spacing;
    }
 else {
      child.setPosition(child.getX() + delta,child.getY());
    }
  }
  return delta;
}","private int adjustLetterSpacing(int letterSpacing,ContainerArea area){
  Iterator iter=area.getChildren();
  int delta=0;
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    if (child instanceof TextArea) {
      TextArea textArea=(TextArea)child;
      String text=textArea.getText();
      int letterSpacingNumber=(text.length() > 1 ? (text.length() - 1) : 0);
      TextStyle style=new TextStyle(textArea.getStyle());
      int original=style.getLetterSpacing();
      style.setLetterSpacing(original + letterSpacing);
      textArea.setStyle(style);
      int spacing=letterSpacing * letterSpacingNumber;
      child.setWidth(child.getWidth() + spacing);
      child.setPosition(child.getX() + delta,child.getY());
      delta+=spacing;
    }
 else     if (child instanceof ContainerArea) {
      child.setPosition(child.getX() + delta,child.getY());
      int spacing=adjustLetterSpacing(letterSpacing,(ContainerArea)child);
      child.setWidth(child.getWidth() + spacing);
      delta+=spacing;
    }
 else {
      child.setPosition(child.getX() + delta,child.getY());
    }
  }
  return delta;
}",0.9623241034952338
68610,"/** 
 * @param value
 * @param parent with of parent, the unit is 1/1000 point.
 * @return
 */
public static int convertDimensionType(DimensionType value,int parent){
  if (value == null) {
    return parent * 1000;
  }
  if (DimensionType.UNITS_PERCENTAGE.equals(value.getUnits())) {
    return (int)(value.getMeasure() / 100 * parent);
  }
  if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * PX_PT * 1000);
  }
  if (DimensionType.UNITS_EM.equalsIgnoreCase(value.getUnits()) || DimensionType.UNITS_EX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * 12 * 1000);
  }
 else {
    return (int)(value.convertTo(DimensionType.UNITS_PT) * 1000);
  }
}","/** 
 * @param value
 * @param parent with of parent, the unit is 1/1000 point.
 * @return
 */
public static int convertDimensionType(DimensionType value,float parent){
  if (value == null) {
    return (int)(parent * 1000);
  }
  if (DimensionType.UNITS_PERCENTAGE.equals(value.getUnits())) {
    return (int)(value.getMeasure() / 100 * parent);
  }
  if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * PX_PT * 1000);
  }
  if (DimensionType.UNITS_EM.equalsIgnoreCase(value.getUnits()) || DimensionType.UNITS_EX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * 12 * 1000);
  }
 else {
    return (int)(value.convertTo(DimensionType.UNITS_PT) * 1000);
  }
}",0.9911141490088858
68611,"public ImageData(IImageContent image,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),(int)(imageInfo.getHeight() * ExcelUtil.PX_PT)) / 1000;
  int imageWidth=(int)ExcelUtil.convertDimensionType(image.getWidth(),(int)(imageInfo.getWidth() * ExcelUtil.PX_PT));
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}","public ImageData(IImageContent image,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),imageInfo.getHeight() * ExcelUtil.PX_PT) / 1000;
  int imageWidth=(int)ExcelUtil.convertDimensionType(image.getWidth(),imageInfo.getWidth() * ExcelUtil.PX_PT);
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}",0.9885807504078304
68612,"OdaDataSetRuntime(IOdaDataSetDesign dataSet,IQueryExecutor executor,DataEngineSession session){
  super(dataSet,executor,session);
  Object[] params={dataSet,executor};
  logger.entering(OdaDataSetRuntime.class.getName(),""String_Node_Str"",params);
  queryText=dataSet.getQueryText();
  publicProperties=new HashMap();
  publicProperties.putAll(dataSet.getPublicProperties());
  logger.exiting(OdaDataSetRuntime.class.getName(),""String_Node_Str"");
  logger.log(Level.FINER,""String_Node_Str"");
}","OdaDataSetRuntime(IOdaDataSetDesign dataSet,IQueryExecutor executor,DataEngineSession session){
  super(dataSet,executor,session);
  Object[] params={dataSet,executor};
  logger.entering(OdaDataSetRuntime.class.getName(),""String_Node_Str"",params);
  queryText=dataSet.getQueryText();
  publicProperties=new HashMap();
  publicProperties.putAll(dataSet.getPublicProperties());
  ResultExtensionExplorer extensionExplorer=ResultExtensionExplorer.getInstance();
  ExtensionContributor[] contributors=null;
  try {
    OdaDataSourceRuntime dataSourceRuntime=(OdaDataSourceRuntime)((DataEngineImpl)session.getEngine()).getDataSourceRuntime(dataSet.getDataSourceName());
    contributors=extensionExplorer.getContributorsOfDataSet(dataSourceRuntime.getExtensionID(),dataSet.getExtensionID());
  }
 catch (  IllegalArgumentException e) {
  }
catch (  OdaException e) {
  }
  ExtensionContributor contributor=null;
  if (contributors != null && contributors.length > 0) {
    contributor=contributors[0];
    validationContext=new ValidationContext(contributor);
  }
  logger.exiting(OdaDataSetRuntime.class.getName(),""String_Node_Str"");
  logger.log(Level.FINER,""String_Node_Str"");
}",0.5907729179149191
68613,"public static QuerySpecification optimizeExecution(String dataSourceId,IOdaDataSetDesign dataSetDesign,IQueryDefinition query,DataEngineSession session,Map appContext,IQueryContextVisitor contextVisitor){
  return null;
}","public static QuerySpecification optimizeExecution(String dataSourceId,ValidationContext validationContext,IOdaDataSetDesign dataSetDesign,IQueryDefinition query,DataEngineSession session,Map appContext,IQueryContextVisitor contextVisitor){
  return null;
}",0.9246861924686192
68614,"PreparedIncreCacheDSQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn,IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  super(dataEngine,queryDefn,dataSetDesign,appContext,null,null);
}","PreparedIncreCacheDSQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn,IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  super(dataEngine,queryDefn,dataSetDesign,appContext,null);
}",0.988399071925754
68615,"/** 
 * @param driverName
 * @param driverProps
 * @return
 * @throws DataException
 */
private IDataSource getDataSource(String driverName,Map driverProps) throws DataException {
  PreparedOdaDSQuery self=PreparedOdaDSQuery.this;
  Collection paramHints=null;
  return DataSourceFactory.getFactory().getDataSource(driverName,driverProps,self.dataEngine.getSession());
}","/** 
 * @param driverName
 * @param driverProps
 * @return
 * @throws DataException
 */
private IDataSource getDataSource(String driverName,Map driverProps) throws DataException {
  PreparedOdaDSQuery self=PreparedOdaDSQuery.this;
  return DataSourceFactory.getFactory().getDataSource(driverName,driverProps,self.dataEngine.getSession());
}",0.9577464788732394
68616,"/** 
 * @param dataEngine
 * @param queryDefn
 * @param dataSetDesign
 * @throws DataException
 */
PreparedOdaDSQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn,IBaseDataSetDesign dataSetDesign,Map appContext,QuerySpecification querySpec,IQueryContextVisitor visitor) throws DataException {
  super(dataEngine,queryDefn,dataSetDesign,appContext != null ? appContext : new HashMap(),visitor);
  Object[] params={dataEngine,queryDefn,dataSetDesign,appContext};
  this.querySpec=querySpec;
  logger.exiting(PreparedOdaDSQuery.class.getName(),""String_Node_Str"");
}","/** 
 * @param dataEngine
 * @param queryDefn
 * @param dataSetDesign
 * @throws DataException
 */
PreparedOdaDSQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn,IBaseDataSetDesign dataSetDesign,Map appContext,IQueryContextVisitor visitor) throws DataException {
  super(dataEngine,queryDefn,dataSetDesign,appContext != null ? appContext : new HashMap(),visitor);
  Object[] params={dataEngine,queryDefn,dataSetDesign,appContext};
  logger.exiting(PreparedOdaDSQuery.class.getName(),""String_Node_Str"");
}",0.9473684210526316
68617,"/** 
 * Build size style string say, ""width: 10.0mm;"". The min-height should be implemented by sepcial way.
 * @param content The <code>StringBuffer</code> to which the result is output.
 * @param name The property name
 * @param value The values of the property
 */
public void buildSize(StringBuffer content,String name,DimensionType value){
  if (value != null) {
    if (HTMLTags.ATTR_MIN_HEIGHT.equals(name)) {
      if (fixedReport) {
        content.append(""String_Node_Str"");
        content.append(value.toString());
        content.append(';');
      }
 else {
        content.append(""String_Node_Str"");
        content.append(value.toString());
        content.append(""String_Node_Str"");
        content.append(value.toString());
        content.append(';');
      }
    }
 else     if (HTMLTags.ATTR_MIN_WIDTH.equals(name)) {
      if (fixedReport) {
        content.append(""String_Node_Str"");
        content.append(value.toString());
        content.append(';');
      }
 else {
        content.append(""String_Node_Str"");
        content.append(value.toString());
        content.append(""String_Node_Str"");
        content.append(value.toString());
        content.append(';');
      }
    }
 else {
      content.append(' ');
      content.append(name);
      content.append(""String_Node_Str"");
      content.append(value.toString());
      content.append(';');
    }
  }
}","/** 
 * Build size style string say, ""width: 10.0mm;"". The min-height should be implemented by sepcial way.
 * @param content The <code>StringBuffer</code> to which the result is output.
 * @param name The property name
 * @param value The values of the property
 */
public void buildSize(StringBuffer content,String name,DimensionType value){
  if (value != null) {
    String size=formatSize(value);
    if (HTMLTags.ATTR_MIN_HEIGHT.equals(name)) {
      if (fixedReport) {
        content.append(""String_Node_Str"");
        content.append(size);
        content.append(';');
      }
 else {
        content.append(""String_Node_Str"");
        content.append(size);
        content.append(""String_Node_Str"");
        content.append(size);
        content.append(';');
      }
    }
 else     if (HTMLTags.ATTR_MIN_WIDTH.equals(name)) {
      if (fixedReport) {
        content.append(""String_Node_Str"");
        content.append(size);
        content.append(';');
      }
 else {
        content.append(""String_Node_Str"");
        content.append(size);
        content.append(""String_Node_Str"");
        content.append(size);
        content.append(';');
      }
    }
 else {
      content.append(' ');
      content.append(name);
      content.append(""String_Node_Str"");
      content.append(size);
      content.append(';');
    }
  }
}",0.9358269160249358
68618,"private float getContentHeight(IContent content){
  return content.getHeight() == null ? 0 : ExcelUtil.convertDimensionType(content.getHeight(),0) / 1000;
}","private float getContentHeight(IContent content){
  return ExcelUtil.convertDimensionType(content.getHeight(),0) / 1000;
}",0.8776978417266187
68619,"public void endRow(IRowContent row){
  DimensionType height=row.getHeight();
  float rowHeight=height != null ? ExcelUtil.convertDimensionType(height,0) / 1000 : 0;
  engine.endRow(rowHeight);
}","public void endRow(IRowContent row){
  DimensionType height=row.getHeight();
  float rowHeight=ExcelUtil.convertDimensionType(height,0) / 1000;
  engine.endRow(rowHeight);
}",0.9427792915531336
68620,"/** 
 * @param value
 * @param parent with of parent, the unit is 1/1000 point.
 * @return
 */
public static int convertDimensionType(DimensionType value,int parent){
  if (DimensionType.UNITS_PERCENTAGE.equals(value.getUnits())) {
    return (int)(value.getMeasure() / 100 * parent);
  }
  if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * PX_PT * 1000);
  }
  if (DimensionType.UNITS_EM.equalsIgnoreCase(value.getUnits()) || DimensionType.UNITS_EX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * 12 * 1000);
  }
 else {
    return (int)(value.convertTo(DimensionType.UNITS_PT) * 1000);
  }
}","/** 
 * @param value
 * @param parent with of parent, the unit is 1/1000 point.
 * @return
 */
public static int convertDimensionType(DimensionType value,int parent){
  if (value == null) {
    return parent * 1000;
  }
  if (DimensionType.UNITS_PERCENTAGE.equals(value.getUnits())) {
    return (int)(value.getMeasure() / 100 * parent);
  }
  if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * PX_PT * 1000);
  }
  if (DimensionType.UNITS_EM.equalsIgnoreCase(value.getUnits()) || DimensionType.UNITS_EX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * 12 * 1000);
  }
 else {
    return (int)(value.convertTo(DimensionType.UNITS_PT) * 1000);
  }
}",0.9621698786581012
68621,"public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  Bounds boDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    if (laDataPoint.isVisible()) {
      pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
      loDataPoint=goFactory.createLocation(0,0);
      loDataPoint3d=goFactory.createLocation3D(0,0,0);
      boDataPoint=goFactory.createBounds(0,0,0,0);
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=ChartUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart)));
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=Math.floor(srh.getLocationOnOrthogonal(new Double(dStart)));
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
          dStart=Methods.asDouble(srh.getOrthogonalScale().getMinimum()).doubleValue();
          dEnd=dValue;
          try {
            double dMargin=srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart));
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(new Double(dStart)) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          continue;
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth <= 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart)));
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=Math.floor(srh.getLocationOnOrthogonal(new Double(dStart)));
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
          dStart=Methods.asDouble(srh.getOrthogonalScale().getMinimum()).doubleValue();
          dEnd=dValue;
          try {
            double dMargin=srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart));
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(new Double(dStart));
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (dBaseLocation < plotBaseLocation) {
            continue;
          }
          dY=plotBaseLocation;
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            continue;
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (dHeight != 0) {
      if (bRendering3D) {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs));
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          int zorder_hint=0;
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
            zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,zorder_hint);
        }
 else {
          int zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,zorder_hint);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    if (laDataPoint.isVisible() && dHeight != 0 && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}","public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  Bounds boDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    if (laDataPoint.isVisible()) {
      pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
      loDataPoint=goFactory.createLocation(0,0);
      loDataPoint3d=goFactory.createLocation3D(0,0,0);
      boDataPoint=goFactory.createBounds(0,0,0,0);
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=ChartUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart)));
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=Math.floor(srh.getLocationOnOrthogonal(new Double(dStart)));
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
          dStart=Methods.asDouble(srh.getOrthogonalScale().getMinimum()).doubleValue();
          dEnd=dValue;
          try {
            double dMargin=srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart));
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(new Double(dStart)) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth <= 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=Math.floor(srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart)));
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=Math.floor(srh.getLocationOnOrthogonal(new Double(dStart)));
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
          dStart=Methods.asDouble(srh.getOrthogonalScale().getMinimum()).doubleValue();
          dEnd=dValue;
          try {
            double dMargin=srh.getLocationOnOrthogonal(new Double(dEnd)) - srh.getLocationOnOrthogonal(new Double(dStart));
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(new Double(dStart));
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs));
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          int zorder_hint=0;
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
            zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,zorder_hint);
        }
 else {
          int zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,zorder_hint);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside) && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}",0.9929963606955116
68622,"@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  JavaUtilLoggerImpl.setStateDir(getStateLocation().toOSString());
  initChartComputation(this);
  initImageWriterFactory(this);
  initChartModelHelper(this);
  initChartScriptMenuHelper(this);
}","@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  JavaUtilLoggerImpl.setStateDir(getStateLocation().toOSString());
}",0.7184035476718403
68623,"public void start(BundleContext context) throws Exception {
  super.start(context);
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  initChartComputation(this);
  initImageWriterFactory(this);
  initChartModelHelper(this);
  initChartScriptMenuHelper(this);
}",0.5723905723905723
68624,"/** 
 * @deprecated backward for 2.1.0 document. This method can only insert a fragment of given offset as a child of current fragment.
 */
public void insertFragment(Object offset){
  this.segment.insertEdge(offset,true);
  this.segment.insertEdge(offset,false);
  Fragment frag=addChildFragment(offset);
  frag.segment.insertEdge(Segment.LEFT_MOST_EDGE,true);
  frag.segment.insertEdge(Segment.RIGHT_MOST_EDGE,false);
}","/** 
 * @deprecated backward for 2.1.0 document. This method can only insert a fragment of given offset as a child of current fragment.
 */
public void insertFragment(Object offset){
  this.segment.insertSection(offset,offset);
  Fragment frag=addChildFragment(offset);
  frag.segment.insertSection(Segment.LEFT_MOST_EDGE,Segment.RIGHT_MOST_EDGE);
}",0.7272727272727273
68625,"private List getSelectValueList() throws BirtException {
  List selectValueList=new ArrayList();
  ReportItemHandle reportItem=DEUtil.getBindingHolder(currentItem);
  if (bindingName != null && reportItem != null) {
    selectValueList=dataSetHandle != null ? SelectValueFetcher.getSelectValueList(ExpressionButtonUtil.getExpression(expression),reportItem.getDataSet(),false) : SelectValueFetcher.getSelectValueFromBinding(ExpressionButtonUtil.getExpression(expression),reportItem.getDataSet(),DEUtil.getVisiableColumnBindingsList(designHandle).iterator(),false);
  }
 else {
    ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  return selectValueList;
}","private List getSelectValueList() throws BirtException {
  List selectValueList=new ArrayList();
  ReportItemHandle reportItem=DEUtil.getBindingHolder(currentItem);
  if (bindingName != null && reportItem != null) {
    selectValueList=dataSetHandle != null ? SelectValueFetcher.getSelectValueList(ExpressionButtonUtil.getExpression(expression),reportItem.getDataSet(),false) : SelectValueFetcher.getSelectValueFromBinding(ExpressionButtonUtil.getExpression(expression),reportItem.getDataSet(),DEUtil.getVisiableColumnBindingsList(designHandle).iterator(),DEUtil.getGroups(designHandle).iterator(),false);
  }
 else {
    ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  return selectValueList;
}",0.9718875502008032
68626,"public String doSelection(String input){
  String retValue=null;
  if (dataSetHandle != null || designHandle instanceof TabularCubeHandle || designHandle instanceof TabularHierarchyHandle) {
    DataSetHandle dataSet=null;
    if (dataSetHandle != null) {
      dataSet=dataSetHandle;
    }
 else {
      if (designHandle instanceof TabularCubeHandle) {
        dataSet=((TabularCubeHandle)designHandle).getDataSet();
      }
 else {
        dataSet=((TabularHierarchyHandle)designHandle).getDataSet();
      }
    }
    try {
      List selectValueList=dataSetHandle != null ? SelectValueFetcher.getSelectValueList(ExpressionButtonUtil.getExpression(expression),dataSet,false) : SelectValueFetcher.getSelectValueFromBinding(ExpressionButtonUtil.getExpression(expression),dataSet,DEUtil.getVisiableColumnBindingsList(designHandle).iterator(),false);
      SelectValueDialog dialog=new SelectValueDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
      dialog.setSelectedValueList(selectValueList);
      if (dialog.open() == IDialogConstants.OK_ID) {
        retValue=dialog.getSelectedExprValue();
      }
    }
 catch (    BirtException e1) {
      MessageDialog.openError(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e1.getMessage());
    }
  }
 else {
    for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
      String columnName=getColumnName(iter.next());
      Expression expr=ExpressionButtonUtil.getExpression(expression);
      if (expr != null) {
        String exprType=expr.getType();
        IExpressionConverter converter=ExpressionUtility.getExpressionConverter(exprType);
        if (expression.getText().equals(ExpressionUtility.getColumnExpression(columnName,converter))) {
          bindingName=columnName;
          break;
        }
      }
    }
    if (bindingName == null && expression.getText().trim().length() > 0)     bindingName=expression.getText().trim();
    if (bindingName != null) {
      try {
        List selectValueList=getSelectValueList();
        SelectValueDialog dialog=new SelectValueDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
        dialog.setSelectedValueList(selectValueList);
        if (bindingParams != null) {
          dialog.setBindingParams(bindingParams);
        }
        if (dialog.open() == IDialogConstants.OK_ID) {
          retValue=dialog.getSelectedExprValue();
        }
      }
 catch (      Exception ex) {
        MessageDialog.openError(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + ex.getMessage());
      }
    }
 else {
      MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
  }
  return retValue;
}","public String doSelection(String input){
  String retValue=null;
  if (dataSetHandle != null || designHandle instanceof TabularCubeHandle || designHandle instanceof TabularHierarchyHandle) {
    DataSetHandle dataSet=null;
    if (dataSetHandle != null) {
      dataSet=dataSetHandle;
    }
 else {
      if (designHandle instanceof TabularCubeHandle) {
        dataSet=((TabularCubeHandle)designHandle).getDataSet();
      }
 else {
        dataSet=((TabularHierarchyHandle)designHandle).getDataSet();
      }
    }
    try {
      List selectValueList=dataSetHandle != null ? SelectValueFetcher.getSelectValueList(ExpressionButtonUtil.getExpression(expression),dataSet,false) : SelectValueFetcher.getSelectValueFromBinding(ExpressionButtonUtil.getExpression(expression),dataSet,DEUtil.getVisiableColumnBindingsList(designHandle).iterator(),DEUtil.getGroups(designHandle).iterator(),false);
      SelectValueDialog dialog=new SelectValueDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
      dialog.setSelectedValueList(selectValueList);
      if (dialog.open() == IDialogConstants.OK_ID) {
        retValue=dialog.getSelectedExprValue();
      }
    }
 catch (    BirtException e1) {
      MessageDialog.openError(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e1.getMessage());
    }
  }
 else {
    for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
      String columnName=getColumnName(iter.next());
      Expression expr=ExpressionButtonUtil.getExpression(expression);
      if (expr != null) {
        String exprType=expr.getType();
        IExpressionConverter converter=ExpressionUtility.getExpressionConverter(exprType);
        if (expression.getText().equals(ExpressionUtility.getColumnExpression(columnName,converter))) {
          bindingName=columnName;
          break;
        }
      }
    }
    if (bindingName == null && expression.getText().trim().length() > 0)     bindingName=expression.getText().trim();
    if (bindingName != null) {
      try {
        List selectValueList=getSelectValueList();
        SelectValueDialog dialog=new SelectValueDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
        dialog.setSelectedValueList(selectValueList);
        if (bindingParams != null) {
          dialog.setBindingParams(bindingParams);
        }
        if (dialog.open() == IDialogConstants.OK_ID) {
          retValue=dialog.getSelectedExprValue();
        }
      }
 catch (      Exception ex) {
        MessageDialog.openError(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + ex.getMessage());
      }
    }
 else {
      MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
  }
  return retValue;
}",0.9927661040303136
68627,"/** 
 * update output parameter table result
 */
private void updateResults(){
  int outputParamsSize=outputParametersSize();
  if (outputParamsSize == 0)   return;
  DataRequestSession session=null;
  try {
    DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    session=DataRequestSession.newSession(context);
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(((DataSetEditor)getContainer()).getHandle().getQualifiedName());
    query.setMaxRows(1);
    PropertyHandle propertyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    int paramsSize=propertyHandle.getListValue().size();
    Iterator paramIter=propertyHandle.iterator();
    int outputParamIndex=0;
    TableLayout layout=new TableLayout();
    TableColumn column=null;
    TableItem tableItem=null;
    List paramColumnBindingNames=new ArrayList();
    for (int n=1; n <= paramsSize; n++) {
      DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
      if (!paramDefn.isOutput())       continue;
      column=new TableColumn(outputParameterTable,SWT.LEFT);
      column.setText(paramDefn.getName());
      column.setResizable(true);
      layout.addColumnData(new ColumnPixelData(120,true));
      String bindingName=PREFIX_PARAMETER + (outputParamIndex++);
      IBinding binding=new Binding(bindingName);
      binding.setExpression(new ScriptExpression(PREFIX_OUTPUTPARAMETER + ""String_Node_Str"" + paramDefn.getName()+ ""String_Node_Str""));
      binding.setDataType(DataAdapterUtil.adaptModelDataType(paramDefn.getDataType()));
      paramColumnBindingNames.add(bindingName);
      query.addBinding(binding);
      column.pack();
    }
    outputParameterTable.setLayout(layout);
    outputParameterTable.layout(true);
    IQueryResults actualResultSet=DataSetProvider.getCurrentInstance().execute(((DataSetEditor)getContainer()).getHandle(),query,true,true,session);
    if (actualResultSet != null) {
      IResultIterator iter=actualResultSet.getResultIterator();
      iter.next();
      String[] record=new String[outputParamIndex];
      for (int n=0; n < record.length; n++) {
        record[n]=iter.getString(paramColumnBindingNames.get(n).toString());
      }
      tableItem=new TableItem(outputParameterTable,SWT.NONE);
      tableItem.setText(record);
      actualResultSet.close();
    }
  }
 catch (  Exception ex) {
    ExceptionHandler.handle(ex);
  }
 finally {
    if (session != null) {
      session.shutdown();
    }
  }
}","/** 
 * update output parameter table result
 */
private void updateResults(){
  int outputParamsSize=outputParametersSize();
  if (outputParamsSize == 0)   return;
  DataRequestSession session=null;
  try {
    DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    session=DataRequestSession.newSession(context);
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(((DataSetEditor)getContainer()).getHandle().getQualifiedName());
    query.setMaxRows(1);
    PropertyHandle propertyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    int paramsSize=propertyHandle.getListValue().size();
    Iterator paramIter=propertyHandle.iterator();
    int outputParamIndex=0;
    TableLayout layout=new TableLayout();
    TableColumn column=null;
    TableItem tableItem=null;
    List paramColumnBindingNames=new ArrayList();
    for (int n=1; n <= paramsSize; n++) {
      DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
      if (!paramDefn.isOutput())       continue;
      column=new TableColumn(outputParameterTable,SWT.LEFT);
      column.setText(paramDefn.getName());
      column.setResizable(true);
      layout.addColumnData(new ColumnPixelData(120,true));
      String bindingName=PREFIX_PARAMETER + (outputParamIndex++);
      IBinding binding=new Binding(bindingName);
      binding.setExpression(new ScriptExpression(PREFIX_OUTPUTPARAMETER + ""String_Node_Str"" + paramDefn.getName()+ ""String_Node_Str""));
      binding.setDataType(DataAdapterUtil.adaptModelDataType(paramDefn.getDataType()));
      paramColumnBindingNames.add(bindingName);
      query.addBinding(binding);
      column.pack();
    }
    outputParameterTable.setLayout(layout);
    outputParameterTable.layout(true);
    DataSetExecutorHelper helper=new DataSetExecutorHelper();
    IQueryResults actualResultSet=helper.execute(((DataSetEditor)getContainer()).getHandle(),query,true,true,session);
    if (actualResultSet != null) {
      IResultIterator iter=actualResultSet.getResultIterator();
      iter.next();
      String[] record=new String[outputParamIndex];
      for (int n=0; n < record.length; n++) {
        record[n]=iter.getString(paramColumnBindingNames.get(n).toString());
      }
      tableItem=new TableItem(outputParameterTable,SWT.NONE);
      tableItem.setText(record);
      actualResultSet.close();
    }
  }
 catch (  Exception ex) {
    ExceptionHandler.handle(ex);
  }
 finally {
    if (session != null) {
      session.shutdown();
    }
  }
}",0.9802880970432144
68628,"/** 
 * Get resultSet
 * @return
 */
private IQueryResults executeProcess(DataRequestSession session,ExecutionContext context){
  errorList=new ArrayList();
  try {
    metaData=((DataSetEditor)this.getContainer()).getCurrentItemModel();
    columnCount=metaData == null ? 0 : metaData.length;
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(((DataSetEditor)getContainer()).getHandle().getQualifiedName());
    int maxRow=getMaxRowPreference();
    query.setMaxRows(maxRow);
    PropertyHandle handle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    if (handle != null) {
      Iterator paramIter=handle.iterator();
      while (paramIter.hasNext()) {
        String value=null;
        DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
        if (paramDefn.isInput()) {
          if (paramDefn instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)paramDefn).getParamName() != null) {
            String linkedReportParam=((OdaDataSetParameterHandle)paramDefn).getParamName();
            if (linkedReportParam != null) {
              ParameterHandle ph=((DataSetEditor)getContainer()).getHandle().getModuleHandle().findParameter(linkedReportParam);
              if (ph instanceof ScalarParameterHandle) {
                if (((ScalarParameterHandle)ph).getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
                  throw new BirtException(Messages.getFormattedString(""String_Node_Str"",new String[]{linkedReportParam}),null);
                }
              }
            }
            value=DataUtil.getParamValue(((DataSetEditor)getContainer()).getHandle(),(OdaDataSetParameterHandle)paramDefn);
          }
          if (value != null) {
            InputParameterBinding binding=new InputParameterBinding(paramDefn.getName(),new ScriptExpression(value));
            query.addInputParamBinding(binding);
          }
        }
      }
    }
    columnBindingNames=new String[columnCount];
    ScriptExpression[] expressions=new ScriptExpression[columnCount];
    for (int n=0; n < columnCount; n++) {
      columnBindingNames[n]=metaData[n].getName();
      expressions[n]=new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(metaData[n].getName()));
      expressions[n].setDataType(metaData[n].getDataType());
      query.addResultSetExpression(columnBindingNames[n],expressions[n]);
    }
    boolean needCache=false;
    if (this.previousMaxRow != maxRow) {
      this.previousMaxRow=maxRow;
      needCache=true;
    }
    IQueryResults resultSet=DataSetProvider.getCurrentInstance().execute(((DataSetEditor)getContainer()).getHandle(),query,true,true,needCache,context,session);
    return resultSet;
  }
 catch (  BirtException e) {
    errorList.add(e);
    return null;
  }
}","/** 
 * Get resultSet
 * @return
 */
private IQueryResults executeProcess(DataRequestSession session,ExecutionContext context){
  errorList=new ArrayList();
  try {
    metaData=((DataSetEditor)this.getContainer()).getCurrentItemModel();
    columnCount=metaData == null ? 0 : metaData.length;
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(((DataSetEditor)getContainer()).getHandle().getQualifiedName());
    int maxRow=getMaxRowPreference();
    query.setMaxRows(maxRow);
    PropertyHandle handle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    if (handle != null) {
      Iterator paramIter=handle.iterator();
      while (paramIter.hasNext()) {
        String value=null;
        DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
        if (paramDefn.isInput()) {
          if (paramDefn instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)paramDefn).getParamName() != null) {
            String linkedReportParam=((OdaDataSetParameterHandle)paramDefn).getParamName();
            if (linkedReportParam != null) {
              ParameterHandle ph=((DataSetEditor)getContainer()).getHandle().getModuleHandle().findParameter(linkedReportParam);
              if (ph instanceof ScalarParameterHandle) {
                if (((ScalarParameterHandle)ph).getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
                  throw new BirtException(Messages.getFormattedString(""String_Node_Str"",new String[]{linkedReportParam}),null);
                }
              }
            }
            value=DataUtil.getParamValue(((DataSetEditor)getContainer()).getHandle(),(OdaDataSetParameterHandle)paramDefn);
          }
          if (value != null) {
            InputParameterBinding binding=new InputParameterBinding(paramDefn.getName(),new ScriptExpression(value));
            query.addInputParamBinding(binding);
          }
        }
      }
    }
    columnBindingNames=new String[columnCount];
    ScriptExpression[] expressions=new ScriptExpression[columnCount];
    for (int n=0; n < columnCount; n++) {
      columnBindingNames[n]=metaData[n].getName();
      expressions[n]=new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(metaData[n].getName()));
      expressions[n].setDataType(metaData[n].getDataType());
      query.addResultSetExpression(columnBindingNames[n],expressions[n]);
    }
    boolean needCache=false;
    if (this.previousMaxRow != maxRow) {
      this.previousMaxRow=maxRow;
      needCache=true;
    }
    DataSetExecutorHelper helper=new DataSetExecutorHelper();
    IQueryResults resultSet=helper.execute(((DataSetEditor)getContainer()).getHandle(),query,true,true,needCache,context,session);
    return resultSet;
  }
 catch (  BirtException e) {
    errorList.add(e);
    return null;
  }
}",0.9818625741192883
68629,"/** 
 * @param dataSet
 * @param queryDefn
 * @param useColumnHints
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSet,IQueryDefinition queryDefn,boolean useColumnHints,boolean useFilters,boolean clearCache,ExecutionContext context,DataRequestSession session) throws BirtException {
  IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
  if (!(dataSet instanceof JointDataSetHandle || dataSet instanceof DerivedDataSetHandle) && context != null) {
    context.setReportContext(new ReportContextImpl(context));
    dataSetDesign=new ModelDteApiAdapter(context).appendRuntimeInfoToDataSet(dataSet,(BaseDataSetDesign)dataSetDesign);
  }
  if (clearCache) {
    IBaseDataSourceDesign dataSourceDesign=session.getModelAdaptor().adaptDataSource(dataSet.getDataSource());
    session.clearCache(dataSourceDesign,dataSetDesign);
  }
  if (!useColumnHints) {
    dataSetDesign.getResultSetHints().clear();
  }
  if (!useFilters) {
    dataSetDesign.getFilters().clear();
  }
  if (!(dataSet instanceof JointDataSetHandle || dataSet instanceof DerivedDataSetHandle) && context != null) {
    if (dataSet.getDataSource() != null) {
      session.defineDataSource(session.getModelAdaptor().adaptDataSource(dataSet.getDataSource()));
    }
    session.defineDataSet(dataSetDesign);
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSet,resultSet);
  return resultSet;
}","/** 
 * @param dataSetHandle
 * @param dataSetDesign
 * @param queryDefn
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSetHandle,IBaseDataSetDesign dataSetDesign,IQueryDefinition queryDefn,ExecutionContext context,DataRequestSession session) throws BirtException {
  if (!(dataSetHandle instanceof JointDataSetHandle || dataSetHandle instanceof DerivedDataSetHandle) && context != null) {
    if (dataSetHandle.getDataSource() != null) {
      session.defineDataSource(session.getModelAdaptor().adaptDataSource(dataSetHandle.getDataSource()));
    }
    session.defineDataSet(dataSetDesign);
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSetHandle,resultSet);
  return resultSet;
}",0.4554809843400447
68630,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public String getDefinition(){
  return definition;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public String getDefinition(){
  if (definition == null) {
    return null;
  }
  return definition.trim();
}",0.8169934640522876
68631,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void setDefinition(String newDefinition){
  String oldDefinition=definition;
  definition=newDefinition;
  if (eNotificationRequired())   eNotify(new ENotificationImpl(this,Notification.SET,DataPackage.QUERY__DEFINITION,oldDefinition,definition));
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void setDefinition(String newDefinition){
  String def=newDefinition;
  if (def != null) {
    def=def.trim();
  }
  String oldDefinition=definition;
  definition=def;
  if (eNotificationRequired())   eNotify(new ENotificationImpl(this,Notification.SET,DataPackage.QUERY__DEFINITION,oldDefinition,definition));
}",0.8066759388038943
68632,"/** 
 * Adds measure or row/column edge according to query expression.
 */
private void bindExpression(String expr,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  if (expr != null && expr.length() > 0) {
    String bindingName=null;
    IBinding colBinding=null;
    if (ChartExpressionUtil.isCubeBinding(expr,false)) {
      bindingName=ChartExpressionUtil.getCubeBindingName(expr,false);
      colBinding=registeredBindings.get(bindingName);
    }
 else {
      bindingName=ChartUtil.escapeSpecialCharacters(expr);
      colBinding=new Binding(bindingName);
      colBinding.setDataType(DataType.ANY_TYPE);
      colBinding.setExpression(new ScriptExpression(expr));
      cubeQuery.addBinding(colBinding);
      List<String> nameList=ChartExpressionUtil.getCubeBindingNameList(expr);
      if (nameList.size() == 0) {
        return;
      }
 else       if (nameList.size() == 1) {
        bindingName=nameList.get(0);
        colBinding=registeredBindings.get(bindingName);
      }
 else {
        for (        String bn : nameList) {
          bindBinding(registeredBindings.get(bn),cubeQuery,cube);
        }
        return;
      }
    }
    bindBinding(colBinding,cubeQuery,cube);
  }
}","/** 
 * Adds measure or row/column edge according to query expression.
 */
private void bindExpression(String expression,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  if (expression == null) {
    return;
  }
  String expr=expression.trim();
  if (expr != null && expr.length() > 0) {
    String bindingName=null;
    IBinding colBinding=null;
    if (ChartExpressionUtil.isCubeBinding(expr,false)) {
      bindingName=ChartExpressionUtil.getCubeBindingName(expr,false);
      colBinding=registeredBindings.get(bindingName);
    }
 else {
      bindingName=ChartUtil.escapeSpecialCharacters(expr);
      colBinding=new Binding(bindingName);
      colBinding.setDataType(DataType.ANY_TYPE);
      colBinding.setExpression(new ScriptExpression(expr));
      cubeQuery.addBinding(colBinding);
      List<String> nameList=ChartExpressionUtil.getCubeBindingNameList(expr);
      if (nameList.size() == 0) {
        return;
      }
 else       if (nameList.size() == 1) {
        bindingName=nameList.get(0);
        colBinding=registeredBindings.get(bindingName);
      }
 else {
        for (        String bn : nameList) {
          bindBinding(registeredBindings.get(bn),cubeQuery,cube);
        }
        return;
      }
    }
    bindBinding(colBinding,cubeQuery,cube);
  }
}",0.9670765569218563
68633,"/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 * @throws DataException 
 */
public IResultObject[] readData(InputStream bis,int length) throws IOException, DataException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (session.getStopSign().isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (Date.class.isAssignableFrom(fieldType))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=ObjectSecurity.createObjectInputStream(dis);
        try {
          obs[j]=ObjectSecurity.readObject(ois);
        }
 catch (        Exception e) {
        }
        ois.close();
      }
 else {
        throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}","/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 * @throws DataException 
 */
public IResultObject[] readData(InputStream bis,int length) throws IOException, DataException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (session.getStopSign().isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    int readSize=bis.read(rowDataBytes);
    int totalSize=readSize;
    while (readSize > 0 && totalSize < rowLen) {
      readSize=bis.read(rowDataBytes,totalSize,rowLen - totalSize);
      totalSize+=readSize;
    }
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (Date.class.isAssignableFrom(fieldType))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=ObjectSecurity.createObjectInputStream(dis);
        try {
          obs[j]=ObjectSecurity.readObject(ois);
        }
 catch (        Exception e) {
        }
        ois.close();
      }
 else {
        throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}",0.9676326046432808
68634,"/** 
 * @param members
 * @throws IOException
 */
DimensionPositionSeeker(IDiskArray member) throws IOException {
  IDiskArray members=getSortedDimensionKeys(member);
  this.memberArray=new DimensionKey[Math.min(Constants.MAX_LIST_BUFFER_SIZE,members.size())];
  for (int i=0; i < memberArray.length; i++) {
    memberArray[i]=(DimensionKey)members.get(i);
  }
  if (members.size() > Constants.MAX_LIST_BUFFER_SIZE) {
    this.diskMemberArray=members;
    this.diskPostion=memberArray.length;
    this.position=this.diskPostion;
  }
}","/** 
 * @param members
 * @throws IOException
 */
DimensionPositionSeeker(IDiskArray member) throws IOException {
  IDiskArray members=getSortedDimensionKeys(member);
  String useMemoryOnly=System.getProperty(""String_Node_Str"");
  if (useMemoryOnly != null && useMemoryOnly.equalsIgnoreCase(""String_Node_Str"")) {
    this.memberArray=new DimensionKey[members.size()];
  }
 else {
    this.memberArray=new DimensionKey[Math.min(Constants.MAX_LIST_BUFFER_SIZE,members.size())];
  }
  for (int i=0; i < memberArray.length; i++) {
    memberArray[i]=(DimensionKey)members.get(i);
  }
  if (members.size() > Constants.MAX_LIST_BUFFER_SIZE) {
    this.diskMemberArray=members;
    this.diskPostion=memberArray.length;
    this.position=this.diskPostion;
  }
}",0.8298368298368298
68635,"private void restructMemoryDelegate(){
  byte[] tmpBuf=new byte[memoryDelegate.length * 2];
  System.arraycopy(memoryDelegate,0,tmpBuf,0,memoryDelegate.length);
  memoryDelegate=tmpBuf;
}","private void restructMemoryDelegate(){
  byte[] tmpBuf=null;
  if (memoryDelegate.length * 2 < 0 || memoryDelegate.length * 2l > Integer.MAX_VALUE) {
    tmpBuf=new byte[Integer.MAX_VALUE];
    this.pureMemory=false;
  }
 else {
    tmpBuf=new byte[memoryDelegate.length * 2];
  }
  System.arraycopy(memoryDelegate,0,tmpBuf,0,memoryDelegate.length);
  memoryDelegate=tmpBuf;
}",0.6642984014209592
68636,"/** 
 * @param ds
 */
protected void addDataSetSettingPage(DataSetHandle ds){
  IPropertyPage settingPage=new DataSetSettingsPage();
  addPageTo(""String_Node_Str"",DATASET_SETTINGS_PAGE,Messages.getString(""String_Node_Str""),null,settingPage);
}","/** 
 * @param ds
 */
protected void addDataSetSettingPage(DataSetHandle ds){
  IPropertyPage settingPage=new AdvancedDataSetSettingsPage();
  addPageTo(""String_Node_Str"",DATASET_SETTINGS_PAGE,Messages.getString(""String_Node_Str""),null,settingPage);
}",0.9838056680161944
68637,"public boolean canLeave(){
  try {
    ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setProperty(IOdaDataSetModel.RESULT_SET_NUMBER_PROP,null);
    ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setResultSetName(null);
    if (selectResultSetCheckBox == null)     return true;
    if (selectResultSetCheckBox.getSelection()) {
      if (resultSetNumber.getSelection()) {
        ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setResultSetNumber(new Integer(this.numberText));
      }
 else       if (resultSetName.getSelection()) {
        ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setResultSetName(this.nameText);
      }
    }
    if (changed) {
      Iterator it=((DataSetEditor)getContainer()).getHandle().resultSetIterator();
      while (it.hasNext()) {
        it.remove();
      }
    }
    changed=false;
    if (canFinish())     return super.performOk();
 else     return false;
  }
 catch (  Exception e) {
    return true;
  }
}","public boolean canLeave(){
  try {
    ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setProperty(IOdaDataSetModel.RESULT_SET_NUMBER_PROP,null);
    ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setResultSetName(null);
    if (!updateResultSetSetting())     return true;
    return canLeavePage();
  }
 catch (  Exception e) {
    return true;
  }
}",0.3977110157367668
68638,"private void setQueryExpression(String expression){
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
  if (query != null) {
    query.setDefinition(btnBuilder.getExpression());
  }
 else {
    query=QueryImpl.create(btnBuilder.getExpression());
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}","private void setQueryExpression(String expression){
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
  if (query != null) {
    query.setDefinition(btnBuilder.convertExpression(expression));
  }
 else {
    query=QueryImpl.create(btnBuilder.convertExpression(expression));
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}",0.9608938547486032
68639,"public void updateText(Query query){
  if (query == null) {
    return;
  }
  Control text=findText(query);
  if (text != null) {
    IQueryExpressionManager queryManager=textCollection.get(text);
    queryManager.updateText(query.getDefinition());
    String displayExpr=queryManager.getDisplayExpression();
    updateControlBackground(text,displayExpr);
  }
}","public void updateText(Query query){
  if (query == null) {
    return;
  }
  Control text=findText(query);
  if (text != null) {
    IQueryExpressionManager queryManager=textCollection.get(text);
    String displayExpr=queryManager.getDisplayExpression();
    queryManager.updateText(displayExpr);
    updateControlBackground(text,displayExpr);
  }
}",0.7865168539325843
68640,"private void initOptions(){
  ConfigurableOption wrappingText=new ConfigurableOption(TEXT_WRAPPING);
  wrappingText.setDisplayName(Messages.getString(""String_Node_Str""));
  wrappingText.setDataType(IConfigurableOption.DataType.BOOLEAN);
  wrappingText.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  wrappingText.setDefaultValue(Boolean.TRUE);
  wrappingText.setToolTip(null);
  wrappingText.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{wrappingText};
}","private void initOptions(){
  ConfigurableOption wrappingText=initializeWrappingText();
  options=new IConfigurableOption[]{wrappingText};
}",0.4116743471582181
68641,"public void initialize(IEmitterServices service) throws EngineException {
  this.service=service;
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
  }
  context.setTempFileDir(service.getReportEngine().getConfig().getTempDir());
  IReportContext reportContext=service.getReportContext();
  if (reportContext != null) {
    Locale locale=reportContext.getLocale();
    if (locale != null) {
      context.setLocale(ULocale.forLocale(locale));
    }
 else     context.setLocale(ULocale.getDefault());
  }
}","public void initialize(IEmitterServices service) throws EngineException {
  this.context=createContext();
  this.service=service;
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
  }
  context.setTempFileDir(service.getReportEngine().getConfig().getTempDir());
  IReportContext reportContext=service.getReportContext();
  if (reportContext != null) {
    Locale locale=reportContext.getLocale();
    if (locale != null) {
      context.setLocale(ULocale.forLocale(locale));
    }
 else     context.setLocale(ULocale.getDefault());
  }
}",0.9726027397260274
68642,"private void addSorting(ICubeQueryDefinition cubeQuery,CubeHandle cube,SeriesDefinition sd,int i) throws BirtException {
  if (sd.getSortKey() == null) {
    return;
  }
  String sortKey=sd.getSortKey().getDefinition();
  if (sd.isSetSorting() && sortKey != null && sortKey.length() > 0) {
    String sortKeyBinding=ChartExpressionUtil.getCubeBindingName(sd.getSortKey().getDefinition(),true);
    if (registeredLevels.containsKey(sortKeyBinding)) {
      ICubeSortDefinition sortDef=getCubeElementFactory().createCubeSortDefinition(sortKey,registeredLevels.get(sortKeyBinding),null,null,sd.getSorting() == SortOption.ASCENDING_LITERAL ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
      cubeQuery.addSort(sortDef);
    }
 else     if (registeredMeasures.containsKey(sortKeyBinding)) {
      Query targetQuery=i > 0 ? sd.getQuery() : (Query)sd.getDesignTimeSeries().getDataDefinition().get(0);
      IMeasureDefinition mDef=registeredMeasures.get(sortKeyBinding);
      String targetBindingName=ChartExpressionUtil.getCubeBindingName(targetQuery.getDefinition(),true);
      IBinding measureBinding=registeredBindings.get(sortKeyBinding);
      IBinding aggBinding=new Binding(measureBinding.getBindingName() + targetBindingName);
      aggBinding.setDataType(measureBinding.getDataType());
      aggBinding.setExpression(measureBinding.getExpression());
      aggBinding.addAggregateOn(registeredQueries.get(targetBindingName));
      aggBinding.setAggrFunction(mDef.getAggrFunction());
      aggBinding.setExportable(false);
      cubeQuery.addBinding(aggBinding);
      ICubeSortDefinition sortDef=getCubeElementFactory().createCubeSortDefinition(ExpressionUtil.createJSDataExpression(aggBinding.getBindingName()),registeredLevels.get(targetBindingName),null,null,sd.getSorting() == SortOption.ASCENDING_LITERAL ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
      cubeQuery.addSort(sortDef);
    }
  }
}","private void addSorting(ICubeQueryDefinition cubeQuery,CubeHandle cube,SeriesDefinition sd,int i) throws BirtException {
  if (sd.getSortKey() == null) {
    return;
  }
  String sortKey=sd.getSortKey().getDefinition();
  if (sd.isSetSorting() && sortKey != null && sortKey.length() > 0) {
    String sortKeyBinding=ChartExpressionUtil.getCubeBindingName(sd.getSortKey().getDefinition(),true);
    if (registeredLevels.containsKey(sortKeyBinding)) {
      ICubeSortDefinition sortDef=getCubeElementFactory().createCubeSortDefinition(sortKey.trim(),registeredLevels.get(sortKeyBinding),null,null,sd.getSorting() == SortOption.ASCENDING_LITERAL ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
      cubeQuery.addSort(sortDef);
    }
 else     if (registeredMeasures.containsKey(sortKeyBinding)) {
      Query targetQuery=i > 0 ? sd.getQuery() : (Query)sd.getDesignTimeSeries().getDataDefinition().get(0);
      IMeasureDefinition mDef=registeredMeasures.get(sortKeyBinding);
      String targetBindingName=ChartExpressionUtil.getCubeBindingName(targetQuery.getDefinition(),true);
      IBinding measureBinding=registeredBindings.get(sortKeyBinding);
      IBinding aggBinding=new Binding(measureBinding.getBindingName() + targetBindingName);
      aggBinding.setDataType(measureBinding.getDataType());
      aggBinding.setExpression(measureBinding.getExpression());
      aggBinding.addAggregateOn(registeredQueries.get(targetBindingName));
      aggBinding.setAggrFunction(mDef.getAggrFunction());
      aggBinding.setExportable(false);
      cubeQuery.addBinding(aggBinding);
      ICubeSortDefinition sortDef=getCubeElementFactory().createCubeSortDefinition(ExpressionUtil.createJSDataExpression(aggBinding.getBindingName()),registeredLevels.get(targetBindingName),null,null,sd.getSorting() == SortOption.ASCENDING_LITERAL ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
      cubeQuery.addSort(sortDef);
    }
  }
}",0.9981879368366554
68643,"private static void addLevelSorting(List<LevelViewHandle> levelViews,Map<LevelHandle,ILevelDefinition> levelMapping,ICubeQueryDefinition cubeQuery,IModelAdapter modelAdapter) throws BirtException {
  List<ILevelDefinition> levels=new ArrayList<ILevelDefinition>();
  List<Object> values=new ArrayList<Object>();
  for (Iterator<LevelViewHandle> itr=levelViews.iterator(); itr.hasNext(); ) {
    LevelViewHandle lv=itr.next();
    Iterator sortItr=lv.sortsIterator();
    if (sortItr != null) {
      while (sortItr.hasNext()) {
        SortElementHandle sortKey=(SortElementHandle)sortItr.next();
        levels.clear();
        values.clear();
        addMembers(levelMapping,levels,values,sortKey.getMember());
        ILevelDefinition[] qualifyLevels=null;
        Object[] qualifyValues=null;
        if (levels.size() > 0) {
          qualifyLevels=levels.toArray(new ILevelDefinition[levels.size()]);
          qualifyValues=values.toArray(new Object[values.size()]);
        }
        ICubeSortDefinition sortDef=getCubeElementFactory().createCubeSortDefinition(modelAdapter.adaptExpression((Expression)sortKey.getExpressionProperty(ISortElementModel.KEY_PROP).getValue(),ExpressionLocation.CUBE),levelMapping.get(lv.getCubeLevel()),qualifyLevels,qualifyValues,DataAdapterUtil.adaptModelSortDirection(sortKey.getDirection()));
        cubeQuery.addSort(sortDef);
      }
    }
  }
}","private static void addLevelSorting(List<LevelViewHandle> levelViews,Map<LevelHandle,ILevelDefinition> levelMapping,ICubeQueryDefinition cubeQuery,IModelAdapter modelAdapter) throws BirtException {
  List<ILevelDefinition> levels=new ArrayList<ILevelDefinition>();
  List<Object> values=new ArrayList<Object>();
  for (Iterator<LevelViewHandle> itr=levelViews.iterator(); itr.hasNext(); ) {
    LevelViewHandle lv=itr.next();
    Iterator sortItr=lv.sortsIterator();
    if (sortItr != null) {
      while (sortItr.hasNext()) {
        SortElementHandle sortKey=(SortElementHandle)sortItr.next();
        levels.clear();
        values.clear();
        addMembers(levelMapping,levels,values,sortKey.getMember());
        ILevelDefinition[] qualifyLevels=null;
        Object[] qualifyValues=null;
        if (levels.size() > 0) {
          qualifyLevels=levels.toArray(new ILevelDefinition[levels.size()]);
          qualifyValues=values.toArray(new Object[values.size()]);
        }
        ICubeSortDefinition sortDef=getCubeElementFactory().createCubeSortDefinition(modelAdapter.adaptExpression((Expression)sortKey.getExpressionProperty(ISortElementModel.KEY_PROP).getValue(),ExpressionLocation.CUBE),levelMapping.get(lv.getCubeLevel()),qualifyLevels,qualifyValues,DataAdapterUtil.adaptModelSortDirection(sortKey.getDirection()));
        sortDef.setSortLocale(sortKey.getLocale());
        sortDef.setSortStrength(sortKey.getStrength());
        cubeQuery.addSort(sortDef);
      }
    }
  }
}",0.9625779625779626
68644,"/** 
 * A convenience method provided to add a marker line instance to an axis
 * @param ax
 * @param de
 * @param lineColor
 */
public static final MarkerLine create(Axis ax,DataElement de,ColorDefinition lineColor){
  final MarkerLine ml=ComponentFactory.eINSTANCE.createMarkerLine();
  ml.setLineAttributes(LineAttributesImpl.create(lineColor,LineStyle.DASHED_LITERAL,1));
  ml.setValue(de);
  ml.setLabel(LabelImpl.create());
  ml.setLabelAnchor(ax.getOrientation().getValue() == Orientation.HORIZONTAL ? Anchor.NORTH_WEST_LITERAL : Anchor.NORTH_EAST_LITERAL);
  if (ax.getOrientation().getValue() == Orientation.HORIZONTAL) {
    ml.getLabel().getCaption().getFont().setRotation(90);
  }
  ax.getMarkerLines().add(ml);
  if (ax.getFormatSpecifier() != null) {
    ml.setFormatSpecifier(ax.getFormatSpecifier().copyInstance());
  }
  return ml;
}","/** 
 * A convenience method provided to add a marker line instance to an axis
 * @param ax
 * @param de
 * @param lineColor
 */
public static final MarkerLine create(Axis ax,DataElement de,ColorDefinition lineColor){
  final MarkerLine ml=ComponentFactory.eINSTANCE.createMarkerLine();
  ml.setLineAttributes(LineAttributesImpl.create(lineColor,LineStyle.DASHED_LITERAL,1));
  ml.setValue(de);
  ml.setLabel(LabelImpl.create());
  ml.setLabelAnchor(ax.getOrientation().getValue() == Orientation.HORIZONTAL ? Anchor.NORTH_WEST_LITERAL : Anchor.NORTH_EAST_LITERAL);
  if (ax.getOrientation().getValue() == Orientation.HORIZONTAL) {
    ml.getLabel().getCaption().getFont().setRotation(90);
  }
  ax.getMarkerLines().add(ml);
  if (ax.getFormatSpecifier() != null && !ax.isCategoryAxis()) {
    ml.setFormatSpecifier(ax.getFormatSpecifier().copyInstance());
  }
  return ml;
}",0.9860788863109048
68645,"/** 
 * A convenience method provided to add a marker range instance to an axis
 * @param ax the axis which the marker range will be created on.
 * @param deStart start range.
 * @param deEnd end range.
 * @param fillColor fill color.
 * @param outlineColor outline color.
 */
public static final MarkerRange create(Axis ax,DataElement deStart,DataElement deEnd,Fill fillColor,ColorDefinition outlineColor){
  final MarkerRange mr=ComponentFactory.eINSTANCE.createMarkerRange();
  final LineAttributes liaOutline=LineAttributesImpl.create(outlineColor,LineStyle.SOLID_LITERAL,1);
  mr.setOutline(liaOutline);
  mr.setFill(fillColor);
  mr.setStartValue(deStart);
  mr.setEndValue(deEnd);
  mr.setLabel(LabelImpl.create());
  mr.setLabelAnchor(ax.getOrientation().getValue() == Orientation.HORIZONTAL ? Anchor.NORTH_EAST_LITERAL : Anchor.NORTH_WEST_LITERAL);
  if (ax.getOrientation().getValue() == Orientation.VERTICAL) {
    mr.getLabel().getCaption().getFont().setRotation(90);
  }
  ax.getMarkerRanges().add(mr);
  if (ax.getFormatSpecifier() != null) {
    mr.setFormatSpecifier(ax.getFormatSpecifier().copyInstance());
  }
  return mr;
}","/** 
 * A convenience method provided to add a marker range instance to an axis
 * @param ax the axis which the marker range will be created on.
 * @param deStart start range.
 * @param deEnd end range.
 * @param fillColor fill color.
 * @param outlineColor outline color.
 */
public static final MarkerRange create(Axis ax,DataElement deStart,DataElement deEnd,Fill fillColor,ColorDefinition outlineColor){
  final MarkerRange mr=ComponentFactory.eINSTANCE.createMarkerRange();
  final LineAttributes liaOutline=LineAttributesImpl.create(outlineColor,LineStyle.SOLID_LITERAL,1);
  mr.setOutline(liaOutline);
  mr.setFill(fillColor);
  mr.setStartValue(deStart);
  mr.setEndValue(deEnd);
  mr.setLabel(LabelImpl.create());
  mr.setLabelAnchor(ax.getOrientation().getValue() == Orientation.HORIZONTAL ? Anchor.NORTH_EAST_LITERAL : Anchor.NORTH_WEST_LITERAL);
  if (ax.getOrientation().getValue() == Orientation.VERTICAL) {
    mr.getLabel().getCaption().getFont().setRotation(90);
  }
  ax.getMarkerRanges().add(mr);
  if (ax.getFormatSpecifier() != null && !ax.isCategoryAxis()) {
    mr.setFormatSpecifier(ax.getFormatSpecifier().copyInstance());
  }
  return mr;
}",0.9896013864818024
68646,"public void widgetSelected(SelectionEvent e){
  if (e.getSource().equals(btnAddLine)) {
    MarkerLine line=MarkerLineImpl.create(getAxisForProcessing(),createDefaultDataElement(),ColorDefinitionImpl.RED());
    line.eAdapters().addAll(getAxisForProcessing().eAdapters());
    iLineCount++;
    buildList();
    lstMarkers.select(lstMarkers.getItemCount() - 1);
    updateUIForSelection();
    if (lstMarkers.getItemCount() == 1) {
      setState(true);
    }
    refreshButtons();
  }
 else   if (e.getSource().equals(btnAddRange)) {
    MarkerRange range=MarkerRangeImpl.create(getAxisForProcessing(),createDefaultDataElement(),createDefaultDataElement(),ColorDefinitionImpl.TRANSPARENT(),ColorDefinitionImpl.RED());
    range.eAdapters().addAll(getAxisForProcessing().eAdapters());
    iRangeCount++;
    buildList();
    lstMarkers.select(lstMarkers.getItemCount() - 1);
    updateUIForSelection();
    if (lstMarkers.getItemCount() == 1) {
      setState(true);
    }
    refreshButtons();
  }
 else   if (e.getSource().equals(btnRemove)) {
    if (lstMarkers.getSelection().length == 0) {
      return;
    }
    String sSelectedMarker=lstMarkers.getSelection()[0];
    boolean bLine=sSelectedMarker.startsWith(MARKER_LINE_LABEL);
    int iMarkerIndex=getMarkerIndex();
    if (bLine) {
      getAxisForProcessing().getMarkerLines().remove(iMarkerIndex);
      iLineCount--;
    }
 else {
      getAxisForProcessing().getMarkerRanges().remove(iMarkerIndex);
      iRangeCount--;
    }
    buildList();
    if (lstMarkers.getItemCount() > 0) {
      lstMarkers.select(0);
      updateUIForSelection();
    }
 else {
      setState(false);
      resetUI();
    }
    refreshButtons();
  }
 else   if (e.getSource().equals(lstMarkers)) {
    updateUIForSelection();
    refreshButtons();
  }
 else   if (e.getSource().equals(cmbLineAnchor)) {
    getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).setLabelAnchor(ChartUIUtil.getFlippedAnchor(Anchor.getByName(LiteralHelper.anchorSet.getNameByDisplayName(cmbLineAnchor.getText())),isFlippedAxes()));
  }
 else   if (e.getSource().equals(cmbRangeAnchor)) {
    getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).setLabelAnchor(ChartUIUtil.getFlippedAnchor(Anchor.getByName(LiteralHelper.anchorSet.getNameByDisplayName(cmbRangeAnchor.getText())),isFlippedAxes()));
  }
 else   if (e.getSource().equals(btnLineFormatSpecifier)) {
    String sAxisTitle=""String_Node_Str"";
    try {
      sAxisTitle=new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{getAxisForProcessing().getTitle().getCaption().getValue()});
    }
 catch (    NullPointerException e1) {
    }
    FormatSpecifier formatspecifier=null;
    if (getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).getFormatSpecifier() != null) {
      formatspecifier=getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).getFormatSpecifier();
    }
    FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),formatspecifier,getAxisForProcessing().getType(),new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{Integer.valueOf(getMarkerIndex() + 1),sAxisTitle}));
    if (editor.open() == Window.OK) {
      if (editor.getFormatSpecifier() == null) {
        getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).eUnset(ComponentPackage.eINSTANCE.getMarkerLine_FormatSpecifier());
        return;
      }
      getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).setFormatSpecifier(editor.getFormatSpecifier());
    }
  }
 else   if (e.getSource().equals(btnStartFormatSpecifier) || e.getSource().equals(btnEndFormatSpecifier)) {
    String sAxisTitle=""String_Node_Str"";
    try {
      String sTitleString=getAxisForProcessing().getTitle().getCaption().getValue();
      int iSeparatorIndex=sTitleString.indexOf(ExternalizedTextEditorComposite.SEPARATOR);
      if (iSeparatorIndex > 0) {
        sTitleString=sTitleString.substring(iSeparatorIndex);
      }
 else       if (iSeparatorIndex == 0) {
        sTitleString=sTitleString.substring(ExternalizedTextEditorComposite.SEPARATOR.length());
      }
      sAxisTitle=new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{sTitleString});
    }
 catch (    NullPointerException e1) {
    }
    FormatSpecifier formatspecifier=null;
    if (getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).getFormatSpecifier() != null) {
      formatspecifier=getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).getFormatSpecifier();
    }
    FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),formatspecifier,getAxisForProcessing().getType(),new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{Integer.valueOf(getMarkerIndex() + 1),sAxisTitle}));
    if (editor.open() == Window.OK) {
      if (editor.getFormatSpecifier() == null) {
        getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).eUnset(ComponentPackage.eINSTANCE.getMarkerRange_FormatSpecifier());
        return;
      }
      getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).setFormatSpecifier(editor.getFormatSpecifier());
    }
  }
 else   if (e.widget.equals(btnLineTriggers)) {
    new TriggerEditorDialog(cmpContent.getShell(),getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).getTriggers(),getAxisForProcessing().getMarkerLines().get(getMarkerIndex()),getContext(),Messages.getString(""String_Node_Str""),TriggerSupportMatrix.TYPE_MARKERLINE,false,true).open();
  }
 else   if (e.widget.equals(btnRangeTriggers)) {
    new TriggerEditorDialog(cmpContent.getShell(),getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).getTriggers(),getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()),getContext(),Messages.getString(""String_Node_Str""),TriggerSupportMatrix.TYPE_MARKERRANGE,false,true).open();
  }
}","public void widgetSelected(SelectionEvent e){
  if (e.getSource().equals(btnAddLine)) {
    MarkerLine line=MarkerLineImpl.create(getAxisForProcessing(),createDefaultDataElement(),ColorDefinitionImpl.RED());
    line.eAdapters().addAll(getAxisForProcessing().eAdapters());
    iLineCount++;
    buildList();
    lstMarkers.select(lstMarkers.getItemCount() - 1);
    updateUIForSelection();
    if (lstMarkers.getItemCount() == 1) {
      setState(true);
    }
    refreshButtons();
  }
 else   if (e.getSource().equals(btnAddRange)) {
    MarkerRange range=MarkerRangeImpl.create(getAxisForProcessing(),createDefaultDataElement(),createDefaultDataElement(),ColorDefinitionImpl.TRANSPARENT(),ColorDefinitionImpl.RED());
    range.eAdapters().addAll(getAxisForProcessing().eAdapters());
    iRangeCount++;
    buildList();
    lstMarkers.select(lstMarkers.getItemCount() - 1);
    updateUIForSelection();
    if (lstMarkers.getItemCount() == 1) {
      setState(true);
    }
    refreshButtons();
  }
 else   if (e.getSource().equals(btnRemove)) {
    if (lstMarkers.getSelection().length == 0) {
      return;
    }
    String sSelectedMarker=lstMarkers.getSelection()[0];
    boolean bLine=sSelectedMarker.startsWith(MARKER_LINE_LABEL);
    int iMarkerIndex=getMarkerIndex();
    if (bLine) {
      getAxisForProcessing().getMarkerLines().remove(iMarkerIndex);
      iLineCount--;
    }
 else {
      getAxisForProcessing().getMarkerRanges().remove(iMarkerIndex);
      iRangeCount--;
    }
    buildList();
    if (lstMarkers.getItemCount() > 0) {
      lstMarkers.select(0);
      updateUIForSelection();
    }
 else {
      setState(false);
      resetUI();
    }
    refreshButtons();
  }
 else   if (e.getSource().equals(lstMarkers)) {
    updateUIForSelection();
    refreshButtons();
  }
 else   if (e.getSource().equals(cmbLineAnchor)) {
    getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).setLabelAnchor(ChartUIUtil.getFlippedAnchor(Anchor.getByName(LiteralHelper.anchorSet.getNameByDisplayName(cmbLineAnchor.getText())),isFlippedAxes()));
  }
 else   if (e.getSource().equals(cmbRangeAnchor)) {
    getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).setLabelAnchor(ChartUIUtil.getFlippedAnchor(Anchor.getByName(LiteralHelper.anchorSet.getNameByDisplayName(cmbRangeAnchor.getText())),isFlippedAxes()));
  }
 else   if (e.getSource().equals(btnLineFormatSpecifier)) {
    String sAxisTitle=""String_Node_Str"";
    try {
      sAxisTitle=new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{getAxisForProcessing().getTitle().getCaption().getValue()});
    }
 catch (    NullPointerException e1) {
    }
    FormatSpecifier formatspecifier=null;
    if (getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).getFormatSpecifier() != null) {
      formatspecifier=getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).getFormatSpecifier();
    }
    FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),formatspecifier,getDataElementType(getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).getValue()),new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{Integer.valueOf(getMarkerIndex() + 1),sAxisTitle}));
    if (editor.open() == Window.OK) {
      if (editor.getFormatSpecifier() == null) {
        getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).eUnset(ComponentPackage.eINSTANCE.getMarkerLine_FormatSpecifier());
        return;
      }
      getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).setFormatSpecifier(editor.getFormatSpecifier());
    }
  }
 else   if (e.getSource().equals(btnStartFormatSpecifier) || e.getSource().equals(btnEndFormatSpecifier)) {
    String sAxisTitle=""String_Node_Str"";
    try {
      String sTitleString=getAxisForProcessing().getTitle().getCaption().getValue();
      int iSeparatorIndex=sTitleString.indexOf(ExternalizedTextEditorComposite.SEPARATOR);
      if (iSeparatorIndex > 0) {
        sTitleString=sTitleString.substring(iSeparatorIndex);
      }
 else       if (iSeparatorIndex == 0) {
        sTitleString=sTitleString.substring(ExternalizedTextEditorComposite.SEPARATOR.length());
      }
      sAxisTitle=new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{sTitleString});
    }
 catch (    NullPointerException e1) {
    }
    FormatSpecifier formatspecifier=null;
    if (getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).getFormatSpecifier() != null) {
      formatspecifier=getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).getFormatSpecifier();
    }
    FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),formatspecifier,getDataElementType(getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).getStartValue()),new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{Integer.valueOf(getMarkerIndex() + 1),sAxisTitle}));
    if (editor.open() == Window.OK) {
      if (editor.getFormatSpecifier() == null) {
        getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).eUnset(ComponentPackage.eINSTANCE.getMarkerRange_FormatSpecifier());
        return;
      }
      getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).setFormatSpecifier(editor.getFormatSpecifier());
    }
  }
 else   if (e.widget.equals(btnLineTriggers)) {
    new TriggerEditorDialog(cmpContent.getShell(),getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).getTriggers(),getAxisForProcessing().getMarkerLines().get(getMarkerIndex()),getContext(),Messages.getString(""String_Node_Str""),TriggerSupportMatrix.TYPE_MARKERLINE,false,true).open();
  }
 else   if (e.widget.equals(btnRangeTriggers)) {
    new TriggerEditorDialog(cmpContent.getShell(),getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).getTriggers(),getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()),getContext(),Messages.getString(""String_Node_Str""),TriggerSupportMatrix.TYPE_MARKERRANGE,false,true).open();
  }
}",0.9820349227669576
68647,"public void doSave(IProgressMonitor progressMonitor){
  reportXMLEditor.doSave(progressMonitor);
  UIUtil.doFinishSava(getModel());
}","public void doSave(IProgressMonitor progressMonitor){
  reportXMLEditor.doSave(progressMonitor);
  UIUtil.doFinishSave(getModel());
}",0.9924812030075189
68648,"/** 
 * Clears the dirty flag.
 */
private void clearDirtyFlag(){
  IReportProvider provider=getProvider();
  if (provider != null && getErrorLIine(false) == -1) {
    ModuleHandle oldModel=getModel();
    unhookModelEventManager(oldModel);
    getCommandStack(oldModel).removeCommandStackListener(getCommandStackListener());
    SessionHandleAdapter.getInstance().getMediator(oldModel).removeColleague(this);
    ModuleHandle newModel=provider.getReportModuleHandle(getEditorInput(),true);
    SessionHandleAdapter.getInstance().setReportDesignHandle(newModel);
    UIUtil.processSessionResourceFolder(getEditorInput(),UIUtil.getProjectFromInput(getEditorInput()),newModel);
    SessionHandleAdapter.getInstance().getMediator(newModel).addColleague(this);
    hookModelEventManager(getModel());
    getCommandStack(newModel).addCommandStackListener(getCommandStackListener());
    setIsModified(false);
    getEditor().editorDirtyStateChanged();
    if (isActive() && !isLeaving) {
      getReportEditor().reloadOutlinePage();
    }
  }
}","/** 
 * Clears the dirty flag.
 */
private void clearDirtyFlag(){
  IReportProvider provider=getProvider();
  if (provider != null && getErrorLIine(false) == -1) {
    ModuleHandle oldModel=getModel();
    unhookModelEventManager(oldModel);
    getCommandStack(oldModel).removeCommandStackListener(getCommandStackListener());
    SessionHandleAdapter.getInstance().getMediator(oldModel).removeColleague(this);
    ModuleHandle newModel=provider.getReportModuleHandle(getEditorInput(),true);
    SessionHandleAdapter.getInstance().setReportDesignHandle(newModel);
    UIUtil.processSessionResourceFolder(getEditorInput(),UIUtil.getProjectFromInput(getEditorInput()),newModel);
    SessionHandleAdapter.getInstance().getMediator(newModel).addColleague(this);
    hookModelEventManager(newModel);
    getCommandStack(newModel).addCommandStackListener(getCommandStackListener());
    setIsModified(false);
    getEditor().editorDirtyStateChanged();
    if (isActive() && !isLeaving) {
      getReportEditor().reloadOutlinePage();
    }
  }
}",0.9913294797687862
68649,"protected void hookModelEventManager(Object model){
  getModelEventManager().hookRoot(model);
  getModelEventManager().hookCommandStack(getCommandStack(getModel()));
}","protected void hookModelEventManager(ModuleHandle model){
  getModelEventManager().hookRoot(model);
  getModelEventManager().hookCommandStack(getCommandStack(model));
}",0.9313432835820896
68650,"protected void unhookModelEventManager(Object model){
  getModelEventManager().unhookRoot(model);
}","protected void unhookModelEventManager(ModuleHandle model){
  getModelEventManager().unhookRoot(model);
}",0.9215686274509804
68651,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
 else   if (prePage != this && (prePage.isDirty() || prePage.getStaleType() != IPageStaleType.NONE)) {
    ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput(),false);
    if (ModuleUtil.compareReportVersion(ModuleUtil.getReportVersion(),model.getVersion()) > 0) {
      if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        return false;
      }
    }
    prePage.doSave(null);
    UIUtil.doFinishSava(getModel());
    prePage.markPageStale(IPageStaleType.NONE);
    refreshDocument();
    markPageStale(IPageStaleType.NONE);
  }
  ModuleHandle model=getModel();
  hookModelEventManager(model);
  SessionHandleAdapter.getInstance().getMediator(model).addColleague(this);
  ReportMediator mediator=SessionHandleAdapter.getInstance().getMediator(model);
  ReportRequest request=new ReportRequest(ReportXMLSourceEditorFormPage.this);
  List list=new ArrayList(mediator.getCurrentState().getSelectionObject());
  if (list.isEmpty()) {
    list.add(new Object());
  }
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  mediator.notifyRequest(request);
  reportXMLEditor.setFocus();
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
 else   if (prePage != this && (prePage.isDirty() || prePage.getStaleType() != IPageStaleType.NONE)) {
    ModuleHandle model=getModel();
    if (model != null && ModuleUtil.compareReportVersion(ModuleUtil.getReportVersion(),model.getVersion()) > 0) {
      if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        return false;
      }
    }
    prePage.doSave(null);
    UIUtil.doFinishSave(getModel());
    prePage.markPageStale(IPageStaleType.NONE);
    refreshDocument();
    markPageStale(IPageStaleType.NONE);
  }
  ModuleHandle model=getModel();
  hookModelEventManager(model);
  SessionHandleAdapter.getInstance().getMediator(model).addColleague(this);
  ReportMediator mediator=SessionHandleAdapter.getInstance().getMediator(model);
  ReportRequest request=new ReportRequest(ReportXMLSourceEditorFormPage.this);
  List list=new ArrayList(mediator.getCurrentState().getSelectionObject());
  if (list.isEmpty()) {
    list.add(new Object());
  }
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  mediator.notifyRequest(request);
  reportXMLEditor.setFocus();
  return true;
}",0.9661246612466124
68652,"public boolean isDirty(){
  if (getProvider().getReportModuleHandle(getEditorInput()) != model && getProvider().getReportModuleHandle(getEditorInput()) != null) {
    return getProvider().getReportModuleHandle(getEditorInput()).needsSave();
  }
  if (getModel() == null) {
    return false;
  }
  return getModel().needsSave();
}","public boolean isDirty(){
  ModuleHandle newModel=getProvider().queryReportModuleHandle();
  if (newModel != null && newModel != model) {
    return newModel.needsSave();
  }
  if (model == null) {
    return false;
  }
  return model.needsSave();
}",0.1557093425605536
68653,"protected IReportProvider getProvider(){
  if (provider == null) {
    provider=new FileReportProvider();
  }
  return provider;
}",protected abstract IReportProvider getProvider();,0.4469273743016759
68654,"/** 
 * Get report modulehandle. if model havn't been set, get the editor input modulehandle.
 * @return
 */
protected ModuleHandle getModel(){
  if (model == null) {
    IReportProvider reportProvider=getProvider();
    model=reportProvider.getReportModuleHandle(getEditorInput());
  }
  return model;
}","/** 
 * Get internal report modulehandle cached by current page. if model havn't been set, get the editor input modulehandle.
 * @return
 */
final protected ModuleHandle getModel(){
  if (model == null) {
    IReportProvider reportProvider=getProvider();
    model=reportProvider.queryReportModuleHandle();
  }
  return model;
}",0.8449367088607594
68655,"protected IReportProvider getProvider(){
  if (provider == null) {
    provider=new FileReportProvider();
  }
  return provider;
}",protected abstract IReportProvider getProvider();,0.4469273743016759
68656,"private WrapperCommandStack getCommandStack(){
  return new WrapperCommandStack(getModel().getCommandStack());
}","private WrapperCommandStack getCommandStack(){
  if (getModel() != null) {
    return new WrapperCommandStack(getModel().getCommandStack());
  }
  return null;
}",0.8205128205128205
68657,"/** 
 * Convert input element to ModuleHandle.
 * @param element
 * @return
 */
ModuleHandle getReportModuleHandle(Object element,boolean reset);","/** 
 * Convert input element to ModuleHandle. This will trigger the actual loading if necessary.
 * @param element The input element
 * @param reset Indicate if it enforces the loading.
 * @return
 */
ModuleHandle getReportModuleHandle(Object element,boolean reset);",0.7038834951456311
68658,"public void doSave(IProgressMonitor monitor){
  boolean isReselect=false;
  if (ModuleUtil.compareReportVersion(ModuleUtil.getReportVersion(),getModel().getVersion()) > 0) {
    if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
      return;
    }
 else {
      isReselect=true;
    }
  }
  getCurrentPageInstance().doSave(monitor);
  fireDesignFileChangeEvent();
  if (isReselect) {
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
          if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer() != null) {
            GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
            GraphicalViewer view=editor.getGraphicalViewer();
            UIUtil.resetViewSelection(view,true);
          }
        }
      }
    }
);
  }
}","public void doSave(IProgressMonitor monitor){
  boolean isReselect=false;
  if (getModel() != null && ModuleUtil.compareReportVersion(ModuleUtil.getReportVersion(),getModel().getVersion()) > 0) {
    if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
      return;
    }
 else {
      isReselect=true;
    }
  }
  getCurrentPageInstance().doSave(monitor);
  fireDesignFileChangeEvent();
  if (isReselect) {
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
          if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer() != null) {
            GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
            GraphicalViewer view=editor.getGraphicalViewer();
            UIUtil.resetViewSelection(view,true);
          }
        }
      }
    }
);
  }
}",0.9891411648568608
68659,"protected void addPages(){
  List formPageList=EditorContributorManager.getInstance().getEditorContributor(getEditorSite().getId()).formPageList;
  boolean error=false;
  String fileName=getProvider().getInputPath(getEditorInput()).toOSString();
  List message=ModuleUtil.checkVersion(fileName);
  if (message.size() > 0) {
    IVersionInfo info=(IVersionInfo)message.get(0);
    if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),info.getLocalizedMessage())) {
      for (Iterator iter=formPageList.iterator(); iter.hasNext(); ) {
        FormPageDef pagedef=(FormPageDef)iter.next();
        if (XMLSourcePage_ID.equals(pagedef.id)) {
          try {
            addPage(pagedef.createPage(),pagedef.displayName);
          }
 catch (          Exception e) {
          }
        }
      }
      return;
    }
  }
  for (Iterator iter=formPageList.iterator(); iter.hasNext(); ) {
    FormPageDef pagedef=(FormPageDef)iter.next();
    try {
      addPage(pagedef.createPage(),pagedef.displayName);
    }
 catch (    Exception e) {
      error=true;
    }
  }
  if (error) {
    setActivePage(XMLSourcePage_ID);
  }
}","protected void addPages(){
  List formPageList=EditorContributorManager.getInstance().getEditorContributor(getEditorSite().getId()).formPageList;
  boolean error=false;
  String fileName=getProvider().getInputPath(getEditorInput()).toOSString();
  List message=ModuleUtil.checkVersion(fileName);
  if (message.size() > 0) {
    IVersionInfo info=(IVersionInfo)message.get(0);
    if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),info.getLocalizedMessage())) {
      for (Iterator iter=formPageList.iterator(); iter.hasNext(); ) {
        FormPageDef pagedef=(FormPageDef)iter.next();
        if (XMLSourcePage_ID.equals(pagedef.id)) {
          try {
            addPage(pagedef.createPage(),pagedef.displayName);
            break;
          }
 catch (          Exception e) {
          }
        }
      }
      return;
    }
  }
  for (Iterator iter=formPageList.iterator(); iter.hasNext(); ) {
    FormPageDef pagedef=(FormPageDef)iter.next();
    try {
      addPage(pagedef.createPage(),pagedef.displayName);
    }
 catch (    Exception e) {
      error=true;
    }
  }
  if (error) {
    setActivePage(XMLSourcePage_ID);
  }
}",0.991869918699187
68660,"/** 
 * Unhook the root.
 * @param stack
 */
public void unhookCommandStack(WrapperCommandStack stack){
  stack.removeCommandStackListener(commandStackListener);
}","/** 
 * Unhook the root.
 * @param stack
 */
public void unhookCommandStack(WrapperCommandStack stack){
  if (stack != null) {
    stack.removeCommandStackListener(commandStackListener);
  }
}",0.9183098591549296
68661,"/** 
 * Hook the command stack, to add the command stack listener to the stack.
 * @param stack
 */
public void hookCommandStack(WrapperCommandStack stack){
  stack.addCommandStackListener(commandStackListener);
}","/** 
 * Hook the command stack, to add the command stack listener to the stack.
 * @param stack
 */
public void hookCommandStack(WrapperCommandStack stack){
  if (stack != null) {
    stack.addCommandStackListener(commandStackListener);
  }
}",0.9362637362637364
68662,"void setTitleCoordinate(double _dTitleRenderingCoordinate){
  dTitleRenderingCoordinate=_dTitleRenderingCoordinate;
}","public void setTitleCoordinate(double _dTitleRenderingCoordinate){
  dTitleRenderingCoordinate=_dTitleRenderingCoordinate;
}",0.970954356846473
68663,"/** 
 * @param aax
 * @param dAxisStart
 * @param dAxisEnd
 * @param dBlockStart
 * @param dBlockLength
 * @throws ChartException
 * @throws IllegalArgumentException
 */
private final void updateOverlayScales(AllAxes aax,double dAxisStart,double dAxisEnd,double dBlockStart,double dBlockLength) throws ChartException, IllegalArgumentException {
  final Axis[] axa=((ChartWithAxesImpl)getModel()).getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOrthogonal=((ChartWithAxesImpl)getModel()).getOrthogonalAxes(axPrimaryBase,false);
  IntersectionValue iv;
  AutoScale sc=null;
  OneAxis oaxOverlay=null;
  int iTickStyle, iAxisType, j, iTitleLocation;
  int iOverlayCount=aax.getOverlayCount();
  int iOrientation=aax.getOrientation();
  double dStart, dEnd, dAxisLabelsThickness;
  Label laAxisTitle;
  Series[] sea=getModel().getSeries(IConstants.ORTHOGONAL);
  Map<Series,LegendItemRenderingHints> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < iOverlayCount; i++) {
    j=iOverlayCount - i - 1;
    oaxOverlay=aax.getOverlay(j);
    iTickStyle=oaxOverlay.getCombinedTickStyle();
    iTitleLocation=oaxOverlay.getTitlePosition();
    laAxisTitle=oaxOverlay.getTitle();
    iAxisType=getAxisType(axaOrthogonal[j]);
    sc=AutoScale.computeScale(ids,oaxOverlay,new DataSetIterator(getMinMax(axaOrthogonal[j],iAxisType),iAxisType),iAxisType,dAxisStart,dAxisEnd,rtc,AUTO,1,iMarginPercent,this);
    oaxOverlay.set(sc);
    iv=oaxOverlay.getIntersectionValue();
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
    if (!sc.isStepFixed()) {
      final Object[] oaMinMax=sc.getMinMax();
      while (!sc.checkFit(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition())) {
        if (!sc.zoomOut()) {
          break;
        }
        sc.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
      }
    }
    dAxisLabelsThickness=sc.computeAxisLabelThickness(ids,oaxOverlay.getLabel(),iOrientation);
    double[] dDecorationThickness={0,0};
    for (int t=0; t < sea.length; t++) {
      LegendItemRenderingHints lirh=seriesRenderingHints.get(sea[t]);
      if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
        IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(oaxOverlay);
        if (iad != null) {
          double[] thickness=iad.computeDecorationThickness(ids,oaxOverlay);
          if (thickness[0] > dDecorationThickness[0]) {
            dDecorationThickness[0]=thickness[0];
          }
          if (thickness[1] > dDecorationThickness[1]) {
            dDecorationThickness[1]=thickness[1];
          }
        }
      }
    }
    double dAxisTitleThickness=0;
    sc.resetShifts();
    if (iOrientation == VERTICAL) {
      double dX=0, dX1=0, dX2=0;
      final boolean bTicksLeft=(iTickStyle & TICK_LEFT) == TICK_LEFT;
      final boolean bTicksRight=(iTickStyle & TICK_RIGHT) == TICK_RIGHT;
      final double dAppliedYAxisPlotSpacing=dYAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight();
        double maxWidth=boPlot.getWidth() * AXIS_TITLE_PERCENT;
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(cComp,ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_HEIGHT));
        dAxisTitleThickness=lbLimit.getMaxWidth();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan() * dPointToPixel;
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MIN) {
        dX=dBlockStart;
        dX-=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksLeft) {
          dX1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dX2+=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX1-=dDecorationThickness[0];
          dX2+=Math.max((bTicksRight ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX1 < dBlockStart) {
          final double dDelta=(dBlockStart - dX1);
          dX1=dBlockStart;
          dX+=dDelta;
          dX2+=dDelta;
        }
        dBlockStart+=(dX2 - dX1);
      }
 else       if (iv.getType() == IConstants.MAX) {
        dX=dBlockStart + dBlockLength;
        dX+=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksRight) {
          dX2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dX1-=Math.max(bTicksLeft ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
          dX2+=dDecorationThickness[1];
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX2 > dBlockStart + dBlockLength) {
          final double dDelta=dX2 - (dBlockStart + dBlockLength);
          dX2=dBlockStart + dBlockLength;
          dX-=dDelta;
          dX1-=dDelta;
        }
      }
      dBlockLength-=dX2 - dX1;
      double dDelta=0;
      if (iv.getType() == IConstants.MIN) {
        dDelta=-insCA.getLeft();
      }
 else       if (iv.getType() == IConstants.MAX) {
        dDelta=insCA.getRight();
      }
      oaxOverlay.setAxisCoordinate(dX + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == LEFT) ? dX1 + dDelta - 1 : dX2 + 1 - dAxisTitleThickness + dDelta);
    }
 else     if (iOrientation == HORIZONTAL) {
      double dY=0, dY1=dY, dY2=dY;
      final boolean bTicksAbove=(iTickStyle & TICK_ABOVE) == TICK_ABOVE;
      final boolean bTicksBelow=(iTickStyle & TICK_BELOW) == TICK_BELOW;
      final double dAppliedXAxisPlotSpacing=dXAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight() * AXIS_TITLE_PERCENT;
        double maxWidth=boPlot.getWidth();
        Label laAxisTitleV=aax.getPrimaryOrthogonal().getTitle();
        if (laAxisTitleV.isVisible()) {
          laAxisTitleV=goFactory.copyOf(laAxisTitleV);
          laAxisTitleV.getCaption().setValue(rtc.externalizedMessage(laAxisTitleV.getCaption().getValue()));
          LabelLimiter lbLimitV=new LabelLimiter(boPlot.getWidth() * AXIS_TITLE_PERCENT,boPlot.getWidth(),0);
          lbLimitV.computeWrapping(ids,laAxisTitleV);
          lbLimitV.limitLabelSize(cComp,ids,laAxisTitleV);
          maxWidth-=lbLimitV.getMaxWidth();
        }
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(cComp,ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_WIDTH));
        dAxisTitleThickness=lbLimit.getMaxHeight();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan() * dPointToPixel;
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MAX) {
        dY=dBlockStart;
        dY-=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksAbove) {
          dY1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dY2+=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == BELOW) {
          dY1-=dDecorationThickness[0];
          dY2+=Math.max((bTicksBelow ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY1 < dBlockStart) {
          final double dDelta=(dBlockStart - dY1);
          dY1=dBlockStart;
          dY+=dDelta;
          dY2+=dDelta;
        }
        dBlockStart+=(dY2 - dY1);
      }
 else       if (iv.getType() == IConstants.MIN) {
        dY=dBlockStart + dBlockLength;
        dY+=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksBelow) {
          dY2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == BELOW) {
          dY2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dY1-=Math.max(bTicksAbove ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
          dY2+=dDecorationThickness[1];
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY2 > dBlockStart + dBlockLength) {
          final double dDelta=dY2 - (dBlockStart + dBlockLength);
          dY2=dBlockStart + dBlockLength;
          dY-=dDelta;
          dY1-=dDelta;
        }
      }
      double dDelta=0;
      if (iv.getType() == IConstants.MAX) {
        dDelta=-insCA.getTop();
      }
 else       if (iv.getType() == IConstants.MIN) {
        dDelta=insCA.getBottom();
      }
      oaxOverlay.setAxisCoordinate(dY + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == ABOVE) ? dY1 + dDelta - 1 : dY2 + 1 - dAxisTitleThickness + dDelta);
      dBlockLength-=(dY2 - dY1);
    }
  }
  aax.setBlockCordinates(dBlockStart,dBlockLength);
}","/** 
 * @param aax
 * @param dAxisStart
 * @param dAxisEnd
 * @param dBlockStart
 * @param dBlockLength
 * @throws ChartException
 * @throws IllegalArgumentException
 */
private final void updateOverlayScales(AllAxes aax,double dAxisStart,double dAxisEnd,double dBlockStart,double dBlockLength) throws ChartException, IllegalArgumentException {
  final Axis[] axa=((ChartWithAxesImpl)getModel()).getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOrthogonal=((ChartWithAxesImpl)getModel()).getOrthogonalAxes(axPrimaryBase,false);
  IntersectionValue iv;
  AutoScale sc=null;
  OneAxis oaxOverlay=null;
  int iTickStyle, iAxisType, j, iTitleLocation;
  int iOverlayCount=aax.getOverlayCount();
  int iOrientation=aax.getOrientation();
  double dStart, dEnd, dAxisLabelsThickness;
  Label laAxisTitle;
  Series[] sea=getModel().getSeries(IConstants.ORTHOGONAL);
  Map<Series,LegendItemRenderingHints> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < iOverlayCount; i++) {
    j=iOverlayCount - i - 1;
    oaxOverlay=aax.getOverlay(j);
    iTickStyle=oaxOverlay.getCombinedTickStyle();
    iTitleLocation=oaxOverlay.getTitlePosition();
    laAxisTitle=oaxOverlay.getTitle();
    iAxisType=getAxisType(axaOrthogonal[j]);
    sc=AutoScale.computeScale(ids,oaxOverlay,new DataSetIterator(getMinMax(axaOrthogonal[j],iAxisType),iAxisType),iAxisType,dAxisStart,dAxisEnd,rtc,AUTO,1,iMarginPercent,this);
    oaxOverlay.set(sc);
    iv=oaxOverlay.getIntersectionValue();
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
    if (!sc.isStepFixed()) {
      final Object[] oaMinMax=sc.getMinMax();
      while (!sc.checkFit(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition())) {
        if (!sc.zoomOut()) {
          break;
        }
        sc.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
      }
    }
    dAxisLabelsThickness=sc.computeAxisLabelThickness(ids,oaxOverlay.getLabel(),iOrientation);
    double[] dDecorationThickness={0,0};
    for (int t=0; t < sea.length; t++) {
      LegendItemRenderingHints lirh=seriesRenderingHints.get(sea[t]);
      if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
        IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(oaxOverlay);
        if (iad != null) {
          double[] thickness=iad.computeDecorationThickness(ids,oaxOverlay);
          if (thickness[0] > dDecorationThickness[0]) {
            dDecorationThickness[0]=thickness[0];
          }
          if (thickness[1] > dDecorationThickness[1]) {
            dDecorationThickness[1]=thickness[1];
          }
        }
      }
    }
    double dAxisTitleThickness=0;
    sc.resetShifts();
    if (iOrientation == VERTICAL) {
      double dX=0, dX1=0, dX2=0;
      final boolean bTicksLeft=(iTickStyle & TICK_LEFT) == TICK_LEFT;
      final boolean bTicksRight=(iTickStyle & TICK_RIGHT) == TICK_RIGHT;
      final double dAppliedYAxisPlotSpacing=dYAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight();
        double maxWidth=boPlot.getWidth() * AXIS_TITLE_PERCENT;
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(cComp,ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_HEIGHT));
        dAxisTitleThickness=lbLimit.getMaxWidth();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan() * dPointToPixel;
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MIN) {
        dX=dBlockStart;
        dX-=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksLeft) {
          dX1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dX2+=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX1-=dDecorationThickness[0];
          dX2+=Math.max((bTicksRight ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX1 < dBlockStart) {
          final double dDelta=(dBlockStart - dX1);
          dX1=dBlockStart;
          dX+=dDelta;
          dX2+=dDelta;
        }
        dBlockStart+=(dX2 - dX1);
      }
 else       if (iv.getType() == IConstants.MAX) {
        dX=dBlockStart + dBlockLength;
        dX+=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksRight) {
          dX2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dX1-=Math.max(bTicksLeft ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
          dX2+=dDecorationThickness[1];
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX2 > dBlockStart + dBlockLength) {
          final double dDelta=dX2 - (dBlockStart + dBlockLength);
          dX2=dBlockStart + dBlockLength;
          dX-=dDelta;
          dX1-=dDelta;
        }
      }
 else {
        if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dX1-=Math.max(bTicksLeft ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
          dX2+=dDecorationThickness[1];
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
      }
      dBlockLength-=dX2 - dX1;
      double dDelta=0;
      if (iv.getType() == IConstants.MIN) {
        dDelta=-insCA.getLeft();
      }
 else       if (iv.getType() == IConstants.MAX) {
        dDelta=insCA.getRight();
      }
      oaxOverlay.setAxisCoordinate(dX + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == LEFT) ? dX1 + dDelta - 1 : dX2 + 1 - dAxisTitleThickness + dDelta);
    }
 else     if (iOrientation == HORIZONTAL) {
      double dY=0, dY1=dY, dY2=dY;
      final boolean bTicksAbove=(iTickStyle & TICK_ABOVE) == TICK_ABOVE;
      final boolean bTicksBelow=(iTickStyle & TICK_BELOW) == TICK_BELOW;
      final double dAppliedXAxisPlotSpacing=dXAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight() * AXIS_TITLE_PERCENT;
        double maxWidth=boPlot.getWidth();
        Label laAxisTitleV=aax.getPrimaryOrthogonal().getTitle();
        if (laAxisTitleV.isVisible()) {
          laAxisTitleV=goFactory.copyOf(laAxisTitleV);
          laAxisTitleV.getCaption().setValue(rtc.externalizedMessage(laAxisTitleV.getCaption().getValue()));
          LabelLimiter lbLimitV=new LabelLimiter(boPlot.getWidth() * AXIS_TITLE_PERCENT,boPlot.getWidth(),0);
          lbLimitV.computeWrapping(ids,laAxisTitleV);
          lbLimitV.limitLabelSize(cComp,ids,laAxisTitleV);
          maxWidth-=lbLimitV.getMaxWidth();
        }
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(cComp,ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_WIDTH));
        dAxisTitleThickness=lbLimit.getMaxHeight();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan() * dPointToPixel;
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MAX) {
        dY=dBlockStart;
        dY-=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksAbove) {
          dY1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dY2+=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == BELOW) {
          dY1-=dDecorationThickness[0];
          dY2+=Math.max((bTicksBelow ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY1 < dBlockStart) {
          final double dDelta=(dBlockStart - dY1);
          dY1=dBlockStart;
          dY+=dDelta;
          dY2+=dDelta;
        }
        dBlockStart+=(dY2 - dY1);
      }
 else       if (iv.getType() == IConstants.MIN) {
        dY=dBlockStart + dBlockLength;
        dY+=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksBelow) {
          dY2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == BELOW) {
          dY2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dY1-=Math.max(bTicksAbove ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
          dY2+=dDecorationThickness[1];
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY2 > dBlockStart + dBlockLength) {
          final double dDelta=dY2 - (dBlockStart + dBlockLength);
          dY2=dBlockStart + dBlockLength;
          dY-=dDelta;
          dY1-=dDelta;
        }
      }
 else {
        if (oaxOverlay.getLabelPosition() == BELOW) {
          dY2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dY1-=Math.max(bTicksAbove ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
          dY2+=dDecorationThickness[1];
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
      }
      double dDelta=0;
      if (iv.getType() == IConstants.MAX) {
        dDelta=-insCA.getTop();
      }
 else       if (iv.getType() == IConstants.MIN) {
        dDelta=insCA.getBottom();
      }
      oaxOverlay.setAxisCoordinate(dY + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == ABOVE) ? dY1 + dDelta - 1 : dY2 + 1 - dAxisTitleThickness + dDelta);
      dBlockLength-=(dY2 - dY1);
    }
  }
  aax.setBlockCordinates(dBlockStart,dBlockLength);
}",0.9226089072767096
68664,"/** 
 * The axes correspond to the lines/planes being rendered within the plot block. This is rendered with Z-order=2
 */
private final void renderAxesStructure(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final AllAxes aax=pwa.getAxes();
  if (pwa.getDimension() == IConstants.THREE_D) {
    renderEachAxis(ipr,p,aax.getPrimaryBase(),IConstants.BASE_AXIS);
    renderEachAxis(ipr,p,aax.getAncillaryBase(),IConstants.ANCILLARY_AXIS);
    renderEachAxis(ipr,p,aax.getPrimaryOrthogonal(),IConstants.ORTHOGONAL_AXIS);
  }
 else {
    final int iCount=aax.getOverlayCount() + 2;
    final OneAxis[] oaxa=new OneAxis[iCount];
    oaxa[0]=aax.getPrimaryBase();
    oaxa[1]=aax.getPrimaryOrthogonal();
    for (int i=0; i < iCount - 2; i++) {
      oaxa[i + 2]=aax.getOverlay(i);
      IntersectionValue iv=oaxa[i + 2].getIntersectionValue();
      if (iv.getType() == IConstants.VALUE) {
        oaxa[i + 2].setAxisCoordinate(Methods.getLocation(aax.getPrimaryBase().getScale(),iv.getValue()));
      }
    }
    for (int i=0; i < iCount; i++) {
      renderEachAxis(ipr,p,oaxa[i],IConstants.AXIS);
    }
  }
}","/** 
 * The axes correspond to the lines/planes being rendered within the plot block. This is rendered with Z-order=2
 */
private final void renderAxesStructure(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final AllAxes aax=pwa.getAxes();
  if (pwa.getDimension() == IConstants.THREE_D) {
    renderEachAxis(ipr,p,aax.getPrimaryBase(),IConstants.BASE_AXIS);
    renderEachAxis(ipr,p,aax.getAncillaryBase(),IConstants.ANCILLARY_AXIS);
    renderEachAxis(ipr,p,aax.getPrimaryOrthogonal(),IConstants.ORTHOGONAL_AXIS);
  }
 else {
    final int iCount=aax.getOverlayCount() + 2;
    final OneAxis[] oaxa=new OneAxis[iCount];
    oaxa[0]=aax.getPrimaryBase();
    oaxa[1]=aax.getPrimaryOrthogonal();
    for (int i=0; i < iCount - 2; i++) {
      oaxa[i + 2]=aax.getOverlay(i);
      IntersectionValue iv=oaxa[i + 2].getIntersectionValue();
      if (iv.getType() == IConstants.VALUE) {
        double dOrigin=Methods.getLocation(aax.getPrimaryBase().getScale(),iv.getValue());
        oaxa[i + 2].setAxisCoordinate(dOrigin);
        oaxa[i + 2].setTitleCoordinate(dOrigin + oaxa[i + 2].getTitleCoordinate());
      }
    }
    for (int i=0; i < iCount; i++) {
      renderEachAxis(ipr,p,oaxa[i],IConstants.AXIS);
    }
  }
}",0.9001623376623377
68665,"/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName()))           return null;
        }
        DesignElementFactory factory=DesignElementFactory.getInstance(tableHandle.getModuleHandle());
        GroupHandle groupHandle=factory.newTableGroup();
        int columnCount=tableHandle.getColumnCount();
        groupHandle.getHeader().add(factory.newTableRow(columnCount));
        groupHandle.getFooter().add(factory.newTableRow(columnCount));
        groupHandle.setName(model.getColumnName());
        Expression newKeyExpr=new Expression(UIUtil.convertToModelString(model.getColumnName(),true),""String_Node_Str"");
        groupHandle.setExpressionProperty(IGroupElementModel.KEY_EXPR_PROP,newKeyExpr);
        TOC toc=StructureFactory.createTOC();
        toc.setExpression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)));
        groupHandle.addTOC(toc);
        slotHandle.add(groupHandle,slotHandle.getCount());
        RowHandle rowHandle=((RowHandle)groupHandle.getHeader().get(0));
        CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
        cellHandle.getContent().add(dataHandle);
        return groupHandle;
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)) || DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        if (target instanceof CellHandle && ((CellHandle)target).getContainer().getContainer() instanceof GroupHandle) {
          CellHandle cellHandle=(CellHandle)target;
          GroupHandle group=(GroupHandle)cellHandle.getContainer().getContainer();
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,true);
          binding.setAggregateOn(group.getName());
          if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)))           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
 else           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
          binding.setExpression(ExpressionUtil.createJSRowExpression(model.getColumnName()));
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      DEUtil.getBindingHolder(container).addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}","/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName()))           return null;
        }
        DesignElementFactory factory=DesignElementFactory.getInstance(tableHandle.getModuleHandle());
        GroupHandle groupHandle=factory.newTableGroup();
        int columnCount=tableHandle.getColumnCount();
        groupHandle.getHeader().add(factory.newTableRow(columnCount));
        groupHandle.getFooter().add(factory.newTableRow(columnCount));
        groupHandle.setName(model.getColumnName());
        Expression newKeyExpr=new Expression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)),ExpressionType.JAVASCRIPT);
        groupHandle.setExpressionProperty(IGroupElementModel.KEY_EXPR_PROP,newKeyExpr);
        TOC toc=StructureFactory.createTOC();
        toc.setExpression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)));
        groupHandle.addTOC(toc);
        slotHandle.add(groupHandle,slotHandle.getCount());
        RowHandle rowHandle=((RowHandle)groupHandle.getHeader().get(0));
        CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
        cellHandle.getContent().add(dataHandle);
        return groupHandle;
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)) || DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        if (target instanceof CellHandle && ((CellHandle)target).getContainer().getContainer() instanceof GroupHandle) {
          CellHandle cellHandle=(CellHandle)target;
          GroupHandle group=(GroupHandle)cellHandle.getContainer().getContainer();
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,true);
          binding.setAggregateOn(group.getName());
          if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)))           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
 else           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
          binding.setExpression(ExpressionUtil.createJSRowExpression(model.getColumnName()));
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      DEUtil.getBindingHolder(container).addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}",0.9852136925258254
68666,"public void adaptExpressions(IChartObject cm){
  expAdaptHelper.adapt(cm);
}","public void adaptExpressions(IChartObject cm){
  boolean bCube=checkState(IDataServiceProvider.HAS_CUBE) || checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY);
  expAdaptHelper.adapt(cm,bCube);
}",0.5547445255474452
68667,"/** 
 * Create query definition by report item handle.
 * @param handle
 * @param parent
 * @return
 * @throws BirtException
 */
IDataQueryDefinition createQuery(ExtendedItemHandle handle,IDataQueryDefinition parent) throws BirtException {
  IModelAdapter modelAdapter=context.getDataRequestSession().getModelAdaptor();
  ChartReportItemUtil.adaptExpressions(cm,modelAdapter);
  if (handle.getDataSet() != null || (handle.getCube() == null && parent instanceof IBaseQueryDefinition)) {
    ReportItemHandle itemHandle=null;
    if (ChartItemUtil.isChartInheritGroups(handle)) {
      DesignElementHandle container=handle.getContainer();
      while (container != null) {
        if (container instanceof ListingHandle) {
          itemHandle=(ListingHandle)container;
          return new ChartSharingQueryHelper(handle,cm,modelAdapter).createQuery(parent);
        }
        container=container.getContainer();
      }
    }
 else {
      itemHandle=ChartItemUtil.getReportItemReference(handle);
    }
    if (itemHandle != null) {
      return new ChartSharingQueryHelper(itemHandle,cm,modelAdapter).createQuery(parent);
    }
    return new ChartBaseQueryHelper(handle,cm,modelAdapter).createBaseQuery(parent);
  }
 else   if (handle.getCube() != null || parent instanceof ICubeQueryDefinition) {
    if (handle.getContainer() instanceof MultiViewsHandle) {
      ExtendedItemHandle bindingHandle=(ExtendedItemHandle)ChartItemUtil.getReportItemReference(handle);
      IDataQueryDefinition cubeQuery=CrosstabQueryUtil.createCubeQuery((CrosstabReportItemHandle)bindingHandle.getReportItem(),parent,true,true,true,true,true,true);
      return cubeQuery;
    }
    return ChartReportItemUtil.instanceCubeQueryHelper(handle,cm,modelAdapter).createCubeQuery(parent);
  }
  return null;
}","/** 
 * Create query definition by report item handle.
 * @param handle
 * @param parent
 * @return
 * @throws BirtException
 */
IDataQueryDefinition createQuery(ExtendedItemHandle handle,IDataQueryDefinition parent) throws BirtException {
  IModelAdapter modelAdapter=context.getDataRequestSession().getModelAdaptor();
  if (handle.getDataSet() != null || (handle.getCube() == null && parent instanceof IBaseQueryDefinition)) {
    ChartReportItemUtil.adaptExpressions(cm,modelAdapter);
    ReportItemHandle itemHandle=null;
    if (ChartItemUtil.isChartInheritGroups(handle)) {
      DesignElementHandle container=handle.getContainer();
      while (container != null) {
        if (container instanceof ListingHandle) {
          itemHandle=(ListingHandle)container;
          return new ChartSharingQueryHelper(handle,cm,modelAdapter).createQuery(parent);
        }
        container=container.getContainer();
      }
    }
 else {
      itemHandle=ChartItemUtil.getReportItemReference(handle);
    }
    if (itemHandle != null) {
      return new ChartSharingQueryHelper(itemHandle,cm,modelAdapter).createQuery(parent);
    }
    return new ChartBaseQueryHelper(handle,cm,modelAdapter).createBaseQuery(parent);
  }
 else   if (handle.getCube() != null || parent instanceof ICubeQueryDefinition) {
    ChartReportItemUtil.adaptExpressions(cm,modelAdapter,true);
    if (handle.getContainer() instanceof MultiViewsHandle) {
      ExtendedItemHandle bindingHandle=(ExtendedItemHandle)ChartItemUtil.getReportItemReference(handle);
      IDataQueryDefinition cubeQuery=CrosstabQueryUtil.createCubeQuery((CrosstabReportItemHandle)bindingHandle.getReportItem(),parent,true,true,true,true,true,true);
      return cubeQuery;
    }
    return ChartReportItemUtil.instanceCubeQueryHelper(handle,cm,modelAdapter).createCubeQuery(parent);
  }
  return null;
}",0.4463991203958218
68668,"public void adapt(IChartObject ico){
  if (adapter == null) {
    return;
  }
  if (ico instanceof ChartWithAxes) {
    adaptChartWithAxes((ChartWithAxes)ico);
  }
 else   if (ico instanceof ChartWithoutAxes) {
    daptChartWithoutAxes((ChartWithoutAxes)ico);
  }
}","public void adapt(IChartObject ico,boolean bCube){
  if (adapter == null) {
    return;
  }
  this.bCube=bCube;
  if (ico instanceof ChartWithAxes) {
    adaptChartWithAxes((ChartWithAxes)ico);
  }
 else   if (ico instanceof ChartWithoutAxes) {
    daptChartWithoutAxes((ChartWithoutAxes)ico);
  }
}",0.2836879432624113
68669,"private static String checkGroupTypeOnYGrouping(ChartWizardContext context,Chart chart){
  String isConsistent=""String_Node_Str"";
  SeriesDefinition seriesdefinition=ChartUIUtil.getOrthogonalSeriesDefinitions(chart,0).get(0);
  if (seriesdefinition.getQuery() != null) {
    DataType queryDataType=context.getDataServiceProvider().getDataType(seriesdefinition.getQuery().getDefinition());
    if (queryDataType != null && seriesdefinition.getQuery().getGrouping() != null) {
      DataType groupDataType=seriesdefinition.getGrouping().getGroupType();
      if (queryDataType == DataType.NUMERIC_LITERAL && groupDataType == DataType.DATE_TIME_LITERAL) {
        return groupDataType.getName();
      }
 else       if (queryDataType == DataType.TEXT_LITERAL && groupDataType != DataType.TEXT_LITERAL) {
        return groupDataType.getName();
      }
    }
  }
  return isConsistent;
}","private static String checkGroupTypeOnYGrouping(ChartWizardContext context,Chart chart){
  String isConsistent=""String_Node_Str"";
  SeriesDefinition seriesdefinition=ChartUIUtil.getOrthogonalSeriesDefinitions(chart,0).get(0);
  if (seriesdefinition.getQuery() != null) {
    DataType queryDataType=context.getDataServiceProvider().getDataType(seriesdefinition.getQuery().getDefinition());
    if (queryDataType != null && seriesdefinition.getQuery().getGrouping() != null) {
      DataType groupDataType=seriesdefinition.getQuery().getGrouping().getGroupType();
      if (queryDataType == DataType.NUMERIC_LITERAL && groupDataType == DataType.DATE_TIME_LITERAL) {
        return groupDataType.getName();
      }
 else       if (queryDataType == DataType.TEXT_LITERAL && groupDataType != DataType.TEXT_LITERAL) {
        return groupDataType.getName();
      }
    }
  }
  return isConsistent;
}",0.9938097917839056
68670,"public String getBinding(String expression){
  try {
    return ExpressionUtil.getColumnBindingName(expression);
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
  return null;
}","@Override public String getBinding(String expression){
  try {
    return ExpressionUtil.getColumnBindingName(expression);
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
  return null;
}",0.9753694581280788
68671,"public String getResultSetColumnExpression(String columnName){
  return ExpressionUtil.createJSDataSetRowExpression(columnName);
}","@Override public String getResultSetColumnExpression(String columnName){
  return ExpressionUtil.createJSDataSetRowExpression(columnName);
}",0.9629629629629628
68672,"public String getBindingExpression(String bindingName){
  return ExpressionUtil.createJSRowExpression(bindingName);
}","@Override public String getBindingExpression(String bindingName){
  return ExpressionUtil.createJSRowExpression(bindingName);
}",0.9590163934426228
68673,"public String getParameterExpression(String paramName){
  return ExpressionUtil.createJSParameterExpression(paramName);
}","@Override public String getParameterExpression(String paramName){
  return ExpressionUtil.createJSParameterExpression(paramName);
}",0.9603174603174603
68674,"public String getDimensionExpression(String dimensionName,String levelName,String attributeName){
  if (attributeName == null) {
    return ExpressionUtil.createJSDimensionExpression(dimensionName,levelName);
  }
  return ExpressionUtil.createJSDimensionExpression(dimensionName,levelName,attributeName);
}","@Override public String getDimensionExpression(String dimensionName,String levelName,String attributeName){
  if (attributeName == null) {
    return ExpressionUtil.createJSDimensionExpression(dimensionName,levelName);
  }
  return ExpressionUtil.createJSDimensionExpression(dimensionName,levelName,attributeName);
}",0.9839228295819936
68675,"public String getCubeBindingExpression(String bindingName){
  return ExpressionUtil.createJSDataExpression(bindingName);
}","@Override public String getCubeBindingExpression(String bindingName){
  return ExpressionUtil.createJSDataExpression(bindingName);
}",0.9606299212598424
68676,"public String getMeasureExpression(String measureName){
  return ExpressionUtil.createJSMeasureExpression(measureName);
}","@Override public String getMeasureExpression(String measureName){
  return ExpressionUtil.createJSMeasureExpression(measureName);
}",0.9603174603174603
68677,"public int getDataType(){
  return DataType.ANY_TYPE;
}","public int getDataType(){
  return DataType.BOOLEAN_TYPE;
}",0.9473684210526316
68678,"private void createParameters(){
  if (contentPane != null && !contentPane.isDisposed()) {
    contentPane.dispose();
  }
  contentPane=new Composite(scrollPane,SWT.NONE);
  scrollPane.setContent(contentPane);
  contentPane.setLayoutData(new GridData(GridData.FILL_BOTH));
  contentPane.setLayout(new GridLayout());
  createParametersSection(params,contentPane);
  contentPane.setSize(contentPane.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  scrollPane.setMinSize(contentPane.computeSize(SWT.DEFAULT,SWT.DEFAULT));
}","private void createParameters(){
  if (contentPane != null && !contentPane.isDisposed()) {
    contentPane.dispose();
  }
  contentPane=new Composite(scrollPane,SWT.NONE);
  scrollPane.setContent(contentPane);
  contentPane.setLayoutData(new GridData(GridData.FILL_BOTH));
  contentPane.setLayout(new GridLayout());
  createParametersSection(params,contentPane);
  scrollPane.setMinSize(contentPane.computeSize(400,SWT.DEFAULT));
}",0.8695652173913043
68679,"public InputParameterDialog(Shell parentShell,List params,Map paramValues){
  super(parentShell);
  this.params=params;
  if (paramValues != null) {
    this.paramValues.putAll(paramValues);
  }
}","public InputParameterDialog(Shell parentShell,List params,Map paramValues){
  super(parentShell,Messages.getString(""String_Node_Str""));
  this.params=params;
  if (paramValues != null) {
    this.paramValues.putAll(paramValues);
  }
}",0.9116279069767442
68680,"protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
  layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
  layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
  layout.horizontalSpacing=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  applyDialogFont(composite);
  new Label(composite,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  scrollPane=new ScrolledComposite(composite,SWT.H_SCROLL | SWT.V_SCROLL);
  scrollPane.setExpandHorizontal(true);
  scrollPane.setExpandVertical(true);
  scrollPane.setLayoutData(new GridData(GridData.FILL_BOTH));
  createParameters();
  performed=true;
  return composite;
}","protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
  layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
  layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
  layout.horizontalSpacing=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  applyDialogFont(composite);
  new Label(composite,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  scrollPane=new ScrolledComposite(composite,SWT.H_SCROLL | SWT.V_SCROLL);
  scrollPane.setExpandHorizontal(true);
  scrollPane.setExpandVertical(true);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=400;
  gd.heightHint=400;
  scrollPane.setLayoutData(gd);
  createParameters();
  performed=true;
  return composite;
}",0.9351806036615536
68681,"private Composite createParamSection(ScalarParameter param,Composite parent){
  boolean isRequired=param.getHandle().isRequired();
  if (isRequired) {
    isRequiredParameters.add(param.getHandle().getName());
  }
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  container.setLayout(layout);
  Label label=new Label(container,SWT.NONE);
  label.setText(param.getHandle().getDisplayLabel() + (isRequired ? ""String_Node_Str"" : ""String_Node_Str""));
  if (param instanceof StaticTextParameter) {
    final StaticTextParameter textParam=(StaticTextParameter)param;
    String value=textParam.getDefaultValue();
    dataTypeCheckList.add(textParam);
    Text input=new Text(container,SWT.BORDER);
    input.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    input.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        Text input=(Text)e.getSource();
        paramValues.put(textParam.getHandle().getName(),input.getText());
      }
    }
);
    if (paramValues.containsKey(textParam.getHandle().getName())) {
      value=paramValues.get(textParam.getHandle().getName()).toString();
    }
    if (value != null) {
      input.setText(value);
    }
  }
 else   if (param instanceof RadioParameter) {
    final RadioParameter radioParameter=(RadioParameter)param;
    Object value=null;
    try {
      value=radioParameter.converToDataType(radioParameter.getDefaultValue());
    }
 catch (    BirtException e) {
    }
    if (paramValues.containsKey(radioParameter.getHandle().getName())) {
      value=paramValues.get(radioParameter.getHandle().getName());
    }
    List list=radioParameter.getValueList();
    if (!isRequired) {
      list.add(InputParameterDialog.nullValueChoice);
    }
    for (int i=0; i < list.size(); i++) {
      if (i > 0) {
        new Label(container,SWT.NONE);
      }
      IParameterSelectionChoice choice=(IParameterSelectionChoice)list.get(i);
      Button button=new Button(container,SWT.RADIO);
      button.setText(choice.getLabel());
      button.setData(choice.getValue());
      if (choice.getValue() != null && choice.getValue().equals(value)) {
        button.setSelection(true);
      }
 else       if (value == null && choice.getLabel().equals(NULL_VALUE_STR)) {
        button.setSelection(true);
      }
      button.addSelectionListener(new SelectionListener(){
        public void widgetDefaultSelected(        SelectionEvent e){
        }
        public void widgetSelected(        SelectionEvent e){
          Button button=(Button)e.getSource();
          paramValues.put(radioParameter.getHandle().getName(),button.getData());
        }
      }
);
    }
  }
 else   if (param instanceof ListingParameter) {
    final ListingParameter listParam=(ListingParameter)param;
    if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(listParam.getHandle().getParamType())) {
      createList(container,listParam);
      GridData labelLayout=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
      label.setLayoutData(labelLayout);
    }
 else {
      createCombo(container,listParam);
    }
  }
  return container;
}","private Composite createParamSection(ScalarParameter param,Composite parent){
  boolean isRequired=param.getHandle().isRequired();
  if (isRequired) {
    isRequiredParameters.add(param.getHandle().getName());
  }
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  container.setLayout(layout);
  Label label=new Label(container,SWT.NONE);
  label.setText(param.getHandle().getDisplayLabel() + (isRequired ? ""String_Node_Str"" : ""String_Node_Str""));
  if (param instanceof StaticTextParameter) {
    final StaticTextParameter textParam=(StaticTextParameter)param;
    String value=textParam.getDefaultValue();
    dataTypeCheckList.add(textParam);
    Text input=new Text(container,SWT.BORDER);
    input.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    input.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        Text input=(Text)e.getSource();
        paramValues.put(textParam.getHandle().getName(),input.getText());
      }
    }
);
    if (paramValues.containsKey(textParam.getHandle().getName())) {
      value=paramValues.get(textParam.getHandle().getName()).toString();
    }
    if (value != null) {
      input.setText(value);
    }
  }
 else   if (param instanceof RadioParameter) {
    final RadioParameter radioParameter=(RadioParameter)param;
    Object value=null;
    try {
      value=radioParameter.converToDataType(radioParameter.getDefaultValue());
    }
 catch (    BirtException e) {
    }
    if (paramValues.containsKey(radioParameter.getHandle().getName())) {
      value=paramValues.get(radioParameter.getHandle().getName());
    }
    List list=radioParameter.getValueList();
    if (!isRequired) {
      list.add(InputParameterDialog.nullValueChoice);
    }
    for (int i=0; i < list.size(); i++) {
      if (i > 0) {
        new Label(container,SWT.NONE);
      }
      IParameterSelectionChoice choice=(IParameterSelectionChoice)list.get(i);
      Button button=new Button(container,SWT.RADIO);
      String choiceLabel=choice.getLabel();
      if (choiceLabel == null) {
        choiceLabel=choice.getValue() == null ? NULL_VALUE_STR : String.valueOf(choice.getValue());
      }
      button.setText(choiceLabel);
      button.setData(choice.getValue());
      if (choice.getValue() != null && choice.getValue().equals(value)) {
        button.setSelection(true);
      }
 else       if (value == null && choice.getLabel().equals(NULL_VALUE_STR)) {
        button.setSelection(true);
      }
      button.addSelectionListener(new SelectionListener(){
        public void widgetDefaultSelected(        SelectionEvent e){
        }
        public void widgetSelected(        SelectionEvent e){
          Button button=(Button)e.getSource();
          paramValues.put(radioParameter.getHandle().getName(),button.getData());
        }
      }
);
    }
  }
 else   if (param instanceof ListingParameter) {
    final ListingParameter listParam=(ListingParameter)param;
    if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(listParam.getHandle().getParamType())) {
      createList(container,listParam);
      GridData labelLayout=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
      label.setLayoutData(labelLayout);
    }
 else {
      createCombo(container,listParam);
    }
  }
  return container;
}",0.9684908789386402
68682,"public void updateText(String expression){
  if (btnBuilder != null) {
    btnBuilder.setExpression(expression);
  }
}","public void updateText(String expression){
  if (btnBuilder != null) {
    if (cmbDefinition != null) {
      cmbDefinition.removeModifyListener(this);
    }
 else     if (txtDefinition != null) {
      txtDefinition.removeModifyListener(this);
    }
    btnBuilder.setExpression(expression);
    if (cmbDefinition != null) {
      cmbDefinition.addModifyListener(this);
    }
 else     if (txtDefinition != null) {
      txtDefinition.addModifyListener(this);
    }
  }
}",0.3898305084745763
68683,"public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  Label lblDesc=null;
  if (description != null && description.length() > 0) {
    lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  boolean isSharingChart=context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY);
  final Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  IDataServiceProvider provider=context.getDataServiceProvider();
  boolean needComboField=predefinedQuery != null && predefinedQuery.length > 0 && (provider.checkState(IDataServiceProvider.SHARE_QUERY) || provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS));
  needComboField&=!isSharingChart;
  boolean hasContentAssist=(!isSharingChart && predefinedQuery != null && predefinedQuery.length > 0);
  if (needComboField) {
    Composite control=new Composite(cmpTop,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.widthHint=80;
    control.setLayoutData(gd);
    GridLayout gl=new GridLayout();
    FieldAssistHelper.getInstance().initDecorationMargin(gl);
    control.setLayout(gl);
    cmbDefinition=new CCombo(control,context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) ? SWT.READ_ONLY | SWT.BORDER : SWT.BORDER);
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.grabExcessHorizontalSpace=true;
    cmbDefinition.setLayoutData(gd);
    if (hasContentAssist) {
      String[] items=getContentItems(predefinedQuery);
      if (items != null) {
        new CComboAssistField(cmbDefinition,null,items);
      }
    }
    if (predefinedQuery.length > 0) {
      populateExprComboItems(predefinedQuery);
    }
 else     if (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str"")) {
      cmbDefinition.setEnabled(false);
    }
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
        String text=cmbDefinition.getText();
        if (!isTableSharedBinding() && text.equals(oldQuery)) {
          return;
        }
        updateQuery(text);
        if (!oldQuery.equals(text) && queryType == ChartUIConstants.QUERY_VALUE) {
          if (context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,text)) {
            Event e=new Event();
            e.data=BaseDataDefinitionComponent.this;
            e.widget=cmbDefinition;
            e.type=IChartDataSheet.EVENT_QUERY;
            context.getDataSheet().notifyListeners(e);
          }
        }
        if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
        if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
          cmbDefinition.setEnabled(false);
        }
      }
    }
);
    cmbDefinition.addModifyListener(this);
    cmbDefinition.addFocusListener(this);
    cmbDefinition.addKeyListener(this);
    initComboExprText();
  }
 else {
    Composite control=cmpTop;
    if (hasContentAssist) {
      control=new Composite(cmpTop,SWT.NONE);
      GridData gd=new GridData(GridData.FILL_BOTH);
      gd.widthHint=80;
      control.setLayoutData(gd);
      GridLayout gl=new GridLayout();
      FieldAssistHelper.getInstance().initDecorationMargin(gl);
      control.setLayout(gl);
    }
    txtDefinition=new Text(control,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    gdTXTDefinition.grabExcessHorizontalSpace=true;
    txtDefinition.setLayoutData(gdTXTDefinition);
    txtDefinition.addModifyListener(this);
    txtDefinition.addFocusListener(this);
    txtDefinition.addKeyListener(this);
    if (hasContentAssist) {
      String[] items=getContentItems(predefinedQuery);
      if (items != null) {
        TextAssistField taf=new TextAssistField(txtDefinition,null,items);
        ((CTextContentAdapter)taf.getContentAdapter()).addContentChangeListener(new IContentChangeListener(){
          public void contentChanged(          Control control,          Object newValue,          Object oldValue){
            isQueryModified=true;
            saveQuery();
          }
        }
);
      }
    }
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,this);
  try {
    btnBuilder=(IExpressionButton)context.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpTop,getInputControl(),context.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,new Listener(){
      public void handleEvent(      Event event){
        if (event.data instanceof String[]) {
          handleBuilderAction((String[])event.data);
        }
      }
    }
);
    if (query != null) {
      btnBuilder.setExpression(query.getDefinition());
    }
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  setColor();
  boolean isCubeNoMultiDimensions=(provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) && !provider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS);
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) || context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    if (txtDefinition != null && (!context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY) || isSharingChart)) {
      if (!ChartUIConstants.QUERY_OPTIONAL.equals(queryType) || !provider.checkState(IDataServiceProvider.SHARE_TABLE_QUERY) || getQuery().getDefinition() == null || getQuery().getDefinition().trim().length() == 0) {
        txtDefinition.setEnabled(false);
      }
    }
    btnBuilder.setEnabled(false);
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  if (cmbDefinition != null && ChartUIConstants.QUERY_OPTIONAL.equals(queryType) && isCubeNoMultiDimensions) {
    cmbDefinition.setEnabled(false);
    btnBuilder.setEnabled(false);
  }
  setTooltipForInputControl();
  boolean isRequiredField=(ChartUIConstants.QUERY_CATEGORY.equals(queryType));
  if (lblDesc != null && isRequiredField) {
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(lblDesc);
  }
  return cmpTop;
}","public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  Label lblDesc=null;
  if (description != null && description.length() > 0) {
    lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  boolean isSharingChart=context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY);
  final Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  IDataServiceProvider provider=context.getDataServiceProvider();
  boolean needComboField=predefinedQuery != null && predefinedQuery.length > 0 && (provider.checkState(IDataServiceProvider.SHARE_QUERY) || provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS));
  needComboField&=!isSharingChart;
  boolean hasContentAssist=(!isSharingChart && predefinedQuery != null && predefinedQuery.length > 0);
  if (needComboField) {
    Composite control=new Composite(cmpTop,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.widthHint=80;
    control.setLayoutData(gd);
    GridLayout gl=new GridLayout();
    FieldAssistHelper.getInstance().initDecorationMargin(gl);
    control.setLayout(gl);
    cmbDefinition=new CCombo(control,context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) ? SWT.READ_ONLY | SWT.BORDER : SWT.BORDER);
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.grabExcessHorizontalSpace=true;
    cmbDefinition.setLayoutData(gd);
    if (hasContentAssist) {
      String[] items=getContentItems(predefinedQuery);
      if (items != null) {
        new CComboAssistField(cmbDefinition,null,items);
      }
    }
    if (predefinedQuery.length > 0) {
      populateExprComboItems(predefinedQuery);
    }
 else     if (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str"")) {
      cmbDefinition.setEnabled(false);
    }
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
        String text=cmbDefinition.getText();
        if (!isTableSharedBinding() && text.equals(oldQuery)) {
          return;
        }
        updateQuery(text);
        if (!oldQuery.equals(text) && queryType == ChartUIConstants.QUERY_VALUE) {
          if (context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,text)) {
            Event e=new Event();
            e.data=BaseDataDefinitionComponent.this;
            e.widget=cmbDefinition;
            e.type=IChartDataSheet.EVENT_QUERY;
            context.getDataSheet().notifyListeners(e);
          }
        }
        if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
        if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
          cmbDefinition.setEnabled(false);
        }
      }
    }
);
    initComboExprText();
  }
 else {
    Composite control=cmpTop;
    if (hasContentAssist) {
      control=new Composite(cmpTop,SWT.NONE);
      GridData gd=new GridData(GridData.FILL_BOTH);
      gd.widthHint=80;
      control.setLayoutData(gd);
      GridLayout gl=new GridLayout();
      FieldAssistHelper.getInstance().initDecorationMargin(gl);
      control.setLayout(gl);
    }
    txtDefinition=new Text(control,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    gdTXTDefinition.grabExcessHorizontalSpace=true;
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (hasContentAssist) {
      String[] items=getContentItems(predefinedQuery);
      if (items != null) {
        TextAssistField taf=new TextAssistField(txtDefinition,null,items);
        ((CTextContentAdapter)taf.getContentAdapter()).addContentChangeListener(new IContentChangeListener(){
          public void contentChanged(          Control control,          Object newValue,          Object oldValue){
            isQueryModified=true;
            saveQuery();
          }
        }
);
      }
    }
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,this);
  try {
    btnBuilder=(IExpressionButton)context.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpTop,getInputControl(),context.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,new Listener(){
      public void handleEvent(      Event event){
        if (event.data instanceof String[]) {
          handleBuilderAction((String[])event.data);
        }
      }
    }
);
    if (query != null) {
      btnBuilder.setExpression(query.getDefinition());
    }
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  setColor();
  boolean isCubeNoMultiDimensions=(provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) && !provider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS);
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) || context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    if (txtDefinition != null && (!context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY) || isSharingChart)) {
      if (!ChartUIConstants.QUERY_OPTIONAL.equals(queryType) || !provider.checkState(IDataServiceProvider.SHARE_TABLE_QUERY) || getQuery().getDefinition() == null || getQuery().getDefinition().trim().length() == 0) {
        txtDefinition.setEnabled(false);
      }
    }
    btnBuilder.setEnabled(false);
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  if (cmbDefinition != null && ChartUIConstants.QUERY_OPTIONAL.equals(queryType) && isCubeNoMultiDimensions) {
    cmbDefinition.setEnabled(false);
    btnBuilder.setEnabled(false);
  }
  setTooltipForInputControl();
  boolean isRequiredField=(ChartUIConstants.QUERY_CATEGORY.equals(queryType));
  if (lblDesc != null && isRequiredField) {
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(lblDesc);
  }
  if (cmbDefinition != null) {
    cmbDefinition.addModifyListener(this);
    cmbDefinition.addFocusListener(this);
    cmbDefinition.addKeyListener(this);
  }
 else   if (txtDefinition != null) {
    txtDefinition.addModifyListener(this);
    txtDefinition.addFocusListener(this);
    txtDefinition.addKeyListener(this);
  }
  return cmpTop;
}",0.9626458178207992
68684,"public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
if (event.widget == btnInherit || event.widget == cmbDataItems) {
List<SeriesDefinition> sds=ChartUIUtil.getBaseSeriesDefinitions(getChartModel());
if (sds != null && sds.size() > 0) {
SeriesDefinition base=sds.get(0);
if (selectDataTypes.get(cmbDataItems.getSelectionIndex()).intValue() == SELECT_DATA_SET && !ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() == null) {
base.setGrouping(SeriesGroupingImpl.create());
}
base.getGrouping().setEnabled(true);
}
 else if (ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() != null) {
base.getGrouping().setEnabled(false);
}
}
}
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
String[] datasets=getDataServiceProvider().getAllDataSets();
currentData=datasets[datasets.length - 1];
getDataServiceProvider().setDataSet(currentData);
cmbDataItems.setText(currentData);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
String[] datacubes=getDataServiceProvider().getAllDataCubes();
currentData=datacubes[datacubes.length - 1];
getDataServiceProvider().setDataCube(currentData);
cmbDataItems.setText(currentData);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
if (event.widget == btnInherit || event.widget == cmbDataItems) {
List<SeriesDefinition> sds=ChartUIUtil.getBaseSeriesDefinitions(getChartModel());
if (sds != null && sds.size() > 0) {
SeriesDefinition base=sds.get(0);
if (selectDataTypes.get(cmbDataItems.getSelectionIndex()).intValue() == SELECT_DATA_SET && !ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() == null) {
base.setGrouping(SeriesGroupingImpl.create());
}
base.getGrouping().setEnabled(true);
}
 else if (ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() != null) {
base.getGrouping().setEnabled(false);
}
}
}
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}",0.9578231292517008
68685,"/** 
 * Returns the medium font size.
 */
public float getMediumFontSize(){
  return 9f * 1000.0f;
}","/** 
 * Returns the medium font size.
 */
public float getMediumFontSize(){
  return 9f;
}",0.9473684210526316
68686,"/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  CSSContext ctx=engine.getCSSContext();
  float fs=ctx.getMediumFontSize();
  if (value == CSSValueConstants.XX_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f/ 1.2f);
  }
  if (value == CSSValueConstants.X_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f);
  }
  if (value == CSSValueConstants.SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f);
  }
  if (value == CSSValueConstants.MEDIUM_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs);
  }
  if (value == CSSValueConstants.LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f);
  }
  if (value == CSSValueConstants.X_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f);
  }
  if (value == CSSValueConstants.XX_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f* 1.2f);
  }
  float scale=1.0f;
  boolean doParentRelative=false;
  if (value == CSSValueConstants.SMALLER_VALUE) {
    doParentRelative=true;
    scale=1.0f / 1.2f;
  }
 else   if (value == CSSValueConstants.LARGER_VALUE) {
    doParentRelative=true;
    scale=1.2f;
  }
 else   if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_EMS:
      doParentRelative=true;
    scale=value.getFloatValue();
  break;
case CSSPrimitiveValue.CSS_EXS:
doParentRelative=true;
scale=value.getFloatValue() * 0.5f;
break;
case CSSPrimitiveValue.CSS_PERCENTAGE:
doParentRelative=true;
scale=value.getFloatValue() * 0.01f;
break;
}
}
if (doParentRelative) {
CSSStylableElement parent=(CSSStylableElement)elt.getParent();
if (parent != null) {
IStyle style=parent.getComputedStyle();
if (style != null) {
Value fontSize=(Value)style.getProperty(IStyle.STYLE_FONT_SIZE);
if (fontSize != null) {
fs=fontSize.getFloatValue();
return new FloatValue(fontSize.getPrimitiveType(),fs * scale);
}
}
}
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * scale);
}
if (value.getPrimitiveType() == CSSPrimitiveValue.CSS_NUMBER) {
return super.computeValue(elt,engine,idx,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,value.getFloatValue()));
}
return super.computeValue(elt,engine,idx,value);
}","/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  CSSContext ctx=engine.getCSSContext();
  float fs=ctx.getMediumFontSize();
  if (value == CSSValueConstants.XX_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_PT,fs / 1.2f / 1.2f/ 1.2f);
  }
  if (value == CSSValueConstants.X_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_PT,fs / 1.2f / 1.2f);
  }
  if (value == CSSValueConstants.SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_PT,fs / 1.2f);
  }
  if (value == CSSValueConstants.MEDIUM_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_PT,fs);
  }
  if (value == CSSValueConstants.LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_PT,fs * 1.2f);
  }
  if (value == CSSValueConstants.X_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_PT,fs * 1.2f * 1.2f);
  }
  if (value == CSSValueConstants.XX_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_PT,fs * 1.2f * 1.2f* 1.2f);
  }
  float scale=1.0f;
  boolean doParentRelative=false;
  if (value == CSSValueConstants.SMALLER_VALUE) {
    doParentRelative=true;
    scale=1.0f / 1.2f;
  }
 else   if (value == CSSValueConstants.LARGER_VALUE) {
    doParentRelative=true;
    scale=1.2f;
  }
 else   if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_EMS:
      doParentRelative=true;
    scale=value.getFloatValue();
  break;
case CSSPrimitiveValue.CSS_EXS:
doParentRelative=true;
scale=value.getFloatValue() * 0.5f;
break;
case CSSPrimitiveValue.CSS_PERCENTAGE:
doParentRelative=true;
scale=value.getFloatValue() * 0.01f;
break;
}
}
if (doParentRelative) {
CSSStylableElement parent=(CSSStylableElement)elt.getParent();
if (parent != null) {
IStyle style=parent.getComputedStyle();
if (style != null) {
Value fontSize=(Value)style.getProperty(IStyle.STYLE_FONT_SIZE);
if (fontSize != null) {
fs=fontSize.getFloatValue();
return new FloatValue(fontSize.getPrimitiveType(),fs * scale);
}
}
}
return new FloatValue(CSSPrimitiveValue.CSS_PT,fs * scale);
}
if (value.getPrimitiveType() == CSSPrimitiveValue.CSS_NUMBER) {
return super.computeValue(elt,engine,idx,new FloatValue(CSSPrimitiveValue.CSS_PT,value.getFloatValue()));
}
return super.computeValue(elt,engine,idx,value);
}",0.9570328334008916
68687,"public int getLineHeight(){
  if (content != null) {
    IStyle contentStyle=content.getComputedStyle();
    return PropertyUtil.getLineHeight(contentStyle.getLineHeight());
  }
  return 0;
}","public int getLineHeight(){
  if (content != null) {
    IStyle contentStyle=content.getComputedStyle();
    return PropertyUtil.getDimensionValueConsiderDpi(contentStyle.getProperty(IStyle.STYLE_LINE_HEIGHT),content);
  }
  return 0;
}",0.7259953161592506
68688,"protected void paintControl(PaintEvent e){
  e.gc.setFont(getFont());
  Color fg=isEnabled() ? getForeground() : new Color(e.gc.getDevice(),UIUtil.blend(getBackground().getRGB(),getForeground().getRGB(),70));
  try {
    e.gc.setForeground(fg);
    Color bgColor=e.gc.getBackground();
    e.gc.setBackground(e.gc.getForeground());
    Rectangle size=button.getBounds();
    if (menu != null) {
      Rectangle rect=new Rectangle(size.width - 12,0,TRIANGLE_WIDTH,size.height);
      UIUtil.drawArrow(e.gc,rect,SWT.DOWN);
    }
    e.gc.setBackground(bgColor);
    int height=e.gc.textExtent(""String_Node_Str"",DRAW_FLAGS).y;
    if (!isFixed && image != null) {
      int imageHeight=image.getImageData().height;
      if (height < imageHeight)       height=imageHeight;
    }
    if (defaultSize.y > size.height) {
      height=height - (defaultSize.y - size.height);
      height=e.gc.textExtent(""String_Node_Str"",DRAW_FLAGS).y > height ? e.gc.textExtent(""String_Node_Str"",DRAW_FLAGS).y : height;
    }
    int left=WIDTH_MORE + MARGIN_GAP - 1;
    if (menu == null)     left=MARGIN_GAP - 1;
    if (menu != null) {
      Color fgColor=e.gc.getForeground();
      e.gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
      e.gc.drawLine(size.width - left,(size.height - height) / 2,size.width - left,(size.height - height) / 2 + height);
      e.gc.setForeground(fgColor);
    }
    if (text != null && text.trim().length() > 0) {
      int width=e.gc.textExtent(text,DRAW_FLAGS).x;
      int fontHeight=e.gc.textExtent(text,DRAW_FLAGS).y;
      left+=(MARGIN_GAP + width);
      e.gc.drawText(text,size.width - left,(size.height - fontHeight) / 2,DRAW_FLAGS | SWT.DRAW_TRANSPARENT);
    }
    if (image != null) {
      int imageWidth=image.getImageData().width;
      int imageHeight=image.getImageData().height;
      Image imageTemp;
      if (isEnabled())       imageTemp=new Image(e.gc.getDevice(),image,SWT.IMAGE_COPY);
 else       imageTemp=new Image(e.gc.getDevice(),image,SWT.IMAGE_DISABLE);
      if (isFixed) {
        imageWidth=imageWidth > IMAGE_WIDTH ? IMAGE_WIDTH : imageWidth;
        imageHeight=imageHeight > IMAGE_HEIGHT ? IMAGE_HEIGHT : imageHeight;
      }
      left+=(MARGIN_GAP + imageWidth);
      e.gc.drawImage(imageTemp,0,0,imageTemp.getImageData().width,imageTemp.getImageData().height,size.width - left,Math.round(((float)(size.height - imageHeight) / 2)),imageWidth,imageHeight);
      imageTemp.dispose();
    }
  }
  finally {
    if (!isEnabled() && fg != null)     fg.dispose();
  }
}","protected void paintControl(PaintEvent e){
  e.gc.setFont(getFont());
  Color fg=isEnabled() ? getForeground() : new Color(e.gc.getDevice(),UIUtil.blend(getBackground().getRGB(),getForeground().getRGB(),70));
  try {
    e.gc.setForeground(fg);
    Color bgColor=e.gc.getBackground();
    e.gc.setBackground(e.gc.getForeground());
    Rectangle size=button.getBounds();
    if (menu != null) {
      Rectangle rect=new Rectangle(size.width - 12,0,TRIANGLE_WIDTH,size.height);
      UIUtil.drawArrow(e.gc,rect,SWT.DOWN);
    }
    e.gc.setBackground(bgColor);
    int height=e.gc.textExtent(""String_Node_Str"",DRAW_FLAGS).y;
    if (!isFixed && image != null) {
      int imageHeight=image.getImageData().height;
      if (height < imageHeight)       height=imageHeight;
    }
    if (defaultSize.y > size.height) {
      height=height - (defaultSize.y - size.height);
      height=e.gc.textExtent(""String_Node_Str"",DRAW_FLAGS).y > height ? e.gc.textExtent(""String_Node_Str"",DRAW_FLAGS).y : height;
    }
    int left=WIDTH_MORE + MARGIN_GAP - 1;
    if (menu == null)     left=MARGIN_GAP - 1;
    if (menu != null) {
      Color fgColor=e.gc.getForeground();
      e.gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
      e.gc.drawLine(size.width - left,(size.height - height) / 2,size.width - left,(size.height - height) / 2 + height);
      e.gc.setForeground(fgColor);
    }
    if (text != null && text.trim().length() > 0) {
      int width=e.gc.textExtent(text,DRAW_FLAGS).x;
      int fontHeight=e.gc.textExtent(text,DRAW_FLAGS).y;
      left+=(MARGIN_GAP + width);
      e.gc.drawText(text,(size.width - left) / 2 + MARGIN_GAP,(size.height - fontHeight) / 2,DRAW_FLAGS | SWT.DRAW_TRANSPARENT);
    }
    if (image != null) {
      int imageWidth=image.getImageData().width;
      int imageHeight=image.getImageData().height;
      Image imageTemp;
      if (isEnabled())       imageTemp=new Image(e.gc.getDevice(),image,SWT.IMAGE_COPY);
 else       imageTemp=new Image(e.gc.getDevice(),image,SWT.IMAGE_DISABLE);
      if (isFixed) {
        imageWidth=imageWidth > IMAGE_WIDTH ? IMAGE_WIDTH : imageWidth;
        imageHeight=imageHeight > IMAGE_HEIGHT ? IMAGE_HEIGHT : imageHeight;
      }
      left+=(MARGIN_GAP + imageWidth);
      e.gc.drawImage(imageTemp,0,0,imageTemp.getImageData().width,imageTemp.getImageData().height,size.width - left,Math.round(((float)(size.height - imageHeight) / 2)),imageWidth,imageHeight);
      imageTemp.dispose();
    }
  }
  finally {
    if (!isEnabled() && fg != null)     fg.dispose();
  }
}",0.9962868868477625
68689,"/** 
 * Used in filter select value dialog in layout.
 * @param expression
 * @param dataSetHandle
 * @param binding
 * @param useDataSetFilter
 * @return
 * @throws BirtException
 */
public static List getSelectValueFromBinding(Expression expression,DataSetHandle dataSetHandle,Iterator binding,boolean useDataSetFilter) throws BirtException {
}","/** 
 * Used in filter select value dialog in layout with group definition.
 * @param expression
 * @param dataSetHandle
 * @param binding The iterator of ComputedColumnHandle
 * @param groupIterator The iterator of GroupHandle
 * @param useDataSetFilter
 * @return
 * @throws BirtException
 */
public static List getSelectValueFromBinding(Expression expression,DataSetHandle dataSetHandle,Iterator binding,Iterator groupIterator,boolean useDataSetFilter) throws BirtException {
}",0.837772397094431
68690,"private void addMenu(IMenuManager manager,Object item){
  if (item instanceof IAction) {
    manager.add((IAction)item);
  }
 else   if (item instanceof IContributionItem) {
    manager.add((IContributionItem)item);
  }
  if (getDataServiceProvider().isPartChart()) {
    if (item instanceof IAction) {
      ((IAction)item).setEnabled(false);
    }
  }
}","private void addMenu(IMenuManager manager,Object item){
  if (item instanceof IAction) {
    manager.add((IAction)item);
  }
 else   if (item instanceof IContributionItem) {
    manager.add((IContributionItem)item);
  }
 else   if (item instanceof List<?>) {
    for (    Object o : (List<?>)item) {
      addMenu(manager,o);
    }
  }
  if (getDataServiceProvider().isPartChart()) {
    if (item instanceof IAction) {
      ((IAction)item).setEnabled(false);
    }
  }
}",0.8595641646489104
68691,"protected Object getMenuForDimension(Chart chart,String expr){
  if (((Boolean)dataProvider.checkData(ChartUIConstants.QUERY_CATEGORY,expr)).booleanValue()) {
    return getBaseSeriesMenu(getChartModel(),expr);
  }
  if (dataProvider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS) && ((Boolean)dataProvider.checkData(ChartUIConstants.QUERY_OPTIONAL,expr)).booleanValue()) {
    return getGroupSeriesMenu(getChartModel(),expr);
  }
  return null;
}","protected Object getMenuForDimension(Chart chart,String expr){
  List<Object> menus=new ArrayList<Object>(2);
  if (((Boolean)dataProvider.checkData(ChartUIConstants.QUERY_CATEGORY,expr)).booleanValue()) {
    menus.add(getBaseSeriesMenu(getChartModel(),expr));
  }
  if (dataProvider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS) && ((Boolean)dataProvider.checkData(ChartUIConstants.QUERY_OPTIONAL,expr)).booleanValue()) {
    menus.add(getGroupSeriesMenu(getChartModel(),expr));
  }
  return menus;
}",0.9047619047619048
68692,"private MenuManager createMenuManager(final Object data){
  MenuManager menuManager=new MenuManager();
  menuManager.setRemoveAllWhenShown(true);
  menuManager.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      if (data instanceof ColumnBindingInfo) {
        addMenu(manager,new HeaderShowAction(((ColumnBindingInfo)data).getName()));
        String expr=ExpressionUtil.createJSRowExpression(((ColumnBindingInfo)data).getName());
        List<Object> actions=getActionsForTableHead(expr);
        for (        Object act : actions) {
          addMenu(manager,act);
        }
      }
 else       if (data instanceof Integer) {
        addMenu(manager,new HeaderShowAction(tablePreview.getCurrentColumnHeading()));
        String expr=ExpressionUtil.createJSRowExpression(tablePreview.getCurrentColumnHeading());
        List<Object> actions=getActionsForTableHead(expr);
        for (        Object act : actions) {
          addMenu(manager,act);
        }
      }
 else       if (data instanceof MeasureHandle) {
        String expr=createCubeExpression();
        if (expr != null) {
          addMenu(manager,getMenuForMeasure(getChartModel(),expr));
        }
      }
 else       if (data instanceof LevelHandle) {
        String expr=createCubeExpression();
        if (expr != null) {
          addMenu(manager,getMenuForDimension(getChartModel(),expr));
        }
      }
    }
    private void addMenu(    IMenuManager manager,    Object item){
      if (item instanceof IAction) {
        manager.add((IAction)item);
      }
 else       if (item instanceof IContributionItem) {
        manager.add((IContributionItem)item);
      }
      if (getDataServiceProvider().isPartChart()) {
        if (item instanceof IAction) {
          ((IAction)item).setEnabled(false);
        }
      }
    }
  }
);
  return menuManager;
}","private MenuManager createMenuManager(final Object data){
  MenuManager menuManager=new MenuManager();
  menuManager.setRemoveAllWhenShown(true);
  menuManager.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      if (data instanceof ColumnBindingInfo) {
        addMenu(manager,new HeaderShowAction(((ColumnBindingInfo)data).getName()));
        String expr=ExpressionUtil.createJSRowExpression(((ColumnBindingInfo)data).getName());
        List<Object> actions=getActionsForTableHead(expr);
        for (        Object act : actions) {
          addMenu(manager,act);
        }
      }
 else       if (data instanceof Integer) {
        addMenu(manager,new HeaderShowAction(tablePreview.getCurrentColumnHeading()));
        String expr=ExpressionUtil.createJSRowExpression(tablePreview.getCurrentColumnHeading());
        List<Object> actions=getActionsForTableHead(expr);
        for (        Object act : actions) {
          addMenu(manager,act);
        }
      }
 else       if (data instanceof MeasureHandle) {
        String expr=createCubeExpression();
        if (expr != null) {
          addMenu(manager,getMenuForMeasure(getChartModel(),expr));
        }
      }
 else       if (data instanceof LevelHandle) {
        String expr=createCubeExpression();
        if (expr != null) {
          addMenu(manager,getMenuForDimension(getChartModel(),expr));
        }
      }
    }
    private void addMenu(    IMenuManager manager,    Object item){
      if (item instanceof IAction) {
        manager.add((IAction)item);
      }
 else       if (item instanceof IContributionItem) {
        manager.add((IContributionItem)item);
      }
 else       if (item instanceof List<?>) {
        for (        Object o : (List<?>)item) {
          addMenu(manager,o);
        }
      }
      if (getDataServiceProvider().isPartChart()) {
        if (item instanceof IAction) {
          ((IAction)item).setEnabled(false);
        }
      }
    }
  }
);
  return menuManager;
}",0.9641760491299898
68693,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (!currentChart.getType().equals(fsTypeLiteral)) {
      currentChart.setType(fsTypeLiteral);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      ArrayList<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!currentChart.getSubType().equals(sNewSubType)) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            axes.get(i).setPercent(true);
          }
 else {
            axes.get(i).setPercent(false);
          }
        }
        EList seriesdefinitions=(axes.get(i)).getSeriesDefinitions();
        Series firstSeries=((SeriesDefinition)seriesdefinitions.get(0)).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              (axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(fsTypeLiteral);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((ChartWithAxes)currentChart).getAxes().get(0).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((ChartWithAxes)currentChart).getAxes().get(0).setCategoryAxis(true);
    ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
{
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=(seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        (seriesdefinitions.get(j)).getSeries().clear();
        (seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      ((BarSeries)series).setRiser(foRiserType);
      series.setStacked(false);
      if ((series instanceof BarSeries) && (series.getLabelPosition() != Position.OUTSIDE_LITERAL)) {
        series.setLabelPosition(Position.OUTSIDE_LITERAL);
      }
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (!currentChart.getType().equals(fsTypeLiteral)) {
      currentChart.setType(fsTypeLiteral);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      ArrayList<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!currentChart.getSubType().equals(sNewSubType)) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            axes.get(i).setPercent(true);
          }
 else {
            axes.get(i).setPercent(false);
          }
        }
        EList seriesdefinitions=(axes.get(i)).getSeriesDefinitions();
        Series firstSeries=((SeriesDefinition)seriesdefinitions.get(0)).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              (axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(fsTypeLiteral);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((ChartWithAxes)currentChart).getAxes().get(0).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((ChartWithAxes)currentChart).getAxes().get(0).setCategoryAxis(true);
    ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
{
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=(seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        (seriesdefinitions.get(j)).getSeries().clear();
        (seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      ((BarSeries)series).setRiser(foRiserType);
      series.setStacked(false);
      if ((series instanceof BarSeries) && (series.getLabelPosition() != Position.OUTSIDE_LITERAL)) {
        series.setLabelPosition(Position.OUTSIDE_LITERAL);
      }
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}",0.996962332928311
68694,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        Series firstSeries=((SeriesDefinition)seriesdefinitions.get(0)).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        Series firstSeries=((SeriesDefinition)seriesdefinitions.get(0)).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}",0.994362292051756
68695,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      Axis xAxis=((Axis)((ChartWithAxes)currentChart).getAxes().get(0));
      xAxis.setCategoryAxis(false);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      ArrayList axisTypes=new ArrayList();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      Axis xAxis=((Axis)((ChartWithAxes)currentChart).getAxes().get(0));
      xAxis.setCategoryAxis(false);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      ArrayList axisTypes=new ArrayList();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.991588527302813
68696,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      ArrayList axisTypes=new ArrayList();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      ArrayList axisTypes=new ArrayList();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  return currentChart;
}",0.991534832084374
68697,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
      if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
        ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      }
      return currentChart;
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(BarChart.TYPE_LITERAL)|| currentChart.getType().equals(TubeChart.TYPE_LITERAL)|| currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        ((Axis)axes.get(i)).setPercent(false);
        ((Axis)axes.get(i)).setType(AxisType.DATE_TIME_LITERAL);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType()));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType()));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  ChartUIUtil.updateDefaultAggregations(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
      if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
        ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      }
      return currentChart;
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(BarChart.TYPE_LITERAL)|| currentChart.getType().equals(TubeChart.TYPE_LITERAL)|| currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        ((Axis)axes.get(i)).setPercent(false);
        ((Axis)axes.get(i)).setType(AxisType.DATE_TIME_LITERAL);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType()));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType()));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  ChartUIUtil.updateDefaultAggregations(currentChart);
  return currentChart;
}",0.9913939051918736
68698,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        Series firstSeries=((SeriesDefinition)seriesdefinitions.get(0)).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
    }
 else {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          ((LineSeries)series).setPaletteLineColor(true);
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
{
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        ((LineSeries)series).setPaletteLineColor(true);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        Series firstSeries=((SeriesDefinition)seriesdefinitions.get(0)).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
    }
 else {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          ((LineSeries)series).setPaletteLineColor(true);
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
{
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        ((LineSeries)series).setPaletteLineColor(true);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}",0.9940125638005496
68699,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if (currentChart instanceof ChartWithAxes) {
    if (!ChartPreviewPainter.isLivePreviewActive()) {
      helperModel.setSampleData(getConvertedSampleData(helperModel.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType()));
    }
    currentChart=DialChartImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((DialChart)currentChart).setDialSuperimposition(false);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getGridColumnCount() > 0) {
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    }
 else {
      currentChart.setGridColumnCount(0);
    }
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((Axis)((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector vOSD=new Vector();
    Axis primaryOrthogonalAxis=((ChartWithAxes)helperModel).getPrimaryOrthogonalAxis((Axis)((ChartWithAxes)helperModel).getAxes().get(0));
    EList osd=primaryOrthogonalAxis.getSeriesDefinitions();
    for (int j=0; j < osd.size(); j++) {
      SeriesDefinition sd=(SeriesDefinition)osd.get(j);
      Series series=sd.getDesignTimeSeries();
      sd.getSeries().clear();
      sd.getSeries().add(getConvertedSeries(series,j));
      vOSD.add(sd);
    }
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      ((DialChart)currentChart).setDialSuperimposition(sNewSubType.equals(SUPERIMPOSED_SUBTYPE_LITERAL));
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
    }
 else {
      currentChart=DialChartImpl.create();
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      ((DialChart)currentChart).setDialSuperimposition(sNewSubType.equals(SUPERIMPOSED_SUBTYPE_LITERAL));
      currentChart.setBlock(helperModel.getBlock());
      currentChart.setDescription(helperModel.getDescription());
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
      currentChart.setSampleData(helperModel.getSampleData());
      currentChart.setScript(helperModel.getScript());
      currentChart.setUnits(helperModel.getUnits());
      if (helperModel.getInteractivity() != null) {
        currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
        currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
      }
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      EList seriesdefinitions=((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
    }
  }
 else {
    return null;
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if (currentChart instanceof ChartWithAxes) {
    if (!ChartPreviewPainter.isLivePreviewActive()) {
      helperModel.setSampleData(getConvertedSampleData(helperModel.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType()));
    }
    currentChart=DialChartImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((DialChart)currentChart).setDialSuperimposition(false);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getGridColumnCount() > 0) {
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    }
 else {
      currentChart.setGridColumnCount(0);
    }
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((Axis)((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector vOSD=new Vector();
    Axis primaryOrthogonalAxis=((ChartWithAxes)helperModel).getPrimaryOrthogonalAxis((Axis)((ChartWithAxes)helperModel).getAxes().get(0));
    EList osd=primaryOrthogonalAxis.getSeriesDefinitions();
    for (int j=0; j < osd.size(); j++) {
      SeriesDefinition sd=(SeriesDefinition)osd.get(j);
      Series series=sd.getDesignTimeSeries();
      sd.getSeries().clear();
      sd.getSeries().add(getConvertedSeries(series,j));
      vOSD.add(sd);
    }
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      ((DialChart)currentChart).setDialSuperimposition(sNewSubType.equals(SUPERIMPOSED_SUBTYPE_LITERAL));
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
    }
 else {
      currentChart=DialChartImpl.create();
      currentChart.eAdapters().addAll(helperModel.eAdapters());
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      ((DialChart)currentChart).setDialSuperimposition(sNewSubType.equals(SUPERIMPOSED_SUBTYPE_LITERAL));
      currentChart.setBlock(helperModel.getBlock());
      currentChart.setDescription(helperModel.getDescription());
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
      currentChart.setSampleData(helperModel.getSampleData());
      currentChart.setScript(helperModel.getScript());
      currentChart.setUnits(helperModel.getUnits());
      if (helperModel.getInteractivity() != null) {
        currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
        currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
      }
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      EList seriesdefinitions=((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
    }
  }
 else {
    return null;
  }
  return currentChart;
}",0.9826492537313432
68700,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if (currentChart instanceof ChartWithAxes) {
    if (!ChartPreviewPainter.isLivePreviewActive()) {
      helperModel.setSampleData(getConvertedSampleData(helperModel.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType()));
    }
    currentChart=ChartWithoutAxesImpl.create();
    currentChart.setType(getName());
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    if (helperModel.isSetSeriesThickness()) {
      currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    }
 else {
      currentChart.setSeriesThickness(15);
    }
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getGridColumnCount() > 0) {
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    }
 else {
      currentChart.setGridColumnCount(0);
    }
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((Axis)((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector vOSD=new Vector();
    Axis primaryOrthogonalAxis=((ChartWithAxes)helperModel).getPrimaryOrthogonalAxis((Axis)((ChartWithAxes)helperModel).getAxes().get(0));
    EList osd=primaryOrthogonalAxis.getSeriesDefinitions();
    for (int j=0; j < osd.size(); j++) {
      SeriesDefinition sd=(SeriesDefinition)osd.get(j);
      Series series=sd.getDesignTimeSeries();
      sd.getSeries().clear();
      sd.getSeries().add(getConvertedSeries(series,j));
      vOSD.add(sd);
    }
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.CATEGORIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(getName())) {
      currentChart.setSubType(sNewSubType);
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
      if (!currentChart.isSetSeriesThickness()) {
        currentChart.setSeriesThickness(15);
      }
    }
 else {
      currentChart=ChartWithoutAxesImpl.create();
      currentChart.setType(getName());
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setBlock(helperModel.getBlock());
      currentChart.setDescription(helperModel.getDescription());
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
      currentChart.setSampleData(helperModel.getSampleData());
      currentChart.setScript(helperModel.getScript());
      currentChart.setSeriesThickness(helperModel.getSeriesThickness());
      currentChart.setUnits(helperModel.getUnits());
      if (helperModel.getInteractivity() != null) {
        currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
        currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
      }
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().addAll(((ChartWithoutAxes)helperModel).getSeriesDefinitions());
      EList seriesdefinitions=((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.CATEGORIES_LITERAL);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
    }
  }
 else {
    return null;
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if (currentChart instanceof ChartWithAxes) {
    if (!ChartPreviewPainter.isLivePreviewActive()) {
      helperModel.setSampleData(getConvertedSampleData(helperModel.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType()));
    }
    currentChart=ChartWithoutAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(getName());
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    if (helperModel.isSetSeriesThickness()) {
      currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    }
 else {
      currentChart.setSeriesThickness(15);
    }
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getGridColumnCount() > 0) {
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    }
 else {
      currentChart.setGridColumnCount(0);
    }
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((Axis)((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector vOSD=new Vector();
    Axis primaryOrthogonalAxis=((ChartWithAxes)helperModel).getPrimaryOrthogonalAxis((Axis)((ChartWithAxes)helperModel).getAxes().get(0));
    EList osd=primaryOrthogonalAxis.getSeriesDefinitions();
    for (int j=0; j < osd.size(); j++) {
      SeriesDefinition sd=(SeriesDefinition)osd.get(j);
      Series series=sd.getDesignTimeSeries();
      sd.getSeries().clear();
      sd.getSeries().add(getConvertedSeries(series,j));
      vOSD.add(sd);
    }
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.CATEGORIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(getName())) {
      currentChart.setSubType(sNewSubType);
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
      if (!currentChart.isSetSeriesThickness()) {
        currentChart.setSeriesThickness(15);
      }
    }
 else {
      currentChart=ChartWithoutAxesImpl.create();
      currentChart.eAdapters().addAll(helperModel.eAdapters());
      currentChart.setType(getName());
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setBlock(helperModel.getBlock());
      currentChart.setDescription(helperModel.getDescription());
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
      currentChart.setSampleData(helperModel.getSampleData());
      currentChart.setScript(helperModel.getScript());
      currentChart.setSeriesThickness(helperModel.getSeriesThickness());
      currentChart.setUnits(helperModel.getUnits());
      if (helperModel.getInteractivity() != null) {
        currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
        currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
      }
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().addAll(((ChartWithoutAxes)helperModel).getSeriesDefinitions());
      EList seriesdefinitions=((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.CATEGORIES_LITERAL);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
    }
  }
 else {
    return null;
  }
  return currentChart;
}",0.982948294829483
68701,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.9917074497009244
68702,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        for (        Axis yAxis : xAxis.getAssociatedAxes()) {
          yAxis.setPercent(false);
          for (          SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
            Series series=ysd.getDesignTimeSeries();
            series.setStacked(false);
            if (series instanceof StockSeries) {
              ((StockSeries)series).setShowAsBarStick(BAR_STICK_SUBTYPE_LITERAL.equals(currentChart.getSubType()));
            }
          }
        }
      }
    }
 else {
      if (!currentChart.getType().equals(TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),false));
      }
      currentChart.setType(TYPE_LITERAL);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      xAxis.setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      int seriesIndex=0;
      for (      Axis yAxis : xAxis.getAssociatedAxes()) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          yAxis.setType(AxisType.LINEAR_LITERAL);
        }
        yAxis.setPercent(false);
        for (        SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
          Series series=ysd.getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex);
          series.setStacked(false);
          ysd.getSeries().clear();
          ysd.getSeries().add(series);
          seriesIndex++;
        }
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setCategoryAxis(true);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),true));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      SeriesDefinition bsd=xAxis.getSeriesDefinitions().get(0);
      Series series=bsd.getDesignTimeSeries();
      bsd.getSeries().clear();
      bsd.getSeries().add(series);
      int j=0;
      for (      SeriesDefinition vsd : yAxis.getSeriesDefinitions()) {
        series=vsd.getDesignTimeSeries();
        series=getConvertedSeries(series,j++);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        vsd.getSeries().clear();
        vsd.getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  SeriesGrouping sg=ChartUtil.getBaseSeriesDefinitions(currentChart).get(0).getGrouping();
  if (sg.getGroupType().getValue() == DataType.DATE_TIME) {
    ChartUIUtil.updateDefaultAggregations(currentChart);
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        for (        Axis yAxis : xAxis.getAssociatedAxes()) {
          yAxis.setPercent(false);
          for (          SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
            Series series=ysd.getDesignTimeSeries();
            series.setStacked(false);
            if (series instanceof StockSeries) {
              ((StockSeries)series).setShowAsBarStick(BAR_STICK_SUBTYPE_LITERAL.equals(currentChart.getSubType()));
            }
          }
        }
      }
    }
 else {
      if (!currentChart.getType().equals(TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),false));
      }
      currentChart.setType(TYPE_LITERAL);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      xAxis.setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      int seriesIndex=0;
      for (      Axis yAxis : xAxis.getAssociatedAxes()) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          yAxis.setType(AxisType.LINEAR_LITERAL);
        }
        yAxis.setPercent(false);
        for (        SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
          Series series=ysd.getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex);
          series.setStacked(false);
          ysd.getSeries().clear();
          ysd.getSeries().add(series);
          seriesIndex++;
        }
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.eAdapters().addAll(helperModel.eAdapters());
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setCategoryAxis(true);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),true));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      SeriesDefinition bsd=xAxis.getSeriesDefinitions().get(0);
      Series series=bsd.getDesignTimeSeries();
      bsd.getSeries().clear();
      bsd.getSeries().add(series);
      int j=0;
      for (      SeriesDefinition vsd : yAxis.getSeriesDefinitions()) {
        series=vsd.getDesignTimeSeries();
        series=getConvertedSeries(series,j++);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        vsd.getSeries().clear();
        vsd.getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  SeriesGrouping sg=ChartUtil.getBaseSeriesDefinitions(currentChart).get(0).getGrouping();
  if (sg.getGroupType().getValue() == DataType.DATE_TIME) {
    ChartUIUtil.updateDefaultAggregations(currentChart);
  }
  return currentChart;
}",0.9888298846365134
68703,"/** 
 * Swaps the crosstab row area and column area. Note this call is not equivalent to calling <code>pivotDimension</code> to interchange dimensions from row area to column area. Specifically this call will retain all the original subtotal and grandtotal info in both area after the swapping, while <code>pivotDimension</code> may remove the grandtotal or recreate some cells during the processing.
 * @throws SemanticException
 */
public void pivotCrosstab() throws SemanticException {
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    int transfered=transferDimensions(ROW_AXIS_TYPE,0);
    transferDimensions(COLUMN_AXIS_TYPE,transfered);
    CrosstabCellHandle replaced=transferGrandTotal(ROW_AXIS_TYPE,null);
    transferGrandTotal(COLUMN_AXIS_TYPE,replaced);
    for (int i=0; i < crosstab.getMeasureCount(); i++) {
      MeasureViewHandle mv=crosstab.getMeasure(i);
      swapAggregateOn(mv.getCell());
      for (int j=0; j < mv.getAggregationCount(); j++) {
        swapAggregateOn(mv.getAggregationCell(j));
      }
    }
    String oldDirction=crosstab.getMeasureDirection();
    String newDirection=MEASURE_DIRECTION_HORIZONTAL.equals(oldDirction) ? MEASURE_DIRECTION_VERTICAL : MEASURE_DIRECTION_HORIZONTAL;
    crosstab.getModelHandle().setStringProperty(MEASURE_DIRECTION_PROP,newDirection);
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}","/** 
 * Swaps the crosstab row area and column area. Note this call is not equivalent to calling <code>pivotDimension</code> to interchange dimensions from row area to column area. Specifically this call will retain all the original subtotal and grandtotal info in both area after the swapping, while <code>pivotDimension</code> may remove the grandtotal or recreate some cells during the processing.
 * @throws SemanticException
 */
public void pivotCrosstab() throws SemanticException {
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    int transfered=transferDimensions(ROW_AXIS_TYPE,0);
    transferDimensions(COLUMN_AXIS_TYPE,transfered);
    CrosstabCellHandle replaced=transferGrandTotal(ROW_AXIS_TYPE,null,true);
    transferGrandTotal(COLUMN_AXIS_TYPE,replaced,false);
    for (int i=0; i < crosstab.getMeasureCount(); i++) {
      MeasureViewHandle mv=crosstab.getMeasure(i);
      swapAggregateOn(mv.getCell());
      for (int j=0; j < mv.getAggregationCount(); j++) {
        swapAggregateOn(mv.getAggregationCell(j));
      }
    }
    String oldDirction=crosstab.getMeasureDirection();
    String newDirection=MEASURE_DIRECTION_HORIZONTAL.equals(oldDirction) ? MEASURE_DIRECTION_VERTICAL : MEASURE_DIRECTION_HORIZONTAL;
    crosstab.getModelHandle().setStringProperty(MEASURE_DIRECTION_PROP,newDirection);
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}",0.9962825278810408
68704,"private CrosstabCellHandle transferGrandTotal(int srcAxis,CrosstabCellHandle oldGT) throws SemanticException {
  CrosstabCellHandle srcGT=null;
  if (oldGT == null) {
    CrosstabViewHandle srcView=crosstab.getCrosstabView(srcAxis);
    srcGT=srcView != null ? srcView.getGrandTotal() : null;
  }
 else {
    srcGT=oldGT;
  }
  CrosstabCellHandle targetReplaced=null;
  if (srcGT != null) {
    int targetAxis=CrosstabModelUtil.getOppositeAxisType(srcAxis);
    CrosstabViewHandle targetView=crosstab.getCrosstabView(targetAxis);
    if (targetView == null) {
      targetView=crosstab.addCrosstabView(targetAxis);
    }
    targetReplaced=targetView.getGrandTotal();
    if (srcGT.getModelHandle().getContainer() != null) {
      CrosstabCellHandle srcClone=(CrosstabCellHandle)CrosstabUtil.getReportItem(srcGT.getModelHandle().copy().getHandle(crosstab.getModuleHandle().getModule()));
      srcGT.getModelHandle().drop();
      srcGT=srcClone;
    }
    if (targetReplaced != null) {
      CrosstabCellHandle targetClone=(CrosstabCellHandle)CrosstabUtil.getReportItem(targetReplaced.getModelHandle().copy().getHandle(crosstab.getModuleHandle().getModule()));
      targetReplaced.getModelHandle().drop();
      targetReplaced=targetClone;
    }
    PropertyHandle targetPropertyHandle=targetView.getGrandTotalProperty();
    if (targetPropertyHandle.getContentCount() <= 0) {
      targetPropertyHandle.add(srcGT.getModelHandle());
    }
  }
  return targetReplaced;
}","private CrosstabCellHandle transferGrandTotal(int srcAxis,CrosstabCellHandle oldGT,boolean firstMove) throws SemanticException {
  CrosstabCellHandle srcGT=null;
  if (firstMove) {
    CrosstabViewHandle srcView=crosstab.getCrosstabView(srcAxis);
    srcGT=srcView != null ? srcView.getGrandTotal() : null;
  }
 else {
    srcGT=oldGT;
  }
  CrosstabCellHandle targetReplaced=null;
  int targetAxis=CrosstabModelUtil.getOppositeAxisType(srcAxis);
  CrosstabViewHandle targetView=crosstab.getCrosstabView(targetAxis);
  if (firstMove) {
    targetReplaced=targetView == null ? null : targetView.getGrandTotal();
    if (srcGT != null) {
      if (srcGT.getModelHandle().getContainer() != null) {
        CrosstabCellHandle srcClone=(CrosstabCellHandle)CrosstabUtil.getReportItem(srcGT.getModelHandle().copy().getHandle(crosstab.getModuleHandle().getModule()));
        srcGT.getModelHandle().drop();
        srcGT=srcClone;
      }
    }
    if (targetReplaced != null) {
      CrosstabCellHandle targetClone=(CrosstabCellHandle)CrosstabUtil.getReportItem(targetReplaced.getModelHandle().copy().getHandle(crosstab.getModuleHandle().getModule()));
      targetReplaced.getModelHandle().drop();
      targetReplaced=targetClone;
    }
  }
  if (srcGT != null) {
    if (targetView == null) {
      targetView=crosstab.addCrosstabView(targetAxis);
    }
    PropertyHandle targetPropertyHandle=targetView.getGrandTotalProperty();
    if (targetPropertyHandle.getContentCount() <= 0) {
      targetPropertyHandle.add(srcGT.getModelHandle());
    }
  }
  return targetReplaced;
}",0.3942181340341655
68705,"/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  assert(url != null);
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  Exception e) {
    registerDriver(driverClass,null,true);
    try {
      return DriverManager.getConnection(url,connectionProperties);
    }
 catch (    Exception ex) {
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(ex.getLocalizedMessage()));
    }
  }
}","/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  Exception e) {
    registerDriver(driverClass,null,true);
    try {
      return DriverManager.getConnection(url,connectionProperties);
    }
 catch (    Exception ex) {
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(ex.getLocalizedMessage()));
    }
  }
}",0.8861039439734612
68706,"public static ICubeQueryDefinition createCubeQuery(CrosstabReportItemHandle crosstabItem,IDataQueryDefinition parentQuery,boolean needMeasure,boolean needRowDimension,boolean needColumnDimension,boolean needBinding,boolean needSorting,boolean needFilter) throws BirtException {
  ICubeQueryDefinition cubeQuery=getCubeElementFactory().createCubeQuery(crosstabItem.getCubeName());
  List<String> rowLevelNameList=new ArrayList<String>();
  List<String> columnLevelNameList=new ArrayList<String>();
  List<LevelViewHandle> levelViewList=new ArrayList<LevelViewHandle>();
  Map<LevelHandle,ILevelDefinition> levelMapping=new HashMap<LevelHandle,ILevelDefinition>();
  DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
  try {
    IModelAdapter modelAdapter=session.getModelAdaptor();
    if (needMeasure) {
      for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
        MeasureViewHandle mv=crosstabItem.getMeasure(i);
        if (mv instanceof ComputedMeasureViewHandle) {
          continue;
        }
        if (mv.getCubeMeasure() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",mv.getCubeMeasureName()));
        }
        IMeasureDefinition mDef=cubeQuery.createMeasure(mv.getCubeMeasure().getName());
        mDef.setAggrFunction(mv.getCubeMeasure().getFunction() == null ? null : DataAdapterUtil.getRollUpAggregationName(mv.getCubeMeasure().getFunction()));
        addFactTableOrMeasureFilter(mv.filtersIterator(),cubeQuery,modelAdapter);
      }
    }
    if (needRowDimension && crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,ROW_AXIS_TYPE,rowLevelNameList,levelViewList,levelMapping);
    }
    if (needColumnDimension && crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,COLUMN_AXIS_TYPE,columnLevelNameList,levelViewList,levelMapping);
    }
    addFactTableOrMeasureFilter(crosstabItem.filtersIterator(),cubeQuery,modelAdapter);
    if (needSorting) {
      addLevelSorting(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needFilter) {
      addLevelFilter(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needBinding) {
      Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
      ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
      if (bindingItr != null) {
        Map<String,String> cache=new HashMap<String,String>();
        while (bindingItr.hasNext()) {
          ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
          Binding binding=new Binding(column.getName());
          binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
          binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
          binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
          if (column.getFilterExpression() != null) {
            binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
          }
          for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
            AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
            if (aah.getValue() != null) {
              binding.addArgument(modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
            }
          }
          List aggrList=column.getAggregateOnList();
          if (aggrList != null) {
            for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
              String baseLevel=(String)aggrItr.next();
              CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
            }
          }
          cubeQuery.addBinding(binding);
        }
      }
    }
  }
  finally {
    session.shutdown();
  }
  return cubeQuery;
}","public static ICubeQueryDefinition createCubeQuery(CrosstabReportItemHandle crosstabItem,IDataQueryDefinition parentQuery,boolean needMeasure,boolean needRowDimension,boolean needColumnDimension,boolean needBinding,boolean needSorting,boolean needFilter) throws BirtException {
  ICubeQueryDefinition cubeQuery=getCubeElementFactory().createCubeQuery(crosstabItem.getCubeName());
  List<String> rowLevelNameList=new ArrayList<String>();
  List<String> columnLevelNameList=new ArrayList<String>();
  List<LevelViewHandle> levelViewList=new ArrayList<LevelViewHandle>();
  Map<LevelHandle,ILevelDefinition> levelMapping=new HashMap<LevelHandle,ILevelDefinition>();
  DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
  try {
    IModelAdapter modelAdapter=session.getModelAdaptor();
    if (needMeasure) {
      for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
        MeasureViewHandle mv=crosstabItem.getMeasure(i);
        if (mv instanceof ComputedMeasureViewHandle) {
          continue;
        }
        if (mv.getCubeMeasure() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",mv.getCubeMeasureName()));
        }
        IMeasureDefinition mDef=cubeQuery.createMeasure(mv.getCubeMeasure().getName());
        mDef.setAggrFunction(mv.getCubeMeasure().getFunction() == null ? null : DataAdapterUtil.getRollUpAggregationName(mv.getCubeMeasure().getFunction()));
        addFactTableOrMeasureFilter(mv.filtersIterator(),cubeQuery,modelAdapter);
      }
    }
    if (needRowDimension && crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,ROW_AXIS_TYPE,rowLevelNameList,levelViewList,levelMapping);
    }
    if (needColumnDimension && crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,COLUMN_AXIS_TYPE,columnLevelNameList,levelViewList,levelMapping);
    }
    addFactTableOrMeasureFilter(crosstabItem.filtersIterator(),cubeQuery,modelAdapter);
    if (needSorting) {
      addLevelSorting(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needFilter) {
      addLevelFilter(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needBinding) {
      Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
      ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
      if (bindingItr != null) {
        Map<String,String> cache=new HashMap<String,String>();
        while (bindingItr.hasNext()) {
          ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
          Binding binding=new Binding(column.getName());
          binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
          binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
          binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
          if (column.getFilterExpression() != null) {
            binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
          }
          for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
            AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
            if (aah.getValue() != null) {
              binding.addArgument(aah.getName(),modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
            }
          }
          List aggrList=column.getAggregateOnList();
          if (aggrList != null) {
            for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
              String baseLevel=(String)aggrItr.next();
              CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
            }
          }
          cubeQuery.addBinding(binding);
        }
      }
    }
  }
  finally {
    session.shutdown();
  }
  return cubeQuery;
}",0.998383745093512
68707,"private static List<IBinding> getQueryBindings(CrosstabReportItemHandle crosstabItem) throws BirtException {
  List<String> rowLevelNameList=new ArrayList<String>();
  List<String> columnLevelNameList=new ArrayList<String>();
  if (crosstabItem.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstabItem.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(ICrosstabConstants.ROW_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(dv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(lv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        rowLevelNameList.add(lv.getCubeLevel().getFullName());
      }
    }
  }
  if (crosstabItem.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstabItem.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(dv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(lv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        columnLevelNameList.add(lv.getCubeLevel().getFullName());
      }
    }
  }
  List<IBinding> bindingList=new ArrayList<IBinding>();
  Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
  ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
  if (bindingItr != null) {
    Map<String,String> cache=new HashMap<String,String>();
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    try {
      IModelAdapter modelAdapter=session.getModelAdaptor();
      while (bindingItr.hasNext()) {
        ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
        Binding binding=new Binding(column.getName());
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
        binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
        binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
        if (column.getFilterExpression() != null) {
          binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
        }
        for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
          AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
          binding.addArgument(modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
        }
        List aggrList=column.getAggregateOnList();
        if (aggrList != null) {
          for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
            String baseLevel=(String)aggrItr.next();
            addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
          }
        }
        bindingList.add(binding);
      }
    }
  finally {
      session.shutdown();
    }
  }
  return bindingList;
}","private static List<IBinding> getQueryBindings(CrosstabReportItemHandle crosstabItem) throws BirtException {
  List<String> rowLevelNameList=new ArrayList<String>();
  List<String> columnLevelNameList=new ArrayList<String>();
  if (crosstabItem.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstabItem.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(ICrosstabConstants.ROW_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(dv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(lv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        rowLevelNameList.add(lv.getCubeLevel().getFullName());
      }
    }
  }
  if (crosstabItem.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstabItem.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(dv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(lv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        columnLevelNameList.add(lv.getCubeLevel().getFullName());
      }
    }
  }
  List<IBinding> bindingList=new ArrayList<IBinding>();
  Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
  ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
  if (bindingItr != null) {
    Map<String,String> cache=new HashMap<String,String>();
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    try {
      IModelAdapter modelAdapter=session.getModelAdaptor();
      while (bindingItr.hasNext()) {
        ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
        Binding binding=new Binding(column.getName());
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
        binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
        binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
        if (column.getFilterExpression() != null) {
          binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
        }
        for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
          AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
          binding.addArgument(aah.getName(),modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
        }
        List aggrList=column.getAggregateOnList();
        if (aggrList != null) {
          for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
            String baseLevel=(String)aggrItr.next();
            addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
          }
        }
        bindingList.add(binding);
      }
    }
  finally {
      session.shutdown();
    }
  }
  return bindingList;
}",0.9982543640897756
68708,"private IBinding[] getCrosstabBindings(CrosstabReportItemHandle xtabHandle) throws BirtException {
  Iterator bindingItr=((ExtendedItemHandle)xtabHandle.getModelHandle()).columnBindingsIterator();
  ModuleHandle module=((ExtendedItemHandle)xtabHandle.getModelHandle()).getModuleHandle();
  List<IBinding> bindingList=new ArrayList<IBinding>();
  if (bindingItr != null) {
    Map cache=new HashMap();
    List rowLevelNameList=new ArrayList();
    List columnLevelNameList=new ArrayList();
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    try {
      IModelAdapter modelAdapter=session.getModelAdaptor();
      while (bindingItr.hasNext()) {
        ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
        Binding binding=new Binding(column.getName());
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
        binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
        binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
        if (column.getFilterExpression() != null) {
          binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
        }
        for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
          AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
          if (aah.getValue() != null) {
            binding.addArgument(modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
          }
        }
        List aggrList=column.getAggregateOnList();
        if (aggrList != null) {
          for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
            String baseLevel=(String)aggrItr.next();
            CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
          }
        }
        bindingList.add(binding);
      }
    }
  finally {
      session.shutdown();
    }
  }
  return bindingList.toArray(new IBinding[bindingList.size()]);
}","private IBinding[] getCrosstabBindings(CrosstabReportItemHandle xtabHandle) throws BirtException {
  Iterator bindingItr=((ExtendedItemHandle)xtabHandle.getModelHandle()).columnBindingsIterator();
  ModuleHandle module=((ExtendedItemHandle)xtabHandle.getModelHandle()).getModuleHandle();
  List<IBinding> bindingList=new ArrayList<IBinding>();
  if (bindingItr != null) {
    Map cache=new HashMap();
    List rowLevelNameList=new ArrayList();
    List columnLevelNameList=new ArrayList();
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    try {
      IModelAdapter modelAdapter=session.getModelAdaptor();
      while (bindingItr.hasNext()) {
        ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
        Binding binding=new Binding(column.getName());
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
        binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
        binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
        if (column.getFilterExpression() != null) {
          binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
        }
        for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
          AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
          if (aah.getValue() != null) {
            binding.addArgument(aah.getName(),modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
          }
        }
        List aggrList=column.getAggregateOnList();
        if (aggrList != null) {
          for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
            String baseLevel=(String)aggrItr.next();
            CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
          }
        }
        bindingList.add(binding);
      }
    }
  finally {
      session.shutdown();
    }
  }
  return bindingList.toArray(new IBinding[bindingList.size()]);
}",0.9971014492753624
68709,"/** 
 * @param edgeType
 * @return
 */
private List getEdgeSort(int edgeType){
  List l=this.defn.getSorts();
  List result=new ArrayList();
  for (int i=0; i < l.size(); i++) {
    ICubeSortDefinition sort=(ICubeSortDefinition)l.get(i);
    if (this.defn.getEdge(edgeType) != null && this.defn.getEdge(edgeType).getDimensions().contains(sort.getTargetLevel().getHierarchy().getDimension())) {
      result.add(sort);
    }
  }
  Collections.sort(result,new Comparator(){
    public int compare(    Object arg0,    Object arg1){
      int level1=((ICubeSortDefinition)arg0).getTargetLevel().getHierarchy().getLevels().indexOf(((ICubeSortDefinition)arg0).getTargetLevel());
      int level2=((ICubeSortDefinition)arg1).getTargetLevel().getHierarchy().getLevels().indexOf(((ICubeSortDefinition)arg1).getTargetLevel());
      if (level1 == level2)       return 0;
 else       if (level1 < level2)       return -1;
 else       return 1;
    }
  }
);
  return result;
}","/** 
 * @param edgeType
 * @return
 */
private List getEdgeSort(int edgeType){
  List l=this.defn.getSorts();
  List result=new ArrayList();
  for (int i=0; i < l.size(); i++) {
    ICubeSortDefinition sort=(ICubeSortDefinition)l.get(i);
    if (this.defn.getEdge(edgeType) != null && sort.getTargetLevel() != null && this.defn.getEdge(edgeType).getDimensions().contains(sort.getTargetLevel().getHierarchy().getDimension())) {
      result.add(sort);
    }
  }
  Collections.sort(result,new Comparator(){
    public int compare(    Object arg0,    Object arg1){
      int level1=((ICubeSortDefinition)arg0).getTargetLevel().getHierarchy().getLevels().indexOf(((ICubeSortDefinition)arg0).getTargetLevel());
      int level2=((ICubeSortDefinition)arg1).getTargetLevel().getHierarchy().getLevels().indexOf(((ICubeSortDefinition)arg1).getTargetLevel());
      if (level1 == level2)       return 0;
 else       if (level1 < level2)       return -1;
 else       return 1;
    }
  }
);
  return result;
}",0.9831718510963794
68710,"/** 
 * Get dim level from an expression.
 * @param expr
 * @param bindings
 * @return
 * @throws DataException
 */
private static DimLevel getDimLevel(String expr,List bindings) throws DataException {
  String bindingName=OlapExpressionUtil.getBindingName(expr);
  if (bindingName != null) {
    for (int j=0; j < bindings.size(); j++) {
      IBinding binding=(IBinding)bindings.get(j);
      if (binding.getBindingName().equals(bindingName)) {
        if (!(binding.getExpression() instanceof IScriptExpression))         return null;
        return getDimLevel(((IScriptExpression)binding.getExpression()).getText(),bindings);
      }
    }
  }
  if (OlapExpressionUtil.isReferenceToDimLevel(expr) == false)   return null;
 else   return OlapExpressionUtil.getTargetDimLevel(expr);
}","/** 
 * Get dim level from an expression.
 * @param expr
 * @param bindings
 * @return
 * @throws DataException
 */
private static DimLevel getDimLevel(String expr,List bindings) throws DataException {
  String bindingName=OlapExpressionUtil.getBindingName(expr);
  DimLevel dimLevel=getDimLevelByBindingName(bindingName,bindings);
  if (dimLevel != null)   return null;
  if (OlapExpressionUtil.isReferenceToDimLevel(expr) == false)   return null;
 else   return OlapExpressionUtil.getTargetDimLevel(expr);
}",0.6486486486486487
68711,"/** 
 * @param levelDefn
 * @param query
 * @return
 * @throws DataException 
 */
public static int getSortDirection(DimLevel level,ICubeQueryDefinition query) throws DataException {
  if (query.getSorts() != null && !query.getSorts().isEmpty()) {
    for (int i=0; i < query.getSorts().size(); i++) {
      ISortDefinition sortDfn=((ISortDefinition)query.getSorts().get(i));
      String expr=sortDfn.getExpression().getText();
      DimLevel info=getDimLevel(expr,query.getBindings());
      if (level.equals(info)) {
        return sortDfn.getSortDirection();
      }
    }
  }
  return IDimensionSortDefn.SORT_UNDEFINED;
}","/** 
 * @param levelDefn
 * @param query
 * @return
 * @throws DataException 
 */
public static int getSortDirection(DimLevel level,ICubeQueryDefinition query) throws DataException {
  if (query.getSorts() != null && !query.getSorts().isEmpty()) {
    for (int i=0; i < query.getSorts().size(); i++) {
      ISortDefinition sortDfn=((ISortDefinition)query.getSorts().get(i));
      DimLevel info=null;
      if (sortDfn.getExpression() == null) {
        String colName=sortDfn.getColumn();
        info=getDimLevelByBindingName(colName,query.getBindings());
        if (level.equals(info)) {
          return sortDfn.getSortDirection();
        }
      }
 else {
        String expr=null;
        expr=sortDfn.getExpression().getText();
        info=getDimLevel(expr,query.getBindings());
        if (level.equals(info)) {
          return sortDfn.getSortDirection();
        }
      }
    }
  }
  return IDimensionSortDefn.SORT_UNDEFINED;
}",0.7321428571428571
68712,"private void initDataSelector(){
  cmbInherit.setItems(new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")});
  if (dataProvider.isInheritColumnsSet()) {
    cmbInherit.select(dataProvider.isInheritColumnsOnly() ? 1 : 0);
  }
 else {
    if (ChartReportItemUtil.hasAggregation(getChartModel())) {
      cmbInherit.select(1);
      getContext().setInheritColumnsOnly(true);
    }
 else {
      cmbInherit.select(0);
      getContext().setInheritColumnsOnly(false);
    }
  }
  cmbInherit.setEnabled(false);
  cmbDataItems.setItems(createDataComboItems());
  cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
  String sItemRef=getDataServiceProvider().getReportItemReference();
  if (sItemRef != null) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    cmbDataItems.setText(sItemRef);
    currentData=sItemRef;
    return;
  }
  String sDataSet=getDataServiceProvider().getDataSet();
  if (sDataSet != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    cmbDataItems.setText(sDataSet);
    currentData=sDataSet;
    if (sDataSet != null) {
      switchDataTable();
    }
    return;
  }
  String sDataCube=getDataServiceProvider().getDataCube();
  if (sDataCube != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    cmbDataItems.setText(sDataCube);
    currentData=sDataCube;
    return;
  }
  cmbInherit.setEnabled(getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
  if (!cmbInherit.isEnabled()) {
    if (itemHandle.getContainer() instanceof MultiViewsHandle || itemHandle.getDataBindingReference() != null) {
      cmbInherit.select(0);
    }
 else {
      cmbInherit.select(1);
    }
  }
  btnInherit.setSelection(true);
  bIsInheritSelected=true;
  if (getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(false);
    btnUseData.setEnabled(false);
  }
  cmbDataItems.select(0);
  currentData=null;
  cmbDataItems.setEnabled(false);
  getDataServiceProvider().setDataSet(null);
  String reportDataSet=getDataServiceProvider().getInheritedDataSet();
  if (reportDataSet != null) {
    switchDataTable();
  }
}","private void initDataSelector(){
  cmbInherit.setItems(new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")});
  if (dataProvider.isInheritColumnsSet()) {
    cmbInherit.select(dataProvider.isInheritColumnsOnly() ? 1 : 0);
  }
 else {
    if (ChartReportItemUtil.hasAggregation(getChartModel())) {
      cmbInherit.select(1);
      getContext().setInheritColumnsOnly(true);
    }
 else {
      cmbInherit.select(0);
      getContext().setInheritColumnsOnly(false);
    }
  }
  cmbInherit.setEnabled(false);
  cmbDataItems.setItems(createDataComboItems());
  cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
  String sItemRef=getDataServiceProvider().getReportItemReference();
  if (sItemRef != null) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    cmbDataItems.setText(sItemRef);
    currentData=sItemRef;
    return;
  }
  String sDataSet=getDataServiceProvider().getDataSet();
  if (sDataSet != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    cmbDataItems.setText(sDataSet);
    currentData=sDataSet;
    return;
  }
  String sDataCube=getDataServiceProvider().getDataCube();
  if (sDataCube != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    cmbDataItems.setText(sDataCube);
    currentData=sDataCube;
    return;
  }
  cmbInherit.setEnabled(getDataServiceProvider().getInheritedDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
  if (!cmbInherit.isEnabled()) {
    if (itemHandle.getContainer() instanceof MultiViewsHandle || itemHandle.getDataBindingReference() != null) {
      cmbInherit.select(0);
    }
 else {
      cmbInherit.select(1);
    }
  }
  btnInherit.setSelection(true);
  bIsInheritSelected=true;
  if (getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(false);
    btnUseData.setEnabled(false);
  }
  cmbDataItems.select(0);
  currentData=null;
  cmbDataItems.setEnabled(false);
  getDataServiceProvider().setDataSet(null);
}",0.5641025641025641
68713,"private void switchDataSet(String datasetName) throws ChartException {
  if (isCubeMode()) {
    return;
  }
  try {
    tablePreview.clearContents();
    tableViewerColumns.setInput(null);
    if (datasetName == null) {
      datasetName=getDataServiceProvider().getInheritedDataSet();
    }
    if (datasetName != null) {
      switchDataTable();
    }
 else {
      tablePreview.createDummyTable();
    }
    tablePreview.layout();
  }
 catch (  Throwable t) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,t);
  }
  DataDefinitionTextManager.getInstance().refreshAll();
  fireEvent(tablePreview,EVENT_PREVIEW);
}","private void switchDataSet(String datasetName) throws ChartException {
  if (isCubeMode()) {
    return;
  }
  try {
    tablePreview.clearContents();
    tableViewerColumns.setInput(null);
    if (datasetName == null) {
      datasetName=getDataServiceProvider().getInheritedDataSet();
    }
    tablePreview.createDummyTable();
    tablePreview.layout();
  }
 catch (  Throwable t) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,t);
  }
  DataDefinitionTextManager.getInstance().refreshAll();
  fireEvent(tablePreview,EVENT_PREVIEW);
}",0.9359605911330048
68714,"public static boolean isRightAligned(IContent content,CSSValue align,boolean lastLine){
  return align != null && isRightAligned(content,align.getCssText(),lastLine);
}","public static boolean isRightAligned(IContent content,CSSValue align,boolean lastLine){
  return isRightAligned(content,align != null ? align.getCssText() : null,lastLine);
}",0.8830409356725146
68715,"/** 
 * Build size style string say, ""width: 10.0mm;"". The min-height should be implemented by sepcial way.
 * @param content The <code>StringBuffer</code> to which the result is output.
 * @param name The property name
 * @param value The values of the property
 */
public void buildSize(StringBuffer content,String name,DimensionType value){
  if (value != null) {
    if (HTMLTags.ATTR_MIN_HEIGHT.equals(name)) {
      content.append(""String_Node_Str"");
      content.append(value.toString());
      content.append(""String_Node_Str"");
      content.append(value.toString());
      content.append(';');
    }
 else {
      content.append(' ');
      content.append(name);
      content.append(""String_Node_Str"");
      content.append(value.toString());
      content.append(';');
    }
  }
}","/** 
 * Build size style string say, ""width: 10.0mm;"". The min-height should be implemented by sepcial way.
 * @param content The <code>StringBuffer</code> to which the result is output.
 * @param name The property name
 * @param value The values of the property
 */
public void buildSize(StringBuffer content,String name,DimensionType value){
  if (value != null) {
    if (HTMLTags.ATTR_MIN_HEIGHT.equals(name)) {
      if (fixedReport) {
        content.append(""String_Node_Str"");
        content.append(value.toString());
        content.append(';');
      }
 else {
        content.append(""String_Node_Str"");
        content.append(value.toString());
        content.append(""String_Node_Str"");
        content.append(value.toString());
        content.append(';');
      }
    }
 else     if (HTMLTags.ATTR_MIN_WIDTH.equals(name)) {
      if (fixedReport) {
        content.append(""String_Node_Str"");
        content.append(value.toString());
        content.append(';');
      }
 else {
        content.append(""String_Node_Str"");
        content.append(value.toString());
        content.append(""String_Node_Str"");
        content.append(value.toString());
        content.append(';');
      }
    }
 else {
      content.append(' ');
      content.append(name);
      content.append(""String_Node_Str"");
      content.append(value.toString());
      content.append(';');
    }
  }
}",0.7024300779458964
68716,"/** 
 * output the report title.
 */
protected void outputReportTitle(IReportContent report){
  String title=report.getTitle();
  if (title == null) {
    if (renderOption != null) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
      title=htmlOption.getHtmlTitle();
    }
  }
  if (title != null) {
    writer.openTag(HTMLTags.TAG_TITLE);
    writer.text(title);
    writer.closeTag(HTMLTags.TAG_TITLE);
  }
}","/** 
 * output the report title.
 */
protected void outputReportTitle(IReportContent report){
  String title=null;
  if (report != null) {
    title=report.getTitle();
  }
  if (title == null) {
    if (renderOption != null) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
      title=htmlOption.getHtmlTitle();
    }
  }
  if (title != null) {
    writer.openTag(HTMLTags.TAG_TITLE);
    writer.text(title);
    writer.closeTag(HTMLTags.TAG_TITLE);
  }
}",0.912472647702407
68717,"public void close() throws BirtException {
  TableArea table=getTableArea();
  table.addRow(this);
  updateBackgroundImage();
  boolean pb=checkPageBreak();
  if (pb) {
    table.addRow(this);
  }
  parent.update(this);
  finished=true;
}","public void close() throws BirtException {
  TableArea table=getTableArea();
  table.addRow(this);
  updateBackgroundImage();
  boolean pb=checkPageBreak();
  if (pb) {
    specifiedHeight=0;
    table.addRow(this);
  }
  parent.update(this);
  finished=true;
}",0.9539078156312624
68718,"public SplitResult split(int height,boolean force) throws BirtException {
  SplitResult result=super.split(height,force);
  if (result.getResult() != null) {
    TableArea tableResult=(TableArea)result.getResult();
    unresolvedRow=tableResult.getLastRow();
    int h=tableResult.layout.resolveAll(unresolvedRow);
    if (h > 0) {
      tableResult.setHeight(tableResult.getHeight() + h);
    }
    tableResult.resolveBottomBorder();
    layout.setUnresolvedRow(unresolvedRow);
    if (context.isFixedLayout()) {
      FixedLayoutPageHintGenerator pageHintGenerator=context.getPageHintGenerator();
      if (pageHintGenerator != null) {
        pageHintGenerator.addUnresolvedRowHint(unresolvedRow.getTableArea().getContent().getInstanceID().toUniqueString(),convertRowToHint(unresolvedRow));
      }
    }
  }
  relayoutChildren();
  return result;
}","public SplitResult split(int height,boolean force) throws BirtException {
  SplitResult result=super.split(height,force);
  if (result.getResult() != null) {
    TableArea tableResult=(TableArea)result.getResult();
    unresolvedRow=tableResult.getLastRow();
    int h=tableResult.layout.resolveAll(unresolvedRow);
    if (h > 0) {
      tableResult.setHeight(tableResult.getHeight() + h);
    }
    tableResult.resolveBottomBorder();
    layout.setUnresolvedRow(unresolvedRow);
    if (context.isFixedLayout()) {
      FixedLayoutPageHintGenerator pageHintGenerator=context.getPageHintGenerator();
      if (pageHintGenerator != null && unresolvedRow != null) {
        pageHintGenerator.addUnresolvedRowHint(unresolvedRow.getTableArea().getContent().getInstanceID().toUniqueString(),convertRowToHint(unresolvedRow));
      }
    }
  }
  relayoutChildren();
  return result;
}",0.9855407750144592
68719,"protected void saveQuery(){
  if (isQueryModified) {
    updateQuery(ChartUIUtil.getText(getInputControl()));
    setColor();
    if (!getInputControl().isDisposed()) {
      getInputControl().getParent().layout();
    }
    Event e=new Event();
    e.text=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
    e.data=e.text;
    e.widget=getInputControl();
    e.type=0;
    fireEvent(e);
    isQueryModified=false;
  }
}","protected void saveQuery(){
  if (isQueryModified) {
    setColor();
    updateQuery(ChartUIUtil.getText(getInputControl()));
    if (!getInputControl().isDisposed()) {
      getInputControl().getParent().layout();
    }
    Event e=new Event();
    e.text=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
    e.data=e.text;
    e.widget=getInputControl();
    e.type=0;
    fireEvent(e);
    isQueryModified=false;
  }
}",0.96420581655481
68720,"public void doTestIO(String designName) throws Exception {
  Report report=new ReportParser().parse(""String_Node_Str"",this.getClass().getResourceAsStream(designName));
  assertTrue(report != null);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  new EngineIRWriter().write(out,report);
  out.close();
  InputStream in=new ByteArrayInputStream(out.toByteArray());
  EngineIRReader reader=new EngineIRReader();
  Report report2=reader.read(in);
  reader.link(report2,report.getReportDesign());
  ByteArrayOutputStream out1=new ByteArrayOutputStream();
  ByteArrayOutputStream out2=new ByteArrayOutputStream();
  ReportDesignWriter writer=new ReportDesignWriter();
  writer.write(out1,report);
  writer.write(out2,report2);
  String golden=new String(out1.toByteArray());
  String value=new String(out2.toByteArray());
  assertEquals(golden,value);
}","public void doTestIO(String designName,int i) throws Exception {
  Class<?> clz=i == 0 ? this.getClass() : org.eclipse.birt.report.engine.parser.EngineIRParserTest.class;
  InputStream input=clz.getResourceAsStream(designName);
  Report report=new ReportParser().parse(""String_Node_Str"",input);
  assertTrue(report != null);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  new EngineIRWriter().write(out,report);
  out.close();
  InputStream in=new ByteArrayInputStream(out.toByteArray());
  EngineIRReader reader=new EngineIRReader();
  Report report2=reader.read(in);
  reader.link(report2,report.getReportDesign());
  ByteArrayOutputStream out1=new ByteArrayOutputStream();
  ByteArrayOutputStream out2=new ByteArrayOutputStream();
  ReportDesignWriter writer=new ReportDesignWriter();
  writer.write(out1,report);
  writer.write(out2,report2);
  String golden=new String(out1.toByteArray());
  String value=new String(out2.toByteArray());
  assertEquals(golden,value);
}",0.8800868149755833
68721,"public void testIO() throws Exception {
  String[] designStreams=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < designStreams.length; i++) {
    doTestIO(designStreams[i]);
  }
}","public void testIO() throws Exception {
  String[] designStreams=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < designStreams.length; i++) {
    doTestIO(designStreams[i],i);
  }
}",0.9744897959183674
68722,"public IExpressionContext getContext(String expressionType,Object contextObj){
  IExpressionContextFactory factory=(IExpressionContextFactory)ElementAdapterManager.getAdapter(this,IExpressionContextFactory.class);
  if (factory != null) {
    IExpressionContext cxt=factory.getContext(expressionType,contextObj);
    if (cxt != null) {
      return cxt;
    }
  }
  IExpressionContext cxt=contexts.get(expressionType);
  if (cxt == null)   return new DefaultExpressionContext(contextObj);
 else   return cxt;
}","public IExpressionContext getContext(String expressionType,Object contextObj){
  IExpressionContextFactory factory=(IExpressionContextFactory)ElementAdapterManager.getAdapter(this,IExpressionContextFactory.class);
  if (factory != null) {
    IExpressionContext cxt=factory.getContext(expressionType,contextObj);
    if (cxt != null) {
      if (cxt instanceof IExpressionFilterSupport) {
        ((IExpressionFilterSupport)cxt).setFilters(filters);
      }
 else {
        return cxt;
      }
    }
  }
  IExpressionContext cxt=contexts.get(expressionType);
  if (cxt == null) {
    DefaultExpressionContext defaultCxt=new DefaultExpressionContext(contextObj);
    defaultCxt.setFilters(filters);
    return defaultCxt;
  }
 else {
    return cxt;
  }
}",0.745253164556962
68723,"/** 
 * Returns predefined expressions for sharing case.
 * @param headers
 * @return
 */
private Object[] getPredefinedExpressionsForSharing(ColumnBindingInfo[] headers){
  Map<String,ColumnBindingInfo> commons=new LinkedHashMap<String,ColumnBindingInfo>();
  Map<String,ColumnBindingInfo> aggs=new LinkedHashMap<String,ColumnBindingInfo>();
  Map<String,ColumnBindingInfo> groups=new LinkedHashMap<String,ColumnBindingInfo>();
  Map<String,ColumnBindingInfo> groupsWithAgg=new LinkedHashMap<String,ColumnBindingInfo>();
  Map<String,ColumnBindingInfo> groupsWithoutAgg;
  for (int i=0; i < headers.length; i++) {
    int type=headers[i].getColumnType();
switch (type) {
case ColumnBindingInfo.COMMON_COLUMN:
      commons.put(ExpressionUtil.createJSRowExpression(headers[i].getName()),headers[i]);
    break;
case ColumnBindingInfo.AGGREGATE_COLUMN:
  aggs.put(ExpressionUtil.createJSRowExpression(headers[i].getName()),headers[i]);
break;
case ColumnBindingInfo.GROUP_COLUMN:
groups.put(ExpressionUtil.createJSRowExpression(headers[i].getName()),headers[i]);
break;
}
}
groupsWithoutAgg=new LinkedHashMap<String,ColumnBindingInfo>(groups);
for (Iterator<Entry<String,ColumnBindingInfo>> iter=groupsWithoutAgg.entrySet().iterator(); iter.hasNext(); ) {
Entry<String,ColumnBindingInfo> entry=iter.next();
String groupName=entry.getValue().getName();
ColumnBindingInfo[] aggsValues=aggs.values().toArray(new ColumnBindingInfo[]{});
for (int j=0; j < aggs.size(); j++) {
if (groupName.equals(((ComputedColumnHandle)aggsValues[j].getObjectHandle()).getAggregateOn())) {
iter.remove();
groupsWithAgg.put(entry.getKey(),entry.getValue());
break;
}
}
}
Object[][] categorys=new Object[0][];
Object[][] optionals=new Object[0][];
categorys=new Object[groups.size() + commons.size()][2];
int index=0;
for (Entry<String,ColumnBindingInfo> entry : groups.entrySet()) {
categorys[index][0]=entry.getKey();
categorys[index][1]=entry.getValue();
index++;
}
for (Entry<String,ColumnBindingInfo> entry : commons.entrySet()) {
categorys[index][0]=entry.getKey();
categorys[index][1]=entry.getValue();
index++;
}
if (isInheritColumnsGroups()) {
Map<String,ColumnBindingInfo> g=new LinkedHashMap<String,ColumnBindingInfo>(2);
DesignElementHandle reh=itemHandle;
while (reh != null) {
if (reh.getContainer() instanceof TableGroupHandle) {
reh=reh.getContainer();
for (Entry<String,ColumnBindingInfo> e : groups.entrySet()) {
g.put(e.getKey(),e.getValue());
if (reh.getName().equals(e.getValue().getName())) {
break;
}
}
break;
}
 else if (reh.getContainer() instanceof RowHandle && reh.getContainer() != null && !(reh.getContainer().getContainer() instanceof TableGroupHandle)) {
DesignElementHandle deh=reh;
while (deh != null) {
if (deh.getContainer() instanceof ListingHandle) {
deh=deh.getContainer();
break;
}
deh=deh.getContainer();
}
if (deh != null && deh instanceof ListingHandle) {
if (((ListingHandle)deh).getDetail().findPosn(reh.getContainer()) >= 0) {
g=groups;
}
 else if (((ListingHandle)deh).getHeader().findPosn(reh.getContainer()) >= 0) {
String key=groups.keySet().toArray(new String[]{})[0];
g.put(key,groups.get(key));
}
}
break;
}
 else if (reh.getContainer() instanceof ListingHandle) {
reh=null;
break;
}
reh=reh.getContainer();
}
optionals=new Object[g.size()][2];
int i=0;
for (Entry<String,ColumnBindingInfo> e : g.entrySet()) {
optionals[i][0]=e.getKey();
optionals[i++][1]=e.getValue();
}
}
 else {
int size=(groups.size() > 0) ? 1 : 0;
optionals=new Object[size][2];
if (groups.size() > 0) {
Entry<String,ColumnBindingInfo> entry=groups.entrySet().iterator().next();
;
optionals[0][0]=entry.getKey();
optionals[0][1]=entry.getValue();
}
}
Object[][] values=new Object[aggs.size() + commons.size()][2];
index=0;
for (Entry<String,ColumnBindingInfo> entry : aggs.entrySet()) {
values[index][0]=entry.getKey();
values[index][1]=entry.getValue();
index++;
}
for (Entry<String,ColumnBindingInfo> entry : commons.entrySet()) {
values[index][0]=entry.getKey();
values[index][1]=entry.getValue();
index++;
}
return new Object[]{categorys,optionals,values};
}","/** 
 * Returns predefined expressions for sharing case.
 * @param headers
 * @return
 */
private Object[] getPredefinedExpressionsForSharing(ColumnBindingInfo[] headers){
  Map<String,ColumnBindingInfo> commons=new LinkedHashMap<String,ColumnBindingInfo>();
  Map<String,ColumnBindingInfo> aggs=new LinkedHashMap<String,ColumnBindingInfo>();
  Map<String,ColumnBindingInfo> groups=new LinkedHashMap<String,ColumnBindingInfo>();
  Map<String,ColumnBindingInfo> groupsWithAgg=new LinkedHashMap<String,ColumnBindingInfo>();
  Map<String,ColumnBindingInfo> groupsWithoutAgg;
  for (int i=0; i < headers.length; i++) {
    int type=headers[i].getColumnType();
switch (type) {
case ColumnBindingInfo.COMMON_COLUMN:
      commons.put(ExpressionUtil.createJSRowExpression(headers[i].getName()),headers[i]);
    break;
case ColumnBindingInfo.AGGREGATE_COLUMN:
  aggs.put(ExpressionUtil.createJSRowExpression(headers[i].getName()),headers[i]);
break;
case ColumnBindingInfo.GROUP_COLUMN:
groups.put(ExpressionUtil.createJSRowExpression(headers[i].getName()),headers[i]);
break;
}
}
groupsWithoutAgg=new LinkedHashMap<String,ColumnBindingInfo>(groups);
for (Iterator<Entry<String,ColumnBindingInfo>> iter=groupsWithoutAgg.entrySet().iterator(); iter.hasNext(); ) {
Entry<String,ColumnBindingInfo> entry=iter.next();
String groupName=entry.getValue().getName();
ColumnBindingInfo[] aggsValues=aggs.values().toArray(new ColumnBindingInfo[]{});
for (int j=0; j < aggs.size(); j++) {
if (groupName.equals(((ComputedColumnHandle)aggsValues[j].getObjectHandle()).getAggregateOn())) {
iter.remove();
groupsWithAgg.put(entry.getKey(),entry.getValue());
break;
}
}
}
Object[][] categorys=new Object[0][];
Object[][] optionals=new Object[0][];
categorys=new Object[groups.size() + commons.size()][2];
int index=0;
for (Entry<String,ColumnBindingInfo> entry : groups.entrySet()) {
categorys[index][0]=entry.getKey();
categorys[index][1]=entry.getValue();
index++;
}
for (Entry<String,ColumnBindingInfo> entry : commons.entrySet()) {
categorys[index][0]=entry.getKey();
categorys[index][1]=entry.getValue();
index++;
}
if (isInheritColumnsGroups() && groups.size() > 0) {
Map<String,ColumnBindingInfo> g=new LinkedHashMap<String,ColumnBindingInfo>(2);
DesignElementHandle reh=itemHandle;
while (reh != null) {
if (reh.getContainer() instanceof TableGroupHandle) {
reh=reh.getContainer();
for (Entry<String,ColumnBindingInfo> e : groups.entrySet()) {
g.put(e.getKey(),e.getValue());
if (reh.getName().equals(e.getValue().getName())) {
break;
}
}
break;
}
 else if (reh.getContainer() instanceof RowHandle && reh.getContainer() != null && !(reh.getContainer().getContainer() instanceof TableGroupHandle)) {
DesignElementHandle deh=reh;
while (deh != null) {
if (deh.getContainer() instanceof ListingHandle) {
deh=deh.getContainer();
break;
}
deh=deh.getContainer();
}
if (deh != null && deh instanceof ListingHandle) {
if (((ListingHandle)deh).getDetail().findPosn(reh.getContainer()) >= 0) {
g=groups;
}
 else if (((ListingHandle)deh).getHeader().findPosn(reh.getContainer()) >= 0) {
String key=groups.keySet().toArray(new String[]{})[0];
g.put(key,groups.get(key));
}
}
break;
}
 else if (reh.getContainer() instanceof ListingHandle) {
reh=null;
break;
}
reh=reh.getContainer();
}
optionals=new Object[g.size()][2];
int i=0;
for (Entry<String,ColumnBindingInfo> e : g.entrySet()) {
optionals[i][0]=e.getKey();
optionals[i++][1]=e.getValue();
}
}
 else {
int size=(groups.size() > 0) ? 1 : 0;
optionals=new Object[size][2];
if (groups.size() > 0) {
Entry<String,ColumnBindingInfo> entry=groups.entrySet().iterator().next();
;
optionals[0][0]=entry.getKey();
optionals[0][1]=entry.getValue();
}
}
Object[][] values=new Object[aggs.size() + commons.size()][2];
index=0;
for (Entry<String,ColumnBindingInfo> entry : aggs.entrySet()) {
values[index][0]=entry.getKey();
values[index][1]=entry.getValue();
index++;
}
for (Entry<String,ColumnBindingInfo> entry : commons.entrySet()) {
values[index][0]=entry.getKey();
values[index][1]=entry.getValue();
index++;
}
return new Object[]{categorys,optionals,values};
}",0.9974223640603904
68724,"/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if (!modelColumn.getColumnName().equals(modelColumn.getNativeName()))         dteDataSet.addResultSetHint(new ColumnAdapter((ResultSetColumnHandle)modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.resultSetHintsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
      dteDataSet.addResultSetHint(new ColumnAdapter(modelColumn));
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(new ColumnAdapter(modelColumnHint));
    }
  }
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        ColumnDefinition columnDefn=findColumnDefn(dteDataSet.getResultSetHints(),modelColumn.getColumnName());
        if (columnDefn != null)         columnDefn.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(modelColumn.getDataType()));
 else {
          ColumnAdapter adapter=new ColumnAdapter((ResultSetColumnHandle)modelColumn);
          adapter.setColumnPosition(0);
          dteDataSet.addResultSetHint(adapter);
        }
      }
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if (!modelColumn.getColumnName().equals(modelColumn.getNativeName()))         dteDataSet.addResultSetHint(new ColumnAdapter((ResultSetColumnHandle)modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.resultSetHintsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
      dteDataSet.addResultSetHint(new ColumnAdapter(modelColumn));
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(new ColumnAdapter(modelColumnHint));
    }
  }
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        ColumnDefinition columnDefn=findColumnDefn(dteDataSet.getResultSetHints(),modelColumn.getColumnName());
        if (columnDefn != null) {
          columnDefn.setColumnNativeName(modelColumn.getNativeName());
          columnDefn.setColumnPosition(modelColumn.getPosition());
          columnDefn.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(modelColumn.getDataType()));
        }
 else {
          ColumnAdapter adapter=new ColumnAdapter((ResultSetColumnHandle)modelColumn);
          adapter.setColumnNativeName(modelColumn.getNativeName());
          adapter.setColumnPosition(modelColumn.getPosition());
          dteDataSet.addResultSetHint(adapter);
        }
      }
    }
  }
}",0.9446195407474112
68725,"private static void addLevelFilter(List<LevelViewHandle> levelViews,Map<LevelHandle,ILevelDefinition> levelMapping,ICubeQueryDefinition cubeQuery,IModelAdapter modelAdapter) throws BirtException {
  List<ILevelDefinition> levels=new ArrayList<ILevelDefinition>();
  List<Object> values=new ArrayList<Object>();
  for (Iterator<LevelViewHandle> itr=levelViews.iterator(); itr.hasNext(); ) {
    LevelViewHandle lv=itr.next();
    Iterator filterItr=lv.filtersIterator();
    if (filterItr != null) {
      while (filterItr.hasNext()) {
        FilterConditionElementHandle filterCon=(FilterConditionElementHandle)filterItr.next();
        levels.clear();
        values.clear();
        addMembers(levelMapping,levels,values,filterCon.getMember());
        ILevelDefinition[] qualifyLevels=null;
        Object[] qualifyValues=null;
        if (levels.size() > 0) {
          qualifyLevels=levels.toArray(new ILevelDefinition[levels.size()]);
          qualifyValues=values.toArray(new Object[values.size()]);
        }
        ConditionalExpression filterCondExpr;
        if (ModuleUtil.isListFilterValue(filterCon)) {
          filterCondExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.EXPR_PROP).getValue()),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1ExpressionList().getListValue());
        }
 else {
          Expression value1=null;
          List<Expression> val1list=filterCon.getValue1ExpressionList().getListValue();
          if (val1list != null && val1list.size() > 0) {
            value1=val1list.get(0);
          }
          filterCondExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.EXPR_PROP).getValue()),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),modelAdapter.adaptExpression(value1),modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.VALUE2_PROP).getValue()));
        }
        ICubeFilterDefinition filterDef=getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,levelMapping.get(lv.getCubeLevel()),qualifyLevels,qualifyValues);
        cubeQuery.addFilter(filterDef);
      }
    }
  }
}","private static void addLevelFilter(List<LevelViewHandle> levelViews,Map<LevelHandle,ILevelDefinition> levelMapping,ICubeQueryDefinition cubeQuery,IModelAdapter modelAdapter) throws BirtException {
  List<ILevelDefinition> levels=new ArrayList<ILevelDefinition>();
  List<Object> values=new ArrayList<Object>();
  for (Iterator<LevelViewHandle> itr=levelViews.iterator(); itr.hasNext(); ) {
    LevelViewHandle lv=itr.next();
    Iterator filterItr=lv.filtersIterator();
    if (filterItr != null) {
      while (filterItr.hasNext()) {
        FilterConditionElementHandle filterCon=(FilterConditionElementHandle)filterItr.next();
        levels.clear();
        values.clear();
        addMembers(levelMapping,levels,values,filterCon.getMember());
        ILevelDefinition[] qualifyLevels=null;
        Object[] qualifyValues=null;
        if (levels.size() > 0) {
          qualifyLevels=levels.toArray(new ILevelDefinition[levels.size()]);
          qualifyValues=values.toArray(new Object[values.size()]);
        }
        ConditionalExpression filterCondExpr;
        if (ModuleUtil.isListFilterValue(filterCon)) {
          filterCondExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.EXPR_PROP).getValue(),ExpressionLocation.CUBE),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1ExpressionList().getListValue());
        }
 else {
          Expression value1=null;
          List<Expression> val1list=filterCon.getValue1ExpressionList().getListValue();
          if (val1list != null && val1list.size() > 0) {
            value1=val1list.get(0);
          }
          filterCondExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.EXPR_PROP).getValue(),ExpressionLocation.CUBE),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),modelAdapter.adaptExpression(value1,ExpressionLocation.CUBE),modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.VALUE2_PROP).getValue(),ExpressionLocation.CUBE));
        }
        ICubeFilterDefinition filterDef=getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,levelMapping.get(lv.getCubeLevel()),qualifyLevels,qualifyValues);
        cubeQuery.addFilter(filterDef);
      }
    }
  }
}",0.9796264855687606
68726,"private static void addLevelSorting(List<LevelViewHandle> levelViews,Map<LevelHandle,ILevelDefinition> levelMapping,ICubeQueryDefinition cubeQuery,IModelAdapter modelAdapter) throws BirtException {
  List<ILevelDefinition> levels=new ArrayList<ILevelDefinition>();
  List<Object> values=new ArrayList<Object>();
  for (Iterator<LevelViewHandle> itr=levelViews.iterator(); itr.hasNext(); ) {
    LevelViewHandle lv=itr.next();
    Iterator sortItr=lv.sortsIterator();
    if (sortItr != null) {
      while (sortItr.hasNext()) {
        SortElementHandle sortKey=(SortElementHandle)sortItr.next();
        levels.clear();
        values.clear();
        addMembers(levelMapping,levels,values,sortKey.getMember());
        ILevelDefinition[] qualifyLevels=null;
        Object[] qualifyValues=null;
        if (levels.size() > 0) {
          qualifyLevels=levels.toArray(new ILevelDefinition[levels.size()]);
          qualifyValues=values.toArray(new Object[values.size()]);
        }
        ICubeSortDefinition sortDef=getCubeElementFactory().createCubeSortDefinition(modelAdapter.adaptExpression((Expression)sortKey.getExpressionProperty(ISortElementModel.KEY_PROP).getValue()),levelMapping.get(lv.getCubeLevel()),qualifyLevels,qualifyValues,DataAdapterUtil.adaptModelSortDirection(sortKey.getDirection()));
        cubeQuery.addSort(sortDef);
      }
    }
  }
}","private static void addLevelSorting(List<LevelViewHandle> levelViews,Map<LevelHandle,ILevelDefinition> levelMapping,ICubeQueryDefinition cubeQuery,IModelAdapter modelAdapter) throws BirtException {
  List<ILevelDefinition> levels=new ArrayList<ILevelDefinition>();
  List<Object> values=new ArrayList<Object>();
  for (Iterator<LevelViewHandle> itr=levelViews.iterator(); itr.hasNext(); ) {
    LevelViewHandle lv=itr.next();
    Iterator sortItr=lv.sortsIterator();
    if (sortItr != null) {
      while (sortItr.hasNext()) {
        SortElementHandle sortKey=(SortElementHandle)sortItr.next();
        levels.clear();
        values.clear();
        addMembers(levelMapping,levels,values,sortKey.getMember());
        ILevelDefinition[] qualifyLevels=null;
        Object[] qualifyValues=null;
        if (levels.size() > 0) {
          qualifyLevels=levels.toArray(new ILevelDefinition[levels.size()]);
          qualifyValues=values.toArray(new Object[values.size()]);
        }
        ICubeSortDefinition sortDef=getCubeElementFactory().createCubeSortDefinition(modelAdapter.adaptExpression((Expression)sortKey.getExpressionProperty(ISortElementModel.KEY_PROP).getValue(),ExpressionLocation.CUBE),levelMapping.get(lv.getCubeLevel()),qualifyLevels,qualifyValues,DataAdapterUtil.adaptModelSortDirection(sortKey.getDirection()));
        cubeQuery.addSort(sortDef);
      }
    }
  }
}",0.9912854030501088
68727,"public static ICubeQueryDefinition createCubeQuery(CrosstabReportItemHandle crosstabItem,IDataQueryDefinition parentQuery,boolean needMeasure,boolean needRowDimension,boolean needColumnDimension,boolean needBinding,boolean needSorting,boolean needFilter) throws BirtException {
  ICubeQueryDefinition cubeQuery=getCubeElementFactory().createCubeQuery(crosstabItem.getCubeName());
  List<String> rowLevelNameList=new ArrayList<String>();
  List<String> columnLevelNameList=new ArrayList<String>();
  List<LevelViewHandle> levelViewList=new ArrayList<LevelViewHandle>();
  Map<LevelHandle,ILevelDefinition> levelMapping=new HashMap<LevelHandle,ILevelDefinition>();
  DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
  try {
    IModelAdapter modelAdapter=session.getModelAdaptor();
    if (needMeasure) {
      for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
        MeasureViewHandle mv=crosstabItem.getMeasure(i);
        if (mv instanceof ComputedMeasureViewHandle) {
          continue;
        }
        if (mv.getCubeMeasure() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",mv.getCubeMeasureName()));
        }
        IMeasureDefinition mDef=cubeQuery.createMeasure(mv.getCubeMeasure().getName());
        mDef.setAggrFunction(mv.getCubeMeasure().getFunction() == null ? null : DataAdapterUtil.getRollUpAggregationName(mv.getCubeMeasure().getFunction()));
        addFactTableOrMeasureFilter(mv.filtersIterator(),cubeQuery,modelAdapter);
      }
    }
    if (needRowDimension && crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,ROW_AXIS_TYPE,rowLevelNameList,levelViewList,levelMapping);
    }
    if (needColumnDimension && crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,COLUMN_AXIS_TYPE,columnLevelNameList,levelViewList,levelMapping);
    }
    addFactTableOrMeasureFilter(crosstabItem.filtersIterator(),cubeQuery,modelAdapter);
    if (needSorting) {
      addLevelSorting(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needFilter) {
      addLevelFilter(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needBinding) {
      Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
      ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
      if (bindingItr != null) {
        Map<String,String> cache=new HashMap<String,String>();
        while (bindingItr.hasNext()) {
          ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
          Binding binding=new Binding(column.getName());
          binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
          binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue()));
          binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
          if (column.getFilterExpression() != null) {
            binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue()));
          }
          for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
            AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
            if (aah.getValue() != null) {
              binding.addArgument(modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue()));
            }
          }
          List aggrList=column.getAggregateOnList();
          if (aggrList != null) {
            for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
              String baseLevel=(String)aggrItr.next();
              CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
            }
          }
          cubeQuery.addBinding(binding);
        }
      }
    }
  }
  finally {
    session.shutdown();
  }
  return cubeQuery;
}","public static ICubeQueryDefinition createCubeQuery(CrosstabReportItemHandle crosstabItem,IDataQueryDefinition parentQuery,boolean needMeasure,boolean needRowDimension,boolean needColumnDimension,boolean needBinding,boolean needSorting,boolean needFilter) throws BirtException {
  ICubeQueryDefinition cubeQuery=getCubeElementFactory().createCubeQuery(crosstabItem.getCubeName());
  List<String> rowLevelNameList=new ArrayList<String>();
  List<String> columnLevelNameList=new ArrayList<String>();
  List<LevelViewHandle> levelViewList=new ArrayList<LevelViewHandle>();
  Map<LevelHandle,ILevelDefinition> levelMapping=new HashMap<LevelHandle,ILevelDefinition>();
  DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
  try {
    IModelAdapter modelAdapter=session.getModelAdaptor();
    if (needMeasure) {
      for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
        MeasureViewHandle mv=crosstabItem.getMeasure(i);
        if (mv instanceof ComputedMeasureViewHandle) {
          continue;
        }
        if (mv.getCubeMeasure() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",mv.getCubeMeasureName()));
        }
        IMeasureDefinition mDef=cubeQuery.createMeasure(mv.getCubeMeasure().getName());
        mDef.setAggrFunction(mv.getCubeMeasure().getFunction() == null ? null : DataAdapterUtil.getRollUpAggregationName(mv.getCubeMeasure().getFunction()));
        addFactTableOrMeasureFilter(mv.filtersIterator(),cubeQuery,modelAdapter);
      }
    }
    if (needRowDimension && crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,ROW_AXIS_TYPE,rowLevelNameList,levelViewList,levelMapping);
    }
    if (needColumnDimension && crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,COLUMN_AXIS_TYPE,columnLevelNameList,levelViewList,levelMapping);
    }
    addFactTableOrMeasureFilter(crosstabItem.filtersIterator(),cubeQuery,modelAdapter);
    if (needSorting) {
      addLevelSorting(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needFilter) {
      addLevelFilter(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needBinding) {
      Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
      ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
      if (bindingItr != null) {
        Map<String,String> cache=new HashMap<String,String>();
        while (bindingItr.hasNext()) {
          ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
          Binding binding=new Binding(column.getName());
          binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
          binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
          binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
          if (column.getFilterExpression() != null) {
            binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
          }
          for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
            AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
            if (aah.getValue() != null) {
              binding.addArgument(modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
            }
          }
          List aggrList=column.getAggregateOnList();
          if (aggrList != null) {
            for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
              String baseLevel=(String)aggrItr.next();
              CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
            }
          }
          cubeQuery.addBinding(binding);
        }
      }
    }
  }
  finally {
    session.shutdown();
  }
  return cubeQuery;
}",0.9916044776119404
68728,"private static void addFactTableOrMeasureFilter(Iterator<FilterConditionElementHandle> filters,ICubeQueryDefinition cubeQuery,IModelAdapter modelAdapter) throws BirtException {
  if (filters != null) {
    while (filters.hasNext()) {
      FilterConditionElementHandle filterCon=filters.next();
      ConditionalExpression filterCondExpr;
      if (ModuleUtil.isListFilterValue(filterCon)) {
        filterCondExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.EXPR_PROP).getValue()),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1ExpressionList().getListValue());
      }
 else {
        Expression value1=null;
        List<Expression> val1list=filterCon.getValue1ExpressionList().getListValue();
        if (val1list != null && val1list.size() > 0) {
          value1=val1list.get(0);
        }
        filterCondExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.EXPR_PROP).getValue()),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),modelAdapter.adaptExpression(value1),modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.VALUE2_PROP).getValue()));
      }
      ICubeFilterDefinition filterDef=getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,null,null,null);
      cubeQuery.addFilter(filterDef);
    }
  }
}","private static void addFactTableOrMeasureFilter(Iterator<FilterConditionElementHandle> filters,ICubeQueryDefinition cubeQuery,IModelAdapter modelAdapter) throws BirtException {
  if (filters != null) {
    while (filters.hasNext()) {
      FilterConditionElementHandle filterCon=filters.next();
      ConditionalExpression filterCondExpr;
      if (ModuleUtil.isListFilterValue(filterCon)) {
        filterCondExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.EXPR_PROP).getValue(),ExpressionLocation.CUBE),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1ExpressionList().getListValue());
      }
 else {
        Expression value1=null;
        List<Expression> val1list=filterCon.getValue1ExpressionList().getListValue();
        if (val1list != null && val1list.size() > 0) {
          value1=val1list.get(0);
        }
        filterCondExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.EXPR_PROP).getValue(),ExpressionLocation.CUBE),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),modelAdapter.adaptExpression(value1,ExpressionLocation.CUBE),modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.VALUE2_PROP).getValue(),ExpressionLocation.CUBE));
      }
      ICubeFilterDefinition filterDef=getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,null,null,null);
      cubeQuery.addFilter(filterDef);
    }
  }
}",0.9690122659780503
68729,"private static void setupHighlightStyle(ReportElementHandle handle,Iterator<HighlightRuleHandle> highlightRules,IStyle style,IBaseResultSet evaluator) throws BirtException {
  DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
  try {
    IModelAdapter modelAdapter=session.getModelAdaptor();
    while (highlightRules.hasNext()) {
      HighlightRuleHandle rule=highlightRules.next();
      ConditionalExpression condExpr=null;
      if (ModuleUtil.isListStyleRuleValue(rule)) {
        condExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)rule.getExpressionProperty(HighlightRule.TEST_EXPR_MEMBER).getValue()),DataAdapterUtil.adaptModelFilterOperator(rule.getOperator()),rule.getValue1ExpressionList().getListValue());
      }
 else {
        Expression value1=null;
        List<Expression> val1list=rule.getValue1ExpressionList().getListValue();
        if (val1list != null && val1list.size() > 0) {
          value1=val1list.get(0);
        }
        condExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)rule.getExpressionProperty(HighlightRule.TEST_EXPR_MEMBER).getValue()),DataAdapterUtil.adaptModelFilterOperator(rule.getOperator()),modelAdapter.adaptExpression(value1),modelAdapter.adaptExpression((Expression)rule.getExpressionProperty(StyleRule.VALUE2_MEMBER).getValue()));
      }
      IConditionalExpression expression=ExpressionUtil.transformConditionalExpression(condExpr);
      Object value=evaluator.evaluate(expression);
      if (value instanceof Boolean && ((Boolean)value).booleanValue()) {
        setupRuleStyle(rule,style);
      }
    }
  }
  finally {
    session.shutdown();
  }
}","private static void setupHighlightStyle(ReportElementHandle handle,Iterator<HighlightRuleHandle> highlightRules,IStyle style,IBaseResultSet evaluator) throws BirtException {
  DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
  try {
    IModelAdapter modelAdapter=session.getModelAdaptor();
    while (highlightRules.hasNext()) {
      HighlightRuleHandle rule=highlightRules.next();
      ConditionalExpression condExpr=null;
      if (ModuleUtil.isListStyleRuleValue(rule)) {
        condExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)rule.getExpressionProperty(HighlightRule.TEST_EXPR_MEMBER).getValue(),ExpressionLocation.CUBE),DataAdapterUtil.adaptModelFilterOperator(rule.getOperator()),rule.getValue1ExpressionList().getListValue());
      }
 else {
        Expression value1=null;
        List<Expression> val1list=rule.getValue1ExpressionList().getListValue();
        if (val1list != null && val1list.size() > 0) {
          value1=val1list.get(0);
        }
        condExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)rule.getExpressionProperty(HighlightRule.TEST_EXPR_MEMBER).getValue(),ExpressionLocation.CUBE),DataAdapterUtil.adaptModelFilterOperator(rule.getOperator()),modelAdapter.adaptExpression(value1,ExpressionLocation.CUBE),modelAdapter.adaptExpression((Expression)rule.getExpressionProperty(StyleRule.VALUE2_MEMBER).getValue(),ExpressionLocation.CUBE));
      }
      IConditionalExpression expression=ExpressionUtil.transformConditionalExpression(condExpr);
      Object value=evaluator.evaluate(expression);
      if (value instanceof Boolean && ((Boolean)value).booleanValue()) {
        setupRuleStyle(rule,style);
      }
    }
  }
  finally {
    session.shutdown();
  }
}",0.9730337078651684
68730,"private static List<IBinding> getQueryBindings(CrosstabReportItemHandle crosstabItem) throws BirtException {
  List<String> rowLevelNameList=new ArrayList<String>();
  List<String> columnLevelNameList=new ArrayList<String>();
  if (crosstabItem.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstabItem.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(ICrosstabConstants.ROW_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(dv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(lv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        rowLevelNameList.add(lv.getCubeLevel().getFullName());
      }
    }
  }
  if (crosstabItem.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstabItem.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(dv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(lv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        columnLevelNameList.add(lv.getCubeLevel().getFullName());
      }
    }
  }
  List<IBinding> bindingList=new ArrayList<IBinding>();
  Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
  ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
  if (bindingItr != null) {
    Map<String,String> cache=new HashMap<String,String>();
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    try {
      IModelAdapter modelAdapter=session.getModelAdaptor();
      while (bindingItr.hasNext()) {
        ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
        Binding binding=new Binding(column.getName());
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
        binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue()));
        binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
        if (column.getFilterExpression() != null) {
          binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue()));
        }
        for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
          AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
          binding.addArgument(modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue()));
        }
        List aggrList=column.getAggregateOnList();
        if (aggrList != null) {
          for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
            String baseLevel=(String)aggrItr.next();
            addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
          }
        }
        bindingList.add(binding);
      }
    }
  finally {
      session.shutdown();
    }
  }
  return bindingList;
}","private static List<IBinding> getQueryBindings(CrosstabReportItemHandle crosstabItem) throws BirtException {
  List<String> rowLevelNameList=new ArrayList<String>();
  List<String> columnLevelNameList=new ArrayList<String>();
  if (crosstabItem.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstabItem.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(ICrosstabConstants.ROW_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(dv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(lv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        rowLevelNameList.add(lv.getCubeLevel().getFullName());
      }
    }
  }
  if (crosstabItem.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstabItem.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(dv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(lv.getModelHandle().getElement(),Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        columnLevelNameList.add(lv.getCubeLevel().getFullName());
      }
    }
  }
  List<IBinding> bindingList=new ArrayList<IBinding>();
  Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
  ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
  if (bindingItr != null) {
    Map<String,String> cache=new HashMap<String,String>();
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    try {
      IModelAdapter modelAdapter=session.getModelAdaptor();
      while (bindingItr.hasNext()) {
        ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
        Binding binding=new Binding(column.getName());
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
        binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
        binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
        if (column.getFilterExpression() != null) {
          binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
        }
        for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
          AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
          binding.addArgument(modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
        }
        List aggrList=column.getAggregateOnList();
        if (aggrList != null) {
          for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
            String baseLevel=(String)aggrItr.next();
            addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
          }
        }
        bindingList.add(binding);
      }
    }
  finally {
      session.shutdown();
    }
  }
  return bindingList;
}",0.99092513234182
68731,"private IBinding[] getCrosstabBindings(CrosstabReportItemHandle xtabHandle) throws BirtException {
  Iterator bindingItr=((ExtendedItemHandle)xtabHandle.getModelHandle()).columnBindingsIterator();
  ModuleHandle module=((ExtendedItemHandle)xtabHandle.getModelHandle()).getModuleHandle();
  List<IBinding> bindingList=new ArrayList<IBinding>();
  if (bindingItr != null) {
    Map cache=new HashMap();
    List rowLevelNameList=new ArrayList();
    List columnLevelNameList=new ArrayList();
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    try {
      IModelAdapter modelAdapter=session.getModelAdaptor();
      while (bindingItr.hasNext()) {
        ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
        Binding binding=new Binding(column.getName());
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
        binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue()));
        binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
        if (column.getFilterExpression() != null) {
          binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue()));
        }
        for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
          AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
          if (aah.getValue() != null) {
            binding.addArgument(modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue()));
          }
        }
        List aggrList=column.getAggregateOnList();
        if (aggrList != null) {
          for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
            String baseLevel=(String)aggrItr.next();
            CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
          }
        }
        bindingList.add(binding);
      }
    }
  finally {
      session.shutdown();
    }
  }
  return bindingList.toArray(new IBinding[bindingList.size()]);
}","private IBinding[] getCrosstabBindings(CrosstabReportItemHandle xtabHandle) throws BirtException {
  Iterator bindingItr=((ExtendedItemHandle)xtabHandle.getModelHandle()).columnBindingsIterator();
  ModuleHandle module=((ExtendedItemHandle)xtabHandle.getModelHandle()).getModuleHandle();
  List<IBinding> bindingList=new ArrayList<IBinding>();
  if (bindingItr != null) {
    Map cache=new HashMap();
    List rowLevelNameList=new ArrayList();
    List columnLevelNameList=new ArrayList();
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    try {
      IModelAdapter modelAdapter=session.getModelAdaptor();
      while (bindingItr.hasNext()) {
        ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
        Binding binding=new Binding(column.getName());
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
        binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
        binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
        if (column.getFilterExpression() != null) {
          binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
        }
        for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
          AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
          if (aah.getValue() != null) {
            binding.addArgument(modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
          }
        }
        List aggrList=column.getAggregateOnList();
        if (aggrList != null) {
          for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
            String baseLevel=(String)aggrItr.next();
            CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
          }
        }
        bindingList.add(binding);
      }
    }
  finally {
      session.shutdown();
    }
  }
  return bindingList.toArray(new IBinding[bindingList.size()]);
}",0.984822934232715
68732,"public void createPartControl(Composite parent){
  Composite child=this.initEditorLayout(parent);
  cmbExprListViewer=new ComboViewer(cmbExpList);
  JSExpListProvider provider=new JSExpListProvider();
  cmbExprListViewer.setContentProvider(provider);
  cmbExprListViewer.setLabelProvider(provider);
  cmbExprListViewer.setData(VIEWER_CATEGORY_KEY,VIEWER_CATEGORY_CONTEXT);
  JSSubFunctionListProvider subProvider=new JSSubFunctionListProvider(this);
  cmbExprListViewer.addSelectionChangedListener(subProvider);
  cmbSubFunctions.addListener(CustomChooserComposite.DROPDOWN_EVENT,new Listener(){
    public void handleEvent(    Event event){
      cmbSubFunctions.deselectAll();
      ScriptParser parser=new ScriptParser(getEditorText());
      Collection coll=parser.getAllMethodInfo();
      for (Iterator itr=coll.iterator(); itr.hasNext(); ) {
        IScriptMethodInfo mtd=(IScriptMethodInfo)itr.next();
        cmbSubFunctions.markSelection(METHOD_DISPLAY_INDENT + mtd.getName());
      }
    }
  }
);
  cmbSubFunctionsViewer=new TextComboViewer(cmbSubFunctions);
  cmbSubFunctionsViewer.setContentProvider(subProvider);
  cmbSubFunctionsViewer.setLabelProvider(subProvider);
  cmbSubFunctionsViewer.addSelectionChangedListener(subProvider);
  Object model=getModel();
  if (model != null) {
    cmbExpList.setVisible(true);
    cmbSubFunctions.setVisible(true);
    setComboViewerInput(model);
  }
 else {
    setComboViewerInput(Messages.getString(""String_Node_Str""));
  }
  cmbExprListViewer.addSelectionChangedListener(palettePage.getSupport());
  cmbExprListViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    /** 
 * selectionChanged( event) - This listener implementation is invoked when an item in the combo box is selected, - It saves the current editor contents. - Updates the editor content with the expression corresponding to the selected method name or expression. name.
 */
    public void selectionChanged(    SelectionChangedEvent event){
      ISelection selection=event.getSelection();
      if (selection != null) {
        Object[] sel=((IStructuredSelection)selection).toArray();
        if (sel.length == 1) {
          if (sel[0] instanceof IPropertyDefn) {
            DesignElementHandle desHandle=(DesignElementHandle)cmbExprListViewer.getInput();
            saveModel();
            IPropertyDefn elePropDefn=(IPropertyDefn)sel[0];
            cmbItemLastSelected=elePropDefn;
            setEditorText(desHandle.getStringProperty(elePropDefn.getName()));
            selectionMap.put(getModel(),selection);
            String method=cmbItemLastSelected.getName();
            updateScriptContext(desHandle,method);
            updateMethodDescription(method);
            refreshAll();
          }
        }
      }
    }
  }
);
  scriptEditor.createPartControl(child);
  scriptValidator=new ScriptValidator(getViewer());
  SessionHandleAdapter.getInstance().getMediator().addColleague(this);
  disableEditor();
  SourceViewer viewer=getViewer();
  IDocument document=viewer == null ? null : viewer.getDocument();
  if (document != null) {
    IDocumentUndoManager undoManager=DocumentUndoManagerRegistry.getDocumentUndoManager(document);
    if (undoManager != null) {
      undoManager.addDocumentUndoListener(undoListener);
    }
    document.addDocumentListener(documentListener);
  }
}","public void createPartControl(Composite parent){
  Composite child=this.initEditorLayout(parent);
  cmbExprListViewer=new ComboViewer(cmbExpList);
  JSExpListProvider provider=new JSExpListProvider();
  cmbExprListViewer.setContentProvider(provider);
  cmbExprListViewer.setLabelProvider(provider);
  cmbExprListViewer.setData(VIEWER_CATEGORY_KEY,VIEWER_CATEGORY_CONTEXT);
  JSSubFunctionListProvider subProvider=new JSSubFunctionListProvider(this);
  cmbExprListViewer.addSelectionChangedListener(subProvider);
  cmbSubFunctions.addListener(CustomChooserComposite.DROPDOWN_EVENT,new Listener(){
    public void handleEvent(    Event event){
      cmbSubFunctions.deselectAll();
      ScriptParser parser=new ScriptParser(getEditorText());
      Collection coll=parser.getAllMethodInfo();
      for (Iterator itr=coll.iterator(); itr.hasNext(); ) {
        IScriptMethodInfo mtd=(IScriptMethodInfo)itr.next();
        cmbSubFunctions.markSelection(METHOD_DISPLAY_INDENT + mtd.getName());
      }
    }
  }
);
  cmbSubFunctionsViewer=new TextComboViewer(cmbSubFunctions);
  cmbSubFunctionsViewer.setContentProvider(subProvider);
  cmbSubFunctionsViewer.setLabelProvider(subProvider);
  cmbSubFunctionsViewer.addSelectionChangedListener(subProvider);
  Object model=getModel();
  if (model != null) {
    cmbExpList.setVisible(true);
    cmbSubFunctions.setVisible(true);
    setComboViewerInput(model);
  }
 else {
    setComboViewerInput(Messages.getString(""String_Node_Str""));
  }
  cmbExprListViewer.addSelectionChangedListener(palettePage.getSupport());
  cmbExprListViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    /** 
 * selectionChanged( event) - This listener implementation is invoked when an item in the combo box is selected, - It saves the current editor contents. - Updates the editor content with the expression corresponding to the selected method name or expression. name.
 */
    public void selectionChanged(    SelectionChangedEvent event){
      ISelection selection=event.getSelection();
      if (selection != null) {
        Object[] sel=((IStructuredSelection)selection).toArray();
        if (sel.length == 1) {
          if (sel[0] instanceof IPropertyDefn) {
            DesignElementHandle desHandle=(DesignElementHandle)cmbExprListViewer.getInput();
            saveModel();
            IPropertyDefn elePropDefn=(IPropertyDefn)sel[0];
            cmbItemLastSelected=elePropDefn;
            setEditorText(desHandle.getStringProperty(elePropDefn.getName()));
            selectionMap.put(getModel(),selection);
            String method=cmbItemLastSelected.getName();
            updateScriptContext(desHandle,method);
            updateMethodDescription(method);
            refreshAll();
          }
        }
      }
    }
  }
);
  scriptEditor.createPartControl(child);
  scriptValidator=new ScriptValidator(getViewer());
  disableEditor();
  SourceViewer viewer=getViewer();
  IDocument document=viewer == null ? null : viewer.getDocument();
  if (document != null) {
    IDocumentUndoManager undoManager=DocumentUndoManagerRegistry.getDocumentUndoManager(document);
    if (undoManager != null) {
      undoManager.addDocumentUndoListener(undoListener);
    }
    document.addDocumentListener(documentListener);
  }
}",0.989279782575872
68733,"public void dispose(){
  unhookModelEventManager(getModel());
  super.dispose();
  jsEditor.dispose();
  jsEditor=null;
}","public void dispose(){
  unhookModelEventManager(getModel());
  if (jsEditor instanceof JSEditor) {
    ((JSEditor)jsEditor).disConnectRoot(getModel());
  }
  super.dispose();
  jsEditor.dispose();
  jsEditor=null;
}",0.5875370919881305
68734,"public Object get(String name,Scriptable start){
  if (ScriptConstants.OUTER_RESULT_KEYWORD.equalsIgnoreCase(name)) {
    if (this.helper.getParent() != null)     return helper.getParent().getScriptable();
 else     throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.NO_OUTER_RESULTS_EXIST));
  }
  int rowIndex=-1;
  try {
    rowIndex=odiResult.getCurrentResultIndex();
  }
 catch (  BirtException e1) {
  }
  if (ScriptConstants.ROW_NUM_KEYWORD.equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    return new Integer(rowIndex);
  }
  if (rowIndex == currRowIndex && valueCacheMap.containsKey(name)) {
    return valueCacheMap.get(name);
  }
 else {
    Object value=null;
    try {
      IBinding binding=this.exprManager.getBinding(name);
      if (binding == null) {
        throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.INVALID_BOUND_COLUMN_NAME,new String[]{name}));
      }
      if (binding.getAggrFunction() != null)       return this.odiResult.getAggrValue(name);
      IBaseExpression dataExpr=this.exprManager.getExpr(name);
      if (dataExpr == null) {
        throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.INVALID_BOUND_COLUMN_NAME,new String[]{name}));
      }
      value=ExprEvaluateUtil.evaluateValue(dataExpr,this.odiResult.getCurrentResultIndex(),this.odiResult.getCurrentResult(),this.scope,this.cx);
      value=JavascriptEvalUtil.convertToJavascriptValue(DataTypeUtil.convert(value,binding.getDataType()),this.scope);
    }
 catch (    BirtException e) {
      throw Context.reportRuntimeError(e.getLocalizedMessage());
    }
    if (this.currRowIndex != rowIndex) {
      this.valueCacheMap.clear();
      this.currRowIndex=rowIndex;
    }
    valueCacheMap.put(name,value);
    return value;
  }
}","public Object get(String name,Scriptable start){
  if (ScriptConstants.OUTER_RESULT_KEYWORD.equalsIgnoreCase(name)) {
    if (this.helper.getParent() != null)     return helper.getParent().getScriptable();
 else     throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.NO_OUTER_RESULTS_EXIST));
  }
  int rowIndex=-1;
  try {
    rowIndex=odiResult.getCurrentResultIndex();
  }
 catch (  BirtException e1) {
  }
  if (ScriptConstants.ROW_NUM_KEYWORD.equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    return new Integer(rowIndex);
  }
  if (rowIndex == currRowIndex && valueCacheMap.containsKey(name)) {
    return valueCacheMap.get(name);
  }
 else {
    Object value=null;
    try {
      IBinding binding=this.exprManager.getBinding(name);
      if (binding == null) {
        throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.INVALID_BOUND_COLUMN_NAME,new String[]{name}));
      }
      if (binding.getAggrFunction() != null) {
        return JavascriptEvalUtil.convertToJavascriptValue(DataTypeUtil.convert(this.odiResult.getAggrValue(name),binding.getDataType()),this.scope);
      }
      IBaseExpression dataExpr=this.exprManager.getExpr(name);
      if (dataExpr == null) {
        throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.INVALID_BOUND_COLUMN_NAME,new String[]{name}));
      }
      value=ExprEvaluateUtil.evaluateValue(dataExpr,this.odiResult.getCurrentResultIndex(),this.odiResult.getCurrentResult(),this.scope,this.cx);
      value=JavascriptEvalUtil.convertToJavascriptValue(DataTypeUtil.convert(value,binding.getDataType()),this.scope);
    }
 catch (    BirtException e) {
      throw Context.reportRuntimeError(e.getLocalizedMessage());
    }
    if (this.currRowIndex != rowIndex) {
      this.valueCacheMap.clear();
      this.currRowIndex=rowIndex;
    }
    valueCacheMap.put(name,value);
    return value;
  }
}",0.9644879053010808
68735,"private static void addLevelFilter(List<LevelViewHandle> levelViews,Map<LevelHandle,ILevelDefinition> levelMapping,ICubeQueryDefinition cubeQuery) throws BirtException {
  List<ILevelDefinition> levels=new ArrayList<ILevelDefinition>();
  List<Object> values=new ArrayList<Object>();
  for (Iterator<LevelViewHandle> itr=levelViews.iterator(); itr.hasNext(); ) {
    LevelViewHandle lv=itr.next();
    Iterator filterItr=lv.filtersIterator();
    if (filterItr != null) {
      while (filterItr.hasNext()) {
        FilterConditionElementHandle filterCon=(FilterConditionElementHandle)filterItr.next();
        levels.clear();
        values.clear();
        addMembers(levelMapping,levels,values,filterCon.getMember());
        ILevelDefinition[] qualifyLevels=null;
        Object[] qualifyValues=null;
        if (levels.size() > 0) {
          qualifyLevels=levels.toArray(new ILevelDefinition[levels.size()]);
          qualifyValues=values.toArray(new Object[values.size()]);
        }
        ConditionalExpression filterCondExpr;
        if (ModuleUtil.isListFilterValue(filterCon)) {
          filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1List());
        }
 else {
          filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1(),filterCon.getValue2());
        }
        ICubeFilterDefinition filterDef=getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,levelMapping.get(lv.getCubeLevel()),qualifyLevels,qualifyValues);
        cubeQuery.addFilter(filterDef);
      }
    }
  }
}","private static void addLevelFilter(List<LevelViewHandle> levelViews,Map<LevelHandle,ILevelDefinition> levelMapping,ICubeQueryDefinition cubeQuery,IModelAdapter modelAdapter) throws BirtException {
  List<ILevelDefinition> levels=new ArrayList<ILevelDefinition>();
  List<Object> values=new ArrayList<Object>();
  for (Iterator<LevelViewHandle> itr=levelViews.iterator(); itr.hasNext(); ) {
    LevelViewHandle lv=itr.next();
    Iterator filterItr=lv.filtersIterator();
    if (filterItr != null) {
      while (filterItr.hasNext()) {
        FilterConditionElementHandle filterCon=(FilterConditionElementHandle)filterItr.next();
        levels.clear();
        values.clear();
        addMembers(levelMapping,levels,values,filterCon.getMember());
        ILevelDefinition[] qualifyLevels=null;
        Object[] qualifyValues=null;
        if (levels.size() > 0) {
          qualifyLevels=levels.toArray(new ILevelDefinition[levels.size()]);
          qualifyValues=values.toArray(new Object[values.size()]);
        }
        ConditionalExpression filterCondExpr;
        if (ModuleUtil.isListFilterValue(filterCon)) {
          filterCondExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.EXPR_PROP).getValue()),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1ExpressionList().getListValue());
        }
 else {
          Expression value1=null;
          List<Expression> val1list=filterCon.getValue1ExpressionList().getListValue();
          if (val1list != null && val1list.size() > 0) {
            value1=val1list.get(0);
          }
          filterCondExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.EXPR_PROP).getValue()),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),modelAdapter.adaptExpression(value1),modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.VALUE2_PROP).getValue()));
        }
        ICubeFilterDefinition filterDef=getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,levelMapping.get(lv.getCubeLevel()),qualifyLevels,qualifyValues);
        cubeQuery.addFilter(filterDef);
      }
    }
  }
}",0.8285500374344896
68736,"private static void addLevelSorting(List<LevelViewHandle> levelViews,Map<LevelHandle,ILevelDefinition> levelMapping,ICubeQueryDefinition cubeQuery) throws BirtException {
  List<ILevelDefinition> levels=new ArrayList<ILevelDefinition>();
  List<Object> values=new ArrayList<Object>();
  for (Iterator<LevelViewHandle> itr=levelViews.iterator(); itr.hasNext(); ) {
    LevelViewHandle lv=itr.next();
    Iterator sortItr=lv.sortsIterator();
    if (sortItr != null) {
      while (sortItr.hasNext()) {
        SortElementHandle sortKey=(SortElementHandle)sortItr.next();
        levels.clear();
        values.clear();
        addMembers(levelMapping,levels,values,sortKey.getMember());
        ILevelDefinition[] qualifyLevels=null;
        Object[] qualifyValues=null;
        if (levels.size() > 0) {
          qualifyLevels=levels.toArray(new ILevelDefinition[levels.size()]);
          qualifyValues=values.toArray(new Object[values.size()]);
        }
        ICubeSortDefinition sortDef=getCubeElementFactory().createCubeSortDefinition(sortKey.getKey(),levelMapping.get(lv.getCubeLevel()),qualifyLevels,qualifyValues,DataAdapterUtil.adaptModelSortDirection(sortKey.getDirection()));
        cubeQuery.addSort(sortDef);
      }
    }
  }
}","private static void addLevelSorting(List<LevelViewHandle> levelViews,Map<LevelHandle,ILevelDefinition> levelMapping,ICubeQueryDefinition cubeQuery,IModelAdapter modelAdapter) throws BirtException {
  List<ILevelDefinition> levels=new ArrayList<ILevelDefinition>();
  List<Object> values=new ArrayList<Object>();
  for (Iterator<LevelViewHandle> itr=levelViews.iterator(); itr.hasNext(); ) {
    LevelViewHandle lv=itr.next();
    Iterator sortItr=lv.sortsIterator();
    if (sortItr != null) {
      while (sortItr.hasNext()) {
        SortElementHandle sortKey=(SortElementHandle)sortItr.next();
        levels.clear();
        values.clear();
        addMembers(levelMapping,levels,values,sortKey.getMember());
        ILevelDefinition[] qualifyLevels=null;
        Object[] qualifyValues=null;
        if (levels.size() > 0) {
          qualifyLevels=levels.toArray(new ILevelDefinition[levels.size()]);
          qualifyValues=values.toArray(new Object[values.size()]);
        }
        ICubeSortDefinition sortDef=getCubeElementFactory().createCubeSortDefinition(modelAdapter.adaptExpression((Expression)sortKey.getExpressionProperty(ISortElementModel.KEY_PROP).getValue()),levelMapping.get(lv.getCubeLevel()),qualifyLevels,qualifyValues,DataAdapterUtil.adaptModelSortDirection(sortKey.getDirection()));
        cubeQuery.addSort(sortDef);
      }
    }
  }
}",0.951322345726332
68737,"public static ICubeQueryDefinition createCubeQuery(CrosstabReportItemHandle crosstabItem,IDataQueryDefinition parentQuery,boolean needMeasure,boolean needRowDimension,boolean needColumnDimension,boolean needBinding,boolean needSorting,boolean needFilter) throws BirtException {
  ICubeQueryDefinition cubeQuery=getCubeElementFactory().createCubeQuery(crosstabItem.getCubeName());
  List<String> rowLevelNameList=new ArrayList<String>();
  List<String> columnLevelNameList=new ArrayList<String>();
  List<LevelViewHandle> levelViewList=new ArrayList<LevelViewHandle>();
  Map<LevelHandle,ILevelDefinition> levelMapping=new HashMap<LevelHandle,ILevelDefinition>();
  if (needMeasure) {
    for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
      MeasureViewHandle mv=crosstabItem.getMeasure(i);
      if (mv instanceof ComputedMeasureViewHandle) {
        continue;
      }
      if (mv.getCubeMeasure() == null) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",mv.getCubeMeasureName()));
      }
      IMeasureDefinition mDef=cubeQuery.createMeasure(mv.getCubeMeasure().getName());
      mDef.setAggrFunction(mv.getCubeMeasure().getFunction() == null ? null : DataAdapterUtil.getRollUpAggregationName(mv.getCubeMeasure().getFunction()));
      addFactTableOrMeasureFilter(mv.filtersIterator(),cubeQuery);
    }
  }
  if (needRowDimension && crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
    addEdgeDefinition(cubeQuery,crosstabItem,ROW_AXIS_TYPE,rowLevelNameList,levelViewList,levelMapping);
  }
  if (needColumnDimension && crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
    addEdgeDefinition(cubeQuery,crosstabItem,COLUMN_AXIS_TYPE,columnLevelNameList,levelViewList,levelMapping);
  }
  addFactTableOrMeasureFilter(crosstabItem.filtersIterator(),cubeQuery);
  if (needSorting) {
    addLevelSorting(levelViewList,levelMapping,cubeQuery);
  }
  if (needFilter) {
    addLevelFilter(levelViewList,levelMapping,cubeQuery);
  }
  if (needBinding) {
    Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
    ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
    if (bindingItr != null) {
      Map<String,String> cache=new HashMap<String,String>();
      while (bindingItr.hasNext()) {
        ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
        Binding binding=new Binding(column.getName());
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
        binding.setExpression(column.getExpression() == null ? null : new ScriptExpression(column.getExpression()));
        binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
        if (column.getFilterExpression() != null) {
          binding.setFilter(new ScriptExpression(column.getFilterExpression()));
        }
        for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
          AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
          if (aah.getValue() != null) {
            binding.addArgument(new ScriptExpression(aah.getValue()));
          }
        }
        List aggrList=column.getAggregateOnList();
        if (aggrList != null) {
          for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
            String baseLevel=(String)aggrItr.next();
            CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
          }
        }
        cubeQuery.addBinding(binding);
      }
    }
  }
  return cubeQuery;
}","public static ICubeQueryDefinition createCubeQuery(CrosstabReportItemHandle crosstabItem,IDataQueryDefinition parentQuery,boolean needMeasure,boolean needRowDimension,boolean needColumnDimension,boolean needBinding,boolean needSorting,boolean needFilter) throws BirtException {
  ICubeQueryDefinition cubeQuery=getCubeElementFactory().createCubeQuery(crosstabItem.getCubeName());
  List<String> rowLevelNameList=new ArrayList<String>();
  List<String> columnLevelNameList=new ArrayList<String>();
  List<LevelViewHandle> levelViewList=new ArrayList<LevelViewHandle>();
  Map<LevelHandle,ILevelDefinition> levelMapping=new HashMap<LevelHandle,ILevelDefinition>();
  DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
  try {
    IModelAdapter modelAdapter=session.getModelAdaptor();
    if (needMeasure) {
      for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
        MeasureViewHandle mv=crosstabItem.getMeasure(i);
        if (mv instanceof ComputedMeasureViewHandle) {
          continue;
        }
        if (mv.getCubeMeasure() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",mv.getCubeMeasureName()));
        }
        IMeasureDefinition mDef=cubeQuery.createMeasure(mv.getCubeMeasure().getName());
        mDef.setAggrFunction(mv.getCubeMeasure().getFunction() == null ? null : DataAdapterUtil.getRollUpAggregationName(mv.getCubeMeasure().getFunction()));
        addFactTableOrMeasureFilter(mv.filtersIterator(),cubeQuery,modelAdapter);
      }
    }
    if (needRowDimension && crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,ROW_AXIS_TYPE,rowLevelNameList,levelViewList,levelMapping);
    }
    if (needColumnDimension && crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,COLUMN_AXIS_TYPE,columnLevelNameList,levelViewList,levelMapping);
    }
    addFactTableOrMeasureFilter(crosstabItem.filtersIterator(),cubeQuery,modelAdapter);
    if (needSorting) {
      addLevelSorting(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needFilter) {
      addLevelFilter(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needBinding) {
      Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
      ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
      if (bindingItr != null) {
        Map<String,String> cache=new HashMap<String,String>();
        while (bindingItr.hasNext()) {
          ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
          Binding binding=new Binding(column.getName());
          binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
          binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue()));
          binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
          if (column.getFilterExpression() != null) {
            binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue()));
          }
          for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
            AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
            if (aah.getValue() != null) {
              binding.addArgument(modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue()));
            }
          }
          List aggrList=column.getAggregateOnList();
          if (aggrList != null) {
            for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
              String baseLevel=(String)aggrItr.next();
              CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
            }
          }
          cubeQuery.addBinding(binding);
        }
      }
    }
  }
  finally {
    session.shutdown();
  }
  return cubeQuery;
}",0.9095724555429436
68738,"private static void addFactTableOrMeasureFilter(Iterator<FilterConditionElementHandle> filters,ICubeQueryDefinition cubeQuery) throws BirtException {
  if (filters != null) {
    while (filters.hasNext()) {
      FilterConditionElementHandle filterCon=filters.next();
      ConditionalExpression filterCondExpr;
      if (ModuleUtil.isListFilterValue(filterCon)) {
        filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1List());
      }
 else {
        filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1(),filterCon.getValue2());
      }
      ICubeFilterDefinition filterDef=getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,null,null,null);
      cubeQuery.addFilter(filterDef);
    }
  }
}","private static void addFactTableOrMeasureFilter(Iterator<FilterConditionElementHandle> filters,ICubeQueryDefinition cubeQuery,IModelAdapter modelAdapter) throws BirtException {
  if (filters != null) {
    while (filters.hasNext()) {
      FilterConditionElementHandle filterCon=filters.next();
      ConditionalExpression filterCondExpr;
      if (ModuleUtil.isListFilterValue(filterCon)) {
        filterCondExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.EXPR_PROP).getValue()),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1ExpressionList().getListValue());
      }
 else {
        Expression value1=null;
        List<Expression> val1list=filterCon.getValue1ExpressionList().getListValue();
        if (val1list != null && val1list.size() > 0) {
          value1=val1list.get(0);
        }
        filterCondExpr=new ConditionalExpression(modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.EXPR_PROP).getValue()),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),modelAdapter.adaptExpression(value1),modelAdapter.adaptExpression((Expression)filterCon.getExpressionProperty(IFilterConditionElementModel.VALUE2_PROP).getValue()));
      }
      ICubeFilterDefinition filterDef=getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,null,null,null);
      cubeQuery.addFilter(filterDef);
    }
  }
}",0.7215980024968789
68739,"/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  CSSContext ctx=engine.getCSSContext();
  float fs=ctx.getMediumFontSize();
  if (value == CSSValueConstants.XX_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f/ 1.2f);
  }
  if (value == CSSValueConstants.X_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f);
  }
  if (value == CSSValueConstants.SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f);
  }
  if (value == CSSValueConstants.MEDIUM_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs);
  }
  if (value == CSSValueConstants.LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f);
  }
  if (value == CSSValueConstants.X_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f);
  }
  if (value == CSSValueConstants.XX_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f* 1.2f);
  }
  float scale=1.0f;
  boolean doParentRelative=false;
  if (value == CSSValueConstants.SMALLER_VALUE) {
    doParentRelative=true;
    scale=1.0f / 1.2f;
  }
 else   if (value == CSSValueConstants.LARGER_VALUE) {
    doParentRelative=true;
    scale=1.2f;
  }
 else   if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_EMS:
      doParentRelative=true;
    scale=value.getFloatValue();
  break;
case CSSPrimitiveValue.CSS_EXS:
doParentRelative=true;
scale=value.getFloatValue() * 0.5f;
break;
case CSSPrimitiveValue.CSS_PERCENTAGE:
doParentRelative=true;
scale=value.getFloatValue() * 0.01f;
break;
}
}
if (doParentRelative) {
CSSStylableElement parent=(CSSStylableElement)elt.getParent();
if (parent != null) {
IStyle style=parent.getComputedStyle();
if (style != null) {
Value fontSize=(Value)style.getProperty(IStyle.STYLE_FONT_SIZE);
if (fontSize != null) {
fs=fontSize.getFloatValue();
return new FloatValue(fontSize.getPrimitiveType(),fs * scale);
}
}
}
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * scale);
}
if (value.getPrimitiveType() == CSSPrimitiveValue.CSS_NUMBER) {
return super.computeValue(elt,engine,idx,new FloatValue(CSSPrimitiveValue.CSS_PT,value.getFloatValue()));
}
return super.computeValue(elt,engine,idx,value);
}","/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  CSSContext ctx=engine.getCSSContext();
  float fs=ctx.getMediumFontSize();
  if (value == CSSValueConstants.XX_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f/ 1.2f);
  }
  if (value == CSSValueConstants.X_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f);
  }
  if (value == CSSValueConstants.SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f);
  }
  if (value == CSSValueConstants.MEDIUM_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs);
  }
  if (value == CSSValueConstants.LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f);
  }
  if (value == CSSValueConstants.X_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f);
  }
  if (value == CSSValueConstants.XX_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f* 1.2f);
  }
  float scale=1.0f;
  boolean doParentRelative=false;
  if (value == CSSValueConstants.SMALLER_VALUE) {
    doParentRelative=true;
    scale=1.0f / 1.2f;
  }
 else   if (value == CSSValueConstants.LARGER_VALUE) {
    doParentRelative=true;
    scale=1.2f;
  }
 else   if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_EMS:
      doParentRelative=true;
    scale=value.getFloatValue();
  break;
case CSSPrimitiveValue.CSS_EXS:
doParentRelative=true;
scale=value.getFloatValue() * 0.5f;
break;
case CSSPrimitiveValue.CSS_PERCENTAGE:
doParentRelative=true;
scale=value.getFloatValue() * 0.01f;
break;
}
}
if (doParentRelative) {
CSSStylableElement parent=(CSSStylableElement)elt.getParent();
if (parent != null) {
IStyle style=parent.getComputedStyle();
if (style != null) {
Value fontSize=(Value)style.getProperty(IStyle.STYLE_FONT_SIZE);
if (fontSize != null) {
fs=fontSize.getFloatValue();
return new FloatValue(fontSize.getPrimitiveType(),fs * scale);
}
}
}
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * scale);
}
if (value.getPrimitiveType() == CSSPrimitiveValue.CSS_NUMBER) {
return super.computeValue(elt,engine,idx,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,value.getFloatValue()));
}
return super.computeValue(elt,engine,idx,value);
}",0.9983890455094644
68740,"/** 
 * Test getExternalizedValue method.
 * @throws Exception
 */
public void testGetExternalizedText() throws Exception {
  openDesign(""String_Node_Str"");
  TableHandle tableHandle=(TableHandle)designHandle.getBody().get(0);
  PropertyHandle propHandle=tableHandle.getPropertyHandle(IStyleModel.MAP_RULES_PROP);
  ThreadResources.setLocale(new ULocale(""String_Node_Str""));
  MapRuleHandle structHandle=(MapRuleHandle)propHandle.get(0);
  String value=structHandle.getExternalizedValue(MapRule.DISPLAY_ID_MEMBER,MapRule.DISPLAY_MEMBER);
  assertEquals(""String_Node_Str"",value);
  ThreadResources.setLocale(new ULocale(""String_Node_Str""));
  structHandle=(MapRuleHandle)propHandle.get(0);
  value=structHandle.getExternalizedValue(MapRule.DISPLAY_ID_MEMBER,MapRule.DISPLAY_MEMBER);
  assertEquals(""String_Node_Str"",value);
}","/** 
 * Test getExternalizedValue method.
 * @throws Exception
 */
public void testGetExternalizedText() throws Exception {
  openDesign(""String_Node_Str"");
  TableHandle tableHandle=(TableHandle)designHandle.getBody().get(0);
  PropertyHandle propHandle=tableHandle.getPropertyHandle(IStyleModel.MAP_RULES_PROP);
  ModuleOption option=new ModuleOption();
  option.setLocale(new ULocale(""String_Node_Str""));
  design.setOptions(option);
  MapRuleHandle structHandle=(MapRuleHandle)propHandle.get(0);
  String value=structHandle.getExternalizedValue(MapRule.DISPLAY_ID_MEMBER,MapRule.DISPLAY_MEMBER);
  assertEquals(""String_Node_Str"",value);
  option.setLocale(new ULocale(""String_Node_Str""));
  structHandle=(MapRuleHandle)propHandle.get(0);
  value=structHandle.getExternalizedValue(MapRule.DISPLAY_ID_MEMBER,MapRule.DISPLAY_MEMBER);
  assertEquals(""String_Node_Str"",value);
}",0.9335684891240448
68741,"public void refresh(){
  button.setImage(provider.getImage(getExpressionType()));
  button.setToolTipText(provider.getTooltipText(getExpressionType()));
}","public void refresh(){
  if (!button.isDisposed()) {
    button.setImage(provider.getImage(getExpressionType()));
    button.setToolTipText(provider.getTooltipText(getExpressionType()));
  }
}",0.8901734104046243
68742,"private void writeDocumentProperties(IReportContent reportContent){
  if (reportContent == null) {
    return;
  }
  ReportDesignHandle reportDesign=reportContent.getDesign().getReportDesign();
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportDesign.getStringProperty(IModuleModel.AUTHOR_PROP));
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportContent.getTitle());
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportDesign.getStringProperty(IModuleModel.DESCRIPTION_PROP));
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportDesign.getSubject());
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}","private void writeDocumentProperties(IReportContent reportContent){
  if (reportContent == null) {
    return;
  }
  ReportDesignHandle reportDesign=reportContent.getDesign().getReportDesign();
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportDesign.getStringProperty(IModuleModel.AUTHOR_PROP));
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportContent.getTitle());
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportDesign.getComments());
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportDesign.getSubject());
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}",0.969768820391227
68743,"public void startPage(IPageContent page) throws IOException, BirtException {
  if (previousPage != null) {
    outputPrePageProperties();
    previousPage=page;
    context.resetWidth();
  }
 else {
    previousPage=page;
    boolean isRtl=false;
    String creator=null;
    String title=null;
    String description=null;
    String subject=null;
    if (reportContent != null) {
      ReportDesignHandle designHandle=reportContent.getDesign().getReportDesign();
      creator=designHandle.getAuthor();
      title=reportContent.getTitle();
      description=designHandle.getDescription();
      subject=designHandle.getSubject();
      IContent rootContent=reportContent.getRoot();
      isRtl=rootContent != null && rootContent.isRTL();
    }
    wordWriter.start(isRtl,creator,title,description,subject);
    drawDocumentBackground();
  }
  computePageProperties(page);
  context.addWidth(contentWidth);
  wordWriter.startPage();
}","public void startPage(IPageContent page) throws IOException, BirtException {
  if (previousPage != null) {
    outputPrePageProperties();
    previousPage=page;
    context.resetWidth();
  }
 else {
    previousPage=page;
    boolean isRtl=false;
    String creator=null;
    String title=null;
    String comments=null;
    String subject=null;
    if (reportContent != null) {
      ReportDesignHandle designHandle=reportContent.getDesign().getReportDesign();
      creator=designHandle.getAuthor();
      title=reportContent.getTitle();
      comments=designHandle.getComments();
      subject=designHandle.getSubject();
      IContent rootContent=reportContent.getRoot();
      isRtl=rootContent != null && rootContent.isRTL();
    }
    wordWriter.start(isRtl,creator,title,comments,subject);
    drawDocumentBackground();
  }
  computePageProperties(page);
  context.addWidth(contentWidth);
  wordWriter.startPage();
}",0.9591397849462364
68744,"/** 
 * Creates a document and create a PdfWriter
 * @param rc the report content.
 */
public void start(IReportContent rc){
  ReportDesignHandle designHandle=rc.getDesign().getReportDesign();
  String title=rc.getTitle();
  String author=designHandle.getAuthor();
  String description=designHandle.getStringProperty(IModuleModel.DESCRIPTION_PROP);
  String subject=designHandle.getSubject();
  try {
    pageDevice=createPageDevice(title,author,subject,description,context,rc);
  }
 catch (  Exception e) {
    log(e,Level.SEVERE);
  }
}","/** 
 * Creates a document and create a PdfWriter
 * @param rc the report content.
 */
public void start(IReportContent rc){
  ReportDesignHandle designHandle=rc.getDesign().getReportDesign();
  String title=rc.getTitle();
  String author=designHandle.getAuthor();
  String comments=designHandle.getComments();
  String subject=designHandle.getSubject();
  try {
    pageDevice=createPageDevice(title,author,subject,comments,context,rc);
  }
 catch (  Exception e) {
    log(e,Level.SEVERE);
  }
}",0.9140096618357488
68745,"public IPageDevice createPageDevice(String title,String author,String subject,String description,IReportContext context,IReportContent report) throws Exception {
  try {
    return new PPTPageDevice(pptOutput,title,author,description);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage());
  }
  return null;
}","public IPageDevice createPageDevice(String title,String author,String subject,String description,IReportContext context,IReportContent report) throws Exception {
  try {
    return new PPTPageDevice(pptOutput,title,author,description,subject);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage());
  }
  return null;
}",0.9880239520958084
68746,"/** 
 * Creates a PPT Document.
 * @param author 
 * @param title 
 */
public void start(String title,String author,String description){
  if (!imageInfos.isEmpty()) {
    imageInfos.clear();
  }
  if (!fileNamesLists.isEmpty()) {
    fileNamesLists.clear();
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + title + ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + author + ""String_Node_Str"");
  println(""String_Node_Str"" + description + ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Creates a PPT Document.
 * @param author 
 * @param title 
 */
public void start(String title,String author,String description,String subject){
  if (!imageInfos.isEmpty()) {
    imageInfos.clear();
  }
  if (!fileNamesLists.isEmpty()) {
    fileNamesLists.clear();
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + title + ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + author + ""String_Node_Str"");
  println(""String_Node_Str"" + description + ""String_Node_Str"");
  println(""String_Node_Str"" + subject + ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9671772428884028
68747,"public PPTPageDevice(OutputStream output,String title,String author,String description){
  writer=new PPTWriter(output);
  writer.start(title,author,description);
}","public PPTPageDevice(OutputStream output,String title,String author,String description,String subject){
  writer=new PPTWriter(output);
  writer.start(title,author,description,subject);
}",0.9344729344729344
68748,"private void writeDocumentProperties(IReportContent reportContent){
  if (reportContent == null) {
    return;
  }
  ReportDesignHandle reportDesign=reportContent.getDesign().getReportDesign();
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportDesign.getStringProperty(IModuleModel.AUTHOR_PROP));
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportDesign.getStringProperty(IModuleModel.TITLE_PROP));
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportDesign.getStringProperty(IModuleModel.DESCRIPTION_PROP));
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}","private void writeDocumentProperties(IReportContent reportContent){
  if (reportContent == null) {
    return;
  }
  ReportDesignHandle reportDesign=reportContent.getDesign().getReportDesign();
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportDesign.getStringProperty(IModuleModel.AUTHOR_PROP));
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportContent.getTitle());
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportDesign.getStringProperty(IModuleModel.DESCRIPTION_PROP));
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(reportDesign.getSubject());
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}",0.8447432762836186
68749,"public void startPage(IPageContent page) throws IOException, BirtException {
  if (previousPage != null) {
    outputPrePageProperties();
    previousPage=page;
    context.resetWidth();
  }
 else {
    previousPage=page;
    boolean isRtl=false;
    String creator=null;
    String title=null;
    String description=null;
    if (reportContent != null) {
      ReportDesignHandle designHandle=reportContent.getDesign().getReportDesign();
      creator=designHandle.getAuthor();
      title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
      description=designHandle.getDescription();
      IContent rootContent=reportContent.getRoot();
      isRtl=rootContent != null && rootContent.isRTL();
    }
    wordWriter.start(isRtl,creator,title,description);
    drawDocumentBackground();
  }
  computePageProperties(page);
  context.addWidth(contentWidth);
  wordWriter.startPage();
}","public void startPage(IPageContent page) throws IOException, BirtException {
  if (previousPage != null) {
    outputPrePageProperties();
    previousPage=page;
    context.resetWidth();
  }
 else {
    previousPage=page;
    boolean isRtl=false;
    String creator=null;
    String title=null;
    String description=null;
    String subject=null;
    if (reportContent != null) {
      ReportDesignHandle designHandle=reportContent.getDesign().getReportDesign();
      creator=designHandle.getAuthor();
      title=reportContent.getTitle();
      description=designHandle.getDescription();
      subject=designHandle.getSubject();
      IContent rootContent=reportContent.getRoot();
      isRtl=rootContent != null && rootContent.isRTL();
    }
    wordWriter.start(isRtl,creator,title,description,subject);
    drawDocumentBackground();
  }
  computePageProperties(page);
  context.addWidth(contentWidth);
  wordWriter.startPage();
}",0.8835429196282122
68750,"void start(boolean rtl,String creator,String title,String description) throws IOException ;","void start(boolean rtl,String creator,String title,String description,String subject) throws IOException ;",0.9238578680203046
68751,"private void writeCoreProperties(String creator,String title,String description){
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(creator);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(title);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(description);
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}","private void writeCoreProperties(String creator,String title,String description,String subject){
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(creator);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(title);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(description);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(subject);
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}",0.8891050583657587
68752,"public void start(boolean rtl,String creator,String title,String description){
  this.rtl=rtl;
  writer.startWriter();
  writer.literal(""String_Node_Str"");
  writer.literal(""String_Node_Str"");
  writer.literal(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeCoreProperties(creator,title,description);
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",4);
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",4);
  writer.closeTag(""String_Node_Str"");
  writeBidi(rtl);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",0);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",0);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",108);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",0);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",108);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
}","public void start(boolean rtl,String creator,String title,String description,String subject){
  this.rtl=rtl;
  writer.startWriter();
  writer.literal(""String_Node_Str"");
  writer.literal(""String_Node_Str"");
  writer.literal(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeCoreProperties(creator,title,description,subject);
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",4);
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",4);
  writer.closeTag(""String_Node_Str"");
  writeBidi(rtl);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",0);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",0);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",108);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",0);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",108);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
}",0.9975903614457832
68753,"public void setParent(IElement parent){
  super.setParent(parent);
  ((IContent)parent).setHasChildren(true);
}","public void setParent(IElement parent){
  super.setParent(parent);
  if (parent != null) {
    ((IContent)parent).setHasChildren(true);
  }
}",0.8809523809523809
68754,"public void drawTotalPage(String text,int textX,int textY,int width,int height,TextStyle textInfo){
  if (pageDevice.getPDFTemplate() != null) {
    isTotalPage=true;
    drawText(text,textX,textY,width,height,textInfo);
  }
}","public void drawTotalPage(String text,int textX,int textY,int width,int height,TextStyle textInfo,float scale){
  PdfTemplate template=pageDevice.getPDFTemplate(scale);
  if (template != null) {
    PdfContentByte tempCB=this.contentByte;
    this.containerHeight=template.getHeight();
    this.contentByte=template;
    drawText(text,textX,textY,width,height,textInfo);
    this.contentByte=tempCB;
    this.containerHeight=pageHeight;
  }
}",0.625748502994012
68755,"private void createTotalPageTemplate(float x,float y,float width,float height){
  if (pageDevice.getPDFTemplate() == null) {
    pageDevice.setPDFTemplate(contentByte.createTemplate(width,height));
  }
  y=transformY(y,height);
  contentByte.saveState();
  contentByte.addTemplate(pageDevice.getPDFTemplate(),x,y);
  contentByte.restoreState();
}","private void createTotalPageTemplate(float x,float y,float width,float height,float scale){
  PdfTemplate template=null;
  if (pageDevice.hasTemplate(scale)) {
    template=pageDevice.getPDFTemplate(scale);
  }
 else {
    template=contentByte.createTemplate(width,height);
    pageDevice.setPDFTemplate(scale,template);
  }
  y=transformY(y,height);
  contentByte.saveState();
  contentByte.addTemplate(template,x,y);
  contentByte.restoreState();
}",0.3844221105527638
68756,"private void drawText(String text,float textX,float textY,FontInfo fontInfo,float characterSpacing,float wordSpacing,Color color,CSSValue align){
  PdfContentByte currentContentByte=isTotalPage ? pageDevice.getPDFTemplate() : contentByte;
  float containerHeight=isTotalPage ? pageDevice.getPDFTemplate().getHeight() : pageHeight;
  isTotalPage=false;
  currentContentByte.saveState();
  currentContentByte.beginText();
  if (null != color && !Color.BLACK.equals(color)) {
    currentContentByte.setColorFill(color);
    currentContentByte.setColorStroke(color);
  }
  BaseFont font=fontInfo.getBaseFont();
  float fontSize=fontInfo.getFontSize();
  currentContentByte.setFontAndSize(font,fontSize);
  if (characterSpacing != 0) {
    currentContentByte.setCharacterSpacing(characterSpacing);
  }
  if (wordSpacing != 0) {
    currentContentByte.setWordSpacing(wordSpacing);
  }
  setTextMatrix(currentContentByte,fontInfo,textX,transformY(textY,0,containerHeight));
  if ((font.getFontType() == BaseFont.FONT_TYPE_TTUNI) && IStyle.JUSTIFY_VALUE.equals(align) && wordSpacing > 0) {
    int idx=text.indexOf(' ');
    if (idx >= 0) {
      float spaceCorrection=-wordSpacing * 1000 / fontSize;
      PdfTextArray textArray=new PdfTextArray(text.substring(0,idx));
      int lastIdx=idx;
      while ((idx=text.indexOf(' ',lastIdx + 1)) >= 0) {
        textArray.add(spaceCorrection);
        textArray.add(text.substring(lastIdx,idx));
        lastIdx=idx;
      }
      textArray.add(spaceCorrection);
      textArray.add(text.substring(lastIdx));
      currentContentByte.showText(textArray);
    }
 else {
      currentContentByte.showText(text);
    }
  }
 else {
    currentContentByte.showText(text);
  }
  currentContentByte.endText();
  currentContentByte.restoreState();
}","private void drawText(String text,float textX,float textY,FontInfo fontInfo,float characterSpacing,float wordSpacing,Color color,CSSValue align){
  contentByte.saveState();
  contentByte.beginText();
  if (null != color && !Color.BLACK.equals(color)) {
    contentByte.setColorFill(color);
    contentByte.setColorStroke(color);
  }
  BaseFont font=fontInfo.getBaseFont();
  float fontSize=fontInfo.getFontSize();
  contentByte.setFontAndSize(font,fontSize);
  if (characterSpacing != 0) {
    contentByte.setCharacterSpacing(characterSpacing);
  }
  if (wordSpacing != 0) {
    contentByte.setWordSpacing(wordSpacing);
  }
  setTextMatrix(contentByte,fontInfo,textX,transformY(textY,0,containerHeight));
  if ((font.getFontType() == BaseFont.FONT_TYPE_TTUNI) && IStyle.JUSTIFY_VALUE.equals(align) && wordSpacing > 0) {
    int idx=text.indexOf(' ');
    if (idx >= 0) {
      float spaceCorrection=-wordSpacing * 1000 / fontSize;
      PdfTextArray textArray=new PdfTextArray(text.substring(0,idx));
      int lastIdx=idx;
      while ((idx=text.indexOf(' ',lastIdx + 1)) >= 0) {
        textArray.add(spaceCorrection);
        textArray.add(text.substring(lastIdx,idx));
        lastIdx=idx;
      }
      textArray.add(spaceCorrection);
      textArray.add(text.substring(lastIdx));
      contentByte.showText(textArray);
    }
 else {
      contentByte.showText(text);
    }
  }
 else {
    contentByte.showText(text);
  }
  contentByte.endText();
  contentByte.restoreState();
}",0.8262335274287466
68757,"public PDFPage(int pageWidth,int pageHeight,Document document,PdfWriter writer,PDFPageDevice pageDevice){
  super(pageWidth,pageHeight);
  this.writer=writer;
  this.pageDevice=pageDevice;
  try {
    Rectangle pageSize=new Rectangle(this.pageWidth,this.pageHeight);
    document.setPageSize(pageSize);
    if (!document.isOpen())     document.open();
 else     document.newPage();
    this.contentByte=writer.getDirectContent();
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}","public PDFPage(int pageWidth,int pageHeight,Document document,PdfWriter writer,PDFPageDevice pageDevice){
  super(pageWidth,pageHeight);
  this.writer=writer;
  this.pageDevice=pageDevice;
  this.containerHeight=this.pageHeight;
  try {
    Rectangle pageSize=new Rectangle(this.pageWidth,this.pageHeight);
    document.setPageSize(pageSize);
    if (!document.isOpen())     document.open();
 else     document.newPage();
    this.contentByte=writer.getDirectContent();
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}",0.96309963099631
68758,"public PdfTemplate getPDFTemplate(){
  return this.totalPageTemplate;
}","public PdfTemplate getPDFTemplate(Float scale){
  return templateMap.get(scale);
}",0.7450980392156863
68759,"public void setPDFTemplate(PdfTemplate totalPageTemplate){
  this.totalPageTemplate=totalPageTemplate;
}","public void setPDFTemplate(Float scale,PdfTemplate totalPageTemplate){
  templateMap.put(scale,totalPageTemplate);
}",0.7545454545454545
68760,"public void setTotalPage(ITextArea totalPage){
  super.setTotalPage(totalPage);
  isTotalPage=true;
  drawText(totalPage);
  isTotalPage=false;
}","public void setTotalPage(ITextArea totalPage){
  super.setTotalPage(totalPage);
  isTotalPage=true;
  HashMap<Float,PdfTemplate> map=((PDFPageDevice)pageDevice).getTemplateMap();
  if (!map.isEmpty()) {
    float scaleCache=this.scale;
    Iterator<Float> iter=map.keySet().iterator();
    while (iter.hasNext()) {
      Float s=iter.next();
      PdfTemplate template=map.get(s);
      if (template != null) {
        this.scale=s.floatValue();
        drawText(totalPage);
      }
    }
    this.scale=scaleCache;
  }
  isTotalPage=false;
}",0.3173216885007278
68761,"protected void drawTextAt(ITextArea text,int x,int y,int width,int height,TextStyle textInfo){
  if (isTotalPage) {
    currentPage.drawTotalPage(text.getText(),x,y,width,height,textInfo);
  }
 else {
    currentPage.drawText(text.getText(),x,y,width,height,textInfo);
  }
}","protected void drawTextAt(ITextArea text,int x,int y,int width,int height,TextStyle textInfo){
  if (isTotalPage) {
    currentPage.drawTotalPage(text.getText(),x,y,width,height,textInfo,scale);
  }
 else {
    currentPage.drawText(text.getText(),x,y,width,height,textInfo);
  }
}",0.9891696750902528
68762,"public void visitAutoText(ITemplateArea templateArea){
  super.visitAutoText(templateArea);
  int x=currentX + getX(templateArea);
  int y=currentY + getY(templateArea);
  createTotalPageTemplate(x,y,getWidth(templateArea),getHeight(templateArea));
}","public void visitAutoText(ITemplateArea templateArea){
  super.visitAutoText(templateArea);
  int x=currentX + getX(templateArea);
  int y=currentY + getY(templateArea);
  createTotalPageTemplate(x,y,getWidth(templateArea),getHeight(templateArea),scale);
}",0.9881422924901184
68763,"private void createTotalPageTemplate(int x,int y,int width,int height){
  currentPage.createTotalPageTemplate(x,y,width,height);
}","private void createTotalPageTemplate(int x,int y,int width,int height,float scale){
  currentPage.createTotalPageTemplate(x,y,width,height,scale);
}",0.935251798561151
68764,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
    Map appContext=reportContext.getAppContext();
    if (appContext != null) {
      Object tmp=appContext.get(EngineConstants.APPCONTEXT_CHART_RESOLUTION);
      if (tmp != null && tmp instanceof Number) {
        imageDpi=((Number)tmp).intValue();
      }
    }
    if (imageDpi <= 0) {
      imageDpi=designHandle.getImageDPI();
    }
    if (imageDpi <= 0) {
      imageDpi=96;
    }
  }
  retrieveRtLFlag();
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
        fixedReport=true;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
        fixedReport=false;
      }
    }
  }
 else {
    fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,fixedReport,enableInlineStyle,browserVersion);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,fixedReport,enableInlineStyle,htmlRtLFlag,browserVersion);
  }
  if (isEmbeddable) {
    outputCSSStyles(reportDesign,designHandle);
    if (needFixTransparentPNG) {
      fixTransparentPNG();
    }
    fixRedirect();
    openRootTag();
    writeBidiFlag();
    if (report != null) {
      String defaultStyleName=report.getDesign().getRootStyleName();
      if (defaultStyleName != null) {
        if (enableInlineStyle) {
          StringBuffer defaultStyleBuffer=new StringBuffer();
          IStyle defaultStyle=report.findStyle(defaultStyleName);
          htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
          if (defaultStyleBuffer.length() > 0) {
            writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
          }
        }
 else {
          if (htmlIDNamespace != null) {
            writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
          }
 else {
            writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
          }
        }
      }
    }
    outputClientScript(report);
    return;
  }
  openRootTag();
  writeBidiFlag();
  writer.openTag(HTMLTags.TAG_HEAD);
  outputReportTitle(designHandle);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  outputCSSStyles(reportDesign,designHandle);
  if (needFixTransparentPNG) {
    fixTransparentPNG();
  }
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String defaultStyleName=report.getDesign().getRootStyleName();
    if (defaultStyleName != null) {
      if (enableInlineStyle) {
        IStyle defaultStyle=report.findStyle(defaultStyleName);
        htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
      }
 else {
        if (htmlIDNamespace != null) {
          writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
        }
 else {
          writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
        }
      }
    }
  }
  if (outputMasterPageContent) {
    defaultStyleBuffer.append(""String_Node_Str"");
  }
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
  }
  outputClientScript(report);
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
    Map appContext=reportContext.getAppContext();
    if (appContext != null) {
      Object tmp=appContext.get(EngineConstants.APPCONTEXT_CHART_RESOLUTION);
      if (tmp != null && tmp instanceof Number) {
        imageDpi=((Number)tmp).intValue();
      }
    }
    if (imageDpi <= 0) {
      imageDpi=designHandle.getImageDPI();
    }
    if (imageDpi <= 0) {
      imageDpi=96;
    }
  }
  retrieveRtLFlag();
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
        fixedReport=true;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
        fixedReport=false;
      }
    }
  }
 else {
    fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,fixedReport,enableInlineStyle,browserVersion);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,fixedReport,enableInlineStyle,htmlRtLFlag,browserVersion);
  }
  if (isEmbeddable) {
    outputCSSStyles(reportDesign,designHandle);
    if (needFixTransparentPNG) {
      fixTransparentPNG();
    }
    fixRedirect();
    openRootTag();
    writeBidiFlag();
    if (report != null) {
      String defaultStyleName=report.getDesign().getRootStyleName();
      if (defaultStyleName != null) {
        if (enableInlineStyle) {
          StringBuffer defaultStyleBuffer=new StringBuffer();
          IStyle defaultStyle=report.findStyle(defaultStyleName);
          htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
          if (defaultStyleBuffer.length() > 0) {
            writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
          }
        }
 else {
          if (htmlIDNamespace != null) {
            writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
          }
 else {
            writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
          }
        }
      }
    }
    outputClientScript(report);
    return;
  }
  openRootTag();
  writeBidiFlag();
  writer.openTag(HTMLTags.TAG_HEAD);
  outputReportTitle(report);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  outputCSSStyles(reportDesign,designHandle);
  if (needFixTransparentPNG) {
    fixTransparentPNG();
  }
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String defaultStyleName=report.getDesign().getRootStyleName();
    if (defaultStyleName != null) {
      if (enableInlineStyle) {
        IStyle defaultStyle=report.findStyle(defaultStyleName);
        htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
      }
 else {
        if (htmlIDNamespace != null) {
          writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
        }
 else {
          writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
        }
      }
    }
  }
  if (outputMasterPageContent) {
    defaultStyleBuffer.append(""String_Node_Str"");
  }
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
  }
  outputClientScript(report);
}",0.9977595220313666
68765,"/** 
 * output the report title.
 */
protected void outputReportTitle(ReportDesignHandle designHandle){
  String title=null;
  if (designHandle != null) {
    title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
  }
  if (title == null) {
    if (renderOption != null) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
      title=htmlOption.getHtmlTitle();
    }
  }
  if (title != null) {
    writer.openTag(HTMLTags.TAG_TITLE);
    writer.text(title);
    writer.closeTag(HTMLTags.TAG_TITLE);
  }
}","/** 
 * output the report title.
 */
protected void outputReportTitle(IReportContent report){
  String title=report.getTitle();
  if (title == null) {
    if (renderOption != null) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
      title=htmlOption.getHtmlTitle();
    }
  }
  if (title != null) {
    writer.openTag(HTMLTags.TAG_TITLE);
    writer.text(title);
    writer.closeTag(HTMLTags.TAG_TITLE);
  }
}",0.8305785123966942
68766,"/** 
 * Creates a document and create a PdfWriter
 * @param rc the report content.
 */
public void start(IReportContent rc){
  ReportDesignHandle designHandle=rc.getDesign().getReportDesign();
  String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
  String author=designHandle.getAuthor();
  String description=designHandle.getStringProperty(IModuleModel.DESCRIPTION_PROP);
  String subject=designHandle.getSubject();
  try {
    pageDevice=createPageDevice(title,author,subject,description,context,rc);
  }
 catch (  Exception e) {
    log(e,Level.SEVERE);
  }
}","/** 
 * Creates a document and create a PdfWriter
 * @param rc the report content.
 */
public void start(IReportContent rc){
  ReportDesignHandle designHandle=rc.getDesign().getReportDesign();
  String title=rc.getTitle();
  String author=designHandle.getAuthor();
  String description=designHandle.getStringProperty(IModuleModel.DESCRIPTION_PROP);
  String subject=designHandle.getSubject();
  try {
    pageDevice=createPageDevice(title,author,subject,description,context,rc);
  }
 catch (  Exception e) {
    log(e,Level.SEVERE);
  }
}",0.9427549194991056
68767,"/** 
 * localize the text.
 * @param key text key
 * @param text default text
 * @return localized text.
 */
private String localize(IContent content,String key,String text){
  assert(content != null);
  if (content.getGenerateBy() != null) {
    DesignElementHandle element=((ReportItemDesign)content.getGenerateBy()).getHandle();
    if (key != null && element != null) {
      String t=ModuleUtil.getExternalizedValue(element,key,text,ULocale.forLocale(locale));
      if (t != null) {
        return t;
      }
    }
  }
  return text;
}","private String localize(IReportContent content,String key,String text){
  assert(content != null);
  if (content.getDesign() != null) {
    DesignElementHandle element=content.getDesign().getReportDesign();
    if (key != null && element != null) {
      String t=ModuleUtil.getExternalizedValue(element,key,text,ULocale.forLocale(locale));
      if (t != null) {
        return t;
      }
    }
  }
  return text;
}",0.7648902821316614
68768,"public ImageOutputStream run() throws IOException {
  return ImageIO.createImageOutputStream(output);
}","public String run(){
  return System.getenv(name);
}",0.4903225806451612
68769,"/** 
 * @param keyColumn Name of key column to sorty by
 */
public void setColumn(String keyColumn){
  this.keyColumn=keyColumn;
  this.keyExpr=null;
}","/** 
 * @param keyColumn Name of key column to sort by
 */
public void setColumn(String keyColumn){
  this.keyColumn=keyColumn;
  this.keyExpr=null;
}",0.9966777408637874
68770,"/** 
 * @param outputStream
 * @param sorts
 * @throws IOException
 */
public static List loadSorts(InputStream inputStream,int version) throws IOException {
  DataInputStream dis=new DataInputStream(inputStream);
  List sortList=new ArrayList();
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    String sortKeyColumn=IOUtil.readString(dis);
    IScriptExpression sortKeyExpr=(IScriptExpression)ExprUtil.loadBaseExpr(dis);
    int direction=IOUtil.readInt(dis);
    SortDefinition sortDefn=new SortDefinition();
    if (sortKeyColumn != null)     sortDefn.setColumn(sortKeyColumn);
 else     sortDefn.setExpression(sortKeyExpr.getText());
    sortDefn.setSortDirection(direction);
    if (version >= VersionManager.VERSION_2_3_1)     sortDefn.setSortStrength(IOUtil.readInt(dis));
    if (version >= VersionManager.VERSION_2_5_0_1) {
      String locale=IOUtil.readString(dis);
      if (locale != null)       sortDefn.setSortLocale(new ULocale(locale));
    }
    sortList.add(sortDefn);
  }
  return sortList;
}","/** 
 * @param outputStream
 * @param sorts
 * @throws IOException
 */
public static List loadSorts(InputStream inputStream,int version) throws IOException {
  DataInputStream dis=new DataInputStream(inputStream);
  List sortList=new ArrayList();
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    String sortKeyColumn=IOUtil.readString(dis);
    IScriptExpression sortKeyExpr=(IScriptExpression)ExprUtil.loadBaseExpr(dis);
    int direction=IOUtil.readInt(dis);
    SortDefinition sortDefn=new SortDefinition();
    if (sortKeyColumn != null)     sortDefn.setColumn(sortKeyColumn);
 else     sortDefn.setExpression(sortKeyExpr);
    sortDefn.setSortDirection(direction);
    if (version >= VersionManager.VERSION_2_3_1)     sortDefn.setSortStrength(IOUtil.readInt(dis));
    if (version >= VersionManager.VERSION_2_5_0_1) {
      String locale=IOUtil.readString(dis);
      if (locale != null)       sortDefn.setSortLocale(new ULocale(locale));
    }
    sortList.add(sortDefn);
  }
  return sortList;
}",0.9951314508276532
68771,"public IResultIterator getSecondaryIterator(ScriptContext context,String subQueryName) throws BirtException {
  return new CachedQueryResults(this.session,QuerySharingUtil.getSubQueryID(this.queryResults.getID(),subQueryName,this.rowIndex),this.queryResults.getPreparedQuery()).getResultIterator();
}","public IResultIterator getSecondaryIterator(ScriptContext context,String subQueryName) throws BirtException {
  CachedQueryResults rs=new CachedQueryResults(this.session,QuerySharingUtil.getSubQueryID(this.queryResults.getID(),subQueryName,this.rowIndex),this.queryResults.getPreparedQuery());
  if (!rs.existCachedFile()) {
    throw new DataException(ResourceConstants.NOT_SUPPORT_REPORT_ITEM_SUBQUERY);
  }
  return rs.getResultIterator();
}",0.7338709677419355
68772,"/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CachedQueryResults(DataEngineSession session,String queryResultID,IPreparedQuery preparedQuery) throws DataException {
  this.session=session;
  String tempDir=session.getTempDir();
  Object[] params={tempDir,queryResultID};
  logger.entering(CachedQueryResults.class.getName(),""String_Node_Str"",params);
  this.queryResultID=queryResultID;
  this.pQuery=preparedQuery;
  this.resultIterator=new CacheResultIterator(session,tempDir,this);
  logger.exiting(CachedQueryResults.class.getName(),""String_Node_Str"");
}","/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CachedQueryResults(DataEngineSession session,String queryResultID,IPreparedQuery preparedQuery) throws DataException {
  this.session=session;
  String tempDir=session.getTempDir();
  Object[] params={tempDir,queryResultID};
  logger.entering(CachedQueryResults.class.getName(),""String_Node_Str"",params);
  this.queryResultID=queryResultID;
  this.pQuery=preparedQuery;
  this.resultIterator=new CacheResultIterator(session,tempDir,this);
  this.existCachedFile=((CacheResultIterator)this.resultIterator).existCachedFile();
  logger.exiting(CachedQueryResults.class.getName(),""String_Node_Str"");
}",0.9333333333333332
68773,"public IBinding adaptBinding(ComputedColumnHandle handle){
  try {
    if (handle == null)     return null;
    Binding result=new Binding(handle.getName());
    if (handle.getExpression() != null) {
      ScriptExpression expr=this.adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.EXPRESSION_MEMBER).getValue(),handle.getDataType());
      expr.setGroupName(handle.getAggregateOn());
      result.setExpression(expr);
    }
    result.setDisplayName(handle.getDisplayName());
    result.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(handle.getDataType()));
    result.setAggrFunction(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(handle.getAggregateFunction()));
    result.setFilter(handle.getFilterExpression() == null ? null : this.adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.FILTER_MEMBER).getValue(),DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN));
    populateArgument(result,handle);
    populateAggregateOns(result,handle);
    return result;
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    return null;
  }
}","public IBinding adaptBinding(ComputedColumnHandle handle){
  try {
    if (handle == null)     return null;
    Binding result=new Binding(handle.getName());
    if (handle.getExpression() != null) {
      ScriptExpression expr=this.adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.EXPRESSION_MEMBER).getValue(),handle.getDataType());
      expr.setGroupName(handle.getAggregateOn());
      result.setExpression(expr);
    }
    result.setDisplayName(handle.getExternalizedValue(handle.getDisplayNameID(),handle.getDisplayName(),this.context.getDataEngineContext().getLocale()));
    result.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(handle.getDataType()));
    result.setAggrFunction(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(handle.getAggregateFunction()));
    result.setFilter(handle.getFilterExpression() == null ? null : this.adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.FILTER_MEMBER).getValue(),DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN));
    populateArgument(result,handle);
    populateAggregateOns(result,handle);
    return result;
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    return null;
  }
}",0.9608647036898994
68774,"protected String getColumnName(Object obj){
  if (obj instanceof ComputedColumnHandle)   return ((ComputedColumnHandle)obj).getName();
 else   if (obj instanceof ResultSetColumnHandle)   return ((ResultSetColumnHandle)obj).getColumnName();
 else   return ""String_Node_Str"";
}","protected String getColumnName(Object obj){
  if (obj instanceof DataSetViewData) {
    return ((DataSetViewData)obj).getName();
  }
 else   return ""String_Node_Str"";
}",0.6275395033860045
68775,"protected void setColumnList(DesignElementHandle handle){
  if (handle instanceof DataSetHandle) {
    try {
      columnList=DataUtil.getColumnList(dataset);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
 else   if (handle instanceof TabularCubeHandle || handle instanceof TabularHierarchyHandle) {
    try {
      if (dataset != null)       columnList=DataUtil.getColumnList(dataset);
 else       columnList=Collections.EMPTY_LIST;
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
 else {
    columnList=DEUtil.getVisiableColumnBindingsList(handle);
  }
}","protected void setColumnList(DesignElementHandle handle){
  if (handle instanceof DataSetHandle) {
    columnList=Arrays.asList(DataSetProvider.getCurrentInstance().getColumns((DataSetHandle)handle,false));
  }
 else   if (handle instanceof TabularCubeHandle || handle instanceof TabularHierarchyHandle) {
    try {
      if (dataset != null)       columnList=DataUtil.getColumnList(dataset);
 else       columnList=Collections.EMPTY_LIST;
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
 else {
    columnList=DEUtil.getVisiableColumnBindingsList(handle);
  }
}",0.8253452477660439
68776,"/** 
 * @param tag
 * @param condition
 * @param htmlAttr
 * @param uv
 */
private void setURLValueAttributes(HTMLTag tag,TriggerCondition condition,HTMLAttribute htmlAttr,URLValue uv){
  String tooltip=uv.getTooltip();
  setTooltipAttribute(tag,tooltip);
  if (condition == TriggerCondition.ONCLICK_LITERAL) {
    tag.addAttribute(HTMLAttribute.HREF,eval2HTML(uv.getBaseUrl()));
    if (uv.getTarget() != null) {
      tag.addAttribute(HTMLAttribute.TARGET,uv.getTarget());
    }
  }
 else {
    tag.addAttribute(HTMLAttribute.HREF,NO_OP_JAVASCRIPT);
    String value=getJsURLRedirect(uv);
    if (htmlAttr.equals(HTMLAttribute.ONFOCUS)) {
      value=""String_Node_Str"" + value;
    }
    tag.addAttribute(htmlAttr,value);
  }
}","/** 
 * @param tag
 * @param condition
 * @param htmlAttr
 * @param uv
 */
private void setURLValueAttributes(HTMLTag tag,TriggerCondition condition,HTMLAttribute htmlAttr,URLValue uv){
  String tooltip=uv.getTooltip();
  setTooltipAttribute(tag,tooltip);
  if (condition == TriggerCondition.ONCLICK_LITERAL) {
    tag.addAttribute(HTMLAttribute.HREF,eval2HTML(removeSurroundingQuotes(uv.getBaseUrl())));
    if (uv.getTarget() != null) {
      tag.addAttribute(HTMLAttribute.TARGET,uv.getTarget());
    }
  }
 else {
    tag.addAttribute(HTMLAttribute.HREF,NO_OP_JAVASCRIPT);
    String value=getJsURLRedirect(uv);
    if (htmlAttr.equals(HTMLAttribute.ONFOCUS)) {
      value=""String_Node_Str"" + value;
    }
    tag.addAttribute(htmlAttr,value);
  }
}",0.983142279163857
68777,"protected String getJsURLRedirect(URLValue uv){
  String sBaseUrl=uv.getBaseUrl() == null ? ""String_Node_Str"" : uv.getBaseUrl();
  if (sBaseUrl.startsWith(""String_Node_Str"")) {
    return sBaseUrl;
  }
  if (sBaseUrl.startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"" + eval2HTML(sBaseUrl) + ""String_Node_Str"";
  }
  return ""String_Node_Str"" + eval2HTML(sBaseUrl) + ""String_Node_Str""+ (uv.getTarget() == null ? ""String_Node_Str"" : uv.getTarget())+ ""String_Node_Str"";
}","protected String getJsURLRedirect(URLValue uv){
  String sBaseUrl=uv.getBaseUrl() == null ? ""String_Node_Str"" : uv.getBaseUrl();
  sBaseUrl=removeSurroundingQuotes(sBaseUrl);
  if (sBaseUrl.startsWith(""String_Node_Str"")) {
    return sBaseUrl;
  }
  if (sBaseUrl.startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"" + eval2HTML(sBaseUrl) + ""String_Node_Str"";
  }
  return ""String_Node_Str"" + eval2HTML(sBaseUrl) + ""String_Node_Str""+ (uv.getTarget() == null ? ""String_Node_Str"" : uv.getTarget())+ ""String_Node_Str"";
}",0.954183266932271
68778,"/** 
 * populate output columns
 * @throws BirtException
 */
private void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetUIUtil.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)handle),handle);
      DataRequestSession session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      if (((DataSetEditor)getContainer()).getHandle() instanceof JointDataSetHandle) {
        PropertyHandle properyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
        if (properyHandle != null) {
          for (int i=0; i < viewDatas.length; i++) {
            for (Iterator columns=properyHandle.iterator(); columns.hasNext(); ) {
              ColumnHintHandle column=(ColumnHintHandle)columns.next();
              if (viewDatas[i].getName().equalsIgnoreCase(column.getColumnName())) {
                viewDatas[i].setAlias(column.getAlias());
                break;
              }
            }
          }
        }
      }
      viewer.getViewer().setInput(viewDatas);
      engineTask.close();
      engine.destroy();
    }
  finally {
      DataSetUIUtil.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
    if (viewDatas == null) {
      viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
    }
    viewer.getViewer().setInput(viewDatas);
    session.shutdown();
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}","/** 
 * populate output columns
 * @throws BirtException
 */
private void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetUIUtil.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)handle),handle);
      DataRequestSession session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      if (((DataSetEditor)getContainer()).getHandle() instanceof JointDataSetHandle) {
        PropertyHandle properyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
        if (properyHandle != null) {
          for (int i=0; i < viewDatas.length; i++) {
            for (Iterator columns=properyHandle.iterator(); columns.hasNext(); ) {
              ColumnHintHandle column=(ColumnHintHandle)columns.next();
              if (viewDatas[i].getName().equals(column.getColumnName())) {
                viewDatas[i].setAlias(column.getAlias());
                break;
              }
            }
          }
        }
      }
      viewer.getViewer().setInput(viewDatas);
      engineTask.close();
      engine.destroy();
    }
  finally {
      DataSetUIUtil.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
    if (viewDatas == null) {
      viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
    }
    viewer.getViewer().setInput(viewDatas);
    session.shutdown();
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}",0.998389175257732
68779,"private Expression createUserProperty(DesignElementHandle handle,UserPropertyDefn userDef){
switch (userDef.getTypeCode()) {
case IPropertyType.SCRIPT_TYPE:
case IPropertyType.EXPRESSION_TYPE:
    Object defaultValue=userDef.getDefault();
  if (defaultValue instanceof org.eclipse.birt.report.model.api.Expression) {
    return createExpression((org.eclipse.birt.report.model.api.Expression)defaultValue);
  }
 else {
    return null;
  }
case IPropertyType.NUMBER_TYPE:
case IPropertyType.INTEGER_TYPE:
case IPropertyType.FLOAT_TYPE:
return createConstant(DataType.DOUBLE_TYPE,handle.getStringProperty(userDef.getName()));
case IPropertyType.BOOLEAN_TYPE:
return createConstant(DataType.BOOLEAN_TYPE,handle.getStringProperty(userDef.getName()));
case IPropertyType.DATE_TIME_TYPE:
return createConstant(DataType.DATE_TYPE,handle.getStringProperty(userDef.getName()));
default :
return createConstant(DataType.STRING_TYPE,handle.getStringProperty(userDef.getName()));
}
}","private Expression createUserProperty(DesignElementHandle handle,UserPropertyDefn userDef){
  String propName=userDef.getName();
  String valueExpr=handle.getStringProperty(propName);
switch (userDef.getTypeCode()) {
case IPropertyType.SCRIPT_TYPE:
case IPropertyType.EXPRESSION_TYPE:
    if (valueExpr != null) {
      return createExpression(valueExpr);
    }
 else {
      Object defaultValue=userDef.getDefault();
      if (defaultValue instanceof org.eclipse.birt.report.model.api.Expression) {
        return createExpression((org.eclipse.birt.report.model.api.Expression)defaultValue);
      }
 else {
        return null;
      }
    }
case IPropertyType.NUMBER_TYPE:
case IPropertyType.INTEGER_TYPE:
case IPropertyType.FLOAT_TYPE:
  return createConstant(DataType.DOUBLE_TYPE,valueExpr);
case IPropertyType.BOOLEAN_TYPE:
return createConstant(DataType.BOOLEAN_TYPE,valueExpr);
case IPropertyType.DATE_TIME_TYPE:
return createConstant(DataType.DATE_TYPE,valueExpr);
default :
return createConstant(DataType.STRING_TYPE,valueExpr);
}
}",0.793840039741679
68780,"public List getFilters(){
  return this.source.getFilters();
}","public List getFilters(){
  return this.filters;
}",0.875
68781,"public DataSetAdapter(IBaseDataSetDesign source){
  this.source=source;
  this.computedColumns=new ArrayList();
  if (this.source.getComputedColumns() != null) {
    this.computedColumns.addAll(this.source.getComputedColumns());
  }
}","public DataSetAdapter(IBaseDataSetDesign source){
  this.source=source;
  this.computedColumns=new ArrayList();
  if (this.source.getComputedColumns() != null) {
    this.computedColumns.addAll(this.source.getComputedColumns());
  }
  this.filters=new ArrayList();
  if (this.source.getFilters() != null) {
    this.filters.addAll(this.source.getFilters());
  }
}",0.7839195979899497
68782,"public Object evaluate(ScriptContext scriptContext,ICompiledScript compiledScript) throws BirtException {
  assert(compiledScript instanceof CompiledJavascript);
  try {
    Script script=((CompiledJavascript)compiledScript).getCompiledScript();
    Object value=script.exec(context,getJSScope(scriptContext));
    return jsToJava(value);
  }
 catch (  Throwable e) {
    throw new BirtException(e.getLocalizedMessage());
  }
}","public Object evaluate(ScriptContext scriptContext,ICompiledScript compiledScript) throws BirtException {
  assert(compiledScript instanceof CompiledJavascript);
  String source=((CompiledJavascript)compiledScript).getScriptText();
  try {
    Script script=((CompiledJavascript)compiledScript).getCompiledScript();
    Object value=script.exec(context,getJSScope(scriptContext));
    return jsToJava(value);
  }
 catch (  Throwable e) {
    throw new CoreException(ResourceConstants.JAVASCRIPT_COMMON_ERROR,new Object[]{source,e.getMessage()},e);
  }
}",0.8448979591836735
68783,"/** 
 * Returns format code according to format type and current locale
 */
public String getLocalizedFormatCode(){
  if (UNFORMATTED.equals(formatPattern) || DATETIME_UNFORMATTED.equals(formatPattern) || DATE_UNFORMATTED.equals(formatPattern)|| TIME_UNFORMATTED.equals(formatPattern)) {
    return ((SimpleDateFormat)dateFormat).toLocalizedPattern();
  }
  SimpleDateFormat dateFormat=getFormatter();
  return dateFormat.toLocalizedPattern();
}","/** 
 * Returns format code according to format type and current locale
 */
public String getLocalizedFormatCode(){
  if (UNFORMATTED.equals(formatPattern) || DATETIME_UNFORMATTED.equals(formatPattern) || DATE_UNFORMATTED.equals(formatPattern)|| TIME_UNFORMATTED.equals(formatPattern)) {
    return ((SimpleDateFormat)dateFormat).toLocalizedPattern();
  }
  SimpleDateFormat format=getFormatter();
  if (format == null) {
    return ((SimpleDateFormat)dateFormat).toPattern();
  }
 else {
    return format.toLocalizedPattern();
  }
}",0.874361593462717
68784,"/** 
 * Returns format code according to format type and current locale
 */
public String getFormatCode(){
  if (UNFORMATTED.equals(formatPattern) || DATETIME_UNFORMATTED.equals(formatPattern) || DATE_UNFORMATTED.equals(formatPattern)|| TIME_UNFORMATTED.equals(formatPattern)) {
    return ((SimpleDateFormat)dateFormat).toPattern();
  }
  SimpleDateFormat dateFormat=getFormatter();
  return dateFormat.toPattern();
}","/** 
 * Returns format code according to format type and current locale
 */
public String getFormatCode(){
  if (UNFORMATTED.equals(formatPattern) || DATETIME_UNFORMATTED.equals(formatPattern) || DATE_UNFORMATTED.equals(formatPattern)|| TIME_UNFORMATTED.equals(formatPattern)) {
    return ((SimpleDateFormat)dateFormat).toPattern();
  }
  SimpleDateFormat format=getFormatter();
  if (format == null) {
    return ((SimpleDateFormat)dateFormat).toPattern();
  }
 else {
    return format.toPattern();
  }
}",0.8778378378378379
68785,"public void addArgument(String name,IBaseExpression expr){
  this.argument.put(name,expr);
}","public void addArgument(String name,IBaseExpression expr){
  if (""String_Node_Str"".equals(name)) {
    this.argument.put(""String_Node_Str"",expr);
  }
 else {
    this.argument.put(name,expr);
  }
}",0.6366782006920415
68786,"public void clear() throws IOException {
  bufferPos=0;
  Arrays.fill(buffer,null);
  if (diskList != null)   diskList.clear();
}","public void clear() throws IOException {
  bufferPos=0;
  Arrays.fill(buffer,null);
  if (diskList != null) {
    diskList.clear();
    diskList=null;
  }
}",0.9052631578947368
68787,"/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 * @throws DataException 
 * @throws AdapterException 
 */
private static void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List metaList) throws AdapterException {
  try {
    List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < measureGroups.size(); i++) {
      MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
      List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measures.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measures.get(j);
        String function=measure.getFunction();
        String exprText=measure.getMeasureExpression();
        IScriptExpression expr=exprText != null ? new ScriptExpression(exprText) : null;
        if (query.getGroups().size() > 0) {
          Binding binding=new Binding(measure.getName(),expr);
          binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(function));
          IGroupDefinition group=(IGroupDefinition)query.getGroups().get(query.getGroups().size() - 1);
          binding.addAggregateOn(group.getName());
          query.addBinding(binding);
        }
 else {
          query.addBinding(new Binding(measure.getName(),expr));
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(measure.getName(),null,DataSetIterator.ColumnMeta.MEASURE_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(measure.getDataType()));
        metaList.add(meta);
      }
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 * @throws DataException 
 * @throws AdapterException 
 */
private void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List metaList) throws AdapterException {
  try {
    List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < measureGroups.size(); i++) {
      MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
      List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measures.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measures.get(j);
        String function=measure.getFunction();
        String exprText=measure.getMeasureExpression();
        ExpressionHandle measureExprHandle=measure.getExpressionProperty(IMeasureModel.MEASURE_EXPRESSION_PROP);
        IScriptExpression expr=null;
        if (exprText != null && measureExprHandle != null) {
          expr=modelAdaptor.adaptJSExpression(measureExprHandle.getStringExpression(),measureExprHandle.getType());
        }
        if (query.getGroups().size() > 0) {
          Binding binding=new Binding(measure.getName(),expr);
          binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(function));
          IGroupDefinition group=(IGroupDefinition)query.getGroups().get(query.getGroups().size() - 1);
          binding.addAggregateOn(group.getName());
          query.addBinding(binding);
        }
 else {
          query.addBinding(new Binding(measure.getName(),expr));
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(measure.getName(),null,DataSetIterator.ColumnMeta.MEASURE_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(measure.getDataType()));
        metaList.add(meta);
      }
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.5513784461152882
68788,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws BirtException 
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName) throws BirtException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      DataSetIterator.ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone())),DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=DataSetIterator.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          if (level.getDefaultValue() != null) {
            exprString+=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(level.getDefaultValue()) + ""String_Node_Str"";
          }
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),processor,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DataSetIterator.DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DataSetIterator.DateTimeAttributeProcessor(level.getDateTimeLevelType(),this.sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(level.getDisplayColumnName())));
      }
      String levelName=DataSetIterator.createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString,type)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws BirtException 
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName) throws BirtException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      DataSetIterator.ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone())),DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=DataSetIterator.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          if (level.getDefaultValue() != null) {
            exprString+=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(level.getDefaultValue()) + ""String_Node_Str"";
          }
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),processor,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DataSetIterator.DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DataSetIterator.DateTimeAttributeProcessor(level.getDateTimeLevelType(),this.sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        ExpressionHandle displayExprHandle=level.getExpressionProperty(ITabularLevelModel.DISPLAY_COLUMN_NAME_PROP);
        if (displayExprHandle != null) {
          query.addBinding(new Binding(meta.getName(),modelAdaptor.adaptJSExpression(displayExprHandle.getStringExpression(),displayExprHandle.getType())));
        }
      }
      String levelName=DataSetIterator.createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString,type)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9777349087693916
68789,"static IStyle processStyle(IReportContent reportContent,AbstractCrosstabItemHandle handle,IBaseResultSet evaluator,Map styleCache) throws BirtException {
  ReportElementHandle modelHandle=getReportElementHandle(handle);
  if (modelHandle == null || modelHandle.getPrivateStyle() == null || reportContent == null) {
    return null;
  }
  IStyle style=null;
  if (evaluator != null) {
    style=reportContent.createStyle();
    IStyle highlightStyle=reportContent.createStyle();
    setupHighlightStyle(modelHandle,highlightStyle,evaluator);
    if (!highlightStyle.isEmpty()) {
      IStyle newStyle=reportContent.createStyle();
      newStyle.setProperties(style);
      newStyle.setProperties(highlightStyle);
      return newStyle;
    }
  }
  return style;
}","static IStyle processStyle(IReportContent reportContent,AbstractCrosstabItemHandle handle,IBaseResultSet evaluator,Map styleCache) throws BirtException {
  ReportElementHandle modelHandle=getReportElementHandle(handle);
  if (modelHandle == null || reportContent == null || evaluator == null) {
    return null;
  }
  Iterator<HighlightRuleHandle> highlightRules=null;
  if (styleCache != null) {
    Object[] cachedData=(Object[])styleCache.get(modelHandle);
    if (cachedData != null) {
      List<HighlightRuleHandle> rules=(List<HighlightRuleHandle>)cachedData[0];
      if (rules != null) {
        highlightRules=rules.iterator();
      }
    }
 else {
      List<HighlightRuleHandle> rules=null;
      StyleHandle privateStyle=modelHandle.getPrivateStyle();
      if (privateStyle != null) {
        rules=new ArrayList<HighlightRuleHandle>();
        Iterator itr=privateStyle.highlightRulesIterator();
        while (itr != null && itr.hasNext()) {
          rules.add((HighlightRuleHandle)itr.next());
        }
        if (rules.isEmpty()) {
          rules=null;
        }
 else {
          highlightRules=rules.iterator();
        }
      }
      styleCache.put(modelHandle,new Object[]{rules});
    }
  }
 else {
    StyleHandle privateStyle=modelHandle.getPrivateStyle();
    if (privateStyle != null) {
      highlightRules=privateStyle.highlightRulesIterator();
    }
  }
  if (highlightRules == null) {
    return null;
  }
  IStyle highlightStyle=reportContent.createStyle();
  setupHighlightStyle(modelHandle,highlightRules,highlightStyle,evaluator);
  if (!highlightStyle.isEmpty()) {
    return highlightStyle;
  }
  return null;
}",0.2980132450331126
68790,"private static void setupHighlightStyle(ReportElementHandle handle,IStyle style,IBaseResultSet evaluator) throws BirtException {
  Iterator itr=handle.getPrivateStyle().highlightRulesIterator();
  while (itr != null && itr.hasNext()) {
    HighlightRuleHandle rule=(HighlightRuleHandle)itr.next();
    ConditionalExpression condExpr=null;
    if (ModuleUtil.isListStyleRuleValue(rule)) {
      condExpr=new ConditionalExpression(rule.getTestExpression(),DataAdapterUtil.adaptModelFilterOperator(rule.getOperator()),rule.getValue1List());
    }
 else {
      condExpr=new ConditionalExpression(rule.getTestExpression(),DataAdapterUtil.adaptModelFilterOperator(rule.getOperator()),rule.getValue1(),rule.getValue2());
    }
    IConditionalExpression expression=ExpressionUtil.transformConditionalExpression(condExpr);
    Object value=evaluator.evaluate(expression);
    if (value instanceof Boolean && ((Boolean)value).booleanValue()) {
      setupRuleStyle(rule,style);
    }
  }
}","private static void setupHighlightStyle(ReportElementHandle handle,Iterator<HighlightRuleHandle> highlightRules,IStyle style,IBaseResultSet evaluator) throws BirtException {
  while (highlightRules.hasNext()) {
    HighlightRuleHandle rule=highlightRules.next();
    ConditionalExpression condExpr=null;
    if (ModuleUtil.isListStyleRuleValue(rule)) {
      condExpr=new ConditionalExpression(rule.getTestExpression(),DataAdapterUtil.adaptModelFilterOperator(rule.getOperator()),rule.getValue1List());
    }
 else {
      condExpr=new ConditionalExpression(rule.getTestExpression(),DataAdapterUtil.adaptModelFilterOperator(rule.getOperator()),rule.getValue1(),rule.getValue2());
    }
    IConditionalExpression expression=ExpressionUtil.transformConditionalExpression(condExpr);
    Object value=evaluator.evaluate(expression);
    if (value instanceof Boolean && ((Boolean)value).booleanValue()) {
      setupRuleStyle(rule,style);
    }
  }
}",0.869745718733783
68791,"public ImageArea(ImageArea area){
  super(area);
  this.url=area.getImageUrl();
  this.data=area.getImageData();
}","public ImageArea(ImageArea area){
  super(area);
  this.url=area.getImageUrl();
  this.data=area.getImageData();
  this.extension=area.extension;
  this.helpText=area.helpText;
  this.mimetype=area.mimetype;
  this.params=area.params;
}",0.6514285714285715
68792,"@Override public void stop(BundleContext context) throws Exception {
  if (syncService != null) {
    syncService.unregister();
    syncService=null;
  }
  super.stop(context);
}","@Override public void stop(BundleContext context) throws Exception {
  if (syncService != null) {
    syncService.unregister();
    syncService=null;
  }
  if (reportClasspathService != null) {
    reportClasspathService.unregister();
    reportClasspathService=null;
  }
  super.stop(context);
}",0.6666666666666666
68793,"public void start(BundleContext context) throws Exception {
  super.start(context);
  ReportPlugin.getDefault().addIgnoreViewID(LibraryExplorerView.ID);
  Hashtable<String,Object> dict=new Hashtable<String,Object>();
  dict.put(Constants.SERVICE_RANKING,Integer.valueOf(3));
  syncService=context.registerService(IReportResourceSynchronizer.class.getName(),new IDEResourceSynchronizer(),dict);
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  ReportPlugin.getDefault().addIgnoreViewID(LibraryExplorerView.ID);
  Hashtable<String,Object> dict=new Hashtable<String,Object>();
  dict.put(Constants.SERVICE_RANKING,Integer.valueOf(3));
  syncService=context.registerService(IReportResourceSynchronizer.class.getName(),new IDEResourceSynchronizer(),dict);
  reportClasspathService=context.registerService(IReportClasspathResolver.class.getName(),new IDEReportClasspathResolver(),dict);
}",0.8586956521739131
68794,"/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  CSSContext ctx=engine.getCSSContext();
  float fs=ctx.getMediumFontSize();
  if (value == CSSValueConstants.XX_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f/ 1.2f);
  }
  if (value == CSSValueConstants.X_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f);
  }
  if (value == CSSValueConstants.SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f);
  }
  if (value == CSSValueConstants.MEDIUM_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs);
  }
  if (value == CSSValueConstants.LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f);
  }
  if (value == CSSValueConstants.X_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f);
  }
  if (value == CSSValueConstants.XX_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f* 1.2f);
  }
  float scale=1.0f;
  boolean doParentRelative=false;
  if (value == CSSValueConstants.SMALLER_VALUE) {
    doParentRelative=true;
    scale=1.0f / 1.2f;
  }
 else   if (value == CSSValueConstants.LARGER_VALUE) {
    doParentRelative=true;
    scale=1.2f;
  }
 else   if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_EMS:
      doParentRelative=true;
    scale=value.getFloatValue();
  break;
case CSSPrimitiveValue.CSS_EXS:
doParentRelative=true;
scale=value.getFloatValue() * 0.5f;
break;
case CSSPrimitiveValue.CSS_PERCENTAGE:
doParentRelative=true;
scale=value.getFloatValue() * 0.01f;
break;
}
}
if (doParentRelative) {
CSSStylableElement parent=(CSSStylableElement)elt.getParent();
if (parent != null) {
IStyle style=parent.getComputedStyle();
if (style != null) {
Value fontSize=(Value)style.getProperty(IStyle.STYLE_FONT_SIZE);
if (fontSize != null) {
fs=fontSize.getFloatValue();
}
}
}
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * scale);
}
if (value.getPrimitiveType() == CSSPrimitiveValue.CSS_NUMBER) {
return super.computeValue(elt,engine,idx,new FloatValue(CSSPrimitiveValue.CSS_PT,value.getFloatValue()));
}
return super.computeValue(elt,engine,idx,value);
}","/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  CSSContext ctx=engine.getCSSContext();
  float fs=ctx.getMediumFontSize();
  if (value == CSSValueConstants.XX_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f/ 1.2f);
  }
  if (value == CSSValueConstants.X_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f);
  }
  if (value == CSSValueConstants.SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f);
  }
  if (value == CSSValueConstants.MEDIUM_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs);
  }
  if (value == CSSValueConstants.LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f);
  }
  if (value == CSSValueConstants.X_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f);
  }
  if (value == CSSValueConstants.XX_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f* 1.2f);
  }
  float scale=1.0f;
  boolean doParentRelative=false;
  if (value == CSSValueConstants.SMALLER_VALUE) {
    doParentRelative=true;
    scale=1.0f / 1.2f;
  }
 else   if (value == CSSValueConstants.LARGER_VALUE) {
    doParentRelative=true;
    scale=1.2f;
  }
 else   if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_EMS:
      doParentRelative=true;
    scale=value.getFloatValue();
  break;
case CSSPrimitiveValue.CSS_EXS:
doParentRelative=true;
scale=value.getFloatValue() * 0.5f;
break;
case CSSPrimitiveValue.CSS_PERCENTAGE:
doParentRelative=true;
scale=value.getFloatValue() * 0.01f;
break;
}
}
if (doParentRelative) {
CSSStylableElement parent=(CSSStylableElement)elt.getParent();
if (parent != null) {
IStyle style=parent.getComputedStyle();
if (style != null) {
Value fontSize=(Value)style.getProperty(IStyle.STYLE_FONT_SIZE);
if (fontSize != null) {
fs=fontSize.getFloatValue();
return new FloatValue(fontSize.getPrimitiveType(),fs * scale);
}
}
}
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * scale);
}
if (value.getPrimitiveType() == CSSPrimitiveValue.CSS_NUMBER) {
return super.computeValue(elt,engine,idx,new FloatValue(CSSPrimitiveValue.CSS_PT,value.getFloatValue()));
}
return super.computeValue(elt,engine,idx,value);
}",0.9871402327005512
68795,"public void setTextIndent(ITextContent content){
  if (currentIP == 0 && !setIndent && content != null) {
    IStyle contentStyle=content.getComputedStyle();
    currentIP=getDimensionValue(contentStyle.getProperty(StyleConstants.STYLE_TEXT_INDENT),maxAvaWidth);
    setIndent=true;
  }
}","public void setTextIndent(ITextContent content){
  if (currentIP == 0 && !setIndent && content != null) {
    IStyle contentStyle=content.getComputedStyle();
    currentIP=PropertyUtil.getDimensionValue(contentStyle.getProperty(StyleConstants.STYLE_TEXT_INDENT),maxAvaWidth);
    setIndent=true;
  }
}",0.9779286926994908
68796,"private boolean isInContainer(SheetData data,XlsContainer rowContainer){
  return data.getRowIndex() >= rowContainer.getStartRowId();
}","private boolean isInContainer(SheetData data,XlsContainer rowContainer){
  return data.getRowIndex() > rowContainer.getStartRowId();
}",0.9962825278810408
68797,"private void handleBorderInRow(TableBorder tb,RowArea row,int offsetX,int offsetY){
  for (Iterator ri=row.getChildren(); ri.hasNext(); ) {
    IArea area=(IArea)ri.next();
    if (!(area instanceof CellArea)) {
      continue;
    }
    CellArea cell=(CellArea)area;
    BorderInfo[] borders=cacheCellBorder(cell);
    int cellX=offsetX + cell.getX();
    int cellY=offsetY + cell.getY();
    int cellRx=cellX + cell.getWidth();
    int cellBy=cellY + cell.getHeight();
    tb.addColumn(cellRx);
    tb.addRow(cellBy);
    if (null != borders && borders[BorderInfo.TOP_BORDER].borderWidth != 0) {
      tb.setRowBorder(cellY,cellX,cellRx,borders[BorderInfo.TOP_BORDER].borderStyle,borders[BorderInfo.TOP_BORDER].borderWidth,borders[BorderInfo.TOP_BORDER].borderColor);
    }
    if (null != borders && borders[BorderInfo.LEFT_BORDER].borderWidth != 0) {
      tb.setColumnBorder(cellX,cellY,cellBy,borders[BorderInfo.LEFT_BORDER].borderStyle,borders[BorderInfo.LEFT_BORDER].borderWidth,borders[BorderInfo.LEFT_BORDER].borderColor);
    }
    if (null != borders && borders[BorderInfo.BOTTOM_BORDER].borderWidth != 0) {
      tb.setRowBorder(cellBy,cellX,cellRx,borders[BorderInfo.BOTTOM_BORDER].borderStyle,borders[BorderInfo.BOTTOM_BORDER].borderWidth,borders[BorderInfo.BOTTOM_BORDER].borderColor);
    }
    if (null != borders && borders[BorderInfo.RIGHT_BORDER].borderWidth != 0) {
      tb.setColumnBorder(cellRx,cellY,cellBy,borders[BorderInfo.RIGHT_BORDER].borderStyle,borders[BorderInfo.RIGHT_BORDER].borderWidth,borders[BorderInfo.RIGHT_BORDER].borderColor);
    }
  }
}","private void handleBorderInRow(TableBorder tb,RowArea row,int offsetX,int offsetY){
  for (Iterator ri=row.getChildren(); ri.hasNext(); ) {
    IArea area=(IArea)ri.next();
    if (!(area instanceof CellArea)) {
      continue;
    }
    CellArea cell=(CellArea)area;
    BorderInfo[] borders=cacheCellBorder(cell);
    int cellX=offsetX + cell.getX();
    int cellY=offsetY + cell.getY();
    int cellRx=cellX + cell.getWidth();
    int cellBy=cellY + cell.getHeight();
    tb.addColumn(cellX);
    tb.addColumn(cellRx);
    tb.addRow(cellBy);
    if (null != borders && borders[BorderInfo.TOP_BORDER].borderWidth != 0) {
      tb.setRowBorder(cellY,cellX,cellRx,borders[BorderInfo.TOP_BORDER].borderStyle,borders[BorderInfo.TOP_BORDER].borderWidth,borders[BorderInfo.TOP_BORDER].borderColor);
    }
    if (null != borders && borders[BorderInfo.LEFT_BORDER].borderWidth != 0) {
      tb.setColumnBorder(cellX,cellY,cellBy,borders[BorderInfo.LEFT_BORDER].borderStyle,borders[BorderInfo.LEFT_BORDER].borderWidth,borders[BorderInfo.LEFT_BORDER].borderColor);
    }
    if (null != borders && borders[BorderInfo.BOTTOM_BORDER].borderWidth != 0) {
      tb.setRowBorder(cellBy,cellX,cellRx,borders[BorderInfo.BOTTOM_BORDER].borderStyle,borders[BorderInfo.BOTTOM_BORDER].borderWidth,borders[BorderInfo.BOTTOM_BORDER].borderColor);
    }
    if (null != borders && borders[BorderInfo.RIGHT_BORDER].borderWidth != 0) {
      tb.setColumnBorder(cellRx,cellY,cellBy,borders[BorderInfo.RIGHT_BORDER].borderStyle,borders[BorderInfo.RIGHT_BORDER].borderWidth,borders[BorderInfo.RIGHT_BORDER].borderColor);
    }
  }
}",0.9921556322560402
68798,"/** 
 * The used style should be style of area which is writable, and the others are styles of content which is read-only.
 * @param tableRight
 * @param columnRight
 * @param cellRight
 * @param usedStyle
 */
public BorderInfo resolveTableRightBorder(IStyle tableRight,IStyle rowRight,IStyle columnRight,IStyle cellRight){
  return resolveBorder(tableRightBorderCache,new BorderStyleInfo[]{new BorderStyleInfo(cellRight,POSITION_TRAIL),new BorderStyleInfo(columnRight,POSITION_TRAIL),new BorderStyleInfo(rowRight,POSITION_TRAIL),new BorderStyleInfo(tableRight,POSITION_TRAIL)});
}","/** 
 * The used style should be style of area which is writable, and the others are styles of content which is read-only.
 * @param tableRight
 * @param columnRight
 * @param cellRight
 * @param usedStyle
 */
public BorderInfo resolveTableRightBorder(IStyle tableRight,IStyle rowRight,IStyle columnRight,IStyle cellRight){
  return resolveBorder(tableRightBorderCache,new BorderStyleInfo[]{new BorderStyleInfo(cellRight,POSITION_RIGHT),new BorderStyleInfo(columnRight,POSITION_RIGHT),new BorderStyleInfo(rowRight,POSITION_RIGHT),new BorderStyleInfo(tableRight,POSITION_RIGHT)});
}",0.965576592082616
68799,"/** 
 * The used style should be style of area which is writable, and the others are styles of content which is read-only.
 * @param preColumnRight
 * @param columnLeft
 * @param preCellRight
 * @param cellLeft
 * @param usedStyle
 */
public BorderInfo resolveCellLeftBorder(IStyle preColumnRight,IStyle columnLeft,IStyle preCellRight,IStyle cellLeft){
  return resolveBorder(cellLeftBorderCache,new BorderStyleInfo[]{new BorderStyleInfo(preCellRight,POSITION_TRAIL),new BorderStyleInfo(cellLeft,POSITION_LEAD),new BorderStyleInfo(preColumnRight,POSITION_TRAIL),new BorderStyleInfo(columnLeft,POSITION_LEAD)});
}","/** 
 * The used style should be style of area which is writable, and the others are styles of content which is read-only.
 * @param preColumnRight
 * @param columnLeft
 * @param preCellRight
 * @param cellLeft
 * @param usedStyle
 */
public BorderInfo resolveCellLeftBorder(IStyle preColumnRight,IStyle columnLeft,IStyle preCellRight,IStyle cellLeft){
  return resolveBorder(cellLeftBorderCache,new BorderStyleInfo[]{new BorderStyleInfo(preCellRight,POSITION_RIGHT),new BorderStyleInfo(cellLeft,POSITION_LEFT),new BorderStyleInfo(preColumnRight,POSITION_RIGHT),new BorderStyleInfo(columnLeft,POSITION_LEFT)});
}",0.977124183006536
68800,"/** 
 * The used style should be style of area which is writable, and the others are styles of content which is read-only.
 * @param tableLeft
 * @param columnLeft
 * @param cellLeft
 * @param usedStyle
 */
public BorderInfo resolveTableLeftBorder(IStyle tableLeft,IStyle rowLeft,IStyle columnLeft,IStyle cellLeft){
  return resolveBorder(tableLeftBorderCache,new BorderStyleInfo[]{new BorderStyleInfo(cellLeft,POSITION_LEAD),new BorderStyleInfo(columnLeft,POSITION_LEAD),new BorderStyleInfo(rowLeft,POSITION_LEAD),new BorderStyleInfo(tableLeft,POSITION_LEAD)});
}","/** 
 * The used style should be style of area which is writable, and the others are styles of content which is read-only.
 * @param tableLeft
 * @param columnLeft
 * @param cellLeft
 * @param usedStyle
 */
public BorderInfo resolveTableLeftBorder(IStyle tableLeft,IStyle rowLeft,IStyle columnLeft,IStyle cellLeft){
  return resolveBorder(tableLeftBorderCache,new BorderStyleInfo[]{new BorderStyleInfo(cellLeft,POSITION_LEFT),new BorderStyleInfo(columnLeft,POSITION_LEFT),new BorderStyleInfo(rowLeft,POSITION_LEFT),new BorderStyleInfo(tableLeft,POSITION_LEFT)});
}",0.9858156028368794
68801,"protected IStyle getLeftCellContentStyle(RowArea lastRow,RowArea currentRow,int columnID){
  CellArea cell=currentRow.getCell(columnID - 1);
  if (cell == null && lastRow != null) {
    cell=lastRow.getCell(columnID - 1);
  }
  if (cell != null) {
    return cell.getContent().getComputedStyle();
  }
  return null;
}","protected IStyle getLeftCellContentStyle(RowArea lastRow,CellArea currentCell){
  RowArea currentRow=(RowArea)currentCell.getParent();
  int columnID=currentCell.getColumnID();
  CellArea cell=null;
  if (isRTL) {
    cell=currentRow.getCell(columnID + 1);
    if (cell == null && lastRow != null) {
      cell=lastRow.getCell(columnID + 1);
    }
    if (cell == null) {
      return currentCell.getContent().getComputedStyle();
    }
  }
 else {
    cell=currentRow.getCell(columnID - 1);
    if (cell == null && lastRow != null) {
      cell=lastRow.getCell(columnID - 1);
    }
  }
  if (cell != null) {
    return cell.getContent().getComputedStyle();
  }
  return null;
}",0.4889336016096579
68802,"/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea,boolean isFirst){
  IContent cellContent=cellArea.getContent();
  int columnID=cellArea.getColumnID();
  int colSpan=cellArea.getColSpan();
  IRowContent row=(IRowContent)cellContent.getParent();
  IStyle cellContentStyle=cellContent.getComputedStyle();
  IStyle tableStyle=tableContent.getComputedStyle();
  IStyle rowStyle=row.getComputedStyle();
  IStyle columnStyle=getColumnStyle(columnID);
  IStyle preRowStyle=null;
  IStyle preColumnStyle=getColumnStyle(columnID - 1);
  IStyle leftCellContentStyle=null;
  IStyle topCellStyle=null;
  RowArea lastRow=null;
  if (rows.size() > 0) {
    lastRow=(RowArea)rows.getCurrent();
  }
  if (lastRow != null) {
    preRowStyle=lastRow.getContent().getComputedStyle();
    CellArea cell=lastRow.getCell(columnID);
    if (cell != null && cell.getContent() != null) {
      topCellStyle=cell.getContent().getComputedStyle();
    }
  }
  if (columnID > 0) {
    leftCellContentStyle=getLeftCellContentStyle(lastRow,(RowArea)cellArea.getParent(),columnID);
  }
  if (rows.size() == 0 && lastRow == null) {
    if (isFirst) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableTopBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
 else {
      if (tableStyle != null) {
        BorderInfo border=bcr.resolveTableTopBorder(tableStyle,null,columnStyle,null);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
    if (columnID == startCol) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
 else {
      if (leftCellContentStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
    if (columnID + colSpan - 1 == endCol) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setRightBorder(border);
        }
      }
    }
  }
 else {
    if (isFirst) {
      if (preRowStyle != null || rowStyle != null || topCellStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellTopBorder(preRowStyle,rowStyle,topCellStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
 else {
      if (preRowStyle != null || topCellStyle != null) {
        BorderInfo border=bcr.resolveCellTopBorder(preRowStyle,null,topCellStyle,null);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
    if (columnID == startCol) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
 else {
      if (leftCellContentStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
    if (columnID + colSpan - 1 == endCol) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setRightBorder(border);
        }
      }
    }
  }
}","/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea,boolean isFirst){
  IContent cellContent=cellArea.getContent();
  int columnID=cellArea.getColumnID();
  int colSpan=cellArea.getColSpan();
  IRowContent row=(IRowContent)cellContent.getParent();
  IStyle cellContentStyle=cellContent.getComputedStyle();
  IStyle tableStyle=tableContent.getComputedStyle();
  IStyle rowStyle=row.getComputedStyle();
  IStyle columnStyle=getColumnStyle(columnID);
  IStyle preRowStyle=null;
  IStyle preColumnStyle=getColumnStyle(columnID - 1);
  IStyle leftCellContentStyle=null;
  IStyle topCellStyle=null;
  RowArea lastRow=null;
  if (rows.size() > 0) {
    lastRow=(RowArea)rows.getCurrent();
  }
  if (lastRow != null) {
    preRowStyle=lastRow.getContent().getComputedStyle();
    CellArea cell=lastRow.getCell(columnID);
    if (cell != null && cell.getContent() != null) {
      topCellStyle=cell.getContent().getComputedStyle();
    }
  }
  if ((!isRTL && columnID > startCol) || (isRTL && columnID + colSpan - 1 < endCol)) {
    leftCellContentStyle=getLeftCellContentStyle(lastRow,cellArea);
  }
  if (rows.size() == 0 && lastRow == null) {
    if (isFirst) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableTopBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
 else {
      if (tableStyle != null) {
        BorderInfo border=bcr.resolveTableTopBorder(tableStyle,null,columnStyle,null);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
    if ((columnID == startCol && !isRTL) || (columnID + colSpan - 1 == endCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
 else {
      if (leftCellContentStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
    if ((columnID + colSpan - 1 == endCol && !isRTL) || (columnID == startCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setRightBorder(border);
        }
      }
    }
  }
 else {
    if (isFirst) {
      if (preRowStyle != null || rowStyle != null || topCellStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellTopBorder(preRowStyle,rowStyle,topCellStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
 else {
      if (preRowStyle != null || topCellStyle != null) {
        BorderInfo border=bcr.resolveCellTopBorder(preRowStyle,null,topCellStyle,null);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
    if ((columnID == startCol && !isRTL) || (columnID + colSpan - 1 == endCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
 else {
      if (leftCellContentStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
    if ((columnID + colSpan - 1 == endCol && !isRTL) || (columnID == startCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setRightBorder(border);
        }
      }
    }
  }
}",0.5611559904425987
68803,"public TableLayout(ITableContent tableContent,TableLayoutInfo layoutInfo,int startCol,int endCol){
  this.tableContent=tableContent;
  this.layoutInfo=layoutInfo;
  this.startCol=startCol;
  this.endCol=endCol;
  if (tableContent != null) {
    bcr.setRTL(tableContent.isRTL());
  }
}","public TableLayout(ITableContent tableContent,TableLayoutInfo layoutInfo,int startCol,int endCol){
  this.tableContent=tableContent;
  this.layoutInfo=layoutInfo;
  this.startCol=startCol;
  this.endCol=endCol;
  if (tableContent != null) {
    isRTL=tableContent.isRTL();
  }
}",0.9786476868327402
68804,"public IConditionalExpression createConditionalExpression(Expression testExpression,String operator,Expression value1,Expression value2){
  String tempV1=null, tempV2=null;
  if (value1 != null) {
    tempV1=value1.getScriptText();
  }
  if (value2 != null) {
    tempV2=value2.getScriptText();
  }
  ConditionalExpression expression=new ConditionalExpression(testExpression.getScriptText(),DataAdapterUtil.adaptModelFilterOperator(operator),tempV1,tempV2);
  return ExpressionUtil.transformConditionalExpression(expression);
}","public IConditionalExpression createConditionalExpression(Expression testExpression,String operator,Expression value1,Expression value2){
  String tempV1=null, tempV2=null;
  if (value1 != null) {
    tempV1=value1.getScriptText();
  }
  if (value2 != null) {
    tempV2=value2.getScriptText();
  }
  if (testExpression instanceof Expression.Script && ""String_Node_Str"".equals(((Expression.Script)testExpression).getLanguage())) {
    ScriptExpression srciptExpr=null;
    try {
      srciptExpr=getModelAdapter().adaptJSExpression(testExpression.getScriptText(),((Expression.Script)testExpression).getLanguage());
    }
 catch (    Exception e) {
    }
    ConditionalExpression expression=new ConditionalExpression(srciptExpr.getText(),DataAdapterUtil.adaptModelFilterOperator(operator),tempV1,tempV2);
    return ExpressionUtil.transformConditionalExpression(expression);
  }
 else {
    ConditionalExpression expression=new ConditionalExpression(testExpression.getScriptText(),DataAdapterUtil.adaptModelFilterOperator(operator),tempV1,tempV2);
    return ExpressionUtil.transformConditionalExpression(expression);
  }
}",0.610909090909091
68805,"public IConditionalExpression createConditionExpression(Expression testExpression,String operator,List<Expression> valueList){
  ArrayList<String> values=new ArrayList<String>(valueList.size());
  for (  Expression expr : valueList) {
    values.add(expr.getScriptText());
  }
  ConditionalExpression expression=new ConditionalExpression(testExpression.getScriptText(),DataAdapterUtil.adaptModelFilterOperator(operator),values);
  return ExpressionUtil.transformConditionalExpression(expression);
}","public IConditionalExpression createConditionExpression(Expression testExpression,String operator,List<Expression> valueList){
  ArrayList<String> values=new ArrayList<String>(valueList.size());
  for (  Expression expr : valueList) {
    values.add(expr.getScriptText());
  }
  if (testExpression instanceof Expression.Script && ""String_Node_Str"".equals(((Expression.Script)testExpression).getLanguage())) {
    ScriptExpression srciptExpr=null;
    try {
      srciptExpr=getModelAdapter().adaptJSExpression(testExpression.getScriptText(),((Expression.Script)testExpression).getLanguage());
    }
 catch (    Exception e) {
    }
    ConditionalExpression expression=new ConditionalExpression(srciptExpr.getText(),DataAdapterUtil.adaptModelFilterOperator(operator),values);
    return ExpressionUtil.transformConditionalExpression(expression);
  }
 else {
    ConditionalExpression expression=new ConditionalExpression(testExpression.getScriptText(),DataAdapterUtil.adaptModelFilterOperator(operator),values);
    return ExpressionUtil.transformConditionalExpression(expression);
  }
}",0.5993690851735016
68806,"public synchronized static void shutdown(){
  if (launcher != null) {
    launcher.shutdown();
    launcher=null;
  }
  platform=null;
}","public synchronized static void shutdown(){
  if (launcher != null) {
    launcher.shutdown();
    launcher=null;
    platform=null;
  }
}",0.978102189781022
68807,"public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  populateColor(style,StyleConstants.STYLE_BACKGROUND_COLOR,entry,StyleConstant.BACKGROUND_COLOR_PROP);
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_BOTTOM_COLOR,entry,StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_TOP_COLOR,entry,StyleConstant.BORDER_TOP_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_LEFT_COLOR,entry,StyleConstant.BORDER_LEFT_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_RIGHT_COLOR,entry,StyleConstant.BORDER_RIGHT_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  populateColor(style,StyleConstants.STYLE_COLOR,entry,StyleConstant.COLOR_PROP);
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontStyle()));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontWeight()));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextLineThrough()));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextUnderline()));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign(),style.getDirection()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  entry.setProperty(StyleConstant.WHITE_SPACE,style.getWhiteSpace());
  return entry;
}","public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  populateColor(style,StyleConstants.STYLE_BACKGROUND_COLOR,entry,StyleConstant.BACKGROUND_COLOR_PROP);
  CSSValue borderWidth=style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH);
  int width=PropertyUtil.getDimensionValue(borderWidth);
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_BOTTOM_COLOR,entry,StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(width));
  }
  borderWidth=style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH);
  width=PropertyUtil.getDimensionValue(borderWidth);
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_TOP_COLOR,entry,StyleConstant.BORDER_TOP_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(width));
  }
  borderWidth=style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH);
  width=PropertyUtil.getDimensionValue(borderWidth);
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_LEFT_COLOR,entry,StyleConstant.BORDER_LEFT_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(width));
  }
  borderWidth=style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH);
  width=PropertyUtil.getDimensionValue(borderWidth);
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_RIGHT_COLOR,entry,StyleConstant.BORDER_RIGHT_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(width));
  }
  populateColor(style,StyleConstants.STYLE_COLOR,entry,StyleConstant.COLOR_PROP);
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getProperty(IStyle.STYLE_FONT_SIZE)));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontStyle()));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontWeight()));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextLineThrough()));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextUnderline()));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign(),style.getDirection()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  entry.setProperty(StyleConstant.WHITE_SPACE,style.getWhiteSpace());
  return entry;
}",0.5968301886792453
68808,"public static Integer convertFontSize(String size){
  Integer fsize=null;
  try {
    fsize=Math.round(Float.parseFloat(size) / 1000);
  }
 catch (  NumberFormatException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  return fsize;
}","public static Integer convertFontSize(CSSValue fontSize){
  int size=PropertyUtil.getDimensionValue(fontSize);
  Integer fsize=null;
  try {
    fsize=Math.round(size / 1000);
  }
 catch (  NumberFormatException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  return fsize;
}",0.8097928436911488
68809,"public static String convertBorderWeight(double width){
  String w=StyleConstant.NULL;
  if (width >= 749 && width < 1499) {
    w=""String_Node_Str"";
  }
 else   if (width >= 1499 && width < 2249) {
    w=""String_Node_Str"";
  }
 else   if (width >= 2249) {
    w=""String_Node_Str"";
  }
 else {
    w=""String_Node_Str"";
  }
  return w;
}","public static String convertBorderWeight(int width){
  String w=StyleConstant.NULL;
  if (width >= 749 && width < 1499) {
    w=""String_Node_Str"";
  }
 else   if (width >= 1499 && width < 2249) {
    w=""String_Node_Str"";
  }
 else   if (width >= 2249) {
    w=""String_Node_Str"";
  }
 else {
    w=""String_Node_Str"";
  }
  return w;
}",0.9865470852017936
68810,"public void addCaption(String text,IStyle style){
  ContainerSizeInfo rule=getCurrentContainer().getSizeInfo();
  StyleEntry entry=StyleBuilder.createEmptyStyleEntry();
  entry.setProperty(StyleEntry.H_ALIGN_PROP,""String_Node_Str"");
  entry.setProperty(StyleEntry.FONT_SIZE_PROP,StyleBuilder.convertFontSize(style.getFontSize()));
  Data data=createData(text,entry);
  data.setSizeInfo(rule);
  addData(data);
}","public void addCaption(String text,IStyle style){
  ContainerSizeInfo rule=getCurrentContainer().getSizeInfo();
  StyleEntry entry=StyleBuilder.createEmptyStyleEntry();
  entry.setProperty(StyleEntry.H_ALIGN_PROP,""String_Node_Str"");
  entry.setProperty(StyleEntry.FONT_SIZE_PROP,StyleBuilder.convertFontSize(style.getProperty(IStyle.STYLE_FONT_SIZE)));
  Data data=createData(text,entry);
  data.setSizeInfo(rule);
  addData(data);
}",0.9549763033175356
68811,"private float getPadding(String padding){
  float value=0;
  try {
    value=Float.parseFloat(padding) / 50;
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  return value;
}","private int getPadding(CSSValue padding){
  return PropertyUtil.getDimensionValue(padding) / 50;
}",0.380327868852459
68812,"private int getCellWidth(int cellWidth,IStyle style){
  float leftPadding=getPadding(style.getPaddingLeft());
  float rightPadding=getPadding(style.getPaddingRight());
  if (leftPadding > cellWidth) {
    leftPadding=0;
  }
  if (rightPadding > cellWidth) {
    rightPadding=0;
  }
  if ((leftPadding + rightPadding) > cellWidth) {
    rightPadding=0;
  }
  return (int)(cellWidth - leftPadding - rightPadding);
}","private int getCellWidth(int cellWidth,IStyle style){
  int leftPadding=getPadding(style.getProperty(IStyle.STYLE_PADDING_LEFT));
  int rightPadding=getPadding(style.getProperty(IStyle.STYLE_PADDING_RIGHT));
  if (leftPadding > cellWidth) {
    leftPadding=0;
  }
  if (rightPadding > cellWidth) {
    rightPadding=0;
  }
  if ((leftPadding + rightPadding) > cellWidth) {
    rightPadding=0;
  }
  return (int)(cellWidth - leftPadding - rightPadding);
}",0.7806004618937644
68813,"private void writePosition(String verticalAlign,CSSValue fontSize){
  int size=WordUtil.parseFontSize(((FloatValue)fontSize).getFloatValue());
  if (""String_Node_Str"".equalsIgnoreCase(verticalAlign)) {
    writeAttrTag(""String_Node_Str"",(int)(size * 1 / 3));
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(verticalAlign)) {
    writeAttrTag(""String_Node_Str"",(int)(-size * 1 / 3));
  }
}","private void writePosition(String verticalAlign,CSSValue fontSize){
  int size=WordUtil.parseFontSize(PropertyUtil.getDimensionValue(fontSize));
  if (""String_Node_Str"".equalsIgnoreCase(verticalAlign)) {
    writeAttrTag(""String_Node_Str"",(int)(size * 1 / 3));
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(verticalAlign)) {
    writeAttrTag(""String_Node_Str"",(int)(-size * 1 / 3));
  }
}",0.9362244897959184
68814,"private void writeLetterSpacing(IStyle style){
  CSSValue letterSpacing=style.getProperty(StyleConstants.STYLE_LETTER_SPACING);
  writeAttrTag(""String_Node_Str"",WordUtil.parseSpacing(((FloatValue)letterSpacing).getFloatValue()));
}","private void writeLetterSpacing(IStyle style){
  int letterSpacing=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_LETTER_SPACING));
  writeAttrTag(""String_Node_Str"",WordUtil.parseSpacing(letterSpacing));
}",0.7407407407407407
68815,"private void writeBorderProperty(String style,String color,CSSValue width,int margin){
  writer.attribute(""String_Node_Str"",WordUtil.parseBorderStyle(style));
  writer.attribute(""String_Node_Str"",WordUtil.parseBorderSize(((FloatValue)width).getFloatValue()));
  writer.attribute(""String_Node_Str"",validateBorderSpace(margin));
  writer.attribute(""String_Node_Str"",WordUtil.parseColor(color));
}","private void writeBorderProperty(String style,String color,CSSValue width,int margin){
  writer.attribute(""String_Node_Str"",WordUtil.parseBorderStyle(style));
  writer.attribute(""String_Node_Str"",WordUtil.parseBorderSize(PropertyUtil.getDimensionValue(width)));
  writer.attribute(""String_Node_Str"",validateBorderSpace(margin));
  writer.attribute(""String_Node_Str"",WordUtil.parseColor(color));
}",0.9367088607594936
68816,"private void drawImageBorderStyle(String pos,String style,CSSValue width){
  String direct=""String_Node_Str"" + pos;
  writer.openTag(direct);
  writer.attribute(""String_Node_Str"",WordUtil.parseImageBorderStyle(style));
  writer.attribute(""String_Node_Str"",WordUtil.parseBorderSize(((FloatValue)width).getFloatValue()));
  writer.closeTag(direct);
}","private void drawImageBorderStyle(String pos,String style,CSSValue width){
  String direct=""String_Node_Str"" + pos;
  writer.openTag(direct);
  writer.attribute(""String_Node_Str"",WordUtil.parseImageBorderStyle(style));
  writer.attribute(""String_Node_Str"",WordUtil.parseBorderSize(PropertyUtil.getDimensionValue(width)));
  writer.closeTag(direct);
}",0.9283667621776504
68817,"protected void writeFontSize(IStyle style){
  CSSValue fontSize=style.getProperty(StyleConstants.STYLE_FONT_SIZE);
  int size=WordUtil.parseFontSize(((FloatValue)fontSize).getFloatValue());
  writeAttrTag(""String_Node_Str"",size);
  writeAttrTag(""String_Node_Str"",size);
}","protected void writeFontSize(IStyle style){
  CSSValue fontSize=style.getProperty(StyleConstants.STYLE_FONT_SIZE);
  int size=WordUtil.parseFontSize(PropertyUtil.getDimensionValue(fontSize));
  writeAttrTag(""String_Node_Str"",size);
  writeAttrTag(""String_Node_Str"",size);
}",0.9080882352941176
68818,"public void flush() throws BirtException {
  if (page != null) {
    context.getPageHintManager().addTableColumnHints(columnHints);
    context.getPageHintManager().generatePageRowHints(getTableKeys());
    page.flush();
    pageBreakEvent();
    if (!page.finished) {
      context.setPageNumber(context.getPageNumber() + 1);
      context.setPageCount(context.getPageCount() + 1);
    }
    generator.reset();
    context.getPageHintManager().clearPageHint();
    currentNode=null;
  }
}","public void flush() throws BirtException {
  if (page != null) {
    context.getPageHintManager().addTableColumnHints(columnHints);
    context.getPageHintManager().generatePageRowHints(getTableKeys());
    updatePageNumber();
    page.flush();
    pageBreakEvent();
    if (!page.finished) {
      context.setPageNumber(context.getPageNumber() + 1);
      context.setPageCount(context.getPageCount() + 1);
    }
    generator.reset();
    context.getPageHintManager().clearPageHint();
    currentNode=null;
  }
}",0.9760479041916168
68819,"/** 
 * Loads scripts that are stored in an external file. Used to support include-script. Each script file should be load only once. and the script in the file must be encoded in UTF-8.
 * @param fileName script file name
 */
public void loadScript(String language,String fileName){
  ReportDesignHandle reportDesign=this.getDesign();
  URL url=null;
  if (reportDesign != null) {
    url=reportDesign.findResource(fileName,IResourceLocator.LIBRARY,appContext);
  }
  if (url == null) {
    log.log(Level.SEVERE,""String_Node_Str"" + fileName + ""String_Node_Str"");
    addException(new EngineException(MessageConstants.SCRIPT_FILE_LOAD_ERROR,fileName));
    return;
  }
  InputStream in=null;
  try {
    in=url.openStream();
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    byte[] buffer=new byte[1024];
    int size=in.read(buffer);
    while (size != -1) {
      out.write(buffer,0,size);
      size=in.read(buffer);
    }
    byte[] script=out.toByteArray();
    ICompiledScript compiledScript=scriptContext.compile(language,fileName,1,new String(script,""String_Node_Str""));
    execute(compiledScript);
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"" + fileName + ""String_Node_Str"",ex);
    addException(new EngineException(MessageConstants.SCRIPT_FILE_LOAD_ERROR,url.toString(),ex));
  }
catch (  BirtException e) {
    log.log(Level.SEVERE,""String_Node_Str"" + fileName + ""String_Node_Str"",e);
    addException(new EngineException(MessageConstants.SCRIPT_EVALUATION_ERROR,url.toString(),e));
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    IOException e) {
    }
  }
}","/** 
 * Loads scripts that are stored in an external file. Used to support include-script. Each script file should be load only once. and the script in the file must be encoded in UTF-8.
 * @param fileName script file name
 */
public void loadScript(String language,String fileName){
  ReportDesignHandle reportDesign=this.getDesign();
  URL url=null;
  if (reportDesign != null) {
    url=reportDesign.findResource(fileName,IResourceLocator.LIBRARY,appContext);
  }
  if (url == null) {
    log.log(Level.SEVERE,""String_Node_Str"" + fileName + ""String_Node_Str"");
    addException(new EngineException(MessageConstants.SCRIPT_FILE_LOAD_ERROR,fileName));
    return;
  }
  InputStream in=null;
  try {
    in=url.openStream();
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    byte[] buffer=new byte[1024];
    int size=in.read(buffer);
    while (size != -1) {
      out.write(buffer,0,size);
      size=in.read(buffer);
    }
    byte[] script=out.toByteArray();
    ICompiledScript compiledScript=getScriptContext().compile(language,fileName,1,new String(script,""String_Node_Str""));
    execute(compiledScript);
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"" + fileName + ""String_Node_Str"",ex);
    addException(new EngineException(MessageConstants.SCRIPT_FILE_LOAD_ERROR,url.toString(),ex));
  }
catch (  BirtException e) {
    log.log(Level.SEVERE,""String_Node_Str"" + fileName + ""String_Node_Str"",e);
    addException(new EngineException(MessageConstants.SCRIPT_EVALUATION_ERROR,url.toString(),e));
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    IOException e) {
    }
  }
}",0.997880714501968
68820,"void setAxisCoordinate(double _dAxisRenderingCoordinate){
  dAxisRenderingCoordinate=_dAxisRenderingCoordinate;
}","public void setAxisCoordinate(double _dAxisRenderingCoordinate){
  dAxisRenderingCoordinate=_dAxisRenderingCoordinate;
}",0.9699570815450644
68821,"/** 
 * The axes correspond to the lines/planes being rendered within the plot block. This is rendered with Z-order=2
 */
private final void renderAxesStructure(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final AllAxes aax=pwa.getAxes();
  if (pwa.getDimension() == IConstants.THREE_D) {
    renderEachAxis(ipr,p,aax.getPrimaryBase(),IConstants.BASE_AXIS);
    renderEachAxis(ipr,p,aax.getAncillaryBase(),IConstants.ANCILLARY_AXIS);
    renderEachAxis(ipr,p,aax.getPrimaryOrthogonal(),IConstants.ORTHOGONAL_AXIS);
  }
 else {
    final int iCount=aax.getOverlayCount() + 2;
    final OneAxis[] oaxa=new OneAxis[iCount];
    oaxa[0]=aax.getPrimaryBase();
    oaxa[1]=aax.getPrimaryOrthogonal();
    for (int i=0; i < iCount - 2; i++) {
      oaxa[i + 2]=aax.getOverlay(i);
    }
    for (int i=0; i < iCount; i++) {
      renderEachAxis(ipr,p,oaxa[i],IConstants.AXIS);
    }
  }
}","/** 
 * The axes correspond to the lines/planes being rendered within the plot block. This is rendered with Z-order=2
 */
private final void renderAxesStructure(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final AllAxes aax=pwa.getAxes();
  if (pwa.getDimension() == IConstants.THREE_D) {
    renderEachAxis(ipr,p,aax.getPrimaryBase(),IConstants.BASE_AXIS);
    renderEachAxis(ipr,p,aax.getAncillaryBase(),IConstants.ANCILLARY_AXIS);
    renderEachAxis(ipr,p,aax.getPrimaryOrthogonal(),IConstants.ORTHOGONAL_AXIS);
  }
 else {
    final int iCount=aax.getOverlayCount() + 2;
    final OneAxis[] oaxa=new OneAxis[iCount];
    oaxa[0]=aax.getPrimaryBase();
    oaxa[1]=aax.getPrimaryOrthogonal();
    for (int i=0; i < iCount - 2; i++) {
      oaxa[i + 2]=aax.getOverlay(i);
      IntersectionValue iv=oaxa[i + 2].getIntersectionValue();
      if (iv.getType() == IConstants.VALUE) {
        oaxa[i + 2].setAxisCoordinate(Methods.getLocation(aax.getPrimaryBase().getScale(),iv.getValue()));
      }
    }
    for (int i=0; i < iCount; i++) {
      renderEachAxis(ipr,p,oaxa[i],IConstants.AXIS);
    }
  }
}",0.8945386064030132
68822,"@Override public void onCreate(IOnCreateEvent event) throws BirtException {
  DesignElementHandle modelHandle=event.getHandle();
  if (!(modelHandle instanceof ExtendedItemHandle)) {
    return;
  }
  CrosstabReportItemHandle crosstab=(CrosstabReportItemHandle)((ExtendedItemHandle)modelHandle).getReportItem();
  IReportEventContext context=event.getContext();
  CrosstabCreationHandler handler=new CrosstabCreationHandler((ExtendedItemHandle)modelHandle,context.getApplicationClassLoader());
  handler.handleCrosstab(crosstab,(ITableContent)event.getContent(),context);
}","@Override public void onCreate(IOnCreateEvent event) throws BirtException {
  DesignElementHandle modelHandle=event.getHandle();
  if (!(modelHandle instanceof ExtendedItemHandle)) {
    return;
  }
  CrosstabReportItemHandle crosstab=(CrosstabReportItemHandle)((ExtendedItemHandle)modelHandle).getReportItem();
  IReportEventContext context=event.getContext();
  CrosstabCreationHandler handler=new CrosstabCreationHandler((ExtendedItemHandle)modelHandle,context.getApplicationClassLoader());
  handler.handleCrosstab(crosstab,(ITableContent)event.getContent(),context,RunningState.CREATE);
}",0.9828473413379074
68823,"@Override public void onRender(IOnRenderEvent event) throws BirtException {
  DesignElementHandle modelHandle=event.getHandle();
  if (!(modelHandle instanceof ExtendedItemHandle)) {
    return;
  }
  CrosstabReportItemHandle crosstab=(CrosstabReportItemHandle)((ExtendedItemHandle)modelHandle).getReportItem();
  IReportEventContext context=event.getContext();
  CrosstabRenderingHandler handler=new CrosstabRenderingHandler((ExtendedItemHandle)modelHandle,context.getApplicationClassLoader());
  handler.handleCrosstab(crosstab,(ITableContent)event.getContent(),context);
}","@Override public void onRender(IOnRenderEvent event) throws BirtException {
  DesignElementHandle modelHandle=event.getHandle();
  if (!(modelHandle instanceof ExtendedItemHandle)) {
    return;
  }
  CrosstabReportItemHandle crosstab=(CrosstabReportItemHandle)((ExtendedItemHandle)modelHandle).getReportItem();
  IReportEventContext context=event.getContext();
  CrosstabRenderingHandler handler=new CrosstabRenderingHandler((ExtendedItemHandle)modelHandle,context.getApplicationClassLoader());
  handler.handleCrosstab(crosstab,(ITableContent)event.getContent(),context,RunningState.RENDER);
}",0.9829059829059827
68824,"public CrosstabInstanceImpl(ITableContent content,DesignElementHandle modelHandle){
  this.content=content;
  this.modelHandle=modelHandle;
}","public CrosstabInstanceImpl(ITableContent content,DesignElementHandle modelHandle,RunningState runningState){
  this.content=content;
  this.modelHandle=modelHandle;
  this.runningState=runningState;
}",0.8245614035087719
68825,"public void setRepeatColumnHeader(boolean repeat){
  content.setHeaderRepeat(repeat);
}","public void setRepeatColumnHeader(boolean repeat){
  if (runningState == RunningState.CREATE) {
    content.setHeaderRepeat(repeat);
  }
 else   if (runningState == RunningState.RENDER) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}",0.4142857142857143
68826,"public void handleCrosstab(CrosstabReportItemHandle crosstab,ITableContent content,IReportContext context) throws BirtException {
  if (handler == null || crosstab == null) {
    return;
  }
  ICrosstabInstance crosstabInst=new CrosstabInstanceImpl(content,crosstab.getModelHandle());
  handler.callFunction(CrosstabScriptHandler.ON_CREATE_CROSSTAB,crosstabInst,context);
}","public void handleCrosstab(CrosstabReportItemHandle crosstab,ITableContent content,IReportContext context,RunningState runningState) throws BirtException {
  if (handler == null || crosstab == null) {
    return;
  }
  ICrosstabInstance crosstabInst=new CrosstabInstanceImpl(content,crosstab.getModelHandle(),runningState);
  handler.callFunction(CrosstabScriptHandler.ON_CREATE_CROSSTAB,crosstabInst,context);
}",0.9503184713375796
68827,"public void handleCrosstab(CrosstabReportItemHandle crosstab,ITableContent content,IReportContext context) throws BirtException {
  if (handler == null || crosstab == null) {
    return;
  }
  ICrosstabInstance crosstabInst=new CrosstabInstanceImpl(content,crosstab.getModelHandle());
  handler.callFunction(CrosstabScriptHandler.ON_RENDER_CROSSTAB,crosstabInst,context);
}","public void handleCrosstab(CrosstabReportItemHandle crosstab,ITableContent content,IReportContext context,RunningState runningState) throws BirtException {
  if (handler == null || crosstab == null) {
    return;
  }
  ICrosstabInstance crosstabInst=new CrosstabInstanceImpl(content,crosstab.getModelHandle(),runningState);
  handler.callFunction(CrosstabScriptHandler.ON_RENDER_CROSSTAB,crosstabInst,context);
}",0.9503184713375796
68828,"/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_NUMBER:
      return value;
case CSSPrimitiveValue.CSS_PX:
    float v=value.getFloatValue();
  CSSContext cx=engine.getCSSContext();
float ratio=cx.getPixelUnitToMillimeter();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * ratio / 25.4f * 72000.0f);
case CSSPrimitiveValue.CSS_MM:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v / 25.4f * 72000.0f);
case CSSPrimitiveValue.CSS_CM:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v / 2.54f * 72000.0f);
case CSSPrimitiveValue.CSS_IN:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * 72000.0f);
case CSSPrimitiveValue.CSS_PT:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * 1000.0f);
case CSSPrimitiveValue.CSS_PC:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * 12.0f * 1000.0f);
case CSSPrimitiveValue.CSS_EMS:
v=value.getFloatValue();
Value fontSize=(Value)elt.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
float fs=fontSize.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * fs);
case CSSPrimitiveValue.CSS_EXS:
v=value.getFloatValue();
fontSize=(Value)elt.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
fs=fontSize.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * fs * 0.5f);
}
}
return value;
}","/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_NUMBER:
case CSSPrimitiveValue.CSS_PX:
case CSSPrimitiveValue.CSS_MM:
case CSSPrimitiveValue.CSS_CM:
case CSSPrimitiveValue.CSS_IN:
case CSSPrimitiveValue.CSS_PT:
case CSSPrimitiveValue.CSS_PC:
      return value;
case CSSPrimitiveValue.CSS_EMS:
    float v=value.getFloatValue();
  Value fontSize=(Value)elt.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
float fs=fontSize.getFloatValue();
return new FloatValue(fontSize.getPrimitiveType(),v * fs);
case CSSPrimitiveValue.CSS_EXS:
v=value.getFloatValue();
fontSize=(Value)elt.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
fs=fontSize.getFloatValue();
return new FloatValue(fontSize.getPrimitiveType(),v * fs * 0.5f);
}
}
return value;
}",0.6481954064892453
68829,"protected void doExecute() throws BirtException {
  IReportItemExecutor executor=bodyExecutor;
  IContent content;
  while (executor.hasNextChild()) {
    executor=executor.getNextChild();
    parentExecutors.add(executor);
    content=executor.execute();
    DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
{
      if (docExt != null) {
        if (docExt.getIndex() == offset) {
          bodyContent=content;
          childExecutor=executor;
          break;
        }
      }
    }
  }
}","protected void doExecute() throws BirtException {
  IReportItemExecutor executor=bodyExecutor;
  IContent content=null;
  while (executor.hasNextChild()) {
    executor=executor.getNextChild();
    parentExecutors.add(executor);
    content=executor.execute();
    DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
{
      if (docExt != null) {
        if (docExt.getIndex() == offset) {
          bodyContent=content;
          childExecutor=executor;
          break;
        }
      }
    }
  }
  IStyle cs=bodyContent.getComputedStyle();
  IStyle is=bodyContent.getInlineStyle();
  CSSEngine engine=bodyContent.getCSSEngine();
  IStyle mergedStyle=(is != null ? is : new StyleDeclaration(engine));
  for (int i=0; i < StyleConstants.NUMBER_OF_STYLE; i++) {
    if (isNullValue(mergedStyle.getProperty(i)) && engine.isInheritedProperty(i)) {
      mergedStyle.setProperty(i,cs.getProperty(i));
    }
  }
  bodyContent.setInlineStyle(mergedStyle);
}",0.7022801302931596
68830,"public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  context.addContainer(false);
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (altText == null) {
      altText=messageFlashObjectNotSupported;
    }
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
    byte[] data=imageInfo.getData();
    if (data == null || data.length == 0) {
      wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
      return;
    }
    double height=WordUtil.convertImageSize(image.getHeight(),imageInfo.getHeight());
    double width=WordUtil.convertImageSize(image.getWidth(),imageInfo.getWidth());
    writeBookmark(image);
    writeToc(image);
    HyperlinkInfo hyper=getHyperlink(image);
    wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
  }
}","public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  double height=WordUtil.convertImageSize(image.getHeight(),0);
  double width=WordUtil.convertImageSize(image.getWidth(),0);
  context.addContainer(false);
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (altText == null) {
      altText=messageFlashObjectNotSupported;
    }
    wordWriter.drawImage(null,height,width,null,style,inlineFlag,altText,uri);
    return;
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
    byte[] data=imageInfo.getData();
    if (data == null || data.length == 0) {
      wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
      return;
    }
    height=WordUtil.convertImageSize(image.getHeight(),imageInfo.getHeight());
    width=WordUtil.convertImageSize(image.getWidth(),imageInfo.getWidth());
    writeBookmark(image);
    writeToc(image);
    HyperlinkInfo hyper=getHyperlink(image);
    wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    wordWriter.drawImage(null,height,width,null,style,inlineFlag,altText,uri);
  }
}",0.9112602535421328
68831,"private void gRestore(){
  out.println(""String_Node_Str"");
}","private void gRestore(){
  out.println(""String_Node_Str"");
  graphics.pop();
}",0.8695652173913043
68832,"public void clipRestore(){
  out.println(""String_Node_Str"");
  graphics.pop();
}","public void clipRestore(){
  gRestore();
}",0.6065573770491803
68833,"private void gSave(){
  out.println(""String_Node_Str"");
}","private void gSave(){
  out.println(""String_Node_Str"");
  graphics.push(new Graphic());
}",0.7808219178082192
68834,"public void clipSave(){
  out.println(""String_Node_Str"");
  graphics.push(new Graphic());
}","public void clipSave(){
  gSave();
}",0.4881889763779528
68835,"/** 
 * Tests if two objects overlap in Z diretion.
 */
public boolean testZOverlap(Object3D near){
  return !((this.getZMin() > near.getZMax()) || (near.getZMin() > this.getZMax()));
}","/** 
 * Tests if two objects overlap in Z direction.
 */
public boolean testZOverlap(Object3D near){
  return !((this.getZMin() >= near.getZMax()) || (near.getZMin() >= this.getZMax()));
}",0.9919571045576407
68836,"/** 
 * Tests if two objects overlap in X diretion.
 */
protected boolean testXOverlap(Object3D near){
  return !(this.getXMin() > near.getXMax() || near.getXMin() > this.getXMax());
}","/** 
 * Tests if two objects overlap in X direction.
 */
protected boolean testXOverlap(Object3D near){
  return !(this.getXMin() >= near.getXMax() || near.getXMin() >= this.getXMax());
}",0.9919137466307276
68837,"/** 
 * Tests if two objects overlap in Y diretion.
 */
protected boolean testYOverlap(Object3D near){
  return !(this.getYMin() > near.getYMax() || near.getYMin() > this.getYMax());
}","/** 
 * Tests if two objects overlap in Y direction.
 */
protected boolean testYOverlap(Object3D near){
  return !(this.getYMin() >= near.getYMax() || near.getYMin() >= this.getYMax());
}",0.9919137466307276
68838,"public void createControl(Composite parent){
  getDataSheet().setChartModel(getChartModel());
  getDataSheet().addListener(this);
  if (topControl == null || topControl.isDisposed()) {
    topControl=new Composite(parent,SWT.NONE);
    GridLayout gridLayout=new GridLayout(3,false);
    gridLayout.marginWidth=0;
    gridLayout.marginHeight=0;
    topControl.setLayout(gridLayout);
    topControl.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL));
    dynamicArea=createDataComponentsUI();
    getCustomizeUI().init();
    foSashForm=new SashForm(topControl,SWT.VERTICAL);
{
      GridLayout layout=new GridLayout();
      foSashForm.setLayout(layout);
      GridData gridData=new GridData(GridData.FILL_BOTH);
      foSashForm.setLayoutData(gridData);
    }
    foSashForm.addListener(SWT.Resize,this);
    placeComponents();
    previewPainter=createPreviewPainter();
  }
 else {
    customizeUI();
  }
  resize();
  if (getChartModel() instanceof ChartWithAxes) {
    checkDataTypeForChartWithAxes();
  }
  doPreview();
  DataDefinitionTextManager.getInstance().refreshAll();
  ChartUIUtil.checkGroupType((ChartWizardContext)getContext(),getChartModel());
  ChartUIUtil.checkAggregateType((ChartWizardContext)getContext());
  bindHelp();
}","public void createControl(Composite parent){
  getDataSheet().setChartModel(getChartModel());
  getDataSheet().addListener(this);
  if (topControl == null || topControl.isDisposed()) {
    topControl=new Composite(parent,SWT.NONE);
    GridLayout gridLayout=new GridLayout(3,false);
    gridLayout.marginWidth=0;
    gridLayout.marginHeight=0;
    topControl.setLayout(gridLayout);
    topControl.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL));
    dynamicArea=createDataComponentsUI();
    getCustomizeUI().init();
    foSashForm=new SashForm(topControl,SWT.VERTICAL);
{
      GridLayout layout=new GridLayout();
      foSashForm.setLayout(layout);
      GridData gridData=new GridData(GridData.FILL_BOTH);
      gridData.widthHint=800;
      foSashForm.setLayoutData(gridData);
    }
    foSashForm.addListener(SWT.Resize,this);
    placeComponents();
    previewPainter=createPreviewPainter();
  }
 else {
    customizeUI();
  }
  resize();
  if (getChartModel() instanceof ChartWithAxes) {
    checkDataTypeForChartWithAxes();
  }
  doPreview();
  DataDefinitionTextManager.getInstance().refreshAll();
  ChartUIUtil.checkGroupType((ChartWizardContext)getContext(),getChartModel());
  ChartUIUtil.checkAggregateType((ChartWizardContext)getContext());
  bindHelp();
}",0.9883359253499222
68839,"private void createDataArea(){
  fDataArea=new ScrolledComposite(foSashForm,SWT.VERTICAL);
{
    GridLayout gl=new GridLayout();
    fDataArea.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    fDataArea.setLayoutData(gd);
    fDataArea.setExpandHorizontal(true);
    fDataArea.setExpandVertical(true);
  }
  Composite dataComposite=new Composite(fDataArea,SWT.NONE);
{
    GridLayout gl=new GridLayout(3,false);
    dataComposite.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    dataComposite.setLayoutData(gd);
  }
  fDataArea.setContent(dataComposite);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.widthHint=fLeftSize.x;
  new Label(dataComposite,SWT.NONE).setLayoutData(gd);
  getDataSheet().createDataSelector(dataComposite);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.widthHint=fRightSize.x;
  new Label(dataComposite,SWT.NONE).setLayoutData(gd);
  new Label(dataComposite,SWT.NONE);
  getDataSheet().createDataDragSource(dataComposite);
  getDataSheet().createActionButtons(dataComposite);
  new Label(dataComposite,SWT.NONE);
  Point size=dataComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  fDataArea.setMinSize(size);
}","private void createDataArea(){
  fDataArea=new ScrolledComposite(foSashForm,SWT.VERTICAL);
{
    GridLayout gl=new GridLayout();
    fDataArea.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    fDataArea.setLayoutData(gd);
    fDataArea.setExpandHorizontal(true);
    fDataArea.setExpandVertical(true);
  }
  Composite dataComposite=new Composite(fDataArea,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginLeft=fLeftSize.x;
    dataComposite.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    dataComposite.setLayoutData(gd);
  }
  fDataArea.setContent(dataComposite);
  getDataSheet().createDataSelector(dataComposite);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.widthHint=fRightSize.x;
  new Label(dataComposite,SWT.NONE).setLayoutData(gd);
  getDataSheet().createDataDragSource(dataComposite);
  getDataSheet().createActionButtons(dataComposite);
  new Label(dataComposite,SWT.NONE);
}",0.7417709782104775
68840,"/** 
 * add several common use page for Birt data set editor
 * @param ds
 */
protected void addCommonPages(DataSetHandle ds){
  if (ds instanceof ScriptDataSetHandle) {
    addOutputColumnsPage();
    addParametersPage();
    addFiltersPage();
    addDataSetSettingPage(ds);
    addResultSetPreviewPage();
  }
 else   if (ds instanceof OdaDataSetHandle) {
    addOutputColumnsPage();
    addComputedColumnsPage();
    if (includeInputParameterPage)     addParametersPage();
    addDataSetFilterPage();
    addPropertyBindingPage();
    addDataSetSettingPage(ds);
    if (includeOutputParameterPage)     addOutputParameterPreviewPage();
    addResultSetPreviewPage();
  }
 else   if (ds instanceof JointDataSetHandle) {
    addJointDataSetPage();
    addOutputColumnsPage();
    addComputedColumnsPage();
    addParametersPage();
    addFiltersPage();
    addResultSetPreviewPage();
  }
 else {
    IPropertyPage[] pages=ExtenalUIUtil.getCommonPages(ds);
    if (pages != null && pages.length > 0) {
      for (int i=0; i < pages.length; i++) {
        addPageTo(""String_Node_Str"",pages[i].getClass().getName(),pages[i].getName(),null,pages[i]);
      }
      addOutputColumnsPage();
      addComputedColumnsPage();
      addParametersPage();
      addFiltersPage();
      addResultSetPreviewPage();
    }
  }
}","/** 
 * add several common use page for Birt data set editor
 * @param ds
 */
protected void addCommonPages(DataSetHandle ds){
  if (ds instanceof ScriptDataSetHandle) {
    addScriptOutputColumnDefnPage();
    addParametersPage();
    addFiltersPage();
    addDataSetSettingPage(ds);
    addResultSetPreviewPage();
  }
 else   if (ds instanceof OdaDataSetHandle) {
    addOutputColumnsPage();
    addComputedColumnsPage();
    if (includeInputParameterPage)     addParametersPage();
    addDataSetFilterPage();
    addPropertyBindingPage();
    addDataSetSettingPage(ds);
    if (includeOutputParameterPage)     addOutputParameterPreviewPage();
    addResultSetPreviewPage();
  }
 else   if (ds instanceof JointDataSetHandle) {
    addJointDataSetPage();
    addOutputColumnsPage();
    addComputedColumnsPage();
    addParametersPage();
    addFiltersPage();
    addResultSetPreviewPage();
  }
 else {
    IPropertyPage[] pages=ExtenalUIUtil.getCommonPages(ds);
    if (pages != null && pages.length > 0) {
      for (int i=0; i < pages.length; i++) {
        addPageTo(""String_Node_Str"",pages[i].getClass().getName(),pages[i].getName(),null,pages[i]);
      }
      addOutputColumnsPage();
      addComputedColumnsPage();
      addParametersPage();
      addFiltersPage();
      addResultSetPreviewPage();
    }
  }
}",0.9958190801976436
68841,"protected void addOutputColumnsPage(){
  addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedOutputColumnDefnPage());
}","protected void addOutputColumnsPage(){
  addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedDataSetOutputColumnsPage());
}",0.9647058823529412
68842,"protected void verticalAlign(){
  Iterator iter=getChildren();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    CSSValue vAlign=child.getVerticalAlign();
    if (IStyle.TOP_VALUE.equals(vAlign)) {
      continue;
    }
    int spacing=getContentHeight() - child.getAllocatedHeight();
    if (spacing < 0) {
      spacing=0;
    }
    if (vAlign == null || IStyle.BASELINE_VALUE.equals(vAlign)) {
      int lineHeight=parent.getLineHeight();
      if (lineHeight > 0) {
        child.setPosition(child.getX(),getBaseLine() - child.getBaseLine() + spacing / 2);
      }
 else {
        child.setPosition(child.getX(),getBaseLine() - child.getBaseLine());
      }
    }
 else     if (IStyle.BOTTOM_VALUE.equals(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing);
    }
 else     if (IStyle.MIDDLE_VALUE.equals(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing / 2);
    }
  }
}","protected void verticalAlign(){
  Iterator iter=getChildren();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    CSSValue vAlign=child.getVerticalAlign();
    if (IStyle.TOP_VALUE.equals(vAlign)) {
      continue;
    }
    int spacing=getContentHeight() - child.getAllocatedHeight();
    if (spacing < 0) {
      spacing=0;
    }
    if ((vAlign == null && !isImageContainer(child)) || IStyle.BASELINE_VALUE.equals(vAlign)) {
      int lineHeight=parent.getLineHeight();
      if (lineHeight > 0) {
        child.setPosition(child.getX(),getBaseLine() - child.getBaseLine() + spacing / 2);
      }
 else {
        child.setPosition(child.getX(),getBaseLine() - child.getBaseLine());
      }
    }
 else     if (IStyle.BOTTOM_VALUE.equals(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing);
    }
 else     if (IStyle.MIDDLE_VALUE.equals(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing / 2);
    }
  }
}",0.9844236760124612
68843,"/** 
 * Create a Report Engine using a configuration. The user must set the BIRT_HOME in the EngineConfig.
 * @param config an engine configuration object used to configure the engine
 */
public ReportEngine(EngineConfig config){
  if (config == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.config=config;
  beans=new HashMap<String,Object>();
  mergeConfigToAppContext();
  intializeLogger();
  logger.log(Level.FINE,""String_Node_Str"",config);
  this.helper=new ReportEngineHelper(this);
  openedDocuments=new LinkedObjectManager<ReportDocumentReader>();
}","/** 
 * Create a Report Engine using a configuration. The user must set the BIRT_HOME in the EngineConfig.
 * @param config an engine configuration object used to configure the engine
 */
public ReportEngine(EngineConfig config){
  if (config == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.config=config;
  beans=new HashMap<String,Object>();
  mergeConfigToAppContext();
  intializeLogger();
  logger.log(Level.FINE,""String_Node_Str"",config);
  this.helper=new ReportEngineHelper(this);
  openedDocuments=new LinkedObjectManager<ReportDocumentReader>();
  IStatusHandler handler=config.getStatusHandler();
  if (handler != null) {
    handler.initialize();
  }
}",0.9163408913213448
68844,"private void initializeScriptContext(){
  scriptContext=new ScriptContext();
  if (engine != null) {
    EngineConfig config=engine.getConfig();
    IStatusHandler statusHandler=config.getStatusHandler();
    if (statusHandler != null) {
      scriptContext.setAttribute(""String_Node_Str"",statusHandler);
    }
  }
  scriptContext.setLocale(ulocale.toLocale());
  scriptContext.setAttribute(""String_Node_Str"",new ReportObject());
  scriptContext.setAttribute(""String_Node_Str"",params);
  scriptContext.setAttribute(""String_Node_Str"",configs);
  scriptContext.setAttribute(""String_Node_Str"",new Long(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",new Long(totalPage));
  scriptContext.setAttribute(""String_Node_Str"",this);
  scriptContext.setAttribute(""String_Node_Str"",pageVariables);
  if (runnable != null) {
    registerDesign(runnable);
  }
  if (reportContext != null) {
    scriptContext.setAttribute(""String_Node_Str"",reportContext);
  }
  scriptContext.setAttribute(""String_Node_Str"",new Long(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",new Long(totalPage));
  if (task != null) {
    IStatusHandler handler=task.getStatusHandler();
    if (handler == null) {
      handler=engine.getConfig().getStatusHandler();
    }
    if (handler != null) {
      handler.initialize();
      scriptContext.setAttribute(""String_Node_Str"",handler);
    }
  }
  if (transientBeans != null) {
    Iterator entries=transientBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      scriptContext.setAttribute((String)entry.getKey(),entry.getValue());
    }
  }
  if (persistentBeans != null) {
    Iterator entries=persistentBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      registerInRoot((String)entry.getKey(),entry.getValue());
    }
  }
  scriptContext.setApplicationClassLoader(getApplicationClassLoader());
}","private void initializeScriptContext(){
  scriptContext=new ScriptContext();
  if (engine != null) {
    EngineConfig config=engine.getConfig();
    IStatusHandler statusHandler=config.getStatusHandler();
    if (statusHandler != null) {
      scriptContext.setAttribute(""String_Node_Str"",statusHandler);
    }
  }
  scriptContext.setLocale(ulocale.toLocale());
  scriptContext.setAttribute(""String_Node_Str"",new ReportObject());
  scriptContext.setAttribute(""String_Node_Str"",params);
  scriptContext.setAttribute(""String_Node_Str"",configs);
  scriptContext.setAttribute(""String_Node_Str"",new Long(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",new Long(totalPage));
  scriptContext.setAttribute(""String_Node_Str"",this);
  scriptContext.setAttribute(""String_Node_Str"",pageVariables);
  if (runnable != null) {
    registerDesign(runnable);
  }
  if (reportContext != null) {
    scriptContext.setAttribute(""String_Node_Str"",reportContext);
  }
  scriptContext.setAttribute(""String_Node_Str"",new Long(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",new Long(totalPage));
  if (task != null) {
    IStatusHandler handler=task.getStatusHandler();
    if (handler != null) {
      handler.initialize();
    }
    if (handler == null) {
      handler=engine.getConfig().getStatusHandler();
    }
    if (handler != null) {
      scriptContext.setAttribute(""String_Node_Str"",handler);
    }
  }
  if (transientBeans != null) {
    Iterator entries=transientBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      scriptContext.setAttribute((String)entry.getKey(),entry.getValue());
    }
  }
  if (persistentBeans != null) {
    Iterator entries=persistentBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      registerInRoot((String)entry.getKey(),entry.getValue());
    }
  }
  scriptContext.setApplicationClassLoader(getApplicationClassLoader());
}",0.977496839443742
68845,"protected void justify(){
  int spacing=width - currentIP;
  int blankNumber=getBlankNumber(this);
  if (blankNumber > 0) {
    int wordSpacing=spacing / blankNumber;
    adjustWordSpacing(wordSpacing,this);
  }
 else {
    int letterNumber=getLetterNumber(this);
    if (letterNumber > 0) {
      int letterSpacing=spacing / letterNumber;
      adjustLetterSpacing(letterSpacing,this);
    }
  }
}","protected void justify(){
  int spacing=width - currentIP;
  int whiteSpaceNumber=getWhiteSpaceNumber(this);
  if (whiteSpaceNumber > 0) {
    int wordSpacing=spacing / whiteSpaceNumber;
    adjustWordSpacing(wordSpacing,this);
  }
 else {
    int letterNumber=getLetterNumber(this);
    if (letterNumber > 0) {
      int letterSpacing=spacing / letterNumber;
      adjustLetterSpacing(letterSpacing,this);
    }
  }
}",0.9264705882352942
68846,"private int adjustWordSpacing(int wordSpacing,ContainerArea area){
  if (wordSpacing == 0)   return 0;
  Iterator iter=area.getChildren();
  int delta=0;
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    if (child instanceof TextArea) {
      TextArea textArea=(TextArea)child;
      String text=textArea.getText();
      int blankNumber=text.split(""String_Node_Str"").length - 1;
      if (blankNumber > 0) {
        TextStyle style=new TextStyle(textArea.getStyle());
        int original=style.getWordSpacing();
        style.setWordSpacing(original + wordSpacing);
        textArea.setStyle(style);
        int spacing=wordSpacing * blankNumber;
        child.setWidth(child.getWidth() + spacing);
        child.setPosition(child.getX() + delta,child.getY());
        delta+=spacing;
      }
    }
 else     if (child instanceof ContainerArea) {
      child.setPosition(child.getX() + delta,child.getY());
      int spacing=adjustWordSpacing(wordSpacing,(ContainerArea)child);
      child.setWidth(child.getWidth() + spacing);
      delta+=spacing;
    }
 else {
      child.setPosition(child.getX() + delta,child.getY());
    }
  }
  return delta;
}","private int adjustWordSpacing(int wordSpacing,ContainerArea area){
  if (wordSpacing == 0)   return 0;
  Iterator iter=area.getChildren();
  int delta=0;
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    if (child instanceof TextArea) {
      TextArea textArea=(TextArea)child;
      int whiteSpaceNumber=textArea.getWhiteSpaceNumber();
      if (whiteSpaceNumber > 0) {
        TextStyle style=new TextStyle(textArea.getStyle());
        int original=style.getWordSpacing();
        style.setWordSpacing(original + wordSpacing);
        textArea.setStyle(style);
        int spacing=wordSpacing * whiteSpaceNumber;
        child.setWidth(child.getWidth() + spacing);
        child.setPosition(child.getX() + delta,child.getY());
        delta+=spacing;
      }
    }
 else     if (child instanceof ContainerArea) {
      child.setPosition(child.getX() + delta,child.getY());
      int spacing=adjustWordSpacing(wordSpacing,(ContainerArea)child);
      child.setWidth(child.getWidth() + spacing);
      delta+=spacing;
    }
 else {
      child.setPosition(child.getX() + delta,child.getY());
    }
  }
  return delta;
}",0.7237687366167024
68847,"/** 
 * Gets the text in visual order.
 * @param text the original text.
 * @return the text in visual order.
 */
public String getText(){
  if ((runLevel & 1) == 0) {
    return calculateText();
  }
 else {
    return flip(calculateText());
  }
}","/** 
 * Gets the text in visual order.
 * @param text the original text.
 * @return the text in visual order.
 */
public String getText(){
  if (cachedText == null) {
    if ((runLevel & 1) == 0) {
      cachedText=calculateText();
    }
 else {
      cachedText=flip(calculateText());
    }
  }
  return cachedText;
}",0.8247787610619469
68848,"protected String format(Object value,IStyle style){
  if (value instanceof Object[]) {
    Object[] values=(Object[])value;
    if (values.length > 0) {
      value=values[0];
    }
 else {
      value=null;
    }
  }
  if (value == null) {
    return null;
  }
  DataFormatValue dataFormat=style.getDataFormat();
  String pattern=null;
  String locale=null;
  if (value instanceof Number) {
    if (dataFormat != null) {
      pattern=dataFormat.getNumberPattern();
      locale=dataFormat.getNumberLocale();
    }
    NumberFormatter fmt=context.getNumberFormatter(pattern,locale);
    return fmt.format((Number)value);
  }
  if (value instanceof String) {
    if (dataFormat != null) {
      pattern=dataFormat.getStringPattern();
      locale=dataFormat.getStringLocale();
    }
    StringFormatter fmt=context.getStringFormatter(pattern,locale);
    return fmt.format((String)value);
  }
  if (value instanceof java.util.Date) {
    if (dataFormat != null) {
      if (value instanceof java.sql.Date) {
        pattern=dataFormat.getDatePattern();
        locale=dataFormat.getDateLocale();
      }
 else       if (value instanceof java.sql.Time) {
        pattern=dataFormat.getTimePattern();
        locale=dataFormat.getTimeLocale();
      }
      if (pattern == null && locale == null) {
        pattern=dataFormat.getDateTimePattern();
        locale=dataFormat.getDateTimeLocale();
      }
    }
    DateFormatter fmt=context.getDateFormatter(pattern,locale);
    return fmt.format((java.util.Date)value);
  }
  if (value instanceof byte[]) {
    byte[] bytes=(byte[])value;
    int length=(bytes.length <= 8 ? bytes.length : 8);
    StringBuffer buffer=new StringBuffer();
    int index=0;
    while (index < length) {
      byte byteValue=bytes[index];
      int lowValue=byteValue & 0x0F;
      int highValue=(byteValue >> 4) & 0x0F;
      buffer.append(HEX[highValue]).append(HEX[lowValue]).append(' ');
      index++;
    }
    if (length > 0) {
      if (length != bytes.length) {
        buffer.append(""String_Node_Str"");
      }
 else {
        buffer.setLength(buffer.length() - 1);
      }
    }
    return buffer.toString();
  }
  return value.toString();
}","protected String format(Object value,IStyle style){
  if (value instanceof Object[]) {
    Object[] values=(Object[])value;
    StringBuilder sb=new StringBuilder();
    sb.append('[');
    for (    Object v : values) {
      sb.append(format(v,style));
      sb.append(""String_Node_Str"");
    }
    if (sb.length() > 1) {
      sb.setLength(sb.length() - 2);
    }
    sb.append(']');
    return sb.toString();
  }
  if (value == null) {
    return null;
  }
  DataFormatValue dataFormat=style.getDataFormat();
  String pattern=null;
  String locale=null;
  if (value instanceof Number) {
    if (dataFormat != null) {
      pattern=dataFormat.getNumberPattern();
      locale=dataFormat.getNumberLocale();
    }
    NumberFormatter fmt=context.getNumberFormatter(pattern,locale);
    return fmt.format((Number)value);
  }
  if (value instanceof String) {
    if (dataFormat != null) {
      pattern=dataFormat.getStringPattern();
      locale=dataFormat.getStringLocale();
    }
    StringFormatter fmt=context.getStringFormatter(pattern,locale);
    return fmt.format((String)value);
  }
  if (value instanceof java.util.Date) {
    if (dataFormat != null) {
      if (value instanceof java.sql.Date) {
        pattern=dataFormat.getDatePattern();
        locale=dataFormat.getDateLocale();
      }
 else       if (value instanceof java.sql.Time) {
        pattern=dataFormat.getTimePattern();
        locale=dataFormat.getTimeLocale();
      }
      if (pattern == null && locale == null) {
        pattern=dataFormat.getDateTimePattern();
        locale=dataFormat.getDateTimeLocale();
      }
    }
    DateFormatter fmt=context.getDateFormatter(pattern,locale);
    return fmt.format((java.util.Date)value);
  }
  if (value instanceof byte[]) {
    byte[] bytes=(byte[])value;
    int length=(bytes.length <= 8 ? bytes.length : 8);
    StringBuffer buffer=new StringBuffer();
    int index=0;
    while (index < length) {
      byte byteValue=bytes[index];
      int lowValue=byteValue & 0x0F;
      int highValue=(byteValue >> 4) & 0x0F;
      buffer.append(HEX[highValue]).append(HEX[lowValue]).append(' ');
      index++;
    }
    if (length > 0) {
      if (length != bytes.length) {
        buffer.append(""String_Node_Str"");
      }
 else {
        buffer.setLength(buffer.length() - 1);
      }
    }
    return buffer.toString();
  }
  return value.toString();
}",0.9288849868305532
68849,"public void startListBand(IListBandContent listBand){
  engine.addCell(0,1,0,listBand.getComputedStyle());
}","public void startListBand(IListBandContent listBand){
  engine.addCell(0,1,1,listBand.getComputedStyle());
}",0.9907407407407408
68850,"protected boolean doAction() throws Exception {
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  DataSetHandle dsHandle=(DataSetHandle)getSelection();
  if (!(dsHandle instanceof JointDataSetHandle) && !(dsHandle instanceof DerivedDataSetHandle) && dsHandle.getDataSource() == null) {
    try {
      List dataSourceList=DEUtil.getDataSources();
      String[] names=new String[dataSourceList.size()];
      for (int i=0; i < names.length; i++) {
        names[i]=((DataSourceHandle)dataSourceList.get(i)).getName();
      }
      DataSourceSelectionDialog dataSorucedialog=new DataSourceSelectionDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""),names);
      if (dataSorucedialog.open() == Dialog.CANCEL)       return false;
      dsHandle.setDataSource(dataSorucedialog.getResult().toString());
    }
 catch (    SemanticException e) {
    }
  }
  DataSetEditor dialog=new DataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dsHandle,false);
  return (dialog.open() == IDialogConstants.OK_ID);
}","protected boolean doAction() throws Exception {
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  DataSetHandle dsHandle=(DataSetHandle)getSelection();
  if (!(dsHandle instanceof JointDataSetHandle) && !(dsHandle instanceof DerivedDataSetHandle) && dsHandle.getDataSource() == null) {
    try {
      List dataSourceList=DEUtil.getDataSources();
      String[] names=new String[dataSourceList.size()];
      for (int i=0; i < names.length; i++) {
        names[i]=((DataSourceHandle)dataSourceList.get(i)).getName();
      }
      DataSourceSelectionDialog dataSorucedialog=new DataSourceSelectionDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""),names);
      if (dataSorucedialog.open() == Dialog.CANCEL)       return false;
      dsHandle.setDataSource(dataSorucedialog.getResult().toString());
    }
 catch (    SemanticException e) {
    }
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dsHandle,false);
  return (dialog.open() == IDialogConstants.OK_ID);
}",0.9963735267452404
68851,"private boolean editDataSet(List existingDataSets,List newDataSets){
  if (existingDataSets == null || newDataSets == null) {
    return false;
  }
  if (newDataSets.size() <= existingDataSets.size()) {
    return false;
  }
  dataSetHandle=findNewDataSet(existingDataSets,newDataSets);
  if (dataSetHandle == null)   return false;
  if (dataSetHandle instanceof ScriptDataSetHandle) {
    return false;
  }
  DataSetEditor dialog=new DataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dataSetHandle,true);
  return (dialog.open() == Window.OK);
}","private boolean editDataSet(List existingDataSets,List newDataSets){
  if (existingDataSets == null || newDataSets == null) {
    return false;
  }
  if (newDataSets.size() <= existingDataSets.size()) {
    return false;
  }
  dataSetHandle=findNewDataSet(existingDataSets,newDataSets);
  if (dataSetHandle == null)   return false;
  if (dataSetHandle instanceof ScriptDataSetHandle) {
    return false;
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dataSetHandle,true);
  return (dialog.open() == Window.OK);
}",0.9929824561403509
68852,"private boolean editDataSet(List existingDataSets,List newDataSets){
  if (existingDataSets == null || newDataSets == null) {
    return false;
  }
  if (newDataSets.size() <= existingDataSets.size()) {
    return false;
  }
  dataSetHandle=findNewDataSet(existingDataSets,newDataSets);
  if (dataSetHandle == null)   return false;
  if (dataSetHandle instanceof ScriptDataSetHandle) {
    return false;
  }
  DataSetEditor dialog=new DataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dataSetHandle,false);
  return (dialog.open() == Window.OK);
}","private boolean editDataSet(List existingDataSets,List newDataSets){
  if (existingDataSets == null || newDataSets == null) {
    return false;
  }
  if (newDataSets.size() <= existingDataSets.size()) {
    return false;
  }
  dataSetHandle=findNewDataSet(existingDataSets,newDataSets);
  if (dataSetHandle == null)   return false;
  if (dataSetHandle instanceof ScriptDataSetHandle) {
    return false;
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dataSetHandle,false);
  return (dialog.open() == Window.OK);
}",0.9929947460595446
68853,"/** 
 * @param ds
 */
private void addDataSetSettingPage(DataSetHandle ds){
  IPropertyPage settingPage=new DataSetSettingsPage();
  addPageTo(""String_Node_Str"",DATASET_SETTINGS_PAGE,Messages.getString(""String_Node_Str""),null,settingPage);
}","/** 
 * @param ds
 */
protected void addDataSetSettingPage(DataSetHandle ds){
  IPropertyPage settingPage=new DataSetSettingsPage();
  addPageTo(""String_Node_Str"",DATASET_SETTINGS_PAGE,Messages.getString(""String_Node_Str""),null,settingPage);
}",0.975206611570248
68854,"/** 
 * The constructor.
 * @param parentShell
 */
public DataSetEditor(Shell parentShell,DataSetHandle ds,boolean needToFocusOnOutput){
  super(parentShell,ds);
  ExtenalUIUtil.validateDataSetHandle(ds);
  this.needToFocusOnOutput=needToFocusOnOutput;
  String dataSourceType, dataSetType;
  if (ds instanceof OdaDataSetHandle) {
    OdaDataSourceHandle dataSource=(OdaDataSourceHandle)((OdaDataSetHandle)ds).getDataSource();
    dataSourceType=dataSource.getExtensionID();
    dataSetType=((OdaDataSetHandle)ds).getExtensionID();
  }
 else   if (ds instanceof ScriptDataSetHandle) {
    dataSourceType=DataUIConstants.DATA_SOURCE_SCRIPT;
    dataSetType=DataUIConstants.DATA_SET_SCRIPT;
  }
 else   if (ds instanceof JointDataSetHandle) {
    dataSourceType=""String_Node_Str"";
    dataSetType=""String_Node_Str"";
  }
 else {
    dataSourceType=ExtenalUIUtil.getDataSourceType(ds);
    dataSetType=ExtenalUIUtil.getDataSetType(ds);
  }
  boolean containsDataSource=ExtenalUIUtil.containsDataSource(ds);
  if (containsDataSource) {
    addPageTo(""String_Node_Str"",DATA_SOURCE_SELECTION_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetDataSourceSelectionPage());
    if (DesignSessionUtil.hasValidOdaDesignUIExtension(dataSourceType)) {
      addCustomPageODAV3((OdaDataSetHandle)ds,dataSourceType,dataSetType);
    }
 else     addBirtPage(dataSourceType,dataSetType);
  }
  addCommonPage(ds);
  itemModelManager.start(ds);
}","/** 
 * The constructor.
 * @param parentShell
 */
public DataSetEditor(Shell parentShell,DataSetHandle ds,boolean needToFocusOnOutput){
  super(parentShell,ds);
  ExtenalUIUtil.validateDataSetHandle(ds);
  this.needToFocusOnOutput=needToFocusOnOutput;
  String dataSourceType, dataSetType;
  if (ds instanceof OdaDataSetHandle) {
    OdaDataSourceHandle dataSource=(OdaDataSourceHandle)((OdaDataSetHandle)ds).getDataSource();
    dataSourceType=dataSource.getExtensionID();
    dataSetType=((OdaDataSetHandle)ds).getExtensionID();
  }
 else   if (ds instanceof ScriptDataSetHandle) {
    dataSourceType=DataUIConstants.DATA_SOURCE_SCRIPT;
    dataSetType=DataUIConstants.DATA_SET_SCRIPT;
  }
 else   if (ds instanceof JointDataSetHandle) {
    dataSourceType=""String_Node_Str"";
    dataSetType=""String_Node_Str"";
  }
 else {
    dataSourceType=ExtenalUIUtil.getDataSourceType(ds);
    dataSetType=ExtenalUIUtil.getDataSetType(ds);
  }
  boolean containsDataSource=ExtenalUIUtil.containsDataSource(ds);
  if (containsDataSource) {
    addPageTo(""String_Node_Str"",DATA_SOURCE_SELECTION_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetDataSourceSelectionPage());
    if (DesignSessionUtil.hasValidOdaDesignUIExtension(dataSourceType)) {
      addCustomPageODAV3((OdaDataSetHandle)ds,dataSourceType,dataSetType);
    }
 else     addBirtPage(dataSourceType,dataSetType);
  }
  addCommonPages(ds);
  setPageFocus();
  itemModelManager.start(ds);
}",0.9913404918600623
68855,"protected boolean performEdit(ReportElementHandle handle){
  DataSetHandle dsHandle=(DataSetHandle)handle;
  if (!(dsHandle instanceof JointDataSetHandle || dsHandle instanceof DerivedDataSetHandle) && dsHandle.getDataSource() == null) {
    try {
      List dataSourceList=DEUtil.getDataSources();
      String[] names=new String[dataSourceList.size()];
      for (int i=0; i < names.length; i++) {
        names[i]=((DataSourceHandle)dataSourceList.get(i)).getName();
      }
      DataSourceSelectionDialog dataSorucedialog=new DataSourceSelectionDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""),names);
      if (dataSorucedialog.open() == Dialog.CANCEL)       return false;
      dsHandle.setDataSource(dataSorucedialog.getResult().toString());
    }
 catch (    SemanticException e) {
    }
  }
  DataSetEditor dialog=new DataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),(DataSetHandle)handle,false);
  return dialog.open() == Dialog.OK;
}","protected boolean performEdit(ReportElementHandle handle){
  DataSetHandle dsHandle=(DataSetHandle)handle;
  if (!(dsHandle instanceof JointDataSetHandle || dsHandle instanceof DerivedDataSetHandle) && dsHandle.getDataSource() == null) {
    try {
      List dataSourceList=DEUtil.getDataSources();
      String[] names=new String[dataSourceList.size()];
      for (int i=0; i < names.length; i++) {
        names[i]=((DataSourceHandle)dataSourceList.get(i)).getName();
      }
      DataSourceSelectionDialog dataSorucedialog=new DataSourceSelectionDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""),names);
      if (dataSorucedialog.open() == Dialog.CANCEL)       return false;
      dsHandle.setDataSource(dataSorucedialog.getResult().toString());
    }
 catch (    SemanticException e) {
    }
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),(DataSetHandle)handle,false);
  return dialog.open() == Dialog.OK;
}",0.9960861056751468
68856,"private JavascriptContext createJsContext(ScriptContext context){
  ScriptContext parent=context.getParent();
  Scriptable parentJsScope=global;
  if (parent != null) {
    JavascriptContext parentJsContext=(JavascriptContext)parent.getScriptContext(JavascriptEngineFactory.SCRIPT_JAVASCRIPT);
    if (parentJsContext == null) {
      parentJsContext=createJsContext(parent);
    }
    parentJsScope=parentJsContext.getScope();
  }
  Object scope=context.getScopeObject();
  Scriptable jsScope=createJsScope(parentJsScope,scope);
  JavascriptContext jsContext=new JavascriptContext(context,jsScope);
  if (parent == null) {
    this.context.evaluateString(jsScope,""String_Node_Str"",""String_Node_Str"",1,null);
  }
  Map<String,Object> attrs=context.getAttributes();
  for (  Entry<String,Object> entry : attrs.entrySet()) {
    jsContext.setAttribute(entry.getKey(),entry.getValue());
  }
  context.setScriptContext(JavascriptEngineFactory.SCRIPT_JAVASCRIPT,jsContext);
  return jsContext;
}","private JavascriptContext createJsContext(ScriptContext context){
  ScriptContext parent=context.getParent();
  Scriptable parentJsScope=global;
  if (parent != null) {
    JavascriptContext parentJsContext=(JavascriptContext)parent.getScriptContext(JavascriptEngineFactory.SCRIPT_JAVASCRIPT);
    if (parentJsContext == null) {
      parentJsContext=createJsContext(parent);
    }
    parentJsScope=parentJsContext.getScope();
  }
  Object scope=context.getScopeObject();
  Scriptable jsScope=createJsScope(parentJsScope,scope);
  JavascriptContext jsContext=new JavascriptContext(context,jsScope);
  if (parent == null) {
    cachedScript.exec(this.context,jsScope);
  }
  Map<String,Object> attrs=context.getAttributes();
  for (  Entry<String,Object> entry : attrs.entrySet()) {
    jsContext.setAttribute(entry.getKey(),entry.getValue());
  }
  context.setScriptContext(JavascriptEngineFactory.SCRIPT_JAVASCRIPT,jsContext);
  return jsContext;
}",0.9422680412371134
68857,"protected boolean checkPageBreak() throws BirtException {
  boolean ret=false;
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() > context.getMaxBP() + 3000) {
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
      ret=true;
    }
  }
  return ret;
}","protected boolean checkPageBreak() throws BirtException {
  boolean ret=false;
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() - 3000 > context.getMaxBP()) {
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
      ret=true;
    }
  }
  return ret;
}",0.938375350140056
68858,"public Object getObject(String arg0) throws OLAPException {
  if (this.resultSet == null || this.resultSet.getMeasureResult() == null)   return null;
  try {
    int id=this.view.getAggregationRegisterTable().getAggregationResultID(arg0);
    int index=this.view.getAggregationRegisterTable().getAggregationIndex(arg0);
    if (synchronizedWithEdge(id,arg0,getCurrentValueOnEdge(arg0)))     return this.resultSet.getMeasureResult()[id].getQueryResultSet().getAggregationValue(index);
 else {
      return null;
    }
  }
 catch (  IOException e) {
    throw new OLAPException(e.getLocalizedMessage());
  }
catch (  DataException e) {
    throw new OLAPException(e.getLocalizedMessage());
  }
}","public Object getObject(String arg0) throws OLAPException {
  if (this.resultSet == null || this.resultSet.getMeasureResult() == null)   return null;
  try {
    int id=this.view.getAggregationRegisterTable().getAggregationResultID(arg0);
    int index=this.view.getAggregationRegisterTable().getAggregationIndex(id,arg0);
    if (synchronizedWithEdge(id,arg0,getCurrentValueOnEdge(arg0)))     return this.resultSet.getMeasureResult()[id].getQueryResultSet().getAggregationValue(index);
 else {
      return null;
    }
  }
 catch (  IOException e) {
    throw new OLAPException(e.getLocalizedMessage());
  }
catch (  DataException e) {
    throw new OLAPException(e.getLocalizedMessage());
  }
}",0.9978401727861772
68859,"private static int compare(Object value1,Object value2){
  if (value1 == value2) {
    return 0;
  }
  if (value1 == null) {
    return -1;
  }
  if (value2 == null) {
    return 1;
  }
  if (value1 instanceof Comparable) {
    return ((Comparable)value1).compareTo(value2);
  }
  return value1.toString().compareTo(value2.toString());
}","static int compare(Object value1,Object value2){
  if (value1 == value2) {
    return 0;
  }
  if (value1 == null) {
    return -1;
  }
  if (value2 == null) {
    return 1;
  }
  if (value1 instanceof Comparable) {
    return ((Comparable)value1).compareTo(value2);
  }
  return value1.toString().compareTo(value2.toString());
}",0.987987987987988
68860,"/** 
 * @param view
 * @param result
 * @param relationMap
 * @param manager
 */
public AggregationAccessor(BirtCubeView view,IResultSet result,Map relationMap){
  this.resultSet=result;
  this.view=view;
  this.relationMap=relationMap;
  if (result == null || result.getMeasureResult() == null)   return;
  this.currentPosition=new int[this.resultSet.getMeasureResult().length];
  for (int i=0; i < this.resultSet.getMeasureResult().length; i++) {
    try {
      if (this.resultSet.getMeasureResult()[i].getQueryResultSet().length() > 0) {
        this.resultSet.getMeasureResult()[i].getQueryResultSet().seek(0);
        currentPosition[i]=0;
      }
 else {
        currentPosition[i]=-1;
      }
    }
 catch (    IOException e) {
    }
  }
}","/** 
 * @param view
 * @param result
 * @param relationMap
 * @param manager
 */
public AggregationAccessor(BirtCubeView view,IResultSet result,Map relationMap){
  this.resultSet=result;
  this.view=view;
  this.relationMap=relationMap;
  if (result == null || result.getMeasureResult() == null)   return;
  this.currentPosition=new int[this.resultSet.getMeasureResult().length];
  for (int i=0; i < this.resultSet.getMeasureResult().length; i++) {
    try {
      if (this.resultSet.getMeasureResult()[i].getQueryResultSet().length() > 0) {
        this.resultSet.getMeasureResult()[i].getQueryResultSet().seek(0);
        currentPosition[i]=0;
      }
 else {
        currentPosition[i]=-1;
      }
    }
 catch (    IOException e) {
    }
  }
  initMeasureNavigator();
}",0.9828947368421052
68861,"/** 
 * @param arg0
 * @return
 * @throws OLAPException 
 */
public boolean edge_relative(int arg0) throws OLAPException {
  if (arg0 == 0)   return true;
  int position=this.edgeTraverse.currentPosition + arg0;
  if (position >= this.edgeDimensRelation.traverseLength) {
    this.edge_afterLast();
    return false;
  }
 else   if (position < 0) {
    this.dimTraverse.beforeFirst();
    this.edgeTraverse.currentPosition=-1;
    return false;
  }
 else {
    for (int i=0; i < Math.abs(arg0); i++) {
      if (arg0 > 0)       this.edge_next();
 else       this.edge_previous();
    }
    return true;
  }
}","/** 
 * @param arg0
 * @return
 * @throws OLAPException 
 */
public boolean edge_relative(int arg0) throws OLAPException {
  if (arg0 == 0)   return true;
  int position=this.edgeTraverse.currentPosition + arg0;
  if (position >= this.edgeDimensRelation.traverseLength) {
    this.edge_afterLast();
    return false;
  }
 else   if (position < 0) {
    this.dimTraverse.beforeFirst();
    this.edgeTraverse.currentPosition=-1;
    return false;
  }
 else {
    this.edgeTraverse.currentPosition=position;
    adjustDimensionPosition(position);
    return true;
  }
}",0.7955706984667802
68862,"/** 
 * add several common use page for Birt data set editor
 * @param ds
 */
private void addCommonPage(DataSetHandle ds){
  if (ds instanceof ScriptDataSetHandle) {
    addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new OutputColumnDefnPage());
    addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
    addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetFiltersPage());
    addDataSetSettingPage(ds);
    addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
  }
 else   if (ds instanceof OdaDataSetHandle) {
    addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedDataSetOutputColumnsPage());
    addPageTo(""String_Node_Str"",COMPUTED_COLUMNS_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedDataSetComputedColumnsPage());
    if (includeInputParameterPage)     addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
    IPropertyPage filterpage=new DataSetFiltersPage();
    try {
      filterpage=(IPropertyPage)Class.forName(""String_Node_Str"").newInstance();
    }
 catch (    Throwable e) {
    }
    addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,filterpage);
    addPageTo(""String_Node_Str"",DATASOURCE_EDITOR_PROPERTY_PAGE,Messages.getString(""String_Node_Str""),null,new PropertyBindingPage());
    addDataSetSettingPage(ds);
    if (includeOutputParameterPage)     addPageTo(""String_Node_Str"",OUTPUT_PARAMETER_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new OutputParameterPreviewPage());
    addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
  }
 else   if (ds instanceof JointDataSetHandle) {
    addPageTo(""String_Node_Str"",JOINT_DATA_SET_PAGE,Messages.getString(""String_Node_Str""),null,new JointDataSetPage(Messages.getString(""String_Node_Str"")));
    addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedDataSetOutputColumnsPage());
    addPageTo(""String_Node_Str"",COMPUTED_COLUMNS_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedDataSetComputedColumnsPage());
    addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
    addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetFiltersPage());
    addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
  }
 else {
    IPropertyPage[] pages=ExtenalUIUtil.getCommonPages(ds);
    if (pages != null && pages.length > 0) {
      for (int i=0; i < pages.length; i++) {
        addPageTo(""String_Node_Str"",pages[i].getClass().getName(),pages[i].getName(),null,pages[i]);
      }
      addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedDataSetOutputColumnsPage());
      addPageTo(""String_Node_Str"",COMPUTED_COLUMNS_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedDataSetComputedColumnsPage());
      addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
      addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetFiltersPage());
      addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
    }
  }
  if (needToFocusOnOutput)   setDefaultNode(OUTPUTCOLUMN_PAGE);
}","/** 
 * add several common use page for Birt data set editor
 * @param ds
 */
private void addCommonPage(DataSetHandle ds){
  if (ds instanceof ScriptDataSetHandle) {
    addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedOutputColumnDefnPage());
    addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
    addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetFiltersPage());
    addDataSetSettingPage(ds);
    addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
  }
 else   if (ds instanceof OdaDataSetHandle) {
    addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedDataSetOutputColumnsPage());
    addPageTo(""String_Node_Str"",COMPUTED_COLUMNS_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedDataSetComputedColumnsPage());
    if (includeInputParameterPage)     addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
    IPropertyPage filterpage=new DataSetFiltersPage();
    try {
      filterpage=(IPropertyPage)Class.forName(""String_Node_Str"").newInstance();
    }
 catch (    Throwable e) {
    }
    addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,filterpage);
    addPageTo(""String_Node_Str"",DATASOURCE_EDITOR_PROPERTY_PAGE,Messages.getString(""String_Node_Str""),null,new PropertyBindingPage());
    addDataSetSettingPage(ds);
    if (includeOutputParameterPage)     addPageTo(""String_Node_Str"",OUTPUT_PARAMETER_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new OutputParameterPreviewPage());
    addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
  }
 else   if (ds instanceof JointDataSetHandle) {
    addPageTo(""String_Node_Str"",JOINT_DATA_SET_PAGE,Messages.getString(""String_Node_Str""),null,new JointDataSetPage(Messages.getString(""String_Node_Str"")));
    addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedDataSetOutputColumnsPage());
    addPageTo(""String_Node_Str"",COMPUTED_COLUMNS_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedDataSetComputedColumnsPage());
    addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
    addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetFiltersPage());
    addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
  }
 else {
    IPropertyPage[] pages=ExtenalUIUtil.getCommonPages(ds);
    if (pages != null && pages.length > 0) {
      for (int i=0; i < pages.length; i++) {
        addPageTo(""String_Node_Str"",pages[i].getClass().getName(),pages[i].getName(),null,pages[i]);
      }
      addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedDataSetOutputColumnsPage());
      addPageTo(""String_Node_Str"",COMPUTED_COLUMNS_PAGE,Messages.getString(""String_Node_Str""),null,new AdvancedDataSetComputedColumnsPage());
      addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
      addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetFiltersPage());
      addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
    }
  }
  if (needToFocusOnOutput)   setDefaultNode(OUTPUTCOLUMN_PAGE);
}",0.998936170212766
68863,"public DefaultDataSetWizard(DataSourceHandle dataSourceHandle,boolean useTransaction){
  super();
  this.useTransaction=useTransaction;
  dataSetPage=new DataSetBasePage(useTransaction);
  dataSetPage.setNewDataSource(dataSourceHandle);
  setForcePreviousAndNextButtons(true);
  addPage(dataSetPage);
  columnDefPage=new ColumnDefPage();
  addPage(columnDefPage);
}","public DefaultDataSetWizard(DataSourceHandle dataSourceHandle,boolean useTransaction){
  super();
  this.useTransaction=useTransaction;
  dataSetPage=new DataSetBasePage(useTransaction);
  dataSetPage.setNewDataSource(dataSourceHandle);
  setForcePreviousAndNextButtons(true);
  addPage(dataSetPage);
  columnDefPage=new AdvancedColumnDefPage();
  addPage(columnDefPage);
}",0.989159891598916
68864,"public void layout() throws BirtException {
  boolean isInline=parent instanceof InlineStackingArea;
  if (isInline) {
    if (parent instanceof LineArea) {
      InlineContainerArea inlineContainer=new InlineContainerArea(parent,context,content);
      inlineContainer.initialize();
      addTemplateArea(inlineContainer,true);
      inlineContainer.close();
    }
 else {
      addTemplateArea(parent,true);
    }
  }
 else {
    assert(parent instanceof BlockContainerArea);
    boolean inlineElement=PropertyUtil.isInlineElement(content);
    if (!inlineElement) {
      BlockTextArea t=new BlockTextArea(parent,context,content);
      t.initialize();
      LineArea line=new TextLineArea(t,context);
      line.initialize();
      addTemplateArea(line,false);
      line.close();
      close();
    }
  }
}","public void layout() throws BirtException {
  boolean isInline=parent instanceof InlineStackingArea;
  if (isInline) {
    if (parent instanceof LineArea) {
      InlineContainerArea inlineContainer=new InlineContainerArea(parent,context,content);
      inlineContainer.initialize();
      addTemplateArea(inlineContainer,true);
      inlineContainer.close();
    }
 else {
      addTemplateArea(parent,true);
    }
  }
 else {
    assert(parent instanceof BlockContainerArea);
    boolean inlineElement=PropertyUtil.isInlineElement(content);
    if (!inlineElement) {
      BlockTextArea t=new BlockTextArea(parent,context,content);
      t.initialize();
      LineArea line=new TextLineArea(t,context);
      line.initialize();
      addTemplateArea(line,false);
      line.close();
      t.close();
    }
  }
}",0.998768472906404
68865,"private void doDelete(){
  int index=fListHyperlinks.getSelectionIndex();
  if (index < 0) {
    return;
  }
  URLValue value=fURLValuesMap.remove(fListHyperlinks.getItem(index));
  fMultiURLValues.getURLValues().remove(value);
  fListHyperlinks.remove(index);
}","private void doDelete(){
  int index=fListHyperlinks.getSelectionIndex();
  if (index < 0) {
    return;
  }
  URLValue value=fURLValuesMap.remove(fListHyperlinks.getItem(index));
  fMultiURLValues.getURLValues().remove(value);
  fListHyperlinks.remove(index);
  int last=fListHyperlinks.getItemCount() - 1;
  fListHyperlinks.select(index < last ? index : last);
}",0.8370607028753994
68866,"/** 
 * @param dataAttrs
 */
private void processDataElementAttributes(DataElementAttributes dataAttrs){
  if (dataAttrs == null)   return;
  String nativeName=dataAttrs.getName();
  String name=newParam.getName();
  if (StringUtil.isBlank(name) || !name.equalsIgnoreCase(nativeName)) {
    newParam.setName(nativeName);
  }
  newParam.setNativeName(nativeName);
  newParam.setPosition(new Integer(dataAttrs.getPosition()));
  Integer newPos=new Integer(0);
  Integer pos=newParam.getPosition();
  if (pos == null || pos.intValue() < 0)   newParam.setPosition(newPos);
  newParam.setNativeDataType(new Integer(dataAttrs.getNativeDataTypeCode()));
  String dataType=getROMDataType(dataSourceId,dataSetId,newParam,setDefinedParams.iterator());
  if (dataType == null || !DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equalsIgnoreCase(dataType))   newParam.setParameterDataType(dataType);
  ElementNullability nullability=dataAttrs.getNullability();
  processElementNullability(nullability);
}","/** 
 * @param dataAttrs
 */
private void processDataElementAttributes(DataElementAttributes dataAttrs){
  if (dataAttrs == null)   return;
  String nativeName=dataAttrs.getName();
  String name=newParam.getName();
  if (StringUtil.isBlank(name) || (!StringUtil.isBlank(nativeName) && !name.equalsIgnoreCase(nativeName))) {
    newParam.setName(nativeName);
  }
  newParam.setNativeName(nativeName);
  newParam.setPosition(new Integer(dataAttrs.getPosition()));
  Integer newPos=new Integer(0);
  Integer pos=newParam.getPosition();
  if (pos == null || pos.intValue() < 0)   newParam.setPosition(newPos);
  newParam.setNativeDataType(new Integer(dataAttrs.getNativeDataTypeCode()));
  String dataType=getROMDataType(dataSourceId,dataSetId,newParam,setDefinedParams.iterator());
  if (dataType == null || !DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equalsIgnoreCase(dataType))   newParam.setParameterDataType(dataType);
  ElementNullability nullability=dataAttrs.getNullability();
  processElementNullability(nullability);
}",0.9815645241654212
68867,"/** 
 */
List<IAmbiguousParameterNode> process(){
  DataSetParameters params=setDesign.getParameters();
  if (params == null)   return Collections.emptyList();
  List<IAmbiguousParameterNode> ambiguousParameters=new ArrayList<IAmbiguousParameterNode>(4);
  OdaDataSetParameterHandle existingParamHandle=null;
  List<ParameterDefinition> tmpParams=params.getParameterDefinitions();
  for (int i=0; i < tmpParams.size(); i++) {
    ambiguous=false;
    ParameterDefinition paramDefn=tmpParams.get(i);
    DataElementAttributes dataAttrs=paramDefn.getAttributes();
    if (dataAttrs != null) {
      existingParamHandle=findDataSetParameterByName(dataAttrs.getName(),new Integer(dataAttrs.getPosition()),new Integer(dataAttrs.getNativeDataTypeCode()),setDefinedParamIter);
    }
    if (ambiguous == false || existingParamHandle == null)     continue;
    DataSetParameterChecker oneChecker=new DataSetParameterChecker(paramDefn,existingParamHandle);
    IAmbiguousParameterNode node=new AmbiguousParameterNode(existingParamHandle,oneChecker.process());
    ambiguousParameters.add(node);
  }
  return ambiguousParameters;
}","/** 
 */
List<IAmbiguousParameterNode> process(){
  DataSetParameters params=setDesign.getParameters();
  if (params == null)   return Collections.emptyList();
  List<IAmbiguousParameterNode> ambiguousParameters=new ArrayList<IAmbiguousParameterNode>(4);
  OdaDataSetParameterHandle existingParamHandle=null;
  List<ParameterDefinition> tmpParams=params.getParameterDefinitions();
  for (int i=0; i < tmpParams.size(); i++) {
    ambiguous=false;
    ParameterDefinition paramDefn=tmpParams.get(i);
    DataElementAttributes dataAttrs=paramDefn.getAttributes();
    if (dataAttrs != null) {
      existingParamHandle=findDataSetParameterByName(dataAttrs.getName(),new Integer(dataAttrs.getPosition()),new Integer(dataAttrs.getNativeDataTypeCode()),setDefinedParamIter);
    }
    if (ambiguous == false || existingParamHandle == null)     continue;
    DataSetParameterChecker oneChecker=new DataSetParameterChecker(paramDefn,existingParamHandle);
    List<IAmbiguousAttribute> attrs=oneChecker.process();
    if (attrs == null || attrs.isEmpty())     continue;
    IAmbiguousParameterNode node=new AmbiguousParameterNode(existingParamHandle,attrs);
    ambiguousParameters.add(node);
  }
  return ambiguousParameters;
}",0.8808201623237932
68868,"public void visitCube(Cube obj){
  super.visitCube(obj);
  property(obj,ICubeModel.DEFAULT_MEASURE_GROUP_PROP);
  writeStructureList(obj,ICubeModel.FILTER_PROP);
  writeContents(obj,ICubeModel.DIMENSIONS_PROP);
  writeContents(obj,ICubeModel.MEASURE_GROUPS_PROP);
  writeContents(obj,ICubeModel.ACCESS_CONTROLS_PROP);
  writeOverridenPropertyValues(obj);
}","public void visitCube(Cube obj){
  super.visitCube(obj);
  property(obj,ICubeModel.DEFAULT_MEASURE_GROUP_PROP);
  writeStructureList(obj,ICubeModel.FILTER_PROP);
  writeContents(obj,ICubeModel.DIMENSIONS_PROP);
  writeContents(obj,ICubeModel.MEASURE_GROUPS_PROP);
  writeOverridenPropertyValues(obj);
}",0.917933130699088
68869,"public void visitHierarchy(Hierarchy obj){
  super.visitHierarchy(obj);
  writeStructureList(obj,ICubeModel.FILTER_PROP);
  writeContents(obj,IHierarchyModel.LEVELS_PROP);
  writeContents(obj,ICubeModel.ACCESS_CONTROLS_PROP);
  writeOverridenPropertyValues(obj);
}","public void visitHierarchy(Hierarchy obj){
  super.visitHierarchy(obj);
  writeStructureList(obj,ICubeModel.FILTER_PROP);
  writeContents(obj,IHierarchyModel.LEVELS_PROP);
  writeOverridenPropertyValues(obj);
}",0.8523206751054853
68870,"public void decorateAxes(IPrimitiveRenderer ipr,ISeriesRenderingHints isrh,OneAxis ax) throws ChartException {
  GanttSeries gs=(GanttSeries)getSeries();
  Label la=gs.getDecorationLabel();
  if (la == null || !la.isVisible()) {
    return;
  }
  final AutoScale as=ax.getScale();
  final DataPointHints[] dpha=isrh.getDataPoints();
  final AxisTickCoordinates tickCoords=as.getTickCordinates();
  final String[] lba=new String[tickCoords.size() - 1];
  final boolean bTransposed=isTransposed();
  for (int i=0; i < dpha.length; i++) {
    Location loc=dpha[i].getLocation();
    double dv=bTransposed ? loc.getY() : loc.getX();
    int idx=tickCoords.getTickSlot(dv);
    if (idx >= 0 && idx < lba.length && lba[idx] == null) {
      GanttEntry ge=(GanttEntry)dpha[i].getOrthogonalValue();
      if (isValidGanttEntry(ge) && ge.getStart() != null && ge.getEnd() != null) {
        lba[idx]=ge.getLabel();
      }
    }
  }
  int pos=transposePosition(gs.getDecorationLabelPosition()).getValue();
  int iOrientation=ax.getOrientation();
  if (iOrientation == IConstants.VERTICAL) {
    if (pos == Position.LEFT) {
      pos=IConstants.LEFT;
    }
 else {
      pos=IConstants.RIGHT;
    }
  }
 else {
    if (pos == Position.BELOW) {
      pos=IConstants.BELOW;
    }
 else {
      pos=IConstants.ABOVE;
    }
  }
  la=goFactory.copyOf(la);
  Location loLabel=goFactory.createLocation(0,0);
  final double axisCoord=ax.getAxisCoordinate();
  final int iMajorTickStyle=ax.getGrid().getTickStyle(IConstants.MAJOR);
  double dXTick1=((iMajorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? (axisCoord - IConstants.TICK_SIZE - 1) : (axisCoord - 1);
  double dXTick2=((iMajorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? (axisCoord + IConstants.TICK_SIZE + 1) : (axisCoord + 1);
  TextRenderEvent tre;
  for (int i=0; i < tickCoords.size() - 1; i++) {
    if (lba[i] != null) {
      la.getCaption().setValue(lba[i]);
      double point=tickCoords.getCoordinate(i);
      if (!(as.isCategoryScale() && !as.isTickBetweenCategories() && i == 0)) {
        point+=tickCoords.getStep() / 2;
      }
      if (iOrientation == IConstants.VERTICAL) {
        if (pos == IConstants.LEFT) {
          loLabel.setX(dXTick1);
        }
 else {
          loLabel.setX(dXTick2);
        }
        loLabel.setY(point);
      }
 else {
        loLabel.setX(point);
        if (pos == IConstants.ABOVE) {
          loLabel.setY(dXTick1);
        }
 else {
          loLabel.setY(dXTick2);
        }
      }
      tre=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(ax.getModelAxis()),TextRenderEvent.class);
      tre.setTextPosition(pos);
      tre.setLocation(loLabel);
      tre.setLabel(la);
      tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
      ipr.drawText(tre);
    }
  }
}","public void decorateAxes(IPrimitiveRenderer ipr,ISeriesRenderingHints isrh,OneAxis ax) throws ChartException {
  GanttSeries gs=(GanttSeries)getSeries();
  Label la=gs.getDecorationLabel();
  if (la == null || !la.isVisible()) {
    return;
  }
  final DataPointHints[] dpha=isrh.getDataPoints();
  SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  int pos=transposePosition(gs.getDecorationLabelPosition()).getValue();
  int iOrientation=ax.getOrientation();
  if (iOrientation == IConstants.VERTICAL) {
    if (pos == Position.LEFT) {
      pos=IConstants.LEFT;
    }
 else {
      pos=IConstants.RIGHT;
    }
  }
 else {
    if (pos == Position.BELOW) {
      pos=IConstants.BELOW;
    }
 else {
      pos=IConstants.ABOVE;
    }
  }
  la=goFactory.copyOf(la);
  Location loLabel=goFactory.createLocation(0,0);
  final double axisCoord=ax.getAxisCoordinate();
  final int iMajorTickStyle=ax.getGrid().getTickStyle(IConstants.MAJOR);
  double dXTick1=((iMajorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? (axisCoord - IConstants.TICK_SIZE - 1) : (axisCoord - 1);
  double dXTick2=((iMajorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? (axisCoord + IConstants.TICK_SIZE + 1) : (axisCoord + 1);
  TextRenderEvent tre;
  if (iOrientation == IConstants.VERTICAL) {
    if (pos == IConstants.LEFT) {
      loLabel.setX(dXTick1);
    }
 else {
      loLabel.setX(dXTick2);
    }
  }
 else {
    if (pos == IConstants.ABOVE) {
      loLabel.setY(dXTick1);
    }
 else {
      loLabel.setY(dXTick2);
    }
  }
  for (int i=0; i < dpha.length; i++) {
    GanttEntry ge=(GanttEntry)dpha[i].getOrthogonalValue();
    if (isValidGanttEntry(ge) && ge.getLabel() != null && ge.getStart() != null && ge.getEnd() != null) {
      la.getCaption().setValue(ge.getLabel());
      double fSize=srh.isCategoryScale() ? dpha[i].getSize() / 2 : 0;
      if (iOrientation == IConstants.VERTICAL) {
        loLabel.setY(dpha[i].getLocation().getY() + fSize);
      }
 else {
        loLabel.setX(dpha[i].getLocation().getX() + fSize);
      }
      tre=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(ax.getModelAxis()),TextRenderEvent.class);
      tre.setTextPosition(pos);
      tre.setLocation(loLabel);
      tre.setLabel(la);
      tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
      ipr.drawText(tre);
    }
  }
}",0.671685002895194
68871,"public void end(IReportContent report){
  engine.cacheBookmarks(sheetIndex);
  engine.complete();
  try {
    writer.start(report,engine.getStyleMap(),engine.getAllBookmarks());
    outputCacheData();
    writer.end();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
}","public void end(IReportContent report){
  engine.cacheBookmarks(sheetIndex);
  engine.complete(isAuto);
  try {
    writer.start(report,engine.getStyleMap(),engine.getAllBookmarks());
    outputCacheData();
    writer.end();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
}",0.9904458598726116
68872,"public void startTable(ITableContent table){
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  ColumnsInfo info=null;
  if (isAuto) {
    info=LayoutUtil.createTable(table,width);
  }
 else {
    int[] columns=LayoutUtil.createFixedTable(table,LayoutUtil.getElementWidth(table,width));
    info=new ColumnsInfo(columns);
  }
  if (info == null)   return;
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption,table.getComputedStyle());
  }
  engine.addTable(table,info,sizeInfo);
}","public void startTable(ITableContent table){
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  ColumnsInfo info=null;
  boolean isAutoTable=true;
  if (isAutoTable) {
    info=LayoutUtil.createTable(table,width);
  }
 else {
    int[] columns=LayoutUtil.createFixedTable(table,LayoutUtil.getElementWidth(table,width));
    info=new ColumnsInfo(columns);
  }
  if (info == null)   return;
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption,table.getComputedStyle());
  }
  engine.addTable(table,info,sizeInfo);
}",0.9654591406908172
68873,"public void start(IReportContent report){
  setupRenderOptions();
  String reportOrientation=report.getDesign().getReportDesign().getBidiOrientation();
  if (""String_Node_Str"".equalsIgnoreCase(reportOrientation))   isRTLSheet=true;
  IStyle style=report.getRoot().getComputedStyle();
  SimpleMasterPageDesign master=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  engine=createLayoutEngine(context,this);
  engine.initalize(new PageDef(master,style));
  String reportTitle=report.getDesign().getReportDesign().getStringProperty(IModuleModel.TITLE_PROP);
  if (reportTitle != null) {
    sheetName=reportTitle;
  }
 else {
    sheetName=DEFAULT_SHEET_NAME;
  }
  sheetName=ExcelUtil.getValidSheetName(sheetName);
  createWriter();
}","public void start(IReportContent report){
  setupRenderOptions();
  ReportDesignHandle designHandle=report.getDesign().getReportDesign();
  String reportOrientation=designHandle.getBidiOrientation();
  if (""String_Node_Str"".equalsIgnoreCase(reportOrientation)) {
    isRTLSheet=true;
  }
  String reportLayoutPreference=designHandle.getLayoutPreference();
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
    isAuto=false;
  }
  IStyle style=report.getRoot().getComputedStyle();
  SimpleMasterPageDesign master=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  engine=createLayoutEngine(context,this);
  engine.initalize(new PageDef(master,style));
  String reportTitle=report.getDesign().getReportDesign().getStringProperty(IModuleModel.TITLE_PROP);
  if (reportTitle != null) {
    sheetName=reportTitle;
  }
 else {
    sheetName=DEFAULT_SHEET_NAME;
  }
  sheetName=ExcelUtil.getValidSheetName(sheetName);
  createWriter();
}",0.8201357466063348
68874,"public void outputSheet(){
  engine.cacheBookmarks(sheetIndex);
  engine.complete();
  try {
    outputCacheData();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  sheetIndex++;
}","public void outputSheet(){
  engine.cacheBookmarks(sheetIndex);
  engine.complete(isAuto);
  try {
    outputCacheData();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  sheetIndex++;
}",0.986784140969163
68875,"private void calculateRowHeight(SheetData[] rowData){
  double rowHeight=0;
  int rowIndex=getRowIndex(rowData);
  double lastRowHeight=rowIndex > 0 ? cache.getRowHeight(rowIndex - 1) : 0;
  for (int i=0; i < rowData.length; i++) {
    SheetData data=rowData[i];
    if (data != null) {
      if (data.isBlank()) {
        BlankData blankData=(BlankData)data;
        if (blankData.getType() == Type.VERTICAL) {
          data.setHeight(data.getHeight() - lastRowHeight);
        }
      }
      SheetData realData=getRealData(data);
      if (realData != null) {
        int realDataRowEnd=realData.getRowIndex() + realData.getRowSpan();
        if (realDataRowEnd == data.getRowIndex()) {
          rowHeight=data.getHeight() > rowHeight ? data.getHeight() : rowHeight;
        }
      }
    }
  }
  cache.setRowHeight(rowIndex,rowHeight);
}","private void calculateRowHeight(SheetData[] rowData,boolean isAuto){
  double rowHeight=0;
  int rowIndex=getRowIndex(rowData);
  double lastRowHeight=rowIndex > 0 ? cache.getRowHeight(rowIndex - 1) : 0;
  boolean hasCurrentRowHeight=cache.hasRowHeight(rowIndex);
  if (!hasCurrentRowHeight || isAuto) {
    for (int i=0; i < rowData.length; i++) {
      SheetData data=rowData[i];
      if (data != null) {
        if (data.isBlank()) {
          BlankData blankData=(BlankData)data;
          if (blankData.getType() == Type.VERTICAL) {
            data.setHeight(data.getHeight() - lastRowHeight);
          }
        }
        SheetData realData=getRealData(data);
        if (realData != null) {
          int realDataRowEnd=realData.getRowIndex() + realData.getRowSpan();
          if (realDataRowEnd == data.getRowIndex()) {
            rowHeight=data.getHeight() > rowHeight ? data.getHeight() : rowHeight;
          }
        }
      }
    }
    cache.setRowHeight(rowIndex,rowHeight);
  }
}",0.9148128052088984
68876,"public void complete(){
  engine.applyContainerBottomStyle(containers.get(0));
  Iterator<SheetData[]> iterator=cache.getRowIterator();
  while (iterator.hasNext()) {
    SheetData[] rowData=iterator.next();
    for (int j=0; j < rowData.length; j++) {
      SheetData data=rowData[j];
      if (data == null || data.isBlank()) {
        continue;
      }
      ContainerSizeInfo rule=data.getSizeInfo();
      int start=axis.getColumnIndexByCoordinate(rule.getStartCoordinate()) + 1;
      int end=axis.getColumnIndexByCoordinate(rule.getEndCoordinate()) + 1;
      end=Math.min(end,maxCol);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      data.setSpan(span);
      HyperlinkDef hyperLink=data.getHyperlinkDef();
      if (hyperLink != null) {
        if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
          setLinkedBookmark(data,hyperLink);
        }
      }
      int styleid=engine.getStyleID(data);
      data.setStyleId(styleid);
    }
    calculateRowHeight(rowData);
  }
}","public void complete(boolean isAuto){
  engine.applyContainerBottomStyle(containers.get(0));
  Iterator<SheetData[]> iterator=cache.getRowIterator();
  while (iterator.hasNext()) {
    SheetData[] rowData=iterator.next();
    for (int j=0; j < rowData.length; j++) {
      SheetData data=rowData[j];
      if (data == null || data.isBlank()) {
        continue;
      }
      ContainerSizeInfo rule=data.getSizeInfo();
      int start=axis.getColumnIndexByCoordinate(rule.getStartCoordinate()) + 1;
      int end=axis.getColumnIndexByCoordinate(rule.getEndCoordinate()) + 1;
      end=Math.min(end,maxCol);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      data.setSpan(span);
      HyperlinkDef hyperLink=data.getHyperlinkDef();
      if (hyperLink != null) {
        if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
          setLinkedBookmark(data,hyperLink);
        }
      }
      int styleid=engine.getStyleID(data);
      data.setStyleId(styleid);
    }
    calculateRowHeight(rowData,isAuto);
  }
}",0.9900237529691212
68877,"public boolean isPageBreakInsideAvoid(){
  if (getTableArea().isGridDesign()) {
    return super.isPageBreakInsideAvoid();
  }
 else {
    if (content != null) {
      IStyle style=content.getStyle();
      String pb=style.getPageBreakInside();
      if (IStyle.CSS_AUTO_VALUE.equals(pb)) {
        return false;
      }
    }
    return true;
  }
}","public boolean isPageBreakInsideAvoid(){
  if (getTableArea().isGridDesign()) {
    return super.isPageBreakInsideAvoid();
  }
 else {
    if (IStyle.AVOID_VALUE == pageBreakInside) {
      return true;
    }
    if (content != null) {
      IStyle style=content.getStyle();
      String pb=style.getPageBreakInside();
      if (IStyle.CSS_AUTO_VALUE.equals(pb)) {
        return false;
      }
    }
    return true;
  }
}",0.9041450777202072
68878,"public void enableInteraction(InteractionEvent iev) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  final Trigger[] tga=iev.getTriggers();
  if (tga == null) {
    return;
  }
  Region clipping=new Region();
  _gc.getClipping(clipping);
  TriggerCondition tc;
  List<RegionAction> al;
  final PrimitiveRenderEvent pre=iev.getHotSpot();
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),loa,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds bo=((RectangleRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),boEllipse,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    final Bounds boEllipse=are.getEllipseBounds();
    double dStart=are.getStartAngle();
    double dExtent=are.getAngleExtent();
    int iArcType=are.getStyle();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),boEllipse,dStart,dExtent,iArcType,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
 else   if (pre instanceof AreaRenderEvent) {
    final Bounds bo=((AreaRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
  clipping.dispose();
}","public void enableInteraction(InteractionEvent iev) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  final Trigger[] tga=iev.getTriggers();
  if (tga == null) {
    return;
  }
  Region clipping=new Region();
  _gc.getClipping(clipping);
  TriggerCondition tc;
  List<RegionAction> al;
  final PrimitiveRenderEvent pre=iev.getHotSpot();
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),loa,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(0,ra);
    }
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds bo=((RectangleRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(0,ra);
    }
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),boEllipse,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(0,ra);
    }
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    final Bounds boEllipse=are.getEllipseBounds();
    double dStart=are.getStartAngle();
    double dExtent=are.getAngleExtent();
    int iArcType=are.getStyle();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),boEllipse,dStart,dExtent,iArcType,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(0,ra);
    }
  }
 else   if (pre instanceof AreaRenderEvent) {
    final Bounds bo=((AreaRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(0,ra);
    }
  }
  clipping.dispose();
}",0.9984620116887112
68879,"public Data(final Object value,final StyleEntry s,final int datatype,XlsContainer container,int rowSpanOfDesign){
  this.value=value;
  this.style=s;
  this.dataType=datatype;
  this.container=container;
  this.rowSpanInDesign=rowSpanOfDesign;
}","public Data(final Object value,final StyleEntry s,final int datatype,int rowSpanOfDesign){
  this.value=value;
  this.style=s;
  this.dataType=datatype;
  this.rowSpanInDesign=rowSpanOfDesign;
}",0.8838268792710706
68880,"public ImageData(IImageContent image,StyleEntry style,int datatype,Image imageInfo,XlsContainer currentContainer){
  super();
  this.style=style;
  this.dataType=datatype;
  height=ExcelUtil.convertImageSize(image.getHeight(),(int)(imageInfo.getHeight() * ExcelUtil.PX_PT));
  double imageWidth=ExcelUtil.convertImageSize(image.getWidth(),(int)(imageInfo.getWidth() * ExcelUtil.PX_PT));
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  container=currentContainer;
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}","public ImageData(IImageContent image,StyleEntry style,int datatype,Image imageInfo,XlsContainer currentContainer){
  super();
  this.style=style;
  this.dataType=datatype;
  height=ExcelUtil.convertImageSize(image.getHeight(),(int)(imageInfo.getHeight() * ExcelUtil.PX_PT));
  double imageWidth=ExcelUtil.convertImageSize(image.getWidth(),(int)(imageInfo.getWidth() * ExcelUtil.PX_PT));
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}",0.975767366720517
68881,"private boolean isInContainer(SheetData data,XlsContainer rowContainer){
  XlsContainer container=data.getContainer();
  while (container != null) {
    if (container == rowContainer) {
      return true;
    }
    container=container.getParent();
  }
  return false;
}","private boolean isInContainer(SheetData data,XlsContainer rowContainer){
  return data.getRowIndex() >= rowContainer.getStartRowId();
}",0.5792079207920792
68882,"private Data createDateData(Object txt,StyleEntry entry,String timeFormat,String dlocale){
  ULocale dateLocale=getLocale(dlocale);
  timeFormat=ExcelUtil.parse(txt,timeFormat,dateLocale);
  timeFormat=DateTimeUtil.formatDateTime(timeFormat,dateLocale);
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,timeFormat);
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.DATE);
  return createData(txt,entry,SheetData.DATE,getCurrentContainer());
}","private Data createDateData(Object txt,StyleEntry entry,String timeFormat,String dlocale){
  ULocale dateLocale=getLocale(dlocale);
  timeFormat=ExcelUtil.parse(txt,timeFormat,dateLocale);
  timeFormat=DateTimeUtil.formatDateTime(timeFormat,dateLocale);
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,timeFormat);
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.DATE);
  return createData(txt,entry,SheetData.DATE);
}",0.9751693002257336
68883,"protected Data createData(Object text,StyleEntry s,int dataType,XlsContainer container,int rowSpanOfDesign){
  Data data=createData();
  data.setValue(text);
  data.setStyle(s);
  data.setDataType(dataType);
  data.setContainer(container);
  data.setRowSpanInDesign(rowSpanOfDesign);
  return data;
}","protected Data createData(Object text,StyleEntry s,int dataType,int rowSpanOfDesign){
  Data data=createData();
  data.setValue(text);
  data.setStyle(s);
  data.setDataType(dataType);
  data.setRowSpanInDesign(rowSpanOfDesign);
  return data;
}",0.8990825688073395
68884,"public void endNormalContainer(){
  XlsContainer container=getCurrentContainer();
  if (container.isEmpty()) {
    Data data=createData(EMPTY,container.getStyle(),Data.STRING,container);
    data.setSizeInfo(container.getSizeInfo());
    addData(data);
  }
  engine.applyContainerBottomStyle();
  containers.pop();
}","public void endNormalContainer(){
  XlsContainer container=getCurrentContainer();
  if (container.isEmpty()) {
    Data data=createData(EMPTY,container.getStyle(),Data.STRING);
    data.setSizeInfo(container.getSizeInfo());
    addData(data);
  }
  engine.applyContainerBottomStyle();
  containers.pop();
}",0.9839228295819936
68885,"protected void addEmptyData(SheetData data,XlsContainer container){
  int parentStartCoordinate=container.getSizeInfo().getStartCoordinate();
  int parentEndCoordinate=container.getSizeInfo().getEndCoordinate();
  int childStartCoordinate=data.getSizeInfo().getStartCoordinate();
  int childEndCoordinate=data.getSizeInfo().getEndCoordinate();
  if (childEndCoordinate < parentEndCoordinate) {
    StyleEntry style=container.getStyle();
    removeLeftBorder(style);
    int column=axis.getColumnIndexByCoordinate(childEndCoordinate);
    Data empty=createEmptyData(container,style);
    empty.setSizeInfo(new ContainerSizeInfo(childEndCoordinate,parentEndCoordinate - childEndCoordinate));
    empty.setRowIndex(data.getRowIndex());
    addDatatoCache(column,empty);
  }
  if (childStartCoordinate > parentStartCoordinate) {
    StyleEntry style=container.getStyle();
    removeRightBorder(style);
    int column=axis.getColumnIndexByCoordinate(childStartCoordinate);
    Data empty=createEmptyData(container,style);
    empty.setSizeInfo(new ContainerSizeInfo(childStartCoordinate,parentStartCoordinate - childStartCoordinate));
    empty.setRowIndex(data.getRowIndex());
    addDatatoCache(column,empty);
  }
}","protected void addEmptyData(SheetData data,XlsContainer container){
  int parentStartCoordinate=container.getSizeInfo().getStartCoordinate();
  int parentEndCoordinate=container.getSizeInfo().getEndCoordinate();
  int childStartCoordinate=data.getSizeInfo().getStartCoordinate();
  int childEndCoordinate=data.getSizeInfo().getEndCoordinate();
  if (childEndCoordinate < parentEndCoordinate) {
    StyleEntry style=container.getStyle();
    removeLeftBorder(style);
    int column=axis.getColumnIndexByCoordinate(childEndCoordinate);
    Data empty=createEmptyData(style);
    empty.setSizeInfo(new ContainerSizeInfo(childEndCoordinate,parentEndCoordinate - childEndCoordinate));
    empty.setRowIndex(data.getRowIndex());
    addDatatoCache(column,empty);
  }
  if (childStartCoordinate > parentStartCoordinate) {
    StyleEntry style=container.getStyle();
    removeRightBorder(style);
    int column=axis.getColumnIndexByCoordinate(childStartCoordinate);
    Data empty=createEmptyData(style);
    empty.setSizeInfo(new ContainerSizeInfo(childStartCoordinate,parentStartCoordinate - childStartCoordinate));
    empty.setRowIndex(data.getRowIndex());
    addDatatoCache(column,empty);
  }
}",0.8361064891846922
68886,"private void addEmptyDataToContainer(StyleEntry style,XlsContainer parent,int startCoordinate,int width){
  Data data=createEmptyData(parent,style);
  data.setSizeInfo(new ContainerSizeInfo(startCoordinate,width));
  addData(data);
}","private void addEmptyDataToContainer(StyleEntry style,XlsContainer parent,int startCoordinate,int width){
  Data data=createEmptyData(style);
  data.setSizeInfo(new ContainerSizeInfo(startCoordinate,width));
  addData(data);
}",0.9847494553376906
68887,"protected Data createEmptyData(XlsContainer container,StyleEntry style){
  return createData(EMPTY,style,Data.STRING,container);
}","protected Data createEmptyData(StyleEntry style){
  return createData(EMPTY,style,Data.STRING);
}",0.8546255506607929
68888,"/** 
 * Handle HTTP GET method.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 * @return
 */
public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (!__authenticate(request,response)) {
    return;
  }
  try {
    String requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
    boolean isSoapRequest=ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(requestType);
    IViewingSession session=ViewingSessionUtil.getSession(request);
    if (session == null && !isSoapRequest && !ParameterAccessor.isGetImageOperator(request)) {
      if (ViewingSessionUtil.getSessionId(request) == null) {
        session=ViewingSessionUtil.createSession(request);
      }
 else {
        throw new ViewerException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
      }
    }
    IContext context=__getContext(request,response);
    if (context.getBean().getException() != null) {
      __handleNonSoapException(request,response,context.getBean().getException());
    }
 else {
      session.lock();
      try {
        if (isSoapRequest) {
          Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
          super.doPost(request,response);
        }
 else {
          __doGet(context);
        }
      }
  finally {
        session.unlock();
        if (!session.isLocked() && !context.getBean().isShowParameterPage() && (ParameterAccessor.isServlet(request,IBirtConstants.SERVLET_PATH_DOCUMENT))) {
          session.invalidate();
        }
      }
    }
  }
 catch (  BirtException e) {
    __handleNonSoapException(request,response,e);
  }
}","/** 
 * Handle HTTP GET method.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 * @return
 */
public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (!__authenticate(request,response)) {
    return;
  }
  try {
    String requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
    boolean isSoapRequest=ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(requestType);
    IViewingSession session=ViewingSessionUtil.getSession(request);
    if (session == null && !isSoapRequest && !ParameterAccessor.isGetImageOperator(request)) {
      if (ViewingSessionUtil.getSessionId(request) == null) {
        session=ViewingSessionUtil.createSession(request);
      }
 else {
        throw new ViewerException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
      }
    }
    IContext context=__getContext(request,response);
    if (context.getBean().getException() != null) {
      __handleNonSoapException(request,response,context.getBean().getException());
    }
 else     if (session != null) {
      session.lock();
      try {
        if (isSoapRequest) {
          Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
          super.doPost(request,response);
        }
 else {
          __doGet(context);
        }
      }
  finally {
        session.unlock();
        if (!session.isLocked() && !context.getBean().isShowParameterPage() && (ParameterAccessor.isServlet(request,IBirtConstants.SERVLET_PATH_DOCUMENT))) {
          session.invalidate();
        }
      }
    }
  }
 catch (  BirtException e) {
    __handleNonSoapException(request,response,e);
  }
}",0.9929755549311604
68889,"public void partActivated(IWorkbenchPart part){
  fActivePart=part;
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    confirmSava();
    final ModuleHandle oldHandle=getModel();
    if (needReset) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        getProvider().getReportModuleHandle(getEditorInput(),true);
      }
 else {
        needReset=false;
      }
      needReload=false;
    }
    if (needReload) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        UIUtil.reloadModuleHandleLibraries(getModel());
      }
 else {
        needReload=false;
      }
    }
    if (getEditorInput().exists()) {
      handleActivation();
      SessionHandleAdapter.getInstance().setReportDesignHandle(getModel());
      String str=SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder();
      UIUtil.processSessionResourceFolder(getEditorInput(),UIUtil.getProjectFromInput(getEditorInput()),getModel());
      if (!str.equals(SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder()) && getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        EditPart root=((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getRootEditPart();
        refreshGraphicalEditor();
      }
    }
    if (getActivePageInstance() instanceof IReportEditorPage) {
      boolean isDispatch=false;
      if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        isDispatch=true;
      }
 else       if (needReload || needReset) {
        isDispatch=true;
      }
      final boolean tempDispatch=isDispatch;
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          if (!tempDispatch) {
            return;
          }
          IReportEditorPage curPage=(IReportEditorPage)getActivePageInstance();
          if (needReload || needReset) {
            curPage.markPageStale(IPageStaleType.MODEL_RELOAD);
          }
          if (getActivePageInstance() != null) {
            curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
          }
          if (needReload || needReset) {
            updateRelatedViews();
            curPage.markPageStale(IPageStaleType.NONE);
          }
          if (needReset) {
            SessionHandleAdapter.getInstance().resetReportDesign(oldHandle,getModel());
            oldHandle.close();
          }
          needReload=false;
          needReset=false;
        }
      }
);
    }
  }
}","public void partActivated(IWorkbenchPart part){
  fActivePart=part;
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    confirmSava();
    final ModuleHandle oldHandle=getModel();
    if (needReset) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        getProvider().getReportModuleHandle(getEditorInput(),true);
      }
 else {
        needReset=false;
      }
      needReload=false;
    }
    if (needReload) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        UIUtil.reloadModuleHandleLibraries(getModel());
      }
 else {
        needReload=false;
      }
    }
    if (getEditorInput().exists()) {
      handleActivation();
      SessionHandleAdapter.getInstance().setReportDesignHandle(getModel());
      String str=SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder();
      UIUtil.processSessionResourceFolder(getEditorInput(),UIUtil.getProjectFromInput(getEditorInput()),getModel());
      if (!str.equals(SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder()) && getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        EditPart root=((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getRootEditPart();
        refreshGraphicalEditor();
      }
    }
    if (getActivePageInstance() instanceof IReportEditorPage) {
      boolean isDispatch=false;
      if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        isDispatch=true;
      }
 else       if (needReload || needReset) {
        isDispatch=true;
      }
      final boolean tempDispatch=isDispatch;
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          IReportEditorPage curPage=(IReportEditorPage)getActivePageInstance();
          if (needReload || needReset) {
            curPage.markPageStale(IPageStaleType.MODEL_RELOAD);
          }
          if (getActivePageInstance() != null) {
            curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
          }
          if (!tempDispatch) {
            return;
          }
          if (needReload || needReset) {
            updateRelatedViews();
            curPage.markPageStale(IPageStaleType.NONE);
          }
          if (needReset) {
            SessionHandleAdapter.getInstance().resetReportDesign(oldHandle,getModel());
            oldHandle.close();
          }
          needReload=false;
          needReset=false;
        }
      }
);
    }
  }
}",0.983657587548638
68890,"/** 
 * Initializes the PPTEmitter.
 * @param services the emitter services object.
 * @throws EngineException 
 */
public void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  IReportRunnable reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  this.pptOutput=EmitterUtil.getOuputStream(services,REPORT_FILE);
}","/** 
 * Initializes the PPTEmitter.
 * @param services the emitter services object.
 * @throws EngineException 
 */
public void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  this.pptOutput=EmitterUtil.getOuputStream(services,REPORT_FILE);
}",0.9837067209775968
68891,"public static int getImageWidth(IImageContent image,int width){
  DimensionType value=image.getWidth();
  if (value != null) {
    width=getElementWidth(value,width);
  }
 else {
    try {
      Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
      width=(int)(imageInfo.getWidth() * ExcelUtil.PX_PT);
    }
 catch (    IOException e1) {
      log.log(Level.WARNING,e1.getLocalizedMessage());
    }
  }
  return width;
}","public static int getImageWidth(IImageContent image,int width){
  DimensionType value=image.getWidth();
  if (value != null) {
    width=getElementWidth(value,width);
  }
 else {
    try {
      Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
      width=(int)(imageInfo.getWidth() * ExcelUtil.PX_PT * 1000);
    }
 catch (    IOException e1) {
      log.log(Level.WARNING,e1.getLocalizedMessage());
    }
  }
  return width;
}",0.9930209371884346
68892,"/** 
 * Find next available row position. If it has grouped-enabled, should ignore non-grouped/non-aggregation row.
 * @return
 * @throws BirtException
 */
protected boolean findNext() throws BirtException {
  while (fResultIterator.next()) {
    int startIndex=fResultIterator.getStartingGroupLevel();
    if (startIndex > 0 && startIndex <= fGroupCount) {
      if (faEnabledGroups[startIndex - 1]) {
        fCountOfAvaiableRows++;
        getGroupBreaksList(startIndex - 1).add(Integer.valueOf(fCountOfAvaiableRows));
        for (int i=startIndex; i < fGroupCount; i++) {
          getGroupBreaksList(i).add(Integer.valueOf(fCountOfAvaiableRows));
        }
        return true;
      }
    }
    if (!fHasSummaryAggregation) {
      fCountOfAvaiableRows++;
      return true;
    }
  }
  return false;
}","/** 
 * Find next available row position. If it has grouped-enabled, should ignore non-grouped/non-aggregation row.
 * @return
 * @throws BirtException
 */
protected boolean findNext() throws BirtException {
  while (fResultIterator.next()) {
    int startIndex=fResultIterator.getStartingGroupLevel();
    if (startIndex > 0 && startIndex <= fGroupCount) {
      if (usedByChart(startIndex - 1,fGroupCount - 1)) {
        fCountOfAvaiableRows++;
        getGroupBreaksList(startIndex - 1).add(Integer.valueOf(fCountOfAvaiableRows));
        for (int i=startIndex; i < fGroupCount; i++) {
          getGroupBreaksList(i).add(Integer.valueOf(fCountOfAvaiableRows));
        }
        return true;
      }
    }
    if (!fHasSummaryAggregation) {
      fCountOfAvaiableRows++;
      return true;
    }
  }
  return false;
}",0.9656441717791412
68893,"public static ColumnsInfo createTable(ITableContent table,int width){
  int tableWidth=getElementWidth(table,width);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      if (ExcelUtil.convertDimensionType(value,tableWidth) > 576000) {
        System.out.println(""String_Node_Str"");
      }
      columns[i]=ExcelUtil.convertDimensionType(value,tableWidth);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth != 0 && unassignedCount == 0) {
    int totalResized=0;
    for (int i=0; i < columnCount - 1; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
      totalResized+=columns[i];
    }
    columns[columnCount - 1]=tableWidth - totalResized;
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    int totalResized=0;
    int lastAssignedIndex=0;
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1) {
        columns[i]=0;
      }
 else {
        columns[i]=resize(columns[i],totalAssigned,leftWidth);
        lastAssignedIndex=i;
      }
      totalResized+=columns[i];
    }
    columns[lastAssignedIndex]+=tableWidth - totalResized;
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}","public static ColumnsInfo createTable(ITableContent table,int width){
  int tableWidth=getElementWidth(table,width);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.convertDimensionType(value,tableWidth);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth != 0 && unassignedCount == 0) {
    int totalResized=0;
    for (int i=0; i < columnCount - 1; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
      totalResized+=columns[i];
    }
    columns[columnCount - 1]=tableWidth - totalResized;
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    int totalResized=0;
    int lastAssignedIndex=0;
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1) {
        columns[i]=0;
      }
 else {
        columns[i]=resize(columns[i],totalAssigned,leftWidth);
        lastAssignedIndex=i;
      }
      totalResized+=columns[i];
    }
    columns[lastAssignedIndex]+=tableWidth - totalResized;
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}",0.957175925925926
68894,"public static boolean isHeritable(int id){
  if (id >= StyleConstant.BORDER_BOTTOM_COLOR_PROP && id <= StyleConstant.BORDER_RIGHT_WIDTH_PROP)   return false;
  return true;
}","public static boolean isHeritable(int id){
  if ((id >= StyleConstant.BORDER_BOTTOM_COLOR_PROP && id <= StyleConstant.BORDER_RIGHT_WIDTH_PROP) || (id >= StyleConstant.BORDER_DIAGONAL_COLOR_PROP && id <= StyleConstant.BORDER_ANTIDIAGONAL_WIDTH_PROP))   return false;
  return true;
}",0.7631578947368421
68895,"void setupStyle(StyledElementDesign design,StructureHandle highlight,IStyle style){
  Set<String> propertyNames=StyleUtil.ruleStyleName2Index.keySet();
  for (  String propertyName : propertyNames) {
    populateHighlightStyle(design,highlight,style,propertyName);
  }
}","void setupStyle(StyledElementDesign design,StructureHandle highlight,IStyle style){
  Set<String> propertyNames=StyleUtil.ruleStyleName2Index.keySet();
  for (  String propertyName : propertyNames) {
    populateHighlightStyle(design,highlight,style,propertyName);
  }
  createDataFormat(highlight,style);
}",0.9358752166377816
68896,"private void createDataFormat(DesignElementHandle handle,StyleDeclaration style){
  if (handle == null)   return;
  Set<String> propertyNames=StyleUtil.customName2Index.keySet();
  for (  String propertyName : propertyNames) {
    if (BIRTConstants.BIRT_STYLE_DATA_FORMAT.equalsIgnoreCase(propertyName)) {
      DataFormatValue formatSet=new DataFormatValue();
      boolean formatSetValid=false;
      FormatValue modelValue=(FormatValue)handle.getProperty(StyleHandle.STRING_FORMAT_PROP);
      if (modelValue != null) {
        ULocale locale=modelValue.getLocale();
        formatSet.setStringFormat(modelValue.getPattern(),locale == null ? null : locale.toString());
        formatSetValid=true;
      }
      modelValue=(FormatValue)handle.getProperty(StyleHandle.NUMBER_FORMAT_PROP);
      if (modelValue != null) {
        ULocale locale=modelValue.getLocale();
        formatSet.setNumberFormat(modelValue.getPattern(),locale == null ? null : locale.toString());
        formatSetValid=true;
      }
      modelValue=(FormatValue)handle.getProperty(StyleHandle.DATE_FORMAT_PROP);
      if (modelValue != null) {
        ULocale locale=modelValue.getLocale();
        formatSet.setDateFormat(modelValue.getPattern(),locale == null ? null : locale.toString());
        formatSetValid=true;
      }
      modelValue=(FormatValue)handle.getProperty(StyleHandle.TIME_FORMAT_PROP);
      if (modelValue != null) {
        ULocale locale=modelValue.getLocale();
        formatSet.setTimeFormat(modelValue.getPattern(),locale == null ? null : locale.toString());
        formatSetValid=true;
      }
      modelValue=(FormatValue)handle.getProperty(StyleHandle.DATE_TIME_FORMAT_PROP);
      if (modelValue != null) {
        ULocale locale=modelValue.getLocale();
        formatSet.setDateTimeFormat(modelValue.getPattern(),locale == null ? null : locale.toString());
        formatSetValid=true;
      }
      if (formatSetValid)       style.setProperty(StyleUtil.customName2Index.get(propertyName),formatSet);
    }
  }
}","private void createDataFormat(StructureHandle handle,IStyle style){
  if (handle == null)   return;
  Set<String> propertyNames=StyleUtil.customName2Index.keySet();
  for (  String propertyName : propertyNames) {
    if (BIRTConstants.BIRT_STYLE_DATA_FORMAT.equalsIgnoreCase(propertyName)) {
      DataFormatValue formatSet=new DataFormatValue();
      boolean formatSetValid=false;
      FormatValue modelValue=(FormatValue)handle.getProperty(StyleHandle.STRING_FORMAT_PROP);
      if (modelValue != null) {
        ULocale locale=modelValue.getLocale();
        formatSet.setStringFormat(modelValue.getPattern(),locale == null ? null : locale.toString());
        formatSetValid=true;
      }
      modelValue=(FormatValue)handle.getProperty(StyleHandle.NUMBER_FORMAT_PROP);
      if (modelValue != null) {
        ULocale locale=modelValue.getLocale();
        formatSet.setNumberFormat(modelValue.getPattern(),locale == null ? null : locale.toString());
        formatSetValid=true;
      }
      modelValue=(FormatValue)handle.getProperty(StyleHandle.DATE_FORMAT_PROP);
      if (modelValue != null) {
        ULocale locale=modelValue.getLocale();
        formatSet.setDateFormat(modelValue.getPattern(),locale == null ? null : locale.toString());
        formatSetValid=true;
      }
      modelValue=(FormatValue)handle.getProperty(StyleHandle.TIME_FORMAT_PROP);
      if (modelValue != null) {
        ULocale locale=modelValue.getLocale();
        formatSet.setTimeFormat(modelValue.getPattern(),locale == null ? null : locale.toString());
        formatSetValid=true;
      }
      modelValue=(FormatValue)handle.getProperty(StyleHandle.DATE_TIME_FORMAT_PROP);
      if (modelValue != null) {
        ULocale locale=modelValue.getLocale();
        formatSet.setDateTimeFormat(modelValue.getPattern(),locale == null ? null : locale.toString());
        formatSetValid=true;
      }
      if (formatSetValid)       style.setProperty(StyleUtil.customName2Index.get(propertyName),formatSet);
    }
  }
}",0.9890927119484384
68897,"protected SplitResult _split(int height,boolean force) throws BirtException {
  if (children.size() == 0) {
    if (isPageBreakBeforeAvoid() && !force) {
      updateChildrenPosition();
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      updateChildrenPosition();
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  BlockContainerArea newContainer=null;
  int status=SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL;
  int cheight=getContentHeight(height);
  ListIterator iter=children.listIterator();
  int contentHeight=0;
  ArrayList result=new ArrayList();
  ContainerArea current=null;
  ContainerArea previous=null;
  while (iter.hasNext()) {
    previous=current;
    current=(ContainerArea)iter.next();
    int ah=current.getAllocatedHeight();
    contentHeight+=ah;
    if (contentHeight <= cheight && current.finished) {
      result.add(current);
      continue;
    }
 else {
      contentHeight-=ah;
      int childSplitHeight=cheight - contentHeight;
      SplitResult splitResult=current.split(childSplitHeight,force && !isValidResult(result));
      if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        ContainerArea splitChildArea=splitResult.getResult();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        contentHeight+=splitChildArea.getAllocatedHeight();
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
        if (force) {
          if (result.size() > 0) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          }
        }
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        if (isValidResult(result)) {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (previous.isPageBreakAfterAvoid()) {
              status=SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL;
              break;
            }
 else {
              status=SplitResult.SPLIT_SUCCEED_WITH_PART;
              break;
            }
          }
        }
 else {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (isPageBreakBeforeAvoid()) {
              return SplitResult.BEFORE_AVOID_WITH_NULL;
            }
 else {
              return SplitResult.SUCCEED_WITH_NULL;
            }
          }
        }
      }
    }
  }
  if (result.size() == children.size()) {
    status=SplitResult.SPLIT_SUCCEED_WITH_PART;
  }
  if (!force && status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
    iter.previous();
    while (iter.hasPrevious()) {
      current=(ContainerArea)iter.previous();
      int ah=current.getAllocatedHeight();
      SplitResult splitResult=current.splitLines(1);
      if (splitResult.status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
        result.remove(current);
        contentHeight-=ah;
        continue;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        result.remove(current);
        ContainerArea splitChildArea=splitResult.getResult();
        contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        result.remove(current);
        int preIndex=iter.previousIndex();
        if (preIndex >= 0) {
          ContainerArea prev=(ContainerArea)children.get(preIndex);
          if (prev.isPageBreakAfterAvoid()) {
            continue;
          }
 else {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
        }
 else {
          if (isPageBreakBeforeAvoid()) {
            return SplitResult.BEFORE_AVOID_WITH_NULL;
          }
 else {
            return SplitResult.SUCCEED_WITH_NULL;
          }
        }
      }
    }
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
  }
  if (status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
    if (isValidResult(result)) {
      newContainer=getSplitArea(result,contentHeight);
    }
 else {
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  if (newContainer != null) {
    addRepeatedItem();
    updateChildrenPosition();
  }
  return new SplitResult(newContainer,status);
}","protected SplitResult _split(int height,boolean force) throws BirtException {
  if (children.size() == 0) {
    if (isPageBreakBeforeAvoid() && !force) {
      updateChildrenPosition();
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      updateChildrenPosition();
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  BlockContainerArea newContainer=null;
  int status=SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL;
  int cheight=getContentHeight(height);
  ListIterator iter=children.listIterator();
  int contentHeight=0;
  ArrayList result=new ArrayList();
  ContainerArea current=null;
  ContainerArea previous=null;
  while (iter.hasNext()) {
    previous=current;
    current=(ContainerArea)iter.next();
    int ah=current.getAllocatedHeight();
    contentHeight+=ah;
    if (contentHeight <= cheight && current.finished) {
      result.add(current);
      continue;
    }
 else {
      contentHeight-=ah;
      int childSplitHeight=cheight - contentHeight;
      SplitResult splitResult=current.split(childSplitHeight,force && !isValidResult(result));
      if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        ContainerArea splitChildArea=splitResult.getResult();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        contentHeight+=splitChildArea.getAllocatedHeight();
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
        if (force) {
          if (result.size() > 0) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          }
        }
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        if (isValidResult(result)) {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (previous.isPageBreakAfterAvoid()) {
              status=SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL;
              break;
            }
 else {
              status=SplitResult.SPLIT_SUCCEED_WITH_PART;
              break;
            }
          }
        }
 else {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (isPageBreakBeforeAvoid()) {
              return SplitResult.BEFORE_AVOID_WITH_NULL;
            }
 else {
              return SplitResult.SUCCEED_WITH_NULL;
            }
          }
        }
      }
    }
  }
  if (result.size() == children.size()) {
    status=SplitResult.SPLIT_SUCCEED_WITH_PART;
  }
  if (!force && status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
    iter.previous();
    while (iter.hasPrevious()) {
      current=(ContainerArea)iter.previous();
      int ah=current.getAllocatedHeight();
      SplitResult splitResult=current.splitLines(1);
      if (splitResult.status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
        result.remove(current);
        contentHeight-=ah;
        continue;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        result.remove(current);
        ContainerArea splitChildArea=splitResult.getResult();
        contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        result.remove(current);
        int preIndex=iter.previousIndex();
        if (preIndex >= 0) {
          ContainerArea prev=(ContainerArea)children.get(preIndex);
          if (prev.isPageBreakAfterAvoid()) {
            continue;
          }
 else {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
        }
 else {
          if (isPageBreakBeforeAvoid()) {
            return SplitResult.BEFORE_AVOID_WITH_NULL;
          }
 else {
            return SplitResult.SUCCEED_WITH_NULL;
          }
        }
      }
    }
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
  }
  if (status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
    if (isValidResult(result) || force) {
      newContainer=getSplitArea(result,contentHeight);
    }
 else {
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  if (newContainer != null) {
    addRepeatedItem();
    updateChildrenPosition();
  }
  return new SplitResult(newContainer,status);
}",0.9990062934746604
68898,"public void generatePageRowHints(Collection<String> keys){
  pageRangeUnresolvedRowHints.clear();
  Iterator<String> iter=keys.iterator();
  while (iter.hasNext()) {
    String key=iter.next();
    UnresolvedRowHint hint=docRangeUnresolvedRowHints.get(key);
    if (hint != null) {
      pageRangeUnresolvedRowHints.add(hint);
    }
  }
}","public void generatePageRowHints(Collection<String> keys){
  lastPageUnresolvedRowHints.clear();
  Iterator<String> iter=keys.iterator();
  while (iter.hasNext()) {
    String key=iter.next();
    UnresolvedRowHint hint=parallelPagesUnresolvedRowHints.get(key);
    if (hint != null) {
      lastPageUnresolvedRowHints.put(key,hint);
    }
  }
}",0.8550512445095169
68899,"public List<UnresolvedRowHint> getUnresolvedRowHints(){
  return pageRangeUnresolvedRowHints;
}","public HashMap<String,UnresolvedRowHint> getUnresolvedRowHints(){
  return lastPageUnresolvedRowHints;
}",0.864321608040201
68900,"public UnresolvedRowHint getUnresolvedRowHint(String key){
  if (docRangeUnresolvedRowHints.size() > 0) {
    return docRangeUnresolvedRowHints.get(key);
  }
  return null;
}","public UnresolvedRowHint getUnresolvedRowHint(String key){
  if (parallelPagesUnresolvedRowHints.size() > 0) {
    return parallelPagesUnresolvedRowHints.get(key);
  }
  return null;
}",0.9162011173184358
68901,"public void setLayoutPageHint(IPageHint pageHint){
  if (pageHint != null) {
    context.pageNumber=pageHint.getPageNumber();
    context.masterPage=pageHint.getMasterPage();
    int count=pageHint.getTableColumnHintCount();
    for (int i=0; i < count; i++) {
      columnHints.add(pageHint.getTableColumnHint(i));
    }
    count=pageHint.getUnresolvedRowCount();
    if (count > 0) {
      for (int i=0; i < count; i++) {
        UnresolvedRowHint hint=pageHint.getUnresolvedRowHint(i);
        String key=getHintMapKey(hint.getTableId());
        docRangeUnresolvedRowHints.put(key,hint);
      }
    }
    for (int i=0; i < pageHint.getSectionCount(); i++) {
      PageSection section=pageHint.getSection(i);
      if (section instanceof SizeBasedPageSection) {
        SizeBasedPageSection sizeBasedSection=(SizeBasedPageSection)section;
        if (sizeBasedSection.start.dimension != -1) {
          InstanceID startID=sizeBasedSection.starts[sizeBasedSection.starts.length - 1].getInstanceID();
          if (startID != null) {
            sizeBasedContentMapping.put(startID.toUniqueString(),sizeBasedSection.start);
          }
        }
        if (sizeBasedSection.end.dimension != -1) {
          InstanceID endID=sizeBasedSection.ends[sizeBasedSection.ends.length - 1].getInstanceID();
          if (endID != null) {
            sizeBasedContentMapping.put(endID.toUniqueString(),sizeBasedSection.end);
          }
        }
      }
    }
  }
}","public void setLayoutPageHint(IPageHint pageHint){
  if (pageHint != null) {
    context.pageNumber=pageHint.getPageNumber();
    context.masterPage=pageHint.getMasterPage();
    int count=pageHint.getTableColumnHintCount();
    for (int i=0; i < count; i++) {
      columnHints.add(pageHint.getTableColumnHint(i));
    }
    count=pageHint.getUnresolvedRowCount();
    if (count > 0) {
      for (int i=0; i < count; i++) {
        UnresolvedRowHint hint=pageHint.getUnresolvedRowHint(i);
        String key=getHintMapKey(hint.getTableId());
        parallelPagesUnresolvedRowHints.put(key,hint);
      }
    }
    for (int i=0; i < pageHint.getSectionCount(); i++) {
      PageSection section=pageHint.getSection(i);
      if (section instanceof SizeBasedPageSection) {
        SizeBasedPageSection sizeBasedSection=(SizeBasedPageSection)section;
        if (sizeBasedSection.start.dimension != -1) {
          InstanceID startID=sizeBasedSection.starts[sizeBasedSection.starts.length - 1].getInstanceID();
          if (startID != null) {
            sizeBasedContentMapping.put(startID.toUniqueString(),sizeBasedSection.start);
          }
        }
        if (sizeBasedSection.end.dimension != -1) {
          InstanceID endID=sizeBasedSection.ends[sizeBasedSection.ends.length - 1].getInstanceID();
          if (endID != null) {
            sizeBasedContentMapping.put(endID.toUniqueString(),sizeBasedSection.end);
          }
        }
      }
    }
  }
}",0.9928156004105372
68902,"public void resetRowHint(){
  if (!context.emptyPage) {
    docRangeUnresolvedRowHints.clear();
    docRangeUnresolvedRowHints.putAll(currentPageUnresolvedRowHints);
    currentPageUnresolvedRowHints.clear();
  }
}","public void resetRowHint(){
  if (!context.emptyPage) {
    parallelPagesUnresolvedRowHints.clear();
    parallelPagesUnresolvedRowHints.putAll(currentPageUnresolvedRowHints);
    currentPageUnresolvedRowHints.clear();
  }
}",0.9041095890410958
68903,"protected void end(boolean finished) throws BirtException {
  if (emitter != null) {
    context.getPageBufferManager().endContainer(pageContent,finished,emitter,true);
    context.getBufferFactory().close();
  }
  context.getPageHintManager().resetRowHint();
  context.setEmptyPage(false);
}","protected void end(boolean finished) throws BirtException {
  if (!finished) {
    context.getPageHintManager().resetRowHint();
  }
  if (emitter != null) {
    context.getPageBufferManager().endContainer(pageContent,finished,emitter,true);
    context.getBufferFactory().close();
  }
  context.setEmptyPage(false);
}",0.8045977011494253
68904,"public void outputColumns(int[] width){
  writer.openTag(""String_Node_Str"");
  if (width == null) {
    return;
  }
  for (int i=0; i < width.length; i++) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",width[i] / 1000);
    writer.closeTag(""String_Node_Str"");
  }
}","public void outputColumns(int[] width){
  writer.openTag(""String_Node_Str"");
  if (width == null) {
    return;
  }
  for (int i=0; i < width.length; i++) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",width[i] / 1000);
    writer.attribute(""String_Node_Str"",0);
    writer.closeTag(""String_Node_Str"");
  }
}",0.9327073552425664
68905,"public void pageActivated(){
  getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
  initColumnNames();
  setPageProperties();
  viewer.getViewer().getTable().select(0);
}","public void pageActivated(){
  getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
  if (viewer != null && this.modelChanged) {
    initializeFilters();
    initColumnNames();
    setPageProperties();
    viewer.getViewer().setInput(filters);
    viewer.getViewer().getTable().select(0);
    modelChanged=false;
  }
}",0.7392857142857143
68906,"public void pageActivated(){
  getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
  if (viewer != null && this.modelChanged) {
    initializeFilters();
    initColumnNames();
    setPageProperties();
    viewer.getViewer().setInput(filters);
    viewer.getViewer().getTable().select(0);
    modelChanged=false;
  }
}","public void pageActivated(){
  getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
  initializeFilters();
  initColumnNames();
  setPageProperties();
  viewer.getViewer().setInput(filters);
  viewer.getViewer().getTable().select(0);
}",0.8667736757624398
68907,"public static ColumnsInfo createTable(ITableContent table,int width){
  int tableWidth=getElementWidth(table,width);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      if (ExcelUtil.convertDimensionType(value,tableWidth) > 576000) {
        System.out.println(""String_Node_Str"");
      }
      columns[i]=ExcelUtil.convertDimensionType(value,tableWidth);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth != 0 && unassignedCount == 0) {
    int totalResized=0;
    for (int i=0; i < columnCount - 1; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
      totalResized+=columns[i];
    }
    columns[columnCount - 1]=tableWidth - totalResized;
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    int totalResized=0;
    int lastAssignedIndex=0;
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1) {
        columns[1]=0;
      }
 else {
        columns[i]=resize(columns[i],totalAssigned,leftWidth);
        lastAssignedIndex=i;
      }
      totalResized+=columns[i];
    }
    columns[lastAssignedIndex]+=tableWidth - totalResized;
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}","public static ColumnsInfo createTable(ITableContent table,int width){
  int tableWidth=getElementWidth(table,width);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      if (ExcelUtil.convertDimensionType(value,tableWidth) > 576000) {
        System.out.println(""String_Node_Str"");
      }
      columns[i]=ExcelUtil.convertDimensionType(value,tableWidth);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth != 0 && unassignedCount == 0) {
    int totalResized=0;
    for (int i=0; i < columnCount - 1; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
      totalResized+=columns[i];
    }
    columns[columnCount - 1]=tableWidth - totalResized;
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    int totalResized=0;
    int lastAssignedIndex=0;
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1) {
        columns[i]=0;
      }
 else {
        columns[i]=resize(columns[i],totalAssigned,leftWidth);
        lastAssignedIndex=i;
      }
      totalResized+=columns[i];
    }
    columns[lastAssignedIndex]+=tableWidth - totalResized;
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}",0.9994416527079844
68908,"public int read(byte[] b) throws IOException {
  return read(b,0,b.length);
}","public int read() throws IOException {
  byte[] b=new byte[1];
  int len=read(b);
  if (len < 0) {
    return -1;
  }
  return b[0] & 0xff;
}",0.5045871559633027
68909,"/** 
 * Reads up to <code>b.length</code> bytes of data from this object  into an array of bytes. This method blocks until at least one byte  of input is available. 
 * @param b   the buffer into which the data is read.
 * @return     the total number of bytes read into the buffer, or<code>-1</code> if there is no more data because the end of this object has been reached.
 * @exception IOException  if an I/O error occurs.
 */
public int read(byte b[]) throws IOException ;",public int read() throws IOException ;,0.1478599221789883
68910,"public int read(byte[] b) throws IOException {
  return inputStream.read(b);
}","public int read() throws IOException {
  return inputStream.read();
}",0.9387755102040816
68911,"public int read(byte[] b) throws IOException {
  throw new UnsupportedOperationException();
}","public int read() throws IOException {
  throw new UnsupportedOperationException();
}",0.9550561797752808
68912,"/** 
 */
public Bytes readBytes() throws IOException {
  long start=delegate.getFilePointer();
  if (start == 226) {
    start=delegate.getFilePointer();
  }
  byte[] b=new byte[readInt()];
  read(b,0,b.length);
  return new Bytes(b);
}","/** 
 */
public Bytes readBytes() throws IOException {
  long start=delegate.getFilePointer();
  if (start == 226) {
    start=delegate.getFilePointer();
  }
  int size=readInt();
  byte[] b=new byte[size];
  int totalReadSize=0;
  int readSize=read(b,0,b.length);
  totalReadSize=readSize;
  while (readSize != -1 && totalReadSize < size) {
    readSize=read(b,totalReadSize,size - totalReadSize);
    if (readSize != -1) {
      totalReadSize+=readSize;
    }
  }
  return new Bytes(b);
}",0.6253443526170799
68913,"public int read(byte[] b) throws IOException {
  return randomAccessFile.read(b);
}","public int read() throws IOException {
  return randomAccessFile.read();
}",0.9426751592356688
68914,"public Object[] getElements(Object inputElement){
  List elements=new ArrayList();
  if (inputElement instanceof ExtendedItemHandle) {
    int selectedIndex=editor.cmbExpList.getSelectionIndex();
    if (selectedIndex >= 0) {
      String scriptName=editor.cmbExpList.getItem(editor.cmbExpList.getSelectionIndex());
      ExtendedItemHandle extHandle=(ExtendedItemHandle)inputElement;
      List methods=extHandle.getMethods(scriptName);
      if (methods != null) {
        elements.add(0,Messages.getString(""String_Node_Str""));
        elements.addAll(methods);
      }
    }
  }
  return elements.toArray();
}","public Object[] getElements(Object inputElement){
  List elements=new ArrayList();
  if (inputElement instanceof ExtendedItemHandle) {
    int selectedIndex=editor.cmbExpList.getSelectionIndex();
    if (selectedIndex >= 0) {
      String scriptName=editor.cmbExpList.getItem(editor.cmbExpList.getSelectionIndex());
      ExtendedItemHandle extHandle=(ExtendedItemHandle)inputElement;
      List methods=extHandle.getMethods(scriptName);
      if (methods != null && methods.size() > 0) {
        elements.add(0,Messages.getString(""String_Node_Str""));
        elements.addAll(methods);
      }
    }
  }
  return elements.toArray();
}",0.9823434991974318
68915,"public static String getValidSheetName(String name){
  name=name.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (name.length() > 31) {
    logger.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str"");
    name=name.substring(0,30);
  }
  return name;
}","public static String getValidSheetName(String name){
  name=name.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (name.length() > 31) {
    logger.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str"");
    name=name.substring(0,31);
  }
  return name;
}",0.9962825278810408
68916,"public static ColumnsInfo createTable(ITableContent table,int width){
  int tableWidth=getElementWidth(table,width);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.covertDimensionType(value,tableWidth);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth != 0 && unassignedCount == 0) {
    for (int i=0; i < columnCount; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
    }
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1)       columns[1]=0;
 else       columns[i]=resize(columns[i],totalAssigned,leftWidth);
    }
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}","public static ColumnsInfo createTable(ITableContent table,int width){
  int tableWidth=getElementWidth(table,width);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.covertDimensionType(value,tableWidth);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth != 0 && unassignedCount == 0) {
    int totalResized=0;
    for (int i=0; i < columnCount - 1; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
      totalResized+=columns[i];
    }
    columns[columnCount - 1]=tableWidth - totalResized;
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    int totalResized=0;
    int lastAssignedIndex=0;
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1) {
        columns[1]=0;
      }
 else {
        columns[i]=resize(columns[i],totalAssigned,leftWidth);
        lastAssignedIndex=i;
      }
      totalResized+=columns[i];
    }
    columns[lastAssignedIndex]+=tableWidth - totalResized;
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}",0.8935323383084577
68917,"public boolean first(){
  try {
    initCubeCursor();
    mainEdgeCursor.first();
    if (subEdgeCursor != null) {
      subEdgeCursor.first();
    }
 else {
      bWithoutSub=true;
    }
    return true;
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
catch (  BirtException e) {
    logger.log(e);
  }
  return false;
}","public boolean first(){
  try {
    initCubeCursor();
    if (mainEdgeCursor.first()) {
      if (subEdgeCursor != null) {
        subEdgeCursor.first();
      }
 else {
        bWithoutSub=true;
      }
      return true;
    }
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
catch (  BirtException e) {
    logger.log(e);
  }
  return false;
}",0.8768328445747801
68918,"public boolean first(){
  try {
    initCubeCursor();
    mainEdgeCursor.first();
    fMainPositionNodes.updatePosition();
    if (subEdgeCursor != null) {
      subEdgeCursor.first();
      fSubPositionNodes.updatePosition();
    }
 else {
      bWithoutSub=true;
    }
    return true;
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
catch (  BirtException e) {
    logger.log(e);
  }
  return false;
}","public boolean first(){
  try {
    initCubeCursor();
    if (mainEdgeCursor.first()) {
      fMainPositionNodes.updatePosition();
      if (subEdgeCursor != null) {
        subEdgeCursor.first();
        fSubPositionNodes.updatePosition();
      }
 else {
        bWithoutSub=true;
      }
      return true;
    }
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
catch (  BirtException e) {
    logger.log(e);
  }
  return false;
}",0.8967136150234741
68919,"private void outputImageSource(ArrayImageSource imageSource){
  int originalWidth=imageSource.getWidth();
  int originalHeight=imageSource.getHeight();
  try {
    ByteArrayOutputStream originalSource=new ByteArrayOutputStream();
    for (int i=0; i < originalHeight; i++) {
      for (int j=0; j < originalWidth; j++) {
        int pixel=imageSource.getRGB(j,i);
        int alpha=(pixel >> 24) & 0xff;
        int red=(pixel >> 16) & 0xff;
        int green=(pixel >> 8) & 0xff;
        int blue=pixel & 0xff;
        originalSource.write(transferColor(alpha,red));
        originalSource.write(transferColor(alpha,green));
        originalSource.write(transferColor(alpha,blue));
      }
    }
    byte[] byteArray=deflate(originalSource.toByteArray());
    out.print(Util.toHexString(byteArray) + ""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void outputImageSource(ArrayImageSource imageSource){
  int originalWidth=imageSource.getWidth();
  int originalHeight=imageSource.getHeight();
  byte[] buffer=new byte[3 * originalHeight * originalWidth];
  int index=0;
  for (int i=0; i < originalHeight; i++) {
    for (int j=0; j < originalWidth; j++) {
      int pixel=imageSource.getRGB(j,i);
      int alpha=(pixel >> 24) & 0xff;
      int red=(pixel >> 16) & 0xff;
      int green=(pixel >> 8) & 0xff;
      int blue=pixel & 0xff;
      buffer[index++]=(byte)transferColor(alpha,red);
      buffer[index++]=(byte)transferColor(alpha,green);
      buffer[index++]=(byte)transferColor(alpha,blue);
    }
  }
  try {
    buffer=deflate(buffer);
    out.print(Util.toHexString(buffer) + ""String_Node_Str"");
  }
 catch (  IOException e) {
    log.log(Level.WARNING,e.getLocalizedMessage(),e);
  }
}",0.5043078690407812
68920,"private void addLookupForOrthogonalSeries(SeriesDefinition baseSD,EList<SeriesDefinition> lstOrthogonalSDs,IActionEvaluator iae) throws ChartException {
  for (int k=0; k < lstOrthogonalSDs.size(); k++) {
    SeriesDefinition orthoSD=lstOrthogonalSDs.get(k);
    Query qOrthogonalSeriesDefinition=orthoSD.getQuery();
    if (qOrthogonalSeriesDefinition == null) {
      return;
    }
    String strOrthoAgg=getOrthogonalAggregationExpression(orthoSD);
    addDataExp(qOrthogonalSeriesDefinition.getDefinition(),strOrthoAgg);
    String ySortKey=getSortKey(orthoSD);
    Series seOrthogonal=orthoSD.getDesignTimeSeries();
    EList<Query> elOrthogonalSeries=seOrthogonal.getDataDefinition();
    if (elOrthogonalSeries.isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(k),seOrthogonal},Messages.getResourceBundle(this.locale));
    }
    boolean bAnyQueries=false;
    for (int i=0; i < elOrthogonalSeries.size(); i++) {
      Query qOrthogonalSeries=elOrthogonalSeries.get(i);
      if (qOrthogonalSeries == null) {
        continue;
      }
      if (addDataExp(valueSeriesExprBuilder.buildExpr(qOrthogonalSeries,orthoSD,baseSD),strOrthoAgg)) {
        bAnyQueries=true;
        if (fBaseSortExprIndex < 0) {
          String sortExpr=getSortKey(baseSD);
          if (sortExpr != null && sortExpr.equals(qOrthogonalSeries.getDefinition()) && baseSD.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
            fBaseSortExprIndex=findIndex(valueSeriesExprBuilder.buildExpr(qOrthogonalSeries,orthoSD,baseSD),strOrthoAgg);
          }
        }
        if (fYSortExprIndex < 0) {
          if (ySortKey != null && ySortKey.equals(qOrthogonalSeries.getDefinition()) && orthoSD.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
            fYSortExprIndex=findIndex(valueSeriesExprBuilder.buildExpr(qOrthogonalSeries,orthoSD,baseSD),strOrthoAgg);
          }
        }
      }
    }
    if (fYSortExprIndex < 0) {
      addDataExp(ySortKey,""String_Node_Str"");
      fYSortExprIndex=findIndexOfBaseSeries(ySortKey);
    }
    if (!bAnyQueries) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(k),seOrthogonal},Messages.getResourceBundle(this.locale));
    }
    String[] triggerExprs=DataProcessor.getSeriesTriggerExpressions(seOrthogonal,iae,baseSD,orthoSD);
    if (triggerExprs != null) {
      for (int t=0; t < triggerExprs.length; t++) {
        addDataExp(triggerExprs[t],strOrthoAgg);
      }
    }
  }
}","private void addLookupForOrthogonalSeries(SeriesDefinition baseSD,EList<SeriesDefinition> lstOrthogonalSDs,IActionEvaluator iae) throws ChartException {
  for (int k=0; k < lstOrthogonalSDs.size(); k++) {
    SeriesDefinition orthoSD=lstOrthogonalSDs.get(k);
    Query qOrthogonalSeriesDefinition=orthoSD.getQuery();
    if (qOrthogonalSeriesDefinition == null) {
      return;
    }
    String strOrthoAgg=getOrthogonalAggregationExpression(orthoSD);
    addDataExp(qOrthogonalSeriesDefinition.getDefinition(),strOrthoAgg);
    String ySortKey=getSortKey(orthoSD);
    Series seOrthogonal=orthoSD.getDesignTimeSeries();
    EList<Query> elOrthogonalSeries=seOrthogonal.getDataDefinition();
    if (elOrthogonalSeries.isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(k),seOrthogonal},Messages.getResourceBundle(this.locale));
    }
    boolean bAnyQueries=false;
    for (int i=0; i < elOrthogonalSeries.size(); i++) {
      Query qOrthogonalSeries=elOrthogonalSeries.get(i);
      if (qOrthogonalSeries == null) {
        continue;
      }
      if (addDataExp(valueSeriesExprBuilder.buildExpr(qOrthogonalSeries,orthoSD,baseSD),strOrthoAgg)) {
        bAnyQueries=true;
        if (fBaseSortExprIndex < 0) {
          String sortExpr=getSortKey(baseSD);
          if (sortExpr != null && sortExpr.equals(qOrthogonalSeries.getDefinition()) && baseSD.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
            fBaseSortExprIndex=findIndex(valueSeriesExprBuilder.buildExpr(qOrthogonalSeries,orthoSD,baseSD),strOrthoAgg);
          }
        }
        if (fYSortExprIndex < 0) {
          if (ySortKey != null && ySortKey.equals(qOrthogonalSeries.getDefinition()) && orthoSD.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
            fYSortExprIndex=findIndex(valueSeriesExprBuilder.buildExpr(qOrthogonalSeries,orthoSD,baseSD),strOrthoAgg);
          }
        }
      }
    }
    if (fYSortExprIndex < 0 && qOrthogonalSeriesDefinition.getDefinition() != null && qOrthogonalSeriesDefinition.getDefinition().trim().length() > 0) {
      addDataExp(ySortKey,""String_Node_Str"");
      fYSortExprIndex=findIndexOfBaseSeries(ySortKey);
    }
    if (!bAnyQueries) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(k),seOrthogonal},Messages.getResourceBundle(this.locale));
    }
    String[] triggerExprs=DataProcessor.getSeriesTriggerExpressions(seOrthogonal,iae,baseSD,orthoSD);
    if (triggerExprs != null) {
      for (int t=0; t < triggerExprs.length; t++) {
        addDataExp(triggerExprs[t],strOrthoAgg);
      }
    }
  }
}",0.977102102102102
68921,"public static List getSelectValueFromBinding(String expression,DataSetHandle dataSetHandle,Iterator binding,boolean inclFilter) throws BirtException {
}","/** 
 * Used in filter select value dialog in layout.
 * @param expression
 * @param dataSetHandle
 * @param binding
 * @param inclFilter
 * @return
 * @throws BirtException
 */
public static List getSelectValueFromBinding(Expression expression,DataSetHandle dataSetHandle,Iterator binding,boolean inclFilter) throws BirtException {
}",0.5925925925925926
68922,"/** 
 * @param selectValueExpression
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
public static List getSelectValueList(String expression,DataSetHandle dataSetHandle) throws BirtException {
  return getSelectValueList(expression,dataSetHandle,true);
}","/** 
 * @param selectValueExpression
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
public static List getSelectValueList(Expression expression,DataSetHandle dataSetHandle) throws BirtException {
  return getSelectValueList(expression,dataSetHandle,true);
}",0.9705882352941176
68923,"private JavascriptContext createJsContext(ScriptContext context){
  ScriptContext parent=context.getParent();
  Scriptable parentJsScope=global;
  if (parent != null) {
    JavascriptContext parentJsContext=(JavascriptContext)parent.getScriptContext(JavascriptEngineFactory.SCRIPT_JAVASCRIPT);
    if (parentJsContext == null) {
      parentJsContext=createJsContext(parent);
    }
    parentJsScope=parentJsContext.getScope();
  }
  Object scope=context.getScopeObject();
  Scriptable jsScope=createJsScope(parentJsScope,scope);
  JavascriptContext jsContext=new JavascriptContext(context,jsScope);
  Map<String,Object> attrs=context.getAttributes();
  for (  Entry<String,Object> entry : attrs.entrySet()) {
    jsContext.setAttribute(entry.getKey(),entry.getValue());
  }
  context.setScriptContext(JavascriptEngineFactory.SCRIPT_JAVASCRIPT,jsContext);
  return jsContext;
}","private JavascriptContext createJsContext(ScriptContext context){
  ScriptContext parent=context.getParent();
  Scriptable parentJsScope=global;
  if (parent != null) {
    JavascriptContext parentJsContext=(JavascriptContext)parent.getScriptContext(JavascriptEngineFactory.SCRIPT_JAVASCRIPT);
    if (parentJsContext == null) {
      parentJsContext=createJsContext(parent);
    }
    parentJsScope=parentJsContext.getScope();
  }
  Object scope=context.getScopeObject();
  Scriptable jsScope=createJsScope(parentJsScope,scope);
  JavascriptContext jsContext=new JavascriptContext(context,jsScope);
  if (parent == null) {
    this.context.evaluateString(jsScope,""String_Node_Str"",""String_Node_Str"",-1,null);
  }
  Map<String,Object> attrs=context.getAttributes();
  for (  Entry<String,Object> entry : attrs.entrySet()) {
    jsContext.setAttribute(entry.getKey(),entry.getValue());
  }
  context.setScriptContext(JavascriptEngineFactory.SCRIPT_JAVASCRIPT,jsContext);
  return jsContext;
}",0.9389721627408992
68924,"/** 
 * @param dimFilterList
 * @return
 * @throws IOException
 * @throws DataException
 */
private IDiskArray getDimFilterPositions(List dimFilterList) throws IOException, DataException {
  IDiskArray result=new BufferedPrimitiveDiskArray(Math.min(dimPosition.size(),Constants.LIST_BUFFER_SIZE));
  for (int i=0; i < dimPosition.size(); i++) {
    Integer pos=(Integer)dimPosition.get(i);
    if (isDimPositionSelected(pos.intValue(),dimFilterList))     result.add(pos);
  }
  return result;
}","/** 
 * @param dimFilterList
 * @return
 * @throws IOException
 * @throws DataException
 */
private IDiskArray getDimFilterPositions(List dimFilterList) throws IOException, DataException {
  IDiskArray result=new BufferedPrimitiveDiskArray(Math.min(dimPosition.size(),Constants.LIST_BUFFER_SIZE));
  for (int i=0; i < dimPosition.size(); i++) {
    Integer pos=(Integer)dimPosition.get(i);
    if (dimFilterList.size() == 0) {
      result.add(pos);
    }
 else     if (isDimPositionSelected(pos.intValue(),dimFilterList)) {
      result.add(pos);
    }
  }
  return result;
}",0.8560747663551402
68925,"public Object getAdapter(Class adapter){
  if (adapter == ActionRegistry.class) {
    return scriptEditor.getActionRegistry();
  }
 else   if (adapter == PalettePage.class) {
    if (cmbExprListViewer != null) {
      cmbExprListViewer.addSelectionChangedListener(palettePage.getSupport());
    }
    return palettePage;
  }
  if (adapter == IContentOutlinePage.class) {
    DesignerOutlinePage outlinePage=new DesignerOutlinePage(SessionHandleAdapter.getInstance().getReportDesignHandle());
    return outlinePage;
  }
  if (adapter == IPropertySheetPage.class) {
    ReportPropertySheetPage sheetPage=new ReportPropertySheetPage(SessionHandleAdapter.getInstance().getReportDesignHandle());
    return sheetPage;
  }
  if (adapter == DataViewPage.class) {
    DataViewTreeViewerPage page=new DataViewTreeViewerPage(SessionHandleAdapter.getInstance().getReportDesignHandle());
    return page;
  }
  if (adapter == AttributeViewPage.class) {
    AttributeViewPage page=new AttributeViewPage();
    return page;
  }
  if (adapter == ITextEditor.class) {
    return scriptEditor;
  }
  return super.getAdapter(adapter);
}","public Object getAdapter(Class adapter){
  if (adapter == ActionRegistry.class) {
    return scriptEditor.getActionRegistry();
  }
 else   if (adapter == PalettePage.class) {
    if (cmbExprListViewer != null) {
      cmbExprListViewer.addSelectionChangedListener(palettePage.getSupport());
    }
    palettePage.setViewer(getViewer());
    return palettePage;
  }
  if (adapter == IContentOutlinePage.class) {
    DesignerOutlinePage outlinePage=new DesignerOutlinePage(SessionHandleAdapter.getInstance().getReportDesignHandle());
    return outlinePage;
  }
  if (adapter == IPropertySheetPage.class) {
    ReportPropertySheetPage sheetPage=new ReportPropertySheetPage(SessionHandleAdapter.getInstance().getReportDesignHandle());
    return sheetPage;
  }
  if (adapter == DataViewPage.class) {
    DataViewTreeViewerPage page=new DataViewTreeViewerPage(SessionHandleAdapter.getInstance().getReportDesignHandle());
    return page;
  }
  if (adapter == AttributeViewPage.class) {
    AttributeViewPage page=new AttributeViewPage();
    return page;
  }
  if (adapter == ITextEditor.class) {
    return scriptEditor;
  }
  return super.getAdapter(adapter);
}",0.9824407374890256
68926,"/** 
 * Creates the palette viewer and its control.
 * @see Page#createControl(org.eclipse.swt.widgets.Composite)
 */
public void createControl(Composite parent){
  if (getViewer() == null) {
    return;
  }
  tree=new Tree(parent,SWT.NONE);
  treeCommon.setTree(tree);
  treeCommon.setExpressionViewer(getViewer());
  treeCommon.createDefaultExpressionTree();
  treeCommon.addMouseTrackListener();
  treeCommon.addMouseListener();
  treeCommon.addDragSupportToTree();
  treeCommon.addDropSupportToViewer();
  tree.setToolTipText(""String_Node_Str"");
  tree.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      treeCommon.removeDropSupportToViewer();
    }
  }
);
}","/** 
 * Creates the palette viewer and its control.
 * @see Page#createControl(org.eclipse.swt.widgets.Composite)
 */
public void createControl(Composite parent){
  tree=new Tree(parent,SWT.NONE);
  treeCommon.setTree(tree);
  treeCommon.setExpressionViewer(targetViewer);
  treeCommon.createDefaultExpressionTree();
  treeCommon.addMouseTrackListener();
  treeCommon.addMouseListener();
  treeCommon.addDragSupportToTree();
  treeCommon.addDropSupportToViewer();
  tree.setToolTipText(""String_Node_Str"");
  tree.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      treeCommon.removeDropSupportToViewer();
    }
  }
);
}",0.9637155297532656
68927,"public Object getAdapter(Class adapter){
  if (adapter == ActionRegistry.class) {
    return jsEditor.getAdapter(ActionRegistry.class);
  }
  if (adapter == PalettePage.class) {
    return jsEditor.getAdapter(PalettePage.class);
  }
  if (adapter == IContentOutlinePage.class) {
    DesignerOutlinePage outlinePage=new DesignerOutlinePage(getModel());
    getModelEventManager().addModelEventProcessor(outlinePage.getModelProcessor());
    return outlinePage;
  }
  if (adapter == DataViewPage.class) {
    DataViewTreeViewerPage page=new DataViewTreeViewerPage(getModel());
    getModelEventManager().addModelEventProcessor(page.getModelProcessor());
    return page;
  }
  return jsEditor.getAdapter(adapter);
}","public Object getAdapter(Class adapter){
  if (adapter == ActionRegistry.class) {
    return jsEditor.getAdapter(ActionRegistry.class);
  }
  if (adapter == PalettePage.class) {
    return jsEditor.getAdapter(PalettePage.class);
  }
  if (adapter == IContentOutlinePage.class) {
    DesignerOutlinePage outlinePage=new DesignerOutlinePage(getModel());
    getModelEventManager().addModelEventProcessor(outlinePage.getModelProcessor());
    return outlinePage;
  }
  if (adapter == DataViewPage.class) {
    DataViewTreeViewerPage page=new DataViewTreeViewerPage(getModel());
    getModelEventManager().addModelEventProcessor(page.getModelProcessor());
    return page;
  }
  if (adapter == IPropertySheetPage.class) {
    ReportPropertySheetPage sheetPage=new ReportPropertySheetPage(getModel());
    return sheetPage;
  }
  return jsEditor.getAdapter(adapter);
}",0.9048223350253808
68928,"private void buildParameterTree(){
  for (Iterator iterator=SessionHandleAdapter.getInstance().getReportDesignHandle().getParameters().iterator(); iterator.hasNext(); ) {
    ReportElementHandle handle=(ReportElementHandle)iterator.next();
    if (handle instanceof ParameterHandle) {
      createSubTreeItem(parametersItem,DEUtil.getDisplayLabel(handle,false),ReportPlatformUIImages.getImage(handle),DEUtil.getExpression(handle),((ParameterHandle)handle).getHelpText(),true);
    }
 else     if (handle instanceof ParameterGroupHandle) {
      TreeItem groupItem=createSubTreeItem(parametersItem,DEUtil.getDisplayLabel(handle,false),ReportPlatformUIImages.getImage(handle),true);
      for (Iterator itor=((ParameterGroupHandle)handle).getParameters().iterator(); itor.hasNext(); ) {
        ParameterHandle parameter=(ParameterHandle)itor.next();
        createSubTreeItem(groupItem,parameter.getDisplayLabel(),ReportPlatformUIImages.getImage(handle),DEUtil.getExpression(parameter),parameter.getDisplayLabel(),true);
      }
    }
  }
}","private void buildParameterTree(){
  ModuleHandle module=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (module == null) {
    return;
  }
  for (Iterator iterator=module.getParameters().iterator(); iterator.hasNext(); ) {
    ReportElementHandle handle=(ReportElementHandle)iterator.next();
    if (handle instanceof ParameterHandle) {
      createSubTreeItem(parametersItem,DEUtil.getDisplayLabel(handle,false),ReportPlatformUIImages.getImage(handle),DEUtil.getExpression(handle),((ParameterHandle)handle).getHelpText(),true);
    }
 else     if (handle instanceof ParameterGroupHandle) {
      TreeItem groupItem=createSubTreeItem(parametersItem,DEUtil.getDisplayLabel(handle,false),ReportPlatformUIImages.getImage(handle),true);
      for (Iterator itor=((ParameterGroupHandle)handle).getParameters().iterator(); itor.hasNext(); ) {
        ParameterHandle parameter=(ParameterHandle)itor.next();
        createSubTreeItem(groupItem,parameter.getDisplayLabel(),ReportPlatformUIImages.getImage(handle),DEUtil.getExpression(parameter),parameter.getDisplayLabel(),true);
      }
    }
  }
}",0.946927374301676
68929,"/** 
 * Update query by specified expression. <p> Under shared binding case, update grouping/aggregate attributes of chart model if the selected item is group/aggregate expression.
 */
public void updateQuery(String expression){
  if (getInputControl() instanceof CCombo) {
    String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
    Object checkResult=context.getDataServiceProvider().checkData(queryType,expression);
    if (checkResult != null && checkResult instanceof Boolean) {
      if (!((Boolean)checkResult).booleanValue()) {
        setUIText(getInputControl(),oldQuery);
        return;
      }
    }
  }
  if (!isTableSharedBinding()) {
    setQueryExpression(expression);
    return;
  }
  updateQueryForSharedBinding(expression);
  String regex=""String_Node_Str"";
  if (expression.matches(regex)) {
    DataDefinitionTextManager.getInstance().updateControlBackground(getInputControl(),expression);
    final Event e=new Event();
    e.data=BaseDataDefinitionComponent.this;
    e.widget=getInputControl();
    e.type=IChartDataSheet.EVENT_QUERY;
    e.detail=IChartDataSheet.DETAIL_UPDATE_COLOR;
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        context.getDataSheet().notifyListeners(e);
      }
    }
);
  }
 else {
    getInputControl().setBackground(null);
  }
}","/** 
 * Update query by specified expression. <p> Under shared binding case, update grouping/aggregate attributes of chart model if the selected item is group/aggregate expression.
 */
public void updateQuery(String expression){
  if (getInputControl() instanceof CCombo) {
    String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
    Object checkResult=context.getDataServiceProvider().checkData(queryType,expression);
    if (checkResult != null && checkResult instanceof Boolean) {
      if (!((Boolean)checkResult).booleanValue()) {
        setUIText(getInputControl(),oldQuery);
        return;
      }
    }
  }
  if (!isTableSharedBinding()) {
    setQueryExpression(expression);
    return;
  }
  updateQueryForSharedBinding(expression);
  String regex=""String_Node_Str"";
  if (expression.matches(regex)) {
    DataDefinitionTextManager.getInstance().updateText(query);
    final Event e=new Event();
    e.data=BaseDataDefinitionComponent.this;
    e.widget=getInputControl();
    e.type=IChartDataSheet.EVENT_QUERY;
    e.detail=IChartDataSheet.DETAIL_UPDATE_COLOR;
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        context.getDataSheet().notifyListeners(e);
      }
    }
);
  }
 else {
    getInputControl().setBackground(null);
  }
}",0.9790419161676648
68930,"/** 
 * Binding color to specified control.
 * @param control
 * @param expression
 * @since 2.5
 */
public void updateControlBackground(Control control,String expression){
  ColorPalette.getInstance().putColor(expression);
  control.setBackground(ColorPalette.getInstance().getColor(expression));
}","/** 
 * Binding color to specified control.
 * @param control
 * @param expression
 * @since 2.5
 */
private void updateControlBackground(Control control,String expression){
  ColorPalette.getInstance().putColor(expression);
  control.setBackground(ColorPalette.getInstance().getColor(expression));
}",0.9816360601001668
68931,"public void addDataDefinitionText(Control text,IQueryExpressionManager queryManager){
  textCollection.put(text,queryManager);
}","public void addDataDefinitionText(Control text,IQueryExpressionManager queryManager){
  textCollection.put(text,queryManager);
  text.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      if (e.widget instanceof Control) {
        removeDataDefinitionText((Control)e.widget);
      }
    }
  }
);
}",0.5423728813559322
68932,"public void updateQuery(Control control){
  if (textCollection.containsKey(control)) {
    IQueryExpressionManager queryManager=textCollection.get(control);
    queryManager.updateQuery(ChartUIUtil.getText(control));
    adjustScaleData(queryManager.getQuery());
    updateControlBackground(control,ChartUIUtil.getText(control));
  }
}","public void updateQuery(Control control){
  if (textCollection.containsKey(control)) {
    IQueryExpressionManager queryManager=textCollection.get(control);
    queryManager.updateQuery(ChartUIUtil.getText(control));
    adjustScaleData(queryManager.getQuery());
    if (control.isDisposed()) {
      control=findText(queryManager.getQuery());
    }
    if (control != null) {
      updateControlBackground(control,ChartUIUtil.getText(control));
    }
  }
}",0.8459595959595959
68933,"private JavascriptContext createJsContext(ScriptContext context){
  ScriptContext parent=context.getParent();
  Scriptable parentJsScope=global;
  if (parent != null) {
    JavascriptContext parentJsContext=(JavascriptContext)parent.getScriptContext(JavascriptEngineFactory.SCRIPT_JAVASCRIPT);
    if (parentJsContext == null) {
      parentJsContext=createJsContext(parent);
    }
    parentJsScope=parentJsContext.getScope();
  }
  Object scope=context.getScopeObject();
  Scriptable jsScope=createJsScope(parentJsScope,scope);
  JavascriptContext jsContext=new JavascriptContext(context,jsScope);
  if (parent == null) {
    this.context.evaluateString(jsScope,""String_Node_Str"",""String_Node_Str"",-1,null);
  }
  Map<String,Object> attrs=context.getAttributes();
  for (  Entry<String,Object> entry : attrs.entrySet()) {
    jsContext.setAttribute(entry.getKey(),entry.getValue());
  }
  context.setScriptContext(JavascriptEngineFactory.SCRIPT_JAVASCRIPT,jsContext);
  return jsContext;
}","private JavascriptContext createJsContext(ScriptContext context){
  ScriptContext parent=context.getParent();
  Scriptable parentJsScope=global;
  if (parent != null) {
    JavascriptContext parentJsContext=(JavascriptContext)parent.getScriptContext(JavascriptEngineFactory.SCRIPT_JAVASCRIPT);
    if (parentJsContext == null) {
      parentJsContext=createJsContext(parent);
    }
    parentJsScope=parentJsContext.getScope();
  }
  Object scope=context.getScopeObject();
  Scriptable jsScope=createJsScope(parentJsScope,scope);
  JavascriptContext jsContext=new JavascriptContext(context,jsScope);
  if (parent == null) {
    this.context.evaluateString(jsScope,""String_Node_Str"",""String_Node_Str"",1,null);
  }
  Map<String,Object> attrs=context.getAttributes();
  for (  Entry<String,Object> entry : attrs.entrySet()) {
    jsContext.setAttribute(entry.getKey(),entry.getValue());
  }
  context.setScriptContext(JavascriptEngineFactory.SCRIPT_JAVASCRIPT,jsContext);
  return jsContext;
}",0.9994952044422007
68934,"private void initializeScriptContext(){
  scriptContext=new ScriptContext();
  if (engine != null) {
    EngineConfig config=engine.getConfig();
    IStatusHandler statusHandler=config.getStatusHandler();
    if (statusHandler != null) {
      scriptContext.setAttribute(""String_Node_Str"",statusHandler);
    }
  }
  scriptContext.setLocale(ulocale.toLocale());
  scriptContext.setAttribute(""String_Node_Str"",new ReportObject());
  scriptContext.setAttribute(""String_Node_Str"",params);
  scriptContext.setAttribute(""String_Node_Str"",configs);
  scriptContext.setAttribute(""String_Node_Str"",new Long(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",new Long(totalPage));
  scriptContext.setAttribute(""String_Node_Str"",this);
  scriptContext.setAttribute(""String_Node_Str"",pageVariables);
  if (runnable != null) {
    registerDesign(runnable);
  }
  if (reportContext != null) {
    scriptContext.setAttribute(""String_Node_Str"",reportContext);
  }
  scriptContext.setAttribute(""String_Node_Str"",new Long(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",new Long(totalPage));
  if (task != null) {
    IStatusHandler handler=task.getStatusHandler();
    if (handler != null) {
      handler.initialize();
      scriptContext.setAttribute(""String_Node_Str"",handler);
    }
  }
  if (transientBeans != null) {
    Iterator entries=transientBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      scriptContext.setAttribute((String)entry.getKey(),entry.getValue());
    }
  }
  if (persistentBeans != null) {
    Iterator entries=persistentBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      registerInRoot((String)entry.getKey(),entry.getValue());
    }
  }
  scriptContext.setApplicationClassLoader(getApplicationClassLoader());
}","private void initializeScriptContext(){
  scriptContext=new ScriptContext();
  if (engine != null) {
    EngineConfig config=engine.getConfig();
    IStatusHandler statusHandler=config.getStatusHandler();
    if (statusHandler != null) {
      scriptContext.setAttribute(""String_Node_Str"",statusHandler);
    }
  }
  scriptContext.setLocale(ulocale.toLocale());
  scriptContext.setAttribute(""String_Node_Str"",new ReportObject());
  scriptContext.setAttribute(""String_Node_Str"",params);
  scriptContext.setAttribute(""String_Node_Str"",configs);
  scriptContext.setAttribute(""String_Node_Str"",new Long(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",new Long(totalPage));
  scriptContext.setAttribute(""String_Node_Str"",this);
  scriptContext.setAttribute(""String_Node_Str"",pageVariables);
  if (runnable != null) {
    registerDesign(runnable);
  }
  if (reportContext != null) {
    scriptContext.setAttribute(""String_Node_Str"",reportContext);
  }
  scriptContext.setAttribute(""String_Node_Str"",new Long(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",new Long(totalPage));
  if (task != null) {
    IStatusHandler handler=task.getStatusHandler();
    if (handler == null) {
      handler=engine.getConfig().getStatusHandler();
    }
    if (handler != null) {
      handler.initialize();
      scriptContext.setAttribute(""String_Node_Str"",handler);
    }
  }
  if (transientBeans != null) {
    Iterator entries=transientBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      scriptContext.setAttribute((String)entry.getKey(),entry.getValue());
    }
  }
  if (persistentBeans != null) {
    Iterator entries=persistentBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      registerInRoot((String)entry.getKey(),entry.getValue());
    }
  }
  scriptContext.setApplicationClassLoader(getApplicationClassLoader());
}",0.9775808133472368
68935,"/** 
 * Returns if the current region contains given x,y.
 * @param x
 * @param y
 * @param gc
 * @return if the current region contains given x,y
 */
public boolean contains(double x,double y,GC gc){
  if (_bb != null) {
    return _bb.contains((int)x,(int)y);
  }
  return false;
}","/** 
 * Returns if the current region contains given x,y.
 * @param x
 * @param y
 * @param gc
 * @return if the current region contains given x,y
 */
public boolean contains(double x,double y,GC gc){
  if (region != null) {
    return region.contains((int)x,(int)y);
  }
  return false;
}",0.9685314685314684
68936,"/** 
 * Returns if current region is empty.
 * @return if current region is empty
 */
public boolean isEmpty(){
  if (_bb != null) {
    return _bb.isEmpty();
  }
  return true;
}","/** 
 * Returns if current region is empty.
 * @return if current region is empty
 */
public boolean isEmpty(){
  if (region != null) {
    return region.isEmpty();
  }
  return true;
}",0.9505494505494504
68937,"/** 
 * This constructor supports shape definition via an elliptical arc
 * @param oSource
 * @param boEllipse
 * @param dStart
 * @param dExtent
 * @param iArcType
 * @param ac
 */
RegionAction(StructureSource oSource,Bounds boEllipse,double dStart,double dExtent,boolean bSector,Action ac,double dTranslateX,double dTranslateY,double dScale,Region clipping){
  _oSource=oSource;
  boEllipse=goFactory.copyOf(boEllipse);
  boEllipse.translate(dTranslateX,dTranslateY);
  boEllipse.scale(dScale);
  double x=boEllipse.getLeft();
  double y=boEllipse.getTop();
  double width=boEllipse.getWidth();
  double height=boEllipse.getHeight();
  Path ph=new Path(Display.getDefault());
  ph.addArc((float)x,(float)y,(float)width,(float)height,(float)dStart,(float)dExtent);
  if (bSector) {
    ph.lineTo((float)(x + width / 2),(float)(y + height / 2));
  }
  ph.close();
  if (clipping != null) {
  }
  _ac=ac;
  float[] b=new float[4];
  ph.getBounds(b);
  _bb=new Rectangle((int)b[0],(int)b[1],(int)b[2],(int)b[3]);
  ph.dispose();
}","/** 
 * This constructor supports shape definition via an elliptical arc
 * @param oSource
 * @param boEllipse
 * @param dStart
 * @param dExtent
 * @param iArcType
 * @param ac
 */
RegionAction(StructureSource oSource,Bounds boEllipse,double dStart,double dExtent,int iArcType,Action ac,double dTranslateX,double dTranslateY,double dScale,Region clipping){
  _oSource=oSource;
  boEllipse=goFactory.copyOf(boEllipse);
  boEllipse.translate(dTranslateX,dTranslateY);
  boEllipse.scale(dScale);
  Shape shape=new Arc2D.Double(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight(),dStart,dExtent,toSwingArcType(iArcType));
  int[] i2a=shape2polyCoords(shape);
  Region sh=new Region();
  sh.add(i2a);
  if (clipping != null) {
    sh.intersect(clipping);
  }
  _ac=ac;
  this.region=sh;
}",0.5852334419109664
68938,"/** 
 * Dispose the resources.
 */
public void dispose(){
}","/** 
 * Dispose the resources.
 */
public void dispose(){
  if (region != null) {
    region.dispose();
  }
}",0.7023809523809523
68939,"/** 
 * Note the Region object is value copied, others are just reference copy. <b>The invoker must call <code>dispose()</code> explicitly when this is not used anymore</b>.
 * @return A copy of current RegionAction
 */
public RegionAction copy(){
  Rectangle nbb=null;
  if (_bb != null) {
    nbb=new Rectangle(_bb.x,_bb.y,_bb.width,_bb.height);
  }
  return new RegionAction(_oSource,nbb,_ac);
}","/** 
 * Note the Region object is value copied, others are just reference copy. <b>The invoker must call <code>dispose()</code> explicitly when this is not used anymore</b>.
 * @return A copy of current RegionAction
 */
public RegionAction copy(){
  return new RegionAction(_oSource,region,_ac);
}",0.7424460431654676
68940,"public void enableInteraction(InteractionEvent iev) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  final Trigger[] tga=iev.getTriggers();
  if (tga == null) {
    return;
  }
  Region clipping=new Region();
  _gc.getClipping(clipping);
  TriggerCondition tc;
  List<RegionAction> al;
  final PrimitiveRenderEvent pre=iev.getHotSpot();
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),loa,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds bo=((RectangleRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),boEllipse,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    final Bounds boEllipse=are.getEllipseBounds();
    double dStart=are.getStartAngle();
    double dExtent=are.getAngleExtent();
    int iArcType=are.getStyle();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),boEllipse,dStart,dExtent,iArcType == ArcRenderEvent.SECTOR,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
 else   if (pre instanceof AreaRenderEvent) {
    final Bounds bo=((AreaRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
  clipping.dispose();
}","public void enableInteraction(InteractionEvent iev) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  final Trigger[] tga=iev.getTriggers();
  if (tga == null) {
    return;
  }
  Region clipping=new Region();
  _gc.getClipping(clipping);
  TriggerCondition tc;
  List<RegionAction> al;
  final PrimitiveRenderEvent pre=iev.getHotSpot();
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),loa,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds bo=((RectangleRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),boEllipse,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    final Bounds boEllipse=are.getEllipseBounds();
    double dStart=are.getStartAngle();
    double dExtent=are.getAngleExtent();
    int iArcType=are.getStyle();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),boEllipse,dStart,dExtent,iArcType,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
 else   if (pre instanceof AreaRenderEvent) {
    final Bounds bo=((AreaRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      RegionAction ra=new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping);
      ra.setCursor(iev.getCursor());
      al.add(ra);
    }
  }
  clipping.dispose();
}",0.9400030688967316
68941,"public void testExecute() throws Exception {
  Document doc=getDomTree();
  HashMap styles=new HashMap();
  new HTMLProcessor((ReportDesignHandle)null,null).execute((Element)doc.getFirstChild(),styles);
  Element iEle=(Element)doc.getFirstChild().getFirstChild();
  assertEquals(iEle.getTagName(),""String_Node_Str"");
  assertEquals(""String_Node_Str"",getStyle(styles,iEle,""String_Node_Str""));
  Element fontEle=(Element)iEle.getNextSibling();
  assertEquals(fontEle.getTagName(),""String_Node_Str"");
  assertEquals(""String_Node_Str"",getStyle(styles,fontEle,""String_Node_Str""));
  assertEquals(""String_Node_Str"",getStyle(styles,fontEle,""String_Node_Str""));
  assertEquals(""String_Node_Str"",getStyle(styles,fontEle,""String_Node_Str""));
  Element uEle=(Element)fontEle.getNextSibling();
  assertEquals(uEle.getTagName(),""String_Node_Str"");
  assertEquals(""String_Node_Str"",getStyle(styles,uEle,""String_Node_Str""));
}","public void testExecute() throws Exception {
  Document doc=getDomTree();
  HashMap styles=new HashMap();
  new HTMLProcessor((ReportDesignHandle)null,null).execute((Element)doc.getFirstChild(),styles);
  Element iEle=(Element)doc.getFirstChild().getFirstChild();
  assertEquals(iEle.getTagName(),""String_Node_Str"");
  assertEquals(""String_Node_Str"",getStyle(styles,iEle,""String_Node_Str""));
  Element fontEle=(Element)iEle.getNextSibling();
  assertEquals(fontEle.getTagName(),""String_Node_Str"");
  assertEquals(""String_Node_Str"",getStyleAttribute(fontEle,""String_Node_Str""));
  assertEquals(""String_Node_Str"",getStyleAttribute(fontEle,""String_Node_Str""));
  assertEquals(""String_Node_Str"",getStyleAttribute(fontEle,""String_Node_Str""));
  Element uEle=(Element)fontEle.getNextSibling();
  assertEquals(uEle.getTagName(),""String_Node_Str"");
  assertEquals(""String_Node_Str"",getStyle(styles,uEle,""String_Node_Str""));
}",0.7111597374179431
68942,"/** 
 * Parses the style attribute of the element node and converts the deprecated element node in HTML 4.0, and calls it on its children element nodes recursively
 * @param ele the element node in the DOM tree
 * @param text the text content object
 */
public void execute(Element ele,HashMap styles){
  HashMap cssStyle=new HashMap();
  if (ele.hasAttribute(""String_Node_Str"")) {
    String inlineStyle=ele.getAttribute(""String_Node_Str"");
    if (null != inlineStyle && !""String_Node_Str"".equals(inlineStyle)) {
      StringBuffer buffer=new StringBuffer();
      Matcher matcher=pattern.matcher(inlineStyle);
      while (matcher.find()) {
        String name=matcher.group(1);
        String value=matcher.group(2);
        if (name != null && name.length() > 0 && value != null && value.length() > 0) {
          cssStyle.put(name,value);
        }
      }
      ele.removeAttribute(""String_Node_Str"");
      String src=(String)cssStyle.get(""String_Node_Str"");
      if (src != null) {
        if (src.startsWith(""String_Node_Str"") && src.length() > 5) {
          src=src.substring(4,src.length() - 1);
        }
 else         if ((src.startsWith(""String_Node_Str"") || src.startsWith(""String_Node_Str"")) && src.length() > 2) {
          src=src.substring(1,src.length() - 1);
        }
        if (design != null) {
          URL url=design.findResource(src,IResourceLocator.IMAGE,appContext);
          if (url != null) {
            src=url.toExternalForm();
          }
        }
        if (rootPath != null) {
          if (FileUtil.isLocalResource(src)) {
            src=FileUtil.getAbsolutePath(rootPath,src);
          }
        }
        if (src != null) {
          cssStyle.put(""String_Node_Str"",src);
        }
 else {
          cssStyle.remove(""String_Node_Str"");
        }
      }
    }
    if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
      addToStyle(cssStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
      if (ele.hasAttribute(""String_Node_Str"")) {
        try {
          int size=Integer.parseInt(ele.getAttribute(""String_Node_Str""));
          addToStyle(cssStyle,""String_Node_Str"",FONT_SIZE[size + 7]);
        }
 catch (        Exception e) {
          logger.log(Level.SEVERE,""String_Node_Str"");
        }
      }
      ele.removeAttribute(""String_Node_Str"");
      ele.removeAttribute(""String_Node_Str"");
      ele.removeAttribute(""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      String decoration=(String)cssStyle.get(""String_Node_Str"");
      if (decoration != null && decoration.indexOf(""String_Node_Str"") == -1 && decoration.indexOf(""String_Node_Str"") == -1 && decoration.indexOf(""String_Node_Str"") == -1) {
        decoration=decoration + ""String_Node_Str"";
      }
 else       if (decoration == null) {
        decoration=""String_Node_Str"";
      }
      cssStyle.put(""String_Node_Str"",decoration);
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      String src=ele.getAttribute(""String_Node_Str"");
      if (src != null) {
        if ((src.startsWith(""String_Node_Str"") || src.startsWith(""String_Node_Str"")) && src.length() > 2) {
          src=src.substring(1,src.length() - 1);
        }
        if (design != null) {
          URL url=design.findResource(src,IResourceLocator.IMAGE,appContext);
          if (url != null) {
            src=url.toExternalForm();
          }
        }
        if (rootPath != null) {
          if (FileUtil.isLocalResource(src)) {
            src=FileUtil.getAbsolutePath(rootPath,src);
          }
        }
        if (src != null) {
          ele.removeAttribute(""String_Node_Str"");
          ele.setAttribute(""String_Node_Str"",src);
        }
      }
    }
    styles.put(ele,cssStyle);
  }
  for (int i=0; i < ele.getChildNodes().getLength(); i++) {
    Node child=ele.getChildNodes().item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      execute((Element)child,styles);
    }
  }
}","/** 
 * Parses the style attribute of the element node and converts the deprecated element node in HTML 4.0, and calls it on its children element nodes recursively
 * @param ele the element node in the DOM tree
 * @param text the text content object
 */
public void execute(Element ele,HashMap styles){
  HashMap cssStyle=new HashMap();
  if (ele.hasAttribute(""String_Node_Str"")) {
    String inlineStyle=ele.getAttribute(""String_Node_Str"");
    if (null != inlineStyle && !""String_Node_Str"".equals(inlineStyle)) {
      StringBuffer buffer=new StringBuffer();
      Matcher matcher=pattern.matcher(inlineStyle);
      while (matcher.find()) {
        String name=matcher.group(1);
        String value=matcher.group(2);
        if (name != null && name.length() > 0 && value != null && value.length() > 0) {
          cssStyle.put(name,value.trim());
        }
      }
      ele.removeAttribute(""String_Node_Str"");
      String src=(String)cssStyle.get(""String_Node_Str"");
      if (src != null) {
        if (src.startsWith(""String_Node_Str"") && src.length() > 5) {
          src=src.substring(4,src.length() - 1);
        }
 else         if ((src.startsWith(""String_Node_Str"") || src.startsWith(""String_Node_Str"")) && src.length() > 2) {
          src=src.substring(1,src.length() - 1);
        }
        if (design != null) {
          URL url=design.findResource(src,IResourceLocator.IMAGE,appContext);
          if (url != null) {
            src=url.toExternalForm();
          }
        }
        if (rootPath != null) {
          if (FileUtil.isLocalResource(src)) {
            src=FileUtil.getAbsolutePath(rootPath,src);
          }
        }
        if (src != null) {
          cssStyle.put(""String_Node_Str"",src);
        }
 else {
          cssStyle.remove(""String_Node_Str"");
        }
      }
    }
    if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
      addToStyle(cssStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
      if (ele.hasAttribute(""String_Node_Str"")) {
        try {
          int size=Integer.parseInt(ele.getAttribute(""String_Node_Str""));
          addToStyle(cssStyle,""String_Node_Str"",FONT_SIZE[size + 7]);
        }
 catch (        Exception e) {
          logger.log(Level.SEVERE,""String_Node_Str"");
        }
      }
      ele.removeAttribute(""String_Node_Str"");
      ele.removeAttribute(""String_Node_Str"");
      ele.removeAttribute(""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      String decoration=(String)cssStyle.get(""String_Node_Str"");
      if (decoration != null && decoration.indexOf(""String_Node_Str"") == -1 && decoration.indexOf(""String_Node_Str"") == -1 && decoration.indexOf(""String_Node_Str"") == -1) {
        decoration=decoration + ""String_Node_Str"";
      }
 else       if (decoration == null) {
        decoration=""String_Node_Str"";
      }
      cssStyle.put(""String_Node_Str"",decoration);
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      String src=ele.getAttribute(""String_Node_Str"");
      if (src != null) {
        if ((src.startsWith(""String_Node_Str"") || src.startsWith(""String_Node_Str"")) && src.length() > 2) {
          src=src.substring(1,src.length() - 1);
        }
        if (design != null) {
          URL url=design.findResource(src,IResourceLocator.IMAGE,appContext);
          if (url != null) {
            src=url.toExternalForm();
          }
        }
        if (rootPath != null) {
          if (FileUtil.isLocalResource(src)) {
            src=FileUtil.getAbsolutePath(rootPath,src);
          }
        }
        if (src != null) {
          ele.removeAttribute(""String_Node_Str"");
          ele.setAttribute(""String_Node_Str"",src);
        }
      }
    }
    styles.put(ele,cssStyle);
  }
  for (int i=0; i < ele.getChildNodes().getLength(); i++) {
    Node child=ele.getChildNodes().item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      execute((Element)child,styles);
    }
  }
}",0.9992517370390166
68943,"private void setFont(String psName,float size){
  out.println(""String_Node_Str"" + psName + ""String_Node_Str""+ size+ ""String_Node_Str"");
}","private void setFont(String font,float size){
  if (needSetFont(font,size)) {
    setCurrentGraphic(font,size);
    out.println(""String_Node_Str"" + font + ""String_Node_Str""+ size+ ""String_Node_Str"");
  }
}",0.5146198830409356
68944,"private String applyFont(String fontName,int fontStyle,float fontSize,String text){
  if (isIntrinsicFont(fontName)) {
    return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
  }
 else {
    try {
      String fontPath=getFontPath(fontName);
      if (fontPath == null) {
        return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
      }
      ITrueTypeWriter trueTypeWriter=getTrueTypeFontWriter(fontPath);
      String displayName=fontName.replace(' ','_');
      trueTypeWriter.useDisplayName(displayName);
      trueTypeWriter.ensureGlyphsAvailable(text);
      setFont(displayName,fontSize);
      return trueTypeWriter.toHexString(text);
    }
 catch (    Exception e) {
      log.log(Level.WARNING,""String_Node_Str"" + fontName);
    }
    return null;
  }
}","private String applyFont(String fontName,int fontStyle,float fontSize,String text){
  if (isIntrinsicFont(fontName)) {
    return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
  }
 else {
    try {
      String fontPath=getFontPath(fontName);
      if (fontPath == null) {
        return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
      }
      ITrueTypeWriter trueTypeWriter=getTrueTypeFontWriter(fontPath,fontName);
      trueTypeWriter.ensureGlyphsAvailable(text);
      String displayName=trueTypeWriter.getDisplayName();
      setFont(displayName,fontSize);
      return trueTypeWriter.toHexString(text);
    }
 catch (    Exception e) {
      log.log(Level.WARNING,""String_Node_Str"" + fontName);
    }
    return null;
  }
}",0.8949771689497716
68945,"private void outputColor(Color c){
  if (c == null) {
    return;
  }
  out.print(c.getRed() / 255.0);
  out.print(""String_Node_Str"");
  out.print(c.getGreen() / 255.0);
  out.print(""String_Node_Str"");
  out.print(c.getBlue() / 255.0);
  out.print(""String_Node_Str"");
}","private void outputColor(Color c){
  if (c == null) {
    c=Color.black;
  }
  Graphic currentGraphic=getCurrentGraphic();
  if (c.equals(currentGraphic.color)) {
    return;
  }
  currentGraphic.color=c;
  out.print(c.getRed() / 255.0);
  out.print(""String_Node_Str"");
  out.print(c.getGreen() / 255.0);
  out.print(""String_Node_Str"");
  out.print(c.getBlue() / 255.0);
  out.print(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.743988684582744
68946,"public void clipRestore(){
  out.println(""String_Node_Str"");
}","public void clipRestore(){
  out.println(""String_Node_Str"");
  graphics.pop();
}",0.8732394366197183
68947,"public void drawString(String str,float x,float y,FontInfo fontInfo,float letterSpacing,float wordSpacing,Color color,boolean linethrough,boolean overline,boolean underline,CSSValue align){
  y=transformY(y);
  String text=str;
  String drawCommand=""String_Node_Str"";
  boolean needSimulateItalic=false;
  if (fontInfo != null) {
    float fontSize=fontInfo.getFontSize();
    int fontStyle=fontInfo.getFontStyle();
    if (fontInfo.getSimulation()) {
      if (fontStyle == Font.BOLD || fontStyle == Font.BOLDITALIC) {
        float offset=(float)(fontSize * Math.log10(fontSize) / 100);
        drawCommand=offset + ""String_Node_Str"";
      }
      if (fontStyle == Font.ITALIC || fontStyle == Font.BOLDITALIC) {
        needSimulateItalic=true;
      }
    }
    BaseFont baseFont=fontInfo.getBaseFont();
    String fontName=baseFont.getPostscriptFontName();
    text=applyFont(fontName,fontStyle,fontSize,text);
  }
  color=color == null ? Color.black : color;
  outputColor(color);
  out.print(x + ""String_Node_Str"" + y+ ""String_Node_Str"");
  out.print(wordSpacing + ""String_Node_Str"" + letterSpacing+ ""String_Node_Str"");
  out.println(text + ""String_Node_Str"" + needSimulateItalic+ ""String_Node_Str""+ drawCommand);
}","public void drawString(String str,float x,float y,FontInfo fontInfo,float letterSpacing,float wordSpacing,Color color,boolean linethrough,boolean overline,boolean underline,CSSValue align){
  y=transformY(y);
  String text=str;
  boolean needSimulateItalic=false;
  boolean needSimulateBold=false;
  boolean hasSpace=wordSpacing != 0 || letterSpacing != 0;
  float offset=0;
  if (fontInfo != null) {
    float fontSize=fontInfo.getFontSize();
    int fontStyle=fontInfo.getFontStyle();
    if (fontInfo.getSimulation()) {
      if (fontStyle == Font.BOLD || fontStyle == Font.BOLDITALIC) {
        offset=(float)(fontSize * Math.log10(fontSize) / 100);
        needSimulateBold=true;
      }
      if (fontStyle == Font.ITALIC || fontStyle == Font.BOLDITALIC) {
        needSimulateItalic=true;
      }
    }
    BaseFont baseFont=fontInfo.getBaseFont();
    String fontName=baseFont.getPostscriptFontName();
    text=applyFont(fontName,fontStyle,fontSize,text);
  }
  outputColor(color);
  out.print(x + ""String_Node_Str"" + y+ ""String_Node_Str"");
  if (hasSpace)   out.print(wordSpacing + ""String_Node_Str"" + letterSpacing+ ""String_Node_Str"");
  out.print(text + ""String_Node_Str"");
  if (needSimulateBold)   out.print(offset + ""String_Node_Str"");
  String command=getCommand(hasSpace,needSimulateBold,needSimulateItalic);
  out.println(command);
}",0.8032659409020217
68948,"public void clipSave(){
  out.println(""String_Node_Str"");
}","public void clipSave(){
  out.println(""String_Node_Str"");
  graphics.push(new Graphic());
}",0.7866666666666666
68949,"private ITrueTypeWriter getTrueTypeFontWriter(String fontPath) throws DocumentException, IOException {
  File file=new File(fontPath);
  ITrueTypeWriter trueTypeWriter=(ITrueTypeWriter)trueTypeFontWriters.get(file);
  if (trueTypeWriter != null) {
    return trueTypeWriter;
  }
 else {
    TrueTypeFont ttFont=TrueTypeFont.getInstance(fontPath);
    trueTypeWriter=ttFont.getTrueTypeWriter(out);
    trueTypeWriter.initialize();
    trueTypeFontWriters.put(file,trueTypeWriter);
    return trueTypeWriter;
  }
}","private ITrueTypeWriter getTrueTypeFontWriter(String fontPath,String fontName) throws DocumentException, IOException {
  File file=new File(fontPath);
  ITrueTypeWriter trueTypeWriter=(ITrueTypeWriter)trueTypeFontWriters.get(file);
  if (trueTypeWriter != null) {
    return trueTypeWriter;
  }
 else {
    TrueTypeFont ttFont=TrueTypeFont.getInstance(fontPath);
    trueTypeWriter=ttFont.getTrueTypeWriter(out);
    trueTypeWriter.initialize(fontName);
    trueTypeFontWriters.put(file,trueTypeWriter);
    return trueTypeWriter;
  }
}",0.9770992366412212
68950,"public void setColor(Color c){
  outputColor(c);
  out.println(""String_Node_Str"");
}","public void setColor(Color c){
  outputColor(c);
}",0.746268656716418
68951,"/** 
 * Gets the name of this element. The returned element name will be the same as <CODE>getName()</CODE>, plus the namespace of the module that the element is contained, if the element name resides in the whole design tree scope; otherwise we will append the name of the holder where the element name resides. If the element is existed in the current module,this method and <CODE>getName()</CODE> will return identical results.
 * @return the qualified name of the element.
 */
public String getQualifiedName(){
  String name=getElement().getFullName();
  if (name == null)   return null;
  Module rootElement=getElement().getRoot();
  if (rootElement instanceof Library) {
    String namespace=((Library)rootElement).getNamespace();
    return StringUtil.buildQualifiedReference(namespace,name);
  }
  return name;
}","/** 
 * Gets the name of this element. The returned element name will be the same as <CODE>getName()</CODE>, plus the namespace of the module that the element is contained, if the element name resides in the whole design tree scope; otherwise we will append the name of the holder where the element name resides. If the element is existed in the current module,this method and <CODE>getName()</CODE> will return identical results.
 * @return the qualified name of the element.
 */
public String getQualifiedName(){
  String name=getElement().getFullName();
  if (name == null)   return null;
  Module rootElement=getElement().getRoot();
  String namespace=rootElement.getNamespace();
  return StringUtil.buildQualifiedReference(namespace,name);
}",0.9310344827586208
68952,"private double getContentHeight(IContent content){
  return content.getHeight() == null ? 0 : ExcelUtil.covertDimensionType(content.getHeight(),0);
}","private double getContentHeight(IContent content){
  return content.getHeight() == null ? 0 : ExcelUtil.covertDimensionType(content.getHeight(),0) / 1000;
}",0.9770491803278688
68953,"public void endRow(IRowContent row){
  DimensionType height=row.getHeight();
  double rowHeight=height != null ? ExcelUtil.covertDimensionType(height,0) : 0;
  engine.endRow(rowHeight);
}","public void endRow(IRowContent row){
  DimensionType height=row.getHeight();
  double rowHeight=height != null ? ExcelUtil.covertDimensionType(height,0) / 1000 : 0;
  engine.endRow(rowHeight);
}",0.9816272965879264
68954,"public static int covertDimensionType(DimensionType value,int parent){
  if (DimensionType.UNITS_PERCENTAGE.equals(value.getUnits())) {
    return (int)(value.getMeasure() / 100 * parent);
  }
  if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * PX_PT);
  }
  if (DimensionType.UNITS_EM.equalsIgnoreCase(value.getUnits()) || DimensionType.UNITS_EX.equalsIgnoreCase(value.getUnits())) {
    return (int)value.getMeasure() * 12;
  }
 else {
    return (int)(value.convertTo(DimensionType.UNITS_PT));
  }
}","public static int covertDimensionType(DimensionType value,int parent){
  if (DimensionType.UNITS_PERCENTAGE.equals(value.getUnits())) {
    return (int)(value.getMeasure() / 100 * parent * 1000);
  }
  if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * PX_PT * 1000);
  }
  if (DimensionType.UNITS_EM.equalsIgnoreCase(value.getUnits()) || DimensionType.UNITS_EX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * 12 * 1000);
  }
 else {
    return (int)(value.convertTo(DimensionType.UNITS_PT) * 1000);
  }
}",0.9736842105263158
68955,"public void outputColumns(int[] width){
  writer.openTag(""String_Node_Str"");
  if (width == null) {
    return;
  }
  for (int i=0; i < width.length; i++) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",width[i]);
    writer.closeTag(""String_Node_Str"");
  }
}","public void outputColumns(int[] width){
  writer.openTag(""String_Node_Str"");
  if (width == null) {
    return;
  }
  for (int i=0; i < width.length; i++) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",width[i] / 1000);
    writer.closeTag(""String_Node_Str"");
  }
}",0.9881154499151104
68956,"private static int resize(int width,int total,int left){
  return (int)(width + (float)width / (float)total * left);
}","private static int resize(int width,int total,int left){
  return Math.round(width + (float)width / (float)total * left);
}",0.946058091286307
68957,"private void traverse(IArea area){
  if (area instanceof ContainerArea) {
    if (area instanceof TableArea) {
      tableIds.add(((TableArea)area).getContent().getInstanceID().toUniqueString());
    }
    ContainerArea container=(ContainerArea)area;
    if (container.content != null && !container.isDummy) {
      start(container);
    }
    if (!(container.content instanceof ForeignContent)) {
      for (Iterator<IArea> i=container.getChildren(); i.hasNext(); ) {
        IArea child=i.next();
        traverse(child);
      }
    }
  }
  String bookmark=area.getBookmark();
  if (bookmark != null) {
    context.addBookmarkMap(context.getPageNumber(),bookmark);
  }
}","private void traverse(IArea area){
  if (area instanceof ContainerArea) {
    if (area instanceof TableArea) {
      tableIds.add(((TableArea)area).getContent().getInstanceID().toUniqueString());
    }
    ContainerArea container=(ContainerArea)area;
    if (container.content != null && !container.isDummy && container.content.getInstanceID() != null) {
      start(container);
    }
    if (!(container.content instanceof ForeignContent)) {
      for (Iterator<IArea> i=container.getChildren(); i.hasNext(); ) {
        IArea child=i.next();
        traverse(child);
      }
    }
  }
  String bookmark=area.getBookmark();
  if (bookmark != null) {
    context.addBookmarkMap(context.getPageNumber(),bookmark);
  }
}",0.96764917325665
68958,"protected void addRows(ContainerArea container,TableLayout layout) throws BirtException {
  if (container instanceof RowArea) {
    RowArea row=(RowArea)container;
    if (row.needResolveBorder) {
      int size=row.getChildrenCount();
      for (int i=0; i < size; i++) {
        CellArea cell=(CellArea)row.getChild(i);
        int ch=cell.getContentHeight();
        cell.boxStyle.clearBorder();
        layout.resolveBorderConflict(cell,true);
        cell.setContentHeight(ch);
      }
      row.needResolveBorder=false;
    }
    if (row.finished) {
      if (row.getChildrenCount() != row.cells.length) {
        for (int i=0; i < row.cells.length; i++) {
          if (row.cells[i] instanceof DummyCell) {
            row.cells[i]=null;
          }
        }
      }
      int rh=row.getHeight();
      layout.addRow(row,context.isFixedLayout());
      int delta=row.getHeight() - rh;
      if (delta > 0) {
        ContainerArea rowParent=row.getParent();
        if (rowParent != null) {
          rowParent.updateChildrenPosition();
        }
      }
    }
  }
 else {
    int size=container.getChildrenCount();
    for (int i=0; i < size; i++) {
      ContainerArea child=(ContainerArea)container.getChild(i);
      addRows(child,layout);
      child.updateChildrenPosition();
    }
  }
}","protected void addRows(ContainerArea container,TableLayout layout) throws BirtException {
  if (container instanceof RowArea) {
    RowArea row=(RowArea)container;
    if (row.needResolveBorder) {
      int size=row.getChildrenCount();
      for (int i=0; i < size; i++) {
        CellArea cell=(CellArea)row.getChild(i);
        int ch=cell.getContentHeight();
        cell.boxStyle.clearBorder();
        layout.resolveBorderConflict(cell,true);
        cell.setContentHeight(ch);
      }
      row.needResolveBorder=false;
    }
    if (row.finished) {
      if (row.getChildrenCount() != row.cells.length) {
        for (int i=0; i < row.cells.length; i++) {
          if (row.cells[i] instanceof DummyCell) {
            row.cells[i]=null;
          }
        }
      }
      layout.addRow(row,context.isFixedLayout());
    }
  }
 else {
    int size=container.getChildrenCount();
    for (int i=0; i < size; i++) {
      ContainerArea child=(ContainerArea)container.getChild(i);
      addRows(child,layout);
      child.updateChildrenPosition();
    }
    container.updateChildrenPosition();
  }
}",0.8847274240532668
68959,"/** 
 * Creates dummy cell and updates its delta value.
 * @param upperCell the upper cell.
 * @return the created dummy cell.
 */
private DummyCell createDummyCell(CellArea upperCell){
  DummyCell dummyCell=null;
  CellArea refCell=null;
  RowArea lastRow=(RowArea)rows.getCurrent();
  int lastRowHeight=lastRow.getHeight();
  int delta=0;
  if (upperCell instanceof DummyCell) {
    refCell=((DummyCell)upperCell).getCell();
    dummyCell=new DummyCell(refCell);
    delta=((DummyCell)upperCell).getDelta() + lastRowHeight;
    dummyCell.setDelta(delta);
  }
 else {
    refCell=upperCell;
    dummyCell=new DummyCell(upperCell);
    dummyCell.setDelta(lastRowHeight);
  }
  dummyCell.setRowSpan(upperCell.getRowSpan() - 1);
  dummyCell.setColSpan(upperCell.getColSpan());
  return dummyCell;
}","/** 
 * Creates dummy cell and updates its delta value.
 * @param upperCell the upper cell.
 * @return the created dummy cell.
 */
private DummyCell createDummyCell(CellArea upperCell){
  DummyCell dummyCell=null;
  CellArea refCell=null;
  RowArea lastRow=(RowArea)rows.getCurrent();
  int lastRowHeight=lastRow.getHeight();
  int delta=0;
  if (upperCell instanceof DummyCell) {
    refCell=((DummyCell)upperCell).getCell();
    dummyCell=new DummyCell(refCell);
    delta=((DummyCell)upperCell).getDelta() + lastRowHeight;
    dummyCell.setDelta(delta);
  }
 else {
    refCell=upperCell;
    dummyCell=new DummyCell(upperCell);
    dummyCell.setDelta(lastRowHeight);
  }
  dummyCell.setRowSpan(upperCell.getRowSpan() - 1);
  dummyCell.setColSpan(upperCell.getColSpan());
  dummyCell.isDummy=true;
  return dummyCell;
}",0.9839307787391842
68960,"public void add(AbstractArea area){
  super.add(area);
  if (repeatList != null) {
    IContent content=((ContainerArea)area).getContent();
    if (content != null) {
      IElement parent=content.getParent();
      if (parent != null && parent instanceof IBandContent) {
        int type=((IBandContent)parent).getBandType();
        if (type == IBandContent.BAND_HEADER || type == IBandContent.BAND_GROUP_HEADER) {
          if (content instanceof IRowContent) {
            RowDesign rowDesign=(RowDesign)content.getGenerateBy();
            if (rowDesign == null || rowDesign.getRepeatable()) {
              repeatList.add(area);
            }
          }
 else {
            repeatList.add(area);
          }
        }
      }
    }
  }
}","public void add(AbstractArea area){
  super.add(area);
  if (repeatList != null && isInRepeatHeader(area)) {
    repeatList.add(area);
  }
}",0.2918552036199095
68961,"public void start(IReportContent report){
  setupRenderOptions();
  String reportOrientation=report.getDesign().getReportDesign().getBidiOrientation();
  if (""String_Node_Str"".equalsIgnoreCase(reportOrientation))   isRTLSheet=true;
  IStyle style=report.getRoot().getComputedStyle();
  SimpleMasterPageDesign master=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  engine=createLayoutEngine(context,this);
  engine.initalize(new PageDef(master,style));
  String reportTitle=report.getDesign().getReportDesign().getStringProperty(IModuleModel.TITLE_PROP);
  if (reportTitle != null) {
    reportTitle=reportTitle.replace(""String_Node_Str"",""String_Node_Str"");
    reportTitle=reportTitle.replace(""String_Node_Str"",""String_Node_Str"");
    sheetName=reportTitle;
  }
 else {
    sheetName=DEFAULT_SHEET_NAME;
  }
  createWriter();
}","public void start(IReportContent report){
  setupRenderOptions();
  String reportOrientation=report.getDesign().getReportDesign().getBidiOrientation();
  if (""String_Node_Str"".equalsIgnoreCase(reportOrientation))   isRTLSheet=true;
  IStyle style=report.getRoot().getComputedStyle();
  SimpleMasterPageDesign master=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  engine=createLayoutEngine(context,this);
  engine.initalize(new PageDef(master,style));
  String reportTitle=report.getDesign().getReportDesign().getStringProperty(IModuleModel.TITLE_PROP);
  if (reportTitle != null) {
    sheetName=reportTitle;
  }
 else {
    sheetName=DEFAULT_SHEET_NAME;
  }
  sheetName=ExcelUtil.getValidSheetName(sheetName);
  createWriter();
}",0.8763906056860321
68962,"public static DataItemHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  return InsertInLayoutUtil.performInsertDataSetColumn(model,target,targetParent);
}","public static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  return InsertInLayoutUtil.performInsertDataSetColumn(model,target,targetParent);
}",0.9591397849462364
68963,"private void writeBackGroudColor(StyleEntry style){
  Color bgColor=(Color)style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
  if (bgColor != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",bgColor);
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
}","private void writeBackGroudColor(StyleEntry style){
  Color bgColor=(Color)style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
  if (bgColor != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",toString(bgColor));
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
}",0.9660056657223796
68964,"/** 
 * Close the container tag.
 */
public void closeContainerTag(){
  writer.closeTag(HTMLTags.TAG_DIV);
  int display=((Integer)containerDisplayStack.pop()).intValue();
  if (((display & HTMLEmitterUtil.DISPLAY_INLINE) > 0) || ((display & HTMLEmitterUtil.DISPLAY_INLINE_BLOCK) > 0)) {
    closeInlineBoxTag();
  }
}","/** 
 * Close the container tag.
 */
public void closeContainerTag(){
  writer.closeTag(HTMLTags.TAG_DIV);
  int display=((Integer)containerDisplayStack.pop()).intValue();
  if (!reportEmitter.browserSupportsInlineBlock) {
    if (((display & HTMLEmitterUtil.DISPLAY_INLINE) > 0) || ((display & HTMLEmitterUtil.DISPLAY_INLINE_BLOCK) > 0)) {
      closeInlineBoxTag();
    }
  }
}",0.9124820659971306
68965,"/** 
 * Open the tag when implement the inline box.
 */
protected void openInlineBoxTag(){
  writer.openTag(HTMLTags.TAG_DIV);
  if (browserVersion == HTMLEmitterUtil.BROWSER_IE7) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
 else {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  writer.openTag(HTMLTags.TAG_TR);
  writer.openTag(HTMLTags.TAG_TD);
}","/** 
 * Open the tag when implement the inline box. This solution only works for IE5.5, IE6, IE7, Firefox1.5 and Firefox2.
 */
protected void openInlineBoxTag(){
  writer.openTag(HTMLTags.TAG_DIV);
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  writer.openTag(HTMLTags.TAG_TR);
  writer.openTag(HTMLTags.TAG_TD);
}",0.547645125958379
68966,"/** 
 * Open the container tag.
 */
public void openContainerTag(IContainerContent container){
  DimensionType x=container.getX();
  DimensionType y=container.getY();
  DimensionType width=container.getWidth();
  DimensionType height=container.getHeight();
  int display=getElementType(x,y,width,height,container.getStyle());
  containerDisplayStack.push(new Integer(display));
  if (((display & HTMLEmitterUtil.DISPLAY_INLINE) > 0) || ((display & HTMLEmitterUtil.DISPLAY_INLINE_BLOCK) > 0)) {
    openInlineBoxTag();
  }
  writer.openTag(HTMLTags.TAG_DIV);
}","/** 
 * Open the container tag.
 */
public void openContainerTag(IContainerContent container){
  DimensionType x=container.getX();
  DimensionType y=container.getY();
  DimensionType width=container.getWidth();
  DimensionType height=container.getHeight();
  int display=getElementType(x,y,width,height,container.getStyle());
  containerDisplayStack.push(new Integer(display));
  if (!reportEmitter.browserSupportsInlineBlock) {
    if (((display & HTMLEmitterUtil.DISPLAY_INLINE) > 0) || ((display & HTMLEmitterUtil.DISPLAY_INLINE_BLOCK) > 0)) {
      openInlineBoxTag();
    }
  }
  writer.openTag(HTMLTags.TAG_DIV);
}",0.9482612383375744
68967,"/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  boolean widthOutputFlag=false;
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
    widthOutputFlag=true;
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      boolean absoluteWidth=true;
      for (int i=0; i < table.getColumnCount(); i++) {
        IColumn column=table.getColumn(i);
        DimensionType columnWidth=column.getWidth();
        if (columnWidth == null) {
          absoluteWidth=false;
          break;
        }
 else {
          if (""String_Node_Str"".endsWith(columnWidth.getUnits())) {
            absoluteWidth=false;
            break;
          }
        }
      }
      if (!absoluteWidth) {
        styleBuffer.append(""String_Node_Str"");
        widthOutputFlag=true;
      }
    }
  }
  if (fixedReport) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      if (!widthOutputFlag) {
        styleBuffer.append(""String_Node_Str"");
      }
      styleBuffer.append(""String_Node_Str"");
    }
  }
  String value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    if (!reportEmitter.browserSupportsInlineBlock) {
      styleBuffer.append(""String_Node_Str"");
    }
 else {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  boolean widthOutputFlag=false;
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
    widthOutputFlag=true;
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      boolean absoluteWidth=true;
      for (int i=0; i < table.getColumnCount(); i++) {
        IColumn column=table.getColumn(i);
        DimensionType columnWidth=column.getWidth();
        if (columnWidth == null) {
          absoluteWidth=false;
          break;
        }
 else {
          if (""String_Node_Str"".endsWith(columnWidth.getUnits())) {
            absoluteWidth=false;
            break;
          }
        }
      }
      if (!absoluteWidth) {
        styleBuffer.append(""String_Node_Str"");
        widthOutputFlag=true;
      }
    }
  }
  if (fixedReport) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      if (!widthOutputFlag) {
        styleBuffer.append(""String_Node_Str"");
      }
      styleBuffer.append(""String_Node_Str"");
    }
  }
  String value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.973672663448881
68968,"/** 
 * Build the style of contianer content.
 */
public void buildContainerStyle(IContainerContent container,StringBuffer styleBuffer){
  int display=((Integer)containerDisplayStack.peek()).intValue();
  handleShrink(display,container.getStyle(),container.getHeight(),container.getWidth(),styleBuffer);
  setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  IStyle style=getElementStyle(container);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of contianer content.
 */
public void buildContainerStyle(IContainerContent container,StringBuffer styleBuffer){
  int display=((Integer)containerDisplayStack.peek()).intValue();
  handleShrink(display,container.getStyle(),container.getHeight(),container.getWidth(),styleBuffer);
  if ((display & HTMLEmitterUtil.DISPLAY_NONE) > 0) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (((display & HTMLEmitterUtil.DISPLAY_INLINE) > 0) || ((display & HTMLEmitterUtil.DISPLAY_INLINE_BLOCK) > 0)) {
    styleBuffer.append(""String_Node_Str"");
  }
  IStyle style=getElementStyle(container);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.8489289740698985
68969,"public void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  this.out=EmitterUtil.getOuputStream(services,REPORT_FILE);
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=creatWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    Map options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    if (enableMetadata) {
      metadataFilter=htmlOption.getMetadataFilter();
      if (metadataFilter == null) {
        metadataFilter=new MetadataFilter();
      }
    }
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=creatMetadataEmitter(writer,htmlOption);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
    outputMasterPageMargins=htmlOption.getOutputMasterPageMargins();
    htmlIDNamespace=htmlOption.getHTMLIDNamespace();
    if (null != htmlIDNamespace) {
      if (htmlIDNamespace.length() > 0) {
        htmlIDNamespace+=""String_Node_Str"";
        metadataEmitter.setHTMLIDNamespace(htmlIDNamespace);
      }
 else {
        htmlIDNamespace=null;
      }
    }
    writer.setIndent(htmlOption.getHTMLIndent());
    if (isEmbeddable) {
      enableInlineStyle=htmlOption.getEnableInlineStyle();
    }
    browserVersion=HTMLEmitterUtil.getBrowserVersion(htmlOption.getUserAgent());
    if (browserVersion == HTMLEmitterUtil.BROWSER_IE5 || browserVersion == HTMLEmitterUtil.BROWSER_IE6) {
      needFixTransparentPNG=true;
    }
  }
}","public void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  this.out=EmitterUtil.getOuputStream(services,REPORT_FILE);
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=creatWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    Map options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    if (enableMetadata) {
      metadataFilter=htmlOption.getMetadataFilter();
      if (metadataFilter == null) {
        metadataFilter=new MetadataFilter();
      }
    }
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=creatMetadataEmitter(writer,htmlOption);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
    outputMasterPageMargins=htmlOption.getOutputMasterPageMargins();
    htmlIDNamespace=htmlOption.getHTMLIDNamespace();
    if (null != htmlIDNamespace) {
      if (htmlIDNamespace.length() > 0) {
        htmlIDNamespace+=""String_Node_Str"";
        metadataEmitter.setHTMLIDNamespace(htmlIDNamespace);
      }
 else {
        htmlIDNamespace=null;
      }
    }
    writer.setIndent(htmlOption.getHTMLIndent());
    if (isEmbeddable) {
      enableInlineStyle=htmlOption.getEnableInlineStyle();
    }
    browserVersion=HTMLEmitterUtil.getBrowserVersion(htmlOption.getUserAgent());
    if (browserVersion == HTMLEmitterUtil.BROWSER_IE5 || browserVersion == HTMLEmitterUtil.BROWSER_IE6) {
      needFixTransparentPNG=true;
      browserSupportsInlineBlock=false;
    }
 else     if (browserVersion == HTMLEmitterUtil.BROWSER_IE7 || browserVersion == HTMLEmitterUtil.BROWSER_FIREFOX1 || browserVersion == HTMLEmitterUtil.BROWSER_FIREFOX2) {
      browserSupportsInlineBlock=false;
    }
  }
}",0.9542623242569852
68970,"/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  boolean widthOutputFlag=false;
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
    widthOutputFlag=true;
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      boolean absoluteWidth=true;
      for (int i=0; i < table.getColumnCount(); i++) {
        IColumn column=table.getColumn(i);
        DimensionType columnWidth=column.getWidth();
        if (columnWidth == null) {
          absoluteWidth=false;
          break;
        }
 else {
          if (""String_Node_Str"".endsWith(columnWidth.getUnits())) {
            absoluteWidth=false;
            break;
          }
        }
      }
      if (!absoluteWidth) {
        styleBuffer.append(""String_Node_Str"");
        widthOutputFlag=true;
      }
    }
  }
  if (fixedReport) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      if (!widthOutputFlag) {
        styleBuffer.append(""String_Node_Str"");
      }
      styleBuffer.append(""String_Node_Str"");
    }
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}","/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    if (!reportEmitter.browserSupportsInlineBlock) {
      styleBuffer.append(""String_Node_Str"");
    }
 else {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  boolean widthOutputFlag=false;
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
    widthOutputFlag=true;
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      boolean absoluteWidth=true;
      for (int i=0; i < table.getColumnCount(); i++) {
        IColumn column=table.getColumn(i);
        DimensionType columnWidth=column.getWidth();
        if (columnWidth == null) {
          absoluteWidth=false;
          break;
        }
 else {
          if (""String_Node_Str"".endsWith(columnWidth.getUnits())) {
            absoluteWidth=false;
            break;
          }
        }
      }
      if (!absoluteWidth) {
        styleBuffer.append(""String_Node_Str"");
        widthOutputFlag=true;
      }
    }
  }
  if (fixedReport) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      if (!widthOutputFlag) {
        styleBuffer.append(""String_Node_Str"");
      }
      styleBuffer.append(""String_Node_Str"");
    }
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}",0.9705738106915156
68971,"/** 
 * Build the style of contianer content.
 */
public void buildContainerStyle(IContainerContent container,StringBuffer styleBuffer){
  int display=((Integer)containerDisplayStack.peek()).intValue();
  handleShrink(display,container.getStyle(),container.getHeight(),container.getWidth(),styleBuffer);
  setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  IStyle style=getElementStyle(container);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}","/** 
 * Build the style of contianer content.
 */
public void buildContainerStyle(IContainerContent container,StringBuffer styleBuffer){
  int display=((Integer)containerDisplayStack.peek()).intValue();
  handleShrink(display,container.getStyle(),container.getHeight(),container.getWidth(),styleBuffer);
  if ((display & HTMLEmitterUtil.DISPLAY_NONE) > 0) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (((display & HTMLEmitterUtil.DISPLAY_INLINE) > 0) || ((display & HTMLEmitterUtil.DISPLAY_INLINE_BLOCK) > 0)) {
    styleBuffer.append(""String_Node_Str"");
  }
  IStyle style=getElementStyle(container);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}",0.8381642512077294
68972,"public static int getBrowserVersion(String userAgent){
  if (userAgent == null || userAgent.length() <= 0) {
    return BROWSER_UNKNOW;
  }
 else   if (userAgent.contains(""String_Node_Str"")) {
    return BROWSER_IE5;
  }
 else   if (userAgent.contains(""String_Node_Str"")) {
    return BROWSER_IE6;
  }
 else   if (userAgent.contains(""String_Node_Str"")) {
    return BROWSER_IE7;
  }
 else   return BROWSER_UNKNOW;
}","public static int getBrowserVersion(String userAgent){
  if (userAgent == null || userAgent.length() <= 0) {
    return BROWSER_UNKNOW;
  }
 else   if (userAgent.contains(""String_Node_Str"")) {
    return BROWSER_IE5;
  }
 else   if (userAgent.contains(""String_Node_Str"")) {
    return BROWSER_IE6;
  }
 else   if (userAgent.contains(""String_Node_Str"")) {
    return BROWSER_IE7;
  }
 else   if (userAgent.contains(""String_Node_Str"")) {
    return BROWSER_FIREFOX1;
  }
 else   if (userAgent.contains(""String_Node_Str"")) {
    return BROWSER_FIREFOX2;
  }
 else   return BROWSER_UNKNOW;
}",0.8283433133732535
68973,"public void doPreview(){
  ChartUIUtil.prepareLivePreview(chartModel,getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator());
  if (previewPainter != null) {
    if (chartModel instanceof ChartWithAxes) {
      ChartAdapter.beginIgnoreNotifications();
      checkDataTypeForChartWithAxes(chartModel);
      ChartAdapter.endIgnoreNotifications();
    }
    previewPainter.renderModel(chartModel);
  }
}","public void doPreview(){
  ChartUIUtil.prepareLivePreview(chartModel,getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator());
  if (previewPainter != null) {
    if (chartModel instanceof ChartWithAxes) {
      ChartAdapter.beginIgnoreNotifications();
      checkDataTypeForChartWithAxes(chartModel);
      ChartAdapter.endIgnoreNotifications();
    }
 else {
      ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
    }
    previewPainter.renderModel(chartModel);
  }
}",0.9017094017094016
68974,"private void processCellStyle(Element element,Map<Element,StyleProperties> cssStyles){
  String border=element.getAttribute(PROPERTY_BORDER);
  String padding=element.getAttribute(PROPERTY_CELLPADDING);
  boolean hasBorder=border != null && border.length() > 0;
  boolean hasPadding=padding != null && padding.length() > 0;
  if (hasBorder || hasPadding) {
    for (Node node=element.getFirstChild(); node != null; node=node.getNextSibling()) {
      Element r=(Element)node;
      if (TAG_TR.equals(r.getTagName())) {
        for (Node n=r.getFirstChild(); n != null; n=n.getNextSibling()) {
          Element c=(Element)n;
          if (TAG_TD.equals(c.getTagName()) || TAG_TH.equals(c.getTagName())) {
            StyleProperties sp=cssStyles.get(c);
            if (sp == null) {
              sp=new StyleProperties(new StyleDeclaration(content.getCSSEngine()));
              cssStyles.put(c,sp);
            }
            if (hasBorder) {
              PropertiesProcessor.process(PROPERTY_BORDER,border,sp);
            }
            if (hasPadding) {
              PropertiesProcessor.process(PROPERTY_CELLPADDING,border,sp);
            }
          }
        }
      }
    }
  }
}","private void processCellStyle(Element element,Map<Element,StyleProperties> cssStyles){
  String border=element.getAttribute(PROPERTY_BORDER);
  String padding=element.getAttribute(PROPERTY_CELLPADDING);
  boolean hasBorder=border != null && border.length() > 0;
  boolean hasPadding=padding != null && padding.length() > 0;
  if (hasBorder || hasPadding) {
    for (Node node=element.getFirstChild(); node != null; node=node.getNextSibling()) {
      Element r=(Element)node;
      if (TAG_TR.equals(r.getTagName())) {
        processRow(r,cssStyles,border,padding);
      }
 else       if (""String_Node_Str"".equals(r.getTagName()) || ""String_Node_Str"".equals(r.getTagName()) || ""String_Node_Str"".equals(r.getTagName())) {
        for (Node n=r.getFirstChild(); n != null; n=n.getNextSibling()) {
          Element c=(Element)n;
          if (TAG_TR.equals(c.getTagName())) {
            processRow(c,cssStyles,border,padding);
          }
        }
      }
    }
  }
}",0.6604909680407596
68975,"protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getMaxAvaWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  imageArea.setParent(root);
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  int actualHeight=cHeight;
  int actualWidth=cWidth;
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)((float)cHeight * maxWidth / cWidth);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)((float)cWidth * maxHeight / cHeight);
      }
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setContentWidth(imageArea.getWidth());
      root.setContentHeight(imageArea.getHeight());
    }
 else {
      if (context.getPageOverflow() == IPDFRenderOption.FIT_TO_PAGE_SIZE || context.getPageOverflow() == IPDFRenderOption.ENLARGE_PAGE_SIZE) {
        imageArea.setWidth(actualWidth);
        imageArea.setHeight(actualHeight);
        root.setContentHeight(actualHeight);
        root.setContentWidth(actualWidth);
      }
 else {
        imageArea.setWidth(actualWidth);
        imageArea.setHeight(actualHeight);
        root.setNeedClip(true);
        root.setAllocatedHeight(Math.min(maxHeight,cHeight));
        root.setAllocatedWidth(Math.min(maxWidth,cWidth));
      }
    }
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.finished=false;
}","protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getMaxAvaWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  imageArea.setParent(root);
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  int actualHeight=cHeight;
  int actualWidth=cWidth;
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)((float)cHeight * maxWidth / cWidth);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)((float)cWidth * maxHeight / cHeight);
      }
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setContentWidth(imageArea.getWidth());
      root.setContentHeight(imageArea.getHeight());
    }
 else {
      if (context.getPageOverflow() == IPDFRenderOption.FIT_TO_PAGE_SIZE || context.getPageOverflow() == IPDFRenderOption.ENLARGE_PAGE_SIZE) {
        imageArea.setWidth(actualWidth);
        imageArea.setHeight(actualHeight);
        root.setContentHeight(actualHeight);
        root.setContentWidth(actualWidth);
      }
 else {
        imageArea.setWidth(actualWidth);
        imageArea.setHeight(actualHeight);
        root.setNeedClip(true);
        root.setAllocatedHeight(Math.min(maxHeight,cHeight));
        root.setAllocatedWidth(Math.min(maxWidth,cWidth));
      }
    }
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  if (context.getEngineTaskType() != IEngineTask.TASK_RUN) {
    processChartLegend(image,imageArea);
  }
  root.finished=false;
}",0.9852650098966352
68976,"/** 
 * Parse the image map position from a string which is of format ""x1, y1, x2, y2"".
 * @param string the position string.
 * @return a array which contains the x, y coordinate of left up corner,width and height in sequence.
 */
private int[] getArea(String string){
  String[] rawDatas=string.split(""String_Node_Str"");
  int[] area=new int[4];
  area[0]=Integer.parseInt(rawDatas[0]);
  area[1]=Integer.parseInt(rawDatas[1]);
  area[2]=Integer.parseInt(rawDatas[4]) - area[0];
  area[3]=Integer.parseInt(rawDatas[5]) - area[1];
  return area;
}","/** 
 * Parse the image map position from a string which is of format ""x1, y1, x2, y2"".
 * @param string the position string.
 * @return a array which contains the x, y coordinate of left up corner,width and height in sequence.
 */
private int[] getArea(String string){
  String[] rawDatas=string.split(""String_Node_Str"");
  if (rawDatas.length == 8) {
    int[] area=new int[4];
    area[0]=Integer.parseInt(rawDatas[0]);
    area[1]=Integer.parseInt(rawDatas[1]);
    area[2]=Integer.parseInt(rawDatas[4]) - area[0];
    area[3]=Integer.parseInt(rawDatas[5]) - area[1];
    return area;
  }
  return null;
}",0.947277441659464
68977,"public void startNode(Node node,HashMap<Element,StyleProperties> cssStyles){
  String nodeName=node.getNodeName();
  StyleProperties cssStyle=cssStyles.get(node);
  writer.openTag(nodeName);
  NamedNodeMap attributes=node.getAttributes();
  if (attributes != null) {
    for (int i=0; i < attributes.getLength(); i++) {
      Node attribute=attributes.item(i);
      String attrName=attribute.getNodeName();
      String attrValue=attribute.getNodeValue();
      if (attrValue != null) {
        if (""String_Node_Str"".equalsIgnoreCase(nodeName) && ""String_Node_Str"".equalsIgnoreCase(attrName)) {
          String attrValueTrue=handleStyleImage(attrValue);
          if (attrValueTrue != null) {
            attrValue=attrValueTrue;
          }
        }
        writer.attribute(attrName,attrValue);
      }
    }
  }
  if (cssStyle != null) {
    StringBuffer buffer=new StringBuffer();
    cssStyle.toString(buffer);
    if (buffer.length() != 0) {
      writer.attribute(""String_Node_Str"",buffer.toString());
    }
  }
}","public void startNode(Node node,HashMap cssStyles){
  String nodeName=node.getNodeName();
  HashMap cssStyle=(HashMap)cssStyles.get(node);
  writer.openTag(nodeName);
  NamedNodeMap attributes=node.getAttributes();
  if (attributes != null) {
    for (int i=0; i < attributes.getLength(); i++) {
      Node attribute=attributes.item(i);
      String attrName=attribute.getNodeName();
      String attrValue=attribute.getNodeValue();
      if (attrValue != null) {
        if (""String_Node_Str"".equalsIgnoreCase(nodeName) && ""String_Node_Str"".equalsIgnoreCase(attrName)) {
          String attrValueTrue=handleStyleImage(attrValue);
          if (attrValueTrue != null) {
            attrValue=attrValueTrue;
          }
        }
        writer.attribute(attrName,attrValue);
      }
    }
  }
  if (cssStyle != null) {
    StringBuffer buffer=new StringBuffer();
    Iterator ite=cssStyle.entrySet().iterator();
    while (ite.hasNext()) {
      Map.Entry entry=(Map.Entry)ite.next();
      Object keyObj=entry.getKey();
      Object valueObj=entry.getValue();
      if (keyObj == null || valueObj == null) {
        continue;
      }
      String key=keyObj.toString();
      String value=valueObj.toString();
      buffer.append(key);
      buffer.append(""String_Node_Str"");
      if (""String_Node_Str"".equalsIgnoreCase(key)) {
        String valueTrue=handleStyleImage(value,true);
        if (valueTrue != null) {
          value=valueTrue;
        }
        buffer.append(""String_Node_Str"");
        buffer.append(value);
        buffer.append(""String_Node_Str"");
      }
 else {
        buffer.append(value);
      }
      buffer.append(""String_Node_Str"");
    }
    if (buffer.length() != 0) {
      writer.attribute(""String_Node_Str"",buffer.toString());
    }
  }
}",0.653557382910261
68978,"/** 
 * Visits the children nodes of the specific node
 * @param visitor the ITextNodeVisitor instance
 * @param ele the specific node
 */
private void processNodes(Element ele,HashMap<Element,StyleProperties> cssStyles){
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    short nodeType=node.getNodeType();
    if (nodeType == Node.TEXT_NODE) {
      if (isScriptText(node)) {
        writer.cdata(node.getNodeValue());
      }
 else {
        writer.text(node.getNodeValue(),false);
      }
    }
 else     if (nodeType == Node.COMMENT_NODE) {
      writer.comment(node.getNodeValue());
    }
 else     if (nodeType == Node.ELEMENT_NODE) {
      if (""String_Node_Str"".equalsIgnoreCase(node.getNodeName())) {
        boolean bImplicitCloseTag=writer.isImplicitCloseTag();
        writer.setImplicitCloseTag(true);
        startNode(node,cssStyles);
        processNodes((Element)node,cssStyles);
        endNode(node);
        writer.setImplicitCloseTag(bImplicitCloseTag);
      }
 else {
        startNode(node,cssStyles);
        processNodes((Element)node,cssStyles);
        endNode(node);
      }
    }
  }
}","/** 
 * Visits the children nodes of the specific node
 * @param visitor the ITextNodeVisitor instance
 * @param ele the specific node
 */
private void processNodes(Element ele,HashMap cssStyles){
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    short nodeType=node.getNodeType();
    if (nodeType == Node.TEXT_NODE) {
      if (isScriptText(node)) {
        writer.cdata(node.getNodeValue());
      }
 else {
        writer.text(node.getNodeValue(),false);
      }
    }
 else     if (nodeType == Node.COMMENT_NODE) {
      writer.comment(node.getNodeValue());
    }
 else     if (nodeType == Node.ELEMENT_NODE) {
      if (""String_Node_Str"".equalsIgnoreCase(node.getNodeName())) {
        boolean bImplicitCloseTag=writer.isImplicitCloseTag();
        writer.setImplicitCloseTag(true);
        startNode(node,cssStyles);
        processNodes((Element)node,cssStyles);
        endNode(node);
        writer.setImplicitCloseTag(bImplicitCloseTag);
      }
 else {
        startNode(node,cssStyles);
        processNodes((Element)node,cssStyles);
        endNode(node);
      }
    }
  }
}",0.989010989010989
68979,"private void outputHtmlText(IForeignContent foreign){
  boolean bIndent=writer.isIndent();
  writer.setIndent(false);
  Object rawValue=foreign.getRawValue();
  String text=rawValue == null ? null : rawValue.toString();
  Document doc=new TextParser().parse(text,TextParser.TEXT_TYPE_HTML);
  ReportDesignHandle design=(ReportDesignHandle)runnable.getDesignHandle();
  HTMLStyleProcessor htmlProcessor=new HTMLStyleProcessor(design);
  HashMap<Element,StyleProperties> styleMap=new HashMap<Element,StyleProperties>();
  Element body=null;
  if (doc != null) {
    NodeList bodys=doc.getElementsByTagName(""String_Node_Str"");
    if (bodys.getLength() > 0) {
      body=(Element)bodys.item(0);
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap,reportContext.getAppContext());
    processNodes(body,styleMap);
  }
  writer.setIndent(bIndent);
}","private void outputHtmlText(IForeignContent foreign){
  boolean bIndent=writer.isIndent();
  writer.setIndent(false);
  Object rawValue=foreign.getRawValue();
  String text=rawValue == null ? null : rawValue.toString();
  Document doc=new TextParser().parse(text,TextParser.TEXT_TYPE_HTML);
  ReportDesignHandle design=(ReportDesignHandle)runnable.getDesignHandle();
  HTMLProcessor htmlProcessor=new HTMLProcessor(design,reportContext.getAppContext());
  HashMap styleMap=new HashMap();
  Element body=null;
  if (doc != null) {
    NodeList bodys=doc.getElementsByTagName(""String_Node_Str"");
    if (bodys.getLength() > 0) {
      body=(Element)bodys.item(0);
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap);
    processNodes(body,styleMap);
  }
  writer.setIndent(bIndent);
}",0.8991596638655462
68980,"/** 
 * This method returns appropriate renders for the given chart model. It uses extension points to identify a renderer corresponding to a custom series.
 * @param cm
 * @param rtc
 * @param oComputations
 * @return renderers
 * @throws ChartException
 */
public static final BaseRenderer[] instances(Chart cm,RunTimeContext rtc,PlotComputation oComputations) throws ChartException {
  final PluginSettings ps=PluginSettings.instance();
  BaseRenderer[] brna=null;
  final boolean bPaletteByCategory=(cm.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  if (cm instanceof ChartWithAxes) {
    final ChartWithAxes cwa=(ChartWithAxes)cm;
    final Axis[] axa=cwa.getPrimaryBaseAxes();
    Axis axPrimaryBase=axa[0];
    Series se;
    AxesRenderer ar=null;
    List<AxesRenderer> al=new ArrayList<AxesRenderer>();
    List<Series> alRunTimeSeries;
    EList<SeriesDefinition> elBase, elOrthogonal;
    SeriesDefinition sd=null;
    elBase=axPrimaryBase.getSeriesDefinitions();
    if (elBase.isEmpty()) {
      return createEmptyInstance(cm,rtc,oComputations);
    }
 else {
      final SeriesDefinition sdBase=elBase.get(0);
      alRunTimeSeries=sdBase.getRunTimeSeries();
      if (alRunTimeSeries.isEmpty()) {
        return createEmptyInstance(cm,rtc,oComputations);
      }
      se=alRunTimeSeries.get(0);
      ar=(se.getClass() == SeriesImpl.class) ? new EmptyWithAxes() : (AxesRenderer)ps.getRenderer(se.getClass());
      ar.set(cm,oComputations,se,axPrimaryBase,sdBase);
      ar.set(rtc);
      al.add(ar);
      final Axis[] axaOrthogonal=cwa.getOrthogonalAxes(axPrimaryBase,true);
      for (int i=0; i < axaOrthogonal.length; i++) {
        elOrthogonal=axaOrthogonal[i].getSeriesDefinitions();
        for (int j=0; j < elOrthogonal.size(); j++) {
          sd=elOrthogonal.get(j);
          alRunTimeSeries=sd.getRunTimeSeries();
          for (int k=0; k < alRunTimeSeries.size(); k++) {
            se=alRunTimeSeries.get(k);
            ar=(se.getClass() == SeriesImpl.class) ? new EmptyWithAxes() : (AxesRenderer)ps.getRenderer(se.getClass());
            ar.set(cm,oComputations,se,axaOrthogonal[i],bPaletteByCategory ? sdBase : sd);
            al.add(ar);
          }
        }
      }
      Collections.sort(al,zOrderComparator);
      brna=new BaseRenderer[al.size()];
      for (int i=0; i < brna.length; i++) {
        ar=al.get(i);
        ar.iSeriesIndex=i;
        ar.iSeriesCount=brna.length;
        brna[i]=ar;
      }
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    final ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    EList<SeriesDefinition> elBase=cwoa.getSeriesDefinitions();
    EList<SeriesDefinition> elOrthogonal;
    SeriesDefinition sd, sdBase;
    List<Series> alRuntimeSeries;
    final Series[] sea=cwoa.getRunTimeSeries();
    Series se;
    final int iSeriesCount=sea.length;
    brna=new BaseRenderer[iSeriesCount];
    int iSI=0;
    for (int i=0; i < elBase.size(); i++) {
      sdBase=elBase.get(i);
      alRuntimeSeries=sdBase.getRunTimeSeries();
      if (ChartUtil.isDataEmpty(rtc)) {
        brna=new BaseRenderer[1];
        brna[0]=new EmptyWithoutAxes();
        brna[0].set(cm,oComputations,sdBase.getSeries().get(0),sdBase);
        brna[0].set(rtc);
        brna[0].iSeriesIndex=0;
        brna[0].iSeriesCount=1;
        return brna;
      }
      if (alRuntimeSeries.size() != 1) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.PLUGIN,""String_Node_Str"",new Object[]{Integer.valueOf(alRuntimeSeries.size())},Messages.getResourceBundle(rtc.getULocale()));
      }
      se=alRuntimeSeries.get(0);
      brna[iSI]=(se.getClass() == SeriesImpl.class) ? new EmptyWithoutAxes() : ps.getRenderer(se.getClass());
      brna[iSI].set(cm,oComputations,se,sdBase);
      brna[iSI].set(rtc);
      brna[iSI].iSeriesIndex=iSI++;
      elOrthogonal=elBase.get(i).getSeriesDefinitions();
      for (int j=0; j < elOrthogonal.size(); j++) {
        sd=elOrthogonal.get(j);
        alRuntimeSeries=sd.getRunTimeSeries();
        for (int k=0; k < alRuntimeSeries.size(); k++) {
          se=alRuntimeSeries.get(k);
          brna[iSI]=(se.getClass() == SeriesImpl.class) ? new EmptyWithoutAxes() : ps.getRenderer(se.getClass());
          brna[iSI].set(cm,oComputations,se,bPaletteByCategory ? sdBase : sd);
          brna[iSI].iSeriesIndex=iSI++;
        }
      }
    }
    for (int k=0; k < iSI; k++) {
      brna[k].iSeriesCount=iSI;
    }
  }
  return brna;
}","/** 
 * This method returns appropriate renders for the given chart model. It uses extension points to identify a renderer corresponding to a custom series.
 * @param cm
 * @param rtc
 * @param oComputations
 * @return renderers
 * @throws ChartException
 */
public static final BaseRenderer[] instances(Chart cm,RunTimeContext rtc,PlotComputation oComputations) throws ChartException {
  final PluginSettings ps=PluginSettings.instance();
  BaseRenderer[] brna=null;
  final boolean bPaletteByCategory=(cm.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  if (cm instanceof ChartWithAxes) {
    final ChartWithAxes cwa=(ChartWithAxes)cm;
    final Axis[] axa=cwa.getPrimaryBaseAxes();
    Axis axPrimaryBase=axa[0];
    Series se;
    AxesRenderer ar=null;
    List<AxesRenderer> al=new ArrayList<AxesRenderer>();
    List<Series> alRunTimeSeries;
    EList<SeriesDefinition> elBase, elOrthogonal;
    SeriesDefinition sd=null;
    elBase=axPrimaryBase.getSeriesDefinitions();
    if (elBase.isEmpty()) {
      return createEmptyInstance(cm,rtc,oComputations);
    }
 else {
      final SeriesDefinition sdBase=elBase.get(0);
      alRunTimeSeries=sdBase.getRunTimeSeries();
      if (alRunTimeSeries.isEmpty()) {
        return createEmptyInstance(cm,rtc,oComputations);
      }
      se=alRunTimeSeries.get(0);
      ar=(se.getClass() == SeriesImpl.class) ? new EmptyWithAxes() : (AxesRenderer)ps.getRenderer(se.getClass());
      ar.set(cm,oComputations,se,axPrimaryBase,sdBase);
      ar.set(rtc);
      al.add(ar);
      final Axis[] axaOrthogonal=cwa.getOrthogonalAxes(axPrimaryBase,true);
      for (int i=0; i < axaOrthogonal.length; i++) {
        elOrthogonal=axaOrthogonal[i].getSeriesDefinitions();
        for (int j=0; j < elOrthogonal.size(); j++) {
          sd=elOrthogonal.get(j);
          alRunTimeSeries=sd.getRunTimeSeries();
          for (int k=0; k < alRunTimeSeries.size(); k++) {
            se=alRunTimeSeries.get(k);
            ar=(se.getClass() == SeriesImpl.class) ? new EmptyWithAxes() : (AxesRenderer)ps.getRenderer(se.getClass());
            ar.set(cm,oComputations,se,axaOrthogonal[i],bPaletteByCategory ? sdBase : sd);
            al.add(ar);
          }
        }
      }
      if (cm.getDimension() == ChartDimension.TWO_DIMENSIONAL_LITERAL) {
        Collections.sort(al,zOrderComparator);
      }
      brna=new BaseRenderer[al.size()];
      for (int i=0; i < brna.length; i++) {
        ar=al.get(i);
        ar.iSeriesIndex=i;
        ar.iSeriesCount=brna.length;
        brna[i]=ar;
      }
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    final ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    EList<SeriesDefinition> elBase=cwoa.getSeriesDefinitions();
    EList<SeriesDefinition> elOrthogonal;
    SeriesDefinition sd, sdBase;
    List<Series> alRuntimeSeries;
    final Series[] sea=cwoa.getRunTimeSeries();
    Series se;
    final int iSeriesCount=sea.length;
    brna=new BaseRenderer[iSeriesCount];
    int iSI=0;
    for (int i=0; i < elBase.size(); i++) {
      sdBase=elBase.get(i);
      alRuntimeSeries=sdBase.getRunTimeSeries();
      if (ChartUtil.isDataEmpty(rtc)) {
        brna=new BaseRenderer[1];
        brna[0]=new EmptyWithoutAxes();
        brna[0].set(cm,oComputations,sdBase.getSeries().get(0),sdBase);
        brna[0].set(rtc);
        brna[0].iSeriesIndex=0;
        brna[0].iSeriesCount=1;
        return brna;
      }
      if (alRuntimeSeries.size() != 1) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.PLUGIN,""String_Node_Str"",new Object[]{Integer.valueOf(alRuntimeSeries.size())},Messages.getResourceBundle(rtc.getULocale()));
      }
      se=alRuntimeSeries.get(0);
      brna[iSI]=(se.getClass() == SeriesImpl.class) ? new EmptyWithoutAxes() : ps.getRenderer(se.getClass());
      brna[iSI].set(cm,oComputations,se,sdBase);
      brna[iSI].set(rtc);
      brna[iSI].iSeriesIndex=iSI++;
      elOrthogonal=elBase.get(i).getSeriesDefinitions();
      for (int j=0; j < elOrthogonal.size(); j++) {
        sd=elOrthogonal.get(j);
        alRuntimeSeries=sd.getRunTimeSeries();
        for (int k=0; k < alRuntimeSeries.size(); k++) {
          se=alRuntimeSeries.get(k);
          brna[iSI]=(se.getClass() == SeriesImpl.class) ? new EmptyWithoutAxes() : ps.getRenderer(se.getClass());
          brna[iSI].set(cm,oComputations,se,bPaletteByCategory ? sdBase : sd);
          brna[iSI].iSeriesIndex=iSI++;
        }
      }
    }
    for (int k=0; k < iSI; k++) {
      brna[k].iSeriesCount=iSI;
    }
  }
  return brna;
}",0.9908033240997228
68981,"private void populateSeriesTypes(Collection<IChartType> allChartType,Series series,Orientation orientation){
  Iterator<IChartType> iterTypes=allChartType.iterator();
  while (iterTypes.hasNext()) {
    IChartType type=iterTypes.next();
    Series newSeries=type.getSeries();
    if (htSeriesNames == null) {
      htSeriesNames=new Hashtable<String,Series>(20);
    }
    if (type.canCombine()) {
      if (!(newSeries instanceof StockSeries) || (orientation.getValue() == Orientation.VERTICAL)) {
        String sDisplayName=newSeries.getDisplayName();
        htSeriesNames.put(sDisplayName,newSeries);
        cbSeriesType.add(sDisplayName);
      }
      if (type.getName().equals(chartModel.getType())) {
        cbSeriesType.select(cbSeriesType.getItemCount() - 1);
      }
    }
  }
}","private void populateSeriesTypes(Collection<IChartType> allChartType,Series series,Orientation orientation){
  Iterator<IChartType> iterTypes=allChartType.iterator();
  while (iterTypes.hasNext()) {
    IChartType type=iterTypes.next();
    Series newSeries=type.getSeries();
    if (htSeriesNames == null) {
      htSeriesNames=new Hashtable<String,Series>(20);
    }
    if (type.canCombine()) {
      if (IChartType.TWO_DIMENSION_WITH_DEPTH_TYPE.equals(sDimension) && newSeries instanceof AreaSeries) {
        continue;
      }
      if (!(newSeries instanceof StockSeries) || (orientation.getValue() == Orientation.VERTICAL)) {
        String sDisplayName=newSeries.getDisplayName();
        htSeriesNames.put(sDisplayName,newSeries);
        cbSeriesType.add(sDisplayName);
      }
      if (type.getName().equals(chartModel.getType())) {
        cbSeriesType.select(cbSeriesType.getItemCount() - 1);
      }
    }
  }
}",0.9220023282887078
68982,"public void widgetSelected(SelectionEvent e){
  boolean needUpdateModel=false;
  Object oSelected=e.getSource();
  if (oSelected.getClass().equals(Button.class)) {
    needUpdateModel=true;
    if (oSelected.equals(cbOrientation)) {
      if (cbOrientation.getSelection()) {
        orientation=Orientation.HORIZONTAL_LITERAL;
      }
 else {
        orientation=Orientation.VERTICAL_LITERAL;
      }
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
    }
 else {
      Button btn=(Button)e.getSource();
      if (btn.getSelection()) {
        if (this.sSubType != null && !getSubtypeFromButton(btn).equals(sSubType)) {
          int iTypeIndex=vSubTypeNames.indexOf(sSubType);
          if (iTypeIndex >= 0) {
            ((Button)cmpTypeButtons.getChildren()[iTypeIndex]).setSelection(false);
            cmpTypeButtons.redraw();
          }
        }
        ChartUIUtil.saveLabelPositionIntoCache(getSeriesDefinitionForProcessing());
        sSubType=getSubtypeFromButton(btn);
        ChartCacheManager.getInstance().cacheSubtype(sType,sSubType);
      }
 else {
        if (this.sSubType != null && getSubtypeFromButton(btn).equals(sSubType)) {
          btn.setSelection(true);
        }
      }
    }
  }
 else   if (oSelected.getClass().equals(Table.class)) {
    sType=((String)((TableItem)e.item).getData()).trim();
    if (!sOldType.equals(sType)) {
      sOldType=sType;
      if (!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
        if (chartModel != null && chartModel instanceof ChartWithAxes) {
          Orientation lastOrientation=ChartCacheManager.getInstance().findOrientation(sType);
          if (lastOrientation != null && this.orientation != lastOrientation) {
            this.orientation=lastOrientation;
            this.rotateAxisTitle((ChartWithAxes)chartModel);
          }
          if (lastOrientation == null) {
            Orientation currentOrientation=this.orientation;
            this.orientation=ChartUIUtil.getChartType(sType).getDefaultOrientation();
            if (currentOrientation != this.orientation) {
              this.rotateAxisTitle((ChartWithAxes)chartModel);
            }
          }
        }
      }
      if (chartModel != null && chartModel instanceof ChartWithAxes && ChartCacheManager.getInstance().findCategory(sType) != null) {
        boolean bCategory=ChartCacheManager.getInstance().findCategory(sType).booleanValue();
        ((ChartWithAxes)chartModel).getAxes().get(0).setCategoryAxis(bCategory);
      }
      sSubType=null;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      cmpMisc.layout();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbMultipleY)) {
    needUpdateModel=true;
    lblSeriesType.setEnabled(isTwoAxesEnabled());
    Axis xAxis=((ChartWithAxes)chartModel).getAxes().get(0);
    ((ChartWizardContext)getContext()).setMoreAxesSupported(cbMultipleY.getSelectionIndex() == 2);
    if (chartModel instanceof ChartWithoutAxes) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
    }
    ChartAdapter.beginIgnoreNotifications();
    int iAxisNumber=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    if (cbMultipleY.getSelectionIndex() == 0) {
      ChartCacheManager.getInstance().cacheSeriesType(null);
      if (iAxisNumber > 1) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 1);
      }
    }
 else     if (cbMultipleY.getSelectionIndex() == 1) {
      if (iAxisNumber == 1) {
        ChartUIUtil.addAxis((ChartWithAxes)chartModel);
      }
 else       if (iAxisNumber > 2) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 2);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastSeriesType=ChartCacheManager.getInstance().findSeriesType();
      if (lastSeriesType != null) {
        cbSeriesType.setText(lastSeriesType);
      }
 else {
        Axis overlayAxis=xAxis.getAssociatedAxes().get(1);
        String sDisplayName=overlayAxis.getSeriesDefinitions().get(0).getDesignTimeSeries().getDisplayName();
        cbSeriesType.setText(sDisplayName);
      }
      changeOverlaySeriesType();
    }
    cbSeriesType.setEnabled(isTwoAxesEnabled());
    if (updateDimensionCombo(sType)) {
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
    }
    cmpMisc.layout();
  }
 else   if (oSelected.equals(cbDimension)) {
    String newDimension=cbDimension.getItem(cbDimension.getSelectionIndex());
    if (!newDimension.equals(sDimension)) {
      sDimension=newDimension;
      ChartCacheManager.getInstance().cacheDimension(sType,sDimension);
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbSeriesType)) {
    needUpdateModel=true;
    changeOverlaySeriesType();
  }
  if (needUpdateModel) {
    ChartAdapter.notifyUpdateApply();
    refreshChart();
    if (oSelected.getClass().equals(Table.class)) {
      populateSeriesTypesList();
    }
 else     if (oSelected.equals(cbOrientation)) {
      if (chartModel instanceof ChartWithAxes) {
        rotateAxisTitle((ChartWithAxes)chartModel);
      }
    }
    doPreview();
  }
}","public void widgetSelected(SelectionEvent e){
  boolean needUpdateModel=false;
  Object oSelected=e.getSource();
  if (oSelected.getClass().equals(Button.class)) {
    needUpdateModel=true;
    if (oSelected.equals(cbOrientation)) {
      if (cbOrientation.getSelection()) {
        orientation=Orientation.HORIZONTAL_LITERAL;
      }
 else {
        orientation=Orientation.VERTICAL_LITERAL;
      }
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
    }
 else {
      Button btn=(Button)e.getSource();
      if (btn.getSelection()) {
        if (this.sSubType != null && !getSubtypeFromButton(btn).equals(sSubType)) {
          int iTypeIndex=vSubTypeNames.indexOf(sSubType);
          if (iTypeIndex >= 0) {
            ((Button)cmpTypeButtons.getChildren()[iTypeIndex]).setSelection(false);
            cmpTypeButtons.redraw();
          }
        }
        ChartUIUtil.saveLabelPositionIntoCache(getSeriesDefinitionForProcessing());
        sSubType=getSubtypeFromButton(btn);
        ChartCacheManager.getInstance().cacheSubtype(sType,sSubType);
      }
 else {
        if (this.sSubType != null && getSubtypeFromButton(btn).equals(sSubType)) {
          btn.setSelection(true);
        }
      }
    }
  }
 else   if (oSelected.getClass().equals(Table.class)) {
    sType=((String)((TableItem)e.item).getData()).trim();
    if (!sOldType.equals(sType)) {
      sOldType=sType;
      if (!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
        if (chartModel != null && chartModel instanceof ChartWithAxes) {
          Orientation lastOrientation=ChartCacheManager.getInstance().findOrientation(sType);
          if (lastOrientation != null && this.orientation != lastOrientation) {
            this.orientation=lastOrientation;
            this.rotateAxisTitle((ChartWithAxes)chartModel);
          }
          if (lastOrientation == null) {
            Orientation currentOrientation=this.orientation;
            this.orientation=ChartUIUtil.getChartType(sType).getDefaultOrientation();
            if (currentOrientation != this.orientation) {
              this.rotateAxisTitle((ChartWithAxes)chartModel);
            }
          }
        }
      }
      if (chartModel != null && chartModel instanceof ChartWithAxes && ChartCacheManager.getInstance().findCategory(sType) != null) {
        boolean bCategory=ChartCacheManager.getInstance().findCategory(sType).booleanValue();
        ((ChartWithAxes)chartModel).getAxes().get(0).setCategoryAxis(bCategory);
      }
      sSubType=null;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      cmpMisc.layout();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbMultipleY)) {
    needUpdateModel=true;
    lblSeriesType.setEnabled(isTwoAxesEnabled());
    Axis xAxis=((ChartWithAxes)chartModel).getAxes().get(0);
    ((ChartWizardContext)getContext()).setMoreAxesSupported(cbMultipleY.getSelectionIndex() == 2);
    if (chartModel instanceof ChartWithoutAxes) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
    }
    ChartAdapter.beginIgnoreNotifications();
    int iAxisNumber=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    if (cbMultipleY.getSelectionIndex() == 0) {
      ChartCacheManager.getInstance().cacheSeriesType(null);
      if (iAxisNumber > 1) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 1);
      }
    }
 else     if (cbMultipleY.getSelectionIndex() == 1) {
      if (iAxisNumber == 1) {
        ChartUIUtil.addAxis((ChartWithAxes)chartModel);
      }
 else       if (iAxisNumber > 2) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 2);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastSeriesType=ChartCacheManager.getInstance().findSeriesType();
      if (lastSeriesType != null) {
        cbSeriesType.setText(lastSeriesType);
      }
 else {
        Axis overlayAxis=xAxis.getAssociatedAxes().get(1);
        String sDisplayName=overlayAxis.getSeriesDefinitions().get(0).getDesignTimeSeries().getDisplayName();
        cbSeriesType.setText(sDisplayName);
      }
      changeOverlaySeriesType();
    }
    cbSeriesType.setEnabled(isTwoAxesEnabled());
    if (updateDimensionCombo(sType)) {
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
    }
    cmpMisc.layout();
  }
 else   if (oSelected.equals(cbDimension)) {
    String newDimension=cbDimension.getItem(cbDimension.getSelectionIndex());
    if (!newDimension.equals(sDimension)) {
      sDimension=newDimension;
      ChartCacheManager.getInstance().cacheDimension(sType,sDimension);
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbSeriesType)) {
    needUpdateModel=true;
    changeOverlaySeriesType();
    updateDimensionCombo(sType);
  }
  if (needUpdateModel) {
    ChartAdapter.notifyUpdateApply();
    refreshChart();
    if (oSelected.getClass().equals(Table.class)) {
      populateSeriesTypesList();
    }
 else     if (oSelected.equals(cbOrientation)) {
      if (chartModel instanceof ChartWithAxes) {
        rotateAxisTitle((ChartWithAxes)chartModel);
      }
    }
    doPreview();
  }
}",0.9939416192399486
68983,"/** 
 * Updates the dimension combo according to chart type and axes number
 * @param sSelectedType Chart type
 * @return whether the dimension is changed after updating
 */
private boolean updateDimensionCombo(String sSelectedType){
  boolean isOldExist=false;
  IChartType chartType=ChartUIUtil.getChartType(sSelectedType);
  String[] dimensionArray=chartType.getSupportedDimensions();
  int axesNum=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
  if (sDimension == null) {
    sDimension=chartType.getDefaultDimension();
    isOldExist=true;
  }
  cbDimension.removeAll();
  for (int i=0; i < dimensionArray.length; i++) {
    boolean isSupported=chartType.isDimensionSupported(dimensionArray[i],(ChartWizardContext)context,axesNum,0);
    if (isSupported) {
      cbDimension.add(dimensionArray[i]);
    }
    if (!isOldExist && sDimension.equals(dimensionArray[i])) {
      isOldExist=isSupported;
    }
  }
  String cache=ChartCacheManager.getInstance().getDimension(sSelectedType);
  if (cache != null) {
    sDimension=cache;
    isOldExist=true;
  }
  if (!isOldExist) {
    sDimension=chartType.getDefaultDimension();
  }
  cbDimension.setText(sDimension);
  return !isOldExist;
}","/** 
 * Updates the dimension combo according to chart type and axes number
 * @param sSelectedType Chart type
 * @return whether the dimension is changed after updating
 */
private boolean updateDimensionCombo(String sSelectedType){
  boolean isOldExist=false;
  IChartType chartType=ChartUIUtil.getChartType(sSelectedType);
  String[] dimensionArray=chartType.getSupportedDimensions();
  int axesNum=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
  if (sDimension == null) {
    sDimension=chartType.getDefaultDimension();
    isOldExist=true;
  }
  cbDimension.removeAll();
  boolean bAreaSeriesMixed=isAreaSeriesMixed();
  for (int i=0; i < dimensionArray.length; i++) {
    boolean isSupported=chartType.isDimensionSupported(dimensionArray[i],(ChartWizardContext)context,axesNum,0);
    if (isSupported) {
      if (bAreaSeriesMixed && dimensionArray[i].equals(IChartType.TWO_DIMENSION_WITH_DEPTH_TYPE)) {
        continue;
      }
      cbDimension.add(dimensionArray[i]);
    }
    if (!isOldExist && sDimension.equals(dimensionArray[i])) {
      isOldExist=isSupported;
    }
  }
  String cache=ChartCacheManager.getInstance().getDimension(sSelectedType);
  if (cache != null) {
    sDimension=cache;
    isOldExist=true;
  }
  if (!isOldExist) {
    sDimension=chartType.getDefaultDimension();
  }
  cbDimension.setText(sDimension);
  return !isOldExist;
}",0.87890625
68984,"private void populateSeriesTypes(Collection<IChartType> allChartType,Series series,Orientation orientation){
  Iterator<IChartType> iterTypes=allChartType.iterator();
  while (iterTypes.hasNext()) {
    IChartType type=iterTypes.next();
    Series newSeries=type.getSeries();
    if (htSeriesNames == null) {
      htSeriesNames=new Hashtable<String,Series>(20);
    }
    if (type.canCombine()) {
      if (!(newSeries instanceof StockSeries) || (orientation.getValue() == Orientation.VERTICAL)) {
        String sDisplayName=newSeries.getDisplayName();
        htSeriesNames.put(sDisplayName,newSeries);
        cmbTypes.add(sDisplayName);
      }
    }
  }
}","private void populateSeriesTypes(Collection<IChartType> allChartType,Series series,Orientation orientation){
  boolean is25D=getChart().getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL;
  Iterator<IChartType> iterTypes=allChartType.iterator();
  while (iterTypes.hasNext()) {
    IChartType type=iterTypes.next();
    Series newSeries=type.getSeries();
    if (htSeriesNames == null) {
      htSeriesNames=new Hashtable<String,Series>(20);
    }
    if (type.canCombine()) {
      if (newSeries instanceof AreaSeries && is25D) {
        continue;
      }
      if (!(newSeries instanceof StockSeries) || (orientation.getValue() == Orientation.VERTICAL)) {
        String sDisplayName=newSeries.getDisplayName();
        htSeriesNames.put(sDisplayName,newSeries);
        cmbTypes.add(sDisplayName);
      }
    }
  }
}",0.8825100133511349
68985,"private void createExpressionCell(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  defaultValueComposite=ControlProvider.getDefaultComposite(parent);
  defaultValueString=Utility.getNonNullString(structureHandle.getDefaultValue());
  defaultValue=ControlProvider.createText(defaultValueComposite,defaultValueString);
  defaultValue.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  defaultValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (defaultValue.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(defaultValue.getText());
      expressionBuilder.setExpressionProvier(null);
      if (expressionBuilder.open() == OK) {
        defaultValue.setText(expressionBuilder.getResult().trim());
      }
    }
  }
;
  ExpressionProvider provider=new ExpressionProvider((DataSetHandle)getContainer().getModel());
  ExpressionButtonUtil.createExpressionButton(defaultValueComposite,defaultValue,provider,(DataSetHandle)getContainer().getModel(),true,SWT.PUSH);
  ExpressionButtonUtil.initExpressionButtonControl(defaultValue,structureHandle,DataSetParameter.DEFAULT_VALUE_MEMBER);
}","private void createExpressionCell(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  defaultValueComposite=ControlProvider.getDefaultComposite(parent);
  defaultValueString=Utility.getNonNullString(structureHandle.getDefaultValue());
  defaultValueText=ControlProvider.createText(defaultValueComposite,defaultValueString);
  defaultValueText.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  defaultValueText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (defaultValueText.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(defaultValueText.getText());
      expressionBuilder.setExpressionProvier(null);
      if (expressionBuilder.open() == OK) {
        defaultValueText.setText(expressionBuilder.getResult().trim());
      }
    }
  }
;
  ExpressionProvider provider=new ExpressionProvider((DataSetHandle)getContainer().getModel());
  ExpressionButtonUtil.createExpressionButton(defaultValueComposite,defaultValueText,provider,(DataSetHandle)getContainer().getModel(),true,SWT.PUSH);
  ExpressionButtonUtil.initExpressionButtonControl(defaultValueText,structureHandle,DataSetParameter.DEFAULT_VALUE_MEMBER);
}",0.9853801169590644
68986,"private void directionChanged(){
  if (isOutputParameter()) {
    enableComposite(defaultValueComposite,false);
    defaultValue.setText(""String_Node_Str"");
    defaultValueString=""String_Node_Str"";
    if (isOdaDataSetHandle) {
      enableComposite(reportParamComposite,false);
      linkToSalarParameter.select(0);
    }
  }
 else {
    if (isOdaDataSetHandle) {
      enableComposite(reportParamComposite,true);
      linkToSalarParameterChanged();
    }
 else {
      enableComposite(defaultValueComposite,true);
    }
  }
}","private void directionChanged(){
  if (isOutputParameter()) {
    enableComposite(defaultValueComposite,false);
    defaultValueText.setText(""String_Node_Str"");
    defaultValueString=""String_Node_Str"";
    if (isOdaDataSetHandle) {
      enableComposite(reportParamComposite,false);
      linkToSalarParameter.select(0);
    }
  }
 else {
    if (isOdaDataSetHandle) {
      enableComposite(reportParamComposite,true);
      linkToSalarParameterChanged();
    }
 else {
      enableComposite(defaultValueComposite,true);
    }
  }
}",0.9962335216572504
68987,"private Status updateStructureHandle(){
  try {
    structureHandle.setName(dataSetParamName.getText());
    structureHandle.setParameterDataType(ParameterPageUtil.getTypeName(dataType.getText()));
    setDirection(direction.getText());
    ExpressionButtonUtil.saveExpressionButtonControl(defaultValue,structureHandle,DataSetParameter.DEFAULT_VALUE_MEMBER);
    if (isOdaDataSetHandle)     ((OdaDataSetParameterHandle)structureHandle).setParamName(Utility.findIndex(linkToSalarParameter.getItems(),linkToSalarParameter.getText()) == 0 ? null : linkToSalarParameter.getText());
  }
 catch (  SemanticException e) {
    return getMiscStatus(IStatus.ERROR,Utility.getNonNullString(e.getMessage()));
  }
  return null;
}","private Status updateStructureHandle(){
  try {
    structureHandle.setName(dataSetParamName.getText());
    structureHandle.setParameterDataType(ParameterPageUtil.getTypeName(dataType.getText()));
    setDirection(direction.getText());
    if (defaultValueText.isEnabled())     ExpressionButtonUtil.saveExpressionButtonControl(defaultValueText,structureHandle,DataSetParameter.DEFAULT_VALUE_MEMBER);
    if (isOdaDataSetHandle)     ((OdaDataSetParameterHandle)structureHandle).setParamName(Utility.findIndex(linkToSalarParameter.getItems(),linkToSalarParameter.getText()) == 0 ? null : linkToSalarParameter.getText());
  }
 catch (  SemanticException e) {
    return getMiscStatus(IStatus.ERROR,Utility.getNonNullString(e.getMessage()));
  }
  return null;
}",0.9715447154471544
68988,"private void linkToSalarParameterChanged(){
  String paramName=Utility.findIndex(linkToSalarParameter.getItems(),linkToSalarParameter.getText()) == 0 ? null : linkToSalarParameter.getText();
  if (paramName == null) {
    enableComposite(defaultValueComposite,linkToSalarParameter.isEnabled());
    defaultValue.setText(NONE_DEFAULT_VALUE.equals(defaultValueString) ? ""String_Node_Str"" : defaultValueString);
  }
 else {
    if (defaultValue.isEnabled())     defaultValueString=defaultValue.getText();
    structureHandle.setDefaultValue(""String_Node_Str"");
    enableComposite(defaultValueComposite,false);
    defaultValue.setText(NONE_DEFAULT_VALUE);
  }
}","private void linkToSalarParameterChanged(){
  String paramName=Utility.findIndex(linkToSalarParameter.getItems(),linkToSalarParameter.getText()) == 0 ? null : linkToSalarParameter.getText();
  if (paramName == null) {
    enableComposite(defaultValueComposite,linkToSalarParameter.isEnabled());
    defaultValueText.setText(defaultValueString);
  }
 else {
    if (defaultValueText.isEnabled())     defaultValueString=defaultValueText.getText();
    enableComposite(defaultValueComposite,false);
    defaultValueText.setText(NONE_DEFAULT_VALUE);
  }
}",0.571900826446281
68989,"public void startLabel(ILabelContent label){
  Object design=label.getGenerateBy();
  IContent container=label;
  while (design == null) {
    container=(IContent)container.getParent();
    design=((IContent)container).getGenerateBy();
  }
  HyperlinkDef url=parseHyperLink(label);
  BookmarkDef bookmark=getBookmark(label);
  if (!(""String_Node_Str"".equalsIgnoreCase(label.getText()) && container instanceof IForeignContent)) {
    engine.addData(label.getText(),label.getComputedStyle(),url,bookmark);
  }
}","public void startLabel(ILabelContent label){
  Object design=label.getGenerateBy();
  IContent container=label;
  while (design == null) {
    container=(IContent)container.getParent();
    design=((IContent)container).getGenerateBy();
  }
  HyperlinkDef url=parseHyperLink(label);
  BookmarkDef bookmark=getBookmark(label);
  if (!(""String_Node_Str"".equalsIgnoreCase(label.getText()) && container instanceof IForeignContent)) {
    double height=getContentHeight(label);
    engine.addData(label.getText(),label.getComputedStyle(),url,bookmark,height);
  }
}",0.9531835205992508
68990,"public void startAutoText(IAutoTextContent autoText){
  HyperlinkDef link=parseHyperLink(autoText);
  BookmarkDef bookmark=getBookmark(autoText);
  engine.addData(autoText.getText(),autoText.getComputedStyle(),link,bookmark);
}","public void startAutoText(IAutoTextContent autoText){
  HyperlinkDef link=parseHyperLink(autoText);
  BookmarkDef bookmark=getBookmark(autoText);
  double height=getContentHeight(autoText);
  engine.addData(autoText.getText(),autoText.getComputedStyle(),link,bookmark,height);
}",0.899009900990099
68991,"public void startList(IListContent list){
  ContainerSizeInfo size=engine.getCurrentContainer().getSizeInfo();
  ColumnsInfo table=LayoutUtil.createTable(list,size.getWidth());
  engine.addTable(list,table,size);
  if (list.getChildren() == null) {
    HyperlinkDef link=parseHyperLink(list);
    BookmarkDef bookmark=getBookmark(list);
    engine.addData(ExcelLayoutEngine.EMPTY,list.getComputedStyle(),link,bookmark);
  }
}","public void startList(IListContent list){
  ContainerSizeInfo size=engine.getCurrentContainer().getSizeInfo();
  ColumnsInfo table=LayoutUtil.createTable(list,size.getWidth());
  engine.addTable(list,table,size);
  if (list.getChildren() == null) {
    HyperlinkDef link=parseHyperLink(list);
    BookmarkDef bookmark=getBookmark(list);
    double height=getContentHeight(list);
    engine.addData(ExcelLayoutEngine.EMPTY,list.getComputedStyle(),link,bookmark,height);
  }
}",0.9454949944382648
68992,"public void startText(ITextContent text){
  HyperlinkDef url=parseHyperLink(text);
  BookmarkDef bookmark=getBookmark(text);
  engine.addData(text.getText(),text.getComputedStyle(),url,bookmark);
}","public void startText(ITextContent text){
  HyperlinkDef url=parseHyperLink(text);
  BookmarkDef bookmark=getBookmark(text);
  double height=getContentHeight(text);
  engine.addData(text.getText(),text.getComputedStyle(),url,bookmark,height);
}",0.8934240362811792
68993,"protected Data addDataContent(IDataContent data){
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  Data excelData=null;
  Object generateBy=data.getGenerateBy();
  IStyle style=data.getComputedStyle();
  DataFormatValue dataformat=style.getDataFormat();
  MapDesign map=null;
  if (generateBy instanceof DataItemDesign) {
    DataItemDesign design=(DataItemDesign)generateBy;
    map=design.getMap();
  }
  if (map != null && map.getRuleCount() > 0 && data.getLabelText() != null) {
    excelData=engine.addData(data.getLabelText().trim(),style,url,bookmark);
  }
 else {
    String locale=null;
    int type=ExcelUtil.getType(data.getValue());
    if (type == SheetData.STRING) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addData(data.getText(),style,url,bookmark,locale);
    }
 else     if (type == Data.NUMBER) {
      if (dataformat != null) {
        locale=dataformat.getNumberLocale();
      }
      excelData=engine.addData(data.getValue(),style,url,bookmark,locale);
    }
 else {
      if (dataformat != null) {
        locale=dataformat.getDateTimeLocale();
      }
      excelData=engine.addDateTime(data,style,url,bookmark,locale);
    }
  }
  return excelData;
}","protected Data addDataContent(IDataContent data){
  double height=getContentHeight(data);
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  Data excelData=null;
  Object generateBy=data.getGenerateBy();
  IStyle style=data.getComputedStyle();
  DataFormatValue dataformat=style.getDataFormat();
  MapDesign map=null;
  if (generateBy instanceof DataItemDesign) {
    DataItemDesign design=(DataItemDesign)generateBy;
    map=design.getMap();
  }
  if (map != null && map.getRuleCount() > 0 && data.getLabelText() != null) {
    excelData=engine.addData(data.getLabelText().trim(),style,url,bookmark,height);
  }
 else {
    String locale=null;
    int type=ExcelUtil.getType(data.getValue());
    if (type == SheetData.STRING) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addData(data.getText(),style,url,bookmark,locale,height);
    }
 else     if (type == Data.NUMBER) {
      if (dataformat != null) {
        locale=dataformat.getNumberLocale();
      }
      excelData=engine.addData(data.getValue(),style,url,bookmark,locale,height);
    }
 else {
      if (dataformat != null) {
        locale=dataformat.getDateTimeLocale();
      }
      excelData=engine.addDateTime(data,style,url,bookmark,locale,height);
    }
  }
  return excelData;
}",0.974105102817974
68994,"public Data addDateTime(Object txt,IStyle style,HyperlinkDef link,BookmarkDef bookmark,String dateTimeLocale){
  ContainerSizeInfo rule=getCurrentContainer().getSizeInfo();
  StyleEntry entry=engine.getStyle(style,rule);
  Data data=null;
  IDataContent dataContent=(IDataContent)txt;
  Object value=dataContent.getValue();
  Date date=ExcelUtil.getDate(value);
  if (date != null && ((date instanceof Time) || date.getYear() >= 0)) {
    data=createDateData(value,entry,style.getDateTimeFormat(),dateTimeLocale);
    data.setHyperlinkDef(link);
    data.setBookmark(bookmark);
    data.setSizeInfo(rule);
    addData(data);
    return data;
  }
 else {
    return addData(dataContent.getText(),style,link,bookmark,dateTimeLocale);
  }
}","public Data addDateTime(Object txt,IStyle style,HyperlinkDef link,BookmarkDef bookmark,String dateTimeLocale,double height){
  ContainerSizeInfo rule=getCurrentContainer().getSizeInfo();
  StyleEntry entry=engine.getStyle(style,rule);
  Data data=null;
  IDataContent dataContent=(IDataContent)txt;
  Object value=dataContent.getValue();
  Date date=ExcelUtil.getDate(value);
  if (date != null && ((date instanceof Time) || date.getYear() >= 0)) {
    data=createDateData(value,entry,style.getDateTimeFormat(),dateTimeLocale);
    data.setHeight(height);
    data.setHyperlinkDef(link);
    data.setBookmark(bookmark);
    data.setSizeInfo(rule);
    addData(data);
    return data;
  }
 else {
    return addData(dataContent.getText(),style,link,bookmark,dateTimeLocale,height);
  }
}",0.9678266579120156
68995,"private void writeDataFormat(StyleEntry style){
  Integer type=(Integer)style.getProperty(StyleConstant.DATA_TYPE_PROP);
  if (type == SheetData.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
 else   if (type == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    String numberStyle=(String)style.getProperty(StyleConstant.NUMBER_FORMAT_PROP);
    writer.attribute(""String_Node_Str"",numberStyle);
    writer.closeTag(""String_Node_Str"");
  }
}","private void writeDataFormat(StyleEntry style){
  Integer type=(Integer)style.getProperty(StyleConstant.DATA_TYPE_PROP);
  if (type == null)   return;
  if (type == SheetData.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
 else   if (type == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    String numberStyle=(String)style.getProperty(StyleConstant.NUMBER_FORMAT_PROP);
    writer.attribute(""String_Node_Str"",numberStyle);
    writer.closeTag(""String_Node_Str"");
  }
}",0.979224376731302
68996,"public StyleEntry getStyle(IStyle style,ContainerSizeInfo rule){
  return initStyle(style,rule);
}","public StyleEntry getStyle(IStyle style,ContainerSizeInfo childSizeInfo,ContainerSizeInfo parentSizeInfo){
  return initStyle(style,childSizeInfo,parentSizeInfo);
}",0.7175572519083969
68997,"private StyleEntry initStyle(IStyle style,ContainerSizeInfo rule){
  StyleEntry entry=StyleBuilder.createStyleEntry(style);
  ;
  if (!containerStyles.isEmpty()) {
    StyleEntry centry=containerStyles.peek();
    StyleBuilder.mergeInheritableProp(centry,entry);
  }
  if (engine.getContainers().size() > 0) {
    XlsContainer container=engine.getCurrentContainer();
    StyleEntry cEntry=container.getStyle();
    StyleBuilder.mergeInheritableProp(cEntry,entry);
    applyHBorders(cEntry,entry,container.getSizeInfo(),rule);
  }
  return entry;
}","private StyleEntry initStyle(IStyle style,ContainerSizeInfo rule){
  return initStyle(style,null,rule);
}",0.3067484662576687
68998,"protected Data createData(Object text,StyleEntry s,int dataType,XlsContainer container,int rowSpanOfDesign){
  Data data=createData();
  data.setValue(text);
  data.setStyle(s);
  data.setDataType(dataType);
  data.setContainer(container);
  data.setRowSpanInDesign(rowSpanOfDesign);
  lastData=data;
  return data;
}","protected Data createData(Object text,StyleEntry s,int dataType,XlsContainer container,int rowSpanOfDesign){
  Data data=createData();
  data.setValue(text);
  data.setStyle(s);
  data.setDataType(dataType);
  data.setContainer(container);
  data.setRowSpanInDesign(rowSpanOfDesign);
  return data;
}",0.9724473257698542
68999,"protected void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  if (col == -1 || col >= cache.getColumnCount())   return;
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    blankData.setType(Type.HORIZONTAL);
    addDatatoCache(i,blankData);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
  lastData=data;
}","protected void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  if (col == -1 || col >= cache.getColumnCount())   return;
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    blankData.setType(Type.HORIZONTAL);
    addDatatoCache(i,blankData);
  }
  if (data.getDataType() == SheetData.IMAGE) {
    addEmptyData(data,container);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
}",0.9378806333739342
69000,"public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(image,parentSizeInfo.getWidth());
  splitColumns(imageColumnsInfo,parentSizeInfo);
  StyleEntry entry=engine.getStyle(style,parentSizeInfo);
  SheetData data=createImageData(image,entry,container);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  ContainerSizeInfo imageSizeInfo=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  data.setSizeInfo(imageSizeInfo);
  addData(data);
}","public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(image,parentSizeInfo.getWidth());
  splitColumns(imageColumnsInfo,parentSizeInfo);
  ContainerSizeInfo imageSizeInfo=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  StyleEntry entry=engine.getStyle(style,imageSizeInfo,parentSizeInfo);
  SheetData data=createImageData(image,entry,container);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setSizeInfo(imageSizeInfo);
  addData(data);
}",0.8101983002832861
