record_number,buggy_code,fixed_code,code_similarity
6001,"public void loadProperties(AppConfig config){
  uniqueinstance=config.getProperty(""String_Node_Str"");
  jtxtMachineHostname.setText(config.getProperty(""String_Node_Str""));
  String lafclass=config.getProperty(""String_Node_Str"");
  jcboLAF.setSelectedItem(null);
  for (int i=0; i < jcboLAF.getItemCount(); i++) {
    LAFInfo lafinfo=(LAFInfo)jcboLAF.getItemAt(i);
    if (lafinfo.getClassName().equals(lafclass)) {
      jcboLAF.setSelectedIndex(i);
      break;
    }
  }
  jcboMachineScreenmode.setSelectedItem(config.getProperty(""String_Node_Str""));
  jcboTicketsBag.setSelectedItem(config.getProperty(""String_Node_Str""));
  StringParser p=new StringParser(config.getProperty(""String_Node_Str""));
  String sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter.setSelectedItem(sparam);
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(sparam);
    m_jtxtJPOSPrinter.setText(p.nextToken(','));
    m_jtxtJPOSDrawer.setText(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(sparam);
    printer1printerparams.setParameters(p);
  }
 else {
    jcboMachinePrinter.setSelectedItem(sparam);
    jcboConnPrinter.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter2.setSelectedItem(sparam);
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(sparam);
    m_jtxtJPOSPrinter2.setText(p.nextToken(','));
    m_jtxtJPOSDrawer2.setText(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(sparam);
    printer2printerparams.setParameters(p);
  }
 else {
    jcboMachinePrinter2.setSelectedItem(sparam);
    jcboConnPrinter2.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter3.setSelectedItem(sparam);
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(sparam);
    m_jtxtJPOSPrinter3.setText(p.nextToken(','));
    m_jtxtJPOSDrawer3.setText(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(sparam);
    printer3printerparams.setParameters(p);
  }
 else {
    jcboMachinePrinter3.setSelectedItem(sparam);
    jcboConnPrinter3.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(""String_Node_Str"");
    jcboConnDisplay.setSelectedItem(sparam);
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(sparam);
    m_jtxtJPOSName.setText(p.nextToken(','));
  }
 else {
    jcboMachineDisplay.setSelectedItem(sparam);
    jcboConnDisplay.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScale.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboSerialScale.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScanner.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam)) {
    jcboSerialScanner.setSelectedItem(p.nextToken(','));
  }
  cboPrinters.setSelectedItem(config.getProperty(""String_Node_Str""));
  dirty.setDirty(false);
}","public void loadProperties(AppConfig config){
  jtxtMachineHostname.setText(config.getProperty(""String_Node_Str""));
  String lafclass=config.getProperty(""String_Node_Str"");
  jcboLAF.setSelectedItem(null);
  for (int i=0; i < jcboLAF.getItemCount(); i++) {
    LAFInfo lafinfo=(LAFInfo)jcboLAF.getItemAt(i);
    if (lafinfo.getClassName().equals(lafclass)) {
      jcboLAF.setSelectedIndex(i);
      break;
    }
  }
  jcboMachineScreenmode.setSelectedItem(config.getProperty(""String_Node_Str""));
  jcboTicketsBag.setSelectedItem(config.getProperty(""String_Node_Str""));
  StringParser p=new StringParser(config.getProperty(""String_Node_Str""));
  String sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter.setSelectedItem(sparam);
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(sparam);
    m_jtxtJPOSPrinter.setText(p.nextToken(','));
    m_jtxtJPOSDrawer.setText(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(sparam);
    printer1printerparams.setParameters(p);
  }
 else {
    jcboMachinePrinter.setSelectedItem(sparam);
    jcboConnPrinter.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter2.setSelectedItem(sparam);
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(sparam);
    m_jtxtJPOSPrinter2.setText(p.nextToken(','));
    m_jtxtJPOSDrawer2.setText(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(sparam);
    printer2printerparams.setParameters(p);
  }
 else {
    jcboMachinePrinter2.setSelectedItem(sparam);
    jcboConnPrinter2.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter3.setSelectedItem(sparam);
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(sparam);
    m_jtxtJPOSPrinter3.setText(p.nextToken(','));
    m_jtxtJPOSDrawer3.setText(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(sparam);
    printer3printerparams.setParameters(p);
  }
 else {
    jcboMachinePrinter3.setSelectedItem(sparam);
    jcboConnPrinter3.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(""String_Node_Str"");
    jcboConnDisplay.setSelectedItem(sparam);
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(sparam);
    m_jtxtJPOSName.setText(p.nextToken(','));
  }
 else {
    jcboMachineDisplay.setSelectedItem(sparam);
    jcboConnDisplay.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScale.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboSerialScale.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScanner.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam)) {
    jcboSerialScanner.setSelectedItem(p.nextToken(','));
  }
  cboPrinters.setSelectedItem(config.getProperty(""String_Node_Str""));
  dirty.setDirty(false);
}",0.9939090711333478
6002,"private void restoreProperties(){
  AppConfig config=new AppConfig(configfile);
  if (config.delete()) {
    loadProperties();
  }
 else {
    JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str"")));
  }
}","private void restoreProperties(){
  if (config.delete()) {
    loadProperties();
  }
 else {
    JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str"")));
  }
}",0.9037656903765692
6003,"public JPanelConfiguration(AppProperties props){
  configfile=props.getConfigFile();
  initComponents();
  m_panelconfig=new ArrayList<PanelConfig>();
  m_panelconfig.add(new JPanelConfigDatabase());
  m_panelconfig.add(new JPanelConfigGeneral());
  m_panelconfig.add(new JPanelConfigLocale());
  m_panelconfig.add(new JPanelConfigPayment());
  for (  PanelConfig c : m_panelconfig) {
    m_jConfigOptions.add(c.getConfigComponent());
  }
}","public JPanelConfiguration(AppProperties props){
  config=new AppConfig(props.getConfigFile());
  initComponents();
  m_panelconfig=new ArrayList<PanelConfig>();
  m_panelconfig.add(new JPanelConfigDatabase());
  m_panelconfig.add(new JPanelConfigGeneral());
  m_panelconfig.add(new JPanelConfigLocale());
  m_panelconfig.add(new JPanelConfigPayment());
  for (  PanelConfig c : m_panelconfig) {
    m_jConfigOptions.add(c.getConfigComponent());
  }
}",0.978675645342312
6004,"private void saveProperties(){
  AppConfig config=new AppConfig(configfile);
  for (  PanelConfig c : m_panelconfig) {
    c.saveProperties(config);
  }
  try {
    config.save();
    JOptionPane.showMessageDialog(this,AppLocal.getIntString(""String_Node_Str""),AppLocal.getIntString(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
  }
 catch (  IOException e) {
    JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e));
  }
}","private void saveProperties(){
  for (  PanelConfig c : m_panelconfig) {
    c.saveProperties(config);
  }
  try {
    config.save();
    JOptionPane.showMessageDialog(this,AppLocal.getIntString(""String_Node_Str""),AppLocal.getIntString(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
  }
 catch (  IOException e) {
    JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e));
  }
}",0.9508547008547008
6005,"private void loadProperties(){
  AppConfig config=new AppConfig(configfile);
  config.load();
  for (  PanelConfig c : m_panelconfig) {
    c.loadProperties(config);
  }
}","private void loadProperties(){
  config.load();
  for (  PanelConfig c : m_panelconfig) {
    c.loadProperties(config);
  }
}",0.8445945945945946
6006,"public DeviceTicket(AppProperties props){
  PrinterWritterPool pws=new PrinterWritterPool();
  StringParser sf=new StringParser(props.getProperty(""String_Node_Str""));
  String sFiscalType=sf.nextToken(':');
  String sFiscalParam1=sf.nextToken(',');
  try {
    if (""String_Node_Str"".equals(sFiscalType)) {
      m_deviceFiscal=new DeviceFiscalPrinterJavaPOS(sFiscalParam1);
    }
 else {
      m_deviceFiscal=new DeviceFiscalPrinterNull();
    }
  }
 catch (  TicketPrinterException e) {
    m_deviceFiscal=new DeviceFiscalPrinterNull(e.getMessage());
  }
  StringParser sd=new StringParser(props.getProperty(""String_Node_Str""));
  String sDisplayType=sd.nextToken(':');
  String sDisplayParam1=sd.nextToken(',');
  String sDisplayParam2=sd.nextToken(',');
  if (""String_Node_Str"".equals(sDisplayType) || ""String_Node_Str"".equals(sDisplayType) || ""String_Node_Str"".equals(sDisplayType)) {
    sDisplayParam2=sDisplayParam1;
    sDisplayParam1=sDisplayType;
    sDisplayType=""String_Node_Str"";
  }
  try {
    if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayPanel();
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayWindow();
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayESCPOS(pws.getPrinterWritter(sDisplayParam1,sDisplayParam2),new UnicodeTranslatorInt());
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplaySurePOS(pws.getPrinterWritter(sDisplayParam1,sDisplayParam2));
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayESCPOS(pws.getPrinterWritter(sDisplayParam1,sDisplayParam2),new UnicodeTranslatorEur());
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayJavaPOS(sDisplayParam1);
    }
 else {
      m_devicedisplay=new DeviceDisplayNull();
    }
  }
 catch (  TicketPrinterException e) {
    m_devicedisplay=new DeviceDisplayNull(e.getMessage());
  }
  m_nullprinter=new DevicePrinterNull();
  m_deviceprinters=new HashMap<String,DevicePrinter>();
  m_deviceprinterslist=new ArrayList<DevicePrinter>();
  int iPrinterIndex=1;
  String sPrinterIndex=Integer.toString(iPrinterIndex);
  String sprinter=props.getProperty(""String_Node_Str"");
  while (sprinter != null && !""String_Node_Str"".equals(sprinter)) {
    StringParser sp=new StringParser(sprinter);
    String sPrinterType=sp.nextToken(':');
    String sPrinterParam1=sp.nextToken(',');
    String sPrinterParam2=sp.nextToken(',');
    if (""String_Node_Str"".equals(sPrinterType) || ""String_Node_Str"".equals(sPrinterType) || ""String_Node_Str"".equals(sPrinterType)) {
      sPrinterParam2=sPrinterParam1;
      sPrinterParam1=sPrinterType;
      sPrinterType=""String_Node_Str"";
    }
    try {
      if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterPanel());
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterPrinter(sPrinterParam1,Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesEpson(),new UnicodeTranslatorInt()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesTMU220(),new UnicodeTranslatorInt()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesStar(),new UnicodeTranslatorStar()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesIthaca(),new UnicodeTranslatorInt()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesSurePOS(),new UnicodeTranslatorSurePOS()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterPlain(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2)));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterJavaPOS(sPrinterParam1,sPrinterParam2));
      }
    }
 catch (    TicketPrinterException e) {
    }
    iPrinterIndex++;
    sPrinterIndex=Integer.toString(iPrinterIndex);
    sprinter=props.getProperty(""String_Node_Str"" + sPrinterIndex);
  }
}","public DeviceTicket(AppProperties props){
  PrinterWritterPool pws=new PrinterWritterPool();
  StringParser sf=new StringParser(props.getProperty(""String_Node_Str""));
  String sFiscalType=sf.nextToken(':');
  String sFiscalParam1=sf.nextToken(',');
  try {
    if (""String_Node_Str"".equals(sFiscalType)) {
      m_deviceFiscal=new DeviceFiscalPrinterJavaPOS(sFiscalParam1);
    }
 else {
      m_deviceFiscal=new DeviceFiscalPrinterNull();
    }
  }
 catch (  TicketPrinterException e) {
    m_deviceFiscal=new DeviceFiscalPrinterNull(e.getMessage());
  }
  StringParser sd=new StringParser(props.getProperty(""String_Node_Str""));
  String sDisplayType=sd.nextToken(':');
  String sDisplayParam1=sd.nextToken(',');
  String sDisplayParam2=sd.nextToken(',');
  if (""String_Node_Str"".equals(sDisplayType) || ""String_Node_Str"".equals(sDisplayType) || ""String_Node_Str"".equals(sDisplayType)) {
    sDisplayParam2=sDisplayParam1;
    sDisplayParam1=sDisplayType;
    sDisplayType=""String_Node_Str"";
  }
  try {
    if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayPanel();
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayWindow();
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayESCPOS(pws.getPrinterWritter(sDisplayParam1,sDisplayParam2),new UnicodeTranslatorInt());
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplaySurePOS(pws.getPrinterWritter(sDisplayParam1,sDisplayParam2));
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayESCPOS(pws.getPrinterWritter(sDisplayParam1,sDisplayParam2),new UnicodeTranslatorEur());
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayJavaPOS(sDisplayParam1);
    }
 else {
      m_devicedisplay=new DeviceDisplayNull();
    }
  }
 catch (  TicketPrinterException e) {
    m_devicedisplay=new DeviceDisplayNull(e.getMessage());
  }
  m_nullprinter=new DevicePrinterNull();
  m_deviceprinters=new HashMap<String,DevicePrinter>();
  m_deviceprinterslist=new ArrayList<DevicePrinter>();
  int iPrinterIndex=1;
  String sPrinterIndex=Integer.toString(iPrinterIndex);
  String sprinter=props.getProperty(""String_Node_Str"");
  while (sprinter != null && !""String_Node_Str"".equals(sprinter)) {
    StringParser sp=new StringParser(sprinter);
    String sPrinterType=sp.nextToken(':');
    String sPrinterParam1=sp.nextToken(',');
    String sPrinterParam2=sp.nextToken(',');
    if (""String_Node_Str"".equals(sPrinterType) || ""String_Node_Str"".equals(sPrinterType) || ""String_Node_Str"".equals(sPrinterType)) {
      sPrinterParam2=sPrinterParam1;
      sPrinterParam1=sPrinterType;
      sPrinterType=""String_Node_Str"";
    }
    try {
      if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterPanel());
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        if (sPrinterParam2 == null || sPrinterParam2.equals(""String_Node_Str"") || sPrinterParam2.equals(""String_Node_Str"")) {
          sPrinterParam2=""String_Node_Str"";
        }
 else         if (sPrinterParam2.equals(""String_Node_Str"")) {
          sPrinterParam2=""String_Node_Str"";
        }
        addPrinter(sPrinterIndex,new DevicePrinterPrinter(sPrinterParam1,Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesEpson(),new UnicodeTranslatorInt()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesTMU220(),new UnicodeTranslatorInt()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesStar(),new UnicodeTranslatorStar()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesIthaca(),new UnicodeTranslatorInt()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesSurePOS(),new UnicodeTranslatorSurePOS()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterPlain(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2)));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterJavaPOS(sPrinterParam1,sPrinterParam2));
      }
    }
 catch (    TicketPrinterException e) {
    }
    iPrinterIndex++;
    sPrinterIndex=Integer.toString(iPrinterIndex);
    sprinter=props.getProperty(""String_Node_Str"" + sPrinterIndex);
  }
}",0.9723777528928704
6007,"/** 
 * Creates new form JPaymentSelect 
 */
protected JPaymentSelect(java.awt.Dialog parent,boolean modal,ComponentOrientation o){
  super(parent,modal);
  initComponents();
  this.applyComponentOrientation(o);
  getRootPane().setDefaultButton(m_jButtonOK);
}","/** 
 * Creates new form JPaymentSelect 
 */
protected JPaymentSelect(java.awt.Dialog parent,boolean modal,ComponentOrientation o){
  super(parent,modal);
  initComponents();
  this.applyComponentOrientation(o);
}",0.9006342494714588
6008,"public boolean showDialog(double total,CustomerInfoExt customerext){
  m_aPaymentInfo=new PaymentInfoList();
  accepted=false;
  m_dTotal=total;
  this.customerext=customerext;
  m_jButtonPrint.setSelected(printselected);
  m_jTotalEuros.setText(Formats.CURRENCY.formatValue(new Double(m_dTotal)));
  addTabs();
  if (m_jTabPayment.getTabCount() == 0) {
    m_aPaymentInfo.add(getDefaultPayment(total));
    accepted=true;
  }
 else {
    printState();
    setVisible(true);
  }
  printselected=m_jButtonPrint.isSelected();
  m_jTabPayment.removeAll();
  return accepted;
}","public boolean showDialog(double total,CustomerInfoExt customerext){
  m_aPaymentInfo=new PaymentInfoList();
  accepted=false;
  m_dTotal=total;
  this.customerext=customerext;
  m_jButtonPrint.setSelected(printselected);
  m_jTotalEuros.setText(Formats.CURRENCY.formatValue(new Double(m_dTotal)));
  addTabs();
  if (m_jTabPayment.getTabCount() == 0) {
    m_aPaymentInfo.add(getDefaultPayment(total));
    accepted=true;
  }
 else {
    getRootPane().setDefaultButton(m_jButtonOK);
    printState();
    setVisible(true);
  }
  printselected=m_jButtonPrint.isSelected();
  m_jTabPayment.removeAll();
  return accepted;
}",0.8301255230125523
6009,"public List<ProductInfoExt> getProductCatalog(String category) throws BasicException {
  return new PreparedSentence(s,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + s.DB.FALSE() + ""String_Node_Str""+ ""String_Node_Str"",SerializerWriteString.INSTANCE,ProductInfoExt.getSerializerRead()).list(category);
}","public List<ProductInfoExt> getProductCatalog(String category) throws BasicException {
  return new PreparedSentence(s,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",SerializerWriteString.INSTANCE,ProductInfoExt.getSerializerRead()).list(category);
}",0.90625
6010,"/** 
 * Creates new form JPanelConfigPayment 
 */
public JPanelConfigPayment(){
  initComponents();
  jcboCardReader.addActionListener(dirty);
  jcboPaymentGateway.addActionListener(dirty);
  jchkPaymentTest.addActionListener(dirty);
  initPayments(""String_Node_Str"",new ConfigPaymentPanelEmpty());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelEmpty());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
}","/** 
 * Creates new form JPanelConfigPayment 
 */
public JPanelConfigPayment(){
  initComponents();
  jcboCardReader.addActionListener(dirty);
  jcboPaymentGateway.addActionListener(dirty);
  jchkPaymentTest.addActionListener(dirty);
  initPayments(""String_Node_Str"",new ConfigPaymentPanelEmpty());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelEmpty());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelLinkPoint());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelCaixa());
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
}",0.9238636363636364
6011,"public void init(Session s){
  m_sInitScript=""String_Node_Str"" + s.DB.getName();
  m_version=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadString.INSTANCE);
  m_dummy=new StaticSentence(s,""String_Node_Str"");
  final ThumbNailBuilder tnb=new ThumbNailBuilder(32,32,""String_Node_Str"");
  peopleread=new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new AppUser(dr.getString(1),dr.getString(2),dr.getString(3),dr.getString(4),dr.getString(5),new ImageIcon(tnb.getThumbNail(ImageUtils.readImage(dr.getBytes(6)))));
    }
  }
;
  m_peoplevisible=new StaticSentence(s,""String_Node_Str"" + s.DB.TRUE(),null,peopleread);
  m_peoplebycard=new PreparedSentence(s,""String_Node_Str"" + s.DB.TRUE(),SerializerWriteString.INSTANCE,peopleread);
  m_resourcebytes=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadBytes.INSTANCE);
  Datas[] resourcedata=new Datas[]{Datas.STRING,Datas.STRING,Datas.INT,Datas.BYTES};
  m_resourcebytesinsert=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasic(resourcedata));
  m_resourcebytesupdate=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasicExt(resourcedata,new int[]{1,2,3,1}));
  m_rolepermissions=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadBytes.INSTANCE);
  m_changepassword=new StaticSentence(s,""String_Node_Str"",new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING}));
  m_activecash=new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.INT,Datas.TIMESTAMP,Datas.TIMESTAMP}));
  m_insertcash=new StaticSentence(s,""String_Node_Str"" + ""String_Node_Str"",new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.INT,Datas.TIMESTAMP,Datas.TIMESTAMP}));
  m_locationfind=new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadString.INSTANCE);
  resetResourcesCache();
}","public void init(Session s){
  m_sInitScript=""String_Node_Str"" + s.DB.getName();
  m_version=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadString.INSTANCE);
  m_dummy=new StaticSentence(s,""String_Node_Str"");
  final ThumbNailBuilder tnb=new ThumbNailBuilder(32,32,""String_Node_Str"");
  peopleread=new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new AppUser(dr.getString(1),dr.getString(2),dr.getString(3),dr.getString(4),dr.getString(5),new ImageIcon(tnb.getThumbNail(ImageUtils.readImage(dr.getBytes(6)))));
    }
  }
;
  m_peoplevisible=new StaticSentence(s,""String_Node_Str"" + s.DB.TRUE(),null,peopleread);
  m_peoplebycard=new PreparedSentence(s,""String_Node_Str"" + s.DB.TRUE(),SerializerWriteString.INSTANCE,peopleread);
  m_resourcebytes=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadBytes.INSTANCE);
  Datas[] resourcedata=new Datas[]{Datas.STRING,Datas.STRING,Datas.INT,Datas.BYTES};
  m_resourcebytesinsert=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasic(resourcedata));
  m_resourcebytesupdate=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasicExt(resourcedata,new int[]{1,2,3,1}));
  m_rolepermissions=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadBytes.INSTANCE);
  m_changepassword=new StaticSentence(s,""String_Node_Str"",new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING}));
  m_sequencecash=new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadInteger.INSTANCE);
  m_activecash=new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.INT,Datas.TIMESTAMP,Datas.TIMESTAMP}));
  m_insertcash=new StaticSentence(s,""String_Node_Str"" + ""String_Node_Str"",new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.INT,Datas.TIMESTAMP,Datas.TIMESTAMP}));
  m_locationfind=new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadString.INSTANCE);
  resetResourcesCache();
}",0.9711399711399712
6012,"public boolean initApp(AppProperties props){
  m_props=props;
  applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));
  try {
    session=AppViewConnection.createSession(m_props);
  }
 catch (  BasicException e) {
    JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_DANGER,e.getMessage(),e));
    return false;
  }
  m_dlSystem=(DataLogicSystem)getBean(""String_Node_Str"");
  String sDBVersion=readDataBaseVersion();
  if (!AppLocal.APP_VERSION.equals(sDBVersion)) {
    String sScript=sDBVersion == null ? m_dlSystem.getInitScript() + ""String_Node_Str"" : m_dlSystem.getInitScript() + ""String_Node_Str"" + sDBVersion+ ""String_Node_Str"";
    if (JRootApp.class.getResource(sScript) == null) {
      JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_DANGER,sDBVersion == null ? AppLocal.getIntString(""String_Node_Str"",session.DB.getName()) : AppLocal.getIntString(""String_Node_Str"")));
      session.close();
      return false;
    }
 else {
      if (JOptionPane.showConfirmDialog(this,AppLocal.getIntString(sDBVersion == null ? ""String_Node_Str"" : ""String_Node_Str""),AppLocal.getIntString(""String_Node_Str""),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
        try {
          BatchSentence bsentence=new BatchSentenceResource(session,sScript);
          bsentence.putParameter(""String_Node_Str"",Matcher.quoteReplacement(AppLocal.APP_ID));
          bsentence.putParameter(""String_Node_Str"",Matcher.quoteReplacement(AppLocal.APP_NAME));
          bsentence.putParameter(""String_Node_Str"",Matcher.quoteReplacement(AppLocal.APP_VERSION));
          java.util.List l=bsentence.list();
          if (l.size() > 0) {
            JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),l.toArray(new Throwable[l.size()])));
          }
        }
 catch (        BasicException e) {
          JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_DANGER,AppLocal.getIntString(""String_Node_Str""),e));
          session.close();
          return false;
        }
      }
 else {
        session.close();
        return false;
      }
    }
  }
  m_propsdb=m_dlSystem.getResourceAsProperties(m_props.getHost() + ""String_Node_Str"");
  try {
    String sActiveCashIndex=m_propsdb.getProperty(""String_Node_Str"");
    Object[] valcash=sActiveCashIndex == null ? null : m_dlSystem.findActiveCash(sActiveCashIndex);
    if (valcash == null || !m_props.getHost().equals(valcash[0])) {
      setActiveCash(UUID.randomUUID().toString(),1,new Date(),null);
      m_dlSystem.execInsertCash(new Object[]{getActiveCashIndex(),m_props.getHost(),getActiveCashSequence(),getActiveCashDateStart(),getActiveCashDateEnd()});
    }
 else {
      setActiveCash(sActiveCashIndex,(Integer)valcash[1],(Date)valcash[2],(Date)valcash[3]);
    }
  }
 catch (  BasicException e) {
    MessageInf msg=new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString(""String_Node_Str""),e);
    msg.show(this);
    session.close();
    return false;
  }
  m_sInventoryLocation=m_propsdb.getProperty(""String_Node_Str"");
  if (m_sInventoryLocation == null) {
    m_sInventoryLocation=""String_Node_Str"";
    m_propsdb.setProperty(""String_Node_Str"",m_sInventoryLocation);
    m_dlSystem.setResourceAsProperties(m_props.getHost() + ""String_Node_Str"",m_propsdb);
  }
  m_TP=new DeviceTicket(m_props);
  m_TTP=new TicketParser(getDeviceTicket(),m_dlSystem);
  printerStart();
  m_Scale=new DeviceScale(m_props);
  m_Scanner=DeviceScannerFactory.createInstance(m_props);
  BufferedImage imgicon=m_dlSystem.getResourceAsImage(""String_Node_Str"");
  m_jLblTitle.setIcon(imgicon == null ? null : new ImageIcon(imgicon));
  m_jLblTitle.setText(m_dlSystem.getResourceAsText(""String_Node_Str""));
  String sWareHouse;
  try {
    sWareHouse=m_dlSystem.findLocationName(m_sInventoryLocation);
  }
 catch (  BasicException e) {
    sWareHouse=null;
  }
  String url;
  try {
    url=session.getURL();
  }
 catch (  SQLException e) {
    url=""String_Node_Str"";
  }
  m_jHost.setText(""String_Node_Str"" + m_props.getHost() + ""String_Node_Str""+ sWareHouse+ ""String_Node_Str""+ url);
  showLogin();
  return true;
}","public boolean initApp(AppProperties props){
  m_props=props;
  applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));
  try {
    session=AppViewConnection.createSession(m_props);
  }
 catch (  BasicException e) {
    JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_DANGER,e.getMessage(),e));
    return false;
  }
  m_dlSystem=(DataLogicSystem)getBean(""String_Node_Str"");
  String sDBVersion=readDataBaseVersion();
  if (!AppLocal.APP_VERSION.equals(sDBVersion)) {
    String sScript=sDBVersion == null ? m_dlSystem.getInitScript() + ""String_Node_Str"" : m_dlSystem.getInitScript() + ""String_Node_Str"" + sDBVersion+ ""String_Node_Str"";
    if (JRootApp.class.getResource(sScript) == null) {
      JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_DANGER,sDBVersion == null ? AppLocal.getIntString(""String_Node_Str"",session.DB.getName()) : AppLocal.getIntString(""String_Node_Str"")));
      session.close();
      return false;
    }
 else {
      if (JOptionPane.showConfirmDialog(this,AppLocal.getIntString(sDBVersion == null ? ""String_Node_Str"" : ""String_Node_Str""),AppLocal.getIntString(""String_Node_Str""),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
        try {
          BatchSentence bsentence=new BatchSentenceResource(session,sScript);
          bsentence.putParameter(""String_Node_Str"",Matcher.quoteReplacement(AppLocal.APP_ID));
          bsentence.putParameter(""String_Node_Str"",Matcher.quoteReplacement(AppLocal.APP_NAME));
          bsentence.putParameter(""String_Node_Str"",Matcher.quoteReplacement(AppLocal.APP_VERSION));
          java.util.List l=bsentence.list();
          if (l.size() > 0) {
            JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),l.toArray(new Throwable[l.size()])));
          }
        }
 catch (        BasicException e) {
          JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_DANGER,AppLocal.getIntString(""String_Node_Str""),e));
          session.close();
          return false;
        }
      }
 else {
        session.close();
        return false;
      }
    }
  }
  m_propsdb=m_dlSystem.getResourceAsProperties(m_props.getHost() + ""String_Node_Str"");
  try {
    String sActiveCashIndex=m_propsdb.getProperty(""String_Node_Str"");
    Object[] valcash=sActiveCashIndex == null ? null : m_dlSystem.findActiveCash(sActiveCashIndex);
    if (valcash == null || !m_props.getHost().equals(valcash[0])) {
      setActiveCash(UUID.randomUUID().toString(),m_dlSystem.getSequenceCash(m_props.getHost()) + 1,new Date(),null);
      m_dlSystem.execInsertCash(new Object[]{getActiveCashIndex(),m_props.getHost(),getActiveCashSequence(),getActiveCashDateStart(),getActiveCashDateEnd()});
    }
 else {
      setActiveCash(sActiveCashIndex,(Integer)valcash[1],(Date)valcash[2],(Date)valcash[3]);
    }
  }
 catch (  BasicException e) {
    MessageInf msg=new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString(""String_Node_Str""),e);
    msg.show(this);
    session.close();
    return false;
  }
  m_sInventoryLocation=m_propsdb.getProperty(""String_Node_Str"");
  if (m_sInventoryLocation == null) {
    m_sInventoryLocation=""String_Node_Str"";
    m_propsdb.setProperty(""String_Node_Str"",m_sInventoryLocation);
    m_dlSystem.setResourceAsProperties(m_props.getHost() + ""String_Node_Str"",m_propsdb);
  }
  m_TP=new DeviceTicket(m_props);
  m_TTP=new TicketParser(getDeviceTicket(),m_dlSystem);
  printerStart();
  m_Scale=new DeviceScale(m_props);
  m_Scanner=DeviceScannerFactory.createInstance(m_props);
  BufferedImage imgicon=m_dlSystem.getResourceAsImage(""String_Node_Str"");
  m_jLblTitle.setIcon(imgicon == null ? null : new ImageIcon(imgicon));
  m_jLblTitle.setText(m_dlSystem.getResourceAsText(""String_Node_Str""));
  String sWareHouse;
  try {
    sWareHouse=m_dlSystem.findLocationName(m_sInventoryLocation);
  }
 catch (  BasicException e) {
    sWareHouse=null;
  }
  String url;
  try {
    url=session.getURL();
  }
 catch (  SQLException e) {
    url=""String_Node_Str"";
  }
  m_jHost.setText(""String_Node_Str"" + m_props.getHost() + ""String_Node_Str""+ sWareHouse+ ""String_Node_Str""+ url);
  showLogin();
  return true;
}",0.9943222143364088
6013,"private void defaultValues(){
  jListTickets.setModel(new MyListData(new ArrayList()));
  jcboUser.setSelectedItem(null);
  jtxtTicketID.reset();
  jtxtTicketID.activate();
  jCheckBoxSales.setSelected(false);
  jCheckBoxRefunds.setSelected(false);
  jcboUser.setSelectedItem(null);
  jcboMoney.setSelectedItem(((ListQBFModelNumber)jcboMoney.getModel()).getElementAt(0));
  jcboMoney.revalidate();
  jcboMoney.repaint();
  jtxtMoney.reset();
}","private void defaultValues(){
  jListTickets.setModel(new MyListData(new ArrayList()));
  jcboUser.setSelectedItem(null);
  jtxtTicketID.reset();
  jtxtTicketID.activate();
  jCheckBoxSales.setSelected(false);
  jCheckBoxRefunds.setSelected(false);
  jcboUser.setSelectedItem(null);
  jcboMoney.setSelectedItem(((ListQBFModelNumber)jcboMoney.getModel()).getElementAt(0));
  jcboMoney.revalidate();
  jcboMoney.repaint();
  jtxtMoney.reset();
  jParamsDatesInterval1.setStartDate(null);
  jParamsDatesInterval1.setEndDate(null);
}",0.911522633744856
6014,"public void add(double dValue){
  subtotal+=dValue;
  taxtotal=RoundUtils.round(subtotal * tax.getRate());
}","public void add(double dValue){
  subtotal+=dValue;
  taxtotal=subtotal * tax.getRate();
}",0.9090909090909092
6015,"public void updateCurDebt(Double ammount,Date d){
  curdebt=RoundUtils.round(RoundUtils.getValue(curdebt) + ammount);
  if (RoundUtils.compare(curdebt,0.0) > 0) {
    if (curdate == null) {
      curdate=d;
    }
  }
 else   if (RoundUtils.compare(curdebt,0.0) == 0) {
    curdebt=null;
    curdate=null;
  }
 else {
    curdate=null;
  }
}","public void updateCurDebt(Double ammount,Date d){
  curdebt=curdebt + ammount;
  if (RoundUtils.compare(curdebt,0.0) > 0) {
    if (curdate == null) {
      curdate=d;
    }
  }
 else   if (RoundUtils.compare(curdebt,0.0) == 0) {
    curdebt=null;
    curdate=null;
  }
 else {
    curdate=null;
  }
}",0.2652106084243369
6016,"public void actionPerformed(ActionEvent e){
  Double tendered=m_jTendered.getDoubleValue();
  if (tendered == null) {
    m_jTendered.setDoubleValue(RoundUtils.round(amount));
  }
 else {
    m_jTendered.setDoubleValue(RoundUtils.round(tendered + amount));
  }
  printState();
}","public void actionPerformed(ActionEvent e){
  Double tendered=m_jTendered.getDoubleValue();
  if (tendered == null) {
    m_jTendered.setDoubleValue(amount);
  }
 else {
    m_jTendered.setDoubleValue(tendered + amount);
  }
  printState();
}",0.9076923076923076
6017,"public double getTax(){
  double sum=0.0;
  if (hasTaxesCalculated()) {
    for (    TicketTaxInfo tax : taxes) {
      sum+=tax.getTax();
    }
  }
 else {
    for (    TicketLineInfo line : m_aLines) {
      sum+=RoundUtils.round(line.getTax());
    }
  }
  return sum;
}","public double getTax(){
  double sum=0.0;
  if (hasTaxesCalculated()) {
    for (    TicketTaxInfo tax : taxes) {
      sum+=tax.getTax();
    }
  }
 else {
    for (    TicketLineInfo line : m_aLines) {
      sum+=line.getTax();
    }
  }
  return sum;
}",0.8636363636363636
6018,"public void add(double dValue){
  subtotal+=dValue;
  taxtotal=RoundUtils.round(subtotal * tax.getRate());
}","public void add(double dValue){
  subtotal+=dValue;
  taxtotal=subtotal * tax.getRate();
}",0.9090909090909092
6019,"@Override public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommerceID,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommercePassword,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
    sb.append(""String_Node_Str"");
    String tmp=payinfo.getExpirationDate();
    sb.append(URLEncoder.encode(tmp,""String_Node_Str""));
    String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    if (cc_name.length > 0) {
      sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
    }
    sb.append(""String_Node_Str"");
    if (cc_name.length > 1) {
      sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(m_bTestMode);
    if (payinfo.getTotal() >= 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONVALIDATE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONREFUND);
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTransactionID());
    }
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=in.readLine();
    payinfo.setReturnMessage(returned);
    in.close();
    String[] ccRep=returned.split(""String_Node_Str"");
    if (OK.equals(ccRep[0])) {
      payinfo.paymentOK((String)ccRep[4],(String)ccRep[6],returned);
    }
 else {
      payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),ccRep[0] + ""String_Node_Str"" + ccRep[3]);
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}","@Override public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommerceID,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommercePassword,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    if (payinfo.getTrack1(true) == null && payinfo.getTrack2(true) == null && payinfo.getTrack3(true) == null) {
      sb.append(""String_Node_Str"");
      sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
      sb.append(""String_Node_Str"");
      String tmp=payinfo.getExpirationDate();
      sb.append(URLEncoder.encode(tmp,""String_Node_Str""));
      String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      if (cc_name.length > 0) {
        sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
      }
      sb.append(""String_Node_Str"");
      if (cc_name.length > 1) {
        sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
      }
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTrack1(false));
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(m_bTestMode);
    if (payinfo.getTotal() >= 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONVALIDATE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONREFUND);
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTransactionID());
    }
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=in.readLine();
    in.close();
    AuthorizeNetParser anp=new AuthorizeNetParser(returned);
    Map props=anp.splitXML();
    if (anp.getResult().equals(LocalRes.getIntString(""String_Node_Str""))) {
      if (APPROVED.equals(props.get(""String_Node_Str""))) {
        payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),returned);
      }
 else {
        StringBuilder errorLine=new StringBuilder();
        if (anp.getNumErrors() > 0) {
          for (int i=1; i <= anp.getNumErrors(); i++) {
            errorLine.append(props.get(""String_Node_Str"" + Integer.toString(i)));
            errorLine.append(""String_Node_Str"");
            errorLine.append(props.get(""String_Node_Str"" + Integer.toString(i)));
            errorLine.append(""String_Node_Str"");
          }
        }
        payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),errorLine.toString());
      }
    }
 else {
      payinfo.paymentError(anp.getResult(),""String_Node_Str"");
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}",0.7621861152141802
6020,"public String getTrack2(){
  return track1;
}","public String getTrack2(boolean framingChar){
  return (framingChar) ? track2 : track2.substring(1,track2.length() - 2);
}",0.5389221556886228
6021,"public String getTrack1(){
  return track1;
}","/** 
 * Get tracks of magnetic card. Framing characters:  - start sentinel (SS) - end sentinel (ES)  - LRC 
 * @param framingChar true: including framing characters false: exluding framing characters
 * @return tracks of the magnetic card
 */
public String getTrack1(boolean framingChar){
  return (framingChar) ? track1 : track1.substring(1,track1.length() - 2);
}",0.1902439024390244
6022,"public String getTrack3(){
  return track1;
}","public String getTrack3(boolean framingChar){
  return (framingChar) ? track3 : track3.substring(1,track3.length() - 2);
}",0.5389221556886228
6023,"public byte transChar(char sChar){
  if ((sChar >= 0x0000) && (sChar < 0x0080)) {
    return (byte)sChar;
  }
 else {
switch (sChar) {
case '\u00c1':
      return 0x41;
case '\u00c9':
    return 0x45;
case '\u00cd':
  return 0x49;
case '\u00d3':
return 0x4F;
case '\u00da':
return 0x55;
case '\u00FC':
return -0x7F;
case '\u00E9':
return -0x7E;
case '\u00DC':
return -0x66;
case '\u00A3':
return -0x64;
case '\u00A5':
return -0x63;
case '\u00E1':
return -0x60;
case '\u00ED':
return -0x5F;
case '\u00F3':
return -0x5E;
case '\u00FA':
return -0x5D;
case '\u00F1':
return -0x5C;
case '\u00D1':
return -0x5B;
case '\u00BF':
return -0x58;
case '\u00A1':
return -0x53;
case '\u20AC':
return -0x12;
default :
return 0x3F;
}
}
}","public byte transChar(char sChar){
  if ((sChar >= 0x0000) && (sChar < 0x0080)) {
    return (byte)sChar;
  }
 else {
switch (sChar) {
case '\u00c1':
      return 0x41;
case '\u00c9':
    return 0x45;
case '\u00cd':
  return 0x49;
case '\u00d3':
return 0x4F;
case '\u00da':
return 0x55;
case '\u00C7':
return -0x80;
case '\u00FC':
return -0x7F;
case '\u00E9':
return -0x7E;
case '\u00E4':
return -0x7C;
case '\u00E5':
return -0x7A;
case '\u00E7':
return -0x79;
case '\u00C4':
return -0x72;
case '\u00C5':
return -0x71;
case '\u00F6':
return -0x6C;
case '\u00D6':
return -0x67;
case '\u00DC':
return -0x66;
case '\u00A3':
return -0x64;
case '\u00A5':
return -0x63;
case '\u00E1':
return -0x60;
case '\u00ED':
return -0x5F;
case '\u00F3':
return -0x5E;
case '\u00FA':
return -0x5D;
case '\u00F1':
return -0x5C;
case '\u00D1':
return -0x5B;
case '\u00BF':
return -0x58;
case '\u00A1':
return -0x53;
case '\u20AC':
return -0x12;
default :
return 0x3F;
}
}
}",0.8614097968936678
6024,"public void execute(PaymentInfoMagcard payinfo){
}","public void execute(PaymentInfoMagcard payinfo){
  payinfo.paymentOK(""String_Node_Str"",payinfo.getTransactionID(),""String_Node_Str"");
}",0.5405405405405406
6025,"@Override public Object createValue() throws BasicException {
  boolean dateRange=false;
  Object[] afilter=new Object[12];
  if (jtxtTicketID.getText() == null || jtxtTicketID.getText().equals(""String_Node_Str"")) {
    afilter[0]=QBFCompareEnum.COMP_NONE;
    afilter[1]=null;
  }
 else {
    afilter[0]=QBFCompareEnum.COMP_EQUALS;
    afilter[1]=jtxtTicketID.getValueInteger();
  }
  if (jCheckBoxSales.isSelected() && jCheckBoxRefunds.isSelected() || !jCheckBoxSales.isSelected() && !jCheckBoxRefunds.isSelected()) {
    afilter[2]=QBFCompareEnum.COMP_NONE;
    afilter[3]=null;
  }
 else   if (jCheckBoxSales.isSelected()) {
    afilter[2]=QBFCompareEnum.COMP_EQUALS;
    afilter[3]=0;
  }
 else   if (jCheckBoxRefunds.isSelected()) {
    afilter[2]=QBFCompareEnum.COMP_EQUALS;
    afilter[3]=1;
  }
  afilter[5]=jtxtMoney.getDoubleValue();
  afilter[4]=afilter[5] == null ? QBFCompareEnum.COMP_NONE : jcboMoney.getSelectedItem();
  if (jcboTimeFrame.getSelectedItem() == null) {
    dateRange=true;
    afilter[6]=QBFCompareEnum.COMP_NONE;
    afilter[7]=null;
    afilter[8]=QBFCompareEnum.COMP_NONE;
    afilter[9]=null;
  }
 else {
    int year=cal.get(Calendar.YEAR);
    int month=cal.get(Calendar.MONTH) + 1;
    int day=cal.get(Calendar.DAY_OF_MONTH);
    if (jcboTimeFrame.getSelectedItem() == LocalRes.getIntString(""String_Node_Str"")) {
      afilter[6]=QBFCompareEnum.COMP_RE;
      afilter[7]=""String_Node_Str"" + year + ""String_Node_Str""+ month+ ""String_Node_Str""+ day+ ""String_Node_Str"";
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else     if (jcboTimeFrame.getSelectedItem() == LocalRes.getIntString(""String_Node_Str"")) {
      afilter[6]=QBFCompareEnum.COMP_RE;
      afilter[7]=""String_Node_Str"" + year + ""String_Node_Str""+ month+ ""String_Node_Str"";
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else     if (jcboTimeFrame.getSelectedItem() == LocalRes.getIntString(""String_Node_Str"")) {
      afilter[6]=QBFCompareEnum.COMP_RE;
      afilter[7]=""String_Node_Str"" + Integer.toString(year) + ""String_Node_Str"";
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
  }
  if (dateRange) {
    String dayF=(jcboDayFrom.getSelectedItem() == null) ? ""String_Node_Str"" : (String)jcboDayFrom.getSelectedItem();
    String monthF=(jcboMonthFrom.getSelectedItem() == null) ? ""String_Node_Str"" : (String)jcboMonthFrom.getSelectedItem();
    String dayT=(jcboDayTo.getSelectedItem() == null) ? ""String_Node_Str"" : String.valueOf(Integer.parseInt((String)jcboDayTo.getSelectedItem()) + 1);
    String monthT=(jcboMonthTo.getSelectedItem() == null) ? ""String_Node_Str"" : (String)jcboMonthTo.getSelectedItem();
    if (jcboYearFrom.getSelectedItem() == null && jcboYearTo.getSelectedItem() == null) {
      afilter[6]=QBFCompareEnum.COMP_NONE;
      afilter[7]=null;
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else     if (jcboYearFrom.getSelectedItem() == null && jcboYearTo.getSelectedItem() != null) {
      afilter[6]=QBFCompareEnum.COMP_NONE;
      afilter[7]=null;
      afilter[8]=QBFCompareEnum.COMP_LESSOREQUALS;
      afilter[9]=jcboYearTo.getSelectedItem() + ""String_Node_Str"" + monthT+ ""String_Node_Str""+ dayT;
    }
 else     if (jcboYearFrom.getSelectedItem() != null && jcboYearTo.getSelectedItem() == null) {
      afilter[6]=QBFCompareEnum.COMP_GREATEROREQUALS;
      afilter[7]=jcboYearFrom.getSelectedItem() + ""String_Node_Str"" + monthF+ ""String_Node_Str""+ dayF;
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else {
      afilter[6]=QBFCompareEnum.COMP_GREATEROREQUALS;
      afilter[7]=jcboYearFrom.getSelectedItem() + ""String_Node_Str"" + monthF+ ""String_Node_Str""+ dayF;
      afilter[8]=QBFCompareEnum.COMP_LESSOREQUALS;
      afilter[9]=jcboYearTo.getSelectedItem() + ""String_Node_Str"" + monthT+ ""String_Node_Str""+ dayT;
    }
  }
  if (jcboUser.getSelectedItem() == null) {
    afilter[10]=QBFCompareEnum.COMP_NONE;
    afilter[11]=null;
  }
 else {
    afilter[10]=QBFCompareEnum.COMP_EQUALS;
    afilter[11]=((TaxCategoryInfo)jcboUser.getSelectedItem()).getName();
  }
  return afilter;
}","@Override public Object createValue() throws BasicException {
  boolean dateRange=false;
  Object[] afilter=new Object[12];
  if (jtxtTicketID.getText() == null || jtxtTicketID.getText().equals(""String_Node_Str"")) {
    afilter[0]=QBFCompareEnum.COMP_NONE;
    afilter[1]=null;
  }
 else {
    afilter[0]=QBFCompareEnum.COMP_EQUALS;
    afilter[1]=jtxtTicketID.getValueInteger();
  }
  if (jCheckBoxSales.isSelected() && jCheckBoxRefunds.isSelected() || !jCheckBoxSales.isSelected() && !jCheckBoxRefunds.isSelected()) {
    afilter[2]=QBFCompareEnum.COMP_NONE;
    afilter[3]=null;
  }
 else   if (jCheckBoxSales.isSelected()) {
    afilter[2]=QBFCompareEnum.COMP_EQUALS;
    afilter[3]=0;
  }
 else   if (jCheckBoxRefunds.isSelected()) {
    afilter[2]=QBFCompareEnum.COMP_EQUALS;
    afilter[3]=1;
  }
  afilter[5]=jtxtMoney.getDoubleValue();
  afilter[4]=afilter[5] == null ? QBFCompareEnum.COMP_NONE : jcboMoney.getSelectedItem();
  if (jcboTimeFrame.getSelectedItem() == null) {
    dateRange=true;
    afilter[6]=QBFCompareEnum.COMP_NONE;
    afilter[7]=null;
    afilter[8]=QBFCompareEnum.COMP_NONE;
    afilter[9]=null;
  }
 else {
    int year=cal.get(Calendar.YEAR);
    String month=(cal.get(Calendar.MONTH) + 1 < 10) ? ""String_Node_Str"" + (cal.get(Calendar.MONTH) + 1) : Integer.toString(cal.get(Calendar.MONTH) + 1);
    String day=(cal.get(Calendar.DAY_OF_MONTH) < 10) ? ""String_Node_Str"" + cal.get(Calendar.DAY_OF_MONTH) : Integer.toString(cal.get(Calendar.DAY_OF_MONTH));
    if (jcboTimeFrame.getSelectedItem() == LocalRes.getIntString(""String_Node_Str"")) {
      afilter[6]=QBFCompareEnum.COMP_RE;
      afilter[7]=""String_Node_Str"" + year + ""String_Node_Str""+ month+ ""String_Node_Str""+ day+ ""String_Node_Str"";
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else     if (jcboTimeFrame.getSelectedItem() == LocalRes.getIntString(""String_Node_Str"")) {
      afilter[6]=QBFCompareEnum.COMP_RE;
      afilter[7]=""String_Node_Str"" + year + ""String_Node_Str""+ month+ ""String_Node_Str"";
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else     if (jcboTimeFrame.getSelectedItem() == LocalRes.getIntString(""String_Node_Str"")) {
      afilter[6]=QBFCompareEnum.COMP_RE;
      afilter[7]=""String_Node_Str"" + Integer.toString(year) + ""String_Node_Str"";
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
  }
  if (dateRange) {
    String dayF=(jcboDayFrom.getSelectedItem() == null) ? ""String_Node_Str"" : (String)jcboDayFrom.getSelectedItem();
    String monthF=(jcboMonthFrom.getSelectedItem() == null) ? ""String_Node_Str"" : (String)jcboMonthFrom.getSelectedItem();
    String dayT=(jcboDayTo.getSelectedItem() == null) ? ""String_Node_Str"" : String.valueOf(Integer.parseInt((String)jcboDayTo.getSelectedItem()) + 1);
    String monthT=(jcboMonthTo.getSelectedItem() == null) ? ""String_Node_Str"" : (String)jcboMonthTo.getSelectedItem();
    if (jcboYearFrom.getSelectedItem() == null && jcboYearTo.getSelectedItem() == null) {
      afilter[6]=QBFCompareEnum.COMP_NONE;
      afilter[7]=null;
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else     if (jcboYearFrom.getSelectedItem() == null && jcboYearTo.getSelectedItem() != null) {
      afilter[6]=QBFCompareEnum.COMP_NONE;
      afilter[7]=null;
      afilter[8]=QBFCompareEnum.COMP_LESSOREQUALS;
      afilter[9]=jcboYearTo.getSelectedItem() + ""String_Node_Str"" + monthT+ ""String_Node_Str""+ dayT;
    }
 else     if (jcboYearFrom.getSelectedItem() != null && jcboYearTo.getSelectedItem() == null) {
      afilter[6]=QBFCompareEnum.COMP_GREATEROREQUALS;
      afilter[7]=jcboYearFrom.getSelectedItem() + ""String_Node_Str"" + monthF+ ""String_Node_Str""+ dayF;
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else {
      afilter[6]=QBFCompareEnum.COMP_GREATEROREQUALS;
      afilter[7]=jcboYearFrom.getSelectedItem() + ""String_Node_Str"" + monthF+ ""String_Node_Str""+ dayF;
      afilter[8]=QBFCompareEnum.COMP_LESSOREQUALS;
      afilter[9]=jcboYearTo.getSelectedItem() + ""String_Node_Str"" + monthT+ ""String_Node_Str""+ dayT;
    }
  }
  if (jcboUser.getSelectedItem() == null) {
    afilter[10]=QBFCompareEnum.COMP_NONE;
    afilter[11]=null;
  }
 else {
    afilter[10]=QBFCompareEnum.COMP_EQUALS;
    afilter[11]=((TaxCategoryInfo)jcboUser.getSelectedItem()).getName();
  }
  return afilter;
}",0.9709193245778612
6026,"private Object executeEvent(TicketInfo ticket,Object ticketext,String eventkey,ScriptArg... args){
  String resource=dlSystem.getResourceAsXML(m_jbtnconfig.getEvent(eventkey));
  if (resource == null) {
    return null;
  }
 else {
    ScriptObject scr=new ScriptObject(ticket,ticketext);
    return evalScript(scr,resource,args);
  }
}","private Object executeEvent(TicketInfo ticket,Object ticketext,String eventkey,ScriptArg... args){
  String resource=m_jbtnconfig.getEvent(eventkey);
  if (resource == null) {
    return null;
  }
 else {
    ScriptObject scr=new ScriptObject(ticket,ticketext);
    return evalScript(scr,resource,args);
  }
}",0.958139534883721
6027,"private void reload() throws BasicException {
  String attsetid=(String)filter.createValue();
  bd.setEditable(attsetid != null);
  bd.actionLoad();
  editor.setInsertId(attsetid);
}","private void reload() throws BasicException {
  String attsetid=(String)filter.createValue();
  editor.setInsertId(attsetid);
  bd.setEditable(attsetid != null);
  bd.actionLoad();
}",0.8241758241758241
6028,"private void reload() throws BasicException {
  String attid=(String)filter.createValue();
  bd.setEditable(attid != null);
  bd.actionLoad();
  editor.setInsertId(attid);
}","private void reload() throws BasicException {
  String attid=(String)filter.createValue();
  editor.setInsertId(attid);
  bd.setEditable(attid != null);
  bd.actionLoad();
}",0.8323699421965318
6029,"@Override public void endElement(String uri,String localName,String qName) throws SAXException {
switch (m_iOutputType) {
case OUTPUT_NONE:
    if (""String_Node_Str"".equals(qName)) {
      try {
        AudioClip oAudio=Applet.newAudioClip(getClass().getClassLoader().getResource(text.toString()));
        oAudio.play();
      }
 catch (      Exception fnfe) {
      }
      text=null;
    }
  break;
case OUTPUT_TICKET:
if (""String_Node_Str"".equals(qName)) {
  try {
    BufferedImage image=m_system.getResourceAsImage(text.toString());
    m_oOutputPrinter.printImage(image);
  }
 catch (  Exception fnfe) {
  }
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  m_oOutputPrinter.printBarCode(bctype,bcposition,text.toString());
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
      m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignRight(text.toString(),m_iTextLength));
    break;
case DevicePrinter.ALIGN_CENTER:
  m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_oOutputPrinter.printText(m_iTextStyle,text.toString());
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endLine();
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endReceipt();
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_DISPLAY:
if (""String_Node_Str"".equals(qName)) {
if (m_sVisorLine1 == null) {
m_sVisorLine1=m_sVisorLine.toString();
}
 else {
m_sVisorLine2=m_sVisorLine.toString();
}
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine1=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine2=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
m_sVisorLine.append(DeviceTicket.alignRight(text.toString(),m_iTextLength));
break;
case DevicePrinter.ALIGN_CENTER:
m_sVisorLine.append(DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_sVisorLine.append(DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_sVisorLine.append(text);
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getDeviceDisplay().writeVisor(m_iVisorAnimation,m_sVisorLine1,m_sVisorLine2);
m_iVisorAnimation=DeviceDisplayBase.ANIMATION_NULL;
m_sVisorLine1=null;
m_sVisorLine2=null;
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_FISCAL:
if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().endReceipt();
m_iOutputType=OUTPUT_NONE;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printLine(text.toString(),m_dValue1,m_dValue2,attribute3);
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printMessage(text.toString());
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printTotal(text.toString(),m_dValue1);
text=null;
}
break;
}
}","@Override public void endElement(String uri,String localName,String qName) throws SAXException {
switch (m_iOutputType) {
case OUTPUT_NONE:
    if (""String_Node_Str"".equals(qName)) {
      try {
        AudioClip oAudio=Applet.newAudioClip(getClass().getClassLoader().getResource(text.toString()));
        oAudio.play();
      }
 catch (      Exception fnfe) {
      }
      text=null;
    }
  break;
case OUTPUT_TICKET:
if (""String_Node_Str"".equals(qName)) {
  try {
    BufferedImage image=m_system.getResourceAsImage(text.toString());
    if (image != null) {
      m_oOutputPrinter.printImage(image);
    }
  }
 catch (  Exception fnfe) {
  }
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  m_oOutputPrinter.printBarCode(bctype,bcposition,text.toString());
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
      m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignRight(text.toString(),m_iTextLength));
    break;
case DevicePrinter.ALIGN_CENTER:
  m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_oOutputPrinter.printText(m_iTextStyle,text.toString());
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endLine();
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endReceipt();
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_DISPLAY:
if (""String_Node_Str"".equals(qName)) {
if (m_sVisorLine1 == null) {
m_sVisorLine1=m_sVisorLine.toString();
}
 else {
m_sVisorLine2=m_sVisorLine.toString();
}
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine1=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine2=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
m_sVisorLine.append(DeviceTicket.alignRight(text.toString(),m_iTextLength));
break;
case DevicePrinter.ALIGN_CENTER:
m_sVisorLine.append(DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_sVisorLine.append(DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_sVisorLine.append(text);
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getDeviceDisplay().writeVisor(m_iVisorAnimation,m_sVisorLine1,m_sVisorLine2);
m_iVisorAnimation=DeviceDisplayBase.ANIMATION_NULL;
m_sVisorLine1=null;
m_sVisorLine2=null;
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_FISCAL:
if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().endReceipt();
m_iOutputType=OUTPUT_NONE;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printLine(text.toString(),m_dValue1,m_dValue2,attribute3);
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printMessage(text.toString());
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printTotal(text.toString(),m_dValue1);
text=null;
}
break;
}
}",0.9949456272017154
6030,"/** 
 * Method that changes points for milimeters. 
 * @param height - height in points
 */
private int changePointsforMM(int height){
  return (int)(height * point * 1000);
}","/** 
 * Method that changes points for milimeters. 
 * @param height - height in points
 */
@Deprecated private int changePointsforMM(int height){
  return (int)(height * point * 1000);
}",0.9668508287292816
6031,"@Override public void endReceipt(){
  try {
    PrinterJob printJob=PrinterJob.getPrinterJob();
    printJob.setPrintable(new PrintableTicket(m_ticketcurrent));
    PrintRequestAttributeSet aset=new HashPrintRequestAttributeSet();
    aset.add(OrientationRequested.PORTRAIT);
    aset.add(new Copies(1));
    aset.add(new JobName(AppLocal.APP_NAME + ""String_Node_Str"",null));
    if (isReceiptPrinter.equals(""String_Node_Str"")) {
      MediaSize myISO=new MediaSize(78,getHeightForReceiptPrinters() + 10,Size2DSyntax.MM,MediaSizeName.NA_LEGAL);
      aset.add(MediaSizeName.NA_LEGAL);
    }
 else {
      aset.add(MediaSizeName.ISO_A4);
    }
    if (printservice == null) {
      if (printJob.printDialog(aset)) {
        printJob.print();
      }
    }
 else {
      printJob.setPrintService(printservice);
      printJob.print(aset);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_ticketcurrent=null;
}","@Override public void endReceipt(){
  try {
    PrinterJob printJob=PrinterJob.getPrinterJob();
    printJob.setPrintable(new PrintableTicket(m_ticketcurrent));
    PrintRequestAttributeSet aset=new HashPrintRequestAttributeSet();
    aset.add(OrientationRequested.PORTRAIT);
    aset.add(new Copies(1));
    aset.add(new JobName(AppLocal.APP_NAME + ""String_Node_Str"",null));
    if (isReceiptPrinter.equals(""String_Node_Str"")) {
      MediaSize myISO=new MediaSize(widthOfPaper,heightOfPaper,Size2DSyntax.MM,MediaSizeName.NA_LEGAL);
      aset.add(MediaSizeName.NA_LEGAL);
    }
 else {
      aset.add(MediaSizeName.ISO_A4);
    }
    if (printservice == null) {
      if (printJob.printDialog(aset)) {
        printJob.print();
      }
    }
 else {
      printJob.setPrintService(printservice);
      printJob.print(aset);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_ticketcurrent=null;
}",0.9723577235772358
6032,"/** 
 * Getter that gives back lenght of a ticket
 * @return lenght of a ticket in mm
 */
private int getHeightForReceiptPrinters(){
  int height=0;
  int line=0;
  while (m_ticketcurrent.getTheLastIndex() > line) {
    height+=m_ticketcurrent.getHeightOfCommands(line);
    line++;
  }
  return changePointsforMM(height);
}","/** 
 * Getter that gives back lenght of a ticket
 * @return lenght of a ticket in mm
 */
@Deprecated private int getHeightForReceiptPrinters(){
  int height=0;
  int line=0;
  while (m_ticketcurrent.getTheLastIndex() > line) {
    height+=m_ticketcurrent.getHeightOfCommands(line);
    line++;
  }
  System.out.println(height + ""String_Node_Str"" + changePointsforMM(height));
  return changePointsforMM(height);
}",0.8644986449864499
6033,"/** 
 * Creates a new instance of PrinterItemLine 
 */
public PrintItemLineForPrinter(int itextsize){
  super(itextsize);
  BASEFONT=new Font(""String_Node_Str"",Font.PLAIN,8);
  FONTHEIGHT=12;
  FONTWIDTH=5;
}","/** 
 * Creates a new instance of PrinterItemLine 
 */
public PrintItemLineForPrinter(int itextsize){
  super(itextsize);
  BASEFONT=new Font(""String_Node_Str"",Font.PLAIN,8);
  FONTHEIGHT=12;
  FONTWIDTH=4;
}",0.9951923076923076
6034,"public final void saveTicket(final TicketInfo ticket,final String location) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      if (ticket.getTicketId() == 0) {
switch (ticket.getTicketType()) {
case TicketInfo.RECEIPT_NORMAL:
          ticket.setTicketId(getNextTicketIndex().intValue());
        break;
case TicketInfo.RECEIPT_REFUND:
      ticket.setTicketId(getNextTicketRefundIndex().intValue());
    break;
case TicketInfo.RECEIPT_PAYMENT:
  ticket.setTicketId(getNextTicketPaymentIndex().intValue());
break;
default :
throw new BasicException();
}
}
new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,ticket.getId());
setString(2,ticket.getActiveCash());
setTimestamp(3,ticket.getDate());
try {
ByteArrayOutputStream o=new ByteArrayOutputStream();
ticket.getProperties().storeToXML(o,AppLocal.APP_NAME,""String_Node_Str"");
setBytes(4,o.toByteArray());
}
 catch (IOException e) {
setBytes(4,null);
}
}
}
);
new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,ticket.getId());
setInt(2,ticket.getTicketType());
setInt(3,ticket.getTicketId());
setString(4,ticket.getUser().getId());
setString(5,ticket.getCustomerId());
}
}
);
SentenceExec ticketlineinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteBuilder.INSTANCE);
for (TicketLineInfo l : ticket.getLines()) {
ticketlineinsert.exec(l);
if (l.getProductID() != null) {
getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),ticket.getDate(),l.getMultiply() < 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,l.getProductID(),new Double(-l.getMultiply()),new Double(l.getPrice())});
}
}
SentenceExec paymentinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
for (final PaymentInfo p : ticket.getPayments()) {
paymentinsert.exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,UUID.randomUUID().toString());
setString(2,ticket.getId());
setString(3,p.getName());
setDouble(4,p.getTotal());
setString(5,ticket.getTransactionID());
setString(6,ticket.getReturnMessage());
}
}
);
if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
ticket.getCustomer().updateCurDebt(p.getTotal(),ticket.getDate());
getDebtUpdate().exec(new DataParams(){
public void writeValues() throws BasicException {
setDouble(1,ticket.getCustomer().getCurdebt());
setTimestamp(2,ticket.getCustomer().getCurdate());
setString(3,ticket.getCustomer().getId());
}
}
);
}
}
SentenceExec taxlinesinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
if (ticket.getTaxes() != null) {
for (final TicketTaxInfo tickettax : ticket.getTaxes()) {
taxlinesinsert.exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,UUID.randomUUID().toString());
setString(2,ticket.getId());
setString(3,tickettax.getTaxInfo().getId());
setDouble(4,tickettax.getSubTotal());
setDouble(5,tickettax.getTax());
}
}
);
}
}
return null;
}
}
;
t.execute();
}","public final void saveTicket(final TicketInfo ticket,final String location) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      if (ticket.getTicketId() == 0) {
switch (ticket.getTicketType()) {
case TicketInfo.RECEIPT_NORMAL:
          ticket.setTicketId(getNextTicketIndex().intValue());
        break;
case TicketInfo.RECEIPT_REFUND:
      ticket.setTicketId(getNextTicketRefundIndex().intValue());
    break;
case TicketInfo.RECEIPT_PAYMENT:
  ticket.setTicketId(getNextTicketPaymentIndex().intValue());
break;
default :
throw new BasicException();
}
}
new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,ticket.getId());
setString(2,ticket.getActiveCash());
setTimestamp(3,ticket.getDate());
try {
ByteArrayOutputStream o=new ByteArrayOutputStream();
ticket.getProperties().storeToXML(o,AppLocal.APP_NAME,""String_Node_Str"");
setBytes(4,o.toByteArray());
}
 catch (IOException e) {
setBytes(4,null);
}
}
}
);
new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,ticket.getId());
setInt(2,ticket.getTicketType());
setInt(3,ticket.getTicketId());
setString(4,ticket.getUser().getId());
setString(5,ticket.getCustomerId());
}
}
);
SentenceExec ticketlineinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteBuilder.INSTANCE);
for (TicketLineInfo l : ticket.getLines()) {
ticketlineinsert.exec(l);
if (l.getProductID() != null) {
getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),ticket.getDate(),l.getMultiply() < 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,l.getProductID(),new Double(-l.getMultiply()),new Double(l.getPrice())});
}
}
SentenceExec paymentinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
for (final PaymentInfo p : ticket.getPayments()) {
paymentinsert.exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,UUID.randomUUID().toString());
setString(2,ticket.getId());
setString(3,p.getName());
setDouble(4,p.getTotal());
setString(5,ticket.getTransactionID());
setBytes(6,(byte[])Formats.BYTEA.parseValue(ticket.getReturnMessage()));
}
}
);
if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
ticket.getCustomer().updateCurDebt(p.getTotal(),ticket.getDate());
getDebtUpdate().exec(new DataParams(){
public void writeValues() throws BasicException {
setDouble(1,ticket.getCustomer().getCurdebt());
setTimestamp(2,ticket.getCustomer().getCurdate());
setString(3,ticket.getCustomer().getId());
}
}
);
}
}
SentenceExec taxlinesinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
if (ticket.getTaxes() != null) {
for (final TicketTaxInfo tickettax : ticket.getTaxes()) {
taxlinesinsert.exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,UUID.randomUUID().toString());
setString(2,ticket.getId());
setString(3,tickettax.getTaxInfo().getId());
setDouble(4,tickettax.getSubTotal());
setDouble(5,tickettax.getTax());
}
}
);
}
}
return null;
}
}
;
t.execute();
}",0.9930971007823286
6035,"public void saveProperties(AppConfig config){
  config.setProperty(""String_Node_Str"",jtxtMachineHostname.getText());
  LAFInfo laf=(LAFInfo)jcboLAF.getSelectedItem();
  config.setProperty(""String_Node_Str"",laf == null ? System.getProperty(""String_Node_Str"",""String_Node_Str"") : laf.getClassName());
  config.setProperty(""String_Node_Str"",comboValue(jcboMachineScreenmode.getSelectedItem()));
  config.setProperty(""String_Node_Str"",comboValue(jcboTicketsBag.getSelectedItem()));
  String sMachinePrinter=comboValue(jcboMachinePrinter.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter) || ""String_Node_Str"".equals(sMachinePrinter) || ""String_Node_Str"".equals(sMachinePrinter)|| ""String_Node_Str"".equals(sMachinePrinter)|| ""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + comboValue(jcboConnPrinter.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + m_jtxtJPOSPrinter.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter);
  }
  String sMachinePrinter2=comboValue(jcboMachinePrinter2.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter2) || ""String_Node_Str"".equals(sMachinePrinter2) || ""String_Node_Str"".equals(sMachinePrinter2)|| ""String_Node_Str"".equals(sMachinePrinter2)|| ""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + comboValue(jcboConnPrinter2.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter2.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + m_jtxtJPOSPrinter2.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer2.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter2);
  }
  String sMachinePrinter3=comboValue(jcboMachinePrinter3.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter3) || ""String_Node_Str"".equals(sMachinePrinter3) || ""String_Node_Str"".equals(sMachinePrinter3)|| ""String_Node_Str"".equals(sMachinePrinter3)|| ""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + comboValue(jcboConnPrinter3.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter3.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + m_jtxtJPOSPrinter3.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer3.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter3);
  }
  String sMachineDisplay=comboValue(jcboMachineDisplay.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineDisplay) || ""String_Node_Str"".equals(sMachineDisplay) || ""String_Node_Str"".equals(sMachineDisplay)) {
    config.setProperty(""String_Node_Str"",sMachineDisplay + ""String_Node_Str"" + comboValue(jcboConnDisplay.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialDisplay.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachineDisplay)) {
    config.setProperty(""String_Node_Str"",sMachineDisplay + ""String_Node_Str"" + m_jtxtJPOSName.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineDisplay);
  }
  String sMachineScale=comboValue(jcboMachineScale.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineScale) || ""String_Node_Str"".equals(sMachineScale)) {
    config.setProperty(""String_Node_Str"",sMachineScale + ""String_Node_Str"" + comboValue(jcboSerialScale.getSelectedItem()));
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineScale);
  }
  String sMachineScanner=comboValue(jcboMachineScanner.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineScanner)) {
    config.setProperty(""String_Node_Str"",sMachineScanner + ""String_Node_Str"" + comboValue(jcboSerialScanner.getSelectedItem()));
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineScanner);
  }
  config.setProperty(""String_Node_Str"",comboValue(cboPrinters.getSelectedItem()));
  config.setProperty(""String_Node_Str"",String.valueOf(m_ReceiptPrinter.isSelected()));
  dirty.setDirty(false);
}","public void saveProperties(AppConfig config){
  config.setProperty(""String_Node_Str"",uniqueinstance);
  config.setProperty(""String_Node_Str"",jtxtMachineHostname.getText());
  LAFInfo laf=(LAFInfo)jcboLAF.getSelectedItem();
  config.setProperty(""String_Node_Str"",laf == null ? System.getProperty(""String_Node_Str"",""String_Node_Str"") : laf.getClassName());
  config.setProperty(""String_Node_Str"",comboValue(jcboMachineScreenmode.getSelectedItem()));
  config.setProperty(""String_Node_Str"",comboValue(jcboTicketsBag.getSelectedItem()));
  String sMachinePrinter=comboValue(jcboMachinePrinter.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter) || ""String_Node_Str"".equals(sMachinePrinter) || ""String_Node_Str"".equals(sMachinePrinter)|| ""String_Node_Str"".equals(sMachinePrinter)|| ""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + comboValue(jcboConnPrinter.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + m_jtxtJPOSPrinter.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter);
  }
  String sMachinePrinter2=comboValue(jcboMachinePrinter2.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter2) || ""String_Node_Str"".equals(sMachinePrinter2) || ""String_Node_Str"".equals(sMachinePrinter2)|| ""String_Node_Str"".equals(sMachinePrinter2)|| ""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + comboValue(jcboConnPrinter2.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter2.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + m_jtxtJPOSPrinter2.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer2.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter2);
  }
  String sMachinePrinter3=comboValue(jcboMachinePrinter3.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter3) || ""String_Node_Str"".equals(sMachinePrinter3) || ""String_Node_Str"".equals(sMachinePrinter3)|| ""String_Node_Str"".equals(sMachinePrinter3)|| ""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + comboValue(jcboConnPrinter3.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter3.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + m_jtxtJPOSPrinter3.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer3.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter3);
  }
  String sMachineDisplay=comboValue(jcboMachineDisplay.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineDisplay) || ""String_Node_Str"".equals(sMachineDisplay) || ""String_Node_Str"".equals(sMachineDisplay)) {
    config.setProperty(""String_Node_Str"",sMachineDisplay + ""String_Node_Str"" + comboValue(jcboConnDisplay.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialDisplay.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachineDisplay)) {
    config.setProperty(""String_Node_Str"",sMachineDisplay + ""String_Node_Str"" + m_jtxtJPOSName.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineDisplay);
  }
  String sMachineScale=comboValue(jcboMachineScale.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineScale) || ""String_Node_Str"".equals(sMachineScale)) {
    config.setProperty(""String_Node_Str"",sMachineScale + ""String_Node_Str"" + comboValue(jcboSerialScale.getSelectedItem()));
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineScale);
  }
  String sMachineScanner=comboValue(jcboMachineScanner.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineScanner)) {
    config.setProperty(""String_Node_Str"",sMachineScanner + ""String_Node_Str"" + comboValue(jcboSerialScanner.getSelectedItem()));
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineScanner);
  }
  config.setProperty(""String_Node_Str"",comboValue(cboPrinters.getSelectedItem()));
  config.setProperty(""String_Node_Str"",String.valueOf(m_ReceiptPrinter.isSelected()));
  dirty.setDirty(false);
}",0.99370645088784
6036,"public void loadProperties(AppConfig config){
  jtxtMachineHostname.setText(config.getProperty(""String_Node_Str""));
  String lafclass=config.getProperty(""String_Node_Str"");
  jcboLAF.setSelectedItem(null);
  for (int i=0; i < jcboLAF.getItemCount(); i++) {
    LAFInfo lafinfo=(LAFInfo)jcboLAF.getItemAt(i);
    if (lafinfo.getClassName().equals(lafclass)) {
      jcboLAF.setSelectedIndex(i);
      break;
    }
  }
  jcboMachineScreenmode.setSelectedItem(config.getProperty(""String_Node_Str""));
  jcboTicketsBag.setSelectedItem(config.getProperty(""String_Node_Str""));
  StringParser p=new StringParser(config.getProperty(""String_Node_Str""));
  String sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter.setSelectedItem(sparam);
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(sparam);
    m_jtxtJPOSPrinter.setText(p.nextToken(','));
    m_jtxtJPOSDrawer.setText(p.nextToken(','));
  }
 else {
    jcboMachinePrinter.setSelectedItem(sparam);
    jcboConnPrinter.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter2.setSelectedItem(sparam);
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(sparam);
    m_jtxtJPOSPrinter2.setText(p.nextToken(','));
    m_jtxtJPOSDrawer2.setText(p.nextToken(','));
  }
 else {
    jcboMachinePrinter2.setSelectedItem(sparam);
    jcboConnPrinter2.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter3.setSelectedItem(sparam);
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(sparam);
    m_jtxtJPOSPrinter3.setText(p.nextToken(','));
    m_jtxtJPOSDrawer3.setText(p.nextToken(','));
  }
 else {
    jcboMachinePrinter3.setSelectedItem(sparam);
    jcboConnPrinter3.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(""String_Node_Str"");
    jcboConnDisplay.setSelectedItem(sparam);
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(sparam);
    m_jtxtJPOSName.setText(p.nextToken(','));
  }
 else {
    jcboMachineDisplay.setSelectedItem(sparam);
    jcboConnDisplay.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScale.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboSerialScale.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScanner.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam)) {
    jcboSerialScanner.setSelectedItem(p.nextToken(','));
  }
  cboPrinters.setSelectedItem(config.getProperty(""String_Node_Str""));
  m_ReceiptPrinter.setSelected(""String_Node_Str"".equals(config.getProperty(""String_Node_Str"")));
  dirty.setDirty(false);
}","public void loadProperties(AppConfig config){
  uniqueinstance=config.getProperty(""String_Node_Str"");
  jtxtMachineHostname.setText(config.getProperty(""String_Node_Str""));
  String lafclass=config.getProperty(""String_Node_Str"");
  jcboLAF.setSelectedItem(null);
  for (int i=0; i < jcboLAF.getItemCount(); i++) {
    LAFInfo lafinfo=(LAFInfo)jcboLAF.getItemAt(i);
    if (lafinfo.getClassName().equals(lafclass)) {
      jcboLAF.setSelectedIndex(i);
      break;
    }
  }
  jcboMachineScreenmode.setSelectedItem(config.getProperty(""String_Node_Str""));
  jcboTicketsBag.setSelectedItem(config.getProperty(""String_Node_Str""));
  StringParser p=new StringParser(config.getProperty(""String_Node_Str""));
  String sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter.setSelectedItem(sparam);
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(sparam);
    m_jtxtJPOSPrinter.setText(p.nextToken(','));
    m_jtxtJPOSDrawer.setText(p.nextToken(','));
  }
 else {
    jcboMachinePrinter.setSelectedItem(sparam);
    jcboConnPrinter.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter2.setSelectedItem(sparam);
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(sparam);
    m_jtxtJPOSPrinter2.setText(p.nextToken(','));
    m_jtxtJPOSDrawer2.setText(p.nextToken(','));
  }
 else {
    jcboMachinePrinter2.setSelectedItem(sparam);
    jcboConnPrinter2.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter3.setSelectedItem(sparam);
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(sparam);
    m_jtxtJPOSPrinter3.setText(p.nextToken(','));
    m_jtxtJPOSDrawer3.setText(p.nextToken(','));
  }
 else {
    jcboMachinePrinter3.setSelectedItem(sparam);
    jcboConnPrinter3.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(""String_Node_Str"");
    jcboConnDisplay.setSelectedItem(sparam);
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(sparam);
    m_jtxtJPOSName.setText(p.nextToken(','));
  }
 else {
    jcboMachineDisplay.setSelectedItem(sparam);
    jcboConnDisplay.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScale.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboSerialScale.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScanner.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam)) {
    jcboSerialScanner.setSelectedItem(p.nextToken(','));
  }
  cboPrinters.setSelectedItem(config.getProperty(""String_Node_Str""));
  m_ReceiptPrinter.setSelected(""String_Node_Str"".equals(config.getProperty(""String_Node_Str"")));
  dirty.setDirty(false);
}",0.9934272300469484
6037,"public void initFrame(AppProperties props){
  m_props=props;
  m_rootapp=new JRootApp();
  if (m_rootapp.initApp(m_props)) {
    try {
      m_instmanager=new InstanceManager(this);
    }
 catch (    Exception e) {
    }
    add(m_rootapp,BorderLayout.CENTER);
    try {
      this.setIconImage(ImageIO.read(JRootFrame.class.getResourceAsStream(""String_Node_Str"")));
    }
 catch (    IOException e) {
    }
    setTitle(AppLocal.APP_NAME + ""String_Node_Str"" + AppLocal.APP_VERSION);
    pack();
    setLocationRelativeTo(null);
    setVisible(true);
  }
 else {
    new JFrmConfig(props).setVisible(true);
  }
}","public void initFrame(AppProperties props){
  m_props=props;
  m_rootapp=new JRootApp();
  if (m_rootapp.initApp(m_props)) {
    if (""String_Node_Str"".equals(props.getProperty(""String_Node_Str""))) {
      try {
        m_instmanager=new InstanceManager(this);
      }
 catch (      Exception e) {
      }
    }
    add(m_rootapp,BorderLayout.CENTER);
    try {
      this.setIconImage(ImageIO.read(JRootFrame.class.getResourceAsStream(""String_Node_Str"")));
    }
 catch (    IOException e) {
    }
    setTitle(AppLocal.APP_NAME + ""String_Node_Str"" + AppLocal.APP_VERSION);
    pack();
    setLocationRelativeTo(null);
    setVisible(true);
  }
 else {
    new JFrmConfig(props).setVisible(true);
  }
}",0.928462709284627
6038,"public void initFrame(AppProperties props){
  m_props=props;
  m_rootapp=new JRootApp();
  if (m_rootapp.initApp(m_props)) {
    try {
      m_instmanager=new InstanceManager(this);
    }
 catch (    Exception e) {
    }
    add(m_rootapp,BorderLayout.CENTER);
    setTitle(AppLocal.APP_NAME + ""String_Node_Str"" + AppLocal.APP_VERSION);
    Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
    setBounds(0,0,d.width,d.height);
    setVisible(true);
  }
 else {
    new JFrmConfig(props).setVisible(true);
  }
}","public void initFrame(AppProperties props){
  m_props=props;
  m_rootapp=new JRootApp();
  if (m_rootapp.initApp(m_props)) {
    if (""String_Node_Str"".equals(props.getProperty(""String_Node_Str""))) {
      try {
        m_instmanager=new InstanceManager(this);
      }
 catch (      Exception e) {
      }
    }
    add(m_rootapp,BorderLayout.CENTER);
    setTitle(AppLocal.APP_NAME + ""String_Node_Str"" + AppLocal.APP_VERSION);
    Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
    setBounds(0,0,d.width,d.height);
    setVisible(true);
  }
 else {
    new JFrmConfig(props).setVisible(true);
  }
}",0.91651865008881
6039,"@Override public void endReceipt(){
  try {
    PrinterJob printJob=PrinterJob.getPrinterJob();
    printJob.setPrintable(new PrintableTicket(m_ticketcurrent));
    PrintRequestAttributeSet aset=new HashPrintRequestAttributeSet();
    aset.add(OrientationRequested.PORTRAIT);
    aset.add(new Copies(1));
    aset.add(new JobName(AppLocal.APP_NAME + ""String_Node_Str"",null));
    if (isReceiptPrinter.equals(""String_Node_Str"")) {
      MediaSize myISO=new MediaSize(widthOfPaper,heightOfPaper,Size2DSyntax.MM,MediaSizeName.NA_LEGAL);
      aset.add(MediaSizeName.NA_LEGAL);
    }
 else {
      aset.add(MediaSizeName.ISO_A4);
    }
    if (printservice == null) {
      if (printJob.printDialog(aset)) {
        printJob.print();
      }
    }
 else {
      printJob.setPrintService(printservice);
      printJob.print(aset);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_ticketcurrent=null;
}","@Override public void endReceipt(){
  try {
    PrinterJob printJob=PrinterJob.getPrinterJob();
    printJob.setJobName(AppLocal.APP_NAME + ""String_Node_Str"");
    printerBook.countLinesOnPage(m_ticketcurrent);
    printJob.setPageable(printerBook.getBook());
    if (printservice == null) {
      if (printJob.printDialog()) {
        printJob.print();
      }
    }
 else {
      printJob.setPrintService(printservice);
      printJob.print();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_ticketcurrent=null;
}",0.6038514442916093
6040,"/** 
 * Creates a new instance of DevicePrinterPrinter
 * @param printername - name of printer that will be called in the system
 * @param isReceiptPrinter - string with boolean values if the printer is a receipt
 */
public DevicePrinterPrinter(String printername,String isReceiptPrinter){
  this.isReceiptPrinter=isReceiptPrinter;
  m_sName=""String_Node_Str"";
  m_ticketcurrent=null;
  printservice=ReportUtils.getPrintService(printername);
}","/** 
 * Creates a new instance of DevicePrinterPrinter
 * @param printername - name of printer that will be called in the system
 * @param isReceiptPrinter - string with boolean values if the printer is a receipt
 */
public DevicePrinterPrinter(String printername,String isReceiptPrinter){
  m_sName=""String_Node_Str"";
  m_ticketcurrent=null;
  printservice=ReportUtils.getPrintService(printername);
  printerBook=new PrinterBook(isReceiptPrinter);
}",0.8980963045912654
6041,"@Override public void beginLine(int iTextSize){
  m_ticketcurrent.beginLine(0);
}","@Override public void beginLine(int iTextSize){
  m_ticketcurrent.beginLine(iTextSize);
}",0.9411764705882352
6042,"/** 
 * Method print prints the ticket and is being called for each site twice. For futher info look into: 
 * @see java.awt.print.Printable;
 */
@Override public int print(Graphics g,PageFormat pf,int pi) throws PrinterException {
  int temp=0;
  while (basict.getTheLastIndex() > line) {
    int height=0;
    while ((int)pf.getImageableHeight() > height + basict.getHeightOfCommands(temp)) {
      if (basict.getTheLastIndex() == line) {
        flag=true;
        break;
      }
      height+=basict.getHeightOfCommands(line);
      temp=basict.getTheLastIndex() != ++line ? line : line - 1;
    }
    if (flag) {
      endLine.add(page,line - 1);
    }
 else {
      endLine.add(page,line);
      startLine.add(++page,endLine.get(--page));
      page++;
    }
  }
  if (pi > page) {
    return Printable.NO_SUCH_PAGE;
  }
  basict.draw((Graphics2D)g,(int)pf.getImageableX(),(int)pf.getImageableY(),LINEWIDTH,(Integer)startLine.get(pi),(Integer)endLine.get(pi));
  return Printable.PAGE_EXISTS;
}","/** 
 * Method print prints the ticket and is being called for each site twice. For futher info look into: 
 * @param g
 * @param pf
 * @param pi
 * @see java.awt.print.Printable
 */
@Override public int print(Graphics g,PageFormat pf,int pi) throws PrinterException {
  Graphics2D g2=(Graphics2D)g;
  basict.draw(g2,(int)pf.getImageableX(),(int)pf.getImageableY(),LINEWIDTH,start,end);
  return Printable.PAGE_EXISTS;
}",0.476056338028169
6043,"/** 
 * Creates a new instance of PrintableTicket
 * @param t - BasicTicketForPrinter
 */
public PrintableTicket(BasicTicketForPrinter t){
  basict=t;
  startLine=new ArrayList();
  startLine.add(0,0);
  endLine=new ArrayList();
}","/** 
 * Creates a new instance of PrintableTicket
 * @param t - BasicTicketForPrinter
 */
public PrintableTicket(BasicTicketForPrinter t,int start,int end){
  basict=t;
  this.start=start;
  this.end=end;
}",0.7522935779816514
6044,"private void jcboPaymentGatewayActionPerformed(java.awt.event.ActionEvent evt){
  pc=(PaymentConfiguration)paymentsName.get(comboValue(jcboPaymentGateway.getSelectedItem()));
  jPanel2.removeAll();
  jPanel2.add(pc.getComponent());
  jPanel2.revalidate();
  jPanel2.repaint();
}","private void jcboPaymentGatewayActionPerformed(java.awt.event.ActionEvent evt){
  pc=paymentsName.get(comboValue(jcboPaymentGateway.getSelectedItem()));
  if (pc != null) {
    jPanel2.removeAll();
    jPanel2.add(pc.getComponent());
    jPanel2.revalidate();
    jPanel2.repaint();
  }
}",0.7526501766784452
6045,"/** 
 * Creates new form JPanelConfigPayment 
 */
public JPanelConfigPayment(){
  initComponents();
  initializePaymentsName();
  jcboCardReader.addActionListener(dirty);
  jcboPaymentGateway.addActionListener(dirty);
  jchkPaymentTest.addActionListener(dirty);
  jcboPaymentGateway.addItem(""String_Node_Str"");
  jcboPaymentGateway.addItem(""String_Node_Str"");
  jcboPaymentGateway.addItem(""String_Node_Str"");
  jcboPaymentGateway.addItem(""String_Node_Str"");
  jcboPaymentGateway.addItem(""String_Node_Str"");
  jcboPaymentGateway.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
}","/** 
 * Creates new form JPanelConfigPayment 
 */
public JPanelConfigPayment(){
  initComponents();
  jcboCardReader.addActionListener(dirty);
  jcboPaymentGateway.addActionListener(dirty);
  jchkPaymentTest.addActionListener(dirty);
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
}",0.4826254826254826
6046,"@Override public void loadProperties(AppConfig config){
  jtxtCommerceCode.setText(config.getProperty(""String_Node_Str""));
  AltEncrypter cypher=new AltEncrypter(""String_Node_Str"");
  if (config.getProperty(""String_Node_Str"") != null) {
    jtxtCommerceTerminal.setText(comboValue(config.getProperty(""String_Node_Str"")));
  }
  if (config.getProperty(""String_Node_Str"") != null) {
    jtxtCommerceSign.setText(cypher.decrypt(config.getProperty(""String_Node_Str"").substring(6)));
  }
  if (config.getProperty(""String_Node_Str"") != null) {
    jCheckBox1.setSelected(Boolean.valueOf(config.getProperty(""String_Node_Str"")).booleanValue());
  }
}","@Override public void loadProperties(AppConfig config){
  String sCommerceID=config.getProperty(""String_Node_Str"");
  String sCommerceTerminal=config.getProperty(""String_Node_Str"");
  String sCommerceSign=config.getProperty(""String_Node_Str"");
  String sCommerceSHA=config.getProperty(""String_Node_Str"");
  if (sCommerceID != null && sCommerceTerminal != null && sCommerceSign != null && sCommerceSHA != null && sCommerceSign.startsWith(""String_Node_Str"")) {
    jtxtCommerceCode.setText(config.getProperty(""String_Node_Str""));
    AltEncrypter cypher=new AltEncrypter(""String_Node_Str"");
    jtxtCommerceTerminal.setText(comboValue(config.getProperty(""String_Node_Str"")));
    jtxtCommerceSign.setText(cypher.decrypt(config.getProperty(""String_Node_Str"").substring(6)));
    jCheckBox1.setSelected(Boolean.valueOf(config.getProperty(""String_Node_Str"")).booleanValue());
  }
}",0.4848484848484848
6047,"public void draw(Graphics2D g2d,int x,int y,int width,int start,int lines){
  int currenty=y;
  for (int i=start; i < lines; i++) {
    m_aCommands.get(i).draw(g2d,x,currenty,width);
    currenty+=m_aCommands.get(i).getHeight();
  }
}","public void draw(Graphics2D g2d,int x,int y,int width){
  int currenty=y;
  for (  PrintItem pi : m_aCommands) {
    pi.draw(g2d,x,currenty,width);
    currenty+=pi.getHeight();
  }
}",0.7817745803357314
6048,"private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
      m_jEditLine.setVisible(false);
      m_jList.setVisible(false);
    }
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}","private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
    resetSouthComponent();
  }
 else {
    if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
      m_jEditLine.setVisible(false);
      m_jList.setVisible(false);
    }
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    resetSouthComponent();
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}",0.9763572679509632
6049,"/** 
 * Creates new form JPanelConfigLocale 
 */
public JPanelConfigLocale(){
  initComponents();
  jcboLocale.addActionListener(dirty);
  jcboInteger.addActionListener(dirty);
  jcboDouble.addActionListener(dirty);
  jcboCurrency.addActionListener(dirty);
  jcboPercent.addActionListener(dirty);
  jcboDate.addActionListener(dirty);
  jcboTime.addActionListener(dirty);
  jcboDatetime.addActionListener(dirty);
  Locale[] availablelocales=Locale.getAvailableLocales();
  Arrays.sort(availablelocales,new LocaleComparator());
  jcboLocale.addItem(new LocaleInfo(null));
  for (int i=0; i < availablelocales.length; i++) {
    jcboLocale.addItem(new LocaleInfo(availablelocales[i]));
  }
  jcboInteger.addItem(DEFAULT_VALUE);
  jcboInteger.addItem(""String_Node_Str"");
  jcboInteger.addItem(""String_Node_Str"");
  jcboDouble.addItem(DEFAULT_VALUE);
  jcboDouble.addItem(""String_Node_Str"");
  jcboDouble.addItem(""String_Node_Str"");
  jcboCurrency.addItem(DEFAULT_VALUE);
  jcboCurrency.addItem(""String_Node_Str"");
  jcboCurrency.addItem(""String_Node_Str"");
  jcboPercent.addItem(DEFAULT_VALUE);
  jcboPercent.addItem(""String_Node_Str"");
  jcboDate.addItem(DEFAULT_VALUE);
  jcboTime.addItem(DEFAULT_VALUE);
  jcboDatetime.addItem(DEFAULT_VALUE);
}","/** 
 * Creates new form JPanelConfigLocale 
 */
public JPanelConfigLocale(){
  initComponents();
  jcboLocale.addActionListener(dirty);
  jcboInteger.addActionListener(dirty);
  jcboDouble.addActionListener(dirty);
  jcboCurrency.addActionListener(dirty);
  jcboPercent.addActionListener(dirty);
  jcboDate.addActionListener(dirty);
  jcboTime.addActionListener(dirty);
  jcboDatetime.addActionListener(dirty);
  List<Locale> availablelocales=new ArrayList<Locale>();
  availablelocales.addAll(Arrays.asList(Locale.getAvailableLocales()));
  addLocale(availablelocales,new Locale(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  addLocale(availablelocales,new Locale(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Collections.sort(availablelocales,new LocaleComparator());
  jcboLocale.addItem(new LocaleInfo(null));
  for (  Locale l : availablelocales) {
    jcboLocale.addItem(new LocaleInfo(l));
  }
  jcboInteger.addItem(DEFAULT_VALUE);
  jcboInteger.addItem(""String_Node_Str"");
  jcboInteger.addItem(""String_Node_Str"");
  jcboDouble.addItem(DEFAULT_VALUE);
  jcboDouble.addItem(""String_Node_Str"");
  jcboDouble.addItem(""String_Node_Str"");
  jcboCurrency.addItem(DEFAULT_VALUE);
  jcboCurrency.addItem(""String_Node_Str"");
  jcboCurrency.addItem(""String_Node_Str"");
  jcboPercent.addItem(DEFAULT_VALUE);
  jcboPercent.addItem(""String_Node_Str"");
  jcboDate.addItem(DEFAULT_VALUE);
  jcboTime.addItem(DEFAULT_VALUE);
  jcboDatetime.addItem(DEFAULT_VALUE);
}",0.8532648569332355
6050,"public int compare(Locale o1,Locale o2){
  return o1.toString().compareTo(o2.toString());
}","public int compare(Locale o1,Locale o2){
  return o1.getDisplayName().compareTo(o2.getDisplayName());
}",0.8144329896907216
6051,"/** 
 * Creates new form JPanelConfigPayment 
 */
public JPanelConfigPayment(){
  initComponents();
  jcboCardReader.addActionListener(dirty);
  jcboPaymentGateway.addActionListener(dirty);
  jchkPaymentTest.addActionListener(dirty);
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
}","/** 
 * Creates new form JPanelConfigPayment 
 */
public JPanelConfigPayment(){
  initComponents();
  jcboCardReader.addActionListener(dirty);
  jcboPaymentGateway.addActionListener(dirty);
  jchkPaymentTest.addActionListener(dirty);
  initPayments(""String_Node_Str"",new ConfigPaymentPanelEmpty());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelEmpty());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
}",0.9116564417177914
6052,"private void addUnits(double dUnits){
  int i=m_invlines.getSelectedRow();
  if (i >= 0) {
    InventoryLine inv=m_invlines.getLine(i);
    double dunits=inv.getMultiply() + dUnits;
    if (dunits == 0.0) {
      deleteLine(i);
    }
 else {
      inv.setMultiply(inv.getMultiply() + dUnits);
      m_invlines.setLine(i,inv);
    }
  }
}","private void addUnits(double dUnits){
  int i=m_invlines.getSelectedRow();
  if (i >= 0) {
    InventoryLine inv=m_invlines.getLine(i);
    double dunits=inv.getMultiply() + dUnits;
    if (dunits <= 0.0) {
      deleteLine(i);
    }
 else {
      inv.setMultiply(inv.getMultiply() + dUnits);
      m_invlines.setLine(i,inv);
    }
  }
}",0.9970326409495548
6053,"private void stateTransition(char cTrans){
  if (cTrans == '\u007f') {
    m_jcodebar.setText(null);
  }
 else   if (cTrans == '+') {
    if (m_jcodebar.getText() == null || m_jcodebar.getText().equals(""String_Node_Str"")) {
      addUnits(1.0);
    }
 else {
      addUnits(Double.parseDouble(m_jcodebar.getText()));
      m_jcodebar.setText(null);
    }
  }
 else   if (cTrans == '-') {
    if (m_jcodebar.getText() == null || m_jcodebar.getText().equals(""String_Node_Str"")) {
      addUnits(-1.0);
    }
 else {
      addUnits(-Double.parseDouble(m_jcodebar.getText()));
      m_jcodebar.setText(null);
    }
  }
 else   if (cTrans == ' ' || cTrans == '=') {
    if (m_invlines.getCount() == 0) {
      Toolkit.getDefaultToolkit().beep();
    }
 else {
      saveData();
    }
  }
 else {
    m_jcodebar.setText(m_jcodebar.getText() + cTrans);
  }
}","private void stateTransition(char cTrans){
  if (cTrans == '\u007f') {
    m_jcodebar.setText(null);
    NUMBER_STATE=DEFAULT;
  }
 else   if (cTrans == '*') {
    MULTIPLY=ACTIVE;
  }
 else   if (cTrans == '+') {
    if (MULTIPLY != DEFAULT && NUMBER_STATE != DEFAULT) {
      setUnits(Double.parseDouble(m_jcodebar.getText()));
      m_jcodebar.setText(null);
    }
 else {
      if (m_jcodebar.getText() == null || m_jcodebar.getText().equals(""String_Node_Str"")) {
        addUnits(1.0);
      }
 else {
        addUnits(Double.parseDouble(m_jcodebar.getText()));
        m_jcodebar.setText(null);
      }
    }
    NUMBER_STATE=DEFAULT;
    MULTIPLY=DEFAULT;
  }
 else   if (cTrans == '-') {
    if (m_jcodebar.getText() == null || m_jcodebar.getText().equals(""String_Node_Str"")) {
      addUnits(-1.0);
    }
 else {
      addUnits(-Double.parseDouble(m_jcodebar.getText()));
      m_jcodebar.setText(null);
    }
    NUMBER_STATE=DEFAULT;
    MULTIPLY=DEFAULT;
  }
 else   if (cTrans == '.') {
    if (m_jcodebar.getText() == null || m_jcodebar.getText().equals(""String_Node_Str"")) {
      m_jcodebar.setText(""String_Node_Str"");
    }
 else     if (NUMBER_STATE != DECIMAL) {
      m_jcodebar.setText(m_jcodebar.getText() + cTrans);
    }
    NUMBER_STATE=DECIMAL;
  }
 else   if (cTrans == ' ' || cTrans == '=') {
    if (m_invlines.getCount() == 0) {
      Toolkit.getDefaultToolkit().beep();
    }
 else {
      saveData();
    }
  }
 else {
    m_jcodebar.setText(m_jcodebar.getText() + cTrans);
    if (NUMBER_STATE != DECIMAL) {
      NUMBER_STATE=ACTIVE;
    }
  }
}",0.6625514403292181
6054,"private void stateTransition(char cTrans){
  if (cTrans == '\n') {
    if (m_sBarcode.length() > 0) {
      String sCode=m_sBarcode.toString();
      if (sCode.startsWith(""String_Node_Str"")) {
        try {
          CustomerInfoExt newcustomer=dlSales.findCustomerExt(sCode);
          if (newcustomer == null) {
            Toolkit.getDefaultToolkit().beep();
            new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str"")).show(this);
          }
 else {
            m_oTicket.setCustomer(newcustomer);
            m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
          }
        }
 catch (        BasicException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
        }
        stateToZero();
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        ProductInfoExt oProduct=new ProductInfoExt();
        oProduct.setReference(null);
        oProduct.setCode(sCode);
        oProduct.setName(""String_Node_Str"" + sCode.substring(3,7));
        oProduct.setPriceSell(Double.parseDouble(sCode.substring(7,12)) / 100);
        oProduct.setTaxCategoryInfo((TaxCategoryInfo)taxcategoriesmodel.getSelectedItem());
        addTicketLine(oProduct,1.0,includeTaxes(oProduct.getTaxCategoryInfo(),oProduct.getPriceSell()));
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        incProductByCodePrice(sCode.substring(0,7),Double.parseDouble(sCode.substring(7,12)) / 100);
      }
 else {
        incProductByCode(sCode);
      }
    }
 else {
      Toolkit.getDefaultToolkit().beep();
    }
  }
 else {
    m_sBarcode.append(cTrans);
    if (cTrans == '\u007f') {
      stateToZero();
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(Character.toString(cTrans));
      m_iNumberStatus=NUMBER_INPUTINT;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTINT)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTZERO) {
      m_jPrice.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTINT) {
      m_jPrice.setText(m_jPrice.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
      m_iNumberStatus=NUMBER_INPUTDEC;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTINT || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTZERO || m_iNumberStatus == NUMBER_INPUTZERODEC)) {
      m_jPrice.setText(""String_Node_Str"");
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"" + Character.toString(cTrans));
      m_iNumberStatus=NUMBER_PORINT;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORINT)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORZERO) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORINT) {
      m_jPor.setText(m_jPor.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
      m_iNumberStatus=NUMBER_PORDEC;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO) {
      if (m_App.getDeviceScale().existsScale() && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            ProductInfoExt product=getInputProduct();
            addTicketLine(product,value.doubleValue(),product.getPriceSell());
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else       if (m_App.getDeviceScale().existsScale()) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
            newline.setMultiply(value.doubleValue());
            newline.setPrice(Math.abs(newline.getPrice()));
            paintTicketLine(i,newline);
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(newline.getMultiply() + 1.0);
        paintTicketLine(i,newline);
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(newline.getMultiply() - 1.0);
        if (newline.getMultiply() <= 0.0) {
          removeTicketLine(i);
        }
 else {
          paintTicketLine(i,newline);
        }
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(dPor);
        newline.setPrice(Math.abs(newline.getPrice()));
        paintTicketLine(i,newline);
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(dPor);
        newline.setPrice(-Math.abs(newline.getPrice()));
        paintTicketLine(i,newline);
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,-product.getPriceSell());
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),-product.getPriceSell());
    }
 else     if (cTrans == ' ' || cTrans == '=') {
      if (m_oTicket.getLinesCount() > 0) {
        if (closeTicket(m_oTicket,m_oTicketExt)) {
          m_ticketsbag.deleteTicket();
        }
 else {
          refreshTicket();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
  }
}","private void stateTransition(char cTrans){
  if (cTrans == '\n') {
    if (m_sBarcode.length() > 0) {
      String sCode=m_sBarcode.toString();
      if (sCode.startsWith(""String_Node_Str"")) {
        try {
          CustomerInfoExt newcustomer=dlSales.findCustomerExt(sCode);
          if (newcustomer == null) {
            Toolkit.getDefaultToolkit().beep();
            new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str"")).show(this);
          }
 else {
            m_oTicket.setCustomer(newcustomer);
            m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
          }
        }
 catch (        BasicException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
        }
        stateToZero();
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        ProductInfoExt oProduct=new ProductInfoExt();
        oProduct.setReference(null);
        oProduct.setCode(sCode);
        oProduct.setName(""String_Node_Str"" + sCode.substring(3,7));
        oProduct.setPriceSell(Double.parseDouble(sCode.substring(7,12)) / 100);
        oProduct.setTaxCategoryInfo((TaxCategoryInfo)taxcategoriesmodel.getSelectedItem());
        addTicketLine(oProduct,1.0,includeTaxes(oProduct.getTaxCategoryInfo(),oProduct.getPriceSell()));
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        incProductByCodePrice(sCode.substring(0,7),Double.parseDouble(sCode.substring(7,12)) / 100);
      }
 else {
        incProductByCode(sCode);
      }
    }
 else {
      Toolkit.getDefaultToolkit().beep();
    }
  }
 else {
    m_sBarcode.append(cTrans);
    if (cTrans == '\u007f') {
      stateToZero();
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(Character.toString(cTrans));
      m_iNumberStatus=NUMBER_INPUTINT;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTINT)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTZERO) {
      m_jPrice.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTINT) {
      m_jPrice.setText(m_jPrice.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
      m_iNumberStatus=NUMBER_INPUTDEC;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTINT || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTZERO || m_iNumberStatus == NUMBER_INPUTZERODEC)) {
      m_jPrice.setText(""String_Node_Str"");
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"" + Character.toString(cTrans));
      m_iNumberStatus=NUMBER_PORINT;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORINT)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORZERO) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORINT) {
      m_jPor.setText(m_jPor.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
      m_iNumberStatus=NUMBER_PORDEC;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO) {
      if (m_App.getDeviceScale().existsScale() && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            ProductInfoExt product=getInputProduct();
            addTicketLine(product,value.doubleValue(),product.getPriceSell());
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else       if (m_App.getDeviceScale().existsScale()) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
            newline.setMultiply(value.doubleValue());
            newline.setPrice(Math.abs(newline.getPrice()));
            paintTicketLine(i,newline);
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
          newline.setMultiply(newline.getMultiply() - 1.0);
          paintTicketLine(i,newline);
        }
 else {
          newline.setMultiply(newline.getMultiply() + 1.0);
          paintTicketLine(i,newline);
        }
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
          newline.setMultiply(newline.getMultiply() + 1.0);
          paintTicketLine(i,newline);
        }
 else {
          newline.setMultiply(newline.getMultiply() - 1.0);
          if (newline.getMultiply() <= 0.0) {
            removeTicketLine(i);
          }
 else {
            paintTicketLine(i,newline);
          }
        }
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
          newline.setMultiply(-dPor);
          newline.setPrice(Math.abs(newline.getPrice()));
          paintTicketLine(i,newline);
        }
 else {
          newline.setMultiply(dPor);
          newline.setPrice(Math.abs(newline.getPrice()));
          paintTicketLine(i,newline);
        }
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
          newline.setMultiply(dPor);
          newline.setPrice(Math.abs(newline.getPrice()));
          paintTicketLine(i,newline);
        }
 else {
          newline.setMultiply(dPor);
          newline.setPrice(-Math.abs(newline.getPrice()));
          paintTicketLine(i,newline);
        }
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,-product.getPriceSell());
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),-product.getPriceSell());
    }
 else     if (cTrans == ' ' || cTrans == '=') {
      if (m_oTicket.getLinesCount() > 0) {
        if (closeTicket(m_oTicket,m_oTicketExt)) {
          m_ticketsbag.deleteTicket();
        }
 else {
          refreshTicket();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
  }
}",0.9605645125273548
6055,"private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}","private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
      m_jEditLine.setVisible(false);
      m_jList.setVisible(false);
    }
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}",0.9319923371647508
6056,"public void setProperty(String sKey,String sValue){
  m_propsconfig.setProperty(sKey,sValue);
}","public void setProperty(String sKey,String sValue){
  if (sValue == null) {
    m_propsconfig.remove(sKey);
  }
 else {
    m_propsconfig.setProperty(sKey,sValue);
  }
}",0.7196969696969697
6057,"public DataResultSet openExec(Object params) throws BasicException {
  closeExec();
  try {
    m_Stmt=m_s.getConnection().prepareStatement(m_sentence);
    if (params != null) {
      m_SerWrite.writeValues(new PreparedSentencePars(m_Stmt),params);
    }
    if (m_Stmt.execute()) {
      return new JDBCDataResultSet(m_Stmt.getResultSet(),m_SerRead);
    }
 else {
      int iUC=m_Stmt.getUpdateCount();
      if (iUC < 0) {
        return null;
      }
 else {
        return new SentenceUpdateResultSet(iUC);
      }
    }
  }
 catch (  SQLException eSQL) {
    throw new BasicException(eSQL);
  }
}","public DataResultSet openExec(Object params) throws BasicException {
  closeExec();
  try {
    m_Stmt=m_s.getConnection().prepareStatement(m_sentence);
    if (m_SerWrite != null) {
      m_SerWrite.writeValues(new PreparedSentencePars(m_Stmt),params);
    }
    if (m_Stmt.execute()) {
      return new JDBCDataResultSet(m_Stmt.getResultSet(),m_SerRead);
    }
 else {
      int iUC=m_Stmt.getUpdateCount();
      if (iUC < 0) {
        return null;
      }
 else {
        return new SentenceUpdateResultSet(iUC);
      }
    }
  }
 catch (  SQLException eSQL) {
    throw new BasicException(eSQL);
  }
}",0.9867768595041322
6058,"public String getSQL(SerializerWrite sw,Object params) throws BasicException {
  QBFParameter mydw=new QBFParameter(m_asFindFields);
  if (params == null) {
    return m_sSentNullFilter;
  }
 else {
    sw.writeValues(mydw,params);
    String sFilter=mydw.getFilter();
    if (sFilter.length() == 0) {
      return m_sSentNullFilter;
    }
 else {
      return m_sSentBeginPart + ""String_Node_Str"" + sFilter+ ""String_Node_Str""+ m_sSentEndPart;
    }
  }
}","public String getSQL(SerializerWrite sw,Object params) throws BasicException {
  QBFParameter mydw=new QBFParameter(m_asFindFields);
  if (sw == null || params == null) {
    return m_sSentNullFilter;
  }
 else {
    sw.writeValues(mydw,params);
    String sFilter=mydw.getFilter();
    if (sFilter.length() == 0) {
      return m_sSentNullFilter;
    }
 else {
      return m_sSentBeginPart + ""String_Node_Str"" + sFilter+ ""String_Node_Str""+ m_sSentEndPart;
    }
  }
}",0.9848484848484848
6059,"public final SentenceList getProductListNormal(){
  return new StaticSentence(s,new QBFBuilder(""String_Node_Str"" + ""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}),new SerializerWriteBasic(new Datas[]{Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.STRING}),new SerializerReadClass(ProductInfoExt.class));
}","public SentenceList getProductListNormal(){
  return new StaticSentence(s,new QBFBuilder(""String_Node_Str"" + ""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}),new SerializerWriteBasic(new Datas[]{Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.STRING}),new SerializerReadClass(ProductInfoExt.class));
}",0.9933774834437086
6060,"public final SentenceList getProductListAuxiliar(){
  return new StaticSentence(s,new QBFBuilder(""String_Node_Str"" + ""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}),new SerializerWriteBasic(new Datas[]{Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.STRING}),new SerializerReadClass(ProductInfoExt.class));
}","public SentenceList getProductListAuxiliar(){
  return new StaticSentence(s,new QBFBuilder(""String_Node_Str"" + ""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}),new SerializerWriteBasic(new Datas[]{Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.STRING}),new SerializerReadClass(ProductInfoExt.class));
}",0.9934065934065934
6061,"private void jcmdOKActionPerformed(java.awt.event.ActionEvent evt){
  String stext=jLabel1.getText();
  jLabel1.setText(AppLocal.getIntString(""String_Node_Str""));
  jcmdOK.setEnabled(false);
  jcmdCancel.setEnabled(false);
  try {
    m_scanner.connectDevice();
    m_scanner.startUploadProduct();
    ListModel l=m_bd.getListModel();
    for (int i=0; i < l.getSize(); i++) {
      Object[] myprod=(Object[])l.getElementAt(i);
      m_scanner.sendProduct((String)myprod[2],(String)myprod[1],(Double)myprod[7]);
    }
    m_scanner.stopUploadProduct();
    MessageInf msg=new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""));
    msg.show(this);
  }
 catch (  DeviceScannerException e) {
    MessageInf msg=new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e);
    msg.show(this);
  }
 finally {
    m_scanner.disconnectDevice();
  }
  jLabel1.setText(stext);
  jcmdOK.setEnabled(true);
  jcmdCancel.setEnabled(true);
  dispose();
}","private void jcmdOKActionPerformed(java.awt.event.ActionEvent evt){
  String stext=jLabel1.getText();
  jLabel1.setText(AppLocal.getIntString(""String_Node_Str""));
  jcmdOK.setEnabled(false);
  jcmdCancel.setEnabled(false);
  try {
    m_scanner.connectDevice();
    m_scanner.startUploadProduct();
    ListModel l=m_bd.getListModel();
    for (int i=0; i < l.getSize(); i++) {
      Object[] myprod=(Object[])l.getElementAt(i);
      m_scanner.sendProduct((String)myprod[3],(String)myprod[2],(Double)myprod[6]);
    }
    m_scanner.stopUploadProduct();
    MessageInf msg=new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""));
    msg.show(this);
  }
 catch (  DeviceScannerException e) {
    MessageInf msg=new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e);
    msg.show(this);
  }
 finally {
    m_scanner.disconnectDevice();
  }
  jLabel1.setText(stext);
  jcmdOK.setEnabled(true);
  jcmdCancel.setEnabled(true);
  dispose();
}",0.9746963562753036
6062,"protected void typeCharInternal(char c){
  String sOldText=getText();
  if (c == '\u0008') {
    if (m_cLastChar == '\u0000') {
      if (m_svalue != null && m_svalue.length() > 0) {
        m_svalue=m_svalue.substring(0,m_svalue.length() - 1);
      }
    }
 else {
      m_iTicks=0;
      m_cLastChar='\u0000';
    }
  }
 else   if (c == '\u007f') {
    m_svalue=null;
    m_iTicks=0;
    m_cLastChar='\u0000';
  }
 else   if (c >= ' ') {
    if (m_cLastChar != '\u0000') {
      char ckey=getKeyChar();
      m_svalue=appendChar2Value(ckey);
      acceptKeyChar(ckey);
    }
    m_iTicks=0;
    m_cLastChar='\u0000';
    m_svalue=appendChar2Value(c);
  }
  m_jtimer.restart();
  firePropertyChange(""String_Node_Str"",sOldText,getText());
}","protected void typeCharInternal(char c){
  String sOldText=getText();
  if (c == '\u0008') {
    if (m_cLastChar == '\u0000') {
      if (m_svalue != null && m_svalue.length() > 0) {
        m_svalue=m_svalue.substring(0,m_svalue.length() - 1);
      }
    }
 else {
      m_iTicks=0;
      m_cLastChar='\u0000';
    }
  }
 else   if (c == '\u007f') {
    m_iMode=getStartMode();
    m_svalue=null;
    m_iTicks=0;
    m_cLastChar='\u0000';
  }
 else   if (c >= ' ') {
    if (m_cLastChar != '\u0000') {
      char ckey=getKeyChar();
      m_svalue=appendChar2Value(ckey);
      acceptKeyChar(ckey);
    }
    m_iTicks=0;
    m_cLastChar='\u0000';
    m_svalue=appendChar2Value(c);
  }
  m_jtimer.restart();
  firePropertyChange(""String_Node_Str"",sOldText,getText());
}",0.981456953642384
6063,"protected void transCharInternal(char c){
  String sOldText=getText();
  if (c == '-') {
    if (m_cLastChar == '\u0000') {
      if (m_svalue != null && m_svalue.length() > 0) {
        m_svalue=m_svalue.substring(0,m_svalue.length() - 1);
      }
    }
 else {
      m_iTicks=0;
      m_cLastChar='\u0000';
    }
  }
 else   if (c == '\u007f') {
    m_svalue=null;
    m_iTicks=0;
    m_cLastChar='\u0000';
  }
 else   if (c == '.') {
    if (m_cLastChar != '\u0000') {
      m_svalue=appendChar2Value(getKeyChar());
    }
    m_iTicks=0;
    m_cLastChar='\u0000';
    m_iMode=(m_iMode + 1) % 4;
  }
 else   if (c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == '0') {
    if (m_iMode == MODE_123) {
      m_svalue=appendChar2Value(c);
    }
 else     if (c == m_cLastChar) {
      m_iTicks++;
    }
 else {
      if (m_cLastChar != '\u0000') {
        char ckey=getKeyChar();
        m_svalue=appendChar2Value(ckey);
        acceptKeyChar(ckey);
      }
      m_iTicks=0;
      m_cLastChar=c;
    }
  }
  m_jtimer.restart();
  firePropertyChange(""String_Node_Str"",sOldText,getText());
}","protected void transCharInternal(char c){
  String sOldText=getText();
  if (c == '-') {
    if (m_cLastChar == '\u0000') {
      if (m_svalue != null && m_svalue.length() > 0) {
        m_svalue=m_svalue.substring(0,m_svalue.length() - 1);
      }
    }
 else {
      m_iTicks=0;
      m_cLastChar='\u0000';
    }
  }
 else   if (c == '\u007f') {
    m_iMode=getStartMode();
    m_svalue=null;
    m_iTicks=0;
    m_cLastChar='\u0000';
  }
 else   if (c == '.') {
    if (m_cLastChar != '\u0000') {
      m_svalue=appendChar2Value(getKeyChar());
    }
    m_iTicks=0;
    m_cLastChar='\u0000';
    m_iMode=(m_iMode + 1) % 4;
  }
 else   if (c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == '0') {
    if (m_iMode == MODE_123) {
      m_svalue=appendChar2Value(c);
    }
 else     if (c == m_cLastChar) {
      m_iTicks++;
    }
 else {
      if (m_cLastChar != '\u0000') {
        char ckey=getKeyChar();
        m_svalue=appendChar2Value(ckey);
        acceptKeyChar(ckey);
      }
      m_iTicks=0;
      m_cLastChar=c;
    }
  }
  m_jtimer.restart();
  firePropertyChange(""String_Node_Str"",sOldText,getText());
}",0.9879931389365352
6064,"public void endLine(){
  m_ticketcurrent.endLine();
}","@Override public void endLine(){
  m_ticketcurrent.endLine();
}",0.913793103448276
6065,"public String getPrinterDescription(){
  return null;
}","@Override public String getPrinterDescription(){
  return null;
}",0.9166666666666666
6066,"public void printImage(BufferedImage image){
  m_ticketcurrent.printImage(image);
}","@Override public void printImage(BufferedImage image){
  m_ticketcurrent.printImage(image);
}",0.9431818181818182
6067,"public JComponent getPrinterComponent(){
  return null;
}","@Override public JComponent getPrinterComponent(){
  return null;
}",0.9193548387096774
6068,"public String getPrinterName(){
  return m_sName;
}","@Override public String getPrinterName(){
  return m_sName;
}",0.9107142857142856
6069,"public void endReceipt(){
  try {
    PrinterJob printJob=PrinterJob.getPrinterJob();
    printJob.setPrintable(new PrintableTicket(m_ticketcurrent));
    printJob.setJobName(AppLocal.APP_NAME + ""String_Node_Str"");
    printJob.setPrintService(printservice);
    printJob.print();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_ticketcurrent=null;
}","@Override public void endReceipt(){
  try {
    PrinterJob printJob=PrinterJob.getPrinterJob();
    printJob.setPrintable(new PrintableTicket(m_ticketcurrent));
    printJob.setJobName(AppLocal.APP_NAME + ""String_Node_Str"");
    printJob.setPrintService(printservice);
    printJob.print();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_ticketcurrent=null;
}",0.9865229110512128
6070,"public void printBarCode(String type,String position,String code){
  m_ticketcurrent.printBarCode(type,position,code);
}","@Override public void printBarCode(String type,String position,String code){
  m_ticketcurrent.printBarCode(type,position,code);
}",0.96
6071,"public void beginLine(int iTextSize){
  m_ticketcurrent.beginLine(iTextSize);
}","@Override public void beginLine(int iTextSize){
  m_ticketcurrent.beginLine(0);
}",0.875
6072,"public void reset(){
  m_ticketcurrent=null;
}","@Override public void reset(){
  m_ticketcurrent=null;
}",0.9019607843137256
6073,"public void beginReceipt(){
  m_ticketcurrent=new BasicTicket();
}","@Override public void beginReceipt(){
  m_ticketcurrent=new BasicTicketForPrinter();
}",0.868421052631579
6074,"public void printText(int iStyle,String sText){
  m_ticketcurrent.printText(iStyle,sText);
}","@Override public void printText(int iStyle,String sText){
  m_ticketcurrent.printText(iStyle,sText);
}",0.9484536082474226
6075,"public int print(Graphics g,PageFormat pf,int pi) throws PrinterException {
  if (pi >= 1) {
    return Printable.NO_SUCH_PAGE;
  }
  basict.draw((Graphics2D)g,(int)pf.getImageableX() + H_GAP,(int)pf.getImageableY() + V_GAP,LINEWIDTH);
  return Printable.PAGE_EXISTS;
}","@Override public int print(Graphics g,PageFormat pf,int pi) throws PrinterException {
  int temp=0;
  while (basict.getTheLastIndex() > line) {
    int height=0;
    while ((int)pf.getImageableHeight() > height + basict.getHeightOfCommands(temp)) {
      if (basict.getTheLastIndex() == line) {
        flag=true;
        break;
      }
      height+=basict.getHeightOfCommands(line);
      temp=basict.getTheLastIndex() != ++line ? line : line - 1;
    }
    if (flag) {
      endLine.add(page,line - 1);
    }
 else {
      endLine.add(page,line);
      startLine.add(++page,endLine.get(--page));
      page++;
    }
  }
  Graphics2D g2=(Graphics2D)g;
  System.out.println(g2.getFont().getFontName());
  if (pi > page) {
    return Printable.NO_SUCH_PAGE;
  }
  g2.setColor(Color.RED);
  g2.setFont(new Font(""String_Node_Str"",Font.ITALIC,34));
  g2.drawString(""String_Node_Str"",100,100);
  basict.draw(g2,(int)pf.getImageableX(),(int)pf.getImageableY(),LINEWIDTH,(Integer)startLine.get(pi),(Integer)endLine.get(pi));
  return Printable.PAGE_EXISTS;
}",0.3588190764572294
6076,"/** 
 * Creates a new instance of PrintableTicket 
 */
public PrintableTicket(BasicTicket t){
  basict=t;
}","/** 
 * Creates a new instance of PrintableTicket 
 */
public PrintableTicket(BasicTicketForPrinter t){
  basict=t;
  startLine=new ArrayList();
  startLine.add(0,0);
  endLine=new ArrayList();
}",0.7086092715231788
6077,"public void draw(Graphics2D g2d,int x,int y,int width){
  int currenty=y;
  for (  PrintItem pi : m_aCommands) {
    pi.draw(g2d,x,currenty,width);
    currenty+=pi.getHeight();
  }
}","public void draw(Graphics2D g2d,int x,int y,int width,int start,int lines){
  int currenty=y;
  for (int i=start; i < lines; i++) {
    m_aCommands.get(i).draw(g2d,x,currenty,width);
    currenty+=m_aCommands.get(i).getHeight();
  }
}",0.7434052757793765
6078,"private boolean checkCardNumber(String sNumber){
  if (sNumber == null || (sNumber.length() != 16 && sNumber.length() != 15)) {
    return false;
  }
  for (int i=0; i < 16; i++) {
    char c=sNumber.charAt(i);
    if (c != '0' && c != '1' && c != '2' && c != '3' && c != '4' && c != '5' && c != '6' && c != '7' && c != '8' && c != '9') {
      return false;
    }
  }
  return true;
}","private boolean checkCardNumber(String sNumber){
  return LuhnAlgorithm.checkCC(sNumber);
}",0.2689075630252101
6079,"private boolean checkExpDate(String sDate){
  if (sDate == null || sDate.length() != 4) {
    return false;
  }
  for (int i=0; i < 4; i++) {
    char c=sDate.charAt(i);
    if (c != '0' && c != '1' && c != '2' && c != '3' && c != '4' && c != '5' && c != '6' && c != '7' && c != '8' && c != '9') {
      return false;
    }
  }
  return true;
}","private boolean checkExpDate(String sDate){
  return (sDate.length() == 4 && StringUtils.isNumber(sDate.trim()));
}",0.3790849673202614
6080,"private boolean isValidCardNumber(){
  return !(m_jCardNumber.getText() == null || m_jCardNumber.getText().length() != 16);
}","private boolean isValidCardNumber(){
  return (LuhnAlgorithm.checkCC(m_jCardNumber.getText()) && m_jCardNumber.getText().length() > 13 && m_jCardNumber.getText().length() < 20);
}",0.7302631578947368
6081,"public void printLine(String sproduct,double dprice,double dunits);","public void printLine(String sproduct,double dprice,double dunits,int taxinfo);",0.9178082191780822
6082,"public void printLine(String sproduct,double dprice,double dunits){
}","public void printLine(String sproduct,double dprice,double dunits,int taxinfo){
}",0.92
6083,"@Override public void endElement(String uri,String localName,String qName) throws SAXException {
switch (m_iOutputType) {
case OUTPUT_NONE:
    if (""String_Node_Str"".equals(qName)) {
      try {
        AudioClip oAudio=Applet.newAudioClip(getClass().getClassLoader().getResource(text.toString()));
        oAudio.play();
      }
 catch (      Exception fnfe) {
      }
      text=null;
    }
  break;
case OUTPUT_TICKET:
if (""String_Node_Str"".equals(qName)) {
  try {
    BufferedImage image=m_system.getResourceAsImage(text.toString());
    m_oOutputPrinter.printImage(image);
  }
 catch (  Exception fnfe) {
  }
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  m_oOutputPrinter.printBarCode(bctype,bcposition,text.toString());
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
      m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignRight(text.toString(),m_iTextLength));
    break;
case DevicePrinter.ALIGN_CENTER:
  m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_oOutputPrinter.printText(m_iTextStyle,text.toString());
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endLine();
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endReceipt();
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_DISPLAY:
if (""String_Node_Str"".equals(qName)) {
if (m_sVisorLine1 == null) {
m_sVisorLine1=m_sVisorLine.toString();
}
 else {
m_sVisorLine2=m_sVisorLine.toString();
}
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine1=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine2=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
m_sVisorLine.append(DeviceTicket.alignRight(text.toString(),m_iTextLength));
break;
case DevicePrinter.ALIGN_CENTER:
m_sVisorLine.append(DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_sVisorLine.append(DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_sVisorLine.append(text);
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getDeviceDisplay().writeVisor(m_iVisorAnimation,m_sVisorLine1,m_sVisorLine2);
m_iVisorAnimation=DeviceDisplayBase.ANIMATION_NULL;
m_sVisorLine1=null;
m_sVisorLine2=null;
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_FISCAL:
if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().endReceipt();
m_iOutputType=OUTPUT_NONE;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printLine(text.toString(),m_dValue1,m_dValue2);
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printMessage(text.toString());
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printTotal(text.toString(),m_dValue1);
text=null;
}
break;
}
}","@Override public void endElement(String uri,String localName,String qName) throws SAXException {
switch (m_iOutputType) {
case OUTPUT_NONE:
    if (""String_Node_Str"".equals(qName)) {
      try {
        AudioClip oAudio=Applet.newAudioClip(getClass().getClassLoader().getResource(text.toString()));
        oAudio.play();
      }
 catch (      Exception fnfe) {
      }
      text=null;
    }
  break;
case OUTPUT_TICKET:
if (""String_Node_Str"".equals(qName)) {
  try {
    BufferedImage image=m_system.getResourceAsImage(text.toString());
    m_oOutputPrinter.printImage(image);
  }
 catch (  Exception fnfe) {
  }
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  m_oOutputPrinter.printBarCode(bctype,bcposition,text.toString());
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
      m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignRight(text.toString(),m_iTextLength));
    break;
case DevicePrinter.ALIGN_CENTER:
  m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_oOutputPrinter.printText(m_iTextStyle,text.toString());
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endLine();
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endReceipt();
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_DISPLAY:
if (""String_Node_Str"".equals(qName)) {
if (m_sVisorLine1 == null) {
m_sVisorLine1=m_sVisorLine.toString();
}
 else {
m_sVisorLine2=m_sVisorLine.toString();
}
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine1=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine2=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
m_sVisorLine.append(DeviceTicket.alignRight(text.toString(),m_iTextLength));
break;
case DevicePrinter.ALIGN_CENTER:
m_sVisorLine.append(DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_sVisorLine.append(DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_sVisorLine.append(text);
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getDeviceDisplay().writeVisor(m_iVisorAnimation,m_sVisorLine1,m_sVisorLine2);
m_iVisorAnimation=DeviceDisplayBase.ANIMATION_NULL;
m_sVisorLine1=null;
m_sVisorLine2=null;
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_FISCAL:
if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().endReceipt();
m_iOutputType=OUTPUT_NONE;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printLine(text.toString(),m_dValue1,m_dValue2,attribute3);
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printMessage(text.toString());
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printTotal(text.toString(),m_dValue1);
text=null;
}
break;
}
}",0.9983037779491132
6084,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
switch (m_iOutputType) {
case OUTPUT_NONE:
    if (""String_Node_Str"".equals(qName)) {
      m_printer.getDevicePrinter(readString(attributes.getValue(""String_Node_Str""),""String_Node_Str"")).openDrawer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_iOutputType=OUTPUT_TICKET;
      m_oOutputPrinter=m_printer.getDevicePrinter(readString(attributes.getValue(""String_Node_Str""),""String_Node_Str""));
      m_oOutputPrinter.beginReceipt();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_iOutputType=OUTPUT_DISPLAY;
      String animation=attributes.getValue(""String_Node_Str"");
      if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_SCROLL;
      }
 else       if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_FLYER;
      }
 else       if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_BLINK;
      }
 else       if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_CURTAIN;
      }
 else {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_NULL;
      }
      m_sVisorLine1=null;
      m_sVisorLine2=null;
      m_oOutputPrinter=null;
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_iOutputType=OUTPUT_FISCAL;
      m_printer.getFiscalPrinter().beginReceipt();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_printer.getFiscalPrinter().printZReport();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_printer.getFiscalPrinter().printXReport();
    }
  break;
case OUTPUT_TICKET:
if (""String_Node_Str"".equals(qName)) {
  text=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
  text=new StringBuffer();
  bctype=attributes.getValue(""String_Node_Str"");
  bcposition=attributes.getValue(""String_Node_Str"");
}
 else if (""String_Node_Str"".equals(qName)) {
  m_oOutputPrinter.beginLine(parseInt(attributes.getValue(""String_Node_Str""),DevicePrinter.SIZE_0));
}
 else if (""String_Node_Str"".equals(qName)) {
  text=new StringBuffer();
  m_iTextStyle=(""String_Node_Str"".equals(attributes.getValue(""String_Node_Str"")) ? DevicePrinter.STYLE_BOLD : DevicePrinter.STYLE_PLAIN) | (""String_Node_Str"".equals(attributes.getValue(""String_Node_Str"")) ? DevicePrinter.STYLE_UNDERLINE : DevicePrinter.STYLE_PLAIN);
  String sAlign=attributes.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equals(sAlign)) {
    m_iTextAlign=DevicePrinter.ALIGN_RIGHT;
  }
 else   if (""String_Node_Str"".equals(sAlign)) {
    m_iTextAlign=DevicePrinter.ALIGN_CENTER;
  }
 else {
    m_iTextAlign=DevicePrinter.ALIGN_LEFT;
  }
  m_iTextLength=parseInt(attributes.getValue(""String_Node_Str""),0);
}
break;
case OUTPUT_DISPLAY:
if (""String_Node_Str"".equals(qName)) {
m_sVisorLine=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
String sAlign=attributes.getValue(""String_Node_Str"");
if (""String_Node_Str"".equals(sAlign)) {
m_iTextAlign=DevicePrinter.ALIGN_RIGHT;
}
 else if (""String_Node_Str"".equals(sAlign)) {
m_iTextAlign=DevicePrinter.ALIGN_CENTER;
}
 else {
m_iTextAlign=DevicePrinter.ALIGN_LEFT;
}
m_iTextLength=parseInt(attributes.getValue(""String_Node_Str""));
}
break;
case OUTPUT_FISCAL:
if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
m_dValue1=parseDouble(attributes.getValue(""String_Node_Str""));
m_dValue2=parseDouble(attributes.getValue(""String_Node_Str""),1.0);
}
 else if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
m_dValue1=parseDouble(attributes.getValue(""String_Node_Str""));
}
break;
}
}","@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
switch (m_iOutputType) {
case OUTPUT_NONE:
    if (""String_Node_Str"".equals(qName)) {
      m_printer.getDevicePrinter(readString(attributes.getValue(""String_Node_Str""),""String_Node_Str"")).openDrawer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_iOutputType=OUTPUT_TICKET;
      m_oOutputPrinter=m_printer.getDevicePrinter(readString(attributes.getValue(""String_Node_Str""),""String_Node_Str""));
      m_oOutputPrinter.beginReceipt();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_iOutputType=OUTPUT_DISPLAY;
      String animation=attributes.getValue(""String_Node_Str"");
      if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_SCROLL;
      }
 else       if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_FLYER;
      }
 else       if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_BLINK;
      }
 else       if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_CURTAIN;
      }
 else {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_NULL;
      }
      m_sVisorLine1=null;
      m_sVisorLine2=null;
      m_oOutputPrinter=null;
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_iOutputType=OUTPUT_FISCAL;
      m_printer.getFiscalPrinter().beginReceipt();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_printer.getFiscalPrinter().printZReport();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_printer.getFiscalPrinter().printXReport();
    }
  break;
case OUTPUT_TICKET:
if (""String_Node_Str"".equals(qName)) {
  text=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
  text=new StringBuffer();
  bctype=attributes.getValue(""String_Node_Str"");
  bcposition=attributes.getValue(""String_Node_Str"");
}
 else if (""String_Node_Str"".equals(qName)) {
  m_oOutputPrinter.beginLine(parseInt(attributes.getValue(""String_Node_Str""),DevicePrinter.SIZE_0));
}
 else if (""String_Node_Str"".equals(qName)) {
  text=new StringBuffer();
  m_iTextStyle=(""String_Node_Str"".equals(attributes.getValue(""String_Node_Str"")) ? DevicePrinter.STYLE_BOLD : DevicePrinter.STYLE_PLAIN) | (""String_Node_Str"".equals(attributes.getValue(""String_Node_Str"")) ? DevicePrinter.STYLE_UNDERLINE : DevicePrinter.STYLE_PLAIN);
  String sAlign=attributes.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equals(sAlign)) {
    m_iTextAlign=DevicePrinter.ALIGN_RIGHT;
  }
 else   if (""String_Node_Str"".equals(sAlign)) {
    m_iTextAlign=DevicePrinter.ALIGN_CENTER;
  }
 else {
    m_iTextAlign=DevicePrinter.ALIGN_LEFT;
  }
  m_iTextLength=parseInt(attributes.getValue(""String_Node_Str""),0);
}
break;
case OUTPUT_DISPLAY:
if (""String_Node_Str"".equals(qName)) {
m_sVisorLine=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
String sAlign=attributes.getValue(""String_Node_Str"");
if (""String_Node_Str"".equals(sAlign)) {
m_iTextAlign=DevicePrinter.ALIGN_RIGHT;
}
 else if (""String_Node_Str"".equals(sAlign)) {
m_iTextAlign=DevicePrinter.ALIGN_CENTER;
}
 else {
m_iTextAlign=DevicePrinter.ALIGN_LEFT;
}
m_iTextLength=parseInt(attributes.getValue(""String_Node_Str""));
}
break;
case OUTPUT_FISCAL:
if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
m_dValue1=parseDouble(attributes.getValue(""String_Node_Str""));
m_dValue2=parseDouble(attributes.getValue(""String_Node_Str""),1.0);
attribute3=parseInt(attributes.getValue(""String_Node_Str""));
}
 else if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
m_dValue1=parseDouble(attributes.getValue(""String_Node_Str""));
}
break;
}
}",0.992549163307683
6085,"public void printLine(String sproduct,double dprice,double dunits){
  try {
    m_fiscal.printRecItem(sproduct,roundFiscal(dprice * dunits),0,0,roundFiscal(dprice),""String_Node_Str"");
  }
 catch (  JposException e) {
  }
}","public void printLine(String sproduct,double dprice,double dunits,int taxinfo){
  try {
    m_fiscal.printRecItem(sproduct,roundFiscal(dprice * dunits),(int)(dunits * 1000),taxinfo,roundFiscal(dprice),""String_Node_Str"");
  }
 catch (  JposException e) {
  }
}",0.918918918918919
6086,"private void jcmdOKActionPerformed(java.awt.event.ActionEvent evt){
  String stext=jLabel1.getText();
  jLabel1.setText(AppLocal.getIntString(""String_Node_Str""));
  jcmdOK.setEnabled(false);
  jcmdCancel.setEnabled(false);
  try {
    m_scanner.connectDevice();
    m_scanner.startUploadProduct();
    ListModel l=m_bd.getListModel();
    for (int i=0; i < l.getSize(); i++) {
      Object[] myprod=(Object[])l.getElementAt(i);
      m_scanner.sendProduct((String)myprod[2],(String)myprod[1],(Double)myprod[5]);
    }
    m_scanner.stopUploadProduct();
    MessageInf msg=new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""));
    msg.show(this);
  }
 catch (  DeviceScannerException e) {
    MessageInf msg=new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e);
    msg.show(this);
  }
 finally {
    m_scanner.disconnectDevice();
  }
  jLabel1.setText(stext);
  jcmdOK.setEnabled(true);
  jcmdCancel.setEnabled(true);
  dispose();
}","private void jcmdOKActionPerformed(java.awt.event.ActionEvent evt){
  String stext=jLabel1.getText();
  jLabel1.setText(AppLocal.getIntString(""String_Node_Str""));
  jcmdOK.setEnabled(false);
  jcmdCancel.setEnabled(false);
  try {
    m_scanner.connectDevice();
    m_scanner.startUploadProduct();
    ListModel l=m_bd.getListModel();
    for (int i=0; i < l.getSize(); i++) {
      Object[] myprod=(Object[])l.getElementAt(i);
      m_scanner.sendProduct((String)myprod[2],(String)myprod[1],(Double)myprod[7]);
    }
    m_scanner.stopUploadProduct();
    MessageInf msg=new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""));
    msg.show(this);
  }
 catch (  DeviceScannerException e) {
    MessageInf msg=new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e);
    msg.show(this);
  }
 finally {
    m_scanner.disconnectDevice();
  }
  jLabel1.setText(stext);
  jcmdOK.setEnabled(true);
  jcmdCancel.setEnabled(true);
  dispose();
}",0.998987854251012
6087,"private void jButton3ActionPerformed(java.awt.event.ActionEvent evt){
  TicketLineInfo line=receipttwo.getSelectedLine();
  if (line != null) {
    receiptone.addSelectedLine(line);
  }
}","private void jButton3ActionPerformed(java.awt.event.ActionEvent evt){
  int numAux=receipttwo.countNumberAuxiliar();
  int ini=receipttwo.getJticketLine().getSelectedIndex();
  for (int i=ini; i <= ini + numAux; i++) {
    TicketLineInfo line=receipttwo.getSelectedLine();
    if (line != null) {
      receiptone.addSelectedLine(line);
    }
  }
}",0.6990654205607477
6088,"private void jButton5ActionPerformed(java.awt.event.ActionEvent evt){
  TicketLineInfo line=receiptone.getSelectedLineUnit();
  if (line != null) {
    receipttwo.addSelectedLine(line);
  }
}","private void jButton5ActionPerformed(java.awt.event.ActionEvent evt){
  TicketLineInfo line;
  int numAux=receiptone.countNumberAuxiliar();
  int ini=receiptone.getJticketLine().getSelectedIndex();
  if (numAux != 0) {
    line=receiptone.getSelectedLineUnit();
    receipttwo.addSelectedLine(line);
    int a=receiptone.countNumberAuxiliar();
    if (a != 0) {
      receiptone.getJticketLine().selectionDown();
    }
    ini=receiptone.getJticketLine().getSelectedIndex();
    for (int i=ini + 1; i <= ini + numAux; i++) {
      line=receiptone.getSelectedLine();
      if (line != null) {
        receipttwo.addSelectedLine(line);
      }
    }
  }
 else {
    line=receiptone.getSelectedLineUnit();
    receipttwo.addSelectedLine(line);
  }
}",0.3372465314834578
6089,"private void jButton2ActionPerformed(java.awt.event.ActionEvent evt){
  TicketLineInfo line=receipttwo.getSelectedLineUnit();
  if (line != null) {
    receiptone.addSelectedLine(line);
  }
}","private void jButton2ActionPerformed(java.awt.event.ActionEvent evt){
  TicketLineInfo line;
  int numAux=receipttwo.countNumberAuxiliar();
  int ini=receipttwo.getJticketLine().getSelectedIndex();
  if (numAux != 0) {
    line=receipttwo.getSelectedLineUnit();
    receiptone.addSelectedLine(line);
    int a=receipttwo.countNumberAuxiliar();
    if (a != 0) {
      receipttwo.getJticketLine().selectionDown();
    }
    ini=receipttwo.getJticketLine().getSelectedIndex();
    for (int i=ini + 1; i <= ini + numAux; i++) {
      line=receipttwo.getSelectedLine();
      if (line != null) {
        receiptone.addSelectedLine(line);
      }
    }
  }
 else {
    line=receipttwo.getSelectedLineUnit();
    receiptone.addSelectedLine(line);
  }
}",0.3351120597652081
6090,"private void jButton1ActionPerformed(java.awt.event.ActionEvent evt){
  TicketLineInfo line=receiptone.getSelectedLine();
  if (line != null) {
    receipttwo.addSelectedLine(line);
  }
}","private void jButton1ActionPerformed(java.awt.event.ActionEvent evt){
  int numAux=receiptone.countNumberAuxiliar();
  int ini=receiptone.getJticketLine().getSelectedIndex();
  for (int i=ini; i <= ini + numAux; i++) {
    TicketLineInfo line=receiptone.getSelectedLine();
    if (line != null) {
      receipttwo.addSelectedLine(line);
    }
  }
}",0.6990654205607477
6091,"public void setActiveTicket(TicketInfo oTicket,Object oTicketExt){
  m_oTicket=oTicket;
  m_oTicketExt=oTicketExt;
  executeEvent(m_oTicket,m_oTicketExt,""String_Node_Str"");
  refreshTicket();
}","public void setActiveTicket(TicketInfo oTicket,Object oTicketExt){
  m_oTicket=oTicket;
  m_oTicketExt=oTicketExt;
  m_oTicket.setUser(m_App.getAppUserView().getUser().getUserInfo());
  m_oTicket.setActiveCash(m_App.getActiveCashIndex());
  m_oTicket.setDate(new Date());
  executeEvent(m_oTicket,m_oTicketExt,""String_Node_Str"");
  refreshTicket();
}",0.7108655616942909
6092,"private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    m_oTicket.setUser(m_App.getAppUserView().getUser().getUserInfo());
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}","private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}",0.9647992067426872
6093,"private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}","private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    m_oTicket.setUser(m_App.getAppUserView().getUser().getUserInfo());
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}",0.9647992067426872
6094,"public void setActiveTicket(TicketInfo oTicket,Object oTicketExt){
  m_oTicket=oTicket;
  m_oTicketExt=oTicketExt;
  m_oTicket.setUser(m_App.getAppUserView().getUser().getUserInfo());
  m_oTicket.setActiveCash(m_App.getActiveCashIndex());
  m_oTicket.setDate(new Date());
  executeEvent(m_oTicket,m_oTicketExt,""String_Node_Str"");
  refreshTicket();
}","public void setActiveTicket(TicketInfo oTicket,Object oTicketExt){
  m_oTicket=oTicket;
  m_oTicketExt=oTicketExt;
  if (m_oTicket != null) {
    m_oTicket.setUser(m_App.getAppUserView().getUser().getUserInfo());
    m_oTicket.setActiveCash(m_App.getActiveCashIndex());
    m_oTicket.setDate(new Date());
  }
  executeEvent(m_oTicket,m_oTicketExt,""String_Node_Str"");
  refreshTicket();
}",0.949796472184532
6095,"public final void deleteTicket(final TicketInfo ticket,final String location) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      Date d=new Date();
      for (int i=0; i < ticket.getLinesCount(); i++) {
        if (ticket.getLine(i).getProductID() != null) {
          getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),d,ticket.getLine(i).getMultiply() >= 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,ticket.getLine(i).getProductID(),new Double(ticket.getLine(i).getMultiply()),new Double(ticket.getLine(i).getPrice())});
        }
      }
      for (      PaymentInfo p : ticket.getPayments()) {
        if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
          getDebtUpdate().exec(new Object[]{ticket.getCustomer().getId(),new Double(-p.getTotal()),ticket.getDate()});
        }
      }
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      return null;
    }
  }
;
  t.execute();
}","public final void deleteTicket(final TicketInfo ticket,final String location) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      Date d=new Date();
      for (int i=0; i < ticket.getLinesCount(); i++) {
        if (ticket.getLine(i).getProductID() != null) {
          getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),d,ticket.getLine(i).getMultiply() >= 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,ticket.getLine(i).getProductID(),new Double(ticket.getLine(i).getMultiply()),new Double(ticket.getLine(i).getPrice())});
        }
      }
      for (      PaymentInfo p : ticket.getPayments()) {
        if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
          ticket.getCustomer().updateCurDebt(-p.getTotal(),ticket.getDate());
          getDebtUpdate().exec(new DataParams(){
            public void writeValues() throws BasicException {
              setDouble(1,ticket.getCustomer().getCurdebt());
              setTimestamp(2,ticket.getCustomer().getCurdate());
              setString(3,ticket.getCustomer().getId());
            }
          }
);
        }
      }
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      return null;
    }
  }
;
  t.execute();
}",0.875528111797205
6096,"public void writeValues() throws BasicException {
  setString(1,UUID.randomUUID().toString());
  setString(2,ticket.getId());
  setString(3,tickettax.getTaxInfo().getId());
  setDouble(4,tickettax.getSubTotal());
  setDouble(5,tickettax.getTax());
}","public void writeValues() throws BasicException {
  setDouble(1,ticket.getCustomer().getCurdebt());
  setTimestamp(2,ticket.getCustomer().getCurdate());
  setString(3,ticket.getCustomer().getId());
}",0.6026785714285714
6097,"public final SentenceExec getDebtUpdate(){
  return new PreparedSentence(s,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new SerializerWriteBasicExt(new Datas[]{Datas.STRING,Datas.DOUBLE,Datas.TIMESTAMP},new int[]{1,1,1,2,0}));
}","public final SentenceExec getDebtUpdate(){
  return new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
}",0.6253229974160207
6098,"public final void saveTicket(final TicketInfo ticket,final String location) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      if (ticket.getTicketId() == 0) {
        ticket.setTicketId(getNextTicketIndex().intValue());
      }
      new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
        public void writeValues() throws BasicException {
          setString(1,ticket.getId());
          setString(2,ticket.getActiveCash());
          setTimestamp(3,ticket.getDate());
          try {
            ByteArrayOutputStream o=new ByteArrayOutputStream();
            ticket.getProperties().storeToXML(o,AppLocal.APP_NAME,""String_Node_Str"");
            setBytes(4,o.toByteArray());
          }
 catch (          IOException e) {
            setBytes(4,null);
          }
        }
      }
);
      new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
        public void writeValues() throws BasicException {
          setString(1,ticket.getId());
          setInt(2,ticket.getTicketId());
          setString(3,ticket.getUser().getId());
          setString(4,ticket.getCustomerId());
        }
      }
);
      SentenceExec ticketlineinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteBuilder.INSTANCE);
      for (      TicketLineInfo l : ticket.getLines()) {
        ticketlineinsert.exec(l);
        if (l.getProductID() != null) {
          getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),ticket.getDate(),l.getMultiply() < 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,l.getProductID(),new Double(-l.getMultiply()),new Double(l.getPrice())});
        }
      }
      SentenceExec paymentinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
      for (      final PaymentInfo p : ticket.getPayments()) {
        paymentinsert.exec(new DataParams(){
          public void writeValues() throws BasicException {
            setString(1,UUID.randomUUID().toString());
            setString(2,ticket.getId());
            setString(3,p.getName());
            setDouble(4,p.getTotal());
          }
        }
);
        if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
          getDebtUpdate().exec(new Object[]{ticket.getCustomer().getId(),new Double(p.getTotal()),ticket.getDate()});
        }
      }
      SentenceExec taxlinesinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
      if (ticket.getTaxes() != null) {
        for (        final TicketTaxInfo tickettax : ticket.getTaxes()) {
          taxlinesinsert.exec(new DataParams(){
            public void writeValues() throws BasicException {
              setString(1,UUID.randomUUID().toString());
              setString(2,ticket.getId());
              setString(3,tickettax.getTaxInfo().getId());
              setDouble(4,tickettax.getSubTotal());
              setDouble(5,tickettax.getTax());
            }
          }
);
        }
      }
      return null;
    }
  }
;
  t.execute();
}","public final void saveTicket(final TicketInfo ticket,final String location) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      if (ticket.getTicketId() == 0) {
        ticket.setTicketId(getNextTicketIndex().intValue());
      }
      new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
        public void writeValues() throws BasicException {
          setString(1,ticket.getId());
          setString(2,ticket.getActiveCash());
          setTimestamp(3,ticket.getDate());
          try {
            ByteArrayOutputStream o=new ByteArrayOutputStream();
            ticket.getProperties().storeToXML(o,AppLocal.APP_NAME,""String_Node_Str"");
            setBytes(4,o.toByteArray());
          }
 catch (          IOException e) {
            setBytes(4,null);
          }
        }
      }
);
      new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
        public void writeValues() throws BasicException {
          setString(1,ticket.getId());
          setInt(2,ticket.getTicketId());
          setString(3,ticket.getUser().getId());
          setString(4,ticket.getCustomerId());
        }
      }
);
      SentenceExec ticketlineinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteBuilder.INSTANCE);
      for (      TicketLineInfo l : ticket.getLines()) {
        ticketlineinsert.exec(l);
        if (l.getProductID() != null) {
          getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),ticket.getDate(),l.getMultiply() < 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,l.getProductID(),new Double(-l.getMultiply()),new Double(l.getPrice())});
        }
      }
      SentenceExec paymentinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
      for (      final PaymentInfo p : ticket.getPayments()) {
        paymentinsert.exec(new DataParams(){
          public void writeValues() throws BasicException {
            setString(1,UUID.randomUUID().toString());
            setString(2,ticket.getId());
            setString(3,p.getName());
            setDouble(4,p.getTotal());
          }
        }
);
        if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
          ticket.getCustomer().updateCurDebt(p.getTotal(),ticket.getDate());
          getDebtUpdate().exec(new DataParams(){
            public void writeValues() throws BasicException {
              setDouble(1,ticket.getCustomer().getCurdebt());
              setTimestamp(2,ticket.getCustomer().getCurdate());
              setString(3,ticket.getCustomer().getId());
            }
          }
);
        }
      }
      SentenceExec taxlinesinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
      if (ticket.getTaxes() != null) {
        for (        final TicketTaxInfo tickettax : ticket.getTaxes()) {
          taxlinesinsert.exec(new DataParams(){
            public void writeValues() throws BasicException {
              setString(1,UUID.randomUUID().toString());
              setString(2,ticket.getId());
              setString(3,tickettax.getTaxInfo().getId());
              setDouble(4,tickettax.getSubTotal());
              setDouble(5,tickettax.getTax());
            }
          }
);
        }
      }
      return null;
    }
  }
;
  t.execute();
}",0.9417607223476298
6099,"public Object transact() throws BasicException {
  Date d=new Date();
  for (int i=0; i < ticket.getLinesCount(); i++) {
    if (ticket.getLine(i).getProductID() != null) {
      getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),d,ticket.getLine(i).getMultiply() >= 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,ticket.getLine(i).getProductID(),new Double(ticket.getLine(i).getMultiply()),new Double(ticket.getLine(i).getPrice())});
    }
  }
  for (  PaymentInfo p : ticket.getPayments()) {
    if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
      getDebtUpdate().exec(new Object[]{ticket.getCustomer().getId(),new Double(-p.getTotal()),ticket.getDate()});
    }
  }
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  return null;
}","public Object transact() throws BasicException {
  Date d=new Date();
  for (int i=0; i < ticket.getLinesCount(); i++) {
    if (ticket.getLine(i).getProductID() != null) {
      getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),d,ticket.getLine(i).getMultiply() >= 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,ticket.getLine(i).getProductID(),new Double(ticket.getLine(i).getMultiply()),new Double(ticket.getLine(i).getPrice())});
    }
  }
  for (  PaymentInfo p : ticket.getPayments()) {
    if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
      ticket.getCustomer().updateCurDebt(-p.getTotal(),ticket.getDate());
      getDebtUpdate().exec(new DataParams(){
        public void writeValues() throws BasicException {
          setDouble(1,ticket.getCustomer().getCurdebt());
          setTimestamp(2,ticket.getCustomer().getCurdate());
          setString(3,ticket.getCustomer().getId());
        }
      }
);
    }
  }
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  return null;
}",0.8605825242718447
6100,"private void paintTicketLine(int index,TicketLineInfo oLine){
  if (executeEventAndRefresh(""String_Node_Str"",new ScriptArg(""String_Node_Str"",index),new ScriptArg(""String_Node_Str"",oLine)) == null) {
    m_ticketlines.setTicketLine(index,oLine);
    m_ticketlines.setSelectedIndex(index);
    visorTicketLine(oLine);
    printPartialTotals();
    stateToZero();
    executeEventAndRefresh(""String_Node_Str"");
  }
}","private void paintTicketLine(int index,TicketLineInfo oLine){
  if (executeEventAndRefresh(""String_Node_Str"",new ScriptArg(""String_Node_Str"",index),new ScriptArg(""String_Node_Str"",oLine)) == null) {
    m_oTicket.setLine(index,oLine);
    m_ticketlines.setTicketLine(index,oLine);
    m_ticketlines.setSelectedIndex(index);
    visorTicketLine(oLine);
    printPartialTotals();
    stateToZero();
    executeEventAndRefresh(""String_Node_Str"");
  }
}",0.9582366589327146
6101,"public void printLine(String sproduct,double dprice,double dunits){
  try {
    m_fiscal.printRecItem(sproduct,(int)(dprice * dunits * 10000.0),0,0,(int)(dprice * 10000.0),""String_Node_Str"");
  }
 catch (  JposException e) {
  }
}","public void printLine(String sproduct,double dprice,double dunits){
  try {
    m_fiscal.printRecItem(sproduct,roundFiscal(dprice * dunits),0,0,roundFiscal(dprice),""String_Node_Str"");
  }
 catch (  JposException e) {
  }
}",0.8362831858407079
6102,"public void printTotal(String sPayment,double dpaid){
  try {
    m_fiscal.printRecTotal(0,(int)(dpaid * 10000),sPayment);
  }
 catch (  JposException e) {
  }
}","public void printTotal(String sPayment,double dpaid){
  try {
    m_fiscal.printRecTotal(0,roundFiscal(dpaid),sPayment);
  }
 catch (  JposException e) {
  }
}",0.93125
6103,"private void stateTransition(char cTrans){
  if (cTrans == '\n') {
    if (m_sBarcode.length() > 0) {
      String sCode=m_sBarcode.toString();
      if (sCode.startsWith(""String_Node_Str"")) {
        try {
          CustomerInfoExt newcustomer=dlSales.findCustomerExt(sCode);
          if (newcustomer == null) {
            Toolkit.getDefaultToolkit().beep();
            new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str"")).show(this);
          }
 else {
            m_oTicket.setCustomer(newcustomer);
            m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
          }
        }
 catch (        BasicException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
        }
        stateToZero();
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        ProductInfoExt oProduct=new ProductInfoExt();
        oProduct.setReference(null);
        oProduct.setCode(sCode);
        oProduct.setName(""String_Node_Str"" + sCode.substring(3,7));
        oProduct.setPriceSell(Double.parseDouble(sCode.substring(7,12)) / 100);
        oProduct.setTaxCategoryInfo((TaxCategoryInfo)taxcategoriesmodel.getSelectedItem());
        addTicketLine(oProduct,1.0,includeTaxes(oProduct.getTaxCategoryInfo(),oProduct.getPriceSell()));
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        incProductByCodePrice(sCode.substring(0,7),Double.parseDouble(sCode.substring(7,12)) / 100);
      }
 else {
        incProductByCode(sCode);
      }
    }
 else {
      Toolkit.getDefaultToolkit().beep();
    }
  }
 else {
    m_sBarcode.append(cTrans);
    if (cTrans == '\u007f') {
      stateToZero();
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(Character.toString(cTrans));
      m_iNumberStatus=NUMBER_INPUTINT;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTINT)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTZERO) {
      m_jPrice.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTINT) {
      m_jPrice.setText(m_jPrice.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
      m_iNumberStatus=NUMBER_INPUTDEC;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTINT || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTZERO || m_iNumberStatus == NUMBER_INPUTZERODEC)) {
      m_jPrice.setText(""String_Node_Str"");
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"" + Character.toString(cTrans));
      m_iNumberStatus=NUMBER_PORINT;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORINT)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORZERO) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORINT) {
      m_jPor.setText(m_jPor.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
      m_iNumberStatus=NUMBER_PORDEC;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO) {
      if (m_App.getDeviceScale().existsScale() && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            ProductInfoExt product=getInputProduct();
            addTicketLine(product,value.doubleValue(),product.getPriceSell());
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else       if (m_App.getDeviceScale().existsScale()) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            TicketLineInfo oLine=m_oTicket.getLine(i);
            oLine.setMultiply(value.doubleValue());
            oLine.setPrice(Math.abs(oLine.getPrice()));
            paintTicketLine(i,oLine);
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo oLine=m_oTicket.getLine(i);
        oLine.setMultiply(oLine.getMultiply() + 1.0);
        paintTicketLine(i,oLine);
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo oLine=m_oTicket.getLine(i);
        oLine.setMultiply(oLine.getMultiply() - 1.0);
        if (oLine.getMultiply() <= 0.0) {
          removeTicketLine(i);
        }
 else {
          paintTicketLine(i,oLine);
        }
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo oLine=m_oTicket.getLine(i);
        oLine.setMultiply(dPor);
        oLine.setPrice(Math.abs(oLine.getPrice()));
        paintTicketLine(i,oLine);
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo oLine=m_oTicket.getLine(i);
        oLine.setMultiply(dPor);
        oLine.setPrice(-Math.abs(oLine.getPrice()));
        paintTicketLine(i,oLine);
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,-product.getPriceSell());
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),-product.getPriceSell());
    }
 else     if (cTrans == ' ' || cTrans == '=') {
      if (m_oTicket.getLinesCount() > 0) {
        if (closeTicket(m_oTicket,m_oTicketExt)) {
          m_ticketsbag.deleteTicket();
        }
 else {
          refreshTicket();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
  }
}","private void stateTransition(char cTrans){
  if (cTrans == '\n') {
    if (m_sBarcode.length() > 0) {
      String sCode=m_sBarcode.toString();
      if (sCode.startsWith(""String_Node_Str"")) {
        try {
          CustomerInfoExt newcustomer=dlSales.findCustomerExt(sCode);
          if (newcustomer == null) {
            Toolkit.getDefaultToolkit().beep();
            new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str"")).show(this);
          }
 else {
            m_oTicket.setCustomer(newcustomer);
            m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
          }
        }
 catch (        BasicException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
        }
        stateToZero();
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        ProductInfoExt oProduct=new ProductInfoExt();
        oProduct.setReference(null);
        oProduct.setCode(sCode);
        oProduct.setName(""String_Node_Str"" + sCode.substring(3,7));
        oProduct.setPriceSell(Double.parseDouble(sCode.substring(7,12)) / 100);
        oProduct.setTaxCategoryInfo((TaxCategoryInfo)taxcategoriesmodel.getSelectedItem());
        addTicketLine(oProduct,1.0,includeTaxes(oProduct.getTaxCategoryInfo(),oProduct.getPriceSell()));
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        incProductByCodePrice(sCode.substring(0,7),Double.parseDouble(sCode.substring(7,12)) / 100);
      }
 else {
        incProductByCode(sCode);
      }
    }
 else {
      Toolkit.getDefaultToolkit().beep();
    }
  }
 else {
    m_sBarcode.append(cTrans);
    if (cTrans == '\u007f') {
      stateToZero();
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(Character.toString(cTrans));
      m_iNumberStatus=NUMBER_INPUTINT;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTINT)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTZERO) {
      m_jPrice.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTINT) {
      m_jPrice.setText(m_jPrice.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
      m_iNumberStatus=NUMBER_INPUTDEC;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTINT || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTZERO || m_iNumberStatus == NUMBER_INPUTZERODEC)) {
      m_jPrice.setText(""String_Node_Str"");
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"" + Character.toString(cTrans));
      m_iNumberStatus=NUMBER_PORINT;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORINT)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORZERO) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORINT) {
      m_jPor.setText(m_jPor.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
      m_iNumberStatus=NUMBER_PORDEC;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO) {
      if (m_App.getDeviceScale().existsScale() && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            ProductInfoExt product=getInputProduct();
            addTicketLine(product,value.doubleValue(),product.getPriceSell());
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else       if (m_App.getDeviceScale().existsScale()) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
            newline.setMultiply(value.doubleValue());
            newline.setPrice(Math.abs(newline.getPrice()));
            paintTicketLine(i,newline);
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(newline.getMultiply() + 1.0);
        paintTicketLine(i,newline);
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(newline.getMultiply() - 1.0);
        if (newline.getMultiply() <= 0.0) {
          removeTicketLine(i);
        }
 else {
          paintTicketLine(i,newline);
        }
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(dPor);
        newline.setPrice(Math.abs(newline.getPrice()));
        paintTicketLine(i,newline);
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(dPor);
        newline.setPrice(-Math.abs(newline.getPrice()));
        paintTicketLine(i,newline);
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,-product.getPriceSell());
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),-product.getPriceSell());
    }
 else     if (cTrans == ' ' || cTrans == '=') {
      if (m_oTicket.getLinesCount() > 0) {
        if (closeTicket(m_oTicket,m_oTicketExt)) {
          m_ticketsbag.deleteTicket();
        }
 else {
          refreshTicket();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
  }
}",0.9465355805243446
6104,"private void m_jEditLineActionPerformed(java.awt.event.ActionEvent evt){
  int i=m_ticketlines.getSelectedIndex();
  if (i < 0) {
    Toolkit.getDefaultToolkit().beep();
  }
 else {
    TicketLineInfo oLine=m_oTicket.getLine(i);
    if (JProductLineEdit.showMessage(this,m_App,m_oTicket.getLine(i))) {
      paintTicketLine(i,oLine);
    }
  }
}","private void m_jEditLineActionPerformed(java.awt.event.ActionEvent evt){
  int i=m_ticketlines.getSelectedIndex();
  if (i < 0) {
    Toolkit.getDefaultToolkit().beep();
  }
 else {
    TicketLineInfo newline=JProductLineEdit.showMessage(this,m_App,m_oTicket.getLine(i));
    if (newline != null) {
      paintTicketLine(i,newline);
    }
  }
}",0.9027576197387518
6105,"private boolean init(AppView app,TicketLineInfo oLine){
  initComponents();
  m_oLineTicket=oLine;
  m_oLine=new TicketLineInfo(oLine);
  m_bunitsok=true;
  m_bpriceok=true;
  m_jName.setEnabled(m_oLine.getProductID() == null && app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jPrice.setEnabled(app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jPriceTax.setEnabled(app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jName.setText(m_oLine.getProperty(""String_Node_Str""));
  m_jUnits.setValue(oLine.getMultiply());
  m_jPrice.setValue(oLine.getPrice());
  m_jPriceTax.setValue(oLine.getPriceTax());
  m_jTaxrate.setText(oLine.getTaxInfo().getName());
  m_jName.addPropertyChangeListener(""String_Node_Str"",new RecalculateName());
  m_jUnits.addPropertyChangeListener(""String_Node_Str"",new RecalculateUnits());
  m_jPrice.addPropertyChangeListener(""String_Node_Str"",new RecalculatePrice());
  m_jPriceTax.addPropertyChangeListener(""String_Node_Str"",new RecalculatePriceTax());
  m_jName.addEditorKeys(m_jKeys);
  m_jUnits.addEditorKeys(m_jKeys);
  m_jPrice.addEditorKeys(m_jKeys);
  m_jPriceTax.addEditorKeys(m_jKeys);
  if (m_jName.isEnabled()) {
    m_jName.activate();
  }
 else {
    m_jUnits.activate();
  }
  printTotals();
  getRootPane().setDefaultButton(m_jButtonOK);
  m_bok=false;
  setVisible(true);
  return m_bok;
}","private TicketLineInfo init(AppView app,TicketLineInfo oLine){
  initComponents();
  m_oLine=new TicketLineInfo(oLine);
  m_bunitsok=true;
  m_bpriceok=true;
  m_jName.setEnabled(m_oLine.getProductID() == null && app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jPrice.setEnabled(app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jPriceTax.setEnabled(app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jName.setText(m_oLine.getProperty(""String_Node_Str""));
  m_jUnits.setValue(oLine.getMultiply());
  m_jPrice.setValue(oLine.getPrice());
  m_jPriceTax.setValue(oLine.getPriceTax());
  m_jTaxrate.setText(oLine.getTaxInfo().getName());
  m_jName.addPropertyChangeListener(""String_Node_Str"",new RecalculateName());
  m_jUnits.addPropertyChangeListener(""String_Node_Str"",new RecalculateUnits());
  m_jPrice.addPropertyChangeListener(""String_Node_Str"",new RecalculatePrice());
  m_jPriceTax.addPropertyChangeListener(""String_Node_Str"",new RecalculatePriceTax());
  m_jName.addEditorKeys(m_jKeys);
  m_jUnits.addEditorKeys(m_jKeys);
  m_jPrice.addEditorKeys(m_jKeys);
  m_jPriceTax.addEditorKeys(m_jKeys);
  if (m_jName.isEnabled()) {
    m_jName.activate();
  }
 else {
    m_jUnits.activate();
  }
  printTotals();
  getRootPane().setDefaultButton(m_jButtonOK);
  returnLine=null;
  setVisible(true);
  return returnLine;
}",0.9475966750993856
6106,"public static boolean showMessage(Component parent,AppView app,TicketLineInfo oLine){
  Window window=getWindow(parent);
  JProductLineEdit myMsg;
  if (window instanceof Frame) {
    myMsg=new JProductLineEdit((Frame)window,true);
  }
 else {
    myMsg=new JProductLineEdit((Dialog)window,true);
  }
  return myMsg.init(app,oLine);
}","public static TicketLineInfo showMessage(Component parent,AppView app,TicketLineInfo oLine){
  Window window=getWindow(parent);
  JProductLineEdit myMsg;
  if (window instanceof Frame) {
    myMsg=new JProductLineEdit((Frame)window,true);
  }
 else {
    myMsg=new JProductLineEdit((Dialog)window,true);
  }
  return myMsg.init(app,oLine);
}",0.9688888888888888
6107,"private void m_jButtonOKActionPerformed(java.awt.event.ActionEvent evt){
  m_oLineTicket.setProperty(""String_Node_Str"",m_oLine.getProperty(""String_Node_Str""));
  m_oLineTicket.setMultiply(m_oLine.getMultiply());
  m_oLineTicket.setPrice(m_oLine.getPrice());
  m_bok=true;
  dispose();
}","private void m_jButtonOKActionPerformed(java.awt.event.ActionEvent evt){
  returnLine=m_oLine;
  dispose();
}",0.4962025316455696
6108,"@Deprecated public TicketTaxInfo[] getTaxLines(){
  return taxes.toArray(new TicketTaxInfo[taxes.size()]);
}","public TicketTaxInfo[] getTaxLines(){
  Map<String,TicketTaxInfo> m=new HashMap<String,TicketTaxInfo>();
  TicketLineInfo oLine;
  for (Iterator<TicketLineInfo> i=m_aLines.iterator(); i.hasNext(); ) {
    oLine=i.next();
    TicketTaxInfo t=m.get(oLine.getTaxInfo().getId());
    if (t == null) {
      t=new TicketTaxInfo(oLine.getTaxInfo());
      m.put(t.getTaxInfo().getId(),t);
    }
    t.add(oLine.getSubValue());
  }
  Collection<TicketTaxInfo> avalues=m.values();
  return avalues.toArray(new TicketTaxInfo[avalues.size()]);
}",0.2581648522550544
6109,"/** 
 * Creates a new instance of SentenceContainerGeneric 
 */
public DataLogicSales(){
  productcatDatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.BOOLEAN,Datas.BOOLEAN,Datas.DOUBLE,Datas.DOUBLE,Datas.STRING,Datas.STRING,Datas.IMAGE,Datas.DOUBLE,Datas.DOUBLE,Datas.BOOLEAN,Datas.INT,Datas.BYTES};
  stockdiaryDatas=new Datas[]{Datas.STRING,Datas.TIMESTAMP,Datas.INT,Datas.STRING,Datas.STRING,Datas.DOUBLE,Datas.DOUBLE};
  paymenttabledatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.TIMESTAMP,Datas.STRING,Datas.STRING,Datas.DOUBLE};
  stockdatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.DOUBLE,Datas.DOUBLE,Datas.DOUBLE};
}","/** 
 * Creates a new instance of SentenceContainerGeneric 
 */
public DataLogicSales(){
  productcatDatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.BOOLEAN,Datas.BOOLEAN,Datas.DOUBLE,Datas.DOUBLE,Datas.STRING,Datas.STRING,Datas.IMAGE,Datas.DOUBLE,Datas.DOUBLE,Datas.BOOLEAN,Datas.INT,Datas.BYTES};
  stockdiaryDatas=new Datas[]{Datas.STRING,Datas.TIMESTAMP,Datas.INT,Datas.STRING,Datas.STRING,Datas.DOUBLE,Datas.DOUBLE};
  paymenttabledatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.TIMESTAMP,Datas.STRING,Datas.STRING,Datas.DOUBLE};
  stockdatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.DOUBLE,Datas.DOUBLE,Datas.DOUBLE};
  auxiliarDatas=new Datas[]{Datas.STRING,Datas.STRING};
}",0.9599427753934192
6110,"private void m_btnBackActionPerformed(java.awt.event.ActionEvent evt){
  this.showParentCategory();
}","private void m_btnBackActionPerformed(java.awt.event.ActionEvent evt){
  showRootCategoriesPanel();
}",0.8910891089108911
6111,"protected void fireSelectedProduct(ProductInfoExt prod){
  EventListener[] l=listeners.getListeners(ActionListener.class);
  ActionEvent e=null;
  for (int i=0; i < l.length; i++) {
    if (e == null) {
      e=new ActionEvent(prod,ActionEvent.ACTION_PERFORMED,prod.getID());
    }
    ((ActionListener)l[i]).actionPerformed(e);
  }
}","protected void fireSelectedProduct(ProductInfoExt prod){
  EventListener[] l=listeners.getListeners(ActionListener.class);
  ActionEvent e=null;
  for (int i=0; i < l.length; i++) {
    if (e == null) {
      e=new ActionEvent(prod,ActionEvent.ACTION_PERFORMED,prod.getID());
    }
    ((ActionListener)l[i]).actionPerformed(e);
  }
  this.checkForAuxilar(prod);
}",0.9570200573065902
6112,"/** 
 * A method that shows a category a level higher in a categories tree.
 */
private void showParentCategory(){
  int categoryOneLevelHigher=(listOfCategories.size() - 2);
  if (categoryOneLevelHigher < 0) {
    this.showRootCategoriesPanel();
  }
 else {
    selectIndicatorPanel(new ImageIcon(tnbbutton.getThumbNail(listOfCategories.get(categoryOneLevelHigher).getImage())),listOfCategories.get(categoryOneLevelHigher).getName());
    selectCategoryPanel(listOfCategories.get(categoryOneLevelHigher).getID());
    listOfCategories.remove(listOfCategories.size() - 1);
  }
}","/** 
 * A method that shows a category a level higher in a categories tree.
 */
private void showParentCategory(){
  int categoryOneLevelHigher=0;
  if (listOfCategories != null) {
    categoryOneLevelHigher=(listOfCategories.size() - 2);
    if (categoryOneLevelHigher < 0) {
      this.showRootCategoriesPanel();
    }
 else {
      selectIndicatorPanel(new ImageIcon(tnbbutton.getThumbNail(listOfCategories.get(categoryOneLevelHigher).getImage())),listOfCategories.get(categoryOneLevelHigher).getName());
      selectCategoryPanel(listOfCategories.get(categoryOneLevelHigher).getID());
      listOfCategories.remove(listOfCategories.size() - 1);
    }
  }
 else {
    this.showRootCategoriesPanel();
  }
}",0.8989113530326595
6113,"private void showSubcategoryPanel(CategoryInfo category){
  if (listOfCategories == null)   listOfCategories=new ArrayList<CategoryInfo>();
  selectIndicatorPanel(new ImageIcon(tnbbutton.getThumbNail(category.getImage())),category.getName());
  selectCategoryPanel(category.getID());
  listOfCategories.add(category);
  showingcategory=category;
}","private void showSubcategoryPanel(CategoryInfo category){
  if (listOfCategories == null)   listOfCategories=new ArrayList<CategoryInfo>();
  selectIndicatorPanel(new ImageIcon(tnbbutton.getThumbNail(category.getImage())),category.getName());
  selectCategoryPanel(category.getID());
  if ((listOfCategories.size() - 1) > 0) {
    if (listOfCategories.get(listOfCategories.size() - 1) != category)     listOfCategories.add(category);
  }
 else   listOfCategories.add(category);
  showingcategory=category;
}",0.8126463700234192
6114,"/** 
 * Creates a new instance of WebServiceHelper 
 */
public ExternalSalesHelper(DataLogicSystem dlsystem) throws BasicException, ServiceException, MalformedURLException {
  Properties prop=dlsystem.getResourceAsProperties(""String_Node_Str"");
  if (prop == null) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
  }
 else {
    String url=prop.getProperty(""String_Node_Str"");
    if (url == null || url.equals(""String_Node_Str"")) {
      throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
    }
 else {
      url=url.trim();
      if (url.endsWith(""String_Node_Str"")) {
        url=url.substring(0,url.length() - 14);
      }
      externalSales=new ExternalSalesImplServiceLocator().getExternalSales(new URL(url + ""String_Node_Str""));
      externalCustomers=new WebServiceImplServiceLocator().getWebService(new URL(url + ""String_Node_Str""));
      m_sERPUser=prop.getProperty(""String_Node_Str"");
      m_sERPPassword=prop.getProperty(""String_Node_Str"");
      if (m_sERPUser != null && m_sERPPassword != null && m_sERPPassword.startsWith(""String_Node_Str"")) {
        AltEncrypter cypher=new AltEncrypter(""String_Node_Str"" + m_sERPUser);
        m_sERPPassword=cypher.decrypt(m_sERPPassword.substring(6));
      }
      m_sERPPassword=getPasswordHash(m_sERPPassword);
      m_iERPId=Integer.parseInt(prop.getProperty(""String_Node_Str""));
      m_iERPOrg=Integer.parseInt(prop.getProperty(""String_Node_Str""));
      m_iERPPos=Integer.parseInt(prop.getProperty(""String_Node_Str""));
    }
  }
}","/** 
 * Creates a new instance of WebServiceHelper 
 */
public ExternalSalesHelper(DataLogicSystem dlsystem) throws BasicException, ServiceException, MalformedURLException {
  Properties prop=dlsystem.getResourceAsProperties(""String_Node_Str"");
  if (prop == null) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
  }
 else {
    String url=prop.getProperty(""String_Node_Str"");
    if (url == null || url.equals(""String_Node_Str"")) {
      throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
    }
 else {
      url=url.trim();
      if (url.endsWith(""String_Node_Str"")) {
        url=url.substring(0,url.length() - 14);
      }
      externalSales=new ExternalSalesImplServiceLocator().getExternalSales(new URL(url + ""String_Node_Str""));
      externalCustomers=new WebServiceImplServiceLocator().getWebService(new URL(url + ""String_Node_Str""));
      m_sERPUser=prop.getProperty(""String_Node_Str"");
      m_sERPPassword=prop.getProperty(""String_Node_Str"");
      if (m_sERPUser != null && m_sERPPassword != null && m_sERPPassword.startsWith(""String_Node_Str"")) {
        AltEncrypter cypher=new AltEncrypter(""String_Node_Str"" + m_sERPUser);
        m_sERPPassword=cypher.decrypt(m_sERPPassword.substring(6));
      }
      m_sERPPassword=getPasswordHash(m_sERPPassword);
      m_iERPId=prop.getProperty(""String_Node_Str"");
      m_iERPOrg=prop.getProperty(""String_Node_Str"");
      m_iERPPos=prop.getProperty(""String_Node_Str"");
    }
  }
}",0.9701986754966888
6115,"private Order[] transformTickets(List<TicketInfo> ticketlist){
  Order[] orders=new Order[ticketlist.size()];
  for (int i=0; i < ticketlist.size(); i++) {
    TicketInfo ticket=ticketlist.get(i);
    orders[i]=new Order();
    OrderIdentifier orderid=new OrderIdentifier();
    Calendar datenew=Calendar.getInstance();
    datenew.setTime(ticket.getDate());
    orderid.setDateNew(datenew);
    orderid.setDocumentNo(Integer.toString(ticket.getTicketId()));
    orders[i].setOrderId(orderid);
    orders[i].setState(800175);
    BPartner bp;
    if (ticket.getCustomerId() == null) {
      bp=null;
    }
 else {
      bp=new BPartner();
      bp.setId(ticket.getCustomer().getSearchkey());
      bp.setName(ticket.getCustomer().getName());
    }
    orders[i].setBusinessPartner(bp);
    OrderLine[] orderLine=new OrderLine[ticket.getLines().size()];
    for (int j=0; j < ticket.getLines().size(); j++) {
      TicketLineInfo line=ticket.getLines().get(j);
      orderLine[j]=new OrderLine();
      orderLine[j].setOrderLineId(line.getTicketLine());
      if (line.getProductID() == null) {
        orderLine[j].setProductId(0);
      }
 else {
        orderLine[j].setProductId(parseInt(line.getProductID()));
      }
      orderLine[j].setUnits(line.getMultiply());
      orderLine[j].setPrice(line.getPrice());
      orderLine[j].setTaxId(parseInt(line.getTaxInfo().getId()));
    }
    orders[i].setLines(orderLine);
    Payment[] paymentLine=new Payment[ticket.getPayments().size()];
    for (int j=0; j < ticket.getPayments().size(); j++) {
      PaymentInfo payment=ticket.getPayments().get(j);
      paymentLine[j]=new Payment();
      paymentLine[j].setAmount(payment.getTotal());
      if (""String_Node_Str"".equals(payment.getName())) {
        paymentLine[j].setPaymentType(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(payment.getName())) {
        paymentLine[j].setPaymentType(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(payment.getName())) {
        paymentLine[j].setPaymentType(""String_Node_Str"");
      }
 else {
        paymentLine[j].setPaymentType(null);
      }
    }
    orders[i].setPayment(paymentLine);
  }
  return orders;
}","private Order[] transformTickets(List<TicketInfo> ticketlist){
  Order[] orders=new Order[ticketlist.size()];
  for (int i=0; i < ticketlist.size(); i++) {
    TicketInfo ticket=ticketlist.get(i);
    orders[i]=new Order();
    OrderIdentifier orderid=new OrderIdentifier();
    Calendar datenew=Calendar.getInstance();
    datenew.setTime(ticket.getDate());
    orderid.setDateNew(datenew);
    orderid.setDocumentNo(Integer.toString(ticket.getTicketId()));
    orders[i].setOrderId(orderid);
    orders[i].setState(800175);
    BPartner bp;
    if (ticket.getCustomerId() == null) {
      bp=null;
    }
 else {
      bp=new BPartner();
      bp.setId(ticket.getCustomer().getSearchkey());
      bp.setName(ticket.getCustomer().getName());
    }
    orders[i].setBusinessPartner(bp);
    OrderLine[] orderLine=new OrderLine[ticket.getLines().size()];
    for (int j=0; j < ticket.getLines().size(); j++) {
      TicketLineInfo line=ticket.getLines().get(j);
      orderLine[j]=new OrderLine();
      orderLine[j].setOrderLineId(String.valueOf(line.getTicketLine()));
      if (line.getProductID() == null) {
        orderLine[j].setProductId(""String_Node_Str"");
      }
 else {
        orderLine[j].setProductId(line.getProductID());
      }
      orderLine[j].setUnits(line.getMultiply());
      orderLine[j].setPrice(line.getPrice());
      orderLine[j].setTaxId(line.getTaxInfo().getId());
    }
    orders[i].setLines(orderLine);
    Payment[] paymentLine=new Payment[ticket.getPayments().size()];
    for (int j=0; j < ticket.getPayments().size(); j++) {
      PaymentInfo payment=ticket.getPayments().get(j);
      paymentLine[j]=new Payment();
      paymentLine[j].setAmount(payment.getTotal());
      if (""String_Node_Str"".equals(payment.getName())) {
        paymentLine[j].setPaymentType(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(payment.getName())) {
        paymentLine[j].setPaymentType(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(payment.getName())) {
        paymentLine[j].setPaymentType(""String_Node_Str"");
      }
 else {
        paymentLine[j].setPaymentType(null);
      }
    }
    orders[i].setPayment(paymentLine);
  }
  return orders;
}",0.9877717391304348
6116,"public MessageInf execute() throws BasicException {
  try {
    if (externalsales == null) {
      externalsales=new ExternalSalesHelper(dlsystem);
    }
    Product[] products=externalsales.getProductsCatalog();
    Customer[] customers=externalsales.getCustomers();
    if (products == null || customers == null) {
      throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
    }
    if (products.length > 0) {
      dlintegration.syncProductsBefore();
      Date now=new Date();
      for (      Product product : products) {
        TaxCategoryInfo tc=new TaxCategoryInfo();
        tc.setID(Integer.toString(product.getTax().getId()));
        tc.setName(product.getTax().getName());
        dlintegration.syncTaxCategory(tc);
        TaxInfo t=new TaxInfo();
        t.setID(Integer.toString(product.getTax().getId()));
        t.setName(product.getTax().getName());
        t.setTaxCategoryID(tc.getID());
        t.setRate(product.getTax().getPercentage() / 100);
        t.setCascade(false);
        dlintegration.syncTax(t);
        CategoryInfo c=new CategoryInfo();
        c.setID(Integer.toString(product.getCategory().getId()));
        c.setName(product.getCategory().getName());
        c.setImage(null);
        dlintegration.syncCategory(c);
        ProductInfoExt p=new ProductInfoExt();
        p.setID(Integer.toString(product.getId()));
        p.setReference(Integer.toString(product.getId()));
        p.setCode(product.getEan() == null || product.getEan().equals(""String_Node_Str"") ? Integer.toString(product.getId()) : product.getEan());
        p.setName(product.getName());
        p.setCom(false);
        p.setScale(false);
        p.setPriceBuy(product.getPurchasePrice());
        p.setPriceSell(product.getListPrice());
        p.setCategoryID(c.getID());
        p.setTaxCategoryInfo(tc);
        p.setImage(ImageUtils.readImage(product.getImageUrl()));
        dlintegration.syncProduct(p);
        if (product instanceof ProductPlus) {
          ProductPlus productplus=(ProductPlus)product;
          double diff=productplus.getQtyonhand() - dlsales.findProductStock(p.getID(),warehouse);
          Object[] diary=new Object[7];
          diary[0]=UUID.randomUUID().toString();
          diary[1]=now;
          diary[2]=diff > 0.0 ? MovementReason.IN_MOVEMENT.getKey() : MovementReason.OUT_MOVEMENT.getKey();
          diary[3]=warehouse;
          diary[4]=p.getID();
          diary[5]=new Double(diff);
          diary[6]=new Double(p.getPriceBuy());
          dlsales.getStockDiaryInsert().exec(diary);
        }
      }
    }
    if (customers.length > 0) {
      dlintegration.syncCustomersBefore();
      for (      Customer customer : customers) {
        CustomerInfoExt cinfo=new CustomerInfoExt(Integer.toString(customer.getId()));
        cinfo.setSearchkey(customer.getSearchKey());
        cinfo.setName(customer.getName());
        cinfo.setNotes(customer.getDescription());
        dlintegration.syncCustomer(cinfo);
      }
    }
    if (products.length == 0 && customers.length == 0) {
      return new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString(""String_Node_Str""));
    }
 else {
      return new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""),AppLocal.getIntString(""String_Node_Str"",products.length,customers.length));
    }
  }
 catch (  ServiceException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  RemoteException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  MalformedURLException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
}","public MessageInf execute() throws BasicException {
  try {
    if (externalsales == null) {
      externalsales=new ExternalSalesHelper(dlsystem);
    }
    Product[] products=externalsales.getProductsCatalog();
    Customer[] customers=externalsales.getCustomers();
    if (products == null || customers == null) {
      throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
    }
    if (products.length > 0) {
      dlintegration.syncProductsBefore();
      Date now=new Date();
      for (      Product product : products) {
        TaxCategoryInfo tc=new TaxCategoryInfo();
        tc.setID(product.getTax().getId());
        tc.setName(product.getTax().getName());
        dlintegration.syncTaxCategory(tc);
        TaxInfo t=new TaxInfo();
        t.setID(product.getTax().getId());
        t.setName(product.getTax().getName());
        t.setTaxCategoryID(tc.getID());
        t.setRate(product.getTax().getPercentage() / 100);
        t.setCascade(false);
        dlintegration.syncTax(t);
        CategoryInfo c=new CategoryInfo();
        c.setID(product.getCategory().getId());
        c.setName(product.getCategory().getName());
        c.setImage(null);
        dlintegration.syncCategory(c);
        ProductInfoExt p=new ProductInfoExt();
        p.setID(product.getId());
        p.setReference(product.getId());
        p.setCode(product.getEan() == null || product.getEan().equals(""String_Node_Str"") ? product.getId() : product.getEan());
        p.setName(product.getName());
        p.setCom(false);
        p.setScale(false);
        p.setPriceBuy(product.getPurchasePrice());
        p.setPriceSell(product.getListPrice());
        p.setCategoryID(c.getID());
        p.setTaxCategoryInfo(tc);
        p.setImage(ImageUtils.readImage(product.getImageUrl()));
        dlintegration.syncProduct(p);
        if (product instanceof ProductPlus) {
          ProductPlus productplus=(ProductPlus)product;
          double diff=productplus.getQtyonhand() - dlsales.findProductStock(p.getID(),warehouse);
          Object[] diary=new Object[7];
          diary[0]=UUID.randomUUID().toString();
          diary[1]=now;
          diary[2]=diff > 0.0 ? MovementReason.IN_MOVEMENT.getKey() : MovementReason.OUT_MOVEMENT.getKey();
          diary[3]=warehouse;
          diary[4]=p.getID();
          diary[5]=new Double(diff);
          diary[6]=new Double(p.getPriceBuy());
          dlsales.getStockDiaryInsert().exec(diary);
        }
      }
    }
    if (customers.length > 0) {
      dlintegration.syncCustomersBefore();
      for (      Customer customer : customers) {
        CustomerInfoExt cinfo=new CustomerInfoExt(customer.getId());
        cinfo.setSearchkey(customer.getSearchKey());
        cinfo.setName(customer.getName());
        cinfo.setNotes(customer.getDescription());
        dlintegration.syncCustomer(cinfo);
      }
    }
    if (products.length == 0 && customers.length == 0) {
      return new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString(""String_Node_Str""));
    }
 else {
      return new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""),AppLocal.getIntString(""String_Node_Str"",products.length,customers.length));
    }
  }
 catch (  ServiceException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  RemoteException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  MalformedURLException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
}",0.9667866039302518
6117,"/** 
 * Gets the clientId value for this BusinessPartner.
 * @return clientId
 */
public int getClientId(){
  return clientId;
}","/** 
 * Gets the clientId value for this BusinessPartner.
 * @return clientId
 */
public java.lang.String getClientId(){
  return clientId;
}",0.9442379182156134
6118,"public BusinessPartner(int clientId,java.lang.Boolean complete,com.openbravo.ws.customers.Contact[] contacts,java.lang.Boolean customer,java.lang.String description,int id,com.openbravo.ws.customers.Location[] locations,java.lang.String name,java.lang.String searchKey,java.lang.Boolean vendor){
  this.clientId=clientId;
  this.complete=complete;
  this.contacts=contacts;
  this.customer=customer;
  this.description=description;
  this.id=id;
  this.locations=locations;
  this.name=name;
  this.searchKey=searchKey;
  this.vendor=vendor;
}","public BusinessPartner(java.lang.String clientId,java.lang.Boolean complete,com.openbravo.ws.customers.Contact[] contacts,java.lang.Boolean customer,java.lang.String description,java.lang.String id,com.openbravo.ws.customers.Location[] locations,java.lang.String name,java.lang.String searchKey,java.lang.Boolean vendor){
  this.clientId=clientId;
  this.complete=complete;
  this.contacts=contacts;
  this.customer=customer;
  this.description=description;
  this.id=id;
  this.locations=locations;
  this.name=name;
  this.searchKey=searchKey;
  this.vendor=vendor;
}",0.9658273381294964
6119,"/** 
 * Gets the id value for this BusinessPartner.
 * @return id
 */
public int getId(){
  return id;
}","/** 
 * Gets the id value for this BusinessPartner.
 * @return id
 */
public java.lang.String getId(){
  return id;
}",0.9321266968325792
6120,"public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=getClientId();
  if (getComplete() != null) {
    _hashCode+=getComplete().hashCode();
  }
  if (getContacts() != null) {
    for (int i=0; i < java.lang.reflect.Array.getLength(getContacts()); i++) {
      java.lang.Object obj=java.lang.reflect.Array.get(getContacts(),i);
      if (obj != null && !obj.getClass().isArray()) {
        _hashCode+=obj.hashCode();
      }
    }
  }
  if (getCustomer() != null) {
    _hashCode+=getCustomer().hashCode();
  }
  if (getDescription() != null) {
    _hashCode+=getDescription().hashCode();
  }
  _hashCode+=getId();
  if (getLocations() != null) {
    for (int i=0; i < java.lang.reflect.Array.getLength(getLocations()); i++) {
      java.lang.Object obj=java.lang.reflect.Array.get(getLocations(),i);
      if (obj != null && !obj.getClass().isArray()) {
        _hashCode+=obj.hashCode();
      }
    }
  }
  if (getName() != null) {
    _hashCode+=getName().hashCode();
  }
  if (getSearchKey() != null) {
    _hashCode+=getSearchKey().hashCode();
  }
  if (getVendor() != null) {
    _hashCode+=getVendor().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}","public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  if (getClientId() != null) {
    _hashCode+=getClientId().hashCode();
  }
  if (getComplete() != null) {
    _hashCode+=getComplete().hashCode();
  }
  if (getContacts() != null) {
    for (int i=0; i < java.lang.reflect.Array.getLength(getContacts()); i++) {
      java.lang.Object obj=java.lang.reflect.Array.get(getContacts(),i);
      if (obj != null && !obj.getClass().isArray()) {
        _hashCode+=obj.hashCode();
      }
    }
  }
  if (getCustomer() != null) {
    _hashCode+=getCustomer().hashCode();
  }
  if (getDescription() != null) {
    _hashCode+=getDescription().hashCode();
  }
  if (getId() != null) {
    _hashCode+=getId().hashCode();
  }
  if (getLocations() != null) {
    for (int i=0; i < java.lang.reflect.Array.getLength(getLocations()); i++) {
      java.lang.Object obj=java.lang.reflect.Array.get(getLocations(),i);
      if (obj != null && !obj.getClass().isArray()) {
        _hashCode+=obj.hashCode();
      }
    }
  }
  if (getName() != null) {
    _hashCode+=getName().hashCode();
  }
  if (getSearchKey() != null) {
    _hashCode+=getSearchKey().hashCode();
  }
  if (getVendor() != null) {
    _hashCode+=getVendor().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}",0.9637065637065636
6121,"/** 
 * Sets the id value for this BusinessPartner.
 * @param id
 */
public void setId(int id){
  this.id=id;
}","/** 
 * Sets the id value for this BusinessPartner.
 * @param id
 */
public void setId(java.lang.String id){
  this.id=id;
}",0.9361702127659576
6122,"public synchronized boolean equals(java.lang.Object obj){
  if (!(obj instanceof BusinessPartner))   return false;
  BusinessPartner other=(BusinessPartner)obj;
  if (obj == null)   return false;
  if (this == obj)   return true;
  if (__equalsCalc != null) {
    return (__equalsCalc == obj);
  }
  __equalsCalc=obj;
  boolean _equals;
  _equals=true && this.clientId == other.getClientId() && ((this.complete == null && other.getComplete() == null) || (this.complete != null && this.complete.equals(other.getComplete()))) && ((this.contacts == null && other.getContacts() == null) || (this.contacts != null && java.util.Arrays.equals(this.contacts,other.getContacts()))) && ((this.customer == null && other.getCustomer() == null) || (this.customer != null && this.customer.equals(other.getCustomer()))) && ((this.description == null && other.getDescription() == null) || (this.description != null && this.description.equals(other.getDescription()))) && this.id == other.getId() && ((this.locations == null && other.getLocations() == null) || (this.locations != null && java.util.Arrays.equals(this.locations,other.getLocations()))) && ((this.name == null && other.getName() == null) || (this.name != null && this.name.equals(other.getName()))) && ((this.searchKey == null && other.getSearchKey() == null) || (this.searchKey != null && this.searchKey.equals(other.getSearchKey()))) && ((this.vendor == null && other.getVendor() == null) || (this.vendor != null && this.vendor.equals(other.getVendor())));
  __equalsCalc=null;
  return _equals;
}","public synchronized boolean equals(java.lang.Object obj){
  if (!(obj instanceof BusinessPartner))   return false;
  BusinessPartner other=(BusinessPartner)obj;
  if (obj == null)   return false;
  if (this == obj)   return true;
  if (__equalsCalc != null) {
    return (__equalsCalc == obj);
  }
  __equalsCalc=obj;
  boolean _equals;
  _equals=true && ((this.clientId == null && other.getClientId() == null) || (this.clientId != null && this.clientId.equals(other.getClientId()))) && ((this.complete == null && other.getComplete() == null) || (this.complete != null && this.complete.equals(other.getComplete())))&& ((this.contacts == null && other.getContacts() == null) || (this.contacts != null && java.util.Arrays.equals(this.contacts,other.getContacts())))&& ((this.customer == null && other.getCustomer() == null) || (this.customer != null && this.customer.equals(other.getCustomer())))&& ((this.description == null && other.getDescription() == null) || (this.description != null && this.description.equals(other.getDescription())))&& ((this.id == null && other.getId() == null) || (this.id != null && this.id.equals(other.getId())))&& ((this.locations == null && other.getLocations() == null) || (this.locations != null && java.util.Arrays.equals(this.locations,other.getLocations())))&& ((this.name == null && other.getName() == null) || (this.name != null && this.name.equals(other.getName())))&& ((this.searchKey == null && other.getSearchKey() == null) || (this.searchKey != null && this.searchKey.equals(other.getSearchKey())))&& ((this.vendor == null && other.getVendor() == null) || (this.vendor != null && this.vendor.equals(other.getVendor())));
  __equalsCalc=null;
  return _equals;
}",0.939076923076923
6123,"/** 
 * Sets the clientId value for this BusinessPartner.
 * @param clientId
 */
public void setClientId(int clientId){
  this.clientId=clientId;
}","/** 
 * Sets the clientId value for this BusinessPartner.
 * @param clientId
 */
public void setClientId(java.lang.String clientId){
  this.clientId=clientId;
}",0.9511400651465798
6124,"/** 
 * Gets the clientId value for this Contact.
 * @return clientId
 */
public int getClientId(){
  return clientId;
}","/** 
 * Gets the clientId value for this Contact.
 * @return clientId
 */
public java.lang.String getClientId(){
  return clientId;
}",0.9407114624505928
6125,"/** 
 * Gets the id value for this Contact.
 * @return id
 */
public int getId(){
  return id;
}","/** 
 * Gets the id value for this Contact.
 * @return id
 */
public java.lang.String getId(){
  return id;
}",0.926829268292683
6126,"/** 
 * Sets the businessPartnerId value for this Contact.
 * @param businessPartnerId
 */
public void setBusinessPartnerId(int businessPartnerId){
  this.businessPartnerId=businessPartnerId;
}","/** 
 * Sets the businessPartnerId value for this Contact.
 * @param businessPartnerId
 */
public void setBusinessPartnerId(java.lang.String businessPartnerId){
  this.businessPartnerId=businessPartnerId;
}",0.9523809523809524
6127,"public Contact(int businessPartnerId,int clientId,java.lang.String email,java.lang.String fax,java.lang.String firstName,int id,java.lang.String lastName,java.lang.String phone,java.lang.String phone2){
  this.businessPartnerId=businessPartnerId;
  this.clientId=clientId;
  this.email=email;
  this.fax=fax;
  this.firstName=firstName;
  this.id=id;
  this.lastName=lastName;
  this.phone=phone;
  this.phone2=phone2;
}","public Contact(java.lang.String businessPartnerId,java.lang.String clientId,java.lang.String email,java.lang.String fax,java.lang.String firstName,java.lang.String id,java.lang.String lastName,java.lang.String phone,java.lang.String phone2){
  this.businessPartnerId=businessPartnerId;
  this.clientId=clientId;
  this.email=email;
  this.fax=fax;
  this.firstName=firstName;
  this.id=id;
  this.lastName=lastName;
  this.phone=phone;
  this.phone2=phone2;
}",0.9351535836177476
6128,"public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=getBusinessPartnerId();
  _hashCode+=getClientId();
  if (getEmail() != null) {
    _hashCode+=getEmail().hashCode();
  }
  if (getFax() != null) {
    _hashCode+=getFax().hashCode();
  }
  if (getFirstName() != null) {
    _hashCode+=getFirstName().hashCode();
  }
  _hashCode+=getId();
  if (getLastName() != null) {
    _hashCode+=getLastName().hashCode();
  }
  if (getPhone() != null) {
    _hashCode+=getPhone().hashCode();
  }
  if (getPhone2() != null) {
    _hashCode+=getPhone2().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}","public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  if (getBusinessPartnerId() != null) {
    _hashCode+=getBusinessPartnerId().hashCode();
  }
  if (getClientId() != null) {
    _hashCode+=getClientId().hashCode();
  }
  if (getEmail() != null) {
    _hashCode+=getEmail().hashCode();
  }
  if (getFax() != null) {
    _hashCode+=getFax().hashCode();
  }
  if (getFirstName() != null) {
    _hashCode+=getFirstName().hashCode();
  }
  if (getId() != null) {
    _hashCode+=getId().hashCode();
  }
  if (getLastName() != null) {
    _hashCode+=getLastName().hashCode();
  }
  if (getPhone() != null) {
    _hashCode+=getPhone().hashCode();
  }
  if (getPhone2() != null) {
    _hashCode+=getPhone2().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}",0.8976897689768977
6129,"public synchronized boolean equals(java.lang.Object obj){
  if (!(obj instanceof Contact))   return false;
  Contact other=(Contact)obj;
  if (obj == null)   return false;
  if (this == obj)   return true;
  if (__equalsCalc != null) {
    return (__equalsCalc == obj);
  }
  __equalsCalc=obj;
  boolean _equals;
  _equals=true && this.businessPartnerId == other.getBusinessPartnerId() && this.clientId == other.getClientId() && ((this.email == null && other.getEmail() == null) || (this.email != null && this.email.equals(other.getEmail()))) && ((this.fax == null && other.getFax() == null) || (this.fax != null && this.fax.equals(other.getFax()))) && ((this.firstName == null && other.getFirstName() == null) || (this.firstName != null && this.firstName.equals(other.getFirstName()))) && this.id == other.getId() && ((this.lastName == null && other.getLastName() == null) || (this.lastName != null && this.lastName.equals(other.getLastName()))) && ((this.phone == null && other.getPhone() == null) || (this.phone != null && this.phone.equals(other.getPhone()))) && ((this.phone2 == null && other.getPhone2() == null) || (this.phone2 != null && this.phone2.equals(other.getPhone2())));
  __equalsCalc=null;
  return _equals;
}","public synchronized boolean equals(java.lang.Object obj){
  if (!(obj instanceof Contact))   return false;
  Contact other=(Contact)obj;
  if (obj == null)   return false;
  if (this == obj)   return true;
  if (__equalsCalc != null) {
    return (__equalsCalc == obj);
  }
  __equalsCalc=obj;
  boolean _equals;
  _equals=true && ((this.businessPartnerId == null && other.getBusinessPartnerId() == null) || (this.businessPartnerId != null && this.businessPartnerId.equals(other.getBusinessPartnerId()))) && ((this.clientId == null && other.getClientId() == null) || (this.clientId != null && this.clientId.equals(other.getClientId())))&& ((this.email == null && other.getEmail() == null) || (this.email != null && this.email.equals(other.getEmail())))&& ((this.fax == null && other.getFax() == null) || (this.fax != null && this.fax.equals(other.getFax())))&& ((this.firstName == null && other.getFirstName() == null) || (this.firstName != null && this.firstName.equals(other.getFirstName())))&& ((this.id == null && other.getId() == null) || (this.id != null && this.id.equals(other.getId())))&& ((this.lastName == null && other.getLastName() == null) || (this.lastName != null && this.lastName.equals(other.getLastName())))&& ((this.phone == null && other.getPhone() == null) || (this.phone != null && this.phone.equals(other.getPhone())))&& ((this.phone2 == null && other.getPhone2() == null) || (this.phone2 != null && this.phone2.equals(other.getPhone2())));
  __equalsCalc=null;
  return _equals;
}",0.8667642752562226
6130,"/** 
 * Sets the id value for this Contact.
 * @param id
 */
public void setId(int id){
  this.id=id;
}","/** 
 * Sets the id value for this Contact.
 * @param id
 */
public void setId(java.lang.String id){
  this.id=id;
}",0.9315068493150684
6131,"/** 
 * Gets the businessPartnerId value for this Contact.
 * @return businessPartnerId
 */
public int getBusinessPartnerId(){
  return businessPartnerId;
}","/** 
 * Gets the businessPartnerId value for this Contact.
 * @return businessPartnerId
 */
public java.lang.String getBusinessPartnerId(){
  return businessPartnerId;
}",0.953846153846154
6132,"/** 
 * Sets the clientId value for this Contact.
 * @param clientId
 */
public void setClientId(int clientId){
  this.clientId=clientId;
}","/** 
 * Sets the clientId value for this Contact.
 * @param clientId
 */
public void setClientId(java.lang.String clientId){
  this.clientId=clientId;
}",0.9484536082474226
6133,"public void uploadOrders(Order[] orderstoupload) throws RemoteException {
  externalSales.uploadOrders(m_iERPId,m_iERPOrg,m_iERPPos,orderstoupload,m_sERPUser,m_sERPPassword);
}","public boolean uploadOrders(Order[] orderstoupload) throws RemoteException {
  return externalSales.uploadOrders(m_iERPId,m_iERPOrg,m_iERPPos,orderstoupload,m_sERPUser,m_sERPPassword);
}",0.9558011049723756
6134,"public MessageInf execute() throws BasicException {
  try {
    if (externalsales == null) {
      externalsales=new ExternalSalesHelper(dlsystem);
    }
    List<TicketInfo> ticketlist=dlintegration.getTickets();
    for (    TicketInfo ticket : ticketlist) {
      ticket.setLines(dlintegration.getTicketLines(ticket.getId()));
      ticket.setPayments(dlintegration.getTicketPayments(ticket.getId()));
    }
    if (ticketlist.size() == 0) {
      return new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString(""String_Node_Str""));
    }
 else {
      Order[] orders=transformTickets(ticketlist);
      externalsales.uploadOrders(orders);
      dlintegration.execTicketUpdate();
      return new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""),AppLocal.getIntString(""String_Node_Str"",orders.length));
    }
  }
 catch (  ServiceException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  RemoteException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  MalformedURLException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
}","public MessageInf execute() throws BasicException {
  try {
    if (externalsales == null) {
      externalsales=new ExternalSalesHelper(dlsystem);
    }
    List<TicketInfo> ticketlist=dlintegration.getTickets();
    for (    TicketInfo ticket : ticketlist) {
      ticket.setLines(dlintegration.getTicketLines(ticket.getId()));
      ticket.setPayments(dlintegration.getTicketPayments(ticket.getId()));
    }
    if (ticketlist.size() == 0) {
      return new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString(""String_Node_Str""));
    }
 else {
      Order[] orders=transformTickets(ticketlist);
      if (!externalsales.uploadOrders(orders))       throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
      dlintegration.execTicketUpdate();
      return new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""),AppLocal.getIntString(""String_Node_Str"",orders.length));
    }
  }
 catch (  ServiceException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  RemoteException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  MalformedURLException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
}",0.9675297986025484
6135,"public void uploadOrders(java.lang.String clientID,java.lang.String organizationId,java.lang.String salesChannel,com.openbravo.ws.externalsales.Order[] newOrders,java.lang.String username,java.lang.String password) throws java.rmi.RemoteException ;","public boolean uploadOrders(java.lang.String clientID,java.lang.String organizationId,java.lang.String salesChannel,com.openbravo.ws.externalsales.Order[] newOrders,java.lang.String username,java.lang.String password) throws java.rmi.RemoteException ;",0.9779559118236472
6136,"public void uploadOrders(java.lang.String clientID,java.lang.String organizationId,java.lang.String salesChannel,com.openbravo.ws.externalsales.Order[] newOrders,java.lang.String username,java.lang.String password) throws java.rmi.RemoteException {
  if (super.cachedEndpoint == null) {
    throw new org.apache.axis.NoEndPointException();
  }
  org.apache.axis.client.Call _call=createCall();
  _call.setOperation(_operations[2]);
  _call.setUseSOAPAction(true);
  _call.setSOAPActionURI(""String_Node_Str"");
  _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);
  _call.setOperationName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  setRequestHeaders(_call);
  setAttachments(_call);
  try {
    java.lang.Object _resp=_call.invoke(new java.lang.Object[]{clientID,organizationId,salesChannel,newOrders,username,password});
    if (_resp instanceof java.rmi.RemoteException) {
      throw (java.rmi.RemoteException)_resp;
    }
    extractAttachments(_call);
  }
 catch (  org.apache.axis.AxisFault axisFaultException) {
    throw axisFaultException;
  }
}","public boolean uploadOrders(java.lang.String clientID,java.lang.String organizationId,java.lang.String salesChannel,com.openbravo.ws.externalsales.Order[] newOrders,java.lang.String username,java.lang.String password) throws java.rmi.RemoteException {
  if (super.cachedEndpoint == null) {
    throw new org.apache.axis.NoEndPointException();
  }
  org.apache.axis.client.Call _call=createCall();
  _call.setOperation(_operations[2]);
  _call.setUseSOAPAction(true);
  _call.setSOAPActionURI(""String_Node_Str"");
  _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);
  _call.setOperationName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  setRequestHeaders(_call);
  setAttachments(_call);
  try {
    java.lang.Object _resp=_call.invoke(new java.lang.Object[]{clientID,organizationId,salesChannel,newOrders,username,password});
    if (_resp instanceof java.rmi.RemoteException) {
      throw (java.rmi.RemoteException)_resp;
    }
 else {
      extractAttachments(_call);
      try {
        return ((java.lang.Boolean)_resp).booleanValue();
      }
 catch (      java.lang.Exception _exception) {
        return ((java.lang.Boolean)org.apache.axis.utils.JavaUtils.convert(_resp,boolean.class)).booleanValue();
      }
    }
  }
 catch (  org.apache.axis.AxisFault axisFaultException) {
    throw axisFaultException;
  }
}",0.889248181083266
6137,"private static void _initOperationDesc1(){
  org.apache.axis.description.OperationDesc oper;
  org.apache.axis.description.ParameterDesc param;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(com.openbravo.ws.externalsales.Product[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[0]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(com.openbravo.ws.externalsales.ProductPlus[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[1]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),com.openbravo.ws.externalsales.Order[].class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(org.apache.axis.encoding.XMLType.AXIS_VOID);
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[2]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),com.openbravo.ws.externalsales.OrderIdentifier[].class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(com.openbravo.ws.externalsales.Order[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[3]=oper;
}","private static void _initOperationDesc1(){
  org.apache.axis.description.OperationDesc oper;
  org.apache.axis.description.ParameterDesc param;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(com.openbravo.ws.externalsales.Product[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[0]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(com.openbravo.ws.externalsales.ProductPlus[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[1]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),com.openbravo.ws.externalsales.Order[].class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(boolean.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[2]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),com.openbravo.ws.externalsales.OrderIdentifier[].class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(com.openbravo.ws.externalsales.Order[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[3]=oper;
}",0.985628524649809
6138,"public void valueChanged(ListSelectionEvent e){
  if (!e.getValueIsAdjusting()) {
    int i=m_ticketlines.getSelectedIndex();
    while (i >= 0 && m_oTicket.getLine(i).isProductCom()) {
      i--;
    }
    if (i >= 0) {
      m_cat.showCatalogPanel(m_oTicket.getLine(i).getProductID());
    }
 else {
      m_cat.showCatalogPanel(null);
    }
  }
}","public void valueChanged(ListSelectionEvent e){
  if (!e.getValueIsAdjusting()) {
    int i=m_ticketlines.getSelectedIndex();
    if (i >= 0) {
      while (i >= 0 && m_oTicket.getLine(i).isProductCom()) {
        i--;
      }
      if (i >= 0) {
        m_cat.showCatalogPanel(m_oTicket.getLine(i).getProductID());
      }
 else {
        m_cat.showCatalogPanel(null);
      }
    }
  }
}",0.8943089430894309
6139,"public void writeValueInsert(){
  reportlock=true;
  m_jTitle.setText(AppLocal.getIntString(""String_Node_Str""));
  m_id=null;
  m_jRef.setText(null);
  m_jCode.setText(null);
  m_jName.setText(null);
  m_jComment.setSelected(false);
  m_jScale.setSelected(false);
  m_CategoryModel.setSelectedKey(null);
  taxcatmodel.setSelectedKey(null);
  m_jPriceBuy.setText(null);
  m_jPriceSell.setText(null);
  m_jImage.setImage(null);
  m_jstockcost.setText(null);
  m_jstockvolume.setText(null);
  m_jInCatalog.setSelected(true);
  m_jCatalogOrder.setText(null);
  txtAttributes.setText(null);
  reportlock=false;
  m_jRef.setEnabled(true);
  m_jCode.setEnabled(true);
  m_jName.setEnabled(true);
  m_jComment.setEnabled(true);
  m_jScale.setEnabled(true);
  m_jCategory.setEnabled(true);
  m_jTax.setEnabled(true);
  m_jPriceBuy.setEnabled(true);
  m_jPriceSell.setEnabled(true);
  m_jPriceSellTax.setEnabled(true);
  m_jmargin.setEnabled(true);
  m_jImage.setEnabled(true);
  m_jstockcost.setEnabled(true);
  m_jstockvolume.setEnabled(true);
  m_jInCatalog.setEnabled(true);
  m_jCatalogOrder.setEnabled(false);
  txtAttributes.setEnabled(true);
  calculateMargin();
  calculatePriceSellTax();
}","public void writeValueInsert(){
  reportlock=true;
  m_jTitle.setText(AppLocal.getIntString(""String_Node_Str""));
  m_id=null;
  m_jRef.setText(null);
  m_jCode.setText(null);
  m_jName.setText(null);
  m_jComment.setSelected(false);
  m_jScale.setSelected(false);
  m_CategoryModel.setSelectedKey(null);
  taxcatmodel.setSelectedKey(null);
  m_jPriceBuy.setText(null);
  setPriceSell(null);
  m_jImage.setImage(null);
  m_jstockcost.setText(null);
  m_jstockvolume.setText(null);
  m_jInCatalog.setSelected(true);
  m_jCatalogOrder.setText(null);
  txtAttributes.setText(null);
  reportlock=false;
  m_jRef.setEnabled(true);
  m_jCode.setEnabled(true);
  m_jName.setEnabled(true);
  m_jComment.setEnabled(true);
  m_jScale.setEnabled(true);
  m_jCategory.setEnabled(true);
  m_jTax.setEnabled(true);
  m_jPriceBuy.setEnabled(true);
  m_jPriceSell.setEnabled(true);
  m_jPriceSellTax.setEnabled(true);
  m_jmargin.setEnabled(true);
  m_jImage.setEnabled(true);
  m_jstockcost.setEnabled(true);
  m_jstockvolume.setEnabled(true);
  m_jInCatalog.setEnabled(true);
  m_jCatalogOrder.setEnabled(false);
  txtAttributes.setEnabled(true);
  calculateMargin();
  calculatePriceSellTax();
}",0.9940928270042194
6140,"/** 
 * Creates new form JEditProduct 
 */
public ProductsEditor(DataLogicSales dlSales,DirtyManager dirty){
  initComponents();
  taxsent=dlSales.getTaxList();
  m_sentcat=dlSales.getCategoriesList();
  m_CategoryModel=new ComboBoxValModel();
  taxcatsent=dlSales.getTaxCategoriesList();
  taxcatmodel=new ComboBoxValModel();
  m_CodetypeModel=new ComboBoxValModel();
  m_CodetypeModel.add(null);
  m_CodetypeModel.add(CodeType.EAN13);
  m_CodetypeModel.add(CodeType.CODE128);
  m_jCodetype.setModel(m_CodetypeModel);
  m_jCodetype.setVisible(false);
  m_jRef.getDocument().addDocumentListener(dirty);
  m_jCode.getDocument().addDocumentListener(dirty);
  m_jName.getDocument().addDocumentListener(dirty);
  m_jComment.addActionListener(dirty);
  m_jScale.addActionListener(dirty);
  m_jCategory.addActionListener(dirty);
  m_jTax.addActionListener(dirty);
  m_jPriceBuy.getDocument().addDocumentListener(dirty);
  m_jPriceSell.getDocument().addDocumentListener(dirty);
  m_jImage.addPropertyChangeListener(""String_Node_Str"",dirty);
  m_jstockcost.getDocument().addDocumentListener(dirty);
  m_jstockvolume.getDocument().addDocumentListener(dirty);
  m_jInCatalog.addActionListener(dirty);
  m_jCatalogOrder.getDocument().addDocumentListener(dirty);
  txtAttributes.getDocument().addDocumentListener(dirty);
  FieldsManager fm=new FieldsManager();
  m_jPriceBuy.getDocument().addDocumentListener(fm);
  m_jPriceSell.getDocument().addDocumentListener(fm);
  m_jTax.addActionListener(fm);
  m_jPriceSellTax.getDocument().addDocumentListener(new PriceTaxManager());
  m_jmargin.getDocument().addDocumentListener(new MarginManager());
  writeValueEOF();
}","/** 
 * Creates new form JEditProduct 
 */
public ProductsEditor(DataLogicSales dlSales,DirtyManager dirty){
  initComponents();
  taxsent=dlSales.getTaxList();
  m_sentcat=dlSales.getCategoriesList();
  m_CategoryModel=new ComboBoxValModel();
  taxcatsent=dlSales.getTaxCategoriesList();
  taxcatmodel=new ComboBoxValModel();
  m_CodetypeModel=new ComboBoxValModel();
  m_CodetypeModel.add(null);
  m_CodetypeModel.add(CodeType.EAN13);
  m_CodetypeModel.add(CodeType.CODE128);
  m_jCodetype.setModel(m_CodetypeModel);
  m_jCodetype.setVisible(false);
  m_jRef.getDocument().addDocumentListener(dirty);
  m_jCode.getDocument().addDocumentListener(dirty);
  m_jName.getDocument().addDocumentListener(dirty);
  m_jComment.addActionListener(dirty);
  m_jScale.addActionListener(dirty);
  m_jCategory.addActionListener(dirty);
  m_jTax.addActionListener(dirty);
  m_jPriceBuy.getDocument().addDocumentListener(dirty);
  m_jPriceSell.getDocument().addDocumentListener(dirty);
  m_jImage.addPropertyChangeListener(""String_Node_Str"",dirty);
  m_jstockcost.getDocument().addDocumentListener(dirty);
  m_jstockvolume.getDocument().addDocumentListener(dirty);
  m_jInCatalog.addActionListener(dirty);
  m_jCatalogOrder.getDocument().addDocumentListener(dirty);
  txtAttributes.getDocument().addDocumentListener(dirty);
  FieldsManager fm=new FieldsManager();
  m_jPriceBuy.getDocument().addDocumentListener(fm);
  m_jPriceSell.getDocument().addDocumentListener(new PriceSellManager());
  m_jTax.addActionListener(fm);
  m_jPriceSellTax.getDocument().addDocumentListener(new PriceTaxManager());
  m_jmargin.getDocument().addDocumentListener(new MarginManager());
  writeValueEOF();
}",0.9927797833935018
6141,"private void calculatePriceSellTax(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceSell=readCurrency(m_jPriceSell.getText());
    if (dPriceSell == null) {
      m_jPriceSellTax.setText(null);
    }
 else {
      double dTaxRate=taxeslogic.getTaxRate((TaxCategoryInfo)taxcatmodel.getSelectedItem());
      m_jPriceSellTax.setText(Formats.CURRENCY.formatValue(new Double(dPriceSell.doubleValue() * (1.0 + dTaxRate))));
    }
    reportlock=false;
  }
}","private void calculatePriceSellTax(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceSell=(Double)pricesell;
    if (dPriceSell == null) {
      m_jPriceSellTax.setText(null);
    }
 else {
      double dTaxRate=taxeslogic.getTaxRate((TaxCategoryInfo)taxcatmodel.getSelectedItem());
      m_jPriceSellTax.setText(Formats.CURRENCY.formatValue(new Double(dPriceSell.doubleValue() * (1.0 + dTaxRate))));
    }
    reportlock=false;
  }
}",0.9418221734357848
6142,"private void calculatePriceSellfromPST(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceSellTax=readCurrency(m_jPriceSellTax.getText());
    if (dPriceSellTax == null) {
      m_jPriceSell.setText(null);
    }
 else {
      double dTaxRate=taxeslogic.getTaxRate((TaxCategoryInfo)taxcatmodel.getSelectedItem());
      m_jPriceSell.setText(Formats.CURRENCY.formatValue(new Double(dPriceSellTax.doubleValue() / (1.0 + dTaxRate))));
    }
    reportlock=false;
  }
}","private void calculatePriceSellfromPST(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceSellTax=readCurrency(m_jPriceSellTax.getText());
    if (dPriceSellTax == null) {
      setPriceSell(null);
    }
 else {
      double dTaxRate=taxeslogic.getTaxRate((TaxCategoryInfo)taxcatmodel.getSelectedItem());
      setPriceSell(new Double(dPriceSellTax.doubleValue() / (1.0 + dTaxRate)));
    }
    reportlock=false;
  }
}",0.90929203539823
6143,"public void writeValueEdit(Object value){
  reportlock=true;
  Object[] myprod=(Object[])value;
  m_jTitle.setText(Formats.STRING.formatValue(myprod[1]) + ""String_Node_Str"" + Formats.STRING.formatValue(myprod[3]));
  m_id=myprod[0];
  m_jRef.setText(Formats.STRING.formatValue(myprod[1]));
  m_jCode.setText(Formats.STRING.formatValue(myprod[2]));
  m_jName.setText(Formats.STRING.formatValue(myprod[3]));
  m_jComment.setSelected(((Boolean)myprod[4]).booleanValue());
  m_jScale.setSelected(((Boolean)myprod[5]).booleanValue());
  m_jPriceBuy.setText(Formats.CURRENCY.formatValue(myprod[6]));
  m_jPriceSell.setText(Formats.CURRENCY.formatValue(myprod[7]));
  m_CategoryModel.setSelectedKey(myprod[8]);
  taxcatmodel.setSelectedKey(myprod[9]);
  m_jImage.setImage((BufferedImage)myprod[10]);
  m_jstockcost.setText(Formats.CURRENCY.formatValue(myprod[11]));
  m_jstockvolume.setText(Formats.DOUBLE.formatValue(myprod[12]));
  m_jInCatalog.setSelected(((Boolean)myprod[13]).booleanValue());
  m_jCatalogOrder.setText(Formats.INT.formatValue(myprod[14]));
  txtAttributes.setText(Formats.BYTEA.formatValue(myprod[15]));
  txtAttributes.setCaretPosition(0);
  reportlock=false;
  m_jRef.setEnabled(true);
  m_jCode.setEnabled(true);
  m_jName.setEnabled(true);
  m_jComment.setEnabled(true);
  m_jScale.setEnabled(true);
  m_jCategory.setEnabled(true);
  m_jTax.setEnabled(true);
  m_jPriceBuy.setEnabled(true);
  m_jPriceSell.setEnabled(true);
  m_jPriceSellTax.setEnabled(true);
  m_jmargin.setEnabled(true);
  m_jImage.setEnabled(true);
  m_jstockcost.setEnabled(true);
  m_jstockvolume.setEnabled(true);
  m_jInCatalog.setEnabled(true);
  m_jCatalogOrder.setEnabled(m_jInCatalog.isSelected());
  txtAttributes.setEnabled(true);
  calculateMargin();
  calculatePriceSellTax();
}","public void writeValueEdit(Object value){
  reportlock=true;
  Object[] myprod=(Object[])value;
  m_jTitle.setText(Formats.STRING.formatValue(myprod[1]) + ""String_Node_Str"" + Formats.STRING.formatValue(myprod[3]));
  m_id=myprod[0];
  m_jRef.setText(Formats.STRING.formatValue(myprod[1]));
  m_jCode.setText(Formats.STRING.formatValue(myprod[2]));
  m_jName.setText(Formats.STRING.formatValue(myprod[3]));
  m_jComment.setSelected(((Boolean)myprod[4]).booleanValue());
  m_jScale.setSelected(((Boolean)myprod[5]).booleanValue());
  m_jPriceBuy.setText(Formats.CURRENCY.formatValue(myprod[6]));
  setPriceSell(myprod[7]);
  m_CategoryModel.setSelectedKey(myprod[8]);
  taxcatmodel.setSelectedKey(myprod[9]);
  m_jImage.setImage((BufferedImage)myprod[10]);
  m_jstockcost.setText(Formats.CURRENCY.formatValue(myprod[11]));
  m_jstockvolume.setText(Formats.DOUBLE.formatValue(myprod[12]));
  m_jInCatalog.setSelected(((Boolean)myprod[13]).booleanValue());
  m_jCatalogOrder.setText(Formats.INT.formatValue(myprod[14]));
  txtAttributes.setText(Formats.BYTEA.formatValue(myprod[15]));
  txtAttributes.setCaretPosition(0);
  reportlock=false;
  m_jRef.setEnabled(true);
  m_jCode.setEnabled(true);
  m_jName.setEnabled(true);
  m_jComment.setEnabled(true);
  m_jScale.setEnabled(true);
  m_jCategory.setEnabled(true);
  m_jTax.setEnabled(true);
  m_jPriceBuy.setEnabled(true);
  m_jPriceSell.setEnabled(true);
  m_jPriceSellTax.setEnabled(true);
  m_jmargin.setEnabled(true);
  m_jImage.setEnabled(true);
  m_jstockcost.setEnabled(true);
  m_jstockvolume.setEnabled(true);
  m_jInCatalog.setEnabled(true);
  m_jCatalogOrder.setEnabled(m_jInCatalog.isSelected());
  txtAttributes.setEnabled(true);
  calculateMargin();
  calculatePriceSellTax();
}",0.9875
6144,"public void writeValueEOF(){
  reportlock=true;
  m_jTitle.setText(AppLocal.getIntString(""String_Node_Str""));
  m_id=null;
  m_jRef.setText(null);
  m_jCode.setText(null);
  m_jName.setText(null);
  m_jComment.setSelected(false);
  m_jScale.setSelected(false);
  m_CategoryModel.setSelectedKey(null);
  taxcatmodel.setSelectedKey(null);
  m_jPriceBuy.setText(null);
  m_jPriceSell.setText(null);
  m_jImage.setImage(null);
  m_jstockcost.setText(null);
  m_jstockvolume.setText(null);
  m_jInCatalog.setSelected(false);
  m_jCatalogOrder.setText(null);
  txtAttributes.setText(null);
  reportlock=false;
  m_jRef.setEnabled(false);
  m_jCode.setEnabled(false);
  m_jName.setEnabled(false);
  m_jComment.setEnabled(false);
  m_jScale.setEnabled(false);
  m_jCategory.setEnabled(false);
  m_jTax.setEnabled(false);
  m_jPriceBuy.setEnabled(false);
  m_jPriceSell.setEnabled(false);
  m_jPriceSellTax.setEnabled(false);
  m_jmargin.setEnabled(false);
  m_jImage.setEnabled(false);
  m_jstockcost.setEnabled(false);
  m_jstockvolume.setEnabled(false);
  m_jInCatalog.setEnabled(false);
  m_jCatalogOrder.setEnabled(false);
  txtAttributes.setEnabled(false);
  calculateMargin();
  calculatePriceSellTax();
}","public void writeValueEOF(){
  reportlock=true;
  m_jTitle.setText(AppLocal.getIntString(""String_Node_Str""));
  m_id=null;
  m_jRef.setText(null);
  m_jCode.setText(null);
  m_jName.setText(null);
  m_jComment.setSelected(false);
  m_jScale.setSelected(false);
  m_CategoryModel.setSelectedKey(null);
  taxcatmodel.setSelectedKey(null);
  m_jPriceBuy.setText(null);
  setPriceSell(null);
  m_jImage.setImage(null);
  m_jstockcost.setText(null);
  m_jstockvolume.setText(null);
  m_jInCatalog.setSelected(false);
  m_jCatalogOrder.setText(null);
  txtAttributes.setText(null);
  reportlock=false;
  m_jRef.setEnabled(false);
  m_jCode.setEnabled(false);
  m_jName.setEnabled(false);
  m_jComment.setEnabled(false);
  m_jScale.setEnabled(false);
  m_jCategory.setEnabled(false);
  m_jTax.setEnabled(false);
  m_jPriceBuy.setEnabled(false);
  m_jPriceSell.setEnabled(false);
  m_jPriceSellTax.setEnabled(false);
  m_jmargin.setEnabled(false);
  m_jImage.setEnabled(false);
  m_jstockcost.setEnabled(false);
  m_jstockvolume.setEnabled(false);
  m_jInCatalog.setEnabled(false);
  m_jCatalogOrder.setEnabled(false);
  txtAttributes.setEnabled(false);
  calculateMargin();
  calculatePriceSellTax();
}",0.994161801501251
6145,"private void calculateMargin(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceBuy=readCurrency(m_jPriceBuy.getText());
    Double dPriceSell=readCurrency(m_jPriceSell.getText());
    if (dPriceBuy == null || dPriceSell == null) {
      m_jmargin.setText(null);
    }
 else {
      m_jmargin.setText(Formats.PERCENT.formatValue(new Double(dPriceSell.doubleValue() / dPriceBuy.doubleValue() - 1.0)));
    }
    reportlock=false;
  }
}","private void calculateMargin(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceBuy=readCurrency(m_jPriceBuy.getText());
    Double dPriceSell=(Double)pricesell;
    if (dPriceBuy == null || dPriceSell == null) {
      m_jmargin.setText(null);
    }
 else {
      m_jmargin.setText(Formats.PERCENT.formatValue(new Double(dPriceSell.doubleValue() / dPriceBuy.doubleValue() - 1.0)));
    }
    reportlock=false;
  }
}",0.939150401836969
6146,"private void calculatePriceSellfromMargin(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceBuy=readCurrency(m_jPriceBuy.getText());
    Double dMargin=readPercent(m_jmargin.getText());
    if (dMargin == null || dPriceBuy == null) {
      m_jPriceSell.setText(null);
    }
 else {
      m_jPriceSell.setText(Formats.CURRENCY.formatValue(new Double(dPriceBuy.doubleValue() * (1.0 + dMargin.doubleValue()))));
    }
    reportlock=false;
  }
}","private void calculatePriceSellfromMargin(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceBuy=readCurrency(m_jPriceBuy.getText());
    Double dMargin=readPercent(m_jmargin.getText());
    if (dMargin == null || dPriceBuy == null) {
      setPriceSell(null);
    }
 else {
      setPriceSell(new Double(dPriceBuy.doubleValue() * (1.0 + dMargin.doubleValue())));
    }
    reportlock=false;
  }
}",0.877030162412993
6147,"public Object createValue() throws BasicException {
  Object[] myprod=new Object[16];
  myprod[0]=m_id == null ? UUID.randomUUID().toString() : m_id;
  myprod[1]=m_jRef.getText();
  myprod[2]=m_jCode.getText();
  myprod[3]=m_jName.getText();
  myprod[4]=Boolean.valueOf(m_jComment.isSelected());
  myprod[5]=Boolean.valueOf(m_jScale.isSelected());
  myprod[6]=Formats.CURRENCY.parseValue(m_jPriceBuy.getText());
  myprod[7]=Formats.CURRENCY.parseValue(m_jPriceSell.getText());
  myprod[8]=m_CategoryModel.getSelectedKey();
  myprod[9]=taxcatmodel.getSelectedKey();
  myprod[10]=m_jImage.getImage();
  myprod[11]=Formats.CURRENCY.parseValue(m_jstockcost.getText());
  myprod[12]=Formats.DOUBLE.parseValue(m_jstockvolume.getText());
  myprod[13]=Boolean.valueOf(m_jInCatalog.isSelected());
  myprod[14]=Formats.INT.parseValue(m_jCatalogOrder.getText());
  myprod[15]=Formats.BYTEA.parseValue(txtAttributes.getText());
  return myprod;
}","public Object createValue() throws BasicException {
  Object[] myprod=new Object[16];
  myprod[0]=m_id == null ? UUID.randomUUID().toString() : m_id;
  myprod[1]=m_jRef.getText();
  myprod[2]=m_jCode.getText();
  myprod[3]=m_jName.getText();
  myprod[4]=Boolean.valueOf(m_jComment.isSelected());
  myprod[5]=Boolean.valueOf(m_jScale.isSelected());
  myprod[6]=Formats.CURRENCY.parseValue(m_jPriceBuy.getText());
  myprod[7]=pricesell;
  myprod[8]=m_CategoryModel.getSelectedKey();
  myprod[9]=taxcatmodel.getSelectedKey();
  myprod[10]=m_jImage.getImage();
  myprod[11]=Formats.CURRENCY.parseValue(m_jstockcost.getText());
  myprod[12]=Formats.DOUBLE.parseValue(m_jstockvolume.getText());
  myprod[13]=Boolean.valueOf(m_jInCatalog.isSelected());
  myprod[14]=Formats.INT.parseValue(m_jCatalogOrder.getText());
  myprod[15]=Formats.BYTEA.parseValue(txtAttributes.getText());
  return myprod;
}",0.8170865279299014
6148,"public void writeValueDelete(Object value){
  reportlock=true;
  Object[] myprod=(Object[])value;
  m_jTitle.setText(Formats.STRING.formatValue(myprod[1]) + ""String_Node_Str"" + Formats.STRING.formatValue(myprod[3])+ ""String_Node_Str""+ AppLocal.getIntString(""String_Node_Str""));
  m_id=myprod[0];
  m_jRef.setText(Formats.STRING.formatValue(myprod[1]));
  m_jCode.setText(Formats.STRING.formatValue(myprod[2]));
  m_jName.setText(Formats.STRING.formatValue(myprod[3]));
  m_jComment.setSelected(((Boolean)myprod[4]).booleanValue());
  m_jScale.setSelected(((Boolean)myprod[5]).booleanValue());
  m_jPriceBuy.setText(Formats.CURRENCY.formatValue(myprod[6]));
  m_jPriceSell.setText(Formats.CURRENCY.formatValue(myprod[7]));
  m_CategoryModel.setSelectedKey(myprod[8]);
  taxcatmodel.setSelectedKey(myprod[9]);
  m_jImage.setImage((BufferedImage)myprod[10]);
  m_jstockcost.setText(Formats.CURRENCY.formatValue(myprod[11]));
  m_jstockvolume.setText(Formats.DOUBLE.formatValue(myprod[12]));
  m_jInCatalog.setSelected(((Boolean)myprod[13]).booleanValue());
  m_jCatalogOrder.setText(Formats.INT.formatValue(myprod[14]));
  txtAttributes.setText(Formats.BYTEA.formatValue(myprod[15]));
  txtAttributes.setCaretPosition(0);
  reportlock=false;
  m_jRef.setEnabled(false);
  m_jCode.setEnabled(false);
  m_jName.setEnabled(false);
  m_jComment.setEnabled(false);
  m_jScale.setEnabled(false);
  m_jCategory.setEnabled(false);
  m_jTax.setEnabled(false);
  m_jPriceBuy.setEnabled(false);
  m_jPriceSell.setEnabled(false);
  m_jPriceSellTax.setEnabled(false);
  m_jmargin.setEnabled(false);
  m_jImage.setEnabled(false);
  m_jstockcost.setEnabled(false);
  m_jstockvolume.setEnabled(false);
  m_jInCatalog.setEnabled(false);
  m_jCatalogOrder.setEnabled(false);
  txtAttributes.setEnabled(false);
  calculateMargin();
  calculatePriceSellTax();
}","public void writeValueDelete(Object value){
  reportlock=true;
  Object[] myprod=(Object[])value;
  m_jTitle.setText(Formats.STRING.formatValue(myprod[1]) + ""String_Node_Str"" + Formats.STRING.formatValue(myprod[3])+ ""String_Node_Str""+ AppLocal.getIntString(""String_Node_Str""));
  m_id=myprod[0];
  m_jRef.setText(Formats.STRING.formatValue(myprod[1]));
  m_jCode.setText(Formats.STRING.formatValue(myprod[2]));
  m_jName.setText(Formats.STRING.formatValue(myprod[3]));
  m_jComment.setSelected(((Boolean)myprod[4]).booleanValue());
  m_jScale.setSelected(((Boolean)myprod[5]).booleanValue());
  m_jPriceBuy.setText(Formats.CURRENCY.formatValue(myprod[6]));
  setPriceSell(myprod[7]);
  m_CategoryModel.setSelectedKey(myprod[8]);
  taxcatmodel.setSelectedKey(myprod[9]);
  m_jImage.setImage((BufferedImage)myprod[10]);
  m_jstockcost.setText(Formats.CURRENCY.formatValue(myprod[11]));
  m_jstockvolume.setText(Formats.DOUBLE.formatValue(myprod[12]));
  m_jInCatalog.setSelected(((Boolean)myprod[13]).booleanValue());
  m_jCatalogOrder.setText(Formats.INT.formatValue(myprod[14]));
  txtAttributes.setText(Formats.BYTEA.formatValue(myprod[15]));
  txtAttributes.setCaretPosition(0);
  reportlock=false;
  m_jRef.setEnabled(false);
  m_jCode.setEnabled(false);
  m_jName.setEnabled(false);
  m_jComment.setEnabled(false);
  m_jScale.setEnabled(false);
  m_jCategory.setEnabled(false);
  m_jTax.setEnabled(false);
  m_jPriceBuy.setEnabled(false);
  m_jPriceSell.setEnabled(false);
  m_jPriceSellTax.setEnabled(false);
  m_jmargin.setEnabled(false);
  m_jImage.setEnabled(false);
  m_jstockcost.setEnabled(false);
  m_jstockvolume.setEnabled(false);
  m_jInCatalog.setEnabled(false);
  m_jCatalogOrder.setEnabled(false);
  txtAttributes.setEnabled(false);
  calculateMargin();
  calculatePriceSellTax();
}",0.987905442550852
6149,"@Override public void clearVisor(){
  display.write(new byte[]{0x10,0x00});
  display.write(trans.transString(DeviceTicket.getWhiteString(20)));
  display.write(new byte[]{0x10,014});
  display.write(trans.transString(DeviceTicket.getWhiteString(20)));
  display.flush();
}","@Override public void clearVisor(){
  display.write(new byte[]{0x10,0x00});
  display.write(trans.transString(DeviceTicket.getWhiteString(20)));
  display.write(new byte[]{0x10,0x14});
  display.write(trans.transString(DeviceTicket.getWhiteString(20)));
  display.flush();
}",0.9981718464351006
6150,"public void actionPerformed(ActionEvent e){
  double tendered;
  try {
    tendered=m_jTendered.getValue();
  }
 catch (  BasicException eB) {
    tendered=0.0;
  }
  m_jTendered.setValue(tendered + amount);
  printState();
}","public void actionPerformed(ActionEvent e){
  double tendered;
  try {
    tendered=m_jTendered.getValue();
  }
 catch (  BasicException eB) {
    tendered=0.0;
  }
  m_jTendered.setValue(RoundUtils.round(tendered + amount));
  printState();
}",0.9615384615384616
6151,"public Object createValue() throws BasicException {
  Object[] payment=new Object[6];
  payment[0]=m_sId == null ? UUID.randomUUID().toString() : m_sId;
  payment[1]=m_App.getActiveCashIndex();
  payment[2]=datenew == null ? new Date() : datenew;
  payment[3]=m_sPaymentId == null ? UUID.randomUUID().toString() : m_sPaymentId;
  payment[4]=m_ReasonModel.getSelectedKey();
  PaymentReason reason=(PaymentReason)m_ReasonModel.getSelectedItem();
  Double dtotal=(Double)Formats.DOUBLE.parseValue(m_jtotal.getText());
  payment[5]=reason == null ? dtotal : reason.addSignum(dtotal);
  return payment;
}","public Object createValue() throws BasicException {
  Object[] payment=new Object[6];
  payment[0]=m_sId == null ? UUID.randomUUID().toString() : m_sId;
  payment[1]=m_App.getActiveCashIndex();
  payment[2]=datenew == null ? new Date() : datenew;
  payment[3]=m_sPaymentId == null ? UUID.randomUUID().toString() : m_sPaymentId;
  payment[4]=m_ReasonModel.getSelectedKey();
  PaymentReason reason=(PaymentReason)m_ReasonModel.getSelectedItem();
  Double dtotal=(Double)Formats.CURRENCY.parseValue(m_jtotal.getText());
  payment[5]=reason == null ? dtotal : reason.addSignum(dtotal);
  return payment;
}",0.99
6152,"public String toString(){
  return m_sText;
}","@Override public String toString(){
  return m_sText;
}",0.9
6153,"public TicketLineInfo copyTicketLine(){
  TicketLineInfo l=new TicketLineInfo();
  m_sTicket=null;
  m_iLine=-1;
  l.m_dMultiply=m_dMultiply;
  l.m_dPrice=m_dPrice;
  l.tax=tax;
  l.attributes=attributes;
  l.product=product.copyTicketProduct();
  return l;
}","public TicketLineInfo copyTicketLine(){
  TicketLineInfo l=new TicketLineInfo();
  l.m_dMultiply=m_dMultiply;
  l.m_dPrice=m_dPrice;
  l.tax=tax;
  l.attributes=attributes;
  l.product=product.copyTicketProduct();
  return l;
}",0.934156378600823
6154,"public void syncCustomersBefore() throws BasicException {
  new StaticSentence(s,""String_Node_Str"").exec();
}",public abstract void syncCustomersBefore() throws BasicException ;,0.6514285714285715
6155,"public void syncCustomer(final CustomerInfoExt customer) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      if (new PreparedSentence(s,""String_Node_Str"",new SerializerWrite(){
        public void writeValues(        DataWrite dp,        Object obj) throws BasicException {
          CustomerInfoExt c=(CustomerInfoExt)obj;
          dp.setString(1,c.getName());
          dp.setString(2,c.getAddress());
          dp.setString(3,c.getId());
        }
      }
).exec(customer) == 0) {
        new PreparedSentence(s,""String_Node_Str"",new SerializerWrite(){
          public void writeValues(          DataWrite dp,          Object obj) throws BasicException {
            CustomerInfoExt c=(CustomerInfoExt)obj;
            dp.setString(1,c.getId());
            dp.setString(2,c.getName());
            dp.setString(3,c.getAddress());
          }
        }
).exec(customer);
      }
      return null;
    }
  }
;
  t.execute();
}",public abstract void syncCustomer(final CustomerInfoExt customer) throws BasicException ;,0.1471941122355105
6156,"private static void initOldClasses(){
  m_oldclasses=new HashMap<String,String>();
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
}","private static void initOldClasses(){
  m_oldclasses=new HashMap<String,String>();
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
}",0.8389830508474576
6157,"public final SentenceList getCustomerList(){
  return new StaticSentence(s,new QBFBuilder(""String_Node_Str"",new String[]{""String_Node_Str""}),new SerializerWriteBasic(new Datas[]{Datas.OBJECT,Datas.STRING}),new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new CustomerInfo(dr.getString(1),dr.getString(2),dr.getString(3));
    }
  }
);
}","public SentenceList getCustomerList(){
  return new StaticSentence(s,new QBFBuilder(""String_Node_Str"",new String[]{""String_Node_Str""}),new SerializerWriteBasic(new Datas[]{Datas.OBJECT,Datas.STRING}),new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new CustomerInfo(dr.getString(1),dr.getString(2),dr.getString(3));
    }
  }
);
}",0.9922879177377892
6158,"public void removeActionListener(ActionListener l){
  listeners.add(ActionListener.class,l);
}","public void removeActionListener(ActionListener l){
  listeners.remove(ActionListener.class,l);
}",0.9528795811518324
6159,"/** 
 * @param args
 */
public static void main(String[] args){
  OCache oc=new OCache();
  OCache oc2=new OCache();
  int i, j;
  com.jopdesign.io.SysDevice sys=com.jopdesign.io.IOFactory.getFactory().getSysDevice();
  sys.wd=1;
  s=15;
  oc.a=1;
  i=oc.a;
  j=oc.a;
  int ref=Native.toInt(oc);
  i=Native.getField(ref,0);
  i=oc.a;
  sys.wd=0;
  oc2.a=3;
  i=oc.a;
  i=oc2.a;
  j=oc.a;
  j=oc2.a;
  sys.wd=1;
  BenchLift bl=new BenchLift();
  sys.wd=0;
  bl.perform(10);
  sys.wd=1;
}","/** 
 * @param args
 */
public static void main(String[] args){
  OCache oc=new OCache();
  OCache oc2=new OCache();
  int i, j;
  com.jopdesign.io.SysDevice sys=com.jopdesign.io.IOFactory.getFactory().getSysDevice();
  sys.wd=1;
  Basic btest=new Basic();
  sys.wd=0;
  boolean result=btest.test();
  sys.wd=1;
  System.out.println(result);
}",0.571773220747889
6160,"private int processClass(ClassInfo classInfo){
  AppInfo appInfo=AppInfo.getSingleton();
  int cnt=0;
  int size=classInfo.getConstantPoolSize();
  for (int i=0; i < size; i++) {
    ConstantInfo constantInfo=classInfo.getConstantInfo(i);
    if (constantInfo == null) {
      continue;
    }
    ClassRef ref=constantInfo.getClassRef();
    if (ref == null) {
      continue;
    }
    ClassInfo cls=ref.getClassInfo();
    if (cls == null) {
      cls=appInfo.loadClass(ref.getClassName());
      if (cls != null) {
        newClasses.add(cls);
        cnt++;
      }
    }
    if (cls != null) {
      enqueue(cls);
    }
  }
  return cnt;
}","private int processClass(ClassInfo classInfo){
  AppInfo appInfo=AppInfo.getSingleton();
  int cnt=0;
  int size=classInfo.getConstantPoolSize();
  for (int i=0; i < size; i++) {
    ConstantInfo constantInfo=classInfo.getConstantInfo(i);
    if (constantInfo == null) {
      continue;
    }
    ClassRef ref=constantInfo.getClassRef();
    if (ref == null) {
      continue;
    }
    String className;
    if (ref.isArray()) {
      Type baseType=((ArrayType)ref.getType()).getBasicType();
      if (baseType instanceof ObjectType) {
        className=((ObjectType)baseType).getClassName();
      }
 else {
        continue;
      }
    }
 else {
      className=ref.getClassName();
    }
    ClassInfo cls;
    if (appInfo.hasClassInfo(className)) {
      cls=appInfo.getClassInfo(className);
    }
 else {
      cls=appInfo.loadClass(className);
      if (cls != null) {
        newClasses.add(cls);
        cnt++;
      }
    }
    if (cls != null) {
      enqueue(cls);
    }
  }
  return cnt;
}",0.7083839611178615
6161,"public ClassRef(String className,boolean anInterface){
  this.className=className;
  this.anInterface=anInterface ? Ternary.TRUE : Ternary.FALSE;
}","public ClassRef(String className,boolean anInterface){
  this.className=className;
  this.anInterface=anInterface ? Ternary.TRUE : Ternary.FALSE;
  arrayClass=className.startsWith(""String_Node_Str"");
}",0.8448275862068966
6162,"public ClassInfo getClassInfo(){
  if (classInfo == null) {
    classInfo=AppInfo.getSingleton().getClassInfo(className);
  }
  return classInfo;
}","public ClassInfo getClassInfo(){
  if (classInfo == null && !arrayClass) {
    classInfo=AppInfo.getSingleton().getClassInfo(className);
  }
  return classInfo;
}",0.9514563106796116
6163,"public ObjectType getType(){
  return new ObjectType(getClassName());
}","public ReferenceType getType(){
  if (arrayClass) {
    int dim=className.lastIndexOf('[') + 1;
    return new ArrayType(Type.getType(className.substring(dim)),dim);
  }
  return new ObjectType(getClassName());
}",0.254416961130742
6164,"@Override public ObjectType getType(){
  return getValue().getType();
}","@Override public ReferenceType getType(){
  return getValue().getType();
}",0.9241379310344828
6165,"@Override public ObjectType getType(){
  return getClassRef().getType();
}","@Override public Type getType(){
  return getValue().getType();
}",0.8920863309352518
6166,public abstract ClassRef getClassRef();,"/** 
 * Get a reference to the class this constant refers to if it is a class-, method- or field-constant.
 * @return the referenced class or null if no class is referenced by this constant type.
 */
public abstract ClassRef getClassRef();",0.2805755395683453
6167,"@Override public ObjectType getType(){
  return getClassRef().getType();
}","@Override public Type getType(){
  return getValue().getDescriptor().getType();
}",0.8
6168,"public Ternary isInterfaceMethod(){
  return classRef.isInterface();
}","public Ternary isInterfaceMethod(){
  if (methodInfo != null) {
    return Ternary.valueOf(methodInfo.getClassInfo().isInterface());
  }
  return classRef.isInterface();
}",0.5809128630705395
6169,"public MethodRef getMethodRef(Signature signature,boolean isInterfaceMethod){
  ClassInfo cls=getClassInfo(signature.getClassName());
  if (cls != null) {
    if (cls.isInterface() != isInterfaceMethod) {
      throw new ClassFormatException(""String_Node_Str"" + cls.getClassName() + ""String_Node_Str"");
    }
    MethodInfo method=cls.getMethodInfo(signature);
    if (method == null) {
      return new MethodRef(cls.getClassRef(),signature.getMemberName(),signature.getMemberDescriptor());
    }
 else {
      return method.getMethodRef();
    }
  }
  return new MethodRef(new ClassRef(signature.getClassName(),isInterfaceMethod),signature.getMemberName(),signature.getMemberDescriptor());
}","public MethodRef getMethodRef(Signature signature,boolean isInterfaceMethod){
  ClassInfo cls=classes.get(signature.getClassName());
  if (cls != null) {
    if (cls.isInterface() != isInterfaceMethod) {
      throw new ClassFormatException(""String_Node_Str"" + cls.getClassName() + ""String_Node_Str"");
    }
    MethodInfo method=cls.getMethodInfo(signature);
    if (method == null) {
      return new MethodRef(cls.getClassRef(),signature.getMemberName(),signature.getMemberDescriptor());
    }
 else {
      return method.getMethodRef();
    }
  }
  return new MethodRef(new ClassRef(signature.getClassName(),isInterfaceMethod),signature.getMemberName(),signature.getMemberDescriptor());
}",0.983393501805054
6170,"public FieldRef getFieldRef(Signature signature){
  ClassInfo cls=getClassInfo(signature.getClassName());
  if (cls != null) {
    FieldInfo field=cls.getFieldInfo(signature.getMemberName());
    if (field == null) {
      return new FieldRef(cls.getClassRef(),signature.getMemberName(),signature.getMemberDescriptor().getType());
    }
 else {
      return field.getFieldRef();
    }
  }
  return new FieldRef(new ClassRef(signature.getClassName()),signature.getMemberName(),signature.getMemberDescriptor().getType());
}","public FieldRef getFieldRef(Signature signature){
  ClassInfo cls=classes.get(signature.getClassName());
  if (cls != null) {
    FieldInfo field=cls.getFieldInfo(signature.getMemberName());
    if (field == null) {
      return new FieldRef(cls.getClassRef(),signature.getMemberName(),signature.getMemberDescriptor().getType());
    }
 else {
      return field.getFieldRef();
    }
  }
  return new FieldRef(new ClassRef(signature.getClassName()),signature.getMemberName(),signature.getMemberDescriptor().getType());
}",0.97790585975024
6171,"public ClassRef getClassRef(String className,boolean isInterface){
  ClassInfo cls=getClassInfo(className);
  if (cls != null) {
    if (cls.isInterface() != isInterface) {
      throw new ClassFormatException(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    return cls.getClassRef();
  }
  return new ClassRef(className,isInterface);
}","public ClassRef getClassRef(String className,boolean isInterface){
  ClassInfo cls=classes.get(className);
  if (cls != null) {
    if (cls.isInterface() != isInterface) {
      throw new ClassFormatException(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    return cls.getClassRef();
  }
  return new ClassRef(className,isInterface);
}",0.9670014347202296
6172,"public void setupAppInfo(String[] args,boolean loadTransitiveHull){
  if (args.length == 0 || ""String_Node_Str"".equals(args[0])) {
    System.out.println(""String_Node_Str"");
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  appInfo.setClassPath(new ClassPath(config.getOption(Config.CLASSPATH)));
  String[] natives=Config.splitStringList(config.getOption(Config.NATIVE_CLASSES));
  for (  String n : natives) {
    appInfo.addNative(n.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  if (config.hasOption(Config.LIBRARY_CLASSES)) {
    String[] libs=Config.splitStringList(config.getOption(Config.LIBRARY_CLASSES));
    for (    String lib : libs) {
      appInfo.addLibrary(lib.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (config.hasOption(Config.IGNORE_CLASSES)) {
    String[] ignore=Config.splitStringList(config.getOption(Config.IGNORE_CLASSES));
    for (    String cls : ignore) {
      appInfo.addLibrary(cls.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (config.hasOption(Config.EXCLUDE_LIBRARIES)) {
    appInfo.setLoadLibraries(!config.getOption(Config.EXCLUDE_LIBRARIES));
  }
  if (config.hasOption(Config.LOAD_NATIVES)) {
    appInfo.setLoadNatives(config.getOption(Config.LOAD_NATIVES));
  }
  String[] roots=Config.splitStringList(config.getOption(Config.ROOTS));
  for (  String root : roots) {
    ClassInfo rootInfo=appInfo.loadClass(root.replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (rootInfo == null) {
      System.out.println(""String_Node_Str"" + root + ""String_Node_Str"");
      System.exit(4);
    }
    appInfo.addRoot(rootInfo);
  }
  try {
    MethodInfo main=getMainMethod(args[0].replaceAll(""String_Node_Str"",""String_Node_Str""));
    appInfo.setMainMethod(main);
  }
 catch (  Config.BadConfigurationException e) {
    System.out.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  for (int i=1; i < args.length; i++) {
    ClassInfo clsInfo=appInfo.loadClass(args[i].replaceAll(""String_Node_Str"",""String_Node_Str""));
    appInfo.addRoot(clsInfo);
  }
  if (loadTransitiveHull) {
    new AppLoader().loadAll();
    appInfo.reloadClassHierarchy();
  }
}","public void setupAppInfo(String[] args,boolean loadTransitiveHull){
  if (args.length == 0 || ""String_Node_Str"".equals(args[0])) {
    System.out.println(""String_Node_Str"");
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  appInfo.setClassPath(new ClassPath(config.getOption(Config.CLASSPATH)));
  appInfo.setExitOnMissingClass(!config.getOption(Config.VERBOSE));
  String[] natives=Config.splitStringList(config.getOption(Config.NATIVE_CLASSES));
  for (  String n : natives) {
    appInfo.addNative(n.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  if (config.hasOption(Config.LIBRARY_CLASSES)) {
    String[] libs=Config.splitStringList(config.getOption(Config.LIBRARY_CLASSES));
    for (    String lib : libs) {
      appInfo.addLibrary(lib.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (config.hasOption(Config.IGNORE_CLASSES)) {
    String[] ignore=Config.splitStringList(config.getOption(Config.IGNORE_CLASSES));
    for (    String cls : ignore) {
      appInfo.addLibrary(cls.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (config.hasOption(Config.EXCLUDE_LIBRARIES)) {
    appInfo.setLoadLibraries(!config.getOption(Config.EXCLUDE_LIBRARIES));
  }
  if (config.hasOption(Config.LOAD_NATIVES)) {
    appInfo.setLoadNatives(config.getOption(Config.LOAD_NATIVES));
  }
  String[] roots=Config.splitStringList(config.getOption(Config.ROOTS));
  for (  String root : roots) {
    ClassInfo rootInfo=appInfo.loadClass(root.replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (rootInfo == null) {
      System.out.println(""String_Node_Str"" + root + ""String_Node_Str"");
      System.exit(4);
    }
    appInfo.addRoot(rootInfo);
  }
  try {
    MethodInfo main=getMainMethod(args[0].replaceAll(""String_Node_Str"",""String_Node_Str""));
    appInfo.setMainMethod(main);
  }
 catch (  Config.BadConfigurationException e) {
    System.out.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  for (int i=1; i < args.length; i++) {
    ClassInfo clsInfo=appInfo.loadClass(args[i].replaceAll(""String_Node_Str"",""String_Node_Str""));
    appInfo.addRoot(clsInfo);
  }
  if (loadTransitiveHull) {
    new AppLoader().loadAll();
    appInfo.reloadClassHierarchy();
  }
}",0.9857142857142858
6173,"public MethodInfo renameMethod(Signature signature,String newName){
  return null;
}","public MethodInfo renameMethod(String memberSignature,String newName){
  MethodInfo method=methods.remove(memberSignature);
  if (method == null) {
    return null;
  }
  method.getMethodGen().setName(newName);
  methods.put(method.getMemberSignature(),method);
  return method;
}",0.3351648351648351
6174,"public MethodInfo copyMethod(Signature signature,String newName){
  return null;
}","public MethodInfo copyMethod(String memberSignature,String newName){
  MethodInfo method=methods.get(memberSignature);
  if (method == null) {
    return null;
  }
  method.compileCodeRep();
  MethodGen methodGen=new MethodGen(method.getMethod(),getClassName(),cpg);
  methodGen.setName(newName);
  MethodInfo newMethod=new MethodInfo(this,methodGen);
  methods.put(newMethod.getMemberSignature(),newMethod);
  return newMethod;
}",0.23046875
6175,"public FieldInfo renameField(String name,String newName){
  return null;
}","public FieldInfo renameField(String name,String newName){
  FieldInfo field=fields.remove(name);
  if (field == null) {
    return null;
  }
  field.getFieldGen().setName(newName);
  fields.put(newName,field);
  return field;
}",0.4053156146179402
6176,"/** 
 * Check if this class is either an extension or an implementation of the given class or interface.
 * @param classInfo the super class to check.
 * @return true if this class is is a subtype of the given class.
 */
public boolean isSubtypeOf(ClassInfo classInfo){
  if (!classInfo.isInterface()) {
    return classInfo.isSuperclassOf(this);
  }
  Set<ClassInfo> supers=getAllSuperClasses();
  return supers.contains(classInfo);
}","/** 
 * Check if this class is either an extension or an implementation of the given class or interface.
 * @param classInfo the super class to check.
 * @return true if this class is is a subtype of the given class.
 */
public boolean isSubtypeOf(ClassInfo classInfo){
  if (!classInfo.isInterface()) {
    return classInfo.isSuperclassOf(this);
  }
  Set<ClassInfo> supers=getAncestors();
  return supers.contains(classInfo);
}",0.976851851851852
6177,"public FieldInfo copyField(String name,String newName){
  return null;
}","public FieldInfo copyField(String name,String newName){
  FieldInfo field=fields.get(name);
  if (field == null) {
    return null;
  }
  FieldGen fieldGen=new FieldGen(field.getField(),cpg);
  fieldGen.setName(newName);
  FieldInfo newField=new FieldInfo(this,fieldGen);
  fields.put(newName,newField);
  return newField;
}",0.2979797979797979
6178,"/** 
 * Check if the given class is a subclass of this class.
 * @param classInfo the possible subclass of this class.
 * @return true if the given class is this class or a superclass of this class.
 */
public boolean isSuperclassOf(ClassInfo classInfo){
  ClassInfo cls=classInfo;
  while (cls != null) {
    if (this.equals(cls)) {
      return true;
    }
    cls=cls.getSuperClassInfo();
  }
  return false;
}","/** 
 * Check if the given class is the same as this class or a subclass of this class.
 * @param classInfo the possible subclass of this class.
 * @return true if the given class is this class or a superclass of this class.
 */
public boolean isSuperclassOf(ClassInfo classInfo){
  ClassInfo cls=classInfo;
  while (cls != null) {
    if (this.equals(cls)) {
      return true;
    }
    cls=cls.getSuperClassInfo();
  }
  return false;
}",0.9694835680751174
6179,"public ConstantInfo getConstantInfo(int i){
  if (i < 0 || i >= cpg.getSize()) {
    return null;
  }
  Constant c=cpg.getConstant(i);
  return ConstantInfo.createFromConstant(cpg.getConstantPool(),c);
}","public ConstantInfo getConstantInfo(int i){
  if (i < 0 || i >= cpg.getSize()) {
    return null;
  }
  Constant c=cpg.getConstant(i);
  if (c == null) {
    return null;
  }
  return ConstantInfo.createFromConstant(cpg.getConstantPool(),c);
}",0.9103139013452914
6180,"/** 
 * Check if the given class is an extension of this class, i.e. if this is a class, check if the given class is a subclass, if this is an interface, check if the given class is an interface and if this is an extension of the given interface.
 * @param classInfo the class to check.
 * @return true if the class is an extension of this class.
 */
public boolean isExtensionOf(ClassInfo classInfo){
  if (!isInterface()) {
    return isSuperclassOf(classInfo);
  }
  if (!classInfo.isInterface()) {
    return false;
  }
  Set<ClassInfo> interfaces=classInfo.getAllSuperClasses();
  return interfaces.contains(this);
}","/** 
 * Check if the given class is an extension of this class, i.e. if this is a class, check if the given class is a subclass, if this is an interface, check if the given class is an interface and if this is an extension of the given interface.
 * @param classInfo the class to check.
 * @return true if the class is an extension of this class.
 */
public boolean isExtensionOf(ClassInfo classInfo){
  if (!isInterface()) {
    return isSuperclassOf(classInfo);
  }
  if (!classInfo.isInterface()) {
    return false;
  }
  Set<ClassInfo> interfaces=classInfo.getAncestors();
  return interfaces.contains(this);
}",0.9838187702265372
6181,"public MethodGen getMethodGen(){
  compileCodeRep();
  return new MethodGen(methodGen.getMethod(),methodGen.getClassName(),methodGen.getConstantPool());
}","/** 
 * Should only be used by ClassInfo.
 * @return the internal methodGen.                           
 */
protected MethodGen getMethodGen(){
  return methodGen;
}",0.3134796238244514
6182,"/** 
 * Setup the logger using configuration options. You may want to call   {@link #setReportLoggers(File,File)}first to define the report loggers.
 * @param config the config settings to use.
 */
public void setupLogger(Config config){
  boolean verbose=config.getOption(Config.VERBOSE);
  boolean debug=config.getOption(Config.DEBUG);
  ConsoleAppender defaultAppender;
  if (verbose) {
    defaultAppender=new ConsoleAppender(new PatternLayout(""String_Node_Str""),""String_Node_Str"");
  }
 else {
    defaultAppender=new ConsoleAppender(new ConsoleLayout(""String_Node_Str""),""String_Node_Str"");
  }
  defaultAppender.setName(""String_Node_Str"");
  if (debug) {
    defaultAppender.setThreshold(verbose ? Level.DEBUG : Level.INFO);
  }
 else {
    defaultAppender.setThreshold(Level.WARN);
  }
  Logger.getRootLogger().addAppender(defaultAppender);
  PropertyConfigurator.configure(config.getProperties());
}","/** 
 * Setup the logger using configuration options. You may want to call   {@link #setReportLoggers(File,File)}first to define the report loggers.
 * @param config the config settings to use.
 */
public void setupLogger(Config config){
  boolean verbose=config.getOption(Config.VERBOSE);
  boolean debug=config.getOption(Config.DEBUG);
  boolean quiet=config.getOption(Config.QUIET);
  ConsoleAppender defaultAppender;
  if (verbose) {
    defaultAppender=new ConsoleAppender(new PatternLayout(""String_Node_Str""),""String_Node_Str"");
  }
 else {
    defaultAppender=new ConsoleAppender(new ConsoleLayout(""String_Node_Str""),""String_Node_Str"");
  }
  defaultAppender.setName(""String_Node_Str"");
  Level defaultLevel=Level.INFO;
  if (debug) {
    defaultLevel=Level.DEBUG;
  }
 else   if (quiet) {
    defaultLevel=Level.WARN;
  }
  defaultAppender.setThreshold(defaultLevel);
  Logger.getRootLogger().addAppender(defaultAppender);
  Logger.getRootLogger().setLevel(defaultLevel);
  PropertyConfigurator.configure(config.getProperties());
}",0.8612538540596094
6183,"private void processQueue(){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
  while (!queue.isEmpty()) {
    ClassInfo next=queue.remove(0);
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"" + next.getClassName());
    }
    int found=processClass(next);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + found + ""String_Node_Str""+ next.getClassName());
    }
  }
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + newClasses.size() + ""String_Node_Str"");
  }
}","private void processQueue(){
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"");
  }
  while (!queue.isEmpty()) {
    ClassInfo next=queue.remove(0);
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"" + next.getClassName());
    }
    int found=processClass(next);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + found + ""String_Node_Str""+ next.getClassName());
    }
  }
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + newClasses.size() + ""String_Node_Str"");
  }
}",0.9781420765027322
6184,"private int processClass(ClassInfo classInfo){
  AppInfo appInfo=AppInfo.getSingleton();
  int cnt=0;
  int size=classInfo.getConstantPoolSize();
  for (int i=0; i < size; i++) {
    ClassRef ref=classInfo.getConstantInfo(i).getClassRef();
    if (ref == null) {
      continue;
    }
    ClassInfo cls=ref.getClassInfo();
    if (cls == null) {
      cls=appInfo.loadClass(ref.getClassName());
      if (cls != null) {
        newClasses.add(cls);
        cnt++;
      }
    }
    if (cls != null) {
      enqueue(cls);
    }
  }
  return cnt;
}","private int processClass(ClassInfo classInfo){
  AppInfo appInfo=AppInfo.getSingleton();
  int cnt=0;
  int size=classInfo.getConstantPoolSize();
  for (int i=0; i < size; i++) {
    ConstantInfo constantInfo=classInfo.getConstantInfo(i);
    if (constantInfo == null) {
      continue;
    }
    ClassRef ref=constantInfo.getClassRef();
    if (ref == null) {
      continue;
    }
    ClassInfo cls=ref.getClassInfo();
    if (cls == null) {
      cls=appInfo.loadClass(ref.getClassName());
      if (cls != null) {
        newClasses.add(cls);
        cnt++;
      }
    }
    if (cls != null) {
      enqueue(cls);
    }
  }
  return cnt;
}",0.8722689075630252
6185,"/** 
 * Create a new constantInfo from a BCEL constant. If the constantpool contains invalid data, a   {@link JavaClassFormatError} is thrown.
 * @param cp the constantpool used to resolve the index references.
 * @param constant the BCEL constant to convert
 * @return a new ConstantInfo containing the constant value.
 */
public static ConstantInfo createFromConstant(ConstantPool cp,Constant constant){
  Signature sig;
  MethodRef methodRef;
  ConstantNameAndType nRef;
  AppInfo appInfo=AppInfo.getSingleton();
  byte tag=constant.getTag();
switch (tag) {
case Constants.CONSTANT_Class:
    ClassRef classRef=appInfo.getClassRef(((ConstantClass)constant).getBytes(cp));
  return new ConstantClassInfo(classRef);
case Constants.CONSTANT_Fieldref:
ConstantFieldref fRef=(ConstantFieldref)constant;
nRef=(ConstantNameAndType)cp.getConstant(fRef.getNameAndTypeIndex());
sig=new Signature(fRef.getClass(cp),nRef.getName(cp),Descriptor.parse(nRef.getSignature(cp)));
FieldRef fieldRef=appInfo.getFieldRef(sig);
return new ConstantFieldInfo(fieldRef);
case Constants.CONSTANT_Methodref:
ConstantInterfaceMethodref mRef=(ConstantInterfaceMethodref)constant;
nRef=(ConstantNameAndType)cp.getConstant(mRef.getNameAndTypeIndex());
sig=new Signature(mRef.getClass(cp),nRef.getName(cp),Descriptor.parse(nRef.getSignature(cp)));
methodRef=appInfo.getMethodRef(sig,false);
return new ConstantMethodInfo(methodRef);
case Constants.CONSTANT_InterfaceMethodref:
ConstantInterfaceMethodref imRef=(ConstantInterfaceMethodref)constant;
nRef=(ConstantNameAndType)cp.getConstant(imRef.getNameAndTypeIndex());
sig=new Signature(imRef.getClass(cp),nRef.getName(cp),Descriptor.parse(nRef.getSignature(cp)));
methodRef=appInfo.getMethodRef(sig,true);
return new ConstantMethodInfo(methodRef);
case Constants.CONSTANT_String:
return new ConstantStringInfo(((ConstantString)constant).getBytes(cp),false);
case Constants.CONSTANT_Integer:
return new ConstantIntegerInfo(((ConstantInteger)constant).getBytes());
case Constants.CONSTANT_Float:
return new ConstantFloatInfo(((ConstantFloat)constant).getBytes());
case Constants.CONSTANT_Long:
return new ConstantLongInfo(((ConstantLong)constant).getBytes());
case Constants.CONSTANT_Double:
return new ConstantDoubleInfo(((ConstantDouble)constant).getBytes());
case Constants.CONSTANT_NameAndType:
String name=((ConstantNameAndType)constant).getName(cp);
String signature=((ConstantNameAndType)constant).getSignature(cp);
return new ConstantNameAndTypeInfo(new Signature(name,Descriptor.parse(signature)));
case Constants.CONSTANT_Utf8:
return new ConstantStringInfo(((ConstantUtf8)constant).getBytes(),true);
default :
throw new JavaClassFormatError(""String_Node_Str"" + tag);
}
}","/** 
 * Create a new constantInfo from a BCEL constant. If the constantpool contains invalid data, a   {@link JavaClassFormatError} is thrown.
 * @param cp the constantpool used to resolve the index references.
 * @param constant the BCEL constant to convert
 * @return a new ConstantInfo containing the constant value.
 */
public static ConstantInfo createFromConstant(ConstantPool cp,Constant constant){
  Signature sig;
  MethodRef methodRef;
  ConstantNameAndType nRef;
  AppInfo appInfo=AppInfo.getSingleton();
  byte tag=constant.getTag();
switch (tag) {
case Constants.CONSTANT_Class:
    ClassRef classRef=appInfo.getClassRef(((ConstantClass)constant).getBytes(cp));
  return new ConstantClassInfo(classRef);
case Constants.CONSTANT_Fieldref:
ConstantFieldref fRef=(ConstantFieldref)constant;
nRef=(ConstantNameAndType)cp.getConstant(fRef.getNameAndTypeIndex());
sig=new Signature(fRef.getClass(cp),nRef.getName(cp),Descriptor.parse(nRef.getSignature(cp)));
FieldRef fieldRef=appInfo.getFieldRef(sig);
return new ConstantFieldInfo(fieldRef);
case Constants.CONSTANT_Methodref:
ConstantMethodref mRef=(ConstantMethodref)constant;
nRef=(ConstantNameAndType)cp.getConstant(mRef.getNameAndTypeIndex());
sig=new Signature(mRef.getClass(cp),nRef.getName(cp),Descriptor.parse(nRef.getSignature(cp)));
methodRef=appInfo.getMethodRef(sig,false);
return new ConstantMethodInfo(methodRef);
case Constants.CONSTANT_InterfaceMethodref:
ConstantInterfaceMethodref imRef=(ConstantInterfaceMethodref)constant;
nRef=(ConstantNameAndType)cp.getConstant(imRef.getNameAndTypeIndex());
sig=new Signature(imRef.getClass(cp),nRef.getName(cp),Descriptor.parse(nRef.getSignature(cp)));
methodRef=appInfo.getMethodRef(sig,true);
return new ConstantMethodInfo(methodRef);
case Constants.CONSTANT_String:
return new ConstantStringInfo(((ConstantString)constant).getBytes(cp),false);
case Constants.CONSTANT_Integer:
return new ConstantIntegerInfo(((ConstantInteger)constant).getBytes());
case Constants.CONSTANT_Float:
return new ConstantFloatInfo(((ConstantFloat)constant).getBytes());
case Constants.CONSTANT_Long:
return new ConstantLongInfo(((ConstantLong)constant).getBytes());
case Constants.CONSTANT_Double:
return new ConstantDoubleInfo(((ConstantDouble)constant).getBytes());
case Constants.CONSTANT_NameAndType:
String name=((ConstantNameAndType)constant).getName(cp);
String signature=((ConstantNameAndType)constant).getSignature(cp);
return new ConstantNameAndTypeInfo(new Signature(name,Descriptor.parse(signature)));
case Constants.CONSTANT_Utf8:
return new ConstantStringInfo(((ConstantUtf8)constant).getBytes(),true);
default :
throw new JavaClassFormatError(""String_Node_Str"" + tag);
}
}",0.9966580022279984
6186,"public static void main(String[] args){
  JCopter jcopter=new JCopter();
  AppSetup setup=new AppSetup(true);
  setup.setUsageInfo(""String_Node_Str"",""String_Node_Str"");
  setup.addStandardOptions(true,true);
  setup.addPackageOptions(true);
  setup.addWriteOptions(true);
  setup.registerModule(""String_Node_Str"",jcopter);
  String[] rest=setup.setupConfig(args);
  setup.setupLogger();
  setup.setupAppInfo(rest,true);
  jcopter.run(setup);
  setup.writeClasses();
}","public static void main(String[] args){
  JCopter jcopter=new JCopter();
  AppSetup setup=new AppSetup(true);
  setup.setUsageInfo(""String_Node_Str"",""String_Node_Str"");
  setup.addStandardOptions(true,true);
  setup.addPackageOptions(true);
  setup.addWriteOptions(true);
  setup.registerModule(""String_Node_Str"",jcopter);
  String[] rest=setup.setupConfig(args,""String_Node_Str"");
  setup.setupLogger();
  setup.setupAppInfo(rest,true);
  jcopter.run(setup);
  setup.writeClasses();
}",0.98109243697479
6187,"private void handleClassLoadFailure(String message,Exception cause){
  if (exitOnMissingClass) {
    System.out.println(message);
    System.exit(4);
  }
 else {
    throw new MissingClassError(message,cause);
  }
}","private void handleClassLoadFailure(String message,Exception cause){
  if (exitOnMissingClass) {
    logger.error(message,cause);
    System.exit(4);
  }
 else {
    throw new MissingClassError(message,cause);
  }
}",0.5627906976744186
6188,"public void printVersion(){
  if (versionInfo != null && !""String_Node_Str"".equals(versionInfo)) {
    System.out.println(versionInfo);
  }
  for (  String name : modules.keySet()) {
    versionInfo+=name + ""String_Node_Str"" + modules.get(name).getModuleVersion();
  }
}","public void printVersion(){
  if (versionInfo != null && !""String_Node_Str"".equals(versionInfo)) {
    System.out.println(versionInfo);
  }
  for (  String name : tools.keySet()) {
    System.out.println(name + ""String_Node_Str"" + tools.get(name).getToolVersion());
  }
}",0.6728280961182994
6189,"public void setupAppInfo(String[] args,boolean loadTransitiveHull){
  if (args.length == 0 || ""String_Node_Str"".equals(args[0])) {
    System.out.println(""String_Node_Str"");
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  appInfo.setClassPath(new ClassPath(config.getOption(Config.CLASSPATH)));
  appInfo.setExitOnMissingClass(!config.getOption(Config.VERBOSE));
  String[] natives=Config.splitStringList(config.getOption(Config.NATIVE_CLASSES));
  for (  String n : natives) {
    appInfo.addNative(n.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  if (config.hasOption(Config.LIBRARY_CLASSES)) {
    String[] libs=Config.splitStringList(config.getOption(Config.LIBRARY_CLASSES));
    for (    String lib : libs) {
      appInfo.addLibrary(lib.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (config.hasOption(Config.IGNORE_CLASSES)) {
    String[] ignore=Config.splitStringList(config.getOption(Config.IGNORE_CLASSES));
    for (    String cls : ignore) {
      appInfo.addLibrary(cls.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (config.hasOption(Config.EXCLUDE_LIBRARIES)) {
    appInfo.setLoadLibraries(!config.getOption(Config.EXCLUDE_LIBRARIES));
  }
  if (config.hasOption(Config.LOAD_NATIVES)) {
    appInfo.setLoadNatives(config.getOption(Config.LOAD_NATIVES));
  }
  String[] roots=Config.splitStringList(config.getOption(Config.ROOTS));
  for (  String root : roots) {
    ClassInfo rootInfo=appInfo.loadClass(root.replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (rootInfo == null) {
      System.out.println(""String_Node_Str"" + root + ""String_Node_Str"");
      System.exit(4);
    }
    appInfo.addRoot(rootInfo);
  }
  try {
    MethodInfo main=getMainMethod(args[0].replaceAll(""String_Node_Str"",""String_Node_Str""));
    appInfo.setMainMethod(main);
  }
 catch (  Config.BadConfigurationException e) {
    System.out.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  for (int i=1; i < args.length; i++) {
    ClassInfo clsInfo=appInfo.loadClass(args[i].replaceAll(""String_Node_Str"",""String_Node_Str""));
    appInfo.addRoot(clsInfo);
  }
  if (loadTransitiveHull) {
    new AppLoader().loadAll();
    appInfo.reloadClassHierarchy();
  }
}","public void setupAppInfo(String[] args,boolean loadTransitiveHull){
  if (args.length == 0 || ""String_Node_Str"".equals(args[0])) {
    System.err.println(""String_Node_Str"");
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.err.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  appInfo.setClassPath(new ClassPath(config.getOption(Config.CLASSPATH)));
  appInfo.setExitOnMissingClass(!config.getOption(Config.VERBOSE));
  String[] natives=Config.splitStringList(config.getOption(Config.NATIVE_CLASSES));
  for (  String n : natives) {
    appInfo.addNative(n.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  if (config.hasOption(Config.LIBRARY_CLASSES)) {
    String[] libs=Config.splitStringList(config.getOption(Config.LIBRARY_CLASSES));
    for (    String lib : libs) {
      appInfo.addLibrary(lib.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (config.hasOption(Config.IGNORE_CLASSES)) {
    String[] ignore=Config.splitStringList(config.getOption(Config.IGNORE_CLASSES));
    for (    String cls : ignore) {
      appInfo.addLibrary(cls.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (config.hasOption(Config.EXCLUDE_LIBRARIES)) {
    appInfo.setLoadLibraries(!config.getOption(Config.EXCLUDE_LIBRARIES));
  }
  if (config.hasOption(Config.LOAD_NATIVES)) {
    appInfo.setLoadNatives(config.getOption(Config.LOAD_NATIVES));
  }
  String[] roots=Config.splitStringList(config.getOption(Config.ROOTS));
  for (  String root : roots) {
    ClassInfo rootInfo=appInfo.loadClass(root.replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (rootInfo == null) {
      System.err.println(""String_Node_Str"" + root + ""String_Node_Str"");
      System.exit(4);
    }
    appInfo.addRoot(rootInfo);
  }
  try {
    MethodInfo main=getMainMethod(args[0].replaceAll(""String_Node_Str"",""String_Node_Str""));
    appInfo.setMainMethod(main);
  }
 catch (  Config.BadConfigurationException e) {
    System.err.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.err.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  for (int i=1; i < args.length; i++) {
    ClassInfo clsInfo=appInfo.loadClass(args[i].replaceAll(""String_Node_Str"",""String_Node_Str""));
    appInfo.addRoot(clsInfo);
  }
  if (loadTransitiveHull) {
    new AppLoader().loadAll();
    appInfo.reloadClassHierarchy();
  }
}",0.9937862468931234
6190,"public void setUsageInfo(String prgmName,String description,String optionSyntax){
  this.prgmName=prgmName;
  usageDescription=description;
  this.optionSyntax=optionSyntax;
}","public void setUsageInfo(String programName,String description,String optionSyntax){
  this.programName=programName;
  usageDescription=description;
  this.optionSyntax=optionSyntax;
}",0.9749303621169916
6191,"public void printUsage(){
  String optionDesc;
  if (optionSyntax != null) {
    optionDesc=""String_Node_Str"" + optionSyntax;
  }
 else {
    optionDesc=""String_Node_Str"";
    if (config.getOptions().availableCommands().size() > 0) {
      optionDesc+=""String_Node_Str"";
    }
    if (handleAppInfoInit) {
      optionDesc+=""String_Node_Str"";
    }
  }
  System.out.print(""String_Node_Str"" + prgmName);
  System.out.println(optionDesc);
  System.out.println();
  if (usageDescription != null && !""String_Node_Str"".equals(usageDescription)) {
    System.out.println(usageDescription);
    System.out.println();
  }
  System.out.println(""String_Node_Str"");
  for (  Option<?> option : config.getOptions().availableOptions()) {
    System.out.println(option.toString(config.getDefaultIndent(),config.getOptions()));
  }
  System.out.println();
}","public void printUsage(){
  String optionDesc;
  if (optionSyntax != null) {
    optionDesc=""String_Node_Str"" + optionSyntax;
  }
 else {
    optionDesc=""String_Node_Str"";
    if (config.getOptions().availableCommands().size() > 0) {
      optionDesc+=""String_Node_Str"";
    }
    if (handleAppInfoInit) {
      optionDesc+=""String_Node_Str"";
    }
  }
  System.out.print(""String_Node_Str"" + (programName != null ? programName : ""String_Node_Str""));
  System.out.println(optionDesc);
  System.out.println();
  if (usageDescription != null && !""String_Node_Str"".equals(usageDescription)) {
    System.out.println(usageDescription);
    System.out.println();
  }
  System.out.println(""String_Node_Str"");
  for (  Option<?> option : config.getOptions().availableOptions()) {
    System.out.println(option.toString(config.getDefaultIndent(),config.getOptions()));
  }
  System.out.println();
  if (loadSystemProps && configFilename != null) {
    System.out.println(""String_Node_Str"" + configFilename + ""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
 else   if (configFilename != null) {
    System.out.println(""String_Node_Str"" + configFilename + ""String_Node_Str"");
  }
 else   if (loadSystemProps) {
    System.out.println(""String_Node_Str"");
  }
}",0.7908961593172119
6192,"public AppSetup(Properties defaultProps,boolean loadSystemProps){
  Properties def;
  if (loadSystemProps) {
    def=new Properties(defaultProps);
    def.putAll(System.getProperties());
  }
 else {
    def=defaultProps;
  }
  config=new Config(def);
  appInfo=AppInfo.getSingleton();
  logConfig=new LogConfig();
  modules=new HashMap<String,Module>();
}","/** 
 * Initialize a new AppSetup and set the given default properties (note that tools can add their own default config).
 * @param defaultProps defaults or the config.
 * @param loadSystemProps if true, add all JVM system properties to the default properties.  
 */
public AppSetup(Properties defaultProps,boolean loadSystemProps){
  this.loadSystemProps=loadSystemProps;
  Properties def=new Properties();
  if (defaultProps != null) {
    def.putAll(defaultProps);
  }
  if (loadSystemProps) {
    def.putAll(System.getProperties());
  }
  config=new Config(def);
  appInfo=AppInfo.getSingleton();
  logConfig=new LogConfig();
  tools=new HashMap<String,JopTool>();
}",0.4717348927875243
6193,"/** 
 * Write the AppInfo classes to the directory specified by the outDir option.
 * @param outDir the option for the classfiles output directory.
 */
public void writeClasses(Option<String> outDir){
  try {
    ClassWriter writer=new ClassWriter();
    writer.setup(config.getOptions());
    writer.write(config.getOption(outDir));
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    System.exit(5);
  }
}","/** 
 * Write the AppInfo classes to the directory specified by the outDir option.
 * @param outDir the option for the classfiles output directory.
 */
public void writeClasses(Option<String> outDir){
  try {
    ClassWriter writer=new ClassWriter();
    writer.setup(config.getOptions());
    writer.write(config.getOption(outDir));
  }
 catch (  IOException e) {
    ClassWriter.logger.error(""String_Node_Str"" + e.getMessage(),e);
    System.exit(5);
  }
}",0.8458149779735683
6194,"/** 
 * Load the config file, parse and check options, and if handleApInfoInit has been set, also initialize AppInfo.
 * @param args cmdline arguments to parse
 * @param configFile filename of an optional user configuration file, will be tried to be loaded beforearguments are parsed.
 * @return arguments not consumed.
 */
public String[] setupConfig(String[] args,String configFile){
  File file=findConfigFile(configFile);
  if (file != null && file.exists()) {
    try {
      InputStream is=new BufferedInputStream(new FileInputStream(file));
      config.addProperties(is);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + configFile + ""String_Node_Str""+ e.getMessage());
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"" + file + ""String_Node_Str""+ e.getMessage());
      System.exit(3);
    }
  }
  String[] rest=null;
  try {
    rest=config.parseArguments(args);
    config.checkOptions();
  }
 catch (  Config.BadConfigurationException e) {
    System.out.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  if (config.getOption(Config.SHOW_HELP) && prgmName != null) {
    printUsage();
    System.exit(0);
  }
  if (config.getOption(Config.SHOW_VERSION) && versionInfo != null) {
    printVersion();
    System.exit(0);
  }
  if (config.getOption(Config.SHOW_CONFIG)) {
    config.printConfiguration(config.getDefaultIndent());
    System.exit(0);
  }
  try {
    for (    Module module : modules.values()) {
      module.onSetupConfig(this);
    }
  }
 catch (  Config.BadConfigurationException e) {
    System.out.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  return rest;
}","/** 
 * Load the config file, parse and check options, and if handleApInfoInit has been set, also initialize AppInfo.
 * @param args cmdline arguments to parse
 * @return arguments not consumed.
 */
public String[] setupConfig(String[] args){
  if (configFilename != null) {
    File file=findConfigFile(configFilename);
    if (file != null && file.exists()) {
      try {
        InputStream is=new BufferedInputStream(new FileInputStream(file));
        config.addProperties(is);
      }
 catch (      FileNotFoundException e) {
        System.err.println(""String_Node_Str"" + configFilename + ""String_Node_Str""+ e.getMessage());
      }
catch (      IOException e) {
        System.err.println(""String_Node_Str"" + file + ""String_Node_Str""+ e.getMessage());
        System.exit(3);
      }
    }
  }
  String[] rest=null;
  try {
    rest=config.parseArguments(args);
    config.checkOptions();
  }
 catch (  Config.BadConfigurationException e) {
    System.err.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.err.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  if (config.getOption(Config.SHOW_HELP)) {
    printUsage();
    System.exit(0);
  }
  if (config.getOption(Config.SHOW_VERSION)) {
    printVersion();
    System.exit(0);
  }
  if (config.getOption(Config.SHOW_CONFIG)) {
    config.printConfiguration(config.getDefaultIndent());
    System.exit(0);
  }
  try {
    for (    JopTool jopTool : tools.values()) {
      jopTool.onSetupConfig(this);
    }
  }
 catch (  Config.BadConfigurationException e) {
    System.err.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.err.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  return rest;
}",0.8830744071954211
6195,"public void setupAppInfo(String[] args,boolean loadTransitiveHull){
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  appInfo.setClassPath(new ClassPath(config.getOption(Config.CLASSPATH)));
  String[] natives=Config.splitStringList(config.getOption(Config.NATIVE_CLASSES));
  for (  String n : natives) {
    appInfo.addNative(n.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  if (config.hasOption(Config.LIBRARY_CLASSES)) {
    String[] libs=Config.splitStringList(config.getOption(Config.LIBRARY_CLASSES));
    for (    String lib : libs) {
      appInfo.addLibrary(lib.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (config.hasOption(Config.IGNORE_CLASSES)) {
    String[] ignore=Config.splitStringList(config.getOption(Config.IGNORE_CLASSES));
    for (    String cls : ignore) {
      appInfo.addLibrary(cls.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (config.hasOption(Config.EXCLUDE_LIBRARIES)) {
    appInfo.setLoadLibraries(!config.getOption(Config.EXCLUDE_LIBRARIES));
  }
  if (config.hasOption(Config.LOAD_NATIVES)) {
    appInfo.setLoadNatives(config.getOption(Config.LOAD_NATIVES));
  }
  String[] roots=Config.splitStringList(config.getOption(Config.ROOTS));
  for (  String root : roots) {
    ClassInfo rootInfo=appInfo.loadClass(root.replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (rootInfo == null) {
      System.out.println(""String_Node_Str"" + root + ""String_Node_Str"");
      System.exit(4);
    }
    appInfo.addRoot(rootInfo);
  }
  try {
    MethodInfo main=getMainMethod(args[0].replaceAll(""String_Node_Str"",""String_Node_Str""));
    appInfo.setMainMethod(main);
  }
 catch (  Config.BadConfigurationException e) {
    System.out.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  for (int i=1; i < args.length; i++) {
    ClassInfo clsInfo=appInfo.loadClass(args[i].replaceAll(""String_Node_Str"",""String_Node_Str""));
    appInfo.addRoot(clsInfo);
  }
  if (loadTransitiveHull) {
    new AppLoader().loadAll();
  }
}","public void setupAppInfo(String[] args,boolean loadTransitiveHull){
  if (args.length == 0 || ""String_Node_Str"".equals(args[0])) {
    System.out.println(""String_Node_Str"");
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  appInfo.setClassPath(new ClassPath(config.getOption(Config.CLASSPATH)));
  String[] natives=Config.splitStringList(config.getOption(Config.NATIVE_CLASSES));
  for (  String n : natives) {
    appInfo.addNative(n.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  if (config.hasOption(Config.LIBRARY_CLASSES)) {
    String[] libs=Config.splitStringList(config.getOption(Config.LIBRARY_CLASSES));
    for (    String lib : libs) {
      appInfo.addLibrary(lib.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (config.hasOption(Config.IGNORE_CLASSES)) {
    String[] ignore=Config.splitStringList(config.getOption(Config.IGNORE_CLASSES));
    for (    String cls : ignore) {
      appInfo.addLibrary(cls.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (config.hasOption(Config.EXCLUDE_LIBRARIES)) {
    appInfo.setLoadLibraries(!config.getOption(Config.EXCLUDE_LIBRARIES));
  }
  if (config.hasOption(Config.LOAD_NATIVES)) {
    appInfo.setLoadNatives(config.getOption(Config.LOAD_NATIVES));
  }
  String[] roots=Config.splitStringList(config.getOption(Config.ROOTS));
  for (  String root : roots) {
    ClassInfo rootInfo=appInfo.loadClass(root.replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (rootInfo == null) {
      System.out.println(""String_Node_Str"" + root + ""String_Node_Str"");
      System.exit(4);
    }
    appInfo.addRoot(rootInfo);
  }
  try {
    MethodInfo main=getMainMethod(args[0].replaceAll(""String_Node_Str"",""String_Node_Str""));
    appInfo.setMainMethod(main);
  }
 catch (  Config.BadConfigurationException e) {
    System.out.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  for (int i=1; i < args.length; i++) {
    ClassInfo clsInfo=appInfo.loadClass(args[i].replaceAll(""String_Node_Str"",""String_Node_Str""));
    appInfo.addRoot(clsInfo);
  }
  if (loadTransitiveHull) {
    new AppLoader().loadAll();
  }
}",0.9919266855771328
6196,"public void printUsage(){
  String optionDesc;
  if (optionSyntax != null) {
    optionDesc=""String_Node_Str"" + optionSyntax;
  }
 else {
    optionDesc=""String_Node_Str"";
    if (config.getOptions().availableCommands().size() > 0) {
      optionDesc+=""String_Node_Str"";
    }
    if (handleAppInfoInit) {
      optionDesc+=""String_Node_Str"";
    }
  }
  System.out.print(""String_Node_Str"" + prgmName);
  System.out.println(optionDesc);
  System.out.println();
  if (usageDescription != null && !""String_Node_Str"".equals(usageDescription)) {
    System.out.println(usageDescription);
    System.out.println();
  }
  System.out.println(""String_Node_Str"");
  for (  Option<?> option : config.getOptions().availableOptions()) {
    System.out.println(option.toString(20));
  }
}","public void printUsage(){
  String optionDesc;
  if (optionSyntax != null) {
    optionDesc=""String_Node_Str"" + optionSyntax;
  }
 else {
    optionDesc=""String_Node_Str"";
    if (config.getOptions().availableCommands().size() > 0) {
      optionDesc+=""String_Node_Str"";
    }
    if (handleAppInfoInit) {
      optionDesc+=""String_Node_Str"";
    }
  }
  System.out.print(""String_Node_Str"" + prgmName);
  System.out.println(optionDesc);
  System.out.println();
  if (usageDescription != null && !""String_Node_Str"".equals(usageDescription)) {
    System.out.println(usageDescription);
    System.out.println();
  }
  System.out.println(""String_Node_Str"");
  for (  Option<?> option : config.getOptions().availableOptions()) {
    System.out.println(option.toString(config.getDefaultIndent()));
  }
}",0.98283534647171
6197,"/** 
 * Setup the logger. You may want to call   {@link #setupConfig(String[])} first toload commandline options.
 * @see com.jopdesign.common.logger.LogConfig#setupLogger(Config)
 */
public void setupLogger(){
  logConfig.setupLogger(config);
}","/** 
 * Setup the logger. You may want to call   {@link #setupConfig(String[])} first toload commandline options.
 * @see LogConfig#setupLogger(Config)
 */
public void setupLogger(){
  logConfig.setupLogger(config);
}",0.6277056277056277
6198,"/** 
 * Load the config file, parse and check options, and if handleApInfoInit has been set, also initialize AppInfo.
 * @param args cmdline arguments to parse
 * @param configFile filename of an optional user configuration file, will be tried to be loaded beforearguments are parsed.
 * @return arguments not consumed.
 */
public String[] setupConfig(String[] args,String configFile){
  File file=findConfigFile(configFile);
  if (file != null && file.exists()) {
    try {
      InputStream is=new BufferedInputStream(new FileInputStream(file));
      config.addProperties(is);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + configFile + ""String_Node_Str""+ e.getMessage());
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"" + file + ""String_Node_Str""+ e.getMessage());
      System.exit(3);
    }
  }
  String[] rest=null;
  try {
    rest=config.parseArguments(args);
    config.checkOptions();
  }
 catch (  Config.BadConfigurationException e) {
    System.out.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  if (config.getOption(Config.SHOW_HELP) && prgmName != null) {
    printUsage();
    System.exit(0);
  }
  if (config.getOption(Config.SHOW_VERSION) && versionInfo != null) {
    printVersion();
    System.exit(0);
  }
  try {
    for (    Module module : modules.values()) {
      module.onSetupConfig(this);
    }
  }
 catch (  Config.BadConfigurationException e) {
    System.out.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  return rest;
}","/** 
 * Load the config file, parse and check options, and if handleApInfoInit has been set, also initialize AppInfo.
 * @param args cmdline arguments to parse
 * @param configFile filename of an optional user configuration file, will be tried to be loaded beforearguments are parsed.
 * @return arguments not consumed.
 */
public String[] setupConfig(String[] args,String configFile){
  File file=findConfigFile(configFile);
  if (file != null && file.exists()) {
    try {
      InputStream is=new BufferedInputStream(new FileInputStream(file));
      config.addProperties(is);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + configFile + ""String_Node_Str""+ e.getMessage());
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"" + file + ""String_Node_Str""+ e.getMessage());
      System.exit(3);
    }
  }
  String[] rest=null;
  try {
    rest=config.parseArguments(args);
    config.checkOptions();
  }
 catch (  Config.BadConfigurationException e) {
    System.out.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  if (config.getOption(Config.SHOW_HELP) && prgmName != null) {
    printUsage();
    System.exit(0);
  }
  if (config.getOption(Config.SHOW_VERSION) && versionInfo != null) {
    printVersion();
    System.exit(0);
  }
  if (config.getOption(Config.SHOW_CONFIG)) {
    config.printConfiguration(config.getDefaultIndent());
    System.exit(0);
  }
  try {
    for (    Module module : modules.values()) {
      module.onSetupConfig(this);
    }
  }
 catch (  Config.BadConfigurationException e) {
    System.out.println(e.getMessage());
    if (config.getOptions().containsOption(Config.SHOW_HELP)) {
      System.out.println(""String_Node_Str"");
    }
    System.exit(2);
  }
  return rest;
}",0.9649698960043788
6199,"@Override protected String getDefaultsText(){
  if (optional && !defaultValue) {
    return ""String_Node_Str"";
  }
  return super.getDefaultsText();
}","@Override protected String getDefaultsText(){
  if (optional && !defaultValue) {
    return skipChecks ? ""String_Node_Str"" : ""String_Node_Str"";
  }
  return super.getDefaultsText();
}",0.9009009009009008
6200,"/** 
 * Dump configuration of all set properties for debugging purposes. To print a list of all options with their values, use   {@link OptionGroup#dumpConfiguration(int)}.
 * @param indent indent used for keys
 * @return a dump of all options with their respective values.
 */
public String dumpConfiguration(int indent){
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<Object,Object> e : props.entrySet()) {
    sb.append(String.format(""String_Node_Str"" + indent + ""String_Node_Str"",""String_Node_Str"",e.getKey(),e.getValue() == null ? ""String_Node_Str"" : e.getValue()));
  }
  return sb.toString();
}","/** 
 * Dump configuration of all set properties for debugging purposes. To print a list of all options with their values, use   {@link #printConfiguration(int)}.
 * @see #printConfiguration(int)
 * @param indent indent used for keys
 * @return a dump of all options with their respective values.
 */
public String dumpConfiguration(int indent){
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  printConfig(new PrintStream(os),indent,new HashSet<String>());
  return os.toString();
}",0.5936651583710407
6201,"public String toString(int lAdjust){
  StringBuffer s=new StringBuffer(""String_Node_Str"");
  s.append(key);
  for (int i=s.length(); i <= lAdjust; i++) {
    s.append(' ');
  }
  s.append(' ');
  s.append(descrString());
  return s.toString();
}","public String toString(int lAdjust){
  StringBuffer s=new StringBuffer(""String_Node_Str"");
  if (shortKey != SHORT_NONE) {
    s.append('-');
    s.append(shortKey);
    s.append(""String_Node_Str"");
  }
 else {
    s.append(""String_Node_Str"");
  }
  s.append(key);
  for (int i=s.length(); i <= lAdjust; i++) {
    s.append(' ');
  }
  s.append(""String_Node_Str"");
  s.append(descrString());
  return s.toString();
}",0.7322239031770046
6202,"/** 
 * Consume all command line options and turn them into properties.<br/> <p>The arguments are processed as follows: If an argument is of the form ""-option"" or ""--option"", it is considered to be an option. If an argument is an option, the next argument is considered to be the parameter, unless the option is boolean and the next argument is missing or an option as well. We add the pair to our properties, consuming both arguments. </p><p> If an argument starts with @, the rest of it is considered as a property file name, which is then loaded and added to the configuration.  The first non-option or the argument string   {@code --} terminates the option list.</p>
 * @param args The argument list
 * @return An array of unconsumed arguments
 * @throws Config.BadConfigurationException if an argument is malformed.
 */
public String[] consumeOptions(String[] args) throws Config.BadConfigurationException {
  int i=0;
  while (i < args.length) {
    if (cmds.containsKey(args[i])) {
      config.setProperty(getConfigKey(CMD_KEY),args[i]);
      OptionGroup cmdGroup=cmds.get(args[i]);
      return cmdGroup.consumeOptions(Arrays.copyOfRange(args,i + 1,args.length));
    }
    if (args[i].startsWith(""String_Node_Str"")) {
      String filename=args[i].substring(1);
      try {
        InputStream is=new BufferedInputStream(new FileInputStream(filename));
        config.addProperties(is,prefix);
      }
 catch (      FileNotFoundException e) {
        throw new Config.BadConfigurationException(""String_Node_Str"" + filename + ""String_Node_Str"",e);
      }
catch (      IOException e) {
        throw new Config.BadConfigurationException(""String_Node_Str"" + filename + ""String_Node_Str""+ e.getMessage(),e);
      }
      i++;
      continue;
    }
    if (!args[i].startsWith(""String_Node_Str""))     break;
    if (""String_Node_Str"".equals(args[i]) || ""String_Node_Str"".equals(args[i])) {
      i++;
      break;
    }
    String key;
    if (args[i].charAt(1) == '-')     key=args[i].substring(2);
 else     key=args[i].substring(1);
    Option<?> spec=getOptionSpec(key);
    if (spec != null) {
      String val=null;
      if (i + 1 < args.length) {
        try {
          spec.parse(args[i + 1]);
          val=args[i + 1];
        }
 catch (        IllegalArgumentException ignored) {
        }
      }
      if (spec instanceof BoolOption && val == null) {
        val=""String_Node_Str"";
      }
 else       if (val == null) {
        throw new Config.BadConfigurationException(""String_Node_Str"" + spec);
      }
 else {
        i++;
      }
      config.setProperty(getConfigKey(spec),val);
    }
 else     if (spec == null) {
      if (key.startsWith(""String_Node_Str"")) {
        spec=getOptionSpec(key.substring(3));
        if (spec != null && spec instanceof BoolOption) {
          config.setProperty(getConfigKey(spec),""String_Node_Str"");
        }
      }
    }
    if (spec == null) {
      throw new Config.BadConfigurationException(""String_Node_Str"" + key + ""String_Node_Str""+ optionSet.keySet().toString()+ ""String_Node_Str"");
    }
    i++;
  }
  return Arrays.copyOfRange(args,i,args.length);
}","/** 
 * Consume all command line options and turn them into properties.<br/> <p>The arguments are processed as follows: If an argument is of the form ""-option"" or ""--option"", it is considered to be an option. If an argument is an option, the next argument is considered to be the parameter, unless the option is boolean and the next argument is missing or an option as well. We add the pair to our properties, consuming both arguments. </p><p> If an argument starts with @, the rest of it is considered as a property file name, which is then loaded and added to the configuration.  The first non-option or the argument string   {@code --} terminates the option list.</p>
 * @param args The argument list
 * @return An array of unconsumed arguments
 * @throws Config.BadConfigurationException if an argument is malformed.
 */
public String[] consumeOptions(String[] args) throws Config.BadConfigurationException {
  int i=0;
  while (i < args.length) {
    if (cmds.containsKey(args[i])) {
      config.setProperty(getConfigKey(CMD_KEY),args[i]);
      OptionGroup cmdGroup=cmds.get(args[i]);
      return cmdGroup.consumeOptions(Arrays.copyOfRange(args,i + 1,args.length));
    }
    if (args[i].startsWith(""String_Node_Str"")) {
      String filename=args[i].substring(1);
      try {
        InputStream is=new BufferedInputStream(new FileInputStream(filename));
        config.addProperties(is,prefix);
      }
 catch (      FileNotFoundException e) {
        throw new Config.BadConfigurationException(""String_Node_Str"" + filename + ""String_Node_Str"",e);
      }
catch (      IOException e) {
        throw new Config.BadConfigurationException(""String_Node_Str"" + filename + ""String_Node_Str""+ e.getMessage(),e);
      }
      i++;
      continue;
    }
    if (!args[i].startsWith(""String_Node_Str""))     break;
    if (""String_Node_Str"".equals(args[i]) || ""String_Node_Str"".equals(args[i])) {
      i++;
      break;
    }
    String key;
    if (args[i].charAt(1) == '-')     key=args[i].substring(2);
 else     key=args[i].substring(1);
    Option<?> spec=getOptionSpec(key);
    if (spec != null) {
      String val=null;
      if (i + 1 < args.length) {
        try {
          spec.parse(args[i + 1]);
          val=args[i + 1];
        }
 catch (        IllegalArgumentException ignored) {
        }
      }
      if (spec instanceof BoolOption && val == null) {
        val=""String_Node_Str"";
      }
 else       if (val == null) {
        throw new Config.BadConfigurationException(""String_Node_Str"" + spec);
      }
 else {
        i++;
      }
      config.setProperty(getConfigKey(spec),val);
    }
 else     if (spec == null) {
      if (key.startsWith(""String_Node_Str"")) {
        spec=getOptionSpec(key.substring(3));
        if (spec != null && spec instanceof BoolOption) {
          config.setProperty(getConfigKey(spec),""String_Node_Str"");
        }
      }
    }
    if (spec == null) {
      throw new Config.BadConfigurationException(""String_Node_Str"" + key);
    }
    i++;
  }
  return Arrays.copyOfRange(args,i,args.length);
}",0.9886768036234228
6203,"/** 
 * Rebuild the constantpool and remove all entries marked for removal by   {@link #removeConstant(int)}as well as all duplicate entries. <p>This also updates the indices of all references in the code of all methods of this class, therefore do not call this method while modifying the code.</p>
 * @see #removeConstant(int)
 * @return true if the constantpool has been changed
 */
public boolean cleanupConstantPool(){
  ConstantPoolGen newPool=new ConstantPoolGen();
  int[] idxMap=new int[cpg.getSize()];
  boolean changed=false;
  for (int i=0; i < idxMap.length; i++) {
    if (removeIndices.contains(i)) {
      idxMap[i]=-1;
      changed=true;
      continue;
    }
    idxMap[i]=newPool.addConstant(cpg.getConstant(i),cpg);
    if (idxMap[i] != i) {
      changed=true;
    }
  }
  if (!changed) {
    return false;
  }
  classGen.setConstantPool(newPool);
  return true;
}","/** 
 * Rebuild the constantpool and remove all entries marked for removal by   {@link #removeConstant(int)}as well as all duplicate entries. <p>This also updates the indices of all references in the code of all methods of this class, therefore do not call this method while modifying the code.</p>
 * @see #removeConstant(int)
 * @return true if the constantpool has been changed
 */
public boolean cleanupConstantPool(){
  if (removeIndices.isEmpty()) {
    return false;
  }
  ConstantPoolGen newPool=new ConstantPoolGen();
  int[] idxMap=new int[cpg.getSize()];
  for (int i=0; i < idxMap.length; i++) {
    if (removeIndices.contains(i)) {
      idxMap[i]=-1;
      continue;
    }
    Constant c=cpg.getConstant(i);
    if (c == null) {
      continue;
    }
    idxMap[i]=newPool.addConstant(c,cpg);
  }
  classGen.setConstantPool(newPool);
  return true;
}",0.7478559176672385
6204,"/** 
 * Setup the logger. You may want to call   {@link #setupConfig(String[])} first toload commandline options.
 * @see LogConfig#setupLogger(Config)
 */
public void setupLogger(){
  logConfig.setupLogger(config);
}","/** 
 * Setup the logger. You may want to call   {@link #setupConfig(String[])} first toload commandline options.
 * @see LogConfig#setupLogger(Config)
 * @param addReportLoggers if true, add html-report loggers writing to {@link Config#WRITE_PATH}.
 */
public void setupLogger(boolean addReportLoggers){
  logConfig.setupLogger(config);
  if (addReportLoggers) {
    String outDir=config.getOption(Config.WRITE_PATH) + File.separator;
    try {
      logConfig.setReportLoggers(new File(outDir + ""String_Node_Str""),new File(outDir + ""String_Node_Str""));
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e.getMessage());
      System.exit(4);
    }
  }
}",0.4811529933481153
6205,"/** 
 * Setup the logger using configuration options. You may want to call   {@link #setReportLoggers(File,File)}first to define the report loggers.
 * @param config the config settings to use.
 */
public void setupLogger(Config config){
  boolean verbose=config.getOption(Config.VERBOSE);
  boolean debug=config.getOption(Config.DEBUG);
  boolean quiet=config.getOption(Config.QUIET);
  ConsoleAppender defaultAppender;
  if (verbose) {
    defaultAppender=new ConsoleAppender(new PatternLayout(""String_Node_Str""),""String_Node_Str"");
  }
 else {
    defaultAppender=new ConsoleAppender(new ConsoleLayout(""String_Node_Str""),""String_Node_Str"");
  }
  defaultAppender.setName(""String_Node_Str"");
  Level defaultLevel=Level.INFO;
  if (debug) {
    defaultLevel=Level.DEBUG;
  }
 else   if (quiet) {
    defaultLevel=Level.WARN;
  }
  defaultAppender.setThreshold(defaultLevel);
  Logger.getRootLogger().addAppender(defaultAppender);
  Logger.getRootLogger().setLevel(defaultLevel);
  PropertyConfigurator.configure(config.getProperties());
}","/** 
 * Setup the logger using configuration options. You may want to call   {@link #setReportLoggers(File,File)}first to define the report loggers.
 * @param config the config settings to use.
 */
public void setupLogger(Config config){
  boolean verbose=config.getOption(Config.VERBOSE);
  boolean debug=config.getOption(Config.DEBUG);
  boolean quiet=config.getOption(Config.QUIET);
  ConsoleAppender defaultAppender;
  if (verbose) {
    defaultAppender=new ConsoleAppender(new PatternLayout(""String_Node_Str""),""String_Node_Str"");
  }
 else {
    defaultAppender=new ConsoleAppender(new ConsoleLayout(""String_Node_Str""),""String_Node_Str"");
  }
  defaultAppender.setName(""String_Node_Str"");
  Level defaultLevel=Level.INFO;
  if (debug) {
    defaultLevel=Level.DEBUG;
  }
 else   if (quiet) {
    defaultLevel=Level.WARN;
  }
  defaultAppender.setThreshold(defaultLevel);
  Logger.getRootLogger().addAppender(defaultAppender);
  Logger.getRootLogger().setLevel(Level.ALL);
  PropertyConfigurator.configure(config.getProperties());
}",0.9898795180722892
6206,"private void processQueue(){
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"");
  }
  while (!queue.isEmpty()) {
    ClassInfo next=queue.remove(0);
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"" + next.getClassName());
    }
    int found=processClass(next);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + found + ""String_Node_Str""+ next.getClassName());
    }
  }
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + newClasses.size() + ""String_Node_Str"");
  }
}","private void processQueue(){
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"");
  }
  while (!queue.isEmpty()) {
    ClassInfo next=queue.remove(0);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + next.getClassName());
    }
    int found=processClass(next);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + found + ""String_Node_Str""+ next.getClassName());
    }
  }
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + newClasses.size() + ""String_Node_Str"");
  }
}",0.9817518248175182
6207,"public static void main(String[] args){
  ExampleTool example=new ExampleTool();
  Properties defaults=null;
  try {
    defaults=AppSetup.loadResourceProps(ExampleTool.class,""String_Node_Str"");
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
  AppSetup setup=new AppSetup(defaults,true);
  setup.setUsageInfo(""String_Node_Str"",""String_Node_Str"");
  setup.setVersionInfo(""String_Node_Str"");
  setup.addStandardOptions(true,true);
  setup.addWriteOptions(true);
  setup.registerModule(""String_Node_Str"",example);
  String[] rest=setup.setupConfig(args,""String_Node_Str"");
  setup.setupLogger();
  setup.setupAppInfo(rest,true);
  setup.writeClasses();
}","public static void main(String[] args){
  ExampleTool example=new ExampleTool();
  Properties defaults=null;
  try {
    defaults=AppSetup.loadResourceProps(ExampleTool.class,""String_Node_Str"");
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
  AppSetup setup=new AppSetup(defaults,true);
  setup.setUsageInfo(""String_Node_Str"",""String_Node_Str"");
  setup.setVersionInfo(""String_Node_Str"");
  setup.addStandardOptions(true,true);
  setup.addWriteOptions(true);
  setup.registerModule(""String_Node_Str"",example);
  String[] rest=setup.setupConfig(args,""String_Node_Str"");
  setup.setupLogger(false);
  setup.setupAppInfo(rest,true);
  setup.writeClasses();
}",0.9965349965349966
6208,"public static void main(String[] args){
  JCopter jcopter=new JCopter();
  AppSetup setup=new AppSetup(true);
  setup.setUsageInfo(""String_Node_Str"",""String_Node_Str"");
  setup.addStandardOptions(true,true);
  setup.addPackageOptions(true);
  setup.addWriteOptions(true);
  setup.registerModule(""String_Node_Str"",jcopter);
  String[] rest=setup.setupConfig(args,""String_Node_Str"");
  setup.setupLogger();
  setup.setupAppInfo(rest,true);
  jcopter.run(setup);
  setup.writeClasses();
}","public static void main(String[] args){
  JCopter jcopter=new JCopter();
  AppSetup setup=new AppSetup(true);
  setup.setUsageInfo(""String_Node_Str"",""String_Node_Str"");
  setup.addStandardOptions(true,true);
  setup.addPackageOptions(true);
  setup.addWriteOptions(true);
  setup.registerModule(""String_Node_Str"",jcopter);
  String[] rest=setup.setupConfig(args,""String_Node_Str"");
  setup.setupLogger(true);
  setup.setupAppInfo(rest,true);
  jcopter.run(setup);
  setup.writeClasses();
}",0.995893223819302
6209,"public static void main(String[] args){
  if (args.length != 1) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  final String clsName=args[0].substring(args[0].lastIndexOf(""String_Node_Str"") + 1);
  try {
    Class cls=Class.forName(args[0]);
    Method main=cls.getMethod(""String_Node_Str"",new Class[]{String[].class});
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    while (true) {
      System.out.print(clsName + ""String_Node_Str"");
      String s=br.readLine();
      if (s == null) {
        return;
      }
      String cmd=s.trim();
      if (""String_Node_Str"".equals(cmd)) {
        return;
      }
      String[] mainArgs=cmd.split(""String_Node_Str"");
      System.setSecurityManager(new SecurityManager(){
        @Override public void checkPermission(        Permission perm){
        }
        @Override public void checkPermission(        Permission perm,        Object context){
        }
        @Override public void checkExit(        int status){
          throw new SecurityException(clsName + ""String_Node_Str"" + status);
        }
      }
);
      try {
        main.invoke(null,new Object[]{mainArgs});
      }
 catch (      Exception e) {
        if (e.getCause() instanceof SecurityException) {
          System.out.println(e.getCause().getMessage());
        }
 else {
          e.printStackTrace();
        }
      }
 finally {
        System.setSecurityManager(null);
      }
      AppInfo.getSingleton().clear(true);
    }
  }
 catch (  ClassNotFoundException e) {
    System.out.println(""String_Node_Str"" + args[0] + ""String_Node_Str"");
    System.exit(1);
  }
catch (  NoSuchMethodException e) {
    System.out.println(""String_Node_Str"" + args[0] + ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
}","public static void main(String[] args){
  if (args.length != 1) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  final String clsName=args[0].substring(args[0].lastIndexOf(""String_Node_Str"") + 1);
  try {
    Class cls=Class.forName(args[0]);
    Method main=cls.getMethod(""String_Node_Str"",new Class[]{String[].class});
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    while (true) {
      System.out.print(clsName + ""String_Node_Str"");
      String s=br.readLine();
      if (s == null) {
        return;
      }
      String cmd=s.trim();
      if (""String_Node_Str"".equals(cmd)) {
        return;
      }
      String[] mainArgs=cmd.split(""String_Node_Str"");
      System.setSecurityManager(new SecurityManager(){
        @Override public void checkPermission(        Permission perm){
        }
        @Override public void checkPermission(        Permission perm,        Object context){
        }
        @Override public void checkExit(        int status){
          throw new SecurityException(clsName + ""String_Node_Str"" + status);
        }
      }
);
      try {
        main.invoke(null,new Object[]{mainArgs});
      }
 catch (      Exception e) {
        if (e.getCause() instanceof SecurityException) {
          System.out.println(e.getCause().getMessage());
        }
 else {
          e.printStackTrace();
        }
      }
 finally {
        System.setSecurityManager(null);
      }
      AppInfo.getSingleton().clear(true);
      LogConfig.stopLogger();
    }
  }
 catch (  ClassNotFoundException e) {
    System.out.println(""String_Node_Str"" + args[0] + ""String_Node_Str""+ e.getMessage());
    System.exit(1);
  }
catch (  NoSuchMethodException e) {
    System.out.println(""String_Node_Str"" + args[0] + ""String_Node_Str""+ e.getMessage());
    System.exit(1);
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
}",0.9838457529963522
6210,"/** 
 * @param args File containing regex pattern to be matched.
 */
public static void main(String[] args) throws IOException {
  byte[] input;
{
    byte[] buf=new byte[1 << 20];
    int read;
    int offset=0;
    int capacity=buf.length;
    while ((read=System.in.read(buf,offset,capacity)) != -1) {
      System.out.write(buf,offset,read);
      offset+=read;
      capacity-=read;
      if (capacity == 0) {
        throw new IOException();
      }
    }
    input=new byte[offset];
    System.arraycopy(buf,0,input,0,offset);
  }
  File patternFile=new File(args[0]);
  long patternFileLen=patternFile.length();
  if (patternFileLen > Integer.MAX_VALUE) {
    throw new IOException();
  }
  byte[] pattern=new byte[(int)patternFileLen];
  new FileInputStream(patternFile).read(pattern);
  Pattern p=Pattern.compile(headerPattern + new String(pattern) + trailerPattern,Pattern.DOTALL);
  System.exit(p.matcher(new String(input)).matches() ? 0 : 2);
}","/** 
 * @param args File containing regex pattern to be matched by System.in.
 */
public static void main(String[] args) throws IOException {
  byte[] input;
{
    byte[] buf=new byte[1 << 20];
    int read;
    int offset=0;
    int capacity=buf.length;
    while ((read=System.in.read(buf,offset,capacity)) != -1) {
      System.out.write(buf,offset,read);
      offset+=read;
      capacity-=read;
      if (capacity == 0) {
        throw new IOException();
      }
    }
    input=new byte[offset];
    System.arraycopy(buf,0,input,0,offset);
  }
  File patternFile=new File(args[0]);
  long patternFileLen=patternFile.length();
  if (patternFileLen > Integer.MAX_VALUE) {
    throw new IOException();
  }
  byte[] pattern=new byte[(int)patternFileLen];
  new FileInputStream(patternFile).read(pattern);
  Pattern p=Pattern.compile(headerPattern + new String(pattern) + trailerPattern,Pattern.DOTALL);
  System.exit(p.matcher(new String(input)).matches() ? 0 : 2);
}",0.9932537623248572
6211,"/** 
 * Parse the specified <code>String</code> as a <code>double</code>. The extended BNF grammar is as follows:<br> <pre> <em>DecodableString</em>: ( [ <code>-</code> | <code>+</code> ] <code>NaN</code> ) | ( [ <code>-</code> | <code>+</code> ] <code>Infinity</code> ) | ( [ <code>-</code> | <code>+</code> ] <em>FloatingPoint</em> [ <code>f</code> | <code>F</code> | <code>d</code> | <code>D</code>] ) <em>FloatingPoint</em>: ( { <em>Digit</em> }+ [ <code>.</code> { <em>Digit</em> } ] [ <em>Exponent</em> ] ) | ( <code>.</code> { <em>Digit</em> }+ [ <em>Exponent</em> ] ) <em>Exponent</em>: ( ( <code>e</code> | <code>E</code> ) [ <code>-</code> | <code>+</code> ] { <em>Digit</em> }+ ) <em>Digit</em>: <em><code>'0'</code> through <code>'9'</code></em> </pre> <p>NaN and infinity are special cases, to allow parsing of the output of toString.  Otherwise, the result is determined by calculating <em>n * 10<sup>exponent</sup></em> to infinite precision, then rounding to the nearest double. Remember that many numbers cannot be precisely represented in floating point. In case of overflow, infinity is used, and in case of underflow, signed zero is used. Unlike Integer.parseInt, this does not accept Unicode digits outside the ASCII range. <p>If an unexpected character is found in the <code>String</code>, a <code>NumberFormatException</code> will be thrown.  Leading and trailing 'whitespace' is ignored via <code>String.trim()</code>, but spaces internal to the actual number are not allowed. <p>To parse numbers according to another format, consider using  {@link java.text.NumberFormat}.
 * @XXX specify where/how we are not in accord with the spec.
 * @param str the <code>String</code> to convert
 * @return the <code>double</code> value of <code>s</code>
 * @throws NumberFormatException if <code>s</code> cannot be parsed as a<code>double</code>
 * @throws NullPointerException if <code>s</code> is null
 * @see #MIN_VALUE
 * @see #MAX_VALUE
 * @see #POSITIVE_INFINITY
 * @see #NEGATIVE_INFINITY
 * @since 1.2
 */
public static double parseDouble(String str){
  return FloatingDecimal.readJavaFormatString(str).doubleValue();
}","/** 
 * Parse the specified <code>String</code> as a <code>double</code>. The extended BNF grammar is as follows:<br> <pre> <em>DecodableString</em>: ( [ <code>-</code> | <code>+</code> ] <code>NaN</code> ) | ( [ <code>-</code> | <code>+</code> ] <code>Infinity</code> ) | ( [ <code>-</code> | <code>+</code> ] <em>FloatingPoint</em> [ <code>f</code> | <code>F</code> | <code>d</code> | <code>D</code>] ) <em>FloatingPoint</em>: ( { <em>Digit</em> }+ [ <code>.</code> { <em>Digit</em> } ] [ <em>Exponent</em> ] ) | ( <code>.</code> { <em>Digit</em> }+ [ <em>Exponent</em> ] ) <em>Exponent</em>: ( ( <code>e</code> | <code>E</code> ) [ <code>-</code> | <code>+</code> ] { <em>Digit</em> }+ ) <em>Digit</em>: <em><code>'0'</code> through <code>'9'</code></em> </pre> <p>NaN and infinity are special cases, to allow parsing of the output of toString.  Otherwise, the result is determined by calculating <em>n * 10<sup>exponent</sup></em> to infinite precision, then rounding to the nearest double. Remember that many numbers cannot be precisely represented in floating point. In case of overflow, infinity is used, and in case of underflow, signed zero is used. Unlike Integer.parseInt, this does not accept Unicode digits outside the ASCII range. <p>If an unexpected character is found in the <code>String</code>, a <code>NumberFormatException</code> will be thrown.  Leading and trailing 'whitespace' is ignored via <code>String.trim()</code>, but spaces internal to the actual number are not allowed. <p>To parse numbers according to another format, consider using  {@link java.text.NumberFormat}.
 * @XXX specify where/how we are not in accord with the spec.
 * @param str the <code>String</code> to convert
 * @return the <code>double</code> value of <code>s</code>
 * @throws NumberFormatException if <code>s</code> cannot be parsed as a<code>double</code>
 * @throws NullPointerException if <code>s</code> is null
 * @see #MIN_VALUE
 * @see #MAX_VALUE
 * @see #POSITIVE_INFINITY
 * @see #NEGATIVE_INFINITY
 * @since 1.2
 */
public static double parseDouble(String str){
  return VMFloatingDecimal.readJavaFormatString(str).doubleValue();
}",0.99953314659197
6212,"public double doubleValue(){
  int kDigits=Math.min(nDigits,maxDecimalDigits + 1);
  long lValue;
  double dValue;
  double rValue, tValue;
  if (digits == infinity || digits == notANumber) {
    if (digits == notANumber)     return Double.NaN;
 else     return (isNegative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
  }
 else {
    if (mustSetRoundDir) {
      roundDir=0;
    }
    int iValue=(int)digits[0] - (int)'0';
    int iDigits=Math.min(kDigits,intDecimalDigits);
    for (int i=1; i < iDigits; i++) {
      iValue=iValue * 10 + (int)digits[i] - (int)'0';
    }
    lValue=(long)iValue;
    for (int i=iDigits; i < kDigits; i++) {
      lValue=lValue * 10L + (long)((int)digits[i] - (int)'0');
    }
    dValue=(double)lValue;
    int exp=decExponent - kDigits;
    if (nDigits <= maxDecimalDigits) {
      if (exp == 0 || dValue == 0.0)       return (isNegative) ? -dValue : dValue;
 else       if (exp >= 0) {
        if (exp <= maxSmallTen) {
          rValue=dValue * small10pow[exp];
          if (mustSetRoundDir) {
            tValue=rValue / small10pow[exp];
            roundDir=(tValue == dValue) ? 0 : (tValue < dValue) ? 1 : -1;
          }
          return (isNegative) ? -rValue : rValue;
        }
        int slop=maxDecimalDigits - kDigits;
        if (exp <= maxSmallTen + slop) {
          dValue*=small10pow[slop];
          rValue=dValue * small10pow[exp - slop];
          if (mustSetRoundDir) {
            tValue=rValue / small10pow[exp - slop];
            roundDir=(tValue == dValue) ? 0 : (tValue < dValue) ? 1 : -1;
          }
          return (isNegative) ? -rValue : rValue;
        }
      }
 else {
        if (exp >= -maxSmallTen) {
          rValue=dValue / small10pow[-exp];
          tValue=rValue * small10pow[-exp];
          if (mustSetRoundDir) {
            roundDir=(tValue == dValue) ? 0 : (tValue < dValue) ? 1 : -1;
          }
          return (isNegative) ? -rValue : rValue;
        }
      }
    }
    if (exp > 0) {
      if (decExponent > maxDecimalExponent + 1) {
        return (isNegative) ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
      }
      if ((exp & 15) != 0) {
        dValue*=small10pow[exp & 15];
      }
      if ((exp>>=4) != 0) {
        int j;
        for (j=0; exp > 1; j++, exp>>=1) {
          if ((exp & 1) != 0)           dValue*=big10pow[j];
        }
        double t=dValue * big10pow[j];
        if (Double.isInfinite(t)) {
          t=dValue / 2.0;
          t*=big10pow[j];
          if (Double.isInfinite(t)) {
            return (isNegative) ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
          }
          t=Double.MAX_VALUE;
        }
        dValue=t;
      }
    }
 else     if (exp < 0) {
      exp=-exp;
      if (decExponent < minDecimalExponent - 1) {
        return (isNegative) ? -0.0 : 0.0;
      }
      if ((exp & 15) != 0) {
        dValue/=small10pow[exp & 15];
      }
      if ((exp>>=4) != 0) {
        int j;
        for (j=0; exp > 1; j++, exp>>=1) {
          if ((exp & 1) != 0)           dValue*=tiny10pow[j];
        }
        double t=dValue * tiny10pow[j];
        if (t == 0.0) {
          t=dValue * 2.0;
          t*=tiny10pow[j];
          if (t == 0.0) {
            return (isNegative) ? -0.0 : 0.0;
          }
          t=Double.MIN_VALUE;
        }
        dValue=t;
      }
    }
    FDBigInt bigD0=new FDBigInt(lValue,digits,kDigits,nDigits);
    exp=decExponent - nDigits;
    correctionLoop:     while (true) {
      FDBigInt bigB=doubleToBigInt(dValue);
      int B2, B5;
      int D2, D5;
      int Ulp2;
      if (exp >= 0) {
        B2=B5=0;
        D2=D5=exp;
      }
 else {
        B2=B5=-exp;
        D2=D5=0;
      }
      if (bigIntExp >= 0) {
        B2+=bigIntExp;
      }
 else {
        D2-=bigIntExp;
      }
      Ulp2=B2;
      int hulpbias;
      if (bigIntExp + bigIntNBits <= -expBias + 1) {
        hulpbias=bigIntExp + expBias + expShift;
      }
 else {
        hulpbias=expShift + 2 - bigIntNBits;
      }
      B2+=hulpbias;
      D2+=hulpbias;
      int common2=Math.min(B2,Math.min(D2,Ulp2));
      B2-=common2;
      D2-=common2;
      Ulp2-=common2;
      bigB=multPow52(bigB,B5,B2);
      FDBigInt bigD=multPow52(new FDBigInt(bigD0),D5,D2);
      FDBigInt diff;
      int cmpResult;
      boolean overvalue;
      if ((cmpResult=bigB.cmp(bigD)) > 0) {
        overvalue=true;
        diff=bigB.sub(bigD);
        if ((bigIntNBits == 1) && (bigIntExp > -expBias)) {
          Ulp2-=1;
          if (Ulp2 < 0) {
            Ulp2=0;
            diff.lshiftMe(1);
          }
        }
      }
 else       if (cmpResult < 0) {
        overvalue=false;
        diff=bigD.sub(bigB);
      }
 else {
        break correctionLoop;
      }
      FDBigInt halfUlp=constructPow52(B5,Ulp2);
      if ((cmpResult=diff.cmp(halfUlp)) < 0) {
        if (mustSetRoundDir) {
          roundDir=overvalue ? -1 : 1;
        }
        break correctionLoop;
      }
 else       if (cmpResult == 0) {
        dValue+=0.5 * ulp(dValue,overvalue);
        if (mustSetRoundDir) {
          roundDir=overvalue ? -1 : 1;
        }
        break correctionLoop;
      }
 else {
        dValue+=ulp(dValue,overvalue);
        if (dValue == 0.0 || dValue == Double.POSITIVE_INFINITY)         break correctionLoop;
        continue;
      }
    }
    return (isNegative) ? -dValue : dValue;
  }
}","public double doubleValue(){
  int kDigits=Math.min(nDigits,maxDecimalDigits + 1);
  long lValue;
  double dValue;
  double rValue, tValue;
  if (digits == infinity || digits == notANumber) {
    if (digits == notANumber)     return Double.NaN;
 else     return (isNegative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
  }
 else {
    if (mustSetRoundDir) {
      roundDir=0;
    }
    int iValue=(int)digits[0] - (int)'0';
    int iDigits=Math.min(kDigits,intDecimalDigits);
    for (int i=1; i < iDigits; i++) {
      iValue=iValue * 10 + (int)digits[i] - (int)'0';
    }
    lValue=(long)iValue;
    for (int i=iDigits; i < kDigits; i++) {
      lValue=lValue * 10L + (long)((int)digits[i] - (int)'0');
    }
    dValue=(double)lValue;
    int exp=decExponent - kDigits;
    if (nDigits <= maxDecimalDigits) {
      if (exp == 0 || dValue == 0.0)       return (isNegative) ? -dValue : dValue;
 else       if (exp >= 0) {
        if (exp <= maxSmallTen) {
          rValue=dValue * small10pow[exp];
          if (mustSetRoundDir) {
            tValue=rValue / small10pow[exp];
            roundDir=(tValue == dValue) ? 0 : (tValue < dValue) ? 1 : -1;
          }
          return (isNegative) ? -rValue : rValue;
        }
        int slop=maxDecimalDigits - kDigits;
        if (exp <= maxSmallTen + slop) {
          dValue*=small10pow[slop];
          rValue=dValue * small10pow[exp - slop];
          if (mustSetRoundDir) {
            tValue=rValue / small10pow[exp - slop];
            roundDir=(tValue == dValue) ? 0 : (tValue < dValue) ? 1 : -1;
          }
          return (isNegative) ? -rValue : rValue;
        }
      }
 else {
        if (exp >= -maxSmallTen) {
          rValue=dValue / small10pow[-exp];
          tValue=rValue * small10pow[-exp];
          if (mustSetRoundDir) {
            roundDir=(tValue == dValue) ? 0 : (tValue < dValue) ? 1 : -1;
          }
          return (isNegative) ? -rValue : rValue;
        }
      }
    }
    if (exp > 0) {
      if (decExponent > maxDecimalExponent + 1) {
        return (isNegative) ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
      }
      if ((exp & 15) != 0) {
        dValue*=small10pow[exp & 15];
      }
      if ((exp>>=4) != 0) {
        int j;
        for (j=0; exp > 1; j++, exp>>=1) {
          if ((exp & 1) != 0)           dValue*=big10pow[j];
        }
        double t=dValue * big10pow[j];
        if (Double.isInfinite(t)) {
          t=dValue / 2.0;
          t*=big10pow[j];
          if (Double.isInfinite(t)) {
            return (isNegative) ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
          }
          t=Double.MAX_VALUE;
        }
        dValue=t;
      }
    }
 else     if (exp < 0) {
      exp=-exp;
      if (decExponent < minDecimalExponent - 1) {
        return (isNegative) ? -0.0 : 0.0;
      }
      if ((exp & 15) != 0) {
        dValue/=small10pow[exp & 15];
      }
      if ((exp>>=4) != 0) {
        int j;
        for (j=0; exp > 1; j++, exp>>=1) {
          if ((exp & 1) != 0)           dValue*=tiny10pow[j];
        }
        double t=dValue * tiny10pow[j];
        if (t == 0.0) {
          t=dValue * 2.0;
          t*=tiny10pow[j];
          if (t == 0.0) {
            return (isNegative) ? -0.0 : 0.0;
          }
          t=Double.MIN_VALUE;
        }
        dValue=t;
      }
    }
    dValue=correctionLoop(kDigits,lValue,dValue);
    return (isNegative) ? -dValue : dValue;
  }
}",0.7631698455949137
6213,"public static FloatingDecimal readJavaFormatString(String in) throws NumberFormatException {
  boolean isNegative=false;
  boolean signSeen=false;
  int decExp;
  char c;
  parseNumber:   try {
    in=in.trim();
    int l=in.length();
    if (l == 0)     throw new NumberFormatException(""String_Node_Str"");
    int i=0;
switch (c=in.charAt(i)) {
case '-':
      isNegative=true;
case '+':
    i++;
  signSeen=true;
}
c=in.charAt(i);
if (c == 'N' || c == 'I') {
boolean potentialNaN=false;
char targetChars[]=null;
if (c == 'N') {
  targetChars=notANumber;
  potentialNaN=true;
}
 else {
  targetChars=infinity;
}
int j=0;
while (i < l && j < targetChars.length) {
  if (in.charAt(i) == targetChars[j]) {
    i++;
    j++;
  }
 else   break parseNumber;
}
if ((j == targetChars.length) && (i == l)) {
  return (potentialNaN ? new FloatingDecimal(false,0,notANumber,notANumber.length,true) : new FloatingDecimal(isNegative,0,infinity,notANumber.length,true));
}
 else {
  break parseNumber;
}
}
 else if (c == '0') {
if (l > i + 1) {
  char ch=in.charAt(i + 1);
  if (ch == 'x' || ch == 'X')   throw new NumberFormatException(""String_Node_Str"");
}
}
char[] digits=new char[l];
int nDigits=0;
boolean decSeen=false;
int decPt=0;
int nLeadZero=0;
int nTrailZero=0;
digitLoop: while (i < l) {
switch (c=in.charAt(i)) {
case '0':
  if (nDigits > 0) {
    nTrailZero+=1;
  }
 else {
    nLeadZero+=1;
  }
break;
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
while (nTrailZero > 0) {
digits[nDigits++]='0';
nTrailZero-=1;
}
digits[nDigits++]=c;
break;
case '.':
if (decSeen) {
throw new NumberFormatException(""String_Node_Str"");
}
decPt=i;
if (signSeen) {
decPt-=1;
}
decSeen=true;
break;
default :
break digitLoop;
}
i++;
}
if (nDigits == 0) {
digits=zero;
nDigits=1;
if (nLeadZero == 0) {
break parseNumber;
}
}
if (decSeen) {
decExp=decPt - nLeadZero;
}
 else {
decExp=nDigits + nTrailZero;
}
if ((i < l) && (((c=in.charAt(i)) == 'e') || (c == 'E'))) {
int expSign=1;
int expVal=0;
int reallyBig=Integer.MAX_VALUE / 10;
boolean expOverflow=false;
switch (in.charAt(++i)) {
case '-':
expSign=-1;
case '+':
i++;
}
int expAt=i;
expLoop: while (i < l) {
if (expVal >= reallyBig) {
expOverflow=true;
}
switch (c=in.charAt(i++)) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
expVal=expVal * 10 + ((int)c - (int)'0');
continue;
default :
i--;
break expLoop;
}
}
int expLimit=bigDecimalExponent + nDigits + nTrailZero;
if (expOverflow || (expVal > expLimit)) {
decExp=expSign * expLimit;
}
 else {
decExp=decExp + expSign * expVal;
}
if (i == expAt) break parseNumber;
}
if (i < l && ((i != l - 1) || (in.charAt(i) != 'f' && in.charAt(i) != 'F' && in.charAt(i) != 'd' && in.charAt(i) != 'D'))) {
break parseNumber;
}
return new FloatingDecimal(isNegative,decExp,digits,nDigits,false);
}
 catch (StringIndexOutOfBoundsException e) {
}
throw new NumberFormatException(""String_Node_Str"" + in + ""String_Node_Str"");
}","public static VMFloatingDecimal readJavaFormatString(String in) throws NumberFormatException {
  boolean isNegative=false;
  boolean signSeen=false;
  int decExp;
  char c;
  parseNumber:   try {
    in=in.trim();
    int l=in.length();
    if (l == 0)     throw new NumberFormatException(""String_Node_Str"");
    int i=0;
switch (c=in.charAt(i)) {
case '-':
      isNegative=true;
case '+':
    i++;
  signSeen=true;
}
c=in.charAt(i);
if (c == 'N' || c == 'I') {
boolean potentialNaN=false;
char targetChars[]=null;
if (c == 'N') {
  targetChars=notANumber;
  potentialNaN=true;
}
 else {
  targetChars=infinity;
}
int j=0;
while (i < l && j < targetChars.length) {
  if (in.charAt(i) == targetChars[j]) {
    i++;
    j++;
  }
 else   break parseNumber;
}
if ((j == targetChars.length) && (i == l)) {
  return (potentialNaN ? new VMFloatingDecimal(false,0,notANumber,notANumber.length,true) : new VMFloatingDecimal(isNegative,0,infinity,notANumber.length,true));
}
 else {
  break parseNumber;
}
}
 else if (c == '0') {
if (l > i + 1) {
  char ch=in.charAt(i + 1);
  if (ch == 'x' || ch == 'X')   throw new NumberFormatException(""String_Node_Str"");
}
}
char[] digits=new char[l];
int nDigits=0;
boolean decSeen=false;
int decPt=0;
int nLeadZero=0;
int nTrailZero=0;
digitLoop: while (i < l) {
switch (c=in.charAt(i)) {
case '0':
  if (nDigits > 0) {
    nTrailZero+=1;
  }
 else {
    nLeadZero+=1;
  }
break;
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
while (nTrailZero > 0) {
digits[nDigits++]='0';
nTrailZero-=1;
}
digits[nDigits++]=c;
break;
case '.':
if (decSeen) {
throw new NumberFormatException(""String_Node_Str"");
}
decPt=i;
if (signSeen) {
decPt-=1;
}
decSeen=true;
break;
default :
break digitLoop;
}
i++;
}
if (nDigits == 0) {
digits=zero;
nDigits=1;
if (nLeadZero == 0) {
break parseNumber;
}
}
if (decSeen) {
decExp=decPt - nLeadZero;
}
 else {
decExp=nDigits + nTrailZero;
}
if ((i < l) && (((c=in.charAt(i)) == 'e') || (c == 'E'))) {
int expSign=1;
int expVal=0;
int reallyBig=Integer.MAX_VALUE / 10;
boolean expOverflow=false;
switch (in.charAt(++i)) {
case '-':
expSign=-1;
case '+':
i++;
}
int expAt=i;
expLoop: while (i < l) {
if (expVal >= reallyBig) {
expOverflow=true;
}
switch (c=in.charAt(i++)) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
expVal=expVal * 10 + ((int)c - (int)'0');
continue;
default :
i--;
break expLoop;
}
}
int expLimit=bigDecimalExponent + nDigits + nTrailZero;
if (expOverflow || (expVal > expLimit)) {
decExp=expSign * expLimit;
}
 else {
decExp=decExp + expSign * expVal;
}
if (i == expAt) break parseNumber;
}
if (i < l && ((i != l - 1) || (in.charAt(i) != 'f' && in.charAt(i) != 'F' && in.charAt(i) != 'd' && in.charAt(i) != 'D'))) {
break parseNumber;
}
return new VMFloatingDecimal(isNegative,decExp,digits,nDigits,false);
}
 catch (StringIndexOutOfBoundsException e) {
}
throw new NumberFormatException(""String_Node_Str"" + in + ""String_Node_Str"");
}",0.9986679986679988
6214,"/** 
 * Analyze the number of references used in each scope. For the general technique, see   {@link com.jopdesign.wcet.analysis.cache.MethodCacheAnalysis#analyzeBlockUsage()}<h2>Bytecodes using object references</h2> <ul> <li/> getfield (top of stack) <li/> putfield (second on stack) <li/> arraylen (top of stack) <li/> a*load (second on stack) <li/> a*store (third on stack) </ul> <h2>Reference Analysis</h2> For each scope, we do the following: <ol> <li/> Perform a local, symbolic points-to analysis <li/> Traverse all instructions, and collect for each reference the basic blocks it might be used in. Additionally, the cost of each basic block is set to the number of TOP references accessed. <li/> For each reference, add a decision variable denoting whether it is used at all, and add corresponding constraints. </ol>
 */
public void analyzeRefUsage(){
  usedReferences=new HashMap<CallGraphNode,Long>();
  CallString emptyCallString=new CallString();
  TopologicalOrderIterator<CallGraphNode,DefaultEdge> iter=project.getCallGraph().topDownIterator();
  while (iter.hasNext()) {
    try {
      CallGraphNode scope=iter.next();
      System.out.println(""String_Node_Str"" + scope.getMethodImpl().getFQMethodName());
      DFAAppInfo dfa=project.getDfaProgram();
      SymbolicPointsTo spt=new SymbolicPointsTo(MAX_SET_SIZE);
      dfa.runLocalAnalysis(spt,scope.getMethodImpl().getFQMethodName());
      HashMap<InstructionHandle,ContextMap<CallString,BoundedSet<SymbolicAddress>>> usedRefs=spt.getResult();
      SuperGraph sg=getScopeSuperGraph(scope);
      String key=""String_Node_Str"" + scope.toString();
      ILPModelBuilder imb=new ILPModelBuilder(new IpetConfig(project.getConfig()));
      Map<CFGNode,Long> costMap=new HashMap<CFGNode,Long>();
      HashMap<SymbolicAddress,Map<CFGNode,Integer>> accessSets=new HashMap<SymbolicAddress,Map<CFGNode,Integer>>();
      for (      CFGNode n : sg.vertexSet()) {
        BasicBlock bb=n.getBasicBlock();
        long topCost=0;
        if (bb == null)         continue;
        InstructionHandle ih=bb.getFirstInstruction();
        while (ih.getNext() != null) {
          BoundedSet<SymbolicAddress> refs;
          if (usedRefs.containsKey(ih)) {
            refs=usedRefs.get(ih).get(emptyCallString);
            if (refs.isSaturated() || countNonDistinct) {
              topCost+=1;
            }
 else {
              for (              SymbolicAddress ref : refs.getSet()) {
                addAccessSite(accessSets,ref,n);
              }
            }
          }
          ih=ih.getNext();
        }
        costMap.put(n,topCost);
      }
      MaxCostFlow<CFGNode,CFGEdge> maxCostFlow=imb.buildGlobalILPModel(key,sg,new MapCostProvider<CFGNode>(costMap,0));
      for (      Entry<SymbolicAddress,Map<CFGNode,Integer>> accessEntry : accessSets.entrySet()) {
        SymbolicAddress ref=accessEntry.getKey();
        Map<CFGNode,Integer> accessSet=accessEntry.getValue();
        DecisionVariable dvar=maxCostFlow.createDecisionVariable();
        decisionVariables.put(dvar,ref);
        maxCostFlow.addDecisionCost(dvar,1);
        LinearVector<CFGEdge> ub=new LinearVector<CFGEdge>();
        for (        Entry<CFGNode,Integer> entry : accessSet.entrySet()) {
          CFGNode node=entry.getKey();
          for (          CFGEdge edge : sg.incomingEdgesOf(node)) {
            ub.add(edge,1);
          }
        }
        maxCostFlow.addDecisionUpperBound(dvar,ub);
      }
      Map<CFGEdge,Long> flowMap=new HashMap<CFGEdge,Long>();
      Map<DecisionVariable,Boolean> cacheMissMap=new HashMap<DecisionVariable,Boolean>();
      double lpCost;
      try {
        lpCost=maxCostFlow.solve(flowMap,cacheMissMap);
      }
 catch (      Exception e) {
        throw new AssertionError(""String_Node_Str"" + scope);
      }
      long accessedReferences=(long)(lpCost + 0.5);
      this.usedReferences.put(scope,accessedReferences);
    }
 catch (    NullPointerException nullex) {
      nullex.printStackTrace();
    }
  }
}","/** 
 * Analyze the number of references used in each scope. For the general technique, see   {@link com.jopdesign.wcet.analysis.cache.MethodCacheAnalysis#analyzeBlockUsage()}<h2>Bytecodes using object references</h2> <ul> <li/> getfield (top of stack) <li/> putfield (second on stack) <li/> arraylen (top of stack) <li/> a*load (second on stack) <li/> a*store (third on stack) </ul> <h2>Reference Analysis</h2> For each scope, we do the following: <ol> <li/> Perform a local, symbolic points-to analysis <li/> Traverse all instructions, and collect for each reference the basic blocks it might be used in. Additionally, the cost of each basic block is set to the number of TOP references accessed. <li/> For each reference, add a decision variable denoting whether it is used at all, and add corresponding constraints. </ol>
 */
public void analyzeRefUsage(){
  usedReferences=new HashMap<CallGraphNode,Long>();
  CallString emptyCallString=new CallString();
  TopologicalOrderIterator<CallGraphNode,DefaultEdge> iter=project.getCallGraph().topDownIterator();
  while (iter.hasNext()) {
    CallGraphNode scope=iter.next();
    System.out.println(""String_Node_Str"" + scope.getMethodImpl().getFQMethodName());
    DFAAppInfo dfa=project.getDfaProgram();
    SymbolicPointsTo spt=new SymbolicPointsTo(MAX_SET_SIZE);
    dfa.runLocalAnalysis(spt,scope.getMethodImpl().getFQMethodName());
    HashMap<InstructionHandle,ContextMap<CallString,BoundedSet<SymbolicAddress>>> usedRefs=spt.getResult();
    SuperGraph sg=getScopeSuperGraph(scope);
    String key=""String_Node_Str"" + scope.toString();
    ILPModelBuilder imb=new ILPModelBuilder(new IpetConfig(project.getConfig()));
    Map<CFGNode,Long> costMap=new HashMap<CFGNode,Long>();
    HashMap<SymbolicAddress,Map<CFGNode,Integer>> accessSets=new HashMap<SymbolicAddress,Map<CFGNode,Integer>>();
    for (    CFGNode n : sg.vertexSet()) {
      BasicBlock bb=n.getBasicBlock();
      long topCost=0;
      if (bb == null)       continue;
      InstructionHandle ih=bb.getFirstInstruction();
      while (ih.getNext() != null) {
        BoundedSet<SymbolicAddress> refs;
        if (usedRefs.containsKey(ih)) {
          refs=usedRefs.get(ih).get(emptyCallString);
          if (refs.isSaturated() || countNonDistinct) {
            topCost+=1;
          }
 else {
            for (            SymbolicAddress ref : refs.getSet()) {
              addAccessSite(accessSets,ref,n);
            }
          }
        }
        ih=ih.getNext();
      }
      costMap.put(n,topCost);
    }
    MaxCostFlow<CFGNode,CFGEdge> maxCostFlow=imb.buildGlobalILPModel(key,sg,new MapCostProvider<CFGNode>(costMap,0));
    for (    Entry<SymbolicAddress,Map<CFGNode,Integer>> accessEntry : accessSets.entrySet()) {
      SymbolicAddress ref=accessEntry.getKey();
      Map<CFGNode,Integer> accessSet=accessEntry.getValue();
      DecisionVariable dvar=maxCostFlow.createDecisionVariable();
      decisionVariables.put(dvar,ref);
      maxCostFlow.addDecisionCost(dvar,1);
      LinearVector<CFGEdge> ub=new LinearVector<CFGEdge>();
      for (      Entry<CFGNode,Integer> entry : accessSet.entrySet()) {
        CFGNode node=entry.getKey();
        for (        CFGEdge edge : sg.incomingEdgesOf(node)) {
          ub.add(edge,1);
        }
      }
      maxCostFlow.addDecisionUpperBound(dvar,ub);
    }
    Map<CFGEdge,Long> flowMap=new HashMap<CFGEdge,Long>();
    Map<DecisionVariable,Boolean> cacheMissMap=new HashMap<DecisionVariable,Boolean>();
    double lpCost;
    try {
      lpCost=maxCostFlow.solve(flowMap,cacheMissMap);
    }
 catch (    Exception e) {
      throw new AssertionError(""String_Node_Str"" + scope);
    }
    long accessedReferences=(long)(lpCost + 0.5);
    this.usedReferences.put(scope,accessedReferences);
  }
}",0.957974553399306
6215,"private List<MethodInfo> dfaReceivers(InstructionHandle ih,List<MethodInfo> staticImpls){
  if (this.receiverAnalysis != null && receiverAnalysis.containsKey(ih)) {
    ContextMap<String,String> receivers=receiverAnalysis.get(ih);
    List<MethodInfo> dynImpls=new Vector<MethodInfo>();
    Set<String> dynReceivers=receivers.keySet();
    for (    MethodInfo impl : staticImpls) {
      if (dynReceivers.contains(impl.getFQMethodName())) {
        dynReceivers.remove(impl.getFQMethodName());
        dynImpls.add(impl);
      }
 else {
        logger.info(""String_Node_Str"" + impl);
      }
    }
    if (!dynReceivers.isEmpty()) {
      throw new AssertionError(""String_Node_Str"" + dynReceivers);
    }
    return dynImpls;
  }
 else {
    return staticImpls;
  }
}","private List<MethodInfo> dfaReceivers(InstructionHandle ih,List<MethodInfo> staticImpls){
  if (this.receiverAnalysis != null && receiverAnalysis.containsKey(ih)) {
    ContextMap<String,String> receivers=receiverAnalysis.get(ih);
    List<MethodInfo> dynImpls=new Vector<MethodInfo>();
    Set<String> dynReceivers=new HashSet<String>(receivers.keySet());
    for (    MethodInfo impl : staticImpls) {
      if (dynReceivers.contains(impl.getFQMethodName())) {
        dynReceivers.remove(impl.getFQMethodName());
        dynImpls.add(impl);
      }
 else {
        logger.info(""String_Node_Str"" + impl);
      }
    }
    if (!dynReceivers.isEmpty()) {
      throw new AssertionError(""String_Node_Str"" + dynReceivers);
    }
    return dynImpls;
  }
 else {
    return staticImpls;
  }
}",0.9865125240847784
6216,"private void doInvokeVirtual(String methodName,String receiver,InstructionHandle stmt,Context context,ContextMap<TypeMapping,TypeMapping> input,Interpreter<TypeMapping,TypeMapping> interpreter,Map<InstructionHandle,ContextMap<TypeMapping,TypeMapping>> state,ContextMap<TypeMapping,TypeMapping> result){
  DFAAppInfo p=interpreter.getProgram();
  if (p.getMethod(methodName) == null) {
    System.out.println(context.method + ""String_Node_Str"" + stmt+ ""String_Node_Str""+ methodName);
    return;
  }
  MethodGen method=p.getMethod(methodName).getMethodGen();
  String signature=method.getName() + method.getSignature();
  methodName=method.getClassName() + ""String_Node_Str"" + signature;
  recordReceiver(stmt,context,methodName);
  int varPtr=context.stackPtr - MethodHelper.getArgSize(method);
  Context c=new Context(context);
  c.stackPtr=method.getMaxLocals();
  c.constPool=method.getConstantPool();
  if (method.isSynchronized()) {
    c.syncLevel=context.syncLevel + 1;
  }
  c.method=methodName;
  boolean threaded=false;
  try {
    if (p.cliMap.get(receiver).clazz.instanceOf(p.cliMap.get(""String_Node_Str"").clazz) && signature.equals(""String_Node_Str"")) {
      c.createThread();
      threaded=true;
    }
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    throw new Error();
  }
  ContextMap<TypeMapping,TypeMapping> tmpresult=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
  for (Iterator<TypeMapping> k=input.keySet().iterator(); k.hasNext(); ) {
    TypeMapping m=k.next();
    if (m.stackLoc < 0) {
      tmpresult.add(m);
    }
    if (m.stackLoc > varPtr) {
      tmpresult.add(new TypeMapping(m.stackLoc - varPtr,m.type));
    }
    if (m.stackLoc == varPtr) {
      if (receiver.equals(m.type.split(""String_Node_Str"")[0])) {
        tmpresult.add(new TypeMapping(0,m.type));
      }
    }
  }
  InstructionHandle entry=method.getInstructionList().getStart();
  state.put(entry,join(tmpresult,state.get(entry)));
  Map<InstructionHandle,ContextMap<TypeMapping,TypeMapping>> r=interpreter.interpret(c,entry,state,false);
  InstructionHandle exit=method.getInstructionList().getEnd();
  if (r.get(exit) != null) {
    filterReturnSet(r.get(exit),result,varPtr);
  }
  if (threaded) {
    threads.put(methodName,new ContextMap<TypeMapping,TypeMapping>(c,result));
    updateThreads(result,interpreter,state);
  }
}","private void doInvokeVirtual(String methodName,String receiver,InstructionHandle stmt,Context context,ContextMap<TypeMapping,TypeMapping> input,Interpreter<TypeMapping,TypeMapping> interpreter,Map<InstructionHandle,ContextMap<TypeMapping,TypeMapping>> state,ContextMap<TypeMapping,TypeMapping> result){
  DFAAppInfo p=interpreter.getProgram();
  if (p.getMethod(methodName) == null) {
    System.out.println(context.method + ""String_Node_Str"" + stmt+ ""String_Node_Str""+ methodName);
    return;
  }
  MethodGen method=p.getMethod(methodName).getMethodGen();
  String signature=method.getName() + method.getSignature();
  methodName=method.getClassName() + ""String_Node_Str"" + signature;
  recordReceiver(stmt,context,methodName);
  int varPtr=context.stackPtr - MethodHelper.getArgSize(method);
  Context c=new Context(context);
  c.stackPtr=method.getMaxLocals();
  c.constPool=method.getConstantPool();
  if (method.isSynchronized()) {
    c.syncLevel=context.syncLevel + 1;
  }
  c.method=methodName;
  boolean threaded=false;
  try {
    if (p.cliMap.get(receiver).clazz.instanceOf(p.cliMap.get(""String_Node_Str"").clazz) && signature.equals(""String_Node_Str"")) {
      c.createThread();
      threaded=true;
    }
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    throw new Error();
  }
  ContextMap<TypeMapping,TypeMapping> tmpresult=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
  for (Iterator<TypeMapping> k=input.keySet().iterator(); k.hasNext(); ) {
    TypeMapping m=k.next();
    if (m.stackLoc < 0) {
      tmpresult.add(m);
    }
    if (m.stackLoc > varPtr) {
      tmpresult.add(new TypeMapping(m.stackLoc - varPtr,m.type));
    }
    if (m.stackLoc == varPtr) {
      ClassInfo staticClass=(ClassInfo)p.cliMap.get(receiver);
      ClassInfo dynamicClass=(ClassInfo)p.cliMap.get(m.type.split(""String_Node_Str"")[0]);
      try {
        if (dynamicClass.clazz.instanceOf(staticClass.clazz)) {
          tmpresult.add(new TypeMapping(0,m.type));
        }
      }
 catch (      ClassNotFoundException exc) {
        tmpresult.add(new TypeMapping(0,m.type));
      }
    }
  }
  InstructionHandle entry=method.getInstructionList().getStart();
  state.put(entry,join(tmpresult,state.get(entry)));
  Map<InstructionHandle,ContextMap<TypeMapping,TypeMapping>> r=interpreter.interpret(c,entry,state,false);
  InstructionHandle exit=method.getInstructionList().getEnd();
  if (r.get(exit) != null) {
    filterReturnSet(r.get(exit),result,varPtr);
  }
  if (threaded) {
    threads.put(methodName,new ContextMap<TypeMapping,TypeMapping>(c,result));
    updateThreads(result,interpreter,state);
  }
}",0.9414093428345208
6217,"public void add(V el){
  setImpl.add(el);
  if (setImpl.size() >= limit) {
    this.isSaturated=true;
    this.setImpl=null;
  }
}","public void add(V el){
  if (this.isSaturated())   return;
  setImpl.add(el);
  if (setImpl.size() > limit) {
    setTop();
  }
}",0.6872586872586872
6218,"public int getSize(){
  if (isSaturated)   return limit;
 else   return setImpl.size();
}","public int getSize(){
  if (isSaturated)   return limit + 1;
 else   return setImpl.size();
}",0.978021978021978
6219,"public void addAll(BoundedSet<V> other){
  setImpl.addAll(other.getSet());
  if (setImpl.size() >= limit) {
    this.isSaturated=true;
    this.setImpl=null;
  }
}","public void addAll(BoundedSet<V> other){
  if (this.isSaturated())   return;
  if (other.isSaturated()) {
    setTop();
    return;
  }
  setImpl.addAll(other.getSet());
  if (setImpl.size() > limit) {
    setTop();
  }
}",0.6145833333333334
6220,"public BoundedSet<V> join(BoundedSet<V> other){
  if (this.isSaturated())   return this;
 else   if (other.isSaturated())   return other;
  HashSet<V> joinedSet=new HashSet<V>();
  joinedSet.addAll(this.getSet());
  if (other != null)   joinedSet.addAll(other.getSet());
  BoundedSetImpl r=new BoundedSetImpl(joinedSet);
  System.out.println(String.format(""String_Node_Str"",this,other,r));
  return r;
}","public BoundedSet<V> join(BoundedSet<V> other){
  if (this.isSaturated())   return this;
 else   if (other != null && other.isSaturated())   return other;
  HashSet<V> joinedSet=new HashSet<V>();
  joinedSet.addAll(this.getSet());
  if (other != null)   joinedSet.addAll(other.getSet());
  BoundedSetImpl r=new BoundedSetImpl(joinedSet);
  return r;
}",0.8859416445623343
6221,"public boolean isSubset(SymbolicAddressMap other){
  if (other == TOP)   return true;
 else   if (this == TOP)   return false;
 else   if (other == null)   return false;
  for (  Location l : this.map.keySet()) {
    BoundedSet<SymbolicAddress> thisEntry=map.get(l);
    BoundedSet<SymbolicAddress> otherEntry=other.map.get(l);
    if (otherEntry == null)     return false;
    if (!thisEntry.isSubset(otherEntry))     return false;
  }
  return true;
}","public boolean isSubset(SymbolicAddressMap other){
  if (other.isTop())   return true;
 else   if (this.isTop())   return false;
 else   if (other == null)   return false;
  for (  Location l : this.map.keySet()) {
    BoundedSet<SymbolicAddress> thisEntry=map.get(l);
    BoundedSet<SymbolicAddress> otherEntry=other.map.get(l);
    if (otherEntry == null)     return false;
    if (!thisEntry.isSubset(otherEntry))     return false;
  }
  return true;
}",0.8986784140969163
6222,"public BoundedSet<SymbolicAddress> getTopOfStack(){
  if (this == TOP)   return bsFactory.top();
  return map.get(new Location(topOfStack));
}","public BoundedSet<SymbolicAddress> getTopOfStack(){
  if (this.isTop())   return bsFactory.top();
  return map.get(new Location(topOfStack));
}",0.9543859649122808
6223,"public void put(Location l,BoundedSet<SymbolicAddress> bs){
  if (this == TOP)   return;
  if (!l.isHeapLoc() && l.stackLoc > this.topOfStack) {
    this.topOfStack=l.stackLoc;
  }
  this.map.put(l,bs);
}","public void put(Location l,BoundedSet<SymbolicAddress> bs){
  if (this.isTop())   return;
  if (!l.isHeapLoc() && l.stackLoc > this.topOfStack) {
    this.topOfStack=l.stackLoc;
  }
  this.map.put(l,bs);
}",0.9682151589242054
6224,"/** 
 * Clone address map, but only those stack variables below   {@code bound} 
 */
public SymbolicAddressMap cloneFilterStack(int bound){
  if (this == TOP)   return this;
  SymbolicAddressMap copy=new SymbolicAddressMap(this.bsFactory);
  for (  Entry<Location,BoundedSet<SymbolicAddress>> entry : map.entrySet()) {
    Location loc=entry.getKey();
    if (loc.isHeapLoc() || loc.stackLoc < bound) {
      copy.put(loc,entry.getValue());
    }
  }
  return copy;
}","/** 
 * Clone address map, but only those stack variables below   {@code bound} 
 */
public SymbolicAddressMap cloneFilterStack(int bound){
  if (this.isTop())   return this;
  SymbolicAddressMap copy=new SymbolicAddressMap(this.bsFactory);
  for (  Entry<Location,BoundedSet<SymbolicAddress>> entry : map.entrySet()) {
    Location loc=entry.getKey();
    if (loc.isHeapLoc() || loc.stackLoc < bound) {
      copy.put(loc,entry.getValue());
    }
  }
  return copy;
}",0.986096256684492
6225,"public void putStack(int index,BoundedSet<SymbolicAddress> bs){
  if (this == TOP)   return;
  this.put(new Location(index),bs);
}","public void putStack(int index,BoundedSet<SymbolicAddress> bs){
  if (this.isTop())   return;
  this.put(new Location(index),bs);
}",0.950191570881226
6226,"/** 
 * Print results
 * @param indent Indentation (amount of leading whitespace)
 */
public void print(PrintStream out,int indent){
  StringBuffer indentstr=new StringBuffer();
  for (int i=0; i < indent; i++)   indentstr.append(' ');
  out.print(indentstr.toString());
  if (this == TOP) {
    out.println(""String_Node_Str"");
    return;
  }
  out.println(""String_Node_Str"" + map.size() + ""String_Node_Str"");
  indentstr.append(' ');
  for (  Entry<Location,BoundedSet<SymbolicAddress>> entry : map.entrySet()) {
    out.print(indentstr.toString());
    out.print(entry.getKey());
    out.print(""String_Node_Str"");
    out.print(entry.getValue());
    out.print(""String_Node_Str"");
  }
}","/** 
 * Print results
 * @param indent Indentation (amount of leading whitespace)
 */
public void print(PrintStream out,int indent){
  StringBuffer indentstr=new StringBuffer();
  for (int i=0; i < indent; i++)   indentstr.append(' ');
  out.print(indentstr.toString());
  if (this.isTop()) {
    out.println(""String_Node_Str"");
    return;
  }
  out.println(""String_Node_Str"" + map.size() + ""String_Node_Str"");
  indentstr.append(' ');
  for (  Entry<Location,BoundedSet<SymbolicAddress>> entry : map.entrySet()) {
    out.print(indentstr.toString());
    out.print(entry.getKey());
    out.print(""String_Node_Str"");
    out.print(entry.getValue());
    out.print(""String_Node_Str"");
  }
}",0.990572878897752
6227,"/** 
 * Clone address map, but only those stack variables with index greater than or equal to  {@code framePtr}. The stack variables are move down to the beginning of the stack. 
 */
public SymbolicAddressMap cloneInvoke(int framePtr){
  if (this == TOP)   return this;
  SymbolicAddressMap copy=new SymbolicAddressMap(this.bsFactory);
  for (  Entry<Location,BoundedSet<SymbolicAddress>> entry : map.entrySet()) {
    Location loc=entry.getKey();
    if (loc.isHeapLoc()) {
      copy.put(loc,entry.getValue());
    }
 else     if (loc.stackLoc >= framePtr) {
      copy.putStack(loc.stackLoc - framePtr,entry.getValue());
    }
  }
  return copy;
}","/** 
 * Clone address map, but only those stack variables with index greater than or equal to  {@code framePtr}. The stack variables are move down to the beginning of the stack. 
 */
public SymbolicAddressMap cloneInvoke(int framePtr){
  if (this.isTop())   return this;
  SymbolicAddressMap copy=new SymbolicAddressMap(this.bsFactory);
  for (  Entry<Location,BoundedSet<SymbolicAddress>> entry : map.entrySet()) {
    Location loc=entry.getKey();
    if (loc.isHeapLoc()) {
      copy.put(loc,entry.getValue());
    }
 else     if (loc.stackLoc >= framePtr) {
      copy.putStack(loc.stackLoc - framePtr,entry.getValue());
    }
  }
  return copy;
}",0.9900076863950809
6228,"/** 
 * Merge in df info from returned method 
 */
public void joinReturned(SymbolicAddressMap returned,int framePtr){
  if (this == TOP)   return;
  for (  Entry<Location,BoundedSet<SymbolicAddress>> entry : returned.map.entrySet()) {
    Location loc=entry.getKey();
    BoundedSet<SymbolicAddress> currentSet=map.get(loc);
    BoundedSet<SymbolicAddress> returnedSet=returned.map.get(loc);
    if (loc.isHeapLoc()) {
      put(loc,returnedSet.join(currentSet));
    }
 else {
      putStack(loc.stackLoc + framePtr,returnedSet.join(currentSet));
    }
  }
}","/** 
 * Merge in df info from returned method. 
 */
public void joinReturned(SymbolicAddressMap returned,int framePtr){
  if (returned == null) {
    throw new AssertionError(""String_Node_Str"");
  }
  if (this.isTop())   return;
 else   if (returned.isTop()) {
    setTop();
    return;
  }
  for (  Entry<Location,BoundedSet<SymbolicAddress>> entry : returned.map.entrySet()) {
    Location locReturnedFrame=entry.getKey();
    Location locCallerFrame;
    if (locReturnedFrame.isHeapLoc()) {
      locCallerFrame=locReturnedFrame;
    }
 else {
      locCallerFrame=new Location(locReturnedFrame.stackLoc + framePtr);
    }
    BoundedSet<SymbolicAddress> callerSet=map.get(locCallerFrame);
    BoundedSet<SymbolicAddress> returnedSet=returned.map.get(locReturnedFrame);
    put(locCallerFrame,returnedSet.join(callerSet));
  }
}",0.4385334291876347
6229,"@Override public int hashCode(){
  if (this == TOP)   return 1;
 else   return 2 + map.hashCode();
}","@Override public int hashCode(){
  if (isTop())   return 1;
 else   return 2 + map.hashCode();
}",0.9387755102040816
6230,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  SymbolicAddressMap other=(SymbolicAddressMap)obj;
  if (map == null || other.map == null)   return false;
  return map.equals(other.map);
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  SymbolicAddressMap other=(SymbolicAddressMap)obj;
  if (this.isTop() || other.isTop())   return (this.isTop() && other.isTop());
  return map.equals(other.map);
}",0.7660910518053375
6231,"@Override protected SymbolicAddressMap clone() throws CloneNotSupportedException {
  if (this == TOP)   return this;
  return new SymbolicAddressMap(this);
}","@Override protected SymbolicAddressMap clone(){
  if (this.isTop())   return this;
  return new SymbolicAddressMap(this);
}",0.8285714285714286
6232,"public BoundedSet<SymbolicAddress> getStack(int index){
  if (this == TOP)   return bsFactory.top();
  Location stackLoc=new Location(index);
  BoundedSet<SymbolicAddress> val=map.get(stackLoc);
  if (val == null)   throw new AssertionError(""String_Node_Str"" + index);
  return val;
}","public BoundedSet<SymbolicAddress> getStack(int index){
  if (this.isTop())   return bsFactory.top();
  Location stackLoc=new Location(index);
  BoundedSet<SymbolicAddress> val=map.get(stackLoc);
  if (val == null)   throw new AssertionError(""String_Node_Str"" + index);
  return val;
}",0.9771528998242532
6233,"/** 
 * Set stack info from other other map, upto bound. Used to restore stack frames when returning from a method 
 */
public void addStackUpto(SymbolicAddressMap in,int bound){
  for (  Entry<Location,BoundedSet<SymbolicAddress>> entry : map.entrySet()) {
    Location loc=entry.getKey();
    if (!loc.isHeapLoc() && loc.stackLoc < bound) {
      map.put(loc,in.getStack(loc.stackLoc));
    }
  }
}","/** 
 * Set stack info from other other map, upto bound. Used to restore stack frames when returning from a method 
 */
public void addStackUpto(SymbolicAddressMap in,int bound){
  if (in == null) {
    throw new AssertionError(""String_Node_Str"");
  }
  if (this.isTop())   return;
  if (in.isTop()) {
    setTop();
    return;
  }
  for (  Entry<Location,BoundedSet<SymbolicAddress>> entry : in.map.entrySet()) {
    Location loc=entry.getKey();
    if (!loc.isHeapLoc() && loc.stackLoc < bound) {
      map.put(loc,in.getStack(loc.stackLoc));
    }
  }
}",0.8368200836820083
6234,"public void join(SymbolicAddressMap b){
  joinReturned(b,0);
}","public void join(SymbolicAddressMap b){
  if (b == null)   return;
  joinReturned(b,0);
}",0.8211920529801324
6235,"public ContextMap<CallString,SymbolicAddressMap> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<CallString,SymbolicAddressMap> input,Interpreter<CallString,SymbolicAddressMap> interpreter,Map<InstructionHandle,ContextMap<CallString,SymbolicAddressMap>> state){
  Context context=new Context(input.getContext());
  SymbolicAddressMap in=input.get(context.callString);
  ContextMap<CallString,SymbolicAddressMap> retval=new ContextMap<CallString,SymbolicAddressMap>(context,input);
  Instruction instruction=stmt.getInstruction();
  int newStackPtr=context.stackPtr + instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      retval.put(context.callString,in.cloneFilterStack(newStackPtr));
    }
  break;
case Constants.ACONST_NULL:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.LDC:
case Constants.LDC_W:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.LDC2_W:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
result.putStack(instr.getIndex(),in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
result.putStack(context.stackPtr,in.getStack(instr.getIndex()));
retval.put(context.callString,result);
}
break;
case Constants.ARRAYLENGTH:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
retval.put(context.callString,SymbolicAddressMap.TOP);
}
 else {
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
objects.put(stmt,input);
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
BoundedSet<SymbolicAddress> objectMapping=in.getStack(context.stackPtr - 1);
BoundedSet<SymbolicAddress> newMapping;
if (objectMapping.isSaturated()) {
newMapping=bsFactory.top();
}
 else {
newMapping=bsFactory.empty();
for (SymbolicAddress addr : objectMapping.getSet()) {
newMapping.add(addr.access(instr.getFieldName(context.constPool)));
}
}
result.putStack(context.stackPtr - 1,newMapping);
}
retval.put(context.callString,result);
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
retval.put(context.callString,SymbolicAddressMap.TOP);
}
 else {
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
BoundedSet<SymbolicAddress> newMapping=bsFactory.empty();
newMapping.add(SymbolicAddress.staticField(instr.getFieldName(context.constPool)));
result.putStack(context.stackPtr,newMapping);
}
retval.put(context.callString,result);
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.AASTORE:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.AALOAD:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.DUP:
{
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
result.putStack(context.stackPtr,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.DUP_X1:
{
SymbolicAddressMap result=in.cloneFilterStack(context.stackPtr - 2);
result.putStack(context.stackPtr - 2,in.getStack(context.stackPtr - 1));
result.putStack(context.stackPtr - 1,in.getStack(context.stackPtr - 2));
result.putStack(context.stackPtr,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.DUP2:
{
SymbolicAddressMap result=in.cloneFilterStack(context.stackPtr);
result.putStack(context.stackPtr,in.getStack(context.stackPtr - 2));
result.putStack(context.stackPtr + 1,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.POP:
case Constants.POP2:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IINC:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IADD:
case Constants.ISUB:
case Constants.INEG:
case Constants.IUSHR:
case Constants.ISHR:
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.MONITORENTER:
retval.put(context.callString,SymbolicAddressMap.TOP);
break;
case Constants.MONITOREXIT:
retval.put(context.callString,SymbolicAddressMap.TOP);
break;
case Constants.CHECKCAST:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.INSTANCEOF:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.NEW:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.NEWARRAY:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.ANEWARRAY:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.MULTIANEWARRAY:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.GOTO:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
String errMsg=context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"";
throw new AssertionError(errMsg);
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
{
SymbolicAddressMap result=in.cloneFilterStack(0);
result.putStack(0,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
objects.put(stmt,retval);
}
break;
case Constants.RETURN:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IRETURN:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
default :
System.err.println(""String_Node_Str"" + stmt);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
}
if (DEBUG_PRINT) {
System.out.println(""String_Node_Str"" + context + ""String_Node_Str""+ stmt);
System.out.println(""String_Node_Str"" + context.stackPtr + ""String_Node_Str""+ newStackPtr);
System.out.println(""String_Node_Str"");
input.get(context.callString).print(System.out,4);
System.out.println(""String_Node_Str"");
retval.get(context.callString).print(System.out,4);
}
context.stackPtr=newStackPtr;
return retval;
}","public ContextMap<CallString,SymbolicAddressMap> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<CallString,SymbolicAddressMap> input,Interpreter<CallString,SymbolicAddressMap> interpreter,Map<InstructionHandle,ContextMap<CallString,SymbolicAddressMap>> state){
  Context context=new Context(input.getContext());
  SymbolicAddressMap in=input.get(context.callString);
  ContextMap<CallString,SymbolicAddressMap> retval=new ContextMap<CallString,SymbolicAddressMap>(context,input);
  Instruction instruction=stmt.getInstruction();
  int newStackPtr=context.stackPtr + instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      retval.put(context.callString,in.cloneFilterStack(newStackPtr));
    }
  break;
case Constants.ACONST_NULL:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.LDC:
case Constants.LDC_W:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.LDC2_W:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
result.putStack(instr.getIndex(),in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
result.putStack(context.stackPtr,in.getStack(instr.getIndex()));
retval.put(context.callString,result);
}
break;
case Constants.ARRAYLENGTH:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
retval.put(context.callString,SymbolicAddressMap.top());
}
 else {
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
objects.put(stmt,input);
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
BoundedSet<SymbolicAddress> objectMapping=in.getStack(context.stackPtr - 1);
BoundedSet<SymbolicAddress> newMapping;
if (objectMapping.isSaturated()) {
newMapping=bsFactory.top();
}
 else {
newMapping=bsFactory.empty();
for (SymbolicAddress addr : objectMapping.getSet()) {
newMapping.add(addr.access(instr.getFieldName(context.constPool)));
}
}
result.putStack(context.stackPtr - 1,newMapping);
}
retval.put(context.callString,result);
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
retval.put(context.callString,SymbolicAddressMap.top());
}
 else {
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
BoundedSet<SymbolicAddress> newMapping=bsFactory.empty();
newMapping.add(SymbolicAddress.staticField(instr.getFieldName(context.constPool)));
result.putStack(context.stackPtr,newMapping);
}
retval.put(context.callString,result);
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.AASTORE:
{
retval.put(context.callString,SymbolicAddressMap.top());
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.AALOAD:
{
retval.put(context.callString,SymbolicAddressMap.top());
}
break;
case Constants.DUP:
{
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
result.putStack(context.stackPtr,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.DUP_X1:
{
SymbolicAddressMap result=in.cloneFilterStack(context.stackPtr - 2);
result.putStack(context.stackPtr - 2,in.getStack(context.stackPtr - 1));
result.putStack(context.stackPtr - 1,in.getStack(context.stackPtr - 2));
result.putStack(context.stackPtr,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.DUP2:
{
SymbolicAddressMap result=in.cloneFilterStack(context.stackPtr);
result.putStack(context.stackPtr,in.getStack(context.stackPtr - 2));
result.putStack(context.stackPtr + 1,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.POP:
case Constants.POP2:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IINC:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IADD:
case Constants.ISUB:
case Constants.INEG:
case Constants.IUSHR:
case Constants.ISHR:
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.MONITORENTER:
retval.put(context.callString,SymbolicAddressMap.top());
break;
case Constants.MONITOREXIT:
retval.put(context.callString,SymbolicAddressMap.top());
break;
case Constants.CHECKCAST:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.INSTANCEOF:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.NEW:
{
retval.put(context.callString,SymbolicAddressMap.top());
}
break;
case Constants.NEWARRAY:
{
retval.put(context.callString,SymbolicAddressMap.top());
}
break;
case Constants.ANEWARRAY:
{
retval.put(context.callString,SymbolicAddressMap.top());
}
break;
case Constants.MULTIANEWARRAY:
{
retval.put(context.callString,SymbolicAddressMap.top());
}
break;
case Constants.GOTO:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
retval.put(context.callString,new SymbolicAddressMap(bsFactory));
if (receivers == null) {
String errMsg=context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"";
throw new AssertionError(errMsg);
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
{
SymbolicAddressMap result=in.cloneFilterStack(0);
result.putStack(0,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
objects.put(stmt,retval);
}
break;
case Constants.RETURN:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IRETURN:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
default :
System.err.println(""String_Node_Str"" + stmt);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
}
if (DEBUG_PRINT) {
System.out.println(""String_Node_Str"" + context + ""String_Node_Str""+ stmt);
System.out.println(""String_Node_Str"" + context.stackPtr + ""String_Node_Str""+ newStackPtr);
System.out.println(""String_Node_Str"");
input.get(context.callString).print(System.out,4);
System.out.println(""String_Node_Str"");
retval.get(context.callString).print(System.out,4);
}
context.stackPtr=newStackPtr;
return retval;
}",0.9923704013377926
6236,"private void doInvoke(String methodName,InstructionHandle stmt,Context context,ContextMap<CallString,SymbolicAddressMap> input,Interpreter<CallString,SymbolicAddressMap> interpreter,Map<InstructionHandle,ContextMap<CallString,SymbolicAddressMap>> state,ContextMap<CallString,SymbolicAddressMap> retval){
  DFAAppInfo p=interpreter.getProgram();
  MethodInfo mi=p.getMethod(methodName);
  MethodGen method=mi.getMethodGen();
  methodName=method.getClassName() + ""String_Node_Str"" + method.getName()+ method.getSignature();
  if (method.isNative()) {
    handleNative(method,context,input,retval);
  }
 else {
    int varPtr=context.stackPtr - MethodHelper.getArgSize(method);
    Context c=new Context(context);
    c.stackPtr=method.getMaxLocals();
    c.constPool=method.getConstantPool();
    if (method.isSynchronized()) {
      c.syncLevel=context.syncLevel + 1;
    }
    c.method=methodName;
    c.callString=c.callString.push(p.getMethod(context.method),stmt.getPosition(),CALLSTRING_LENGTH);
    SymbolicAddressMap in=input.get(context.callString);
    SymbolicAddressMap out=in.cloneInvoke(varPtr);
    HashMap<CallString,SymbolicAddressMap> initialMap=new HashMap<CallString,SymbolicAddressMap>();
    ContextMap<CallString,SymbolicAddressMap> tmpresult=new ContextMap<CallString,SymbolicAddressMap>(c,initialMap);
    tmpresult.put(c.callString,out);
    InstructionHandle entry=mi.getMethodGen().getInstructionList().getStart();
    state.put(entry,join(state.get(entry),tmpresult));
    Map<InstructionHandle,ContextMap<CallString,SymbolicAddressMap>> r=interpreter.interpret(c,entry,state,false);
    SymbolicAddressMap ctxInfo=retval.get(context.callString);
    InstructionHandle exit=mi.getMethodGen().getInstructionList().getEnd();
    if (r.get(exit) != null) {
      SymbolicAddressMap returned=r.get(exit).get(c.callString);
      if (returned != null) {
        ctxInfo.joinReturned(returned,varPtr);
      }
    }
    ctxInfo.addStackUpto(in,context.stackPtr - MethodHelper.getArgSize(method));
  }
}","private void doInvoke(String methodName,InstructionHandle stmt,Context context,ContextMap<CallString,SymbolicAddressMap> input,Interpreter<CallString,SymbolicAddressMap> interpreter,Map<InstructionHandle,ContextMap<CallString,SymbolicAddressMap>> state,ContextMap<CallString,SymbolicAddressMap> retval){
  DFAAppInfo p=interpreter.getProgram();
  MethodInfo mi=p.getMethod(methodName);
  MethodGen method=mi.getMethodGen();
  methodName=method.getClassName() + ""String_Node_Str"" + method.getName()+ method.getSignature();
  if (method.isNative()) {
    handleNative(method,context,input,retval);
  }
 else {
    int varPtr=context.stackPtr - MethodHelper.getArgSize(method);
    Context c=new Context(context);
    c.stackPtr=method.getMaxLocals();
    c.constPool=method.getConstantPool();
    if (method.isSynchronized()) {
      c.syncLevel=context.syncLevel + 1;
    }
    c.method=methodName;
    c.callString=c.callString.push(p.getMethod(context.method),stmt.getPosition(),CALLSTRING_LENGTH);
    SymbolicAddressMap in=input.get(context.callString);
    SymbolicAddressMap out=in.cloneInvoke(varPtr);
    HashMap<CallString,SymbolicAddressMap> initialMap=new HashMap<CallString,SymbolicAddressMap>();
    ContextMap<CallString,SymbolicAddressMap> tmpresult=new ContextMap<CallString,SymbolicAddressMap>(c,initialMap);
    tmpresult.put(c.callString,out);
    InstructionHandle entry=mi.getMethodGen().getInstructionList().getStart();
    state.put(entry,join(state.get(entry),tmpresult));
    Map<InstructionHandle,ContextMap<CallString,SymbolicAddressMap>> r=interpreter.interpret(c,entry,state,false);
    SymbolicAddressMap ctxInfo=retval.get(context.callString);
    InstructionHandle exit=mi.getMethodGen().getInstructionList().getEnd();
    if (r.get(exit) != null) {
      SymbolicAddressMap returned=r.get(exit).get(c.callString);
      if (returned != null) {
        ctxInfo.joinReturned(returned,varPtr);
      }
 else {
        System.err.println(""String_Node_Str"");
      }
    }
 else {
      System.err.println(""String_Node_Str"");
    }
    ctxInfo.addStackUpto(in,context.stackPtr - MethodHelper.getArgSize(method));
  }
}",0.9707293666026872
6237,"public ContextMap<CallString,SymbolicAddressMap> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<CallString,SymbolicAddressMap> input,Interpreter<CallString,SymbolicAddressMap> interpreter,Map<InstructionHandle,ContextMap<CallString,SymbolicAddressMap>> state){
  Context context=new Context(input.getContext());
  SymbolicAddressMap in=input.get(context.callString);
  ContextMap<CallString,SymbolicAddressMap> retval=new ContextMap<CallString,SymbolicAddressMap>(context,input);
  Instruction instruction=stmt.getInstruction();
  int newStackPtr=context.stackPtr + instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      retval.put(context.callString,in.cloneFilterStack(newStackPtr));
    }
  break;
case Constants.ACONST_NULL:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.LDC:
case Constants.LDC_W:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.LDC2_W:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
result.putStack(instr.getIndex(),in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
result.putStack(context.stackPtr,in.getStack(instr.getIndex()));
retval.put(context.callString,result);
}
break;
case Constants.ARRAYLENGTH:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
retval.put(context.callString,SymbolicAddressMap.TOP);
}
 else {
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
objects.put(stmt,input);
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
BoundedSet<SymbolicAddress> objectMapping=in.getStack(context.stackPtr - 1);
BoundedSet<SymbolicAddress> newMapping;
if (objectMapping == bsFactory.top()) {
newMapping=bsFactory.top();
}
 else {
newMapping=bsFactory.empty();
for (SymbolicAddress addr : objectMapping.getSet()) {
newMapping.add(addr.access(instr.getFieldName(context.constPool)));
}
}
result.putStack(context.stackPtr - 1,newMapping);
}
retval.put(context.callString,result);
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
retval.put(context.callString,SymbolicAddressMap.TOP);
}
 else {
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
BoundedSet<SymbolicAddress> newMapping=bsFactory.empty();
newMapping.add(SymbolicAddress.staticField(instr.getFieldName(context.constPool)));
result.putStack(context.stackPtr,newMapping);
}
retval.put(context.callString,result);
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.AASTORE:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.AALOAD:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.DUP:
{
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
result.putStack(context.stackPtr,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.DUP_X1:
{
SymbolicAddressMap result=in.cloneFilterStack(context.stackPtr - 2);
result.putStack(context.stackPtr - 2,in.getStack(context.stackPtr - 1));
result.putStack(context.stackPtr - 1,in.getStack(context.stackPtr - 2));
result.putStack(context.stackPtr,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.DUP2:
{
SymbolicAddressMap result=in.cloneFilterStack(context.stackPtr);
result.putStack(context.stackPtr,in.getStack(context.stackPtr - 2));
result.putStack(context.stackPtr + 1,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.POP:
case Constants.POP2:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IINC:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IADD:
case Constants.ISUB:
case Constants.INEG:
case Constants.IUSHR:
case Constants.ISHR:
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.MONITORENTER:
retval.put(context.callString,SymbolicAddressMap.TOP);
break;
case Constants.MONITOREXIT:
retval.put(context.callString,SymbolicAddressMap.TOP);
break;
case Constants.CHECKCAST:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.INSTANCEOF:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.NEW:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.NEWARRAY:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.ANEWARRAY:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.MULTIANEWARRAY:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.GOTO:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
String errMsg=context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"";
throw new AssertionError(errMsg);
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
{
SymbolicAddressMap result=in.cloneFilterStack(0);
result.putStack(0,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
objects.put(stmt,retval);
}
break;
case Constants.RETURN:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IRETURN:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
default :
System.err.println(""String_Node_Str"" + stmt);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
}
if (DEBUG_PRINT) {
System.out.println(""String_Node_Str"" + context + ""String_Node_Str""+ stmt);
System.out.println(""String_Node_Str"" + context.stackPtr + ""String_Node_Str""+ newStackPtr);
retval.get(context.callString).print(System.out,4);
}
context.stackPtr=newStackPtr;
return retval;
}","public ContextMap<CallString,SymbolicAddressMap> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<CallString,SymbolicAddressMap> input,Interpreter<CallString,SymbolicAddressMap> interpreter,Map<InstructionHandle,ContextMap<CallString,SymbolicAddressMap>> state){
  Context context=new Context(input.getContext());
  SymbolicAddressMap in=input.get(context.callString);
  ContextMap<CallString,SymbolicAddressMap> retval=new ContextMap<CallString,SymbolicAddressMap>(context,input);
  Instruction instruction=stmt.getInstruction();
  int newStackPtr=context.stackPtr + instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      retval.put(context.callString,in.cloneFilterStack(newStackPtr));
    }
  break;
case Constants.ACONST_NULL:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.LDC:
case Constants.LDC_W:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.LDC2_W:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
result.putStack(instr.getIndex(),in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
result.putStack(context.stackPtr,in.getStack(instr.getIndex()));
retval.put(context.callString,result);
}
break;
case Constants.ARRAYLENGTH:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
retval.put(context.callString,SymbolicAddressMap.TOP);
}
 else {
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
objects.put(stmt,input);
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
BoundedSet<SymbolicAddress> objectMapping=in.getStack(context.stackPtr - 1);
BoundedSet<SymbolicAddress> newMapping;
if (objectMapping.isSaturated()) {
newMapping=bsFactory.top();
}
 else {
newMapping=bsFactory.empty();
for (SymbolicAddress addr : objectMapping.getSet()) {
newMapping.add(addr.access(instr.getFieldName(context.constPool)));
}
}
result.putStack(context.stackPtr - 1,newMapping);
}
retval.put(context.callString,result);
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
retval.put(context.callString,SymbolicAddressMap.TOP);
}
 else {
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
BoundedSet<SymbolicAddress> newMapping=bsFactory.empty();
newMapping.add(SymbolicAddress.staticField(instr.getFieldName(context.constPool)));
result.putStack(context.stackPtr,newMapping);
}
retval.put(context.callString,result);
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.AASTORE:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.AALOAD:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.DUP:
{
SymbolicAddressMap result=in.cloneFilterStack(newStackPtr);
result.putStack(context.stackPtr,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.DUP_X1:
{
SymbolicAddressMap result=in.cloneFilterStack(context.stackPtr - 2);
result.putStack(context.stackPtr - 2,in.getStack(context.stackPtr - 1));
result.putStack(context.stackPtr - 1,in.getStack(context.stackPtr - 2));
result.putStack(context.stackPtr,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.DUP2:
{
SymbolicAddressMap result=in.cloneFilterStack(context.stackPtr);
result.putStack(context.stackPtr,in.getStack(context.stackPtr - 2));
result.putStack(context.stackPtr + 1,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
}
break;
case Constants.POP:
case Constants.POP2:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IINC:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IADD:
case Constants.ISUB:
case Constants.INEG:
case Constants.IUSHR:
case Constants.ISHR:
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.MONITORENTER:
retval.put(context.callString,SymbolicAddressMap.TOP);
break;
case Constants.MONITOREXIT:
retval.put(context.callString,SymbolicAddressMap.TOP);
break;
case Constants.CHECKCAST:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.INSTANCEOF:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.NEW:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.NEWARRAY:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.ANEWARRAY:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.MULTIANEWARRAY:
{
retval.put(context.callString,SymbolicAddressMap.TOP);
}
break;
case Constants.GOTO:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
String errMsg=context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"";
throw new AssertionError(errMsg);
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
{
SymbolicAddressMap result=in.cloneFilterStack(0);
result.putStack(0,in.getStack(context.stackPtr - 1));
retval.put(context.callString,result);
objects.put(stmt,retval);
}
break;
case Constants.RETURN:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
case Constants.IRETURN:
{
objects.put(stmt,input);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
}
break;
default :
System.err.println(""String_Node_Str"" + stmt);
retval.put(context.callString,in.cloneFilterStack(newStackPtr));
break;
}
if (DEBUG_PRINT) {
System.out.println(""String_Node_Str"" + context + ""String_Node_Str""+ stmt);
System.out.println(""String_Node_Str"" + context.stackPtr + ""String_Node_Str""+ newStackPtr);
System.out.println(""String_Node_Str"");
input.get(context.callString).print(System.out,4);
System.out.println(""String_Node_Str"");
retval.get(context.callString).print(System.out,4);
}
context.stackPtr=newStackPtr;
return retval;
}",0.9910176476804397
6238,"public boolean isSubset(BoundedSet<V> otherEntry){
  if (otherEntry.isTop())   return true;
 else   if (this.isTop())   return false;
  return otherEntry.getSet().containsAll(this.getSet());
}","public boolean isSubset(BoundedSet<V> otherEntry){
  if (otherEntry.isSaturated())   return true;
 else   if (this.isSaturated())   return false;
  return otherEntry.getSet().containsAll(this.getSet());
}",0.9393939393939394
6239,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  BoundedSetImpl other=(BoundedSetImpl)obj;
  if (this.getSize() != other.getSize())   return false;
  if (this.isSaturated)   return other.isSaturated;
 else   return setImpl.equals(other.setImpl);
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  BoundedSetImpl other=(BoundedSetImpl)obj;
  if (this.isSaturated)   return other.isSaturated;
  if (this.getSize() != other.getSize())   return false;
 else   return setImpl.equals(other.setImpl);
}",0.8579234972677595
6240,"private BoundedSetImpl(HashSet<V> joinedSet){
  setImpl=joinedSet;
}","private BoundedSetImpl(HashSet<V> set){
  if (set.size() > limit) {
    this.isSaturated=true;
  }
 else {
    setImpl=set;
  }
}",0.5482233502538071
6241,"public BoundedSet<V> join(BoundedSet<V> other){
  HashSet<V> joinedSet=new HashSet<V>();
  joinedSet.addAll(this.getSet());
  if (other == null)   return new BoundedSetImpl(joinedSet);
  joinedSet.addAll(other.getSet());
  if (joinedSet.size() >= limit) {
    return top;
  }
 else {
    return new BoundedSetImpl(joinedSet);
  }
}","public BoundedSet<V> join(BoundedSet<V> other){
  if (this.isSaturated())   return this;
 else   if (other.isSaturated())   return other;
  HashSet<V> joinedSet=new HashSet<V>();
  joinedSet.addAll(this.getSet());
  if (other != null)   joinedSet.addAll(other.getSet());
  BoundedSetImpl r=new BoundedSetImpl(joinedSet);
  System.out.println(String.format(""String_Node_Str"",this,other,r));
  return r;
}",0.5095367847411444
6242,"public BoundedSet<SymbolicAddress> getTopOfStack(){
  return map.get(new Location(topOfStack));
}","public BoundedSet<SymbolicAddress> getTopOfStack(){
  if (this == TOP)   return bsFactory.top();
  return map.get(new Location(topOfStack));
}",0.8117154811715481
6243,"public void put(Location l,BoundedSet<SymbolicAddress> bs){
  if (!l.isHeapLoc() && l.stackLoc > this.topOfStack) {
    this.topOfStack=l.stackLoc;
  }
  this.map.put(l,bs);
}","public void put(Location l,BoundedSet<SymbolicAddress> bs){
  if (this == TOP)   return;
  if (!l.isHeapLoc() && l.stackLoc > this.topOfStack) {
    this.topOfStack=l.stackLoc;
  }
  this.map.put(l,bs);
}",0.9234828496042216
6244,"public void putStack(int index,BoundedSet<SymbolicAddress> bs){
  this.put(new Location(index),bs);
}","public void putStack(int index,BoundedSet<SymbolicAddress> bs){
  if (this == TOP)   return;
  this.put(new Location(index),bs);
}",0.8744588744588745
6245,"public BoundedSet<SymbolicAddress> getStack(int index){
  if (this == TOP)   throw new AssertionError(""String_Node_Str"");
  Location stackLoc=new Location(index);
  BoundedSet<SymbolicAddress> val=map.get(stackLoc);
  if (val == null)   throw new AssertionError(""String_Node_Str"" + index);
  return val;
}","public BoundedSet<SymbolicAddress> getStack(int index){
  if (this == TOP)   return bsFactory.top();
  Location stackLoc=new Location(index);
  BoundedSet<SymbolicAddress> val=map.get(stackLoc);
  if (val == null)   throw new AssertionError(""String_Node_Str"" + index);
  return val;
}",0.4617996604414261
6246,"public ContextMap<CallString,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<CallString,Map<Location,ValueMapping>> input,Interpreter<CallString,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<CallString,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<CallString,Map<Location,ValueMapping>> retval=new ContextMap<CallString,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
  if (stmt.hasTargeters() && context.method.startsWith(""String_Node_Str"")) {
    for (int i=0; i < stmt.getTargeters().length; i++) {
      InstructionTargeter targeter=stmt.getTargeters()[i];
      if (targeter instanceof BranchInstruction) {
        checkScope(context,stmt);
        break;
      }
    }
  }
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
ValueMapping v=new ValueMapping(in.get(l),true);
if (in.get(l).source == null || in.get(l).source.stackLoc != index) {
v.defscope=ValueMapping.scope;
}
result.put(new Location(index),v);
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
filterSet(in,result,context.stackPtr);
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
filterSet(in,result,context.stackPtr - 1);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
filterSet(in,result,context.stackPtr - 1);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc < 0 && !receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
filterSet(in,result,context.stackPtr - 3);
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
filterSet(in,result,context.stackPtr - 2);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
filterSet(in,result,context.stackPtr - 1);
}
break;
case Constants.POP2:
{
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
Interval operand=new Interval(increment,increment);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
filterSet(in,result,context.stackPtr - 1);
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
{
result=in;
retval.put(context.callString,result);
}
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
filterSet(in,result,context.stackPtr - 1);
boolean valid=false;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
recordSize(stmt,context,in.get(l).assigned);
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
recordSize(stmt,context,v.assigned);
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
filterSet(in,result,context.stackPtr - 1);
boolean valid=false;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
recordSize(stmt,context,in.get(l).assigned);
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
recordSize(stmt,context,v.assigned);
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
filterSet(in,result,context.stackPtr - dim);
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
Interval[] size=new Interval[dim];
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
boolean valid=false;
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
if (size[i - 1] != null) {
size[i - 1].join(in.get(l).assigned);
}
 else {
size[i - 1]=in.get(l).assigned;
}
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
size[i - 1]=v.assigned;
}
}
recordSize(stmt,context,size);
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
checkScope(context,stmt);
filterSet(in,result,context.stackPtr - 1);
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
checkScope(context,stmt);
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
checkScope(context,stmt);
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
checkScope(context,stmt);
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
result=in;
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
filterSet(in,result,0);
}
break;
case Constants.IRETURN:
{
filterSet(in,result,0);
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}","public ContextMap<CallString,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<CallString,Map<Location,ValueMapping>> input,Interpreter<CallString,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<CallString,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<CallString,Map<Location,ValueMapping>> retval=new ContextMap<CallString,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
ValueMapping v=new ValueMapping(in.get(l),true);
if (in.get(l).source == null || in.get(l).source.stackLoc != index) {
v.defscope=ValueMapping.scope;
}
result.put(new Location(index),v);
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
filterSet(in,result,context.stackPtr);
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
filterSet(in,result,context.stackPtr - 1);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
filterSet(in,result,context.stackPtr - 1);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc < 0 && !receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
filterSet(in,result,context.stackPtr - 3);
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
filterSet(in,result,context.stackPtr - 2);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
filterSet(in,result,context.stackPtr - 1);
}
break;
case Constants.POP2:
{
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
Interval operand=new Interval(increment,increment);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
filterSet(in,result,context.stackPtr - 1);
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
{
result=in;
retval.put(context.callString,result);
}
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
filterSet(in,result,context.stackPtr - 1);
boolean valid=false;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
recordSize(stmt,context,in.get(l).assigned);
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
recordSize(stmt,context,v.assigned);
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
filterSet(in,result,context.stackPtr - 1);
boolean valid=false;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
recordSize(stmt,context,in.get(l).assigned);
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
recordSize(stmt,context,v.assigned);
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
filterSet(in,result,context.stackPtr - dim);
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
Interval[] size=new Interval[dim];
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
boolean valid=false;
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
if (size[i - 1] != null) {
size[i - 1].join(in.get(l).assigned);
}
 else {
size[i - 1]=in.get(l).assigned;
}
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
size[i - 1]=v.assigned;
}
}
recordSize(stmt,context,size);
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
checkScope(context,stmt);
filterSet(in,result,context.stackPtr - 1);
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
checkScope(context,stmt);
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
checkScope(context,stmt);
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
checkScope(context,stmt);
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
result=in;
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
filterSet(in,result,0);
}
break;
case Constants.IRETURN:
{
filterSet(in,result,0);
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}",0.9925349847579272
6247,"public List<Type> getObjectFields(String className){
  List<Type> l=new LinkedList<Type>();
  ClassInfo cli=project.getWcetAppInfo().getClassInfo(className);
  if (cli.superClass != null) {
    l.addAll(getObjectFields(cli.superClass.toString()));
  }
  Field[] f=cli.clazz.getFields();
  for (int i=0; i < f.length; i++) {
    l.add(f[i].getType());
  }
  return l;
}","public List<Type> getObjectFields(String className){
  List<Type> l=new LinkedList<Type>();
  ClassInfo cli=project.getWcetAppInfo().getClassInfo(className);
  if (cli.superClass != null) {
    l.addAll(getObjectFields(cli.superClass.toString()));
  }
  Field[] f=cli.clazz.getFields();
  for (int i=0; i < f.length; i++) {
    if (!f[i].isStatic()) {
      l.add(f[i].getType());
    }
  }
  return l;
}",0.9533678756476685
6248,"private void checkScope(InstructionHandle stmt){
  if (scopes.get(stmt) == null) {
    ValueMapping.scope=++ValueMapping.scopeCnt;
    scopes.put(stmt,new Integer(ValueMapping.scope));
  }
}","private void checkScope(Context context,InstructionHandle stmt){
  if (scopes.get(stmt) == null) {
    scopes.put(stmt,new ContextMap<CallString,Integer>(context,new HashMap<CallString,Integer>()));
  }
  if (scopes.get(stmt).get(context.callString) == null) {
    ValueMapping.scope=++ValueMapping.scopeCnt;
    scopes.get(stmt).put(context.callString,new Integer(ValueMapping.scope));
  }
}",0.6254295532646048
6249,"public ContextMap<CallString,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<CallString,Map<Location,ValueMapping>> input,Interpreter<CallString,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<CallString,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<CallString,Map<Location,ValueMapping>> retval=new ContextMap<CallString,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
ValueMapping v=new ValueMapping(in.get(l),true);
if (in.get(l).source == null || in.get(l).source.stackLoc != index) {
v.defscope=ValueMapping.scope;
}
result.put(new Location(index),v);
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
filterSet(in,result,context.stackPtr);
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
filterSet(in,result,context.stackPtr - 1);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
filterSet(in,result,context.stackPtr - 1);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc < 0 && !receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
filterSet(in,result,context.stackPtr - 3);
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
filterSet(in,result,context.stackPtr - 2);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
filterSet(in,result,context.stackPtr - 1);
}
break;
case Constants.POP2:
{
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
Interval operand=new Interval(increment,increment);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
filterSet(in,result,context.stackPtr - 1);
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
{
result=in;
retval.put(context.callString,result);
}
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
filterSet(in,result,context.stackPtr - 1);
boolean valid=false;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
recordSize(stmt,context,in.get(l).assigned);
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
recordSize(stmt,context,v.assigned);
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
filterSet(in,result,context.stackPtr - 1);
boolean valid=false;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
recordSize(stmt,context,in.get(l).assigned);
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
recordSize(stmt,context,v.assigned);
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
filterSet(in,result,context.stackPtr - dim);
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
Interval[] size=new Interval[dim];
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
boolean valid=false;
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
if (size[i - 1] != null) {
size[i - 1].join(in.get(l).assigned);
}
 else {
size[i - 1]=in.get(l).assigned;
}
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
size[i - 1]=v.assigned;
}
}
recordSize(stmt,context,size);
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
checkScope(stmt);
filterSet(in,result,context.stackPtr - 1);
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
checkScope(stmt);
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
checkScope(stmt);
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
checkScope(stmt);
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
result=in;
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
filterSet(in,result,0);
}
break;
case Constants.IRETURN:
{
filterSet(in,result,0);
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}","public ContextMap<CallString,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<CallString,Map<Location,ValueMapping>> input,Interpreter<CallString,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<CallString,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<CallString,Map<Location,ValueMapping>> retval=new ContextMap<CallString,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
  if (stmt.hasTargeters() && context.method.startsWith(""String_Node_Str"")) {
    for (int i=0; i < stmt.getTargeters().length; i++) {
      InstructionTargeter targeter=stmt.getTargeters()[i];
      if (targeter instanceof BranchInstruction) {
        checkScope(context,stmt);
        break;
      }
    }
  }
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
ValueMapping v=new ValueMapping(in.get(l),true);
if (in.get(l).source == null || in.get(l).source.stackLoc != index) {
v.defscope=ValueMapping.scope;
}
result.put(new Location(index),v);
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
filterSet(in,result,context.stackPtr);
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
filterSet(in,result,context.stackPtr - 1);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
filterSet(in,result,context.stackPtr - 1);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc < 0 && !receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
filterSet(in,result,context.stackPtr - 3);
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
filterSet(in,result,context.stackPtr - 2);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
filterSet(in,result,context.stackPtr - 1);
}
break;
case Constants.POP2:
{
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
Interval operand=new Interval(increment,increment);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
filterSet(in,result,context.stackPtr - 1);
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
{
result=in;
retval.put(context.callString,result);
}
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
filterSet(in,result,context.stackPtr - 1);
boolean valid=false;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
recordSize(stmt,context,in.get(l).assigned);
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
recordSize(stmt,context,v.assigned);
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
filterSet(in,result,context.stackPtr - 1);
boolean valid=false;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
recordSize(stmt,context,in.get(l).assigned);
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
recordSize(stmt,context,v.assigned);
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
filterSet(in,result,context.stackPtr - dim);
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
Interval[] size=new Interval[dim];
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
boolean valid=false;
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
if (size[i - 1] != null) {
size[i - 1].join(in.get(l).assigned);
}
 else {
size[i - 1]=in.get(l).assigned;
}
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
size[i - 1]=v.assigned;
}
}
recordSize(stmt,context,size);
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
checkScope(context,stmt);
filterSet(in,result,context.stackPtr - 1);
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
checkScope(context,stmt);
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
checkScope(context,stmt);
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
checkScope(context,stmt);
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
result=in;
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
filterSet(in,result,0);
}
break;
case Constants.IRETURN:
{
filterSet(in,result,0);
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}",0.9917605515385908
6250,"public int getBound(DFAAppInfo program,InstructionHandle instr){
  ContextMap<CallString,Pair<ValueMapping>> r=bounds.get(instr);
  if (r == null) {
    return -1;
  }
  int maxValue=-1;
  for (Iterator<CallString> k=r.keySet().iterator(); k.hasNext(); ) {
    CallString callString=k.next();
    Pair<ValueMapping> bounds=r.get(callString);
    LoopBounds.ValueMapping first=bounds.getFirst();
    LoopBounds.ValueMapping second=bounds.getSecond();
    if (scopes.get(instr).intValue() <= first.defscope || scopes.get(instr).intValue() <= second.defscope) {
      return -1;
    }
    int val=ValueMapping.computeBound(first,second);
    if (val < 0) {
      return -1;
    }
 else {
      maxValue=Math.max(maxValue,val);
    }
  }
  return maxValue;
}","public int getBound(DFAAppInfo program,InstructionHandle instr){
  ContextMap<CallString,Pair<ValueMapping>> r=bounds.get(instr);
  if (r == null) {
    return -1;
  }
  int maxValue=-1;
  for (Iterator<CallString> k=r.keySet().iterator(); k.hasNext(); ) {
    CallString callString=k.next();
    Pair<ValueMapping> bounds=r.get(callString);
    LoopBounds.ValueMapping first=bounds.getFirst();
    LoopBounds.ValueMapping second=bounds.getSecond();
    InstructionHandle target=((BranchInstruction)instr.getInstruction()).getTarget();
    if (scopes.get(target) != null) {
      if (scopes.get(target).get(callString).intValue() <= first.defscope || scopes.get(target).get(callString).intValue() <= second.defscope) {
        return -1;
      }
    }
    if (scopes.get(instr).get(callString).intValue() <= first.defscope || scopes.get(instr).get(callString).intValue() <= second.defscope) {
      return -1;
    }
    int val=ValueMapping.computeBound(first,second);
    if (val < 0) {
      return -1;
    }
 else {
      maxValue=Math.max(maxValue,val);
    }
  }
  return maxValue;
}",0.7242128121606949
6251,"private void doInvoke(String methodName,InstructionHandle stmt,Context context,Map<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state,Map<List<HashedString>,Map<Location,ValueMapping>> result){
  DFAAppInfo p=interpreter.getProgram();
  MethodInfo mi=p.getMethod(methodName);
  MethodGen method=mi.getMethodGen();
  methodName=method.getClassName() + ""String_Node_Str"" + method.getName()+ method.getSignature();
  if (method.isNative()) {
    handleNative(method,context,input,result);
  }
 else {
    int varPtr=context.stackPtr - MethodHelper.getArgSize(method);
    Context c=new Context(context);
    c.stackPtr=method.getMaxLocals();
    c.constPool=method.getConstantPool();
    if (method.isSynchronized()) {
      c.syncLevel=context.syncLevel + 1;
    }
    c.method=methodName;
    c.callString=new LinkedList<HashedString>(context.callString);
    c.callString.add(new HashedString(context.method + ""String_Node_Str"" + stmt.getPosition()));
    while (c.callString.size() > CALLSTRING_LENGTH) {
      c.callString.removeFirst();
    }
    Map<Location,ValueMapping> in=input.get(context.callString);
    Map<Location,ValueMapping> out=new HashMap<Location,ValueMapping>();
    for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
      Location l=k.next();
      if (l.stackLoc < 0) {
        out.put(l,in.get(l));
      }
      if (l.stackLoc >= varPtr) {
        out.put(new Location(l.stackLoc - varPtr),new ValueMapping(in.get(l),false));
      }
    }
    ContextMap<List<HashedString>,Map<Location,ValueMapping>> tmpresult=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(c,new HashMap<List<HashedString>,Map<Location,ValueMapping>>());
    tmpresult.put(c.callString,out);
    InstructionHandle entry=mi.getMethodGen().getInstructionList().getStart();
    state.put(entry,join(tmpresult,state.get(entry)));
    Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> r=interpreter.interpret(c,entry,state,false);
    InstructionHandle exit=mi.getMethodGen().getInstructionList().getEnd();
    if (r.get(exit) != null) {
      Map<Location,ValueMapping> returned=r.get(exit).get(c.callString);
      if (returned != null) {
        for (Iterator<Location> i=returned.keySet().iterator(); i.hasNext(); ) {
          Location l=i.next();
          if (l.stackLoc < 0) {
            ValueMapping m=new ValueMapping(returned.get(l),true);
            m.join(result.get(context.callString).get(l));
            result.get(context.callString).put(l,m);
          }
          if (l.stackLoc >= 0) {
            ValueMapping m=new ValueMapping(returned.get(l),false);
            Location loc=new Location(l.stackLoc + varPtr);
            m.join(result.get(context.callString).get(loc));
            result.get(context.callString).put(loc,m);
          }
        }
      }
    }
    for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
      Location l=i.next();
      if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - MethodHelper.getArgSize(method)) {
        result.get(context.callString).put(l,new ValueMapping(in.get(l),true));
      }
    }
  }
}","private void doInvoke(String methodName,InstructionHandle stmt,Context context,Map<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state,Map<List<HashedString>,Map<Location,ValueMapping>> result){
  DFAAppInfo p=interpreter.getProgram();
  MethodInfo mi=p.getMethod(methodName);
  MethodGen method=mi.getMethodGen();
  methodName=method.getClassName() + ""String_Node_Str"" + method.getName()+ method.getSignature();
  if (method.isNative()) {
    handleNative(method,context,input,result);
  }
 else {
    int varPtr=context.stackPtr - MethodHelper.getArgSize(method);
    Context c=new Context(context);
    c.stackPtr=method.getMaxLocals();
    c.constPool=method.getConstantPool();
    if (method.isSynchronized()) {
      c.syncLevel=context.syncLevel + 1;
    }
    c.method=methodName;
    c.callString=new LinkedList<HashedString>(context.callString);
    c.callString.add(new HashedString(context.method + ""String_Node_Str"" + stmt.getPosition()));
    while (c.callString.size() > CALLSTRING_LENGTH) {
      c.callString.removeFirst();
    }
    Map<Location,ValueMapping> in=input.get(context.callString);
    Map<Location,ValueMapping> out=new HashMap<Location,ValueMapping>();
    for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
      Location l=k.next();
      if (l.stackLoc < 0) {
        out.put(l,in.get(l));
      }
      if (l.stackLoc >= varPtr) {
        out.put(new Location(l.stackLoc - varPtr),new ValueMapping(in.get(l),false));
      }
    }
    ContextMap<List<HashedString>,Map<Location,ValueMapping>> tmpresult=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(c,new HashMap<List<HashedString>,Map<Location,ValueMapping>>());
    tmpresult.put(c.callString,out);
    InstructionHandle entry=mi.getMethodGen().getInstructionList().getStart();
    state.put(entry,join(state.get(entry),tmpresult));
    Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> r=interpreter.interpret(c,entry,state,false);
    InstructionHandle exit=mi.getMethodGen().getInstructionList().getEnd();
    if (r.get(exit) != null) {
      Map<Location,ValueMapping> returned=r.get(exit).get(c.callString);
      if (returned != null) {
        for (Iterator<Location> i=returned.keySet().iterator(); i.hasNext(); ) {
          Location l=i.next();
          if (l.stackLoc < 0) {
            ValueMapping m=new ValueMapping(returned.get(l),true);
            m.join(result.get(context.callString).get(l));
            result.get(context.callString).put(l,m);
          }
          if (l.stackLoc >= 0) {
            ValueMapping m=new ValueMapping(returned.get(l),false);
            Location loc=new Location(l.stackLoc + varPtr);
            m.join(result.get(context.callString).get(loc));
            result.get(context.callString).put(loc,m);
          }
        }
      }
    }
    for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
      Location l=i.next();
      if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - MethodHelper.getArgSize(method)) {
        result.get(context.callString).put(l,new ValueMapping(in.get(l),true));
      }
    }
  }
}",0.996964177292046
6252,"public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
ValueMapping v=new ValueMapping(in.get(l),true);
if (in.get(l).source == null || in.get(l).source.stackLoc != index) {
v.defscope=ValueMapping.scope;
}
result.put(new Location(index),v);
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc < 0 && !receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.POP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
Interval operand=new Interval(increment,increment);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
{
result=in;
retval.put(context.callString,result);
}
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
recordSize(stmt,context,in.get(l).assigned);
}
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
recordSize(stmt,context,in.get(l).assigned);
}
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - dim) {
result.put(l,in.get(l));
}
}
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
if (scopes.get(stmt) == null) {
ValueMapping.scope=++ValueMapping.scopeCnt;
scopes.put(stmt,new Integer(ValueMapping.scope));
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
if (scopes.get(stmt) == null) {
ValueMapping.scope=++ValueMapping.scopeCnt;
scopes.put(stmt,new Integer(ValueMapping.scope));
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
if (scopes.get(stmt) == null) {
ValueMapping.scope=++ValueMapping.scopeCnt;
scopes.put(stmt,new Integer(ValueMapping.scope));
}
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
if (scopes.get(stmt) == null) {
ValueMapping.scope=++ValueMapping.scopeCnt;
scopes.put(stmt,new Integer(ValueMapping.scope));
}
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IRETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}","public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
ValueMapping v=new ValueMapping(in.get(l),true);
if (in.get(l).source == null || in.get(l).source.stackLoc != index) {
v.defscope=ValueMapping.scope;
}
result.put(new Location(index),v);
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
filterSet(in,result,context.stackPtr);
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
filterSet(in,result,context.stackPtr - 1);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
filterSet(in,result,context.stackPtr - 1);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc < 0 && !receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
filterSet(in,result,context.stackPtr - 3);
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
filterSet(in,result,context.stackPtr - 2);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
filterSet(in,result,context.stackPtr - 1);
}
break;
case Constants.POP2:
{
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
Interval operand=new Interval(increment,increment);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
filterSet(in,result,context.stackPtr - 1);
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
{
result=in;
retval.put(context.callString,result);
}
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
filterSet(in,result,context.stackPtr - 1);
boolean valid=false;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
recordSize(stmt,context,in.get(l).assigned);
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
recordSize(stmt,context,v.assigned);
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
filterSet(in,result,context.stackPtr - 1);
boolean valid=false;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
recordSize(stmt,context,in.get(l).assigned);
valid=true;
}
}
if (!valid) {
ValueMapping v=new ValueMapping();
result.put(new Location(name + ""String_Node_Str""),v);
recordSize(stmt,context,v.assigned);
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
filterSet(in,result,context.stackPtr - dim);
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
checkScope(stmt);
filterSet(in,result,context.stackPtr - 1);
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
checkScope(stmt);
filterSet(in,result,context.stackPtr - 2);
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
checkScope(stmt);
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
checkScope(stmt);
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
result=in;
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
filterSet(in,result,0);
}
break;
case Constants.IRETURN:
{
filterSet(in,result,0);
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}",0.924980482150039
6253,"public int getExecutionTime(MethodInfo context,InstructionHandle ih){
  int opcode=ih.getInstruction().getOpcode();
  if (opcode == Constants.NEW) {
    NEW insn=(NEW)ih.getInstruction();
    ObjectType type=insn.getLoadClassType(context.getConstantPoolGen());
    return computeObjectSize(getFieldSize(getObjectFields(type.getClassName())));
  }
 else   if (opcode == Constants.NEWARRAY || opcode == Constants.ANEWARRAY) {
    int srcLine=context.getMethod().getLineNumberTable().getSourceLine(ih.getPosition());
    LoopBound annotated=null;
    try {
      Map<Integer,LoopBound> annots=project.getAnnotations(context.getCli());
      annotated=annots.get(new Integer(srcLine));
      if (annotated == null) {
        Project.logger.info(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
      }
    }
 catch (    Exception exc) {
      Project.logger.warn(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
    }
    Interval analyzed=null;
    if (sizes == null && project.getDfaLoopBounds() != null) {
      sizes=project.getDfaLoopBounds().getArraySizes();
    }
    if (sizes == null) {
      Project.logger.info(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
    }
 else {
      List<HashedString> callString=new LinkedList<HashedString>();
      analyzed=sizes.get(ih).get(callString);
      if (analyzed == null) {
        Project.logger.info(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
      }
    }
    if (analyzed.hasUb()) {
      if (annotated != null) {
        if (annotated.getUpperBound() > analyzed.getUb()) {
          Project.logger.warn(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
        }
        if (annotated.getUpperBound() < analyzed.getUb()) {
          Project.logger.warn(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
        }
        if (annotated.getUpperBound() == analyzed.getUb()) {
          Project.logger.info(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
        }
        return computeArraySize(Math.max(annotated.getUpperBound(),analyzed.getUb()));
      }
 else {
        return computeArraySize(analyzed.getUb());
      }
    }
 else {
      if (annotated != null) {
        return computeArraySize(annotated.getUpperBound());
      }
 else {
        Project.logger.error(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine+ ""String_Node_Str"");
        return computeArraySize(4096);
      }
    }
  }
 else {
    return 0;
  }
}","public int getExecutionTime(MethodInfo context,InstructionHandle ih){
  int opcode=ih.getInstruction().getOpcode();
  if (opcode == Constants.NEW) {
    NEW insn=(NEW)ih.getInstruction();
    ObjectType type=insn.getLoadClassType(context.getConstantPoolGen());
    return computeObjectSize(getFieldSize(getObjectFields(type.getClassName())));
  }
 else   if (opcode == Constants.NEWARRAY || opcode == Constants.ANEWARRAY) {
    int srcLine=context.getMethod().getLineNumberTable().getSourceLine(ih.getPosition());
    LoopBound annotated=null;
    try {
      Map<Integer,LoopBound> annots=project.getAnnotations(context.getCli());
      annotated=annots.get(new Integer(srcLine));
      if (annotated == null) {
        Project.logger.info(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
      }
    }
 catch (    Exception exc) {
      Project.logger.warn(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
    }
    Interval analyzed=null;
    if (sizes == null && project.getDfaLoopBounds() != null) {
      sizes=project.getDfaLoopBounds().getArraySizes();
    }
    if (sizes == null) {
      Project.logger.info(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
    }
 else {
      List<HashedString> callString=new LinkedList<HashedString>();
      ContextMap<List<HashedString>,Interval> t=sizes.get(ih);
      if (t == null) {
        Project.logger.info(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
      }
 else {
        analyzed=t.get(callString);
        if (analyzed == null) {
          Project.logger.info(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
        }
      }
    }
    if (analyzed != null && analyzed.hasUb()) {
      if (annotated != null) {
        if (annotated.getUpperBound() > analyzed.getUb()) {
          Project.logger.warn(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
        }
        if (annotated.getUpperBound() < analyzed.getUb()) {
          Project.logger.warn(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
        }
        if (annotated.getUpperBound() == analyzed.getUb()) {
          Project.logger.info(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine);
        }
        return computeArraySize(Math.max(annotated.getUpperBound(),analyzed.getUb()));
      }
 else {
        return computeArraySize(analyzed.getUb());
      }
    }
 else {
      if (annotated != null) {
        return computeArraySize(annotated.getUpperBound());
      }
 else {
        Project.logger.error(""String_Node_Str"" + context + ""String_Node_Str""+ srcLine+ ""String_Node_Str"");
        return computeArraySize(4096);
      }
    }
  }
 else {
    return 0;
  }
}",0.9535651836020984
6254,"private static int f_multianewarray(){
  JVMHelp.wr(""String_Node_Str"");
  JVMHelp.wr(""String_Node_Str"");
  int ret=0;
  int i, j;
  int sp=Native.getSP();
  int fp=sp - 4;
  int pc=Native.rdIntMem(fp + 1);
  pc+=2;
  int mp=Native.rdIntMem(fp + 4);
  int start=Native.rdMem(mp) >>> 10;
  int dim=Native.rdMem(start + (pc >> 2));
  for (i=(pc & 0x03); i < 3; ++i)   dim>>=8;
  dim&=0xff;
  Native.wrIntMem(pc + 1,fp + 1);
  sp=Native.rdIntMem(fp);
  sp-=dim;
  Native.wrIntMem(sp,fp);
  if (dim != 2) {
    System.out.print(dim);
    System.out.println(""String_Node_Str"");
    JVMHelp.noim();
  }
  int cnt=Native.rdIntMem(sp + 1);
  int cnt2=Native.rdIntMem(sp + 2);
  ret=f_anewarray(cnt,0);
  int ref=Native.rdMem(ret);
  for (i=0; i < cnt; ++i) {
    Native.wrMem(f_newarray(cnt2,10),ref + i);
  }
  return ret;
}","private static int f_multianewarray(){
  JVMHelp.wr(""String_Node_Str"");
  JVMHelp.wr(""String_Node_Str"");
  int ret=0;
  int i, j;
  int sp=Native.getSP();
  int fp=sp - 4;
  int pc=Native.rdIntMem(fp + 1);
  pc+=2;
  int mp=Native.rdIntMem(fp + 4);
  int start=Native.rdMem(mp) >>> 10;
  int dim=Native.rdMem(start + (pc >> 2));
  for (i=(pc & 0x03); i < 3; ++i)   dim>>=8;
  dim&=0xff;
  Native.wrIntMem(pc + 1,fp + 1);
  sp=Native.rdIntMem(fp);
  sp-=dim;
  Native.wrIntMem(sp,fp);
  if (dim != 2) {
    System.out.print(dim);
    System.out.println(""String_Node_Str"");
    JVMHelp.noim();
  }
  int cnt=Native.rdIntMem(sp + 1);
  int cnt2=Native.rdIntMem(sp + 2);
  ret=f_anewarray(cnt,0);
  for (i=0; i < cnt; ++i) {
    int arr=f_newarray(cnt2,10);
synchronized (GC.mutex) {
      Native.wrMem(arr,Native.rdMem(ret) + i);
    }
  }
  return ret;
}",0.9160671462829736
6255,"/** 
 * Remove problematic characters from a method name  Note that fully qualified methods might become non-unique, so use an additional unique identifier if you need unique names. 
 */
public static String sanitizeFileName(String str){
  StringBuffer sanitized=new StringBuffer(str.length());
  for (int i=0; i < str.length(); i++) {
    if (Character.isLetterOrDigit(str.charAt(i)) || str.charAt(i) == '.') {
      sanitized.append(str.charAt(i));
    }
 else {
      sanitized.append('_');
    }
  }
  return sanitized.toString();
}","/** 
 * Remove problematic characters from a method name Note that fully qualified methods might become non-unique, so use an additional unique identifier if you need unique names. 
 */
public static String sanitizeFileName(String str){
  StringBuffer sanitized=new StringBuffer(str.length());
  for (int i=0; i < str.length(); i++) {
    if (Character.isLetterOrDigit(str.charAt(i)) || str.charAt(i) == '.') {
      sanitized.append(str.charAt(i));
    }
 else {
      sanitized.append('_');
    }
  }
  return sanitized.toString();
}",0.9990662931839402
6256,"public static <V,E>List<V> topologicalOrder(DirectedGraph<V,E> acyclicGraph){
  TopologicalOrderIterator<V,E> topo=new TopologicalOrderIterator<V,E>(acyclicGraph);
  List<V> topoList=new ArrayList<V>();
  while (topo.hasNext()) {
    topoList.add(topo.next());
  }
  return topoList;
}","public static <V,E>List<V> topologicalOrder(DirectedGraph<V,E> acyclicGraph){
  List<V> topoList=new ArrayList<V>();
  if (acyclicGraph.vertexSet().size() > 0) {
    TopologicalOrderIterator<V,E> topo=new TopologicalOrderIterator<V,E>(acyclicGraph);
    while (topo.hasNext()) {
      topoList.add(topo.next());
    }
  }
  return topoList;
}",0.5645933014354066
6257,"public int hashCode(){
  return method.getMethod().hashCode();
}","public int hashCode(){
  return method.hashCode();
}",0.896551724137931
6258,"private void build() throws MethodNotFoundException {
  this.buildGraph();
  classInfos=new HashSet<ClassInfo>();
  for (  CallGraphNode cgn : callGraph.vertexSet()) {
    classInfos.add(cgn.getReferencedMethod().getReceiver());
  }
  Pair<List<CallGraphNode>,List<CallGraphNode>> cycle=DirectedCycleDetector.findCycle(callGraph,rootNode);
  if (cycle != null) {
    throw new AssertionError(cyclicCallGraphMsg(cycle));
  }
  invalidate();
}","private void build() throws MethodNotFoundException {
  this.buildGraph();
  classInfos=new HashSet<ClassInfo>();
  for (  CallGraphNode cgn : callGraph.vertexSet()) {
    classInfos.add(cgn.getReferencedMethod().getReceiver());
  }
  Pair<List<CallGraphNode>,List<CallGraphNode>> cycle=DirectedCycleDetector.findCycle(callGraph,rootNode);
  if (cycle != null) {
    for (    DefaultEdge e : callGraph.edgeSet()) {
      CallGraphNode src=callGraph.getEdgeSource(e);
      CallGraphNode target=callGraph.getEdgeTarget(e);
      System.err.println(""String_Node_Str"" + src + ""String_Node_Str""+ target);
    }
    throw new AssertionError(cyclicCallGraphMsg(cycle));
  }
  invalidate();
}",0.783303730017762
6259,"public boolean equals(Object that){
  return (that instanceof CallGraphNode) ? (method.getMethod().equals(((CallGraphNode)that).method.getMethod())) : false;
}","public boolean equals(Object that){
  return (that instanceof CallGraphNode) ? (method.equals(((CallGraphNode)that).method)) : false;
}",0.9183673469387756
6260,"/** 
 * Method getFunctionOutput, which will return the functional output for point p.
 * @param p - the point index
 * @param parallel - true if to be done in parallel
 * @return the functinal output
 */
static float getFunctionOutputFloat(int p,boolean parallel){
  float functionalOutput_fp=0;
  SVMHelp.p=p;
  if (parallel) {
    SVMHelp.functionalOutput_fp=0.0f;
    ParallelExecutor pe=new ParallelExecutor();
    System.out.print(""String_Node_Str"");
    System.out.println(m);
    pe.executeParallel(new SVMHelp(),m);
    SVMHelp.functionalOutput_fp-=bias_fp;
    functionalOutput_fp=SVMHelp.functionalOutput_fp;
  }
 else {
    for (int i=0; i < m; i++) {
      if (alph[i] > 0) {
        functionalOutput_fp+=target[i] * alph[i] * getKernelOutputFloat(i,p);
      }
    }
    functionalOutput_fp-=bias_fp;
  }
  return functionalOutput_fp;
}","/** 
 * Method getFunctionOutput, which will return the functional output for point p.
 * @param p - the point index
 * @param parallel - true if to be done in parallel
 * @return the functinal output
 */
static float getFunctionOutputFloat(int p,boolean parallel){
  float functionalOutput_fp=0;
  SVMHelp.p=p;
  if (parallel) {
    SVMHelp.functionalOutput_fp=0.0f;
    System.out.print(""String_Node_Str"");
    System.out.println(m);
    pe.executeParallel(new SVMHelp(),m);
    SVMHelp.functionalOutput_fp-=bias_fp;
    functionalOutput_fp=SVMHelp.functionalOutput_fp;
  }
 else {
    for (int i=0; i < m; i++) {
      if (alph[i] > 0) {
        functionalOutput_fp+=target[i] * alph[i] * getKernelOutputFloat(i,p);
      }
    }
    functionalOutput_fp-=bias_fp;
  }
  return functionalOutput_fp;
}",0.9709443099273608
6261,"public void read(){
  for (int i=0; i < aDat.length; i++) {
    aDat[i]=(i + 30) % SIZE;
  }
}","public void read(){
  for (i=0; i < aDat.length; i++) {
    aDat[i]=(i + 30) % SIZE;
  }
}",0.9782608695652174
6262,"public void sort(){
  i=0;
  while (i < aDat.length) {
    j=aDat.length - 1;
    while (j >= i) {
      cond=aDat[j] < aDat[j - 1];
      temp=aDat[j];
      aDat[j]=Native.condMove(aDat[j - 1],aDat[j],cond);
      aDat[j - 1]=Native.condMove(temp,aDat[j - 1],cond);
      j=j - 1;
    }
    i=i + 1;
  }
}","public void sort(){
  i=0;
  while (i < aDat.length) {
    j=aDat.length - 1;
    while (j > i) {
      cond=aDat[j] < aDat[j - 1];
      temp=aDat[j];
      aDat[j]=Native.condMove(aDat[j - 1],aDat[j],cond);
      aDat[j - 1]=Native.condMove(temp,aDat[j - 1],cond);
      j=j - 1;
    }
    i=i + 1;
  }
}",0.99836867862969
6263,"public void write(){
}","public void write(){
  for (i=0; i < aDat.length; i++) {
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ aDat[i]+ ""String_Node_Str"");
  }
}",0.2458100558659217
6264,"/** 
 * Called recursive to build the VTs top down.
 * @param clazz
 */
private void buildVT(JavaClass clazz){
  int i, j;
  JopClassInfo cli;
  cli=(JopClassInfo)ai.cliMap.get(clazz.getClassName());
  JopClassInfo.ClVT supVt=null;
  JopClassInfo.ClFT supFt=null;
  if (clazz.getClassName().equals(clazz.getSuperclassName())) {
    ;
  }
 else {
    ClassInfo clisup=(ClassInfo)ai.cliMap.get(clazz.getSuperclassName());
    JavaClass superClazz=clisup.clazz;
    String superName=superClazz.getClassName();
    if (mapClVT.get(superName) == null) {
      buildVT(superClazz);
    }
    supVt=(JopClassInfo.ClVT)mapClVT.get(superName);
    supFt=(JopClassInfo.ClFT)mapClFT.get(superName);
  }
  String clazzName=clazz.getClassName();
  if (mapClVT.get(clazzName) != null) {
    return;
  }
  JopClassInfo.ClVT clvt=cli.getClVT();
  JopClassInfo.ClFT clft=cli.getClFT();
  mapClVT.put(clazzName,clvt);
  mapClFT.put(clazzName,clft);
  Method m[]=clazz.getMethods();
  int methodCount=m.length;
  int maxLen=methodCount;
  if (supVt != null)   maxLen+=supVt.len;
  clvt.len=0;
  clvt.key=new String[maxLen];
  clvt.mi=new JopMethodInfo[maxLen];
  Field f[]=clazz.getFields();
  maxLen=f.length;
  clft.len=0;
  clft.key=new String[maxLen];
  clft.idx=new int[maxLen];
  clft.size=new int[maxLen];
  clft.isStatic=new boolean[maxLen];
  clft.isReference=new boolean[maxLen];
  if (supVt != null) {
    for (i=0; i < supVt.len; ++i) {
      clvt.key[i]=supVt.key[i];
      clvt.mi[i]=supVt.mi[i];
    }
    clvt.len=supVt.len;
  }
  for (i=0; i < methodCount; i++) {
    Method meth=m[i];
    String methodId=meth.getName() + meth.getSignature();
    JopMethodInfo mi=(JopMethodInfo)cli.getMethodInfo(methodId);
    for (j=0; j < clvt.len; ++j) {
      if (clvt.key[j].equals(methodId)) {
        clvt.mi[j]=mi;
        break;
      }
    }
    if (j == clvt.len) {
      clvt.key[clvt.len]=methodId;
      clvt.mi[clvt.len]=mi;
      ++clvt.len;
    }
  }
  int nextFieldIndex=0;
  int nextStaticIndex=0;
  if (supFt != null) {
    nextFieldIndex=supFt.instSize;
    for (i=0; i < supFt.len; ++i) {
      if (supFt.isStatic[i]) {
        if (supFt.idx[i] >= nextStaticIndex) {
          nextStaticIndex=supFt.idx[i] + 1;
        }
      }
    }
  }
  for (i=0; i < f.length; ++i) {
    Field field=f[i];
    int size=field.getType().getSize();
    String fieldId=field.getName() + field.getSignature();
    clft.key[clft.len]=fieldId;
    clft.size[clft.len]=size;
    clft.isReference[clft.len]=field.getType() instanceof ReferenceType;
    if (field.isStatic()) {
      clft.idx[clft.len]=nextStaticIndex;
      clft.isStatic[clft.len]=true;
      nextStaticIndex+=size;
    }
 else {
      clft.idx[clft.len]=nextFieldIndex;
      clft.isStatic[clft.len]=false;
      nextFieldIndex+=size;
    }
    clft.len++;
  }
  clft.instSize=nextFieldIndex;
  cli.setInstanceSize(nextFieldIndex);
}","/** 
 * Called recursive to build the VTs top down.
 * @param clazz
 */
private void buildVT(JavaClass clazz){
  int i, j;
  JopClassInfo cli;
  cli=(JopClassInfo)ai.cliMap.get(clazz.getClassName());
  JopClassInfo.ClVT supVt=null;
  JopClassInfo.ClFT supFt=null;
  if (clazz.getClassName().equals(clazz.getSuperclassName())) {
    ;
  }
 else {
    ClassInfo clisup=(ClassInfo)ai.cliMap.get(clazz.getSuperclassName());
    JavaClass superClazz=clisup.clazz;
    String superName=superClazz.getClassName();
    if (mapClVT.get(superName) == null) {
      buildVT(superClazz);
    }
    supVt=(JopClassInfo.ClVT)mapClVT.get(superName);
    supFt=(JopClassInfo.ClFT)mapClFT.get(superName);
  }
  String clazzName=clazz.getClassName();
  if (mapClVT.get(clazzName) != null) {
    return;
  }
  JopClassInfo.ClVT clvt=cli.getClVT();
  JopClassInfo.ClFT clft=cli.getClFT();
  mapClVT.put(clazzName,clvt);
  mapClFT.put(clazzName,clft);
  Method m[]=clazz.getMethods();
  int methodCount=m.length;
  int maxLen=methodCount;
  if (supVt != null)   maxLen+=supVt.len;
  for (  JavaClass cl : clazz.getInterfaces()) {
    maxLen+=cl.getMethods().length;
  }
  clvt.len=0;
  clvt.key=new String[maxLen];
  clvt.mi=new JopMethodInfo[maxLen];
  Field f[]=clazz.getFields();
  maxLen=f.length;
  clft.len=0;
  clft.key=new String[maxLen];
  clft.idx=new int[maxLen];
  clft.size=new int[maxLen];
  clft.isStatic=new boolean[maxLen];
  clft.isReference=new boolean[maxLen];
  if (supVt != null) {
    for (i=0; i < supVt.len; ++i) {
      clvt.key[i]=supVt.key[i];
      clvt.mi[i]=supVt.mi[i];
    }
    clvt.len=supVt.len;
  }
  for (i=0; i < methodCount; i++) {
    Method meth=m[i];
    String methodId=meth.getName() + meth.getSignature();
    JopMethodInfo mi=(JopMethodInfo)cli.getMethodInfo(methodId);
    for (j=0; j < clvt.len; ++j) {
      if (clvt.key[j].equals(methodId)) {
        clvt.mi[j]=mi;
        break;
      }
    }
    if (j == clvt.len) {
      clvt.key[clvt.len]=methodId;
      clvt.mi[clvt.len]=mi;
      ++clvt.len;
    }
  }
  for (i=0; i < clazz.getInterfaces().length; i++) {
    ClassInfo icli=ai.cliMap.get(clazz.getInterfaces()[i].getClassName());
    for (    String methodId : icli.methods.keySet()) {
      for (j=0; j < clvt.len; ++j) {
        if (clvt.key[j].equals(methodId)) {
          break;
        }
      }
      if (j == clvt.len) {
        clvt.key[clvt.len]=methodId;
        clvt.mi[clvt.len]=(JopMethodInfo)icli.methods.get(methodId);
        ++clvt.len;
      }
    }
  }
  int nextFieldIndex=0;
  int nextStaticIndex=0;
  if (supFt != null) {
    nextFieldIndex=supFt.instSize;
    for (i=0; i < supFt.len; ++i) {
      if (supFt.isStatic[i]) {
        if (supFt.idx[i] >= nextStaticIndex) {
          nextStaticIndex=supFt.idx[i] + 1;
        }
      }
    }
  }
  for (i=0; i < f.length; ++i) {
    Field field=f[i];
    int size=field.getType().getSize();
    String fieldId=field.getName() + field.getSignature();
    clft.key[clft.len]=fieldId;
    clft.size[clft.len]=size;
    clft.isReference[clft.len]=field.getType() instanceof ReferenceType;
    if (field.isStatic()) {
      clft.idx[clft.len]=nextStaticIndex;
      clft.isStatic[clft.len]=true;
      nextStaticIndex+=size;
    }
 else {
      clft.idx[clft.len]=nextFieldIndex;
      clft.isStatic[clft.len]=false;
      nextFieldIndex+=size;
    }
    clft.len++;
  }
  clft.instSize=nextFieldIndex;
  cli.setInstanceSize(nextFieldIndex);
}",0.8238080202083992
6265,"private boolean implementsInterface(String ifname){
  ClassInfo cli=this;
  do {
    String[] interfaces=cli.clazz.getInterfaceNames();
    for (int i=0; i < interfaces.length; i++) {
      if (ifname.equals(interfaces[i])) {
        return true;
      }
 else {
        boolean match=((JopClassInfo)appInfo.cliMap.get(interfaces[i])).implementsInterface(ifname);
        if (match) {
          return true;
        }
      }
    }
    cli=(ClassInfo)cli.superClass;
  }
 while (cli != null);
  return false;
}","private boolean implementsInterface(String ifname){
  ClassInfo cli=this;
  do {
    String[] interfaces=cli.clazz.getInterfaceNames();
    for (int i=0; i < interfaces.length; i++) {
      if (ifname.equals(interfaces[i])) {
        return true;
      }
 else {
        JopClassInfo superCli=(JopClassInfo)appInfo.cliMap.get(interfaces[i]);
        boolean match=superCli.implementsInterface(ifname);
        if (match) {
          return true;
        }
      }
    }
    cli=(ClassInfo)cli.superClass;
  }
 while (cli != null);
  return false;
}",0.8714555765595463
6266,"public void Start(){
  final int max_mac_size=10000;
  final int max_cycles=100000;
  int[] array1=new int[max_mac_size];
  int[] array2=new int[max_mac_size];
  System.out.println(""String_Node_Str"");
  mac_coprocessor m=new mac_coprocessor();
  int ts=Native.rdMem(Const.IO_CNT);
  int te=Native.rdMem(Const.IO_CNT);
  int to=te - ts;
  int icount=0;
  for (int mac_size=1; mac_size < max_mac_size; icount++) {
    int i, j, time, out, expect=0;
    boolean error=false;
    int max_time=0;
    int min_time=1 << 30;
    int total_time=0;
    for (i=0; i < mac_size; i++) {
      array1[i]=mac_size + 123 + (i * 99)+ (i * i * 12);
      array2[i]=mac_size + 456 + (i * 78)+ (i * i * 9);
      expect+=array1[i] * array2[i];
    }
    System.out.print(mac_size);
    System.out.print(""String_Node_Str"");
    out=m.mac1(mac_size,array1,array2);
    for (i=0; i < max_cycles; i++) {
      ts=Native.rdMem(Const.IO_CNT);
      out=m.mac1(mac_size,array1,array2);
      te=Native.rdMem(Const.IO_CNT);
      time=te - ts - to;
      if (time > max_time) {
        max_time=time;
      }
      if (time < min_time) {
        min_time=time;
      }
      total_time+=time;
      if (out != expect) {
        error=true;
        break;
      }
    }
    if (error) {
      System.out.println(""String_Node_Str"");
      break;
    }
    System.out.print(min_time);
    System.out.print(""String_Node_Str"");
    System.out.print(total_time / max_cycles);
    System.out.print(""String_Node_Str"");
    System.out.println(max_time);
    mac_size++;
    if (icount > 100) {
      mac_size+=mac_size / 4;
    }
  }
  System.out.println(""String_Node_Str"");
}","public void Start(){
  array1=new int[max_mac_size + 1];
  array2=new int[max_mac_size + 1];
  System.out.println(""String_Node_Str"");
  m=new mac_coprocessor();
  int icount=0;
  boolean error=false;
  for (int mac_size=1; (mac_size < max_mac_size) && !error; icount++) {
    error=Measure(mac_size);
    mac_size++;
    if (icount > 100) {
      mac_size+=mac_size / 4;
    }
  }
  if (!error) {
    Measure(max_mac_size);
  }
  System.out.println(""String_Node_Str"");
}",0.0853080568720379
6267,"public int search_max(int size,int[] data){
  int max=0;
  for (int i=0; i < size; i++) {
    int d=data[i];
    if (d > max)     max=d;
  }
  return max;
}","public int search_max(int size,int[] data){
  int max=0;
  int one=1;
  for (int i=0; i < size; i+=one) {
    int d=data[i];
    if (d > max)     max=d;
  }
  return max;
}",0.945121951219512
6268,"public boolean HWM_SW_Measure(int test_size){
  int ts=Native.rdMem(Const.IO_CNT);
  int te=Native.rdMem(Const.IO_CNT);
  int to=te - ts;
  boolean error=false;
  System.out.print(test_size);
  test_vector[test_size]=0x7fffffff;
  int bc1=bit_count1(test_size,test_vector);
  ts=Native.rdMem(Const.IO_CNT);
  bit_count1(test_size,test_vector);
  te=Native.rdMem(Const.IO_CNT);
  System.out.print(""String_Node_Str"");
  System.out.print(te - ts - to);
  int bc2=bit_count2(test_size,test_vector);
  ts=Native.rdMem(Const.IO_CNT);
  bit_count2(test_size,test_vector);
  te=Native.rdMem(Const.IO_CNT);
  System.out.print(""String_Node_Str"");
  System.out.print(te - ts - to);
  int sm=search_max(test_size,test_vector);
  ts=Native.rdMem(Const.IO_CNT);
  search_max(test_size,test_vector);
  te=Native.rdMem(Const.IO_CNT);
  System.out.print(""String_Node_Str"");
  System.out.print(te - ts - to);
  int bchw1=bcms.bitcount(test_size,test_vector);
  ts=Native.rdMem(Const.IO_CNT);
  int bchw2=bcms.bitcount(test_size,test_vector);
  te=Native.rdMem(Const.IO_CNT);
  int bchw_time=te - ts - to;
  int smhw1=bcms.maxsearch(test_size,test_vector);
  ts=Native.rdMem(Const.IO_CNT);
  int smhw2=bcms.maxsearch(test_size,test_vector);
  te=Native.rdMem(Const.IO_CNT);
  int smhw_time=te - ts - to;
  System.out.print(""String_Node_Str"");
  System.out.print(bchw_time);
  System.out.println(""String_Node_Str"");
  if (smhw_time != bchw_time) {
    System.out.print(""String_Node_Str"");
    System.out.print(bchw_time);
    System.out.print(""String_Node_Str"");
    System.out.print(smhw_time);
    System.out.println(""String_Node_Str"");
    error=true;
  }
  if ((bc1 != bc2) || (bc1 != bchw1) || (bc1 != bchw2)) {
    System.out.print(""String_Node_Str"");
    System.out.print(bc1);
    System.out.print(""String_Node_Str"");
    System.out.print(bc2);
    System.out.print(""String_Node_Str"");
    System.out.print(bchw1);
    System.out.print(""String_Node_Str"");
    System.out.print(bchw2);
    System.out.println(""String_Node_Str"");
    error=true;
  }
  if ((sm != smhw1) || (sm != smhw2)) {
    System.out.print(""String_Node_Str"");
    System.out.print(sm);
    System.out.print(""String_Node_Str"");
    System.out.print(smhw1);
    System.out.print(""String_Node_Str"");
    System.out.print(smhw2);
    System.out.println(""String_Node_Str"");
    error=true;
  }
  return error;
}","public boolean HWM_SW_Measure(int test_size){
  int ts=Native.rdMem(Const.IO_CNT);
  int te=Native.rdMem(Const.IO_CNT);
  int to=te - ts;
  boolean error=false;
  System.out.print(test_size);
  test_vector[test_size]=0x7fffffff;
  mac(test_size,test_vector,test_vector);
  ts=Native.rdMem(Const.IO_CNT);
  mac(test_size,test_vector,test_vector);
  te=Native.rdMem(Const.IO_CNT);
  System.out.print(""String_Node_Str"");
  System.out.print(te - ts - to);
  int bc1=bit_count1(test_size,test_vector);
  ts=Native.rdMem(Const.IO_CNT);
  bit_count1(test_size,test_vector);
  te=Native.rdMem(Const.IO_CNT);
  System.out.print(""String_Node_Str"");
  System.out.print(te - ts - to);
  int bc2=bit_count2(test_size,test_vector);
  ts=Native.rdMem(Const.IO_CNT);
  bit_count2(test_size,test_vector);
  te=Native.rdMem(Const.IO_CNT);
  System.out.print(""String_Node_Str"");
  System.out.print(te - ts - to);
  int sm=search_max(test_size,test_vector);
  ts=Native.rdMem(Const.IO_CNT);
  search_max(test_size,test_vector);
  te=Native.rdMem(Const.IO_CNT);
  System.out.print(""String_Node_Str"");
  System.out.print(te - ts - to);
  int bchw1=bcms.bitcount(test_size,test_vector);
  ts=Native.rdMem(Const.IO_CNT);
  int bchw2=bcms.bitcount(test_size,test_vector);
  te=Native.rdMem(Const.IO_CNT);
  int bchw_time=te - ts - to;
  int smhw1=bcms.maxsearch(test_size,test_vector);
  ts=Native.rdMem(Const.IO_CNT);
  int smhw2=bcms.maxsearch(test_size,test_vector);
  te=Native.rdMem(Const.IO_CNT);
  int smhw_time=te - ts - to;
  System.out.print(""String_Node_Str"");
  System.out.print(bchw_time);
  System.out.println(""String_Node_Str"");
  if (smhw_time != bchw_time) {
    System.out.print(""String_Node_Str"");
    System.out.print(bchw_time);
    System.out.print(""String_Node_Str"");
    System.out.print(smhw_time);
    System.out.println(""String_Node_Str"");
    error=true;
  }
  if ((bc1 != bc2) || (bc1 != bchw1) || (bc1 != bchw2)) {
    System.out.print(""String_Node_Str"");
    System.out.print(bc1);
    System.out.print(""String_Node_Str"");
    System.out.print(bc2);
    System.out.print(""String_Node_Str"");
    System.out.print(bchw1);
    System.out.print(""String_Node_Str"");
    System.out.print(bchw2);
    System.out.println(""String_Node_Str"");
    error=true;
  }
  if ((sm != smhw1) || (sm != smhw2)) {
    System.out.print(""String_Node_Str"");
    System.out.print(sm);
    System.out.print(""String_Node_Str"");
    System.out.print(smhw1);
    System.out.print(""String_Node_Str"");
    System.out.print(smhw2);
    System.out.println(""String_Node_Str"");
    error=true;
  }
  return error;
}",0.9549403919983837
6269,"public int bit_count2(int size,int[] data){
  int count=0;
  for (int i=0; i < size; i++) {
    int d=data[i];
    for (int j=0; j < 4; j++) {
      count+=lut[d & 255];
      d=d >> 8;
    }
  }
  return count;
}","public int bit_count2(int size,int[] data){
  int count=0;
  int one=1;
  for (int i=0; i < size; i+=one) {
    int d=data[i];
    for (int j=0; j < 4; j+=one) {
      count+=lut[d & 255];
      d=d >> 8;
    }
  }
  return count;
}",0.9483146067415732
6270,"public int bit_count1(int size,int[] data){
  int count=0;
  for (int i=0; i < size; i++) {
    int d=data[i];
    for (int j=0; j < 32; j++) {
      if ((d & 1) == 1)       count++;
      d=d >> 1;
    }
  }
  return count;
}","public int bit_count1(int size,int[] data){
  int count=0;
  int one=1;
  for (int i=0; i < size; i+=one) {
    int d=data[i];
    for (int j=0; j < 32; j+=one) {
      if ((d & 1) == 1)       count+=one;
      d=d >> 1;
    }
  }
  return count;
}",0.7763713080168776
6271,"public static int measure(){
  int val=-expect;
  for (int i=0; i < mac_size; i++) {
    val+=array1[i] * array2[i];
  }
  return val;
}","public static void measure(){
  hwm.mac(hwm.max_test_size,hwm.test_vector,hwm.test_vector);
}",0.3580786026200873
6272,"public static void main(String[] args){
  measure();
}","public static void main(String[] args){
  hwm=new HWMethTest();
  hwm.Prepare_Noisy_Vector(hwm.max_test_size);
  measure();
}",0.6033519553072626
6273,"public int measure(){
  return m.mac1(mac_size,array1,array2) - expect;
}","public static void measure(){
  m.mac1(hwm.max_test_size,hwm.test_vector,hwm.test_vector);
}",0.5333333333333333
6274,"public static void main(String[] args){
  MacTestHW mt=new MacTestHW();
  mt.measure();
}","public static void main(String[] args){
  hwm=new HWMethTest();
  hwm.Prepare_Noisy_Vector(hwm.max_test_size);
  m=mac_coprocessor.getInstance();
  measure();
}",0.5943775100401606
6275,"private void updateReport(WcetKey key,LocalWCETSolution sol){
  Map<CFGNode,WcetCost> nodeCosts=sol.getNodeCostMap();
  Hashtable<CFGNode,String> nodeFlowCostDescrs=new Hashtable<CFGNode,String>();
  MethodInfo m=key.m;
  for (  Entry<CFGNode,WcetCost> entry : nodeCosts.entrySet()) {
    CFGNode n=entry.getKey();
    WcetCost cost=entry.getValue();
    if (sol.getNodeFlow(n) > 0) {
      nodeFlowCostDescrs.put(n,cost.toString());
      BasicBlock basicBlock=n.getBasicBlock();
      if (basicBlock != null) {
        int pos=basicBlock.getFirstInstruction().getPosition();
        ClassInfo cli=basicBlock.getClassInfo();
        LineNumberTable lineNumberTable=basicBlock.getMethodInfo().getMethod().getLineNumberTable();
        int sourceLine=lineNumberTable.getSourceLine(pos);
        ClassReport cr=project.getReport().getClassReport(cli);
        Long oldCost=(Long)cr.getLineProperty(sourceLine,""String_Node_Str"");
        if (oldCost == null)         oldCost=0L;
        cr.addLineProperty(sourceLine,""String_Node_Str"",oldCost + sol.getNodeFlow(n) * nodeCosts.get(n).getCost());
        for (        InstructionHandle ih : basicBlock.getInstructions()) {
          sourceLine=lineNumberTable.getSourceLine(ih.getPosition());
          cr.addLineProperty(sourceLine,""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
 else {
      nodeFlowCostDescrs.put(n,""String_Node_Str"" + nodeCosts.get(n).getCost());
    }
  }
  logger.info(""String_Node_Str"" + key + ""String_Node_Str""+ sol.getCost());
  Map<String,Object> stats=new Hashtable<String,Object>();
  stats.put(""String_Node_Str"",sol.getCost());
  stats.put(""String_Node_Str"",key.ctx);
  stats.put(""String_Node_Str"",project.getProcessorModel().getMethodCache().allFit(m));
  project.getReport().addDetailedReport(m,""String_Node_Str"" + key.ctx.toString(),stats,nodeFlowCostDescrs,sol.getEdgeFlow());
}","private void updateReport(WcetKey key,LocalWCETSolution sol){
  Map<CFGNode,WcetCost> nodeCosts=sol.getNodeCostMap();
  Hashtable<CFGNode,String> nodeFlowCostDescrs=new Hashtable<CFGNode,String>();
  MethodInfo m=key.m;
  for (  Entry<CFGNode,WcetCost> entry : nodeCosts.entrySet()) {
    CFGNode n=entry.getKey();
    WcetCost cost=entry.getValue();
    if (sol.getNodeFlow(n) > 0) {
      nodeFlowCostDescrs.put(n,cost.toString());
      BasicBlock basicBlock=n.getBasicBlock();
      if (basicBlock != null) {
        TreeSet<Integer> lineRange=basicBlock.getSourceLineRange();
        if (lineRange.isEmpty()) {
          Project.logger.error(""String_Node_Str"");
        }
        ClassInfo cli=basicBlock.getClassInfo();
        ClassReport cr=project.getReport().getClassReport(cli);
        Long oldCost=(Long)cr.getLineProperty(lineRange.first(),""String_Node_Str"");
        if (oldCost == null)         oldCost=0L;
        cr.addLineProperty(lineRange.first(),""String_Node_Str"",oldCost + sol.getNodeFlow(n) * nodeCosts.get(n).getCost());
        for (        int i : lineRange) {
          cr.addLineProperty(i,""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
 else {
      nodeFlowCostDescrs.put(n,""String_Node_Str"" + nodeCosts.get(n).getCost());
    }
  }
  logger.info(""String_Node_Str"" + key + ""String_Node_Str""+ sol.getCost());
  Map<String,Object> stats=new Hashtable<String,Object>();
  stats.put(""String_Node_Str"",sol.getCost());
  stats.put(""String_Node_Str"",key.ctx);
  stats.put(""String_Node_Str"",project.getProcessorModel().getMethodCache().allFit(m));
  project.getReport().addDetailedReport(m,""String_Node_Str"" + key.ctx.toString(),stats,nodeFlowCostDescrs,sol.getEdgeFlow());
}",0.7274755927475592
6276,"/** 
 * <p>Compact, human-readable String representation of the basic block.</p> <p>Mixed Stack notation, with at most one side-effect statement per line.</p>  Example:<br/>  {@code local_0 <- sipush[3] sipush[4] dup add add} <br/>{@code local_1 <- load[local_0] load[local_0] mul}
 */
public String dump(){
  StringBuilder sb=new StringBuilder();
  LineNumberTable lnt=methodInfo.getMethod().getLineNumberTable();
  ConstantPoolGen cpg=methodInfo.getConstantPoolGen();
  Iterator<InstructionHandle> ihIter=this.instructions.iterator();
  StringBuilder lineBuilder=new StringBuilder();
  InstructionHandle first=null;
  while (ihIter.hasNext()) {
    InstructionHandle ih=ihIter.next();
    String line=null;
    if (first == null) {
      first=ih;
    }
 else {
      lineBuilder.append(""String_Node_Str"");
    }
    Instruction ii=ih.getInstruction();
    if (ii instanceof ReturnInstruction) {
      line=ii.getName() + ""String_Node_Str"" + lineBuilder.toString();
    }
 else     if (ii instanceof StoreInstruction) {
      line=""String_Node_Str"" + ((StoreInstruction)ii).getIndex() + ""String_Node_Str""+ lineBuilder.toString();
    }
 else     if (ii instanceof FieldInstruction && ii.getName().startsWith(""String_Node_Str"")) {
      line=""String_Node_Str"" + ((FieldInstruction)ii).getFieldName(cpg) + ""String_Node_Str""+ lineBuilder.toString();
    }
 else {
      lineBuilder.append(ii.getName());
    }
    if (!ihIter.hasNext()) {
      line=lineBuilder.toString();
    }
    if (line != null) {
      int l1=lnt.getSourceLine(first.getPosition());
      int l2=lnt.getSourceLine(ih.getPosition());
      if (l1 != l2)       sb.append(""String_Node_Str"" + l1 + ""String_Node_Str""+ l2+ ""String_Node_Str"");
 else       sb.append(""String_Node_Str"" + l1 + ""String_Node_Str"");
      sb.append(line + ""String_Node_Str"");
      first=null;
      lineBuilder=new StringBuilder();
    }
  }
  return sb.toString();
}","/** 
 * <p>Compact, human-readable String representation of the basic block.</p> <p>Mixed Stack notation, with at most one side-effect statement per line.</p>  Example:<br/>  {@code local_0 <- sipush[3] sipush[4] dup add add} <br/>{@code local_1 <- load[local_0] load[local_0] mul}
 */
public String dump(){
  StringBuilder sb=new StringBuilder();
  LineNumberTable lnt=methodInfo.getMethod().getLineNumberTable();
  ConstantPoolGen cpg=methodInfo.getConstantPoolGen();
  Iterator<InstructionHandle> ihIter=this.instructions.iterator();
  StringBuilder lineBuilder=new StringBuilder();
  InstructionHandle first=null;
  while (ihIter.hasNext()) {
    InstructionHandle ih=ihIter.next();
    String line=null;
    if (first == null) {
      first=ih;
    }
 else {
      lineBuilder.append(""String_Node_Str"");
    }
    Instruction ii=ih.getInstruction();
    if (ii instanceof ReturnInstruction) {
      line=ii.getName() + ""String_Node_Str"" + lineBuilder.toString();
    }
 else     if (ii instanceof StoreInstruction) {
      line=""String_Node_Str"" + ((StoreInstruction)ii).getIndex() + ""String_Node_Str""+ lineBuilder.toString();
    }
 else     if (ii instanceof FieldInstruction && ii.getName().startsWith(""String_Node_Str"")) {
      line=""String_Node_Str"" + ((FieldInstruction)ii).getFieldName(cpg) + ""String_Node_Str""+ lineBuilder.toString();
    }
 else {
      lineBuilder.append(ii.getName());
    }
    if (!ihIter.hasNext()) {
      line=lineBuilder.toString();
    }
    if (line != null) {
      int l1=lnt.getSourceLine(first.getPosition());
      int l2=lnt.getSourceLine(ih.getPosition());
      if (l1 != l2)       sb.append(""String_Node_Str"" + (l1 < 0 ? ""String_Node_Str"" : l1) + ""String_Node_Str""+ (l2 < 0 ? ""String_Node_Str"" : l2)+ ""String_Node_Str"");
 else       sb.append(""String_Node_Str"" + (l1 < 0 ? ""String_Node_Str"" : l1) + ""String_Node_Str"");
      sb.append(line + ""String_Node_Str"");
      first=null;
      lineBuilder=new StringBuilder();
    }
  }
  return sb.toString();
}",0.976257339800868
6277,"private void calculateDepthAndHeight(){
  if (this.maxDistanceToRoot != null)   return;
  this.maxDistanceToRoot=new HashMap<CallGraphNode,Integer>();
  this.maxCallStackLeaf=this.getRootNode();
  this.maxCallstackDAG=new HashMap<CallGraphNode,CallGraphNode>();
  this.subgraphHeight=new HashMap<CallGraphNode,Integer>();
  Vector<CallGraphNode> toList=new Vector<CallGraphNode>();
  TopologicalOrderIterator<CallGraphNode,DefaultEdge> toIter=new TopologicalOrderIterator<CallGraphNode,DefaultEdge>(callGraph);
  int globalMaxDist=0;
  while (toIter.hasNext()) {
    CallGraphNode node=toIter.next();
    toList.add(node);
    int maxDist=0;
    CallGraphNode maxCallStackPred=null;
    for (    DefaultEdge e : callGraph.incomingEdgesOf(node)) {
      CallGraphNode pred=callGraph.getEdgeSource(e);
      int distViaPred=maxDistanceToRoot.get(pred) + 1;
      if (distViaPred > maxDist) {
        maxDist=distViaPred;
        maxCallStackPred=pred;
      }
    }
    this.maxDistanceToRoot.put(node,maxDist);
    if (maxCallStackPred != null)     this.maxCallstackDAG.put(node,maxCallStackPred);
    if (maxDist > globalMaxDist)     this.maxCallStackLeaf=node;
  }
  Collections.reverse(toList);
  for (  CallGraphNode n : toList) {
    int maxHeight=0;
    for (    DefaultEdge e : callGraph.outgoingEdgesOf(n)) {
      int predHeight=subgraphHeight.get(callGraph.getEdgeTarget(e));
      maxHeight=Math.max(maxHeight,predHeight);
    }
    subgraphHeight.put(n,maxHeight);
  }
}","private void calculateDepthAndHeight(){
  if (this.maxDistanceToRoot != null)   return;
  this.maxDistanceToRoot=new HashMap<CallGraphNode,Integer>();
  this.maxCallStackLeaf=this.getRootNode();
  this.maxCallstackDAG=new HashMap<CallGraphNode,CallGraphNode>();
  this.subgraphHeight=new HashMap<CallGraphNode,Integer>();
  Vector<CallGraphNode> toList=new Vector<CallGraphNode>();
  TopologicalOrderIterator<CallGraphNode,DefaultEdge> toIter=new TopologicalOrderIterator<CallGraphNode,DefaultEdge>(callGraph);
  int globalMaxDist=0;
  while (toIter.hasNext()) {
    CallGraphNode node=toIter.next();
    toList.add(node);
    int maxDist=0;
    CallGraphNode maxCallStackPred=null;
    for (    DefaultEdge e : callGraph.incomingEdgesOf(node)) {
      CallGraphNode pred=callGraph.getEdgeSource(e);
      int distViaPred=maxDistanceToRoot.get(pred) + 1;
      if (distViaPred > maxDist) {
        maxDist=distViaPred;
        maxCallStackPred=pred;
      }
    }
    this.maxDistanceToRoot.put(node,maxDist);
    if (maxCallStackPred != null)     this.maxCallstackDAG.put(node,maxCallStackPred);
    if (maxDist > globalMaxDist)     this.maxCallStackLeaf=node;
  }
  Collections.reverse(toList);
  for (  CallGraphNode n : toList) {
    int maxHeight=0;
    for (    DefaultEdge e : callGraph.outgoingEdgesOf(n)) {
      int predHeight=subgraphHeight.get(callGraph.getEdgeTarget(e));
      maxHeight=Math.max(maxHeight,predHeight + 1);
    }
    subgraphHeight.put(n,maxHeight);
  }
}",0.9986513823331086
6278,"/** 
 * Get the maximum height of the call stack. <p>A leaf method has height 1, an abstract method's height is the maximum height of its children, and the height of an implemented method is the maximum height of its children + 1. <p>
 * @return
 */
public Vector<CallGraphNode> getMaximalCallStack(){
  Map<CallGraphNode,Integer> depth=new HashMap<CallGraphNode,Integer>();
  HashMap<CallGraphNode,CallGraphNode> prev=new HashMap<CallGraphNode,CallGraphNode>();
  CallGraphNode deepestLeaf=rootNode;
  TopologicalOrderIterator<CallGraphNode,DefaultEdge> toIter=new TopologicalOrderIterator<CallGraphNode,DefaultEdge>(callGraph);
  depth.put(rootNode,0);
  int maxDepth=0;
  Set<CallGraphNode> visited=new HashSet<CallGraphNode>();
  while (toIter.hasNext()) {
    CallGraphNode n=toIter.next();
    visited.add(n);
    int thisDepth=depth.get(n);
    for (    DefaultEdge e : callGraph.outgoingEdgesOf(n)) {
      CallGraphNode target=callGraph.getEdgeTarget(e);
      if (visited.contains(target)) {
        throw new AssertionError(""String_Node_Str"");
      }
      int oldDepth;
{
        Integer tmp=depth.get(target);
        oldDepth=tmp == null ? 0 : tmp.intValue();
      }
      if (thisDepth + 1 > oldDepth) {
        depth.put(target,thisDepth + 1);
        prev.put(target,n);
        if (thisDepth + 1 > maxDepth) {
          maxDepth=thisDepth + 1;
          deepestLeaf=target;
        }
      }
    }
  }
  Vector<CallGraphNode> maxCallStack=new Vector<CallGraphNode>();
  CallGraphNode n=deepestLeaf;
  while (prev.containsKey(n)) {
    maxCallStack.add(n);
    n=prev.get(n);
  }
  maxCallStack.add(n);
  Collections.reverse(maxCallStack);
  return maxCallStack;
}","/** 
 * Get the maximum height of the call stack. <p>A leaf method has height 1, an abstract method's height is the maximum height of its children, and the height of an implemented method is the maximum height of its children + 1. <p>
 * @return
 */
public Vector<CallGraphNode> getMaximalCallStack(){
  if (maxCallStackLeaf == null)   calculateDepthAndHeight();
  CallGraphNode n=this.maxCallStackLeaf;
  Vector<CallGraphNode> maxCallStack=new Vector<CallGraphNode>();
  maxCallStack.add(n);
  while (maxCallstackDAG.containsKey(n)) {
    n=maxCallstackDAG.get(n);
    maxCallStack.add(n);
  }
  Collections.reverse(maxCallStack);
  return maxCallStack;
}",0.2796066695168875
6279,"/** 
 * Build a callgraph rooted at the given method
 * @param cli The class loader (with classes loaded)
 * @param className The class where the root method of the callgraph is located
 * @param methodSig The root method of the call graph. Either a plain method name(e.g. ""measure""), if unique, or a method with signature (e.g. ""measure()Z"")
 * @throws MethodNotFoundException 
 */
public static CallGraph buildCallGraph(WcetAppInfo cli,String className,String methodSig) throws MethodNotFoundException {
  MethodInfo rootMethod=cli.searchMethod(className,methodSig);
  CallGraph cg=new CallGraph(cli,rootMethod);
  cg.build();
  return cg;
}","/** 
 * Build a callgraph rooted at the given method
 * @param appInfo   The application (with classes loaded)
 * @param className The class where the root method of the callgraph is located
 * @param methodSig The root method of the call graph. Either a plain method name(e.g. ""measure""), if unique, or a method with signature (e.g. ""measure()Z"")
 * @throws MethodNotFoundException 
 */
public static CallGraph buildCallGraph(WcetAppInfo appInfo,String className,String methodSig) throws MethodNotFoundException {
  MethodInfo rootMethod=appInfo.searchMethod(className,methodSig);
  CallGraph cg=new CallGraph(appInfo,rootMethod);
  cg.build();
  return cg;
}",0.9501151189562548
6280,"public void exportDOT(Writer w) throws IOException {
  new AdvancedDOTExporter<CallGraphNode,DefaultEdge>().exportDOT(w,this.callGraph);
}","/** 
 * Export callgraph as .dot file
 * @param w
 * @throws IOException
 */
public void exportDOT(Writer w) throws IOException {
  new AdvancedDOTExporter<CallGraphNode,DefaultEdge>().exportDOT(w,this.callGraph);
}",0.7818696883852692
6281,"/** 
 * get non-abstract methods reachable from the given method, in DFS order
 * @return
 */
public List<MethodInfo> getReachableImplementations(MethodInfo rootMethod){
  List<MethodInfo> implemented=new Vector<MethodInfo>();
  CallGraphNode root=this.getNode(rootMethod);
  DepthFirstIterator<CallGraphNode,DefaultEdge> ti=new DepthFirstIterator<CallGraphNode,DefaultEdge>(callGraph,root);
  ti.setCrossComponentTraversal(false);
  while (ti.hasNext()) {
    MethodInfo m=ti.next().getMethodImpl();
    if (m != null)     implemented.add(m);
  }
  return implemented;
}","/** 
 * get non-abstract methods reachable from the given method, in DFS order
 * @return
 */
public List<MethodInfo> getReachableImplementations(MethodInfo rootMethod){
  List<MethodInfo> implemented=new Vector<MethodInfo>();
  CallGraphNode root=this.getNode(rootMethod);
  DepthFirstIterator<CallGraphNode,DefaultEdge> ti=new DepthFirstIterator<CallGraphNode,DefaultEdge>(callGraph,root);
  ti.setCrossComponentTraversal(false);
  while (ti.hasNext()) {
    MethodInfo m=ti.next().getMethodImpl();
    if (m == null)     throw new AssertionError(""String_Node_Str"");
    implemented.add(m);
  }
  return implemented;
}",0.9571788413098236
6282,"public int getMaxHeight(){
  return this.getMaximalCallStack().size();
}","public int getMaxHeight(){
  calculateDepthAndHeight();
  return this.subgraphHeight.get(this.rootNode);
}",0.5730337078651685
6283,"/** 
 * Initialize a CallGraph object.
 * @param appInfo
 * @param rootMethod The root method of the callgraph. Must not be abstract.
 */
protected CallGraph(WcetAppInfo appInfo,MethodInfo rootMethod){
  this.appInfo=appInfo;
  this.callGraph=new DefaultDirectedGraph<CallGraphNode,DefaultEdge>(DefaultEdge.class);
  this.rootNode=new CallGraphNode(rootMethod);
  this.callGraph.addVertex(rootNode);
}","/** 
 * Initialize a CallGraph object.
 * @param appInfo    Uplink to the application info.
 * @param rootMethod The root method of the callgraph (not abstract).
 */
protected CallGraph(WcetAppInfo appInfo,MethodInfo rootMethod){
  this.appInfo=appInfo;
  this.callGraph=new DefaultDirectedGraph<CallGraphNode,DefaultEdge>(DefaultEdge.class);
  this.rootNode=new CallGraphNode(rootMethod);
  this.callGraph.addVertex(rootNode);
}",0.9156626506024096
6284,"private void build() throws MethodNotFoundException {
  this.buildGraph();
  classInfos=new HashSet<ClassInfo>();
  for (  CallGraphNode cgn : callGraph.vertexSet()) {
    classInfos.add(cgn.getReferencedMethod().getReceiver());
  }
  Pair<List<CallGraphNode>,List<CallGraphNode>> cycle=DirectedCycleDetector.findCycle(callGraph,rootNode);
  if (cycle != null) {
    throw new AssertionError(cyclicCallGraphMsg(cycle));
  }
}","private void build() throws MethodNotFoundException {
  this.buildGraph();
  classInfos=new HashSet<ClassInfo>();
  for (  CallGraphNode cgn : callGraph.vertexSet()) {
    classInfos.add(cgn.getReferencedMethod().getReceiver());
  }
  Pair<List<CallGraphNode>,List<CallGraphNode>> cycle=DirectedCycleDetector.findCycle(callGraph,rootNode);
  if (cycle != null) {
    throw new AssertionError(cyclicCallGraphMsg(cycle));
  }
  invalidate();
}",0.9815242494226328
6285,"protected CallGraphNode getNode(MethodInfo m){
  return nodeMap.get(m);
}","private CallGraphNode getNode(MethodInfo m){
  return nodeMap.get(m);
}",0.9444444444444444
6286,"/** 
 * Compute the maximal total cache-miss penalty for <strong>invoking and executing</strong> m. <p> Precondition: The set of all methods reachable from <code>m</code> fit into the cache </p><p> Algorithm: If all methods reachable from <code>m</code> (including <code>m</code>) fit  into the cache, we can compute the WCET of <m> using the   {@link ALWAYS_HIT@} cacheapproximation, and then add the sum of cache miss penalties for every reachable method. </p><p> Note that when using this approximation, we attribute the total cache miss cost to the invocation of that method. </p><p> Explanation: We know that there is only one cache miss per method, but for FIFO caches we do not know when the cache miss will occur (on return or invoke), except for leaf methods. Let <code>h</code> be the number of cycles hidden by <strong>any</strong> return or  invoke instructions. Then the cache miss penalty is bounded by <code>(b-h)</code> per  method. </p>
 * @param m The method invoked
 * @return the cache miss penalty
 */
public long getMissOnceCummulativeCacheCost(MethodInfo m){
  long miss=0;
  Iterator<CallGraphNode> iter=project.getCallGraph().getReachableMethods(m);
  while (iter.hasNext()) {
    CallGraphNode n=iter.next();
    miss+=missOnceCost(n.getMethodImpl());
  }
  return miss;
}","/** 
 * Compute the maximal total cache-miss penalty for <strong>invoking and executing</strong> m. <p> Precondition: The set of all methods reachable from <code>m</code> fit into the cache </p><p> Algorithm: If all methods reachable from <code>m</code> (including <code>m</code>) fit  into the cache, we can compute the WCET of <m> using the   {@link ALWAYS_HIT@} cacheapproximation, and then add the sum of cache miss penalties for every reachable method. </p><p> Note that when using this approximation, we attribute the total cache miss cost to the invocation of that method. </p><p> Explanation: We know that there is only one cache miss per method, but for FIFO caches we do not know when the cache miss will occur (on return or invoke), except for leaf methods. Let <code>h</code> be the number of cycles hidden by <strong>any</strong> return or  invoke instructions. Then the cache miss penalty is bounded by <code>(b-h)</code> per  method. </p>
 * @param m The method invoked
 * @return the cache miss penalty
 */
public long getMissOnceCummulativeCacheCost(MethodInfo m){
  long miss=0;
  for (  MethodInfo reachable : project.getCallGraph().getReachableImplementations(m)) {
    miss+=missOnceCost(reachable);
  }
  return miss;
}",0.91453328081922
6287,"/** 
 * Compute the number of cache blocks which might be needed when calling this method
 * @param mi
 * @return the maximum number of cache blocks needed, s.t. we won't run out of cacheblocks when invoking the given method
 * @throws TypeException 
 */
public long getAllFitCacheBlocks(MethodInfo mi){
  int size=0;
  Iterator<CallGraphNode> iter=project.getCallGraph().getReachableMethods(mi);
  while (iter.hasNext()) {
    CallGraphNode n=iter.next();
    size+=requiredNumberOfBlocks(project.getSizeInWords(n.getMethodImpl()));
  }
  return size;
}","/** 
 * Compute the number of cache blocks which might be needed when calling this method
 * @param invoked
 * @return the maximum number of cache blocks needed, s.t. we won't run out of cacheblocks when invoking the given method
 * @throws TypeException 
 */
public long getAllFitCacheBlocks(MethodInfo invoked){
  int size=0;
  for (  MethodInfo mi : project.getCallGraph().getReachableImplementations(invoked)) {
    size+=requiredNumberOfBlocks(project.getSizeInWords(mi));
  }
  return size;
}",0.8060836501901141
6288,"/** 
 * Check that cache is big enough to hold any method possibly invoked Return largest method 
 */
public MethodInfo checkCache() throws Exception {
  int maxWords=0;
  MethodInfo largestMethod=null;
  for (  MethodInfo mi : project.getCallGraph().getImplementedMethods()) {
    Code code=mi.getCode();
    if (code == null)     continue;
    int size=code.getLength();
    int words=MiscUtils.bytesToWords(size);
    if (!this.fitsInCache(words)) {
      throw new Exception(""String_Node_Str"" + mi.getFQMethodName() + ""String_Node_Str""+ words+ ""String_Node_Str"");
    }
    if (words >= maxWords) {
      largestMethod=mi;
      maxWords=words;
    }
  }
  return largestMethod;
}","/** 
 * Check that cache is big enough to hold any method possibly invoked Return largest method 
 */
public MethodInfo checkCache() throws Exception {
  int maxWords=0;
  MethodInfo largestMethod=null;
  for (  MethodInfo mi : project.getCallGraph().getImplementedMethods()) {
    Code code=mi.getCode();
    if (code == null)     continue;
    int size=code.getCode().length;
    int words=MiscUtils.bytesToWords(size);
    if (!this.fitsInCache(words)) {
      throw new Exception(""String_Node_Str"" + mi.getFQMethodName() + ""String_Node_Str""+ words+ ""String_Node_Str"");
    }
    if (words >= maxWords) {
      largestMethod=mi;
      maxWords=words;
    }
  }
  return largestMethod;
}",0.9847050254916242
6289,"private boolean run(ExecHelper exec){
  project=null;
  ProjectConfig pConfig=new ProjectConfig(config);
  try {
    project=new Project(pConfig);
    project.setTopLevelLooger(tlLogger);
    Report.initVelocity(config);
    tlLogger.info(""String_Node_Str"");
    project.load();
    MethodInfo largestMethod=project.getProcessorModel().getMethodCache().checkCache();
    int minWords=MiscUtils.bytesToWords(largestMethod.getCode().getLength());
    System.out.println(""String_Node_Str"" + minWords + ""String_Node_Str""+ largestMethod.getFQMethodName());
    project.recordMetric(""String_Node_Str"",largestMethod.getFQMethodName(),minWords);
  }
 catch (  Exception e) {
    exec.logException(""String_Node_Str"",e);
    return false;
  }
  boolean succeed=false;
  try {
    project.setGenerateWCETReport(false);
    tlLogger.info(""String_Node_Str"" + project.computeCyclomaticComplexity(project.getTargetMethod()));
    WcetCost mincachecost, ah, am, wcet;
{
      long start, stop;
      RecursiveAnalysis<StaticCacheApproximation> an=new RecursiveAnalysis<StaticCacheApproximation>(project,new RecursiveAnalysis.LocalIPETStrategy());
      LpSolveWrapper.resetSolverTime();
      start=System.nanoTime();
      ah=an.computeWCET(project.getTargetMethod(),StaticCacheApproximation.ALWAYS_HIT);
      stop=System.nanoTime();
      reportSpecial(""String_Node_Str"",ah,start,stop,LpSolveWrapper.getSolverTime());
      if (project.getProjectConfig().useUppaal() || project.getConfig().getOption(CacheConfig.STATIC_CACHE_APPROX).needsInterProcIPET()) {
        project.setGenerateWCETReport(true);
      }
      am=an.computeWCET(project.getTargetMethod(),StaticCacheApproximation.ALWAYS_MISS);
      reportSpecial(""String_Node_Str"",am,0,0,0);
      project.setGenerateWCETReport(false);
      boolean missOnceOnInvoke=config.getOption(CacheConfig.ASSUME_MISS_ONCE_ON_INVOKE);
      config.setOption(CacheConfig.ASSUME_MISS_ONCE_ON_INVOKE,true);
      GlobalAnalysis gb=new GlobalAnalysis(project);
      LpSolveWrapper.resetSolverTime();
      start=System.nanoTime();
      mincachecost=gb.computeWCET(project.getTargetMethod(),StaticCacheApproximation.ALL_FIT);
      stop=System.nanoTime();
      reportSpecial(""String_Node_Str"",mincachecost,start,stop,LpSolveWrapper.getSolverTime());
      config.setOption(CacheConfig.ASSUME_MISS_ONCE_ON_INVOKE,missOnceOnInvoke);
    }
    tlLogger.info(""String_Node_Str"");
    project.setGenerateWCETReport(true);
    if (project.getProjectConfig().useUppaal()) {
      UppaalAnalysis an=new UppaalAnalysis(tlLogger,project,project.getOutDir(""String_Node_Str""));
      config.checkPresent(UppAalConfig.UPPAAL_VERIFYTA_BINARY);
      long start=System.nanoTime();
      wcet=an.computeWCET(project.getTargetMethod(),am.getCost());
      long stop=System.nanoTime();
      reportUppaal(wcet,start,stop,an.getSearchtime(),an.getSolvertimemax());
    }
 else {
      StaticCacheApproximation staticCacheApprox=config.getOption(CacheConfig.STATIC_CACHE_APPROX);
      RecursiveWCETStrategy<StaticCacheApproximation> recStrategy;
      if (staticCacheApprox == StaticCacheApproximation.ALL_FIT) {
        recStrategy=new GlobalAnalysis.GlobalIPETStrategy();
      }
 else {
        recStrategy=new RecursiveAnalysis.LocalIPETStrategy();
      }
      RecursiveAnalysis<StaticCacheApproximation> an=new RecursiveAnalysis<StaticCacheApproximation>(project,recStrategy);
      LpSolveWrapper.resetSolverTime();
      long start=System.nanoTime();
      wcet=an.computeWCET(project.getTargetMethod(),config.getOption(CacheConfig.STATIC_CACHE_APPROX));
      long stop=System.nanoTime();
      report(wcet,start,stop,LpSolveWrapper.getSolverTime());
    }
    tlLogger.info(""String_Node_Str"" + wcet);
    succeed=true;
  }
 catch (  Exception e) {
    exec.logException(""String_Node_Str"",e);
  }
  if (!project.doWriteReport()) {
    tlLogger.info(""String_Node_Str"");
    return succeed;
  }
  try {
    tlLogger.info(""String_Node_Str"");
    project.getReport().generateInfoPages();
    tlLogger.info(""String_Node_Str"");
    project.writeReport();
    tlLogger.info(""String_Node_Str"" + pConfig.getOutDir());
  }
 catch (  Exception e) {
    exec.logException(""String_Node_Str"",e);
    return false;
  }
  return succeed;
}","private boolean run(ExecHelper exec){
  project=null;
  ProjectConfig pConfig=new ProjectConfig(config);
  try {
    project=new Project(pConfig);
    project.setTopLevelLooger(tlLogger);
    Report.initVelocity(config);
    tlLogger.info(""String_Node_Str"");
    project.load();
    MethodInfo largestMethod=project.getProcessorModel().getMethodCache().checkCache();
    int minWords=MiscUtils.bytesToWords(largestMethod.getCode().getCode().length);
    System.out.println(""String_Node_Str"" + minWords + ""String_Node_Str""+ largestMethod.getFQMethodName());
    project.recordMetric(""String_Node_Str"",largestMethod.getFQMethodName(),minWords);
  }
 catch (  Exception e) {
    exec.logException(""String_Node_Str"",e);
    return false;
  }
  boolean succeed=false;
  try {
    project.setGenerateWCETReport(false);
    tlLogger.info(""String_Node_Str"" + project.computeCyclomaticComplexity(project.getTargetMethod()));
    WcetCost mincachecost, ah, am, wcet;
{
      long start, stop;
      RecursiveAnalysis<StaticCacheApproximation> an=new RecursiveAnalysis<StaticCacheApproximation>(project,new RecursiveAnalysis.LocalIPETStrategy());
      LpSolveWrapper.resetSolverTime();
      start=System.nanoTime();
      ah=an.computeWCET(project.getTargetMethod(),StaticCacheApproximation.ALWAYS_HIT);
      stop=System.nanoTime();
      reportSpecial(""String_Node_Str"",ah,start,stop,LpSolveWrapper.getSolverTime());
      if (project.getProjectConfig().useUppaal() || project.getConfig().getOption(CacheConfig.STATIC_CACHE_APPROX).needsInterProcIPET()) {
        project.setGenerateWCETReport(true);
      }
      am=an.computeWCET(project.getTargetMethod(),StaticCacheApproximation.ALWAYS_MISS);
      reportSpecial(""String_Node_Str"",am,0,0,0);
      project.setGenerateWCETReport(false);
      boolean missOnceOnInvoke=config.getOption(CacheConfig.ASSUME_MISS_ONCE_ON_INVOKE);
      config.setOption(CacheConfig.ASSUME_MISS_ONCE_ON_INVOKE,true);
      GlobalAnalysis gb=new GlobalAnalysis(project);
      LpSolveWrapper.resetSolverTime();
      start=System.nanoTime();
      mincachecost=gb.computeWCET(project.getTargetMethod(),StaticCacheApproximation.ALL_FIT);
      stop=System.nanoTime();
      reportSpecial(""String_Node_Str"",mincachecost,start,stop,LpSolveWrapper.getSolverTime());
      config.setOption(CacheConfig.ASSUME_MISS_ONCE_ON_INVOKE,missOnceOnInvoke);
    }
    tlLogger.info(""String_Node_Str"");
    project.setGenerateWCETReport(true);
    if (project.getProjectConfig().useUppaal()) {
      UppaalAnalysis an=new UppaalAnalysis(tlLogger,project,project.getOutDir(""String_Node_Str""));
      config.checkPresent(UppAalConfig.UPPAAL_VERIFYTA_BINARY);
      long start=System.nanoTime();
      wcet=an.computeWCET(project.getTargetMethod(),am.getCost());
      long stop=System.nanoTime();
      reportUppaal(wcet,start,stop,an.getSearchtime(),an.getSolvertimemax());
    }
 else {
      StaticCacheApproximation staticCacheApprox=config.getOption(CacheConfig.STATIC_CACHE_APPROX);
      RecursiveWCETStrategy<StaticCacheApproximation> recStrategy;
      if (staticCacheApprox == StaticCacheApproximation.ALL_FIT) {
        recStrategy=new GlobalAnalysis.GlobalIPETStrategy();
      }
 else {
        recStrategy=new RecursiveAnalysis.LocalIPETStrategy();
      }
      RecursiveAnalysis<StaticCacheApproximation> an=new RecursiveAnalysis<StaticCacheApproximation>(project,recStrategy);
      LpSolveWrapper.resetSolverTime();
      long start=System.nanoTime();
      wcet=an.computeWCET(project.getTargetMethod(),config.getOption(CacheConfig.STATIC_CACHE_APPROX));
      long stop=System.nanoTime();
      report(wcet,start,stop,LpSolveWrapper.getSolverTime());
    }
    tlLogger.info(""String_Node_Str"" + wcet);
    succeed=true;
  }
 catch (  Exception e) {
    exec.logException(""String_Node_Str"",e);
  }
  if (!project.doWriteReport()) {
    tlLogger.info(""String_Node_Str"");
    return succeed;
  }
  try {
    tlLogger.info(""String_Node_Str"");
    project.getReport().generateInfoPages();
    tlLogger.info(""String_Node_Str"");
    project.writeReport();
    tlLogger.info(""String_Node_Str"" + pConfig.getOutDir());
  }
 catch (  Exception e) {
    exec.logException(""String_Node_Str"",e);
    return false;
  }
  return succeed;
}",0.997527375485694
6290,"public void established(Packet p){
  Ip.setData(p,Tcp.DATA,""String_Node_Str"");
}","public Packet established(Packet p){
  Ip.setData(p,Tcp.DATA,""String_Node_Str"");
  return p;
}",0.8735632183908046
6291,"public void request(Packet p){
  StringBuffer hello=new StringBuffer(""String_Node_Str"");
  Ip.getData(p,Tcp.DATA,sb);
  StringBuffer resp=null;
  if (sb.length() != 0) {
    System.out.print(""String_Node_Str"");
    System.out.println(sb);
    for (int i=0; i < sb.length(); ++i) {
      char ch=sb.charAt(i);
      if (ch != '\n' && ch != '\r') {
        cmd.append(ch);
      }
 else {
        String s=cmd.toString();
        if (s.equals(""String_Node_Str"")) {
          resp=hello;
        }
        cmd.setLength(0);
      }
    }
  }
  if (resp != null) {
    Ip.setData(p,Tcp.DATA,resp);
  }
 else {
    p.len=Tcp.DATA << 2;
  }
}","public Packet request(Packet p){
  StringBuffer hello=new StringBuffer(""String_Node_Str"");
  Ip.getData(p,Tcp.DATA,sb);
  StringBuffer resp=null;
  if (sb.length() != 0) {
    System.out.print(""String_Node_Str"");
    System.out.println(sb);
    for (int i=0; i < sb.length(); ++i) {
      char ch=sb.charAt(i);
      if (ch != '\n' && ch != '\r') {
        cmd.append(ch);
      }
 else {
        String s=cmd.toString();
        if (s.equals(""String_Node_Str"")) {
          resp=hello;
        }
        cmd.setLength(0);
      }
    }
  }
  if (resp != null) {
    Ip.setData(p,Tcp.DATA,resp);
  }
 else {
    p.len=Tcp.DATA << 2;
  }
  return p;
}",0.9813374805598756
6292,"@Override public boolean finished(){
  return false;
}","public boolean finished(){
  return false;
}",0.8979591836734694
6293,"/** 
 * Sends one datagram
 * @param p
 * @throws IOException
 */
public void send(Datagram p) throws IOException {
  Payload pay=null;
  int dgRemPort=StringFunctions.getPortFromConnectorStr(p.getAddress());
  int dgRemAddr=dgRemPort > -1 ? StringFunctions.getAddrFromConnectorStr(p.getAddress()) : 0;
  while (true) {
    pay=UDP.preparePayload((short)dgRemPort,(short)localPort);
    if (pay != null)     break;
    Thread.sleep(100);
  }
  UDPPacket.setData(pay,((DatagramPacket)p).getBuffer(),0,p.getLength());
  UDPPacket.setLength(pay,(short)pay.length);
  if (Debug.enabled)   Debug.println(""String_Node_Str"",Debug.DBG_UDP);
  IP.asyncSendPayload(pay,dgRemAddr,IP.PROT_UDP);
}","/** 
 * Sends one datagram
 * @param p
 * @throws IOException
 */
public void send(Datagram p) throws IOException {
  Payload pay=null;
  int dgRemPort=StringFunctions.getPortFromConnectorStr(p.getAddress());
  int dgRemAddr=dgRemPort > -1 ? StringFunctions.getAddrFromConnectorStr(p.getAddress()) : 0;
  while (true) {
    pay=UDP.preparePayload((short)dgRemPort,(short)localPort);
    if (pay != null)     break;
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  UDPPacket.setData(pay,((DatagramPacket)p).getBuffer(),0,p.getLength());
  UDPPacket.setLength(pay,(short)pay.length);
  if (Debug.enabled)   Debug.println(""String_Node_Str"",Debug.DBG_UDP);
  IP.asyncSendPayload(pay,dgRemAddr,IP.PROT_UDP);
}",0.9389155799588196
6294,"public String getTargetName(){
  return Config.sanitizeFileName(projectConfig.getAppClassName() + ""String_Node_Str"" + projectConfig.getTargetMethodName());
}","public String getTargetName(){
  return MiscUtils.sanitizeFileName(projectConfig.getAppClassName() + ""String_Node_Str"" + projectConfig.getTargetMethodName());
}",0.9589905362776026
6295,"public String getProjectName(){
  return config.getOptionWithDefault(PROJECT_NAME,Config.sanitizeFileName(getAppClassName() + ""String_Node_Str"" + getTargetMethodName()));
}","public String getProjectName(){
  return config.getOptionWithDefault(PROJECT_NAME,MiscUtils.sanitizeFileName(getAppClassName() + ""String_Node_Str"" + getTargetMethodName()));
}",0.962536023054755
6296,"/** 
 * If no instance of project is available, us this one to get a path for writing a file (not recommended, but sometimes useful for debugging stuff)
 * @param subdir
 * @param name 
 */
public static File getOutFile(String subdir,String name){
  return new File(getOutDir(subdir),Config.sanitizeFileName(name));
}","/** 
 * If no instance of project is available, us this one to get a path for writing a file (not recommended, but sometimes useful for debugging stuff)
 * @param subdir
 * @param name 
 */
public static File getOutFile(String subdir,String name){
  return new File(getOutDir(subdir),MiscUtils.sanitizeFileName(name));
}",0.976452119309262
6297,"public UppaalAnalysis(Logger logger,Project project,File outDir){
  this.logger=logger;
  this.project=project;
  this.outDir=outDir;
}","public UppaalAnalysis(Logger logger,Project project,File outDir){
  this.uppaalConfig=new UppAalConfig(project.getConfig(),outDir);
  this.logger=logger;
  this.project=project;
}",0.7197452229299363
6298,"public WcetCost calculateWCET(MethodInfo m,long ub) throws IOException, DuplicateKeyException, XmlSerializationException {
  Long upperBound=null;
  if (ub > 0)   upperBound=ub;
  logger.info(""String_Node_Str"" + m.getFQMethodName());
  Translator translator=new Translator(project,outDir);
  translator.translateProgram(m);
  translator.writeOutput();
  logger.info(""String_Node_Str"" + outDir);
  logger.info(""String_Node_Str"" + translator.getModelFile());
  if (UppAalConfig.hasVerifier(project.getConfig())) {
    logger.info(""String_Node_Str"");
    WcetSearch search=new WcetSearch(project.getConfig(),translator.getModelFile());
    long start=System.nanoTime();
    long wcet=search.searchWCET(upperBound);
    long end=System.nanoTime();
    searchtime+=((double)(end - start)) / 1E9;
    solvertimemax=Math.max(solvertimemax,search.getMaxSolverTime());
    return WcetCost.totalCost(wcet);
  }
 else {
    throw new IOException(""String_Node_Str"");
  }
}","public WcetCost calculateWCET(MethodInfo m,long ub) throws IOException, DuplicateKeyException, XmlSerializationException {
  Long upperBound=null;
  if (ub > 0)   upperBound=ub;
  logger.info(""String_Node_Str"" + m.getFQMethodName());
  Translator translator=new Translator(uppaalConfig,project);
  translator.translateProgram(m);
  translator.writeOutput();
  logger.info(""String_Node_Str"" + uppaalConfig.outDir);
  logger.info(""String_Node_Str"" + translator.getModelFile());
  if (uppaalConfig.hasVerifier()) {
    logger.info(""String_Node_Str"");
    WcetSearch search=new WcetSearch(project.getConfig(),translator.getModelFile());
    long start=System.nanoTime();
    long wcet=search.searchWCET(upperBound);
    long end=System.nanoTime();
    searchtime+=((double)(end - start)) / 1E9;
    solvertimemax=Math.max(solvertimemax,search.getMaxSolverTime());
    return WcetCost.totalCost(wcet);
  }
 else {
    throw new IOException(""String_Node_Str"");
  }
}",0.96875
6299,"private static String pageOf(MethodInfo i){
  return sanitizeFileName(i.getFQMethodName()) + ""String_Node_Str"";
}","private static String pageOf(MethodInfo i){
  return MiscUtils.sanitizeFileName(i.getFQMethodName()) + ""String_Node_Str"";
}",0.9576271186440678
6300,"private void generateDetailedReport(MethodInfo method){
  String page=pageOf(method);
  Hashtable<String,Object> ctx=new Hashtable<String,Object>();
  ctx.put(""String_Node_Str"",method);
  ctx.put(""String_Node_Str"",this.detailedReports.get(method));
  for (  DetailedMethodReport m : this.detailedReports.get(method)) {
    m.getGraph();
  }
  try {
    this.generateFile(""String_Node_Str"",config.getOutFile(page),ctx);
  }
 catch (  Exception e) {
    logger.error(e);
  }
  this.addPage(""String_Node_Str"" + method.getCli().clazz.getClassName() + ""String_Node_Str""+ sanitizePageKey(method.methodId),page);
}","private void generateDetailedReport(MethodInfo method){
  String page=pageOf(method);
  Hashtable<String,Object> ctx=new Hashtable<String,Object>();
  ctx.put(""String_Node_Str"",method);
  ctx.put(""String_Node_Str"",project.getFlowGraph(method).dumpDFA());
  ctx.put(""String_Node_Str"",this.detailedReports.get(method));
  for (  DetailedMethodReport m : this.detailedReports.get(method)) {
    m.getGraph();
  }
  try {
    this.generateFile(""String_Node_Str"",config.getOutFile(page),ctx);
  }
 catch (  Exception e) {
    logger.error(e);
  }
  this.addPage(""String_Node_Str"" + method.getCli().clazz.getClassName() + ""String_Node_Str""+ sanitizePageKey(method.methodId),page);
}",0.946219797349961
6301,"/** 
 * get the filename for output files
 * @param method the method the outputfile should be created for
 * @param extension the filename extension (e.g. .xml)
 * @return the filename
 */
public File getOutFile(MethodInfo method,String extension){
  return new File(outDir,sanitizeFileName(method.getFQMethodName() + extension));
}","/** 
 * get the filename for output files
 * @param method the method the outputfile should be created for
 * @param extension the filename extension (e.g. .xml)
 * @return the filename
 */
public File getOutFile(MethodInfo method,String extension){
  return new File(outDir,MiscUtils.sanitizeFileName(method.getFQMethodName() + extension));
}",0.985207100591716
6302,"private void computeMethodNestingDepths(){
  this.methodMNDs=new HashMap<MethodInfo,Integer>();
  for (  MethodInfo m : project.getCallGraph().getImplementedMethods()) {
    int maxCaller=0;
    ControlFlowGraph cfgInvoked=project.getFlowGraph(m);
    for (    Pair<SuperInvokeEdge,SuperReturnEdge> callSite : superGraph.getCallSites(cfgInvoked)) {
      InvokeNode callSiteNode=callSite.fst().getInvokeNode();
      ControlFlowGraph cfgInvoker=callSiteNode.invokerFlowGraph();
      int callerRootDepth=methodMNDs.get(cfgInvoker.getMethodInfo());
      int nestingDepth=cfgInvoker.getLoopColoring().getLoopColor(callSiteNode).size();
      maxCaller=Math.max(maxCaller,callerRootDepth + nestingDepth);
    }
    methodMNDs.put(m,maxCaller);
  }
  if (config.debug)   MiscUtils.printMap(System.out,methodMNDs,30);
}","private void computeMethodNestingDepths(){
  this.methodMNDs=new HashMap<MethodInfo,Integer>();
  for (  MethodInfo m : project.getCallGraph().getImplementedMethods(project.getTargetMethod())) {
    int maxCaller=0;
    ControlFlowGraph cfgInvoked=project.getFlowGraph(m);
    for (    Pair<SuperInvokeEdge,SuperReturnEdge> callSite : superGraph.getCallSites(cfgInvoked)) {
      InvokeNode callSiteNode=callSite.fst().getInvokeNode();
      ControlFlowGraph cfgInvoker=callSiteNode.invokerFlowGraph();
      int callerRootDepth=methodMNDs.get(cfgInvoker.getMethodInfo());
      int nestingDepth=cfgInvoker.getLoopColoring().getLoopColor(callSiteNode).size();
      maxCaller=Math.max(maxCaller,callerRootDepth + nestingDepth);
    }
    methodMNDs.put(m,maxCaller);
  }
  if (config.debug)   MiscUtils.printMap(System.out,methodMNDs,30);
}",0.9848942598187312
6303,"private void buildEdge(CFGEdge edge){
  FlowGraph<CFGNode,CFGEdge> graph=cfg.getGraph();
  Set<CFGNode> hols=cfg.getLoopColoring().getHeadOfLoops();
  Set<CFGEdge> backEdges=cfg.getLoopColoring().getBackEdges();
  Map<CFGEdge,IterationBranchLabel<CFGNode>> edgeColoring=cfg.getLoopColoring().getIterationBranchEdges();
  CFGNode src=graph.getEdgeSource(edge);
  CFGNode target=graph.getEdgeTarget(edge);
  Transition transition=tBuilder.createTransition(nodeTemplates.get(src).snd(),nodeTemplates.get(target).fst());
  TransitionAttributes attrs=transition.getAttrs();
  IterationBranchLabel<CFGNode> edgeColor=edgeColoring.get(edge);
  if (edgeColor != null) {
    for (    CFGNode loop : edgeColor.getContinues()) {
      attrs.appendGuard(tBuilder.contLoopGuard(loop));
      attrs.appendUpdate(tBuilder.incrLoopCounter(loop));
    }
    for (    CFGNode loop : edgeColor.getExits()) {
      attrs.appendGuard(tBuilder.exitLoopGuard(loop));
      attrs.appendUpdate(tBuilder.resetLoopCounter(loop));
    }
  }
  if (hols.contains(target) && !backEdges.contains(edge)) {
    attrs.appendUpdate(tBuilder.resetLoopCounter(target));
  }
}","private void buildEdge(CFGEdge edge){
  FlowGraph<CFGNode,CFGEdge> graph=cfg.getGraph();
  Set<CFGNode> hols=cfg.getLoopColoring().getHeadOfLoops();
  Set<CFGEdge> backEdges=cfg.getLoopColoring().getBackEdges();
  Map<CFGEdge,IterationBranchLabel<CFGNode>> edgeColoring=cfg.getLoopColoring().getIterationBranchEdges();
  CFGNode src=graph.getEdgeSource(edge);
  CFGNode target=graph.getEdgeTarget(edge);
  if (src == cfg.getEntry() && target == cfg.getExit())   return;
  Transition transition=tBuilder.createTransition(nodeTemplates.get(src).snd(),nodeTemplates.get(target).fst());
  TransitionAttributes attrs=transition.getAttrs();
  IterationBranchLabel<CFGNode> edgeColor=edgeColoring.get(edge);
  if (edgeColor != null) {
    for (    CFGNode loop : edgeColor.getContinues()) {
      attrs.appendGuard(tBuilder.contLoopGuard(loop));
      attrs.appendUpdate(tBuilder.incrLoopCounter(loop));
    }
    for (    CFGNode loop : edgeColor.getExits()) {
      attrs.appendGuard(tBuilder.exitLoopGuard(loop));
      attrs.appendUpdate(tBuilder.resetLoopCounter(loop));
    }
  }
  if (hols.contains(target) && !backEdges.contains(edge)) {
    attrs.appendUpdate(tBuilder.resetLoopCounter(target));
  }
}",0.9717948717948718
6304,"private StringBuilder initCache(String NUM_METHODS){
  Vector<Object> cacheElems=new Vector<Object>();
  cacheElems.add(0);
  int i;
  for (i=1; i < blocksOf(0); i++)   cacheElems.add(0);
  for (; i < cache.getNumBlocks(); i++)   cacheElems.add(NUM_METHODS);
  return CacheSimBuilder.constArray(cacheElems);
}","private StringBuilder initCache(String NUM_METHODS){
  Vector<Object> cacheElems=new Vector<Object>();
  for (int i=0; i < cache.getNumBlocks(); i++)   cacheElems.add(NUM_METHODS);
  cacheElems.set(blocksOf(0) - 1,0);
  return CacheSimBuilder.constArray(cacheElems);
}",0.7140381282495667
6305,"@Override public void appendDeclarations(NTASystem system,String NUM_METHODS){
  super.appendDeclarations(system,NUM_METHODS);
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,initNumBlocks()));
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,cache.getNumBlocks(),initCache(NUM_METHODS)));
  system.appendDeclaration(String.format(""String_Node_Str""));
  system.appendDeclaration(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + cache.getNumBlocks() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (cache.getNumBlocks() - 1)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ NUM_METHODS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public void appendDeclarations(NTASystem system,String NUM_METHODS){
  super.appendDeclarations(system,NUM_METHODS);
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,initNumBlocks()));
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,cache.getNumBlocks(),initCache(NUM_METHODS)));
  system.appendDeclaration(String.format(""String_Node_Str""));
  system.appendDeclaration(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + cache.getNumBlocks() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (cache.getNumBlocks() - 1)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ NUM_METHODS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9786995515695068
6306,"public static void main(String[] args){
  DFAAppInfo program=new DFAAppInfo(new DFAClassInfo());
  program.parseOptions(args);
  try {
    program.load();
  }
 catch (  IOException exc) {
    exc.printStackTrace();
  }
  System.out.println(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  ReceiverTypes rt=new ReceiverTypes();
  program.setReceivers(program.runAnalysis(rt));
  long rtTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (rtTime - startTime));
  LoopBounds lb=new LoopBounds();
  program.runAnalysis(lb);
  lb.printResult(program);
  long lbTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (lbTime - rtTime));
}","public static void main(String[] args){
  DFAAppInfo program=new DFAAppInfo(new DFAClassInfo());
  program.parseOptions(args);
  try {
    program.load();
  }
 catch (  IOException exc) {
    exc.printStackTrace();
  }
  System.out.println(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  ReceiverTypes rt=new ReceiverTypes();
  program.setReceivers(program.runAnalysis(rt));
  rt.printResult(program);
  long rtTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (rtTime - startTime));
  LoopBounds lb=new LoopBounds();
  program.runAnalysis(lb);
  lb.printResult(program);
  long lbTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (lbTime - rtTime));
}",0.9808646350106308
6307,"private void doIf(InstructionHandle stmt,FlowEdge edge,Context context,Map<Location,ValueMapping> in,Map<Location,ValueMapping> result){
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc < context.stackPtr - 1) {
      result.put(l,in.get(l));
    }
  }
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc == context.stackPtr - 1 && in.get(l).source != null) {
      ValueMapping m=new ValueMapping(in.get(l),true);
switch (stmt.getInstruction().getOpcode()) {
case Constants.IFEQ:
        if (edge.getType() == FlowEdge.FALSE_EDGE) {
        }
 else         if (edge.getType() == FlowEdge.TRUE_EDGE) {
          m.constrained.setLb(0);
          m.constrained.setUb(0);
        }
      break;
case Constants.IFNE:
    if (edge.getType() == FlowEdge.FALSE_EDGE) {
      m.constrained.setLb(0);
      m.constrained.setUb(0);
    }
 else     if (edge.getType() == FlowEdge.TRUE_EDGE) {
    }
  break;
case Constants.IFLT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
  m.constrained.setLb(0);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
  m.constrained.setUb(-1);
}
break;
case Constants.IFGE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
m.constrained.setUb(-1);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
m.constrained.setLb(0);
}
break;
case Constants.IFLE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
m.constrained.setLb(1);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
m.constrained.setUb(0);
}
break;
case Constants.IFGT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
m.constrained.setUb(0);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
m.constrained.setLb(1);
}
break;
}
if (m.assigned.getLb() > m.constrained.getUb() || m.assigned.getUb() < m.constrained.getLb()) {
}
m.assigned.constrain(m.constrained);
recordBound(stmt,context,edge,m);
result.put(in.get(l).source,m);
}
}
}","private void doIf(InstructionHandle stmt,FlowEdge edge,Context context,Map<Location,ValueMapping> in,Map<Location,ValueMapping> result){
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc < context.stackPtr - 1) {
      result.put(l,in.get(l));
    }
  }
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc == context.stackPtr - 1 && in.get(l).source != null) {
      ValueMapping m=new ValueMapping(in.get(l),true);
switch (stmt.getInstruction().getOpcode()) {
case Constants.IFEQ:
        if (edge.getType() == FlowEdge.FALSE_EDGE) {
        }
 else         if (edge.getType() == FlowEdge.TRUE_EDGE) {
          m.constrained.setLb(0);
          m.constrained.setUb(0);
        }
      break;
case Constants.IFNE:
    if (edge.getType() == FlowEdge.FALSE_EDGE) {
      m.constrained.setLb(0);
      m.constrained.setUb(0);
    }
 else     if (edge.getType() == FlowEdge.TRUE_EDGE) {
    }
  break;
case Constants.IFLT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
  m.constrained.setLb(0);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
  m.constrained.setUb(-1);
}
break;
case Constants.IFGE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
m.constrained.setUb(-1);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
m.constrained.setLb(0);
}
break;
case Constants.IFLE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
m.constrained.setLb(1);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
m.constrained.setUb(0);
}
break;
case Constants.IFGT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
m.constrained.setUb(0);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
m.constrained.setLb(1);
}
break;
}
if (m.assigned.getLb() > m.constrained.getUb() || m.assigned.getUb() < m.constrained.getLb()) {
}
m.assigned.constrain(m.constrained);
recordBound(stmt,context,edge,new ValueMapping(m,true));
m.softinc=true;
result.put(in.get(l).source,m);
}
}
}",0.977255302836698
6308,"public ValueMapping(ValueMapping val,boolean full){
  assigned=new Interval(val.assigned);
  constrained=new Interval(val.constrained);
  if (full) {
    if (val.increment != null) {
      increment=new Interval(val.increment);
    }
 else {
      increment=null;
    }
    source=val.source;
    cnt=val.cnt;
  }
 else {
    increment=null;
    source=null;
    cnt=0;
  }
}","public ValueMapping(ValueMapping val,boolean full){
  assigned=new Interval(val.assigned);
  constrained=new Interval(val.constrained);
  if (full) {
    if (val.increment != null) {
      increment=new Interval(val.increment);
    }
 else {
      increment=null;
    }
    source=val.source;
    cnt=val.cnt;
    defscope=val.defscope;
    softinc=val.softinc;
  }
 else {
    increment=null;
    source=null;
    cnt=0;
    defscope=scope;
    softinc=false;
  }
}",0.89179548156956
6309,"public void printResult(DFAAppInfo program){
  for (Iterator<InstructionHandle> i=bounds.keySet().iterator(); i.hasNext(); ) {
    InstructionHandle instr=i.next();
    ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
    Context c=r.getContext();
    LineNumberTable lines=program.getMethod(c.method).getMethod().getLineNumberTable();
    int sourceLine=lines.getSourceLine(instr.getPosition());
    for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
      List<HashedString> callString=k.next();
      Pair<ValueMapping> bounds=r.get(callString);
      LoopBounds.ValueMapping first=bounds.getFirst();
      LoopBounds.ValueMapping second=bounds.getSecond();
      System.out.println(c.method + ""String_Node_Str"" + sourceLine+ ""String_Node_Str""+ callString+ ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      System.out.println(first);
      System.out.print(""String_Node_Str"");
      System.out.println(second);
      System.out.print(""String_Node_Str"");
      int val=ValueMapping.computeBound(first,second);
      if (val >= 0) {
        System.out.println(val);
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}","public void printResult(DFAAppInfo program){
  for (Iterator<InstructionHandle> i=bounds.keySet().iterator(); i.hasNext(); ) {
    InstructionHandle instr=i.next();
    ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
    Context c=r.getContext();
    LineNumberTable lines=program.getMethod(c.method).getMethod().getLineNumberTable();
    int sourceLine=lines.getSourceLine(instr.getPosition());
    for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
      List<HashedString> callString=k.next();
      Pair<ValueMapping> bounds=r.get(callString);
      LoopBounds.ValueMapping first=bounds.getFirst();
      LoopBounds.ValueMapping second=bounds.getSecond();
      System.out.println(c.method + ""String_Node_Str"" + sourceLine+ ""String_Node_Str""+ callString+ ""String_Node_Str""+ scopes.get(instr)+ ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      System.out.println(first);
      System.out.print(""String_Node_Str"");
      System.out.println(second);
      System.out.print(""String_Node_Str"");
      int val=getBound(program,instr);
      if (val >= 0) {
        System.out.println(val);
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}",0.965742251223491
6310,"public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(index),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.POP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
if (m.increment != null) {
m.increment.join(new Interval(increment,increment));
}
 else {
m.increment=new Interval(increment,increment);
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
result=in;
retval.put(context.callString,result);
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - dim) {
result.put(l,in.get(l));
}
}
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IRETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}","public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
ValueMapping v=new ValueMapping(in.get(l),true);
if (in.get(l).source == null || in.get(l).source.stackLoc != index) {
v.defscope=ValueMapping.scope;
}
result.put(new Location(index),v);
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc < 0 && !receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.POP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
Interval operand=new Interval(increment,increment);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
result=in;
retval.put(context.callString,result);
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - dim) {
result.put(l,in.get(l));
}
}
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
if (scopes.get(stmt) == null) {
ValueMapping.scope=++ValueMapping.scopeCnt;
scopes.put(stmt,new Integer(ValueMapping.scope));
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
if (scopes.get(stmt) == null) {
ValueMapping.scope=++ValueMapping.scopeCnt;
scopes.put(stmt,new Integer(ValueMapping.scope));
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
if (scopes.get(stmt) == null) {
ValueMapping.scope=++ValueMapping.scopeCnt;
scopes.put(stmt,new Integer(ValueMapping.scope));
}
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
if (scopes.get(stmt) == null) {
ValueMapping.scope=++ValueMapping.scopeCnt;
scopes.put(stmt,new Integer(ValueMapping.scope));
}
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IRETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}",0.9671934245542968
6311,"public boolean equals(Object o){
  ValueMapping m=(ValueMapping)o;
  boolean inceq=false;
  if (increment == null && m.increment == null) {
    inceq=true;
  }
 else   if (increment == null || m.increment == null) {
    inceq=false;
  }
 else {
    inceq=increment.equals(m.increment);
  }
  return assigned.equals(m.assigned) && constrained.equals(m.constrained) && inceq;
}","public boolean equals(Object o){
  ValueMapping m=(ValueMapping)o;
  boolean inceq=false;
  if (increment == null && m.increment == null) {
    inceq=true;
  }
 else   if (increment == null || m.increment == null) {
    inceq=false;
  }
 else {
    inceq=increment.equals(m.increment);
  }
  return assigned.equals(m.assigned) && constrained.equals(m.constrained) && inceq&& softinc == m.softinc;
}",0.9702457956015524
6312,"public static int computeBound(ValueMapping first,ValueMapping second){
  if (first.increment == null || second.increment == null) {
    return -1;
  }
  if (!first.assigned.hasLb() || !first.assigned.hasUb() || !second.assigned.hasLb()|| !second.assigned.hasUb()) {
    return -1;
  }
  if (first.increment.getLb() * first.increment.getUb() <= 0 || second.increment.getLb() * second.increment.getUb() <= 0) {
    return -1;
  }
  int firstRange=first.assigned.getUb() - first.assigned.getLb() + 1;
  int secondRange=second.assigned.getUb() - second.assigned.getLb() + 1;
  if (firstRange < 0 || secondRange < 0) {
    return -1;
  }
  int firstBound;
  if (first.assigned.getUb() < first.assigned.getLb()) {
    firstBound=0;
  }
 else {
    firstBound=(int)Math.ceil((double)firstRange / Math.min(Math.abs(first.increment.getUb()),Math.abs(first.increment.getLb())));
  }
  int secondBound;
  if (second.assigned.getUb() < second.assigned.getLb()) {
    secondBound=0;
  }
 else {
    secondBound=(int)Math.ceil((double)secondRange / Math.min(Math.abs(second.increment.getUb()),Math.abs(second.increment.getLb())));
  }
  return Math.max(firstBound,secondBound);
}","public static int computeBound(ValueMapping first,ValueMapping second){
  if (first.increment == null || second.increment == null) {
    return -1;
  }
  if (!first.assigned.hasLb() || !first.assigned.hasUb() || !second.assigned.hasLb()|| !second.assigned.hasUb()) {
    return -1;
  }
  if (first.increment.getLb() * first.increment.getUb() <= 0 || second.increment.getLb() * second.increment.getUb() <= 0) {
    return -1;
  }
  int firstRange=first.assigned.getUb() - first.assigned.getLb() + 1;
  int secondRange=second.assigned.getUb() - second.assigned.getLb() + 1;
  int firstBound;
  if (first.assigned.getUb() < first.assigned.getLb()) {
    firstBound=0;
  }
 else {
    firstBound=(int)Math.ceil((double)firstRange / Math.min(Math.abs(first.increment.getUb()),Math.abs(first.increment.getLb())));
  }
  int secondBound;
  if (second.assigned.getUb() < second.assigned.getLb()) {
    secondBound=0;
  }
 else {
    secondBound=(int)Math.ceil((double)secondRange / Math.min(Math.abs(second.increment.getUb()),Math.abs(second.increment.getLb())));
  }
  return Math.max(firstBound,secondBound);
}",0.9726872246696036
6313,"public String toString(){
  return ""String_Node_Str"" + assigned + ""String_Node_Str""+ constrained+ ""String_Node_Str""+ source+ ""String_Node_Str""+ cnt+ ""String_Node_Str""+ increment+ ""String_Node_Str"";
}","public String toString(){
  return ""String_Node_Str"" + assigned + ""String_Node_Str""+ constrained+ ""String_Node_Str""+ source+ ""String_Node_Str""+ cnt+ ""String_Node_Str""+ increment+ ""String_Node_Str""+ defscope+ ""String_Node_Str""+ softinc+ ""String_Node_Str"";
}",0.8747252747252747
6314,"private void doIfIcmp(InstructionHandle stmt,FlowEdge edge,Context context,Map<Location,ValueMapping> in,Map<Location,ValueMapping> result){
  Interval constraint=null;
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc == context.stackPtr - 1) {
      constraint=in.get(l).assigned;
    }
  }
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc < context.stackPtr - 2) {
      result.put(l,in.get(l));
    }
  }
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc == context.stackPtr - 2 && in.get(l).source != null) {
      ValueMapping m=new ValueMapping(in.get(l),true);
switch (stmt.getInstruction().getOpcode()) {
case Constants.IF_ICMPEQ:
        if (edge.getType() == FlowEdge.FALSE_EDGE) {
        }
 else         if (edge.getType() == FlowEdge.TRUE_EDGE) {
          if (constraint.hasLb()) {
            m.constrained.setLb(constraint.getLb());
          }
          if (constraint.hasUb()) {
            m.constrained.setUb(constraint.getUb());
          }
        }
      break;
case Constants.IF_ICMPNE:
    if (edge.getType() == FlowEdge.FALSE_EDGE) {
      if (constraint.hasLb()) {
        m.constrained.setLb(constraint.getLb());
      }
      if (constraint.hasUb()) {
        m.constrained.setUb(constraint.getUb());
      }
    }
 else     if (edge.getType() == FlowEdge.TRUE_EDGE) {
    }
  break;
case Constants.IF_ICMPLT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
  if (constraint.hasLb()) {
    m.constrained.setLb(constraint.getLb());
  }
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
  if (constraint.hasUb()) {
    m.constrained.setUb(constraint.getUb() - 1);
  }
}
break;
case Constants.IF_ICMPGE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
if (constraint.hasUb()) {
m.constrained.setUb(constraint.getUb() - 1);
}
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
if (constraint.hasLb()) {
m.constrained.setLb(constraint.getLb());
}
}
break;
case Constants.IF_ICMPGT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
if (constraint.hasUb()) {
m.constrained.setUb(constraint.getUb());
}
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
if (constraint.hasLb()) {
m.constrained.setLb(constraint.getLb() + 1);
}
}
break;
case Constants.IF_ICMPLE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
if (constraint.hasLb()) {
m.constrained.setLb(constraint.getLb() - 1);
}
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
if (constraint.hasUb()) {
m.constrained.setUb(constraint.getUb());
}
}
break;
}
if (m.assigned.getLb() > m.constrained.getUb() || m.assigned.getUb() < m.constrained.getLb()) {
}
m.assigned.constrain(m.constrained);
recordBound(stmt,context,edge,m);
result.put(in.get(l).source,m);
}
}
}","private void doIfIcmp(InstructionHandle stmt,FlowEdge edge,Context context,Map<Location,ValueMapping> in,Map<Location,ValueMapping> result){
  Interval constraint=null;
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc == context.stackPtr - 1) {
      constraint=in.get(l).assigned;
    }
  }
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc < context.stackPtr - 2) {
      result.put(l,in.get(l));
    }
  }
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc == context.stackPtr - 2 && in.get(l).source != null) {
      ValueMapping m=new ValueMapping(in.get(l),true);
switch (stmt.getInstruction().getOpcode()) {
case Constants.IF_ICMPEQ:
        if (edge.getType() == FlowEdge.FALSE_EDGE) {
        }
 else         if (edge.getType() == FlowEdge.TRUE_EDGE) {
          if (constraint.hasLb()) {
            m.constrained.setLb(constraint.getLb());
          }
          if (constraint.hasUb()) {
            m.constrained.setUb(constraint.getUb());
          }
        }
      break;
case Constants.IF_ICMPNE:
    if (edge.getType() == FlowEdge.FALSE_EDGE) {
      if (constraint.hasLb()) {
        m.constrained.setLb(constraint.getLb());
      }
      if (constraint.hasUb()) {
        m.constrained.setUb(constraint.getUb());
      }
    }
 else     if (edge.getType() == FlowEdge.TRUE_EDGE) {
    }
  break;
case Constants.IF_ICMPLT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
  if (constraint.hasLb()) {
    m.constrained.setLb(constraint.getLb());
  }
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
  if (constraint.hasUb()) {
    m.constrained.setUb(constraint.getUb() - 1);
  }
}
break;
case Constants.IF_ICMPGE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
if (constraint.hasUb()) {
m.constrained.setUb(constraint.getUb() - 1);
}
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
if (constraint.hasLb()) {
m.constrained.setLb(constraint.getLb());
}
}
break;
case Constants.IF_ICMPGT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
if (constraint.hasUb()) {
m.constrained.setUb(constraint.getUb());
}
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
if (constraint.hasLb()) {
m.constrained.setLb(constraint.getLb() + 1);
}
}
break;
case Constants.IF_ICMPLE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
if (constraint.hasLb()) {
m.constrained.setLb(constraint.getLb() - 1);
}
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
if (constraint.hasUb()) {
m.constrained.setUb(constraint.getUb());
}
}
break;
}
if (m.assigned.getLb() > m.constrained.getUb() || m.assigned.getUb() < m.constrained.getLb()) {
}
m.assigned.constrain(m.constrained);
recordBound(stmt,context,edge,new ValueMapping(m,true));
m.softinc=true;
result.put(in.get(l).source,m);
}
}
}",0.992790574995604
6315,"public int getBound(DFAAppInfo program,InstructionHandle instr){
  ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
  if (r == null) {
    return -1;
  }
  int maxValue=-1;
  for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
    List<HashedString> callString=k.next();
    Pair<ValueMapping> bounds=r.get(callString);
    LoopBounds.ValueMapping first=bounds.getFirst();
    LoopBounds.ValueMapping second=bounds.getSecond();
    int val=ValueMapping.computeBound(first,second);
    if (val < 0) {
      return -1;
    }
 else {
      maxValue=Math.max(maxValue,val);
    }
  }
  return maxValue;
}","public int getBound(DFAAppInfo program,InstructionHandle instr){
  ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
  if (r == null) {
    return -1;
  }
  int maxValue=-1;
  for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
    List<HashedString> callString=k.next();
    Pair<ValueMapping> bounds=r.get(callString);
    LoopBounds.ValueMapping first=bounds.getFirst();
    LoopBounds.ValueMapping second=bounds.getSecond();
    if (scopes.get(instr).intValue() <= first.defscope || scopes.get(instr).intValue() <= second.defscope) {
      return -1;
    }
    int val=ValueMapping.computeBound(first,second);
    if (val < 0) {
      return -1;
    }
 else {
      maxValue=Math.max(maxValue,val);
    }
  }
  return maxValue;
}",0.8188202247191011
6316,"private void buildPrologue(String mainClass,List<InstructionHandle> statements,Flow flow,List<String> clinits){
  InstructionList prologue=new InstructionList();
  ConstantPoolGen prologueCP=new ConstantPoolGen();
  Instruction instr;
  int idx;
  instr=new ICONST(0);
  prologue.append(instr);
  instr=new ICONST(0);
  prologue.append(instr);
  idx=prologueCP.addMethodref(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  instr=new INVOKESTATIC(idx);
  prologue.append(instr);
  idx=prologueCP.addMethodref(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  instr=new INVOKESTATIC(idx);
  prologue.append(instr);
  for (Iterator<String> i=clinits.iterator(); i.hasNext(); ) {
    String clinit=i.next();
    String className=clinit.substring(0,clinit.lastIndexOf(""String_Node_Str""));
    idx=prologueCP.addMethodref(className,clinitName,clinitSig);
    instr=new INVOKESPECIAL(idx);
    prologue.append(instr);
  }
  instr=new ACONST_NULL();
  prologue.append(instr);
  idx=prologueCP.addMethodref(mainClass,mainName,mainSig);
  instr=new INVOKESTATIC(idx);
  prologue.append(instr);
  instr=new NOP();
  prologue.append(instr);
  prologue.setPositions(true);
  for (Iterator l=prologue.iterator(); l.hasNext(); ) {
    InstructionHandle handle=(InstructionHandle)l.next();
    statements.add(handle);
    if (handle.getNext() != null) {
      flow.addEdge(new FlowEdge(handle,handle.getNext(),FlowEdge.NORMAL_EDGE));
    }
  }
  MethodGen mg=new MethodGen(Constants.ACC_PRIVATE,Type.VOID,Type.NO_ARGS,null,mainClass + ""String_Node_Str"" + prologueName+ prologueSig,""String_Node_Str"",prologue,prologueCP);
  MethodInfo mi=new MethodInfo(cliMap.get(mainClass),prologueName + prologueSig);
  mi.setMethodGen(mg);
  cliMap.get(mainClass).getMethodInfoMap().put(prologueName + prologueSig,mi);
}","private void buildPrologue(String mainClass,List<InstructionHandle> statements,Flow flow,List<String> clinits){
  InstructionList prologue=new InstructionList();
  ConstantPoolGen prologueCP=new ConstantPoolGen();
  Instruction instr;
  int idx;
  instr=new ICONST(0);
  prologue.append(instr);
  instr=new ICONST(0);
  prologue.append(instr);
  idx=prologueCP.addMethodref(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  instr=new INVOKESTATIC(idx);
  prologue.append(instr);
  idx=prologueCP.addMethodref(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  instr=new INVOKESTATIC(idx);
  prologue.append(instr);
  for (Iterator<String> i=clinits.iterator(); i.hasNext(); ) {
    String clinit=i.next();
    String className=clinit.substring(0,clinit.lastIndexOf(""String_Node_Str""));
    idx=prologueCP.addMethodref(className,clinitName,clinitSig);
    instr=new INVOKESTATIC(idx);
    prologue.append(instr);
  }
  instr=new ACONST_NULL();
  prologue.append(instr);
  idx=prologueCP.addMethodref(mainClass,mainName,mainSig);
  instr=new INVOKESTATIC(idx);
  prologue.append(instr);
  instr=new NOP();
  prologue.append(instr);
  prologue.setPositions(true);
  for (Iterator l=prologue.iterator(); l.hasNext(); ) {
    InstructionHandle handle=(InstructionHandle)l.next();
    statements.add(handle);
    if (handle.getNext() != null) {
      flow.addEdge(new FlowEdge(handle,handle.getNext(),FlowEdge.NORMAL_EDGE));
    }
  }
  MethodGen mg=new MethodGen(Constants.ACC_PRIVATE,Type.VOID,Type.NO_ARGS,null,mainClass + ""String_Node_Str"" + prologueName+ prologueSig,""String_Node_Str"",prologue,prologueCP);
  MethodInfo mi=new MethodInfo(cliMap.get(mainClass),prologueName + prologueSig);
  mi.setMethodGen(mg);
  cliMap.get(mainClass).getMethodInfoMap().put(prologueName + prologueSig,mi);
}",0.9975089952947688
6317,"public void exitUsage(boolean dumpConfig){
  System.err.println(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",configFile,execClass.getCanonicalName()));
  System.err.println(MessageFormat.format(""String_Node_Str"",configFile,WCETAnalysis.class.getName(),ProjectConfig.APP_CLASS_NAME.getKey(),""String_Node_Str""));
  System.err.println(""String_Node_Str"" + ""String_Node_Str"");
  for (  Option<?> o : Config.instance().availableOptions()) {
    System.err.println(""String_Node_Str"" + o.toString(15));
  }
  System.err.println(""String_Node_Str"");
  if (dumpConfig)   System.err.println(""String_Node_Str"" + Config.instance().dumpConfiguration(4));
  System.exit(1);
}","public void exitUsage(boolean dumpConfig){
  printUsage(dumpConfig);
  System.exit(1);
}",0.228646517739816
6318,"@Override public void appendDeclarations(NTASystem system,String NUM_METHODS){
  super.appendDeclarations(system,NUM_METHODS);
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,initNumBlocks()));
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,cache.getNumBlocks(),initCache(NUM_METHODS)));
  system.appendDeclaration(String.format(""String_Node_Str""));
  system.appendDeclaration(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + cache.getNumBlocks() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (cache.getNumBlocks() - 1)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public void appendDeclarations(NTASystem system,String NUM_METHODS){
  super.appendDeclarations(system,NUM_METHODS);
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,initNumBlocks()));
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,cache.getNumBlocks(),initCache(NUM_METHODS)));
  system.appendDeclaration(String.format(""String_Node_Str""));
  system.appendDeclaration(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + cache.getNumBlocks() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (cache.getNumBlocks() - 1)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ NUM_METHODS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9705712637045586
6319,"public static void main(String[] args){
  AppInfo program=new AppInfo(new ClassInfo());
  program.parseOptions(args);
  try {
    program.load();
  }
 catch (  IOException exc) {
    exc.printStackTrace();
  }
  ReceiverTypes rt=new ReceiverTypes();
  program.setReceivers(program.runAnalysis(rt));
  LoopBounds lb=new LoopBounds();
  program.runAnalysis(lb);
  lb.printResult(program);
}","public static void main(String[] args){
  DFAAppInfo program=new DFAAppInfo(new DFAClassInfo());
  program.parseOptions(args);
  try {
    program.load();
  }
 catch (  IOException exc) {
    exc.printStackTrace();
  }
  System.out.println(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  ReceiverTypes rt=new ReceiverTypes();
  program.setReceivers(program.runAnalysis(rt));
  long rtTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (rtTime - startTime));
  LoopBounds lb=new LoopBounds();
  program.runAnalysis(lb);
  lb.printResult(program);
  long lbTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (lbTime - rtTime));
}",0.7185185185185186
6320,"private void doInvoke(String methodName,InstructionHandle stmt,Context context,Map<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state,Map<List<HashedString>,Map<Location,ValueMapping>> result){
  AppInfo p=interpreter.getProgram();
  MethodInfo mi=p.getMethod(methodName);
  MethodGen method=mi.getMethodGen();
  methodName=method.getClassName() + ""String_Node_Str"" + method.getName()+ method.getSignature();
  if (method.isNative()) {
    handleNative(method,context,input,result);
  }
 else {
    int varPtr=context.stackPtr - MethodHelper.getArgSize(method);
    Context c=new Context(context);
    c.stackPtr=method.getMaxLocals();
    c.constPool=method.getConstantPool();
    if (method.isSynchronized()) {
      c.syncLevel=context.syncLevel + 1;
    }
    c.method=methodName;
    c.callString=new LinkedList<HashedString>(context.callString);
    c.callString.add(new HashedString(context.method + ""String_Node_Str"" + stmt.getPosition()));
    while (c.callString.size() > CALLSTRING_LENGTH) {
      c.callString.removeFirst();
    }
    Map<Location,ValueMapping> in=input.get(context.callString);
    Map<Location,ValueMapping> out=new HashMap<Location,ValueMapping>();
    for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
      Location l=k.next();
      if (l.stackLoc < 0) {
        out.put(l,in.get(l));
      }
      if (l.stackLoc >= varPtr) {
        out.put(new Location(l.stackLoc - varPtr),new ValueMapping(in.get(l),false));
      }
    }
    ContextMap<List<HashedString>,Map<Location,ValueMapping>> tmpresult=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(c,new HashMap<List<HashedString>,Map<Location,ValueMapping>>());
    tmpresult.put(c.callString,out);
    InstructionHandle entry=mi.getMethodGen().getInstructionList().getStart();
    state.put(entry,join(tmpresult,state.get(entry)));
    Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> r=interpreter.interpret(c,entry,state,false);
    InstructionHandle exit=mi.getMethodGen().getInstructionList().getEnd();
    if (r.get(exit) != null) {
      Map<Location,ValueMapping> returned=r.get(exit).get(c.callString);
      if (returned != null) {
        for (Iterator<Location> i=returned.keySet().iterator(); i.hasNext(); ) {
          Location l=i.next();
          if (l.stackLoc < 0) {
            ValueMapping m=new ValueMapping(returned.get(l),true);
            m.join(result.get(context.callString).get(l));
            result.get(context.callString).put(l,m);
          }
          if (l.stackLoc >= 0) {
            ValueMapping m=new ValueMapping(returned.get(l),false);
            Location loc=new Location(l.stackLoc + varPtr);
            m.join(result.get(context.callString).get(loc));
            result.get(context.callString).put(loc,m);
          }
        }
      }
    }
    for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
      Location l=i.next();
      if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - MethodHelper.getArgSize(method)) {
        result.get(context.callString).put(l,new ValueMapping(in.get(l),true));
      }
    }
  }
}","private void doInvoke(String methodName,InstructionHandle stmt,Context context,Map<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state,Map<List<HashedString>,Map<Location,ValueMapping>> result){
  DFAAppInfo p=interpreter.getProgram();
  MethodInfo mi=p.getMethod(methodName);
  MethodGen method=mi.getMethodGen();
  methodName=method.getClassName() + ""String_Node_Str"" + method.getName()+ method.getSignature();
  if (method.isNative()) {
    handleNative(method,context,input,result);
  }
 else {
    int varPtr=context.stackPtr - MethodHelper.getArgSize(method);
    Context c=new Context(context);
    c.stackPtr=method.getMaxLocals();
    c.constPool=method.getConstantPool();
    if (method.isSynchronized()) {
      c.syncLevel=context.syncLevel + 1;
    }
    c.method=methodName;
    c.callString=new LinkedList<HashedString>(context.callString);
    c.callString.add(new HashedString(context.method + ""String_Node_Str"" + stmt.getPosition()));
    while (c.callString.size() > CALLSTRING_LENGTH) {
      c.callString.removeFirst();
    }
    Map<Location,ValueMapping> in=input.get(context.callString);
    Map<Location,ValueMapping> out=new HashMap<Location,ValueMapping>();
    for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
      Location l=k.next();
      if (l.stackLoc < 0) {
        out.put(l,in.get(l));
      }
      if (l.stackLoc >= varPtr) {
        out.put(new Location(l.stackLoc - varPtr),new ValueMapping(in.get(l),false));
      }
    }
    ContextMap<List<HashedString>,Map<Location,ValueMapping>> tmpresult=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(c,new HashMap<List<HashedString>,Map<Location,ValueMapping>>());
    tmpresult.put(c.callString,out);
    InstructionHandle entry=mi.getMethodGen().getInstructionList().getStart();
    state.put(entry,join(tmpresult,state.get(entry)));
    Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> r=interpreter.interpret(c,entry,state,false);
    InstructionHandle exit=mi.getMethodGen().getInstructionList().getEnd();
    if (r.get(exit) != null) {
      Map<Location,ValueMapping> returned=r.get(exit).get(c.callString);
      if (returned != null) {
        for (Iterator<Location> i=returned.keySet().iterator(); i.hasNext(); ) {
          Location l=i.next();
          if (l.stackLoc < 0) {
            ValueMapping m=new ValueMapping(returned.get(l),true);
            m.join(result.get(context.callString).get(l));
            result.get(context.callString).put(l,m);
          }
          if (l.stackLoc >= 0) {
            ValueMapping m=new ValueMapping(returned.get(l),false);
            Location loc=new Location(l.stackLoc + varPtr);
            m.join(result.get(context.callString).get(loc));
            result.get(context.callString).put(loc,m);
          }
        }
      }
    }
    for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
      Location l=i.next();
      if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - MethodHelper.getArgSize(method)) {
        result.get(context.callString).put(l,new ValueMapping(in.get(l),true));
      }
    }
  }
}",0.9995444191343964
6321,"public void printResult(AppInfo program){
  for (Iterator<InstructionHandle> i=bounds.keySet().iterator(); i.hasNext(); ) {
    InstructionHandle instr=i.next();
    ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
    Context c=r.getContext();
    LineNumberTable lines=program.getMethod(c.method).getMethod().getLineNumberTable();
    int sourceLine=lines.getSourceLine(instr.getPosition());
    for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
      List<HashedString> callString=k.next();
      Pair<ValueMapping> bounds=r.get(callString);
      LoopBounds.ValueMapping first=bounds.getFirst();
      LoopBounds.ValueMapping second=bounds.getSecond();
      System.out.println(c.method + ""String_Node_Str"" + sourceLine+ ""String_Node_Str""+ callString+ ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      System.out.println(first);
      System.out.print(""String_Node_Str"");
      System.out.println(second);
      System.out.print(""String_Node_Str"");
      int val=ValueMapping.computeBound(first,second);
      if (val >= 0) {
        System.out.println(val);
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}","public void printResult(DFAAppInfo program){
  for (Iterator<InstructionHandle> i=bounds.keySet().iterator(); i.hasNext(); ) {
    InstructionHandle instr=i.next();
    ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
    Context c=r.getContext();
    LineNumberTable lines=program.getMethod(c.method).getMethod().getLineNumberTable();
    int sourceLine=lines.getSourceLine(instr.getPosition());
    for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
      List<HashedString> callString=k.next();
      Pair<ValueMapping> bounds=r.get(callString);
      LoopBounds.ValueMapping first=bounds.getFirst();
      LoopBounds.ValueMapping second=bounds.getSecond();
      System.out.println(c.method + ""String_Node_Str"" + sourceLine+ ""String_Node_Str""+ callString+ ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      System.out.println(first);
      System.out.print(""String_Node_Str"");
      System.out.println(second);
      System.out.print(""String_Node_Str"");
      int val=ValueMapping.computeBound(first,second);
      if (val >= 0) {
        System.out.println(val);
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}",0.9987639060568604
6322,"public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(index),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.POP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
if (m.increment != null) {
m.increment.join(new Interval(increment,increment));
}
 else {
m.increment=new Interval(increment,increment);
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
result=in;
retval.put(context.callString,result);
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - dim) {
result.put(l,in.get(l));
}
}
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IRETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}","public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(index),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.POP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
if (m.increment != null) {
m.increment.join(new Interval(increment,increment));
}
 else {
m.increment=new Interval(increment,increment);
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
result=in;
retval.put(context.callString,result);
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - dim) {
result.put(l,in.get(l));
}
}
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IRETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}",0.9987630666246272
6323,"public int getBound(AppInfo program,InstructionHandle instr){
  ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
  if (r == null) {
    return -1;
  }
  int maxValue=-1;
  for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
    List<HashedString> callString=k.next();
    Pair<ValueMapping> bounds=r.get(callString);
    LoopBounds.ValueMapping first=bounds.getFirst();
    LoopBounds.ValueMapping second=bounds.getSecond();
    int val=ValueMapping.computeBound(first,second);
    if (val < 0) {
      return -1;
    }
 else {
      maxValue=Math.max(maxValue,val);
    }
  }
  return maxValue;
}","public int getBound(DFAAppInfo program,InstructionHandle instr){
  ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
  if (r == null) {
    return -1;
  }
  int maxValue=-1;
  for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
    List<HashedString> callString=k.next();
    Pair<ValueMapping> bounds=r.get(callString);
    LoopBounds.ValueMapping first=bounds.getFirst();
    LoopBounds.ValueMapping second=bounds.getSecond();
    int val=ValueMapping.computeBound(first,second);
    if (val < 0) {
      return -1;
    }
 else {
      maxValue=Math.max(maxValue,val);
    }
  }
  return maxValue;
}",0.9976726144297904
6324,"private void doInvoke(String methodName,InstructionHandle stmt,ContextMap<List<HashedString>,CacheMapping> input,Interpreter<List<HashedString>,CacheMapping> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,CacheMapping>> state,ContextMap<List<HashedString>,CacheMapping> result){
  Context context=new Context(input.getContext());
  AppInfo p=interpreter.getProgram();
  MethodGen method=p.getMethod(methodName).getMethodGen();
  if (method == null) {
    System.out.println(context.method + ""String_Node_Str"" + stmt+ ""String_Node_Str""+ methodName);
    return;
  }
  if (method.isNative()) {
    result.putAll(input);
    return;
  }
  Context c=new Context(context);
  c.constPool=method.getConstantPool();
  c.method=methodName;
  c.callString=new LinkedList<HashedString>(context.callString);
  c.callString.add(new HashedString(context.method + ""String_Node_Str"" + stmt.getPosition()));
  ContextMap<List<HashedString>,CacheMapping> tmpresult=new ContextMap<List<HashedString>,CacheMapping>(c,new HashMap<List<HashedString>,CacheMapping>());
  CacheMapping mapping=new CacheMapping(input.get(context.callString));
  InstructionHandle last=method.getInstructionList().getEnd();
  mapping.fetch(methodName,last.getPosition());
  tmpresult.put(c.callString,mapping);
  while (c.callString.size() > CALLSTRING_LENGTH) {
    c.callString.removeFirst();
  }
  System.out.println(""String_Node_Str"" + stmt + ""String_Node_Str""+ context.callString+ ""String_Node_Str""+ context.method+ ""String_Node_Str""+ methodName);
  InstructionHandle entry=method.getInstructionList().getStart();
  state.put(entry,join(tmpresult,state.get(entry)));
  Map<InstructionHandle,ContextMap<List<HashedString>,CacheMapping>> r=interpreter.interpret(c,entry,state,false);
  InstructionHandle exit=method.getInstructionList().getEnd();
  if (r.get(exit) != null) {
    MethodGen returnMethod=p.getMethod(context.method).getMethodGen();
    mapping=new CacheMapping(r.get(exit).get(c.callString));
    last=returnMethod.getInstructionList().getEnd();
    mapping.fetch(context.method,last.getPosition());
    result.put(context.callString,mapping);
  }
  if (result.isEmpty()) {
    System.out.println(""String_Node_Str"");
  }
}","private void doInvoke(String methodName,InstructionHandle stmt,ContextMap<List<HashedString>,CacheMapping> input,Interpreter<List<HashedString>,CacheMapping> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,CacheMapping>> state,ContextMap<List<HashedString>,CacheMapping> result){
  Context context=new Context(input.getContext());
  DFAAppInfo p=interpreter.getProgram();
  MethodGen method=p.getMethod(methodName).getMethodGen();
  if (method == null) {
    System.out.println(context.method + ""String_Node_Str"" + stmt+ ""String_Node_Str""+ methodName);
    return;
  }
  if (method.isNative()) {
    result.putAll(input);
    return;
  }
  Context c=new Context(context);
  c.constPool=method.getConstantPool();
  c.method=methodName;
  c.callString=new LinkedList<HashedString>(context.callString);
  c.callString.add(new HashedString(context.method + ""String_Node_Str"" + stmt.getPosition()));
  ContextMap<List<HashedString>,CacheMapping> tmpresult=new ContextMap<List<HashedString>,CacheMapping>(c,new HashMap<List<HashedString>,CacheMapping>());
  CacheMapping mapping=new CacheMapping(input.get(context.callString));
  InstructionHandle last=method.getInstructionList().getEnd();
  mapping.fetch(methodName,last.getPosition());
  tmpresult.put(c.callString,mapping);
  while (c.callString.size() > CALLSTRING_LENGTH) {
    c.callString.removeFirst();
  }
  System.out.println(""String_Node_Str"" + stmt + ""String_Node_Str""+ context.callString+ ""String_Node_Str""+ context.method+ ""String_Node_Str""+ methodName);
  InstructionHandle entry=method.getInstructionList().getStart();
  state.put(entry,join(tmpresult,state.get(entry)));
  Map<InstructionHandle,ContextMap<List<HashedString>,CacheMapping>> r=interpreter.interpret(c,entry,state,false);
  InstructionHandle exit=method.getInstructionList().getEnd();
  if (r.get(exit) != null) {
    MethodGen returnMethod=p.getMethod(context.method).getMethodGen();
    mapping=new CacheMapping(r.get(exit).get(c.callString));
    last=returnMethod.getInstructionList().getEnd();
    mapping.fetch(context.method,last.getPosition());
    result.put(context.callString,mapping);
  }
  if (result.isEmpty()) {
    System.out.println(""String_Node_Str"");
  }
}",0.999322951929587
6325,"public void printResult(AppInfo program){
  System.out.println(""String_Node_Str"");
}","public void printResult(DFAAppInfo program){
  System.out.println(""String_Node_Str"");
}",0.9824561403508772
6326,"public ContextMap<List<HashedString>,CacheMapping> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,CacheMapping> input,Interpreter<List<HashedString>,CacheMapping> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,CacheMapping>> state){
  Context context=new Context(input.getContext());
  ContextMap<List<HashedString>,CacheMapping> result;
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESPECIAL:
case Constants.INVOKESTATIC:
{
      result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
      AppInfo p=interpreter.getProgram();
      ContextMap<String,String> receivers=p.getReceivers().get(stmt);
      if (receivers == null) {
        System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
        break;
      }
      for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
        String methodName=i.next();
        doInvoke(methodName,stmt,input,interpreter,state,result);
      }
    }
  return result;
case Constants.PUTFIELD:
{
  FieldInstruction instr=(FieldInstruction)instruction;
  if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
    result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
    String methodName=""String_Node_Str"";
    doInvoke(methodName,stmt,input,interpreter,state,result);
    return result;
  }
}
break;
case Constants.PUTSTATIC:
{
FieldInstruction instr=(FieldInstruction)instruction;
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
return result;
}
}
break;
case Constants.AASTORE:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.NEW:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.NEWARRAY:
case Constants.ANEWARRAY:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.LADD:
case Constants.LAND:
case Constants.LOR:
case Constants.LXOR:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.LSUB:
case Constants.LMUL:
case Constants.LDIV:
case Constants.LREM:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.LSHL:
case Constants.LSHR:
case Constants.LUSHR:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
}
return input;
}","public ContextMap<List<HashedString>,CacheMapping> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,CacheMapping> input,Interpreter<List<HashedString>,CacheMapping> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,CacheMapping>> state){
  Context context=new Context(input.getContext());
  ContextMap<List<HashedString>,CacheMapping> result;
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESPECIAL:
case Constants.INVOKESTATIC:
{
      result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
      DFAAppInfo p=interpreter.getProgram();
      ContextMap<String,String> receivers=p.getReceivers().get(stmt);
      if (receivers == null) {
        System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
        break;
      }
      for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
        String methodName=i.next();
        doInvoke(methodName,stmt,input,interpreter,state,result);
      }
    }
  return result;
case Constants.PUTFIELD:
{
  FieldInstruction instr=(FieldInstruction)instruction;
  if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
    result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
    String methodName=""String_Node_Str"";
    doInvoke(methodName,stmt,input,interpreter,state,result);
    return result;
  }
}
break;
case Constants.PUTSTATIC:
{
FieldInstruction instr=(FieldInstruction)instruction;
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
return result;
}
}
break;
case Constants.AASTORE:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.NEW:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.NEWARRAY:
case Constants.ANEWARRAY:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.LADD:
case Constants.LAND:
case Constants.LOR:
case Constants.LXOR:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.LSUB:
case Constants.LMUL:
case Constants.LDIV:
case Constants.LREM:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.LSHL:
case Constants.LSHR:
case Constants.LUSHR:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
}
return input;
}",0.99962410725473
6327,"public void printHelp(PrintStream out){
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","public void printHelp(PrintStream out){
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.9812775330396476
6328,"/** 
 * exec a command.
 * @param args the command as args[0] and its options
 * @param out the printstream to print the output to.
 * @return true if this is an exit command, else false.
 */
public boolean execCmd(String[] args,PrintStream out){
  if (""String_Node_Str"".equals(args[0])) {
    return true;
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    printHelp(out);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2 || ""String_Node_Str"".equals(args[1])) {
      printConfig(out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      printActions(out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      printOptions(args.length < 3 ? null : args[2],out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      List actions=joptimizer.getActionFactory().createConfiguredActions();
      printExecActions(""String_Node_Str"",actions,out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      out.println(""String_Node_Str"" + joptimizer.getAppStruct().getClassInfos().size() + ""String_Node_Str"");
      for (Iterator it=joptimizer.getAppStruct().getClassInfos().iterator(); it.hasNext(); ) {
        ClassInfo classInfo=(ClassInfo)it.next();
        out.println(classInfo.getClassName());
      }
    }
 else {
      out.println(""String_Node_Str"" + args[1]);
      return false;
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    loadConfigFile(args[1],out);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    for (int i=1; i < args.length; i++) {
      printClassInfo(args[i],out);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    joptimizer.getJopConfig().setMainClassName(args[1]);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    joptimizer.getAppStruct().setClassPath(args[1]);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    Set rootClasses=new HashSet(args.length + 2);
    JopConfig jopConfig=joptimizer.getJopConfig();
    rootClasses.add(jopConfig.getMainClassName());
    rootClasses.addAll(jopConfig.getArchConfig().getSystemClasses());
    rootClasses.addAll(Arrays.asList(args).subList(1,args.length));
    jopConfig.setRootClasses(rootClasses);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length != 3) {
      out.println(""String_Node_Str"");
      return false;
    }
    try {
      joptimizer.getJopConfig().setOption(args[1],args[2]);
    }
 catch (    ConfigurationException e) {
      out.println(""String_Node_Str"" + e.getMessage());
      logger.info(""String_Node_Str"",e);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    for (int i=1; i < args.length; i++) {
      String value=joptimizer.getJopConfig().getOption(args[i]);
      if (value != null) {
        out.println(ArgOption.formatOption(""String_Node_Str"",args[i],value));
      }
 else {
        out.println(""String_Node_Str"" + args[i]);
      }
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length != 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    try {
      joptimizer.getJopConfig().setOption(args[1],null);
    }
 catch (    ConfigurationException e) {
      out.println(""String_Node_Str"" + e.getMessage());
      logger.info(""String_Node_Str"",e);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    Action action=joptimizer.getActionFactory().createAction(args[1]);
    if (action != null) {
      runAction(action,args,2,out);
    }
 else {
      out.println(""String_Node_Str"" + args[1]);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    try {
      joptimizer.executeActions();
    }
 catch (    ActionException e) {
      out.print(""String_Node_Str"");
      out.println(e.getMessage());
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    try {
      joptimizer.loadTransitiveHull(joptimizer.getJopConfig().getRootClasses());
      joptimizer.reloadClassInfos();
    }
 catch (    Exception e) {
      out.print(""String_Node_Str"");
      out.println(e.getMessage());
      logger.info(""String_Node_Str"",e);
    }
  }
 else {
    out.println(""String_Node_Str"" + args[0]);
  }
  return false;
}","/** 
 * exec a command.
 * @param args the command as args[0] and its options
 * @param out the printstream to print the output to.
 * @return true if this is an exit command, else false.
 */
public boolean execCmd(String[] args,PrintStream out){
  if (""String_Node_Str"".equals(args[0])) {
    return true;
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    printHelp(out);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2 || ""String_Node_Str"".equals(args[1])) {
      printConfig(out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      printActions(out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      printOptions(args.length < 3 ? null : args[2],out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      List actions=joptimizer.getActionFactory().createConfiguredActions();
      printExecActions(""String_Node_Str"",actions,out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      out.println(""String_Node_Str"" + joptimizer.getAppStruct().getClassInfos().size() + ""String_Node_Str"");
      for (Iterator it=joptimizer.getAppStruct().getClassInfos().iterator(); it.hasNext(); ) {
        ClassInfo classInfo=(ClassInfo)it.next();
        out.println(classInfo.getClassName());
      }
    }
 else {
      out.println(""String_Node_Str"" + args[1]);
      return false;
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    loadConfigFile(args[1],out);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    for (int i=1; i < args.length; i++) {
      printClassInfo(args[i],out);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    joptimizer.getJopConfig().setMainClassName(args[1]);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    joptimizer.getAppStruct().setClassPath(args[1]);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    Set rootClasses=new HashSet(args.length + 2);
    JopConfig jopConfig=joptimizer.getJopConfig();
    rootClasses.add(jopConfig.getMainClassName());
    rootClasses.addAll(jopConfig.getArchConfig().getSystemClasses());
    rootClasses.addAll(Arrays.asList(args).subList(1,args.length));
    jopConfig.setRootClasses(rootClasses);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length != 3) {
      out.println(""String_Node_Str"");
      return false;
    }
    try {
      joptimizer.getJopConfig().setOption(args[1],args[2]);
    }
 catch (    ConfigurationException e) {
      out.println(""String_Node_Str"" + e.getMessage());
      logger.info(""String_Node_Str"",e);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    for (int i=1; i < args.length; i++) {
      String value=joptimizer.getJopConfig().getOption(args[i]);
      if (value != null) {
        out.println(ArgOption.formatOption(""String_Node_Str"",args[i],value));
      }
 else {
        out.println(""String_Node_Str"" + args[i]);
      }
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length != 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    try {
      joptimizer.getJopConfig().setOption(args[1],null);
    }
 catch (    ConfigurationException e) {
      out.println(""String_Node_Str"" + e.getMessage());
      logger.info(""String_Node_Str"",e);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length != 3 && args.length != 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    Level level=Level.toLevel(args[1]);
    if (args.length == 2) {
      out.println(""String_Node_Str"" + level.toString());
      Logger.getRootLogger().setLevel(level);
    }
 else {
      out.println(""String_Node_Str"" + level.toString() + ""String_Node_Str""+ args[2]);
      Logger.getLogger(args[2]).setLevel(level);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    Action action=joptimizer.getActionFactory().createAction(args[1]);
    if (action != null) {
      runAction(action,args,2,out);
    }
 else {
      out.println(""String_Node_Str"" + args[1]);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    try {
      joptimizer.executeActions();
    }
 catch (    ActionException e) {
      out.print(""String_Node_Str"");
      out.println(e.getMessage());
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    try {
      joptimizer.loadTransitiveHull(joptimizer.getJopConfig().getRootClasses());
      joptimizer.reloadClassInfos();
    }
 catch (    Exception e) {
      out.print(""String_Node_Str"");
      out.println(e.getMessage());
      logger.info(""String_Node_Str"",e);
    }
  }
 else {
    out.println(""String_Node_Str"" + args[0]);
  }
  return false;
}",0.9375582479030756
6329,"/** 
 * Link returns and exceptionhandler of inlined blocks. This assumes that the next codeblock has the same exceptionhandler set as the original invoke statement.
 * @param graph the current graph.
 * @param firstBlock the index of the first inlined block.
 * @param next the next block after the inlined code.
 * @param invokeStmt the invocation statement.
 */
private void linkBlocks(ControlFlowGraph graph,int firstBlock,BasicBlock next,InvokeStmt invokeStmt){
  int nextIndex=next.getBlockIndex();
  List exHandler=next.getExceptionHandlers();
  Variable resultVar=null;
  if (graph.getType() == ControlFlowGraph.TYPE_QUAD) {
    resultVar=((QuadInvoke)invokeStmt).getAssignedVar();
  }
  for (int i=firstBlock; i < nextIndex; i++) {
    BasicBlock block=graph.getBlock(i);
    for (Iterator it=exHandler.iterator(); it.hasNext(); ) {
      BasicBlock.ExceptionHandler handler=(BasicBlock.ExceptionHandler)it.next();
      block.addExceptionHandler(handler);
    }
    ControlFlowStmt cf=block.getControlFlowStmt();
    if (cf != null && cf instanceof ReturnStmt) {
      CodeBlock code=block.getCodeBlock();
      code.deleteStatement(code.size() - 1);
      if (resultVar != null) {
        QuadReturn ret=(QuadReturn)cf;
        block.getQuadCode().addStatement(new QuadCopy(ret.getType(),resultVar,ret.getReturnVar()));
      }
      block.setNextBlock(next);
    }
  }
}","/** 
 * Link returns and exceptionhandler of inlined blocks. This assumes that the next codeblock has the same exceptionhandler set as the original invoke statement.
 * @param graph the current graph.
 * @param firstBlock the index of the first inlined block.
 * @param next the next block after the inlined code.
 * @param invokeStmt the invocation statement.
 * @param offset local variable slot offset
 * @throws com.jopdesign.libgraph.cfg.GraphException if calculating the stackdepth fails
 */
private void linkBlocks(ControlFlowGraph graph,int firstBlock,BasicBlock next,InvokeStmt invokeStmt,int offset) throws GraphException {
  int nextIndex=next.getBlockIndex();
  List exHandler=next.getExceptionHandlers();
  Variable resultVar=null;
  if (graph.getType() == ControlFlowGraph.TYPE_QUAD) {
    resultVar=((QuadInvoke)invokeStmt).getAssignedVar();
  }
 else {
    boolean error;
    StackWalker stackWalker=new StackWalker();
    CFGWalker walker=new CFGWalker(graph,stackWalker,firstBlock,nextIndex - 1);
    stackWalker.setStack(((StackInvoke)invokeStmt).getPopTypes());
    error=walker.walkDFS(firstBlock);
    if (error) {
      throw new GraphException(""String_Node_Str"");
    }
    if (!walker.allVisited()) {
      throw new GraphException(""String_Node_Str"");
    }
  }
  for (int i=firstBlock; i < nextIndex; i++) {
    BasicBlock block=graph.getBlock(i);
    for (Iterator it=exHandler.iterator(); it.hasNext(); ) {
      BasicBlock.ExceptionHandler handler=(BasicBlock.ExceptionHandler)it.next();
      block.addExceptionHandler(handler);
    }
    ControlFlowStmt cf=block.getControlFlowStmt();
    if (cf != null && cf instanceof ReturnStmt) {
      CodeBlock code=block.getCodeBlock();
      code.deleteStatement(code.size() - 1);
      if (resultVar != null) {
        QuadReturn ret=(QuadReturn)cf;
        block.getQuadCode().addStatement(new QuadCopy(ret.getType(),resultVar,ret.getReturnVar()));
      }
 else       if (graph.getType() == ControlFlowGraph.TYPE_STACK) {
        StackCode stackCode=block.getStackCode();
        if (stackCode.getEndStack().length != 0) {
          createStackReturnCleanup(stackCode,((ReturnStmt)cf).getType(),offset);
        }
      }
      block.setNextBlock(next);
    }
  }
}",0.7595914987579354
6330,"/** 
 * Do the actual inlining.
 * @param stmt the invoke statement. This must be a handle of an {@link InvokeStmt}.
 * @param srcGraph the graph of the invoked method which will be inlined.
 * @param offset the variable offset to use for new variables of the inlined method.
 * @param unsafeInline true if checkcode should be created if enabled.
 * @return an inlineresult containing informations about the new code.
 * @throws GraphException if anything goes wrong.
 */
public InlineResult doInline(StmtHandle stmt,ControlFlowGraph srcGraph,int offset,boolean unsafeInline) throws GraphException {
  BasicBlock block=stmt.getBlock();
  InvokeStmt invokeStmt=(InvokeStmt)stmt.getStatement();
  ControlFlowGraph graph=block.getGraph();
  int newBlocks=0;
  Collection checkBlocks=new ArrayList();
  BasicBlock next=stmt.splitBefore();
  next.getCodeBlock().deleteStatement(0);
  int firstBlock=block.getBlockIndex() + 1;
  BlockCloner cloner=new BlockCloner(srcGraph,new OffsetVariableMapper(offset));
  newBlocks+=cloner.copyBlocks(graph,firstBlock);
  checkBlocks.addAll(linkFirstBlock(block,graph.getBlock(firstBlock),invokeStmt,offset));
  linkBlocks(graph,firstBlock,next,invokeStmt);
  if (insertCheckCode && unsafeInline) {
    checkBlocks.addAll(createCheckCode(block,next,invokeStmt));
  }
  int diff=getDeltaBytecode(invokeStmt,unsafeInline);
  int maxLocals=offset + srcGraph.getVariableTable().size();
  int[] checkBlockIds=new int[checkBlocks.size()];
  newBlocks+=checkBlocks.size();
  int i=0;
  for (Iterator it=checkBlocks.iterator(); it.hasNext(); ) {
    BasicBlock checkBlock=(BasicBlock)it.next();
    checkBlockIds[i]=checkBlock.getBlockIndex();
    i++;
  }
  Arrays.sort(checkBlockIds);
  return new InlineResult(firstBlock,newBlocks,checkBlockIds,diff,maxLocals);
}","/** 
 * Do the actual inlining.
 * @param stmt the invoke statement. This must be a handle of an {@link InvokeStmt}.
 * @param srcGraph the graph of the invoked method which will be inlined.
 * @param offset the variable offset to use for new variables of the inlined method.
 * @param unsafeInline true if checkcode should be created if enabled.
 * @return an inlineresult containing informations about the new code.
 * @throws GraphException if anything goes wrong.
 */
public InlineResult doInline(StmtHandle stmt,ControlFlowGraph srcGraph,int offset,boolean unsafeInline) throws GraphException {
  BasicBlock block=stmt.getBlock();
  InvokeStmt invokeStmt=(InvokeStmt)stmt.getStatement();
  ControlFlowGraph graph=block.getGraph();
  int newBlocks=0;
  Collection checkBlocks=new ArrayList();
  BasicBlock next=stmt.splitBefore();
  next.getCodeBlock().deleteStatement(0);
  int firstBlock=block.getBlockIndex() + 1;
  BlockCloner cloner=new BlockCloner(srcGraph,new OffsetVariableMapper(offset));
  newBlocks+=cloner.copyBlocks(graph,firstBlock);
  checkBlocks.addAll(linkFirstBlock(block,graph.getBlock(firstBlock),invokeStmt,offset));
  linkBlocks(graph,firstBlock,next,invokeStmt,offset);
  if (insertCheckCode && unsafeInline) {
    checkBlocks.addAll(createCheckCode(block,next,invokeStmt));
  }
  int diff=getDeltaBytecode(invokeStmt,unsafeInline);
  int maxLocals=offset + srcGraph.getVariableTable().size();
  int[] checkBlockIds=new int[checkBlocks.size()];
  newBlocks+=checkBlocks.size();
  int i=0;
  for (Iterator it=checkBlocks.iterator(); it.hasNext(); ) {
    BasicBlock checkBlock=(BasicBlock)it.next();
    checkBlockIds[i]=checkBlock.getBlockIndex();
    i++;
  }
  Arrays.sort(checkBlockIds);
  return new InlineResult(firstBlock,newBlocks,checkBlockIds,diff,maxLocals);
}",0.9980485085029271
6331,"/** 
 * Inline an invocation. This also sets the accessed fields to public if needed. The graph modified flag must be set, and the graph features must be updated correctly. This can be done by calling   {@link #setGraphModified(com.jopdesign.libgraph.cfg.ControlFlowGraph)}.
 * @see #findInlines
 * @see #checkSize(CheckResult,int)
 * @see #changeToPublic(java.util.Collection)
 * @param check the checkresult of the invocation to inline.
 * @return an inlineresult.
 */
public InlineResult doInline(CheckResult check) throws ActionException {
  changeToPublic(check.getChangePublic());
  InlineResult result;
  try {
    result=inliner.doInline(check);
  }
 catch (  GraphException e) {
    throw new ActionException(""String_Node_Str"",e);
  }
  return result;
}","/** 
 * Inline an invocation. This also sets the accessed fields to public if needed. The graph modified flag must be set, and the graph features must be updated correctly. This can be done by calling   {@link #setGraphModified(com.jopdesign.libgraph.cfg.ControlFlowGraph)}.
 * @see #findInlines
 * @see #checkSize(CheckResult,int)
 * @see #changeToPublic(java.util.Collection)
 * @param check the checkresult of the invocation to inline.
 * @return an inlineresult.
 */
public InlineResult doInline(CheckResult check) throws ActionException {
  changeToPublic(check.getChangePublic());
  InlineResult result;
  try {
    result=inliner.doInline(check);
  }
 catch (  GraphException e) {
    throw new ActionException(""String_Node_Str"" + check.getInvokedMethod().getFQMethodName() + ""String_Node_Str"",e);
  }
  return result;
}",0.9590937696664568
6332,"private void updateThreads(Map<TypeMapping,TypeMapping> input,Interpreter<TypeMapping,TypeMapping> interpreter,Map<InstructionHandle,ContextMap<TypeMapping,TypeMapping>> state){
  DFAAppInfo p=interpreter.getProgram();
  boolean modified=true;
  while (modified) {
    modified=false;
    for (Iterator<String> k=threads.keySet().iterator(); k.hasNext(); ) {
      String methodName=k.next();
      MethodGen method=p.getMethod(methodName).getMethodGen();
      InstructionHandle entry=method.getInstructionList().getStart();
      Context c=state.get(entry).getContext();
      int varPtr=c.stackPtr - MethodHelper.getArgSize(method);
      ContextMap<TypeMapping,TypeMapping> threadInput=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
      filterSet(input,threadInput,0);
      state.put(entry,join(state.get(entry),threadInput));
      ContextMap<TypeMapping,TypeMapping> savedResult=threads.get(methodName);
      Map<InstructionHandle,ContextMap<TypeMapping,TypeMapping>> r=interpreter.interpret(c,entry,state,false);
      InstructionHandle exit=method.getInstructionList().getEnd();
      ContextMap<TypeMapping,TypeMapping> threadResult;
      if (r.get(exit) != null) {
        threadResult=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
        filterReturnSet(r.get(exit),threadResult,varPtr);
      }
 else {
        threadResult=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
      }
      if (!threadResult.equals(savedResult)) {
        modified=true;
      }
      threads.put(methodName,threadResult);
    }
  }
}","private void updateThreads(Map<TypeMapping,TypeMapping> input,Interpreter<TypeMapping,TypeMapping> interpreter,Map<InstructionHandle,ContextMap<TypeMapping,TypeMapping>> state){
  DFAAppInfo p=interpreter.getProgram();
  boolean modified=true;
  while (modified) {
    modified=false;
    Map<String,ContextMap<TypeMapping,TypeMapping>> tmpThreads=new LinkedHashMap<String,ContextMap<TypeMapping,TypeMapping>>();
    for (Iterator<String> k=threads.keySet().iterator(); k.hasNext(); ) {
      String methodName=k.next();
      MethodGen method=p.getMethod(methodName).getMethodGen();
      InstructionHandle entry=method.getInstructionList().getStart();
      Context c=state.get(entry).getContext();
      int varPtr=c.stackPtr - MethodHelper.getArgSize(method);
      ContextMap<TypeMapping,TypeMapping> threadInput=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
      filterSet(input,threadInput,0);
      state.put(entry,join(state.get(entry),threadInput));
      ContextMap<TypeMapping,TypeMapping> savedResult=threads.get(methodName);
      Map<InstructionHandle,ContextMap<TypeMapping,TypeMapping>> r=interpreter.interpret(c,entry,state,false);
      InstructionHandle exit=method.getInstructionList().getEnd();
      ContextMap<TypeMapping,TypeMapping> threadResult;
      if (r.get(exit) != null) {
        threadResult=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
        filterReturnSet(r.get(exit),threadResult,varPtr);
      }
 else {
        threadResult=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
      }
      if (!threadResult.equals(savedResult)) {
        modified=true;
      }
      tmpThreads.put(methodName,threadResult);
    }
    threads=tmpThreads;
  }
}",0.9548499854354792
6333,"/** 
 * Consume all command line options and turn them into properties.<br/> <p>The arguments are processed as follows: If an argument is of the form ""-option"" or ""--option"", it is considered to be an option. If an argument is an option, the next argument is considered to be the parameter, and we add the pair to our properties, consuming both arguments. The first non-option or the argument string   {@code --} terminates the option list.
 * @param argv The argument list
 * @param options The properties to update
 * @return An array of unconsumed arguments
 */
public String[] consumeOptions(String[] argv){
  int i=0;
  Vector<String> rest=new Vector<String>();
  while (i + 1 < argv.length && argv[i].startsWith(""String_Node_Str"") && !(argv[i].equals(""String_Node_Str"") || argv[i].equals(""String_Node_Str""))) {
    String key, val;
    if (argv[i].charAt(1) == '-')     key=argv[i].substring(2);
 else     key=argv[i].substring(1);
    val=argv[i + 1];
    if (optionSet.containsKey(key)) {
      options.put(key,val);
    }
 else {
      rest.add(argv[i]);
      rest.add(argv[i + 1]);
    }
    i+=2;
  }
  for (; i < argv.length; i++)   rest.add(argv[i]);
  return rest.toArray(argv);
}","/** 
 * Consume all command line options and turn them into properties.<br/> <p>The arguments are processed as follows: If an argument is of the form ""-option"" or ""--option"", it is considered to be an option. If an argument is an option, the next argument is considered to be the parameter, and we add the pair to our properties, consuming both arguments. The first non-option or the argument string   {@code --} terminates the option list.
 * @param argv The argument list
 * @param options The properties to update
 * @return An array of unconsumed arguments
 */
public String[] consumeOptions(String[] argv){
  int i=0;
  Vector<String> rest=new Vector<String>();
  while (i + 1 < argv.length && argv[i].startsWith(""String_Node_Str"") && !(argv[i].equals(""String_Node_Str"") || argv[i].equals(""String_Node_Str""))) {
    String key, val;
    if (argv[i].charAt(1) == '-')     key=argv[i].substring(2);
 else     key=argv[i].substring(1);
    val=argv[i + 1];
    if (optionSet.containsKey(key)) {
      options.put(key,val);
    }
 else {
      System.err.println(""String_Node_Str"" + key + ""String_Node_Str""+ Arrays.toString(argv));
      rest.add(key);
      rest.add(val);
    }
    i+=2;
  }
  for (; i < argv.length; i++)   rest.add(argv[i]);
  String[] restArray=new String[rest.size()];
  return rest.toArray(restArray);
}",0.8989298454221165
6334,"private static void exitUsage(){
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + CONFIG_FILE_PROP + ""String_Node_Str""+ WCETAnalysis.class.getCanonicalName()+ ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + CONFIG_FILE_PROP + ""String_Node_Str""+ WCETAnalysis.class.getName()+ ""String_Node_Str""+ CacheConfig.BLOCK_SIZE+ ""String_Node_Str""+ ""String_Node_Str""+ Config.ROOT_CLASS_NAME+ ""String_Node_Str"");
  System.err.print(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  for (  Option o : Config.availableOptions()) {
    System.err.println(""String_Node_Str"" + o.toString(15));
  }
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + Config.instance().getOptions());
  System.err.println(""String_Node_Str"" + System.getProperties());
  System.exit(1);
}","private static void exitUsage(){
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + CONFIG_FILE_PROP + ""String_Node_Str""+ WCETAnalysis.class.getCanonicalName()+ ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + CONFIG_FILE_PROP + ""String_Node_Str""+ WCETAnalysis.class.getName()+ ""String_Node_Str""+ CacheConfig.BLOCK_SIZE+ ""String_Node_Str""+ ""String_Node_Str""+ Config.ROOT_CLASS_NAME+ ""String_Node_Str"");
  System.err.print(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  for (  Option o : Config.availableOptions()) {
    System.err.println(""String_Node_Str"" + o.toString(15));
  }
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + Config.instance().getOptions());
  System.exit(1);
}",0.9527950310559006
6335,"/** 
 * @param args
 */
private static void loadConfig(String[] args){
  try {
    String[] argsrest=Config.load(System.getProperty(CONFIG_FILE_PROP),args);
    Config c=Config.instance();
    if (argsrest.length != 0 || c.helpRequested())     exitUsage();
    tlLogger.info(""String_Node_Str"" + Config.instance().getOptions());
    c.checkOptions();
    if (Config.instance().hasReportDir()) {
      tlLogger.info(""String_Node_Str"");
      Config.instance().initializeReport();
    }
  }
 catch (  MissingConfigurationError e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    exitUsage();
  }
catch (  BadConfigurationError e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    exitUsage();
  }
catch (  Exception e) {
    e.printStackTrace();
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
}","/** 
 * @param args
 */
private static void loadConfig(String[] args){
  try {
    String[] argsrest=Config.load(System.getProperty(CONFIG_FILE_PROP),args);
    Config c=Config.instance();
    if (c.helpRequested())     exitUsage();
    if (argsrest.length != 0) {
      System.err.println(""String_Node_Str"" + Arrays.toString(argsrest));
      exitUsage();
    }
    tlLogger.info(""String_Node_Str"" + Config.instance().getOptions());
    c.checkOptions();
    if (Config.instance().hasReportDir()) {
      tlLogger.info(""String_Node_Str"");
      Config.instance().initializeReport();
    }
  }
 catch (  MissingConfigurationError e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    exitUsage();
  }
catch (  BadConfigurationError e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    exitUsage();
  }
catch (  Exception e) {
    e.printStackTrace();
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
}",0.9202127659574468
6336,"/** 
 * Find a local variable based on an entry in the LocalVariableTable attribute.
 * @see http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#5956
 * @param index
 * @param pc
 * @return local variable type and name or ""NA""
 */
public String getLocalVarName(int index,int pc){
  LocalVariableTable lvt=mi.getMethod().getLocalVariableTable();
  String lvName=""String_Node_Str"";
  boolean match=false;
  if (lvt != null) {
    LocalVariable[] lva=lvt.getLocalVariableTable();
    for (int i=0; i < lva.length; i++) {
      LocalVariable lv=lva[i];
      if (lv.getIndex() == index) {
        if (pc >= lv.getStartPC()) {
          if (pc <= lv.getStartPC() + lv.getLength()) {
            lvName=lv.getSignature() + ""String_Node_Str"" + lv.getName();
            if (match) {
              System.out.println(""String_Node_Str"");
              System.exit(-1);
            }
            match=true;
          }
        }
      }
    }
  }
  return lvName;
}","/** 
 * Find a local variable based on an entry in the LocalVariableTable attribute.
 * @see http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#5956
 * @param index
 * @param pc
 * @return local variable type and name or ""NA""
 */
public String getLocalVarName(int index,int pc){
  LocalVariableTable lvt=mi.getMethod().getLocalVariableTable();
  String lvName=""String_Node_Str"";
  boolean match=false;
  if (lvt != null) {
    LocalVariable[] lva=lvt.getLocalVariableTable();
    for (int i=0; i < lva.length; i++) {
      LocalVariable lv=lva[i];
      if (lv.getIndex() == index) {
        if (pc >= lv.getStartPC()) {
          if (pc <= lv.getStartPC() + lv.getLength()) {
            if (match && !lvName.equals(lv.getSignature() + ""String_Node_Str"" + lv.getName())) {
              System.out.println(""String_Node_Str"");
              System.exit(-1);
            }
            lvName=lv.getSignature() + ""String_Node_Str"" + lv.getName();
            match=true;
          }
        }
      }
    }
  }
  return lvName;
}",0.9230769230769232
6337,"public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  Map<Location,ValueMapping> in=input.get(context.callString);
  Map<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result.putAll(in);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result.putAll(in);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result.putAll(in);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result.putAll(in);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(index),new ValueMapping(in.get(l),false));
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result.putAll(in);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result.putAll(in);
break;
case Constants.ARRAYLENGTH:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result.putAll(in);
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.POP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
if (m.increment != null) {
m.increment.join(new Interval(increment,increment));
}
 else {
m.increment=new Interval(increment,increment);
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result.putAll(in);
break;
case Constants.MONITORENTER:
result.putAll(in);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result.putAll(in);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result.putAll(in);
break;
case Constants.INSTANCEOF:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
result.putAll(in);
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - dim) {
result.put(l,in.get(l));
}
}
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result.putAll(in);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result.putAll(in);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IRETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
System.out.println(""String_Node_Str"" + stmt);
result.putAll(in);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}","public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  Map<Location,ValueMapping> in=input.get(context.callString);
  Map<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result.putAll(in);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result.putAll(in);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result.putAll(in);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result.putAll(in);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(index),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result.putAll(in);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result.putAll(in);
break;
case Constants.ARRAYLENGTH:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result.putAll(in);
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.POP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
if (m.increment != null) {
m.increment.join(new Interval(increment,increment));
}
 else {
m.increment=new Interval(increment,increment);
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result.putAll(in);
break;
case Constants.MONITORENTER:
result.putAll(in);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result.putAll(in);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result.putAll(in);
break;
case Constants.INSTANCEOF:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
result.putAll(in);
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - dim) {
result.put(l,in.get(l));
}
}
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result.putAll(in);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result.putAll(in);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IRETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
System.out.println(""String_Node_Str"" + stmt);
result.putAll(in);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}",0.9998251529911328
6338,"/** 
 * Method getFunctionOutput, which will return the functional output for point represented by a input vector only.
 * @param xtest -the input vector
 * @return the functinal output
 */
static public int getFunctionOutputTestPointFP(int[] xtest){
  int functionalOutput_fp=0;
  int[][] data_fp_local=data_fp;
  int m=data_fp_local.length;
  int n=xtest.length;
  for (int i=0; i < m; i++) {
    if (alpha_fp[i] > 0) {
      while (n != 0) {
        n=n - 1;
        functionalOutput_fp+=(data_fp_local[m][n] >> 8) * (xtest[n] >> 8);
      }
    }
  }
  functionalOutput_fp-=bias_fp;
  return functionalOutput_fp;
}","/** 
 * Method getFunctionOutput, which will return the functional output for point represented by a input vector only.
 * @param xtest -the input vector
 * @return the functinal output
 */
static public int getFunctionOutputTestPointFP(int[] xtest){
  int functionalOutput_fp=0;
  int[][] data_fp_local=data_fp;
  int m=data_fp_local.length;
  int n=xtest.length;
  int n2=data_fp_local[0].length;
  for (int i=0; i < m; i++) {
    if (alpha_fp[i] > 0) {
      n=xtest.length;
      while (n != 0) {
        n=n - 1;
        functionalOutput_fp+=(data_fp_local[i][n] >> 8) * (xtest[n] >> 8);
      }
    }
  }
  functionalOutput_fp-=bias_fp;
  return functionalOutput_fp;
}",0.955108359133127
6339,"public Method compile(ControlFlowGraph graph,MethodGen method) throws GraphException {
  if (!graph.getFeatures().hasFeature(Features.FEATURE_VAR_ALLOC)) {
    throw new GraphException(""String_Node_Str"");
  }
  if (graph.getExceptionTable().getExceptionHandlers().size() > 0) {
    throw new GraphException(""String_Node_Str"");
  }
  InstructionList il=new InstructionList();
  method.setInstructionList(il);
  List targetList=buildTargetList(graph,il);
  BcelStmtFactory factory=new BcelStmtFactory(classInfo.getAppStruct(),classInfo.getConstantPoolInfo());
  for (Iterator it=graph.getBlocks().iterator(); it.hasNext(); ) {
    BasicBlock block=(BasicBlock)it.next();
    InstructionHandle ih=((InstructionHandle)targetList.get(block.getBlockIndex()));
    try {
      appendCode(factory,block,il,ih,targetList);
    }
 catch (    TypeException e) {
      throw new GraphException(""String_Node_Str"",e);
    }
  }
  method.removeNOPs();
  method.setMaxLocals();
  method.setMaxStack();
  method.stripAttributes(true);
  Method newMethod=method.getMethod();
  newMethod.setModifiers(method.getModifiers());
  il.dispose();
  return newMethod;
}","public Method compile(ControlFlowGraph graph,MethodGen method) throws GraphException {
  if (!graph.getFeatures().hasFeature(Features.FEATURE_VAR_ALLOC)) {
    throw new GraphException(""String_Node_Str"");
  }
  InstructionList il=new InstructionList();
  method.setInstructionList(il);
  List targetList=buildTargetList(graph,il);
  BcelStmtFactory factory=new BcelStmtFactory(classInfo.getAppStruct(),classInfo.getConstantPoolInfo());
  for (Iterator it=graph.getBlocks().iterator(); it.hasNext(); ) {
    BasicBlock block=(BasicBlock)it.next();
    InstructionHandle ih=((InstructionHandle)targetList.get(block.getBlockIndex()));
    try {
      appendCode(factory,block,il,ih,targetList);
    }
 catch (    TypeException e) {
      throw new GraphException(""String_Node_Str"",e);
    }
  }
  ExceptionTable exceptionTable=graph.getExceptionTable();
  List exceptionHandlers=exceptionTable.getExceptionHandlers();
  for (Iterator it=exceptionHandlers.iterator(); it.hasNext(); ) {
    BasicBlock.ExceptionHandler eh=(BasicBlock.ExceptionHandler)it.next();
    for (Iterator k=eh.getHandledBlocks().iterator(); k.hasNext(); ) {
      BasicBlock bb=(BasicBlock)k.next();
      int srcIndex=bb.getBlockIndex();
      InstructionHandle srcStart=(InstructionHandle)bbStarts.get(srcIndex);
      InstructionHandle srcEnd=(InstructionHandle)bbEnds.get(srcIndex);
      int dstIndex=eh.getExceptionBlock().getBlockIndex();
      InstructionHandle dstStart=(InstructionHandle)bbStarts.get(dstIndex);
      ObjectType type;
      if (eh.getExceptionClass() == null) {
        type=null;
      }
 else {
        type=new ObjectType(eh.getExceptionClass().getClassName());
      }
      method.addExceptionHandler(srcStart,srcEnd,dstStart,type);
    }
  }
  CodeExceptionGen[] cg=method.getExceptionHandlers();
  for (int i=0; i < cg.length - 1; i++) {
    if (cg[i].getEndPC().getNext() == cg[i + 1].getStartPC() && cg[i].getHandlerPC() == cg[i + 1].getHandlerPC() && cg[i].getCatchType() == cg[i + 1].getCatchType()) {
      InstructionHandle srcStart=cg[i].getStartPC();
      InstructionHandle srcEnd=cg[i + 1].getEndPC();
      InstructionHandle dstStart=cg[i].getHandlerPC();
      ObjectType type=cg[i].getCatchType();
      method.removeExceptionHandler(cg[i]);
      method.removeExceptionHandler(cg[i + 1]);
      method.addExceptionHandler(srcStart,srcEnd,dstStart,type);
    }
  }
  method.removeNOPs();
  method.setMaxLocals();
  method.setMaxStack();
  method.stripAttributes(true);
  Method newMethod=method.getMethod();
  newMethod.setModifiers(method.getModifiers());
  il.dispose();
  return newMethod;
}",0.5439531166755461
6340,"/** 
 * Insert code of block into the instruction list.
 * @param factory factory to create instructions.
 * @param block the block  to add.
 * @param il the instruction list to add the code to.
 * @param ih the last instruction before the block code.
 * @param targetList the first instruction handle per block.
 */
private void appendCode(BcelStmtFactory factory,BasicBlock block,InstructionList il,InstructionHandle ih,List targetList) throws TypeException, GraphException {
  StackCode code=block.getStackCode();
  VariableTable varTable=block.getGraph().getVariableTable();
  InstructionHandle[] targets=new InstructionHandle[block.getTargetCount()];
  for (int i=0; i < block.getTargetCount(); i++) {
    BasicBlock.Edge edge=block.getTargetEdge(i);
    if (edge != null) {
      targets[i]=(InstructionHandle)targetList.get(edge.getTargetBlock().getBlockIndex());
    }
  }
  for (Iterator it=code.getStatements().iterator(); it.hasNext(); ) {
    StackStatement stmt=(StackStatement)it.next();
    Instruction is=factory.getInstruction(stmt,varTable,targets);
    if (is == null) {
      continue;
    }
    if (is.getOpcode() != stmt.getOpcode()) {
      throw new GraphException(""String_Node_Str"" + is.getOpcode() + ""String_Node_Str""+ stmt.getOpcode()+ ""String_Node_Str"");
    }
    if (is instanceof BranchInstruction) {
      ih=il.append(ih,(BranchInstruction)is);
    }
 else {
      ih=il.append(ih,is);
    }
  }
  BasicBlock.Edge next=block.getNextBlockEdge();
  if (next != null) {
    int targetNr=next.getTargetBlock().getBlockIndex();
    if (targetNr != block.getBlockIndex() + 1) {
      il.append(ih,new GOTO((InstructionHandle)targetList.get(targetNr)));
    }
  }
}","/** 
 * Insert code of block into the instruction list.
 * @param factory factory to create instructions.
 * @param block the block  to add.
 * @param il the instruction list to add the code to.
 * @param ih the last instruction before the block code.
 * @param targetList the first instruction handle per block.
 */
private void appendCode(BcelStmtFactory factory,BasicBlock block,InstructionList il,InstructionHandle ih,List targetList) throws TypeException, GraphException {
  StackCode code=block.getStackCode();
  VariableTable varTable=block.getGraph().getVariableTable();
  InstructionHandle[] targets=new InstructionHandle[block.getTargetCount()];
  for (int i=0; i < block.getTargetCount(); i++) {
    BasicBlock.Edge edge=block.getTargetEdge(i);
    if (edge != null) {
      targets[i]=(InstructionHandle)targetList.get(edge.getTargetBlock().getBlockIndex());
    }
  }
  bbStarts.put(block.getBlockIndex(),ih);
  bbEnds.put(block.getBlockIndex(),ih);
  for (Iterator it=code.getStatements().iterator(); it.hasNext(); ) {
    StackStatement stmt=(StackStatement)it.next();
    Instruction is=factory.getInstruction(stmt,varTable,targets);
    if (is == null) {
      continue;
    }
    if (is.getOpcode() != stmt.getOpcode()) {
      throw new GraphException(""String_Node_Str"" + is.getOpcode() + ""String_Node_Str""+ stmt.getOpcode()+ ""String_Node_Str"");
    }
    if (is instanceof BranchInstruction) {
      ih=il.append(ih,(BranchInstruction)is);
    }
 else {
      ih=il.append(ih,is);
    }
    bbEnds.put(block.getBlockIndex(),ih);
  }
  BasicBlock.Edge next=block.getNextBlockEdge();
  if (next != null) {
    int targetNr=next.getTargetBlock().getBlockIndex();
    if (targetNr != block.getBlockIndex() + 1) {
      ih=il.append(ih,new GOTO((InstructionHandle)targetList.get(targetNr)));
      bbEnds.put(block.getBlockIndex(),ih);
    }
  }
}",0.9518716577540108
6341,"public Instruction getInstruction(StackStatement stmt,VariableTable varTable,InstructionHandle[] targets) throws TypeException {
  if (stmt instanceof StackArrayLength) {
    return new ARRAYLENGTH();
  }
  if (stmt instanceof StackArrayLoad) {
    Instruction is;
    if (((StackArrayLoad)stmt).getArrayType().getMachineType() == TypeInfo.TYPE_REFERENCE) {
      is=new AALOAD();
    }
 else {
switch (((StackArrayLoad)stmt).getArrayType().getType()) {
case TypeInfo.TYPE_BOOL:
        is=new BALOAD();
      break;
case TypeInfo.TYPE_BYTE:
    is=new BALOAD();
  break;
case TypeInfo.TYPE_CHAR:
is=new CALOAD();
break;
case TypeInfo.TYPE_SHORT:
is=new SALOAD();
break;
case TypeInfo.TYPE_INT:
is=new IALOAD();
break;
case TypeInfo.TYPE_LONG:
is=new LALOAD();
break;
case TypeInfo.TYPE_FLOAT:
is=new FALOAD();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DALOAD();
break;
default :
throw new TypeException(""String_Node_Str"" + ((StackArrayLoad)stmt).getArrayType().getTypeName() + ""String_Node_Str"");
}
}
return is;
}
if (stmt instanceof StackArrayStore) {
Instruction is;
if (((StackArrayStore)stmt).getArrayType().getMachineType() == TypeInfo.TYPE_REFERENCE) {
is=new AASTORE();
}
 else {
switch (((StackArrayStore)stmt).getArrayType().getType()) {
case TypeInfo.TYPE_BOOL:
is=new BASTORE();
break;
case TypeInfo.TYPE_BYTE:
is=new BASTORE();
break;
case TypeInfo.TYPE_CHAR:
is=new CASTORE();
break;
case TypeInfo.TYPE_SHORT:
is=new SASTORE();
break;
case TypeInfo.TYPE_INT:
is=new IASTORE();
break;
case TypeInfo.TYPE_LONG:
is=new LASTORE();
break;
case TypeInfo.TYPE_FLOAT:
is=new FASTORE();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DASTORE();
break;
default :
throw new TypeException(""String_Node_Str"" + ((StackArrayStore)stmt).getArrayType().getTypeName() + ""String_Node_Str"");
}
}
return is;
}
if (stmt instanceof StackBinop) {
StackBinop binop=(StackBinop)stmt;
Instruction is=null;
switch (binop.getOperand()) {
case StackBinop.OP_ADD:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IADD();
break;
case TypeInfo.TYPE_LONG:
is=new LADD();
break;
case TypeInfo.TYPE_FLOAT:
is=new FADD();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DADD();
break;
}
break;
case StackBinop.OP_AND:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IAND();
break;
case TypeInfo.TYPE_LONG:
is=new LAND();
break;
}
break;
case StackBinop.OP_CMP:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_LONG:
is=new LCMP();
break;
}
break;
case StackBinop.OP_CMPG:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_FLOAT:
is=new FCMPG();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DCMPG();
break;
}
break;
case StackBinop.OP_CMPL:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_FLOAT:
is=new FCMPL();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DCMPL();
break;
}
break;
case StackBinop.OP_DIV:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IDIV();
break;
case TypeInfo.TYPE_LONG:
is=new LDIV();
break;
case TypeInfo.TYPE_FLOAT:
is=new FDIV();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DDIV();
break;
}
break;
case StackBinop.OP_LOGIC_SHIFT_RIGHT:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IUSHR();
break;
case TypeInfo.TYPE_LONG:
is=new LUSHR();
break;
}
break;
case StackBinop.OP_MUL:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IMUL();
break;
case TypeInfo.TYPE_LONG:
is=new LMUL();
break;
case TypeInfo.TYPE_FLOAT:
is=new FMUL();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DMUL();
break;
}
break;
case StackBinop.OP_OR:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IOR();
break;
case TypeInfo.TYPE_LONG:
is=new LOR();
break;
}
break;
case StackBinop.OP_REMINDER:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IREM();
break;
case TypeInfo.TYPE_LONG:
is=new LREM();
break;
case TypeInfo.TYPE_FLOAT:
is=new FREM();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DREM();
break;
}
break;
case StackBinop.OP_SHIFT_LEFT:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISHL();
break;
case TypeInfo.TYPE_LONG:
is=new LSHL();
break;
}
break;
case StackBinop.OP_SHIFT_RIGHT:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISHR();
break;
case TypeInfo.TYPE_LONG:
is=new LSHR();
break;
}
break;
case StackBinop.OP_SUB:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISUB();
break;
case TypeInfo.TYPE_LONG:
is=new LSUB();
break;
case TypeInfo.TYPE_FLOAT:
is=new FSUB();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DSUB();
break;
}
break;
case StackBinop.OP_XOR:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IXOR();
break;
case TypeInfo.TYPE_LONG:
is=new LXOR();
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackBreakpoint) {
return new BREAKPOINT();
}
if (stmt instanceof StackCheckcast) {
StackCheckcast cast=(StackCheckcast)stmt;
return new CHECKCAST(cp.addConstant(cast.getClassConstant()));
}
if (stmt instanceof StackConvert) {
StackConvert convert=(StackConvert)stmt;
Instruction is=null;
switch (convert.getFromType().getMachineType()) {
case TypeInfo.TYPE_INT:
switch (convert.getToType().getType()) {
case TypeInfo.TYPE_LONG:
is=new I2L();
break;
case TypeInfo.TYPE_FLOAT:
is=new I2F();
break;
case TypeInfo.TYPE_DOUBLE:
is=new I2D();
break;
case TypeInfo.TYPE_SHORT:
is=new I2S();
break;
case TypeInfo.TYPE_BYTE:
is=new I2B();
break;
case TypeInfo.TYPE_BOOL:
is=new I2B();
break;
case TypeInfo.TYPE_CHAR:
is=new I2C();
break;
}
break;
case TypeInfo.TYPE_LONG:
switch (convert.getToType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new L2I();
break;
case TypeInfo.TYPE_FLOAT:
is=new L2F();
break;
case TypeInfo.TYPE_DOUBLE:
is=new L2D();
break;
}
break;
case TypeInfo.TYPE_FLOAT:
switch (convert.getToType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new F2I();
break;
case TypeInfo.TYPE_LONG:
is=new F2L();
break;
case TypeInfo.TYPE_DOUBLE:
is=new F2D();
break;
}
break;
case TypeInfo.TYPE_DOUBLE:
switch (convert.getToType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new D2I();
break;
case TypeInfo.TYPE_LONG:
is=new D2L();
break;
case TypeInfo.TYPE_FLOAT:
is=new D2F();
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackDup) {
StackDup dup=(StackDup)stmt;
Instruction is=null;
switch (dup.getTypeLength()) {
case 1:
switch (dup.getDownLength()) {
case 0:
is=new DUP();
break;
case 1:
is=new DUP_X1();
break;
case 2:
is=new DUP_X2();
break;
}
break;
case 2:
switch (dup.getDownLength()) {
case 0:
is=new DUP2();
break;
case 1:
is=new DUP2_X1();
break;
case 2:
is=new DUP2_X2();
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"" + dup.getTypeLength() + ""String_Node_Str""+ dup.getDownLength()+ ""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackEntermonitor) {
return new MONITORENTER();
}
if (stmt instanceof StackExitmonitor) {
return new MONITOREXIT();
}
if (stmt instanceof StackGetField) {
StackGetField getfield=(StackGetField)stmt;
Instruction is;
if (getfield.isStatic()) {
is=new GETSTATIC(cp.addConstant(getfield.getConstantField()));
}
 else {
is=new GETFIELD(cp.addConstant(getfield.getConstantField()));
}
return is;
}
if (stmt instanceof StackGoto) {
if (targets.length < 1) {
throw new TypeException(""String_Node_Str"");
}
return new GOTO(targets[0]);
}
if (stmt instanceof StackIfCmp) {
if (targets.length < 1) {
throw new TypeException(""String_Node_Str"");
}
StackIfCmp cmp=(StackIfCmp)stmt;
Instruction is=null;
switch (cmp.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IF_ICMPEQ(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IF_ICMPNE(targets[0]);
break;
case StackIfCmp.OP_GREATER:
is=new IF_ICMPGT(targets[0]);
break;
case StackIfCmp.OP_GREATER_OR_EQUAL:
is=new IF_ICMPGE(targets[0]);
break;
case StackIfCmp.OP_LESS:
is=new IF_ICMPLT(targets[0]);
break;
case StackIfCmp.OP_LESS_OR_EQUAL:
is=new IF_ICMPLE(targets[0]);
break;
}
break;
case TypeInfo.TYPE_REFERENCE:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IF_ACMPEQ(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IF_ACMPNE(targets[0]);
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackIfZero) {
if (targets.length < 1) {
throw new TypeException(""String_Node_Str"");
}
StackIfZero cmp=(StackIfZero)stmt;
Instruction is=null;
switch (cmp.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IFEQ(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IFNE(targets[0]);
break;
case StackIfCmp.OP_GREATER:
is=new IFGT(targets[0]);
break;
case StackIfCmp.OP_GREATER_OR_EQUAL:
is=new IFGE(targets[0]);
break;
case StackIfCmp.OP_LESS:
is=new IFLT(targets[0]);
break;
case StackIfCmp.OP_LESS_OR_EQUAL:
is=new IFLE(targets[0]);
break;
}
break;
case TypeInfo.TYPE_REFERENCE:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IFNULL(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IFNONNULL(targets[0]);
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackIInc) {
StackIInc inc=(StackIInc)stmt;
return new IINC(varTable.getIndex(inc.getIncVariable()),inc.getIncrement());
}
if (stmt instanceof StackInstanceof) {
return new INSTANCEOF(cp.addConstant(((StackInstanceof)stmt).getClassConstant()));
}
if (stmt instanceof StackInvoke) {
StackInvoke invoke=(StackInvoke)stmt;
int cls=cp.addConstant(invoke.getMethodConstant());
Instruction is=null;
switch (invoke.getInvokeType()) {
case StackInvoke.TYPE_INTERFACE:
int count=invoke.getParamSlotCount();
is=new INVOKEINTERFACE(cls,count);
break;
case StackInvoke.TYPE_SPECIAL:
is=new INVOKESPECIAL(cls);
break;
case StackInvoke.TYPE_STATIC:
is=new INVOKESTATIC(cls);
break;
case StackInvoke.TYPE_VIRTUAL:
is=new INVOKEVIRTUAL(cls);
break;
}
return is;
}
if (stmt instanceof StackJSR) {
return new JSR(null);
}
if (stmt instanceof StackJSRReturn) {
return new RET(varTable.getIndex(((StackJSRReturn)stmt).getRetAddressVar()));
}
if (stmt instanceof StackLoad) {
StackLoad load=(StackLoad)stmt;
int index=varTable.getIndex(load.getVariable());
Instruction is=null;
switch (load.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ILOAD(index);
break;
case TypeInfo.TYPE_LONG:
is=new LLOAD(index);
break;
case TypeInfo.TYPE_FLOAT:
is=new FLOAD(index);
break;
case TypeInfo.TYPE_DOUBLE:
is=new DLOAD(index);
break;
case TypeInfo.TYPE_REFERENCE:
is=new ALOAD(index);
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackLookupswitch) {
StackLookupswitch ls=(StackLookupswitch)stmt;
int[] matchs=ls.getMatchs();
if (targets.length < matchs.length + 1) {
throw new TypeException(""String_Node_Str"");
}
InstructionHandle[] mTargets=new InstructionHandle[matchs.length];
System.arraycopy(targets,1,mTargets,0,mTargets.length);
return new LOOKUPSWITCH(matchs,mTargets,targets[0]);
}
if (stmt instanceof StackNegate) {
Instruction is=null;
switch (((StackNegate)stmt).getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new INEG();
break;
case TypeInfo.TYPE_LONG:
is=new LNEG();
break;
case TypeInfo.TYPE_FLOAT:
is=new FNEG();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DNEG();
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackNew) {
return new NEW(cp.addConstant(((StackNew)stmt).getObjectClass()));
}
if (stmt instanceof StackNewArray) {
StackNewArray newArray=(StackNewArray)stmt;
Instruction is;
if (newArray.getArrayType().getMachineType() == TypeInfo.TYPE_REFERENCE) {
is=new ANEWARRAY(cp.addConstant(((RefTypeInfo)newArray.getArrayType()).getClassConstant()));
}
 else {
is=new NEWARRAY(getBcelType(newArray.getArrayType()).getType());
}
return is;
}
if (stmt instanceof StackNewMultiArray) {
StackNewMultiArray ma=(StackNewMultiArray)stmt;
return new MULTIANEWARRAY(cp.addConstant(ma.getArrayClass()),ma.getDimensions());
}
if (stmt instanceof StackNop) {
return new NOP();
}
if (stmt instanceof StackPop) {
Instruction is=null;
switch (((StackPop)stmt).getPopSize()) {
case 1:
is=new POP();
break;
case 2:
is=new POP2();
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"" + ((StackPop)stmt).getPopSize() + ""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackPush) {
StackPush push=(StackPush)stmt;
ConstantValue value=push.getValue();
Instruction is=null;
switch (value.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
int iValue=value.getIntValue();
if (iValue >= -1 && iValue <= 5) {
is=InstructionConstants.INSTRUCTIONS[Constants.ICONST_0 + iValue];
}
 else if (iValue >= -128 && iValue <= 127) {
is=new BIPUSH((byte)iValue);
}
 else if (iValue >= -32768 && iValue <= 32767) {
is=new SIPUSH((short)iValue);
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC(index);
}
break;
case TypeInfo.TYPE_LONG:
long lValue=value.getLongValue();
if (lValue == 0) {
is=InstructionConstants.LCONST_0;
}
 else if (lValue == 1) {
is=InstructionConstants.LCONST_1;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC2_W(index);
}
break;
case TypeInfo.TYPE_FLOAT:
float fValue=value.getFloatValue();
if (fValue == 0.0f) {
is=InstructionConstants.FCONST_0;
}
 else if (fValue == 1.0f) {
is=InstructionConstants.FCONST_1;
}
 else if (fValue == 2.0f) {
is=InstructionConstants.FCONST_2;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC(index);
}
break;
case TypeInfo.TYPE_DOUBLE:
double dValue=value.getDoubleValue();
if (dValue == 0.0) {
is=InstructionConstants.DCONST_0;
}
 else if (dValue == 1.0) {
is=InstructionConstants.DCONST_1;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC2_W(index);
}
break;
case TypeInfo.TYPE_REFERENCE:
String txt=value.getTxtValue();
if (txt == null) {
is=InstructionConstants.ACONST_NULL;
}
 else {
is=new LDC(cp.addConstant(value));
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"" + push.getType().getTypeName() + ""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackPutField) {
StackPutField putfield=(StackPutField)stmt;
Instruction is;
if (putfield.isStatic()) {
is=new PUTSTATIC(cp.addConstant(putfield.getConstantField()));
}
 else {
is=new PUTFIELD(cp.addConstant(putfield.getConstantField()));
}
return is;
}
if (stmt instanceof StackReturn) {
StackReturn ret=(StackReturn)stmt;
Instruction is=null;
if (ret.getType() == null) {
is=new RETURN();
}
 else {
switch (ret.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IRETURN();
break;
case TypeInfo.TYPE_LONG:
is=new LRETURN();
break;
case TypeInfo.TYPE_FLOAT:
is=new FRETURN();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DRETURN();
break;
case TypeInfo.TYPE_REFERENCE:
is=new ARETURN();
break;
}
}
return is;
}
if (stmt instanceof StackStore) {
StackStore store=(StackStore)stmt;
int index=varTable.getIndex(store.getVariable());
Instruction is=null;
switch (store.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISTORE(index);
break;
case TypeInfo.TYPE_LONG:
is=new LSTORE(index);
break;
case TypeInfo.TYPE_FLOAT:
is=new FSTORE(index);
break;
case TypeInfo.TYPE_DOUBLE:
is=new DSTORE(index);
break;
case TypeInfo.TYPE_REFERENCE:
is=new ASTORE(index);
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackSwap) {
return new SWAP();
}
if (stmt instanceof StackTableswitch) {
int[] matchs=((StackTableswitch)stmt).createMatchs();
if (targets.length < matchs.length + 1) {
throw new TypeException(""String_Node_Str"");
}
InstructionHandle[] mTargets=new InstructionHandle[matchs.length];
System.arraycopy(targets,1,mTargets,0,mTargets.length);
return new TABLESWITCH(matchs,mTargets,targets[0]);
}
if (stmt instanceof StackThrow) {
return new ATHROW();
}
if (stmt instanceof IdentityStmt) {
return null;
}
return null;
}","public Instruction getInstruction(StackStatement stmt,VariableTable varTable,InstructionHandle[] targets) throws TypeException {
  if (stmt instanceof StackArrayLength) {
    return new ARRAYLENGTH();
  }
  if (stmt instanceof StackArrayLoad) {
    Instruction is;
    if (((StackArrayLoad)stmt).getArrayType().getMachineType() == TypeInfo.TYPE_REFERENCE) {
      is=new AALOAD();
    }
 else {
switch (((StackArrayLoad)stmt).getArrayType().getType()) {
case TypeInfo.TYPE_BOOL:
        is=new BALOAD();
      break;
case TypeInfo.TYPE_BYTE:
    is=new BALOAD();
  break;
case TypeInfo.TYPE_CHAR:
is=new CALOAD();
break;
case TypeInfo.TYPE_SHORT:
is=new SALOAD();
break;
case TypeInfo.TYPE_INT:
is=new IALOAD();
break;
case TypeInfo.TYPE_LONG:
is=new LALOAD();
break;
case TypeInfo.TYPE_FLOAT:
is=new FALOAD();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DALOAD();
break;
default :
throw new TypeException(""String_Node_Str"" + ((StackArrayLoad)stmt).getArrayType().getTypeName() + ""String_Node_Str"");
}
}
return is;
}
if (stmt instanceof StackArrayStore) {
Instruction is;
if (((StackArrayStore)stmt).getArrayType().getMachineType() == TypeInfo.TYPE_REFERENCE) {
is=new AASTORE();
}
 else {
switch (((StackArrayStore)stmt).getArrayType().getType()) {
case TypeInfo.TYPE_BOOL:
is=new BASTORE();
break;
case TypeInfo.TYPE_BYTE:
is=new BASTORE();
break;
case TypeInfo.TYPE_CHAR:
is=new CASTORE();
break;
case TypeInfo.TYPE_SHORT:
is=new SASTORE();
break;
case TypeInfo.TYPE_INT:
is=new IASTORE();
break;
case TypeInfo.TYPE_LONG:
is=new LASTORE();
break;
case TypeInfo.TYPE_FLOAT:
is=new FASTORE();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DASTORE();
break;
default :
throw new TypeException(""String_Node_Str"" + ((StackArrayStore)stmt).getArrayType().getTypeName() + ""String_Node_Str"");
}
}
return is;
}
if (stmt instanceof StackBinop) {
StackBinop binop=(StackBinop)stmt;
Instruction is=null;
switch (binop.getOperand()) {
case StackBinop.OP_ADD:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IADD();
break;
case TypeInfo.TYPE_LONG:
is=new LADD();
break;
case TypeInfo.TYPE_FLOAT:
is=new FADD();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DADD();
break;
}
break;
case StackBinop.OP_AND:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IAND();
break;
case TypeInfo.TYPE_LONG:
is=new LAND();
break;
}
break;
case StackBinop.OP_CMP:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_LONG:
is=new LCMP();
break;
}
break;
case StackBinop.OP_CMPG:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_FLOAT:
is=new FCMPG();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DCMPG();
break;
}
break;
case StackBinop.OP_CMPL:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_FLOAT:
is=new FCMPL();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DCMPL();
break;
}
break;
case StackBinop.OP_DIV:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IDIV();
break;
case TypeInfo.TYPE_LONG:
is=new LDIV();
break;
case TypeInfo.TYPE_FLOAT:
is=new FDIV();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DDIV();
break;
}
break;
case StackBinop.OP_LOGIC_SHIFT_RIGHT:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IUSHR();
break;
case TypeInfo.TYPE_LONG:
is=new LUSHR();
break;
}
break;
case StackBinop.OP_MUL:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IMUL();
break;
case TypeInfo.TYPE_LONG:
is=new LMUL();
break;
case TypeInfo.TYPE_FLOAT:
is=new FMUL();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DMUL();
break;
}
break;
case StackBinop.OP_OR:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IOR();
break;
case TypeInfo.TYPE_LONG:
is=new LOR();
break;
}
break;
case StackBinop.OP_REMINDER:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IREM();
break;
case TypeInfo.TYPE_LONG:
is=new LREM();
break;
case TypeInfo.TYPE_FLOAT:
is=new FREM();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DREM();
break;
}
break;
case StackBinop.OP_SHIFT_LEFT:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISHL();
break;
case TypeInfo.TYPE_LONG:
is=new LSHL();
break;
}
break;
case StackBinop.OP_SHIFT_RIGHT:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISHR();
break;
case TypeInfo.TYPE_LONG:
is=new LSHR();
break;
}
break;
case StackBinop.OP_SUB:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISUB();
break;
case TypeInfo.TYPE_LONG:
is=new LSUB();
break;
case TypeInfo.TYPE_FLOAT:
is=new FSUB();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DSUB();
break;
}
break;
case StackBinop.OP_XOR:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IXOR();
break;
case TypeInfo.TYPE_LONG:
is=new LXOR();
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackBreakpoint) {
return new BREAKPOINT();
}
if (stmt instanceof StackCheckcast) {
StackCheckcast cast=(StackCheckcast)stmt;
return new CHECKCAST(cp.addConstant(cast.getClassConstant()));
}
if (stmt instanceof StackConvert) {
StackConvert convert=(StackConvert)stmt;
Instruction is=null;
switch (convert.getFromType().getMachineType()) {
case TypeInfo.TYPE_INT:
switch (convert.getToType().getType()) {
case TypeInfo.TYPE_LONG:
is=new I2L();
break;
case TypeInfo.TYPE_FLOAT:
is=new I2F();
break;
case TypeInfo.TYPE_DOUBLE:
is=new I2D();
break;
case TypeInfo.TYPE_SHORT:
is=new I2S();
break;
case TypeInfo.TYPE_BYTE:
is=new I2B();
break;
case TypeInfo.TYPE_BOOL:
is=new I2B();
break;
case TypeInfo.TYPE_CHAR:
is=new I2C();
break;
}
break;
case TypeInfo.TYPE_LONG:
switch (convert.getToType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new L2I();
break;
case TypeInfo.TYPE_FLOAT:
is=new L2F();
break;
case TypeInfo.TYPE_DOUBLE:
is=new L2D();
break;
}
break;
case TypeInfo.TYPE_FLOAT:
switch (convert.getToType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new F2I();
break;
case TypeInfo.TYPE_LONG:
is=new F2L();
break;
case TypeInfo.TYPE_DOUBLE:
is=new F2D();
break;
}
break;
case TypeInfo.TYPE_DOUBLE:
switch (convert.getToType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new D2I();
break;
case TypeInfo.TYPE_LONG:
is=new D2L();
break;
case TypeInfo.TYPE_FLOAT:
is=new D2F();
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackDup) {
StackDup dup=(StackDup)stmt;
Instruction is=null;
switch (dup.getTypeLength()) {
case 1:
switch (dup.getDownLength()) {
case 0:
is=new DUP();
break;
case 1:
is=new DUP_X1();
break;
case 2:
is=new DUP_X2();
break;
}
break;
case 2:
switch (dup.getDownLength()) {
case 0:
is=new DUP2();
break;
case 1:
is=new DUP2_X1();
break;
case 2:
is=new DUP2_X2();
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"" + dup.getTypeLength() + ""String_Node_Str""+ dup.getDownLength()+ ""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackEntermonitor) {
return new MONITORENTER();
}
if (stmt instanceof StackExitmonitor) {
return new MONITOREXIT();
}
if (stmt instanceof StackGetField) {
StackGetField getfield=(StackGetField)stmt;
Instruction is;
if (getfield.isStatic()) {
is=new GETSTATIC(cp.addConstant(getfield.getConstantField()));
}
 else {
is=new GETFIELD(cp.addConstant(getfield.getConstantField()));
}
return is;
}
if (stmt instanceof StackGoto) {
if (targets.length < 1) {
throw new TypeException(""String_Node_Str"");
}
return new GOTO(targets[0]);
}
if (stmt instanceof StackIfCmp) {
if (targets.length < 1) {
throw new TypeException(""String_Node_Str"");
}
StackIfCmp cmp=(StackIfCmp)stmt;
Instruction is=null;
switch (cmp.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IF_ICMPEQ(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IF_ICMPNE(targets[0]);
break;
case StackIfCmp.OP_GREATER:
is=new IF_ICMPGT(targets[0]);
break;
case StackIfCmp.OP_GREATER_OR_EQUAL:
is=new IF_ICMPGE(targets[0]);
break;
case StackIfCmp.OP_LESS:
is=new IF_ICMPLT(targets[0]);
break;
case StackIfCmp.OP_LESS_OR_EQUAL:
is=new IF_ICMPLE(targets[0]);
break;
}
break;
case TypeInfo.TYPE_REFERENCE:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IF_ACMPEQ(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IF_ACMPNE(targets[0]);
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackIfZero) {
if (targets.length < 1) {
throw new TypeException(""String_Node_Str"");
}
StackIfZero cmp=(StackIfZero)stmt;
Instruction is=null;
switch (cmp.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IFEQ(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IFNE(targets[0]);
break;
case StackIfCmp.OP_GREATER:
is=new IFGT(targets[0]);
break;
case StackIfCmp.OP_GREATER_OR_EQUAL:
is=new IFGE(targets[0]);
break;
case StackIfCmp.OP_LESS:
is=new IFLT(targets[0]);
break;
case StackIfCmp.OP_LESS_OR_EQUAL:
is=new IFLE(targets[0]);
break;
}
break;
case TypeInfo.TYPE_REFERENCE:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IFNULL(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IFNONNULL(targets[0]);
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackIInc) {
StackIInc inc=(StackIInc)stmt;
return new IINC(varTable.getIndex(inc.getIncVariable()),inc.getIncrement());
}
if (stmt instanceof StackInstanceof) {
return new INSTANCEOF(cp.addConstant(((StackInstanceof)stmt).getClassConstant()));
}
if (stmt instanceof StackInvoke) {
StackInvoke invoke=(StackInvoke)stmt;
int cls=cp.addConstant(invoke.getMethodConstant());
Instruction is=null;
switch (invoke.getInvokeType()) {
case StackInvoke.TYPE_INTERFACE:
int count=invoke.getParamSlotCount();
is=new INVOKEINTERFACE(cls,count);
break;
case StackInvoke.TYPE_SPECIAL:
is=new INVOKESPECIAL(cls);
break;
case StackInvoke.TYPE_STATIC:
is=new INVOKESTATIC(cls);
break;
case StackInvoke.TYPE_VIRTUAL:
is=new INVOKEVIRTUAL(cls);
break;
}
return is;
}
if (stmt instanceof StackJSR) {
return new JSR(null);
}
if (stmt instanceof StackJSRReturn) {
return new RET(varTable.getIndex(((StackJSRReturn)stmt).getRetAddressVar()));
}
if (stmt instanceof StackLoad) {
StackLoad load=(StackLoad)stmt;
int index=varTable.getIndex(load.getVariable());
Instruction is=null;
switch (load.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ILOAD(index);
break;
case TypeInfo.TYPE_LONG:
is=new LLOAD(index);
break;
case TypeInfo.TYPE_FLOAT:
is=new FLOAD(index);
break;
case TypeInfo.TYPE_DOUBLE:
is=new DLOAD(index);
break;
case TypeInfo.TYPE_REFERENCE:
is=new ALOAD(index);
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackLookupswitch) {
StackLookupswitch ls=(StackLookupswitch)stmt;
int[] matchs=ls.getMatchs();
if (targets.length < matchs.length + 1) {
throw new TypeException(""String_Node_Str"");
}
InstructionHandle[] mTargets=new InstructionHandle[matchs.length];
System.arraycopy(targets,1,mTargets,0,mTargets.length);
return new LOOKUPSWITCH(matchs,mTargets,targets[0]);
}
if (stmt instanceof StackNegate) {
Instruction is=null;
switch (((StackNegate)stmt).getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new INEG();
break;
case TypeInfo.TYPE_LONG:
is=new LNEG();
break;
case TypeInfo.TYPE_FLOAT:
is=new FNEG();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DNEG();
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackNew) {
return new NEW(cp.addConstant(((StackNew)stmt).getObjectClass()));
}
if (stmt instanceof StackNewArray) {
StackNewArray newArray=(StackNewArray)stmt;
Instruction is;
if (newArray.getArrayType().getMachineType() == TypeInfo.TYPE_REFERENCE) {
is=new ANEWARRAY(cp.addConstant(((RefTypeInfo)newArray.getArrayType()).getClassConstant()));
}
 else {
is=new NEWARRAY(getBcelType(newArray.getArrayType()).getType());
}
return is;
}
if (stmt instanceof StackNewMultiArray) {
StackNewMultiArray ma=(StackNewMultiArray)stmt;
return new MULTIANEWARRAY(cp.addConstant(ma.getArrayClass()),ma.getDimensions());
}
if (stmt instanceof StackNop) {
return new NOP();
}
if (stmt instanceof StackPop) {
Instruction is=null;
switch (((StackPop)stmt).getPopSize()) {
case 1:
is=new POP();
break;
case 2:
is=new POP2();
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"" + ((StackPop)stmt).getPopSize() + ""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackPush) {
StackPush push=(StackPush)stmt;
ConstantValue value=push.getValue();
Instruction is=null;
switch (value.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
int iValue=value.getIntValue();
if (iValue >= -1 && iValue <= 5) {
is=InstructionConstants.INSTRUCTIONS[Constants.ICONST_0 + iValue];
}
 else if (iValue >= -128 && iValue <= 127) {
is=new BIPUSH((byte)iValue);
}
 else if (iValue >= -32768 && iValue <= 32767) {
is=new SIPUSH((short)iValue);
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC(index);
}
break;
case TypeInfo.TYPE_LONG:
long lValue=value.getLongValue();
if (lValue == 0) {
is=InstructionConstants.LCONST_0;
}
 else if (lValue == 1) {
is=InstructionConstants.LCONST_1;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC2_W(index);
}
break;
case TypeInfo.TYPE_FLOAT:
float fValue=value.getFloatValue();
if (fValue == 0.0f) {
is=InstructionConstants.FCONST_0;
}
 else if (fValue == 1.0f) {
is=InstructionConstants.FCONST_1;
}
 else if (fValue == 2.0f) {
is=InstructionConstants.FCONST_2;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC(index);
}
break;
case TypeInfo.TYPE_DOUBLE:
double dValue=value.getDoubleValue();
if (dValue == 0.0) {
is=InstructionConstants.DCONST_0;
}
 else if (dValue == 1.0) {
is=InstructionConstants.DCONST_1;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC2_W(index);
}
break;
case TypeInfo.TYPE_REFERENCE:
String txt=value.getTxtValue();
if (txt == null) {
is=InstructionConstants.ACONST_NULL;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC(index);
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"" + push.getType().getTypeName() + ""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackPutField) {
StackPutField putfield=(StackPutField)stmt;
Instruction is;
if (putfield.isStatic()) {
is=new PUTSTATIC(cp.addConstant(putfield.getConstantField()));
}
 else {
is=new PUTFIELD(cp.addConstant(putfield.getConstantField()));
}
return is;
}
if (stmt instanceof StackReturn) {
StackReturn ret=(StackReturn)stmt;
Instruction is=null;
if (ret.getType() == null) {
is=new RETURN();
}
 else {
switch (ret.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IRETURN();
break;
case TypeInfo.TYPE_LONG:
is=new LRETURN();
break;
case TypeInfo.TYPE_FLOAT:
is=new FRETURN();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DRETURN();
break;
case TypeInfo.TYPE_REFERENCE:
is=new ARETURN();
break;
}
}
return is;
}
if (stmt instanceof StackStore) {
StackStore store=(StackStore)stmt;
int index=varTable.getIndex(store.getVariable());
Instruction is=null;
switch (store.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISTORE(index);
break;
case TypeInfo.TYPE_LONG:
is=new LSTORE(index);
break;
case TypeInfo.TYPE_FLOAT:
is=new FSTORE(index);
break;
case TypeInfo.TYPE_DOUBLE:
is=new DSTORE(index);
break;
case TypeInfo.TYPE_REFERENCE:
is=new ASTORE(index);
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackSwap) {
return new SWAP();
}
if (stmt instanceof StackTableswitch) {
int[] matchs=((StackTableswitch)stmt).createMatchs();
if (targets.length < matchs.length + 1) {
throw new TypeException(""String_Node_Str"");
}
InstructionHandle[] mTargets=new InstructionHandle[matchs.length];
System.arraycopy(targets,1,mTargets,0,mTargets.length);
return new TABLESWITCH(matchs,mTargets,targets[0]);
}
if (stmt instanceof StackThrow) {
return new ATHROW();
}
if (stmt instanceof IdentityStmt) {
return null;
}
return null;
}",0.9980477828390816
6342,"public int size(){
  return variables.size();
}","public int size(){
  return variables.size() + 1;
}",0.9591836734693876
6343,"protected void compileGraph(ControlFlowGraph graph) throws GraphException {
  ConstantPoolGen cpg=methodInfo.getConstantPoolGen();
  BcelGraphCompiler compiler=new BcelGraphCompiler(methodInfo.getClassInfo(),cpg);
  method=compiler.compile(graph,methodInfo.getClassInfo().getClassName(),method);
  methodInfo.setMethod(method);
}","protected void compileGraph(ControlFlowGraph graph) throws GraphException {
  ConstantPoolGen cpg=methodInfo.getConstantPoolGen();
  ClassInfo classInfo=methodInfo.getClassInfo();
  BcelGraphCompiler compiler=new BcelGraphCompiler(classInfo,cpg);
  method=compiler.compile(graph,classInfo.getClassName(),method);
  methodInfo.setMethod(method);
}",0.8266666666666667
6344,"private Method replace(Method method){
  MethodGen mg=new MethodGen(method,clazz.getClassName(),cpoolgen);
  InstructionList il=mg.getInstructionList();
  InstructionFinder f=new InstructionFinder(il);
  String methodId=method.getName() + method.getSignature();
  MethodInfo mi=cli.getMethodInfo(methodId);
  String invokeStr=""String_Node_Str"";
  for (Iterator i=f.search(invokeStr); i.hasNext(); ) {
    InstructionHandle[] match=(InstructionHandle[])i.next();
    InstructionHandle first=match[0];
    InvokeInstruction ii=(InvokeInstruction)first.getInstruction();
    if (ii.getClassName(cpoolgen).equals(JOPizer.nativeClass)) {
      short opid=(short)JopInstr.getNative(ii.getMethodName(cpoolgen));
      if (opid == -1) {
        System.err.println(method.getName() + ""String_Node_Str"" + ii.getMethodName(cpoolgen)+ ""String_Node_Str"");
        first.setInstruction(new NOP());
      }
 else {
        first.setInstruction(new NativeInstruction(opid,(short)1));
        jz.outTxt.println(""String_Node_Str"" + first.getPosition());
        if (JOPizer.dumpMgci) {
          il.setPositions();
          int pc=first.getPosition();
          GCRTMethodInfo.removePC(pc + 2,mi);
          GCRTMethodInfo.removePC(pc + 1,mi);
        }
      }
    }
    if (ii instanceof INVOKESPECIAL) {
      if (!ii.getMethodName(cpoolgen).equals(""String_Node_Str"")) {
        if (!cli.clazz.getClassName().equals(ii.getClassName(cpoolgen))) {
          first.setInstruction(new JOPSYS_INVOKESUPER((short)ii.getIndex()));
        }
      }
    }
  }
  f=new InstructionFinder(il);
  String cpInstr=""String_Node_Str"";
  for (Iterator it=f.search(cpInstr); it.hasNext(); ) {
    InstructionHandle[] match=(InstructionHandle[])it.next();
    InstructionHandle ih=match[0];
    CPInstruction cpii=(CPInstruction)ih.getInstruction();
    int index=cpii.getIndex();
    FieldInstruction fi=null;
    Type ft=null;
    if (cpii instanceof FieldInstruction) {
      fi=(FieldInstruction)ih.getInstruction();
      ft=fi.getFieldType(cpoolgen);
    }
    Integer idx=new Integer(index);
    int pos=cli.cpoolUsed.indexOf(idx);
    int new_index=pos + 1;
    if (pos == -1) {
      System.out.println(""String_Node_Str"" + index + ""String_Node_Str""+ cpoolgen.getConstant(index)+ ""String_Node_Str"");
      System.out.println(""String_Node_Str"" + cli.cpoolUsed);
      System.out.println(""String_Node_Str"" + cpoolgen);
      System.exit(-1);
    }
 else {
      if (cpii instanceof GETFIELD || cpii instanceof PUTFIELD) {
        int offset=getFieldOffset(cp,index);
        new_index=offset;
      }
      cpii.setIndex(new_index);
    }
    if (cpii instanceof FieldInstruction) {
      boolean isRef=ft instanceof ReferenceType;
      boolean isLong=ft == BasicType.LONG || ft == BasicType.DOUBLE;
      if (fi instanceof GETSTATIC) {
        if (isRef) {
          ih.setInstruction(new GETSTATIC_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new GETSTATIC_LONG((short)new_index));
        }
      }
 else       if (fi instanceof PUTSTATIC) {
        if (isRef) {
          ih.setInstruction(new PUTSTATIC_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new PUTSTATIC_LONG((short)new_index));
        }
      }
 else       if (fi instanceof GETFIELD) {
        if (isRef) {
          ih.setInstruction(new GETFIELD_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new GETFIELD_LONG((short)new_index));
        }
      }
 else       if (fi instanceof PUTFIELD) {
        if (isRef) {
          ih.setInstruction(new PUTFIELD_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new PUTFIELD_LONG((short)new_index));
        }
      }
    }
  }
  Method m=mg.getMethod();
  il.dispose();
  return m;
}","private Method replace(Method method){
  MethodGen mg=new MethodGen(method,clazz.getClassName(),cpoolgen);
  InstructionList il=mg.getInstructionList();
  InstructionFinder f=new InstructionFinder(il);
  String methodId=method.getName() + method.getSignature();
  MethodInfo mi=cli.getMethodInfo(methodId);
  String invokeStr=""String_Node_Str"";
  for (Iterator i=f.search(invokeStr); i.hasNext(); ) {
    InstructionHandle[] match=(InstructionHandle[])i.next();
    InstructionHandle first=match[0];
    InvokeInstruction ii=(InvokeInstruction)first.getInstruction();
    if (ii.getClassName(cpoolgen).equals(JOPizer.nativeClass)) {
      short opid=(short)JopInstr.getNative(ii.getMethodName(cpoolgen));
      if (opid == -1) {
        System.err.println(method.getName() + ""String_Node_Str"" + ii.getMethodName(cpoolgen)+ ""String_Node_Str"");
        first.setInstruction(new NOP());
      }
 else {
        first.setInstruction(new NativeInstruction(opid,(short)1));
        jz.outTxt.println(""String_Node_Str"" + first.getPosition());
        if (JOPizer.dumpMgci) {
          il.setPositions();
          int pc=first.getPosition();
          GCRTMethodInfo.removePC(pc + 2,mi);
          GCRTMethodInfo.removePC(pc + 1,mi);
        }
      }
    }
    if (ii instanceof INVOKESPECIAL) {
      if (!ii.getMethodName(cpoolgen).equals(""String_Node_Str"")) {
        if (!cli.clazz.getClassName().equals(ii.getClassName(cpoolgen))) {
          Integer idx=new Integer(ii.getIndex());
          int new_index=cli.cpoolUsed.indexOf(idx) + 1;
          first.setInstruction(new JOPSYS_INVOKESUPER((short)new_index));
        }
      }
    }
  }
  f=new InstructionFinder(il);
  String cpInstr=""String_Node_Str"";
  for (Iterator it=f.search(cpInstr); it.hasNext(); ) {
    InstructionHandle[] match=(InstructionHandle[])it.next();
    InstructionHandle ih=match[0];
    CPInstruction cpii=(CPInstruction)ih.getInstruction();
    int index=cpii.getIndex();
    FieldInstruction fi=null;
    Type ft=null;
    if (cpii instanceof FieldInstruction) {
      fi=(FieldInstruction)ih.getInstruction();
      ft=fi.getFieldType(cpoolgen);
    }
    Integer idx=new Integer(index);
    int pos=cli.cpoolUsed.indexOf(idx);
    int new_index=pos + 1;
    if (pos == -1) {
      System.out.println(""String_Node_Str"" + index + ""String_Node_Str""+ cpoolgen.getConstant(index)+ ""String_Node_Str"");
      System.out.println(""String_Node_Str"" + cli.cpoolUsed);
      System.out.println(""String_Node_Str"" + cpoolgen);
      System.exit(-1);
    }
 else {
      if (cpii instanceof GETFIELD || cpii instanceof PUTFIELD) {
        int offset=getFieldOffset(cp,index);
        new_index=offset;
      }
      cpii.setIndex(new_index);
    }
    if (cpii instanceof FieldInstruction) {
      boolean isRef=ft instanceof ReferenceType;
      boolean isLong=ft == BasicType.LONG || ft == BasicType.DOUBLE;
      if (fi instanceof GETSTATIC) {
        if (isRef) {
          ih.setInstruction(new GETSTATIC_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new GETSTATIC_LONG((short)new_index));
        }
      }
 else       if (fi instanceof PUTSTATIC) {
        if (isRef) {
          ih.setInstruction(new PUTSTATIC_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new PUTSTATIC_LONG((short)new_index));
        }
      }
 else       if (fi instanceof GETFIELD) {
        if (isRef) {
          ih.setInstruction(new GETFIELD_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new GETFIELD_LONG((short)new_index));
        }
      }
 else       if (fi instanceof PUTFIELD) {
        if (isRef) {
          ih.setInstruction(new PUTFIELD_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new PUTFIELD_LONG((short)new_index));
        }
      }
    }
  }
  Method m=mg.getMethod();
  il.dispose();
  return m;
}",0.984579799537394
6345,"public StmtHandle processStatement(StmtHandle stmt){
  PutfieldStmt put=(PutfieldStmt)stmt.getStatement();
  StmtHandle nextStmt=stmt.getNext();
  if (nextStmt == null || !(nextStmt.getStatement() instanceof GetfieldStmt)) {
    return null;
  }
  GetfieldStmt get=(GetfieldStmt)nextStmt.getStatement();
  if (!get.getConstantField().equals(put.getConstantField())) {
    return null;
  }
  if (get.getConstantField().isAnonymous() || get.getConstantField().getFieldInfo().isVolatile()) {
    return null;
  }
  stmt.setStatement(new StackDup(put.getConstantField().getFieldInfo().getType()));
  nextStmt.setStatement(put);
  return nextStmt;
}","public StmtHandle processStatement(StmtHandle stmt){
  PutfieldStmt put=(PutfieldStmt)stmt.getStatement();
  StmtHandle nextStmt=stmt.getNext();
  if (nextStmt == null || !(nextStmt.getStatement() instanceof GetfieldStmt)) {
    return null;
  }
  GetfieldStmt get=(GetfieldStmt)nextStmt.getStatement();
  if (!get.getConstantField().equals(put.getConstantField())) {
    return null;
  }
  if (get.getConstantField().isAnonymous() || get.getConstantField().getFieldInfo().isVolatile()) {
    return null;
  }
  if (!get.isStatic() || !put.isStatic()) {
    return null;
  }
  stmt.setStatement(new StackDup(put.getConstantField().getFieldInfo().getType()));
  nextStmt.setStatement(put);
  return nextStmt;
}",0.9519586104951958
6346,"static void markAndCopy(){
  int i, ref;
  getStaticRoots();
  if (!concurrentGc) {
    getStackRoots();
  }
  for (; ; ) {
synchronized (mutex) {
      ref=greyList;
      if (ref == GREY_END) {
        break;
      }
      greyList=Native.rdMem(ref + OFF_GREY);
      Native.wrMem(0,ref + OFF_GREY);
    }
    if (Native.rdMem(ref + OFF_SPACE) == toSpace) {
      continue;
    }
    int addr=Native.rdMem(ref);
    int flags=Native.rdMem(ref + OFF_TYPE);
    if (flags == IS_REFARR) {
      int size=Native.rdMem(ref + OFF_MTAB_ALEN);
      for (i=0; i < size; ++i) {
        push(Native.rdMem(addr + i));
      }
    }
 else     if (flags == IS_OBJ) {
      flags=Native.rdMem(ref + OFF_MTAB_ALEN);
      flags=Native.rdMem(flags + Const.MTAB2GC_INFO);
      for (i=0; flags != 0; ++i) {
        if ((flags & 1) != 0) {
          push(Native.rdMem(addr + i));
        }
        flags>>>=1;
      }
    }
    int size;
    int dest;
synchronized (mutex) {
      size=Native.rdMem(ref + OFF_SIZE);
      dest=copyPtr;
      copyPtr+=size;
      Native.wrMem(toSpace,ref + OFF_SPACE);
    }
    if (size > 0) {
      for (i=0; i < size; i++) {
        Native.memCopy(dest,addr,i);
      }
    }
    Native.wrMem(dest,ref + OFF_PTR);
    for (i=0; i < 10; i++)     ;
    Native.memCopy(dest,dest,-1);
  }
}","static void markAndCopy(){
  int i, ref;
  if (!concurrentGc) {
    getStackRoots();
  }
  getStaticRoots();
  for (; ; ) {
synchronized (mutex) {
      ref=greyList;
      if (ref == GREY_END) {
        break;
      }
      greyList=Native.rdMem(ref + OFF_GREY);
      Native.wrMem(0,ref + OFF_GREY);
    }
    if (Native.rdMem(ref + OFF_SPACE) == toSpace) {
      continue;
    }
    int addr=Native.rdMem(ref);
    int flags=Native.rdMem(ref + OFF_TYPE);
    if (flags == IS_REFARR) {
      int size=Native.rdMem(ref + OFF_MTAB_ALEN);
      for (i=0; i < size; ++i) {
        push(Native.rdMem(addr + i));
      }
    }
 else     if (flags == IS_OBJ) {
      flags=Native.rdMem(ref + OFF_MTAB_ALEN);
      flags=Native.rdMem(flags + Const.MTAB2GC_INFO);
      for (i=0; flags != 0; ++i) {
        if ((flags & 1) != 0) {
          push(Native.rdMem(addr + i));
        }
        flags>>>=1;
      }
    }
    int size;
    int dest;
synchronized (mutex) {
      size=Native.rdMem(ref + OFF_SIZE);
      dest=copyPtr;
      copyPtr+=size;
      Native.wrMem(toSpace,ref + OFF_SPACE);
    }
    if (size > 0) {
      for (i=0; i < size; i++) {
        Native.memCopy(dest,addr,i);
      }
    }
    Native.wrMem(dest,ref + OFF_PTR);
    for (i=0; i < 10; i++)     ;
    Native.memCopy(dest,dest,-1);
  }
}",0.98468606431853
6347,"public void initArchitecture(String arch) throws ConfigurationException {
  if (""String_Node_Str"".equals(arch)) {
    URL config=getClass().getResource(""String_Node_Str"");
    setArchConfig(config);
  }
 else   if (""String_Node_Str"".equals(arch)) {
    URL config=getClass().getResource(""String_Node_Str"");
    setArchConfig(config);
    if (!isSet(CONF_LIBRARY_PATH)) {
      setOption(CONF_LIBRARY_PATH,""String_Node_Str"");
    }
  }
 else {
    throw new ConfigurationException(""String_Node_Str"" + arch + ""String_Node_Str"");
  }
}","public void initArchitecture(String arch) throws ConfigurationException {
  if (""String_Node_Str"".equals(arch)) {
    URL config=getClass().getResource(""String_Node_Str"");
    if (config == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    setArchConfig(config);
  }
 else   if (""String_Node_Str"".equals(arch)) {
    URL config=getClass().getResource(""String_Node_Str"");
    if (config == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    setArchConfig(config);
    if (!isSet(CONF_LIBRARY_PATH)) {
      setOption(CONF_LIBRARY_PATH,""String_Node_Str"");
    }
  }
 else {
    throw new ConfigurationException(""String_Node_Str"" + arch + ""String_Node_Str"");
  }
}",0.8539325842696629
6348,"/** 
 * Check if a method call can be inlined, depending on the configuration and the class structs. The invoked method must be resolved first, and it must be ensured that this method is the only (known) method which can be called (p.e. by calling invoked.  {@link com.jopdesign.libgraph.struct.MethodInfo#isOverwritten()}) as this is not checked here to allow for more sophisticated devirtualization techniques. <p> This depends on the flags and classinfos of the called method, and on the configuration. This function does not check for resulting code sizes etc. </p><p> Here the correct method is determined and the safety criteria for inlining are checked as described in 'Practial Techniques For Virtual Call Resolution In Java' by Vijay Sundaresan and the Java Virtual Machine Specification Second Edition. </p>
 * @param caller the calling method
 * @param invoked the resolved, invoked method.
 * @param stmt the invoke stmt handle, must be a handle of an {@link InvokeStmt}.
 * @param localsOffset the variable offset to use for the inlined method.
 * @param parentInlines a set of {@link com.jopdesign.libgraph.struct.MethodInfo}s of already inlined method which contain this statement.
 * @return null if no inlining should be performed, else a checkresult.
 */
public CheckResult checkInvocation(MethodInfo caller,MethodInfo invoked,StmtHandle stmt,int localsOffset,List parentInlines){
  if (invoked == null || caller == null || !(stmt.getStatement() instanceof InvokeStmt)) {
    return null;
  }
  InvokeStmt invoke=(InvokeStmt)stmt.getStatement();
  if (!checkPreliminaries(caller,invoke.getClassInfo(),invoked,parentInlines)) {
    return null;
  }
  boolean unsafeInline=!(invoked.isStatic() || invoked.isPrivate() || invoked.isFinal()|| !assumeDynLoading);
  if (unsafeInline && !useCheckCode) {
    return null;
  }
  CheckResult rs=null;
  try {
    MethodCode code=invoked.getMethodCode();
    ControlFlowGraph srcGraph=code.createGraph();
    if (!checkCodesize(code.getCodeSize(),srcGraph,localsOffset)) {
      return null;
    }
    Set makePublic=checkGraph(caller,invoked,srcGraph);
    if (makePublic != null) {
      rs=new CheckResult(stmt,invoked,srcGraph,unsafeInline,code.getCodeSize(),srcGraph.getVariableTable().size(),localsOffset);
      rs.setChangePublic(makePublic);
      rs.setParentInlines(parentInlines);
    }
  }
 catch (  GraphException e) {
    logger.warn(""String_Node_Str"" + invoked.getFQMethodName() + ""String_Node_Str"");
    return null;
  }
  return rs;
}","/** 
 * Check if a method call can be inlined, depending on the configuration and the class structs. The invoked method must be resolved first, and it must be ensured that this method is the only (known) method which can be called (p.e. by calling invoked.  {@link com.jopdesign.libgraph.struct.MethodInfo#isOverwritten()}) as this is not checked here to allow for more sophisticated devirtualization techniques. <p> This depends on the flags and classinfos of the called method, and on the configuration. This function does not check for resulting code sizes etc. </p><p> Here the correct method is determined and the safety criteria for inlining are checked as described in 'Practial Techniques For Virtual Call Resolution In Java' by Vijay Sundaresan and the Java Virtual Machine Specification Second Edition. </p>
 * @param caller the calling method
 * @param invoked the resolved, invoked method.
 * @param stmt the invoke stmt handle, must be a handle of an {@link InvokeStmt}.
 * @param localsOffset the variable offset to use for the inlined method.
 * @param parentInlines a set of {@link com.jopdesign.libgraph.struct.MethodInfo}s of already inlined method which contain this statement.
 * @return null if no inlining should be performed, else a checkresult.
 */
public CheckResult checkInvocation(MethodInfo caller,MethodInfo invoked,StmtHandle stmt,int localsOffset,List parentInlines){
  if (invoked == null || caller == null || !(stmt.getStatement() instanceof InvokeStmt)) {
    return null;
  }
  InvokeStmt invoke=(InvokeStmt)stmt.getStatement();
  if (!checkPreliminaries(caller,invoke.getClassInfo(),invoked,parentInlines)) {
    return null;
  }
  boolean unsafeInline=!(invoked.isStatic() || invoked.isPrivate() || invoked.isFinal()|| !assumeDynLoading);
  if (unsafeInline && !useCheckCode) {
    return null;
  }
  CheckResult rs=null;
  try {
    MethodCode code=invoked.getMethodCode();
    ControlFlowGraph srcGraph=code.getGraph();
    if (!checkCodesize(code.getCodeSize(),srcGraph,localsOffset)) {
      return null;
    }
    Set makePublic=checkGraph(caller,invoked,srcGraph);
    if (makePublic != null) {
      rs=new CheckResult(stmt,invoked,srcGraph,unsafeInline,code.getCodeSize(),srcGraph.getVariableTable().size(),localsOffset);
      rs.setChangePublic(makePublic);
      rs.setParentInlines(parentInlines);
    }
  }
 catch (  GraphException e) {
    logger.warn(""String_Node_Str"" + invoked.getFQMethodName() + ""String_Node_Str"");
    return null;
  }
  return rs;
}",0.9982053838484546
6349,"public void changeToPublic(Collection changePublic){
  for (Iterator it=changePublic.iterator(); it.hasNext(); ) {
    ModifierInfo mod=(ModifierInfo)it.next();
    if (mod instanceof MethodInfo && mod.isPrivate() && !((MethodInfo)mod).getName().equals(""String_Node_Str"")) {
      mod.setFinal(true);
    }
    mod.setAccessType(ModifierInfo.ACC_PUBLIC);
  }
}","public boolean changeToPublic(Collection changePublic){
  for (Iterator it=changePublic.iterator(); it.hasNext(); ) {
    ModifierInfo mod=(ModifierInfo)it.next();
    if (mod instanceof MethodInfo && mod.isPrivate() && !((MethodInfo)mod).getName().equals(""String_Node_Str"")) {
      try {
        setVirtual((MethodInfo)mod);
      }
 catch (      GraphException e) {
        return false;
      }
      mod.setFinal(true);
    }
    mod.setAccessType(ModifierInfo.ACC_PUBLIC);
  }
  return true;
}",0.8288707799767171
6350,"public void dump(PrintWriter out,ClassInfo strcli,int arrygcinfo){
  int addr=stringTableAddress + startAddress;
  commentary(string,addr,out);
  out.println(""String_Node_Str"" + (addr + 4) + ""String_Node_Str"");
  out.println(""String_Node_Str"" + strcli.methodsAddress + ""String_Node_Str"");
  out.println(""String_Node_Str"" + (addr + 5) + ""String_Node_Str"");
  out.println(""String_Node_Str"" + string.length() + ""String_Node_Str"");
  out.println(""String_Node_Str"" + (addr + 2) + ""String_Node_Str"");
  byte chrsp[]=string.getBytes();
  out.print(""String_Node_Str"");
  for (int i=0; i < chrsp.length; i++) {
    out.print(chrsp[i] + ""String_Node_Str"");
    if ((i & 0x07) == 7) {
      out.println();
      out.print(""String_Node_Str"");
    }
  }
  out.println();
}","public void dump(PrintWriter out,ClassInfo strcli,int arrygcinfo){
  int addr=stringTableAddress + startAddress;
  commentary(string,addr,out);
  out.println(""String_Node_Str"" + (addr + 4) + ""String_Node_Str"");
  out.println(""String_Node_Str"" + strcli.methodsAddress + ""String_Node_Str"");
  out.println(""String_Node_Str"" + (addr + 5) + ""String_Node_Str"");
  out.println(""String_Node_Str"" + string.length() + ""String_Node_Str"");
  out.println(""String_Node_Str"" + (addr + 2) + ""String_Node_Str"");
  byte chrsp[]=null;
  try {
    chrsp=string.getBytes(""String_Node_Str"");
  }
 catch (  java.io.UnsupportedEncodingException e) {
    System.err.println(e);
    System.exit(-1);
  }
  out.print(""String_Node_Str"");
  for (int i=0; i < chrsp.length; i++) {
    out.print(chrsp[i] + ""String_Node_Str"");
    if ((i & 0x07) == 7) {
      out.println();
      out.print(""String_Node_Str"");
    }
  }
  out.println();
}",0.9082183563287344
6351,"/** 
 * Scan all thread stacks atomic.
 */
static void getStackRoots(){
  int i, j, cnt;
synchronized (mutex) {
    i=Native.getSP();
    for (j=128; j <= i; ++j) {
      push(Native.rdIntMem(j));
    }
    cnt=RtThreadImpl.getCnt();
    for (i=0; i < cnt; ++i) {
      if (i != RtThreadImpl.getActive()) {
        int[] mem=RtThreadImpl.getStack(i);
        int sp=RtThreadImpl.getSP(i) - 128;
        for (j=0; j <= sp; ++j) {
          push(mem[j]);
        }
      }
    }
  }
}","/** 
 * Scan all thread stacks atomic.
 */
static void getStackRoots(){
  int i, j, cnt;
synchronized (mutex) {
    i=Native.getSP();
    for (j=Const.STACK_OFF; j <= i; ++j) {
      push(Native.rdIntMem(j));
    }
    cnt=RtThreadImpl.getCnt();
    for (i=0; i < cnt; ++i) {
      if (i != RtThreadImpl.getActive()) {
        int[] mem=RtThreadImpl.getStack(i);
        int sp=RtThreadImpl.getSP(i) - Const.STACK_OFF;
        for (j=0; j <= sp; ++j) {
          push(mem[j]);
        }
      }
    }
  }
}",0.9635627530364372
6352,"public static void debug(){
synchronized (monitor) {
    int i, j;
    for (i=cnt - 1; i >= 0; --i) {
      util.Dbg.wr('\n');
      util.Dbg.intVal(ref[i].sp);
      util.Dbg.wr('\n');
      for (j=0; j <= ref[i].sp - 128; ++j) {
        util.Dbg.intVal(ref[i].stack[j]);
      }
      util.Dbg.wr('\n');
      trace(ref[i].stack,ref[i].sp);
    }
  }
}","public static void debug(){
synchronized (monitor) {
    int i, j;
    for (i=cnt - 1; i >= 0; --i) {
      util.Dbg.wr('\n');
      util.Dbg.intVal(ref[i].sp);
      util.Dbg.wr('\n');
      for (j=0; j <= ref[i].sp - Const.STACK_OFF; ++j) {
        util.Dbg.intVal(ref[i].stack[j]);
      }
      util.Dbg.wr('\n');
      trace(ref[i].stack,ref[i].sp);
    }
  }
}",0.975
6353,"static void trace(int[] stack,int sp){
  int fp, mp, vp, addr, loc, args;
  int val;
  fp=sp - 4;
  while (fp > 128 + 5) {
    mp=stack[fp + 4 - 128];
    vp=stack[fp + 2 - 128];
    val=Native.rdMem(mp);
    addr=val >>> 10;
    util.Dbg.intVal(addr);
    val=Native.rdMem(mp + 1);
    args=val & 0x1f;
    loc=(val >>> 5) & 0x1f;
    fp=vp + args + loc;
  }
}","static void trace(int[] stack,int sp){
  int fp, mp, vp, addr, loc, args;
  int val;
  fp=sp - 4;
  while (fp > Const.STACK_OFF + 5) {
    mp=stack[fp + 4 - Const.STACK_OFF];
    vp=stack[fp + 2 - Const.STACK_OFF];
    val=Native.rdMem(mp);
    addr=val >>> 10;
    util.Dbg.intVal(addr);
    val=Native.rdMem(mp + 1);
    args=val & 0x1f;
    loc=(val >>> 5) & 0x1f;
    fp=vp + args + loc;
  }
}",0.9287598944591028
6354,"/** 
 * Read a set of bytes from the stream. Limited from 1 until 4 bytes.
 * @param location
 * @param size
 * @return
 */
private synchronized int readBytes(int location,int size){
  int value;
  int i;
  if ((size < 1) || (size > 4) || (location + size >= buf.length)) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"" + location);
  }
  value=0;
  for (i=0; i < size; i++) {
    value<<=8;
    value=value | buf[location];
    location++;
  }
  return value;
}","/** 
 * Read a set of bytes from the stream. Limited from 1 until 4 bytes.
 * @param location
 * @param size
 * @return
 */
private synchronized int readBytes(int location,int size){
  int value;
  int i;
  if ((size < 1) || (size > 4) || (location + size > buf.length)) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"" + location + ""String_Node_Str""+ size+ ""String_Node_Str"");
  }
  value=0;
  for (i=0; i < size; i++) {
    value<<=8;
    value=value | (buf[location] & 0x00ff);
    location++;
  }
  return value;
}",0.9437314906219152
6355,"/** 
 * Set the ""flags"" field.
 * @param value
 */
public synchronized void setFlags(int value){
  arrayOutputStream.overwriteInt(value,FLAGS_INDEX);
}","/** 
 * Set the ""flags"" field.
 * @param value
 */
public synchronized void setFlags(int value){
  arrayOutputStream.overwriteByte(value,FLAGS_INDEX);
}",0.9834983498349836
6356,"/** 
 * Add a method to the table. Return its method ID.
 * @param method
 * @return
 */
public int addMethod(MethodInfo method){
  int methodId=method.getCodeAddress();
  if (isValidIndex(methodId) == false) {
    methodList.setSize(methodId + 1);
  }
  methodList.setElementAt(method,methodId);
  return methodId;
}","/** 
 * Add a method to the table. Return its method ID.
 * @param method
 * @return
 */
public int addMethod(MethodInfo method){
  int methodId=getMethodId(method);
  if (isValidIndex(methodId) == false) {
    methodList.setSize(methodId + 1);
  }
  methodList.setElementAt(method,methodId);
  return methodId;
}",0.946031746031746
6357,"public int getMethodStructPointer(String className,String methodSignature){
  int methodId;
  MethodInfo methodInfo;
  methodInfo=getMethodInfo(className,methodSignature);
  methodId=methodInfo.getStructAddress();
  return methodId;
}","public int getMethodStructPointer(String className,String methodSignature){
  int methodStructPointer;
  MethodInfo methodInfo;
  methodInfo=getMethodInfo(className,methodSignature);
  methodStructPointer=methodInfo.getStructAddress();
  return methodStructPointer;
}",0.9101796407185628
6358,"private int getMethodId(MethodInfo methodInfo){
  return methodInfo.getCodeAddress();
}","private int getMethodId(MethodInfo methodInfo){
  return MethodTable.getMethodId(methodInfo);
}",0.7802197802197802
6359,"/** 
 * writes data to nand at the address given returns true if error occurred
 */
public boolean writeChunkToNAND(int deviceGenericDevice,int devicenDataBytesPerChunk,int chunkInNAND,byte[] data,int dataIndex,byte[] spare,int spareIndex){
  if (data != null) {
    int column=0, pointer=0, addr0, addr1;
    addr0=(chunkInNAND % 32) & 0x1f;
    addr0=(addr0 & 0x1f) | (((chunkInNAND / 32) << 5) & 0xe0);
    addr1=((chunkInNAND / 32) >>> 3) & 0xff;
    Native.wrMem(pointer,IO_NAND + CLE);
    Native.wrMem(COMMAND_PROGRAM,IO_NAND + CLE);
    Native.wrMem(column,IO_NAND + ALE);
    Native.wrMem(addr0,IO_NAND + ALE);
    Native.wrMem(addr1,IO_NAND + ALE);
    for (int i=0; i < devicenDataBytesPerChunk; i++)     Native.wrMem(data[dataIndex + i],IO_NAND + 0);
    Native.wrMem(COMMAND_PROGRAM_CONFIRM,IO_NAND + CLE);
    waitForNandReady(""String_Node_Str"");
    if (errorOccurred())     return false;
  }
  if (spare != null) {
    int column=0, pointer=80, addr0, addr1;
    addr0=0;
    addr1=0;
    Native.wrMem(pointer,IO_NAND + CLE);
    Native.wrMem(COMMAND_PROGRAM,IO_NAND + CLE);
    Native.wrMem(column,IO_NAND + ALE);
    Native.wrMem(addr0,IO_NAND + ALE);
    Native.wrMem(addr1,IO_NAND + ALE);
    for (int i=0; i < DebugSettings.SPARE_SERIALIZED_LENGTH; i++)     Native.wrMem(spare[spareIndex + i],IO_NAND + 0);
    Native.wrMem(COMMAND_PROGRAM_CONFIRM,IO_NAND + CLE);
    waitForNandReady(""String_Node_Str"");
    if (errorOccurred())     return false;
  }
  return true;
}","/** 
 * writes data to nand at the address given returns true if error occurred
 */
public boolean writeChunkToNAND(int deviceGenericDevice,int devicenDataBytesPerChunk,int chunkInNAND,byte[] data,int dataIndex,byte[] spare,int spareIndex){
  if (data != null) {
    int column=0, pointer=0, addr0, addr1;
    addr0=(chunkInNAND % 32) & 0x1f;
    addr0=(addr0 & 0x1f) | (((chunkInNAND / 32) << 5) & 0xe0);
    addr1=((chunkInNAND / 32) >>> 3) & 0xff;
    Native.wrMem(pointer,IO_NAND + CLE);
    Native.wrMem(COMMAND_PROGRAM,IO_NAND + CLE);
    Native.wrMem(column,IO_NAND + ALE);
    Native.wrMem(addr0,IO_NAND + ALE);
    Native.wrMem(addr1,IO_NAND + ALE);
    for (int i=0; i < devicenDataBytesPerChunk; i++)     Native.wrMem(data[dataIndex + i],IO_NAND + 0);
    Native.wrMem(COMMAND_PROGRAM_CONFIRM,IO_NAND + CLE);
    waitForNandReady(""String_Node_Str"");
    if (errorOccurred())     return false;
  }
  if (spare != null) {
    int column=0, pointer=80, addr0, addr1;
    addr0=(chunkInNAND % 32) & 0x1f;
    addr0=(addr0 & 0x1f) | (((chunkInNAND / 32) << 5) & 0xe0);
    addr1=((chunkInNAND / 32) >>> 3) & 0xff;
    Native.wrMem(pointer,IO_NAND + CLE);
    Native.wrMem(COMMAND_PROGRAM,IO_NAND + CLE);
    Native.wrMem(column,IO_NAND + ALE);
    Native.wrMem(addr0,IO_NAND + ALE);
    Native.wrMem(addr1,IO_NAND + ALE);
    for (int i=0; i < DebugSettings.SPARE_SERIALIZED_LENGTH; i++)     Native.wrMem(spare[spareIndex + i],IO_NAND + 0);
    Native.wrMem(COMMAND_PROGRAM_CONFIRM,IO_NAND + CLE);
    waitForNandReady(""String_Node_Str"");
    if (errorOccurred())     return false;
  }
  return true;
}",0.9602841459476912
6360,"public boolean eraseBlockInNAND(int deviceGenericDevice,int devicenDataBytesPerChunk,int blockNumber){
  int addr0=(blockNumber & 0x07) << 5;
  int addr1=(blockNumber >>> 3) & 0xff;
  System.out.print(""String_Node_Str"");
  System.out.println(blockNumber);
  System.out.print(""String_Node_Str"");
  System.out.println(Integer.toHexString(addr0));
  System.out.print(""String_Node_Str"");
  System.out.println(Integer.toHexString(addr1));
  Native.wrMem(COMMAND_ERASE,IO_NAND + CLE);
  Native.wrMem(addr0,IO_NAND + ALE);
  Native.wrMem(addr1,IO_NAND + ALE);
  Native.wrMem(COMMAND_ERASE_CONFIRM,IO_NAND + CLE);
  waitForNandReady(""String_Node_Str"");
  return !errorOccurred();
}","public boolean eraseBlockInNAND(int deviceGenericDevice,int devicenDataBytesPerChunk,int blockNumber){
  int addr0=(blockNumber & 0x07) << 5;
  int addr1=(blockNumber >>> 3) & 0xff;
  Native.wrMem(COMMAND_ERASE,IO_NAND + CLE);
  Native.wrMem(addr0,IO_NAND + ALE);
  Native.wrMem(addr1,IO_NAND + ALE);
  Native.wrMem(COMMAND_ERASE_CONFIRM,IO_NAND + CLE);
  waitForNandReady(""String_Node_Str"");
  return !errorOccurred();
}",0.4296160877513711
6361,"/** 
 * waits until the nand is ready
 */
static int waitForNandReady(String msg){
  int i=0;
  int j;
  while (((j=Native.rdMem(0x100000)) & 0x100) != 0x100) {
    i++;
  }
  System.out.print(msg);
  System.out.println(i);
  return j;
}","/** 
 * waits until the nand is ready
 */
static int waitForNandReady(String msg){
  int i=0;
  int j;
  while (((j=Native.rdMem(0x100000)) & 0x100) != 0x100) {
    i++;
  }
  return j;
}",0.8820754716981132
6362,"/** 
 * @param args
 */
public static void main(String[] args){
  new MyRtThread(10,1 * 100){
    public void run(){
      up=true;
      flag=false;
      value=10;
      speed=0x400;
      while (true) {
        if (state == STATE_ALL) {
          counter++;
          if ((counter % value) == 0) {
            if (flag) {
              flag=false;
            }
 else {
              flag=true;
            }
          }
          counter1++;
          if ((counter1 % speed) == 0) {
            if (speaker_up) {
              value++;
              if (value >= 50) {
                speaker_up=false;
                value--;
              }
            }
 else {
              value--;
              if (value <= 10) {
                speaker_up=true;
                value++;
              }
            }
          }
        }
 else {
          flag=false;
        }
        if (flag) {
          Speaker.write(true);
        }
 else         Speaker.write(false);
        waitForNextPeriod();
      }
    }
  }
;
  new RtThread(10,100 * 1000){
    public void run(){
      val=LED0;
      up=true;
      while (true) {
        if (state == STATE_ALL) {
          if (up) {
switch (val) {
case LED0:
              val=LED1;
            break;
case LED1:
          val=LED2;
        break;
case LED2:
      val=LED3;
    break;
case LED3:
{
    up=false;
    val=LED2;
    break;
  }
default :
val=LED0;
break;
}
}
 else {
switch (val) {
case LED0:
{
up=true;
val=LED1;
break;
}
case LED1:
val=LED0;
break;
case LED2:
val=LED1;
break;
default :
val=LED0;
break;
}
}
}
 else if (state != STATE_LINEFOLLOWER) {
val=0;
}
FutureUse.writePins(val);
waitForNextPeriod();
}
}
}
;
new RtThread(10,50 * 1000){
public void run(){
int forwardCount=0;
System.out.println(""String_Node_Str"");
MOTORS=new Motor[]{new Motor(0),new Motor(1)};
freeValue=0;
stop=true;
while (true) {
for (int i=0; i < 4; i++) if (Buttons.getButton(i)) {
state=i + 1;
Leds.setLed(1,(i & 1) != 0);
Leds.setLed(2,(i & 2) != 0);
break;
}
stop=!DigitalInputs.getDigitalInput(2);
if ((Buttons.getButtons() != 0) || stop) freeValue=Sensors.readSensor(IR_SENSOR);
if (stop) for (int i=0; i < 2; i++) MOTORS[i].setState(Motor.STATE_OFF);
switch (state) {
case STATE_OFF:
{
for (int i=0; i < 2; i++) MOTORS[i].setState(Motor.STATE_OFF);
break;
}
case STATE_LINEFOLLOWER:
{
if (!stop) {
int val=Sensors.readSensor(IR_SENSOR);
boolean black=val > 285;
MOTORS[MOTOR_LEFT].setDutyCyclePercentage(60);
MOTORS[MOTOR_RIGHT].setDutyCyclePercentage(60);
if (black) {
MOTORS[MOTOR_RIGHT].setState(Motor.STATE_FORWARD);
MOTORS[MOTOR_LEFT].setState(Motor.STATE_BRAKE);
FutureUse.writePins(LED0 | LED3);
}
 else {
MOTORS[MOTOR_LEFT].setState(Motor.STATE_FORWARD);
MOTORS[MOTOR_RIGHT].setState(Motor.STATE_BRAKE);
FutureUse.writePins(LED1 | LED2);
}
}
break;
}
case STATE_TOUCHSENSOR:
case STATE_IRSENSOR:
case STATE_ALL:
{
if (!stop) {
for (int i=0; i < 2; i++) MOTORS[i].setMotorPercentage(Motor.STATE_FORWARD,true,40);
int totalDifference=Sensors.readSensor(IR_SENSOR) - freeValue;
if (forwardCount >= 60) {
if (MOTORS[0].readNormalizedBackEMF()[1] <= 5) {
Leds.setLeds(0x9);
turnback(false);
}
}
if (((state == STATE_IRSENSOR) || (state == STATE_ALL)) && (Math.abs(totalDifference) >= IR_SENSOR_THRESHOLD)) {
turnback(true);
}
 else if ((state == STATE_TOUCHSENSOR || state == STATE_ALL) && (forwardCount >= 6) && (DigitalInputs.getDigitalInput(1))) {
turnback(false);
}
}
break;
}
}
{
boolean goingForward=false;
for (int i=0; i < 2; i++) {
if (MOTORS[i].getState() == Motor.STATE_FORWARD) {
goingForward=true;
break;
}
}
forwardCount=goingForward ? forwardCount + 1 : 0;
}
waitForNextPeriod();
}
}
void turnback(boolean fast){
int turnspeed, turnsleep;
boolean dirLeft=false;
if (fast) {
turnspeed=80;
turnsleep=300;
}
 else {
turnspeed=70;
turnsleep=400;
}
speed=!fast ? 0x400 : 0x50;
dirLeft=(Native.rd(Const.IO_US_CNT) & 1) != 0;
for (int i=0; i < 2; i++) MOTORS[i].setMotorPercentage(Motor.STATE_BACKWARD,false,100);
RtThread.sleepMs(100);
for (int i=0; i < 2; i++) MOTORS[i].setMotorPercentage(Motor.STATE_BACKWARD,false,turnspeed);
RtThread.sleepMs(turnsleep - 100);
MOTORS[dirLeft ? MOTOR_LEFT : MOTOR_RIGHT].setMotorPercentage(Motor.STATE_BACKWARD,false,70);
MOTORS[dirLeft ? MOTOR_RIGHT : MOTOR_LEFT].setState(Motor.STATE_OFF);
RtThread.sleepMs(600);
speed=0x400;
Leds.setLed(0,false);
Leds.setLed(3,false);
}
}
;
RtThread.startMission();
}","/** 
 * @param args
 */
public static void main(String[] args){
  new RtThread(10,1 * 100){
    public void run(){
      up=true;
      flag=false;
      value=10;
      speed=0x400;
      while (true) {
        if (state == STATE_ALL) {
          counter++;
          if ((counter % value) == 0) {
            if (flag) {
              flag=false;
            }
 else {
              flag=true;
            }
          }
          counter1++;
          if ((counter1 % speed) == 0) {
            if (speaker_up) {
              value++;
              if (value >= 50) {
                speaker_up=false;
                value--;
              }
            }
 else {
              value--;
              if (value <= 10) {
                speaker_up=true;
                value++;
              }
            }
          }
        }
 else {
          flag=false;
        }
        if (flag) {
          Speaker.write(true);
        }
 else         Speaker.write(false);
        waitForNextPeriod();
      }
    }
  }
;
  new RtThread(10,100 * 1000){
    public void run(){
      val=LED0;
      up=true;
      while (true) {
        if (state == STATE_ALL) {
          if (up) {
switch (val) {
case LED0:
              val=LED1;
            break;
case LED1:
          val=LED2;
        break;
case LED2:
      val=LED3;
    break;
case LED3:
{
    up=false;
    val=LED2;
    break;
  }
default :
val=LED0;
break;
}
}
 else {
switch (val) {
case LED0:
{
up=true;
val=LED1;
break;
}
case LED1:
val=LED0;
break;
case LED2:
val=LED1;
break;
default :
val=LED0;
break;
}
}
}
 else if (state != STATE_LINEFOLLOWER) {
val=0;
}
FutureUse.writePins(val);
waitForNextPeriod();
}
}
}
;
new RtThread(10,50 * 1000){
public void run(){
int forwardCount=0;
System.out.println(""String_Node_Str"");
MOTORS=new Motor[]{new Motor(0),new Motor(1)};
freeValue=0;
stop=true;
while (true) {
for (int i=0; i < 4; i++) if (Buttons.getButton(i)) {
state=i + 1;
Leds.setLed(1,(i & 1) != 0);
Leds.setLed(2,(i & 2) != 0);
break;
}
stop=!DigitalInputs.getDigitalInput(2);
if ((Buttons.getButtons() != 0) || stop) freeValue=Sensors.readSensor(IR_SENSOR);
if (stop) for (int i=0; i < 2; i++) MOTORS[i].setState(Motor.STATE_OFF);
switch (state) {
case STATE_OFF:
{
for (int i=0; i < 2; i++) MOTORS[i].setState(Motor.STATE_OFF);
break;
}
case STATE_LINEFOLLOWER:
{
if (!stop) {
int val=Sensors.readSensor(IR_SENSOR);
boolean black=val > 285;
MOTORS[MOTOR_LEFT].setDutyCyclePercentage(60);
MOTORS[MOTOR_RIGHT].setDutyCyclePercentage(60);
if (black) {
MOTORS[MOTOR_RIGHT].setState(Motor.STATE_FORWARD);
MOTORS[MOTOR_LEFT].setState(Motor.STATE_BRAKE);
FutureUse.writePins(LED0 | LED3);
}
 else {
MOTORS[MOTOR_LEFT].setState(Motor.STATE_FORWARD);
MOTORS[MOTOR_RIGHT].setState(Motor.STATE_BRAKE);
FutureUse.writePins(LED1 | LED2);
}
}
break;
}
case STATE_TOUCHSENSOR:
case STATE_IRSENSOR:
case STATE_ALL:
{
if (!stop) {
for (int i=0; i < 2; i++) MOTORS[i].setMotorPercentage(Motor.STATE_FORWARD,true,40);
int totalDifference=Sensors.readSensor(IR_SENSOR) - freeValue;
if (forwardCount >= 60) {
if (MOTORS[0].readNormalizedBackEMF()[1] <= 5) {
Leds.setLeds(0x9);
turnback(false);
}
}
if (((state == STATE_IRSENSOR) || (state == STATE_ALL)) && (Math.abs(totalDifference) >= IR_SENSOR_THRESHOLD)) {
turnback(true);
}
 else if ((state == STATE_TOUCHSENSOR || state == STATE_ALL) && (forwardCount >= 6) && (DigitalInputs.getDigitalInput(1))) {
turnback(false);
}
}
break;
}
}
{
boolean goingForward=false;
for (int i=0; i < 2; i++) {
if (MOTORS[i].getState() == Motor.STATE_FORWARD) {
goingForward=true;
break;
}
}
forwardCount=goingForward ? forwardCount + 1 : 0;
}
waitForNextPeriod();
}
}
void turnback(boolean fast){
int turnspeed, turnsleep;
boolean dirLeft=false;
if (fast) {
turnspeed=80;
turnsleep=300;
}
 else {
turnspeed=70;
turnsleep=400;
}
speed=!fast ? 0x400 : 0x50;
dirLeft=(Native.rd(Const.IO_US_CNT) & 1) != 0;
for (int i=0; i < 2; i++) MOTORS[i].setMotorPercentage(Motor.STATE_BACKWARD,false,100);
RtThread.sleepMs(100);
for (int i=0; i < 2; i++) MOTORS[i].setMotorPercentage(Motor.STATE_BACKWARD,false,turnspeed);
RtThread.sleepMs(turnsleep - 100);
MOTORS[dirLeft ? MOTOR_LEFT : MOTOR_RIGHT].setMotorPercentage(Motor.STATE_BACKWARD,false,70);
MOTORS[dirLeft ? MOTOR_RIGHT : MOTOR_LEFT].setState(Motor.STATE_OFF);
RtThread.sleepMs(600);
speed=0x400;
Leds.setLed(0,false);
Leds.setLed(3,false);
}
}
;
RtThread.startMission();
}",0.9997728305315764
6363,"/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  if (nodetype == WCETBasicBlock.SNODE) {
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"",6));
  }
 else   if (nodetype == WCETBasicBlock.TNODE) {
    String tStr=""String_Node_Str"";
    for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
      Integer keyInt=(Integer)iter.next();
      WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
      tStr+=wcbb.getIDS();
      if (iter.hasNext())       tStr+=""String_Node_Str"";
    }
    tStr+=""String_Node_Str"";
    sb.append(WU.postpad(getIDS() + tStr + ""String_Node_Str"",6));
  }
 else {
    InstructionHandle ih=stih;
    blockcyc=0;
    LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
    int prevLine=-1;
    int srcLine=-1;
    do {
      if (wcmb.wca.jline) {
        srcLine=lnt.getSourceLine(ih.getPosition());
        if (srcLine > prevLine) {
          int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
          String c=""String_Node_Str"";
          if (ai != -1) {
            c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
            sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
          }
 else           sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
        }
        prevLine=srcLine;
      }
      if (ih == stih) {
        String tStr=""String_Node_Str"";
        for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
          Integer keyInt=(Integer)iter.next();
          WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
          tStr+=wcbb.getIDS();
          if (iter.hasNext())           tStr+=""String_Node_Str"";
        }
        tStr+=""String_Node_Str"";
        String lcStr=""String_Node_Str"";
        if (loopcontroller) {
          lcStr+=""String_Node_Str"" + loopid + ""String_Node_Str"";
          if (loopdriver)           lcStr+=""String_Node_Str"";
        }
        if (loopdriver)         lcStr+=""String_Node_Str"";
        sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
      if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))       sb.append(""String_Node_Str"");
 else       sb.append(""String_Node_Str"");
      StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        int tarpos=ihtar.getPosition();
        ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
      }
      sb.append(WU.postpad(ihs.toString(),20));
      String invoStr=""String_Node_Str"";
      if (ih.getInstruction() instanceof InvokeInstruction) {
        String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
        String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
        bbinvo=methodid;
        Method m=wcmb.wca.getMethod(methodid);
        if (methodid.startsWith(""String_Node_Str"")) {
          int opcode=wcmb.wca.getNativeOpcode(m.getName());
          if (opcode == -1) {
            sb.append(WU.prepad(""String_Node_Str"",10));
            invoStr=methodid + ""String_Node_Str"";
          }
 else {
            int cycles=WCETInstruction.getCycles(opcode,false,0);
            blockcyc+=cycles;
            sb.append(WU.prepad(Integer.toString(cycles),10));
            sb.append(""String_Node_Str"");
            sb.append(""String_Node_Str"");
            invoStr=methodid;
          }
        }
 else         if (m != null && !m.isAbstract()) {
          int invon=-1;
          if (m.getCode() != null) {
            invon=(m.getCode().getCode().length + 3) / 4;
          }
 else {
            invon=0;
          }
          int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,invon);
          int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,invon);
          int rethit=-1;
          int retmiss=-1;
          if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,wcmb.n);
          }
 else           if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,wcmb.n);
          }
 else {
            System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
            System.exit(-1);
          }
          cacheInvokeMiss=(invokemiss - invokehit);
          cacheReturnMiss=(retmiss - rethit);
          blockcyc+=invokehit;
          blockcyc+=cacheInvokeMiss;
          blockcyc+=cacheReturnMiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            sb.append(WU.prepad(""String_Node_Str"",10));
          }
 else {
            sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
            sb.append(WU.prepad(cacheInvokeMiss + ""String_Node_Str"",8));
            sb.append(WU.prepad(cacheReturnMiss + ""String_Node_Str"",8));
          }
          sb.append(""String_Node_Str"");
          invoStr=methodid + ""String_Node_Str"" + invon+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            invoStr=methodid;
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        int wcetih;
        if (ih.getInstruction() instanceof ReturnInstruction) {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
 else {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
        blockcyc+=wcetih;
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(invoStr);
      if (ih.getInstruction() instanceof FieldInstruction) {
        String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
        sb.append(fieStrType + ""String_Node_Str"");
        if (ih.getInstruction() instanceof FieldOrMethod) {
          String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
          sb.append(fieStrClass + ""String_Node_Str"");
        }
        String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
        sb.append(fieStrName);
      }
      if (ih.getInstruction() instanceof LocalVariableInstruction) {
        if (ih.getInstruction() instanceof StoreInstruction) {
          StoreInstruction si=(StoreInstruction)ih.getInstruction();
          String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
          if (siStr.length() > 0)           sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
        }
 else {
          LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
          String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
          if (lvStr.length() > 0)           sb.append(lvStr + ""String_Node_Str"");
        }
      }
      if (ih.getInstruction() instanceof ArrayInstruction) {
        String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
        sb.append(aType + ""String_Node_Str"");
      }
      if (ih == endih) {
        sb.append(""String_Node_Str"" + bid + ""String_Node_Str"");
        sb.append(WU.prepad(""String_Node_Str"" + blockcyc,7));
      }
      sb.append(""String_Node_Str"");
    }
 while (ih != endih && (ih=ih.getNext()) != null);
  }
  return sb.toString();
}","/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  if (nodetype == WCETBasicBlock.SNODE) {
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"",6));
  }
 else   if (nodetype == WCETBasicBlock.TNODE) {
    String tStr=""String_Node_Str"";
    for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
      Integer keyInt=(Integer)iter.next();
      WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
      tStr+=wcbb.getIDS();
      if (iter.hasNext())       tStr+=""String_Node_Str"";
    }
    tStr+=""String_Node_Str"";
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + tStr+ ""String_Node_Str"",6));
  }
 else {
    InstructionHandle ih=stih;
    blockcyc=0;
    LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
    int prevLine=-1;
    int srcLine=-1;
    do {
      if (wcmb.wca.jline) {
        srcLine=lnt.getSourceLine(ih.getPosition());
        if (srcLine > prevLine) {
          int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
          String c=""String_Node_Str"";
          if (ai != -1) {
            c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
            sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
          }
 else           sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
        }
        prevLine=srcLine;
      }
      if (ih == stih) {
        String tStr=""String_Node_Str"";
        for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
          Integer keyInt=(Integer)iter.next();
          WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
          tStr+=wcbb.getIDS();
          if (iter.hasNext())           tStr+=""String_Node_Str"";
        }
        tStr+=""String_Node_Str"";
        String lcStr=""String_Node_Str"";
        if (loopcontroller) {
          lcStr+=""String_Node_Str"" + loopid + ""String_Node_Str"";
          if (loopdriver)           lcStr+=""String_Node_Str"";
        }
        if (loopdriver)         lcStr+=""String_Node_Str"";
        if (nodetype == BNODE)         sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
 else         if (nodetype == INODE)         sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
      if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))       sb.append(""String_Node_Str"");
 else       sb.append(""String_Node_Str"");
      StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        int tarpos=ihtar.getPosition();
        ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
      }
      sb.append(WU.postpad(ihs.toString(),20));
      String invoStr=""String_Node_Str"";
      if (ih.getInstruction() instanceof InvokeInstruction) {
        String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
        String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
        bbinvo=methodid;
        Method m=wcmb.wca.getMethod(methodid);
        if (methodid.startsWith(""String_Node_Str"")) {
          int opcode=wcmb.wca.getNativeOpcode(m.getName());
          if (opcode == -1) {
            sb.append(WU.prepad(""String_Node_Str"",10));
            invoStr=methodid + ""String_Node_Str"";
          }
 else {
            int cycles=WCETInstruction.getCycles(opcode,false,0);
            blockcyc+=cycles;
            sb.append(WU.prepad(Integer.toString(cycles),10));
            sb.append(""String_Node_Str"");
            sb.append(""String_Node_Str"");
            invoStr=methodid;
          }
        }
 else         if (m != null && !m.isAbstract()) {
          int invon=-1;
          if (m.getCode() != null) {
            invon=(m.getCode().getCode().length + 3) / 4;
          }
 else {
            invon=0;
          }
          int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,invon);
          int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,invon);
          int rethit=-1;
          int retmiss=-1;
          if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,wcmb.n);
          }
 else           if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,wcmb.n);
          }
 else {
            System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
            System.exit(-1);
          }
          cacheInvokeMiss=(invokemiss - invokehit);
          cacheReturnMiss=(retmiss - rethit);
          blockcyc+=invokehit;
          blockcyc+=cacheInvokeMiss;
          blockcyc+=cacheReturnMiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            sb.append(WU.prepad(""String_Node_Str"",10));
          }
 else {
            sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
            sb.append(WU.prepad(cacheInvokeMiss + ""String_Node_Str"",8));
            sb.append(WU.prepad(cacheReturnMiss + ""String_Node_Str"",8));
          }
          sb.append(""String_Node_Str"");
          invoStr=methodid + ""String_Node_Str"" + invon+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            invoStr=methodid;
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        int wcetih;
        if (ih.getInstruction() instanceof ReturnInstruction) {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
 else {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
        blockcyc+=wcetih;
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(invoStr);
      if (ih.getInstruction() instanceof FieldInstruction) {
        String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
        sb.append(fieStrType + ""String_Node_Str"");
        if (ih.getInstruction() instanceof FieldOrMethod) {
          String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
          sb.append(fieStrClass + ""String_Node_Str"");
        }
        String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
        sb.append(fieStrName);
      }
      if (ih.getInstruction() instanceof LocalVariableInstruction) {
        if (ih.getInstruction() instanceof StoreInstruction) {
          StoreInstruction si=(StoreInstruction)ih.getInstruction();
          String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
          if (siStr.length() > 0)           sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
        }
 else {
          LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
          String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
          if (lvStr.length() > 0)           sb.append(lvStr + ""String_Node_Str"");
        }
      }
      if (ih.getInstruction() instanceof ArrayInstruction) {
        String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
        sb.append(aType + ""String_Node_Str"");
      }
      if (ih == endih) {
        sb.append(""String_Node_Str"" + bid + ""String_Node_Str"");
        sb.append(WU.prepad(""String_Node_Str"" + blockcyc,7));
      }
      sb.append(""String_Node_Str"");
    }
 while (ih != endih && (ih=ih.getNext()) != null);
  }
  return sb.toString();
}",0.9902549861146176
6364,"public void init(InstructionHandle stih,InstructionHandle endih){
  WCETBasicBlock wcbb=new WCETBasicBlock(stih,endih,this,WCETBasicBlock.BNODE);
  S.sucbb=wcbb;
  bbs.put(new Integer(wcbb.getStart()),wcbb);
}","public void init(InstructionHandle stih,InstructionHandle endih){
  WCETBasicBlock wcbb=null;
  if (stih.getInstruction() instanceof InvokeInstruction && (((InvokeInstruction)stih.getInstruction()).getClassName(getCpg())).indexOf(""String_Node_Str"") == -1) {
    wcbb=new WCETBasicBlock(stih,endih,this,WCETBasicBlock.INODE);
  }
 else {
    wcbb=new WCETBasicBlock(stih,endih,this,WCETBasicBlock.BNODE);
  }
  S.sucbb=wcbb;
  bbs.put(new Integer(wcbb.getStart()),wcbb);
}",0.611764705882353
6365,"/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  if (nodetype == WCETBasicBlock.SNODE) {
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"",6));
  }
 else   if (nodetype == WCETBasicBlock.TNODE) {
    String tStr=""String_Node_Str"";
    for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
      Integer keyInt=(Integer)iter.next();
      WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
      tStr+=wcbb.getIDS();
      if (iter.hasNext())       tStr+=""String_Node_Str"";
    }
    tStr+=""String_Node_Str"";
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + tStr+ ""String_Node_Str"",6));
  }
 else {
    InstructionHandle ih=stih;
    blockcyc=0;
    LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
    int prevLine=-1;
    int srcLine=-1;
    do {
      if (wcmb.wca.jline) {
        srcLine=lnt.getSourceLine(ih.getPosition());
        if (srcLine > prevLine) {
          int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
          String c=""String_Node_Str"";
          if (ai != -1) {
            c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
            sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
          }
 else           sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
        }
        prevLine=srcLine;
      }
      if (ih == stih) {
        String tStr=""String_Node_Str"";
        for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
          Integer keyInt=(Integer)iter.next();
          WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
          tStr+=wcbb.getIDS();
          if (iter.hasNext())           tStr+=""String_Node_Str"";
        }
        tStr+=""String_Node_Str"";
        String lcStr=""String_Node_Str"";
        if (loopcontroller) {
          lcStr+=""String_Node_Str"" + loopid + ""String_Node_Str"";
          if (loopdriver)           lcStr+=""String_Node_Str"";
        }
        if (loopdriver)         lcStr+=""String_Node_Str"";
        if (nodetype == BNODE)         sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
 else         if (nodetype == INODE)         sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
      if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))       sb.append(""String_Node_Str"");
 else       sb.append(""String_Node_Str"");
      StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        int tarpos=ihtar.getPosition();
        ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
      }
      sb.append(WU.postpad(ihs.toString(),20));
      String invoStr=""String_Node_Str"";
      if (ih.getInstruction() instanceof InvokeInstruction) {
        String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
        String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
        bbinvo=methodid;
        Method m=wcmb.wca.getMethod(methodid);
        if (methodid.startsWith(""String_Node_Str"")) {
          int opcode=wcmb.wca.getNativeOpcode(m.getName());
          if (opcode == -1) {
            sb.append(WU.prepad(""String_Node_Str"",10));
            invoStr=methodid + ""String_Node_Str"";
          }
 else {
            int cycles=WCETInstruction.getCycles(opcode,false,0);
            blockcyc+=cycles;
            sb.append(WU.prepad(Integer.toString(cycles),10));
            sb.append(""String_Node_Str"");
            sb.append(""String_Node_Str"");
            invoStr=methodid;
          }
        }
 else         if (m != null && !m.isAbstract()) {
          int invon=-1;
          if (m.getCode() != null) {
            invon=(m.getCode().getCode().length + 3) / 4;
          }
 else {
            invon=0;
          }
          int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,invon);
          int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,invon);
          int rethit=-1;
          int retmiss=-1;
          if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,wcmb.n);
          }
 else           if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,wcmb.n);
          }
 else {
            System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
            System.exit(-1);
          }
          cacheInvokeMiss=(invokemiss - invokehit);
          cacheReturnMiss=(retmiss - rethit);
          blockcyc+=invokehit;
          blockcyc+=cacheInvokeMiss;
          blockcyc+=cacheReturnMiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            sb.append(WU.prepad(""String_Node_Str"",10));
          }
 else {
            sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
            sb.append(WU.prepad(cacheInvokeMiss + ""String_Node_Str"",8));
            sb.append(WU.prepad(cacheReturnMiss + ""String_Node_Str"",8));
          }
          sb.append(""String_Node_Str"");
          invoStr=methodid + ""String_Node_Str"" + invon+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            invoStr=methodid;
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        int wcetih;
        if (ih.getInstruction() instanceof ReturnInstruction) {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
 else {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
        blockcyc+=wcetih;
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(invoStr);
      if (ih.getInstruction() instanceof FieldInstruction) {
        String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
        sb.append(fieStrType + ""String_Node_Str"");
        if (ih.getInstruction() instanceof FieldOrMethod) {
          String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
          sb.append(fieStrClass + ""String_Node_Str"");
        }
        String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
        sb.append(fieStrName);
      }
      if (ih.getInstruction() instanceof LocalVariableInstruction) {
        if (ih.getInstruction() instanceof StoreInstruction) {
          StoreInstruction si=(StoreInstruction)ih.getInstruction();
          String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
          if (siStr.length() > 0)           sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
        }
 else {
          LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
          String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
          if (lvStr.length() > 0)           sb.append(lvStr + ""String_Node_Str"");
        }
      }
      if (ih.getInstruction() instanceof ArrayInstruction) {
        String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
        sb.append(aType + ""String_Node_Str"");
      }
      if (ih == endih) {
        sb.append(""String_Node_Str"" + bid + ""String_Node_Str"");
        sb.append(WU.prepad(""String_Node_Str"" + blockcyc,7));
      }
      sb.append(""String_Node_Str"");
    }
 while (ih != endih && (ih=ih.getNext()) != null);
  }
  return sb.toString();
}","/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  if (nodetype == WCETBasicBlock.SNODE) {
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"",6));
  }
 else   if (nodetype == WCETBasicBlock.TNODE) {
    String tStr=""String_Node_Str"";
    for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
      Integer keyInt=(Integer)iter.next();
      WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
      tStr+=wcbb.getIDS();
      if (iter.hasNext())       tStr+=""String_Node_Str"";
    }
    tStr+=""String_Node_Str"";
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + tStr+ ""String_Node_Str"",6));
  }
 else {
    InstructionHandle ih=stih;
    blockcyc=0;
    LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
    int prevLine=-1;
    int srcLine=-1;
    do {
      if (wcmb.wca.jline) {
        srcLine=lnt.getSourceLine(ih.getPosition());
        if (srcLine > prevLine) {
          int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
          String c=""String_Node_Str"";
          if (ai != -1) {
            c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
            sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
          }
 else           sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
        }
        prevLine=srcLine;
      }
      if (ih == stih) {
        String tStr=""String_Node_Str"";
        for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
          Integer keyInt=(Integer)iter.next();
          WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
          tStr+=wcbb.getIDS();
          if (iter.hasNext())           tStr+=""String_Node_Str"";
        }
        tStr+=""String_Node_Str"";
        String lcStr=""String_Node_Str"";
        if (loopcontroller) {
          lcStr+=""String_Node_Str"" + loopid + ""String_Node_Str"";
          if (loopdriver)           lcStr+=""String_Node_Str"";
        }
        if (loopdriver)         lcStr+=""String_Node_Str"";
        if (nodetype == BNODE)         sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
 else         if (nodetype == INODE)         sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
      if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))       sb.append(""String_Node_Str"");
 else       sb.append(""String_Node_Str"");
      StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        int tarpos=ihtar.getPosition();
        ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
      }
      sb.append(WU.postpad(ihs.toString(),20));
      String invoStr=""String_Node_Str"";
      if (ih.getInstruction() instanceof InvokeInstruction) {
        String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
        String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
        bbinvo=methodid;
        Method m=wcmb.wca.getMethod(methodid);
        if (methodid.startsWith(""String_Node_Str"")) {
          int opcode=wcmb.wca.getNativeOpcode(m.getName());
          if (opcode == -1) {
            sb.append(WU.prepad(""String_Node_Str"",10));
            invoStr=methodid + ""String_Node_Str"";
          }
 else {
            int cycles=WCETInstruction.getCycles(opcode,false,0);
            blockcyc+=cycles;
            sb.append(WU.prepad(Integer.toString(cycles),10));
            sb.append(""String_Node_Str"");
            sb.append(""String_Node_Str"");
            invoStr=methodid;
          }
        }
 else         if (m != null && !m.isAbstract()) {
          int invon=-1;
          if (m.getCode() != null) {
            invon=(m.getCode().getCode().length + 3) / 4;
          }
 else {
            invon=0;
          }
          int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,invon);
          int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,invon);
          int rethit=-1;
          int retmiss=-1;
          if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,wcmb.n);
          }
 else           if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,wcmb.n);
          }
 else {
            System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
            System.exit(-1);
          }
          cacheInvokeMiss=(invokemiss - invokehit);
          cacheReturnMiss=(retmiss - rethit);
          blockcyc=invokehit;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            sb.append(WU.prepad(""String_Node_Str"",10));
          }
 else {
            sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
            sb.append(WU.prepad(cacheInvokeMiss + ""String_Node_Str"",8));
            sb.append(WU.prepad(cacheReturnMiss + ""String_Node_Str"",8));
          }
          sb.append(""String_Node_Str"");
          invoStr=methodid + ""String_Node_Str"" + invon+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            invoStr=methodid;
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        int wcetih;
        if (ih.getInstruction() instanceof ReturnInstruction) {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
 else {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
        blockcyc+=wcetih;
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(invoStr);
      if (ih.getInstruction() instanceof FieldInstruction) {
        String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
        sb.append(fieStrType + ""String_Node_Str"");
        if (ih.getInstruction() instanceof FieldOrMethod) {
          String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
          sb.append(fieStrClass + ""String_Node_Str"");
        }
        String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
        sb.append(fieStrName);
      }
      if (ih.getInstruction() instanceof LocalVariableInstruction) {
        if (ih.getInstruction() instanceof StoreInstruction) {
          StoreInstruction si=(StoreInstruction)ih.getInstruction();
          String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
          if (siStr.length() > 0)           sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
        }
 else {
          LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
          String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
          if (lvStr.length() > 0)           sb.append(lvStr + ""String_Node_Str"");
        }
      }
      if (ih.getInstruction() instanceof ArrayInstruction) {
        String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
        sb.append(aType + ""String_Node_Str"");
      }
      if (ih == endih) {
        sb.append(""String_Node_Str"" + bid + ""String_Node_Str"");
        sb.append(WU.prepad(""String_Node_Str"" + blockcyc,7));
      }
      sb.append(""String_Node_Str"");
    }
 while (ih != endih && (ih=ih.getNext()) != null);
  }
  return sb.toString();
}",0.9962336162306032
6366,"public void visitJavaClass(JavaClass clazz){
  super.visitJavaClass(clazz);
  Method[] methods=clazz.getMethods();
  if (wca.init) {
    for (int i=0; i < methods.length; i++) {
      Method m=methods[i];
      String methodId=m.getName() + m.getSignature();
      if (!m.isAbstract()) {
        WCETMethodBlock wcmb=new WCETMethodBlock(m,clazz,wca);
        wca.msigtowcmb.put(methodId,wcmb);
        wca.wcmbs.add(wcmb);
        wcmb.controlFlowGraph();
        wcmb.directedGraph();
        if (m.getName().equalsIgnoreCase(""String_Node_Str"") || m.getName().equalsIgnoreCase(""String_Node_Str"")) {
          wca.wcmbapp=wcmb;
        }
      }
 else       System.out.println(""String_Node_Str"" + m.getName());
    }
  }
  if (wca.analyze) {
    for (int i=0; i < methods.length; i++) {
      Method m=methods[i];
      String methodId=m.getName() + m.getSignature();
      if (!m.isAbstract()) {
        WCETMethodBlock wcmb=(WCETMethodBlock)wca.mtowcmb.get(m);
        wca.wcasb.append(wcmb.toString());
        wcmb.link();
        wca.dotout.print(""String_Node_Str"" + wcmb.dotf + ""String_Node_Str""+ wcmb.dotf.substring(0,wcmb.dotf.length() - 4)+ ""String_Node_Str"");
      }
    }
  }
}","public void visitJavaClass(JavaClass clazz){
  super.visitJavaClass(clazz);
  Method[] methods=clazz.getMethods();
  if (wca.init) {
    for (int i=0; i < methods.length; i++) {
      Method m=methods[i];
      String methodId=m.getName() + m.getSignature();
      if (!m.isAbstract()) {
        WCETMethodBlock wcmb=new WCETMethodBlock(m,clazz,wca);
        wca.msigtowcmb.put(methodId,wcmb);
        wca.wcmbs.add(wcmb);
        wcmb.controlFlowGraph();
        wcmb.directedGraph();
        System.out.println(""String_Node_Str"" + (clazz.getClassName() + ""String_Node_Str"" + m.getName()) + ""String_Node_Str""+ wca.appmethod);
        if ((clazz.getClassName() + ""String_Node_Str"" + m.getName()).equalsIgnoreCase(wca.appmethod)) {
          wca.wcmbapp=wcmb;
        }
      }
 else       System.out.println(""String_Node_Str"" + m.getName());
    }
  }
  if (wca.analyze) {
    for (int i=0; i < methods.length; i++) {
      Method m=methods[i];
      String methodId=m.getName() + m.getSignature();
      if (!m.isAbstract()) {
        WCETMethodBlock wcmb=(WCETMethodBlock)wca.mtowcmb.get(m);
        wca.wcasb.append(wcmb.toString());
        wcmb.link();
        wca.dotout.print(""String_Node_Str"" + wcmb.dotf + ""String_Node_Str""+ wcmb.dotf.substring(0,wcmb.dotf.length() - 4)+ ""String_Node_Str"");
      }
    }
  }
}",0.885611797528896
6367,"/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  if (nodetype == WCETBasicBlock.SNODE) {
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"",6));
  }
 else   if (nodetype == WCETBasicBlock.TNODE) {
    String tStr=""String_Node_Str"";
    for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
      Integer keyInt=(Integer)iter.next();
      WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
      tStr+=wcbb.getIDS();
      if (iter.hasNext())       tStr+=""String_Node_Str"";
    }
    tStr+=""String_Node_Str"";
    sb.append(WU.postpad(getIDS() + tStr + ""String_Node_Str"",6));
  }
 else {
    InstructionHandle ih=stih;
    blockcyc=0;
    LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
    int prevLine=-1;
    int srcLine=-1;
    do {
      if (wcmb.wca.jline) {
        srcLine=lnt.getSourceLine(ih.getPosition());
        if (srcLine > prevLine) {
          int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
          String c=""String_Node_Str"";
          if (ai != -1) {
            c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
            sb.append(WU.postpad(wcmb.wca.las + wcmb.wca.las + wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ ""String_Node_Str""+ srcLine+ ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim()+ wcmb.wca.lae,62) + ""String_Node_Str"");
          }
 else           sb.append(WU.postpad(wcmb.wca.las + wcmb.wca.las + wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ ""String_Node_Str""+ srcLine+ ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim()+ wcmb.wca.lae,62) + ""String_Node_Str"");
        }
        prevLine=srcLine;
      }
      if (ih == stih) {
        String tStr=""String_Node_Str"";
        for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
          Integer keyInt=(Integer)iter.next();
          WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
          tStr+=wcbb.getIDS();
          if (iter.hasNext())           tStr+=""String_Node_Str"";
        }
        tStr+=""String_Node_Str"";
        sb.append(WU.postpad(getIDS() + tStr,6));
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(wcmb.wca.las);
      sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
      if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))       sb.append(""String_Node_Str"");
 else       sb.append(""String_Node_Str"");
      sb.append(wcmb.wca.las);
      StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        int tarpos=ihtar.getPosition();
        ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
      }
      sb.append(WU.postpad(ihs.toString(),20));
      sb.append(wcmb.wca.las);
      String invoStr=""String_Node_Str"";
      if (ih.getInstruction() instanceof InvokeInstruction) {
        String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
        String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
        bbinvo=methodid;
        Method m=wcmb.wca.getMethod(methodid);
        if (methodid.startsWith(""String_Node_Str"")) {
          int opcode=wcmb.wca.getNativeOpcode(m.getName());
          if (opcode == -1) {
            sb.append(WU.prepad(""String_Node_Str"",10));
            invoStr=methodid + ""String_Node_Str"";
          }
 else {
            int cycles=WCETInstruction.getCycles(opcode,false,0);
            blockcyc+=cycles;
            sb.append(WU.prepad(Integer.toString(cycles),10));
            sb.append(""String_Node_Str"");
            sb.append(""String_Node_Str"");
            invoStr=methodid;
          }
        }
 else         if (m != null && !m.isAbstract()) {
          int invon=-1;
          if (m.getCode() != null) {
            invon=(m.getCode().getCode().length + 3) / 4;
          }
 else {
            invon=0;
          }
          int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,invon);
          int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,invon);
          int rethit=-1;
          int retmiss=-1;
          if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,wcmb.n);
          }
 else           if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,wcmb.n);
          }
 else {
            System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
            System.exit(-1);
          }
          int cacheInvokeMiss=(invokemiss - invokehit);
          int cacheReturnMiss=(retmiss - rethit);
          blockcyc+=invokehit;
          blockcyc+=cacheInvokeMiss;
          blockcyc+=cacheReturnMiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            sb.append(WU.prepad(""String_Node_Str"",10));
          }
 else {
            sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
            sb.append(WU.prepad(wcmb.wca.las + cacheInvokeMiss + ""String_Node_Str"",8));
            sb.append(WU.prepad(wcmb.wca.las + cacheReturnMiss + ""String_Node_Str"",8));
          }
          sb.append(""String_Node_Str"");
          invoStr=methodid + ""String_Node_Str"" + invon+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            invoStr=methodid;
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        int wcetih;
        if (ih.getInstruction() instanceof ReturnInstruction) {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
 else {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
        blockcyc+=wcetih;
        sb.append(wcmb.wca.las + ""String_Node_Str"");
        sb.append(wcmb.wca.las + ""String_Node_Str"");
      }
      sb.append(wcmb.wca.las);
      sb.append(invoStr);
      if (ih.getInstruction() instanceof FieldInstruction) {
        String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
        sb.append(fieStrType + ""String_Node_Str"");
        if (ih.getInstruction() instanceof FieldOrMethod) {
          String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
          sb.append(fieStrClass + ""String_Node_Str"");
        }
        String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
        sb.append(fieStrName);
      }
      if (ih.getInstruction() instanceof LocalVariableInstruction) {
        if (ih.getInstruction() instanceof StoreInstruction) {
          StoreInstruction si=(StoreInstruction)ih.getInstruction();
          String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
          if (siStr.length() > 0)           sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
        }
 else {
          LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
          String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
          if (lvStr.length() > 0)           sb.append(lvStr + ""String_Node_Str"");
        }
      }
      if (ih.getInstruction() instanceof ArrayInstruction) {
        String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
        sb.append(aType + ""String_Node_Str"");
      }
      if (ih == endih) {
        sb.append(""String_Node_Str"" + bid + ""String_Node_Str"");
        sb.append(WU.prepad(""String_Node_Str"" + blockcyc,7));
      }
      sb.append(wcmb.wca.lae + ""String_Node_Str"");
    }
 while (ih != endih && (ih=ih.getNext()) != null);
  }
  return sb.toString();
}","/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  if (nodetype == WCETBasicBlock.SNODE) {
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"",6));
  }
 else   if (nodetype == WCETBasicBlock.TNODE) {
    String tStr=""String_Node_Str"";
    for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
      Integer keyInt=(Integer)iter.next();
      WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
      tStr+=wcbb.getIDS();
      if (iter.hasNext())       tStr+=""String_Node_Str"";
    }
    tStr+=""String_Node_Str"";
    sb.append(WU.postpad(getIDS() + tStr + ""String_Node_Str"",6));
  }
 else {
    InstructionHandle ih=stih;
    blockcyc=0;
    LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
    int prevLine=-1;
    int srcLine=-1;
    do {
      if (wcmb.wca.jline) {
        srcLine=lnt.getSourceLine(ih.getPosition());
        if (srcLine > prevLine) {
          int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
          String c=""String_Node_Str"";
          if (ai != -1) {
            c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
            sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
          }
 else           sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
        }
        prevLine=srcLine;
      }
      if (ih == stih) {
        String tStr=""String_Node_Str"";
        for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
          Integer keyInt=(Integer)iter.next();
          WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
          tStr+=wcbb.getIDS();
          if (iter.hasNext())           tStr+=""String_Node_Str"";
        }
        tStr+=""String_Node_Str"";
        sb.append(WU.postpad(getIDS() + tStr,6));
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
      if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))       sb.append(""String_Node_Str"");
 else       sb.append(""String_Node_Str"");
      StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        int tarpos=ihtar.getPosition();
        ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
      }
      sb.append(WU.postpad(ihs.toString(),20));
      String invoStr=""String_Node_Str"";
      if (ih.getInstruction() instanceof InvokeInstruction) {
        String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
        String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
        bbinvo=methodid;
        Method m=wcmb.wca.getMethod(methodid);
        if (methodid.startsWith(""String_Node_Str"")) {
          int opcode=wcmb.wca.getNativeOpcode(m.getName());
          if (opcode == -1) {
            sb.append(WU.prepad(""String_Node_Str"",10));
            invoStr=methodid + ""String_Node_Str"";
          }
 else {
            int cycles=WCETInstruction.getCycles(opcode,false,0);
            blockcyc+=cycles;
            sb.append(WU.prepad(Integer.toString(cycles),10));
            sb.append(""String_Node_Str"");
            sb.append(""String_Node_Str"");
            invoStr=methodid;
          }
        }
 else         if (m != null && !m.isAbstract()) {
          int invon=-1;
          if (m.getCode() != null) {
            invon=(m.getCode().getCode().length + 3) / 4;
          }
 else {
            invon=0;
          }
          int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,invon);
          int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,invon);
          int rethit=-1;
          int retmiss=-1;
          if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,wcmb.n);
          }
 else           if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,wcmb.n);
          }
 else {
            System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
            System.exit(-1);
          }
          int cacheInvokeMiss=(invokemiss - invokehit);
          int cacheReturnMiss=(retmiss - rethit);
          blockcyc+=invokehit;
          blockcyc+=cacheInvokeMiss;
          blockcyc+=cacheReturnMiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            sb.append(WU.prepad(""String_Node_Str"",10));
          }
 else {
            sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
            sb.append(WU.prepad(cacheInvokeMiss + ""String_Node_Str"",8));
            sb.append(WU.prepad(cacheReturnMiss + ""String_Node_Str"",8));
          }
          sb.append(""String_Node_Str"");
          invoStr=methodid + ""String_Node_Str"" + invon+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            invoStr=methodid;
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        int wcetih;
        if (ih.getInstruction() instanceof ReturnInstruction) {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
 else {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
        blockcyc+=wcetih;
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(invoStr);
      if (ih.getInstruction() instanceof FieldInstruction) {
        String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
        sb.append(fieStrType + ""String_Node_Str"");
        if (ih.getInstruction() instanceof FieldOrMethod) {
          String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
          sb.append(fieStrClass + ""String_Node_Str"");
        }
        String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
        sb.append(fieStrName);
      }
      if (ih.getInstruction() instanceof LocalVariableInstruction) {
        if (ih.getInstruction() instanceof StoreInstruction) {
          StoreInstruction si=(StoreInstruction)ih.getInstruction();
          String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
          if (siStr.length() > 0)           sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
        }
 else {
          LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
          String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
          if (lvStr.length() > 0)           sb.append(lvStr + ""String_Node_Str"");
        }
      }
      if (ih.getInstruction() instanceof ArrayInstruction) {
        String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
        sb.append(aType + ""String_Node_Str"");
      }
      if (ih == endih) {
        sb.append(""String_Node_Str"" + bid + ""String_Node_Str"");
        sb.append(WU.prepad(""String_Node_Str"" + blockcyc,7));
      }
      sb.append(""String_Node_Str"");
    }
 while (ih != endih && (ih=ih.getNext()) != null);
  }
  return sb.toString();
}",0.9720261707279376
6368,"public static void main(String[] args){
  WCETAnalyser wca=new WCETAnalyser();
  HashSet clsArgs=new HashSet();
  outFile=null;
  boolean latex=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
  dot=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
  jline=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
  ls=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
  if (latex) {
    las=""String_Node_Str"";
    lae=""String_Node_Str"";
  }
 else {
    las=""String_Node_Str"";
    lae=""String_Node_Str"";
  }
  String srcPath=""String_Node_Str"";
  try {
    if (args.length == 0) {
      System.err.println(""String_Node_Str"");
    }
 else {
      for (int i=0; i < args.length; i++) {
        if (args[i].equals(""String_Node_Str"")) {
          i++;
          wca.classpath=new org.apache.bcel.util.ClassPath(args[i]);
          continue;
        }
        if (args[i].equals(""String_Node_Str"")) {
          i++;
          outFile=args[i];
          continue;
        }
        if (args[i].equals(""String_Node_Str"")) {
          i++;
          srcPath=args[i];
          continue;
        }
        clsArgs.add(args[i]);
        mainClass=args[i].replace('/','.');
      }
      StringTokenizer st=new StringTokenizer(srcPath,""String_Node_Str"");
      while (st.hasMoreTokens()) {
        String srcDir=st.nextToken();
        File sDir=new File(srcDir);
        if (sDir.isDirectory()) {
          wca.visitAllFiles(sDir);
        }
      }
      wca.out=new PrintWriter(new FileOutputStream(outFile));
      String ds=new File(WCETAnalyser.outFile).getParentFile().getAbsolutePath() + ""String_Node_Str"";
      wca.dotout=new PrintWriter(new FileOutputStream(ds));
      wca.dotout.print(""String_Node_Str"");
      wca.load(clsArgs);
      wca.global=false;
      wca.iterate(new SetWCETAnalysis(wca));
      wca.init=false;
      wca.analyze=true;
      wca.iterate(new SetWCETAnalysis(wca));
      StringBuffer wcasbtemp=new StringBuffer();
      if (wca.analyze) {
        wca.global=true;
        wcasbtemp.append(wca.wcmbapp.toLS(true,true,null));
        wcasbtemp.append(wca.toDot());
        wcasbtemp.insert(0,""String_Node_Str"" + wca.wcmbapp.wcetlp + ""String_Node_Str"");
        wca.out.println(wcasbtemp.toString());
        wca.dotout.print(""String_Node_Str"" + wca.dotf + ""String_Node_Str""+ wca.dotf.substring(0,wca.dotf.length() - 4)+ ""String_Node_Str"");
      }
      wca.out.println(""String_Node_Str"");
      wca.out.println(wca.wcasb.toString());
      wca.out.println(""String_Node_Str"");
      wca.out.println(WCETInstruction.toWCAString());
      wca.out.println(""String_Node_Str"");
      wca.out.println(""String_Node_Str"");
      wca.out.close();
      wca.dotout.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  WCETAnalyser wca=new WCETAnalyser();
  HashSet clsArgs=new HashSet();
  outFile=null;
  jline=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
  appmethod=System.getProperty(""String_Node_Str"");
  if (appmethod == null) {
    System.out.println(""String_Node_Str"");
    System.exit(-1);
  }
  String srcPath=""String_Node_Str"";
  try {
    if (args.length == 0) {
      System.err.println(""String_Node_Str"");
    }
 else {
      for (int i=0; i < args.length; i++) {
        if (args[i].equals(""String_Node_Str"")) {
          i++;
          wca.classpath=new org.apache.bcel.util.ClassPath(args[i]);
          continue;
        }
        if (args[i].equals(""String_Node_Str"")) {
          i++;
          outFile=args[i];
          continue;
        }
        if (args[i].equals(""String_Node_Str"")) {
          i++;
          srcPath=args[i];
          continue;
        }
        clsArgs.add(args[i]);
        mainClass=args[i].replace('/','.');
      }
      StringTokenizer st=new StringTokenizer(srcPath,""String_Node_Str"");
      while (st.hasMoreTokens()) {
        String srcDir=st.nextToken();
        File sDir=new File(srcDir);
        if (sDir.isDirectory()) {
          wca.visitAllFiles(sDir);
        }
      }
      wca.out=new PrintWriter(new FileOutputStream(outFile));
      String ds=new File(WCETAnalyser.outFile).getParentFile().getAbsolutePath() + ""String_Node_Str"";
      wca.dotout=new PrintWriter(new FileOutputStream(ds));
      wca.dotout.print(""String_Node_Str"");
      wca.load(clsArgs);
      wca.global=false;
      wca.iterate(new SetWCETAnalysis(wca));
      wca.init=false;
      wca.analyze=true;
      wca.iterate(new SetWCETAnalysis(wca));
      StringBuffer wcasbtemp=new StringBuffer();
      if (wca.analyze) {
        wca.global=true;
        wcasbtemp.append(wca.wcmbapp.toLS(true,true,null));
        wcasbtemp.append(wca.toDot());
        wcasbtemp.insert(0,""String_Node_Str"" + wca.wcmbapp.wcetlp + ""String_Node_Str"");
        wca.out.println(wcasbtemp.toString());
        wca.dotout.print(""String_Node_Str"" + wca.dotf + ""String_Node_Str""+ wca.dotf.substring(0,wca.dotf.length() - 4)+ ""String_Node_Str"");
      }
      wca.out.println(""String_Node_Str"");
      wca.out.println(wca.wcasb.toString());
      wca.out.println(""String_Node_Str"");
      wca.out.println(WCETInstruction.toWCAString());
      wca.out.println(""String_Node_Str"");
      wca.out.println(""String_Node_Str"");
      wca.out.close();
      wca.dotout.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8682820185826198
6369,"/** 
 * Fill in the destination MAC address. If not in the cache use this packet for a ARP request. The IP packet get's lost.
 * @param p
 */
static void fillETH(Packet p){
  Entry e=Entry.find(p.buf[4]);
  if (e == null) {
    sendRequest(p);
  }
 else {
    int[] mac=e.mac;
    p.llh[0]=mac[0] << 8 | mac[1];
    p.llh[1]=mac[2] << 8 | mac[3];
    p.llh[2]=mac[4] << 8 | mac[5];
    p.llh[6]=0x0800;
  }
}","/** 
 * Fill in the destination MAC address. If not in the cache use this packet for a ARP request. The IP packet get's lost.
 * @param p
 */
static void fillETH(Packet p){
  Entry e=Entry.find(p.buf[4]);
  if (p.llh[6] == 0x0806)   e=Entry.find(p.buf[6]);
  if (e == null) {
    sendRequest(p);
  }
 else {
    int[] mac=e.mac;
    p.llh[0]=mac[0] << 8 | mac[1];
    p.llh[1]=mac[2] << 8 | mac[3];
    p.llh[2]=mac[4] << 8 | mac[5];
  }
}",0.5478158205430933
6370,"/** 
 * very simple generation of IP header. just swap source and destination.
 */
private static void doIp(Packet p,int prot){
  int[] buf=p.buf;
  int len=p.len;
  int i;
  if (len == 0) {
    p.setStatus(Packet.FREE);
  }
 else {
    buf[0]=0x45000000 + len;
    buf[1]=getId();
    buf[2]=(0x20 << 24) + (prot << 16);
    i=buf[3];
    buf[3]=buf[4];
    buf[4]=i;
    buf[2]|=chkSum(buf,0,20);
    p.setStatus(Packet.SND);
  }
}","/** 
 * very simple generation of IP header. just swap source and destination.
 */
private static void doIp(Packet p,int prot){
  int[] buf=p.buf;
  int len=p.len;
  int i;
  if (len == 0) {
    p.setStatus(Packet.FREE);
  }
 else {
    buf[0]=0x45000000 + len;
    buf[1]=getId();
    buf[2]=(0x20 << 24) + (prot << 16);
    i=buf[3];
    buf[3]=buf[4];
    buf[4]=i;
    buf[2]|=chkSum(buf,0,20);
    p.llh[6]=0x0800;
    p.setStatus(Packet.SND);
  }
}",0.9763246899661782
6371,"/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  InstructionHandle ih=stih;
  blockcychit=0;
  blockcycmiss=0;
  LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
  int prevLine=-1;
  int srcLine=-1;
  do {
    if (wcmb.wca.jline) {
      srcLine=lnt.getSourceLine(ih.getPosition());
      if (srcLine > prevLine) {
        int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
        String c=""String_Node_Str"";
        if (ai != -1) {
          c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
          sb.append(WU.postpad(wcmb.wca.las + wcmb.wca.las + wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ ""String_Node_Str""+ srcLine+ ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim()+ wcmb.wca.lae,62) + ""String_Node_Str"");
        }
 else         sb.append(WU.postpad(wcmb.wca.las + wcmb.wca.las + wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ ""String_Node_Str""+ srcLine+ ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim()+ wcmb.wca.lae,62) + ""String_Node_Str"");
      }
      prevLine=srcLine;
    }
    if (ih == stih) {
      String tStr=""String_Node_Str"";
      for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
        Integer keyInt=(Integer)iter.next();
        WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
        tStr+=""String_Node_Str"" + wcbb.getId() + ""String_Node_Str"";
      }
      tStr+=""String_Node_Str"";
      sb.append(WU.postpad(""String_Node_Str"" + id + tStr,6));
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(wcmb.wca.las);
    sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
    if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))     sb.append(""String_Node_Str"");
 else     sb.append(""String_Node_Str"");
    sb.append(wcmb.wca.las);
    StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
    if (ih.getInstruction() instanceof BranchInstruction) {
      InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
      int tarpos=ihtar.getPosition();
      ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
    }
    sb.append(WU.postpad(ihs.toString(),20));
    sb.append(wcmb.wca.las);
    String invoStr=""String_Node_Str"";
    if (ih.getInstruction() instanceof InvokeInstruction) {
      int wcetihMiss=-1;
      int wcetihHit=-1;
      String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
      String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
      Method m=wcmb.wca.getMethod(methodid);
      if (methodid.startsWith(""String_Node_Str"")) {
        int opcode=wcmb.wca.getNativeOpcode(m.getName());
        if (opcode == -1) {
          sb.append(WU.prepad(""String_Node_Str"",10));
          invoStr=methodid + ""String_Node_Str"";
        }
 else {
          int cycles=WCETInstruction.getCycles(opcode,false,0);
          wcetihMiss=cycles;
          wcetihHit=cycles;
          blockcycmiss+=wcetihMiss;
          blockcychit+=wcetihHit;
          sb.append(WU.prepad(Integer.toString(wcetihHit),10));
          sb.append(""String_Node_Str"");
          sb.append(""String_Node_Str"");
          invoStr=methodid;
        }
      }
 else       if (m != null && !m.isAbstract()) {
        int n=-1;
        if (m.getCode() != null) {
          n=(m.getCode().getCode().length + 3) / 4;
        }
 else {
          n=0;
        }
        int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,n);
        int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,n);
        int rethit=-1;
        int retmiss=-1;
        if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,n);
        }
 else         if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,n);
        }
 else {
          System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
          System.exit(-1);
        }
        wcetihMiss=invokemiss + retmiss;
        blockcycmiss+=wcetihMiss;
        wcetihHit=invokehit + rethit;
        blockcychit+=wcetihHit;
        if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
          sb.append(WU.prepad(""String_Node_Str"",10));
        }
 else {
          sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
          sb.append(WU.prepad(wcmb.wca.las + (invokemiss - invokehit) + ""String_Node_Str"",8));
          sb.append(WU.prepad(wcmb.wca.las + (retmiss - rethit) + ""String_Node_Str"",8));
        }
        sb.append(""String_Node_Str"");
        invoStr=methodid + ""String_Node_Str"" + n+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
        if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
          invoStr+=""String_Node_Str"";
        }
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
 else {
      int wcetihMiss;
      int wcetihHit;
      if (ih.getInstruction() instanceof ReturnInstruction) {
        wcetihMiss=0;
        wcetihHit=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
        sb.append(WU.prepad(Integer.toString(wcetihHit),10));
      }
 else {
        wcetihMiss=WCETInstruction.getCyclesFromHandle(ih,true,wcmb.getN());
        wcetihHit=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
        sb.append(WU.prepad(Integer.toString(wcetihHit),10));
      }
      blockcycmiss+=wcetihMiss;
      blockcychit+=wcetihHit;
      sb.append(wcmb.wca.las + ""String_Node_Str"");
      sb.append(wcmb.wca.las + ""String_Node_Str"");
    }
    sb.append(wcmb.wca.las);
    sb.append(invoStr);
    if (ih.getInstruction() instanceof FieldInstruction) {
      String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
      sb.append(fieStrType + ""String_Node_Str"");
      if (ih.getInstruction() instanceof FieldOrMethod) {
        String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
        sb.append(fieStrClass + ""String_Node_Str"");
      }
      String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
      sb.append(fieStrName);
    }
    if (ih.getInstruction() instanceof LocalVariableInstruction) {
      if (ih.getInstruction() instanceof StoreInstruction) {
        StoreInstruction si=(StoreInstruction)ih.getInstruction();
        String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
        if (siStr.length() > 0)         sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
      }
 else {
        LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
        String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
        if (lvStr.length() > 0)         sb.append(lvStr + ""String_Node_Str"");
      }
    }
    if (ih.getInstruction() instanceof ArrayInstruction) {
      String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
      sb.append(aType + ""String_Node_Str"");
    }
    if (ih == endih) {
      sb.append(""String_Node_Str"" + id + ""String_Node_Str"");
      if (ih.getInstruction() instanceof ReturnInstruction) {
        sb.append(WU.prepad(blockcychit + ""String_Node_Str"",7));
      }
 else {
        sb.append(WU.prepad(blockcychit + ""String_Node_Str"" + blockcycmiss,7));
      }
    }
    sb.append(wcmb.wca.lae + ""String_Node_Str"");
  }
 while (ih != endih && (ih=ih.getNext()) != null);
  if (blockcycmiss < blockcychit)   blockcycmiss=blockcychit;
  return sb.toString();
}","/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  InstructionHandle ih=stih;
  blockcychit=0;
  blockcycmiss=0;
  LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
  int prevLine=-1;
  int srcLine=-1;
  do {
    if (wcmb.wca.jline) {
      srcLine=lnt.getSourceLine(ih.getPosition());
      if (srcLine > prevLine) {
        int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
        String c=""String_Node_Str"";
        if (ai != -1) {
          c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
          sb.append(WU.postpad(wcmb.wca.las + wcmb.wca.las + wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ ""String_Node_Str""+ srcLine+ ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim()+ wcmb.wca.lae,62) + ""String_Node_Str"");
        }
 else         sb.append(WU.postpad(wcmb.wca.las + wcmb.wca.las + wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ ""String_Node_Str""+ srcLine+ ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim()+ wcmb.wca.lae,62) + ""String_Node_Str"");
      }
      prevLine=srcLine;
    }
    if (ih == stih) {
      String tStr=""String_Node_Str"";
      for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
        Integer keyInt=(Integer)iter.next();
        WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
        tStr+=""String_Node_Str"" + wcbb.getId() + ""String_Node_Str"";
      }
      tStr+=""String_Node_Str"";
      sb.append(WU.postpad(""String_Node_Str"" + id + tStr,6));
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(wcmb.wca.las);
    sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
    if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))     sb.append(""String_Node_Str"");
 else     sb.append(""String_Node_Str"");
    sb.append(wcmb.wca.las);
    StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
    if (ih.getInstruction() instanceof BranchInstruction) {
      InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
      int tarpos=ihtar.getPosition();
      ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
    }
    sb.append(WU.postpad(ihs.toString(),20));
    sb.append(wcmb.wca.las);
    String invoStr=""String_Node_Str"";
    if (ih.getInstruction() instanceof InvokeInstruction) {
      int wcetihMiss=-1;
      int wcetihHit=-1;
      String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
      String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
      Method m=wcmb.wca.getMethod(methodid);
      if (methodid.startsWith(""String_Node_Str"")) {
        int opcode=wcmb.wca.getNativeOpcode(m.getName());
        if (opcode == -1) {
          sb.append(WU.prepad(""String_Node_Str"",10));
          invoStr=methodid + ""String_Node_Str"";
        }
 else {
          int cycles=WCETInstruction.getCycles(opcode,false,0);
          wcetihMiss=cycles;
          wcetihHit=cycles;
          blockcycmiss+=wcetihMiss;
          blockcychit+=wcetihHit;
          sb.append(WU.prepad(Integer.toString(wcetihHit),10));
          sb.append(""String_Node_Str"");
          sb.append(""String_Node_Str"");
          invoStr=methodid;
        }
      }
 else       if (m != null && !m.isAbstract()) {
        int n=-1;
        if (m.getCode() != null) {
          n=(m.getCode().getCode().length + 3) / 4;
        }
 else {
          n=0;
        }
        int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,n);
        int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,n);
        int rethit=-1;
        int retmiss=-1;
        if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,n);
        }
 else         if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,n);
        }
 else {
          System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
          System.exit(-1);
        }
        wcetihMiss=invokemiss;
        blockcycmiss+=wcetihMiss;
        wcetihHit=invokehit;
        blockcychit+=wcetihHit;
        if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
          sb.append(WU.prepad(""String_Node_Str"",10));
        }
 else {
          sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
          sb.append(WU.prepad(wcmb.wca.las + (invokemiss - invokehit) + ""String_Node_Str"",8));
          sb.append(WU.prepad(wcmb.wca.las + (retmiss - rethit) + ""String_Node_Str"",8));
        }
        sb.append(""String_Node_Str"");
        invoStr=methodid + ""String_Node_Str"" + n+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss;
        if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
          invoStr+=""String_Node_Str"";
        }
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
 else {
      int wcetihMiss;
      int wcetihHit;
      if (ih.getInstruction() instanceof ReturnInstruction) {
        wcetihMiss=0;
        wcetihHit=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
        sb.append(WU.prepad(Integer.toString(wcetihHit),10));
      }
 else {
        wcetihMiss=WCETInstruction.getCyclesFromHandle(ih,true,wcmb.getN());
        wcetihHit=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
        sb.append(WU.prepad(Integer.toString(wcetihHit),10));
      }
      blockcycmiss+=wcetihMiss;
      blockcychit+=wcetihHit;
      sb.append(wcmb.wca.las + ""String_Node_Str"");
      sb.append(wcmb.wca.las + ""String_Node_Str"");
    }
    sb.append(wcmb.wca.las);
    sb.append(invoStr);
    if (ih.getInstruction() instanceof FieldInstruction) {
      String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
      sb.append(fieStrType + ""String_Node_Str"");
      if (ih.getInstruction() instanceof FieldOrMethod) {
        String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
        sb.append(fieStrClass + ""String_Node_Str"");
      }
      String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
      sb.append(fieStrName);
    }
    if (ih.getInstruction() instanceof LocalVariableInstruction) {
      if (ih.getInstruction() instanceof StoreInstruction) {
        StoreInstruction si=(StoreInstruction)ih.getInstruction();
        String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
        if (siStr.length() > 0)         sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
      }
 else {
        LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
        String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
        if (lvStr.length() > 0)         sb.append(lvStr + ""String_Node_Str"");
      }
    }
    if (ih.getInstruction() instanceof ArrayInstruction) {
      String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
      sb.append(aType + ""String_Node_Str"");
    }
    if (ih == endih) {
      sb.append(""String_Node_Str"" + id + ""String_Node_Str"");
      if (ih.getInstruction() instanceof ReturnInstruction) {
        sb.append(WU.prepad(blockcychit + ""String_Node_Str"",7));
      }
 else {
        sb.append(WU.prepad(blockcychit + ""String_Node_Str"" + blockcycmiss,7));
      }
    }
    sb.append(wcmb.wca.lae + ""String_Node_Str"");
  }
 while (ih != endih && (ih=ih.getNext()) != null);
  if (blockcycmiss < blockcychit)   blockcycmiss=blockcychit;
  return sb.toString();
}",0.9943436499466382
6372,"public String toLS(){
  StringBuffer ls=new StringBuffer();
  ls.append(""String_Node_Str"");
  ls.append(""String_Node_Str"" + jc.getClassName() + ""String_Node_Str""+ methodbcel.getName()+ ""String_Node_Str"");
  ls.append(""String_Node_Str"");
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    WCETBasicBlock wcbb=(WCETBasicBlock)bbs.get(keyInt);
    ls.append(""String_Node_Str"" + wcbb.id);
    if (iter.hasNext())     ls.append(""String_Node_Str"");
  }
  ls.append(""String_Node_Str"");
  ls.append(""String_Node_Str"");
  ls.append(""String_Node_Str"");
  WCETBasicBlock wcbb=null;
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    wcbb=(WCETBasicBlock)bbs.get(keyInt);
    HashMap tinbbs=wcbb.getInbbs();
    if (tinbbs.size() > 0 || wcbb.id == 0) {
      ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str"");
      if (wcbb.id == 0) {
        ls.append(""String_Node_Str"");
        if (tinbbs.size() > 0) {
          ls.append(""String_Node_Str"");
        }
      }
      for (Iterator titer=tinbbs.keySet().iterator(); titer.hasNext(); ) {
        Integer tkeyInt=(Integer)titer.next();
        WCETBasicBlock w=(WCETBasicBlock)tinbbs.get(tkeyInt);
        ls.append(""String_Node_Str"" + w.id + ""String_Node_Str""+ wcbb.id);
        if (titer.hasNext())         ls.append(""String_Node_Str"");
      }
      ls.append(""String_Node_Str"");
      if (wcbb.sucbb != null)       ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.sucbb.id);
      if (wcbb.sucbb != null && wcbb.tarbb != null)       ls.append(""String_Node_Str"");
      if (wcbb.tarbb != null)       ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.tarbb.id);
      if (wcbb.sucbb == null && wcbb.tarbb == null)       ls.append(""String_Node_Str"");
      ls.append(""String_Node_Str"");
    }
  }
  ls.append(""String_Node_Str"");
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    wcbb=(WCETBasicBlock)bbs.get(keyInt);
    if (wcbb.loopcontroller) {
      if (wcbb.id == 0) {
        ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.id+ ""String_Node_Str""+ wcbb.sucbb.id+ ""String_Node_Str""+ wcbb.loop+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ wcbb.id+ ""String_Node_Str""+ wcbb.id+ ""String_Node_Str"");
      }
 else {
        ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.id+ ""String_Node_Str""+ wcbb.sucbb.id+ ""String_Node_Str""+ wcbb.loop+ ""String_Node_Str""+ (wcbb.loopid - 1)+ ""String_Node_Str""+ wcbb.loopid+ ""String_Node_Str""+ wcbb.id+ ""String_Node_Str"");
      }
    }
  }
  ls.append(""String_Node_Str"");
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    wcbb=(WCETBasicBlock)bbs.get(keyInt);
    ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str"");
    HashMap tinbbs=wcbb.getInbbs();
    if (tinbbs.size() > 0 || wcbb.id == 0) {
      if (wcbb.id == 0) {
        ls.append(wcbb.blockcycmiss + ""String_Node_Str"");
        if (tinbbs.size() > 0)         ls.append(""String_Node_Str"");
      }
      for (Iterator titer=tinbbs.keySet().iterator(); titer.hasNext(); ) {
        Integer tkeyInt=(Integer)titer.next();
        WCETBasicBlock w=(WCETBasicBlock)tinbbs.get(tkeyInt);
        ls.append(wcbb.blockcycmiss + ""String_Node_Str"" + w.id+ ""String_Node_Str""+ wcbb.id);
        if (titer.hasNext())         ls.append(""String_Node_Str"");
      }
    }
    ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str"");
  }
  try {
    lpf=new File(WCETAnalyser.outFile).getParentFile().getAbsolutePath() + ""String_Node_Str"" + jc.getClassName()+ ""String_Node_Str""+ methodbcel.getName()+ ""String_Node_Str"";
    lpf=lpf.replace('<','_');
    lpf=lpf.replace('>','_');
    PrintWriter lsout=new PrintWriter(new FileOutputStream(lpf));
    lsout.write(ls.toString());
    lsout.close();
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  try {
    wcetvars=new HashMap();
    LpSolve problem=LpSolve.readLp(lpf,LpSolve.NORMAL,jc.getClassName() + ""String_Node_Str"" + methodbcel.getName());
    problem.setOutputfile(lpf + ""String_Node_Str"");
    problem.solve();
    problem.setOutputfile(lpf + ""String_Node_Str"");
    problem.printObjective();
    problem.printSolution(1);
    wcetlp=(int)problem.getObjective();
    try {
      BufferedReader in=new BufferedReader(new FileReader(lpf + ""String_Node_Str""));
      String str;
      while ((str=in.readLine()) != null) {
        ls.append(str + ""String_Node_Str"");
        StringTokenizer st=new StringTokenizer(str);
        if (st.countTokens() == 2) {
          wcetvars.put(st.nextToken(),st.nextToken());
        }
      }
      in.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  LpSolveException e) {
    System.out.println(""String_Node_Str"" + jc.getClassName() + ""String_Node_Str""+ methodbcel.getName());
  }
  return ls.toString();
}","public String toLS(){
  StringBuffer ls=new StringBuffer();
  ls.append(""String_Node_Str"");
  ls.append(""String_Node_Str"" + jc.getClassName() + ""String_Node_Str""+ methodbcel.getName()+ ""String_Node_Str"");
  ls.append(""String_Node_Str"");
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    WCETBasicBlock wcbb=(WCETBasicBlock)bbs.get(keyInt);
    ls.append(""String_Node_Str"" + wcbb.id);
    if (iter.hasNext())     ls.append(""String_Node_Str"");
  }
  ls.append(""String_Node_Str"");
  ls.append(""String_Node_Str"");
  ls.append(""String_Node_Str"");
  WCETBasicBlock wcbb=null;
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    wcbb=(WCETBasicBlock)bbs.get(keyInt);
    HashMap tinbbs=wcbb.getInbbs();
    if (tinbbs.size() > 0 || wcbb.id == 0) {
      ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str"");
      if (wcbb.id == 0) {
        ls.append(""String_Node_Str"");
        if (tinbbs.size() > 0) {
          ls.append(""String_Node_Str"");
        }
      }
      for (Iterator titer=tinbbs.keySet().iterator(); titer.hasNext(); ) {
        Integer tkeyInt=(Integer)titer.next();
        WCETBasicBlock w=(WCETBasicBlock)tinbbs.get(tkeyInt);
        ls.append(""String_Node_Str"" + w.id + ""String_Node_Str""+ wcbb.id);
        if (titer.hasNext())         ls.append(""String_Node_Str"");
      }
      ls.append(""String_Node_Str"");
      if (wcbb.sucbb != null)       ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.sucbb.id);
      if (wcbb.sucbb != null && wcbb.tarbb != null)       ls.append(""String_Node_Str"");
      if (wcbb.tarbb != null)       ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.tarbb.id);
      if (wcbb.sucbb == null && wcbb.tarbb == null)       ls.append(""String_Node_Str"");
      ls.append(""String_Node_Str"");
    }
  }
  ls.append(""String_Node_Str"");
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    wcbb=(WCETBasicBlock)bbs.get(keyInt);
    if (wcbb.loopcontroller) {
      if (wcbb.id == 0) {
        ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.id+ ""String_Node_Str""+ wcbb.sucbb.id+ ""String_Node_Str""+ wcbb.loop+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ wcbb.id+ ""String_Node_Str"");
      }
 else {
        ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.id+ ""String_Node_Str""+ wcbb.sucbb.id+ ""String_Node_Str""+ wcbb.loop+ ""String_Node_Str""+ (wcbb.loopid - 1)+ ""String_Node_Str""+ wcbb.loopid+ ""String_Node_Str"");
      }
    }
  }
  ls.append(""String_Node_Str"");
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    wcbb=(WCETBasicBlock)bbs.get(keyInt);
    ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str"");
    HashMap tinbbs=wcbb.getInbbs();
    if (tinbbs.size() > 0 || wcbb.id == 0) {
      if (wcbb.id == 0) {
        ls.append(wcbb.blockcycmiss + ""String_Node_Str"");
        if (tinbbs.size() > 0)         ls.append(""String_Node_Str"");
      }
      for (Iterator titer=tinbbs.keySet().iterator(); titer.hasNext(); ) {
        Integer tkeyInt=(Integer)titer.next();
        WCETBasicBlock w=(WCETBasicBlock)tinbbs.get(tkeyInt);
        ls.append(wcbb.blockcycmiss + ""String_Node_Str"" + w.id+ ""String_Node_Str""+ wcbb.id);
        if (titer.hasNext())         ls.append(""String_Node_Str"");
      }
    }
    ls.append(""String_Node_Str"");
  }
  try {
    lpf=new File(WCETAnalyser.outFile).getParentFile().getAbsolutePath() + ""String_Node_Str"" + jc.getClassName()+ ""String_Node_Str""+ methodbcel.getName()+ ""String_Node_Str"";
    lpf=lpf.replace('<','_');
    lpf=lpf.replace('>','_');
    PrintWriter lsout=new PrintWriter(new FileOutputStream(lpf));
    lsout.write(ls.toString());
    lsout.close();
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  try {
    wcetvars=new HashMap();
    LpSolve problem=LpSolve.readLp(lpf,LpSolve.NORMAL,jc.getClassName() + ""String_Node_Str"" + methodbcel.getName());
    problem.setOutputfile(lpf + ""String_Node_Str"");
    problem.solve();
    problem.setOutputfile(lpf + ""String_Node_Str"");
    problem.printObjective();
    problem.printSolution(1);
    wcetlp=(int)problem.getObjective();
    try {
      BufferedReader in=new BufferedReader(new FileReader(lpf + ""String_Node_Str""));
      String str;
      while ((str=in.readLine()) != null) {
        ls.append(str + ""String_Node_Str"");
        StringTokenizer st=new StringTokenizer(str);
        if (st.countTokens() == 2) {
          wcetvars.put(st.nextToken(),st.nextToken());
        }
      }
      in.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  LpSolveException e) {
    System.out.println(""String_Node_Str"" + jc.getClassName() + ""String_Node_Str""+ methodbcel.getName());
  }
  return ls.toString();
}",0.99131488588164
6373,"/** 
 * Control flow analysis for one nonabstract-method.
 */
public void controlFlowGraph(){
  cpg=new ConstantPoolGen(jc.getConstantPool());
  InstConstraintVisitor icv=new AnInstConstraintVisitor();
  icv.setConstantPoolGen(cpg);
  ExecutionVisitor ev=new ExecutionVisitor();
  ev.setConstantPoolGen(cpg);
  mg=new MethodGen(methodbcel,jc.getClassName(),cpg);
  mg.getInstructionList().setPositions(true);
  icv.setMethodGen(mg);
  if (!(mg.isAbstract() || mg.isNative())) {
    InstructionHandle ih=mg.getInstructionList().getStart();
    InstructionHandle ihend=mg.getInstructionList().getEnd();
    init(ih,ihend);
    do {
      Instruction ins=ih.getInstruction();
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        InstructionHandle ihnext=ih.getNext();
        createBasicBlock(ihtar);
        if (ihnext != null) {
          createBasicBlock(ihnext);
        }
      }
    }
 while ((ih=ih.getNext()) != null);
    int id=0;
    for (Iterator iter=getBbs().keySet().iterator(); iter.hasNext(); ) {
      WCETBasicBlock wbb=(WCETBasicBlock)getBbs().get((Integer)iter.next());
      wbb.calculateWcet();
      wbb.setId(id);
      id++;
      ih=wbb.getEndih();
      WCETBasicBlock wbbthis=getCoveringBB(ih);
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        WCETBasicBlock wbbtar=getCoveringBB(ihtar);
        wbbthis.setTarbb(wbbtar);
        wbbtar.addTargeter(wbbthis);
        if (ih.getInstruction() instanceof IfInstruction) {
          InstructionHandle ihnext=ih.getNext();
          if (ihnext != null) {
            WCETBasicBlock wbbnxt=getCoveringBB(ihnext);
            wbbthis.setSucbb(wbbnxt);
          }
        }
      }
 else {
        InstructionHandle ihnext=ih.getNext();
        if (ihnext != null) {
          WCETBasicBlock wbbnxt=getCoveringBB(ihnext);
          wbbthis.setSucbb(wbbnxt);
        }
      }
    }
  }
}","/** 
 * Control flow analysis for one nonabstract-method.
 */
public void controlFlowGraph(){
  cpg=new ConstantPoolGen(jc.getConstantPool());
  InstConstraintVisitor icv=new AnInstConstraintVisitor();
  icv.setConstantPoolGen(cpg);
  ExecutionVisitor ev=new ExecutionVisitor();
  ev.setConstantPoolGen(cpg);
  mg=new MethodGen(methodbcel,jc.getClassName(),cpg);
  mg.getInstructionList().setPositions(true);
  icv.setMethodGen(mg);
  if (!(mg.isAbstract() || mg.isNative())) {
    InstructionHandle ih=mg.getInstructionList().getStart();
    InstructionHandle ihend=mg.getInstructionList().getEnd();
    init(ih,ihend);
    do {
      Instruction ins=ih.getInstruction();
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        InstructionHandle ihnext=ih.getNext();
        createBasicBlock(ihtar);
        if (ihnext != null) {
          createBasicBlock(ihnext);
        }
      }
    }
 while ((ih=ih.getNext()) != null);
    int id=0;
    for (Iterator iter=getBbs().keySet().iterator(); iter.hasNext(); ) {
      WCETBasicBlock wbb=(WCETBasicBlock)getBbs().get((Integer)iter.next());
      wbb.calculateWcet();
      wbb.setId(id);
      id++;
      ih=wbb.getEndih();
      WCETBasicBlock wbbthis=getCoveringBB(ih);
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        WCETBasicBlock wbbtar=getCoveringBB(ihtar);
        wbbthis.setTarbb(wbbtar);
        wbbtar.addTargeter(wbbthis);
        if (ih.getInstruction() instanceof IfInstruction) {
          InstructionHandle ihnext=ih.getNext();
          if (ihnext != null) {
            WCETBasicBlock wbbnxt=getCoveringBB(ihnext);
            wbbthis.setSucbb(wbbnxt);
          }
        }
      }
 else       if (ih.getInstruction() instanceof ReturnInstruction) {
      }
 else {
        InstructionHandle ihnext=ih.getNext();
        if (ihnext != null) {
          WCETBasicBlock wbbnxt=getCoveringBB(ihnext);
          wbbthis.setSucbb(wbbnxt);
        }
      }
    }
  }
}",0.9819391634980988
6374,"/** 
 * Reads the next three-byte integer from the byte stream.
 * @return The next three-byte integer.
 */
public INT24 readInt24(){
  if (bytePosition * 8 + bitPosition + 24 > data.length * 8) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (bitPosition != 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final int firstByte=readByte() & 0xFF;
  final int secondByte=readByte() & 0xFF;
  final int thirdByte=readByte() & 0xFF;
  return new INT24(8 * bytePosition + bitPosition - 24,thirdByte << 16 | secondByte << 8 | firstByte);
}","/** 
 * Reads the next three-byte integer from the byte stream.
 * @return The next three-byte integer.
 */
public INT24 readInt24(){
  if (bytePosition * 8 + bitPosition + 24 > data.length * 8) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (bitPosition != 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final int firstByte=readByte() & 0xFF;
  final int secondByte=readByte() & 0xFF;
  final int thirdByte=readByte() & 0xFF;
  int value=thirdByte << 16 | secondByte << 8 | firstByte;
  if (value > 0x7FFFFF) {
    value=value - 0x1000000;
  }
  return new INT24(8 * bytePosition + bitPosition - 24,value);
}",0.8646003262642741
6375,"@Check public void checkRefsExceptionInMatchingState(ExceptionRef exRef){
  EObject owner=objLookup.getVersionedOwner(exRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  if (owner != null && stateRes.definesState(owner)) {
    if (!referencedStateChecker.stateMatches(exRef.getException().getState(),owner))     error(""String_Node_Str"",ServiceDslPackage.Literals.EXCEPTION_REF__EXCEPTION);
  }
}","@Check public void checkRefsExceptionInMatchingState(ExceptionRef exRef){
  EObject owner=objLookup.getStatefulOwner(exRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  if (owner != null && stateRes.definesState(owner)) {
    if (!referencedStateChecker.stateMatches(exRef.getException().getState(),owner))     error(""String_Node_Str"",ServiceDslPackage.Literals.EXCEPTION_REF__EXCEPTION);
  }
}",0.9817400644468314
6376,"@Check(CheckType.NORMAL) public void checkNotRefsLowerStateBO(VersionedTypeRef boRef){
  EObject owner=objLookup.getVersionedOwner(boRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null) {
    if (stateComparator.compare(ownerState,boRef.getType().getState()) > 0 && !(ownerState != null && ownerState.isIsEnd()))     warning(""String_Node_Str"" + getObjectTypeName(boRef.getType()) + ""String_Node_Str"",ServiceDslPackage.Literals.VERSIONED_TYPE_REF__TYPE);
  }
}","@Check(CheckType.NORMAL) public void checkNotRefsLowerStateBO(VersionedTypeRef boRef){
  EObject owner=objLookup.getStatefulOwner(boRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null) {
    if (stateComparator.compare(ownerState,boRef.getType().getState()) > 0 && !(ownerState != null && ownerState.isIsEnd()))     warning(""String_Node_Str"" + getObjectTypeName(boRef.getType()) + ""String_Node_Str"",ServiceDslPackage.Literals.VERSIONED_TYPE_REF__TYPE);
  }
}",0.9860312243221035
6377,"@Check(CheckType.NORMAL) public void checkNotRefsLowerStateException(ExceptionRef exRef){
  EObject owner=objLookup.getVersionedOwner(exRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner)) {
    if (stateComparator.compare(ownerState,exRef.getException().getState()) > 0 && !(ownerState != null && ownerState.isIsEnd()))     warning(""String_Node_Str"",ServiceDslPackage.Literals.EXCEPTION_REF__EXCEPTION);
  }
}","@Check(CheckType.NORMAL) public void checkNotRefsLowerStateException(ExceptionRef exRef){
  EObject owner=objLookup.getStatefulOwner(exRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner)) {
    if (stateComparator.compare(ownerState,exRef.getException().getState()) > 0 && !(ownerState != null && ownerState.isIsEnd()))     warning(""String_Node_Str"",ServiceDslPackage.Literals.EXCEPTION_REF__EXCEPTION);
  }
}",0.985629754860524
6378,"@Check public void checkDoesNotRefRetiredBO(BusinessObjectRef boRef){
  EObject owner=objLookup.getVersionedOwner(boRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner) && ownerState.isIsEnd() && boRef.getType().getState() != null && boRef.getType().getState().isIsEnd())   error(""String_Node_Str"" + ownerState.getName() + ""String_Node_Str"",ServiceDslPackage.Literals.BUSINESS_OBJECT_REF__TYPE);
}","@Check public void checkDoesNotRefRetiredBO(BusinessObjectRef boRef){
  EObject owner=objLookup.getStatefulOwner(boRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner) && ownerState.isIsEnd() && boRef.getType().getState() != null && boRef.getType().getState().isIsEnd())   error(""String_Node_Str"" + ownerState.getName() + ""String_Node_Str"",ServiceDslPackage.Literals.BUSINESS_OBJECT_REF__TYPE);
}",0.9852813852813852
6379,"@Check public void checkDoesNotRefRetiredService(ServiceRef svcRef){
  EObject owner=objLookup.getVersionedOwner(svcRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner) && ownerState.isIsEnd() && svcRef.getService().getState() != null && svcRef.getService().getState().isIsEnd())   error(""String_Node_Str"" + ownerState.getName() + ""String_Node_Str"",ServiceDslPackage.Literals.SERVICE_REF__SERVICE);
}","@Check public void checkDoesNotRefRetiredService(ServiceRef svcRef){
  EObject owner=objLookup.getStatefulOwner(svcRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner) && ownerState.isIsEnd() && svcRef.getService().getState() != null && svcRef.getService().getState().isIsEnd())   error(""String_Node_Str"" + ownerState.getName() + ""String_Node_Str"",ServiceDslPackage.Literals.SERVICE_REF__SERVICE);
}",0.9853574504737296
6380,"@Check public void checkExDoesNotRefRetiredException(ExceptionRef exRef){
  EObject owner=objLookup.getVersionedOwner(exRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner) && ownerState.isIsEnd() && exRef.getException().getState() != null && exRef.getException().getState().isIsEnd())   error(""String_Node_Str"" + ownerState.getName() + ""String_Node_Str"",ServiceDslPackage.Literals.EXCEPTION_REF__EXCEPTION);
}","@Check public void checkExDoesNotRefRetiredException(ExceptionRef exRef){
  EObject owner=objLookup.getStatefulOwner(exRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner) && ownerState.isIsEnd() && exRef.getException().getState() != null && exRef.getException().getState().isIsEnd())   error(""String_Node_Str"" + ownerState.getName() + ""String_Node_Str"",ServiceDslPackage.Literals.EXCEPTION_REF__EXCEPTION);
}",0.9856054191363252
6381,"@Check public void checkDoesNotRefRetiredEnumeration(EnumTypeRef enumRef){
  EObject owner=objLookup.getVersionedOwner(enumRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner) && ownerState.isIsEnd() && enumRef.getType().getState() != null && enumRef.getType().getState().isIsEnd())   error(""String_Node_Str"" + ownerState.getName() + ""String_Node_Str"",ServiceDslPackage.Literals.ENUM_TYPE_REF__TYPE);
}","@Check public void checkDoesNotRefRetiredEnumeration(EnumTypeRef enumRef){
  EObject owner=objLookup.getStatefulOwner(enumRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner) && ownerState.isIsEnd() && enumRef.getType().getState() != null && enumRef.getType().getState().isIsEnd())   error(""String_Node_Str"" + ownerState.getName() + ""String_Node_Str"",ServiceDslPackage.Literals.ENUM_TYPE_REF__TYPE);
}",0.9854077253218884
6382,"@Check public void checkRefsBOInMatchingState(BusinessObjectRef boRef){
  EObject owner=objLookup.getVersionedOwner(boRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  if (owner != null && stateRes.definesState(owner)) {
    if (!referencedStateChecker.stateMatches(((BusinessObject)boRef.getType()).getState(),owner))     error(""String_Node_Str"",ServiceDslPackage.Literals.BUSINESS_OBJECT_REF__TYPE);
  }
}","@Check public void checkRefsBOInMatchingState(BusinessObjectRef boRef){
  EObject owner=objLookup.getStatefulOwner(boRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  if (owner != null && stateRes.definesState(owner)) {
    if (!referencedStateChecker.stateMatches(((BusinessObject)boRef.getType()).getState(),owner))     error(""String_Node_Str"",ServiceDslPackage.Literals.BUSINESS_OBJECT_REF__TYPE);
  }
}",0.9821989528795813
6383,"@Check(CheckType.NORMAL) public void checkNotRefsLowerStateEnumeration(EnumTypeRef enumRef){
  EObject owner=objLookup.getVersionedOwner(enumRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner)) {
    if (stateComparator.compare(ownerState,enumRef.getType().getState()) > 0 && !(ownerState != null && ownerState.isIsEnd()))     warning(""String_Node_Str"",ServiceDslPackage.Literals.ENUM_TYPE_REF__TYPE);
  }
}","@Check(CheckType.NORMAL) public void checkNotRefsLowerStateEnumeration(EnumTypeRef enumRef){
  EObject owner=objLookup.getStatefulOwner(enumRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner)) {
    if (stateComparator.compare(ownerState,enumRef.getType().getState()) > 0 && !(ownerState != null && ownerState.isIsEnd()))     warning(""String_Node_Str"",ServiceDslPackage.Literals.ENUM_TYPE_REF__TYPE);
  }
}",0.9855564995751912
6384,"@Check public void checkRefsServiceInMatchingState(ServiceRef svcRef){
  EObject owner=objLookup.getVersionedOwner(svcRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  if (owner != null && stateRes.definesState(owner)) {
    if (!referencedStateChecker.stateMatches(svcRef.getService().getState(),owner))     error(""String_Node_Str"",ServiceDslPackage.Literals.SERVICE_REF__SERVICE);
  }
}","@Check public void checkRefsServiceInMatchingState(ServiceRef svcRef){
  EObject owner=objLookup.getStatefulOwner(svcRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  if (owner != null && stateRes.definesState(owner)) {
    if (!referencedStateChecker.stateMatches(svcRef.getService().getState(),owner))     error(""String_Node_Str"",ServiceDslPackage.Literals.SERVICE_REF__SERVICE);
  }
}",0.9814612868047984
6385,"@Check public void checkServiceOpDoesNotRefRetiredException(ExceptionRef exRef){
  EObject owner=objLookup.getVersionedOwner(exRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner) && ownerState.isIsEnd() && exRef.getException().getState() != null && exRef.getException().getState().isIsEnd())   error(""String_Node_Str"" + ownerState.getName() + ""String_Node_Str"",ServiceDslPackage.Literals.EXCEPTION_REF__EXCEPTION);
}","@Check public void checkServiceOpDoesNotRefRetiredException(ExceptionRef exRef){
  EObject owner=objLookup.getStatefulOwner(exRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner) && ownerState.isIsEnd() && exRef.getException().getState() != null && exRef.getException().getState().isIsEnd())   error(""String_Node_Str"" + ownerState.getName() + ""String_Node_Str"",ServiceDslPackage.Literals.EXCEPTION_REF__EXCEPTION);
}",0.985774058577406
6386,"@Check public void checkRefsEnumerationInMatchingState(EnumTypeRef enumRef){
  EObject owner=objLookup.getVersionedOwner(enumRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  if (owner != null && stateRes.definesState(owner)) {
    if (!referencedStateChecker.stateMatches(((Enumeration)enumRef.getType()).getState(),owner))     error(""String_Node_Str"",ServiceDslPackage.Literals.ENUM_TYPE_REF__TYPE);
  }
}","@Check public void checkRefsEnumerationInMatchingState(EnumTypeRef enumRef){
  EObject owner=objLookup.getStatefulOwner(enumRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  if (owner != null && stateRes.definesState(owner)) {
    if (!referencedStateChecker.stateMatches(((Enumeration)enumRef.getType()).getState(),owner))     error(""String_Node_Str"",ServiceDslPackage.Literals.ENUM_TYPE_REF__TYPE);
  }
}",0.9821989528795813
6387,"@Check(CheckType.NORMAL) public void checkNotRefsLowerStateService(ServiceRef svcRef){
  EObject owner=objLookup.getVersionedOwner(svcRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner)) {
    if (stateComparator.compare(ownerState,svcRef.getService().getState()) > 0 && !(ownerState != null && ownerState.isIsEnd()))     warning(""String_Node_Str"",ServiceDslPackage.Literals.SERVICE_REF__SERVICE);
  }
}","@Check(CheckType.NORMAL) public void checkNotRefsLowerStateService(ServiceRef svcRef){
  EObject owner=objLookup.getStatefulOwner(svcRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  LifecycleState ownerState=stateRes.getLifecycleState(owner);
  if (owner != null && stateRes.definesState(owner)) {
    if (stateComparator.compare(ownerState,svcRef.getService().getState()) > 0 && !(ownerState != null && ownerState.isIsEnd()))     warning(""String_Node_Str"",ServiceDslPackage.Literals.SERVICE_REF__SERVICE);
  }
}",0.9854576561163388
6388,"@Check public void checkRefsVersionedTypeInMatchingState(VersionedTypeRef verTypeRef){
  EObject owner=objLookup.getVersionedOwner(verTypeRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  if (owner != null && stateRes.definesState(owner)) {
    if (!referencedStateChecker.stateMatches(verTypeRef.getType().getState(),owner))     error(""String_Node_Str"" + getObjectTypeName(verTypeRef.getType()) + ""String_Node_Str"",ServiceDslPackage.Literals.VERSIONED_TYPE_REF__TYPE);
  }
}","@Check public void checkRefsVersionedTypeInMatchingState(VersionedTypeRef verTypeRef){
  EObject owner=objLookup.getStatefulOwner(verTypeRef);
  ILifecycleStateResolver stateRes=new StateAttributeLifecycleStateResolver(owner.eResource().getResourceSet());
  if (owner != null && stateRes.definesState(owner)) {
    if (!referencedStateChecker.stateMatches(verTypeRef.getType().getState(),owner))     error(""String_Node_Str"" + getObjectTypeName(verTypeRef.getType()) + ""String_Node_Str"",ServiceDslPackage.Literals.VERSIONED_TYPE_REF__TYPE);
  }
}",0.9844179651695693
6389,"private void calculateVersionProposals(EObject model,ContentAssistContext context,ICompletionProposalAcceptor acceptor){
  ICompositeNode parentNode=NodeModelUtils.findActualNodeFor(model).getParent();
  Iterable<ILeafNode> leafs=parentNode.getLeafNodes();
  Iterable<ILeafNode> nonHidden=Iterables.filter(leafs,new Predicate<ILeafNode>(){
    public boolean apply(    ILeafNode node){
      return !node.isHidden();
    }
  }
);
  BindingModel moduleModel=(BindingModel)model.eContainer().eContainer().eContainer();
  EList<Import> imports=moduleModel.getImports();
  final Iterable<String> importedNamespaces=Lists.transform(imports,new Function<Import,String>(){
    public String apply(    Import from){
      return from.getImportedNamespace().replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  Iterator<ILeafNode> leafIt=nonHidden.iterator();
  Iterable<String> canditateVersions=Sets.newHashSet();
  if (model.eContainer() instanceof ModuleRef) {
    boolean versionConstraintFound=false;
    StringBuilder nameParts=new StringBuilder();
    while (leafIt.hasNext() && !versionConstraintFound) {
      ILeafNode curNode=leafIt.next();
      if (curNode.getSemanticElement() instanceof VersionRef)       versionConstraintFound=true;
 else       nameParts.append(curNode.getText());
    }
    final String moduleName=nameParts.toString().trim();
    final String className=ModuleDslPackage.Literals.MODULE.getName();
    canditateVersions=getCanditateVersions(moduleName,className,importedNamespaces,model.eContainer() instanceof MajorVersionRef);
  }
 else   if (model.eContainer() instanceof ServiceRef) {
    boolean versionConstraintFound=false;
    StringBuilder nameParts=new StringBuilder();
    while (leafIt.hasNext() && !versionConstraintFound) {
      ILeafNode curNode=leafIt.next();
      if (curNode.getSemanticElement() instanceof VersionRef)       versionConstraintFound=true;
 else       nameParts.append(curNode.getText());
    }
    final String moduleName=nameParts.toString().trim();
    final String className=ServiceDslPackage.Literals.SERVICE.getName();
    canditateVersions=getCanditateVersions(moduleName,className,importedNamespaces,model.eContainer() instanceof MajorVersionRef);
  }
  for (  String version : canditateVersions) {
    acceptor.accept(createCompletionProposal(version,context));
  }
}","private void calculateVersionProposals(EObject model,ContentAssistContext context,ICompletionProposalAcceptor acceptor){
  ICompositeNode parentNode=NodeModelUtils.findActualNodeFor(model).getParent();
  Iterable<ILeafNode> leafs=parentNode.getLeafNodes();
  Iterable<ILeafNode> nonHidden=Iterables.filter(leafs,new Predicate<ILeafNode>(){
    public boolean apply(    ILeafNode node){
      return !node.isHidden();
    }
  }
);
  EObject canditateRoot=model;
  while (!(canditateRoot instanceof BindingModel) && model.eContainer() != null) {
    canditateRoot=canditateRoot.eContainer();
  }
  if (canditateRoot instanceof BindingModel) {
    BindingModel moduleModel=(BindingModel)canditateRoot;
    EList<Import> imports=moduleModel.getImports();
    final Iterable<String> importedNamespaces=Lists.transform(imports,new Function<Import,String>(){
      public String apply(      Import from){
        return from.getImportedNamespace().replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
    }
);
    Iterator<ILeafNode> leafIt=nonHidden.iterator();
    Iterable<String> canditateVersions=Sets.newHashSet();
    if (model.eContainer() instanceof ModuleRef) {
      boolean versionConstraintFound=false;
      StringBuilder nameParts=new StringBuilder();
      while (leafIt.hasNext() && !versionConstraintFound) {
        ILeafNode curNode=leafIt.next();
        if (curNode.getSemanticElement() instanceof VersionRef)         versionConstraintFound=true;
 else         nameParts.append(curNode.getText());
      }
      final String moduleName=nameParts.toString().trim();
      final String className=ModuleDslPackage.Literals.MODULE.getName();
      canditateVersions=getCanditateVersions(moduleName,className,importedNamespaces,model.eContainer() instanceof MajorVersionRef);
    }
 else     if (model.eContainer() instanceof ServiceRef) {
      boolean versionConstraintFound=false;
      StringBuilder nameParts=new StringBuilder();
      while (leafIt.hasNext() && !versionConstraintFound) {
        ILeafNode curNode=leafIt.next();
        if (curNode.getSemanticElement() instanceof VersionRef)         versionConstraintFound=true;
 else         nameParts.append(curNode.getText());
      }
      final String svcName=nameParts.toString().trim();
      final String className=ServiceDslPackage.Literals.SERVICE.getName();
      canditateVersions=getCanditateVersions(svcName,className,importedNamespaces,model.eContainer() instanceof MajorVersionRef);
    }
    for (    String version : canditateVersions) {
      acceptor.accept(createCompletionProposal(version,context));
    }
  }
}",0.9196284329563812
6390,"public DependencyDescription next(){
  next=successor();
  return next;
}","public DependencyDescription next(){
  DependencyDescription next=successor();
  return next;
}",0.8690476190476191
6391,"/** 
 * Find all transitive dependencies of the Property. The dependency graph is build from all properties transitively  referenced via the properties' type references if these have properties themselves, i.e. they are BusinessOobjects 
 * @param prop Property from which to start the traversal of the dependency graph
 * @param includeInheritedProperties
 * @param includeCycleTypes include the BO in the result even if it already was visited. However traversal of this path stops here
 * @return {@link DependencyDescription} keyed with the {@link IEObjectDesription} of the referring property 
 */
public DependencyDescription getTransitiveDependencies(final Property prop,final boolean includeInheritedProperties,final boolean includeCycleTypes,List<IEObjectDescription> visitedDependendies,DependencyDescription referrer){
  TypeRef typeRef=prop.getType();
  if (typeRef instanceof VersionedTypeRef) {
    VersionedTypeRef verTypeRef=(VersionedTypeRef)typeRef;
    VersionedType verType=verTypeRef.getType();
    DependencyDescription depRef=buildDependencyDescription(prop,(BusinessObject)verType,includeInheritedProperties,includeCycleTypes,visitedDependendies,referrer);
    return depRef;
  }
  return null;
}","/** 
 * Find all transitive dependencies of the Property. The dependency graph is build from all properties transitively  referenced via the properties' type references if these have properties themselves, i.e. they are BusinessOobjects 
 * @param prop Property from which to start the traversal of the dependency graph
 * @param includeInheritedProperties
 * @param includeCycleTypes include the BO in the result even if it already was visited. However traversal of this path stops here
 * @return {@link DependencyDescription} keyed with the {@link IEObjectDesription} of the referring property 
 */
public DependencyDescription getTransitiveDependencies(final Property prop,final boolean includeInheritedProperties,final boolean includeCycleTypes,List<IEObjectDescription> visitedDependendies,DependencyDescription referrer){
  TypeRef typeRef=prop.getType();
  if (typeRef instanceof VersionedTypeRef) {
    VersionedTypeRef verTypeRef=(VersionedTypeRef)typeRef;
    VersionedType verType=verTypeRef.getType();
    DependencyDescription depRef=buildDependencyDescription(prop,verType,includeInheritedProperties,includeCycleTypes,visitedDependendies,referrer);
    return depRef;
  }
  return null;
}",0.9933938893476466
6392,"public boolean apply(IEObjectDescription canditate){
  return depName.equals(canditate.getQualifiedName()) && version.equals(canditate.getUserData(VersionedResourceDescriptionStrategy.VERSION_KEY));
}","public boolean apply(IEObjectDescription input){
  return BaseDslEqualityHelper.isEqual(input,target);
}",0.5394736842105263
6393,"public VersionedType toVersionedType(IEObjectDescription desc,Resource res){
  final QualifiedName depName=desc.getName();
  final String version=desc.getUserData(VersionedResourceDescriptionStrategy.VERSION_KEY);
  Iterable<IEObjectDescription> objDescs=pericateSearch.search(new Predicate<IEObjectDescription>(){
    public boolean apply(    IEObjectDescription canditate){
      return depName.equals(canditate.getQualifiedName()) && version.equals(canditate.getUserData(VersionedResourceDescriptionStrategy.VERSION_KEY));
    }
  }
);
  VersionedType verType=null;
  if (objDescs.iterator().hasNext()) {
    IEObjectDescription objDesc=objDescs.iterator().next();
    EObject o=objDesc.getEObjectOrProxy();
    if (o.eIsProxy())     o=EcoreUtil.resolve(o,res);
    if (o instanceof VersionedType) {
      verType=(VersionedType)o;
    }
  }
  return verType;
}","public VersionedType toVersionedType(IEObjectDescription desc,Resource res){
  VersionedType verType=null;
  EObject o=desc.getEObjectOrProxy();
  if (o.eIsProxy())   o=EcoreUtil.resolve(o,res);
  if (o instanceof VersionedType) {
    verType=(VersionedType)o;
  }
  return verType;
}",0.1794425087108014
6394,"public DependencyDescription buildDependencyDescription(final Property sourceProp,final BusinessObject bo,final boolean includeInheritedProperties,final boolean includeCycleTypes,List<IEObjectDescription> visitedDependendies,DependencyDescription referrer){
  final IEObjectDescription source=descriptionBuilder.buildDescription(sourceProp);
  final IEObjectDescription sourceBO=descriptionBuilder.buildDescription(sourceProp.eContainer());
  final IEObjectDescription target=descriptionBuilder.buildDescription(bo);
  final IEObjectDescription targetContainer=descriptionBuilder.buildDescription(bo.eContainer());
  if (visitedDependendies == null) {
    visitedDependendies=new ArrayList<IEObjectDescription>();
  }
  if (visitedDependendies.isEmpty())   visitedDependendies.add(sourceBO);
  Deque<DependencyDescription> dependencies=new ArrayDeque<DependencyDescription>();
  DependencyDescription dep=new DependencyDescription(source,target,targetContainer,referrer);
  boolean targetVisited=Iterables.any(visitedDependendies,new Predicate<IEObjectDescription>(){
    @Override public boolean apply(    IEObjectDescription input){
      return BaseDslEqualityHelper.isEqual(input,target);
    }
  }
);
  if (!targetVisited) {
    visitedDependendies.add(target);
    for (    Property p : bo.getProperties()) {
      DependencyDescription propDep=getTransitiveDependencies(p,includeInheritedProperties,includeCycleTypes,visitedDependendies,dep);
      if (propDep != null && (!propDep.isBackRef() || propDep.isBackRef() && includeCycleTypes))       dependencies.add(propDep);
    }
  }
 else {
    dep.setBackRef(true);
  }
  dep.setDependencies(dependencies);
  return dep;
}","public DependencyDescription buildDependencyDescription(final Property sourceProp,final VersionedType targetType,final boolean includeInheritedProperties,final boolean includeCycleTypes,List<IEObjectDescription> visitedDependendies,DependencyDescription referrer){
  final IEObjectDescription source=descriptionBuilder.buildDescription(sourceProp);
  final IEObjectDescription sourceBO=descriptionBuilder.buildDescription(sourceProp.eContainer());
  final IEObjectDescription target=descriptionBuilder.buildDescription(targetType);
  final IEObjectDescription targetContainer=descriptionBuilder.buildDescription(targetType.eContainer());
  if (visitedDependendies == null) {
    visitedDependendies=new ArrayList<IEObjectDescription>();
  }
  if (visitedDependendies.isEmpty())   visitedDependendies.add(sourceBO);
  Deque<DependencyDescription> dependencies=new ArrayDeque<DependencyDescription>();
  DependencyDescription dep=new DependencyDescription(source,target,targetContainer,referrer);
  boolean targetVisited=Iterables.any(visitedDependendies,new Predicate<IEObjectDescription>(){
    public boolean apply(    IEObjectDescription input){
      return BaseDslEqualityHelper.isEqual(input,target);
    }
  }
);
  if (!targetVisited) {
    visitedDependendies.add(target);
    if (targetType instanceof BusinessObject) {
      BusinessObject targetBO=(BusinessObject)targetType;
      for (      Property p : targetBO.getProperties()) {
        DependencyDescription propDep=getTransitiveDependencies(p,includeInheritedProperties,includeCycleTypes,visitedDependendies,dep);
        if (propDep != null && (!propDep.isBackRef() || propDep.isBackRef() && includeCycleTypes))         dependencies.add(propDep);
      }
    }
  }
 else {
    dep.setBackRef(true);
  }
  dep.setDependencies(dependencies);
  return dep;
}",0.937482158150157
6395,"@Check(CheckType.NORMAL) public void checkNoTransitiveNamespaceCycle(final Property p){
  if (p.getType() instanceof VersionedTypeRef) {
    VersionedType targetType=((VersionedTypeRef)p.getType()).getType();
    if (!targetType.eContainer().equals(p.eContainer().eContainer())) {
      DependencyDescription transDepsRoot=boQuery.getTransitiveDependencies(p,true,true,null,null);
      List<DependencyDescription> cycles=new ArrayList<DependencyDescription>();
      boolean hasImport=false;
      for (      DependencyDescription dep : transDepsRoot) {
        VersionedType verType=boQuery.toVersionedType(dep.getTarget(),p.eResource());
        if (!nameProvider.getFullyQualifiedName(p.eContainer().eContainer()).equals(dep.getContainer().getName())) {
          hasImport=true;
        }
        if (hasImport && boQuery.hasTypeNSReferencesToNS(verType,(SubNamespace)p.eContainer().eContainer())) {
          cycles.add(dep);
        }
      }
      if (cycles.iterator().hasNext())       warning(""String_Node_Str"" + p.getName() + ""String_Node_Str"",ServiceDslPackage.Literals.PROPERTY__TYPE);
    }
  }
}","@Check(CheckType.NORMAL) public void checkNoTransitiveNamespaceCycle(final Property p){
  if (p.getType() instanceof VersionedTypeRef) {
    VersionedType targetType=((VersionedTypeRef)p.getType()).getType();
    if (!targetType.eContainer().equals(p.eContainer().eContainer())) {
      DependencyDescription transDepsRoot=boQuery.getTransitiveDependencies(p,true,true,null,null);
      boolean hasTransitImport=false;
      boolean rootVisited=false;
      List<String> foundPaths=new ArrayList<String>();
      for (      DependencyDescription dep : transDepsRoot) {
        if (rootVisited) {
          VersionedType verType=boQuery.toVersionedType(dep.getTarget(),p.eResource());
          if (verType != null) {
            if (!nameProvider.getFullyQualifiedName(p.eContainer().eContainer()).equals(dep.getContainer().getName())) {
              hasTransitImport=true;
            }
            List<QualifiedName> otherTypeNsRefersToNs=boQuery.getOtherTypeNsRefsToNs(verType,(SubNamespace)p.eContainer().eContainer());
            if (hasTransitImport && !otherTypeNsRefersToNs.isEmpty()) {
              StringBuilder msg=new StringBuilder();
              String path=getReferrerDependencyPath(dep,new StringBuilder());
              if (!foundPaths.contains(path)) {
                foundPaths.add(path);
                msg.append(""String_Node_Str"" + p.getName() + ""String_Node_Str"");
                msg.append(path);
                if (otherTypeNsRefersToNs != null && !otherTypeNsRefersToNs.isEmpty()) {
                  msg.append(""String_Node_Str"");
                  msg.append(dep.getContainer().getName().toString());
                  msg.append(""String_Node_Str"");
                  Iterator<QualifiedName> otherTypeNsRefersToNsIt=otherTypeNsRefersToNs.iterator();
                  while (otherTypeNsRefersToNsIt.hasNext()) {
                    QualifiedName name=otherTypeNsRefersToNsIt.next();
                    msg.append(getPropertyShortName(name));
                    if (otherTypeNsRefersToNsIt.hasNext()) {
                      msg.append(""String_Node_Str"");
                    }
                  }
                }
                warning(msg.toString(),ServiceDslPackage.Literals.PROPERTY__TYPE);
              }
            }
          }
        }
 else {
          rootVisited=true;
        }
      }
    }
  }
}",0.4733044733044733
6396,"private void buildDataSources(NamingContextBuilder builder,DataSource[] dataSources){
  for (  DataSource dataSource : dataSources) {
    boolean xa=false;
    for (    Class<?> intf : ClassUtils.getAllInterfacesForClass(dataSource.driverClass())) {
      if (intf == XADataSource.class) {
        xa=true;
        break;
      }
    }
    javax.sql.DataSource ds;
    if (xa) {
      AtomikosDataSourceBean realDs=new AtomikosDataSourceBean();
      realDs.setXaDataSourceClassName(dataSource.driverClass().getName());
      Properties p=new Properties();
      p.setProperty(""String_Node_Str"",dataSource.username());
      p.setProperty(""String_Node_Str"",dataSource.password());
      p.setProperty(""String_Node_Str"",dataSource.url());
      realDs.setXaProperties(p);
      realDs.setPoolSize(1);
      ds=realDs;
    }
 else {
      AtomikosNonXADataSourceBean realDs=new AtomikosNonXADataSourceBean();
      realDs.setDriverClassName(dataSource.driverClass().getName());
      realDs.setUrl(dataSource.url());
      realDs.setUser(dataSource.username());
      realDs.setPassword(dataSource.password());
      ds=realDs;
    }
    builder.bind(dataSource.name(),ds);
  }
}","private void buildDataSources(NamingContextBuilder builder,DataSource[] dataSources){
  for (  DataSource dataSource : dataSources) {
    boolean xa=false;
    for (    Class<?> intf : ClassUtils.getAllInterfacesForClass(dataSource.driverClass())) {
      if (intf == XADataSource.class) {
        xa=true;
        break;
      }
    }
    javax.sql.DataSource ds;
    if (xa) {
      AtomikosDataSourceBean realDs=new AtomikosDataSourceBean();
      realDs.setXaDataSourceClassName(dataSource.driverClass().getName());
      Properties p=new Properties();
      p.setProperty(""String_Node_Str"",dataSource.username());
      p.setProperty(""String_Node_Str"",dataSource.password());
      p.setProperty(""String_Node_Str"",dataSource.url());
      realDs.setXaProperties(p);
      realDs.setPoolSize(1);
      ds=realDs;
    }
 else {
      AtomikosNonXADataSourceBean realDs=new AtomikosNonXADataSourceBean();
      realDs.setDriverClassName(dataSource.driverClass().getName());
      realDs.setUrl(dataSource.url());
      realDs.setUser(dataSource.username());
      realDs.setPassword(dataSource.password());
      realDs.setUniqueResourceName(dataSource.driverClass().getName());
      ds=realDs;
    }
    builder.bind(dataSource.name(),ds);
  }
}",0.9703215169002474
6397,"@Override public void onLoadFinished(final Loader<Cursor> loader,final Cursor data){
  cursorAdapter.swapCursor(data);
}","@Override public void onLoadFinished(final Loader<Cursor> loader,final Cursor data){
  cursorAdapter.swapCursor(data);
synchronized (this) {
    loaded=true;
    for (    Runnable action : actionsOnLoadFinished) {
      action.run();
    }
    actionsOnLoadFinished.clear();
  }
}",0.6
6398,"@Override public void onLoaderReset(final Loader<Cursor> loader){
  cursorAdapter.swapCursor(null);
}","@Override public void onLoaderReset(final Loader<Cursor> loader){
  cursorAdapter.swapCursor(null);
synchronized (this) {
    loaded=false;
  }
}",0.8211382113821138
6399,"private void startEditingItem(final long id){
  if (todoItemsStorage != null) {
    closeDrawer();
    lockDrawer();
    editingItem=todoItemsStorage.loadTodoItem(id);
    getEditSummaryWidget().setText(editingItem.summary);
    getEditBodyWidget().setText(editingItem.body);
    final Spinner spinner=getEditItemTagsWidget();
    final int position=Util.getItemPosition(editingItemTagsAdapter,editingItem.tagID);
    if (position != -1)     spinner.setSelection(position);
    getPrioSliderButton().setSelection(editingItem.prio - 1);
    getProgressSliderButton().setSelection(editingItem.getProgress() / 10);
    updateDueDateButton();
    getSlidingView().setSlideListener(new SlidingView.SlideListener(){
      public void slidingFinished(){
        final EditText editText=getEditBodyWidget();
        if (editingItem.caretPos != null) {
          final Editable text=editText.getText();
          final int savedCaretPos=editingItem.caretPos;
          if (savedCaretPos >= 0 && savedCaretPos < text.length())           Selection.setSelection(text,savedCaretPos);
        }
        editText.requestFocus();
      }
    }
);
  }
}","private void startEditingItem(final long id){
  if (todoItemsStorage != null) {
    closeDrawer();
    lockDrawer();
    editingItem=todoItemsStorage.loadTodoItem(id);
    getEditSummaryWidget().setText(editingItem.summary);
    getEditBodyWidget().setText(editingItem.body);
    editingItemTagsLoaderCallbacks.addOnLoadFinishedAction(new Runnable(){
      @Override public void run(){
        final Spinner spinner=getEditItemTagsWidget();
        final int position=Util.getItemPosition(editingItemTagsAdapter,editingItem.tagID);
        if (position != -1)         spinner.setSelection(position);
 else         Log.w(TAG,""String_Node_Str"" + editingItem.tagID);
      }
    }
);
    getPrioSliderButton().setSelection(editingItem.prio - 1);
    getProgressSliderButton().setSelection(editingItem.getProgress() / 10);
    updateDueDateButton();
    getSlidingView().setSlideListener(new SlidingView.SlideListener(){
      public void slidingFinished(){
        final EditText editText=getEditBodyWidget();
        if (editingItem.caretPos != null) {
          final Editable text=editText.getText();
          final int savedCaretPos=editingItem.caretPos;
          if (savedCaretPos >= 0 && savedCaretPos < text.length())           Selection.setSelection(text,savedCaretPos);
        }
        editText.requestFocus();
      }
    }
);
  }
}",0.9164985881403792
6400,"/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (TRACE)   Debug.startMethodTracing(""String_Node_Str"");
  setContentView(R.layout.main);
  handler=new Handler();
  todoItemsStorage=new TodoItemsStorage(this);
  todoItemsStorage.open();
  tagsStorage=new TagsStorage(this);
  tagsStorage.open();
  tagsAdapter=Util.createTagsAdapter(this,null,R.layout.tag_list_item);
  tagsAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  editingItemTagsAdapter=Util.createTagsAdapter(this,null,android.R.layout.simple_spinner_item);
  editingItemTagsAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  getEditItemTagsWidget().setAdapter(editingItemTagsAdapter);
  setupDrawer();
  final SharedPreferences preferences=getPreferences(Activity.MODE_PRIVATE);
  final long currentTag;
  final Intent intent=getIntent();
  Integer tagId=extractTagIdFromIntent(intent);
  currentTag=tagId != null ? tagId : preferences.getLong(""String_Node_Str"",DBHelper.ALL_TAGS_METATAG_ID);
  hidingCompleted=preferences.getBoolean(""String_Node_Str"",false);
  setDefaultDue(preferences.getLong(""String_Node_Str"",-1));
  setDefaultPrio(preferences.getInt(""String_Node_Str"",1));
  sortingMode=TodoItemsSortingMode.fromOrdinal(preferences.getInt(""String_Node_Str"",TodoItemsSortingMode.PRIO_DUE_SUMMARY.ordinal()));
  setupFirstScreenWidgets();
  setupSecondScreenWidgets();
  registerForContextMenu(getMyListView());
  setupVoiceRecognition();
  setupAddButtonIcon();
  updateTitle();
  setResult(Activity.RESULT_OK);
  allTagsLoaderCallbacks=new AllTagsLoaderCallbacks(this,tagsAdapter);
  currentTagItemsLoaderCallbacks=new CurrentTagItemsLoaderCallbacks(this);
  editingItemTagsLoaderCallbacks=new EditingItemTagsLoaderCallbacks(this,editingItemTagsAdapter);
  final LoaderManager loaderManager=getLoaderManager();
  loaderManager.initLoader(ALL_TAGS_LOADER_ID,null,allTagsLoaderCallbacks);
  loaderManager.initLoader(CURRENT_TAG_ITEMS_LOADER_ID,null,currentTagItemsLoaderCallbacks);
  loaderManager.initLoader(EDITING_ITEM_TAGS_LOADER_ID,null,editingItemTagsLoaderCallbacks);
  setCurrentTag(currentTag);
  getApplicationContext().getContentResolver().registerContentObserver(TodoItemsStorage.CHANGE_NOTIFICATION_URI,false,contentObserver);
  getApplicationContext().getContentResolver().registerContentObserver(TagsStorage.CHANGE_NOTIFICATION_URI,false,contentObserver);
  runIntent(intent);
}","/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (TRACE)   Debug.startMethodTracing(""String_Node_Str"");
  setContentView(R.layout.main);
  handler=new Handler();
  todoItemsStorage=new TodoItemsStorage(this);
  todoItemsStorage.open();
  tagsStorage=new TagsStorage(this);
  tagsStorage.open();
  tagsAdapter=Util.createTagsAdapter(this,null,R.layout.tag_list_item);
  tagsAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  editingItemTagsAdapter=Util.createTagsAdapter(this,null,android.R.layout.simple_spinner_item);
  editingItemTagsAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  getEditItemTagsWidget().setAdapter(editingItemTagsAdapter);
  setupDrawer();
  final SharedPreferences preferences=getPreferences(Activity.MODE_PRIVATE);
  final long currentTag;
  final Intent intent=getIntent();
  Integer tagId=extractTagIdFromIntent(intent);
  currentTag=tagId != null ? tagId : preferences.getLong(""String_Node_Str"",DBHelper.ALL_TAGS_METATAG_ID);
  hidingCompleted=preferences.getBoolean(""String_Node_Str"",false);
  setDefaultDue(preferences.getLong(""String_Node_Str"",-1));
  setDefaultPrio(preferences.getInt(""String_Node_Str"",1));
  sortingMode=TodoItemsSortingMode.fromOrdinal(preferences.getInt(""String_Node_Str"",TodoItemsSortingMode.PRIO_DUE_SUMMARY.ordinal()));
  setupFirstScreenWidgets();
  setupSecondScreenWidgets();
  registerForContextMenu(getMyListView());
  setupVoiceRecognition();
  setupAddButtonIcon();
  updateTitle();
  setResult(Activity.RESULT_OK);
  allTagsLoaderCallbacks=new AllTagsLoaderCallbacks(this,tagsAdapter);
  currentTagItemsLoaderCallbacks=new CurrentTagItemsLoaderCallbacks(this);
  editingItemTagsLoaderCallbacks=new EditingItemTagsLoaderCallbacks(this,editingItemTagsAdapter);
  final LoaderManager loaderManager=getLoaderManager();
  loaderManager.initLoader(ALL_TAGS_LOADER_ID,null,allTagsLoaderCallbacks);
  loaderManager.initLoader(CURRENT_TAG_ITEMS_LOADER_ID,null,currentTagItemsLoaderCallbacks);
  loaderManager.initLoader(EDITING_ITEM_TAGS_LOADER_ID,null,editingItemTagsLoaderCallbacks);
  setCurrentTag(currentTag);
  final ContentResolver contentResolver=getApplicationContext().getContentResolver();
  contentResolver.registerContentObserver(TodoItemsStorage.CHANGE_NOTIFICATION_URI,false,contentObserver);
  contentResolver.registerContentObserver(TagsStorage.CHANGE_NOTIFICATION_URI,false,contentObserver);
  runIntent(intent);
}",0.982738328756375
6401,"@Override public boolean onTouchEvent(final MotionEvent ev){
  if (replaying || (deleteItemListener == null && slideLeftListener == null))   return super.onTouchEvent(ev);
  if (state == State.ITEM_FLYING) {
    if (dragItemNum != pointToPositionWithInvisible((int)(ev.getX()),(int)(ev.getY())))     return true;
  }
  boolean processed=false;
switch (ev.getAction()) {
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
    processed=processUpEvent();
  break;
case MotionEvent.ACTION_DOWN:
if (scrolling) break;
processed=processDownEvent(ev);
break;
case MotionEvent.ACTION_MOVE:
if (scrolling) break;
processed=processMoveEvent(ev);
break;
}
if (processed) {
if (state != State.DRAGGING_ITEM) intercepted.add(MotionEvent.obtain(ev));
return true;
}
 else if (intercepted.size() > 0) {
replaying=true;
try {
for (final MotionEvent event : intercepted) {
super.dispatchTouchEvent(event);
}
return super.onTouchEvent(ev);
}
 catch (Exception e) {
Log.i(TAG,""String_Node_Str"" + ev + ""String_Node_Str""+ e);
}
 finally {
replaying=false;
intercepted.clear();
}
return true;
}
 else try {
return super.onTouchEvent(ev);
}
 catch (Exception e) {
Log.i(TAG,""String_Node_Str"" + ev + ""String_Node_Str""+ e);
return true;
}
}","@Override public boolean onTouchEvent(final MotionEvent ev){
  if (replaying || (deleteItemListener == null && slideLeftListener == null))   return super.onTouchEvent(ev);
  if (state == State.ITEM_FLYING) {
    if (dragItemNum != pointToPositionWithInvisible((int)(ev.getX()),(int)(ev.getY())))     return true;
  }
  boolean processed=false;
switch (ev.getAction()) {
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
    processed=processUpEvent();
  break;
case MotionEvent.ACTION_DOWN:
if (scrolling) break;
processed=processDownEvent(ev);
break;
case MotionEvent.ACTION_MOVE:
if (scrolling) break;
processed=processMoveEvent(ev);
break;
}
if (processed) {
return true;
}
 else if (intercepted.size() > 0) {
replaying=true;
try {
for (final MotionEvent event : intercepted) {
super.dispatchTouchEvent(event);
}
return super.onTouchEvent(ev);
}
 catch (Exception e) {
Log.i(TAG,""String_Node_Str"" + ev + ""String_Node_Str""+ e);
}
 finally {
replaying=false;
intercepted.clear();
}
return true;
}
 else try {
return super.onTouchEvent(ev);
}
 catch (Exception e) {
Log.i(TAG,""String_Node_Str"" + ev + ""String_Node_Str""+ e);
return true;
}
}",0.968421052631579
6402,"private boolean processMoveEvent(final MotionEvent ev){
  final int x=(int)ev.getX();
  final int y=(int)ev.getY();
  final int rawX=(int)ev.getRawX();
  final int off;
  boolean processed=false;
switch (state) {
case DRAGGING_ITEM:
    dragVelocityTracker.addMovement(ev,false);
  off=x - dragPointX + coordOffsetX;
if (off < 0 && slideLeftListener != null) {
  setState(State.DRAGGING_VIEW_LEFT);
  slideLeftListener.slideLeftStarted(getItemIdAtPosition(dragItemNum));
}
 else {
  dragView(x);
}
processed=true;
break;
case DRAGGING_VIEW_LEFT:
dragVelocityTracker.addMovement(ev,true);
off=dragPointX - rawX;
if (off < 0) {
slideLeft(0);
if (startPreDragging(ev)) setState(State.DRAGGING_ITEM);
 else setState(State.NORMAL);
}
 else {
slideLeft(off);
}
processed=true;
break;
default :
final int deltaXFromDown=x - dragStartX;
final int deltaYFromDown=y - dragStartY;
if (deltaYFromDown >= scaledTouchSlop) scrolling=true;
final int itemnum=pointToPositionWithInvisible(x,y);
if (!scrolling) {
dragVelocityTracker.addMovement(ev,false);
if (state == State.PRESSED_ON_ITEM && itemInBounds(dragItemNum) && deltaXFromDown > scaledTouchSlop && deleteItemListener != null) {
setState(State.DRAGGING_ITEM);
processed=true;
}
 else if (state == State.PRESSED_ON_ITEM && deltaXFromDown < -scaledTouchSlop && slideLeftListener != null && itemnum != AdapterView.INVALID_POSITION) {
setState(State.DRAGGING_VIEW_LEFT);
dragPointX=x;
slideLeftListener.slideLeftStarted(getItemIdAtPosition(itemnum));
processed=true;
}
}
}
return processed;
}","private boolean processMoveEvent(final MotionEvent ev){
  final int x=(int)ev.getX();
  final int y=(int)ev.getY();
  final int rawX=(int)ev.getRawX();
  final int off;
  boolean processed=false;
switch (state) {
case DRAGGING_ITEM:
    dragVelocityTracker.addMovement(ev,false);
  off=x - dragPointX + coordOffsetX;
if (off < 0 && slideLeftListener != null) {
  setState(State.DRAGGING_VIEW_LEFT);
  slideLeftListener.slideLeftStarted(getItemIdAtPosition(dragItemNum));
}
 else {
  dragView(x);
}
processed=true;
break;
case DRAGGING_VIEW_LEFT:
dragVelocityTracker.addMovement(ev,true);
off=dragPointX - rawX;
if (off < 0) {
slideLeft(0);
if (startPreDragging(ev)) setState(State.DRAGGING_ITEM);
 else setState(State.NORMAL);
}
 else {
slideLeft(off);
}
processed=true;
break;
default :
final int deltaXFromDown=x - dragStartX;
final int deltaYFromDown=y - dragStartY;
if (deltaYFromDown >= scaledTouchSlop) scrolling=true;
final int itemnum=pointToPositionWithInvisible(x,y);
if (!scrolling) {
dragVelocityTracker.addMovement(ev,false);
if (state == State.PRESSED_ON_ITEM && itemInBounds(dragItemNum) && deltaXFromDown > scaledTouchSlop && deleteItemListener != null) {
setState(State.DRAGGING_ITEM);
}
 else if (state == State.PRESSED_ON_ITEM && deltaXFromDown < -scaledTouchSlop && slideLeftListener != null && itemnum != AdapterView.INVALID_POSITION) {
setState(State.DRAGGING_VIEW_LEFT);
dragPointX=x;
slideLeftListener.slideLeftStarted(getItemIdAtPosition(itemnum));
}
processed=true;
}
}
return processed;
}",0.9816152330925804
6403,"public void slidingFinished(){
  final EditText editText=getEditBodyWidget();
  if (editingItem.caretPos != null) {
    final Editable text=editText.getText();
    Selection.setSelection(text,editingItem.caretPos);
  }
  editText.requestFocus();
}","public void slidingFinished(){
  final EditText editText=getEditBodyWidget();
  if (editingItem.caretPos != null) {
    final Editable text=editText.getText();
    final int savedCaretPos=editingItem.caretPos;
    if (savedCaretPos >= 0 && savedCaretPos < text.length())     Selection.setSelection(text,savedCaretPos);
  }
  editText.requestFocus();
}",0.782608695652174
6404,"private void startEditingItem(final long id){
  editingItem=todoItemsStorage.loadTodoItem(id);
  getEditSummaryWidget().setText(editingItem.summary);
  getEditBodyWidget().setText(editingItem.body);
  if (edititgItemTagsCursor != null)   edititgItemTagsCursor.close();
  edititgItemTagsCursor=tagsStorage.getAllTagsExceptCursor(DBHelper.ALL_TAGS_METATAG_ID);
  startManagingCursor(edititgItemTagsCursor);
  final SimpleCursorAdapter editingItemTagsAdapter=Util.createTagsAdapter(this,edititgItemTagsCursor,android.R.layout.simple_spinner_item);
  editingItemTagsAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  final Spinner spinner=getEditItemTagsWidget();
  spinner.setAdapter(editingItemTagsAdapter);
  final int position=Util.getItemPosition(editingItemTagsAdapter,editingItem.tagID);
  if (position != -1)   spinner.setSelection(position);
  getPrioSliderButton().setSelection(editingItem.prio - 1);
  getProgressSliderButton().setSelection(editingItem.getProgress() / 10);
  updateDueDateButton();
  getSlidingView().setSlideListener(new SlidingView.SlideListener(){
    public void slidingFinished(){
      final EditText editText=getEditBodyWidget();
      if (editingItem.caretPos != null) {
        final Editable text=editText.getText();
        Selection.setSelection(text,editingItem.caretPos);
      }
      editText.requestFocus();
    }
  }
);
}","private void startEditingItem(final long id){
  editingItem=todoItemsStorage.loadTodoItem(id);
  getEditSummaryWidget().setText(editingItem.summary);
  getEditBodyWidget().setText(editingItem.body);
  if (edititgItemTagsCursor != null)   edititgItemTagsCursor.close();
  edititgItemTagsCursor=tagsStorage.getAllTagsExceptCursor(DBHelper.ALL_TAGS_METATAG_ID);
  startManagingCursor(edititgItemTagsCursor);
  final SimpleCursorAdapter editingItemTagsAdapter=Util.createTagsAdapter(this,edititgItemTagsCursor,android.R.layout.simple_spinner_item);
  editingItemTagsAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  final Spinner spinner=getEditItemTagsWidget();
  spinner.setAdapter(editingItemTagsAdapter);
  final int position=Util.getItemPosition(editingItemTagsAdapter,editingItem.tagID);
  if (position != -1)   spinner.setSelection(position);
  getPrioSliderButton().setSelection(editingItem.prio - 1);
  getProgressSliderButton().setSelection(editingItem.getProgress() / 10);
  updateDueDateButton();
  getSlidingView().setSlideListener(new SlidingView.SlideListener(){
    public void slidingFinished(){
      final EditText editText=getEditBodyWidget();
      if (editingItem.caretPos != null) {
        final Editable text=editText.getText();
        final int savedCaretPos=editingItem.caretPos;
        if (savedCaretPos >= 0 && savedCaretPos < text.length())         Selection.setSelection(text,savedCaretPos);
      }
      editText.requestFocus();
    }
  }
);
}",0.9089655172413792
6405,"@Override public boolean onTouchEvent(final MotionEvent ev){
  if (replaying || deleteItemListener == null)   return super.onTouchEvent(ev);
  boolean processed=false;
switch (ev.getAction()) {
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
    processed=processUpEvent();
  break;
case MotionEvent.ACTION_DOWN:
if (scrolling) break;
processed=processDownEvent(ev);
break;
case MotionEvent.ACTION_MOVE:
if (scrolling) break;
processed=processMoveEvent(ev);
break;
}
if (processed) {
if (!(state == State.DRAGGING_ITEM)) intercepted.add(ev);
return true;
}
 else if (intercepted.size() > 0) {
replaying=true;
try {
for (final MotionEvent event : intercepted) {
super.dispatchTouchEvent(event);
}
}
 catch (Exception e) {
}
replaying=false;
intercepted.clear();
}
return super.onTouchEvent(ev);
}","@Override public boolean onTouchEvent(final MotionEvent ev){
  if (replaying || deleteItemListener == null)   return super.onTouchEvent(ev);
  boolean processed=false;
switch (ev.getAction()) {
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
    processed=processUpEvent();
  break;
case MotionEvent.ACTION_DOWN:
if (scrolling) break;
processed=processDownEvent(ev);
break;
case MotionEvent.ACTION_MOVE:
if (scrolling) break;
processed=processMoveEvent(ev);
break;
}
if (processed) {
if (!(state == State.DRAGGING_ITEM)) intercepted.add(ev);
return true;
}
 else if (intercepted.size() > 0) {
replaying=true;
try {
for (final MotionEvent event : intercepted) {
super.dispatchTouchEvent(event);
}
return super.onTouchEvent(ev);
}
 catch (Exception e) {
}
 finally {
replaying=false;
intercepted.clear();
}
return true;
}
 else return super.onTouchEvent(ev);
}",0.9564698867024448
6406,"@Override public boolean onTouchEvent(final MotionEvent ev){
  if (replaying || deleteItemListener == null)   return super.onTouchEvent(ev);
  boolean processed=false;
switch (ev.getAction()) {
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
    processed=processUpEvent();
  break;
case MotionEvent.ACTION_DOWN:
if (scrolling) break;
processed=processDownEvent(ev);
break;
case MotionEvent.ACTION_MOVE:
if (scrolling) break;
processed=processMoveEvent(ev);
break;
}
if (processed) {
if (!(state == State.DRAGGING_ITEM)) intercepted.add(ev);
return true;
}
 else if (intercepted.size() > 0) {
replaying=true;
for (final MotionEvent event : intercepted) {
try {
super.dispatchTouchEvent(event);
}
 catch (ArrayIndexOutOfBoundsException e) {
}
}
replaying=false;
intercepted.clear();
}
return super.onTouchEvent(ev);
}","@Override public boolean onTouchEvent(final MotionEvent ev){
  if (replaying || deleteItemListener == null)   return super.onTouchEvent(ev);
  boolean processed=false;
switch (ev.getAction()) {
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
    processed=processUpEvent();
  break;
case MotionEvent.ACTION_DOWN:
if (scrolling) break;
processed=processDownEvent(ev);
break;
case MotionEvent.ACTION_MOVE:
if (scrolling) break;
processed=processMoveEvent(ev);
break;
}
if (processed) {
if (!(state == State.DRAGGING_ITEM)) intercepted.add(ev);
return true;
}
 else if (intercepted.size() > 0) {
replaying=true;
try {
for (final MotionEvent event : intercepted) {
super.dispatchTouchEvent(event);
}
}
 catch (Exception e) {
}
replaying=false;
intercepted.clear();
}
return super.onTouchEvent(ev);
}",0.8758409785932721
6407,"@Override public boolean handleLongClick(){
  if (!mEditorView.scaleDetectorActive()) {
    mTweetFlow.addServiceRequest(mEditorView.getLastTouchX(),mEditorView.getLastTouchY());
    mEditorView.redraw();
  }
  return true;
}","@Override public boolean handleLongClick(){
  if (!mEditorView.scaleDetectorActive()) {
    mTweetFlow.addServiceRequest(mEditorView.scaledLastX(),mEditorView.scaledLastY());
    mEditorView.redraw();
  }
  return true;
}",0.937219730941704
6408,"public void checkMaybeConnections(AbstractElement candidate){
  final int offX=getMiddleX() - candidate.getMiddleX();
  if (Math.abs(offX) < TweetFlow.DISTANCE_FOR_AUTO_CONNECTION_X) {
    if (mClosedSequenceNext == null && candidate.mClosedSequencePrev == null) {
      final int offY=candidate.getTopY() - getBotY();
      if (offY > 0 && offY < TweetFlow.DISTANCE_FOR_AUTO_CONNECTION_Y) {
        mClosedSequenceMaybeNext=candidate;
      }
    }
    if (candidate.mClosedSequenceNext == null && mClosedSequencePrev == null) {
      final int offY=getTopY() - candidate.getBotY();
      if (offY > 0 && offY < TweetFlow.DISTANCE_FOR_AUTO_CONNECTION_Y) {
        candidate.mClosedSequenceMaybeNext=this;
      }
    }
  }
}","public void checkMaybeConnections(AbstractElement candidate){
  final int offX=getMiddleX() - candidate.getMiddleX();
  if (Math.abs(offX) < TweetFlow.DISTANCE_FOR_AUTO_CONNECTION_X) {
    if (mClosedSequenceNext == null && candidate.mClosedSequencePrev == null) {
      final int offY=candidate.getTopY() - getBotY();
      if (offY > 0 && offY < TweetFlow.DISTANCE_FOR_AUTO_CONNECTION_Y && mClosedSequenceMaybeNext == null) {
        mClosedSequenceMaybeNext=candidate;
        candidate.mClosedSequenceMaybePrev=this;
      }
    }
    if (candidate.mClosedSequenceNext == null && mClosedSequencePrev == null) {
      final int offY=getTopY() - candidate.getBotY();
      if (offY > 0 && offY < TweetFlow.DISTANCE_FOR_AUTO_CONNECTION_Y && mClosedSequenceMaybePrev == null) {
        mClosedSequenceMaybePrev=candidate;
        candidate.mClosedSequenceMaybeNext=this;
      }
    }
  }
}",0.7975232198142415
6409,"public void setClosedSequencePrev(AbstractElement mClosedSequencePrev){
  this.mClosedSequencePrev=mClosedSequencePrev;
}","public void setClosedSequencePrev(AbstractElement closedSequencePrev){
  if (closedSequencePrev != null) {
    mClosedSequencePrev=closedSequencePrev;
    closedSequencePrev.mClosedSequenceNext=this;
  }
}",0.5460122699386503
6410,"public void resetMaybeConnections(){
  mClosedSequenceMaybeNext=null;
}","public void resetMaybeConnections(){
  mClosedSequenceMaybeNext=null;
  mClosedSequenceMaybePrev=null;
}",0.8114285714285714
6411,"public ArrayList<Integer> createRasterLines(){
  ArrayList<Integer> gridLines=new ArrayList<Integer>();
  for (int i=0; i < horizontalRasterCT; i++) {
    gridLines.add((Integer)(i * RASTER_HORIZONTAL_WIDTH - RASTER_HORIZONTAL_WIDTH / 2 + mOffsetX % RASTER_HORIZONTAL_WIDTH - mOffsetX));
  }
  return gridLines;
}","public ArrayList<Integer> createRasterLines(){
  float scale=editorView.getmScaleFactor();
  ArrayList<Integer> gridLines=new ArrayList<Integer>();
  for (int i=0; i < horizontalRasterCT / scale; i++) {
    gridLines.add((Integer)(i * RASTER_HORIZONTAL_WIDTH - RASTER_HORIZONTAL_WIDTH / 2 + mOffsetX % RASTER_HORIZONTAL_WIDTH - mOffsetX));
  }
  return gridLines;
}",0.9233038348082596
6412,"private void prepareListView(){
  ListView lv=(ListView)findViewById(R.id.home_file_list);
  LayoutInflater inflator=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View emptyView=inflator.inflate(R.layout.filelist_empty,null);
  ((ViewGroup)lv.getParent()).addView(emptyView);
  lv.setEmptyView(emptyView);
  lv.setAdapter(mFileListAdapter);
  lv.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final File file=(File)parent.getItemAtPosition(position);
      Intent i=new Intent(Home.this,Editor.class);
      i.putExtra(Editor.OPEN_FILE,file.getName());
      Home.this.startActivity(i);
    }
  }
);
  lv.setOnItemLongClickListener(new OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final File file=(File)parent.getItemAtPosition(position);
      Toast.makeText(Home.this,""String_Node_Str"" + file.getName(),Toast.LENGTH_SHORT).show();
      return true;
    }
  }
);
}","private void prepareListView(){
  ListView lv=(ListView)findViewById(R.id.home_file_list);
  LayoutInflater inflator=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View emptyView=inflator.inflate(R.layout.filelist_empty,null);
  ((ViewGroup)lv.getParent()).addView(emptyView);
  lv.setEmptyView(emptyView);
  lv.setAdapter(mFileListAdapter);
  lv.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final File file=(File)parent.getItemAtPosition(position);
      Intent i=new Intent(Home.this,Editor.class);
      i.putExtra(Editor.OPEN_FILE,file.getName());
      Home.this.startActivity(i);
    }
  }
);
  lv.setOnItemLongClickListener(new OnItemLongClickListener(){
    public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final File file=(File)parent.getItemAtPosition(position);
      Toast.makeText(Home.this,""String_Node_Str"" + file.getName(),Toast.LENGTH_SHORT).show();
      return true;
    }
  }
);
}",0.9909173478655768
6413,"@Override public boolean onItemLongClick(AdapterView<?> parent,View view,int position,long id){
  final File file=(File)parent.getItemAtPosition(position);
  Toast.makeText(Home.this,""String_Node_Str"" + file.getName(),Toast.LENGTH_SHORT).show();
  return true;
}","public boolean onItemLongClick(AdapterView<?> parent,View view,int position,long id){
  final File file=(File)parent.getItemAtPosition(position);
  Toast.makeText(Home.this,""String_Node_Str"" + file.getName(),Toast.LENGTH_SHORT).show();
  return true;
}",0.980544747081712
6414,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  final File file=(File)parent.getItemAtPosition(position);
  Intent i=new Intent(Home.this,Editor.class);
  i.putExtra(Editor.OPEN_FILE,file.getName());
  Home.this.startActivity(i);
}","public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  final File file=(File)parent.getItemAtPosition(position);
  Intent i=new Intent(Home.this,Editor.class);
  i.putExtra(Editor.OPEN_FILE,file.getName());
  Home.this.startActivity(i);
}",0.9814126394052044
6415,"public void draw(Canvas canvas){
  if (rasterOn) {
    horizontalRasterCT=(canvas.getWidth() / RASTER_HORIZONTAL_WIDTH) + 3;
    Paint paint=new Paint();
    paint.setPathEffect(new DashPathEffect(new float[]{10,3,6,3},1));
    if ((snapMode == SnapMode.NOTHING) || (snapMode == SnapMode.RASTER)) {
      paint.setColor(Color.BLUE);
      ArrayList<Integer> gridLines=createRasterLines();
      for (int i=0; i < gridLines.size(); i++) {
        canvas.drawLine(gridLines.get(i),0 - mOffsetY,gridLines.get(i),canvas.getHeight() - mOffsetY,paint);
      }
    }
    if (snapMode == SnapMode.GRID) {
      paint.setColor(Color.RED);
      for (      AbstractElement e : tweetFlow.getmElements().values()) {
        if (e instanceof ServiceRequest) {
          canvas.drawLine(e.getMiddleX(),0 - mOffsetY,e.getMiddleX(),canvas.getHeight() - mOffsetY,paint);
        }
      }
    }
  }
}","public void draw(Canvas canvas){
  if (rasterOn) {
    horizontalRasterCT=(canvas.getWidth() / RASTER_HORIZONTAL_WIDTH) + 3;
    Paint paint=new Paint();
    paint.setPathEffect(new DashPathEffect(new float[]{10,3,6,3},1));
    float scale=editorView.getmScaleFactor();
    if ((snapMode == SnapMode.NOTHING) || (snapMode == SnapMode.RASTER)) {
      paint.setColor(Color.BLUE);
      ArrayList<Integer> gridLines=createRasterLines();
      for (int i=0; i < gridLines.size(); i++) {
        canvas.drawLine(gridLines.get(i),(int)((0 - mOffsetY) / scale),gridLines.get(i),(int)((canvas.getHeight() - mOffsetY) / scale),paint);
      }
    }
    if (snapMode == SnapMode.GRID) {
      paint.setColor(Color.RED);
      for (      AbstractElement e : tweetFlow.getmElements().values()) {
        if (e instanceof ServiceRequest) {
          canvas.drawLine(e.getMiddleX(),(int)((0 - mOffsetY) / scale),e.getMiddleX(),(int)((canvas.getHeight() - mOffsetY) / scale),paint);
        }
      }
    }
  }
}",0.9394261424017004
6416,"public boolean isThereGridHorizontal(){
  int x=tweetFlow.getTouchElement().getMiddleX();
  int xDiff=Integer.MAX_VALUE;
  for (  AbstractElement e : tweetFlow.getmElements().values()) {
    if (e instanceof ServiceRequest) {
      if (tweetFlow.getTouchElement().getId() != e.getId()) {
        if ((Math.abs(x - e.getMiddleX())) < xDiff) {
          xDiff=Math.abs(x - e.getMiddleX());
        }
      }
    }
  }
  if (xDiff < 15)   return true;
  return false;
}","public boolean isThereGridHorizontal(){
  int x=tweetFlow.getTouchElement().getMiddleX();
  int xDiff=Integer.MAX_VALUE;
  for (  AbstractElement e : tweetFlow.getmElements().values()) {
    if (e instanceof ServiceRequest) {
      if (tweetFlow.getTouchElement().getId() != e.getId()) {
        if ((Math.abs(x - e.getMiddleX())) < xDiff) {
          xDiff=Math.abs(x - e.getMiddleX());
        }
      }
    }
  }
  if (xDiff < 30)   return true;
  return false;
}",0.9957081545064378
6417,"public RasterGridHelper(TweetFlow tweetFlow,Integer mOffsetX,Integer mOffsetY){
  this.mOffsetX=mOffsetX;
  this.mOffsetY=mOffsetY;
  this.tweetFlow=tweetFlow;
}","public RasterGridHelper(TweetFlow tweetFlow,Integer mOffsetX,Integer mOffsetY,EditorView editorView){
  this.mOffsetX=mOffsetX;
  this.mOffsetY=mOffsetY;
  this.tweetFlow=tweetFlow;
  this.editorView=editorView;
}",0.8609625668449198
6418,"public void onActionDown(MotionEvent event){
  super.onActionDown(event);
  final int x=(int)event.getX();
  final int y=(int)event.getY();
  if (mTweetFlow.elementAt(mEditorView.scaledX(x),mEditorView.scaledY(y))) {
    mTweetFlow.setTouchElementModeMarked();
    mEditorView.setState(EDITOR_STATE.TOUCH_ELEMENT);
    mEditorView.redraw();
  }
 else   if (rasterGridHelper.getRasterOn() && rasterGridHelper.getSnapMode() == SnapMode.GRID && rasterGridHelper.isTouchOnGrid(x)) {
    mEditorView.setState(EDITOR_STATE.MOVE_GRID);
    mEditorView.redraw();
  }
 else {
    mEditorView.setState(EDITOR_STATE.TOUCH_VOID);
  }
  mEditorView.setLastTouch(x,y);
}","public void onActionDown(MotionEvent event){
  super.onActionDown(event);
  final int x=(int)event.getX();
  final int y=(int)event.getY();
  if (mTweetFlow.elementAt(mEditorView.scaledX(x),mEditorView.scaledY(y))) {
    mTweetFlow.setTouchElementModeMarked();
    mEditorView.setState(EDITOR_STATE.TOUCH_ELEMENT);
    mEditorView.redraw();
  }
 else   if (rasterGridHelper.getRasterOn() && rasterGridHelper.getSnapMode() == SnapMode.GRID && rasterGridHelper.isTouchOnGrid(mEditorView.scaledX(x))) {
    mEditorView.setState(EDITOR_STATE.MOVE_GRID);
    mEditorView.redraw();
  }
 else {
    mEditorView.setState(EDITOR_STATE.TOUCH_VOID);
  }
  mEditorView.setLastTouch(x,y);
}",0.9842460615153787
6419,"public void onActionMove(MotionEvent event){
  final int pointerIndex=event.findPointerIndex(mEditorView.getActivePointerId());
  final int x=(int)event.getX(pointerIndex);
  final int y=(int)event.getY(pointerIndex);
  if (!mEditorView.scaleDetectorActive()) {
    final int offX=x - mEditorView.getLastTouchX();
    final int offY=y - mEditorView.getLastTouchY();
    mTweetFlow.moveTouchElement(offX,offY);
    mEditorView.redraw();
  }
  mEditorView.setLastTouch(x,y);
}","public void onActionMove(MotionEvent event){
  final int pointerIndex=event.findPointerIndex(mEditorView.getActivePointerId());
  final int x=(int)event.getX(pointerIndex);
  final int y=(int)event.getY(pointerIndex);
  if (!mEditorView.scaleDetectorActive()) {
    final int offX=x - mEditorView.getLastTouchX();
    final int offY=y - mEditorView.getLastTouchY();
    float scale=mEditorView.getmScaleFactor();
    mTweetFlow.moveTouchElement((int)(offX / scale),(int)(offY / scale));
    mEditorView.redraw();
  }
  mEditorView.setLastTouch(x,y);
}",0.9248780487804878
6420,"public void onActionMove(MotionEvent event){
  final int pointerIndex=event.findPointerIndex(mEditorView.getActivePointerId());
  final int x=(int)event.getX(pointerIndex);
  final int y=(int)event.getY(pointerIndex);
  if (!isRunning) {
    int xGrid=rasterGridHelper.getTouchOnGrid(mEditorView.getLastTouchX());
    gridElements=rasterGridHelper.getElementsOnGrid(xGrid);
    isRunning=true;
  }
  if (!mEditorView.scaleDetectorActive()) {
    final int offX=x - mEditorView.getLastTouchX();
    final int offY=y - mEditorView.getLastTouchY();
    mTweetFlow.moveGridElements(gridElements,offX,offY);
    mEditorView.redraw();
  }
  mEditorView.setLastTouch(x,y);
}","public void onActionMove(MotionEvent event){
  final int pointerIndex=event.findPointerIndex(mEditorView.getActivePointerId());
  final int x=(int)event.getX(pointerIndex);
  final int y=(int)event.getY(pointerIndex);
  if (!isRunning) {
    int xGrid=rasterGridHelper.getTouchOnGrid(mEditorView.scaledX(mEditorView.getLastTouchX()));
    gridElements=rasterGridHelper.getElementsOnGrid(xGrid);
    isRunning=true;
  }
  if (!mEditorView.scaleDetectorActive()) {
    final int offX=x - mEditorView.getLastTouchX();
    final int offY=y - mEditorView.getLastTouchY();
    float scale=mEditorView.getmScaleFactor();
    mTweetFlow.moveGridElements(gridElements,(int)(offX / scale),(int)(offY / scale));
    mEditorView.redraw();
  }
  mEditorView.setLastTouch(x,y);
}",0.9315642458100558
6421,"public void onActionMove(MotionEvent event){
  final int pointerIndex=event.findPointerIndex(mEditorView.getActivePointerId());
  final int x=(int)event.getX(pointerIndex);
  final int y=(int)event.getY(pointerIndex);
  if (!mEditorView.scaleDetectorActive()) {
    final int offX=x - mEditorView.getLastTouchX();
    final int offY=y - mEditorView.getLastTouchY();
    mTweetFlow.moveSelected(offX,offY);
    mEditorView.redraw();
  }
  mEditorView.setLastTouch(x,y);
}","public void onActionMove(MotionEvent event){
  final int pointerIndex=event.findPointerIndex(mEditorView.getActivePointerId());
  final int x=(int)event.getX(pointerIndex);
  final int y=(int)event.getY(pointerIndex);
  if (!mEditorView.scaleDetectorActive()) {
    final int offX=x - mEditorView.getLastTouchX();
    final int offY=y - mEditorView.getLastTouchY();
    float scale=mEditorView.getmScaleFactor();
    mTweetFlow.moveSelected((int)(offX / scale),(int)(offY / scale));
    mEditorView.redraw();
  }
  mEditorView.setLastTouch(x,y);
}",0.9242871189773844
6422,"public void onActionDown(MotionEvent event){
  super.onActionDown(event);
  final int xGrid;
  final int x=(int)event.getX();
  final int y=(int)event.getY();
  if (mTweetFlow.elementAt(mEditorView.scaledX(x),mEditorView.scaledY(y))) {
    mTweetFlow.setTouchElementModeMarked();
    mEditorView.setState(EDITOR_STATE.TOUCH_ELEMENT);
    mEditorView.redraw();
  }
 else   if (rasterGridHelper.getRasterOn() && rasterGridHelper.getSnapMode() == SnapMode.GRID && rasterGridHelper.isTouchOnGrid(x)) {
    mEditorView.setState(EDITOR_STATE.MOVE_GRID);
    mEditorView.redraw();
  }
 else {
    mEditorView.setState(EDITOR_STATE.TOUCH_VOID);
  }
  mEditorView.setLastTouch(x,y);
}","public void onActionDown(MotionEvent event){
  super.onActionDown(event);
  final int x=(int)event.getX();
  final int y=(int)event.getY();
  if (mTweetFlow.elementAt(mEditorView.scaledX(x),mEditorView.scaledY(y))) {
    mTweetFlow.setTouchElementModeMarked();
    mEditorView.setState(EDITOR_STATE.TOUCH_ELEMENT);
    mEditorView.redraw();
  }
 else   if (rasterGridHelper.getRasterOn() && rasterGridHelper.getSnapMode() == SnapMode.GRID && rasterGridHelper.isTouchOnGrid(mEditorView.scaledX(x))) {
    mEditorView.setState(EDITOR_STATE.MOVE_GRID);
    mEditorView.redraw();
  }
 else {
    mEditorView.setState(EDITOR_STATE.TOUCH_VOID);
  }
  mEditorView.setLastTouch(x,y);
}",0.970414201183432
6423,"public EditorView(Context context,AttributeSet attrs){
  super(context,attrs);
  mTweetFlow=new TweetFlow(getContext());
  mTweetFlow.fillElements();
  setOnLongClickListener(mOnLongClickListener);
  mScaleDetector=new ScaleGestureDetector(context,new ScaleListener());
  mTapDetector=new GestureDetector(context,new DoubleTapListener());
  rasterGridHelper=new RasterGridHelper(mTweetFlow,mOffsetX,mOffsetY);
  prepareStates();
}","public EditorView(Context context,AttributeSet attrs){
  super(context,attrs);
  mTweetFlow=new TweetFlow(getContext());
  mTweetFlow.fillElements();
  setOnLongClickListener(mOnLongClickListener);
  mScaleDetector=new ScaleGestureDetector(context,new ScaleListener());
  mTapDetector=new GestureDetector(context,new DoubleTapListener());
  rasterGridHelper=new RasterGridHelper(mTweetFlow,mOffsetX,mOffsetY,this);
  prepareStates();
}",0.9942196531791908
6424,"public boolean onOptionsItemSelected(MenuItem menuItem){
  super.onOptionsItemSelected(menuItem);
switch (menuItem.getItemId()) {
case R.id.send_tweetflow:
    Toast.makeText(this,TweeterParser.parseTweetFlow(mTweetFlow.getmElementsAsList()),Toast.LENGTH_SHORT).show();
  break;
case R.id.deselect:
mTweetFlow.deselectAll();
mEditorView.redraw();
break;
case R.id.raster_add:
mEditorView.setRasterOn(true);
mEditorView.redraw();
break;
case R.id.raster_remove:
mEditorView.setRasterOn(false);
mEditorView.redraw();
break;
case R.id.snapping:
break;
case R.id.snapping_nothing:
menuItem.setChecked(true);
mEditorView.setSnapMode(SnapMode.NOTHING);
mEditorView.redraw();
break;
case R.id.snapping_raster:
menuItem.setChecked(true);
mEditorView.setSnapMode(SnapMode.RASTER);
mEditorView.redraw();
break;
case R.id.snapping_grid:
menuItem.setChecked(true);
mEditorView.setSnapMode(SnapMode.GRID);
mEditorView.redraw();
break;
case R.id.add_open_sequence:
mTweetFlow.addOpenSequence();
mEditorView.redraw();
break;
case R.id.create_bigloop:
mEditorView.setState(EDITOR_STATE.CREATE_LOOP);
break;
default :
Toast.makeText(this,menuItem.getTitle(),Toast.LENGTH_SHORT).show();
}
return true;
}","public boolean onOptionsItemSelected(MenuItem menuItem){
  super.onOptionsItemSelected(menuItem);
switch (menuItem.getItemId()) {
case R.id.send_tweetflow:
    Toast.makeText(this,TweeterParser.parseTweetFlow(mTweetFlow),Toast.LENGTH_SHORT).show();
  break;
case R.id.deselect:
mTweetFlow.deselectAll();
mEditorView.redraw();
break;
case R.id.raster_add:
mEditorView.setRasterOn(true);
mEditorView.redraw();
break;
case R.id.raster_remove:
mEditorView.setRasterOn(false);
mEditorView.redraw();
break;
case R.id.snapping:
break;
case R.id.snapping_nothing:
menuItem.setChecked(true);
mEditorView.setSnapMode(SnapMode.NOTHING);
mEditorView.redraw();
break;
case R.id.snapping_raster:
menuItem.setChecked(true);
mEditorView.setSnapMode(SnapMode.RASTER);
mEditorView.redraw();
break;
case R.id.snapping_grid:
menuItem.setChecked(true);
mEditorView.setSnapMode(SnapMode.GRID);
mEditorView.redraw();
break;
case R.id.add_open_sequence:
mTweetFlow.addOpenSequence();
mEditorView.redraw();
break;
case R.id.create_bigloop:
mEditorView.setState(EDITOR_STATE.CREATE_LOOP);
break;
default :
Toast.makeText(this,menuItem.getTitle(),Toast.LENGTH_SHORT).show();
}
return true;
}",0.9910600255427842
6425,"private static String createOpenSequence(AbstractElement element){
  String elementString=""String_Node_Str"";
  if (element instanceof ServiceRequest) {
    elementString=""String_Node_Str"" + ((ServiceRequest)element).getUser() + ""String_Node_Str""+ ((ServiceRequest)element).getOperation()+ ""String_Node_Str""+ ((ServiceRequest)element).getService();
    if (((ServiceRequest)element).getInputdata().length() > 0)     elementString+=""String_Node_Str"" + ((ServiceRequest)element).getInputdata();
    if (((ServiceRequest)element).getCondition().length() > 0)     elementString+=""String_Node_Str"" + ((ServiceRequest)element).getCondition() + ""String_Node_Str"";
  }
  if (element instanceof OpenSequence) {
    elementString=element.getId() + ""String_Node_Str"";
  }
  return elementString;
}","private static String createOpenSequence(TweetFlow tweetFlow,OpenSequence e){
  List<AbstractElement> list=tweetFlow.getElementsInOpenSequence(e);
  String elementString=""String_Node_Str"";
  if (list.size() > 0) {
    elementString+=""String_Node_Str"";
    for (    AbstractElement element : list) {
      if ((element.getClosedSequenceNext() == null) && (element.getClosedSequencePrev() == null)) {
        elementString+=createOpenSequenceRequest(element);
        elementString+=""String_Node_Str"";
      }
 else       if (element.getClosedSequencePrev() != null) {
        continue;
      }
 else       if (element.getClosedSequenceNext() != null) {
        elementString+=createClosedSequence(element);
        elementString+=""String_Node_Str"";
      }
    }
    elementString+=""String_Node_Str"";
  }
  return elementString;
}",0.1561338289962825
6426,"public static String parseTweetFlow(ArrayList<AbstractElement> elements){
  String tweetFlowString=""String_Node_Str"";
  for (  AbstractElement element : elements) {
    if ((element.getClosedSequenceNext() == null) && (element.getClosedSequencePrev() == null)) {
      tweetFlowString+=createOpenSequence(element);
      tweetFlowString+=""String_Node_Str"";
    }
 else     if (element.getClosedSequencePrev() != null) {
      continue;
    }
 else     if (element.getClosedSequenceNext() != null) {
      tweetFlowString+=createClosedSequence(element);
      tweetFlowString+=""String_Node_Str"";
    }
  }
  tweetFlowString+=""String_Node_Str"";
  return tweetFlowString;
}","public static String parseTweetFlow(TweetFlow tweetFlow){
  List<AbstractElement> elements=tweetFlow.getmElementsAsList();
  String tweetFlowString=""String_Node_Str"";
  for (  AbstractElement element : elements) {
    if (element instanceof OpenSequence) {
      String cos=createOpenSequence(tweetFlow,(OpenSequence)element);
      tweetFlowString+=cos;
      if (cos.length() > 0) {
        tweetFlowString+=""String_Node_Str"";
      }
      continue;
    }
    if (tweetFlow.isInOpenSequence(element)) {
      continue;
    }
    if ((element.getClosedSequenceNext() == null) && (element.getClosedSequencePrev() == null)) {
      tweetFlowString+=createOpenSequenceRequest(element);
      tweetFlowString+=""String_Node_Str"";
      continue;
    }
 else     if (element.getClosedSequencePrev() != null) {
      continue;
    }
 else     if (element.getClosedSequenceNext() != null) {
      tweetFlowString+=createClosedSequence(element);
      tweetFlowString+=""String_Node_Str"";
      continue;
    }
  }
  tweetFlowString+=""String_Node_Str"";
  return tweetFlowString;
}",0.7611940298507462
6427,"private void saveData(){
  element.setUser(user.getText().toString());
  element.setOperation(operation.getText().toString());
  element.setService(service.getText().toString());
  element.setInputdata(inputdata.getText().toString());
  element.setCondition(condition.getText().toString());
  element.setSelfLoopCondition(selfLoopCondition.getText().toString());
  if (element.getmLoop() != null)   element.setClosedLoopCondition(closedLoopCondition.getText().toString());
  if (selfLoopCondition.getText().toString() != ""String_Node_Str"") {
    Toast.makeText(getContext(),selfLoopCondition.getText().toString(),Toast.LENGTH_SHORT).show();
    element.setSelfLoop(true);
  }
  editorView.redraw();
}","private void saveData(){
  element.setUser(user.getText().toString());
  element.setOperation(operation.getText().toString());
  element.setService(service.getText().toString());
  element.setInputdata(inputdata.getText().toString());
  element.setCondition(condition.getText().toString());
  element.setSelfLoopCondition(selfLoopCondition.getText().toString());
  if (element.getmLoop() != null)   element.setClosedLoopCondition(closedLoopCondition.getText().toString());
  if (selfLoopCondition.getText().toString().length() > 0) {
    element.setSelfLoop(true);
  }
 else {
    element.setSelfLoop(false);
  }
  editorView.redraw();
}",0.7883320867614061
6428,"public void onClick(View v){
  view.getTweetFlow().deleteElement(mId);
  qa.dismiss();
}","public void onClick(View v){
  for (int i=0; i < view.getTweetFlow().getmElementsAsList().size(); i++) {
    if (view.getTweetFlow().getmElementsAsList().get(i).getmLoop() == view.getTweetFlow().getmElements().get(mId)) {
      view.getTweetFlow().getmElementsAsList().get(i).setmLoop(null);
    }
  }
  view.getTweetFlow().deleteElement(mId);
  qa.dismiss();
}",0.3919821826280623
6429,"protected final void fillCommonQuickactionItems(final QuickAction qa,final EditorView view){
  final Resources res=mContext.getResources();
  ActionItem delete=new ActionItem();
  delete.setTitle(""String_Node_Str"");
  delete.setIcon(res.getDrawable(R.drawable.chart));
  delete.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      view.getTweetFlow().deleteElement(mId);
      qa.dismiss();
    }
  }
);
  qa.addActionItem(delete);
}","protected final void fillCommonQuickactionItems(final QuickAction qa,final EditorView view){
  final Resources res=mContext.getResources();
  ActionItem delete=new ActionItem();
  delete.setTitle(""String_Node_Str"");
  delete.setIcon(res.getDrawable(R.drawable.chart));
  delete.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      for (int i=0; i < view.getTweetFlow().getmElementsAsList().size(); i++) {
        if (view.getTweetFlow().getmElementsAsList().get(i).getmLoop() == view.getTweetFlow().getmElements().get(mId)) {
          view.getTweetFlow().getmElementsAsList().get(i).setmLoop(null);
        }
      }
      view.getTweetFlow().deleteElement(mId);
      qa.dismiss();
    }
  }
);
  qa.addActionItem(delete);
}",0.7506132461161079
6430,"public void onClick(View v){
  view.setCreateLoopState(mId);
  qa.dismiss();
}","public void onClick(View v){
  mLoop=null;
  qa.dismiss();
}",0.782608695652174
6431,"@Override void fillQuickActionMenu(final QuickAction qa,final EditorView view){
  ActionItem changeData=new ActionItem();
  changeData.setTitle(""String_Node_Str"");
  changeData.setIcon(mContext.getResources().getDrawable(R.drawable.production));
  changeData.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      ChangeDataDialogServiceRequest changeDataDialog=new ChangeDataDialogServiceRequest(mContext,view,ServiceRequest.this);
      changeDataDialog.show();
      qa.dismiss();
    }
  }
);
  qa.addActionItem(changeData);
  ActionItem bigLoop=new ActionItem();
  bigLoop.setTitle(""String_Node_Str"");
  bigLoop.setIcon(mContext.getResources().getDrawable(R.drawable.production));
  bigLoop.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      view.setCreateLoopState(mId);
      qa.dismiss();
    }
  }
);
  qa.addActionItem(bigLoop);
  fillCommonQuickactionItems(qa,view);
}","@Override void fillQuickActionMenu(final QuickAction qa,final EditorView view){
  ActionItem changeData=new ActionItem();
  changeData.setTitle(""String_Node_Str"");
  changeData.setIcon(mContext.getResources().getDrawable(R.drawable.production));
  changeData.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      ChangeDataDialogServiceRequest changeDataDialog=new ChangeDataDialogServiceRequest(mContext,view,ServiceRequest.this);
      changeDataDialog.show();
      qa.dismiss();
    }
  }
);
  qa.addActionItem(changeData);
  if (mLoop == null) {
    ActionItem bigLoop=new ActionItem();
    bigLoop.setTitle(""String_Node_Str"");
    bigLoop.setIcon(mContext.getResources().getDrawable(R.drawable.production));
    bigLoop.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        view.setCreateLoopState(mId);
        qa.dismiss();
      }
    }
);
    qa.addActionItem(bigLoop);
  }
 else {
    ActionItem bigLoop=new ActionItem();
    bigLoop.setTitle(""String_Node_Str"");
    bigLoop.setIcon(mContext.getResources().getDrawable(R.drawable.production));
    bigLoop.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        mLoop=null;
        qa.dismiss();
      }
    }
);
  }
  fillCommonQuickactionItems(qa,view);
}",0.8330388692579506
6432,"protected void onActionDown(MotionEvent event){
}","protected void onActionDown(MotionEvent event){
  mEditorView.setActivePointerId(event.getPointerId(0));
}",0.632258064516129
6433,"public void onActionDown(MotionEvent event){
  final int x=(int)event.getX();
  final int y=(int)event.getY();
  if (mTweetFlow.elementAt(mEditorView.scaledX(x),mEditorView.scaledY(y))) {
    mTweetFlow.setTouchElementModeMarked();
    mEditorView.setState(EDITOR_STATE.TOUCH_ELEMENT);
    mEditorView.redraw();
  }
 else {
    mEditorView.setState(EDITOR_STATE.TOUCH_VOID);
  }
  mEditorView.setLastTouch(x,y);
  mEditorView.setActivePointerId(event.getPointerId(0));
}","public void onActionDown(MotionEvent event){
  super.onActionDown(event);
  final int x=(int)event.getX();
  final int y=(int)event.getY();
  if (mTweetFlow.elementAt(mEditorView.scaledX(x),mEditorView.scaledY(y))) {
    mTweetFlow.setTouchElementModeMarked();
    mEditorView.setState(EDITOR_STATE.TOUCH_ELEMENT);
    mEditorView.redraw();
  }
 else {
    mEditorView.setState(EDITOR_STATE.TOUCH_VOID);
  }
  mEditorView.setLastTouch(x,y);
}",0.9057017543859648
6434,"public void onActionDown(MotionEvent event){
  final int xGrid;
  final int x=(int)event.getX();
  final int y=(int)event.getY();
  if (mTweetFlow.elementAt(mEditorView.scaledX(x),mEditorView.scaledY(y))) {
    mTweetFlow.setTouchElementModeMarked();
    mEditorView.setState(EDITOR_STATE.TOUCH_ELEMENT);
    mEditorView.redraw();
  }
 else {
    mEditorView.setState(EDITOR_STATE.TOUCH_VOID);
  }
  mEditorView.setLastTouch(x,y);
}","public void onActionDown(MotionEvent event){
  super.onActionDown(event);
  final int xGrid;
  final int x=(int)event.getX();
  final int y=(int)event.getY();
  if (mTweetFlow.elementAt(mEditorView.scaledX(x),mEditorView.scaledY(y))) {
    mTweetFlow.setTouchElementModeMarked();
    mEditorView.setState(EDITOR_STATE.TOUCH_ELEMENT);
    mEditorView.redraw();
  }
 else {
    mEditorView.setState(EDITOR_STATE.TOUCH_VOID);
  }
  mEditorView.setLastTouch(x,y);
}",0.9675251959686452
6435,"@Override public boolean handleLongClick(){
  if (!mEditorView.scaleDetectorActive()) {
    mTweetFlow.addRectangle(mEditorView.getLastTouchX(),mEditorView.getLastTouchY());
    mEditorView.redraw();
  }
  return true;
}","@Override public boolean handleLongClick(){
  if (!mEditorView.scaleDetectorActive()) {
    mTweetFlow.addServiceRequest(mEditorView.getLastTouchX(),mEditorView.getLastTouchY());
    mEditorView.redraw();
  }
  return true;
}",0.9573033707865168
6436,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  canvas.drawText(mCurrState.toString(),10,10,new Paint(Color.BLACK));
  canvas.save();
  canvas.translate(mOffsetX,mOffsetY);
  canvas.scale(mScaleFactor,mScaleFactor);
  mTweetFlow.draw(canvas);
  canvas.restore();
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  canvas.drawText(mCurrState.toString(),10,10,new Paint(Color.BLACK));
  canvas.save();
  canvas.translate(mOffsetX,mOffsetY);
  canvas.scale(mScaleFactor,mScaleFactor);
  rasterGridHelper.draw(canvas);
  mTweetFlow.draw(canvas);
  canvas.restore();
}",0.9461663947797716
6437,"public EditorView(Context context,AttributeSet attrs){
  super(context,attrs);
  mTweetFlow=new TweetFlow(getContext());
  mTweetFlow.fillElements();
  setOnLongClickListener(mOnLongClickListener);
  mScaleDetector=new ScaleGestureDetector(context,new ScaleListener());
  prepareStates();
}","public EditorView(Context context,AttributeSet attrs){
  super(context,attrs);
  mTweetFlow=new TweetFlow(getContext());
  mTweetFlow.fillElements();
  setOnLongClickListener(mOnLongClickListener);
  mScaleDetector=new ScaleGestureDetector(context,new ScaleListener());
  prepareStates();
  rasterGridHelper=new RasterGridHelper(mTweetFlow.getmElements(),mTweetFlow.getTouchElement(),mOffsetX,mOffsetY);
}",0.8345323741007195
6438,"public boolean onOptionsItemSelected(MenuItem menuItem){
  super.onOptionsItemSelected(menuItem);
switch (menuItem.getItemId()) {
case R.id.deselect:
    editorView.delesectAll();
  editorView.redraw();
break;
case R.id.raster_add:
editorView.setRasterOn(true);
editorView.redraw();
break;
case R.id.raster_remove:
editorView.setRasterOn(false);
editorView.redraw();
break;
case R.id.snapping:
break;
case R.id.snapping_nothing:
menuItem.setChecked(true);
editorView.setSnapMode(SnapMode.NOTHING);
editorView.redraw();
break;
case R.id.snapping_raster:
menuItem.setChecked(true);
editorView.setSnapMode(SnapMode.RASTER);
editorView.redraw();
break;
case R.id.snapping_grid:
menuItem.setChecked(true);
editorView.setSnapMode(SnapMode.GRID);
editorView.redraw();
break;
default :
Toast.makeText(this,menuItem.getTitle(),Toast.LENGTH_SHORT).show();
}
return true;
}","public boolean onOptionsItemSelected(MenuItem menuItem){
  super.onOptionsItemSelected(menuItem);
switch (menuItem.getItemId()) {
case R.id.deselect:
    editorView.delesectAll();
  editorView.redraw();
break;
case R.id.raster_add:
editorView.setRasterOn(true);
editorView.redraw();
break;
case R.id.raster_remove:
editorView.setRasterOn(false);
editorView.redraw();
break;
case R.id.snapping:
break;
case R.id.snapping_nothing:
menuItem.setChecked(true);
editorView.setSnapMode(SnapMode.NOTHING);
editorView.redraw();
break;
case R.id.snapping_raster:
menuItem.setChecked(true);
editorView.setSnapMode(SnapMode.RASTER);
editorView.redraw();
break;
case R.id.snapping_grid:
menuItem.setChecked(true);
editorView.setSnapMode(SnapMode.GRID);
editorView.redraw();
break;
case R.id.undo:
editorView.undo();
break;
case R.id.redo:
editorView.redo();
break;
default :
Toast.makeText(this,menuItem.getTitle(),Toast.LENGTH_SHORT).show();
}
return true;
}",0.9535398230088497
6439,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  canvas.drawColor(Color.WHITE);
  if (rasterOn) {
    if (!setRaster) {
      setRaster=true;
      horizontalRasterCT=(canvas.getWidth() / RASTER_HORIZONTAL_WIDTH) + 3;
    }
    Paint paint=new Paint();
    paint.setPathEffect(new DashPathEffect(new float[]{10,3,6,3},1));
    if ((snapMode == SnapMode.NOTHING) || (snapMode == SnapMode.RASTER)) {
      paint.setColor(Color.BLUE);
      for (int i=0; i < horizontalRasterCT; i++) {
        int x=(i * RASTER_HORIZONTAL_WIDTH) + (RASTER_HORIZONTAL_WIDTH / 2) - RASTER_HORIZONTAL_WIDTH + (xGlobalOffset % RASTER_HORIZONTAL_WIDTH);
        canvas.drawLine(x,0,x,canvas.getHeight(),paint);
      }
    }
    if (snapMode == SnapMode.GRID) {
      paint.setColor(Color.RED);
      for (      AbstractElement e : mElements.values()) {
        if (e instanceof Rectangle) {
          canvas.drawLine(e.getMiddleX(),0,e.getMiddleX(),canvas.getHeight(),paint);
        }
      }
    }
  }
  for (  AbstractElement elem : mElements.values()) {
    elem.draw(canvas);
  }
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  canvas.drawColor(Color.WHITE);
  if (rasterOn) {
    if (!setRaster) {
      setRaster=true;
      horizontalRasterCT=(canvas.getWidth() / RASTER_HORIZONTAL_WIDTH) + 3;
    }
    Paint paint=new Paint();
    paint.setPathEffect(new DashPathEffect(new float[]{10,3,6,3},1));
    if ((snapMode == SnapMode.NOTHING) || (snapMode == SnapMode.RASTER)) {
      paint.setColor(Color.BLUE);
      ArrayList<Integer> gridLines=createRasterLines();
      for (int i=0; i < gridLines.size(); i++) {
        canvas.drawLine(gridLines.get(i),0,gridLines.get(i),canvas.getHeight(),paint);
      }
    }
    if (snapMode == SnapMode.GRID) {
      paint.setColor(Color.RED);
      for (      AbstractElement e : mElements.values()) {
        if (e instanceof Rectangle) {
          canvas.drawLine(e.getMiddleX(),0,e.getMiddleX(),canvas.getHeight(),paint);
        }
      }
    }
  }
  for (  AbstractElement elem : mElements.values()) {
    elem.draw(canvas);
  }
}",0.603880738286796
6440,"public int findRasterHorizontal(int x){
  int xCT=x / RASTER_HORIZONTAL_WIDTH;
  int xRaster1=(xCT * RASTER_HORIZONTAL_WIDTH) + (RASTER_HORIZONTAL_WIDTH / 2) - RASTER_HORIZONTAL_WIDTH + (xGlobalOffset % RASTER_HORIZONTAL_WIDTH);
  int xRaster2=((xCT + 1) * RASTER_HORIZONTAL_WIDTH) + (RASTER_HORIZONTAL_WIDTH / 2) - RASTER_HORIZONTAL_WIDTH + (xGlobalOffset % RASTER_HORIZONTAL_WIDTH);
  if (Math.abs(x - xRaster1) < Math.abs(x - xRaster2))   return xRaster1;
 else   return xRaster2;
}","public int findRasterHorizontal(int x){
  ArrayList<Integer> gridLines=createRasterLines();
  for (int i=0; i < gridLines.size() - 1; i++) {
    if (x > gridLines.get(i) && x < gridLines.get(i + 1)) {
      if ((x - gridLines.get(i)) < (gridLines.get(i + 1) - x)) {
        return gridLines.get(i);
      }
 else {
        return gridLines.get(i + 1);
      }
    }
  }
  return -111;
}",0.1194029850746268
6441,"/** 
 * Converts an .ics dateTime string into a QDateTime object The format of the input dateTimeString is yyyyMMddThhmmss, where yyyy denotes the year, MM the month, dd the day, 'T' a delimiter, hh the hour, mm the minutes, ss the seconds. Failing to pass the dateTimeString in this format will result in undesirable DateTime Objects or a @throws IndexOutOfBoundsException may be thrown in case the dateTimeString is too short. <p> Example dateTimeString: 20110221T124714Z <p> Date: 20110221 (2010-02-21) Time: 124714 (12:47:14)
 * @param dateTimeString string containing a date and a time.
 * @return QDateTime Instance (a Qt DateTime Object, which Combines QDateand QTime).
 */
static QDateTime stringToQDateTime(final String dateTimeString){
  String[] dateTime=splitTimeDateString(dateTimeString);
  int year=new Integer(dateTime[0].substring(0,4));
  int month=new Integer(dateTime[0].substring(4,6));
  int day=new Integer(dateTime[0].substring(6,8));
  int hours=new Integer(dateTime[1].substring(0,2));
  int minutes=new Integer(dateTime[1].substring(2,4));
  int seconds=new Integer(dateTime[1].substring(4,6));
  return new QDateTime(new QDate(year,month,day),new QTime(hours,minutes,seconds));
}","/** 
 * Converts an .ics dateTime string into a QDateTime object The format of the input dateTimeString is yyyyMMddThhmmss, where yyyy denotes the year, MM the month, dd the day, 'T' a delimiter, hh the hour, mm the minutes, ss the seconds. Failing to pass the dateTimeString in this format will result in undesirable DateTime Objects or a @throws IndexOutOfBoundsException may be thrown in case the dateTimeString is too short. <p> Example dateTimeString: 20110221T124714Z <p> Date: 20110221 (2010-02-21) Time: 124714 (12:47:14)
 * @param dateTimeString string containing a date and a time.
 * @return QDateTime Instance (a Qt DateTime Object, which Combines QDateand QTime).
 */
static QDateTime stringToQDateTime(final String dateTimeString){
  return QDateTime.fromString(dateTimeString.replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
}",0.7325581395348837
6442,"private void assertCalendarValidity(final ArrayList<WorkSession> testCalendar,final int noOfValidEntries){
  for (int i=0; i < noOfValidEntries; i++) {
    assertEquals(calendar.get(i).getDescription(),testCalendar.get(i).getDescription());
  }
  for (int i=0; i < noOfValidEntries; i++) {
    assertEquals(calendar.get(i).getStart(),testCalendar.get(i).getStart());
  }
  for (int i=0; i < noOfValidEntries; i++) {
    assertEquals(calendar.get(i).getEnd(),testCalendar.get(i).getEnd());
  }
  assertEquals(noOfValidEntries,testCalendar.size());
}","private void assertCalendarValidity(final ArrayList<WorkSession> testCalendar,final int noOfValidEntries){
  for (int i=0; i < noOfValidEntries; i++) {
    assertEquals(calendar.get(i).getDescription(),testCalendar.get(i).getDescription());
  }
  for (int i=0; i < noOfValidEntries; i++) {
    assertEquals(calendar.get(i).getStart(),testCalendar.get(i).getStart());
  }
  for (int i=0; i < noOfValidEntries; i++) {
    assertEquals(calendar.get(i).getEnd(),testCalendar.get(i).getEnd());
  }
}",0.9481765834932822
6443,"/** 
 * Parses contents of an .ics file which is used in iCal, Outlook, etc. <p> <b>ICS FILE FORMAT:</b><br> An .ics file consists of multiple lines, each line beginning with a tag. <p> <b>EXAMPLE EVENT:</b> <br> BEGIN:VEVENT<br> CREATED:20100809T062219Z<br> UID:2DE909B3-96C6-4D7B-BB99-5CA7487C43A2<br> DTEND;TZID=Europe/Zurich:20100810T115000<br> TRANSP:OPAQUE<br> SUMMARY:Prog2<br> DTSTART;TZID=Europe/Zurich:20100810T101000<br> DTSTAMP:20100809T062304Z<br> SEQUENCE:4<br> END:VEVENT <p> An WorkSession starts with the tag ""BEGIN:VEVENT"" and should be closed by ""END:VEVENT"". A missing ""END:VEVENT"" could lead to missing WorkSessions as startTime and endTime might be overwritten. <p> Within a WorkSession the following tags may occur in any order: <ul> <li>SUMMARY:* WorkSession Name <li>DTEND;...:* End time <li>DTSTART;...:* Start time </ul> *: Mandatory tags <p> All other tags are ignored. <p> If the Argument filePath is invalid (file non-existent) or null, parseIcsFile() will return null
 * @param filePath path to the .ics file to parse.
 * @return a linked list containing all WorkSessions extracted from inputfile.
 * @throws WaktuException
 */
public static ArrayList<WorkSession> parseIcsFile(final String filePath) throws WaktuException {
  ArrayList<WorkSession> calendar=new ArrayList<WorkSession>();
  BufferedReader br;
  try {
    br=new BufferedReader(new FileReader(new File(filePath)));
  }
 catch (  Exception e) {
    throw new WaktuException(""String_Node_Str"" + filePath);
  }
  String currentLine;
  try {
    while ((currentLine=br.readLine()) != null) {
      WorkSession tmpWs=null;
      if (currentLine.startsWith(""String_Node_Str"")) {
        tmpWs=new WorkSession();
        processEventLine(br,tmpWs);
        if (isValidWorkSession(tmpWs)) {
          calendar.add(tmpWs);
        }
      }
    }
  }
 catch (  Exception e) {
    throw new WaktuException(""String_Node_Str"");
  }
  try {
    br.close();
  }
 catch (  IOException e) {
    throw new WaktuException(""String_Node_Str"");
  }
  return calendar;
}","/** 
 * Parses contents of an .ics file which is used in iCal, Outlook, etc. <p> <b>ICS FILE FORMAT:</b><br> An .ics file consists of multiple lines, each line beginning with a tag. <p> <b>EXAMPLE EVENT:</b> <br> BEGIN:VEVENT<br> CREATED:20100809T062219Z<br> UID:2DE909B3-96C6-4D7B-BB99-5CA7487C43A2<br> DTEND;TZID=Europe/Zurich:20100810T115000<br> TRANSP:OPAQUE<br> SUMMARY:Prog2<br> DTSTART;TZID=Europe/Zurich:20100810T101000<br> DTSTAMP:20100809T062304Z<br> SEQUENCE:4<br> END:VEVENT <p> An WorkSession starts with the tag ""BEGIN:VEVENT"" and should be closed by ""END:VEVENT"". A missing ""END:VEVENT"" could lead to missing WorkSessions as startTime and endTime might be overwritten. <p> Within a WorkSession the following tags may occur in any order: <ul> <li>SUMMARY:* WorkSession Name <li>DTEND;...:* End time <li>DTSTART;...:* Start time </ul> *: Mandatory tags <p> All other tags are ignored. <p> If the Argument filePath is invalid (file non-existent) or null, parseIcsFile() will return null
 * @param filePath path to the .ics file to parse.
 * @return a linked list containing all WorkSessions extracted from inputfile.
 * @throws WaktuException
 */
public static ArrayList<WorkSession> parseIcsFile(final String filePath) throws WaktuException {
  ArrayList<WorkSession> calendar=new ArrayList<WorkSession>();
  BufferedReader br;
  try {
    br=new BufferedReader(new FileReader(new File(filePath)));
  }
 catch (  Exception e) {
    throw new WaktuException(""String_Node_Str"" + filePath);
  }
  String currentLine;
  try {
    while ((currentLine=br.readLine()) != null) {
      WorkSession tmpWs=null;
      if (currentLine.startsWith(""String_Node_Str"")) {
        tmpWs=new WorkSession();
        processEventLine(br,tmpWs);
        if (isValidWorkSession(tmpWs)) {
          calendar.add(tmpWs);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    br.close();
  }
 catch (  IOException e) {
    throw new WaktuException(""String_Node_Str"");
  }
  return calendar;
}",0.9454008853910476
6444,"public static double getPlannedTime(Usr user,QDate fromDate,QDate toDate){
  return fromDate.daysTo(toDate) * getNumberOfWorkdays(user,fromDate,toDate) * HOURS_PER_WORKDAY;
}","public static double getPlannedTime(Usr user,QDate fromDate,QDate toDate){
  return getNumberOfWorkdays(user,fromDate,toDate) * HOURS_PER_WORKDAY * user.getPensum() / 100;
}",0.8530259365994236
6445,"public static double getPlannedTime(Usr user,QDate fromDate,QDate toDate){
  return getNumberOfWorkdays(user,fromDate,toDate) * HOURS_PER_WORKDAY * user.getPensum() / 100;
}","public static double getPlannedTime(Usr user,QDate fromDate,QDate toDate){
  return roundToTenth(getNumberOfWorkdays(user,fromDate,toDate) * HOURS_PER_WORKDAY);
}",0.8895522388059701
6446,"public static double calculateWorktime(Usr usr,Project project,WorkPackage workPackage,QDate start,QDate end) throws WaktuException {
  double worktime=0;
  List<WorkSession> workSessions=null;
  if (project != null && usr == null && workPackage == null) {
    workSessions=WorkSessionController.getInstance().getWorkSessions(project);
  }
 else   if (project != null && usr != null && workPackage == null) {
    workSessions=WorkSessionController.getInstance().getWorkSessions(project,usr);
  }
 else   if (project == null && usr != null && workPackage == null) {
    workSessions=WorkSessionController.getInstance().getWorkSessions(usr);
  }
 else   if (usr == null && workPackage != null) {
    workSessions=WorkSessionController.getInstance().getWorkSessions(workPackage);
  }
 else   if (usr != null && workPackage != null) {
    workSessions=WorkSessionController.getInstance().getWorkSessions(workPackage,usr);
  }
  try {
    for (    WorkSession ws : workSessions) {
      if ((start == null || start.compareTo(TimeUtil.convertGregorianToQDateTime(ws.getStart()).date()) <= 0) && (end == null || end.compareTo(TimeUtil.convertGregorianToQDateTime(ws.getEnd()).date()) >= 0)) {
        worktime+=TimeUtil.calculateTimespanInSeconds(ws.getStart(),ws.getEnd());
      }
    }
  }
 catch (  NullPointerException e) {
    return 0;
  }
  return roundToTenth(worktime / 3600);
}","public static double calculateWorktime(Usr usr,Project project,WorkPackage workPackage,QDate start,QDate end) throws WaktuException {
  double worktime=0;
  List<WorkSession> workSessions=null;
  if (project != null && usr == null && workPackage == null) {
    workSessions=WorkSessionController.getInstance().getWorkSessions(project);
  }
 else   if (project != null && usr != null && workPackage == null) {
    workSessions=WorkSessionController.getInstance().getWorkSessions(project,usr);
  }
 else   if (project == null && usr != null && workPackage == null) {
    workSessions=WorkSessionController.getInstance().getWorkSessions(usr);
  }
 else   if (usr == null && workPackage != null) {
    workSessions=WorkSessionController.getInstance().getWorkSessions(workPackage);
  }
 else   if (usr != null && workPackage != null) {
    workSessions=WorkSessionController.getInstance().getWorkSessions(workPackage,usr);
  }
  if (workSessions == null) {
    return worktime;
  }
  try {
    for (    WorkSession ws : workSessions) {
      if ((start == null || start.compareTo(TimeUtil.convertGregorianToQDateTime(ws.getStart()).date()) <= 0) && (end == null || end.compareTo(TimeUtil.convertGregorianToQDateTime(ws.getEnd()).date()) >= 0)) {
        worktime+=TimeUtil.calculateTimespanInSeconds(ws.getStart(),ws.getEnd());
      }
    }
  }
 catch (  NullPointerException e) {
    return 0;
  }
  return roundToTenth(worktime / 3600);
}",0.9804756833510828
6447,"private void saveProject(){
  project.setDescription(ui.lblDescription.text());
  project.setPlannedTime(ui.txtPlannedTime.value());
  project.setProjectManager((Usr)ui.cmbProjectManager.itemData(ui.cmbProjectManager.currentIndex()));
  project.setActiveState(!ui.checkBox.isChecked());
  try {
    ProjectController.getInstance().updateProject(project);
  }
 catch (  WaktuException e) {
    errorMessage.emit(e.getMessage());
  }
}","private void saveProject(){
  project.setDescription(ui.txtDescription.text());
  project.setPlannedTime(ui.txtPlannedTime.value());
  project.setProjectManager((Usr)ui.cmbProjectManager.itemData(ui.cmbProjectManager.currentIndex()));
  project.setActiveState(!ui.checkBox.isChecked());
  try {
    ProjectController.getInstance().updateProject(project);
  }
 catch (  WaktuException e) {
    errorMessage.emit(e.getMessage());
  }
}",0.9930715935334872
6448,"@SuppressWarnings(""String_Node_Str"") public List<WorkSession> getWorkSessions(Project project) throws WaktuException {
  EntityManager em=PersistenceController.getInstance().getEMF().createEntityManager();
  List<WorkSession> workSessionsByProject;
  if (!PermissionController.checkPermission()) {
    throw new WaktuException(""String_Node_Str"");
  }
  try {
    workSessionsByProject=em.createQuery(""String_Node_Str"" + project.getId() + ""String_Node_Str"").getResultList();
  }
 catch (  IllegalStateException e) {
    throw new WaktuException(""String_Node_Str"");
  }
catch (  IllegalArgumentException e) {
    throw new WaktuException(""String_Node_Str"");
  }
catch (  Exception e) {
    throw new WaktuException(""String_Node_Str"");
  }
 finally {
    em.close();
  }
  return workSessionsByProject;
}","@SuppressWarnings(""String_Node_Str"") public List<WorkSession> getWorkSessions(Project project) throws WaktuException {
  EntityManager em=PersistenceController.getInstance().getEMF().createEntityManager();
  List<WorkSession> workSessionsByProject=null;
  if (!PermissionController.checkPermission()) {
    throw new WaktuException(""String_Node_Str"");
  }
  try {
    workSessionsByProject=em.createQuery(""String_Node_Str"" + project.getId() + ""String_Node_Str"").getResultList();
  }
 catch (  IllegalStateException e) {
    logger.error(e.getMessage());
    throw new WaktuException(""String_Node_Str"");
  }
catch (  IllegalArgumentException e) {
    logger.error(e.getMessage());
    throw new WaktuException(""String_Node_Str"");
  }
catch (  Exception e) {
    logger.error(e.getMessage());
    throw new WaktuException(""String_Node_Str"");
  }
 finally {
    em.close();
  }
  return workSessionsByProject;
}",0.9373902867173786
6449,"public static QDate[] getWeekBoundaries(QDate date){
  QDate[] startDayEndDay={new QDate(date.year(),date.month(),getFirstDayOfWeek(date)),new QDate(date.year(),date.month(),getFirstDayOfWeek(date) + 6)};
  return startDayEndDay;
}","public static QDate[] getWeekBoundaries(QDate date){
  QDate[] startDayEndDay={new QDate(date.year(),getFirstDayOfWeek(date).month(),getFirstDayOfWeek(date).day()),new QDate(date.year(),getLastDayOfWeek(date).month(),getLastDayOfWeek(date).day())};
  return startDayEndDay;
}",0.7865612648221344
6450,"static int getFirstDayOfWeek(QDate date){
  QDate adjustedDate=date.clone();
  return adjustedDate.addDays(-date.dayOfWeek() + 1).day();
}","static QDate getFirstDayOfWeek(QDate date){
  QDate firstDay=date.clone();
  return firstDay.addDays(-date.dayOfWeek() + 1);
}",0.8636363636363636
6451,"@Test public void parseIcsFile_invalidTimeDelimiter_onlyValidEventsProcessed() throws WaktuException {
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarValidity(testCalendar,2);
}","@Test public void parseIcsFile_invalidTimeDelimiter_onlyValidEventsProcessed() throws WaktuException {
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  assertCalendarValidity(testCalendar,2);
}",0.9822222222222222
6452,"@Test public void parseIcsFile_summaryMissing_onlyValidEventsProcessed() throws WaktuException {
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarValidity(testCalendar,2);
}","@Test public void parseIcsFile_summaryMissing_onlyValidEventsProcessed() throws WaktuException {
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  assertCalendarValidity(testCalendar,2);
}",0.9817351598173516
6453,"@Test public void parseIcsFile_Normal() throws WaktuException {
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarValidity(testCalendar,3);
}","@Test public void parseIcsFile_Normal() throws WaktuException {
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  assertCalendarValidity(testCalendar,3);
}",0.978494623655914
6454,"@Test public void parseIcsFile_startTimeEndTimeMissing_onlyValidEventsProcessed() throws WaktuException {
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarValidity(testCalendar,1);
}","@Test public void parseIcsFile_startTimeEndTimeMissing_onlyValidEventsProcessed() throws WaktuException {
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  assertCalendarValidity(testCalendar,1);
}",0.9824561403508772
6455,"@Test public void parseIcsFile_endVCalendarMissing_allEventsProcessedNoException() throws WaktuException {
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarValidity(testCalendar,3);
}","@Test public void parseIcsFile_endVCalendarMissing_allEventsProcessedNoException() throws WaktuException {
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  assertCalendarValidity(testCalendar,3);
}",0.982532751091703
6456,"@Test public void parseIcsFile_invalidTimeFormat_onlyValidEventsProcessed() throws WaktuException {
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarValidity(testCalendar,1);
}","@Test public void parseIcsFile_invalidTimeFormat_onlyValidEventsProcessed() throws WaktuException {
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  assertCalendarValidity(testCalendar,1);
}",0.981981981981982
6457,"@Test public void getFirstDayOfWeek_Saturday(){
  int refFirstDayOfWeek=new QDate(2011,5,9).day();
  assertEquals(refFirstDayOfWeek,TimeUtil.getFirstDayOfWeek(new QDate(2011,5,14)));
}","@Test public void getFirstDayOfWeek_Saturday(){
  QDate refFirstDayOfWeek=new QDate(2011,5,9);
  assertEquals(refFirstDayOfWeek,TimeUtil.getFirstDayOfWeek(new QDate(2011,5,14)));
}",0.967032967032967
6458,"@Test public void getFirstDayOfWeek_Sunday(){
  int refFirstDayOfWeek=new QDate(2011,5,9).day();
  assertEquals(refFirstDayOfWeek,TimeUtil.getFirstDayOfWeek(new QDate(2011,5,15)));
}","@Test public void getFirstDayOfWeek_Sunday(){
  QDate refFirstDayOfWeek=new QDate(2011,5,9);
  assertEquals(refFirstDayOfWeek,TimeUtil.getFirstDayOfWeek(new QDate(2011,5,15)));
}",0.9666666666666668
6459,"@Test public void getFirstDayOfWeek_Monday(){
  int refFirstDayOfWeek=new QDate(2011,5,9).day();
  assertEquals(refFirstDayOfWeek,TimeUtil.getFirstDayOfWeek(new QDate(2011,5,9)));
}","@Test public void getFirstDayOfWeek_Monday(){
  QDate refFirstDayOfWeek=new QDate(2011,5,9);
  assertEquals(refFirstDayOfWeek,TimeUtil.getFirstDayOfWeek(new QDate(2011,5,9)));
}",0.9664804469273744
6460,"/** 
 * @param username
 * @param name
 * @param firstname
 * @param pensum
 * @param role
 */
public Usr addUser(String firstname,String lastname,String password,int pensum,SystemRole role,double holiday) throws WaktuGeneralException {
  EntityManager em=PersistenceController.getInstance().getEMF().createEntityManager();
  Usr newUsr=new Usr(UsernameController.generateUsername(firstname,lastname),firstname,lastname,Md5.hash(password),pensum,role,holiday);
  try {
    em.getTransaction().begin();
    em.persist(newUsr);
    em.getTransaction().commit();
  }
 catch (  IllegalStateException e) {
    throw new WaktuGeneralException(""String_Node_Str"");
  }
catch (  IllegalArgumentException e) {
    throw new WaktuGeneralException(""String_Node_Str"");
  }
catch (  Exception e) {
    throw new WaktuGeneralException(""String_Node_Str"");
  }
 finally {
    em.close();
  }
  add.emit(newUsr);
  logger.info(""String_Node_Str"" + newUsr + ""String_Node_Str"");
  return newUsr;
}","/** 
 * @param username
 * @param name
 * @param firstname
 * @param pensum
 * @param role
 */
public Usr addUser(String firstname,String lastname,String password,int pensum,SystemRole role,double holiday) throws WaktuGeneralException {
  EntityManager em=PersistenceController.getInstance().getEMF().createEntityManager();
  Usr newUsr=new Usr(generateUsername(firstname,lastname),firstname,lastname,Md5.hash(password),pensum,role,holiday);
  try {
    em.getTransaction().begin();
    em.persist(newUsr);
    em.getTransaction().commit();
  }
 catch (  IllegalStateException e) {
    throw new WaktuGeneralException(""String_Node_Str"");
  }
catch (  IllegalArgumentException e) {
    throw new WaktuGeneralException(""String_Node_Str"");
  }
catch (  Exception e) {
    throw new WaktuGeneralException(""String_Node_Str"");
  }
 finally {
    em.close();
  }
  add.emit(newUsr);
  logger.info(""String_Node_Str"" + newUsr + ""String_Node_Str"");
  return newUsr;
}",0.9901707190894982
6461,"public static GregorianCalendar convertQDateTimeToGregorian(QDateTime dateTime){
  QDate date=dateTime.date();
  QTime time=dateTime.time();
  GregorianCalendar gregCal=new GregorianCalendar(date.year(),date.month() - 1,date.day(),time.hour(),time.minute(),time.second());
  logger.info(gregCal.get(Calendar.DAY_OF_MONTH) + ""String_Node_Str"" + gregCal.get(Calendar.MONTH)+ ""String_Node_Str""+ gregCal.get(Calendar.YEAR));
  logger.info(gregCal.get(Calendar.HOUR) + ""String_Node_Str"" + gregCal.get(Calendar.MINUTE));
  return gregCal;
}","public static GregorianCalendar convertQDateTimeToGregorian(QDateTime dateTime){
  QDate date=dateTime.date();
  QTime time=dateTime.time();
  GregorianCalendar gregCal=new GregorianCalendar(date.year(),date.month(),date.day(),time.hour(),time.minute(),time.second());
  logger.info(gregCal.get(Calendar.DAY_OF_MONTH) + ""String_Node_Str"" + gregCal.get(Calendar.MONTH)+ ""String_Node_Str""+ gregCal.get(Calendar.YEAR));
  logger.info(gregCal.get(Calendar.HOUR) + ""String_Node_Str"" + gregCal.get(Calendar.MINUTE));
  return gregCal;
}",0.9962406015037594
6462,"public static QDateTime convertGregorianToQDateTime(GregorianCalendar dateTime){
  QDate date=new QDate(dateTime.get(GregorianCalendar.YEAR),dateTime.get(GregorianCalendar.MONTH) + 1,dateTime.get(GregorianCalendar.DAY_OF_MONTH));
  QTime time=new QTime(dateTime.get(GregorianCalendar.HOUR_OF_DAY),dateTime.get(GregorianCalendar.MINUTE),dateTime.get(GregorianCalendar.SECOND));
  return new QDateTime(date,time);
}","public static QDateTime convertGregorianToQDateTime(GregorianCalendar dateTime){
  QDate date=new QDate(dateTime.get(GregorianCalendar.YEAR),dateTime.get(GregorianCalendar.MONTH),dateTime.get(GregorianCalendar.DAY_OF_MONTH));
  QTime time=new QTime(dateTime.get(GregorianCalendar.HOUR_OF_DAY),dateTime.get(GregorianCalendar.MINUTE),dateTime.get(GregorianCalendar.SECOND));
  return new QDateTime(date,time);
}",0.9951338199513382
6463,"@Override public Usr addUser(String firstname,String lastname,String password,int pensum,SystemRole role,double holiday) throws WaktuGeneralException {
  LinkedList<Usr> allUsers=getAllUsers();
  Usr newUser=new Usr(UsernameController.generateUsername(firstname,lastname),firstname,lastname,password,pensum,role,holiday);
  allUsers.add(newUser);
  XmlUtil.saveUsersToXml(userFilePath,allUsers);
  return newUser;
}","@Override public Usr addUser(String firstname,String lastname,String password,int pensum,SystemRole role,double holiday) throws WaktuGeneralException {
  LinkedList<Usr> allUsers=getAllUsers();
  Usr newUser=new Usr(UsernameUtil.generateUsername(getAllUsers(),firstname,lastname),firstname,lastname,password,pensum,role,holiday);
  allUsers.add(newUser);
  XmlUtil.saveUsersToXml(userFilePath,allUsers);
  return newUser;
}",0.9665871121718376
6464,"@SuppressWarnings(""String_Node_Str"") private void addFilter(){
  filterModel.setProject((Project)ui.cmbProject.itemData(ui.cmbProject.currentIndex()));
  filterModel.setWorkPackage((WorkPackage)ui.cmbWorkpackage.itemData(ui.cmbWorkpackage.currentIndex()));
  QDate start=null;
  QDate end=null;
  if (ui.txtStart.date().toString(""String_Node_Str"").equals(""String_Node_Str"") == false) {
    start=ui.txtStart.date();
  }
  if (ui.txtEnd.date().toString(""String_Node_Str"").equals(""String_Node_Str"") == false) {
    end=ui.txtEnd.date();
  }
  filterModel.setStart(start);
  filterModel.setEnd(end);
  ui.lblTotalTime.setText(""String_Node_Str"" + TimeController.calculateWorktime(usr,start,end));
}","@SuppressWarnings(""String_Node_Str"") private void addFilter(){
  filterModel.setProject((Project)ui.cmbProject.itemData(ui.cmbProject.currentIndex()));
  filterModel.setWorkPackage((WorkPackage)ui.cmbWorkpackage.itemData(ui.cmbWorkpackage.currentIndex()));
  QDate start=null;
  QDate end=null;
  if (ui.txtStart.date().toString(""String_Node_Str"").equals(""String_Node_Str"") == false) {
    start=ui.txtStart.date();
  }
  if (ui.txtEnd.date().toString(""String_Node_Str"").equals(""String_Node_Str"") == false) {
    end=ui.txtEnd.date();
  }
  filterModel.setStart(start);
  filterModel.setEnd(end);
  try {
    ui.lblTotalTime.setText(""String_Node_Str"" + TimeController.calculateWorktime(usr,start,end));
  }
 catch (  WaktuException e) {
    e.printStackTrace();
  }
}",0.9500342231348392
6465,"private static int getFirstDayOfWeek(QDate date){
  return date.day() - date.dayOfWeek();
}","static int getFirstDayOfWeek(QDate date){
  QDate adjustedDate=date.clone();
  return adjustedDate.addDays(-date.dayOfWeek() + 1).day();
}",0.6986899563318777
6466,"public static GregorianCalendar convertQDateTimeToGregorian(QDateTime dateTime){
  QDate date=dateTime.date();
  QTime time=dateTime.time();
  GregorianCalendar gregCal=new GregorianCalendar(date.year(),date.month(),date.day(),time.hour(),time.minute(),time.second());
  logger.info(gregCal.get(Calendar.DAY_OF_MONTH) + ""String_Node_Str"" + gregCal.get(Calendar.MONTH)+ ""String_Node_Str""+ gregCal.get(Calendar.YEAR));
  logger.info(gregCal.get(Calendar.HOUR) + ""String_Node_Str"" + gregCal.get(Calendar.MINUTE));
  return gregCal;
}","public static GregorianCalendar convertQDateTimeToGregorian(QDateTime dateTime){
  QDate date=dateTime.date();
  QTime time=dateTime.time();
  GregorianCalendar gregCal=new GregorianCalendar(date.year(),date.month() - 1,date.day(),time.hour(),time.minute(),time.second());
  logger.info(gregCal.get(Calendar.DAY_OF_MONTH) + ""String_Node_Str"" + gregCal.get(Calendar.MONTH)+ ""String_Node_Str""+ gregCal.get(Calendar.YEAR));
  logger.info(gregCal.get(Calendar.HOUR) + ""String_Node_Str"" + gregCal.get(Calendar.MINUTE));
  return gregCal;
}",0.9962406015037594
6467,"public static QDateTime convertGregorianToQDateTime(GregorianCalendar dateTime){
  QDate date=new QDate(dateTime.get(GregorianCalendar.YEAR),dateTime.get(GregorianCalendar.MONTH),dateTime.get(GregorianCalendar.DAY_OF_MONTH));
  QTime time=new QTime(dateTime.get(GregorianCalendar.HOUR_OF_DAY),dateTime.get(GregorianCalendar.MINUTE),dateTime.get(GregorianCalendar.SECOND));
  return new QDateTime(date,time);
}","public static QDateTime convertGregorianToQDateTime(GregorianCalendar dateTime){
  QDate date=new QDate(dateTime.get(GregorianCalendar.YEAR),dateTime.get(GregorianCalendar.MONTH) + 1,dateTime.get(GregorianCalendar.DAY_OF_MONTH));
  QTime time=new QTime(dateTime.get(GregorianCalendar.HOUR_OF_DAY),dateTime.get(GregorianCalendar.MINUTE),dateTime.get(GregorianCalendar.SECOND));
  return new QDateTime(date,time);
}",0.9951338199513382
6468,"/** 
 * @param user
 */
public void logout(){
  loggedInUser=null;
}","/** 
 * @param user
 */
public void logout(){
  setLoggedInUser(null);
}",0.9428571428571428
6469,"/** 
 * @param username
 */
public boolean login(String username,String password){
  if (canLogin(username)) {
    Usr user=UserController.getInstance().getUser(username);
    String passwordHash=Md5.hash(password);
    if (user.getPasswordHash().equals(passwordHash)) {
      loggedInUser=user;
      return true;
    }
  }
  return false;
}","/** 
 * @param username
 */
public boolean login(String username,String password){
  if (canLogin(username)) {
    Usr user=UserController.getInstance().getUser(username);
    String passwordHash=Md5.hash(password);
    if (user.getPasswordHash().equals(passwordHash)) {
      setLoggedInUser(user);
      return true;
    }
  }
  return false;
}",0.9767441860465116
6470,"@Override public LinkedList<Usr> getProjectManagers(){
  LinkedList<Usr> projectManagers=getAllUsers();
  for (  Usr u : projectManagers) {
    if (u.isActive()) {
      projectManagers.remove(u);
    }
  }
  return null;
}","@Override public LinkedList<Usr> getProjectManagers(){
  LinkedList<Usr> projectManagers=new LinkedList<Usr>();
  for (  Usr u : getAllUsers()) {
    if (u.getSystemRole().equals(SystemRole.PROJECTMANAGER)) {
      projectManagers.add(u);
    }
  }
  return projectManagers;
}",0.43687374749499
6471,"@Override public LinkedList<Usr> getActiveUsers(){
  LinkedList<Usr> activeUsers=getAllUsers();
  for (  Usr u : activeUsers) {
    if (!u.isActive()) {
      activeUsers.remove(u);
    }
  }
  return activeUsers;
}","@Override public LinkedList<Usr> getActiveUsers(){
  LinkedList<Usr> activeUsers=new LinkedList<Usr>();
  for (  Usr u : getAllUsers()) {
    if (u.isActive()) {
      activeUsers.add(u);
    }
  }
  return activeUsers;
}",0.463302752293578
6472,"@Override public Usr getUser(String username){
  LinkedList<Usr> allUsers=getAllUsers();
  for (  Usr u : allUsers) {
    if (u.getUsername().equals(username)) {
      return u;
    }
  }
  return null;
}","@Override public Usr getUser(String username){
  for (  Usr u : getAllUsers()) {
    if (u.getUsername().equals(username)) {
      return u;
    }
  }
  return null;
}",0.8679245283018868
6473,"@Override public boolean updateUser(Usr user){
  LinkedList<Usr> allUsers=getAllUsers();
  for (  Usr u : allUsers) {
    if (u.equals(user)) {
      u.setActiveState(user.isActive());
      u.setFirstname(user.getFirstname());
      u.setHoliday(user.getHoliday());
      u.setName(user.getName());
      u.setPassword(user.getPasswordHash());
      u.setPensum(user.getPensum());
      u.setRole(user.getSystemRole());
      u.setUsername(user.getUsername());
      return true;
    }
  }
  return false;
}","@Override public boolean updateUser(Usr user){
  for (  Usr u : getAllUsers()) {
    if (u.equals(user)) {
      u.setActiveState(user.isActive());
      u.setFirstname(user.getFirstname());
      u.setHoliday(user.getHoliday());
      u.setName(user.getName());
      u.setPassword(user.getPasswordHash());
      u.setPensum(user.getPensum());
      u.setRole(user.getSystemRole());
      u.setUsername(user.getUsername());
      return true;
    }
  }
  return false;
}",0.9315628192032688
6474,"@Override public LinkedList<Usr> getInactiveUsers(){
  LinkedList<Usr> inactiveUsers=getAllUsers();
  for (  Usr u : inactiveUsers) {
    if (u.isActive()) {
      inactiveUsers.remove(u);
    }
  }
  return inactiveUsers;
}","@Override public LinkedList<Usr> getInactiveUsers(){
  LinkedList<Usr> inactiveUsers=new LinkedList<Usr>();
  for (  Usr u : getAllUsers()) {
    if (!u.isActive()) {
      inactiveUsers.add(u);
    }
  }
  return inactiveUsers;
}",0.4625550660792951
6475,"private static SystemRole getSystemRoleContentOf(Node element,String name){
  for (  SystemRole sr : SystemRole.values()) {
    if (sr.equals(getTextContentOf(element,name))) {
      return sr;
    }
  }
  return null;
}","private static SystemRole getSystemRoleContentOf(Node element,String name){
  for (  SystemRole sr : SystemRole.values()) {
    if (sr.toString().equalsIgnoreCase(getTextContentOf(element,name))) {
      return sr;
    }
  }
  return null;
}",0.9544468546637744
6476,"@Override public boolean equals(Object obj){
  if (obj instanceof Usr) {
    Usr usr=(Usr)obj;
    if (usr.username.equals(username) && usr.id == id) {
      return true;
    }
  }
  return super.equals(obj);
}","@Override public boolean equals(Object obj){
  if (obj instanceof Usr) {
    Usr usr=(Usr)obj;
    if (usr.username.equals(username) && usr.id == id && usr.firstname.equals(firstname) && usr.name.equals(name) && usr.holiday == holiday && usr.active == active && usr.passwordHash.equals(passwordHash) && usr.pensum == pensum && usr.systemRole.equals(systemRole)) {
      return true;
    }
  }
  return super.equals(obj);
}",0.6645569620253164
6477,"@SuppressWarnings(""String_Node_Str"") private void closeClicked(){
  System.exit(0);
}","@SuppressWarnings(""String_Node_Str"") private void closeClicked(){
  QApplication.exit();
}",0.9028571428571428
6478,"@SuppressWarnings(""String_Node_Str"") private void cancelClicked(){
  System.exit(0);
}","@SuppressWarnings(""String_Node_Str"") private void cancelClicked(){
  QApplication.exit();
}",0.903954802259887
6479,"@SuppressWarnings(""String_Node_Str"") private void closeApp(){
  System.exit(0);
}","@SuppressWarnings(""String_Node_Str"") private void closeApp(){
  QApplication.exit();
}",0.8982035928143712
6480,"public static QDateTime convertGregorianToQDateTime(GregorianCalendar dateTime){
  QDate date=new QDate(dateTime.get(GregorianCalendar.YEAR),dateTime.get(GregorianCalendar.MONTH),dateTime.get(GregorianCalendar.DAY_OF_MONTH));
  QTime time=new QTime(dateTime.get(GregorianCalendar.HOUR),dateTime.get(GregorianCalendar.MINUTE),dateTime.get(GregorianCalendar.SECOND));
  return new QDateTime(date,time);
}","public static QDateTime convertGregorianToQDateTime(GregorianCalendar dateTime){
  QDate date=new QDate(dateTime.get(GregorianCalendar.YEAR),dateTime.get(GregorianCalendar.MONTH),dateTime.get(GregorianCalendar.DAY_OF_MONTH));
  QTime time=new QTime(dateTime.get(GregorianCalendar.HOUR_OF_DAY),dateTime.get(GregorianCalendar.MINUTE),dateTime.get(GregorianCalendar.SECOND));
  return new QDateTime(date,time);
}",0.9913686806411838
6481,"@Override public int hashCode(){
  return projectid << description.hashCode() << plannedTime<< projectIdentifier.hashCode();
}","@Override public int hashCode(){
  int hashCode=23;
  hashCode=31 * projectid;
  hashCode=31 * projectIdentifier.hashCode();
  hashCode=31 * description.hashCode();
  hashCode=31 * projectManager.hashCode();
  hashCode=31 * plannedTime;
  return hashCode;
}",0.2349869451697128
6482,"public WorkSession(Usr user,WorkPackage workPackage,GregorianCalendar startTime,GregorianCalendar endTime){
  this.userRef=user;
  this.workPackageRef=workPackage;
  this.start=startTime;
  this.end=endTime;
}","public WorkSession(Usr user,WorkPackage workPackage,GregorianCalendar startTime,GregorianCalendar endTime){
  this.userRef=user;
  this.workPackageRef=workPackage;
  this.startTime=startTime;
  this.endTime=endTime;
}",0.8779342723004695
6483,"public GregorianCalendar getStart(){
  return start;
}","public GregorianCalendar getStart(){
  return startTime;
}",0.9642857142857144
6484,"public void setStart(GregorianCalendar start){
  this.start=start;
}","public void setStart(GregorianCalendar start){
  this.startTime=start;
}",0.9714285714285714
6485,"public void setEnd(GregorianCalendar end){
  this.end=end;
}","public void setEnd(GregorianCalendar end){
  this.endTime=end;
}",0.967741935483871
6486,"public GregorianCalendar getEnd(){
  return end;
}","public GregorianCalendar getEnd(){
  return endTime;
}",0.9615384615384616
6487,"/** 
 * Parses contents of an .ics file which is used in iCal, Outlook, etc. <p> <b>ICS FILE FORMAT:</b><br> An .ics file consists of multiple lines, each line beginning with a tag.  <p> <b>EXAMPLE WORKSESSION:</b> <br> BEGIN:VEVENT<br> CREATED:20100809T062219Z<br> UID:2DE909B3-96C6-4D7B-BB99-5CA7487C43A2<br> DTEND;TZID=Europe/Zurich:20100810T115000<br> TRANSP:OPAQUE<br> SUMMARY:Prog2<br> DTSTART;TZID=Europe/Zurich:20100810T101000<br> DTSTAMP:20100809T062304Z<br> SEQUENCE:4<br> END:VEVENT <p> An WorkSession starts with the tag ""BEGIN:VEVENT"" and should be closed by ""END:VEVENT"". A missing ""END:VEVENT"" could lead to missing WorkSessions as startTime and endTime might be overwritten. <p> Within a WorkSession the following tags may occur in any order: <ul> <li>SUMMARY:* 		WorkSession Name <li>DTEND;...:* 		End time <li>DTSTART;...:* 	Start time <li>RRULE:			Indicates a recurring WorkSession						 </ul> *: Mandatory tags <p> All other tags are ignored.
 * @param filePath path to the .ics file to parse.
 * @return a linked list containing all WorkSessions extracted from input file.
 */
public static LinkedList<WorkSession> parseIcsFile(String filePath){
  BufferedReader br;
  try {
    br=new BufferedReader(new FileReader(new File(filePath)));
    String currentLine;
    try {
      while ((currentLine=br.readLine()) != null) {
        WorkSession tmpWs=null;
        if (currentLine.startsWith(""String_Node_Str"")) {
          tmpWs=new WorkSession();
          int eventCount=1;
          int eventInterval=0;
          String eventFrequency=""String_Node_Str"";
          while (!((currentLine=br.readLine()) == null || currentLine.startsWith(""String_Node_Str""))) {
            if (currentLine.contains(""String_Node_Str"")) {
              tmpWs.setDescription(stripTag(currentLine));
            }
 else             if (currentLine.startsWith(""String_Node_Str"")) {
              QDateTime startTime=stringToQDateTime(currentLine);
              tmpWs.setStart(TimeUtil.convertQDateTimeCalToGregorianCal(startTime));
            }
 else             if (currentLine.startsWith(""String_Node_Str"")) {
              QDateTime endTime=stringToQDateTime(currentLine);
              tmpWs.setEnd(TimeUtil.convertQDateTimeCalToGregorianCal(endTime));
            }
 else             if (currentLine.startsWith(""String_Node_Str"")) {
              eventCount=getRecurringEventCount(currentLine);
              eventFrequency=getRecurringEventFrequency(currentLine);
              eventInterval=getRecurringEventInterval(currentLine);
            }
          }
          for (int i=0; i < eventCount; i++) {
            calendar.add(tmpWs);
            if (eventCount > 1) {
              tmpWs=createSubsequentWorkSession(tmpWs,eventFrequency,eventInterval,eventCount);
            }
          }
        }
      }
    }
 catch (    Exception e) {
    }
    try {
      br.close();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException e) {
    System.out.println(""String_Node_Str"" + filePath + ""String_Node_Str"");
  }
  return calendar;
}","/** 
 * Parses contents of an .ics file which is used in iCal, Outlook, etc. <p> <b>ICS FILE FORMAT:</b><br> An .ics file consists of multiple lines, each line beginning with a tag.  <p> <b>EXAMPLE EVENT:</b> <br> BEGIN:VEVENT<br> CREATED:20100809T062219Z<br> UID:2DE909B3-96C6-4D7B-BB99-5CA7487C43A2<br> DTEND;TZID=Europe/Zurich:20100810T115000<br> TRANSP:OPAQUE<br> SUMMARY:Prog2<br> DTSTART;TZID=Europe/Zurich:20100810T101000<br> DTSTAMP:20100809T062304Z<br> SEQUENCE:4<br> END:VEVENT <p> An WorkSession starts with the tag ""BEGIN:VEVENT"" and should be closed by ""END:VEVENT"". A missing ""END:VEVENT"" could lead to missing WorkSessions as startTime and endTime might be overwritten. <p> Within a WorkSession the following tags may occur in any order: <ul> <li>SUMMARY:* 		WorkSession Name <li>DTEND;...:* 		End time <li>DTSTART;...:* 	Start time </ul> *: Mandatory tags <p> All other tags are ignored.
 * @param filePath path to the .ics file to parse.
 * @return a linked list containing all WorkSessions extracted from input file.
 */
public static LinkedList<WorkSession> parseIcsFile(String filePath){
  BufferedReader br;
  try {
    br=new BufferedReader(new FileReader(new File(filePath)));
    String currentLine;
    try {
      while ((currentLine=br.readLine()) != null) {
        WorkSession tmpWs=null;
        if (currentLine.startsWith(""String_Node_Str"")) {
          tmpWs=new WorkSession();
          while (!((currentLine=br.readLine()) == null || currentLine.startsWith(""String_Node_Str""))) {
            if (currentLine.contains(""String_Node_Str"")) {
              tmpWs.setDescription(stripTag(currentLine));
            }
 else             if (currentLine.startsWith(""String_Node_Str"")) {
              QDateTime startTime=stringToQDateTime(currentLine);
              tmpWs.setStart(TimeUtil.convertQDateTimeCalToGregorianCal(startTime));
            }
 else             if (currentLine.startsWith(""String_Node_Str"")) {
              QDateTime endTime=stringToQDateTime(currentLine);
              tmpWs.setEnd(TimeUtil.convertQDateTimeCalToGregorianCal(endTime));
            }
          }
          if (isValidWorkSession(tmpWs)) {
            calendar.add(tmpWs);
          }
        }
      }
    }
 catch (    Exception e) {
    }
    try {
      br.close();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException e) {
    System.out.println(""String_Node_Str"" + filePath + ""String_Node_Str"");
  }
  return calendar;
}",0.6658371845005332
6488,"@Test public void parseIcsFile_invalidTimeDelimiter_onlyValidEventsProcessed(){
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarEquality(testCalendar,2);
  assert(testCalendar.size() == 2);
}","@Test public void parseIcsFile_invalidTimeDelimiter_onlyValidEventsProcessed(){
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarValidity(testCalendar,2);
}",0.9032258064516128
6489,"@Test public void parseIcsFile_summaryMissing_onlyValidEventsProcessed(){
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarEquality(testCalendar,2);
  assert(testCalendar.size() == 2);
}","@Test public void parseIcsFile_summaryMissing_onlyValidEventsProcessed(){
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarValidity(testCalendar,2);
}",0.9004739336492891
6490,"@Test public void parseIcsFile_allBeginVeventMissing_noEventsProcessed(){
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  assert(testCalendar.size() == 0);
}","@Test public void parseIcsFile_allBeginVeventMissing_noEventsProcessed(){
  testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  assertEquals(0,testCalendar.size());
}",0.8986301369863013
6491,"@Test public void parseIcsFile_Normal(){
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarEquality(testCalendar,3);
}","@Test public void parseIcsFile_Normal(){
  testCalendar.clear();
  testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarValidity(testCalendar,3);
}",0.86875
6492,"@Test public void parseIcsFile_startTimeEndTimeMissing_onlyValidEventsProcessed(){
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarEquality(testCalendar,1);
  assert(testCalendar.size() == 1);
}","@Test public void parseIcsFile_startTimeEndTimeMissing_onlyValidEventsProcessed(){
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarValidity(testCalendar,1);
}",0.8954545454545455
6493,"@Test public void parseIcsFile_endVCalendarMissing_allEventsProcessedNoException(){
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarEquality(testCalendar,3);
}","@Test public void parseIcsFile_endVCalendarMissing_allEventsProcessedNoException(){
  testCalendar.clear();
  testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarValidity(testCalendar,3);
}",0.8620689655172413
6494,"@Test public void parseIcsFile_invalidTimeFormat_onlyValidEventsProcessed(){
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarEquality(testCalendar,2);
  assert(testCalendar.size() == 2);
}","@Test public void parseIcsFile_invalidTimeFormat_onlyValidEventsProcessed(){
  LinkedList<WorkSession> testCalendar=IcsParser.parseIcsFile(""String_Node_Str"");
  calendarValidity(testCalendar,2);
}",0.9018691588785048
6495,"public static String hash(String input){
  MessageDigest digest=null;
  try {
    digest=java.security.MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  try {
    digest.update(input.getBytes(""String_Node_Str""));
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  byte[] hash=digest.digest();
  return byteArrayToString(hash);
}","public static String hash(String input){
  MessageDigest digest=null;
  byte[] hash=null;
  try {
    digest=java.security.MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  try {
    digest.update(input.getBytes(""String_Node_Str""));
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  if (digest != null) {
    hash=digest.digest();
  }
  return byteArrayToString(hash);
}",0.867335562987737
6496,"public List<Project> getInactiveProjects(){
  ArrayList<Project> inactiveProjects=new ArrayList<Project>();
  for (  Project p : projectList) {
    if (!p.isInactive()) {
      inactiveProjects.add(p);
    }
  }
  return inactiveProjects;
}","public List<Project> getInactiveProjects(){
  ArrayList<Project> inactiveProjects=new ArrayList<Project>();
  for (  Project p : projectList) {
    if (p.isInactive()) {
      inactiveProjects.add(p);
    }
  }
  return inactiveProjects;
}",0.9979123173277662
6497,"/** 
 * Generate code for EXI deserialization with C++. The code is created individually for each bean object.
 * @param elementMetadata Queue with metadata of XML elements
 * @param exiGrammar Object with schema-informed EXI grammar
 * @throws Exception Error during code generation
 */
private void generateDeserializeCode(final Queue<ElementMetadata> elementMetadata,Grammar exiGrammar) throws Exception {
  CppVar typeObject=CppVar.factory.create(Cpp.NONE,this.beanClassName + ""String_Node_Str"",""String_Node_Str"");
  CppVar streamObject=CppVar.factory.create(Cpp.NONE,""String_Node_Str"",""String_Node_Str"");
  CppVar functionPointer=CppVar.factory.create(Cpp.NONE,""String_Node_Str"",""String_Node_Str"");
  CppFun deserialize=CppFun.factory.create(""String_Node_Str"",""String_Node_Str"",typeObject,streamObject,functionPointer);
  String deserializerCode=""String_Node_Str"";
  while (!elementMetadata.isEmpty()) {
    ElementMetadata element=elementMetadata.poll();
    deserializerCode+=CppEXIConverter.createNiceCommentDelimiter(String.format(""String_Node_Str"",element.getElementName())) + ""String_Node_Str"";
    deserializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"",element.getElementCppType(),element.getElementName().toLowerCase());
switch (element.getType()) {
case ElementMetadata.XML_ATOMIC_VALUE:
      deserializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",element.getElementEXIType(),element.getElementName().toLowerCase(),element.getElementName(),element.getElementName().toLowerCase());
    break;
case ElementMetadata.XML_LOCAL_ELEMENT:
  deserializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",element.getElementEXIType(),element.getElementName().toLowerCase(),element.getParentName(),element.getElementName(),element.getElementName().toLowerCase());
break;
case ElementMetadata.XML_ARRAY:
deserializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",0,element.getParentName(),element.getElementName(),element.getElementEXIType(),element.getElementName().toLowerCase(),element.getParentName(),element.getElementName(),element.getElementName().toLowerCase());
break;
case ElementMetadata.XML_LIST:
deserializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",element.getElementName(),element.getElementEXIType(),element.getElementName().toLowerCase(),element.getElementName(),element.getElementName().toLowerCase());
break;
default :
throw new FabricEXIException(""String_Node_Str"");
}
}
String methodBody=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",deserializerCode);
deserialize.appendCode(methodBody);
deserialize.setComment(new CCommentImpl(String.format(""String_Node_Str"",this.beanClassName)));
this.serializerClass.add(Cpp.PUBLIC,deserialize);
}","/** 
 * Generate code for EXI deserialization with C++. The code is created individually for each bean object.
 * @param elementMetadata Queue with metadata of XML elements
 * @param exiGrammar Object with schema-informed EXI grammar
 * @throws Exception Error during code generation
 */
private void generateDeserializeCode(final Queue<ElementMetadata> elementMetadata,Grammar exiGrammar) throws Exception {
  CppVar typeObject=CppVar.factory.create(Cpp.NONE,this.beanClassName + ""String_Node_Str"",""String_Node_Str"");
  CppVar streamObject=CppVar.factory.create(Cpp.NONE,""String_Node_Str"",""String_Node_Str"");
  CppVar functionPointer=CppVar.factory.create(Cpp.NONE,""String_Node_Str"",""String_Node_Str"");
  CppFun deserialize=CppFun.factory.create(""String_Node_Str"",""String_Node_Str"",typeObject,streamObject,functionPointer);
  String deserializerCode=""String_Node_Str"";
  while (!elementMetadata.isEmpty()) {
    ElementMetadata element=elementMetadata.poll();
    deserializerCode+=CppEXIConverter.createNiceCommentDelimiter(String.format(""String_Node_Str"",element.getElementName())) + ""String_Node_Str"";
    deserializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"",element.getElementCppType(),element.getElementName().toLowerCase());
switch (element.getType()) {
case ElementMetadata.XML_ATOMIC_VALUE:
      deserializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",element.getElementEXIType(),element.getElementName().toLowerCase(),this.firstLetterCapital(element.getElementName()),element.getElementName().toLowerCase());
    break;
case ElementMetadata.XML_LOCAL_ELEMENT:
  deserializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",element.getElementEXIType(),element.getElementName().toLowerCase(),this.firstLetterCapital(element.getParentName()),this.firstLetterCapital(element.getElementName()),element.getElementName().toLowerCase());
break;
case ElementMetadata.XML_ARRAY:
deserializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",0,this.firstLetterCapital(element.getParentName()),this.firstLetterCapital(element.getElementName()),element.getElementEXIType(),element.getElementName().toLowerCase(),this.firstLetterCapital(element.getParentName()),this.firstLetterCapital(element.getElementName()),element.getElementName().toLowerCase());
break;
case ElementMetadata.XML_LIST:
deserializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",this.firstLetterCapital(element.getElementName()),element.getElementEXIType(),element.getElementName().toLowerCase(),this.firstLetterCapital(element.getElementName()),element.getElementName().toLowerCase());
break;
default :
throw new FabricEXIException(""String_Node_Str"");
}
}
String methodBody=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",deserializerCode);
deserialize.appendCode(methodBody);
deserialize.setComment(new CCommentImpl(String.format(""String_Node_Str"",this.beanClassName)));
this.serializerClass.add(Cpp.PUBLIC,deserialize);
}",0.933368799042426
6498,"/** 
 * Generate code for EXI serialization with C++. The code is created individually for each bean object.
 * @param elementMetadata Queue with metadata of XML elements
 * @param exiGrammar Object with schema-informed EXI grammar
 * @throws Exception Error during code generation
 */
private void generateSerializeCode(final Queue<ElementMetadata> elementMetadata,Grammar exiGrammar) throws Exception {
  CppVar typeObject=CppVar.factory.create(Cpp.NONE,this.beanClassName + ""String_Node_Str"",""String_Node_Str"");
  CppVar streamObject=CppVar.factory.create(Cpp.NONE,""String_Node_Str"",""String_Node_Str"");
  CppVar functionPointer=CppVar.factory.create(Cpp.NONE,""String_Node_Str"",""String_Node_Str"");
  CppFun serialize=CppFun.factory.create(""String_Node_Str"",""String_Node_Str"",typeObject,streamObject,functionPointer);
  String serializerCode=""String_Node_Str"";
  while (!elementMetadata.isEmpty()) {
    ElementMetadata element=elementMetadata.poll();
    serializerCode+=CppEXIConverter.createNiceCommentDelimiter(String.format(""String_Node_Str"",element.getElementName())) + ""String_Node_Str"";
switch (element.getType()) {
case ElementMetadata.XML_ATOMIC_VALUE:
      serializerCode+=String.format(""String_Node_Str"",element.getElementEXIType(),element.getElementName());
    break;
case ElementMetadata.XML_LOCAL_ELEMENT:
  serializerCode+=String.format(""String_Node_Str"",element.getElementEXIType(),element.getParentName(),element.getElementName());
break;
case ElementMetadata.XML_ARRAY:
serializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",element.getParentName(),element.getElementName(),0,element.getElementEXIType(),element.getParentName(),element.getElementName());
break;
case ElementMetadata.XML_LIST:
serializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",0,element.getElementName(),element.getElementEXIType(),element.getElementName());
break;
default :
throw new FabricEXIException(""String_Node_Str"");
}
}
String methodBody=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",serializerCode);
serialize.appendCode(methodBody);
serialize.setComment(new CCommentImpl(String.format(""String_Node_Str"",this.beanClassName)));
this.serializerClass.add(Cpp.PUBLIC,serialize);
}","/** 
 * Generate code for EXI serialization with C++. The code is created individually for each bean object.
 * @param elementMetadata Queue with metadata of XML elements
 * @param exiGrammar Object with schema-informed EXI grammar
 * @throws Exception Error during code generation
 */
private void generateSerializeCode(final Queue<ElementMetadata> elementMetadata,Grammar exiGrammar) throws Exception {
  CppVar typeObject=CppVar.factory.create(Cpp.NONE,this.beanClassName + ""String_Node_Str"",""String_Node_Str"");
  CppVar streamObject=CppVar.factory.create(Cpp.NONE,""String_Node_Str"",""String_Node_Str"");
  CppVar functionPointer=CppVar.factory.create(Cpp.NONE,""String_Node_Str"",""String_Node_Str"");
  CppFun serialize=CppFun.factory.create(""String_Node_Str"",""String_Node_Str"",typeObject,streamObject,functionPointer);
  String serializerCode=""String_Node_Str"";
  while (!elementMetadata.isEmpty()) {
    ElementMetadata element=elementMetadata.poll();
    serializerCode+=CppEXIConverter.createNiceCommentDelimiter(String.format(""String_Node_Str"",element.getElementName())) + ""String_Node_Str"";
switch (element.getType()) {
case ElementMetadata.XML_ATOMIC_VALUE:
      serializerCode+=String.format(""String_Node_Str"",element.getElementEXIType(),this.firstLetterCapital(element.getElementName()));
    break;
case ElementMetadata.XML_LOCAL_ELEMENT:
  serializerCode+=String.format(""String_Node_Str"",element.getElementEXIType(),this.firstLetterCapital(element.getParentName()),this.firstLetterCapital(element.getElementName()));
break;
case ElementMetadata.XML_ARRAY:
serializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",this.firstLetterCapital(element.getParentName()),this.firstLetterCapital(element.getElementName()),0,element.getElementEXIType(),this.firstLetterCapital(element.getParentName()),this.firstLetterCapital(element.getElementName()));
break;
case ElementMetadata.XML_LIST:
serializerCode+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",0,this.firstLetterCapital(element.getElementName()),element.getElementEXIType(),this.firstLetterCapital(element.getElementName()));
break;
default :
throw new FabricEXIException(""String_Node_Str"");
}
}
String methodBody=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",serializerCode);
serialize.appendCode(methodBody);
serialize.setComment(new CCommentImpl(String.format(""String_Node_Str"",this.beanClassName)));
this.serializerClass.add(Cpp.PUBLIC,serialize);
}",0.9111859599361816
6499,"/** 
 * Generates the .hpp file in the given workspace.
 * @param workspace
 * @throws Exception
 */
private static void createHeader(Workspace workspace) throws Exception {
  headerFile=workspace.getC().getCppHeaderFile(CppEXIStreamGenerator.FILE_NAME);
  headerFile.setComment(new CCommentImpl(""String_Node_Str""));
  headerFile.addInclude(CppTypeHelper.FILE_NAME + ""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.add(CppTypeDef.factory.create(Cpp.INT,""String_Node_Str""));
  CStruct streamContext=CStruct.factory.create(""String_Node_Str"",""String_Node_Str"",true,CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""));
  streamContext.setComment(new CCommentImpl(""String_Node_Str"" + ""String_Node_Str""));
  headerFile.add(streamContext);
  CStruct ioStream=CStruct.factory.create(""String_Node_Str"",""String_Node_Str"",true,CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""));
  ioStream.setComment(new CCommentImpl(""String_Node_Str""));
  headerFile.add(ioStream);
  CStruct exiStream=CStruct.factory.create(""String_Node_Str"",""String_Node_Str"",true,CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""));
  exiStream.setComment(new CCommentImpl(""String_Node_Str""));
  headerFile.add(exiStream);
  headerFile.add(clazz);
  headerFile.addAfterDirective(""String_Node_Str"");
}","/** 
 * Generates the .hpp file in the given workspace.
 * @param workspace
 * @throws Exception
 */
private static void createHeader(Workspace workspace) throws Exception {
  headerFile=workspace.getC().getCppHeaderFile(CppEXIStreamGenerator.FILE_NAME);
  headerFile.setComment(new CCommentImpl(""String_Node_Str""));
  headerFile.addInclude(CppTypeHelper.FILE_NAME + ""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.add(CppTypeDef.factory.create(""String_Node_Str"",""String_Node_Str""));
  CStruct streamContext=CStruct.factory.create(""String_Node_Str"",""String_Node_Str"",true,CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""));
  streamContext.setComment(new CCommentImpl(""String_Node_Str"" + ""String_Node_Str""));
  headerFile.add(streamContext);
  CStruct ioStream=CStruct.factory.create(""String_Node_Str"",""String_Node_Str"",true,CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""));
  ioStream.setComment(new CCommentImpl(""String_Node_Str""));
  headerFile.add(ioStream);
  CStruct exiStream=CStruct.factory.create(""String_Node_Str"",""String_Node_Str"",true,CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""));
  exiStream.setComment(new CCommentImpl(""String_Node_Str""));
  headerFile.add(exiStream);
  headerFile.add(clazz);
  headerFile.addAfterDirective(""String_Node_Str"");
}",0.981651376146789
6500,"/** 
 * Generates the member variables strm and bit_masks in the class.
 * @throws CppCodeValidationException
 * @throws CppDuplicateException
 */
private static void createVariables() throws CppCodeValidationException, CppDuplicateException {
  CppVar var_strm=CppVar.factory.create(Cpp.PRIVATE,""String_Node_Str"",""String_Node_Str"");
  var_strm.setComment(new CCommentImpl(""String_Node_Str""));
  clazz.add(var_strm);
  CppVar var_masks=CppVar.factory.create(Cpp.PRIVATE | Cpp.CONST,""String_Node_Str"",""String_Node_Str"");
  var_masks.setComment(new CCommentImpl(""String_Node_Str""));
  clazz.add(var_masks);
}","/** 
 * Generates the member variables strm and bit_masks in the class.
 * @throws CppCodeValidationException
 * @throws CppDuplicateException
 */
private static void createVariables() throws CppCodeValidationException, CppDuplicateException {
  CppVar var_strm=CppVar.factory.create(Cpp.PRIVATE,""String_Node_Str"",""String_Node_Str"");
  var_strm.setComment(new CCommentImpl(""String_Node_Str""));
  clazz.add(var_strm);
  CppVar var_masks=CppVar.factory.create(Cpp.PRIVATE,Cpp.UNSIGNED | Cpp.INT,""String_Node_Str"");
  var_masks.setComment(new CCommentImpl(""String_Node_Str""));
  clazz.add(var_masks);
  CppConstructor constr=CppConstructor.factory.create();
  constr.appendCode(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  clazz.add(Cpp.PUBLIC,constr);
}",0.7849462365591398
6501,"/** 
 * Generates the .hpp file in the given workspace.
 * @param workspace
 * @throws Exception
 */
private static void createHeader(Workspace workspace) throws Exception {
  headerFile=workspace.getC().getCppHeaderFile(CppEXIStreamGenerator.FILE_NAME);
  headerFile.setComment(new CCommentImpl(""String_Node_Str""));
  headerFile.addInclude(CppTypeHelper.FILE_NAME + ""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.add(CppVar.factory.create(Cpp.CONST | Cpp.UNSIGNED | Cpp.CHAR,""String_Node_Str""));
  CStruct streamContext=CStruct.factory.create(""String_Node_Str"",""String_Node_Str"",true,CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""));
  streamContext.setComment(new CCommentImpl(""String_Node_Str"" + ""String_Node_Str""));
  headerFile.add(streamContext);
  CStruct ioStream=CStruct.factory.create(""String_Node_Str"",""String_Node_Str"",true,CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""));
  ioStream.setComment(new CCommentImpl(""String_Node_Str""));
  headerFile.add(ioStream);
  CStruct exiStream=CStruct.factory.create(""String_Node_Str"",""String_Node_Str"",true,CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""));
  exiStream.setComment(new CCommentImpl(""String_Node_Str""));
  headerFile.add(exiStream);
  headerFile.add(clazz);
  headerFile.addAfterDirective(""String_Node_Str"");
}","/** 
 * Generates the .hpp file in the given workspace.
 * @param workspace
 * @throws Exception
 */
private static void createHeader(Workspace workspace) throws Exception {
  headerFile=workspace.getC().getCppHeaderFile(CppEXIStreamGenerator.FILE_NAME);
  headerFile.setComment(new CCommentImpl(""String_Node_Str""));
  headerFile.addInclude(CppTypeHelper.FILE_NAME + ""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.addBeforeDirective(""String_Node_Str"");
  headerFile.add(CppTypeDef.factory.create(Cpp.INT,""String_Node_Str""));
  CStruct streamContext=CStruct.factory.create(""String_Node_Str"",""String_Node_Str"",true,CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""));
  streamContext.setComment(new CCommentImpl(""String_Node_Str"" + ""String_Node_Str""));
  headerFile.add(streamContext);
  CStruct ioStream=CStruct.factory.create(""String_Node_Str"",""String_Node_Str"",true,CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""));
  ioStream.setComment(new CCommentImpl(""String_Node_Str""));
  headerFile.add(ioStream);
  CStruct exiStream=CStruct.factory.create(""String_Node_Str"",""String_Node_Str"",true,CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""),CParam.factory.create(""String_Node_Str"",""String_Node_Str""));
  exiStream.setComment(new CCommentImpl(""String_Node_Str""));
  headerFile.add(exiStream);
  headerFile.add(clazz);
  headerFile.addAfterDirective(""String_Node_Str"");
}",0.952
6502,"/** 
 * Generates the C++ class EXIStream.
 */
private static void createClass() throws CppDuplicateException, CppCodeValidationException {
  clazz=CppClass.factory.create(""String_Node_Str"");
  CppEXIStreamGenerator.createStreamVariable();
  CppEXIStreamGenerator.createInitStream();
  CppEXIStreamGenerator.createCloseStream();
  CppEXIStreamGenerator.createWriteNextBit();
  CppEXIStreamGenerator.createWriteNBits();
  CppEXIStreamGenerator.createLog2Int();
  CppEXIStreamGenerator.createGetBitsNumber();
  CppEXIStreamGenerator.createMoveBitPointer();
}","/** 
 * Generates the C++ class EXIStream.
 */
private static void createClass() throws CppDuplicateException, CppCodeValidationException {
  clazz=CppClass.factory.create(""String_Node_Str"");
  CppEXIStreamGenerator.createVariables();
  CppEXIStreamGenerator.createInitStream();
  CppEXIStreamGenerator.createCloseStream();
  CppEXIStreamGenerator.createWriteNextBit();
  CppEXIStreamGenerator.createWriteNBits();
  CppEXIStreamGenerator.createLog2Int();
  CppEXIStreamGenerator.createGetBitsNumber();
  CppEXIStreamGenerator.createMoveBitPointer();
}",0.993676603432701
6503,"/** 
 * Private helper method to check, whether a member variable is a local enum within the CppClass object or not. This function is being used, to determine necessary includes in writeSourceFiles().
 * @param classObject Class object with possible local enums
 * @param member Member variable to check
 * @return True if member variable is a local enum,false otherwise
 */
private boolean isLocalEnum(final CppClass classObject,final CppVar member){
  boolean result=false;
  for (  CEnum enumElement : classObject.getEnums(Cpp.PUBLIC)) {
    if (enumElement.getName().equals(member.getName())) {
      result=true;
    }
  }
  return result;
}","/** 
 * Private helper method to check, whether a type names a local enum within the CppClass object or not. This function is being used, to determine necessary includes in writeSourceFiles().
 * @param classObject Class object with possible local enums
 * @param typeName Type name to check
 * @return True if type names a local enum, false otherwise
 */
private boolean isLocalEnum(final CppClass classObject,final String typeName){
  boolean result=false;
  for (  CEnum enumElement : classObject.getEnums(Cpp.PUBLIC)) {
    if (enumElement.getName().equals(typeName)) {
      result=true;
    }
  }
  return result;
}",0.89344909234412
6504,"/** 
 * Private helper method to extract the plain type name from typed collections (e.g. vector<T>). If the type definition is not a typed collection, it will be returned unchanged. For example 'vector<FooType>' will return 'FooType', whereas 'BarType' will remain unchanged.
 * @param typeDefinition Type definition that may or maynot contain a typed collection (e.g. a vector)
 * @return Plain type name
 */
private static String extractPlainType(final String typeDefinition){
  String result=typeDefinition;
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(typeDefinition);
  if (matcher.find()) {
    result=matcher.group(1);
  }
  return result;
}","/** 
 * Private helper method to extract the plain type name from typed collections (e.g. vector<T>). If the type definition is not a typed collection, it will be returned unchanged. For example 'vector<FooType*>' will return 'FooType*', whereas 'BarType' will remain unchanged.
 * @param typeDefinition Type definition that may or maynot contain a typed collection (e.g. a vector)
 * @return Plain type name
 */
private static String extractPlainType(final String typeDefinition){
  String result=typeDefinition;
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(typeDefinition);
  if (matcher.find()) {
    result=matcher.group(1);
  }
  return result;
}",0.9985569985569984
6505,"/** 
 * Create source files from container classes and write them to the language-specific workspace.
 * @throws Exception Error during source file write-out
 */
@Override public void writeSourceFiles() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    LOGGER.error(String.format(""String_Node_Str"",this.incompleteBuilders.size()));
    throw new IllegalStateException(""String_Node_Str"");
  }
  CWorkspace cWorkspace=this.workspace.getC();
  CppHeaderFile cpphf=null;
  CppSourceFile cppsf=null;
  CppTypeHelper.init(workspace);
  CppUtilHelper.init(workspace);
  for (  String name : this.generatedElements.keySet()) {
    CppTypeGen.SourceFileData sourceFileData=this.generatedElements.get(name);
    cpphf=cWorkspace.getCppHeaderFile(name);
    cpphf.add(sourceFileData.typeObject);
    cpphf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    if (!cpphf.getFileName().equals(CppTypeHelper.FILE_NAME)) {
      cpphf.addInclude(CppTypeHelper.FILE_NAME + ""String_Node_Str"");
    }
    for (    String requiredInclude : sourceFileData.requiredIncludes) {
      if ((""String_Node_Str"").equals(requiredInclude)) {
        cpphf.addLibInclude(requiredInclude);
      }
 else {
        cpphf.addInclude(requiredInclude);
      }
    }
    for (    CppVar member : sourceFileData.typeObject.getVars(Cpp.PRIVATE)) {
      String typeName=CppTypeGen.extractPlainType(member.getName());
      if (!this.mapper.isBuiltInType(typeName) && !this.isLocalEnum(sourceFileData.typeObject,member) && !typeName.equals(name)&& !cpphf.containsInclude(CppTypeGen.createIncludeFileName(typeName))&& !this.incompleteLocalBuilders.containsKey(name)) {
        cpphf.addInclude(CppTypeGen.createIncludeFileName(typeName));
      }
    }
    for (    CppClass classObject : sourceFileData.typeObject.getNested(Cpp.PUBLIC)) {
      for (      CppVar member : classObject.getVars(Cpp.PRIVATE)) {
        String typeName=CppTypeGen.extractPlainType(member.getName());
        if (!this.mapper.isBuiltInType(typeName) && !this.isLocalEnum(classObject,member) && !typeName.equals(name)&& !cpphf.containsInclude(CppTypeGen.createIncludeFileName(typeName))) {
          cpphf.addInclude(CppTypeGen.createIncludeFileName(typeName));
        }
      }
    }
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addAfterDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    LOGGER.debug(String.format(""String_Node_Str"",name));
    cppsf=cWorkspace.getCppSourceFile(name);
    cppsf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    cppsf.addInclude(cpphf);
    if (!cppsf.getFileName().equals(CppUtilHelper.FILE_NAME)) {
      cppsf.addInclude(CppUtilHelper.FILE_NAME + ""String_Node_Str"");
    }
    LOGGER.debug(String.format(""String_Node_Str"",name));
  }
  this.createMainApplication();
}","/** 
 * Create source files from container classes and write them to the language-specific workspace.
 * @throws Exception Error during source file write-out
 */
@Override public void writeSourceFiles() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    LOGGER.error(String.format(""String_Node_Str"",this.incompleteBuilders.size()));
    throw new IllegalStateException(""String_Node_Str"");
  }
  CWorkspace cWorkspace=this.workspace.getC();
  CppHeaderFile cpphf=null;
  CppSourceFile cppsf=null;
  CppTypeHelper.init(workspace);
  CppUtilHelper.init(workspace);
  for (  String name : this.generatedElements.keySet()) {
    CppTypeGen.SourceFileData sourceFileData=this.generatedElements.get(name);
    cpphf=cWorkspace.getCppHeaderFile(name);
    cpphf.add(sourceFileData.typeObject);
    cpphf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    if (!cpphf.getFileName().equals(CppTypeHelper.FILE_NAME)) {
      cpphf.addInclude(CppTypeHelper.FILE_NAME + ""String_Node_Str"");
    }
    for (    String requiredInclude : sourceFileData.requiredIncludes) {
      if ((""String_Node_Str"").equals(requiredInclude)) {
        cpphf.addLibInclude(requiredInclude);
      }
 else {
        cpphf.addInclude(requiredInclude);
      }
    }
    for (    CppVar member : sourceFileData.typeObject.getVars(Cpp.PRIVATE)) {
      String typeName=CppTypeGen.extractPlainType(member.getName());
      if (!this.mapper.isBuiltInType(typeName) && !this.isLocalEnum(sourceFileData.typeObject,typeName) && !typeName.equals(name)&& !cpphf.containsInclude(CppTypeGen.createIncludeFileName(typeName))&& !this.isInnerClass(sourceFileData.typeObject,typeName)) {
        cpphf.addInclude(CppTypeGen.createIncludeFileName(typeName));
      }
    }
    for (    CppClass classObject : sourceFileData.typeObject.getNested(Cpp.PUBLIC)) {
      for (      CppVar member : classObject.getVars(Cpp.PRIVATE)) {
        String typeName=CppTypeGen.extractPlainType(member.getName());
        if (!this.mapper.isBuiltInType(typeName) && !this.isLocalEnum(classObject,typeName) && !typeName.equals(name)&& !cpphf.containsInclude(CppTypeGen.createIncludeFileName(typeName))) {
          cpphf.addInclude(CppTypeGen.createIncludeFileName(typeName));
        }
      }
    }
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addAfterDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    LOGGER.debug(String.format(""String_Node_Str"",name));
    cppsf=cWorkspace.getCppSourceFile(name);
    cppsf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    cppsf.addInclude(cpphf);
    if (!cppsf.getFileName().equals(CppUtilHelper.FILE_NAME)) {
      cppsf.addInclude(CppUtilHelper.FILE_NAME + ""String_Node_Str"");
    }
    LOGGER.debug(String.format(""String_Node_Str"",name));
  }
  this.createMainApplication();
}",0.982316972401256
6506,"public CppClass addExtended(long vis,String... extendeds) throws CppDuplicateException {
  for (  String e : extendeds) {
    String tmp=Cpp.toString(vis) + ""String_Node_Str"" + e;
    if (this.extendeds_string.contains(tmp)) {
      throw new CppDuplicateException(this.className + ""String_Node_Str"" + tmp);
    }
    this.extendeds_string.add(tmp);
  }
  return this;
}","public CppClass addExtended(long vis,String... extendeds) throws CppDuplicateException {
  for (  String e : extendeds) {
    String tmp=Cpp.toString(vis) + ""String_Node_Str"" + e;
    if (this.extendeds_string.contains(tmp)) {
      throw new CppDuplicateException(""String_Node_Str"" + tmp + ""String_Node_Str"");
    }
    for (    VisElem ex : this.extendeds) {
      if (ex.elem instanceof CppClass) {
        CppClass clazz=(CppClass)ex.elem;
        if (clazz.getName().equals(e)) {
          throw new CppDuplicateException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
        }
      }
    }
    this.extendeds_string.add(tmp);
  }
  return this;
}",0.6685990338164252
6507,"private void addExtendedInternal(long vis,CppClass extended) throws CppDuplicateException {
  if (containsExtended(extended))   throw new CppDuplicateException(""String_Node_Str"");
  extendeds.add(new VisElem(extended,vis));
}","private void addExtendedInternal(long vis,CppClass extended) throws CppDuplicateException {
  if (containsExtended(extended)) {
    throw new CppDuplicateException(""String_Node_Str"" + extended.getName() + ""String_Node_Str"");
  }
  if (this.extendeds_string.contains(extended.getName())) {
    throw new CppDuplicateException(""String_Node_Str"");
  }
  extendeds.add(new VisElem(extended,vis));
}",0.7269789983844911
6508,"public List<String> getExtendeds(){
  List<String> e=new LinkedList<String>();
  for (  String ex : this.extendeds) {
    e.add(ex);
  }
  for (  CppConstructor ex : this.extendeds_con) {
    e.add(ex.getSignature());
  }
  return e;
}","public List<String> getExtendeds(){
  List<String> e=new LinkedList<String>();
  e.addAll(this.extendeds);
  for (  CppConstructor ex : this.extendeds_con) {
    e.add(ex.getSignature());
  }
  return e;
}",0.8863636363636364
6509,"@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getLibIncludes() && this.base.getLibIncludes().size() > 0) {
    for (    String include : this.base.getLibIncludes()) {
      buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppUserHeaderFiles && this.cppUserHeaderFiles.size() > 0) {
    for (    CppSourceFile file : this.cppUserHeaderFiles) {
      buffer.append(""String_Node_Str"" + file.getFileName() + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.beforeDirectives && this.base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : this.base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppNamespaces && this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getTypeDefs() && base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getEnums() && this.base.getEnums().size() > 0) {
    for (    CEnum e : this.base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.structsUnions && this.base.structsUnions.size() > 0) {
    for (    CStructBaseImpl struct : base.structsUnions) {
      buffer.append(struct.toString() + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppClasses && this.cppClasses.size() > 0) {
    for (    CppClass c : this.cppClasses) {
      buffer.append(c.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppClasses && this.cppClasses.size() > 0) {
    for (    CppClass c : this.cppClasses) {
      toStringHelper(buffer,c,tabCount);
    }
  }
  if (null != this.cppUserHeaderFiles && this.cppUserHeaderFiles.size() > 0) {
    for (    CppSourceFileImpl file : this.cppUserHeaderFiles) {
      if (null != file.getCppClasses() && file.getCppClasses().length > 0) {
        for (        CppClass c : file.getCppClasses()) {
          toStringHelper(buffer,c,tabCount);
        }
      }
    }
  }
  if (null != this.cppVars && this.cppVars.size() > 0) {
    for (    CppVar v : this.cppVars) {
      buffer.append(v.toString() + ""String_Node_Str"" + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getFuns() && this.base.getFuns().size() > 0) {
    for (    CFun fun : this.base.getFuns()) {
      fun.toString(buffer,tabCount);
    }
  }
  if (null != this.base && null != this.base.afterDirectives && base.afterDirectives.size() > 0) {
    buffer.append(Cpp.newline);
    for (    CPreProcessorDirectiveImpl ppd : this.base.afterDirectives) {
      buffer.append(Cpp.newline);
      ppd.toString(buffer,tabCount);
    }
    buffer.append(Cpp.newline);
  }
  buffer.append(Cpp.newline);
}","@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getLibIncludes() && this.base.getLibIncludes().size() > 0) {
    for (    String include : this.base.getLibIncludes()) {
      if (include.endsWith(""String_Node_Str"")) {
        buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
      }
 else {
        buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
      }
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppUserHeaderFiles && this.cppUserHeaderFiles.size() > 0) {
    for (    CppSourceFile file : this.cppUserHeaderFiles) {
      buffer.append(""String_Node_Str"" + file.getFileName() + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.beforeDirectives && this.base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : this.base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppNamespaces && this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getTypeDefs() && base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getEnums() && this.base.getEnums().size() > 0) {
    for (    CEnum e : this.base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.structsUnions && this.base.structsUnions.size() > 0) {
    for (    CStructBaseImpl struct : base.structsUnions) {
      buffer.append(struct.toString() + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppClasses && this.cppClasses.size() > 0) {
    for (    CppClass c : this.cppClasses) {
      buffer.append(c.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppClasses && this.cppClasses.size() > 0) {
    for (    CppClass c : this.cppClasses) {
      toStringHelper(buffer,c,tabCount);
    }
  }
  if (null != this.cppUserHeaderFiles && this.cppUserHeaderFiles.size() > 0) {
    for (    CppSourceFileImpl file : this.cppUserHeaderFiles) {
      if (null != file.getCppClasses() && file.getCppClasses().length > 0) {
        for (        CppClass c : file.getCppClasses()) {
          toStringHelper(buffer,c,tabCount);
        }
      }
    }
  }
  if (null != this.cppVars && this.cppVars.size() > 0) {
    for (    CppVar v : this.cppVars) {
      buffer.append(v.toString() + ""String_Node_Str"" + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getFuns() && this.base.getFuns().size() > 0) {
    for (    CFun fun : this.base.getFuns()) {
      fun.toString(buffer,tabCount);
    }
  }
  if (null != this.base && null != this.base.afterDirectives && base.afterDirectives.size() > 0) {
    buffer.append(Cpp.newline);
    for (    CPreProcessorDirectiveImpl ppd : this.base.afterDirectives) {
      buffer.append(Cpp.newline);
      ppd.toString(buffer,tabCount);
    }
    buffer.append(Cpp.newline);
  }
  buffer.append(Cpp.newline);
}",0.9697574893009986
6510,"/** 
 * This method returns a class object that can be added to a source file. Return value should be casted to CppClass before further use. The returned class has public visibility.
 * @param container AttributeContainer for conversion
 * @return Generated WorkspaceElement object
 * @throws Exception Error during class object generation
 */
@Override public WorkspaceElement generateClassObject(final AttributeContainer container) throws Exception {
  return this.generateCppClassObject(container,null);
}","/** 
 * This method returns a class object that can be added to a source file. Return value should be casted to CppClass before further use. The returned class will be an extended version of the given parent class.
 * @param container AttributeContainer for conversion
 * @param parent Name of parent class for inheritance
 * @return Generated WorkspaceElement object
 * @throws Exception Error during class object generation
 */
public WorkspaceElement generateClassObject(final AttributeContainer container,final String parent) throws Exception {
  return this.generateCppClassObject(container,parent);
}",0.7163375224416517
6511,"/** 
 * Helper method to create a string that enforces the 'whiteSpace' restriction on the given member variable. Possible values for 'whiteSpace' are 'preserve', 'replace' and 'collapse'. Value 'preserve' means that the value of the member variable remains unchanged. Value 'replace' means that all whitespace characters (line feeds, tabs, spaces and carriage returns) will be replaced by spaces. Value 'collapse' means that multiple whitespace characters will be replaced with a single space plus leading and tailing whitespace characters will be trimmed.
 * @param memberName Name of member variable to check
 * @param whiteSpace Either 'preserve', 'replace' or 'collapse'
 * @return String that enforces 'whiteSpace' restriction
 * @throws Exception Invalid value for 'whiteSpace' provided
 */
public static String createWhiteSpaceCheckCode(final String memberName,final String whiteSpace) throws Exception {
  String result=""String_Node_Str"";
  String message=""String_Node_Str"";
  if ((""String_Node_Str"").equals(whiteSpace)) {
    result+=String.format(message,""String_Node_Str"");
    result+=String.format(""String_Node_Str"",memberName,memberName);
  }
 else   if ((""String_Node_Str"").equals(whiteSpace)) {
    result+=String.format(message,""String_Node_Str"");
    result+=""String_Node_Str"";
    result+=String.format(""String_Node_Str"",memberName);
    result+=String.format(""String_Node_Str"",memberName,memberName,memberName);
  }
 else   if ((""String_Node_Str"").equals(whiteSpace)) {
    result+=String.format(message,""String_Node_Str"");
    result+=String.format(""String_Node_Str"",memberName);
    result+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
    result+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",memberName,memberName);
    result+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",memberName,memberName,memberName);
  }
 else {
    throw new FabricTypeGenException(String.format(""String_Node_Str"" + ""String_Node_Str"",whiteSpace,memberName));
  }
  result+=""String_Node_Str"";
  return result;
}","/** 
 * Helper method to create a string that enforces the 'whiteSpace' restriction on the given member variable. Possible values for 'whiteSpace' are 'preserve', 'replace' and 'collapse'. Value 'preserve' means that the value of the member variable remains unchanged. Value 'replace' means that all whitespace characters (line feeds, tabs, spaces and carriage returns) will be replaced by spaces. Value 'collapse' means that multiple whitespace characters will be replaced with a single space plus leading and tailing whitespace characters will be trimmed.
 * @param memberName Name of member variable to check
 * @param whiteSpace Either 'preserve', 'replace' or 'collapse'
 * @return String that enforces 'whiteSpace' restriction
 * @throws Exception Invalid value for 'whiteSpace' provided
 */
public static String createWhiteSpaceCheckCode(final String memberName,final String whiteSpace) throws Exception {
  String result=""String_Node_Str"";
  String message=""String_Node_Str"";
  if ((""String_Node_Str"").equals(whiteSpace)) {
    result+=String.format(message,""String_Node_Str"");
    result+=String.format(""String_Node_Str"",memberName,memberName);
  }
 else   if ((""String_Node_Str"").equals(whiteSpace)) {
    result+=String.format(message,""String_Node_Str"");
    result+=""String_Node_Str"";
    result+=String.format(""String_Node_Str"",memberName);
    result+=String.format(""String_Node_Str"",memberName,memberName,memberName);
  }
 else   if ((""String_Node_Str"").equals(whiteSpace)) {
    result+=String.format(message,""String_Node_Str"");
    result+=String.format(""String_Node_Str"" + ""String_Node_Str"",memberName);
    result+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
    result+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",memberName,memberName);
    result+=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",memberName,memberName,memberName);
  }
 else {
    throw new FabricTypeGenException(String.format(""String_Node_Str"" + ""String_Node_Str"",whiteSpace,memberName));
  }
  result+=""String_Node_Str"";
  return result;
}",0.995571302037201
6512,"/** 
 * Helper method to create code that checks 'totalDigits' and/or 'fractionDigits' restriction.
 * @param member Name of member variable to check
 * @return String with 'totalDigits' and/or 'fractionDigits' check code
 */
public static String createDigitsCheckCode(final AttributeContainer.RestrictedElementBase member){
  boolean isIntegerTyped=member.type.contains(""String_Node_Str"");
  String message=""String_Node_Str"";
  String comment=""String_Node_Str"";
  String result=""String_Node_Str"";
  if (isIntegerTyped) {
    result+=String.format(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",member.name);
  }
 else {
    result+=String.format(""String_Node_Str"",member.name);
  }
  result+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  if (member.isFractionDigitsRestricted()) {
    result+=String.format(comment,""String_Node_Str"");
    result+=CppRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",Integer.parseInt(member.restrictions.fractionDigits)),String.format(message,""String_Node_Str"",member.name));
  }
  if (member.isTotalDigitsRestricted()) {
    result+=String.format(comment,""String_Node_Str"");
    result+=""String_Node_Str"";
    result+=CppRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",Integer.parseInt(member.restrictions.totalDigits)),String.format(message,""String_Node_Str"",member.name));
  }
  return result;
}","/** 
 * Helper method to create code that checks the 'totalDigits' and/or the 'fractionDigits' restriction.
 * @param member Name of member variable to check
 * @return String with 'totalDigits' and/or 'fractionDigits' check code
 */
public static String createDigitsCheckCode(final AttributeContainer.RestrictedElementBase member){
  boolean isIntegerTyped=member.type.contains(""String_Node_Str"");
  String message=""String_Node_Str"";
  String comment=""String_Node_Str"";
  String result=""String_Node_Str"";
  if (isIntegerTyped) {
    result+=String.format(""String_Node_Str"" + ""String_Node_Str"",member.name);
  }
 else {
    result+=String.format(""String_Node_Str"",member.name);
  }
  result+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  if (member.isFractionDigitsRestricted()) {
    result+=String.format(comment,""String_Node_Str"");
    result+=CppRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",Integer.parseInt(member.restrictions.fractionDigits)),String.format(message,""String_Node_Str"",member.name));
  }
  if (member.isTotalDigitsRestricted()) {
    result+=String.format(comment,""String_Node_Str"");
    result+=""String_Node_Str"";
    result+=CppRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",Integer.parseInt(member.restrictions.totalDigits)),String.format(message,""String_Node_Str"",member.name));
  }
  return result;
}",0.9772079772079773
6513,"/** 
 * Create source files from container classes and write them to the language-specific workspace.
 * @throws Exception Error during source file write-out
 */
@Override public void writeSourceFiles() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    LOGGER.error(String.format(""String_Node_Str"",this.incompleteBuilders.size()));
    throw new IllegalStateException(""String_Node_Str"");
  }
  CWorkspace cWorkspace=this.workspace.getC();
  CppHeaderFile cpphf=null;
  CppSourceFile cppsf=null;
  CppTypeHelper.init(workspace);
  for (  String name : this.generatedElements.keySet()) {
    CppTypeGen.SourceFileData sourceFileData=this.generatedElements.get(name);
    cpphf=cWorkspace.getCppHeaderFile(name);
    cpphf.add(sourceFileData.typeObject);
    cpphf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    for (    CppVar member : sourceFileData.typeObject.getVars(Cpp.PRIVATE)) {
      System.out.println(""String_Node_Str"" + member.getTypeName() + ""String_Node_Str""+ name);
      if (member.getTypeName().endsWith(""String_Node_Str"") && !member.getTypeName().equals(name) && !cpphf.containsLibInclude(member.getTypeName() + ""String_Node_Str"")&& !this.incompleteLocalBuilders.containsKey(name)) {
        System.out.println(""String_Node_Str"" + member.getTypeName());
        cpphf.addLibInclude(member.getTypeName() + ""String_Node_Str"");
      }
    }
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addAfterDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cppsf=cWorkspace.getCppSourceFile(name);
    cppsf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    cppsf.addInclude(cpphf);
    cppsf.addLibInclude(""String_Node_Str"");
    cppsf.addUsingNamespace(""String_Node_Str"");
    if (!cpphf.getFileName().equals(CppTypeHelper.FILE_NAME)) {
      cpphf.addLibInclude(CppTypeHelper.FILE_NAME + ""String_Node_Str"");
    }
    for (    String requiredInclude : sourceFileData.requiredIncludes) {
      cpphf.addLibInclude(requiredInclude);
      cpphf.addUsingNamespace(""String_Node_Str"");
    }
    LOGGER.debug(String.format(""String_Node_Str"",name));
  }
}","/** 
 * Create source files from container classes and write them to the language-specific workspace.
 * @throws Exception Error during source file write-out
 */
@Override public void writeSourceFiles() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    LOGGER.error(String.format(""String_Node_Str"",this.incompleteBuilders.size()));
    throw new IllegalStateException(""String_Node_Str"");
  }
  CWorkspace cWorkspace=this.workspace.getC();
  CppHeaderFile cpphf=null;
  CppSourceFile cppsf=null;
  CppTypeHelper.init(workspace);
  for (  String name : this.generatedElements.keySet()) {
    CppTypeGen.SourceFileData sourceFileData=this.generatedElements.get(name);
    cpphf=cWorkspace.getCppHeaderFile(name);
    cpphf.add(sourceFileData.typeObject);
    cpphf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    if (!cpphf.getFileName().equals(CppTypeHelper.FILE_NAME)) {
      cpphf.addLibInclude(CppTypeHelper.FILE_NAME + ""String_Node_Str"");
    }
    for (    String requiredInclude : sourceFileData.requiredIncludes) {
      cpphf.addLibInclude(requiredInclude);
    }
    for (    CppVar member : sourceFileData.typeObject.getVars(Cpp.PRIVATE)) {
      if (!this.mapper.isBuiltInType(member.getTypeName()) && !member.getTypeName().startsWith(""String_Node_Str"") && !member.getTypeName().equals(name)&& !cpphf.containsLibInclude(member.getTypeName() + ""String_Node_Str"")&& !this.incompleteLocalBuilders.containsKey(name)) {
        cpphf.addLibInclude(member.getTypeName() + ""String_Node_Str"");
      }
    }
    cpphf.addUsingNamespace(""String_Node_Str"");
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addAfterDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cppsf=cWorkspace.getCppSourceFile(name);
    cppsf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    cppsf.addInclude(cpphf);
    cppsf.addLibInclude(""String_Node_Str"");
    cppsf.addUsingNamespace(""String_Node_Str"");
    LOGGER.debug(String.format(""String_Node_Str"",name));
  }
  String rootContainerName=this.properties.getProperty(FabricTypeGenModule.MAIN_CLASS_NAME_KEY);
  CppSourceFile application=workspace.getC().getCppSourceFile(""String_Node_Str"");
  application.addLibInclude(""String_Node_Str"");
  application.addLibInclude(""String_Node_Str"");
  application.addLibInclude(rootContainerName + ""String_Node_Str"");
  application.addUsingNamespace(""String_Node_Str"");
  CParam argc=CParam.factory.create(""String_Node_Str"",""String_Node_Str"");
  CParam argv=CParam.factory.create(""String_Node_Str"",""String_Node_Str"");
  CFunSignature mainSignature=CFunSignature.factory.create(argc,argv);
  CFun main=CFun.factory.create(""String_Node_Str"",""String_Node_Str"",mainSignature);
  String methodBody=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",rootContainerName,rootContainerName.toLowerCase(),rootContainerName,rootContainerName.toLowerCase());
  main.appendCode(methodBody);
  main.setComment(new CCommentImpl(""String_Node_Str""));
  application.add(main);
  application.setComment(new CCommentImpl((""String_Node_Str"")));
  LOGGER.debug(String.format(""String_Node_Str"",application.getFileName()));
}",0.44402407566638
6514,"private void toStringHelper(StringBuffer buffer,CppClass clazz,int tabCount){
  if (null != clazz.getConstructors(Cpp.PUBLIC) && clazz.getConstructors(Cpp.PUBLIC).size() > 0) {
    for (    CppConstructor c : clazz.getConstructors(Cpp.PUBLIC)) {
      c.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getConstructors(Cpp.PRIVATE) && clazz.getConstructors(Cpp.PRIVATE).size() > 0) {
    for (    CppConstructor c : clazz.getConstructors(Cpp.PRIVATE)) {
      c.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getDestructors(Cpp.PRIVATE) && clazz.getDestructors(Cpp.PRIVATE).size() > 0) {
    for (    CppDestructor d : clazz.getDestructors(Cpp.PRIVATE)) {
      d.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getDestructors(Cpp.PUBLIC) && clazz.getDestructors(Cpp.PUBLIC).size() > 0) {
    for (    CppDestructor d : clazz.getDestructors(Cpp.PUBLIC)) {
      d.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getFuns(Cpp.PUBLIC) && clazz.getFuns(Cpp.PUBLIC).size() > 0) {
    for (int i=0; i < clazz.getFuns(Cpp.PUBLIC).size(); ++i) {
      CppFun f=clazz.getFuns(Cpp.PUBLIC).get(i);
      if (i < clazz.getFuns(Cpp.PUBLIC).size() - 1) {
        f.toString(buffer,tabCount,false);
      }
 else {
        f.toString(buffer,tabCount,true);
      }
    }
    buffer.append(Cpp.newline + Cpp.newline);
  }
  if (null != clazz.getFuns(Cpp.PRIVATE) && clazz.getFuns(Cpp.PRIVATE).size() > 0) {
    for (int i=0; i < clazz.getFuns(Cpp.PRIVATE).size(); ++i) {
      CppFun f=clazz.getFuns(Cpp.PRIVATE).get(i);
      if (i < clazz.getFuns(Cpp.PRIVATE).size() - 1) {
        f.toString(buffer,tabCount,false);
      }
 else {
        f.toString(buffer,tabCount,true);
      }
    }
    buffer.append(Cpp.newline + Cpp.newline);
  }
  if (null != clazz.getNested(Cpp.PUBLIC) && clazz.getNested(Cpp.PUBLIC).size() > 0) {
    for (    CppClass c : clazz.getNested(Cpp.PUBLIC)) {
      toStringHelper(buffer,c,tabCount);
    }
  }
  if (null != clazz.getNested(Cpp.PRIVATE) && clazz.getNested(Cpp.PRIVATE).size() > 0) {
    for (    CppClass c : clazz.getNested(Cpp.PRIVATE)) {
      toStringHelper(buffer,c,tabCount);
    }
  }
}","private void toStringHelper(StringBuffer buffer,CppClass clazz,int tabCount){
  if (null != clazz.getConstructors(Cpp.PUBLIC) && clazz.getConstructors(Cpp.PUBLIC).size() > 0) {
    for (    CppConstructor c : clazz.getConstructors(Cpp.PUBLIC)) {
      c.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getConstructors(Cpp.PRIVATE) && clazz.getConstructors(Cpp.PRIVATE).size() > 0) {
    for (    CppConstructor c : clazz.getConstructors(Cpp.PRIVATE)) {
      c.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getDestructors(Cpp.PRIVATE) && clazz.getDestructors(Cpp.PRIVATE).size() > 0) {
    for (    CppDestructor d : clazz.getDestructors(Cpp.PRIVATE)) {
      d.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getDestructors(Cpp.PUBLIC) && clazz.getDestructors(Cpp.PUBLIC).size() > 0) {
    for (    CppDestructor d : clazz.getDestructors(Cpp.PUBLIC)) {
      d.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getFuns(Cpp.PUBLIC) && clazz.getFuns(Cpp.PUBLIC).size() > 0) {
    for (int i=0; i < clazz.getFuns(Cpp.PUBLIC).size(); ++i) {
      CppFun f=clazz.getFuns(Cpp.PUBLIC).get(i);
      if (i < clazz.getFuns(Cpp.PUBLIC).size() - 1) {
        f.toString(buffer,tabCount,false);
      }
 else {
        f.toString(buffer,tabCount,true);
      }
    }
    buffer.append(Cpp.newline + Cpp.newline);
  }
  if (null != clazz.getFuns(Cpp.PRIVATE) && clazz.getFuns(Cpp.PRIVATE).size() > 0) {
    for (int i=0; i < clazz.getFuns(Cpp.PRIVATE).size(); ++i) {
      CppFun f=clazz.getFuns(Cpp.PRIVATE).get(i);
      if (i < clazz.getFuns(Cpp.PRIVATE).size() - 1) {
        f.toString(buffer,tabCount,false);
      }
 else {
        f.toString(buffer,tabCount,true);
      }
    }
    buffer.append(Cpp.newline + Cpp.newline);
  }
  if (null != clazz.getNested(Cpp.PUBLIC) && clazz.getNested(Cpp.PUBLIC).size() > 0) {
    for (    CppClass c : clazz.getNested(Cpp.PUBLIC)) {
      toStringHelper(buffer,c,tabCount);
    }
  }
  if (null != clazz.getNested(Cpp.PROTECTED) && clazz.getNested(Cpp.PROTECTED).size() > 0) {
    for (    CppClass c : clazz.getNested(Cpp.PROTECTED)) {
      toStringHelper(buffer,c,tabCount);
    }
  }
  if (null != clazz.getNested(Cpp.PRIVATE) && clazz.getNested(Cpp.PRIVATE).size() > 0) {
    for (    CppClass c : clazz.getNested(Cpp.PRIVATE)) {
      toStringHelper(buffer,c,tabCount);
    }
  }
}",0.954807266282676
6515,"void generate() throws Exception {
  String className=""String_Node_Str"";
  CppClass classOne=CppClass.factory.create(""String_Node_Str"");
  CppVar intA=CppVar.factory.create(Cpp.INT,""String_Node_Str"");
  CppVar intX=CppVar.factory.create(Cpp.INT,""String_Node_Str"");
  CppVar intY=CppVar.factory.create(Cpp.INT,""String_Node_Str"");
  CppFun funSetA=CppFun.factory.create(Cpp.INT,""String_Node_Str"",intY);
  funSetA.appendCode(""String_Node_Str"");
  CppFun funMult=CppFun.factory.create(Cpp.INT,""String_Node_Str"",intX);
  funMult.appendCode(""String_Node_Str"");
  classOne.add(Cpp.PUBLIC,intA);
  classOne.add(Cpp.PUBLIC,funSetA,funMult);
  CppClass classTwo=CppClass.factory.create(""String_Node_Str"");
  CppTypeGenerator typeNested=new CppTypeGenerator(""String_Node_Str"");
  CppVar n=CppVar.factory.create(typeNested,""String_Node_Str"");
  CppFun funCall=CppFun.factory.create(Cpp.INT,""String_Node_Str"",intX);
  funCall.appendCode(""String_Node_Str"");
  funCall.appendCode(""String_Node_Str"");
  classTwo.add(Cpp.PRIVATE,n);
  classTwo.add(Cpp.PUBLIC,intA);
  classTwo.add(Cpp.PUBLIC,funCall);
  classTwo.add(Cpp.PRIVATE,classOne);
  CppSourceFile file=workspace.getC().getCppSourceFile(className);
  CppSourceFile header=this.workspace.getC().getCppHeaderFile(className);
  file.addInclude(header);
  file.addLibInclude(""String_Node_Str"");
  file.addUsingNamespace(""String_Node_Str"");
  CFun fun_main=CFun.factory.create(""String_Node_Str"",""String_Node_Str"",null);
  fun_main.appendCode(""String_Node_Str"");
  fun_main.appendCode(""String_Node_Str"");
  fun_main.appendCode(""String_Node_Str"");
  file.add(fun_main);
  header.add(classTwo);
}","void generate() throws Exception {
  String className=""String_Node_Str"";
  CppClass classNested=CppClass.factory.create(""String_Node_Str"");
  CppVar intA=CppVar.factory.create(Cpp.INT,""String_Node_Str"");
  CppVar intX=CppVar.factory.create(Cpp.INT,""String_Node_Str"");
  CppVar intY=CppVar.factory.create(Cpp.INT,""String_Node_Str"");
  CppFun funSetA=CppFun.factory.create(Cpp.INT,""String_Node_Str"",intY);
  funSetA.appendCode(""String_Node_Str"");
  CppFun funMult=CppFun.factory.create(Cpp.INT,""String_Node_Str"",intX);
  funMult.appendCode(""String_Node_Str"");
  classNested.add(Cpp.PUBLIC,intA);
  classNested.add(Cpp.PUBLIC,funSetA,funMult);
  CppClass classOuter=CppClass.factory.create(""String_Node_Str"");
  CppTypeGenerator typeNested=new CppTypeGenerator(""String_Node_Str"");
  CppVar n=CppVar.factory.create(typeNested,""String_Node_Str"");
  CppFun funCall=CppFun.factory.create(Cpp.INT,""String_Node_Str"",intX);
  funCall.appendCode(""String_Node_Str"");
  funCall.appendCode(""String_Node_Str"");
  classOuter.add(Cpp.PRIVATE,n);
  classOuter.add(Cpp.PUBLIC,intA);
  classOuter.add(Cpp.PUBLIC,funCall);
  classOuter.add(Cpp.PROTECTED,classNested);
  CppSourceFile file=workspace.getC().getCppSourceFile(className);
  CppSourceFile header=this.workspace.getC().getCppHeaderFile(className);
  file.addInclude(header);
  file.addLibInclude(""String_Node_Str"");
  file.addUsingNamespace(""String_Node_Str"");
  CFun fun_main=CFun.factory.create(""String_Node_Str"",""String_Node_Str"",null);
  fun_main.appendCode(""String_Node_Str"");
  fun_main.appendCode(""String_Node_Str"");
  fun_main.appendCode(""String_Node_Str"");
  file.add(fun_main);
  header.add(classOuter);
}",0.9683313032886725
6516,"public void prepare(){
  for (  CppClass c : this.cppClasses) {
    c.prepare();
  }
  for (  CppSourceFileImpl file : this.cppUserHeaderFiles) {
    for (    CppClass c : file.getCppClasses()) {
      c.prepare();
    }
  }
}","public void prepare(){
  for (  CppClass c : this.cppClasses) {
    c.prepare();
  }
  for (  CppSourceFileImpl file : this.cppUserHeaderFiles) {
    for (    CppClass c : file.getCppClasses()) {
      c.prepare();
    }
    for (    CppNamespace ns : file.getNamespaces()) {
      ns.prepare();
    }
  }
}",0.8367729831144465
6517,"/** 
 * This method prepares the files
 */
@Override public void prepare(){
  if (isPrepared)   return;
  for (  CFun c : this.cfuns) {
    c.addParents(this.parents,this.getName());
  }
  for (  CppClass c : this.classes) {
    c.addParents(this.parents,this.getName());
  }
  isPrepared=true;
}","/** 
 * This method prepares the files
 */
@Override public void prepare(){
  if (isPrepared)   return;
  for (  CFun c : this.cfuns) {
    c.addParents(this.parents,this.getName());
  }
  for (  CppClass c : this.classes) {
    c.addParents(this.parents,this.getName());
    c.prepare();
  }
  isPrepared=true;
}",0.9720853858784894
6518,"@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
  }
  buffer.append(""String_Node_Str"" + this.name);
  buffer.append(Cpp.newline + ""String_Node_Str"" + Cpp.newline);
  if (cfuns.size() > 0) {
    StringBuffer inner=new StringBuffer();
    for (    CFun fun : cfuns) {
      inner.append(fun.getSignature() + ""String_Node_Str"");
      inner.append(Cpp.newline);
    }
    inner.append(Cpp.newline + Cpp.newline);
    appendBody(buffer,inner,tabCount + 1);
  }
  if (classes.size() > 0) {
    StringBuffer inner=new StringBuffer();
    for (    CppClass c : classes) {
      inner.append(c.toString());
      inner.append(Cpp.newline);
    }
    inner.append(Cpp.newline);
    appendBody(buffer,inner,tabCount + 1);
  }
  buffer.append(Cpp.newline + ""String_Node_Str"" + Cpp.newline);
}","@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
  }
  buffer.append(""String_Node_Str"" + this.name);
  buffer.append(Cpp.newline + ""String_Node_Str"" + Cpp.newline);
  if (cfuns.size() > 0) {
    StringBuffer inner=new StringBuffer();
    for (    CFun fun : cfuns) {
      inner.append(fun.getSignature() + ""String_Node_Str"");
      inner.append(Cpp.newline);
    }
    appendBody(buffer,inner,tabCount + 1);
    buffer.append(Cpp.newline + Cpp.newline);
  }
  if (classes.size() > 0) {
    StringBuffer inner=new StringBuffer();
    for (    CppClass c : classes) {
      inner.append(c.toString());
      inner.append(Cpp.newline);
    }
    appendBody(buffer,inner,tabCount + 1);
  }
  buffer.append(Cpp.newline + ""String_Node_Str"" + Cpp.newline);
}",0.6782810685249709
6519,"public void prepare(){
  for (  CppClass c : this.cppClasses) {
    c.prepare();
  }
  for (  CppSourceFileImpl file : this.cppUserHeaderFiles) {
    for (    CppClass c : file.getCppClasses()) {
      c.prepare();
    }
    for (    CppNamespace ns : file.getNamespaces()) {
      ns.prepare();
    }
  }
}","public void prepare(){
  if (isPrepared) {
    return;
  }
  for (  CppClass c : this.cppClasses) {
    c.prepare();
  }
  for (  CppSourceFileImpl file : this.cppUserHeaderFiles) {
    for (    CppClass c : file.getCppClasses()) {
      c.prepare();
    }
    for (    CppNamespace ns : file.getNamespaces()) {
      ns.prepare();
    }
  }
  isPrepared=true;
}",0.9147982062780268
6520,"void generate() throws Exception {
  String name=""String_Node_Str"";
  String fileName=""String_Node_Str"";
  CppNamespace ns=CppNamespace.factory.create(name);
  CParam p=CParam.factory.create(""String_Node_Str"",""String_Node_Str"");
  CFunSignature sig=CFunSignature.factory.create(p);
  CFun fun_print=CFun.factory.create(""String_Node_Str"",""String_Node_Str"",sig);
  fun_print.appendCode(""String_Node_Str"");
  ns.add(Cpp.PUBLIC,fun_print);
  CppClass cppClass=CppClass.factory.create(""String_Node_Str"");
  CppVar cppVar=CppVar.factory.create(""String_Node_Str"",""String_Node_Str"");
  CppFun cppFun=CppFun.factory.create(""String_Node_Str"",""String_Node_Str"",cppVar);
  cppFun.appendCode(""String_Node_Str"");
  cppClass.add(Cpp.PUBLIC,cppFun);
  CppSourceFile file=workspace.getC().getCppSourceFile(fileName);
  CppSourceFile header=this.workspace.getC().getCppHeaderFile(fileName + ""String_Node_Str"");
  header.add(ns);
  file.addLibInclude(""String_Node_Str"");
  file.addUsingNamespace(""String_Node_Str"");
  ns.add(cppClass);
  CFun fun_main=CFun.factory.create(""String_Node_Str"",""String_Node_Str"",null);
  fun_main.appendCode(""String_Node_Str"");
  fun_main.appendCode(""String_Node_Str"");
  fun_main.appendCode(""String_Node_Str"");
  file.add(fun_main);
  file.addInclude(header);
}","void generate() throws Exception {
  String name=""String_Node_Str"";
  String fileName=""String_Node_Str"";
  CppNamespace ns=CppNamespace.factory.create(name);
  CParam p=CParam.factory.create(""String_Node_Str"",""String_Node_Str"");
  CFunSignature sig=CFunSignature.factory.create(p);
  CFun fun_print=CFun.factory.create(""String_Node_Str"",""String_Node_Str"",sig);
  fun_print.appendCode(""String_Node_Str"");
  ns.add(Cpp.PUBLIC,fun_print);
  CppClass cppClass1=CppClass.factory.create(""String_Node_Str"");
  CppVar cppVar=CppVar.factory.create(""String_Node_Str"",""String_Node_Str"");
  CppFun cppFun=CppFun.factory.create(""String_Node_Str"",""String_Node_Str"",cppVar);
  cppFun.appendCode(""String_Node_Str"");
  cppClass1.add(Cpp.PUBLIC,cppFun);
  ns.add(cppClass1);
  CppClass cppClass2=CppClass.factory.create(""String_Node_Str"");
  CppVar cppVar2=CppVar.factory.create(""String_Node_Str"",""String_Node_Str"");
  CppFun cppFun2=CppFun.factory.create(""String_Node_Str"",""String_Node_Str"",cppVar2);
  cppFun2.appendCode(""String_Node_Str"");
  cppClass2.add(Cpp.PUBLIC,cppFun2);
  cppClass1.add(Cpp.PUBLIC,cppClass2);
  CppSourceFile file=workspace.getC().getCppSourceFile(fileName);
  CppSourceFile header=this.workspace.getC().getCppHeaderFile(fileName + ""String_Node_Str"");
  header.add(ns);
  file.addLibInclude(""String_Node_Str"");
  file.addUsingNamespace(""String_Node_Str"");
  CFun fun_main=CFun.factory.create(""String_Node_Str"",""String_Node_Str"",null);
  fun_main.appendCode(""String_Node_Str"");
  fun_main.appendCode(""String_Node_Str"");
  fun_main.appendCode(""String_Node_Str"");
  file.add(fun_main);
  file.addInclude(header);
}",0.8661362850224835
6521,"@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
    buffer.append(Cpp.newline);
  }
  if (null != base.getLibIncludes() && base.getLibIncludes().size() > 0) {
    for (    String include : base.getLibIncludes()) {
      buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != base.beforeDirectives && base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppNamespaces && this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getEnums() && base.getEnums().size() > 0) {
    for (    CEnum e : this.base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
  }
  if (null != this.base && null != this.base.getTypeDefs() && this.base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : this.base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.structsUnions && this.base.structsUnions.size() > 0) {
    for (    CStructBaseImpl struct : this.base.structsUnions) {
      buffer.append(struct.toString());
      buffer.append(Cpp.newline + Cpp.newline);
    }
  }
  if (null != this.cppClasses && this.cppClasses.size() > 0) {
    for (    CppClass c : this.cppClasses) {
      buffer.append(c.toString());
    }
  }
  if (null != this.base && null != this.base.afterDirectives && this.base.afterDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : this.base.afterDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
}","@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
    buffer.append(Cpp.newline);
  }
  if (null != base.getLibIncludes() && base.getLibIncludes().size() > 0) {
    for (    String include : base.getLibIncludes()) {
      buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != base.beforeDirectives && base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppNamespaces && this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getEnums() && base.getEnums().size() > 0) {
    for (    CEnum e : this.base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
  }
  if (null != this.base && null != this.base.getTypeDefs() && this.base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : this.base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.structsUnions && this.base.structsUnions.size() > 0) {
    for (    CStructBaseImpl struct : this.base.structsUnions) {
      buffer.append(struct.toString());
      buffer.append(Cpp.newline + Cpp.newline);
    }
  }
  if (null != this.cppClasses && this.cppClasses.size() > 0) {
    for (    CppClass c : this.cppClasses) {
      buffer.append(c.toString());
    }
  }
  if (null != this.base && null != this.base.afterDirectives && this.base.afterDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : this.base.afterDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
  }
}",0.9921836834391792
6522,"@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getLibIncludes() && this.base.getLibIncludes().size() > 0) {
    for (    String include : this.base.getLibIncludes()) {
      buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppUserHeaderFiles && this.cppUserHeaderFiles.size() > 0) {
    for (    CppSourceFile file : this.cppUserHeaderFiles) {
      buffer.append(""String_Node_Str"" + file.getFileName() + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.beforeDirectives && this.base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : this.base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppNamespaces && this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getTypeDefs() && base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getEnums() && this.base.getEnums().size() > 0) {
    for (    CEnum e : this.base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.structsUnions && this.base.structsUnions.size() > 0) {
    for (    CStructBaseImpl struct : base.structsUnions) {
      buffer.append(struct.toString() + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppUserHeaderFiles && this.cppUserHeaderFiles.size() > 0) {
    buffer.append(""String_Node_Str"");
    for (    CppSourceFileImpl file : this.cppUserHeaderFiles) {
      if (null != file.getCppClasses() && file.getCppClasses().length > 0) {
        for (        CppClass c : file.getCppClasses()) {
          toStringHelper(buffer,c,tabCount);
        }
      }
    }
  }
  if (null != this.cppVars && this.cppVars.size() > 0) {
    for (    CppVar v : this.cppVars) {
      buffer.append(v.toString() + ""String_Node_Str"" + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getFuns() && this.base.getFuns().size() > 0) {
    for (    CFun fun : this.base.getFuns()) {
      fun.toString(buffer,tabCount);
    }
  }
  if (null != this.base && null != this.base.afterDirectives && base.afterDirectives.size() > 0) {
    buffer.append(Cpp.newline);
    for (    CPreProcessorDirectiveImpl ppd : this.base.afterDirectives) {
      buffer.append(Cpp.newline);
      ppd.toString(buffer,tabCount);
    }
    buffer.append(Cpp.newline);
  }
  buffer.append(Cpp.newline);
}","@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getLibIncludes() && this.base.getLibIncludes().size() > 0) {
    for (    String include : this.base.getLibIncludes()) {
      buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppUserHeaderFiles && this.cppUserHeaderFiles.size() > 0) {
    for (    CppSourceFile file : this.cppUserHeaderFiles) {
      buffer.append(""String_Node_Str"" + file.getFileName() + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.beforeDirectives && this.base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : this.base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppNamespaces && this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getTypeDefs() && base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getEnums() && this.base.getEnums().size() > 0) {
    for (    CEnum e : this.base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.structsUnions && this.base.structsUnions.size() > 0) {
    for (    CStructBaseImpl struct : base.structsUnions) {
      buffer.append(struct.toString() + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppClasses && this.cppClasses.size() > 0) {
    for (    CppClass c : this.cppClasses) {
      buffer.append(c.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppClasses && this.cppClasses.size() > 0) {
    for (    CppClass c : this.cppClasses) {
      toStringHelper(buffer,c,tabCount);
    }
  }
  if (null != this.cppUserHeaderFiles && this.cppUserHeaderFiles.size() > 0) {
    for (    CppSourceFileImpl file : this.cppUserHeaderFiles) {
      if (null != file.getCppClasses() && file.getCppClasses().length > 0) {
        for (        CppClass c : file.getCppClasses()) {
          toStringHelper(buffer,c,tabCount);
        }
      }
    }
  }
  if (null != this.cppVars && this.cppVars.size() > 0) {
    for (    CppVar v : this.cppVars) {
      buffer.append(v.toString() + ""String_Node_Str"" + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getFuns() && this.base.getFuns().size() > 0) {
    for (    CFun fun : this.base.getFuns()) {
      fun.toString(buffer,tabCount);
    }
  }
  if (null != this.base && null != this.base.afterDirectives && base.afterDirectives.size() > 0) {
    buffer.append(Cpp.newline);
    for (    CPreProcessorDirectiveImpl ppd : this.base.afterDirectives) {
      buffer.append(Cpp.newline);
      ppd.toString(buffer,tabCount);
    }
    buffer.append(Cpp.newline);
  }
  buffer.append(Cpp.newline);
}",0.6610635696821516
6523,"/** 
 * Create source files from container classes and write them to the language-specific workspace.
 * @throws Exception Error during source file write-out
 */
@Override public void writeSourceFiles() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    LOGGER.error(String.format(""String_Node_Str"",this.incompleteBuilders.size()));
    throw new IllegalStateException(""String_Node_Str"");
  }
  CWorkspace cWorkspace=this.workspace.getC();
  CppHeaderFile cpphf=null;
  CppSourceFile cppsf=null;
  for (  String name : this.generatedElements.keySet()) {
    CppTypeGen.SourceFileData sourceFileData=this.generatedElements.get(name);
    cpphf=cWorkspace.getCppHeaderFile(name);
    cpphf.add(sourceFileData.typeObject);
    cpphf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addAfterDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cppsf=cWorkspace.getCppSourceFile(name);
    cppsf.add(sourceFileData.typeObject);
    cppsf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    cppsf.addInclude(cpphf);
    cppsf.addLibInclude(""String_Node_Str"");
    cppsf.addLibInclude(""String_Node_Str"");
    cppsf.addUsingNamespace(""String_Node_Str"");
    for (    String requiredInclude : sourceFileData.requiredIncludes) {
      cppsf.addLibInclude(requiredInclude);
    }
    LOGGER.debug(String.format(""String_Node_Str"",name));
  }
}","/** 
 * Create source files from container classes and write them to the language-specific workspace.
 * @throws Exception Error during source file write-out
 */
@Override public void writeSourceFiles() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    LOGGER.error(String.format(""String_Node_Str"",this.incompleteBuilders.size()));
    throw new IllegalStateException(""String_Node_Str"");
  }
  CWorkspace cWorkspace=this.workspace.getC();
  CppHeaderFile cpphf=null;
  CppSourceFile cppsf=null;
  for (  String name : this.generatedElements.keySet()) {
    CppTypeGen.SourceFileData sourceFileData=this.generatedElements.get(name);
    cpphf=cWorkspace.getCppHeaderFile(name);
    cpphf.add(sourceFileData.typeObject);
    cpphf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addAfterDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cppsf=cWorkspace.getCppSourceFile(name);
    cppsf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    cppsf.addInclude(cpphf);
    cppsf.addLibInclude(""String_Node_Str"");
    cppsf.addLibInclude(""String_Node_Str"");
    cppsf.addUsingNamespace(""String_Node_Str"");
    for (    String requiredInclude : sourceFileData.requiredIncludes) {
      cppsf.addLibInclude(requiredInclude);
    }
    LOGGER.debug(String.format(""String_Node_Str"",name));
  }
}",0.9870769230769232
6524,"@Override public CppClass add(long vis,CppClass... cppClass) throws CppDuplicateException {
  for (  CppClass c : cppClass) {
    addInternal(vis,c);
    c.addParents(this.parents,this);
  }
  return this;
}","/** 
 * Nested class
 */
@Override public CppClass add(long vis,CppClass... cppClass) throws CppDuplicateException {
  for (  CppClass c : cppClass) {
    addInternal(vis,c);
  }
  return this;
}",0.845771144278607
6525,"public CppClassImpl(String className){
  this.className=className;
  try {
    CppConstructor con=CppConstructor.factory.create();
    add(Cpp.PUBLIC,con);
  }
 catch (  CppDuplicateException e) {
    e.printStackTrace();
  }
}","public CppClassImpl(String className){
  this.className=className;
}",0.4610169491525424
6526,"@Override public void toString(StringBuffer buffer,int tabCount){
  if (comment != null) {
    comment.toString(buffer,tabCount);
  }
  buffer.append(""String_Node_Str"" + this.className);
  if (this.getExtendeds().length > 0) {
    for (int i=0; i < this.getExtendeds().length; i++) {
      if (i == 0) {
        buffer.append(""String_Node_Str"");
      }
 else {
        buffer.append(""String_Node_Str"");
      }
      buffer.append(this.getExtendeds()[i]);
    }
  }
  buffer.append(Cpp.newline + ""String_Node_Str"" + Cpp.newline);
  StringBuffer tmp_public=new StringBuffer();
  toStringHelper(tmp_public,tabCount,Cpp.PUBLIC);
  if (tmp_public.length() > 0) {
    buffer.append(""String_Node_Str"" + Cpp.newline);
    appendBody(buffer,tmp_public,tabCount + 1);
  }
  StringBuffer tmp_protected=new StringBuffer();
  toStringHelper(tmp_protected,tabCount,Cpp.PROTECTED);
  if (tmp_protected.length() > 0) {
    buffer.append(Cpp.newline);
    buffer.append(""String_Node_Str"" + Cpp.newline);
    appendBody(buffer,tmp_protected,tabCount + 1);
  }
  StringBuffer tmp_private=new StringBuffer();
  toStringHelper(tmp_private,tabCount,Cpp.PRIVATE);
  if (tmp_private.length() > 0) {
    buffer.append(Cpp.newline);
    buffer.append(""String_Node_Str"" + Cpp.newline);
    appendBody(buffer,tmp_private,tabCount + 1);
  }
  buffer.append(Cpp.newline + ""String_Node_Str"" + Cpp.newline+ Cpp.newline);
}","@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
  }
  buffer.append(""String_Node_Str"" + this.className);
  if (this.getExtendeds().length > 0) {
    for (int i=0; i < this.getExtendeds().length; i++) {
      if (i == 0) {
        buffer.append(""String_Node_Str"");
      }
 else {
        buffer.append(""String_Node_Str"");
      }
      buffer.append(this.getExtendeds()[i]);
    }
  }
  buffer.append(Cpp.newline + ""String_Node_Str"" + Cpp.newline);
  StringBuffer tmp_public=new StringBuffer();
  toStringHelper(tmp_public,tabCount,Cpp.PUBLIC);
  if (tmp_public.length() > 0) {
    buffer.append(""String_Node_Str"" + Cpp.newline);
    appendBody(buffer,tmp_public,tabCount + 1);
  }
  StringBuffer tmp_protected=new StringBuffer();
  toStringHelper(tmp_protected,tabCount,Cpp.PROTECTED);
  if (tmp_protected.length() > 0) {
    buffer.append(Cpp.newline);
    buffer.append(""String_Node_Str"" + Cpp.newline);
    appendBody(buffer,tmp_protected,tabCount + 1);
  }
  StringBuffer tmp_private=new StringBuffer();
  toStringHelper(tmp_private,tabCount,Cpp.PRIVATE);
  if (tmp_private.length() > 0) {
    buffer.append(Cpp.newline);
    buffer.append(""String_Node_Str"" + Cpp.newline);
    appendBody(buffer,tmp_private,tabCount + 1);
  }
  buffer.append(Cpp.newline + ""String_Node_Str"");
  buffer.append(Cpp.newline);
}",0.9828571428571428
6527,"@Override public void toString(StringBuffer buffer,int tabCount){
  if (comment != null) {
    comment.toString(buffer,tabCount);
  }
  if (base.getLibIncludes().size() > 0) {
    for (    String include : base.getLibIncludes()) {
      buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (base.getEnums().size() > 0) {
    for (    CEnum e : base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
  }
  if (base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  for (  CStructBaseImpl struct : base.structsUnions) {
    buffer.append(struct.toString());
    buffer.append(Cpp.newline + Cpp.newline);
  }
  for (  CppClass c : this.cppClasses) {
    buffer.append(c.toString());
  }
  if (base.afterDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : base.afterDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
}","@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
  }
  if (base.getLibIncludes().size() > 0) {
    for (    String include : base.getLibIncludes()) {
      buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (base.getEnums().size() > 0) {
    for (    CEnum e : base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
  }
  if (base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  for (  CStructBaseImpl struct : base.structsUnions) {
    buffer.append(struct.toString());
    buffer.append(Cpp.newline + Cpp.newline);
  }
  for (  CppClass c : this.cppClasses) {
    buffer.append(c.toString());
  }
  if (base.afterDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : base.afterDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
}",0.9957860615883306
6528,"@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getLibIncludes() && this.base.getLibIncludes().size() > 0) {
    for (    String include : this.base.getLibIncludes()) {
      buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppUserHeaderFiles && this.cppUserHeaderFiles.size() > 0) {
    for (    CppSourceFile file : this.cppUserHeaderFiles) {
      buffer.append(""String_Node_Str"" + file.getFileName() + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.beforeDirectives && this.base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : this.base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppNamespaces && this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getTypeDefs() && base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getEnums() && this.base.getEnums().size() > 0) {
    for (    CEnum e : this.base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.structsUnions && this.base.structsUnions.size() > 0) {
    for (    CStructBaseImpl struct : base.structsUnions) {
      buffer.append(struct.toString() + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppClasses && this.cppClasses.size() > 0) {
    for (    CppClass c : this.cppClasses) {
      buffer.append(c.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppClasses && this.cppClasses.size() > 0) {
    for (    CppClass c : this.cppClasses) {
      toStringHelper(buffer,c,tabCount);
    }
  }
  if (null != this.cppUserHeaderFiles && this.cppUserHeaderFiles.size() > 0) {
    for (    CppSourceFileImpl file : this.cppUserHeaderFiles) {
      if (null != file.getCppClasses() && file.getCppClasses().length > 0) {
        for (        CppClass c : file.getCppClasses()) {
          toStringHelper(buffer,c,tabCount);
        }
      }
    }
  }
  if (null != this.cppVars && this.cppVars.size() > 0) {
    for (    CppVar v : this.cppVars) {
      buffer.append(v.toString() + ""String_Node_Str"" + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getFuns() && this.base.getFuns().size() > 0) {
    for (    CFun fun : this.base.getFuns()) {
      fun.toString(buffer,tabCount);
    }
  }
  if (null != this.base && null != this.base.afterDirectives && base.afterDirectives.size() > 0) {
    buffer.append(Cpp.newline);
    for (    CPreProcessorDirectiveImpl ppd : this.base.afterDirectives) {
      buffer.append(Cpp.newline);
      ppd.toString(buffer,tabCount);
    }
    buffer.append(Cpp.newline);
  }
  buffer.append(Cpp.newline);
}","@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getLibIncludes() && this.base.getLibIncludes().size() > 0) {
    for (    String include : this.base.getLibIncludes()) {
      buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppUserHeaderFiles && this.cppUserHeaderFiles.size() > 0) {
    for (    CppSourceFile file : this.cppUserHeaderFiles) {
      buffer.append(""String_Node_Str"" + file.getFileName() + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.beforeDirectives && this.base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : this.base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppNamespaces && this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getTypeDefs() && base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getEnums() && this.base.getEnums().size() > 0) {
    for (    CEnum e : this.base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.structsUnions && this.base.structsUnions.size() > 0) {
    for (    CStructBaseImpl struct : base.structsUnions) {
      buffer.append(struct.toString() + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppUserHeaderFiles && this.cppUserHeaderFiles.size() > 0) {
    buffer.append(""String_Node_Str"");
    for (    CppSourceFileImpl file : this.cppUserHeaderFiles) {
      if (null != file.getCppClasses() && file.getCppClasses().length > 0) {
        for (        CppClass c : file.getCppClasses()) {
          toStringHelper(buffer,c,tabCount);
        }
      }
    }
  }
  if (null != this.cppVars && this.cppVars.size() > 0) {
    for (    CppVar v : this.cppVars) {
      buffer.append(v.toString() + ""String_Node_Str"" + Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getFuns() && this.base.getFuns().size() > 0) {
    for (    CFun fun : this.base.getFuns()) {
      fun.toString(buffer,tabCount);
    }
  }
  if (null != this.base && null != this.base.afterDirectives && base.afterDirectives.size() > 0) {
    buffer.append(Cpp.newline);
    for (    CPreProcessorDirectiveImpl ppd : this.base.afterDirectives) {
      buffer.append(Cpp.newline);
      ppd.toString(buffer,tabCount);
    }
    buffer.append(Cpp.newline);
  }
  buffer.append(Cpp.newline);
}",0.6940709046454768
6529,"void generate() throws Exception {
  String className=""String_Node_Str"";
  CppClass class_CRectangleSimple=CppClass.factory.create(className);
  class_CRectangleSimple.setComment(new CCommentImpl(""String_Node_Str""));
  CppTypeGenerator type_int=new CppTypeGenerator(Cpp.INT);
  CppVar var_x=CppVar.factory.create(Cpp.PRIVATE,type_int.toString(),""String_Node_Str"",""String_Node_Str"");
  var_x.setComment(new CCommentImpl(""String_Node_Str""));
  CppVar var_y=CppVar.factory.create(Cpp.PRIVATE,type_int.toString(),""String_Node_Str"");
  var_y.setComment(new CCommentImpl(""String_Node_Str""));
  class_CRectangleSimple.add(var_y);
  class_CRectangleSimple.add(var_x);
  CppVar var_a=CppVar.factory.create(type_int,""String_Node_Str"");
  CppVar var_b=CppVar.factory.create(type_int,""String_Node_Str"");
  CppFun fun_set_values=CppFun.factory.create(Cpp.VOID,""String_Node_Str"",var_a,var_b);
  fun_set_values.appendCode(""String_Node_Str"");
  fun_set_values.appendCode(""String_Node_Str"");
  CppConstructor con=CppConstructor.factory.create(var_a,var_b);
  con.appendCode(""String_Node_Str"");
  class_CRectangleSimple.add(Cpp.PUBLIC,con);
  CppFunCommentImpl comment_fun_set_values=new CppFunCommentImpl(""String_Node_Str"");
  comment_fun_set_values.addParameter(var_a,""String_Node_Str"");
  comment_fun_set_values.addParameter(var_b,""String_Node_Str"");
  fun_set_values.setComment(comment_fun_set_values);
  class_CRectangleSimple.add(Cpp.PUBLIC,fun_set_values);
  CppFun fun_area=CppFun.factory.create(type_int,""String_Node_Str"");
  CppFunCommentImpl comment_fun_area=new CppFunCommentImpl(""String_Node_Str"");
  comment_fun_area.setReturnTypeDescription(""String_Node_Str"");
  fun_area.setComment(comment_fun_area);
  fun_area.appendCode(""String_Node_Str"");
  class_CRectangleSimple.add(Cpp.PUBLIC,fun_area);
  CppSourceFile file=workspace.getC().getCppSourceFile(className);
  CppSourceFile header=this.workspace.getC().getCppHeaderFile(className);
  file.addInclude(header);
  header.setComment(new CCommentImpl(""String_Node_Str""));
  file.addLibInclude(""String_Node_Str"");
  file.addUsingNamespace(""String_Node_Str"");
  file.setComment(new CCommentImpl(""String_Node_Str""));
  CFun fun_main=CFun.factory.create(""String_Node_Str"",""String_Node_Str"",null);
  fun_main.appendCode(className + ""String_Node_Str"");
  fun_main.appendCode(""String_Node_Str"");
  fun_main.appendCode(""String_Node_Str"");
  fun_main.setComment(new CCommentImpl(""String_Node_Str""));
  file.add(fun_main);
  header.add(class_CRectangleSimple);
}","void generate() throws Exception {
  String className=""String_Node_Str"";
  CppClass class_CRectangleSimple=CppClass.factory.create(className);
  class_CRectangleSimple.setComment(new CCommentImpl(""String_Node_Str""));
  CppTypeGenerator type_int=new CppTypeGenerator(Cpp.INT);
  CppVar var_x=CppVar.factory.create(Cpp.PRIVATE,type_int.toString(),""String_Node_Str"",""String_Node_Str"");
  var_x.setComment(new CCommentImpl(""String_Node_Str""));
  CppVar var_y=CppVar.factory.create(Cpp.PRIVATE,type_int.toString(),""String_Node_Str"");
  var_y.setComment(new CCommentImpl(""String_Node_Str""));
  class_CRectangleSimple.add(var_y);
  class_CRectangleSimple.add(var_x);
  CppVar var_a=CppVar.factory.create(type_int,""String_Node_Str"");
  CppVar var_b=CppVar.factory.create(type_int,""String_Node_Str"");
  CppFun fun_set_values=CppFun.factory.create(Cpp.VOID,""String_Node_Str"",var_a,var_b);
  fun_set_values.appendCode(""String_Node_Str"");
  fun_set_values.appendCode(""String_Node_Str"");
  CppConstructor con=CppConstructor.factory.create(var_a,var_b);
  con.appendCode(""String_Node_Str"");
  class_CRectangleSimple.add(Cpp.PUBLIC,con);
  CppFunCommentImpl comment_fun_set_values=new CppFunCommentImpl(""String_Node_Str"");
  comment_fun_set_values.addParameter(var_a,""String_Node_Str"");
  comment_fun_set_values.addParameter(var_b,""String_Node_Str"");
  fun_set_values.setComment(comment_fun_set_values);
  class_CRectangleSimple.add(Cpp.PUBLIC,fun_set_values);
  CppFun fun_area=CppFun.factory.create(type_int,""String_Node_Str"");
  CppFunCommentImpl comment_fun_area=new CppFunCommentImpl(""String_Node_Str"");
  comment_fun_area.setReturnTypeDescription(""String_Node_Str"");
  fun_area.setComment(comment_fun_area);
  fun_area.appendCode(""String_Node_Str"");
  class_CRectangleSimple.add(Cpp.PUBLIC,fun_area);
  CppSourceFile file=this.workspace.getC().getCppSourceFile(className);
  CppSourceFile header=this.workspace.getC().getCppHeaderFile(className);
  file.addInclude(header);
  header.setComment(new CCommentImpl(""String_Node_Str""));
  file.addLibInclude(""String_Node_Str"");
  file.addUsingNamespace(""String_Node_Str"");
  file.setComment(new CCommentImpl(""String_Node_Str""));
  CFun fun_main=CFun.factory.create(""String_Node_Str"",""String_Node_Str"",null);
  fun_main.appendCode(className + ""String_Node_Str"");
  fun_main.appendCode(""String_Node_Str"");
  fun_main.appendCode(""String_Node_Str"");
  fun_main.setComment(new CCommentImpl(""String_Node_Str""));
  file.add(fun_main);
  header.add(class_CRectangleSimple);
}",0.999000199960008
6530,"@Override public CppClass add(long vis,CppClass... cppClass) throws CppDuplicateException {
  for (  CppClass c : cppClass) {
    addInternal(vis,c);
    c.addParents(this.parents,this);
  }
  return this;
}","/** 
 * Nested class
 */
@Override public CppClass add(long vis,CppClass... cppClass) throws CppDuplicateException {
  for (  CppClass c : cppClass) {
    addInternal(vis,c);
  }
  return this;
}",0.845771144278607
6531,"public CppClassImpl(String className){
  this.className=className;
  try {
    CppConstructor con=CppConstructor.factory.create();
    add(Cpp.PUBLIC,con);
  }
 catch (  CppDuplicateException e) {
    e.printStackTrace();
  }
}","public CppClassImpl(String className){
  this.className=className;
}",0.4610169491525424
6532,"@Override public void toString(StringBuffer buffer,int tabCount){
  if (comment != null) {
    comment.toString(buffer,tabCount);
  }
  buffer.append(""String_Node_Str"" + this.className);
  if (this.getExtendeds().length > 0) {
    for (int i=0; i < this.getExtendeds().length; i++) {
      if (i == 0) {
        buffer.append(""String_Node_Str"");
      }
 else {
        buffer.append(""String_Node_Str"");
      }
      buffer.append(this.getExtendeds()[i]);
    }
  }
  buffer.append(Cpp.newline + ""String_Node_Str"" + Cpp.newline+ Cpp.newline);
  StringBuffer tmp_public=new StringBuffer();
  toStringHelper(tmp_public,tabCount,Cpp.PUBLIC);
  if (tmp_public.length() > 0) {
    indent(buffer,tabCount + 1);
    buffer.append(""String_Node_Str"" + Cpp.newline);
    appendBody(buffer,tmp_public,tabCount + 2);
  }
  StringBuffer tmp_protected=new StringBuffer();
  toStringHelper(tmp_protected,tabCount,Cpp.PROTECTED);
  if (tmp_protected.length() > 0) {
    buffer.append(Cpp.newline);
    indent(buffer,tabCount + 1);
    buffer.append(""String_Node_Str"" + Cpp.newline);
    appendBody(buffer,tmp_protected,tabCount + 2);
  }
  StringBuffer tmp_private=new StringBuffer();
  toStringHelper(tmp_private,tabCount,Cpp.PRIVATE);
  if (tmp_private.length() > 0) {
    buffer.append(Cpp.newline);
    indent(buffer,tabCount + 1);
    buffer.append(""String_Node_Str"" + Cpp.newline);
    appendBody(buffer,tmp_private,tabCount + 2);
  }
  buffer.append(Cpp.newline + ""String_Node_Str"" + Cpp.newline+ Cpp.newline);
}","@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
  }
  buffer.append(""String_Node_Str"" + this.className);
  if (this.getExtendeds().length > 0) {
    for (int i=0; i < this.getExtendeds().length; i++) {
      if (i == 0) {
        buffer.append(""String_Node_Str"");
      }
 else {
        buffer.append(""String_Node_Str"");
      }
      buffer.append(this.getExtendeds()[i]);
    }
  }
  buffer.append(Cpp.newline + ""String_Node_Str"" + Cpp.newline+ Cpp.newline);
  StringBuffer tmp_public=new StringBuffer();
  toStringHelper(tmp_public,tabCount,Cpp.PUBLIC);
  if (tmp_public.length() > 0) {
    indent(buffer,tabCount + 1);
    buffer.append(""String_Node_Str"" + Cpp.newline);
    appendBody(buffer,tmp_public,tabCount + 2);
  }
  StringBuffer tmp_protected=new StringBuffer();
  toStringHelper(tmp_protected,tabCount,Cpp.PROTECTED);
  if (tmp_protected.length() > 0) {
    buffer.append(Cpp.newline);
    indent(buffer,tabCount + 1);
    buffer.append(""String_Node_Str"" + Cpp.newline);
    appendBody(buffer,tmp_protected,tabCount + 2);
  }
  StringBuffer tmp_private=new StringBuffer();
  toStringHelper(tmp_private,tabCount,Cpp.PRIVATE);
  if (tmp_private.length() > 0) {
    buffer.append(Cpp.newline);
    indent(buffer,tabCount + 1);
    buffer.append(""String_Node_Str"" + Cpp.newline);
    appendBody(buffer,tmp_private,tabCount + 2);
  }
  buffer.append(Cpp.newline + ""String_Node_Str"");
  buffer.append(Cpp.newline);
}",0.984126984126984
6533,"@Override public void toString(StringBuffer buffer,int tabCount){
  if (comment != null) {
    comment.toString(buffer,tabCount);
  }
  if (base.getLibIncludes().size() > 0) {
    for (    String include : base.getLibIncludes()) {
      buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (base.getEnums().size() > 0) {
    for (    CEnum e : base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
  }
  if (base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  for (  CStructBaseImpl struct : base.structsUnions) {
    buffer.append(struct.toString());
    buffer.append(Cpp.newline + Cpp.newline);
  }
  for (  CppClass c : this.cppClasses) {
    buffer.append(c.toString());
  }
  if (base.afterDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : base.afterDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
}","@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
  }
  if (base.getLibIncludes().size() > 0) {
    for (    String include : base.getLibIncludes()) {
      buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (base.getEnums().size() > 0) {
    for (    CEnum e : base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
  }
  if (base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  for (  CStructBaseImpl struct : base.structsUnions) {
    buffer.append(struct.toString());
    buffer.append(Cpp.newline + Cpp.newline);
  }
  for (  CppClass c : this.cppClasses) {
    buffer.append(c.toString());
  }
  if (base.afterDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : base.afterDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
}",0.9957860615883306
6534,"private void toStringHelper(StringBuffer tmp,int tabCount,long visability){
  if (null != this.getNested(visability) && this.getNested(visability).size() > 0) {
    for (    CppClass f : this.getNested(visability)) {
      f.toString(tmp,tabCount);
      tmp.append(Cpp.newline);
    }
    tmp.append(Cpp.newline);
  }
  if (null != this.getStructsUnions(visability) && this.getStructsUnions(visability).size() > 0) {
    for (    CStructBase c : this.getStructsUnions(visability)) {
      tmp.append(c.toString() + Cpp.newline);
    }
  }
  if (null != this.getEnums(visability) && this.getEnums(visability).size() > 0) {
    for (    CEnum e : this.getEnums(visability)) {
      tmp.append(e.toString() + Cpp.newline);
    }
  }
  if (null != this.getConstructors(visability) && this.getConstructors(visability).size() > 0) {
    for (    CppConstructor c : this.getConstructors(visability)) {
      tmp.append(c.getSignature() + ""String_Node_Str"" + Cpp.newline);
    }
  }
  if (null != this.getDestructors(visability) && this.getDestructors(visability).size() > 0) {
    for (    CppDestructor d : this.getDestructors(visability)) {
      tmp.append(""String_Node_Str"" + d.getSignature() + ""String_Node_Str""+ Cpp.newline);
    }
    tmp.append(Cpp.newline);
  }
  if (null != this.getFuns(visability) && this.getFuns(visability).size() > 0) {
    for (    CppFun f : this.getFuns(visability)) {
      tmp.append(f.getSignature() + ""String_Node_Str"" + Cpp.newline);
    }
    tmp.append(Cpp.newline);
  }
  if (null != this.getVars(visability) && this.getVars(visability).size() > 0) {
    for (    CppVar v : this.getVars(visability)) {
      tmp.append(v.toString() + ""String_Node_Str"" + Cpp.newline);
    }
    tmp.append(Cpp.newline);
  }
}","private void toStringHelper(StringBuffer tmp,int tabCount,long visability){
  if (null != this.getNested(visability) && this.getNested(visability).size() > 0) {
    for (    CppClass c : this.getNested(visability)) {
      c.toString(tmp,tabCount);
    }
    tmp.append(Cpp.newline);
  }
  if (null != this.getStructsUnions(visability) && this.getStructsUnions(visability).size() > 0) {
    for (    CStructBase c : this.getStructsUnions(visability)) {
      tmp.append(c.toString() + Cpp.newline);
    }
  }
  if (null != this.getEnums(visability) && this.getEnums(visability).size() > 0) {
    for (    CEnum e : this.getEnums(visability)) {
      tmp.append(e.toString() + Cpp.newline);
    }
  }
  if (null != this.getConstructors(visability) && this.getConstructors(visability).size() > 0) {
    for (    CppConstructor c : this.getConstructors(visability)) {
      tmp.append(c.getSignature() + ""String_Node_Str"" + Cpp.newline);
    }
  }
  if (null != this.getDestructors(visability) && this.getDestructors(visability).size() > 0) {
    for (    CppDestructor d : this.getDestructors(visability)) {
      tmp.append(""String_Node_Str"" + d.getSignature() + ""String_Node_Str""+ Cpp.newline);
    }
    tmp.append(Cpp.newline);
  }
  if (null != this.getFuns(visability) && this.getFuns(visability).size() > 0) {
    for (    CppFun f : this.getFuns(visability)) {
      tmp.append(f.getSignature() + ""String_Node_Str"" + Cpp.newline);
    }
    tmp.append(Cpp.newline);
  }
  if (null != this.getVars(visability) && this.getVars(visability).size() > 0) {
    for (    CppVar v : this.getVars(visability)) {
      tmp.append(v.toString() + ""String_Node_Str"" + Cpp.newline);
    }
    tmp.append(Cpp.newline);
  }
}",0.9898873158046808
6535,"@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
    buffer.append(Cpp.newline);
  }
  if (null != base.getLibIncludes() && base.getLibIncludes().size() > 0) {
    for (    String include : base.getLibIncludes()) {
      buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != base.beforeDirectives && base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppNamespaces && this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getEnums() && base.getEnums().size() > 0) {
    for (    CEnum e : this.base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
  }
  if (null != this.base && null != this.base.getTypeDefs() && this.base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : this.base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.structsUnions && this.base.structsUnions.size() > 0) {
    for (    CStructBaseImpl struct : this.base.structsUnions) {
      buffer.append(struct.toString());
      buffer.append(Cpp.newline + Cpp.newline);
    }
  }
  if (null != this.cppClasses && this.cppClasses.size() > 0) {
    for (    CppClass c : this.cppClasses) {
      buffer.append(c.toString());
    }
  }
  if (null != this.base && null != this.base.afterDirectives && this.base.afterDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : this.base.afterDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
  }
}","@Override public void toString(StringBuffer buffer,int tabCount){
  prepare();
  if (comment != null) {
    comment.toString(buffer,tabCount);
    buffer.append(Cpp.newline);
  }
  if (null != base.getLibIncludes() && base.getLibIncludes().size() > 0) {
    for (    String include : base.getLibIncludes()) {
      if (include.endsWith(""String_Node_Str"")) {
        buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
      }
 else {
        buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
      }
    }
    buffer.append(Cpp.newline);
  }
  if (null != base.beforeDirectives && base.beforeDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : base.beforeDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.cppNamespaces && this.cppNamespaces.size() > 0) {
    for (    String ns : this.cppNamespaces) {
      buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.getEnums() && base.getEnums().size() > 0) {
    for (    CEnum e : this.base.getEnums()) {
      buffer.append(e.toString() + Cpp.newline);
    }
  }
  if (null != this.base && null != this.base.getTypeDefs() && this.base.getTypeDefs().size() > 0) {
    for (    CTypeDef t : this.base.getTypeDefs()) {
      buffer.append(t.toString());
    }
    buffer.append(Cpp.newline);
  }
  if (null != this.base && null != this.base.structsUnions && this.base.structsUnions.size() > 0) {
    for (    CStructBaseImpl struct : this.base.structsUnions) {
      buffer.append(struct.toString());
      buffer.append(Cpp.newline + Cpp.newline);
    }
  }
  if (null != this.cppClasses && this.cppClasses.size() > 0) {
    for (    CppClass c : this.cppClasses) {
      buffer.append(c.toString());
    }
  }
  if (null != this.base && null != this.base.afterDirectives && this.base.afterDirectives.size() > 0) {
    for (    CPreProcessorDirectiveImpl ppd : this.base.afterDirectives) {
      ppd.toString(buffer,tabCount);
      buffer.append(Cpp.newline);
    }
  }
}",0.949786830885836
6536,"private void toStringHelper(StringBuffer buffer,CppClass clazz,int tabCount){
  if (null != clazz.getConstructors(Cpp.PUBLIC) && clazz.getConstructors(Cpp.PUBLIC).size() > 0) {
    for (    CppConstructor c : clazz.getConstructors(Cpp.PUBLIC)) {
      c.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getConstructors(Cpp.PRIVATE) && clazz.getConstructors(Cpp.PRIVATE).size() > 0) {
    for (    CppConstructor c : clazz.getConstructors(Cpp.PRIVATE)) {
      c.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getDestructors(Cpp.PRIVATE) && clazz.getDestructors(Cpp.PRIVATE).size() > 0) {
    for (    CppDestructor d : clazz.getDestructors(Cpp.PRIVATE)) {
      d.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getDestructors(Cpp.PUBLIC) && clazz.getDestructors(Cpp.PUBLIC).size() > 0) {
    for (    CppDestructor d : clazz.getDestructors(Cpp.PUBLIC)) {
      d.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getFuns(Cpp.PUBLIC) && clazz.getFuns(Cpp.PUBLIC).size() > 0) {
    for (int i=0; i < clazz.getFuns(Cpp.PUBLIC).size(); ++i) {
      CppFun f=clazz.getFuns(Cpp.PUBLIC).get(i);
      if (i < clazz.getFuns(Cpp.PUBLIC).size() - 1) {
        f.toString(buffer,tabCount,false);
      }
 else {
        f.toString(buffer,tabCount,true);
      }
    }
  }
  if (null != clazz.getFuns(Cpp.PRIVATE) && clazz.getFuns(Cpp.PRIVATE).size() > 0) {
    for (int i=0; i < clazz.getFuns(Cpp.PRIVATE).size(); ++i) {
      CppFun f=clazz.getFuns(Cpp.PRIVATE).get(i);
      if (i < clazz.getFuns(Cpp.PRIVATE).size() - 1) {
        f.toString(buffer,tabCount,false);
      }
 else {
        f.toString(buffer,tabCount,true);
      }
    }
  }
  if (null != clazz.getNested(Cpp.PUBLIC) && clazz.getNested(Cpp.PUBLIC).size() > 0) {
    for (    CppClass c : clazz.getNested(Cpp.PUBLIC)) {
      toStringHelper(buffer,c,tabCount);
    }
  }
  if (null != clazz.getNested(Cpp.PRIVATE) && clazz.getNested(Cpp.PRIVATE).size() > 0) {
    for (    CppClass c : clazz.getNested(Cpp.PRIVATE)) {
      toStringHelper(buffer,c,tabCount);
    }
  }
}","private void toStringHelper(StringBuffer buffer,CppClass clazz,int tabCount){
  if (null != clazz.getConstructors(Cpp.PUBLIC) && clazz.getConstructors(Cpp.PUBLIC).size() > 0) {
    for (    CppConstructor c : clazz.getConstructors(Cpp.PUBLIC)) {
      c.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getConstructors(Cpp.PRIVATE) && clazz.getConstructors(Cpp.PRIVATE).size() > 0) {
    for (    CppConstructor c : clazz.getConstructors(Cpp.PRIVATE)) {
      c.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getDestructors(Cpp.PRIVATE) && clazz.getDestructors(Cpp.PRIVATE).size() > 0) {
    for (    CppDestructor d : clazz.getDestructors(Cpp.PRIVATE)) {
      d.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getDestructors(Cpp.PUBLIC) && clazz.getDestructors(Cpp.PUBLIC).size() > 0) {
    for (    CppDestructor d : clazz.getDestructors(Cpp.PUBLIC)) {
      d.toString(buffer,tabCount);
    }
  }
  if (null != clazz.getFuns(Cpp.PUBLIC) && clazz.getFuns(Cpp.PUBLIC).size() > 0) {
    for (int i=0; i < clazz.getFuns(Cpp.PUBLIC).size(); ++i) {
      CppFun f=clazz.getFuns(Cpp.PUBLIC).get(i);
      if (i < clazz.getFuns(Cpp.PUBLIC).size() - 1) {
        f.toString(buffer,tabCount,false);
      }
 else {
        f.toString(buffer,tabCount,true);
      }
    }
    buffer.append(Cpp.newline + Cpp.newline);
  }
  if (null != clazz.getFuns(Cpp.PRIVATE) && clazz.getFuns(Cpp.PRIVATE).size() > 0) {
    for (int i=0; i < clazz.getFuns(Cpp.PRIVATE).size(); ++i) {
      CppFun f=clazz.getFuns(Cpp.PRIVATE).get(i);
      if (i < clazz.getFuns(Cpp.PRIVATE).size() - 1) {
        f.toString(buffer,tabCount,false);
      }
 else {
        f.toString(buffer,tabCount,true);
      }
    }
    buffer.append(Cpp.newline + Cpp.newline);
  }
  if (null != clazz.getNested(Cpp.PUBLIC) && clazz.getNested(Cpp.PUBLIC).size() > 0) {
    for (    CppClass c : clazz.getNested(Cpp.PUBLIC)) {
      toStringHelper(buffer,c,tabCount);
    }
  }
  if (null != clazz.getNested(Cpp.PRIVATE) && clazz.getNested(Cpp.PRIVATE).size() > 0) {
    for (    CppClass c : clazz.getNested(Cpp.PRIVATE)) {
      toStringHelper(buffer,c,tabCount);
    }
  }
}",0.9781887150308204
6537,"public String getTypeName(){
  return type.name();
}","public String getTypeName(){
  return typeGenerator.getTypeName();
}",0.85
6538,"/** 
 * Finish the construction of the current container class by building it. As soon as a container is built, no more new member variables can be added to it. This function is usually called, when the closing XML tag of a type definition is reached.
 * @throws Exception Error while building container
 */
@Override public void buildCurrentContainer() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    CppClassGenerationStrategy cppStrategy=new CppClassGenerationStrategy();
    CppClass classObject=(CppClass)this.incompleteBuilders.pop().build().asClassObject(cppStrategy);
    while (TypeGenHelper.stackIsNotEmpty(incompleteLocalBuilders,classObject.getName())) {
      CppClass innerClassObject=(CppClass)cppStrategy.generateClassObject(this.incompleteLocalBuilders.get(classObject.getName()).pop().build());
      classObject.add(Cpp.PRIVATE,innerClassObject);
      LOGGER.debug(String.format(""String_Node_Str"",innerClassObject.getName(),classObject.getName()));
    }
    if (!this.generatedElements.containsKey(classObject.getName())) {
      this.generatedElements.put(classObject.getName(),new CppTypeGen.SourceFileData(classObject,cppStrategy.getRequiredDependencies()));
    }
    LOGGER.debug(String.format(""String_Node_Str"",classObject.getName()));
  }
}","/** 
 * Finish the construction of the current container class by building it. As soon as a container is built, no more new member variables can be added to it. This function is usually called, when the closing XML tag of a type definition is reached.
 * @throws Exception Error while building container
 */
@Override public void buildCurrentContainer() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    CppClassGenerationStrategy cppStrategy=new CppClassGenerationStrategy();
    CppClass classObject=(CppClass)this.incompleteBuilders.pop().build().asClassObject(cppStrategy);
    while (TypeGenHelper.stackIsNotEmpty(incompleteLocalBuilders,classObject.getName())) {
      CppClass innerClassObject=(CppClass)cppStrategy.generateClassObject(this.incompleteLocalBuilders.get(classObject.getName()).pop().build());
      classObject.add(Cpp.PUBLIC,innerClassObject);
      LOGGER.debug(String.format(""String_Node_Str"",innerClassObject.getName(),classObject.getName()));
    }
    if (!this.generatedElements.containsKey(classObject.getName())) {
      this.generatedElements.put(classObject.getName(),new CppTypeGen.SourceFileData(classObject,cppStrategy.getRequiredDependencies()));
    }
    LOGGER.debug(String.format(""String_Node_Str"",classObject.getName()));
  }
}",0.9964966913195796
6539,"/** 
 * Create source files from container classes and write them to the language-specific workspace.
 * @throws Exception Error during source file write-out
 */
@Override public void writeSourceFiles() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    LOGGER.error(String.format(""String_Node_Str"",this.incompleteBuilders.size()));
    throw new IllegalStateException(""String_Node_Str"");
  }
  CWorkspace cWorkspace=this.workspace.getC();
  CppHeaderFile cpphf=null;
  CppSourceFile cppsf=null;
  new CppTypeHelper(this.workspace);
  for (  String name : this.generatedElements.keySet()) {
    CppTypeGen.SourceFileData sourceFileData=this.generatedElements.get(name);
    cpphf=cWorkspace.getCppHeaderFile(name);
    cpphf.add(sourceFileData.typeObject);
    cpphf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    String rootContainerName=this.properties.getProperty(FabricTypeGenModule.MAIN_CLASS_NAME_KEY);
    if (name.equals(rootContainerName)) {
      for (      String include : this.generatedElements.keySet()) {
        if (!include.equals(name)) {
          cpphf.addLibInclude(include + ""String_Node_Str"");
        }
      }
    }
    for (    CppVar member : sourceFileData.typeObject.getVars(Cpp.PRIVATE)) {
      if (member.getTypeName().endsWith(""String_Node_Str"")) {
        cpphf.addLibInclude(member.getTypeName());
      }
    }
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addAfterDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cppsf=cWorkspace.getCppSourceFile(name);
    cppsf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    cppsf.addInclude(cpphf);
    cppsf.addLibInclude(""String_Node_Str"");
    cppsf.addLibInclude(""String_Node_Str"");
    cppsf.addUsingNamespace(""String_Node_Str"");
    if (!cpphf.getFileName().equals(CppTypeHelper.FILE_NAME)) {
      cpphf.addLibInclude(CppTypeHelper.FILE_NAME + ""String_Node_Str"");
    }
    for (    String requiredInclude : sourceFileData.requiredIncludes) {
      cpphf.addLibInclude(requiredInclude);
      cpphf.addUsingNamespace(""String_Node_Str"");
    }
    LOGGER.debug(String.format(""String_Node_Str"",name));
  }
}","/** 
 * Create source files from container classes and write them to the language-specific workspace.
 * @throws Exception Error during source file write-out
 */
@Override public void writeSourceFiles() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    LOGGER.error(String.format(""String_Node_Str"",this.incompleteBuilders.size()));
    throw new IllegalStateException(""String_Node_Str"");
  }
  CWorkspace cWorkspace=this.workspace.getC();
  CppHeaderFile cpphf=null;
  CppSourceFile cppsf=null;
  CppTypeHelper.init(workspace);
  for (  String name : this.generatedElements.keySet()) {
    CppTypeGen.SourceFileData sourceFileData=this.generatedElements.get(name);
    cpphf=cWorkspace.getCppHeaderFile(name);
    cpphf.add(sourceFileData.typeObject);
    cpphf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    for (    CppVar member : sourceFileData.typeObject.getVars(Cpp.PRIVATE)) {
      System.out.println(""String_Node_Str"" + member.getTypeName() + ""String_Node_Str""+ name);
      if (member.getTypeName().endsWith(""String_Node_Str"") && !member.getTypeName().equals(name) && !cpphf.containsLibInclude(member.getTypeName() + ""String_Node_Str"")&& !this.incompleteLocalBuilders.containsKey(name)) {
        System.out.println(""String_Node_Str"" + member.getTypeName());
        cpphf.addLibInclude(member.getTypeName() + ""String_Node_Str"");
      }
    }
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addBeforeDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cpphf.addAfterDirective(""String_Node_Str"" + CppTypeGen.createIncludeGuardName(cpphf.getFileName()));
    cppsf=cWorkspace.getCppSourceFile(name);
    cppsf.setComment(new CCommentImpl(String.format(""String_Node_Str"",name)));
    cppsf.addInclude(cpphf);
    cppsf.addLibInclude(""String_Node_Str"");
    cppsf.addUsingNamespace(""String_Node_Str"");
    if (!cpphf.getFileName().equals(CppTypeHelper.FILE_NAME)) {
      cpphf.addLibInclude(CppTypeHelper.FILE_NAME + ""String_Node_Str"");
    }
    for (    String requiredInclude : sourceFileData.requiredIncludes) {
      cpphf.addLibInclude(requiredInclude);
      cpphf.addUsingNamespace(""String_Node_Str"");
    }
    LOGGER.debug(String.format(""String_Node_Str"",name));
  }
}",0.7440476190476191
6540,"@Override public void toString(StringBuffer buffer,int tabCount){
  StringBuffer tmp=new StringBuffer();
  buffer.append(""String_Node_Str"" + this.className);
  int counter=0;
  for (  String c : this.getExtendeds()) {
    counter++;
    tmp.append(""String_Node_Str"" + c);
    if (counter != this.extendeds.size()) {
      tmp.append(""String_Node_Str"" + Cpp.newline);
    }
  }
  buffer.append(Cpp.newline + ""String_Node_Str"" + Cpp.newline);
  tmp.append(""String_Node_Str"" + Cpp.newline);
  for (  CppConstructor c : this.getConstructors(Cpp.PUBLIC)) {
    tmp.append(""String_Node_Str"" + c.getSignature() + ""String_Node_Str""+ Cpp.newline);
  }
  for (  CppDestructor d : this.getDestructors(Cpp.PUBLIC)) {
    tmp.append(""String_Node_Str"" + d.getSignature() + ""String_Node_Str""+ Cpp.newline);
  }
  for (  CppFun f : this.getFuns(Cpp.PUBLIC)) {
    tmp.append(""String_Node_Str"" + f.getSignature() + ""String_Node_Str""+ Cpp.newline);
  }
  tmp.append(Cpp.newline);
  tmp.append(""String_Node_Str"" + Cpp.newline);
  for (  CppVar v : this.getVars(Cpp.PRIVATE)) {
    tmp.append(""String_Node_Str"" + v.toString() + ""String_Node_Str""+ Cpp.newline);
  }
  for (  CppFun f : this.getFuns(Cpp.PRIVATE)) {
    tmp.append(""String_Node_Str"" + f.getSignature() + ""String_Node_Str""+ Cpp.newline);
  }
  appendBody(buffer,tmp,tabCount + 1);
  buffer.append(Cpp.newline);
  buffer.append(""String_Node_Str"" + Cpp.newline);
}","@Override public void toString(StringBuffer buffer,int tabCount){
  StringBuffer tmp=new StringBuffer();
  buffer.append(""String_Node_Str"" + this.className);
  int counter=0;
  for (  String c : this.getExtendeds()) {
    counter++;
    tmp.append(""String_Node_Str"" + c);
    if (counter != this.extendeds.size()) {
      tmp.append(""String_Node_Str"" + Cpp.newline);
    }
  }
  buffer.append(Cpp.newline + ""String_Node_Str"" + Cpp.newline);
  tmp.append(""String_Node_Str"" + Cpp.newline);
  for (  CppConstructor c : this.getConstructors(Cpp.PUBLIC)) {
    tmp.append(""String_Node_Str"" + c.getSignature() + ""String_Node_Str""+ Cpp.newline);
  }
  for (  CppDestructor d : this.getDestructors(Cpp.PUBLIC)) {
    tmp.append(""String_Node_Str"" + d.getSignature() + ""String_Node_Str""+ Cpp.newline);
  }
  for (  CppVar v : this.getVars(Cpp.PUBLIC)) {
    tmp.append(""String_Node_Str"" + v.toString() + ""String_Node_Str""+ Cpp.newline);
  }
  for (  CppFun f : this.getFuns(Cpp.PUBLIC)) {
    tmp.append(""String_Node_Str"" + f.getSignature() + ""String_Node_Str""+ Cpp.newline);
  }
  tmp.append(Cpp.newline);
  tmp.append(""String_Node_Str"" + Cpp.newline);
  for (  CppVar v : this.getVars(Cpp.PRIVATE)) {
    tmp.append(""String_Node_Str"" + v.toString() + ""String_Node_Str""+ Cpp.newline);
  }
  for (  CppFun f : this.getFuns(Cpp.PRIVATE)) {
    tmp.append(""String_Node_Str"" + f.getSignature() + ""String_Node_Str""+ Cpp.newline);
  }
  appendBody(buffer,tmp,tabCount + 1);
  buffer.append(Cpp.newline);
  buffer.append(""String_Node_Str"" + Cpp.newline);
}",0.9541595925297114
6541,"public String getSignature(){
  String type=null;
switch (returnType) {
case GENERATOR:
    type=returnTypeGenerator.toString();
  break;
case COMPLEX:
type=returnTypeComplex.getTypeName();
break;
case LONG:
type=Cpp.toString(returnTypeLong);
break;
case STRING:
type=returnTypeString;
break;
}
return type + ""String_Node_Str"" + signature.toString();
}","public String getSignature(){
  return getType() + ""String_Node_Str"" + signature.toString();
}",0.42152466367713
6542,"@Override public void toString(StringBuffer buffer,int tabCount){
switch (returnType) {
case COMPLEX:
    buffer.append(returnTypeComplex.getTypeName());
  break;
case LONG:
buffer.append(Cpp.toString(returnTypeLong));
break;
case STRING:
buffer.append(returnTypeString);
break;
}
buffer.append(""String_Node_Str"" + this.clazz.getTypeName() + ""String_Node_Str"");
signature.toString(buffer,0);
buffer.append(""String_Node_Str"" + Cpp.newline);
appendBody(buffer,body,tabCount + 1);
buffer.append(Cpp.newline);
}","@Override public void toString(StringBuffer buffer,int tabCount){
  buffer.append(getType() + ""String_Node_Str"" + this.clazz.getTypeName()+ ""String_Node_Str"");
  signature.toString(buffer,0);
  buffer.append(""String_Node_Str"" + Cpp.newline);
  appendBody(buffer,body,tabCount + 1);
  buffer.append(Cpp.newline + ""String_Node_Str"" + Cpp.newline);
  buffer.append(Cpp.newline);
}",0.5
6543,"@Override public void toString(StringBuffer buffer,int tabCount){
  buffer.append(""String_Node_Str"" + Cpp.newline);
  for (  String include : base.getLibIncludes()) {
    buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
  }
  for (  CppSourceFile file : this.cppUserHeaderFiles) {
    buffer.append(""String_Node_Str"" + file.getFileName() + ""String_Node_Str""+ Cpp.newline);
  }
  buffer.append(Cpp.newline);
  for (  String ns : this.cppNamespaces) {
    buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
  }
  buffer.append(Cpp.newline);
  for (  CppSourceFileImpl file : this.cppUserHeaderFiles) {
    for (    CppClass clazz : file.getCppClasses()) {
      for (      CppConstructor c : clazz.getConstructors(Cpp.PUBLIC)) {
        c.toString(buffer,tabCount);
      }
      for (      CppDestructor d : clazz.getDestructors(Cpp.PUBLIC)) {
        d.toString(buffer,tabCount);
      }
      for (      CppFun f : clazz.getFuns(Cpp.PUBLIC)) {
        f.toString(buffer,tabCount);
        buffer.append(""String_Node_Str"" + Cpp.newline + Cpp.newline);
      }
      for (      CppFun f : clazz.getFuns(Cpp.PRIVATE)) {
        f.toString(buffer,tabCount);
        buffer.append(""String_Node_Str"" + Cpp.newline + Cpp.newline);
      }
    }
  }
  for (  CFun fun : this.base.getFuns()) {
    fun.toString(buffer,tabCount);
  }
}","@Override public void toString(StringBuffer buffer,int tabCount){
  buffer.append(""String_Node_Str"" + Cpp.newline);
  for (  String include : base.getLibIncludes()) {
    buffer.append(""String_Node_Str"" + include + ""String_Node_Str""+ Cpp.newline);
  }
  for (  CppSourceFile file : this.cppUserHeaderFiles) {
    buffer.append(""String_Node_Str"" + file.getFileName() + ""String_Node_Str""+ Cpp.newline);
  }
  buffer.append(Cpp.newline);
  for (  String ns : this.cppNamespaces) {
    buffer.append(""String_Node_Str"" + ns + ""String_Node_Str""+ Cpp.newline);
  }
  buffer.append(Cpp.newline);
  for (  CppSourceFileImpl file : this.cppUserHeaderFiles) {
    for (    CppClass clazz : file.getCppClasses()) {
      for (      CppConstructor c : clazz.getConstructors(Cpp.PUBLIC)) {
        c.toString(buffer,tabCount);
      }
      for (      CppDestructor d : clazz.getDestructors(Cpp.PUBLIC)) {
        d.toString(buffer,tabCount);
      }
      for (      CppFun f : clazz.getFuns(Cpp.PUBLIC)) {
        f.toString(buffer,tabCount);
      }
      for (      CppFun f : clazz.getFuns(Cpp.PRIVATE)) {
        f.toString(buffer,tabCount);
      }
    }
  }
  for (  CFun fun : this.base.getFuns()) {
    fun.toString(buffer,tabCount);
  }
}",0.8796934865900383
6544,"@Override public void startLocalElement(FElement element,FComplexType parent) throws Exception {
  LOGGER.debug(""String_Node_Str"");
  if (null != element && null != parent) {
    this.fixElementIfRequired(element);
  }
}","/** 
 * Handle start of a local schema element. Local elements only apply to complex types. Each local element is equivalent to a member variable in the corresponding container class, so we have to check whether value-tags need to be fixed for the specific XML element.
 * @param element FElement object
 * @param parent Parent FComplexType object
 * @throws Exception Error during processing
 */
@Override public void startLocalElement(FElement element,FComplexType parent) throws Exception {
  LOGGER.debug(""String_Node_Str"");
  if (null != element) {
    this.fixElementIfRequired(element);
  }
}",0.4932844932844933
6545,"private void fixElementIfRequired(FElement element){
  String typeName=""String_Node_Str"";
  boolean isCustomTyped;
  if (SchemaHelper.isBuiltinTypedElement(element)) {
    FSchemaType schemaType=null;
    if (FSchemaTypeHelper.isList(element)) {
      FList listType=(FList)element.getSchemaType();
      schemaType=listType.getItemType();
    }
 else {
      schemaType=element.getSchemaType();
    }
    typeName=this.mapper.lookup(JavaTypeGen.getFabricTypeName(schemaType));
    LOGGER.debug(String.format(""String_Node_Str"",typeName));
    isCustomTyped=false;
    typeName=this.fixPrimitiveTypes(typeName);
  }
 else {
    typeName=element.getSchemaType().getName();
    LOGGER.debug(String.format(""String_Node_Str"",typeName));
    if (!element.getSchemaType().isTopLevel() && !element.getSchemaType().isSimple()) {
      typeName+=""String_Node_Str"";
    }
    isCustomTyped=true;
  }
  LOGGER.debug(""String_Node_Str"" + element.getName() + ""String_Node_Str"");
  if (null != element.getSchemaType() && !FSchemaTypeHelper.isEnum(element.getSchemaType())) {
    if (FSchemaTypeHelper.isArray(element)) {
      ArrayData arrayToFix=new ArrayData(element.getName(),typeName,""String_Node_Str"",typeName,isCustomTyped);
      if (!this.fixArrays.contains(arrayToFix)) {
        LOGGER.debug(""String_Node_Str"");
        this.fixArrays.add(arrayToFix);
      }
    }
 else     if (FSchemaTypeHelper.isList(element)) {
      ListData listToFix=new ListData(element.getName(),typeName,typeName,isCustomTyped);
      if (!this.fixLists.contains(listToFix)) {
        LOGGER.debug(""String_Node_Str"");
        this.fixLists.add(listToFix);
      }
    }
 else     if (isCustomTyped && element.getSchemaType().isSimple()) {
      ElementData elementToFix=new ElementData(element.getName());
      if (!this.fixElements.contains(elementToFix)) {
        LOGGER.debug(""String_Node_Str"");
        this.fixElements.add(elementToFix);
      }
    }
  }
}","/** 
 * This method checks whether value-tags need to be fixed for a particular XML element or not. In case the element needs to be fixed, its data is added to the corresponding field (e.g. fixElements, fixArrays or fixLists) and true is returned. Otherwise simply nothing happens and the method will return false.
 * @param element FElement object
 * @return True if element was fixed, false otherwise
 */
private boolean fixElementIfRequired(FElement element){
  boolean elementWasFixed=false;
  String typeName=""String_Node_Str"";
  boolean isCustomTyped;
  if (SchemaHelper.isBuiltinTypedElement(element)) {
    FSchemaType schemaType=null;
    if (FSchemaTypeHelper.isList(element)) {
      FList listType=(FList)element.getSchemaType();
      schemaType=listType.getItemType();
    }
 else {
      schemaType=element.getSchemaType();
    }
    typeName=this.mapper.lookup(JavaTypeGen.getFabricTypeName(schemaType));
    LOGGER.debug(String.format(""String_Node_Str"",typeName));
    isCustomTyped=false;
    typeName=this.fixPrimitiveTypes(typeName);
  }
 else {
    typeName=element.getSchemaType().getName();
    LOGGER.debug(String.format(""String_Node_Str"",typeName));
    if (!element.getSchemaType().isTopLevel() && !element.getSchemaType().isSimple()) {
      typeName+=""String_Node_Str"";
    }
    isCustomTyped=true;
  }
  LOGGER.debug(String.format(""String_Node_Str"",element.getName()));
  if (null != element.getSchemaType() && !FSchemaTypeHelper.isEnum(element.getSchemaType())) {
    if (FSchemaTypeHelper.isArray(element)) {
      ArrayData arrayToFix=new ArrayData(element.getName(),typeName,""String_Node_Str"",typeName,isCustomTyped);
      if (!this.fixArrays.contains(arrayToFix)) {
        LOGGER.debug(String.format(""String_Node_Str"",(isCustomTyped ? ""String_Node_Str"" : ""String_Node_Str""),element.getName()));
        this.fixArrays.add(arrayToFix);
        elementWasFixed=true;
      }
    }
 else     if (FSchemaTypeHelper.isList(element)) {
      ListData listToFix=new ListData(element.getName(),typeName,typeName,isCustomTyped);
      if (!this.fixLists.contains(listToFix)) {
        LOGGER.debug(String.format(""String_Node_Str"",(isCustomTyped ? ""String_Node_Str"" : ""String_Node_Str""),element.getName()));
        this.fixLists.add(listToFix);
        elementWasFixed=true;
      }
    }
 else     if (isCustomTyped && element.getSchemaType().isSimple()) {
      ElementData elementToFix=new ElementData(element.getName());
      if (!this.fixElements.contains(elementToFix)) {
        LOGGER.debug(String.format(""String_Node_Str"",element.getName()));
        this.fixElements.add(elementToFix);
        elementWasFixed=true;
      }
    }
  }
  return elementWasFixed;
}",0.8091438430019409
6546,"@Override public void startTopLevelElement(FElement element) throws Exception {
  LOGGER.debug(""String_Node_Str"");
  if (null != element) {
    this.fixElementIfRequired(element);
  }
}","/** 
 * Handle start of a top-level schema element. As each top-level element is equivalent to a member variable in the corresponding container class, we have to check whether value-tags need to be fixed for the specific XML element.
 * @param element FElement object
 * @throws Exception Error during processing
 */
@Override public void startTopLevelElement(FElement element) throws Exception {
  LOGGER.debug(""String_Node_Str"");
  if (null != element) {
    this.fixElementIfRequired(element);
  }
}",0.5385735080058224
6547,"/** 
 * Add a member variable to the current container class. Type, name, initial value and restrictions of the element will be mapped to Java where applicable.
 * @param element FElement object
 * @param isTopLevel True if the element is a top-level elementor part of a top-level complex type; false if the element is part of a local complex type
 */
@Override public void addMemberVariable(FElement element,boolean isTopLevel){
  if ((isTopLevel && !this.incompleteBuilders.empty()) || this.hasIncompleteLocalBuilders()) {
    String typeName=""String_Node_Str"";
    if (SchemaHelper.isBuiltinTypedElement(element)) {
      FSchemaType ftype=null;
      if (FSchemaTypeHelper.isList(element)) {
        FList listType=(FList)element.getSchemaType();
        ftype=listType.getItemType();
      }
 else {
        ftype=element.getSchemaType();
      }
      typeName=this.mapper.lookup(JavaTypeGen.getFabricTypeName(ftype));
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
    }
 else {
      typeName=element.getSchemaType().getName();
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
      if (!element.getSchemaType().isTopLevel() && !element.getSchemaType().isSimple()) {
        typeName+=""String_Node_Str"";
      }
    }
    AttributeContainer.Builder current=(isTopLevel ? this.incompleteBuilders.pop() : this.incompleteLocalBuilders.get(this.incompleteBuilders.peek().getName()).pop());
    AttributeContainer.Restriction restrictions=new AttributeContainer.Restriction();
    if (element.getSchemaType().isSimple() && !element.getSchemaType().isTopLevel()) {
      restrictions=this.createRestrictions((FSimpleType)(element.getSchemaType()));
    }
    if (!element.getSchemaType().isTopLevel() && FSchemaTypeHelper.isEnum(element.getSchemaType())) {
      Object[] constants=FSchemaTypeHelper.extractEnumArray((FSimpleType)element.getSchemaType());
      String[] enumConstants=Arrays.copyOf(constants,constants.length,String[].class);
      current.addEnumElement(element.getName() + ""String_Node_Str"",element.getName(),enumConstants);
    }
 else     if (FSchemaTypeHelper.isArray(element)) {
      current.addElementArray(typeName,element.getName(),element.getMinOccurs(),element.getMaxOccurs());
    }
 else     if (FSchemaTypeHelper.isList(element)) {
      FList listType=(FList)element.getSchemaType();
      current.addElementList(typeName,element.getName(),FSchemaTypeHelper.getMinLength(listType),FSchemaTypeHelper.getMaxLength(listType));
    }
 else     if (FSchemaTypeHelper.hasDefaultValue(element)) {
      current.addElement(typeName,element.getName(),element.getDefaultValue(),restrictions);
    }
 else     if (FSchemaTypeHelper.hasFixedValue(element)) {
      current.addConstantElement(typeName,element.getName(),element.getFixedValue());
    }
 else {
      current.addElement(typeName,element.getName(),restrictions);
    }
    if (isTopLevel) {
      this.incompleteBuilders.push(current);
    }
 else {
      String parentContainerName=this.incompleteBuilders.peek().getName();
      Stack<AttributeContainer.Builder> currentStack=this.incompleteLocalBuilders.get(parentContainerName);
      if (null == currentStack) {
        currentStack=new Stack<AttributeContainer.Builder>();
      }
      currentStack.push(current);
      this.incompleteLocalBuilders.put(parentContainerName,currentStack);
    }
    LOGGER.debug(String.format(""String_Node_Str"",element.getName(),(SchemaHelper.isBuiltinTypedElement(element) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",typeName,current.getName()));
  }
}","/** 
 * Add a member variable to the current container class. Type, name, initial value and restrictions of the element will be mapped to Java where applicable.
 * @param element FElement object
 * @param isTopLevel True if the element is a top-level elementor part of a top-level complex type; false if the element is part of a local complex type
 */
@Override public void addMemberVariable(FElement element,boolean isTopLevel){
  if ((isTopLevel && !this.incompleteBuilders.empty()) || this.hasIncompleteLocalBuilders()) {
    String typeName=""String_Node_Str"";
    boolean isCustomTyped;
    if (SchemaHelper.isBuiltinTypedElement(element)) {
      FSchemaType ftype=null;
      if (FSchemaTypeHelper.isList(element)) {
        FList listType=(FList)element.getSchemaType();
        ftype=listType.getItemType();
      }
 else {
        ftype=element.getSchemaType();
      }
      typeName=this.mapper.lookup(JavaTypeGen.getFabricTypeName(ftype));
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
      isCustomTyped=false;
    }
 else {
      typeName=element.getSchemaType().getName();
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
      if (!element.getSchemaType().isTopLevel() && !element.getSchemaType().isSimple()) {
        typeName+=""String_Node_Str"";
      }
      isCustomTyped=true;
    }
    AttributeContainer.Builder current=(isTopLevel ? this.incompleteBuilders.pop() : this.incompleteLocalBuilders.get(this.incompleteBuilders.peek().getName()).pop());
    AttributeContainer.Restriction restrictions=new AttributeContainer.Restriction();
    if (element.getSchemaType().isSimple() && !element.getSchemaType().isTopLevel()) {
      restrictions=this.createRestrictions((FSimpleType)(element.getSchemaType()));
    }
    if (!element.getSchemaType().isTopLevel() && FSchemaTypeHelper.isEnum(element.getSchemaType())) {
      Object[] constants=FSchemaTypeHelper.extractEnumArray((FSimpleType)element.getSchemaType());
      String[] enumConstants=Arrays.copyOf(constants,constants.length,String[].class);
      current.addEnumElement(element.getName() + ""String_Node_Str"",element.getName(),enumConstants);
    }
 else     if (FSchemaTypeHelper.isArray(element)) {
      current.addElementArray(typeName,element.getName(),element.getMinOccurs(),element.getMaxOccurs());
    }
 else     if (FSchemaTypeHelper.isList(element) && !isCustomTyped) {
      FList listType=(FList)element.getSchemaType();
      current.addElementList(typeName,element.getName(),FSchemaTypeHelper.getMinLength(listType),FSchemaTypeHelper.getMaxLength(listType));
    }
 else     if (FSchemaTypeHelper.hasDefaultValue(element)) {
      current.addElement(typeName,element.getName(),element.getDefaultValue(),restrictions);
    }
 else     if (FSchemaTypeHelper.hasFixedValue(element)) {
      current.addConstantElement(typeName,element.getName(),element.getFixedValue());
    }
 else {
      current.addElement(typeName,element.getName(),restrictions);
    }
    if (isTopLevel) {
      this.incompleteBuilders.push(current);
    }
 else {
      String parentContainerName=this.incompleteBuilders.peek().getName();
      Stack<AttributeContainer.Builder> currentStack=this.incompleteLocalBuilders.get(parentContainerName);
      if (null == currentStack) {
        currentStack=new Stack<AttributeContainer.Builder>();
      }
      currentStack.push(current);
      this.incompleteLocalBuilders.put(parentContainerName,currentStack);
    }
    LOGGER.debug(String.format(""String_Node_Str"",element.getName(),(SchemaHelper.isBuiltinTypedElement(element) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",typeName,current.getName()));
  }
}",0.9864790286975718
6548,"/** 
 * Private helper method to generate code that removes unnecessary value-tags from an element or element array in an XML document.
 * @throws Exception Error during code generation
 */
protected JMethod generateRemoveTagFromElement() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}","/** 
 * Private helper method to generate code that removes unnecessary value-tags from an element or element array in an XML document.
 * @throws Exception Error during code generation
 */
protected JMethod generateRemoveTagFromElement() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}",0.9915216421240518
6549,"/** 
 * Private helper method to generate code that adds value-tags to one single list in an XML document.
 * @throws Exception Error during code generation
 */
@Override protected JMethod generateAddTagToList() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}","/** 
 * Private helper method to generate code that adds value-tags to one single list in an XML document.
 * @throws Exception Error during code generation
 */
@Override protected JMethod generateAddTagToList() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}",0.9911832946635732
6550,"/** 
 * Private helper method to generate code that removes unnecessary values-tag and value-tags from a list in an XML document.
 * @throws Exception Error during code generation
 */
@Override protected JMethod generateRemoveTagFromList() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody_private=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody_private);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}","/** 
 * Private helper method to generate code that removes unnecessary values-tag and value-tags from a list in an XML document.
 * @throws Exception Error during code generation
 */
@Override protected JMethod generateRemoveTagFromList() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody_private=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody_private);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}",0.991207774178621
6551,"/** 
 * Private helper method to generate code that removes unnecessary value-tags from an element or element array in an XML document.
 * @throws Exception Error during code generation
 */
protected JMethod generateRemoveTagFromElement() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}","/** 
 * Private helper method to generate code that removes unnecessary value-tags from an element or element array in an XML document.
 * @throws Exception Error during code generation
 */
protected JMethod generateRemoveTagFromElement() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}",0.9915216421240518
6552,"/** 
 * Private helper method to generate code that removes unnecessary values-tag and value-tags from a list in an XML document.
 * @throws Exception Error during code generation
 */
protected JMethod generateRemoveTagFromList() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}","/** 
 * Private helper method to generate code that removes unnecessary values-tag and value-tags from a list in an XML document.
 * @throws Exception Error during code generation
 */
protected JMethod generateRemoveTagFromList() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}",0.9914529914529916
6553,"/** 
 * Private helper method to generate code that removes unnecessary value-tags from XML documents.
 * @param fixElements XML elements, where value-tags need to be fixed
 * @param fixArrays XML arrays, where value-tags need to be fixed
 * @param fixSimpleLists XML lists with simple-typed items,where value-tags need to be fixed
 * @param fixNonSimpleLists XML lists with non-simple-typed items,where value-tags need to be fixed
 * @throws Exception Error during code generation
 */
private JMethod generateRemoveValueTags(final ArrayList<ElementData> fixElements,final ArrayList<ArrayData> fixArrays,final ArrayList<SimpleListData> fixSimpleLists,final ArrayList<NonSimpleListData> fixNonSimpleLists) throws Exception {
  for (  ElementData ed : fixElements) {
    System.out.println(""String_Node_Str"" + ed.getName());
  }
  for (  ArrayData ad : fixArrays) {
    System.out.println(""String_Node_Str"" + ad.getArrayName() + ""String_Node_Str""+ ad.getArrayType()+ ""String_Node_Str""+ ad.getItemName()+ ""String_Node_Str""+ ad.getItemType());
  }
  for (  SimpleListData sld : fixSimpleLists) {
    System.out.println(""String_Node_Str"" + sld.getListName() + ""String_Node_Str""+ sld.getListType()+ ""String_Node_Str""+ sld.getItemType());
  }
  for (  NonSimpleListData nsld : fixNonSimpleLists) {
    System.out.println(""String_Node_Str"" + nsld.getListName() + ""String_Node_Str""+ nsld.getListType()+ ""String_Node_Str""+ nsld.getItemType());
  }
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  for (  ElementData element : fixElements) {
    methodBody+=""String_Node_Str"" + element.getName() + ""String_Node_Str"";
  }
  methodBody+=""String_Node_Str"";
  for (  ArrayData array : fixArrays) {
    methodBody+=""String_Node_Str"" + array.getArrayName() + ""String_Node_Str"";
  }
  methodBody+=""String_Node_Str"";
  for (  SimpleListData list : fixSimpleLists) {
    methodBody+=""String_Node_Str"" + list.getListName() + ""String_Node_Str"";
  }
  methodBody+=""String_Node_Str"";
  for (  NonSimpleListData list : fixNonSimpleLists) {
    methodBody+=""String_Node_Str"" + list.getListName() + ""String_Node_Str"";
  }
  methodBody+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}","/** 
 * Private helper method to generate code that removes unnecessary value-tags from XML documents.
 * @param fixElements XML elements, where value-tags need to be fixed
 * @param fixArrays XML arrays, where value-tags need to be fixed
 * @param fixSimpleLists XML lists with simple-typed items,where value-tags need to be fixed
 * @param fixNonSimpleLists XML lists with non-simple-typed items,where value-tags need to be fixed
 * @throws Exception Error during code generation
 */
private JMethod generateRemoveValueTags(final ArrayList<ElementData> fixElements,final ArrayList<ArrayData> fixArrays,final ArrayList<SimpleListData> fixSimpleLists,final ArrayList<NonSimpleListData> fixNonSimpleLists) throws Exception {
  for (  ElementData ed : fixElements) {
    System.out.println(""String_Node_Str"" + ed.getName());
  }
  for (  ArrayData ad : fixArrays) {
    System.out.println(""String_Node_Str"" + ad.getArrayName() + ""String_Node_Str""+ ad.getArrayType()+ ""String_Node_Str""+ ad.getItemName()+ ""String_Node_Str""+ ad.getItemType());
  }
  for (  SimpleListData sld : fixSimpleLists) {
    System.out.println(""String_Node_Str"" + sld.getListName() + ""String_Node_Str""+ sld.getListType()+ ""String_Node_Str""+ sld.getItemType());
  }
  for (  NonSimpleListData nsld : fixNonSimpleLists) {
    System.out.println(""String_Node_Str"" + nsld.getListName() + ""String_Node_Str""+ nsld.getListType()+ ""String_Node_Str""+ nsld.getItemType());
  }
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  for (  ElementData element : fixElements) {
    methodBody+=String.format(""String_Node_Str"",element.getName());
  }
  methodBody+=""String_Node_Str"";
  for (  ArrayData array : fixArrays) {
    methodBody+=String.format(""String_Node_Str"",array.getArrayName());
  }
  methodBody+=""String_Node_Str"";
  for (  SimpleListData list : fixSimpleLists) {
    methodBody+=String.format(""String_Node_Str"",list.getListName());
  }
  methodBody+=""String_Node_Str"";
  for (  NonSimpleListData list : fixNonSimpleLists) {
    methodBody+=String.format(""String_Node_Str"",list.getListName());
  }
  methodBody+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}",0.9504666188083274
6554,"/** 
 * Private helper method to generate code that adds value-tags to one single list in an XML document.
 * @throws Exception Error during code generation
 */
protected JMethod generateAddTagToList() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}","/** 
 * Private helper method to generate code that adds value-tags to one single list in an XML document.
 * @throws Exception Error during code generation
 */
protected JMethod generateAddTagToList() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}",0.9924453280318092
6555,"/** 
 * Private helper method to generate code that adds value-tags to one single element in an XML document.
 * @throws Exception Error during code generation
 */
protected JMethod generateAddTagToElement() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}","/** 
 * Private helper method to generate code that adds value-tags to one single element in an XML document.
 * @throws Exception Error during code generation
 */
protected JMethod generateAddTagToElement() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""),JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}",0.9900679560899112
6556,"/** 
 * Private helper method to generate code that adds value-tags to XML documents.
 * @param fixElements XML elements, where value-tags need to be fixed
 * @param fixArrays XML arrays, where value-tags need to be fixed
 * @param fixSimpleLists XML lists with simple-typed items,where value-tags need to be fixed
 * @param fixNonSimpleLists XML lists with non-simple-typed items,where value-tags need to be fixed
 * @throws Exception Error during code generation
 */
private JMethod generateAddValueTags(final ArrayList<ElementData> fixElements,final ArrayList<ArrayData> fixArrays,final ArrayList<SimpleListData> fixSimpleLists,final ArrayList<NonSimpleListData> fixNonSimpleLists) throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  for (  ElementData element : fixElements) {
    methodBody+=""String_Node_Str"" + element.getName() + ""String_Node_Str"";
  }
  methodBody+=""String_Node_Str"";
  for (  ArrayData array : fixArrays) {
    methodBody+=""String_Node_Str"" + array.getArrayName() + ""String_Node_Str"";
  }
  methodBody+=""String_Node_Str"";
  for (  SimpleListData list : fixSimpleLists) {
    methodBody+=""String_Node_Str"" + list.getListName() + ""String_Node_Str"";
  }
  methodBody+=""String_Node_Str"";
  for (  NonSimpleListData list : fixNonSimpleLists) {
    methodBody+=""String_Node_Str"" + list.getListName() + ""String_Node_Str"";
  }
  methodBody+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}","/** 
 * Private helper method to generate code that adds value-tags to XML documents.
 * @param fixElements XML elements, where value-tags need to be fixed
 * @param fixArrays XML arrays, where value-tags need to be fixed
 * @param fixSimpleLists XML lists with simple-typed items,where value-tags need to be fixed
 * @param fixNonSimpleLists XML lists with non-simple-typed items,where value-tags need to be fixed
 * @throws Exception Error during code generation
 */
private JMethod generateAddValueTags(final ArrayList<ElementData> fixElements,final ArrayList<ArrayData> fixArrays,final ArrayList<SimpleListData> fixSimpleLists,final ArrayList<NonSimpleListData> fixNonSimpleLists) throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  for (  ElementData element : fixElements) {
    methodBody+=String.format(""String_Node_Str"",element.getName());
  }
  methodBody+=""String_Node_Str"";
  for (  ArrayData array : fixArrays) {
    methodBody+=String.format(""String_Node_Str"",array.getArrayName());
  }
  methodBody+=""String_Node_Str"";
  for (  SimpleListData list : fixSimpleLists) {
    methodBody+=String.format(""String_Node_Str"",list.getListName());
  }
  methodBody+=""String_Node_Str"";
  for (  NonSimpleListData list : fixNonSimpleLists) {
    methodBody+=String.format(""String_Node_Str"",list.getListName());
  }
  methodBody+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}",0.9291712303760497
6557,"/** 
 * Private helper method to check XMLLibrary implementations.
 * @param xmlLibraryClassName Fully qualified class name ofthe XMLLibrary implementation
 */
private void testXMLLibrary(final String xmlLibraryClassName) throws Exception {
  XMLLibrary xmlLibrary=XMLLibraryFactory.getInstance().createXMLLibrary(xmlLibraryClassName,BEAN_CLASS_NAME);
  ArrayList<ElementData> fixElements=new ArrayList<ElementData>();
  ArrayList<ArrayData> fixArrays=new ArrayList<ArrayData>();
  ArrayList<SimpleListData> fixSimpleLists=new ArrayList<SimpleListData>();
  ArrayList<NonSimpleListData> fixNonSimpleLists=new ArrayList<NonSimpleListData>();
  JClass classObject=xmlLibrary.init(fixElements,fixArrays,fixSimpleLists,fixNonSimpleLists);
  assertNotNull(""String_Node_Str"",classObject);
  assertEquals(String.format(""String_Node_Str"",BEAN_CLASS_NAME),BEAN_CLASS_NAME + ""String_Node_Str"",classObject.getName());
  TestHelper.checkMethodExistence(classObject,""String_Node_Str"",""String_Node_Str"",BEAN_CLASS_NAME);
  TestHelper.checkMethodExistence(classObject,""String_Node_Str"",BEAN_CLASS_NAME,""String_Node_Str"");
  TestHelper.checkMethodExistence(classObject,JModifier.PRIVATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  TestHelper.checkMethodExistence(classObject,JModifier.PRIVATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
}","/** 
 * Private helper method to check XMLLibrary implementations.
 * @param xmlLibraryClassName Fully qualified class name ofthe XMLLibrary implementation
 */
private void testXMLLibrary(final String xmlLibraryClassName) throws Exception {
  XMLLibrary xmlLibrary=XMLLibraryFactory.getInstance().createXMLLibrary(xmlLibraryClassName,BEAN_CLASS_NAME);
  ArrayList<ElementData> fixElements=new ArrayList<ElementData>();
  ArrayList<ArrayData> fixArrays=new ArrayList<ArrayData>();
  ArrayList<SimpleListData> fixSimpleLists=new ArrayList<SimpleListData>();
  ArrayList<NonSimpleListData> fixNonSimpleLists=new ArrayList<NonSimpleListData>();
  JClass classObject=xmlLibrary.init(fixElements,fixArrays,fixSimpleLists,fixNonSimpleLists);
  assertNotNull(""String_Node_Str"",classObject);
  assertEquals(String.format(""String_Node_Str"",BEAN_CLASS_NAME),BEAN_CLASS_NAME + ""String_Node_Str"",classObject.getName());
  TestHelper.checkMethodExistence(classObject,""String_Node_Str"",""String_Node_Str"",BEAN_CLASS_NAME);
  TestHelper.checkMethodExistence(classObject,""String_Node_Str"",BEAN_CLASS_NAME,""String_Node_Str"");
  TestHelper.checkMethodExistence(classObject,JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  TestHelper.checkMethodExistence(classObject,JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
}",0.9862018881626724
6558,"private void fixLocalElementsInComplexTypes(FElement element,boolean isTopLevel){
  if (!isTopLevel) {
    String typeName=""String_Node_Str"";
    if (SchemaHelper.isBuiltinTypedElement(element)) {
      typeName=this.mapper.lookup(JavaTypeGen.getFabricTypeName(element.getSchemaType()));
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
    }
 else {
      typeName=element.getSchemaType().getName();
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
      if (!element.getSchemaType().isTopLevel() && !element.getSchemaType().isSimple()) {
        typeName+=""String_Node_Str"";
      }
    }
    LOGGER.debug(""String_Node_Str"" + element.getName() + ""String_Node_Str"");
    if (FSchemaTypeHelper.isArray(element)) {
      LOGGER.debug(""String_Node_Str"");
      this.fixArrays.add(new ArrayData(element.getName(),typeName,""String_Node_Str"",typeName));
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      this.fixElements.add(new ElementData(element.getName()));
    }
  }
}","private void fixLocalElementsInComplexTypes(FElement element,boolean isTopLevel){
  if (!isTopLevel) {
    String typeName=""String_Node_Str"";
    boolean isCustomType=false;
    if (SchemaHelper.isBuiltinTypedElement(element)) {
      typeName=this.mapper.lookup(JavaTypeGen.getFabricTypeName(element.getSchemaType()));
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
    }
 else {
      typeName=element.getSchemaType().getName();
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
      if (!element.getSchemaType().isTopLevel() && !element.getSchemaType().isSimple()) {
        typeName+=""String_Node_Str"";
      }
      isCustomType=true;
    }
    LOGGER.debug(""String_Node_Str"" + element.getName() + ""String_Node_Str"");
    if (isCustomType) {
      if (FSchemaTypeHelper.isArray(element)) {
        LOGGER.debug(""String_Node_Str"");
        this.fixArrays.add(new ArrayData(element.getName(),typeName,""String_Node_Str"",typeName));
      }
 else {
        LOGGER.debug(""String_Node_Str"");
        this.fixElements.add(new ElementData(element.getName()));
      }
    }
  }
}",0.9521553765987684
6559,"/** 
 * Private helper method to generate code that removes unnecessary value-tags from XML documents.
 * @param fixElements XML elements, where value-tags need to be fixed
 * @param fixArrays XML arrays, where value-tags need to be fixed
 * @param fixSimpleLists XML lists with simple-typed items,where value-tags need to be fixed
 * @param fixNonSimpleLists XML lists with non-simple-typed items,where value-tags need to be fixed
 * @throws Exception Error during code generation
 */
private JMethod generateRemoveValueTags(final ArrayList<ElementData> fixElements,final ArrayList<ArrayData> fixArrays,final ArrayList<SimpleListData> fixSimpleLists,final ArrayList<NonSimpleListData> fixNonSimpleLists) throws Exception {
  for (  ElementData ed : fixElements) {
    System.out.println(""String_Node_Str"" + ed.getName());
  }
  for (  ArrayData ad : fixArrays) {
    System.out.println(""String_Node_Str"" + ad.getArrayName() + ""String_Node_Str""+ ad.getArrayType()+ ""String_Node_Str""+ ad.getItemName()+ ""String_Node_Str""+ ad.getItemType());
  }
  for (  SimpleListData sld : fixSimpleLists) {
    System.out.println(""String_Node_Str"" + sld.getListName() + ""String_Node_Str""+ sld.getListType()+ ""String_Node_Str""+ sld.getItemType());
  }
  for (  NonSimpleListData nsld : fixNonSimpleLists) {
    System.out.println(""String_Node_Str"" + nsld.getListName() + ""String_Node_Str""+ nsld.getListType()+ ""String_Node_Str""+ nsld.getItemType());
  }
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  for (  ElementData element : fixElements) {
    methodBody+=String.format(""String_Node_Str"",element.getName());
  }
  methodBody+=""String_Node_Str"";
  for (  ArrayData array : fixArrays) {
    methodBody+=String.format(""String_Node_Str"",array.getArrayName());
  }
  methodBody+=""String_Node_Str"";
  for (  SimpleListData list : fixSimpleLists) {
    methodBody+=String.format(""String_Node_Str"",list.getListName());
  }
  methodBody+=""String_Node_Str"";
  for (  NonSimpleListData list : fixNonSimpleLists) {
    methodBody+=String.format(""String_Node_Str"",list.getListName());
  }
  methodBody+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}","/** 
 * Private helper method to generate code that removes unnecessary value-tags from XML documents.
 * @param fixElements XML elements, where value-tags need to be fixed
 * @param fixArrays XML arrays, where value-tags need to be fixed
 * @param fixSimpleLists XML lists with simple-typed items,where value-tags need to be fixed
 * @param fixNonSimpleLists XML lists with non-simple-typed items,where value-tags need to be fixed
 * @throws Exception Error during code generation
 */
private JMethod generateRemoveValueTags(final ArrayList<ElementData> fixElements,final ArrayList<ArrayData> fixArrays,final ArrayList<SimpleListData> fixSimpleLists,final ArrayList<NonSimpleListData> fixNonSimpleLists) throws Exception {
  for (  ElementData ed : fixElements) {
    System.out.println(""String_Node_Str"" + ed.getName());
  }
  for (  ArrayData ad : fixArrays) {
    System.out.println(""String_Node_Str"" + ad.getArrayName() + ""String_Node_Str""+ ad.getArrayType()+ ""String_Node_Str""+ ad.getItemName()+ ""String_Node_Str""+ ad.getItemType());
  }
  for (  SimpleListData sld : fixSimpleLists) {
    System.out.println(""String_Node_Str"" + sld.getListName() + ""String_Node_Str""+ sld.getListType()+ ""String_Node_Str""+ sld.getItemType());
  }
  for (  NonSimpleListData nsld : fixNonSimpleLists) {
    System.out.println(""String_Node_Str"" + nsld.getListName() + ""String_Node_Str""+ nsld.getListType()+ ""String_Node_Str""+ nsld.getItemType());
  }
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  for (  ElementData element : fixElements) {
    methodBody+=String.format(""String_Node_Str"",element.getName());
  }
  methodBody+=""String_Node_Str"";
  for (  ArrayData array : fixArrays) {
    methodBody+=String.format(""String_Node_Str"",array.getArrayName());
  }
  methodBody+=""String_Node_Str"";
  for (  SimpleListData list : fixSimpleLists) {
    methodBody+=String.format(""String_Node_Str"",list.getListName());
  }
  methodBody+=""String_Node_Str"";
  for (  NonSimpleListData list : fixNonSimpleLists) {
    methodBody+=String.format(""String_Node_Str"",list.getListName());
  }
  methodBody+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}",0.989125706829056
6560,"/** 
 * Private helper method to generate code that adds value-tags to XML documents.
 * @param fixElements XML elements, where value-tags need to be fixed
 * @param fixArrays XML arrays, where value-tags need to be fixed
 * @param fixSimpleLists XML lists with simple-typed items,where value-tags need to be fixed
 * @param fixNonSimpleLists XML lists with non-simple-typed items,where value-tags need to be fixed
 * @throws Exception Error during code generation
 */
private JMethod generateAddValueTags(final ArrayList<ElementData> fixElements,final ArrayList<ArrayData> fixArrays,final ArrayList<SimpleListData> fixSimpleLists,final ArrayList<NonSimpleListData> fixNonSimpleLists) throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  for (  ElementData element : fixElements) {
    methodBody+=String.format(""String_Node_Str"",element.getName());
  }
  methodBody+=""String_Node_Str"";
  for (  ArrayData array : fixArrays) {
    methodBody+=String.format(""String_Node_Str"",array.getArrayName());
  }
  methodBody+=""String_Node_Str"";
  for (  SimpleListData list : fixSimpleLists) {
    methodBody+=String.format(""String_Node_Str"",list.getListName());
  }
  methodBody+=""String_Node_Str"";
  for (  NonSimpleListData list : fixNonSimpleLists) {
    methodBody+=String.format(""String_Node_Str"",list.getListName());
  }
  methodBody+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}","/** 
 * Private helper method to generate code that adds value-tags to XML documents.
 * @param fixElements XML elements, where value-tags need to be fixed
 * @param fixArrays XML arrays, where value-tags need to be fixed
 * @param fixSimpleLists XML lists with simple-typed items,where value-tags need to be fixed
 * @param fixNonSimpleLists XML lists with non-simple-typed items,where value-tags need to be fixed
 * @throws Exception Error during code generation
 */
private JMethod generateAddValueTags(final ArrayList<ElementData> fixElements,final ArrayList<ArrayData> fixArrays,final ArrayList<SimpleListData> fixSimpleLists,final ArrayList<NonSimpleListData> fixNonSimpleLists) throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PRIVATE | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  for (  ElementData element : fixElements) {
    methodBody+=String.format(""String_Node_Str"",element.getName());
  }
  methodBody+=""String_Node_Str"";
  for (  ArrayData array : fixArrays) {
    methodBody+=String.format(""String_Node_Str"",array.getArrayName());
  }
  methodBody+=""String_Node_Str"";
  for (  SimpleListData list : fixSimpleLists) {
    methodBody+=String.format(""String_Node_Str"",list.getListName());
  }
  methodBody+=""String_Node_Str"";
  for (  NonSimpleListData list : fixNonSimpleLists) {
    methodBody+=String.format(""String_Node_Str"",list.getListName());
  }
  methodBody+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(methodBody);
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  addRequiredImport(""String_Node_Str"");
  return jm;
}",0.989648798521257
6561,"/** 
 * Private helper method for member variable creation. This function will create an annotated JField with a comment.
 * @param member MemberVariable object for creation
 * @return Generated JField object
 * @throws Exception Error during JField creation
 */
private JField createMemberVariable(MemberVariable member) throws Exception {
  JField jf=null;
  if (member.getClass() == AttributeContainer.Element.class) {
    AttributeContainer.Element e=(AttributeContainer.Element)member;
    if ((""String_Node_Str"").equals(e.value)) {
      jf=JField.factory.create(JModifier.PRIVATE,e.type,e.name);
    }
 else {
      String value=e.value;
      if ((""String_Node_Str"").equals(e.type)) {
        value=""String_Node_Str"" + value + ""String_Node_Str"";
      }
      jf=JField.factory.create(JModifier.PRIVATE,e.type,e.name,value);
    }
    jf.setComment(new JFieldCommentImpl(String.format(""String_Node_Str"",e.name)));
    for (    String annotation : this.xmlMapper.getElementAnnotations(e.name)) {
      jf.addAnnotation(new JFieldAnnotationImpl(annotation));
    }
  }
 else   if (member.getClass() == AttributeContainer.ConstantElement.class) {
    AttributeContainer.ConstantElement ce=(AttributeContainer.ConstantElement)member;
    String value=ce.value;
    if ((""String_Node_Str"").equals(ce.type)) {
      value=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    jf=JField.factory.create(JModifier.PRIVATE | JModifier.STATIC | JModifier.FINAL,ce.type,ce.name,value);
    jf.setComment(new JFieldCommentImpl(String.format(""String_Node_Str"",ce.name)));
    for (    String annotation : this.xmlMapper.getElementAnnotations(ce.name)) {
      jf.addAnnotation(new JFieldAnnotationImpl(annotation));
    }
  }
 else   if (member.getClass() == AttributeContainer.Attribute.class) {
    AttributeContainer.Attribute a=(AttributeContainer.Attribute)member;
    if ((""String_Node_Str"").equals(a.value)) {
      jf=JField.factory.create(JModifier.PRIVATE,a.type,a.name);
    }
 else {
      String value=a.value;
      if ((""String_Node_Str"").equals(a.type)) {
        value=""String_Node_Str"" + value + ""String_Node_Str"";
      }
      jf=JField.factory.create(JModifier.PRIVATE,a.type,a.name,value);
    }
    jf.setComment(new JFieldCommentImpl(String.format(""String_Node_Str"",a.name)));
    for (    String annotation : this.xmlMapper.getAttributeAnnotations(a.name)) {
      jf.addAnnotation(new JFieldAnnotationImpl(annotation));
    }
  }
 else   if (member.getClass() == AttributeContainer.EnumElement.class) {
    AttributeContainer.EnumElement ee=(AttributeContainer.EnumElement)member;
    jf=JField.factory.create(JModifier.PRIVATE,ee.type,ee.name);
    jf.setComment(new JFieldCommentImpl(String.format(""String_Node_Str"",ee.name)));
    for (    String annotation : this.xmlMapper.getEnumAnnotations(ee.name)) {
      jf.addAnnotation(new JFieldAnnotationImpl(annotation));
    }
  }
 else   if (member.getClass() == AttributeContainer.ElementArray.class) {
    AttributeContainer.ElementArray ea=(AttributeContainer.ElementArray)member;
    String type=String.format(""String_Node_Str"",this.fixPrimitiveTypes(ea.type));
    if (ea.maxSize == Integer.MAX_VALUE) {
      jf=JField.factory.create(JModifier.PRIVATE,type,ea.name,""String_Node_Str"" + type + ""String_Node_Str"");
    }
 else {
      jf=JField.factory.create(JModifier.PRIVATE,type,ea.name,""String_Node_Str"" + type + ""String_Node_Str""+ ea.maxSize+ ""String_Node_Str"");
    }
    jf.setComment(new JFieldCommentImpl(String.format(""String_Node_Str"",ea.name)));
    for (    String annotation : this.xmlMapper.getArrayAnnotations(ea.name,ea.type,""String_Node_Str"",ea.type)) {
      jf.addAnnotation(new JFieldAnnotationImpl(annotation));
    }
  }
 else   if (member.getClass() == AttributeContainer.ElementList.class) {
    AttributeContainer.ElementList el=(AttributeContainer.ElementList)member;
    String type=String.format(""String_Node_Str"",this.fixPrimitiveTypes(el.type));
    if (el.maxSize == Integer.MAX_VALUE) {
      jf=JField.factory.create(JModifier.PRIVATE,type,el.name,""String_Node_Str"" + type + ""String_Node_Str"");
    }
 else {
      jf=JField.factory.create(JModifier.PRIVATE,type,el.name,""String_Node_Str"" + type + ""String_Node_Str""+ el.maxSize+ ""String_Node_Str"");
    }
    jf.setComment(new JFieldCommentImpl(String.format(""String_Node_Str"",el.name)));
    for (    String annotation : this.xmlMapper.getListAnnotations(el.name,""String_Node_Str"",el.type)) {
      jf.addAnnotation(new JFieldAnnotationImpl(annotation));
    }
  }
 else {
    throw new FabricTypeGenException(""String_Node_Str"");
  }
  return jf;
}","/** 
 * Private helper method for member variable creation. This function will create an annotated JField with a comment.
 * @param member MemberVariable object for creation
 * @return Generated JField object
 * @throws Exception Error during JField creation
 */
private JField createMemberVariable(MemberVariable member) throws Exception {
  JField jf=null;
  if (member.getClass() == AttributeContainer.Element.class) {
    AttributeContainer.Element e=(AttributeContainer.Element)member;
    if ((""String_Node_Str"").equals(e.value)) {
      jf=JField.factory.create(JModifier.PRIVATE,e.type,e.name);
    }
 else {
      String value=e.value;
      if ((""String_Node_Str"").equals(e.type)) {
        value=""String_Node_Str"" + value + ""String_Node_Str"";
      }
      jf=JField.factory.create(JModifier.PRIVATE,e.type,e.name,value);
    }
    jf.setComment(new JFieldCommentImpl(String.format(""String_Node_Str"",e.name)));
    for (    String annotation : this.xmlMapper.getElementAnnotations(e.name)) {
      jf.addAnnotation(new JFieldAnnotationImpl(annotation));
    }
  }
 else   if (member.getClass() == AttributeContainer.ConstantElement.class) {
    AttributeContainer.ConstantElement ce=(AttributeContainer.ConstantElement)member;
    String value=ce.value;
    if ((""String_Node_Str"").equals(ce.type)) {
      value=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    jf=JField.factory.create(JModifier.PRIVATE | JModifier.STATIC | JModifier.FINAL,ce.type,ce.name,value);
    jf.setComment(new JFieldCommentImpl(String.format(""String_Node_Str"",ce.name)));
    for (    String annotation : this.xmlMapper.getElementAnnotations(ce.name)) {
      jf.addAnnotation(new JFieldAnnotationImpl(annotation));
    }
  }
 else   if (member.getClass() == AttributeContainer.Attribute.class) {
    AttributeContainer.Attribute a=(AttributeContainer.Attribute)member;
    if ((""String_Node_Str"").equals(a.value)) {
      jf=JField.factory.create(JModifier.PRIVATE,a.type,a.name);
    }
 else {
      String value=a.value;
      if ((""String_Node_Str"").equals(a.type)) {
        value=""String_Node_Str"" + value + ""String_Node_Str"";
      }
      jf=JField.factory.create(JModifier.PRIVATE,a.type,a.name,value);
    }
    jf.setComment(new JFieldCommentImpl(String.format(""String_Node_Str"",a.name)));
    for (    String annotation : this.xmlMapper.getAttributeAnnotations(a.name)) {
      jf.addAnnotation(new JFieldAnnotationImpl(annotation));
    }
  }
 else   if (member.getClass() == AttributeContainer.EnumElement.class) {
    AttributeContainer.EnumElement ee=(AttributeContainer.EnumElement)member;
    jf=JField.factory.create(JModifier.PRIVATE,ee.type,ee.name);
    jf.setComment(new JFieldCommentImpl(String.format(""String_Node_Str"",ee.name)));
    for (    String annotation : this.xmlMapper.getEnumAnnotations(ee.name)) {
      jf.addAnnotation(new JFieldAnnotationImpl(annotation));
    }
  }
 else   if (member.getClass() == AttributeContainer.ElementArray.class) {
    AttributeContainer.ElementArray ea=(AttributeContainer.ElementArray)member;
    String type=String.format(""String_Node_Str"",this.fixPrimitiveTypes(ea.type));
    if (ea.maxSize == Integer.MAX_VALUE) {
      jf=JField.factory.create(JModifier.PRIVATE,type,ea.name,""String_Node_Str"" + type + ""String_Node_Str"");
    }
 else {
      jf=JField.factory.create(JModifier.PRIVATE,type,ea.name,""String_Node_Str"" + type + ""String_Node_Str""+ ea.maxSize+ ""String_Node_Str"");
    }
    jf.setComment(new JFieldCommentImpl(String.format(""String_Node_Str"",ea.name)));
    for (    String annotation : this.xmlMapper.getArrayAnnotations(ea.name,ea.type,ea.name,ea.type)) {
      jf.addAnnotation(new JFieldAnnotationImpl(annotation));
    }
  }
 else   if (member.getClass() == AttributeContainer.ElementList.class) {
    AttributeContainer.ElementList el=(AttributeContainer.ElementList)member;
    String type=String.format(""String_Node_Str"",this.fixPrimitiveTypes(el.type));
    if (el.maxSize == Integer.MAX_VALUE) {
      jf=JField.factory.create(JModifier.PRIVATE,type,el.name,""String_Node_Str"" + type + ""String_Node_Str"");
    }
 else {
      jf=JField.factory.create(JModifier.PRIVATE,type,el.name,""String_Node_Str"" + type + ""String_Node_Str""+ el.maxSize+ ""String_Node_Str"");
    }
    jf.setComment(new JFieldCommentImpl(String.format(""String_Node_Str"",el.name)));
    for (    String annotation : this.xmlMapper.getListAnnotations(el.name,""String_Node_Str"",el.type)) {
      jf.addAnnotation(new JFieldAnnotationImpl(annotation));
    }
  }
 else {
    throw new FabricTypeGenException(""String_Node_Str"");
  }
  return jf;
}",0.9973947025618758
6562,"/** 
 * Handle start of a top-level simple type. We need to collect the names of all simple types here to fix the corresponding value-tags in the XML document later on.
 * @param type FSimpleType object
 * @param parent Parent FElement object
 * @throws Exception Error during processing
 */
@Override public void startTopLevelSimpleType(FSimpleType type,FElement parent) throws Exception {
  LOGGER.debug(""String_Node_Str"");
  if (null != type) {
    this.fixElements.add(type.getName());
  }
}","/** 
 * Handle start of a top-level simple type. We need to collect the names of all simple types here to fix the corresponding value-tags in the XML document later on.
 * @param type FSimpleType object
 * @param parent Parent FElement object
 * @throws Exception Error during processing
 */
@Override public void startTopLevelSimpleType(FSimpleType type,FElement parent) throws Exception {
  LOGGER.debug(""String_Node_Str"");
  if (null != type && !FSchemaTypeHelper.isList(type)) {
    this.fixElements.add(type.getName());
  }
}",0.9658536585365852
6563,"/** 
 * This method generates code that translates a plain XML document to a Java class instance.
 * @throws Exception Error during code generation
 */
@Override public void generateXMLToInstanceCode() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PUBLIC | JModifier.STATIC,this.beanClassName,""String_Node_Str"",jms,new String[]{""String_Node_Str""});
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(String.format(methodBody,this.beanClassName,this.beanClassName));
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  this.converterClass.add(jm);
  this.addRequiredImport(""String_Node_Str"");
  this.addRequiredImport(""String_Node_Str"");
}","/** 
 * This method generates code that translates a plain XML document to a Java class instance.
 * @throws Exception Error during code generation
 */
@Override public void generateXMLToInstanceCode() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PUBLIC | JModifier.STATIC,this.beanClassName,""String_Node_Str"",jms,new String[]{""String_Node_Str""});
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  jm.getBody().appendSource(String.format(methodBody,this.beanClassName,this.beanClassName));
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  this.converterClass.add(jm);
  this.addRequiredImport(""String_Node_Str"");
  this.addRequiredImport(""String_Node_Str"");
  this.addRequiredImport(""String_Node_Str"");
  this.addRequiredImport(""String_Node_Str"");
}",0.9403393541324576
6564,"/** 
 * This method generates code that translates an annotated Java object to a plain XML document.
 * @throws Exception Error during code generation
 */
@Override public void generateJavaToXMLCode() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,this.beanClassName,""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PUBLIC | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms,new String[]{""String_Node_Str""});
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(String.format(methodBody,this.beanClassName.toLowerCase(),this.beanClassName));
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  this.converterClass.add(jm);
  this.addRequiredImport(""String_Node_Str"");
  this.addRequiredImport(""String_Node_Str"");
  this.addRequiredImport(""String_Node_Str"");
}","/** 
 * This method generates code that translates an annotated Java object to a plain XML document.
 * @throws Exception Error during code generation
 */
@Override public void generateJavaToXMLCode() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,this.beanClassName,""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PUBLIC | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms,new String[]{""String_Node_Str""});
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(String.format(methodBody,this.beanClassName));
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  this.converterClass.add(jm);
  this.addRequiredImport(""String_Node_Str"");
  this.addRequiredImport(""String_Node_Str"");
  this.addRequiredImport(""String_Node_Str"");
}",0.8924508790072389
6565,"/** 
 * Add a member variable to the current container class. Type, name, initial value and restrictions of the element will be mapped to Java where applicable.
 * @param element FElement object
 * @param isTopLevel True if the element is a top-level elementor part of a top-level complex type; false if the element is part of a local complex type
 */
@Override public void addMemberVariable(FElement element,boolean isTopLevel){
  if ((isTopLevel && !this.incompleteBuilders.empty()) || this.hasIncompleteLocalBuilders()) {
    String typeName=""String_Node_Str"";
    if (SchemaHelper.isBuiltinTypedElement(element)) {
      typeName=this.mapper.lookup(this.getFabricTypeName(element.getSchemaType()));
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
    }
 else {
      typeName=element.getSchemaType().getName();
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
      if (!element.getSchemaType().isTopLevel() && !element.getSchemaType().isSimple()) {
        typeName+=""String_Node_Str"";
      }
    }
    AttributeContainer.Builder current=(isTopLevel ? this.incompleteBuilders.pop() : this.incompleteLocalBuilders.get(this.incompleteBuilders.peek().getName()).pop());
    AttributeContainer.Restriction restrictions=new AttributeContainer.Restriction();
    if (element.getSchemaType().isSimple() && !element.getSchemaType().isTopLevel()) {
      restrictions=this.createRestrictions((FSimpleType)(element.getSchemaType()));
    }
    if (!element.getSchemaType().isTopLevel() && FSchemaTypeHelper.isEnum(element.getSchemaType())) {
      Object[] constants=FSchemaTypeHelper.extractEnumArray((FSimpleType)element.getSchemaType());
      String[] enumConstants=Arrays.copyOf(constants,constants.length,String[].class);
      current.addEnumElement(element.getName() + ""String_Node_Str"",element.getName(),enumConstants);
    }
 else     if (FSchemaTypeHelper.isArray(element)) {
      current.addElementArray(typeName,element.getName(),element.getMinOccurs(),element.getMaxOccurs());
    }
 else     if (FSchemaTypeHelper.hasDefaultValue(element)) {
      current.addElement(typeName,element.getName(),element.getDefaultValue(),restrictions);
    }
 else     if (FSchemaTypeHelper.hasFixedValue(element)) {
      current.addConstantElement(typeName,element.getName(),element.getFixedValue());
    }
 else {
      current.addElement(typeName,element.getName(),restrictions);
    }
    if (isTopLevel) {
      this.incompleteBuilders.push(current);
    }
 else {
      String parentContainerName=this.incompleteBuilders.peek().getName();
      Stack<AttributeContainer.Builder> currentStack=this.incompleteLocalBuilders.get(parentContainerName);
      if (null == currentStack) {
        currentStack=new Stack<AttributeContainer.Builder>();
      }
      currentStack.push(current);
      this.incompleteLocalBuilders.put(parentContainerName,currentStack);
    }
    LOGGER.debug(String.format(""String_Node_Str"",element.getName(),(SchemaHelper.isBuiltinTypedElement(element) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",typeName,current.getName()));
  }
}","/** 
 * Add a member variable to the current container class. Type, name, initial value and restrictions of the element will be mapped to Java where applicable.
 * @param element FElement object
 * @param isTopLevel True if the element is a top-level elementor part of a top-level complex type; false if the element is part of a local complex type
 */
@Override public void addMemberVariable(FElement element,boolean isTopLevel){
  if ((isTopLevel && !this.incompleteBuilders.empty()) || this.hasIncompleteLocalBuilders()) {
    String typeName=""String_Node_Str"";
    if (SchemaHelper.isBuiltinTypedElement(element)) {
      typeName=this.mapper.lookup(this.getFabricTypeName(element.getSchemaType()));
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
    }
 else {
      typeName=element.getSchemaType().getName();
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
      if (!element.getSchemaType().isTopLevel() && !element.getSchemaType().isSimple()) {
        typeName+=""String_Node_Str"";
      }
    }
    AttributeContainer.Builder current=(isTopLevel ? this.incompleteBuilders.pop() : this.incompleteLocalBuilders.get(this.incompleteBuilders.peek().getName()).pop());
    AttributeContainer.Restriction restrictions=new AttributeContainer.Restriction();
    if (element.getSchemaType().isSimple() && !element.getSchemaType().isTopLevel()) {
      restrictions=this.createRestrictions((FSimpleType)(element.getSchemaType()));
    }
    if (!element.getSchemaType().isTopLevel() && FSchemaTypeHelper.isEnum(element.getSchemaType())) {
      Object[] constants=FSchemaTypeHelper.extractEnumArray((FSimpleType)element.getSchemaType());
      String[] enumConstants=Arrays.copyOf(constants,constants.length,String[].class);
      current.addEnumElement(element.getName() + ""String_Node_Str"",element.getName(),enumConstants);
    }
 else     if (FSchemaTypeHelper.isArray(element)) {
      current.addElementArray(typeName,element.getName(),element.getMinOccurs(),element.getMaxOccurs());
    }
 else     if (FSchemaTypeHelper.isList(element)) {
      FList listType=(FList)element.getSchemaType();
      current.addElementList(typeName,element.getName(),FSchemaTypeHelper.getMinLength(listType),FSchemaTypeHelper.getMaxLength(listType));
    }
 else     if (FSchemaTypeHelper.hasDefaultValue(element)) {
      current.addElement(typeName,element.getName(),element.getDefaultValue(),restrictions);
    }
 else     if (FSchemaTypeHelper.hasFixedValue(element)) {
      current.addConstantElement(typeName,element.getName(),element.getFixedValue());
    }
 else {
      current.addElement(typeName,element.getName(),restrictions);
    }
    if (isTopLevel) {
      this.incompleteBuilders.push(current);
    }
 else {
      String parentContainerName=this.incompleteBuilders.peek().getName();
      Stack<AttributeContainer.Builder> currentStack=this.incompleteLocalBuilders.get(parentContainerName);
      if (null == currentStack) {
        currentStack=new Stack<AttributeContainer.Builder>();
      }
      currentStack.push(current);
      this.incompleteLocalBuilders.put(parentContainerName,currentStack);
    }
    LOGGER.debug(String.format(""String_Node_Str"",element.getName(),(SchemaHelper.isBuiltinTypedElement(element) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",typeName,current.getName()));
  }
}",0.961276332094176
6566,"/** 
 * Private helper method to create code for restriction checking. The function determines, if any restrictions are set on the given member variable, and generates check-code accordingly.
 * @param member Element object with restrictions
 * @return String with code that includes restriction checks
 * @throws Exception Error during check code generation
 */
private String generateRestrictionChecks(AttributeContainer.Element member) throws Exception {
  String result=""String_Node_Str"";
  AttributeContainer.Restriction r=member.restrictions;
  String message=""String_Node_Str"";
  String comment=""String_Node_Str"";
  if (member.isLengthRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",member.name,Long.parseLong(r.length)),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isMinLengthRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",member.name,Long.parseLong(r.minLength)),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isMaxLengthRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",member.name,Long.parseLong(r.maxLength)),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isMinInclusiveRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",member.name,Long.parseLong(r.minInclusive)),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isMaxInclusiveRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",member.name,Long.parseLong(r.maxInclusive)),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isMinExclusiveRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",member.name,Long.parseLong(r.minExclusive)),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isMaxExclusiveRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",member.name,Long.parseLong(r.maxExclusive)),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isPatternRestricted()) {
    result+=JavaRestrictionHelper.createPatternCheckCode(member.name,r.pattern,String.format(message,""String_Node_Str"",member.name));
  }
  if (member.isWhiteSpaceRestricted() && (""String_Node_Str"").equals(member.type)) {
    result+=JavaRestrictionHelper.createWhiteSpaceCheckCode(member.name,r.whiteSpace);
  }
  if (member.isTotalDigitsRestricted()) {
    result+=JavaRestrictionHelper.createTotalDigitsCheckCode(member.name,r.totalDigits);
  }
  if (member.isFractionDigitsRestricted()) {
    result+=JavaRestrictionHelper.createFractionDigitsCheckCode(member.name,r.fractionDigits);
  }
  return result;
}","/** 
 * Private helper method to create code for restriction checking. The function determines, if any restrictions are set on the given member variable, and generates check-code accordingly.
 * @param member Element object with restrictions
 * @return String with code that includes restriction checks
 * @throws Exception Error during check code generation
 */
private String generateRestrictionChecks(AttributeContainer.Element member) throws Exception {
  String result=""String_Node_Str"";
  AttributeContainer.Restriction r=member.restrictions;
  String message=""String_Node_Str"";
  String comment=""String_Node_Str"";
  if (member.isLengthRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",member.name,Long.parseLong(r.length)),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isMinLengthRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",member.name,Long.parseLong(r.minLength)),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isMaxLengthRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(String.format(""String_Node_Str"",member.name,Long.parseLong(r.maxLength)),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isMinInclusiveRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(JavaRestrictionHelper.minInclusiveExpression(member),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isMaxInclusiveRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(JavaRestrictionHelper.maxInclusiveExpression(member),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isMinExclusiveRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(JavaRestrictionHelper.minExclusiveExpression(member),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isMaxExclusiveRestricted()) {
    result+=JavaRestrictionHelper.createCheckCode(JavaRestrictionHelper.maxExclusiveExpression(member),String.format(message,""String_Node_Str"",member.name),String.format(comment,""String_Node_Str""));
  }
  if (member.isPatternRestricted()) {
    result+=JavaRestrictionHelper.createPatternCheckCode(member.name,r.pattern,String.format(message,""String_Node_Str"",member.name));
  }
  if (member.isWhiteSpaceRestricted() && (""String_Node_Str"").equals(member.type)) {
    result+=JavaRestrictionHelper.createWhiteSpaceCheckCode(member.name,r.whiteSpace);
  }
  if (member.isTotalDigitsRestricted()) {
    result+=JavaRestrictionHelper.createTotalDigitsCheckCode(member.name,r.totalDigits);
  }
  if (member.isFractionDigitsRestricted()) {
    result+=JavaRestrictionHelper.createFractionDigitsCheckCode(member.name,r.fractionDigits);
  }
  return result;
}",0.9370538611291368
6567,"/** 
 * Parameterized constructor initializes properties object and various other member variables.
 * @param properties Properties object with module options
 */
public JavaEXIConverter(Properties properties){
  this.properties=properties;
  this.xsdDocumentPath=this.properties.getProperty(""String_Node_Str"");
  this.serializerClassName=""String_Node_Str"";
}","/** 
 * Parameterized constructor initializes properties object and various other member variables.
 * @param properties Properties object with module options
 */
public JavaEXIConverter(Properties properties){
  this.properties=properties;
  this.xsdDocumentPath=this.properties.getProperty(FabricEXIModule.XSD_DOCUMENT_PATH_KEY);
  this.serializerClassName=""String_Node_Str"";
}",0.9322493224932248
6568,"/** 
 * This method generates code that translates an annotated Java object to a plain XML document.
 * @throws Exception Error during code generation
 */
@Override public void generateJavaToXMLCode() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,this.beanClassName,""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PUBLIC | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms,new String[]{""String_Node_Str""});
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(String.format(methodBody,this.beanClassName));
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  this.converterClass.add(jm);
  this.addRequiredImport(""String_Node_Str"");
  this.addRequiredImport(""String_Node_Str"");
  this.addRequiredImport(""String_Node_Str"");
}","/** 
 * This method generates code that translates an annotated Java object to a plain XML document.
 * @throws Exception Error during code generation
 */
@Override public void generateJavaToXMLCode() throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(JModifier.FINAL,this.beanClassName,""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PUBLIC | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms,new String[]{""String_Node_Str""});
  String methodBody=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  jm.getBody().appendSource(String.format(methodBody,this.beanClassName));
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  this.converterClass.add(jm);
  this.addRequiredImport(""String_Node_Str"");
  this.addRequiredImport(""String_Node_Str"");
  this.addRequiredImport(""String_Node_Str"");
}",0.9902011346054668
6569,"/** 
 * Add a member variable to the current container class. Type, name, initial value and restrictions of the element will be mapped to Java where applicable.
 * @param element FElement object
 * @param isTopLevel True if the element is a top-level elementor part of a top-level complex type; false if the element is part of a local complex type
 */
@Override public void addMemberVariable(FElement element,boolean isTopLevel){
  if ((isTopLevel && !this.incompleteBuilders.empty()) || null != this.incompleteLocalBuilder) {
    String typeName=""String_Node_Str"";
    if (SchemaHelper.isBuiltinTypedElement(element)) {
      typeName=this.mapper.lookup(this.getFabricTypeName(element.getSchemaType()));
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
    }
 else {
      typeName=element.getSchemaType().getName();
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
      if (isTopLevel && !element.getSchemaType().isTopLevel() && !element.getSchemaType().isSimple()) {
        typeName+=""String_Node_Str"";
      }
    }
    AttributeContainer.Builder current=(isTopLevel ? this.incompleteBuilders.pop() : this.incompleteLocalBuilder);
    AttributeContainer.Restriction restrictions=new AttributeContainer.Restriction();
    if (element.getSchemaType().isSimple() && (!element.getSchemaType().isTopLevel() || this.generatedElements.containsKey(typeName))) {
      restrictions=this.createRestrictions((FSimpleType)(element.getSchemaType()));
    }
    if (!element.getSchemaType().isTopLevel() && FSchemaTypeHelper.isEnum(element.getSchemaType())) {
      Object[] constants=FSchemaTypeHelper.extractEnumArray((FSimpleType)element.getSchemaType());
      String[] enumConstants=Arrays.copyOf(constants,constants.length,String[].class);
      current.addEnumElement(element.getName() + ""String_Node_Str"",element.getName(),enumConstants);
    }
 else     if (FSchemaTypeHelper.isArray(element)) {
      current.addElementArray(typeName,element.getName(),element.getMinOccurs(),element.getMaxOccurs());
    }
 else     if (FSchemaTypeHelper.hasDefaultValue(element)) {
      current.addElement(typeName,element.getName(),element.getDefaultValue(),restrictions);
    }
 else     if (FSchemaTypeHelper.hasFixedValue(element)) {
      current.addConstantElement(typeName,element.getName(),element.getFixedValue());
    }
 else {
      current.addElement(typeName,element.getName(),restrictions);
    }
    if (isTopLevel) {
      this.incompleteBuilders.push(current);
    }
 else {
      this.incompleteLocalBuilder=current;
    }
    LOGGER.debug(String.format(""String_Node_Str"",element.getName(),(SchemaHelper.isBuiltinTypedElement(element) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",typeName,current.getName()));
  }
}","/** 
 * Add a member variable to the current container class. Type, name, initial value and restrictions of the element will be mapped to Java where applicable.
 * @param element FElement object
 * @param isTopLevel True if the element is a top-level elementor part of a top-level complex type; false if the element is part of a local complex type
 */
@Override public void addMemberVariable(FElement element,boolean isTopLevel){
  if ((isTopLevel && !this.incompleteBuilders.empty()) || this.hasIncompleteLocalBuilders()) {
    String typeName=""String_Node_Str"";
    if (SchemaHelper.isBuiltinTypedElement(element)) {
      typeName=this.mapper.lookup(this.getFabricTypeName(element.getSchemaType()));
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
    }
 else {
      typeName=element.getSchemaType().getName();
      LOGGER.debug(String.format(""String_Node_Str"",typeName));
      if (!element.getSchemaType().isTopLevel() && !element.getSchemaType().isSimple()) {
        typeName+=""String_Node_Str"";
      }
    }
    AttributeContainer.Builder current=(isTopLevel ? this.incompleteBuilders.pop() : this.incompleteLocalBuilders.get(this.incompleteBuilders.peek().getName()).pop());
    AttributeContainer.Restriction restrictions=new AttributeContainer.Restriction();
    if (element.getSchemaType().isSimple() && (!element.getSchemaType().isTopLevel() || this.generatedElements.containsKey(typeName))) {
      restrictions=this.createRestrictions((FSimpleType)(element.getSchemaType()));
    }
    if (!element.getSchemaType().isTopLevel() && FSchemaTypeHelper.isEnum(element.getSchemaType())) {
      Object[] constants=FSchemaTypeHelper.extractEnumArray((FSimpleType)element.getSchemaType());
      String[] enumConstants=Arrays.copyOf(constants,constants.length,String[].class);
      current.addEnumElement(element.getName() + ""String_Node_Str"",element.getName(),enumConstants);
    }
 else     if (FSchemaTypeHelper.isArray(element)) {
      current.addElementArray(typeName,element.getName(),element.getMinOccurs(),element.getMaxOccurs());
    }
 else     if (FSchemaTypeHelper.hasDefaultValue(element)) {
      current.addElement(typeName,element.getName(),element.getDefaultValue(),restrictions);
    }
 else     if (FSchemaTypeHelper.hasFixedValue(element)) {
      current.addConstantElement(typeName,element.getName(),element.getFixedValue());
    }
 else {
      current.addElement(typeName,element.getName(),restrictions);
    }
    if (isTopLevel) {
      this.incompleteBuilders.push(current);
    }
 else {
      String parentContainerName=this.incompleteBuilders.peek().getName();
      Stack<AttributeContainer.Builder> currentStack=this.incompleteLocalBuilders.get(parentContainerName);
      if (null == currentStack) {
        currentStack=new Stack<AttributeContainer.Builder>();
      }
      currentStack.push(current);
      this.incompleteLocalBuilders.put(parentContainerName,currentStack);
    }
    LOGGER.debug(String.format(""String_Node_Str"",element.getName(),(SchemaHelper.isBuiltinTypedElement(element) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",typeName,current.getName()));
  }
}",0.9224269055264492
6570,"/** 
 * Finish the construction of the current container class by building it. As soon as a container is built, no more new member variables can be added to it. This function is usually called, when the closing XML tag of a type definition is reached.
 * @throws Exception Error while building container
 */
@Override public void buildCurrentContainer() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    AnnotationMapper xmlMapper=new AnnotationMapper(this.properties.getProperty(""String_Node_Str""));
    JavaClassGenerationStrategy javaStrategy=new JavaClassGenerationStrategy(xmlMapper);
    JClass classObject=(JClass)this.incompleteBuilders.pop().build().asClassObject(javaStrategy);
    if (null != this.incompleteLocalBuilder) {
      JClass innerClassObject=(JClass)javaStrategy.generateClassObject(this.incompleteLocalBuilder.build(),JModifier.PUBLIC | JModifier.STATIC);
      classObject.add(innerClassObject);
      this.incompleteLocalBuilder=null;
      LOGGER.debug(String.format(""String_Node_Str"",innerClassObject.getName(),classObject.getName()));
    }
    if (!this.generatedElements.containsKey(classObject.getName())) {
      this.generatedElements.put(classObject.getName(),new JavaTypeGen.SourceFileData(classObject,javaStrategy.getRequiredDependencies()));
    }
    LOGGER.debug(String.format(""String_Node_Str"",classObject.getName()));
  }
}","/** 
 * Finish the construction of the current container class by building it. As soon as a container is built, no more new member variables can be added to it. This function is usually called, when the closing XML tag of a type definition is reached.
 * @throws Exception Error while building container
 */
@Override public void buildCurrentContainer() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    AnnotationMapper xmlMapper=new AnnotationMapper(this.properties.getProperty(""String_Node_Str""));
    JavaClassGenerationStrategy javaStrategy=new JavaClassGenerationStrategy(xmlMapper);
    JClass classObject=(JClass)this.incompleteBuilders.pop().build().asClassObject(javaStrategy);
    while (this.stackIsNotEmpty(classObject.getName())) {
      JClass innerClassObject=(JClass)javaStrategy.generateClassObject(this.incompleteLocalBuilders.get(classObject.getName()).pop().build(),JModifier.PUBLIC | JModifier.STATIC);
      classObject.add(innerClassObject);
      LOGGER.debug(String.format(""String_Node_Str"",innerClassObject.getName(),classObject.getName()));
    }
    if (!this.generatedElements.containsKey(classObject.getName())) {
      this.generatedElements.put(classObject.getName(),new JavaTypeGen.SourceFileData(classObject,javaStrategy.getRequiredDependencies()));
    }
    LOGGER.debug(String.format(""String_Node_Str"",classObject.getName()));
  }
}",0.8875226039783002
6571,"/** 
 * Create a new container class that represents a complex type of the XML schema document. All elements and attributes that belong to this type should be added to the container as member variables.
 * @param type FComplexType object
 */
@Override public void createNewContainer(FComplexType type){
  AttributeContainer.Builder newBuilder=AttributeContainer.newBuilder();
  if (type.isTopLevel()) {
    this.incompleteBuilders.push(newBuilder.setName(type.getName()));
    LOGGER.debug(String.format(""String_Node_Str"",type.getName()));
  }
 else {
    this.incompleteLocalBuilder=newBuilder.setName(type.getName() + ""String_Node_Str"");
    LOGGER.debug(String.format(""String_Node_Str"",type.getName()));
  }
}","/** 
 * Create a new container class that represents a complex type of the XML schema document. All elements and attributes that belong to this type should be added to the container as member variables.
 * @param type FComplexType object
 */
@Override public void createNewContainer(FComplexType type){
  AttributeContainer.Builder newBuilder=AttributeContainer.newBuilder();
  if (type.isTopLevel()) {
    this.incompleteBuilders.push(newBuilder.setName(type.getName()));
    LOGGER.debug(String.format(""String_Node_Str"",type.getName()));
  }
 else   if (!this.incompleteBuilders.empty()) {
    String parentContainerName=this.incompleteBuilders.peek().getName();
    String typeName=type.getName() + ""String_Node_Str"";
    Stack<AttributeContainer.Builder> currentStack=this.incompleteLocalBuilders.get(parentContainerName);
    if (null == currentStack) {
      currentStack=new Stack<AttributeContainer.Builder>();
    }
    currentStack.push(newBuilder.setName(typeName));
    this.incompleteLocalBuilders.put(parentContainerName,currentStack);
    LOGGER.debug(String.format(""String_Node_Str"",typeName));
  }
}",0.7352297592997812
6572,"/** 
 * Constructor creates mapper for simple data types and initializes various member variables.
 * @param workspace Workspace object for source code write-out
 * @param properties Properties object with module options
 */
public JavaTypeGen(Workspace workspace,Properties properties) throws Exception {
  mapper=MapperFactory.getInstance().createMapper(properties.getProperty(""String_Node_Str""));
  this.workspace=workspace;
  this.properties=properties;
  this.incompleteBuilders=new Stack<AttributeContainer.Builder>();
  this.incompleteLocalBuilder=null;
  this.generatedElements=new HashMap<String,SourceFileData>();
}","/** 
 * Constructor creates mapper for simple data types and initializes various member variables.
 * @param workspace Workspace object for source code write-out
 * @param properties Properties object with module options
 */
public JavaTypeGen(Workspace workspace,Properties properties) throws Exception {
  mapper=MapperFactory.getInstance().createMapper(properties.getProperty(""String_Node_Str""));
  this.workspace=workspace;
  this.properties=properties;
  this.incompleteBuilders=new Stack<AttributeContainer.Builder>();
  this.incompleteLocalBuilders=new HashMap<String,Stack<AttributeContainer.Builder>>();
  this.generatedElements=new HashMap<String,SourceFileData>();
}",0.8940092165898618
6573,"@Override public void endTopLevelComplexType(FComplexType type,FElement parent){
}","@Override public void endTopLevelComplexType(FComplexType type,FElement parent) throws Exception {
}",0.9010989010989012
6574,"/** 
 * Handle start of a top-level complex type. Complex types are currently not supported by the Fabric type generator module.
 * @param type FComplexType object
 * @param parent Parent FElement object
 * @throws Exception Error during processing
 */
@Override public void startTopLevelComplexType(FComplexType type,FElement parent) throws Exception {
  LOGGER.debug(""String_Node_Str"");
}","/** 
 * Handle start of a top-level complex type. Complex types are currently not supported by the Fabric type generator module.
 * @param type FComplexType object
 * @param parent Parent FElement object
 * @throws Exception Error during processing
 */
@Override public void startTopLevelComplexType(FComplexType type,FElement parent) throws Exception {
  LOGGER.debug(""String_Node_Str"");
  if (null != type) {
    typeGenerator.createNewContainer(type);
  }
}",0.9176470588235294
6575,"/** 
 * Handle end of a top-level complex type.
 * @param type FComplexType object
 * @param parent Parent FElement object
 */
@Override public void endTopLevelComplexType(FComplexType type,FElement parent){
  LOGGER.debug(""String_Node_Str"");
}","/** 
 * Handle end of a top-level complex type.
 * @param type FComplexType object
 * @param parent Parent FElement object
 * @throws Exception Error during processing* 
 */
@Override public void endTopLevelComplexType(FComplexType type,FElement parent) throws Exception {
  LOGGER.debug(""String_Node_Str"");
  try {
    typeGenerator.buildCurrentContainer();
  }
 catch (  Exception e) {
    if (null != type && null != type.getName()) {
      LOGGER.error(String.format(""String_Node_Str"",type.getName()));
    }
 else {
      LOGGER.error(""String_Node_Str"");
    }
    throw e;
  }
}",0.5893719806763285
6576,"/** 
 * Handle end of a top-level simple type. As soon as the construction of a simple type is finished, we can close the current container by building it.
 * @param type FSimpleType object
 * @param parent Parent FElement object
 * @throws Exception Error during processing
 */
@Override public void endTopLevelSimpleType(FSimpleType type,FElement parent) throws Exception {
  LOGGER.debug(""String_Node_Str"");
  try {
    typeGenerator.buildCurrentContainer();
  }
 catch (  Exception e) {
    if (null != type && null != type.getName()) {
      LOGGER.error(String.format(""String_Node_Str"",type.getName()));
    }
 else {
      LOGGER.error(""String_Node_Str"");
    }
    throw e;
  }
}","/** 
 * Handle end of a top-level simple type. As soon as the construction of a simple type is finished, we can close the current container by building it.
 * @param type FSimpleType object
 * @param parent Parent FElement object
 * @throws Exception Error during processing
 */
@Override public void endTopLevelSimpleType(FSimpleType type,FElement parent) throws Exception {
  LOGGER.debug(""String_Node_Str"");
  try {
    if (!FSchemaTypeHelper.isEnum(type)) {
      typeGenerator.buildCurrentContainer();
    }
  }
 catch (  Exception e) {
    if (null != type && null != type.getName()) {
      LOGGER.error(String.format(""String_Node_Str"",type.getName()));
    }
 else {
      LOGGER.error(""String_Node_Str"");
    }
    throw e;
  }
}",0.9642105263157896
6577,"/** 
 * Handle start of a top-level schema element. Each top-level element is equivalent to a member variable in the corresponding container class.
 * @param element FElement object
 * @throws Exception Error during processing
 */
@Override public void startTopLevelElement(FElement element) throws Exception {
  LOGGER.debug(""String_Node_Str"");
  if (null != element) {
    if (element.getSchemaType().getClass() == FSequence.class) {
      return;
    }
    typeGenerator.addMemberVariable(element);
  }
}","/** 
 * Handle start of a top-level schema element. Each top-level element is equivalent to a member variable in the corresponding container class.
 * @param element FElement object
 * @throws Exception Error during processing
 */
@Override public void startTopLevelElement(FElement element) throws Exception {
  LOGGER.debug(""String_Node_Str"");
  if (null != element) {
    if (element.getSchemaType().getClass() == FSequence.class) {
      LOGGER.debug(""String_Node_Str"");
    }
    typeGenerator.addMemberVariable(element);
  }
}",0.9643888354186718
6578,"/** 
 * Create a new container class that represents a simple type of the XML schema document. All elements and attributes that belong to this type should be added to the container as member variables.
 * @param type FSimpleType object
 */
public void createNewContainer(FSimpleType type);",public void createNewContainer(FComplexType type);,0.2772861356932153
6579,"@Override public void createNewContainer(FSimpleType type){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void createNewContainer(FComplexType type){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.979757085020243
6580,"/** 
 * Add a member variable to the current container class. Type, name, initial value and restrictions of the element will be mapped to Java where applicable.
 * @param element FElement object
 */
@Override public void addMemberVariable(FElement element){
  if (!this.incompleteBuilders.empty()) {
    String typeName=""String_Node_Str"";
    if (element.getName().equals(element.getSchemaType().getName())) {
      typeName=this.mapper.lookup(this.getFabricTypeName(element.getSchemaType()));
    }
 else {
      typeName=element.getSchemaType().getName();
    }
    AttributeContainer.Builder current=this.incompleteBuilders.pop();
    if (FSchemaTypeHelper.isArray(element)) {
      current.addElementArray(typeName,element.getName(),element.getMinOccurs(),element.getMaxOccurs());
    }
 else     if (FSchemaTypeHelper.isEnum(element.getSchemaType())) {
      Object[] constants=FSchemaTypeHelper.extractEnumArray((FSimpleType)element.getSchemaType());
      String[] enumConstants=Arrays.copyOf(constants,constants.length,String[].class);
      current.addEnumElement(element.getName() + ""String_Node_Str"",element.getName(),enumConstants);
    }
 else     if (FSchemaTypeHelper.isList(element)) {
      current.addElementArray(typeName,element.getName(),FSchemaTypeHelper.getMinLength((FList)element.getSchemaType()),FSchemaTypeHelper.getMaxLength((FList)element.getSchemaType()));
    }
 else     if (FSchemaTypeHelper.hasDefaultValue(element)) {
      current.addElement(typeName,element.getName(),element.getDefaultValue());
    }
 else     if (FSchemaTypeHelper.hasFixedValue(element)) {
      current.addConstantElement(typeName,element.getName(),element.getFixedValue());
    }
 else {
      current.addElement(typeName,element.getName());
    }
    this.incompleteBuilders.push(current);
    LOGGER.debug(String.format(""String_Node_Str"",element.getName(),typeName,current.getName()));
  }
}","/** 
 * Add a member variable to the current container class. Type, name, initial value and restrictions of the element will be mapped to Java where applicable.
 * @param element FElement object
 */
@Override public void addMemberVariable(FElement element){
  if (!this.incompleteBuilders.empty()) {
    String typeName=""String_Node_Str"";
    if (element.getName().equals(element.getSchemaType().getName())) {
      typeName=this.mapper.lookup(this.getFabricTypeName(element.getSchemaType()));
    }
 else {
      typeName=element.getSchemaType().getName();
    }
    AttributeContainer.Builder current=this.incompleteBuilders.pop();
    AttributeContainer.Restriction restrictions=new AttributeContainer.Restriction();
    if ((element.getSchemaType().isSimple() && !element.getSchemaType().isTopLevel()) || this.generatedElements.containsKey(typeName)) {
      restrictions=this.createRestrictions((FSimpleType)(element.getSchemaType()));
    }
    if (!element.getSchemaType().isTopLevel() && FSchemaTypeHelper.isEnum(element.getSchemaType())) {
      Object[] constants=FSchemaTypeHelper.extractEnumArray((FSimpleType)element.getSchemaType());
      String[] enumConstants=Arrays.copyOf(constants,constants.length,String[].class);
      current.addEnumElement(element.getName() + ""String_Node_Str"",element.getName(),enumConstants);
    }
 else     if (FSchemaTypeHelper.hasDefaultValue(element)) {
      current.addElement(typeName,element.getName(),element.getDefaultValue(),restrictions);
    }
 else     if (FSchemaTypeHelper.hasFixedValue(element)) {
      current.addConstantElement(typeName,element.getName(),element.getFixedValue());
    }
 else {
      current.addElement(typeName,element.getName(),restrictions);
    }
    this.incompleteBuilders.push(current);
    LOGGER.debug(String.format(""String_Node_Str"",element.getName(),typeName,current.getName()));
  }
}",0.7171209314633501
6581,"/** 
 * Create an AttributeContainer.Restriction object according to the restrictions, which are set in the provided type object. This way we can add restrictions to a container class and take them into account, when we do the source code write-out.
 * @param type FSimpleType object (may be restricted)
 * @return Restriction object for AttributeContainer
 */
private AttributeContainer.Restriction createRestrictions(final FSimpleType type){
  AttributeContainer.Restriction restrictions=new AttributeContainer.Restriction();
  FSchemaRestrictions schemaRestrictions=type.getRestrictions();
  List<Integer> validFacets=type.getValidFacets();
  for (  Integer facet : validFacets) {
switch (facet) {
case SchemaType.FACET_LENGTH:
      if (schemaRestrictions.hasRestriction(facet)) {
        restrictions.length=schemaRestrictions.getStringValue(facet);
      }
    break;
case SchemaType.FACET_MIN_LENGTH:
  if (schemaRestrictions.hasRestriction(facet)) {
    restrictions.minLength=schemaRestrictions.getStringValue(facet);
  }
break;
case SchemaType.FACET_MAX_LENGTH:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.maxLength=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_MIN_INCLUSIVE:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.minInclusive=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_MAX_INCLUSIVE:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.maxInclusive=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_MIN_EXCLUSIVE:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.minExclusive=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_MAX_EXCLUSIVE:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.maxExclusive=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_PATTERN:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.pattern=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_WHITE_SPACE:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.whiteSpace=this.translateWhiteSpaceRestriction(schemaRestrictions.getIntegerValue(facet));
}
break;
case SchemaType.FACET_TOTAL_DIGITS:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.totalDigits=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_FRACTION_DIGITS:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.fractionDigits=schemaRestrictions.getStringValue(facet);
}
break;
default :
break;
}
}
return restrictions;
}","/** 
 * Create an AttributeContainer.Restriction object according to the restrictions, which are set in the provided type object. This way we can add restrictions to a container class and take them into account, when we do the source code write-out.
 * @param type FSimpleType object (may be restricted)
 * @return Restriction object for AttributeContainer
 */
private AttributeContainer.Restriction createRestrictions(final FSimpleType type){
  AttributeContainer.Restriction restrictions=new AttributeContainer.Restriction();
  FSchemaRestrictions schemaRestrictions=type.getRestrictions();
  List<Integer> validFacets=type.getValidFacets();
  for (  Integer facet : validFacets) {
switch (facet) {
case SchemaType.FACET_LENGTH:
      if (schemaRestrictions.hasRestriction(facet)) {
        restrictions.length=schemaRestrictions.getStringValue(facet);
      }
    break;
case SchemaType.FACET_MIN_LENGTH:
  if (schemaRestrictions.hasRestriction(facet)) {
    restrictions.minLength=schemaRestrictions.getStringValue(facet);
  }
break;
case SchemaType.FACET_MAX_LENGTH:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.maxLength=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_MIN_INCLUSIVE:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.minInclusive=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_MAX_INCLUSIVE:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.maxInclusive=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_MIN_EXCLUSIVE:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.minExclusive=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_MAX_EXCLUSIVE:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.maxExclusive=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_PATTERN:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.pattern=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_WHITE_SPACE:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.whiteSpace=this.translateWhiteSpaceRestriction(schemaRestrictions.getStringValue(facet));
}
break;
case SchemaType.FACET_TOTAL_DIGITS:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.totalDigits=schemaRestrictions.getStringValue(facet);
}
break;
case SchemaType.FACET_FRACTION_DIGITS:
if (schemaRestrictions.hasRestriction(facet)) {
restrictions.fractionDigits=schemaRestrictions.getStringValue(facet);
}
break;
default :
break;
}
}
return restrictions;
}",0.9974584555229716
6582,"/** 
 * Create a new container class that represents a simple type of the XML schema document. All elements and attributes that belong to this type should be added to the container as member variables.
 * @param type FSimpleType object
 */
@Override public void createNewContainer(FSimpleType type){
  if (null != type) {
    if (FSchemaTypeHelper.isEnum(type)) {
      try {
        this.createTopLevelEnum(type);
      }
 catch (      Exception e) {
        LOGGER.error(String.format(""String_Node_Str"",type.getName()));
      }
      LOGGER.debug(String.format(""String_Node_Str"",type.getName()));
    }
 else {
      AttributeContainer.Builder newBuilder=AttributeContainer.newBuilder().setName(type.getName());
      if (FSchemaTypeHelper.isList(type)) {
        FList listType=(FList)type;
        newBuilder.addElementArray(this.mapper.lookup(this.getFabricTypeName(listType.getItemType())),""String_Node_Str"",FSchemaTypeHelper.getMinLength(listType),FSchemaTypeHelper.getMaxLength(listType));
      }
 else {
        newBuilder.addElement(this.mapper.lookup(this.getFabricTypeName(type)),""String_Node_Str"",this.createRestrictions(type));
      }
      this.incompleteBuilders.push(newBuilder);
      LOGGER.debug(String.format(""String_Node_Str"",type.getName()));
    }
  }
}","@Override public void createNewContainer(FComplexType type){
  AttributeContainer.Builder newBuilder=AttributeContainer.newBuilder().setName(type.getName());
  this.incompleteBuilders.push(newBuilder);
  LOGGER.debug(String.format(""String_Node_Str"",type.getName()));
}",0.1589147286821705
6583,"/** 
 * Translate identifiers for 'whiteSpace' restriction from XMLBeans constants to textual representations (e.g. 'preserve' instead of Schema.WS_PRESERVE).
 * @param xmlBeansConstant XMLBeans constant
 * @return String representation of identifier
 */
private String translateWhiteSpaceRestriction(final int xmlBeansConstant){
  String result=""String_Node_Str"";
switch (xmlBeansConstant) {
case SchemaType.WS_PRESERVE:
    result=""String_Node_Str"";
  break;
case SchemaType.WS_REPLACE:
result=""String_Node_Str"";
break;
case SchemaType.WS_COLLAPSE:
result=""String_Node_Str"";
break;
default :
result=null;
break;
}
return result;
}","/** 
 * Translate identifiers for 'whiteSpace' restriction from weird XMLBeans values to proper textual representation. XMLBeans may either deliver strings or numeric identifiers, when we call schemaRestrictions.getStringValue(facet), so we need this rather dirty hack to get a clean textual representation of the current 'whiteSpace' value.
 * @param xmlBeansConstant XMLBeans identifier for 'whiteSpace' value
 * @return Proper string representation of identifier or 'null', if'whiteSpace' restriction is not set or has unknown value
 */
private String translateWhiteSpaceRestriction(final String xmlBeansConstant){
  String result=""String_Node_Str"";
  if ((""String_Node_Str"").equals(xmlBeansConstant) || (""String_Node_Str"").equals(xmlBeansConstant)) {
    result=""String_Node_Str"";
  }
 else   if ((""String_Node_Str"").equals(xmlBeansConstant) || (""String_Node_Str"").equals(xmlBeansConstant)) {
    result=""String_Node_Str"";
  }
 else   if ((""String_Node_Str"").equals(xmlBeansConstant) || (""String_Node_Str"").equals(xmlBeansConstant)) {
    result=""String_Node_Str"";
  }
 else {
    result=null;
  }
  return result;
}",0.3344748858447489
6584,"/** 
 * Finish the construction of the current container class by building it. As soon as a container is built, no more new member variables can be added to it. This function is usually called, when the closing XML tag of a type definition is reached.
 * @throws Exception Error while building container
 */
@Override public void buildCurrentContainer() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    AnnotationMapper xmlMapper=new AnnotationMapper(this.properties.getProperty(""String_Node_Str""));
    JavaClassGenerationStrategy javaStrategy=new JavaClassGenerationStrategy(xmlMapper);
    JClass classObject=(JClass)this.incompleteBuilders.pop().build().asClassObject(javaStrategy);
    if (null != this.incompleteLocalBuilder) {
      JClass innerClassObject=(JClass)this.incompleteLocalBuilder.build().asClassObject(javaStrategy);
      classObject.add(innerClassObject);
      this.incompleteLocalBuilder=null;
      LOGGER.debug(String.format(""String_Node_Str"",innerClassObject.getName(),classObject.getName()));
    }
    if (!this.generatedElements.containsKey(classObject.getName())) {
      this.generatedElements.put(classObject.getName(),new JavaTypeGen.SourceFileData(classObject,javaStrategy.getRequiredDependencies()));
    }
    LOGGER.debug(String.format(""String_Node_Str"",classObject.getName()));
  }
}","/** 
 * Finish the construction of the current container class by building it. As soon as a container is built, no more new member variables can be added to it. This function is usually called, when the closing XML tag of a type definition is reached.
 * @throws Exception Error while building container
 */
@Override public void buildCurrentContainer() throws Exception {
  if (!this.incompleteBuilders.empty()) {
    AnnotationMapper xmlMapper=new AnnotationMapper(this.properties.getProperty(""String_Node_Str""));
    JavaClassGenerationStrategy javaStrategy=new JavaClassGenerationStrategy(xmlMapper);
    JClass classObject=(JClass)this.incompleteBuilders.pop().build().asClassObject(javaStrategy);
    if (null != this.incompleteLocalBuilder) {
      JClass innerClassObject=(JClass)javaStrategy.generateClassObject(this.incompleteLocalBuilder.build(),JModifier.PUBLIC | JModifier.STATIC);
      classObject.add(innerClassObject);
      this.incompleteLocalBuilder=null;
      LOGGER.debug(String.format(""String_Node_Str"",innerClassObject.getName(),classObject.getName()));
    }
    if (!this.generatedElements.containsKey(classObject.getName())) {
      this.generatedElements.put(classObject.getName(),new JavaTypeGen.SourceFileData(classObject,javaStrategy.getRequiredDependencies()));
    }
    LOGGER.debug(String.format(""String_Node_Str"",classObject.getName()));
  }
}",0.9646799116997792
6585,"/** 
 * This method populates the map for the datatype mapping with the Java type names. Non-standard datatypes must be fully qualified (e.g. javax.xml.namespace.QName instead of QName).
 */
@Override public void createMapping(){
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * This method populates the map for the datatype mapping with the Java type names. Non-standard datatypes must be fully qualified (e.g. javax.xml.namespace.QName instead of QName).
 */
@Override public void createMapping(){
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
  types.put(""String_Node_Str"",""String_Node_Str"");
}",0.8670919723551302
6586,"/** 
 * Adds an annotation to this class.
 * @param annotations The annotation's name.
 * @return This object.
 */
public JClass addAnnotation(JClassAnnotation... annotations);","/** 
 * Adds an annotation to this class.
 * @param annotations The Java class annotation.
 * @return This object.
 */
public JClass addAnnotation(JClassAnnotation... annotations);",0.949438202247191
6587,"/** 
 * @see de.uniluebeck.sourcegen.java.JClass#addAnnotation(de.uniluebeck.sourcegen.java.JClassAnnotation[])
 */
public JClass addAnnotation(JClassAnnotation... annotation){
  for (  JClassAnnotation ann : annotation) {
    this.annotations.add(ann);
  }
  return this;
}","/** 
 * @see de.uniluebeck.sourcegen.java.JClass#addAnnotation(de.uniluebeck.sourcegen.java.JClassAnnotation[])
 */
public JClass addAnnotation(JClassAnnotation... annotations){
  for (  JClassAnnotation ann : annotations) {
    this.annotations.add(ann);
  }
  return this;
}",0.9963636363636365
6588,"/** 
 * Adds an annotation to this class.
 * @param annotations The annotation's name.
 * @return This object.
 */
public JConstructor addAnnotation(JConstructorAnnotation... annotations);","/** 
 * Adds an annotation to this class.
 * @param annotations The Java constructor's annotation.
 * @return This object.
 */
public JConstructor addAnnotation(JConstructorAnnotation... annotations);",0.8969072164948454
6589,"/** 
 * @see de.uniluebeck.sourcegen.java.JConstructor#addAnnotation(de.uniluebeck.sourcegen.java.JConstructorAnnotation[])
 */
public JConstructor addAnnotation(JConstructorAnnotation... annotation){
  for (  JConstructorAnnotation ann : annotation) {
    this.annotations.add(ann);
  }
  return this;
}","/** 
 * @see de.uniluebeck.sourcegen.java.JConstructor#addAnnotation(de.uniluebeck.sourcegen.java.JConstructorAnnotation[])
 */
public JConstructor addAnnotation(JConstructorAnnotation... annotations){
  for (  JConstructorAnnotation ann : annotations) {
    this.annotations.add(ann);
  }
  return this;
}",0.99672131147541
6590,"/** 
 * Adds an annotation to this enum.
 * @param annotations The annotation's name.
 * @return This object.
 */
public JEnum addAnnotation(JEnumAnnotation... annotations);","/** 
 * Adds an annotation to this enum.
 * @param annotations The Java enum annotation.
 * @return This object.
 */
public JEnum addAnnotation(JEnumAnnotation... annotations);",0.9512893982808024
6591,"/** 
 * @see de.uniluebeck.sourcegen.java.JEnum#addAnnotation(de.uniluebeck.sourcegen.java.JEnumAnnotation[])
 */
public JEnum addAnnotation(JEnumAnnotation... annotation){
  for (  JEnumAnnotation ann : annotation) {
    this.annotations.add(ann);
  }
  return this;
}","/** 
 * @see de.uniluebeck.sourcegen.java.JEnum#addAnnotation(de.uniluebeck.sourcegen.java.JEnumAnnotation[])
 */
public JEnum addAnnotation(JEnumAnnotation... annotations){
  for (  JEnumAnnotation ann : annotations) {
    this.annotations.add(ann);
  }
  return this;
}",0.9962962962962963
6592,"/** 
 * @see de.uniluebeck.sourcegen.java.JField#addAnnotation(de.uniluebeck.sourcegen.java.JFieldAnnotation[])
 */
public JField addAnnotation(JFieldAnnotation... annotation){
  for (  JFieldAnnotation ann : annotation) {
    this.annotations.add(ann);
  }
  return this;
}","/** 
 * @see de.uniluebeck.sourcegen.java.JField#addAnnotation(de.uniluebeck.sourcegen.java.JFieldAnnotation[])
 */
public JField addAnnotation(JFieldAnnotation... annotations){
  for (  JFieldAnnotation ann : annotations) {
    this.annotations.add(ann);
  }
  return this;
}",0.9963636363636365
6593,"/** 
 * Adds an annotation to this method.
 * @param annotations The annotation's name.
 * @return This object.
 */
public JInterfaceMethod addAnnotation(JMethodAnnotation... annotations);","/** 
 * Adds an annotation to this method.
 * @param annotations The Java method annotation.
 * @return This object.
 */
public JInterfaceMethod addAnnotation(JMethodAnnotation... annotations);",0.9501312335958004
6594,"/** 
 * @see de.uniluebeck.sourcegen.java.JInterfaceMethod#addAnnotation(de.uniluebeck.sourcegen.java.JMethodAnnotation[])
 */
public JInterfaceMethod addAnnotation(JMethodAnnotation... annotation){
  for (  JMethodAnnotation ann : annotation) {
    this.annotations.add(ann);
  }
  return this;
}","/** 
 * @see de.uniluebeck.sourcegen.java.JInterfaceMethod#addAnnotation(de.uniluebeck.sourcegen.java.JMethodAnnotation[])
 */
public JInterfaceMethod addAnnotation(JMethodAnnotation... annotations){
  for (  JMethodAnnotation ann : annotations) {
    this.annotations.add(ann);
  }
  return this;
}",0.9966442953020134
6595,"@Override public void startTopLevelElement(FElement element) throws Exception {
  JMethodSignature jms=JMethodSignature.factory.create(JParameter.factory.create(""String_Node_Str"",""String_Node_Str""));
  JMethod jm=JMethod.factory.create(JModifier.PUBLIC | JModifier.STATIC,""String_Node_Str"",""String_Node_Str"",jms);
  jm.getBody().appendSource(""String_Node_Str"");
  jm.setComment(new JMethodCommentImpl(""String_Node_Str""));
  JClass jc=JClass.factory.create(JModifier.PUBLIC,""String_Node_Str"");
  jc.add(jm);
  this.helloWorldSource.add(jc);
  this.helloWorldSource.addImport(""String_Node_Str"");
}","@Override public void startTopLevelElement(FElement element) throws Exception {
}",0.2396449704142011
6596,"public void testIntegration() throws IOException {
  Resource resource=new ClassPathResource(""String_Node_Str"",ContextGeneratorTest.class);
  JavaDocBuilder builder=new JavaDocBuilder();
  builder.addSourceTree(new File(getBaseDir(),""String_Node_Str""));
  SpringConfigurationLoader loader=new SpringConfigurationLoader(new QDoxAugmentation(builder));
  Configuration configuration=loader.load(resource);
  InMemoryDestination dest=new InMemoryDestination();
  BeanFactoryGenerator generator=new BeanFactoryGenerator();
  generator.generate(dest,configuration,BeanFactoryTypes.MinimalJavaSE);
  System.out.println(dest.getAsText());
}","public void testIntegration() throws IOException {
  Resource resource=new ClassPathResource(""String_Node_Str"",ContextGeneratorTest.class);
  JavaDocBuilder builder=new JavaDocBuilder();
  builder.addSourceTree(new File(getBaseDir(),""String_Node_Str""));
  SpringConfigurationLoader loader=new SpringConfigurationLoader(new QDoxAugmentation(builder));
  Configuration configuration=loader.load(resource);
  InMemoryDestination dest=new InMemoryDestination();
  BeanFactoryGenerator generator=new BeanFactoryGenerator();
  generator.generate(dest,configuration,BeanFactoryTypes.MINIMAL_JAVA_SE);
  System.out.println(dest.getAsText());
}",0.9637223974763408
6597,"private List<JavaMethod> findMatchingConstructors(final JavaClass cl,final MutableInstance instance,final Map<String,MutableInstance> allInstances){
  final ArrayList<JavaMethod> constructors=new ArrayList<JavaMethod>();
  final List<MutableConstructorArgument> arguments=instance.getConstructorArguments();
  if (instance.getFactoryMethod() == null) {
    for (    final JavaMethod method : cl.getMethods()) {
      if (method.isConstructor() && matches(arguments,method.getParameters())) {
        constructors.add(method);
      }
    }
    if (constructors.size() == 0) {
      throw new RuntimeException(""String_Node_Str"" + instance.getName());
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + instance.getName());
  }
  return constructors;
}","private List<JavaMethod> findMatchingConstructors(final JavaClass cl,final MutableInstance instance,final Map<String,MutableInstance> allInstances){
  final ArrayList<JavaMethod> constructors=new ArrayList<JavaMethod>();
  final List<MutableConstructorArgument> arguments=instance.getConstructorArguments();
  if (instance.getFactoryMethod() == null) {
    for (    final JavaMethod method : cl.getMethods()) {
      if (method.isConstructor() && (arguments == null || matches(arguments,method.getParameters()))) {
        constructors.add(method);
      }
    }
    if (constructors.size() == 0) {
      throw new RuntimeException(""String_Node_Str"" + instance.getName());
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + instance.getName());
  }
  return constructors;
}",0.831302116741501
6598,"private void attributeConstructor(final MutableInstance instance,final Map<String,MutableInstance> allInstances){
  final JavaClass cl=builder.getClassByName(instance.getType());
  final List<JavaMethod> matchingConstructors=findMatchingConstructors(cl,instance,allInstances);
  sortConstructors(matchingConstructors);
  final List<MutableConstructorArgument> arguments=new ArrayList<MutableConstructorArgument>();
  constructorsearch:   for (  final JavaMethod constructor : matchingConstructors) {
    arguments.clear();
    int i=0;
    parametersearch:     for (    final JavaParameter parameter : constructor.getParameters()) {
      if (i < instance.getConstructorArguments().size()) {
        final MutableConstructorArgument arg=instance.getConstructorArguments().get(i);
        arg.setType(parameter.getType().getValue());
        arg.setPrimitive(parameter.getType().isPrimitive());
        arguments.add(arg);
        i++;
        continue parametersearch;
      }
      if (parameter.getType().isPrimitive()) {
        continue constructorsearch;
      }
      final MutableInstance newInstance;
      newInstance=findInstanceByType(allInstances,instance.getName(),""String_Node_Str"" + parameter.getName(),parameter.getType().getValue());
      if (newInstance == null || !newInstance.isAutowireCandidate()) {
        continue constructorsearch;
      }
      final MutableConstructorArgument arg=new MutableConstructorArgument(instance);
      final MutableInstanceReference ref=new MutableInstanceReference(arg,newInstance.getName());
      ref.setReferencedId(newInstance.getId());
      ref.setId(""String_Node_Str"" + counter++);
      arg.setPrimitive(false);
      arg.setSource(ref);
      arg.setType(newInstance.getType());
      arg.setInstance(instance);
      arguments.add(arg);
    }
    break;
  }
  if (arguments.size() > 0) {
    instance.setConstructorArguments(arguments);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + instance.getName() + ""String_Node_Str""+ instance.getType());
  }
}","private void attributeConstructor(final MutableInstance instance,final Map<String,MutableInstance> allInstances){
  final JavaClass cl=builder.getClassByName(instance.getType());
  final List<JavaMethod> matchingConstructors=findMatchingConstructors(cl,instance,allInstances);
  sortConstructors(matchingConstructors);
  final List<MutableConstructorArgument> arguments=new ArrayList<MutableConstructorArgument>();
  constructorsearch:   for (  final JavaMethod constructor : matchingConstructors) {
    arguments.clear();
    int i=0;
    int numArgs=instance.getConstructorArguments() == null ? 0 : instance.getConstructorArguments().size();
    parametersearch:     for (    final JavaParameter parameter : constructor.getParameters()) {
      if (i < numArgs) {
        final MutableConstructorArgument arg=instance.getConstructorArguments().get(i);
        arg.setType(parameter.getType().getValue());
        arg.setPrimitive(parameter.getType().isPrimitive());
        arguments.add(arg);
        i++;
        continue parametersearch;
      }
      if (parameter.getType().isPrimitive()) {
        continue constructorsearch;
      }
      final MutableInstance newInstance;
      newInstance=findInstanceByType(allInstances,instance.getName(),""String_Node_Str"" + parameter.getName(),parameter.getType().getValue());
      if (newInstance == null || !newInstance.isAutowireCandidate()) {
        continue constructorsearch;
      }
      final MutableConstructorArgument arg=new MutableConstructorArgument(instance);
      final MutableInstanceReference ref=new MutableInstanceReference(arg,newInstance.getName());
      ref.setReferencedId(newInstance.getId());
      ref.setId(""String_Node_Str"" + counter++);
      arg.setPrimitive(false);
      arg.setSource(ref);
      arg.setType(newInstance.getType());
      arg.setInstance(instance);
      arguments.add(arg);
    }
    break;
  }
  if (arguments.size() > 0) {
    instance.setConstructorArguments(arguments);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + instance.getName() + ""String_Node_Str""+ instance.getType());
  }
}",0.9637506041565974
6599,"private boolean matches(final List<MutableConstructorArgument> arguments,final JavaParameter[] parameters){
  int i;
  final int j;
  if (parameters.length < arguments.size()) {
    return false;
  }
  for (i=0; i < arguments.size(); i++) {
    if (!(((parameters[i].getType().isPrimitive() || ""String_Node_Str"".equals(parameters[i].getType().getValue())) && arguments.get(i).getType() == null) || parameters[i].getType().getValue().equals(arguments.get(i).getType()))) {
      return false;
    }
  }
  return true;
}","private boolean matches(final List<MutableConstructorArgument> arguments,final JavaParameter[] parameters){
  int i;
  if (parameters.length < arguments.size()) {
    return false;
  }
  for (i=0; i < arguments.size(); i++) {
    if (!(((parameters[i].getType().isPrimitive() || ""String_Node_Str"".equals(parameters[i].getType().getValue())) && arguments.get(i).getType() == null) || parameters[i].getType().getValue().equals(arguments.get(i).getType()))) {
      return false;
    }
  }
  return true;
}",0.9853085210577864
6600,"public void testAttributionDefaultAutowire() throws FileNotFoundException, IOException {
  attributionPropertyTester(""String_Node_Str"",4);
}","public void testAttributionDefaultAutowire() throws FileNotFoundException, IOException {
  Configuration configuration=configurationLoader(""String_Node_Str"");
  commonPropertyTester(configuration,4);
}",0.6862170087976539
6601,"public void testAttributionTwoTypesFail() throws FileNotFoundException, IOException {
  try {
    attributionPropertyTester(""String_Node_Str"",5);
    fail();
  }
 catch (  final Exception e) {
  }
}","public void testAttributionTwoTypesFail() throws FileNotFoundException, IOException {
  try {
    Configuration configuration=configurationLoader(""String_Node_Str"");
    fail();
  }
 catch (  final Exception e) {
  }
}",0.8317307692307693
6602,"public void testAttributionNoCandidate() throws FileNotFoundException, IOException {
  attributionPropertyTester(""String_Node_Str"",5);
}","public void testAttributionNoCandidate() throws FileNotFoundException, IOException {
  Configuration configuration=configurationLoader(""String_Node_Str"");
  commonPropertyTester(configuration,5);
}",0.7327327327327328
6603,"public void testAttributionConstructor() throws FileNotFoundException, IOException {
  attributionConstructorTester(""String_Node_Str"",4);
}","public void testAttributionConstructor() throws FileNotFoundException, IOException {
  Configuration configuration=configurationLoader(""String_Node_Str"");
  assertEquals(4,configuration.getPublicInstances().size());
  assertNotNull(configuration.get(""String_Node_Str""));
  assertNotNull(configuration.get(""String_Node_Str"").getConstructorArguments());
  assertEquals(4,configuration.get(""String_Node_Str"").getConstructorArguments().size());
  assertEquals(""String_Node_Str"",configuration.get(""String_Node_Str"").getConstructorArguments().get(2).getType());
  assertEquals(""String_Node_Str"",configuration.get(""String_Node_Str"").getConstructorArguments().get(3).getType());
  final List<? extends ConstructorArgument> cr=configuration.get(""String_Node_Str"").getConstructorArguments();
  final List<? extends ConstructorArgument> c1=configuration.get(""String_Node_Str"").getConstructorArguments();
  for (int i=2; i < 4; i++) {
    assertEquals(((MutableInstanceReference)cr.get(i).getSource()).getName(),((MutableInstanceReference)c1.get(i).getSource()).getName());
    assertEquals(((MutableInstanceReference)cr.get(i).getSource()).getReferencedId(),((MutableInstanceReference)c1.get(i).getSource()).getReferencedId());
  }
}",0.1792799412196914
6604,"public void testAttributionByType() throws FileNotFoundException, IOException {
  attributionPropertyTester(""String_Node_Str"",4);
}","public void testAttributionByType() throws FileNotFoundException, IOException {
  Configuration configuration=configurationLoader(""String_Node_Str"");
  commonPropertyTester(configuration,4);
}",0.7244582043343654
6605,"public void testAttributionByName() throws FileNotFoundException, IOException {
  attributionPropertyTester(""String_Node_Str"",4);
}","public void testAttributionByName() throws FileNotFoundException, IOException {
  Configuration configuration=configurationLoader(""String_Node_Str"");
  commonPropertyTester(configuration,4);
}",0.7244582043343654
6606,"public void onWaveEvent(String filePath,int event){
  if (PLAYBACK_STOPPED == event) {
    waveEventHandler.sendEmptyMessage(event);
  }
 else   if (RECORDING_STOPPED == event) {
    waveEventHandler.sendEmptyMessage(event);
  }
}","public void onWaveEvent(int event,String filePath,float position){
  if (PLAYBACK_STOPPED == event) {
    waveEventHandler.sendEmptyMessage(event);
  }
 else   if (RECORDING_STOPPED == event) {
    waveEventHandler.sendEmptyMessage(event);
  }
}",0.9305263157894736
6607,"@Override public void onEnable(){
  log.info(""String_Node_Str"");
  getServer().getPluginManager().registerEvent(Type.REDSTONE_CHANGE,blockListener,Priority.Highest,this);
}","@Override public void onEnable(){
  log.info(""String_Node_Str"" + getDescription().getName() + ""String_Node_Str""+ getDescription().getFullName());
  getServer().getPluginManager().registerEvent(Type.REDSTONE_CHANGE,blockListener,Priority.Highest,this);
}",0.8094117647058824
6608,"@Override public void onDisable(){
  log.info(""String_Node_Str"");
}","@Override public void onDisable(){
  log.info(""String_Node_Str"" + getDescription().getName() + ""String_Node_Str"");
}",0.73224043715847
6609,"public boolean tryActivate(Block startBlock,BlockFace forward){
  boolean didSomething=false;
  for (  Block block : matchingBlocksInLine(startBlock,forward,signMaterials)) {
    if (!tryPowerSign(block))     break;
    didSomething=true;
  }
  return didSomething;
}","public boolean tryActivate(Block startBlock,BlockFace forward,boolean all){
  boolean didSomething=false;
  for (  Block block : matchingBlocksInLine(startBlock,forward,signMaterials)) {
    if (!tryPowerSign(block) && !all)     break;
    didSomething=true;
  }
  return didSomething;
}",0.9638989169675092
6610,"public boolean tryPowerSign(Block signBlock){
  if (!matchesMaterials(signBlock,signMaterials))   return false;
  Sign signState=(Sign)signBlock.getState();
  String command=signState.getLine(0);
  if (command.length() == 0 || command.charAt(0) != '!')   return false;
  failMsg=""String_Node_Str"";
  final String action;
  String[] result=matchPatterns(command,actionPattern);
  if (result == null) {
    debugFail(""String_Node_Str"");
    doDebugging(signBlock,2);
    return false;
  }
  action=result[0];
  try {
    boolean ret=false;
    if (action.equals(""String_Node_Str"")) {
      result=matchPatternsEnd(result[1],repeatPattern,verticalPattern,moveDirPattern);
      if (result == null) {
        debugFail(""String_Node_Str"");
        doDebugging(signBlock,2);
        return false;
      }
      final int repeat=(result[0] != null) ? Integer.parseInt(result[0]) : 1;
      if (repeat <= 0)       return false;
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,result[1]);
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      BlockFace direction=getDirection(result[2],signDir,result[1]);
      Material[] moveTypes=getMaterials(signState.getLine(1));
      ret=tryPushBlocks(startBlock,forward,moveTypes,repeat);
    }
 else     if (action.equals(""String_Node_Str"")) {
      result=matchPatternsEnd(result[1],repeatPattern,verticalPattern,moveDirPattern);
      if (result == null) {
        debugFail(""String_Node_Str"");
        doDebugging(signBlock,2);
        return false;
      }
      final int repeat=(result[0] != null) ? Integer.parseInt(result[0]) : 1;
      if (repeat <= 0)       return false;
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,result[1]);
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      BlockFace direction=getDirection(result[2],signDir,result[1]);
      Material[] moveTypes=getMaterials(signState.getLine(1));
      ret=tryPullBlocks(startBlock,forward,moveTypes,repeat);
    }
 else     if (action.equals(""String_Node_Str"")) {
      result=matchPatternsEnd(result[1],verticalPattern);
      if (result == null) {
        debugFail(""String_Node_Str"");
        doDebugging(signBlock,2);
        return false;
      }
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,result[0]);
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      signState.setLine(1,startBlock.getType().toString().toLowerCase());
      return true;
    }
 else     if (action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")) {
      BlockFace signDir=getSignDirection(signBlock);
      ret=tryLineAction(action,signState.getLine(1),signBlock,signDir);
    }
 else     if (action.equals(""String_Node_Str"")) {
      String[] oldResult=result;
      result=matchPatternsEnd(result[1],verticalPattern);
      if (result == null) {
        debugFail(""String_Node_Str"");
        doDebugging(signBlock,2);
        log.warning(Arrays.toString(oldResult));
        return false;
      }
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,result[0]);
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      ret=tryActivate(startBlock,forward);
    }
 else     if (action.equals(""String_Node_Str"")) {
      result=matchPatternsEnd(result[1],verticalPattern);
      if (result == null) {
        failMsg=""String_Node_Str"";
        doDebugging(signBlock,2);
        return false;
      }
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,result[0]);
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      ret=tryActivateLong(startBlock,forward);
    }
 else     if (action.equals(""String_Node_Str"")) {
      result=matchPatternsEnd(result[1],cannonTypePattern,verticalPattern);
      if (result == null) {
        debugFail(""String_Node_Str"");
        doDebugging(signBlock,2);
        return false;
      }
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,result[1]);
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      ret=tryCannonSign(startBlock,forward,signState.getLine(1),result[0]);
    }
 else     if (action.equals(""String_Node_Str"")) {
      result=matchPatternsEnd(result[1],repeatPattern,verticalPattern,directionPattern);
      if (result == null) {
        debugFail(""String_Node_Str"");
        doDebugging(signBlock,2);
        return false;
      }
      final int repeat=(result[0] != null) ? Integer.parseInt(result[0]) : 1;
      if (repeat <= 0)       return false;
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,result[1]);
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      BlockFace dir=strToDirection(result[2],forward);
      if (dir == null) {
        debugFail(""String_Node_Str"" + result[2]);
        doDebugging(signBlock,2);
        return false;
      }
      Material[] moveTypes=getMaterials(signState.getLine(1));
      ret=tryInvPut(signBlock.getFace(dir),startBlock,forward,moveTypes,repeat);
    }
    debugFail(""String_Node_Str"");
    doDebugging(signBlock,ret ? 0 : 1);
    return ret;
  }
 catch (  Exception e) {
    e.printStackTrace();
    doDebugging(signBlock,10);
  }
  return false;
}","public boolean tryPowerSign(Block signBlock){
  if (!matchesMaterials(signBlock,signMaterials))   return false;
  Sign signState=(Sign)signBlock.getState();
  String command=signState.getLine(0);
  if (command.length() == 0 || command.charAt(0) != '!')   return false;
  failMsg=""String_Node_Str"";
  try {
    boolean ret=false;
    Matcher m=pushPattern.matcher(command);
    if (m.usePattern(pushPattern).matches()) {
      final int repeat=(m.group(1) != null) ? Integer.parseInt(m.group(1)) : 1;
      if (repeat <= 0)       return debugFail(""String_Node_Str"");
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,m.group(2));
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      BlockFace direction=getDirection(m.group(3),signDir,m.group(2));
      Material[] moveTypes=getMaterials(signState.getLine(1));
      ret=tryPushBlocks(startBlock,forward,moveTypes,repeat);
    }
 else     if (m.usePattern(pullPattern).matches()) {
      final int repeat=(m.group(1) != null) ? Integer.parseInt(m.group(1)) : 1;
      if (repeat <= 0)       return debugFail(""String_Node_Str"");
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,m.group(2));
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      BlockFace direction=getDirection(m.group(3),signDir,m.group(2));
      Material[] moveTypes=getMaterials(signState.getLine(1));
      ret=tryPullBlocks(startBlock,forward,moveTypes,repeat);
    }
 else     if (m.usePattern(detectPattern).matches()) {
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,m.group(1));
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      signState.setLine(1,startBlock.getType().toString().toLowerCase());
      return true;
    }
 else     if (m.usePattern(linemovePattern).matches()) {
      BlockFace signDir=getSignDirection(signBlock);
      ret=tryLineAction(m.group(1),signState.getLine(1),signBlock,signDir);
    }
 else     if (m.usePattern(activatePattern).matches()) {
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,m.group(2));
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      ret=tryActivate(startBlock,forward,m.group(1).equals(""String_Node_Str""));
    }
 else     if (m.usePattern(activateLongPattern).matches()) {
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,m.group(1));
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      ret=tryActivateLong(startBlock,forward);
    }
 else     if (m.usePattern(cannonPattern).matches()) {
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,m.group(2));
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      ret=tryCannonSign(startBlock,forward,signState.getLine(1),m.group(1));
    }
 else     if (m.usePattern(invpushPattern).matches()) {
      final int repeat=(m.group(1) != null) ? Integer.parseInt(m.group(1)) : 1;
      if (repeat <= 0)       return debugFail(""String_Node_Str"");
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,m.group(2));
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      BlockFace dir=strToDirection(m.group(3),signDir);
      if (dir == null) {
        debugFail(""String_Node_Str"" + m.group(3));
        doDebugging(signBlock,2);
        return false;
      }
      Material[] moveTypes=getMaterials(signState.getLine(1));
      ret=tryInvPush(signBlock.getFace(dir),startBlock,forward,moveTypes,repeat);
    }
 else     if (m.usePattern(invpullPattern).matches()) {
      final int repeat=(m.group(1) != null) ? Integer.parseInt(m.group(1)) : 1;
      if (repeat <= 0)       return debugFail(""String_Node_Str"");
      BlockFace signDir=getSignDirection(signBlock);
      BlockFace forward=getForward(signDir,m.group(2));
      Block startBlock=getStartBlock(signBlock,signDir,forward).getFace(forward,1);
      BlockFace dir=strToDirection(m.group(3),signDir);
      if (dir == null) {
        debugFail(""String_Node_Str"" + m.group(3));
        doDebugging(signBlock,2);
        return false;
      }
      Material[] moveTypes=getMaterials(signState.getLine(1));
      ret=tryInvPull(signBlock.getFace(dir),startBlock,forward,moveTypes,repeat);
    }
 else {
      debugFail(""String_Node_Str"");
      doDebugging(signBlock,2);
      return false;
    }
    debugFail(""String_Node_Str"");
    doDebugging(signBlock,ret ? 0 : 1);
    return ret;
  }
 catch (  Exception e) {
    e.printStackTrace();
    doDebugging(signBlock,10);
  }
  return false;
}",0.1585589056930931
6611,"public boolean tryInvPush(Block invBlock,Block startBlock,BlockFace forward,Material[] materials,int amount){
  Inventory inventory;
  BlockState state=invBlock.getState();
  if (state instanceof ContainerBlock)   inventory=((ContainerBlock)state).getInventory();
 else   return debugFail(""String_Node_Str"" + invBlock.getType().toString());
  Material putMaterial=null;
  ItemStack[] items=inventory.getContents();
  for (  Material material : materials) {
    int count=0;
    for (    ItemStack itemStack : items) {
      if (!itemStack.getType().equals(material))       continue;
      count+=itemStack.getAmount();
    }
    if (count >= amount) {
      putMaterial=material;
      break;
    }
  }
  if (putMaterial == null)   return debugFail(""String_Node_Str"");
  BlockLineIterator line=blocksInLine(startBlock,forward);
  for (int x=amount; x > 0; x--) {
    if (isEmpty(line.next()))     continue;
    if (!tryPushBlocks(line.currentBlock,forward,materials,x))     return debugFail(""String_Node_Str"");
    break;
  }
  line=blocksInLine(startBlock,forward);
  for (int i=0; i < items.length; i++) {
    ItemStack itemStack=items[i];
    if (!itemStack.getType().equals(putMaterial))     continue;
    int iAmount=itemStack.getAmount();
    int howMany;
    if (amount <= iAmount)     howMany=amount;
 else     howMany=iAmount;
    amount-=howMany;
    if (iAmount == howMany) {
      inventory.setItem(i,null);
    }
 else {
      itemStack.setAmount(iAmount - howMany);
      inventory.setItem(i,itemStack);
    }
    for (int j=0; j < howMany; j++)     line.next().setTypeIdAndData(itemStack.getTypeId(),(byte)itemStack.getDurability(),true);
  }
  return true;
}","public boolean tryInvPush(Block invBlock,Block startBlock,BlockFace forward,Material[] materials,int amount){
  Inventory inventory;
  BlockState state=invBlock.getState();
  if (state instanceof ContainerBlock)   inventory=((ContainerBlock)state).getInventory();
 else   return debugFail(""String_Node_Str"" + invBlock.getType().toString());
  Material putMaterial=null;
  ItemStack[] items=inventory.getContents();
  for (  Material material : materials) {
    int count=0;
    for (    ItemStack itemStack : items) {
      if (itemStack == null || !itemStack.getType().equals(material))       continue;
      count+=itemStack.getAmount();
    }
    if (count >= amount) {
      putMaterial=material;
      break;
    }
  }
  if (putMaterial == null)   return debugFail(""String_Node_Str"");
  BlockLineIterator line=blocksInLine(startBlock,forward);
  for (int x=amount; x > 0; x--) {
    if (isEmpty(line.next()))     continue;
    if (!tryPushBlocks(line.currentBlock,forward,materials,x))     return debugFail(""String_Node_Str"");
    break;
  }
  line=blocksInLine(startBlock,forward);
  for (int i=0; i < items.length; i++) {
    ItemStack itemStack=items[i];
    if (itemStack == null || !itemStack.getType().equals(putMaterial))     continue;
    int iAmount=itemStack.getAmount();
    int howMany;
    if (amount <= iAmount)     howMany=amount;
 else     howMany=iAmount;
    amount-=howMany;
    if (iAmount == howMany) {
      inventory.setItem(i,null);
    }
 else {
      itemStack.setAmount(iAmount - howMany);
      inventory.setItem(i,itemStack);
    }
    for (int j=0; j < howMany; j++)     line.next().setTypeIdAndData(itemStack.getTypeId(),(byte)itemStack.getDurability(),true);
  }
  return true;
}",0.9876106194690264
6612,"public static boolean hasItems(ItemStack[] reqItems,Inventory inventory){
  int[] itemCounts=new int[reqItems.length];
  for (  ItemStack item : inventory.getContents()) {
    for (int i=0; i < reqItems.length; i++)     if (reqItems[i].getType().equals(item.getType()))     itemCounts[i]+=item.getAmount();
  }
  for (int i=0; i < reqItems.length; i++)   if (reqItems[i].getAmount() > itemCounts[i])   return false;
  return true;
}","public static boolean hasItems(ItemStack[] reqItems,Inventory inventory){
  int[] itemCounts=new int[reqItems.length];
  for (  ItemStack item : inventory.getContents()) {
    if (item == null)     continue;
    for (int i=0; i < reqItems.length; i++)     if (reqItems[i].getType().equals(item.getType()))     itemCounts[i]+=item.getAmount();
  }
  for (int i=0; i < reqItems.length; i++)   if (reqItems[i].getAmount() > itemCounts[i])   return false;
  return true;
}",0.96
6613,"public QuickBelt(){
  log=Logger.getLogger(""String_Node_Str"");
  playerListener=new QuickBeltPlayerListener(this);
  status=new HashMap<String,Boolean>();
  force=false;
  silent=false;
}","public QuickBelt(){
  log=Logger.getLogger(""String_Node_Str"");
  playerListener=new QuickBeltPlayerListener(this);
  status=new HashMap<String,Boolean>();
  inventories=new HashMap<String,List<ItemStack>>();
  force=false;
  silent=false;
}",0.8758782201405152
6614,"public void invCheck(Player player){
  if (!parent.force) {
    Boolean playerCheck=parent.status.get(player.getName());
    if (playerCheck == null || playerCheck == false) {
      return;
    }
  }
  ItemStack[] inventory=player.getInventory().getContents();
  if (inventory.length != 36) {
    parent.log.warning(""String_Node_Str"");
    return;
  }
  for (Integer i=0; i < 27; i++) {
    if (inventory[i].getType() == Material.AIR) {
      inventory[i].setType(inventory[i + 9].getType());
      inventory[i].setAmount(inventory[i + 9].getAmount());
      inventory[i].setData(inventory[i + 9].getData());
      inventory[i].setDurability(inventory[i + 9].getDurability());
      inventory[i + 9].setType(Material.AIR);
      if (i < 9 && inventory[i].getType() != Material.AIR && !parent.silent) {
        player.sendMessage(ChatColor.AQUA.toString() + ""String_Node_Str"" + (i + 1)+ ChatColor.WHITE.toString());
      }
    }
  }
  player.getInventory().setContents(inventory);
}","public void invCheck(Player player){
  if (!parent.force) {
    Boolean playerCheck=parent.status.get(player.getName());
    if (playerCheck == null || playerCheck == false) {
      return;
    }
  }
  List<ItemStack> inv=Arrays.asList(player.getInventory().getContents());
  if (null == parent.inventories.get(player.getName())) {
    parent.inventories.put(player.getName(),inv);
  }
 else   if (parent.inventories.get(player.getName()).equals(inv)) {
    return;
  }
 else {
    parent.inventories.put(player.getName(),inv);
  }
  if (inv.size() != 36) {
    parent.log.warning(""String_Node_Str"");
    return;
  }
  dropColumns(inv);
  Boolean didDrop=false;
  for (Integer i=0; i <= 8; i++) {
    if (inv.get(i).getType() == Material.AIR && inv.get(i + 27).getType() != Material.AIR) {
      didDrop=true;
      ItemStack swap=inv.get(i + 27);
      inv.set(i + 27,inv.get(i));
      inv.set(i,swap);
      player.sendMessage(ChatColor.AQUA.toString() + ""String_Node_Str"" + (i + 1)+ ChatColor.WHITE.toString());
    }
  }
  while (didDrop == false) {
    didDrop=dropColumns(inv);
  }
  parent.inventories.put(player.getName(),inv);
  player.getInventory().setContents((ItemStack[])inv.toArray());
}",0.5290617848970252
6615,"@Override public void onEnable(){
  getDataFolder().mkdirs();
  File yml=new File(getDataFolder(),""String_Node_Str"");
  if (!yml.exists()) {
    try {
      yml.createNewFile();
      getConfiguration().setProperty(""String_Node_Str"",null);
      getConfiguration().save();
    }
 catch (    IOException ex) {
      log.warning(getDescription().getName() + ""String_Node_Str"");
    }
  }
  List<String> keys=Common.getRootKeys(this);
  if (keys == null || !keys.contains(""String_Node_Str"")) {
    log.warning(getDescription().getName() + ""String_Node_Str"");
    return;
  }
  if (keys.contains(""String_Node_Str"")) {
    force=getConfiguration().getBoolean(""String_Node_Str"",false);
  }
 else {
    getConfiguration().setProperty(""String_Node_Str"",false);
    getConfiguration().save();
  }
  if (keys.contains(""String_Node_Str"")) {
    silent=getConfiguration().getBoolean(""String_Node_Str"",false);
  }
 else {
    getConfiguration().setProperty(""String_Node_Str"",false);
    getConfiguration().save();
  }
  List<String> users=getConfiguration().getStringList(""String_Node_Str"",null);
  if (users != null) {
    for (    String u : users) {
      status.put(u,getConfiguration().getBoolean(""String_Node_Str"" + u + ""String_Node_Str"",false));
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_ANIMATION,playerListener,Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,playerListener,Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,playerListener,Priority.Highest,this);
  log.info(getDescription().getName() + ""String_Node_Str"" + getDescription().getVersion()+ ""String_Node_Str"");
}","@Override public void onEnable(){
  getDataFolder().mkdirs();
  File yml=new File(getDataFolder(),""String_Node_Str"");
  if (!yml.exists()) {
    try {
      yml.createNewFile();
      getConfiguration().setProperty(""String_Node_Str"",null);
      getConfiguration().save();
    }
 catch (    IOException ex) {
      log.warning(getDescription().getName() + ""String_Node_Str"");
    }
  }
  List<String> keys=Common.getRootKeys(this);
  if (keys == null || !keys.contains(""String_Node_Str"")) {
    log.warning(getDescription().getName() + ""String_Node_Str"");
    return;
  }
  if (keys.contains(""String_Node_Str"")) {
    force=getConfiguration().getBoolean(""String_Node_Str"",false);
  }
 else {
    getConfiguration().setProperty(""String_Node_Str"",false);
    getConfiguration().save();
  }
  if (keys.contains(""String_Node_Str"")) {
    silent=getConfiguration().getBoolean(""String_Node_Str"",false);
  }
 else {
    getConfiguration().setProperty(""String_Node_Str"",false);
    getConfiguration().save();
  }
  List<String> users=getConfiguration().getKeys(""String_Node_Str"");
  if (users != null) {
    for (    String u : users) {
      status.put(u,getConfiguration().getBoolean(""String_Node_Str"" + u + ""String_Node_Str"",false));
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_ANIMATION,playerListener,Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,playerListener,Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,playerListener,Priority.Highest,this);
  log.info(getDescription().getName() + ""String_Node_Str"" + getDescription().getVersion()+ ""String_Node_Str"");
}",0.9834387232761216
6616,"public void invCheck(Player player){
  if (!parent.force) {
    Boolean playerCheck=parent.status.get(player.getName());
    if (playerCheck == null || playerCheck == false) {
      return;
    }
  }
  List<ItemStack> inv=Arrays.asList(player.getInventory().getContents());
  if (null == parent.inventories.get(player.getName())) {
    parent.inventories.put(player.getName(),inv);
  }
 else   if (parent.inventories.get(player.getName()).equals(inv)) {
    return;
  }
 else {
    parent.inventories.put(player.getName(),inv);
  }
  if (inv.size() != 36) {
    parent.log.warning(""String_Node_Str"");
    return;
  }
  dropColumns(inv);
  Boolean didDrop=false;
  for (Integer i=0; i <= 8; i++) {
    if (inv.get(i).getType() == Material.AIR && inv.get(i + 27).getType() != Material.AIR) {
      didDrop=true;
      ItemStack swap=inv.get(i + 27);
      inv.set(i + 27,inv.get(i));
      inv.set(i,swap);
      player.sendMessage(ChatColor.AQUA.toString() + ""String_Node_Str"" + (i + 1)+ ChatColor.WHITE.toString());
    }
  }
  while (didDrop == false) {
    didDrop=dropColumns(inv);
  }
  parent.inventories.put(player.getName(),inv);
  player.getInventory().setContents((ItemStack[])inv.toArray());
}","public void invCheck(PlayerEvent pev){
  Player player=pev.getPlayer();
  if (!parent.force) {
    Boolean playerCheck=parent.status.get(player.getName());
    if (playerCheck == null || playerCheck == false) {
      return;
    }
  }
  List<ItemStack> inv=Arrays.asList(player.getInventory().getContents());
  if (null == parent.inventories.get(player.getName())) {
    parent.inventories.put(player.getName(),inv);
  }
 else   if (parent.inventories.get(player.getName()).equals(inv)) {
    return;
  }
 else {
    parent.inventories.put(player.getName(),inv);
  }
  if (inv.size() != 36) {
    parent.log.warning(""String_Node_Str"");
    return;
  }
  dropColumns(inv);
  Boolean didDrop=false;
  for (Integer i=0; i <= 8; i++) {
    if (inv.get(i).getType() == Material.AIR && inv.get(i + 27).getType() != Material.AIR) {
      didDrop=true;
      ItemStack swap=inv.get(i + 27);
      inv.set(i + 27,inv.get(i));
      inv.set(i,swap);
      player.sendMessage(ChatColor.AQUA.toString() + ""String_Node_Str"" + (i + 1)+ ChatColor.WHITE.toString());
    }
  }
  while (didDrop == true) {
    didDrop=dropColumns(inv);
  }
  parent.inventories.put(player.getName(),inv);
  player.getInventory().setContents((ItemStack[])inv.toArray());
}",0.9770491803278688
6617,"public void onPlayerMove(PlayerMoveEvent event){
  invCheck(event.getPlayer());
}","public void onPlayerMove(PlayerMoveEvent event){
  invCheck(event);
}",0.92
6618,"public void onPlayerDropItem(PlayerDropItemEvent event){
  invCheck(event.getPlayer());
}","public void onPlayerDropItem(PlayerDropItemEvent event){
  invCheck(event);
}",0.927710843373494
6619,"public void onPlayerAnimation(PlayerAnimationEvent event){
  invCheck(event.getPlayer());
}","public void onPlayerAnimation(PlayerAnimationEvent event){
  invCheck(event);
}",0.9294117647058824
6620,"private List<Location> getRadialLocations3D(Location location,Compartment compartment){
  int doubleDeltaY=((int)location.getIndices()[0].value) * 2 - compartment.dimensions[0] + 1;
  int doubleDeltaX=((int)location.getIndices()[1].value) * 2 - compartment.dimensions[1] + 1;
  int doubleDeltaZ=((int)location.getIndices()[2].value) * 2 - compartment.dimensions[2] + 1;
  List<Location> result=new ArrayList<Location>();
  int doubleDeltaMax=Math.max(Math.abs(doubleDeltaX),Math.max(Math.abs(doubleDeltaY),Math.abs(doubleDeltaZ)));
  if (doubleDeltaMax == 0) {
    return result;
  }
  CellIndexExpression newIndexX=location.getIndices()[1];
  CellIndexExpression newIndexY=location.getIndices()[0];
  CellIndexExpression newIndexZ=location.getIndices()[2];
  if (Math.abs(doubleDeltaX) == doubleDeltaMax) {
    newIndexX=location.getIndices()[1].getDeltaIndex((doubleDeltaX > 0) ? -1 : 1);
  }
  if (Math.abs(doubleDeltaY) == doubleDeltaMax) {
    newIndexY=location.getIndices()[0].getDeltaIndex((doubleDeltaY > 0) ? -1 : 1);
  }
  if (Math.abs(doubleDeltaZ) == doubleDeltaMax) {
    newIndexZ=location.getIndices()[2].getDeltaIndex((doubleDeltaY > 0) ? -1 : 1);
  }
  result.add(new Location(location.getName(),newIndexY,newIndexX,newIndexZ));
  return result;
}","private List<Location> getRadialLocations3D(Location location,Compartment compartment){
  int doubleDeltaY=((int)location.getIndices()[0].value) * 2 - compartment.dimensions[0] + 1;
  int doubleDeltaX=((int)location.getIndices()[1].value) * 2 - compartment.dimensions[1] + 1;
  int doubleDeltaZ=((int)location.getIndices()[2].value) * 2 - compartment.dimensions[2] + 1;
  List<Location> result=new ArrayList<Location>();
  result.add(location);
  int doubleDeltaMax=Math.max(Math.abs(doubleDeltaX),Math.max(Math.abs(doubleDeltaY),Math.abs(doubleDeltaZ)));
  if (doubleDeltaMax == 0) {
    return result;
  }
  CellIndexExpression newIndexX=location.getIndices()[1];
  CellIndexExpression newIndexY=location.getIndices()[0];
  CellIndexExpression newIndexZ=location.getIndices()[2];
  if (Math.abs(doubleDeltaX) == doubleDeltaMax) {
    newIndexX=location.getIndices()[1].getDeltaIndex((doubleDeltaX > 0) ? -1 : 1);
  }
  if (Math.abs(doubleDeltaY) == doubleDeltaMax) {
    newIndexY=location.getIndices()[0].getDeltaIndex((doubleDeltaY > 0) ? -1 : 1);
  }
  if (Math.abs(doubleDeltaZ) == doubleDeltaMax) {
    newIndexZ=location.getIndices()[2].getDeltaIndex((doubleDeltaY > 0) ? -1 : 1);
  }
  result.add(new Location(location.getName(),newIndexY,newIndexX,newIndexZ));
  return result;
}",0.990602975724354
6621,"private List<Location> getLateralLocations3D(Location location,Compartment compartment){
  float distanceToCentre=getDistanceToCentre(location,compartment);
  CellIndexExpression[] xIndices=new CellIndexExpression[]{location.getIndices()[1].getDeltaIndex(-1),location.getIndices()[1],location.getIndices()[1].getDeltaIndex(1)};
  CellIndexExpression[] yIndices=new CellIndexExpression[]{location.getIndices()[0].getDeltaIndex(-1),location.getIndices()[0],location.getIndices()[0].getDeltaIndex(1)};
  CellIndexExpression[] zIndices=new CellIndexExpression[]{location.getIndices()[2].getDeltaIndex(-1),location.getIndices()[2],location.getIndices()[2].getDeltaIndex(1)};
  List<Location> result=new ArrayList<Location>();
  for (  CellIndexExpression yIndex : yIndices) {
    for (    CellIndexExpression xIndex : xIndices) {
      for (      CellIndexExpression zIndex : zIndices) {
        if (xIndex != location.getIndices()[1] || yIndex != location.getIndices()[0] || zIndex != location.getIndices()[2]) {
          Location current=new Location(location.getName(),yIndex,xIndex,zIndex);
          if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
            result.add(current);
          }
        }
      }
    }
  }
  return result;
}","private List<Location> getLateralLocations3D(Location location,Compartment compartment){
  float distanceToCentre=getDistanceToCentre(location,compartment);
  CellIndexExpression[] xIndices=new CellIndexExpression[]{location.getIndices()[1].getDeltaIndex(-1),location.getIndices()[1],location.getIndices()[1].getDeltaIndex(1)};
  CellIndexExpression[] yIndices=new CellIndexExpression[]{location.getIndices()[0].getDeltaIndex(-1),location.getIndices()[0],location.getIndices()[0].getDeltaIndex(1)};
  CellIndexExpression[] zIndices=new CellIndexExpression[]{location.getIndices()[2].getDeltaIndex(-1),location.getIndices()[2],location.getIndices()[2].getDeltaIndex(1)};
  List<Location> result=new ArrayList<Location>();
  result.add(location);
  for (  CellIndexExpression yIndex : yIndices) {
    for (    CellIndexExpression xIndex : xIndices) {
      for (      CellIndexExpression zIndex : zIndices) {
        if (xIndex != location.getIndices()[1] || yIndex != location.getIndices()[0] || zIndex != location.getIndices()[2]) {
          Location current=new Location(location.getName(),yIndex,xIndex,zIndex);
          if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
            result.add(current);
          }
        }
      }
    }
  }
  return result;
}",0.9906832298136646
6622,"private List<Location> getRadialLocations2D(Location location,Compartment compartment){
  int doubleDeltaY=((int)location.getIndices()[0].value) * 2 - compartment.dimensions[0] + 1;
  int doubleDeltaX=((int)location.getIndices()[1].value) * 2 - compartment.dimensions[1] + 1;
  CellIndexExpression newIndexX=null;
  CellIndexExpression newIndexY=null;
  List<Location> result=new ArrayList<Location>();
  if (Math.abs(doubleDeltaX) > Math.abs(doubleDeltaY)) {
    newIndexY=location.getIndices()[0];
    newIndexX=location.getIndices()[1].getDeltaIndex((doubleDeltaX > 0) ? -1 : 1);
    result.add(new Location(location.getName(),newIndexY,newIndexX));
  }
 else   if (Math.abs(doubleDeltaX) < Math.abs(doubleDeltaY)) {
    newIndexX=location.getIndices()[1];
    newIndexY=location.getIndices()[0].getDeltaIndex((doubleDeltaY > 0) ? -1 : 1);
    result.add(new Location(location.getName(),newIndexY,newIndexX));
  }
 else   if (doubleDeltaX != 0) {
    newIndexX=location.getIndices()[1].getDeltaIndex((doubleDeltaX > 0) ? -1 : 1);
    newIndexY=location.getIndices()[0].getDeltaIndex((doubleDeltaY > 0) ? -1 : 1);
    result.add(new Location(location.getName(),newIndexY,newIndexX));
  }
  return result;
}","private List<Location> getRadialLocations2D(Location location,Compartment compartment){
  int doubleDeltaY=((int)location.getIndices()[0].value) * 2 - compartment.dimensions[0] + 1;
  int doubleDeltaX=((int)location.getIndices()[1].value) * 2 - compartment.dimensions[1] + 1;
  CellIndexExpression newIndexX=null;
  CellIndexExpression newIndexY=null;
  List<Location> result=new ArrayList<Location>();
  result.add(location);
  if (Math.abs(doubleDeltaX) > Math.abs(doubleDeltaY)) {
    newIndexY=location.getIndices()[0];
    newIndexX=location.getIndices()[1].getDeltaIndex((doubleDeltaX > 0) ? -1 : 1);
    result.add(new Location(location.getName(),newIndexY,newIndexX));
  }
 else   if (Math.abs(doubleDeltaX) < Math.abs(doubleDeltaY)) {
    newIndexX=location.getIndices()[1];
    newIndexY=location.getIndices()[0].getDeltaIndex((doubleDeltaY > 0) ? -1 : 1);
    result.add(new Location(location.getName(),newIndexY,newIndexX));
  }
 else   if (doubleDeltaX != 0) {
    newIndexX=location.getIndices()[1].getDeltaIndex((doubleDeltaX > 0) ? -1 : 1);
    newIndexY=location.getIndices()[0].getDeltaIndex((doubleDeltaY > 0) ? -1 : 1);
    result.add(new Location(location.getName(),newIndexY,newIndexX));
  }
  return result;
}",0.9901639344262296
6623,"@Override public List<List<Location>> applyChannel(List<ChannelConstraint> constraints,List<Compartment> compartments){
  List<List<Location>> result=new ArrayList<List<Location>>();
  if (isValidSourceLocations(templateConstraints,constraints,compartments)) {
    for (int templateIndex=0; templateIndex < templateConstraints.size(); templateIndex++) {
      Location templateSourceLocation=templateConstraints.get(templateIndex).sourceLocation;
      Location templateTargetLocation=templateConstraints.get(templateIndex).targetConstraint;
      ChannelConstraint constraint=constraints.get(templateIndex);
      Location sourceLocation=constraint.sourceLocation;
      Location targetConstraint=constraint.targetConstraint;
      Compartment sourceCompartment=getCompartment(compartments,templateSourceLocation.getName());
      Compartment targetCompartment=getCompartment(compartments,templateTargetLocation.getName());
      if (sourceLocation.getIndices().length != sourceCompartment.getDimensions().length || !sourceLocation.getName().equals(templateSourceLocation.getName())) {
        continue;
      }
      List<Location> newLocations=null;
      if (sourceCompartment.getDimensions().length == 2) {
        newLocations=getLateralLocations2D(sourceLocation,sourceCompartment);
      }
 else {
        newLocations=getLateralLocations3D(sourceLocation,sourceCompartment);
      }
      if (isNesting(sourceCompartment,targetCompartment)) {
        newLocations=applyNestingOffsets(sourceCompartment,targetCompartment,newLocations);
      }
      for (      Location location : newLocations) {
        if (targetCompartment.isValidVoxel(location)) {
          if (targetConstraint == null || targetConstraint.equals(location) || targetConstraint.isRefinement(location)) {
            result.add(getList(location));
          }
        }
      }
    }
  }
  return result;
}","@Override public List<List<Location>> applyChannel(List<ChannelConstraint> constraints,List<Compartment> compartments){
  List<List<Location>> result=new ArrayList<List<Location>>();
  if (isValidSourceLocations(templateConstraints,constraints,compartments)) {
    for (int templateIndex=0; templateIndex < templateConstraints.size(); templateIndex++) {
      Location templateSourceLocation=templateConstraints.get(templateIndex).sourceLocation;
      Location templateTargetLocation=templateConstraints.get(templateIndex).targetConstraint;
      ChannelConstraint constraint=constraints.get(templateIndex);
      Location sourceLocation=constraint.sourceLocation;
      Location targetConstraint=constraint.targetConstraint;
      Compartment sourceCompartment=getCompartment(compartments,templateSourceLocation.getName());
      Compartment targetCompartment=getCompartment(compartments,templateTargetLocation.getName());
      if (sourceLocation.getIndices().length != sourceCompartment.getDimensions().length || !sourceLocation.getName().equals(templateSourceLocation.getName())) {
        continue;
      }
      List<Location> newLocations=null;
      if (sourceCompartment.getDimensions().length == 2) {
        newLocations=getLateralLocations2D(sourceLocation,sourceCompartment);
      }
 else {
        newLocations=getLateralLocations3D(sourceLocation,sourceCompartment);
      }
      if (isNesting(sourceCompartment,targetCompartment)) {
        newLocations=applyNestingOffsets(sourceCompartment,targetCompartment,newLocations);
      }
      for (      Location location : newLocations) {
        if (targetCompartment.isValidVoxel(location)) {
          if (targetConstraint == null || targetConstraint.equals(location) || targetConstraint.isRefinement(location)) {
            result.add(getList(location));
          }
        }
      }
    }
  }
  removeMotionlessResults(constraints,result);
  return result;
}",0.981913499344692
6624,"private List<Location> getLateralLocations2D(Location location,Compartment compartment){
  float distanceToCentre=getDistanceToCentre(location,compartment);
  CellIndexExpression newIndexX=location.getIndices()[1].getDeltaIndex(-1);
  CellIndexExpression newIndexY=location.getIndices()[0].getDeltaIndex(-1);
  CellIndexExpression newIndexX2=location.getIndices()[1].getDeltaIndex(1);
  CellIndexExpression newIndexY2=location.getIndices()[0].getDeltaIndex(1);
  List<Location> result=new ArrayList<Location>();
  Location current=new Location(location.getName(),newIndexY,newIndexX);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),newIndexY,location.getIndices()[1]);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),newIndexY,newIndexX2);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),location.getIndices()[0],newIndexX);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),location.getIndices()[0],newIndexX2);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),newIndexY2,newIndexX);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),newIndexY2,location.getIndices()[1]);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),newIndexY2,newIndexX2);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  return result;
}","private List<Location> getLateralLocations2D(Location location,Compartment compartment){
  float distanceToCentre=getDistanceToCentre(location,compartment);
  CellIndexExpression newIndexX=location.getIndices()[1].getDeltaIndex(-1);
  CellIndexExpression newIndexY=location.getIndices()[0].getDeltaIndex(-1);
  CellIndexExpression newIndexX2=location.getIndices()[1].getDeltaIndex(1);
  CellIndexExpression newIndexY2=location.getIndices()[0].getDeltaIndex(1);
  List<Location> result=new ArrayList<Location>();
  result.add(location);
  Location current=new Location(location.getName(),newIndexY,newIndexX);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),newIndexY,location.getIndices()[1]);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),newIndexY,newIndexX2);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),location.getIndices()[0],newIndexX);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),location.getIndices()[0],newIndexX2);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),newIndexY2,newIndexX);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),newIndexY2,location.getIndices()[1]);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  current=new Location(location.getName(),newIndexY2,newIndexX2);
  if (Math.abs(distanceToCentre - getDistanceToCentre(current,compartment)) < 0.5f) {
    result.add(current);
  }
  return result;
}",0.9941434846266471
6625,"public List<MappingInstance> getMappingInstances(List<Compartment> compartments,List<Channel> channels){
  if (compartments == null || channels == null) {
    throw new NullPointerException();
  }
  List<Agent> remainingTemplateAgents=new ArrayList<Agent>(agents);
  List<Agent> fixedTemplateAgents=getFixedAgents(compartments);
  remainingTemplateAgents.removeAll(fixedTemplateAgents);
  List<AgentLink> remainingTemplateLinks=new ArrayList<AgentLink>(agentLinks);
  List<MappingInstance> mappings=new ArrayList<MappingInstance>();
  if (fixedTemplateAgents.size() > 0) {
    List<AgentLink> processedTemplateLinks=getInternalLinks(remainingTemplateLinks,fixedTemplateAgents);
    remainingTemplateLinks.removeAll(processedTemplateLinks);
    if (!isInternalLinksValid(processedTemplateLinks,compartments,channels)) {
      return new ArrayList<MappingInstance>();
    }
    MappingInstance mappingInstance=new MappingInstance();
    for (    Agent agent : fixedTemplateAgents) {
      mappingInstance.mapping.put(agent,agent.clone());
    }
    mappings.add(mappingInstance);
  }
  if (fixedTemplateAgents.size() == 0) {
    Agent templateTargetAgent=remainingTemplateAgents.get(0);
    fixedTemplateAgents.add(templateTargetAgent);
    remainingTemplateAgents.remove(templateTargetAgent);
    List<AgentLink> processedTemplateLinks=getInternalLinks(remainingTemplateLinks,fixedTemplateAgents);
    remainingTemplateLinks.removeAll(processedTemplateLinks);
    if (!isInternalLinksValid(processedTemplateLinks,compartments,channels)) {
      return new ArrayList<MappingInstance>();
    }
    List<Agent> locatedTargetAgents=templateTargetAgent.getLocatedAgents(compartments);
    for (    Agent locatedTargetAgent : locatedTargetAgents) {
      MappingInstance mapping=new MappingInstance();
      mapping.mapping.put(templateTargetAgent,locatedTargetAgent);
      mappings.add(mapping);
    }
  }
  while (remainingTemplateAgents.size() > 0) {
    Agent templateTargetAgent=chooseNextAgent(fixedTemplateAgents,remainingTemplateAgents,remainingTemplateLinks);
    fixedTemplateAgents.add(templateTargetAgent);
    remainingTemplateAgents.remove(templateTargetAgent);
    List<AgentLink> addedTemplateLinks=getInternalLinks(remainingTemplateLinks,fixedTemplateAgents);
    remainingTemplateLinks.removeAll(addedTemplateLinks);
    List<MappingInstance> newMappings=new ArrayList<MappingInstance>();
    for (    MappingInstance oldMapping : mappings) {
      List<Location> targetLocations=null;
      for (      AgentLink link : addedTemplateLinks) {
        Agent templateSourceAgent=link.getLinkedAgent(templateTargetAgent);
        if (templateSourceAgent != null) {
          Agent locatedSourceAgent=oldMapping.mapping.get(templateSourceAgent);
          String channelName=(link.sourceSite.getChannel() != null) ? link.sourceSite.getChannel() : link.targetSite.getChannel();
          Channel channel=null;
          if (channelName != null) {
            channel=getChannel(channels,channelName);
          }
          List<Location> currentTargetLocations=getPossibleLocations(locatedSourceAgent.location,templateTargetAgent.location,channel,compartments);
          if (targetLocations == null) {
            targetLocations=currentTargetLocations;
          }
 else {
            targetLocations.retainAll(currentTargetLocations);
          }
        }
      }
      if (targetLocations == null || targetLocations.size() == 0) {
        continue;
      }
      for (      Location targetLocation : targetLocations) {
        MappingInstance newMapping=new MappingInstance();
        newMapping.mapping.putAll(oldMapping.mapping);
        Agent locatedTargetAgent=new Agent(templateTargetAgent.name,targetLocation,templateTargetAgent.getSites());
        newMapping.mapping.put(templateTargetAgent,locatedTargetAgent);
        newMappings.add(newMapping);
      }
    }
    mappings=newMappings;
  }
  reorderLocatedMappings(mappings,agents);
  return mappings;
}","public List<MappingInstance> getMappingInstances(List<Compartment> compartments,List<Channel> channels){
  if (compartments == null || channels == null) {
    throw new NullPointerException();
  }
  List<Agent> remainingTemplateAgents=new ArrayList<Agent>(agents);
  List<Agent> fixedTemplateAgents=getFixedAgents(compartments);
  remainingTemplateAgents.removeAll(fixedTemplateAgents);
  List<AgentLink> remainingTemplateLinks=new ArrayList<AgentLink>(agentLinks);
  List<MappingInstance> mappings=new ArrayList<MappingInstance>();
  if (fixedTemplateAgents.size() > 0) {
    List<AgentLink> processedTemplateLinks=getInternalLinks(remainingTemplateLinks,fixedTemplateAgents);
    remainingTemplateLinks.removeAll(processedTemplateLinks);
    if (!isInternalLinksValid(processedTemplateLinks,compartments,channels)) {
      return new ArrayList<MappingInstance>();
    }
    MappingInstance mappingInstance=new MappingInstance();
    for (    Agent agent : fixedTemplateAgents) {
      mappingInstance.mapping.put(agent,agent.clone());
    }
    mappings.add(mappingInstance);
  }
  if (fixedTemplateAgents.size() == 0) {
    Agent templateTargetAgent=remainingTemplateAgents.get(0);
    fixedTemplateAgents.add(templateTargetAgent);
    remainingTemplateAgents.remove(templateTargetAgent);
    List<AgentLink> processedTemplateLinks=getInternalLinks(remainingTemplateLinks,fixedTemplateAgents);
    remainingTemplateLinks.removeAll(processedTemplateLinks);
    if (!isInternalLinksValid(processedTemplateLinks,compartments,channels)) {
      return new ArrayList<MappingInstance>();
    }
    List<Agent> locatedTargetAgents=templateTargetAgent.getLocatedAgents(compartments);
    for (    Agent locatedTargetAgent : locatedTargetAgents) {
      MappingInstance mapping=new MappingInstance();
      mapping.mapping.put(templateTargetAgent,locatedTargetAgent);
      mappings.add(mapping);
    }
  }
  while (remainingTemplateAgents.size() > 0) {
    Agent templateTargetAgent=chooseNextAgent(fixedTemplateAgents,remainingTemplateAgents,remainingTemplateLinks);
    fixedTemplateAgents.add(templateTargetAgent);
    remainingTemplateAgents.remove(templateTargetAgent);
    List<AgentLink> addedTemplateLinks=getInternalLinks(remainingTemplateLinks,fixedTemplateAgents);
    remainingTemplateLinks.removeAll(addedTemplateLinks);
    List<MappingInstance> newMappings=new ArrayList<MappingInstance>();
    for (    MappingInstance oldMapping : mappings) {
      List<Location> targetLocations=null;
      for (      AgentLink link : addedTemplateLinks) {
        Agent templateSourceAgent=link.getLinkedAgent(templateTargetAgent);
        if (templateSourceAgent != null) {
          Agent locatedSourceAgent=oldMapping.mapping.get(templateSourceAgent);
          String channelName=(link.sourceSite.getChannel() != null) ? link.sourceSite.getChannel() : link.targetSite.getChannel();
          Channel channel=null;
          if (channelName != null) {
            channel=getChannel(channels,channelName);
          }
          List<Location> currentTargetLocations=getPossibleLocations(locatedSourceAgent.location,templateTargetAgent.location,channel,compartments);
          if (targetLocations == null) {
            targetLocations=currentTargetLocations;
          }
 else {
            targetLocations.retainAll(currentTargetLocations);
          }
        }
      }
      if (targetLocations == null || targetLocations.size() == 0) {
        continue;
      }
      for (      Location targetLocation : targetLocations) {
        MappingInstance newMapping=new MappingInstance();
        for (        Map.Entry<Agent,Agent> entry : oldMapping.mapping.entrySet()) {
          newMapping.mapping.put(entry.getKey(),entry.getValue().clone());
        }
        Agent locatedTargetAgent=new Agent(templateTargetAgent.name,targetLocation,templateTargetAgent.getSites());
        newMapping.mapping.put(templateTargetAgent,locatedTargetAgent);
        newMappings.add(newMapping);
      }
    }
    mappings=newMappings;
  }
  reorderLocatedMappings(mappings,agents);
  return mappings;
}",0.9797892126472412
6626,"public void verify(){
  Map<String,AgentSite[]> links=new HashMap<String,AgentSite[]>();
  for (  Agent agent : agents) {
    for (    AgentSite site : agent.getSites()) {
      if (site.isNamedLink()) {
        AgentSite[] link=links.get(site.getLinkName());
        if (link == null) {
          links.put(site.getLinkName(),new AgentSite[]{site,null});
        }
 else {
          if (link[1] != null) {
            throw new IllegalStateException(""String_Node_Str"" + toString());
          }
          link[1]=site;
        }
      }
    }
  }
  for (  AgentSite[] link : links.values()) {
    if (link[1] == null) {
      throw new IllegalStateException(""String_Node_Str"" + toString());
    }
  }
}","public void verify(){
  Map<String,AgentSite[]> links=new HashMap<String,AgentSite[]>();
  for (  Agent agent : agents) {
    for (    AgentSite site : agent.getSites()) {
      if (site.isNamedLink()) {
        AgentSite[] link=links.get(site.getLinkName());
        if (link == null) {
          links.put(site.getLinkName(),new AgentSite[]{site,null});
        }
 else {
          if (link[1] != null) {
            throw new IllegalStateException(""String_Node_Str"" + toString());
          }
          link[1]=site;
        }
      }
    }
  }
  for (  AgentSite[] link : links.values()) {
    if (link[1] == null) {
      throw new IllegalStateException(""String_Node_Str"" + toString());
    }
  }
  for (  Agent current : agents) {
    if (this != current.getComplex()) {
      throw new IllegalStateException(""String_Node_Str"" + this);
    }
  }
}",0.9023136246786632
6627,"public static Map<Agent,Agent> createCloneAgentMap(Map<Agent,Agent> originalMap){
  Map<Agent,Agent> result=new HashMap<Agent,Agent>();
  List<Agent> templateAgents=new ArrayList<Agent>(originalMap.keySet());
  while (!templateAgents.isEmpty()) {
    Agent agent=templateAgents.get(0);
    Map<Agent,Agent> linkedMapEntries=getLinkedMapEntries(originalMap,agent);
    Complex complex=originalMap.get(agent).getComplex();
    Complex cloneComplex=complex.clone();
    for (    Map.Entry<Agent,Agent> entry : linkedMapEntries.entrySet()) {
      int agentIndex=complex.agents.indexOf(entry.getValue());
      if (agentIndex >= 0) {
        result.put(entry.getKey(),cloneComplex.agents.get(agentIndex));
      }
    }
    templateAgents.removeAll(linkedMapEntries.keySet());
  }
  return result;
}","public static Map<Agent,Agent> createCloneAgentMap(Map<Agent,Agent> originalMap){
  for (  Map.Entry<Agent,Agent> entry : originalMap.entrySet()) {
    Complex expected=entry.getValue().getComplex();
    for (    Agent current : expected.agents) {
      if (expected != current.getComplex()) {
        throw new IllegalStateException(""String_Node_Str"" + originalMap);
      }
    }
  }
  Map<Agent,Agent> result=new HashMap<Agent,Agent>();
  List<Agent> templateAgents=new ArrayList<Agent>(originalMap.keySet());
  while (!templateAgents.isEmpty()) {
    Agent agent=templateAgents.get(0);
    Map<Agent,Agent> linkedMapEntries=getLinkedMapEntries(originalMap,agent);
    Complex complex=originalMap.get(agent).getComplex();
    Complex cloneComplex=complex.clone();
    for (    Map.Entry<Agent,Agent> entry : linkedMapEntries.entrySet()) {
      int agentIndex=complex.agents.indexOf(entry.getValue());
      if (agentIndex >= 0) {
        result.put(entry.getKey(),cloneComplex.agents.get(agentIndex));
      }
    }
    templateAgents.removeAll(linkedMapEntries.keySet());
  }
  return result;
}",0.839493136219641
6628,"@Test public void testTest3_6_1_lateralDiffusionOfTransmembraneProteins() throws Exception {
  checkEventSimulation(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},2000,50,new float[][]{{1000,0},{230,770},{200,800}});
}","@Test public void testTest3_6_1_lateralDiffusionOfTransmembraneProteins() throws Exception {
  checkEventSimulation(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},2000,50,new float[][]{{1000,0},{340,660},{200,800}});
}",0.9790794979079498
6629,"public void testTest3_6_2_lateralDiffusionOfTransmembraneProteins_allowMotionlessAgents() throws Exception {
  checkEventSimulation(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},2000,50,new float[][]{{1000,0},{230,770},{200,800}});
}","@Test public void testTest3_6_2_lateralDiffusionOfTransmembraneProteins_allowMotionlessAgents() throws Exception {
  checkEventSimulation(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},2000,50,new float[][]{{1000,0},{230,770},{150,850}});
}",0.9767441860465116
6630,"@Test public void testGetChannelSubcomponents_edgeNeighbour(){
  List<Compartment> compartments=getList(new Compartment(""String_Node_Str"",4,4));
  Location location=new Location(""String_Node_Str"");
  EdgeNeighbourComponent component=new EdgeNeighbourComponent(getList(location),getList(location));
  List<ChannelComponent> expected=getList(new ChannelComponent(ChannelComponent.SUBCOMPONENT,getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y)),getList(new Location(""String_Node_Str"",INDEX_X_MINUS_1,INDEX_Y))),new ChannelComponent(ChannelComponent.SUBCOMPONENT,getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y)),getList(new Location(""String_Node_Str"",INDEX_X_PLUS_1,INDEX_Y))),new ChannelComponent(ChannelComponent.SUBCOMPONENT,getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y)),getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y_MINUS_1))),new ChannelComponent(ChannelComponent.SUBCOMPONENT,getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y)),getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y_PLUS_1))));
  assertEquals(expected,component.getChannelSubcomponents(compartments));
}","@Test public void testGetChannelSubcomponents_edgeNeighbour(){
  List<Compartment> compartments=getList(new Compartment(""String_Node_Str"",4,4));
  Location location=new Location(""String_Node_Str"");
  EdgeNeighbourComponent component=new EdgeNeighbourComponent(getList(location),getList(location));
  List<ChannelComponent> expected=getList(new ChannelComponent(ChannelComponent.SUBCOMPONENT,getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y)),getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y))),new ChannelComponent(ChannelComponent.SUBCOMPONENT,getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y)),getList(new Location(""String_Node_Str"",INDEX_X_MINUS_1,INDEX_Y))),new ChannelComponent(ChannelComponent.SUBCOMPONENT,getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y)),getList(new Location(""String_Node_Str"",INDEX_X_PLUS_1,INDEX_Y))),new ChannelComponent(ChannelComponent.SUBCOMPONENT,getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y)),getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y_MINUS_1))),new ChannelComponent(ChannelComponent.SUBCOMPONENT,getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y)),getList(new Location(""String_Node_Str"",INDEX_X,INDEX_Y_PLUS_1))));
  assertEquals(expected,component.getChannelSubcomponents(compartments));
}",0.9154103852596316
6631,"/** 
 * Connects the client to the HGD daemon.
 * @param host The host name or address of the daemon.
 * @param port The port listened by the daemon.
 * @return The daemon welcome message.
 * @throws IllegalStateException If the client is already connected.
 * @throws IOException If an I/O exception occurs.
 * @throws JHGDException If the connection can not be established.
 */
public void connect(String host,int port) throws IllegalStateException, IOException, JHGDException {
  if (connected) {
    throw new IllegalStateException(""String_Node_Str"" + host + ""String_Node_Str""+ port);
  }
  openSocket(host,port);
  String returnMessage=(String)input.readLine();
  if (checkServerResponse(returnMessage) != HGDConsts.SUCCESS) {
    throw new JHGDException(returnMessage.substring(returnMessage.indexOf('|') + 1));
  }
  String protocolVersion=requestProto();
  if (!protocolVersion.equalsIgnoreCase(HGDConsts.PROTOCOLVERSION)) {
    throw new JHGDException(""String_Node_Str"" + HGDConsts.PROTOCOLVERSION + ""String_Node_Str""+ protocolVersion);
  }
  this.connected=true;
  this.authenticated=false;
  this.host=host;
  this.port=port;
  this.username=null;
  this.password=null;
}","/** 
 * Connects the client to the HGD daemon.
 * @param host The host name or address of the daemon.
 * @param port The port listened by the daemon.
 * @throws IllegalStateException If the client is already connected.
 * @throws IOException If an I/O exception occurs.
 * @throws JHGDException If the connection can not be established.
 */
public void connect(String host,int port) throws IllegalStateException, IOException, JHGDException {
  if (connected) {
    throw new IllegalStateException(""String_Node_Str"" + host + ""String_Node_Str""+ port);
  }
  openSocket(host,port);
  String returnMessage=(String)input.readLine();
  if (checkServerResponse(returnMessage) != HGDConsts.SUCCESS) {
    throw new JHGDException(returnMessage.substring(returnMessage.indexOf('|') + 1));
  }
  String protocolVersion=requestProto();
  if (!protocolVersion.equalsIgnoreCase(HGDConsts.PROTOCOLVERSION)) {
    throw new JHGDException(""String_Node_Str"" + HGDConsts.PROTOCOLVERSION + ""String_Node_Str""+ protocolVersion);
  }
  this.connected=true;
  this.authenticated=false;
  this.host=host;
  this.port=port;
  this.username=null;
  this.password=null;
}",0.983225806451613
6632,"public static int parseDouble(final String arg){
  int newInt=0;
  try {
    newInt=Integer.parseInt(arg);
  }
 catch (  NumberFormatException e) {
  }
  return newInt > 0 ? newInt : 0;
}","public static double parseDouble(final String arg){
  double newDouble=0;
  try {
    newDouble=Double.parseDouble(arg);
  }
 catch (  NumberFormatException e) {
  }
  return newDouble > 0 ? newDouble : 0;
}",0.7868020304568528
6633,"public String formatCustomMessageLive(final String message,final Object... args) throws Exception {
  String outMessage=message.replaceAll(""String_Node_Str"",timeUntil(true));
  outMessage=outMessage.replaceAll(""String_Node_Str"",timeUntil(false));
  outMessage=outMessage.replaceAll(""String_Node_Str"",Etc.formatCost(lConfig.getCost(),lConfig));
  outMessage=outMessage.replaceAll(""String_Node_Str"",Etc.formatCost(winningAmount(),lConfig));
  outMessage=outMessage.replaceAll(""String_Node_Str"",lConfig.getMessage(""String_Node_Str"").get(0));
  for (int i=0; i < args.length; i++) {
    outMessage=outMessage.replaceAll(""String_Node_Str"" + i + ""String_Node_Str"",Matcher.quoteReplacement(args[i].toString()));
  }
  outMessage=outMessage.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return outMessage;
}","public String formatCustomMessageLive(final String message,final Object... args) throws Exception {
  String outMessage=message.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(timeUntil(true)));
  outMessage=outMessage.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(timeUntil(false)));
  outMessage=outMessage.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Etc.formatCost(lConfig.getCost(),lConfig)));
  outMessage=outMessage.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Etc.formatCost(winningAmount(),lConfig)));
  outMessage=outMessage.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(lConfig.getMessage(""String_Node_Str"").get(0)));
  for (int i=0; i < args.length; i++) {
    outMessage=outMessage.replaceAll(""String_Node_Str"" + i + ""String_Node_Str"",Matcher.quoteReplacement(args[i].toString()));
  }
  outMessage=outMessage.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return outMessage;
}",0.9252013808975834
6634,"public void sendMessage(final CommandSender player,final String topic,final Object... args){
  try {
    for (    String message : lConfig.getMessage(topic)) {
      String outMessage=formatCustomMessageLive(message,args);
      if (player instanceof Player) {
        outMessage=outMessage.replaceAll(""String_Node_Str"",((Player)player).getDisplayName());
      }
      player.sendMessage(outMessage);
    }
  }
 catch (  Exception e) {
    plugin.getLogger().log(Level.WARNING,""String_Node_Str"" + topic,e);
  }
}","public void sendMessage(final CommandSender player,final String topic,final Object... args){
  try {
    for (    String message : lConfig.getMessage(topic)) {
      String outMessage=formatCustomMessageLive(message,args);
      if (player instanceof Player) {
        outMessage=outMessage.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(((Player)player).getDisplayName()));
      }
      player.sendMessage(outMessage);
    }
  }
 catch (  Exception e) {
    plugin.getLogger().log(Level.WARNING,""String_Node_Str"" + topic,e);
  }
}",0.9752851711026616
6635,"public void commandNull(final CommandSender sender,final String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    lGame.sendMessage(sender,""String_Node_Str"",lGame.timeUntil(false));
    return;
  }
  final Player player=(Player)sender;
  final double amount=lGame.winningAmount();
  lConfig.debugMsg(""String_Node_Str"" + amount);
  lGame.sendMessage(sender,""String_Node_Str"",lGame.timeUntil(false));
  lGame.sendMessage(sender,""String_Node_Str"");
  lGame.sendMessage(sender,""String_Node_Str"");
  if (lConfig.getMaxTicketsEachUser() > 1) {
    lGame.sendMessage(player,""String_Node_Str"",lGame.timeUntil(false),lGame.playerInList(player),Etc.pluralWording(""String_Node_Str"",lGame.playerInList(player)));
  }
  if (lConfig.getTicketsAvailable() > 0) {
    lGame.sendMessage(sender,""String_Node_Str"",(lConfig.getTicketsAvailable() - lGame.ticketsSold()),Etc.pluralWording(""String_Node_Str"",lConfig.getTicketsAvailable() - lGame.ticketsSold()));
  }
  lGame.sendMessage(sender,""String_Node_Str"");
  if (lConfig.getLastwinner() != null) {
    lGame.sendMessage(sender,""String_Node_Str"",lConfig.getLastwinner(),Etc.formatCost(lConfig.getLastwinneramount(),lConfig));
  }
  if (!lConfig.useiConomy()) {
    lGame.sendMessage(sender,""String_Node_Str"");
  }
}","public void commandNull(final CommandSender sender,final String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    lGame.sendMessage(sender,""String_Node_Str"",lGame.timeUntil(false));
    return;
  }
  final Player player=(Player)sender;
  final double amount=lGame.winningAmount();
  lConfig.debugMsg(""String_Node_Str"" + amount);
  lGame.sendMessage(sender,""String_Node_Str"",lGame.timeUntil(false));
  lGame.sendMessage(sender,""String_Node_Str"");
  lGame.sendMessage(sender,""String_Node_Str"");
  if (lConfig.getMaxTicketsEachUser() > 1) {
    lGame.sendMessage(player,""String_Node_Str"",lGame.playerInList(player),Etc.pluralWording(""String_Node_Str"",lGame.playerInList(player)));
  }
  if (lConfig.getTicketsAvailable() > 0) {
    lGame.sendMessage(sender,""String_Node_Str"",(lConfig.getTicketsAvailable() - lGame.ticketsSold()),Etc.pluralWording(""String_Node_Str"",lConfig.getTicketsAvailable() - lGame.ticketsSold()));
  }
  lGame.sendMessage(sender,""String_Node_Str"");
  if (lConfig.getLastwinner() != null) {
    lGame.sendMessage(sender,""String_Node_Str"",lConfig.getLastwinner(),Etc.formatCost(lConfig.getLastwinneramount(),lConfig));
  }
  if (!lConfig.useiConomy()) {
    lGame.sendMessage(sender,""String_Node_Str"");
  }
}",0.9910121141070732
6636,"@Override public void onEnable(){
  server=getServer();
  if (useiConomy == true) {
    getServer().getPluginManager().registerEvent(Event.Type.PLUGIN_ENABLE,new PluginListener(this),Priority.Monitor,this);
    getServer().getPluginManager().registerEvent(Event.Type.PLUGIN_DISABLE,new PluginListener(this),Priority.Monitor,this);
  }
  if (welcomeMessage == true) {
    PlayerListener=new PlayerJoinListener(this);
    getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Priority.Monitor,this);
  }
  getCommand(""String_Node_Str"").setExecutor(new CommandExecutor(){
    @Override public boolean onCommand(    CommandSender sender,    Command command,    String label,    String[] args){
      if (!sender.hasPermission(""String_Node_Str"")) {
        return false;
      }
      if (args.length == 0) {
        if (!(sender instanceof Player)) {
          sender.sendMessage(""String_Node_Str"");
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ timeUntil(Lottery.nextexec,false));
          return true;
        }
        Player player=(Player)sender;
        int amount=winningAmount();
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ timeUntil(Lottery.nextexec,false));
        if (useiConomy == false) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ Lottery.cost+ ""String_Node_Str""+ formatMaterialName(material)+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ amount+ ""String_Node_Str""+ formatMaterialName(material)+ ChatColor.WHITE+ ""String_Node_Str"");
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ Method.format(Lottery.cost)+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ Method.format(amount)+ ChatColor.WHITE+ ""String_Node_Str"");
        }
        if (maxTicketsEachUser > 1) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ playerInList((Player)sender)+ ""String_Node_Str""+ ChatColor.WHITE+ pluralWording(""String_Node_Str"",playerInList((Player)sender)));
        }
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
        if (useiConomy == true) {
          if (c.getProperty(""String_Node_Str"") != null) {
            player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ c.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ Method.format(Integer.parseInt(c.getProperty(""String_Node_Str"").toString()))+ ""String_Node_Str"");
          }
        }
 else {
          if (c.getProperty(""String_Node_Str"") != null) {
            player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ c.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ c.getProperty(""String_Node_Str"").toString()+ ""String_Node_Str""+ formatMaterialName(material)+ ""String_Node_Str"");
          }
        }
        if (useiConomy == false) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
        }
      }
 else {
        if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (!(sender instanceof Player)) {
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
            return true;
          }
          Player player=(Player)sender;
          int buyTickets=1;
          if (args.length > 1) {
            try {
              @SuppressWarnings(""String_Node_Str"") int x=Integer.parseInt(args[1]);
            }
 catch (            NumberFormatException nFE) {
              player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              args[1]=""String_Node_Str"";
            }
          }
          if (args.length < 2) {
            buyTickets=1;
          }
 else           if (Integer.parseInt(args[1].toString()) + playerInList(player) <= maxTicketsEachUser) {
            buyTickets=Integer.parseInt(args[1].toString());
          }
 else           if (Integer.parseInt(args[1].toString()) + playerInList(player) > maxTicketsEachUser) {
            buyTickets=maxTicketsEachUser - playerInList(player);
          }
 else {
            buyTickets=1;
          }
          if (buyTickets < 1) {
            buyTickets=1;
          }
          if (addPlayer(player,maxTicketsEachUser,buyTickets) == true) {
            if (useiConomy == false) {
              player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ buyTickets+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",buyTickets)+ ""String_Node_Str""+ ChatColor.RED+ Lottery.cost * buyTickets + ""String_Node_Str"" + formatMaterialName(material));
            }
 else {
              player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ buyTickets+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",buyTickets)+ ""String_Node_Str""+ ChatColor.RED+ Method.format(Lottery.cost * buyTickets));
            }
            if (maxTicketsEachUser > 1) {
              player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ playerInList(player)+ ""String_Node_Str""+ ChatColor.WHITE+ pluralWording(""String_Node_Str"",playerInList(player)));
            }
            if (broadcastBuying == true) {
              Bukkit.broadcastMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ player.getDisplayName()+ ""String_Node_Str""+ buyTickets+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",buyTickets));
            }
          }
 else {
            player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ maxTicketsEachUser+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",maxTicketsEachUser)+ ""String_Node_Str"");
          }
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (!(sender instanceof Player)) {
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
            return true;
          }
          Player player=(Player)sender;
          removeFromClaimList((Player)sender);
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (sender.hasPermission(""String_Node_Str"")) {
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
            StartTimerSchedule(true);
          }
 else {
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          }
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          if (sender.hasPermission(""String_Node_Str""))           sender.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          if (sender.hasPermission(""String_Node_Str""))           sender.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          if (sender.hasPermission(""String_Node_Str""))           sender.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          ArrayList<String> winnerArray=new ArrayList<String>();
          try {
            BufferedReader in=new BufferedReader(new FileReader(getDataFolder() + File.separator + ""String_Node_Str""));
            String str;
            while ((str=in.readLine()) != null) {
              winnerArray.add(str);
            }
            in.close();
          }
 catch (          IOException e) {
          }
          String[] split;
          String winListPrice;
          for (int i=0; i < winnerArray.size(); i++) {
            split=winnerArray.get(i).split(""String_Node_Str"");
            if (split[2].equalsIgnoreCase(""String_Node_Str"")) {
              winListPrice=Method.format(Double.parseDouble(split[1]));
            }
 else {
              winListPrice=split[1] + ""String_Node_Str"" + formatMaterialName(Integer.parseInt(split[2])).toString();
            }
            sender.sendMessage((i + 1) + ""String_Node_Str"" + split[0]+ ""String_Node_Str""+ winListPrice);
          }
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (sender.hasPermission(""String_Node_Str"")) {
            if (args[1] == null) {
              sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              return true;
            }
            int addToPot=0;
            try {
              addToPot=Integer.parseInt(args[1]);
            }
 catch (            NumberFormatException nFE) {
              sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              return true;
            }
            extraInPot+=addToPot;
            c.setProperty(""String_Node_Str"",extraInPot);
            getConfiguration().save();
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ addToPot+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ extraInPot);
          }
 else {
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          }
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (sender.hasPermission(""String_Node_Str"")) {
            if (args.length == 1) {
              sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
              sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
              sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
              sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
 else             if (args.length >= 2) {
              if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
                if (args.length == 2) {
                  sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                  return true;
                }
 else {
                  int newCoin=0;
                  try {
                    newCoin=Integer.parseInt(args[2].toString());
                  }
 catch (                  NumberFormatException e) {
                  }
                  if (newCoin <= 0) {
                    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                    return true;
                  }
 else {
                    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ newCoin);
                    c.setProperty(""String_Node_Str"",newCoin);
                    getConfiguration().save();
                    loadConfig();
                  }
                }
              }
 else               if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
                if (args.length == 2) {
                  sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                  return true;
                }
 else {
                  int newHours=0;
                  try {
                    newHours=Integer.parseInt(args[2].toString());
                  }
 catch (                  NumberFormatException e) {
                  }
                  if (newHours <= 0) {
                    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                    return true;
                  }
 else {
                    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ newHours);
                    c.setProperty(""String_Node_Str"",newHours);
                    getConfiguration().save();
                    loadConfig();
                  }
                }
              }
 else               if (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str"")) {
                if (args.length == 2) {
                  sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                  return true;
                }
 else {
                  int newMaxTicketsEachUser=0;
                  try {
                    newMaxTicketsEachUser=Integer.parseInt(args[2].toString());
                  }
 catch (                  NumberFormatException e) {
                  }
                  if (newMaxTicketsEachUser <= 0) {
                    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                    return true;
                  }
 else {
                    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ newMaxTicketsEachUser);
                    c.setProperty(""String_Node_Str"",newMaxTicketsEachUser);
                    getConfiguration().save();
                    loadConfig();
                  }
                }
              }
 else               if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
                loadConfig();
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              }
            }
          }
        }
 else {
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
        }
      }
      return true;
    }
  }
);
  if (c.getProperty(""String_Node_Str"") == null) {
    nextexec=System.currentTimeMillis() + extendTime();
    c.setProperty(""String_Node_Str"",nextexec);
    if (!getConfiguration().save()) {
      getServer().getLogger().warning(""String_Node_Str"");
    }
  }
 else {
    nextexec=Long.parseLong(c.getProperty(""String_Node_Str"").toString());
  }
  StartTimerSchedule(false);
}","@Override public void onEnable(){
  server=getServer();
  if (useiConomy == true) {
    getServer().getPluginManager().registerEvent(Event.Type.PLUGIN_ENABLE,new PluginListener(this),Priority.Monitor,this);
    getServer().getPluginManager().registerEvent(Event.Type.PLUGIN_DISABLE,new PluginListener(this),Priority.Monitor,this);
  }
  if (welcomeMessage == true) {
    PlayerListener=new PlayerJoinListener(this);
    getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Priority.Monitor,this);
  }
  getCommand(""String_Node_Str"").setExecutor(new CommandExecutor(){
    @Override public boolean onCommand(    CommandSender sender,    Command command,    String label,    String[] args){
      if (!sender.hasPermission(""String_Node_Str"")) {
        return false;
      }
      if (!Methods.hasMethod() && useiConomy == true) {
        debugMsg(""String_Node_Str"");
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
        return false;
      }
      if (args.length == 0) {
        if (!(sender instanceof Player)) {
          sender.sendMessage(""String_Node_Str"");
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ timeUntil(Lottery.nextexec,false));
          return true;
        }
        Player player=(Player)sender;
        int amount=winningAmount();
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ timeUntil(Lottery.nextexec,false));
        if (useiConomy == false) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ Lottery.cost+ ""String_Node_Str""+ formatMaterialName(material)+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ amount+ ""String_Node_Str""+ formatMaterialName(material)+ ChatColor.WHITE+ ""String_Node_Str"");
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ Method.format(Lottery.cost)+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ Method.format(amount)+ ChatColor.WHITE+ ""String_Node_Str"");
        }
        if (maxTicketsEachUser > 1) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ playerInList((Player)sender)+ ""String_Node_Str""+ ChatColor.WHITE+ pluralWording(""String_Node_Str"",playerInList((Player)sender)));
        }
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
        if (useiConomy == true) {
          if (c.getProperty(""String_Node_Str"") != null) {
            player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ c.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ Method.format(Integer.parseInt(c.getProperty(""String_Node_Str"").toString()))+ ""String_Node_Str"");
          }
        }
 else {
          if (c.getProperty(""String_Node_Str"") != null) {
            player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ c.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ c.getProperty(""String_Node_Str"").toString()+ ""String_Node_Str""+ formatMaterialName(material)+ ""String_Node_Str"");
          }
        }
        if (useiConomy == false) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
        }
      }
 else {
        if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (!(sender instanceof Player)) {
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
            return true;
          }
          Player player=(Player)sender;
          int buyTickets=1;
          if (args.length > 1) {
            try {
              @SuppressWarnings(""String_Node_Str"") int x=Integer.parseInt(args[1]);
            }
 catch (            NumberFormatException nFE) {
              player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              args[1]=""String_Node_Str"";
            }
          }
          if (args.length < 2) {
            buyTickets=1;
          }
 else           if (Integer.parseInt(args[1].toString()) + playerInList(player) <= maxTicketsEachUser) {
            buyTickets=Integer.parseInt(args[1].toString());
          }
 else           if (Integer.parseInt(args[1].toString()) + playerInList(player) > maxTicketsEachUser) {
            buyTickets=maxTicketsEachUser - playerInList(player);
          }
 else {
            buyTickets=1;
          }
          if (buyTickets < 1) {
            buyTickets=1;
          }
          if (addPlayer(player,maxTicketsEachUser,buyTickets) == true) {
            if (useiConomy == false) {
              player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ buyTickets+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",buyTickets)+ ""String_Node_Str""+ ChatColor.RED+ Lottery.cost * buyTickets + ""String_Node_Str"" + formatMaterialName(material));
            }
 else {
              player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ buyTickets+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",buyTickets)+ ""String_Node_Str""+ ChatColor.RED+ Method.format(Lottery.cost * buyTickets));
            }
            if (maxTicketsEachUser > 1) {
              player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ playerInList(player)+ ""String_Node_Str""+ ChatColor.WHITE+ pluralWording(""String_Node_Str"",playerInList(player)));
            }
            if (broadcastBuying == true) {
              Bukkit.broadcastMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ player.getDisplayName()+ ""String_Node_Str""+ buyTickets+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",buyTickets));
            }
          }
 else {
            player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ maxTicketsEachUser+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",maxTicketsEachUser)+ ""String_Node_Str"");
          }
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (!(sender instanceof Player)) {
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
            return true;
          }
          Player player=(Player)sender;
          removeFromClaimList((Player)sender);
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (sender.hasPermission(""String_Node_Str"")) {
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
            StartTimerSchedule(true);
          }
 else {
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          }
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          if (sender.hasPermission(""String_Node_Str""))           sender.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          if (sender.hasPermission(""String_Node_Str""))           sender.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          if (sender.hasPermission(""String_Node_Str""))           sender.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          ArrayList<String> winnerArray=new ArrayList<String>();
          try {
            BufferedReader in=new BufferedReader(new FileReader(getDataFolder() + File.separator + ""String_Node_Str""));
            String str;
            while ((str=in.readLine()) != null) {
              winnerArray.add(str);
            }
            in.close();
          }
 catch (          IOException e) {
          }
          String[] split;
          String winListPrice;
          for (int i=0; i < winnerArray.size(); i++) {
            split=winnerArray.get(i).split(""String_Node_Str"");
            if (split[2].equalsIgnoreCase(""String_Node_Str"")) {
              winListPrice=Method.format(Double.parseDouble(split[1]));
            }
 else {
              winListPrice=split[1] + ""String_Node_Str"" + formatMaterialName(Integer.parseInt(split[2])).toString();
            }
            sender.sendMessage((i + 1) + ""String_Node_Str"" + split[0]+ ""String_Node_Str""+ winListPrice);
          }
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (sender.hasPermission(""String_Node_Str"")) {
            if (args[1] == null) {
              sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              return true;
            }
            int addToPot=0;
            try {
              addToPot=Integer.parseInt(args[1]);
            }
 catch (            NumberFormatException nFE) {
              sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              return true;
            }
            extraInPot+=addToPot;
            c.setProperty(""String_Node_Str"",extraInPot);
            getConfiguration().save();
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ addToPot+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ extraInPot);
          }
 else {
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          }
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (sender.hasPermission(""String_Node_Str"")) {
            if (args.length == 1) {
              sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
              sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
              sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
              sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
 else             if (args.length >= 2) {
              if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
                if (args.length == 2) {
                  sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                  return true;
                }
 else {
                  int newCoin=0;
                  try {
                    newCoin=Integer.parseInt(args[2].toString());
                  }
 catch (                  NumberFormatException e) {
                  }
                  if (newCoin <= 0) {
                    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                    return true;
                  }
 else {
                    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ newCoin);
                    c.setProperty(""String_Node_Str"",newCoin);
                    getConfiguration().save();
                    loadConfig();
                  }
                }
              }
 else               if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
                if (args.length == 2) {
                  sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                  return true;
                }
 else {
                  int newHours=0;
                  try {
                    newHours=Integer.parseInt(args[2].toString());
                  }
 catch (                  NumberFormatException e) {
                  }
                  if (newHours <= 0) {
                    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                    return true;
                  }
 else {
                    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ newHours);
                    c.setProperty(""String_Node_Str"",newHours);
                    getConfiguration().save();
                    loadConfig();
                  }
                }
              }
 else               if (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str"")) {
                if (args.length == 2) {
                  sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                  return true;
                }
 else {
                  int newMaxTicketsEachUser=0;
                  try {
                    newMaxTicketsEachUser=Integer.parseInt(args[2].toString());
                  }
 catch (                  NumberFormatException e) {
                  }
                  if (newMaxTicketsEachUser <= 0) {
                    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                    return true;
                  }
 else {
                    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ newMaxTicketsEachUser);
                    c.setProperty(""String_Node_Str"",newMaxTicketsEachUser);
                    getConfiguration().save();
                    loadConfig();
                  }
                }
              }
 else               if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
                loadConfig();
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              }
            }
          }
        }
 else {
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
        }
      }
      return true;
    }
  }
);
  if (c.getProperty(""String_Node_Str"") == null) {
    nextexec=System.currentTimeMillis() + extendTime();
    c.setProperty(""String_Node_Str"",nextexec);
    if (!getConfiguration().save()) {
      getServer().getLogger().warning(""String_Node_Str"");
    }
  }
 else {
    nextexec=Long.parseLong(c.getProperty(""String_Node_Str"").toString());
  }
  StartTimerSchedule(false);
}",0.8722656767864245
6637,"public boolean addPlayer(Player player,Integer maxAmountOfTickets,Integer numberOfTickets){
  if (playerInList(player) + numberOfTickets > maxAmountOfTickets) {
    return false;
  }
  if (Lottery.useiConomy == false) {
    if (player.getInventory().contains(Lottery.material,Lottery.cost * numberOfTickets)) {
      player.getInventory().removeItem(new ItemStack(Lottery.material,Lottery.cost * numberOfTickets));
    }
 else {
      return false;
    }
  }
 else {
    Method.hasAccount(player.getName());
    MethodAccount account=Method.getAccount(player.getName());
    if (account.hasOver(Lottery.cost * numberOfTickets - 1)) {
      account.subtract(Lottery.cost * numberOfTickets);
    }
 else {
      return false;
    }
  }
  try {
    BufferedWriter out=new BufferedWriter(new FileWriter(getDataFolder() + File.separator + ""String_Node_Str"",true));
    for (Integer i=0; i < numberOfTickets; i++) {
      out.write(player.getName());
      out.newLine();
    }
    out.close();
  }
 catch (  IOException e) {
  }
  return true;
}","public boolean addPlayer(Player player,Integer maxAmountOfTickets,Integer numberOfTickets){
  if (playerInList(player) + numberOfTickets > maxAmountOfTickets) {
    return false;
  }
  if (Lottery.useiConomy == false) {
    if (player.getInventory().contains(Lottery.material,Lottery.cost * numberOfTickets)) {
      player.getInventory().removeItem(new ItemStack(Lottery.material,Lottery.cost * numberOfTickets));
    }
 else {
      return false;
    }
  }
 else {
    Method.hasAccount(player.getName());
    Method.MethodAccount account=Method.getAccount(player.getName());
    if (account.hasOver(Lottery.cost * numberOfTickets - 1)) {
      account.subtract(Lottery.cost * numberOfTickets);
    }
 else {
      return false;
    }
  }
  try {
    BufferedWriter out=new BufferedWriter(new FileWriter(getDataFolder() + File.separator + ""String_Node_Str"",true));
    for (Integer i=0; i < numberOfTickets; i++) {
      out.write(player.getName());
      out.newLine();
    }
    out.close();
  }
 catch (  IOException e) {
  }
  return true;
}",0.9966459032103496
6638,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (!sender.hasPermission(""String_Node_Str"")) {
    return false;
  }
  if (args.length == 0) {
    if (!(sender instanceof Player)) {
      sender.sendMessage(""String_Node_Str"");
      sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ timeUntil(Lottery.nextexec,false));
      return true;
    }
    Player player=(Player)sender;
    int amount=winningAmount();
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ timeUntil(Lottery.nextexec,false));
    if (useiConomy == false) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ Lottery.cost+ ""String_Node_Str""+ formatMaterialName(material)+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ amount+ ""String_Node_Str""+ formatMaterialName(material)+ ChatColor.WHITE+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ Method.format(Lottery.cost)+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ Method.format(amount)+ ChatColor.WHITE+ ""String_Node_Str"");
    }
    if (maxTicketsEachUser > 1) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ playerInList((Player)sender)+ ""String_Node_Str""+ ChatColor.WHITE+ pluralWording(""String_Node_Str"",playerInList((Player)sender)));
    }
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
    if (useiConomy == true) {
      if (c.getProperty(""String_Node_Str"") != null) {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ c.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ Method.format(Integer.parseInt(c.getProperty(""String_Node_Str"").toString()))+ ""String_Node_Str"");
      }
    }
 else {
      if (c.getProperty(""String_Node_Str"") != null) {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ c.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ c.getProperty(""String_Node_Str"").toString()+ ""String_Node_Str""+ formatMaterialName(material)+ ""String_Node_Str"");
      }
    }
    if (useiConomy == false) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
    }
  }
 else {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
        return true;
      }
      Player player=(Player)sender;
      int buyTickets=1;
      if (args.length > 1) {
        try {
          @SuppressWarnings(""String_Node_Str"") int x=Integer.parseInt(args[1]);
        }
 catch (        NumberFormatException nFE) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          args[1]=""String_Node_Str"";
        }
      }
      if (args.length < 2) {
        buyTickets=1;
      }
 else       if (Integer.parseInt(args[1].toString()) + playerInList(player) <= maxTicketsEachUser) {
        buyTickets=Integer.parseInt(args[1].toString());
      }
 else       if (Integer.parseInt(args[1].toString()) + playerInList(player) > maxTicketsEachUser) {
        buyTickets=maxTicketsEachUser - playerInList(player);
      }
 else {
        buyTickets=1;
      }
      if (buyTickets < 1) {
        buyTickets=1;
      }
      if (addPlayer(player,maxTicketsEachUser,buyTickets) == true) {
        if (useiConomy == false) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ buyTickets+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",buyTickets)+ ""String_Node_Str""+ ChatColor.RED+ Lottery.cost * buyTickets + ""String_Node_Str"" + formatMaterialName(material));
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ buyTickets+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",buyTickets)+ ""String_Node_Str""+ ChatColor.RED+ Method.format(Lottery.cost * buyTickets));
        }
        if (maxTicketsEachUser > 1) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ playerInList(player)+ ""String_Node_Str""+ ChatColor.WHITE+ pluralWording(""String_Node_Str"",playerInList(player)));
        }
        if (broadcastBuying == true) {
          Bukkit.broadcastMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ player.getDisplayName()+ ""String_Node_Str""+ buyTickets+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",buyTickets));
        }
      }
 else {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ maxTicketsEachUser+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",maxTicketsEachUser)+ ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
        return true;
      }
      Player player=(Player)sender;
      removeFromClaimList((Player)sender);
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (sender.hasPermission(""String_Node_Str"")) {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
        StartTimerSchedule(true);
      }
 else {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      if (sender.hasPermission(""String_Node_Str""))       sender.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      if (sender.hasPermission(""String_Node_Str""))       sender.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      if (sender.hasPermission(""String_Node_Str""))       sender.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      ArrayList<String> winnerArray=new ArrayList<String>();
      try {
        BufferedReader in=new BufferedReader(new FileReader(getDataFolder() + File.separator + ""String_Node_Str""));
        String str;
        while ((str=in.readLine()) != null) {
          winnerArray.add(str);
        }
        in.close();
      }
 catch (      IOException e) {
      }
      String[] split;
      String winListPrice;
      for (int i=0; i < winnerArray.size(); i++) {
        split=winnerArray.get(i).split(""String_Node_Str"");
        if (split[2].equalsIgnoreCase(""String_Node_Str"")) {
          winListPrice=Method.format(Double.parseDouble(split[1]));
        }
 else {
          winListPrice=split[1] + ""String_Node_Str"" + formatMaterialName(Integer.parseInt(split[2])).toString();
        }
        sender.sendMessage((i + 1) + ""String_Node_Str"" + split[0]+ ""String_Node_Str""+ winListPrice);
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (sender.hasPermission(""String_Node_Str"")) {
        if (args[1] == null) {
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          return true;
        }
        int addToPot=0;
        try {
          addToPot=Integer.parseInt(args[1]);
        }
 catch (        NumberFormatException nFE) {
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          return true;
        }
        extraInPot+=addToPot;
        c.setProperty(""String_Node_Str"",extraInPot);
        getConfiguration().save();
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ addToPot+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ extraInPot);
      }
 else {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (sender.hasPermission(""String_Node_Str"")) {
        if (args.length == 1) {
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
 else         if (args.length >= 2) {
          if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length == 2) {
              sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              return true;
            }
 else {
              int newCoin=0;
              try {
                newCoin=Integer.parseInt(args[2].toString());
              }
 catch (              NumberFormatException e) {
              }
              if (newCoin <= 0) {
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                return true;
              }
 else {
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ newCoin);
                c.setProperty(""String_Node_Str"",newCoin);
                getConfiguration().save();
                loadConfig();
              }
            }
          }
 else           if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length == 2) {
              sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              return true;
            }
 else {
              int newHours=0;
              try {
                newHours=Integer.parseInt(args[2].toString());
              }
 catch (              NumberFormatException e) {
              }
              if (newHours <= 0) {
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                return true;
              }
 else {
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ newHours);
                c.setProperty(""String_Node_Str"",newHours);
                getConfiguration().save();
                loadConfig();
              }
            }
          }
 else           if (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length == 2) {
              sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              return true;
            }
 else {
              int newMaxTicketsEachUser=0;
              try {
                newMaxTicketsEachUser=Integer.parseInt(args[2].toString());
              }
 catch (              NumberFormatException e) {
              }
              if (newMaxTicketsEachUser <= 0) {
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                return true;
              }
 else {
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ newMaxTicketsEachUser);
                c.setProperty(""String_Node_Str"",newMaxTicketsEachUser);
                getConfiguration().save();
                loadConfig();
              }
            }
          }
 else           if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
            loadConfig();
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          }
        }
      }
    }
 else {
      sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
    }
  }
  return true;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (!sender.hasPermission(""String_Node_Str"")) {
    return false;
  }
  if (!Methods.hasMethod() && useiConomy == true) {
    debugMsg(""String_Node_Str"");
    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
    return false;
  }
  if (args.length == 0) {
    if (!(sender instanceof Player)) {
      sender.sendMessage(""String_Node_Str"");
      sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ timeUntil(Lottery.nextexec,false));
      return true;
    }
    Player player=(Player)sender;
    int amount=winningAmount();
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ timeUntil(Lottery.nextexec,false));
    if (useiConomy == false) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ Lottery.cost+ ""String_Node_Str""+ formatMaterialName(material)+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ amount+ ""String_Node_Str""+ formatMaterialName(material)+ ChatColor.WHITE+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ Method.format(Lottery.cost)+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ Method.format(amount)+ ChatColor.WHITE+ ""String_Node_Str"");
    }
    if (maxTicketsEachUser > 1) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ playerInList((Player)sender)+ ""String_Node_Str""+ ChatColor.WHITE+ pluralWording(""String_Node_Str"",playerInList((Player)sender)));
    }
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
    if (useiConomy == true) {
      if (c.getProperty(""String_Node_Str"") != null) {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ c.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ Method.format(Integer.parseInt(c.getProperty(""String_Node_Str"").toString()))+ ""String_Node_Str"");
      }
    }
 else {
      if (c.getProperty(""String_Node_Str"") != null) {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ c.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ c.getProperty(""String_Node_Str"").toString()+ ""String_Node_Str""+ formatMaterialName(material)+ ""String_Node_Str"");
      }
    }
    if (useiConomy == false) {
      player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
    }
  }
 else {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
        return true;
      }
      Player player=(Player)sender;
      int buyTickets=1;
      if (args.length > 1) {
        try {
          @SuppressWarnings(""String_Node_Str"") int x=Integer.parseInt(args[1]);
        }
 catch (        NumberFormatException nFE) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          args[1]=""String_Node_Str"";
        }
      }
      if (args.length < 2) {
        buyTickets=1;
      }
 else       if (Integer.parseInt(args[1].toString()) + playerInList(player) <= maxTicketsEachUser) {
        buyTickets=Integer.parseInt(args[1].toString());
      }
 else       if (Integer.parseInt(args[1].toString()) + playerInList(player) > maxTicketsEachUser) {
        buyTickets=maxTicketsEachUser - playerInList(player);
      }
 else {
        buyTickets=1;
      }
      if (buyTickets < 1) {
        buyTickets=1;
      }
      if (addPlayer(player,maxTicketsEachUser,buyTickets) == true) {
        if (useiConomy == false) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ buyTickets+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",buyTickets)+ ""String_Node_Str""+ ChatColor.RED+ Lottery.cost * buyTickets + ""String_Node_Str"" + formatMaterialName(material));
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ buyTickets+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",buyTickets)+ ""String_Node_Str""+ ChatColor.RED+ Method.format(Lottery.cost * buyTickets));
        }
        if (maxTicketsEachUser > 1) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ playerInList(player)+ ""String_Node_Str""+ ChatColor.WHITE+ pluralWording(""String_Node_Str"",playerInList(player)));
        }
        if (broadcastBuying == true) {
          Bukkit.broadcastMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ player.getDisplayName()+ ""String_Node_Str""+ buyTickets+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",buyTickets));
        }
      }
 else {
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ maxTicketsEachUser+ ""String_Node_Str""+ pluralWording(""String_Node_Str"",maxTicketsEachUser)+ ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
        return true;
      }
      Player player=(Player)sender;
      removeFromClaimList((Player)sender);
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (sender.hasPermission(""String_Node_Str"")) {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
        StartTimerSchedule(true);
      }
 else {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      if (sender.hasPermission(""String_Node_Str""))       sender.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      if (sender.hasPermission(""String_Node_Str""))       sender.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      if (sender.hasPermission(""String_Node_Str""))       sender.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      ArrayList<String> winnerArray=new ArrayList<String>();
      try {
        BufferedReader in=new BufferedReader(new FileReader(getDataFolder() + File.separator + ""String_Node_Str""));
        String str;
        while ((str=in.readLine()) != null) {
          winnerArray.add(str);
        }
        in.close();
      }
 catch (      IOException e) {
      }
      String[] split;
      String winListPrice;
      for (int i=0; i < winnerArray.size(); i++) {
        split=winnerArray.get(i).split(""String_Node_Str"");
        if (split[2].equalsIgnoreCase(""String_Node_Str"")) {
          winListPrice=Method.format(Double.parseDouble(split[1]));
        }
 else {
          winListPrice=split[1] + ""String_Node_Str"" + formatMaterialName(Integer.parseInt(split[2])).toString();
        }
        sender.sendMessage((i + 1) + ""String_Node_Str"" + split[0]+ ""String_Node_Str""+ winListPrice);
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (sender.hasPermission(""String_Node_Str"")) {
        if (args[1] == null) {
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          return true;
        }
        int addToPot=0;
        try {
          addToPot=Integer.parseInt(args[1]);
        }
 catch (        NumberFormatException nFE) {
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          return true;
        }
        extraInPot+=addToPot;
        c.setProperty(""String_Node_Str"",extraInPot);
        getConfiguration().save();
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ addToPot+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ extraInPot);
      }
 else {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (sender.hasPermission(""String_Node_Str"")) {
        if (args.length == 1) {
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
 else         if (args.length >= 2) {
          if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length == 2) {
              sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              return true;
            }
 else {
              int newCoin=0;
              try {
                newCoin=Integer.parseInt(args[2].toString());
              }
 catch (              NumberFormatException e) {
              }
              if (newCoin <= 0) {
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                return true;
              }
 else {
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ newCoin);
                c.setProperty(""String_Node_Str"",newCoin);
                getConfiguration().save();
                loadConfig();
              }
            }
          }
 else           if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length == 2) {
              sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              return true;
            }
 else {
              int newHours=0;
              try {
                newHours=Integer.parseInt(args[2].toString());
              }
 catch (              NumberFormatException e) {
              }
              if (newHours <= 0) {
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                return true;
              }
 else {
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ newHours);
                c.setProperty(""String_Node_Str"",newHours);
                getConfiguration().save();
                loadConfig();
              }
            }
          }
 else           if (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str"")) {
            if (args.length == 2) {
              sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
              return true;
            }
 else {
              int newMaxTicketsEachUser=0;
              try {
                newMaxTicketsEachUser=Integer.parseInt(args[2].toString());
              }
 catch (              NumberFormatException e) {
              }
              if (newMaxTicketsEachUser <= 0) {
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
                return true;
              }
 else {
                sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ newMaxTicketsEachUser);
                c.setProperty(""String_Node_Str"",newMaxTicketsEachUser);
                getConfiguration().save();
                loadConfig();
              }
            }
          }
 else           if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
            loadConfig();
            sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          }
        }
      }
    }
 else {
      sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
    }
  }
  return true;
}",0.8627720504009164
6639,"public int searchRoot(Board board,int depth,int alpha,int beta){
  int eval=0;
  int bestEval=-Value.INFINITY;
  int evalType=HASH_ALPHA;
  int bestMove=Move.MOVE_NONE;
  MoveSelector selector=selectors[0];
  selector.initialize(board,Move.MOVE_NONE,board.isCheck(),false);
  int move;
  while ((move=selector.getNextMove()) != Move.MOVE_NONE) {
    if (shouldWeStop)     break;
    board.make(move);
    if (evalType == HASH_EXACT) {
      eval=-alphaBeta(board,depth - 1,1,-alpha - 1,-alpha,true);
      if (eval > alpha && eval < beta) {
        eval=-alphaBeta(board,depth - 1,1,-beta,-alpha,true);
      }
    }
 else {
      eval=-alphaBeta(board,depth - 1,1,-beta,-alpha,true);
    }
    board.retract(move);
    if (eval > bestEval) {
      if (eval >= beta) {
        if (!shouldWeStop) {
          transTable.put(board.key,HASH_BETA,depth,eval,move);
        }
        return beta;
      }
      bestEval=eval;
      bestMove=move;
      if (eval > alpha) {
        evalType=HASH_EXACT;
        alpha=eval;
      }
    }
  }
  if (bestMove == Move.MOVE_NONE) {
  }
 else {
    transTable.put(board.key,evalType,depth,eval,bestMove);
  }
  return alpha;
}","public int searchRoot(Board board,int depth,int alpha,int beta,int pvMove){
  int eval=0;
  int bestEval=-Value.INFINITY;
  int evalType=HASH_ALPHA;
  int bestMove=Move.MOVE_NONE;
  MoveSelector selector=selectors[0];
  selector.initialize(board,pvMove,board.isCheck(),false);
  int move;
  while ((move=selector.getNextMove()) != Move.MOVE_NONE) {
    if (shouldWeStop)     break;
    board.make(move);
    if (evalType == HASH_EXACT) {
      eval=-alphaBeta(board,depth - 1,1,-alpha - 1,-alpha,true);
      if (eval > alpha && eval < beta) {
        eval=-alphaBeta(board,depth - 1,1,-beta,-alpha,true);
      }
    }
 else {
      eval=-alphaBeta(board,depth - 1,1,-beta,-alpha,true);
    }
    board.retract(move);
    if (eval > bestEval) {
      if (eval >= beta) {
        if (!shouldWeStop) {
          transTable.put(board.key,HASH_BETA,depth,eval,move);
        }
        return beta;
      }
      bestEval=eval;
      bestMove=move;
      if (eval > alpha) {
        evalType=HASH_EXACT;
        alpha=eval;
      }
    }
  }
  if (bestMove == Move.MOVE_NONE) {
  }
 else {
    transTable.put(board.key,evalType,depth,eval,bestMove);
  }
  return alpha;
}",0.9867009867009868
6640,"public static int evaluate(Board board,boolean debug){
  int whiteMaterial=board.info.material[WHITE] + board.info.pawnMaterial[WHITE];
  int blackMaterial=board.info.material[BLACK] + board.info.pawnMaterial[BLACK];
  int material=whiteMaterial - blackMaterial;
  int whitePosOpenMid=board.info.openMidPositioning[WHITE];
  int blackPosOpenMid=board.info.openMidPositioning[BLACK];
  int posOpenMid=whitePosOpenMid - blackPosOpenMid;
  int whitePosEnd=board.info.endPositioning[WHITE];
  int blackPosEnd=board.info.endPositioning[BLACK];
  int posEnd=whitePosEnd - blackPosEnd;
  int evaluation=material + posOpenMid + posEnd;
  if (board.sideToMove == BLACK) {
    evaluation*=-1;
  }
  if (debug) {
    System.out.printf(""String_Node_Str"");
    System.out.printf(""String_Node_Str"");
    System.out.printf(""String_Node_Str"");
    System.out.printf(""String_Node_Str"",whiteMaterial,blackMaterial,material);
    System.out.printf(""String_Node_Str"",whitePosOpenMid,blackPosOpenMid,posOpenMid);
    System.out.printf(""String_Node_Str"",whitePosEnd,blackPosEnd,posEnd);
    System.out.printf(""String_Node_Str"",evaluation);
  }
  return evaluation;
}","public static int evaluate(Board board,boolean debug){
  int whiteMaterial=board.info.material[WHITE] + board.info.pawnMaterial[WHITE];
  int blackMaterial=board.info.material[BLACK] + board.info.pawnMaterial[BLACK];
  int material=whiteMaterial - blackMaterial;
  int whitePosOpenMid=board.info.openMidPositioning[WHITE];
  int blackPosOpenMid=board.info.openMidPositioning[BLACK];
  int posOpenMid=whitePosOpenMid - blackPosOpenMid;
  int whitePosEnd=board.info.endPositioning[WHITE];
  int blackPosEnd=board.info.endPositioning[BLACK];
  int posEnd=whitePosEnd - blackPosEnd;
  int evaluation=material + posOpenMid + posEnd;
  if (board.sideToMove == BLACK)   evaluation*=-1;
  if (debug) {
    System.out.printf(""String_Node_Str"");
    System.out.printf(""String_Node_Str"");
    System.out.printf(""String_Node_Str"");
    System.out.printf(""String_Node_Str"",whiteMaterial,blackMaterial,material);
    System.out.printf(""String_Node_Str"",whitePosOpenMid,blackPosOpenMid,posOpenMid);
    System.out.printf(""String_Node_Str"",whitePosEnd,blackPosEnd,posEnd);
    System.out.printf(""String_Node_Str"",evaluation);
  }
  return evaluation;
}",0.9964912280701754
6641,"private void handleConsoleMessage(String line){
  if (line.equals(""String_Node_Str"") || line.equals(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
 else   if (line.equals(""String_Node_Str"")) {
    Testing.getInstance().perftAll();
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    int depth=1;
    try {
      depth=Integer.parseInt(line.substring(""String_Node_Str"".length() + 1));
    }
 catch (    Exception e) {
    }
    long before=System.currentTimeMillis();
    long nodes=Testing.getInstance().perft(board,depth,0);
    long delta=System.currentTimeMillis() - before;
    System.out.printf(""String_Node_Str"",nodes,delta);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    Testing.getInstance().testSomething(board);
  }
 else   if (line.equals(""String_Node_Str"")) {
    board.print();
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    int depth;
    try {
      depth=Integer.parseInt(line.substring(""String_Node_Str"".length() + 1));
      Testing.getInstance().divide(board,depth);
    }
 catch (    Exception e) {
      Testing.getInstance().divide(board,1);
    }
  }
 else   if (line.equals(""String_Node_Str"")) {
    Evaluation.evaluate(board,true);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    board=new Board();
    board.initialize(line.substring(""String_Node_Str"".length() + 1));
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    Search search=new Search(new UCIHandler());
    int depth;
    try {
      depth=Integer.parseInt(line.substring(""String_Node_Str"".length() + 1));
      System.out.println(""String_Node_Str"" + Move.toLAN(search.think(board,depth,0)));
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + Move.toLAN(search.think(board,3,0)));
    }
  }
 else   if (line.equals(""String_Node_Str"") || line.equals(""String_Node_Str"")) {
    System.exit(0);
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}","private void handleConsoleMessage(String line){
  if (line.equals(""String_Node_Str"") || line.equals(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
 else   if (line.equals(""String_Node_Str"")) {
    Testing.getInstance().perftAll();
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    int depth=1;
    try {
      depth=Integer.parseInt(line.substring(""String_Node_Str"".length() + 1));
    }
 catch (    Exception e) {
    }
    long before=System.currentTimeMillis();
    long nodes=Testing.getInstance().perft(board,depth,0);
    long delta=System.currentTimeMillis() - before;
    System.out.printf(""String_Node_Str"",nodes,delta);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    Testing.getInstance().testSomething(board);
  }
 else   if (line.equals(""String_Node_Str"")) {
    board.print();
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    int depth;
    try {
      depth=Integer.parseInt(line.substring(""String_Node_Str"".length() + 1));
      Testing.getInstance().divide(board,depth);
    }
 catch (    Exception e) {
      Testing.getInstance().divide(board,1);
    }
  }
 else   if (line.equals(""String_Node_Str"")) {
    Evaluation.evaluate(board,true);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    board=new Board();
    board.initialize(line.substring(""String_Node_Str"".length() + 1));
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    Search search=new Search(new UCIHandler());
    int depth;
    try {
      depth=Integer.parseInt(line.substring(""String_Node_Str"".length() + 1));
      System.out.println(""String_Node_Str"" + Move.toLAN(search.think(board,depth)));
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + Move.toLAN(search.think(board,3)));
    }
  }
 else   if (line.equals(""String_Node_Str"") || line.equals(""String_Node_Str"")) {
    System.exit(0);
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}",0.9991826726604004
6642,"private void depthTesting(int depth){
  long sum=0, qsum=0;
  long before=System.currentTimeMillis();
  for (int i=0; i < positions.size(); i++) {
    String line=positions.get(i);
    System.out.printf(""String_Node_Str"",(i + 1),positions.size(),line);
    Board board=new Board();
    board.initialize(line);
    search.think(board,depth,0);
    sum+=search.nodesSearched;
    qsum+=search.qsearched;
    search.transTable.clear();
  }
  printInfo(search,sum,qsum,before,new String[]{});
}","private void depthTesting(int depth){
  long sum=0, qsum=0;
  long before=System.currentTimeMillis();
  for (int i=0; i < positions.size(); i++) {
    String line=positions.get(i);
    System.out.printf(""String_Node_Str"",(i + 1),positions.size(),line);
    Board board=new Board();
    board.initialize(line);
    search.think(board,depth);
    sum+=search.nodesSearched;
    qsum+=search.qsearched;
    search.transTable.clear();
  }
  printInfo(search,sum,qsum,before,new String[]{});
}",0.9979550102249488
6643,"public int think(Board board,int depth,int nodes){
}","public int think(Board board,int depth){
}",0.8936170212765957
6644,"public int alphaBeta(Board board,int depth,int ply,int alpha,int beta,boolean nmAllowed){
  if (!useFixedDepth && --pollForStopInterval == 0) {
    pollForStopInterval=TIME_CHECK_INTERVAL;
    if (System.currentTimeMillis() > (timeStarted + timeForThisMove)) {
      System.out.printf(""String_Node_Str"",System.currentTimeMillis(),timeForThisMove,timeStarted);
      shouldWeStop=true;
    }
  }
  nodesSearched++;
  boolean mcAllowed=false;
  TranspositionTable.HashEntry entry=transTable.get(board.key);
  if (entry != null) {
    transFound++;
    if (entry.depth >= depth) {
      if (entry.type == HASH_EXACT) {
        return entry.eval;
      }
 else       if (entry.type == HASH_ALPHA && entry.eval <= alpha) {
        return entry.eval;
      }
 else       if (entry.type == HASH_BETA && entry.eval >= beta) {
        return entry.eval;
      }
    }
 else {
      if (entry.type == HASH_BETA && entry.eval >= beta) {
        mcAllowed=true;
      }
    }
  }
 else {
    transNotFound++;
  }
  int eval;
  if (depth <= 0) {
    eval=qsearch(board,ply,alpha,beta);
    transTable.putLeaf(board.key,eval,alpha,beta);
    return eval;
  }
  if (board.isDraw())   return Value.DRAW;
  int move;
  boolean isCheck=board.isCheck();
  MoveSelector selector=selectors[ply];
  selector.initialize(board,(entry == null ? Move.MOVE_NONE : entry.move),isCheck,false);
  if ((move=selector.getNextMove()) == Move.MOVE_NONE) {
    return isCheck ? (-Value.MATE + ply) : Value.DRAW;
  }
  if (DO_NULL_MOVES && nmAllowed && depth >= 2 && !isCheck && board.info.material[board.sideToMove] > board.info.pawnMaterial[board.sideToMove]) {
    int epSquare=board.epSquare;
    board.makeNullMove();
    eval=-alphaBeta(board,depth - NM_REDUCTION,ply + 1,-beta,-beta + 1,false);
    board.retractNullMove(epSquare);
    if (eval >= beta) {
      if (!shouldWeStop) {
        transTable.put(board.key,HASH_BETA,depth,eval,move);
      }
      return eval;
    }
  }
  if (shouldWeStop) {
    return 0;
  }
  int bestEval=-Value.INFINITY, bestMove=Move.MOVE_NONE, evalType=HASH_ALPHA;
  int[] moveQueue=new int[MC_EXPAND];
  moveQueue[0]=move;
  int queueIndex=0, queueSize=0;
  before++;
  if (DO_MULTI_CUT && depth >= MC_REDUCTION && mcAllowed) {
    after++;
    int c=0;
    ArrayList<Integer> cuts=new ArrayList<Integer>(MC_CUTOFFS);
    while (true) {
      int piece=Move.getFrom(move);
      if ((MC_PIECE_CHECK && !cuts.contains(piece)) || !MC_PIECE_CHECK) {
        board.make(move);
        eval=-alphaBeta(board,depth - 1 - MC_REDUCTION,ply + 1,-beta,-alpha,true);
        board.retract(move);
        if (eval >= beta) {
          if (MC_PIECE_CHECK)           cuts.add(piece);
          c++;
          if (c == MC_CUTOFFS) {
            mcprunes++;
            return beta;
          }
        }
      }
      queueIndex++;
      if (queueIndex == MC_EXPAND)       break;
      move=selector.getNextMove();
      if (move == Move.MOVE_NONE)       break;
      moveQueue[queueIndex]=move;
    }
    queueSize=queueIndex;
    queueIndex=0;
    move=moveQueue[queueIndex++];
  }
  int movesSearched=0;
  while (true) {
    board.make(move);
    if (evalType == HASH_EXACT) {
      int type=Move.getType(move);
      if (DO_LMR && movesSearched >= LMR_FULL_DEPTH_MOVES && depth >= 3 && !isCheck && !Move.isCapture(type) && !Move.isPromotion(type)) {
        eval=-alphaBeta(board,depth - 2,ply + 1,-alpha - 1,-alpha,true);
      }
 else {
        eval=alpha + 1;
      }
      if (eval > alpha) {
        eval=-alphaBeta(board,depth - 1,ply + 1,-alpha - 1,-alpha,true);
        if (eval > alpha && eval < beta) {
          eval=-alphaBeta(board,depth - 1,ply + 1,-beta,-alpha,true);
        }
      }
    }
 else {
      eval=-alphaBeta(board,depth - 1,ply + 1,-beta,-alpha,true);
    }
    board.retract(move);
    movesSearched++;
    if (eval > bestEval) {
      if (eval >= beta) {
        if (!shouldWeStop) {
          transTable.put(board.key,HASH_BETA,depth,eval,move);
        }
        return beta;
      }
      bestEval=eval;
      bestMove=move;
      if (eval > alpha) {
        evalType=HASH_EXACT;
        alpha=eval;
      }
    }
    if (!shouldWeStop) {
      transTable.put(board.key,evalType,depth,bestEval,bestMove);
    }
    if (queueSize <= queueIndex) {
      move=selector.getNextMove();
      if (move == Move.MOVE_NONE)       break;
    }
 else {
      move=moveQueue[queueIndex++];
    }
  }
  return alpha;
}","public int alphaBeta(Board board,int depth,int ply,int alpha,int beta,boolean nmAllowed){
  if (!useFixedDepth && --pollForStopInterval == 0) {
    pollForStopInterval=TIME_CHECK_INTERVAL;
    if (System.currentTimeMillis() > (timeStarted + timeForThisMove))     shouldWeStop=true;
  }
  nodesSearched++;
  boolean mcAllowed=false;
  TranspositionTable.HashEntry entry=transTable.get(board.key);
  if (entry != null) {
    transFound++;
    if (entry.depth >= depth) {
      if (entry.type == HASH_EXACT) {
        return entry.eval;
      }
 else       if (entry.type == HASH_ALPHA && entry.eval <= alpha) {
        return entry.eval;
      }
 else       if (entry.type == HASH_BETA && entry.eval >= beta) {
        return entry.eval;
      }
    }
 else {
      if (entry.type == HASH_BETA && entry.eval >= beta) {
        mcAllowed=true;
      }
    }
  }
 else {
    transNotFound++;
  }
  int eval;
  if (depth <= 0) {
    eval=qsearch(board,ply,alpha,beta);
    transTable.putLeaf(board.key,eval,alpha,beta);
    return eval;
  }
  if (board.isDraw())   return Value.DRAW;
  int move;
  boolean isCheck=board.isCheck();
  MoveSelector selector=selectors[ply];
  selector.initialize(board,(entry == null ? Move.MOVE_NONE : entry.move),isCheck,false);
  if ((move=selector.getNextMove()) == Move.MOVE_NONE) {
    return isCheck ? (-Value.MATE + ply) : Value.DRAW;
  }
  if (DO_NULL_MOVES && nmAllowed && depth >= 2 && !isCheck && board.info.material[board.sideToMove] > board.info.pawnMaterial[board.sideToMove]) {
    int epSquare=board.epSquare;
    board.makeNullMove();
    eval=-alphaBeta(board,depth - NM_REDUCTION,ply + 1,-beta,-beta + 1,false);
    board.retractNullMove(epSquare);
    if (eval >= beta) {
      if (!shouldWeStop) {
        transTable.put(board.key,HASH_BETA,depth,eval,move);
      }
      return eval;
    }
  }
  if (shouldWeStop) {
    return 0;
  }
  int bestEval=-Value.INFINITY, bestMove=Move.MOVE_NONE, evalType=HASH_ALPHA;
  int[] moveQueue=new int[MC_EXPAND];
  moveQueue[0]=move;
  int queueIndex=0, queueSize=0;
  before++;
  if (DO_MULTI_CUT && depth >= MC_REDUCTION && mcAllowed) {
    after++;
    int c=0;
    ArrayList<Integer> cuts=new ArrayList<Integer>(MC_CUTOFFS);
    while (true) {
      int piece=Move.getFrom(move);
      if ((MC_PIECE_CHECK && !cuts.contains(piece)) || !MC_PIECE_CHECK) {
        board.make(move);
        eval=-alphaBeta(board,depth - 1 - MC_REDUCTION,ply + 1,-beta,-alpha,true);
        board.retract(move);
        if (eval >= beta) {
          if (MC_PIECE_CHECK)           cuts.add(piece);
          c++;
          if (c == MC_CUTOFFS) {
            mcprunes++;
            return beta;
          }
        }
      }
      queueIndex++;
      if (queueIndex == MC_EXPAND)       break;
      move=selector.getNextMove();
      if (move == Move.MOVE_NONE)       break;
      moveQueue[queueIndex]=move;
    }
    queueSize=queueIndex;
    queueIndex=0;
    move=moveQueue[queueIndex++];
  }
  int movesSearched=0;
  while (true) {
    board.make(move);
    if (evalType == HASH_EXACT) {
      int type=Move.getType(move);
      if (DO_LMR && movesSearched >= LMR_FULL_DEPTH_MOVES && depth >= 3 && !isCheck && !Move.isCapture(type) && !Move.isPromotion(type)) {
        eval=-alphaBeta(board,depth - 2,ply + 1,-alpha - 1,-alpha,true);
      }
 else {
        eval=alpha + 1;
      }
      if (eval > alpha) {
        eval=-alphaBeta(board,depth - 1,ply + 1,-alpha - 1,-alpha,true);
        if (eval > alpha && eval < beta) {
          eval=-alphaBeta(board,depth - 1,ply + 1,-beta,-alpha,true);
        }
      }
    }
 else {
      eval=-alphaBeta(board,depth - 1,ply + 1,-beta,-alpha,true);
    }
    board.retract(move);
    movesSearched++;
    if (eval > bestEval) {
      if (eval >= beta) {
        if (!shouldWeStop) {
          transTable.put(board.key,HASH_BETA,depth,eval,move);
        }
        return beta;
      }
      bestEval=eval;
      bestMove=move;
      if (eval > alpha) {
        evalType=HASH_EXACT;
        alpha=eval;
      }
    }
    if (!shouldWeStop) {
      transTable.put(board.key,evalType,depth,bestEval,bestMove);
    }
    if (queueSize <= queueIndex) {
      move=selector.getNextMove();
      if (move == Move.MOVE_NONE)       break;
    }
 else {
      move=moveQueue[queueIndex++];
    }
  }
  return alpha;
}",0.9827605891083456
6645,"public UCIHandler(){
  search=new Search(this);
  System.out.printf(""String_Node_Str"",search.getConfiguration());
  useBook=Options.getInstance().getOptionBoolean(""String_Node_Str"");
  if (useBook) {
    bookFile=Options.getInstance().getOptionString(""String_Node_Str"");
    opening=""String_Node_Str"";
    try {
      openingBook=Book.getInstance();
      openingBook.parseBook(bookFile);
    }
 catch (    IOException ioex) {
      System.out.println(""String_Node_Str"");
      ioex.printStackTrace(System.out);
    }
  }
}","public UCIHandler(){
  search=new Search(this);
  useBook=Options.getInstance().getOptionBoolean(""String_Node_Str"");
  if (useBook) {
    bookFile=Options.getInstance().getOptionString(""String_Node_Str"");
    opening=""String_Node_Str"";
    try {
      openingBook=Book.getInstance();
      openingBook.parseBook(bookFile);
    }
 catch (    IOException ioex) {
      System.out.println(""String_Node_Str"");
      ioex.printStackTrace(System.out);
    }
  }
}",0.9326530612244898
6646,"@Override protected Class<?> findClass(String name) throws ClassNotFoundException {
  for (  ClassLoader classloader : classLoaders) {
    try {
      return callFindClass(classloader,name);
    }
 catch (    ClassNotFoundException e) {
    }
  }
  throw new ClassNotFoundException(name);
}","@Override protected Class<?> findClass(String name) throws ClassNotFoundException {
  for (  ClassLoader classloader : classLoaders) {
    try {
      Class<?> classInstance=callFindClass(classloader,name);
      if (classInstance != null)       return classInstance;
    }
 catch (    ClassNotFoundException e) {
    }
  }
  throw new ClassNotFoundException(name);
}",0.8614916286149162
6647,"public ChainingClassLoader(ClassLoader... classLoaders){
  Validate.noNullElements(classLoaders,""String_Node_Str"");
  this.classLoaders=Arrays.asList(classLoaders);
}","public ChainingClassLoader(ClassLoader... classLoaders){
  Validate.noNullElements(classLoaders,""String_Node_Str"");
  this.classLoaders=Arrays.asList(new LinkedHashSet<ClassLoader>(Arrays.asList(classLoaders)).toArray(new ClassLoader[0]));
}",0.7567567567567568
6648,"@Override public Class loadClass(String name) throws ClassNotFoundException {
  for (  ClassLoader classloader : classLoaders) {
    try {
      return classloader.loadClass(name);
    }
 catch (    ClassNotFoundException e) {
    }
  }
  throw new ClassNotFoundException(name);
}","@Override public Class<?> loadClass(String name) throws ClassNotFoundException {
  for (  ClassLoader classloader : classLoaders) {
    try {
      return classloader.loadClass(name);
    }
 catch (    ClassNotFoundException e) {
    }
  }
  throw new ClassNotFoundException(name);
}",0.994671403197158
6649,"private Class<?> callFindClass(ClassLoader classloader,String name) throws ClassNotFoundException {
  try {
    Class<?> classInstance=(Class<?>)MethodsHolder.findClassMethod.invoke(classloader,name);
    if (classInstance != null) {
      return classInstance;
    }
  }
 catch (  IllegalAccessException e) {
    throw new AssertionError(e);
  }
catch (  InvocationTargetException e) {
    throw new AssertionError(e);
  }
}","private Class<?> callFindClass(ClassLoader classloader,String name) throws ClassNotFoundException {
  try {
    return (Class<?>)MethodsHolder.findClassMethod.invoke(classloader,name);
  }
 catch (  IllegalAccessException e) {
    throw new AssertionError(e);
  }
catch (  InvocationTargetException e) {
    if (e.getTargetException() instanceof ClassNotFoundException) {
      throw (ClassNotFoundException)e.getTargetException();
    }
    throw new AssertionError(e);
  }
}",0.4661487236403995
6650,"private GroovyClassLoader getGcl(){
  return GCL.INSTANCE;
}","private GroovyClassLoader getGcl(){
  return new GroovyClassLoader(new ChainingClassLoader(GCL.class.getClassLoader(),Script.class.getClassLoader(),ComponentManager.class.getClassLoader(),ClassLoader.getSystemClassLoader()));
}",0.3414634146341463
6651,"private Class<?> callFindClass(ClassLoader classloader,String name) throws ClassNotFoundException {
  try {
    return (Class<?>)MethodsHolder.findClassMethod.invoke(classloader,name);
  }
 catch (  IllegalAccessException e) {
    throw new AssertionError(e);
  }
catch (  InvocationTargetException e) {
    throw new AssertionError(e);
  }
}","private Class<?> callFindClass(ClassLoader classloader,String name) throws ClassNotFoundException {
  try {
    Class<?> classInstance=(Class<?>)MethodsHolder.findClassMethod.invoke(classloader,name);
    if (classInstance != null) {
      return classInstance;
    }
  }
 catch (  IllegalAccessException e) {
    throw new AssertionError(e);
  }
catch (  InvocationTargetException e) {
    throw new AssertionError(e);
  }
}",0.8709256844850065
6652,"public GroovyRegistrarImpl(ScriptService scriptService){
  this.scriptService=scriptService;
  this.scriptEngineFactory=new GroovyScriptEngineFactory();
}","public GroovyRegistrarImpl(ScriptService scriptService){
  this.scriptService=scriptService;
  this.scriptEngineFactory=new GroovyScriptEngineFactory(){
    @Override public ScriptEngine getScriptEngine(){
      GroovyScriptEngineImpl engine=new GroovyScriptEngineImpl();
      engine.setClassLoader(getGcl());
      return engine;
    }
  }
;
}",0.6092184368737475
6653,"public JRubyRegistrarImpl(ScriptService scriptService){
  this.scriptService=scriptService;
  engineFactory=new JRubyEngineFactory();
}","public JRubyRegistrarImpl(ScriptService scriptService){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  this.scriptService=scriptService;
  engineFactory=new JRubyEngineFactory();
}",0.8206686930091185
6654,"public JRubyRegistrarImpl(ScriptService scriptService){
  this.scriptService=scriptService;
  engineFactory=new JRubyEngineFactory();
}","public JRubyRegistrarImpl(ScriptService scriptService){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  this.scriptService=scriptService;
  engineFactory=new JRubyEngineFactory();
}",0.8206686930091185
6655,"public static Index create(InputSplit genericSplit,TaskAttemptContext context){
  Configuration conf=context.getConfiguration();
  Class<?> indexClass=conf.getClass(""String_Node_Str"",null);
  try {
    return (Index)indexClass.getConstructor().newInstance();
  }
 catch (  Exception e) {
    return null;
  }
}","public static Index create(InputSplit genericSplit,TaskAttemptContext context){
  LOG.setLevel(Level.DEBUG);
  Configuration conf=context.getConfiguration();
  Class<?> indexClass=conf.getClass(""String_Node_Str"",null);
  Class<?> guiceModule=conf.getClass(""String_Node_Str"",null);
  String hdfsFile=inputToFileSplit(genericSplit).getPath().toString();
  try {
    LOG.debug(""String_Node_Str"" + indexClass.toString() + ""String_Node_Str""+ guiceModule.toString());
    RunModule module=(RunModule)guiceModule.getConstructor().newInstance();
    module.setHdfsFile(hdfsFile);
    LOG.debug(""String_Node_Str"" + module.getClass().getName().toString());
    Injector injector=Guice.createInjector(module);
    LOG.debug(""String_Node_Str"");
    return (Index)injector.getInstance(indexClass);
  }
 catch (  Exception e) {
    LOG.debug(e);
    return null;
  }
}",0.4982817869415807
6656,"private int runJob(String name,Class<? extends Map> map,Class<? extends Reduce> reduce,String input,String output) throws Exception {
  Configuration conf=getConf();
  conf.setClass(""String_Node_Str"",IndexModule.class,Serializable.class);
  conf.setClass(""String_Node_Str"",CSVIndex.class,Serializable.class);
  conf.setClass(""String_Node_Str"",Filter.class,Serializable.class);
  conf.set(""String_Node_Str"",""String_Node_Str"");
  setConf(conf);
  Job job=new Job(conf,name);
  job.setJarByClass(Main.class);
  job.setMapOutputKeyClass(Text.class);
  job.setMapOutputValueClass(IntWritable.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  job.setMapperClass(map);
  job.setReducerClass(reduce);
  job.setInputFormatClass(IndexedInputFormat.class);
  job.setOutputFormatClass(TextOutputFormat.class);
  FileInputFormat.addInputPath(job,new Path(input));
  FileOutputFormat.setOutputPath(job,new Path(output));
  return job.waitForCompletion(true) ? 0 : 1;
}","private int runJob(String name,Class<? extends Map> map,Class<? extends Reduce> reduce,String input,String output) throws Exception {
  Configuration conf=getConf();
  conf.setClass(""String_Node_Str"",RunModule.class,Serializable.class);
  conf.setClass(""String_Node_Str"",CSVIndex.class,Serializable.class);
  conf.setClass(""String_Node_Str"",Filter.class,Serializable.class);
  conf.set(""String_Node_Str"",""String_Node_Str"");
  setConf(conf);
  Job job=new Job(conf,name);
  job.setJarByClass(Main.class);
  job.setMapOutputKeyClass(Text.class);
  job.setMapOutputValueClass(IntWritable.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  job.setMapperClass(map);
  job.setReducerClass(reduce);
  job.setInputFormatClass(IndexedInputFormat.class);
  job.setOutputFormatClass(TextOutputFormat.class);
  FileInputFormat.addInputPath(job,new Path(input));
  FileOutputFormat.setOutputPath(job,new Path(output));
  return job.waitForCompletion(true) ? 0 : 1;
}",0.9959555106167848
6657,"private BTree<String,String> getTree(File file){
  BTree<String,String> result=null;
  try {
    result=factory.get(file,FixedStringSerializer.INSTANCE,FixedStringSerializer.INSTANCE,StringComparator.INSTANCE);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
  return result;
}","private BTree<String,String> getTree(File file){
  BTree<String,String> result=null;
  try {
    result=factory.get(file,FixedStringSerializer.INSTANCE_1000,FixedStringSerializer.INSTANCE_1000,StringComparator.INSTANCE);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
  return result;
}",0.9855907780979828
6658,"@Override public Iterator<AbstractMap.SimpleEntry<String,String>> getIterator(String start,String end){
  throw new UnsupportedOperationException();
}","@Override public Iterator<AbstractMap.SimpleEntry<String,String>> getIterator(String start,String end){
  ensureOpen();
  throw new UnsupportedOperationException();
}",0.9493670886075948
6659,"@Override public void addLine(String line,long pos){
  String key=extractKeyFromLine(line);
  getOrCreateWritingTree().add(key,line);
  String filename=getWriteTreeFileName();
  String propertyStr=properties.getProperty(filename,null);
  PropertyEntry p=new PropertyEntry();
  if (propertyStr != null)   p.loadFromString(propertyStr);
  if (pos < p.start) {
    p.start=pos;
  }
  if (pos > p.end) {
    p.end=pos;
  }
  properties.setProperty(filename,p.toString());
}","@Override public void addLine(String line,long pos){
  ensureOpen();
  String key=extractKeyFromLine(line);
  getOrCreateWritingTree().add(key,line);
  String filename=getWriteTreeFileName();
  String propertyStr=properties.getProperty(filename,null);
  PropertyEntry p=new PropertyEntry();
  if (propertyStr != null)   p.loadFromString(propertyStr);
  if (pos < p.start) {
    p.start=pos;
  }
  if (pos > p.end) {
    p.end=pos;
  }
  properties.setProperty(filename,p.toString());
}",0.9832285115303984
6660,"/** 
 * This method implemented by a subclass returns the key for a given line. <p/> This method isn't perfect since it assumes that each line is one entry. Maybe this can be made more generic later!
 * @param line in the hdfs file
 * @return key or null to ignore the line
 */
public abstract String extractKeyFromLine(String line);","/** 
 * This method implemented by a subclass returns the key for a given line. <p/> This method isn't perfect since it assumes that each line is one entry. Maybe this can be made more generic later! Also, call ensureOpen() in this method
 * @param line in the hdfs file
 * @return key or null to ignore the line
 */
public abstract String extractKeyFromLine(String line);",0.9446808510638298
6661,"@Override public void close(){
  try {
    saveProperties();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  if (bTreeWriting != null)   bTreeWriting.sync();
}","@Override public void close(){
  if (!isOpen())   return;
  try {
    saveProperties();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  if (bTreeWriting != null)   bTreeWriting.sync();
}",0.931297709923664
6662,"public boolean open() throws Exception {
  File indexDir=getIndexDir();
  indexDir.mkdirs();
  loadOrCreateProperties();
  isOpen=true;
  return true;
}","public void open() throws IOException {
  File indexDir=getIndexDir();
  indexDir.mkdirs();
  loadOrCreateProperties();
  isOpen=true;
}",0.9097222222222222
6663,"public static Index create(InputSplit genericSplit,TaskAttemptContext context){
  LOG.setLevel(Level.DEBUG);
  Configuration conf=context.getConfiguration();
  Class<?> indexClass=conf.getClass(""String_Node_Str"",null);
  Class<?> guiceModule=conf.getClass(""String_Node_Str"",null);
  String hdfsFile=inputToFileSplit(genericSplit).getPath().toString();
  LOG.debug(""String_Node_Str"" + hdfsFile);
  try {
    LOG.debug(""String_Node_Str"" + indexClass.toString() + ""String_Node_Str""+ guiceModule.toString());
    RunModule module=(RunModule)guiceModule.getConstructor().newInstance();
    module.setHdfsFile(hdfsFile);
    LOG.debug(""String_Node_Str"" + module.getClass().getName().toString());
    Injector injector=Guice.createInjector(module);
    LOG.debug(""String_Node_Str"");
    return (Index)injector.getInstance(indexClass);
  }
 catch (  Exception e) {
    LOG.debug(e);
    return null;
  }
}","public static Index create(InputSplit genericSplit,TaskAttemptContext context){
  LOG.setLevel(Level.DEBUG);
  Configuration conf=context.getConfiguration();
  Class<?> indexClass=conf.getClass(""String_Node_Str"",null);
  Class<?> guiceModule=conf.getClass(""String_Node_Str"",null);
  String hdfsFile=inputToFileSplit(genericSplit).getPath().toString();
  LOG.debug(""String_Node_Str"" + hdfsFile);
  try {
    LOG.debug(""String_Node_Str"" + indexClass.toString() + ""String_Node_Str""+ guiceModule.toString());
    RunModule module=(RunModule)guiceModule.getConstructor().newInstance();
    module.setHdfsFile(hdfsFile);
    LOG.debug(""String_Node_Str"" + module.getClass().getName().toString());
    Injector injector=Guice.createInjector(module);
    LOG.debug(""String_Node_Str"");
    Index index=(Index)injector.getInstance(indexClass);
    index.open();
    return index;
  }
 catch (  Exception e) {
    LOG.debug(e);
    return null;
  }
}",0.9689373297002724
6664,"public synchronized void showIn(){
  santa_is_listening=true;
  notify();
}","public synchronized void showIn(){
  santa_is_listening=true;
  notifyAll();
}",0.9803921568627452
6665,"public synchronized void showOut(){
  santa_is_listening=false;
  notify();
}","public synchronized void showOut(){
  santa_is_listening=false;
  notifyAll();
}",0.9808917197452228
6666,"public synchronized void harness(){
  santa_is_harnessing=true;
  notify();
}","public synchronized void harness(){
  santa_is_harnessing=true;
  notifyAll();
}",0.9808917197452228
6667,"public synchronized void unHarness(){
  santa_is_harnessing=false;
  notify();
}","public synchronized void unHarness(){
  santa_is_harnessing=false;
  notifyAll();
}",0.98159509202454
6668,"public synchronized void ask(Elf elf){
  elves.add(elf);
  if (elves.size() == Santa.ELF_GROUP)   notify();
}","public synchronized void ask(Elf elf){
  elves.add(elf);
  if (elves.size() == Santa.ELF_GROUP)   notifyAll();
}",0.986425339366516
6669,"public synchronized void deliverToys(){
  reindeers++;
  if (reindeers == Santa.REINDEERS)   notify();
}","public synchronized void deliverToys(){
  reindeers++;
  if (reindeers == Santa.REINDEERS)   notifyAll();
}",0.985781990521327
6670,"private void updateThreadInfo(JVM jvm,AgentMessage agentMessage,Thread thread){
  ThreadInfo threadInfo=jvm.getThread(thread.getId());
  if (threadInfo == null) {
    threadInfo=new ThreadInfo(thread.getId(),thread.getName(),thread.getPriority(),thread.getState().toString(),thread.getIsContextClassLoaderSet());
    addThreadInfo(jvm.getId(),threadInfo);
  }
 else {
    jvm.getThread(thread.getId()).compareAndSet(agentMessage.getTimestamp(),thread.getId(),thread.getName(),thread.getPriority(),thread.getState().toString(),thread.getIsContextClassLoaderSet());
    if (thread.hasCpuTime()) {
      threadInfo.setCpuTime(thread.getCpuTime());
    }
  }
}","private void updateThreadInfo(JVM jvm,AgentMessage agentMessage,Thread thread){
  ThreadInfo threadInfo=jvm.getThread(thread.getId());
  if (threadInfo == null) {
    threadInfo=new ThreadInfo(thread.getId(),thread.getName(),thread.getPriority(),thread.getState().toString(),thread.getIsContextClassLoaderSet(),agentMessage.getTimestamp());
    addThreadInfo(jvm.getId(),threadInfo);
  }
 else {
    jvm.getThread(thread.getId()).compareAndSet(agentMessage.getTimestamp(),thread.getId(),thread.getName(),thread.getPriority(),thread.getState().toString(),thread.getIsContextClassLoaderSet());
    if (thread.hasCpuTime()) {
      threadInfo.setCpuTime(thread.getCpuTime());
    }
  }
}",0.9791044776119404
6671,"public void applyData(AgentMessage agentMessage,boolean isLogging){
  int jvm_id=agentMessage.getJvmId();
  JVM jvm=null;
synchronized (IDsToJVMs) {
    jvm=IDsToJVMs.get(jvm_id);
    if (jvm == null) {
      jvm=new JVM(jvm_id,""String_Node_Str"");
      IDsToJVMs.put(jvm_id,jvm);
      ((ThreadTableModel)getTableModel()).setCurrentJVM(jvm);
      setCurrentJVM(jvm);
    }
  }
  if (isLogging) {
    addAgentMessage(jvm_id,agentMessage);
  }
  if (agentMessage.hasThreadEvent()) {
    for (    de.fu.profiler.model.AgentMessageProtos.AgentMessage.Thread thread : agentMessage.getThreadEvent().getThreadList()) {
      updateThreadInfo(jvm,agentMessage,thread);
    }
  }
  if (agentMessage.hasMonitorEvent()) {
    de.fu.profiler.model.AgentMessageProtos.AgentMessage.Thread thread=agentMessage.getMonitorEvent().getThread();
    ThreadInfo threadInfo=jvm.getThread(thread.getId());
    if (threadInfo == null) {
      threadInfo=new ThreadInfo(thread.getId(),thread.getName(),thread.getPriority(),thread.getState().toString(),thread.getIsContextClassLoaderSet());
      addThreadInfo(jvm_id,threadInfo);
    }
    String stateChangeNotification=null;
    if (!threadInfo.getState().equals(agentMessage.getMonitorEvent().getThread().getState().toString())) {
      stateChangeNotification=agentMessage.getTimestamp() + ""String_Node_Str"" + threadInfo.getName()+ ""String_Node_Str""+ threadInfo.getState()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getThread().getState().toString();
    }
    setThreadInfoState(jvm_id,threadInfo,agentMessage.getMonitorEvent().getThread().getState().toString());
    updateThreadInfo(jvm,agentMessage,thread);
    NotifyWaitLogEntry notifyWaitLogEntry=null;
    String monitorStatus=null;
switch (agentMessage.getMonitorEvent().getEventType()) {
case WAIT:
      monitorStatus=threadInfo.getName() + ""String_Node_Str"" + ""String_Node_Str""+ agentMessage.getMonitorEvent().getClassName()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getMethodName()+ ""String_Node_Str"";
    if (stateChangeNotification != null) {
      monitorStatus+=stateChangeNotification + ""String_Node_Str"";
    }
  notifyWaitLogEntry=new NotifyWaitLogEntry(threadInfo,threadInfo.getState(),NotifyWaitLogEntry.Type.INVOKED_WAIT,agentMessage.getMonitorEvent().getMethodName(),agentMessage.getMonitorEvent().getClassName());
setThreadInfoMonitorStatus(jvm_id,threadInfo,agentMessage.getTimestamp(),monitorStatus,false,notifyWaitLogEntry);
threadInfo.increaseWaitCounter();
break;
case WAITED:
monitorStatus=threadInfo.getName() + ""String_Node_Str"" + ""String_Node_Str""+ agentMessage.getMonitorEvent().getClassName()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getMethodName()+ ""String_Node_Str"";
if (stateChangeNotification != null) {
monitorStatus+=stateChangeNotification + ""String_Node_Str"";
}
notifyWaitLogEntry=new NotifyWaitLogEntry(threadInfo,threadInfo.getState(),NotifyWaitLogEntry.Type.LEFT_WAIT,agentMessage.getMonitorEvent().getMethodName(),agentMessage.getMonitorEvent().getClassName());
setThreadInfoMonitorStatus(jvm_id,threadInfo,agentMessage.getTimestamp(),monitorStatus,false,notifyWaitLogEntry);
break;
case NOTIFY_ALL:
monitorStatus=threadInfo.getName() + ""String_Node_Str"" + ""String_Node_Str""+ agentMessage.getMonitorEvent().getClassName()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getMethodName()+ ""String_Node_Str"";
if (stateChangeNotification != null) {
monitorStatus+=stateChangeNotification + ""String_Node_Str"";
}
notifyWaitLogEntry=new NotifyWaitLogEntry(threadInfo,threadInfo.getState(),NotifyWaitLogEntry.Type.INVOKED_NOTIFY_ALL,agentMessage.getMonitorEvent().getMethodName(),agentMessage.getMonitorEvent().getClassName());
setThreadInfoMonitorStatus(jvm_id,threadInfo,agentMessage.getTimestamp(),monitorStatus,false,notifyWaitLogEntry);
break;
case NOTIFY:
monitorStatus=threadInfo.getName() + ""String_Node_Str"" + ""String_Node_Str""+ agentMessage.getMonitorEvent().getClassName()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getMethodName()+ ""String_Node_Str"";
if (stateChangeNotification != null) {
monitorStatus+=stateChangeNotification + ""String_Node_Str"";
}
notifyWaitLogEntry=new NotifyWaitLogEntry(threadInfo,threadInfo.getState(),NotifyWaitLogEntry.Type.INVOKED_NOTIFY,agentMessage.getMonitorEvent().getMethodName(),agentMessage.getMonitorEvent().getClassName());
setThreadInfoMonitorStatus(jvm_id,threadInfo,agentMessage.getTimestamp(),monitorStatus,false,notifyWaitLogEntry);
break;
case CONTENDED:
setThreadInfoMonitorStatus(jvm_id,threadInfo,agentMessage.getTimestamp(),threadInfo.getName() + ""String_Node_Str"" + agentMessage.getMonitorEvent().getClassName()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getMethodName()+ ""String_Node_Str"",true,null);
break;
case ENTERED:
setThreadInfoMonitorStatus(jvm_id,threadInfo,agentMessage.getTimestamp(),threadInfo.getName() + ""String_Node_Str"" + agentMessage.getMonitorEvent().getClassName()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getMethodName()+ ""String_Node_Str"",true,null);
break;
}
if (agentMessage.getMonitorEvent().hasMonitor()) {
Monitor monitor=new Monitor(agentMessage.getMonitorEvent().getMonitor().getId(),agentMessage.getMonitorEvent().getClassName(),agentMessage.getMonitorEvent().getMonitor().getEntryCount(),agentMessage.getMonitorEvent().getMonitor().getWaiterCount(),agentMessage.getMonitorEvent().getMonitor().getNotifyWaiterCount());
updateMonitorInfo(currentJVM,agentMessage,monitor);
}
}
}","public void applyData(AgentMessage agentMessage,boolean isLogging){
  int jvm_id=agentMessage.getJvmId();
  JVM jvm=null;
synchronized (IDsToJVMs) {
    jvm=IDsToJVMs.get(jvm_id);
    if (jvm == null) {
      jvm=new JVM(jvm_id,""String_Node_Str"");
      IDsToJVMs.put(jvm_id,jvm);
      ((ThreadTableModel)getTableModel()).setCurrentJVM(jvm);
      setCurrentJVM(jvm);
    }
  }
  if (isLogging) {
    addAgentMessage(jvm_id,agentMessage);
  }
  if (agentMessage.hasThreadEvent()) {
    for (    de.fu.profiler.model.AgentMessageProtos.AgentMessage.Thread thread : agentMessage.getThreadEvent().getThreadList()) {
      updateThreadInfo(jvm,agentMessage,thread);
    }
  }
  if (agentMessage.hasMonitorEvent()) {
    de.fu.profiler.model.AgentMessageProtos.AgentMessage.Thread thread=agentMessage.getMonitorEvent().getThread();
    ThreadInfo threadInfo=jvm.getThread(thread.getId());
    if (threadInfo == null) {
      threadInfo=new ThreadInfo(thread.getId(),thread.getName(),thread.getPriority(),thread.getState().toString(),thread.getIsContextClassLoaderSet(),agentMessage.getTimestamp());
      addThreadInfo(jvm_id,threadInfo);
    }
    String stateChangeNotification=null;
    if (!threadInfo.getState().equals(agentMessage.getMonitorEvent().getThread().getState().toString())) {
      stateChangeNotification=agentMessage.getTimestamp() + ""String_Node_Str"" + threadInfo.getName()+ ""String_Node_Str""+ threadInfo.getState()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getThread().getState().toString();
    }
    setThreadInfoState(jvm_id,threadInfo,agentMessage.getMonitorEvent().getThread().getState().toString());
    updateThreadInfo(jvm,agentMessage,thread);
    NotifyWaitLogEntry notifyWaitLogEntry=null;
    String monitorStatus=null;
switch (agentMessage.getMonitorEvent().getEventType()) {
case WAIT:
      monitorStatus=threadInfo.getName() + ""String_Node_Str"" + ""String_Node_Str""+ agentMessage.getMonitorEvent().getClassName()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getMethodName()+ ""String_Node_Str"";
    if (stateChangeNotification != null) {
      monitorStatus+=stateChangeNotification + ""String_Node_Str"";
    }
  notifyWaitLogEntry=new NotifyWaitLogEntry(threadInfo,threadInfo.getState(),NotifyWaitLogEntry.Type.INVOKED_WAIT,agentMessage.getMonitorEvent().getMethodName(),agentMessage.getMonitorEvent().getClassName());
setThreadInfoMonitorStatus(jvm_id,threadInfo,agentMessage.getTimestamp(),monitorStatus,false,notifyWaitLogEntry);
threadInfo.increaseWaitCounter();
break;
case WAITED:
monitorStatus=threadInfo.getName() + ""String_Node_Str"" + ""String_Node_Str""+ agentMessage.getMonitorEvent().getClassName()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getMethodName()+ ""String_Node_Str"";
if (stateChangeNotification != null) {
monitorStatus+=stateChangeNotification + ""String_Node_Str"";
}
notifyWaitLogEntry=new NotifyWaitLogEntry(threadInfo,threadInfo.getState(),NotifyWaitLogEntry.Type.LEFT_WAIT,agentMessage.getMonitorEvent().getMethodName(),agentMessage.getMonitorEvent().getClassName());
setThreadInfoMonitorStatus(jvm_id,threadInfo,agentMessage.getTimestamp(),monitorStatus,false,notifyWaitLogEntry);
break;
case NOTIFY_ALL:
monitorStatus=threadInfo.getName() + ""String_Node_Str"" + ""String_Node_Str""+ agentMessage.getMonitorEvent().getClassName()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getMethodName()+ ""String_Node_Str"";
if (stateChangeNotification != null) {
monitorStatus+=stateChangeNotification + ""String_Node_Str"";
}
notifyWaitLogEntry=new NotifyWaitLogEntry(threadInfo,threadInfo.getState(),NotifyWaitLogEntry.Type.INVOKED_NOTIFY_ALL,agentMessage.getMonitorEvent().getMethodName(),agentMessage.getMonitorEvent().getClassName());
setThreadInfoMonitorStatus(jvm_id,threadInfo,agentMessage.getTimestamp(),monitorStatus,false,notifyWaitLogEntry);
break;
case NOTIFY:
monitorStatus=threadInfo.getName() + ""String_Node_Str"" + ""String_Node_Str""+ agentMessage.getMonitorEvent().getClassName()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getMethodName()+ ""String_Node_Str"";
if (stateChangeNotification != null) {
monitorStatus+=stateChangeNotification + ""String_Node_Str"";
}
notifyWaitLogEntry=new NotifyWaitLogEntry(threadInfo,threadInfo.getState(),NotifyWaitLogEntry.Type.INVOKED_NOTIFY,agentMessage.getMonitorEvent().getMethodName(),agentMessage.getMonitorEvent().getClassName());
setThreadInfoMonitorStatus(jvm_id,threadInfo,agentMessage.getTimestamp(),monitorStatus,false,notifyWaitLogEntry);
break;
case CONTENDED:
setThreadInfoMonitorStatus(jvm_id,threadInfo,agentMessage.getTimestamp(),threadInfo.getName() + ""String_Node_Str"" + agentMessage.getMonitorEvent().getClassName()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getMethodName()+ ""String_Node_Str"",true,null);
break;
case ENTERED:
setThreadInfoMonitorStatus(jvm_id,threadInfo,agentMessage.getTimestamp(),threadInfo.getName() + ""String_Node_Str"" + agentMessage.getMonitorEvent().getClassName()+ ""String_Node_Str""+ agentMessage.getMonitorEvent().getMethodName()+ ""String_Node_Str"",true,null);
break;
}
if (agentMessage.getMonitorEvent().hasMonitor()) {
Monitor monitor=new Monitor(agentMessage.getMonitorEvent().getMonitor().getId(),agentMessage.getMonitorEvent().getClassName(),agentMessage.getMonitorEvent().getMonitor().getEntryCount(),agentMessage.getMonitorEvent().getMonitor().getWaiterCount(),agentMessage.getMonitorEvent().getMonitor().getNotifyWaiterCount());
updateMonitorInfo(currentJVM,agentMessage,monitor);
}
}
}",0.997434957860022
6672,"/** 
 * Standard constructor.
 * @param id a generated id by the profiler.
 * @param name the threads name.
 * @param priority the threads priority.
 * @param state the threads state.
 * @param ccl whether the context class loader is set.
 * @param notiyWaitController
 */
public ThreadInfo(int id,String name,int priority,String state,boolean ccl){
  super();
  this.id=id;
  this.name=name;
  this.priority=priority;
  this.state=state;
  this.isContextClassLoaderSet=ccl;
  this.cpuTime=-1;
  this.stateToDuration=new ConcurrentHashMap<String,Long>();
  String possibleStates[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String possibleState : possibleStates) {
    stateToDuration.put(possibleState,0l);
  }
  stateToDuration.put(state,1l);
}","/** 
 * Standard constructor.
 * @param id a generated id by the profiler.
 * @param name the threads name.
 * @param priority the threads priority.
 * @param state the threads state.
 * @param ccl whether the context class loader is set.
 * @param notiyWaitController
 */
public ThreadInfo(int id,String name,int priority,String state,boolean ccl,long timestamp){
  super();
  this.id=id;
  this.name=name;
  this.priority=priority;
  this.state=state;
  this.isContextClassLoaderSet=ccl;
  this.cpuTime=-1;
  this.timeSinceLastUpdate=timestamp;
  this.stateToDuration=new ConcurrentHashMap<String,Long>();
  String possibleStates[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String possibleState : possibleStates) {
    stateToDuration.put(possibleState,0l);
  }
}",0.9491124260355028
6673,"public void compareAndSet(long timestamp,int id,String name,int priority,String state,boolean isContextClassLoaderSet){
  if (this.id != id) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!this.name.equals(name)) {
    this.name=name;
  }
  if (this.priority != priority) {
    this.priority=priority;
  }
  if (!stateToDuration.containsKey(state)) {
    stateToDuration.put(state,1l);
  }
  long timeSpentInState=timestamp - timeSinceLastUpdate;
  long oldTimeSpentInState=stateToDuration.get(this.state);
  stateToDuration.put(this.state,oldTimeSpentInState + timeSpentInState);
  timeSinceLastUpdate=timestamp;
  if (!this.state.equals(state)) {
    this.state=state;
  }
  if (this.isContextClassLoaderSet != isContextClassLoaderSet) {
    this.isContextClassLoaderSet=isContextClassLoaderSet;
  }
}","public void compareAndSet(long timestamp,int id,String name,int priority,String state,boolean isContextClassLoaderSet){
  if (this.id != id) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!this.name.equals(name)) {
    this.name=name;
  }
  if (this.priority != priority) {
    this.priority=priority;
  }
  long timeSpentInState=timestamp - timeSinceLastUpdate;
  long oldTimeSpentInState=stateToDuration.get(this.state);
  stateToDuration.put(this.state,oldTimeSpentInState + timeSpentInState);
  timeSinceLastUpdate=timestamp;
  if (!this.state.equals(state)) {
    this.state=state;
  }
  if (this.isContextClassLoaderSet != isContextClassLoaderSet) {
    this.isContextClassLoaderSet=isContextClassLoaderSet;
  }
}",0.819693094629156
6674,"@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String rssUrl;
  String endpointFilter;
  String callBackUrl;
  FeedEntry feed;
  if ((!(req.getHeader(""String_Node_Str"").equals(HTTP_POST_HEADER_TYPE))) || (req.getParameter(HTTP_POST_PARAMETER_HUB_MODE) == null)) {
    resp.setStatus(HttpStatus.SC_BAD_REQUEST);
    return;
  }
  rssUrl=req.getParameter(HTTP_POST_PARAMETER_RSS_TOPIC_URL);
  endpointFilter=req.getParameter(HTTP_POST_PARAMETER_ENDPOINT_FILTER);
  callBackUrl=req.getParameter(HTTP_POST_PARAMETER_URL_CALLBACK);
switch (HubMode.valueOf(req.getParameter(HTTP_POST_PARAMETER_HUB_MODE))) {
case publish:
    if ((rssUrl != null) && (createReader(rssUrl))) {
      registrations.addTopic(rssUrl);
      responseCode=HttpStatus.SC_CREATED;
    }
 else {
      responseCode=HttpStatus.SC_BAD_REQUEST;
    }
  break;
case unpublish:
if (rssUrl != null) {
  new SendSubscription(client,rssUrl,HUB_SUBSCRIPTION_UPDATE_ENDPOINT_REMOVED,this,HUB_UPDATE_TOPIC_DELETE);
  responseCode=HttpStatus.SC_ACCEPTED;
}
 else {
  responseCode=HttpStatus.SC_BAD_REQUEST;
}
break;
case update:
if ((rssUrl == null) || (readers.get(rssUrl) == null)) {
responseCode=HttpStatus.SC_BAD_REQUEST;
break;
}
feed=readers.get(rssUrl).getLastEntry();
if (feed == null) {
responseCode=HttpStatus.SC_BAD_REQUEST;
break;
}
try {
@SuppressWarnings(""String_Node_Str"") EndpointDescription edp=getEndpointDescriptionFromJSON(json.fromJSON(feed.content()));
if (feed.title().equals(FEED_TITLE_NEW)) {
registrations.addEndpoint(rssUrl,edp);
new SendSubscription(client,edp,HUB_SUBSCRIPTION_UPDATE_ENDPOINT_ADDED,this);
}
 else if (feed.title().equals(FEED_TITLE_REMOVE)) {
registrations.removeEndpoint(rssUrl,edp);
new SendSubscription(client,edp,HUB_SUBSCRIPTION_UPDATE_ENDPOINT_REMOVED,this);
}
responseCode=HttpStatus.SC_ACCEPTED;
}
 catch (ParseException e) {
responseCode=HttpStatus.SC_BAD_REQUEST;
logger.log(LogService.LOG_ERROR,""String_Node_Str"",e);
}
break;
case subscribe:
if ((endpointFilter == null) || (callBackUrl == null)) {
responseCode=HttpStatus.SC_BAD_REQUEST;
}
 else {
registrations.addSubscrition(callBackUrl,endpointFilter);
responseCode=HttpStatus.SC_CREATED;
new SendSubscription(client,callBackUrl,HUB_SUBSCRIPTION_UPDATE_ENDPOINT_ADDED,this);
}
break;
case unsubscribe:
if (callBackUrl == null) {
responseCode=HttpStatus.SC_BAD_REQUEST;
break;
}
registrations.removeSubscribtion(callBackUrl);
responseCode=HttpStatus.SC_ACCEPTED;
break;
case getAllEndpoints:
resp.setContentType(""String_Node_Str"");
for (EndpointDescription endpoint : registrations.getAllEndpoints()) {
resp.getWriter().append(endpoint.toString() + ""String_Node_Str"");
}
responseCode=HttpStatus.SC_ACCEPTED;
break;
default :
responseCode=HttpStatus.SC_BAD_REQUEST;
break;
}
resp.setStatus(responseCode);
}","@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String rssUrl;
  String endpointFilter;
  String callBackUrl;
  FeedEntry feed;
  if ((!(req.getHeader(""String_Node_Str"").equals(HTTP_POST_HEADER_TYPE))) || (req.getParameter(HTTP_POST_PARAMETER_HUB_MODE) == null)) {
    resp.setStatus(HttpStatus.SC_BAD_REQUEST);
    return;
  }
  rssUrl=req.getParameter(HTTP_POST_PARAMETER_RSS_TOPIC_URL);
  endpointFilter=req.getParameter(HTTP_POST_PARAMETER_ENDPOINT_FILTER);
  callBackUrl=req.getParameter(HTTP_POST_PARAMETER_URL_CALLBACK);
switch (HubMode.valueOf(req.getParameter(HTTP_POST_PARAMETER_HUB_MODE))) {
case publish:
    if ((rssUrl != null) && (createReader(rssUrl))) {
      registrations.addTopic(rssUrl);
      responseCode=HttpStatus.SC_CREATED;
    }
 else {
      responseCode=HttpStatus.SC_BAD_REQUEST;
    }
  break;
case unpublish:
if (rssUrl != null) {
  subscription=new SendSubscription(client,rssUrl,HUB_SUBSCRIPTION_UPDATE_ENDPOINT_REMOVED,this,HUB_UPDATE_TOPIC_DELETE);
  subscription.start();
  responseCode=HttpStatus.SC_ACCEPTED;
}
 else {
  responseCode=HttpStatus.SC_BAD_REQUEST;
}
break;
case update:
if ((rssUrl == null) || (readers.get(rssUrl) == null)) {
responseCode=HttpStatus.SC_BAD_REQUEST;
break;
}
feed=readers.get(rssUrl).getLastEntry();
if (feed == null) {
responseCode=HttpStatus.SC_BAD_REQUEST;
break;
}
try {
@SuppressWarnings(""String_Node_Str"") EndpointDescription edp=getEndpointDescriptionFromJSON(json.fromJSON(feed.content()));
if (feed.title().equals(FEED_TITLE_NEW)) {
registrations.addEndpoint(rssUrl,edp);
subscription=new SendSubscription(client,edp,HUB_SUBSCRIPTION_UPDATE_ENDPOINT_ADDED,this);
subscription.start();
}
 else if (feed.title().equals(FEED_TITLE_REMOVE)) {
registrations.removeEndpoint(rssUrl,edp);
subscription=new SendSubscription(client,edp,HUB_SUBSCRIPTION_UPDATE_ENDPOINT_REMOVED,this);
subscription.start();
}
responseCode=HttpStatus.SC_ACCEPTED;
}
 catch (ParseException e) {
responseCode=HttpStatus.SC_BAD_REQUEST;
logger.log(LogService.LOG_ERROR,""String_Node_Str"",e);
}
break;
case subscribe:
if ((endpointFilter == null) || (callBackUrl == null)) {
responseCode=HttpStatus.SC_BAD_REQUEST;
}
 else {
registrations.addSubscrition(callBackUrl,endpointFilter);
responseCode=HttpStatus.SC_CREATED;
subscription=new SendSubscription(client,callBackUrl,HUB_SUBSCRIPTION_UPDATE_ENDPOINT_ADDED,this);
subscription.start();
}
break;
case unsubscribe:
if (callBackUrl == null) {
responseCode=HttpStatus.SC_BAD_REQUEST;
break;
}
registrations.removeSubscribtion(callBackUrl);
responseCode=HttpStatus.SC_ACCEPTED;
break;
case getAllEndpoints:
resp.setContentType(""String_Node_Str"");
for (EndpointDescription endpoint : registrations.getAllEndpoints()) {
resp.getWriter().append(endpoint.toString() + ""String_Node_Str"");
}
responseCode=HttpStatus.SC_ACCEPTED;
break;
default :
responseCode=HttpStatus.SC_BAD_REQUEST;
break;
}
resp.setStatus(responseCode);
}",0.975659924580048
6675,"/** 
 * Register the servlet contrainer or reload it. Must be called after adding or removing a class into the ResourceConfig.
 */
private void reloadServlet(){
  if (container == null) {
    container=new JerseyServletBridge(this);
    try {
      httpservice.registerServlet(rootName,container,new Hashtable<String,Object>(),null);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
 else {
    container.reload();
  }
}","/** 
 * Register the servlet contrainer or reload it. Must be called after adding or removing a class into the ResourceConfig.
 */
private void reloadServlet(){
  if (container == null) {
    container=new JerseyServletBridge(this);
    try {
      httpservice.registerServlet(rootName,container,new Hashtable<String,Object>(),null);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
 else {
    System.out.println(""String_Node_Str"" + rsconfig.getClasses());
    if (rsconfig.isEmpty()) {
      httpservice.unregister(rootName);
      container=null;
    }
 else {
      container.reload();
    }
  }
}",0.8078641644325291
6676,"protected void destroyEndpoint(EndpointDescription endesc){
  String pathName=(String)endesc.getProperties().get(PROP_PATH);
  rsconfig.removeComponentProvider(pathName);
  try {
    container.reload();
  }
 catch (  Exception e) {
  }
  logger.log(LOG_DEBUG,""String_Node_Str"" + endesc.getId() + ""String_Node_Str""+ pathName+ ""String_Node_Str"");
}","protected void destroyEndpoint(EndpointDescription endesc){
  String pathName=(String)endesc.getProperties().get(PROP_PATH);
  rsconfig.removeComponentProvider(pathName);
  try {
    reloadServlet();
  }
 catch (  RuntimeException e) {
    logger.log(LOG_ERROR,""String_Node_Str"" + endesc.getId(),e);
  }
  logger.log(LOG_DEBUG,""String_Node_Str"" + endesc.getId() + ""String_Node_Str""+ pathName+ ""String_Node_Str"");
}",0.868421052631579
6677,"public void destroyProxy(EndpointDescription description,ServiceRegistration registration){
  if (proxies.containsKey(description.getId())) {
    Client client=proxies.remove(description.getId());
    client.closeProxy(description.getId());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public void destroyProxy(EndpointDescription description,ServiceRegistration registration){
  if (proxies.containsKey(description.getId())) {
    registration.unregister();
    Client client=proxies.remove(description.getId());
    client.closeProxy(description.getId());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.9533834586466166
6678,"/** 
 * @return <code>true</code> if the {@link ComponentInstance} is in a valid state, <code>false</code> otherwise.
 */
protected final boolean isValid(){
  return isValid;
}","/** 
 * @return <code>true</code> if the {@link ExporterService} is in a valid state, <code>false</code> otherwise.
 */
protected final boolean isValid(){
  return isValid;
}",0.9371428571428572
6679,"/** 
 * @return <code>true</code> if the {@link ComponentInstance} is in a valid state, <code>false</code> otherwise.
 */
protected final boolean isValid(){
  return isValid;
}","/** 
 * @return <code>true</code> if the {@link ImporterService} is in a valid state, <code>false</code> otherwise.
 */
protected final boolean isValid(){
  return isValid;
}",0.9428571428571428
6680,"private DynamicImporter(Builder builder){
  extraProperties=builder.extraProperties;
  context=builder.context;
  edfilter=builder.dfilter;
  ifilter=builder.xfilter;
  customizer=builder.customizer;
  imptracker=new ImporterTracker();
}","private DynamicImporter(Builder builder){
  extraProperties=builder.extraProperties;
  context=builder.context;
  edfilter=builder.dfilter;
  ifilter=builder.imfilter;
  customizer=builder.customizer;
  imptracker=new ImporterTracker();
}",0.9936842105263158
6681,"public Builder importerFilter(String val) throws InvalidSyntaxException {
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(DEFAULT_IMPORTER_FILTER);
  sb.append(val);
  sb.append(""String_Node_Str"");
  return this;
}","public Builder importerFilter(String val) throws InvalidSyntaxException {
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(DEFAULT_IMPORTER_FILTER);
  sb.append(val);
  sb.append(""String_Node_Str"");
  imfilter=createFilter(sb.toString());
  return this;
}",0.9215686274509804
6682,"public Object doImport(ImporterService importer,EndpointDescription description,Map<String,Object> properties){
  ImportRegistration registration=importer.importService(description,properties);
  irefs.add(registration.getImportReference());
  return registration;
}","public Object doImport(ImporterService importer,EndpointDescription description,Map<String,Object> properties){
  ImportRegistration registration=importer.importService(description,properties);
  ImportReference iref=registration.getImportReference();
  if (iref != null) {
    irefs.add(registration.getImportReference());
  }
  return registration;
}",0.7928802588996764
6683,"public EndpointListenerTracker(BundleContext pContext,ImportRegistry impReg,ExportRegistry expReg){
  context=pContext;
  importReg=impReg;
  exportReg=expReg;
  tracker=new ServiceTracker(context,EndpointListener.class.getName(),this);
}","public EndpointListenerTracker(RoseMachineImpl pMachine){
  machine=pMachine;
  tracker=new ServiceTracker(machine.getContext(),EndpointListener.class.getName(),this);
}",0.6339066339066339
6684,"public Object addingService(ServiceReference reference){
  EndpointListener listener=(EndpointListener)context.getService(reference);
  Object ofilter=reference.getProperty(ENDPOINT_LISTENER_SCOPE);
  EndpointListerInterrest interrest=getEndpointListenerInterrest(reference);
  try {
switch (interrest) {
case ALL:
      exportReg.addEndpointListener(listener,(String)ofilter);
    importReg.addEndpointListener(listener,(String)ofilter);
  break;
case REMOTE:
exportReg.addEndpointListener(listener,(String)ofilter);
break;
case LOCAL:
exportReg.addEndpointListener(listener,(String)ofilter);
}
}
 catch (Exception e) {
importReg.removeEndpointListener(listener);
exportReg.removeEndpointListener(listener);
listener=null;
}
return new InterestedListener(listener,interrest);
}","public Object addingService(ServiceReference reference){
  EndpointListener listener=(EndpointListener)machine.getContext().getService(reference);
  Object ofilter=reference.getProperty(ENDPOINT_LISTENER_SCOPE);
  String sfilter=ofilter == null ? null : String.valueOf(ofilter);
  EndpointListerInterrest interrest=getEndpointListenerInterrest(reference);
  try {
    machine.addEndpointListener(listener,interrest,sfilter);
  }
 catch (  InvalidSyntaxException e) {
    machine.log(LOG_WARNING,""String_Node_Str"" + reference,e);
  }
  return new InterestedListener(listener,interrest);
}",0.4
6685,"public void removedService(ServiceReference reference,Object service){
  InterestedListener listener=(InterestedListener)service;
switch (listener.getInterest()) {
case ALL:
    importReg.removeEndpointListener(listener.getListener());
  exportReg.removeEndpointListener(listener.getListener());
break;
case REMOTE:
exportReg.removeEndpointListener(listener.getListener());
break;
case LOCAL:
importReg.removeEndpointListener(listener.getListener());
}
}","public void removedService(ServiceReference reference,Object service){
  InterestedListener listener=(InterestedListener)service;
  machine.removeEndpointListener(listener.getListener(),listener.getInterest());
}",0.4894894894894895
6686,"public void modifiedService(ServiceReference reference,Object service){
  InterestedListener listener=(InterestedListener)service;
  Object ofilter=reference.getProperty(ENDPOINT_LISTENER_SCOPE);
  try {
switch (listener.getInterest()) {
case ALL:
      exportReg.addEndpointListener(listener.getListener(),(String)ofilter);
    importReg.addEndpointListener(listener.getListener(),(String)ofilter);
  break;
case REMOTE:
exportReg.addEndpointListener(listener.getListener(),(String)ofilter);
break;
case LOCAL:
exportReg.addEndpointListener(listener.getListener(),(String)ofilter);
}
}
 catch (Exception e) {
importReg.removeEndpointListener(listener.getListener());
exportReg.removeEndpointListener(listener.getListener());
}
}","public void modifiedService(ServiceReference reference,Object service){
  InterestedListener listener=(InterestedListener)service;
  Object ofilter=reference.getProperty(ENDPOINT_LISTENER_SCOPE);
  String sfilter=ofilter == null ? null : String.valueOf(ofilter);
  try {
    machine.addEndpointListener(listener.getListener(),listener.getInterest(),sfilter);
  }
 catch (  InvalidSyntaxException e) {
    machine.log(LOG_WARNING,""String_Node_Str"" + reference,e);
  }
}",0.3692564745196324
6687,"public void log(int level,String message,Throwable exception){
  logger.log(level,message,exception);
}","protected void log(int level,String message,Throwable exception){
  logger.log(level,message,exception);
}",0.9473684210526316
6688,"public RoseMachineImpl(BundleContext pContext){
  properties=new Hashtable<String,Object>(4);
  registrations=new HashMap<Object,ServiceRegistration>(4);
  context=pContext;
  initProperties(context);
  importReg=new ImportRegistryImpl();
  exportReg=new ExportRegistryImpl(context);
  tracklistener=new EndpointListenerTracker(context,importReg,exportReg);
}","public RoseMachineImpl(BundleContext pContext){
  properties=new Hashtable<String,Object>(4);
  registrations=new HashMap<Object,ServiceRegistration>(4);
  context=pContext;
  initProperties(context);
  importReg=new ImportRegistryImpl();
  exportReg=new ExportRegistryImpl(context);
  tracklistener=new EndpointListenerTracker(this);
}",0.9553956834532374
6689,"@SuppressWarnings(""String_Node_Str"") public <T>T getServiceObject(Class<T> klass){
  ServiceReference sref=null;
  sref=context.getServiceReference(klass.getName());
  if (sref != null) {
    return (T)context.getService(sref);
  }
 else {
    return null;
  }
}","@SuppressWarnings(""String_Node_Str"") public <T>T getServiceObject(Class<T> klass){
  ServiceReference sref=null;
  sref=context.getServiceReference(klass.getName());
  if (sref != null) {
    T service=(T)context.getService(sref);
    context.ungetService(sref);
    return service;
  }
 else {
    return null;
  }
}",0.8808290155440415
6690,"public void close(){
  if (xref != null) {
    if (registrations.remove(xref.getExportedService(),this)) {
      getExportRegistry().remove(xref);
    }
    xref=null;
  }
}","public void close(){
  if (xref != null) {
    if (registrations.remove(xref.getExportedService(),this)) {
      getExportRegistry().remove(xref);
      destroyEndpoint(xref.getExportedEndpoint());
    }
    xref=null;
  }
}",0.871536523929471
6691,"@SuppressWarnings(""String_Node_Str"") @Bind(aggregate=true,optional=true,id=""String_Node_Str"") private void bindExportedEndpointListener(ExportedEndpointListener listener,Map<String,Object> properties){
  String filter=(String)properties.get(ENDPOINT_LISTENER_SCOPE);
  try {
    addEndpointListener(listener,filter);
  }
 catch (  Exception e) {
  }
}","@SuppressWarnings(""String_Node_Str"") @Bind(aggregate=true,optional=true,id=""String_Node_Str"") private void bindExportedEndpointListener(ExportedEndpointListener listener,Map<String,Object> properties){
  String filter=(String)properties.get(ENDPOINT_LISTENER_SCOPE);
  try {
    addEndpointListener(listener,filter);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9656121045392022
6692,"public static Point2D segmentSegmentIntersection(SegmentComponent seg1,SegmentComponent seg2){
  double x1=seg1.getFrom().getX(), y1=seg1.getFrom().getY();
  double x2=seg1.getTo().getX(), y2=seg1.getTo().getY();
  double x3=seg2.getFrom().getX(), y3=seg2.getFrom().getY();
  double x4=seg2.getTo().getX(), y4=seg2.getTo().getY();
  double denom=(y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
  double ua=((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denom;
  double ub=((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denom;
  if (ua < 0 || ua > 1 || ub < 0 || ub > 1)   return null;
  return new Point2D.Double(x1 + ua * (x2 - x1),y1 + ua * (y2 - y1));
}","public static Point2D segmentSegmentIntersection(SegmentComponent seg1,SegmentComponent seg2){
  double x1=seg1.getFrom().getX(), y1=seg1.getFrom().getY();
  double x2=seg1.getTo().getX(), y2=seg1.getTo().getY();
  double x3=seg2.getFrom().getX(), y3=seg2.getFrom().getY();
  double x4=seg2.getTo().getX(), y4=seg2.getTo().getY();
  double denom=(y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
  if (Math.abs(denom) <= .00001)   return null;
  double ua=((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denom;
  double ub=((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denom;
  return new Point2D.Double(x1 + ua * (x2 - x1),y1 + ua * (y2 - y1));
}",0.7307398932112891
6693,"public Shape truncateFrom(CorridorComponent comp){
  if (comp.getType() == Type.SEGMENT) {
    Point2D isect=ComponentIntersector.segmentSegmentIntersection(this,(SegmentComponent)comp);
    if (isect != null)     return new Line2D.Double(isect,segment_.getP2());
  }
  return getSegment();
}","@Override public Shape truncateFrom(CorridorComponent comp){
  if (comp.getType() == Type.SEGMENT) {
    Point2D isect=ComponentIntersector.segmentSegmentIntersection(this,(SegmentComponent)comp);
    if (isect != null)     return new Line2D.Double(isect,segment_.getP2());
  }
  return getSegment();
}",0.9831649831649832
6694,"public Point2D intersect(CorridorComponent comp){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public Point2D intersect(CorridorComponent comp){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9576271186440678
6695,"public Type getType(){
  return Type.SEGMENT;
}","@Override public Type getType(){
  return Type.SEGMENT;
}",0.903846153846154
6696,"public Shape truncateTo(CorridorComponent comp){
  if (comp.getType() == Type.SEGMENT) {
    Point2D isect=ComponentIntersector.segmentSegmentIntersection(this,(SegmentComponent)comp);
    if (isect != null)     return new Line2D.Double(segment_.getP1(),isect);
  }
  return getSegment();
}","@Override public Shape truncateTo(CorridorComponent comp){
  if (comp.getType() == Type.SEGMENT) {
    Point2D isect=ComponentIntersector.segmentSegmentIntersection(this,(SegmentComponent)comp);
    if (isect != null)     return new Line2D.Double(segment_.getP1(),isect);
  }
  return getSegment();
}",0.9830508474576272
6697,"public Shape getShape(){
  return getSegment();
}","@Override public Shape getShape(){
  return getSegment();
}",0.9074074074074074
6698,"public double getOffset(AnchorPoint anchor){
  if (corr_.fPoint() == anchor)   return line_.getCorridorInfo(corr_).offsetFrom_;
  if (corr_.tPoint() == anchor)   return line_.getCorridorInfo(corr_).offsetTo_;
  return -1;
}","public double getOffset(AnchorPoint anchor){
  if (corr_.fPoint() == anchor)   return line_.getCorridorInfo(corr_).offsetFrom_;
  if (corr_.tPoint() == anchor)   return -line_.getCorridorInfo(corr_).offsetTo_;
  return -1;
}",0.9977628635346756
6699,"private void processAnchors(TSNetwork network){
  for (  AnchorPoint anchor : network.getAnchorPoints()) {
    Map<Integer,Set<Double>> offsets=new HashMap<Integer,Set<Double>>();
    for (    Map.Entry<Integer,Bundle> entry : anchor.getBundles().entrySet()) {
      Bundle bundle=entry.getValue();
      int theta=entry.getKey();
      for (      LineInfo li : bundle.lines_) {
        double offset=li.getOffset(anchor);
        int rotTheta=this.rotateTheta(theta,(li.corr_.fPoint() == anchor ? -90 : 90));
        if (!offsets.containsKey(rotTheta)) {
          offsets.put(rotTheta,new HashSet<Double>());
        }
        offsets.get(rotTheta).add(offset);
      }
    }
    Map<Integer,Double> meanOffsets=new HashMap<Integer,Double>();
    List<Line2D> lines=new ArrayList<Line2D>();
    for (    int rt : offsets.keySet()) {
      double maxOffset=0, minOffset=Double.MAX_VALUE;
      for (      double offset : offsets.get(rt)) {
        minOffset=Math.min(minOffset,offset);
        maxOffset=Math.max(maxOffset,offset);
      }
      double meanOffset=(minOffset + maxOffset) / 2;
      int oppTheta=this.oppositeTheta(rt);
      if (meanOffsets.containsKey(oppTheta) && meanOffsets.get(oppTheta) == meanOffset) {
      }
 else {
        meanOffsets.put(rt,meanOffset);
        double rtRad=Math.toRadians(rt);
        double x1=anchor.getX() + meanOffset * Math.cos(rtRad);
        double y1=anchor.getY() + meanOffset * Math.sin(rtRad);
        double x2=x1 + Math.cos(rtRad + Math.PI / 2);
        double y2=y1 + Math.sin(rtRad + Math.PI / 2);
        Line2D line=new Line2D.Double(x1,y1,x2,y2);
        lines.add(line);
      }
    }
    anchor.clearBundleOffsets();
    if (lines.size() == 1) {
      anchor.addBundleOffset(new Point2D.Double(lines.get(0).getP1().getX() - anchor.getX(),lines.get(0).getP1().getY() - anchor.getY()));
    }
 else {
      for (int a=0; a < lines.size(); a++) {
        for (int b=a + 1; b < lines.size(); b++) {
          Point2D isect=FPUtil.lineLineIntersection(lines.get(a),lines.get(b));
          if (isect != null) {
            Point2D.Double isectOffset=new Point2D.Double(isect.getX() - anchor.getX(),isect.getY() - anchor.getY());
            anchor.addBundleOffset(isectOffset);
          }
 else {
            anchor.addBundleOffset(new Point2D.Double(lines.get(a).getP1().getX() - anchor.getX(),lines.get(a).getP1().getY() - anchor.getY()));
            anchor.addBundleOffset(new Point2D.Double(lines.get(b).getP1().getX() - anchor.getX(),lines.get(b).getP1().getY() - anchor.getY()));
          }
        }
      }
    }
    anchor.computeOffsetCenter();
  }
}","private void processAnchors(TSNetwork network){
  for (  AnchorPoint anchor : network.getAnchorPoints()) {
    Map<Integer,Set<Double>> offsets=new HashMap<Integer,Set<Double>>();
    for (    Map.Entry<Integer,Bundle> entry : anchor.getBundles().entrySet()) {
      Bundle bundle=entry.getValue();
      int theta=entry.getKey();
      for (      LineInfo li : bundle.lines_) {
        double offset=li.getOffset(anchor);
        int rotTheta=this.rotateTheta(theta,-90);
        if (!offsets.containsKey(rotTheta)) {
          offsets.put(rotTheta,new HashSet<Double>());
        }
        offsets.get(rotTheta).add(offset);
      }
    }
    Map<Integer,Double> meanOffsets=new HashMap<Integer,Double>();
    List<Line2D> lines=new ArrayList<Line2D>();
    for (    int rt : offsets.keySet()) {
      double maxOffset=-Double.MAX_VALUE, minOffset=Double.MAX_VALUE;
      for (      double offset : offsets.get(rt)) {
        minOffset=Math.min(minOffset,offset);
        maxOffset=Math.max(maxOffset,offset);
      }
      double meanOffset=(minOffset + maxOffset) / 2;
      int oppTheta=this.oppositeTheta(rt);
      if (meanOffsets.containsKey(oppTheta) && -meanOffsets.get(oppTheta) == meanOffset) {
      }
 else {
        meanOffsets.put(rt,meanOffset);
        double rtRad=Math.toRadians(rt);
        double x1=anchor.getX() + meanOffset * Math.cos(rtRad);
        double y1=anchor.getY() + meanOffset * Math.sin(rtRad);
        double x2=x1 + Math.cos(rtRad + Math.PI / 2);
        double y2=y1 + Math.sin(rtRad + Math.PI / 2);
        Line2D line=new Line2D.Double(x1,y1,x2,y2);
        lines.add(line);
      }
    }
    anchor.clearBundleOffsets();
    if (lines.size() == 1) {
      anchor.addBundleOffset(new Point2D.Double(lines.get(0).getP1().getX() - anchor.getX(),lines.get(0).getP1().getY() - anchor.getY()));
    }
 else {
      for (int a=0; a < lines.size(); a++) {
        for (int b=a + 1; b < lines.size(); b++) {
          Point2D isect=FPUtil.lineLineIntersection(lines.get(a),lines.get(b));
          if (isect != null) {
            Point2D.Double isectOffset=new Point2D.Double(isect.getX() - anchor.getX(),isect.getY() - anchor.getY());
            anchor.addBundleOffset(isectOffset);
          }
 else {
            anchor.addBundleOffset(new Point2D.Double(lines.get(a).getP1().getX() - anchor.getX(),lines.get(a).getP1().getY() - anchor.getY()));
            anchor.addBundleOffset(new Point2D.Double(lines.get(b).getP1().getX() - anchor.getX(),lines.get(b).getP1().getY() - anchor.getY()));
          }
        }
      }
    }
    anchor.computeOffsetCenter();
  }
}",0.9847036328871892
6700,"@Override public void drawStop(TSCanvas canvas){
  Graphics2D g2d=canvas.getGraphics2D();
  double rs=canvas.getCoordinates().dxToWorld(radius_);
  Ellipse2D e=new Ellipse2D.Double(stop_.getWorldX() - rs,stop_.getWorldY() - rs,rs * 2,rs * 2);
  Path2D p=new Path2D.Double(e);
  p.transform(canvas.getCoordinates().getScaleTransform());
  p.transform(canvas.getCoordinates().getTranslateTransform());
  Point2D offset=stop_.getScreenOffset();
  if (offset != null) {
    p.transform(AffineTransform.getTranslateInstance(offset.getX(),-offset.getY()));
  }
  g2d.setColor(template_.getFillColor());
  g2d.fill(p);
  g2d.setColor(template_.getBorderColor());
  g2d.setStroke(new BasicStroke(template_.getBorderWeight()));
  g2d.draw(p);
}","@Override public void drawStop(TSCanvas canvas){
  Graphics2D g2d=canvas.getGraphics2D();
  double rs=canvas.getCoordinates().dxToWorld(radius_);
  Ellipse2D e=new Ellipse2D.Double(stop_.getWorldX() - rs,stop_.getWorldY() - rs,rs * 2,rs * 2);
  Path2D p=new Path2D.Double(e);
  p.transform(canvas.getCoordinates().getScaleTransform());
  p.transform(canvas.getCoordinates().getTranslateTransform());
  p.transform(AffineTransform.getTranslateInstance(stop_.getScreenOffset().getX(),-stop_.getScreenOffset().getY()));
  g2d.setColor(template_.getFillColor());
  g2d.fill(p);
  g2d.setColor(template_.getBorderColor());
  g2d.setStroke(new BasicStroke(template_.getBorderWeight()));
  g2d.draw(p);
}",0.6256983240223464
6701,"@Override public void drawHighlight(TSCanvas canvas,Color color){
  Graphics2D g2d=canvas.getGraphics2D();
  double rs=canvas.getCoordinates().dxToWorld(radius_ + 5);
  Ellipse2D e=new Ellipse2D.Double(stop_.getWorldX() - rs,stop_.getWorldY() - rs,rs * 2,rs * 2);
  Path2D p=new Path2D.Double(e);
  p.transform(canvas.getCoordinates().getScaleTransform());
  p.transform(canvas.getCoordinates().getTranslateTransform());
  Point2D offset=stop_.getScreenOffset();
  if (offset != null) {
    p.transform(AffineTransform.getTranslateInstance(offset.getX(),-offset.getY()));
  }
  g2d.setColor(color);
  g2d.fill(p);
}","@Override public void drawHighlight(TSCanvas canvas,Color color){
  Graphics2D g2d=canvas.getGraphics2D();
  double rs=canvas.getCoordinates().dxToWorld(radius_ + 5);
  Ellipse2D e=new Ellipse2D.Double(stop_.getWorldX() - rs,stop_.getWorldY() - rs,rs * 2,rs * 2);
  Path2D p=new Path2D.Double(e);
  p.transform(canvas.getCoordinates().getScaleTransform());
  p.transform(canvas.getCoordinates().getTranslateTransform());
  p.transform(AffineTransform.getTranslateInstance(stop_.getScreenOffset().getX(),-stop_.getScreenOffset().getY()));
  g2d.setColor(color);
  g2d.fill(p);
}",0.7869127516778524
6702,"public Bundler(TSNetwork network){
  network.clearBundlerData();
  initBundles(network);
  initComparisons(network);
  assignOffsets(network);
  constructStraightaways(network);
  processStraightaways(network);
  processAnchors(network);
}","public Bundler(TSNetwork network){
  network.clearBundlerData();
  initBundles(network);
  initComparisons(network);
  assignOffsets(network);
  constructStraightaways(network);
  processStraightaways(network);
  processAnchors(network);
  processCorridors(network);
}",0.9428007889546351
6703,"public void print(){
}","public void print(TSNetwork network){
  for (  Line line : network.getLines()) {
    System.out.println(""String_Node_Str"" + line.getName());
    for (    Corridor corr : line.getCorridors()) {
      System.out.println(""String_Node_Str"" + corr.getID() + ""String_Node_Str""+ line.getCorridorInfo(corr).offsetFrom_+ ""String_Node_Str""+ line.getCorridorInfo(corr).offsetTo_);
    }
  }
}",0.1091811414392059
6704,"public List<CorridorComponent> getOffsetComponents(int offsetFrom,int offsetTo,MapCoordinates coords,boolean fw){
  List<CorridorComponent> comps=new LinkedList<CorridorComponent>();
  Point2D fPoint=new Point2D.Double(x1(),y1()), tPoint=new Point2D.Double(x2(),y2());
  if (offsetFrom != 0 || offsetTo != 0)   applyOffsets(fPoint,tPoint,offsetFrom,offsetTo,coords);
  double x1=fPoint.getX(), y1=fPoint.getY();
  double x2=tPoint.getX(), y2=tPoint.getY();
  if (isStraight()) {
    Point2D mid=new Point2D.Double((fPoint.getX() + tPoint.getX()) / 2,(fPoint.getY() + tPoint.getY()) / 2);
    if (fw) {
      comps.add(new SegmentComponent(fPoint,mid));
      comps.add(new SegmentComponent(mid,tPoint));
    }
 else {
      comps.add(new SegmentComponent(tPoint,mid));
      comps.add(new SegmentComponent(mid,fPoint));
    }
  }
 else   if (offsetFrom == 0 && offsetTo == 0) {
    comps.add(new SegmentComponent(fw ? fPoint : tPoint,fw ? defaultArcFW_.getStartPoint() : defaultArcBW_.getStartPoint()));
    comps.add(new ArcComponent(fw ? defaultArcFW_ : defaultArcBW_));
    comps.add(new SegmentComponent(fw ? defaultArcFW_.getEndPoint() : defaultArcBW_.getEndPoint(),fw ? tPoint : fPoint));
  }
 else {
    Point2D.Double e=constructElbow(x1,y1,x2,y2);
    double l=radiusW_ / Math.tan(thetaR_ / 2);
    double rw=radiusW_;
    double shortest=Math.min(FPUtil.magnitude(x1,y1,e.x,e.y),FPUtil.magnitude(x2,y2,e.x,e.y));
    if (shortest < l) {
      l=shortest;
      rw=l * Math.tan(thetaR_ / 2);
    }
    Arc2D arc=fw ? constructArcFW(x1,y1,x2,y2,e,l,rw) : constructArcBW(x1,y1,x2,y2,e,l,rw);
    comps.add(new SegmentComponent(fw ? fPoint : tPoint,fw ? arc.getStartPoint() : arc.getStartPoint()));
    comps.add(new ArcComponent(arc));
    comps.add(new SegmentComponent(fw ? arc.getEndPoint() : arc.getEndPoint(),fw ? tPoint : fPoint));
  }
  return comps;
}","public List<CorridorComponent> getOffsetComponents(int offsetFrom,int offsetTo,MapCoordinates coords,boolean fw){
  List<CorridorComponent> comps=new LinkedList<CorridorComponent>();
  Point2D fPoint=new Point2D.Double(x1(),y1()), tPoint=new Point2D.Double(x2(),y2());
  if (offsetFrom != 0 || offsetTo != 0)   applyOffsets(fPoint,tPoint,offsetFrom,offsetTo,coords);
  double x1=fPoint.getX(), y1=fPoint.getY();
  double x2=tPoint.getX(), y2=tPoint.getY();
  if (isStraight()) {
    Point2D mid=new Point2D.Double((fPoint.getX() + tPoint.getX()) / 2,(fPoint.getY() + tPoint.getY()) / 2);
    if (fw) {
      comps.add(new SegmentComponent(fPoint,mid));
      comps.add(new SegmentComponent(mid,tPoint));
    }
 else {
      comps.add(new SegmentComponent(tPoint,mid));
      comps.add(new SegmentComponent(mid,fPoint));
    }
  }
 else   if (offsetFrom == 0 && offsetTo == 0) {
    comps.add(new SegmentComponent(fw ? fPoint : tPoint,fw ? defaultArcFW_.getStartPoint() : defaultArcBW_.getStartPoint()));
    comps.add(new ArcComponent(fw ? defaultArcFW_ : defaultArcBW_));
    comps.add(new SegmentComponent(fw ? defaultArcFW_.getEndPoint() : defaultArcBW_.getEndPoint(),fw ? tPoint : fPoint));
  }
 else {
    Arc2D defArc=fw ? defaultArcFW_ : defaultArcBW_;
    Point2D.Double e=constructElbow(x1,y1,x2,y2);
    int ccw=Line2D.relativeCCW(x1,y1,e.x,e.y,x2,y2);
    double combinedOffset=(offsetFrom + offsetTo) / 2;
    double rw=radiusW_ - ccw * coords.dxToWorld(combinedOffset - this.avgOffset_);
    double halfTheta=thetaR_ / 2;
    double l=radiusW_ / Math.tan(halfTheta);
    double shortest=Math.min(FPUtil.magnitude(x1,y1,e.x,e.y),FPUtil.magnitude(x2,y2,e.x,e.y));
    if (shortest < l)     rw=shortest * Math.tan(halfTheta);
    double h=rw / Math.sin(halfTheta);
    double hAngle=FPUtil.getTheta(x2 - e.x,y2 - e.y) - ccw * halfTheta;
    double cx=e.x + h * Math.cos(hAngle);
    double cy=e.y + h * Math.sin(hAngle);
    Arc2D arc=new Arc2D.Double(cx - rw,cy - rw,rw * 2,rw * 2,defArc.getAngleStart(),defArc.getAngleExtent(),Arc2D.OPEN);
    comps.add(new SegmentComponent(fw ? fPoint : tPoint,fw ? arc.getStartPoint() : arc.getStartPoint()));
    comps.add(new ArcComponent(arc));
    comps.add(new SegmentComponent(fw ? arc.getEndPoint() : arc.getEndPoint(),fw ? tPoint : fPoint));
  }
  return comps;
}",0.6939068100358423
6705,"public Path2D getPathBW(int offsetFrom,int offsetTo,Line2D prevLine,Line2D nextLine,MapCoordinates coords){
  double tol=.0001;
  Path2D path=new Path2D.Double();
  Point2D fPoint=new Point2D.Double(x1(),y1()), tPoint=new Point2D.Double(x2(),y2());
  if (offsetFrom != 0 || offsetTo != 0)   applyOffsets(fPoint,tPoint,offsetFrom,offsetTo,coords);
  double x1=fPoint.getX(), y1=fPoint.getY();
  double x2=tPoint.getX(), y2=tPoint.getY();
  if (isStraight()) {
    Line2D thisLine=new Line2D.Double(x1,y1,x2,y2);
    double thisTheta=FPUtil.getTheta(thisLine);
    if (thisTheta >= Math.PI)     thisTheta-=Math.PI;
    if (prevLine != null) {
      double prevTheta=FPUtil.getTheta(prevLine);
      if (prevTheta >= Math.PI)       prevTheta-=Math.PI;
      if (Math.abs(prevTheta - thisTheta) >= tol) {
        Point2D isect=FPUtil.lineLineIntersection(prevLine,thisLine);
        if (isect != null) {
          x2=isect.getX();
          y2=isect.getY();
        }
      }
    }
    if (nextLine != null) {
      double nextTheta=FPUtil.getTheta(nextLine);
      if (nextTheta >= Math.PI)       nextTheta-=Math.PI;
      if (Math.abs(nextTheta - thisTheta) >= tol) {
        Point2D isect=FPUtil.lineLineIntersection(nextLine,thisLine);
        if (isect != null) {
          x1=isect.getX();
          y1=isect.getY();
        }
      }
    }
    path.moveTo(x2,y2);
    path.lineTo(x1,y1);
    path.transform(coords.getScaleTransform());
    path.transform(coords.getTranslateTransform());
    return path;
  }
  path.moveTo(x2,y2);
  if (offsetFrom == 0 && offsetTo == 0) {
    path.append(defaultArcBW_,true);
    path.lineTo(x1,y1);
  }
 else {
    Point2D.Double e=constructElbow(x1,y1,x2,y2);
    double l=radiusW_ / Math.tan(thetaR_ / 2);
    double rw=radiusW_;
    double shortest=Math.min(FPUtil.magnitude(x1,y1,e.x,e.y),FPUtil.magnitude(x2,y2,e.x,e.y));
    if (shortest < l) {
      l=shortest;
      rw=l * Math.tan(thetaR_ / 2);
    }
    Arc2D arc=constructArcBW(x1,y1,x2,y2,e,l,rw);
    path.append(arc,true);
    path.lineTo(x1,y1);
  }
  path.transform(coords.getScaleTransform());
  path.transform(coords.getTranslateTransform());
  return path;
}","public Path2D getPathBW(int offsetFrom,int offsetTo,Line2D prevLine,Line2D nextLine,MapCoordinates coords){
  double tol=.0001;
  Path2D path=new Path2D.Double();
  Point2D fPoint=new Point2D.Double(x1(),y1()), tPoint=new Point2D.Double(x2(),y2());
  if (offsetFrom != 0 || offsetTo != 0)   applyOffsets(fPoint,tPoint,offsetFrom,offsetTo,coords);
  double x1=fPoint.getX(), y1=fPoint.getY();
  double x2=tPoint.getX(), y2=tPoint.getY();
  if (isStraight()) {
    Line2D thisLine=new Line2D.Double(x1,y1,x2,y2);
    double thisTheta=FPUtil.getTheta(thisLine);
    if (thisTheta >= Math.PI)     thisTheta-=Math.PI;
    if (prevLine != null) {
      double prevTheta=FPUtil.getTheta(prevLine);
      if (prevTheta >= Math.PI)       prevTheta-=Math.PI;
      if (Math.abs(prevTheta - thisTheta) >= tol) {
        Point2D isect=FPUtil.lineLineIntersection(prevLine,thisLine);
        if (isect != null) {
          x2=isect.getX();
          y2=isect.getY();
        }
      }
    }
    if (nextLine != null) {
      double nextTheta=FPUtil.getTheta(nextLine);
      if (nextTheta >= Math.PI)       nextTheta-=Math.PI;
      if (Math.abs(nextTheta - thisTheta) >= tol) {
        Point2D isect=FPUtil.lineLineIntersection(nextLine,thisLine);
        if (isect != null) {
          x1=isect.getX();
          y1=isect.getY();
        }
      }
    }
    path.moveTo(x2,y2);
    path.lineTo(x1,y1);
    path.transform(coords.getScaleTransform());
    path.transform(coords.getTranslateTransform());
    return path;
  }
  path.moveTo(x2,y2);
  if (offsetFrom == 0 && offsetTo == 0) {
    path.append(defaultArcBW_,true);
    path.lineTo(x1,y1);
  }
 else {
    Point2D.Double e=constructElbow(x1,y1,x2,y2);
    double l=radiusW_ / Math.tan(thetaR_ / 2);
    double rw=radiusW_;
    double shortest=Math.min(FPUtil.magnitude(x1,y1,e.x,e.y),FPUtil.magnitude(x2,y2,e.x,e.y));
    if (shortest < l) {
      l=shortest;
      rw=l * Math.tan(thetaR_ / 2);
    }
    Arc2D arc=constructArcBW(x1,y1,x2,y2,e,l,rw);
    System.out.println(""String_Node_Str"" + arc.toString());
    path.append(arc,true);
    path.lineTo(x1,y1);
  }
  path.transform(coords.getScaleTransform());
  path.transform(coords.getTranslateTransform());
  return path;
}",0.9863387978142076
6706,"public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  try {
    Player player=(Player)sender;
    String command=commandArg.getName().toLowerCase();
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"")) {
        if (arg.length >= 1 && arg.length <= 2) {
          Pattern p=Pattern.compile(""String_Node_Str"");
          Matcher m=p.matcher(strip(arg[0]));
          if (m.matches()) {
            if (arg.length == 2) {
              giveItemId(arg[0],strip(arg[1]),player);
            }
 else {
              giveItemId(arg[0],""String_Node_Str"",player);
            }
          }
 else {
            giveItemName(arg[0],strip(arg[1]),player);
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemDeny(Integer.valueOf(strip(arg[0]))))) {
                if (arg[1] != null) {
                  giveItemId(arg[0],arg[1],player);
                }
 else {
                  giveItemId(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemDeny(Integer.valueOf(strip(arg[0]))))) {
                if (arg[1] != null) {
                  giveItemName(arg[0],arg[1],player);
                }
 else {
                  giveItemName(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemAllow(Integer.valueOf(strip(arg[0]))))) {
                giveItemId(arg[0],arg[1],player);
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemAllow(Integer.valueOf(strip(arg[0]))))) {
                giveItemName(arg[0],arg[1],player);
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      return true;
    }
    return true;
  }
 catch (  CommandException e) {
    e.printStackTrace();
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  try {
    Player player=(Player)sender;
    String command=commandArg.getName().toLowerCase();
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"")) {
        if (arg.length >= 1 && arg.length <= 2) {
          Pattern p=Pattern.compile(""String_Node_Str"");
          Matcher m=p.matcher(strip(arg[0]));
          if (m.matches()) {
            if (arg.length == 2) {
              giveItemId(arg[0],arg[1],player);
            }
 else {
              giveItemId(arg[0],""String_Node_Str"",player);
            }
          }
 else {
            giveItemName(arg[0],arg[1],player);
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemDeny(Integer.valueOf(strip(arg[0]))))) {
                if (arg[1] != null) {
                  giveItemId(arg[0],arg[1],player);
                }
 else {
                  giveItemId(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemDeny(Integer.valueOf(strip(arg[0]))))) {
                if (arg[1] != null) {
                  giveItemName(arg[0],arg[1],player);
                }
 else {
                  giveItemName(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemAllow(Integer.valueOf(strip(arg[0]))))) {
                giveItemId(arg[0],arg[1],player);
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemAllow(Integer.valueOf(strip(arg[0]))))) {
                giveItemName(arg[0],arg[1],player);
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      return true;
    }
    return true;
  }
 catch (  CommandException e) {
    e.printStackTrace();
  }
  return true;
}",0.9980124929017604
6707,"public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  try {
    Player player=(Player)sender;
    String command=commandArg.getName().toLowerCase();
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"")) {
        if (arg.length >= 1 && arg.length <= 2) {
          Pattern p=Pattern.compile(""String_Node_Str"");
          Matcher m=p.matcher(strip(arg[0]));
          if (m.matches()) {
            if (arg.length == 2) {
              giveItemId(arg[0],arg[1],player);
            }
 else {
              giveItemId(arg[0],""String_Node_Str"",player);
            }
          }
 else {
            if (arg.length == 2) {
              giveItemName(arg[0],arg[1],player);
            }
 else {
              giveItemName(arg[0],""String_Node_Str"",player);
            }
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemDeny(Integer.valueOf(arg[0])))) {
                if (arg[1] != null) {
                  giveItemId(arg[0],arg[1],player);
                }
 else {
                  giveItemId(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemDeny(items.get(arg[0])))) {
                if (arg[1] != null) {
                  giveItemName(arg[0],arg[1],player);
                }
 else {
                  giveItemName(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemAllow(Integer.valueOf(arg[0])))) {
                if (arg[1] != null) {
                  giveItemId(arg[0],arg[1],player);
                }
 else {
                  giveItemId(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemAllow(items.get(arg[0])))) {
                if (arg[1] != null) {
                  giveItemName(arg[0],arg[1],player);
                }
 else {
                  giveItemName(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      return true;
    }
    return true;
  }
 catch (  CommandException e) {
    e.printStackTrace();
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  try {
    Player player=(Player)sender;
    String command=commandArg.getName().toLowerCase();
    try {
      if (command.equalsIgnoreCase(""String_Node_Str"")) {
        if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(strip(arg[0]));
            if (m.matches()) {
              if (arg.length == 2) {
                giveItemId(arg[0],arg[1],player);
              }
 else {
                giveItemId(arg[0],""String_Node_Str"",player);
              }
            }
 else {
              if (arg.length == 2) {
                giveItemName(arg[0],arg[1],player);
              }
 else {
                giveItemName(arg[0],""String_Node_Str"",player);
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
          }
        }
        if (gimme.Permissions.has(player,""String_Node_Str"")) {
          if (!gimme.Permissions.has(player,""String_Node_Str"")) {
            if (arg.length >= 1 && arg.length <= 2) {
              Pattern p=Pattern.compile(""String_Node_Str"");
              Matcher m=p.matcher(arg[0]);
              if (m.matches()) {
                if (!(itemDeny(Integer.valueOf(arg[0])))) {
                  if (arg[1] != null) {
                    giveItemId(arg[0],arg[1],player);
                  }
 else {
                    giveItemId(arg[0],""String_Node_Str"",player);
                  }
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
 else {
                if (!(itemDeny(items.get(arg[0])))) {
                  if (arg[1] != null) {
                    giveItemName(arg[0],arg[1],player);
                  }
 else {
                    giveItemName(arg[0],""String_Node_Str"",player);
                  }
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
            }
 else {
              player.sendMessage(""String_Node_Str"");
              return false;
            }
          }
        }
        if (gimme.Permissions.has(player,""String_Node_Str"")) {
          if (!gimme.Permissions.has(player,""String_Node_Str"")) {
            if (arg.length >= 1 && arg.length <= 2) {
              Pattern p=Pattern.compile(""String_Node_Str"");
              Matcher m=p.matcher(arg[0]);
              if (m.matches()) {
                if (!(itemAllow(Integer.valueOf(arg[0])))) {
                  if (arg[1] != null) {
                    giveItemId(arg[0],arg[1],player);
                  }
 else {
                    giveItemId(arg[0],""String_Node_Str"",player);
                  }
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
 else {
                if (!(itemAllow(items.get(arg[0])))) {
                  if (arg[1] != null) {
                    giveItemName(arg[0],arg[1],player);
                  }
 else {
                    giveItemName(arg[0],""String_Node_Str"",player);
                  }
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
            }
 else {
              player.sendMessage(""String_Node_Str"");
              return false;
            }
          }
        }
        return true;
      }
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
    return true;
  }
 catch (  CommandException e) {
    e.printStackTrace();
  }
  return true;
}",0.8631526849789656
6708,"public void giveItemName(String item,String amount,Player player){
  ItemStack itemstack;
  String clone=item;
  PlayerInventory inventory=player.getInventory();
  if (item.contains(""String_Node_Str"")) {
    String[] split=clone.split(""String_Node_Str"");
    itemstack=new ItemStack(items.get(split[0].toLowerCase()));
    itemstack.setDurability(Short.parseShort(split[1]));
    player.sendMessage(""String_Node_Str"");
    itemstack.setAmount(Integer.parseInt(amount));
    inventory.addItem(itemstack);
  }
 else {
    itemstack=new ItemStack(items.get(item.toLowerCase()));
    itemstack.setAmount(Integer.parseInt(amount));
    player.sendMessage(""String_Node_Str"");
    inventory.addItem(itemstack);
  }
}","public void giveItemName(String item,String amount,Player player){
  ItemStack itemstack;
  String clone=item;
  PlayerInventory inventory=player.getInventory();
  if (item.contains(""String_Node_Str"")) {
    String[] split=clone.split(""String_Node_Str"");
    if (!items.containsKey(split[0].toLowerCase())) {
      itemstack=new ItemStack(items.get(split[0].toLowerCase()));
      itemstack.setDurability(Short.parseShort(split[1]));
      player.sendMessage(""String_Node_Str"");
      itemstack.setAmount(Integer.parseInt(amount));
      inventory.addItem(itemstack);
    }
 else {
      player.sendMessage(""String_Node_Str"" + split[0]);
    }
  }
 else {
    if (!items.containsKey(item.toLowerCase())) {
      itemstack=new ItemStack(items.get(item.toLowerCase()));
      itemstack.setAmount(Integer.parseInt(amount));
      player.sendMessage(""String_Node_Str"");
      inventory.addItem(itemstack);
    }
 else {
      player.sendMessage(""String_Node_Str"" + item);
    }
  }
}",0.7997630331753555
6709,"public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  try {
    Player player=(Player)sender;
    String command=commandArg.getName().toLowerCase();
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"")) {
        if (arg.length >= 1 && arg.length <= 2) {
          Pattern p=Pattern.compile(""String_Node_Str"");
          Matcher m=p.matcher(strip(arg[0]));
          if (m.matches()) {
            if (arg.length == 2) {
              giveItemId(arg[0],arg[1],player);
            }
 else {
              giveItemId(arg[0],""String_Node_Str"",player);
            }
          }
 else {
            if (arg.length == 2) {
              giveItemName(arg[0],arg[1],player);
            }
 else {
              giveItemName(arg[0],""String_Node_Str"",player);
            }
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemDeny(Integer.valueOf(arg[0])))) {
                if (arg[1] != null) {
                  giveItemId(arg[0],arg[1],player);
                }
 else {
                  giveItemId(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemDeny(Integer.valueOf(arg[0])))) {
                if (arg[1] != null) {
                  giveItemName(arg[0],arg[1],player);
                }
 else {
                  giveItemName(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemAllow(Integer.valueOf(strip(arg[0]))))) {
                if (arg[1] != null) {
                  giveItemId(arg[0],arg[1],player);
                }
 else {
                  giveItemId(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemAllow(Integer.valueOf(strip(arg[0]))))) {
                if (arg[1] != null) {
                  giveItemName(arg[0],arg[1],player);
                }
 else {
                  giveItemName(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      return true;
    }
    return true;
  }
 catch (  CommandException e) {
    e.printStackTrace();
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  try {
    Player player=(Player)sender;
    String command=commandArg.getName().toLowerCase();
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"")) {
        if (arg.length >= 1 && arg.length <= 2) {
          Pattern p=Pattern.compile(""String_Node_Str"");
          Matcher m=p.matcher(strip(arg[0]));
          if (m.matches()) {
            if (arg.length == 2) {
              giveItemId(arg[0],arg[1],player);
            }
 else {
              giveItemId(arg[0],""String_Node_Str"",player);
            }
          }
 else {
            if (arg.length == 2) {
              giveItemName(arg[0],arg[1],player);
            }
 else {
              giveItemName(arg[0],""String_Node_Str"",player);
            }
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemDeny(Integer.valueOf(arg[0])))) {
                if (arg[1] != null) {
                  giveItemId(arg[0],arg[1],player);
                }
 else {
                  giveItemId(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemDeny(items.get(arg[0])))) {
                if (arg[1] != null) {
                  giveItemName(arg[0],arg[1],player);
                }
 else {
                  giveItemName(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemAllow(Integer.valueOf(arg[0])))) {
                if (arg[1] != null) {
                  giveItemId(arg[0],arg[1],player);
                }
 else {
                  giveItemId(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemAllow(items.get(arg[0])))) {
                if (arg[1] != null) {
                  giveItemName(arg[0],arg[1],player);
                }
 else {
                  giveItemName(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      return true;
    }
    return true;
  }
 catch (  CommandException e) {
    e.printStackTrace();
  }
  return true;
}",0.9920877998979072
6710,"public void giveItemName(String item,String amount,Player player){
  ItemStack itemstack;
  String clone=item;
  PlayerInventory inventory=player.getInventory();
  if (item.contains(""String_Node_Str"")) {
    String[] split=clone.split(""String_Node_Str"");
    itemstack=new ItemStack(items.get(strip(split[0]).toLowerCase()));
    itemstack.setDurability(Short.parseShort(split[1]));
    player.sendMessage(""String_Node_Str"");
    itemstack.setAmount(Integer.parseInt(amount));
    inventory.addItem(itemstack);
  }
 else {
    itemstack=new ItemStack(items.get(item.toLowerCase()));
    itemstack.setAmount(Integer.parseInt(amount));
    player.sendMessage(""String_Node_Str"");
    inventory.addItem(itemstack);
  }
}","public void giveItemName(String item,String amount,Player player){
  ItemStack itemstack;
  String clone=item;
  PlayerInventory inventory=player.getInventory();
  if (item.contains(""String_Node_Str"")) {
    String[] split=clone.split(""String_Node_Str"");
    itemstack=new ItemStack(items.get(split[0].toLowerCase()));
    itemstack.setDurability(Short.parseShort(split[1]));
    player.sendMessage(""String_Node_Str"");
    itemstack.setAmount(Integer.parseInt(amount));
    inventory.addItem(itemstack);
  }
 else {
    itemstack=new ItemStack(items.get(item.toLowerCase()));
    itemstack.setAmount(Integer.parseInt(amount));
    player.sendMessage(""String_Node_Str"");
    inventory.addItem(itemstack);
  }
}",0.9950877192982456
6711,"public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  try {
    Player player=(Player)sender;
    PlayerInventory inventory=player.getInventory();
    String command=commandArg.getName().toLowerCase();
    ItemStack itemstack;
    MaterialData itemdata;
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (gimme.Permissions.has(player,""String_Node_Str"") || gimme.Permissions.has(player,""String_Node_Str"") || (gimme.Permissions.has(player,""String_Node_Str""))) {
        if (arg.length >= 1 && arg.length <= 2) {
          Pattern p=Pattern.compile(""String_Node_Str"");
          Matcher m=p.matcher(arg[0]);
          if (m.matches()) {
            if (arg[0].contains(""String_Node_Str"")) {
              String clone=arg[0];
              String[] split=clone.split(""String_Node_Str"");
              itemstack=new ItemStack(Integer.parseInt(split[0]));
              itemdata=new MaterialData(Integer.parseInt(split[1]));
              itemstack.setData(itemdata);
              if (arg.length == 1) {
                itemstack.setAmount(amount);
              }
              if (arg.length == 2) {
                itemstack.setAmount(Integer.parseInt(arg[1]));
              }
              player.sendMessage(""String_Node_Str"");
              inventory.addItem(itemstack);
            }
 else {
              itemstack=new ItemStack(Integer.parseInt(arg[0]));
              if (arg.length == 1) {
                itemstack.setAmount(amount);
              }
              if (arg.length == 2) {
                itemstack.setAmount(Integer.parseInt(arg[1]));
              }
              player.sendMessage(""String_Node_Str"");
              inventory.addItem(itemstack);
            }
          }
 else {
            if (arg[0].contains(""String_Node_Str"")) {
              String clone=arg[0];
              String[] split=clone.split(""String_Node_Str"");
              int itemid=items.get(split[0].toLowerCase());
              itemstack=new ItemStack(itemid);
              itemdata=new MaterialData(Integer.parseInt(split[1]));
              itemstack.setData(itemdata);
              if (arg.length == 1) {
                itemstack.setAmount(amount);
              }
              if (arg.length == 2) {
                itemstack.setAmount(Integer.parseInt(arg[1]));
              }
              player.sendMessage(""String_Node_Str"");
              inventory.addItem(itemstack);
            }
 else {
              int itemid=items.get(arg[0].toLowerCase());
              itemstack=new ItemStack(itemid);
              if (arg.length == 1) {
                itemstack.setAmount(amount);
              }
              if (arg.length == 2) {
                itemstack.setAmount(Integer.parseInt(arg[1]));
              }
              player.sendMessage(""String_Node_Str"");
              inventory.addItem(itemstack);
            }
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
      if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (arg[0].contains(""String_Node_Str"")) {
                String clone=arg[0];
                String[] split=clone.split(""String_Node_Str"");
                if (!(itemdeny(Integer.valueOf(split[0])))) {
                  itemstack=new ItemStack(Integer.parseInt(split[0]));
                  itemdata=new MaterialData(Integer.parseInt(split[1]));
                  itemstack.setData(itemdata);
                  if (arg.length == 1) {
                    itemstack.setAmount(amount);
                  }
                  if (arg.length == 2) {
                    itemstack.setAmount(Integer.parseInt(arg[1]));
                  }
                  player.sendMessage(""String_Node_Str"");
                  inventory.addItem(itemstack);
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
 else {
                itemstack=new ItemStack(Integer.parseInt(arg[0]));
                if (arg.length == 1) {
                  itemstack.setAmount(amount);
                }
                if (arg.length == 2) {
                  itemstack.setAmount(Integer.parseInt(arg[1]));
                }
                player.sendMessage(""String_Node_Str"");
                inventory.addItem(itemstack);
              }
            }
 else {
              if (arg[0].contains(""String_Node_Str"")) {
                String clone=arg[0];
                String[] split=clone.split(""String_Node_Str"");
                int itemid=items.get(arg[0].toLowerCase());
                if (!(itemdeny(itemid))) {
                  itemstack=new ItemStack(itemid);
                  itemdata=new MaterialData(Integer.parseInt(split[1]));
                  itemstack.setData(itemdata);
                  if (arg.length == 1) {
                    itemstack.setAmount(amount);
                  }
                  if (arg.length == 2) {
                    itemstack.setAmount(Integer.parseInt(arg[1]));
                  }
                  player.sendMessage(""String_Node_Str"");
                  inventory.addItem(itemstack);
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
 else {
                player.sendMessage(""String_Node_Str"");
              }
            }
            return true;
          }
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
        log.info(logPrefix + ""String_Node_Str"" + player.getDisplayName()+ ""String_Node_Str""+ command+ ""String_Node_Str"");
      }
      return true;
    }
  }
 catch (  CommandException e) {
    e.printStackTrace();
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  try {
    Player player=(Player)sender;
    String command=commandArg.getName().toLowerCase();
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (arg.length >= 1 && arg.length <= 2) {
          Pattern p=Pattern.compile(""String_Node_Str"");
          Matcher m=p.matcher(arg[0]);
          if (m.matches()) {
            giveItemId(arg[0],arg[1],player);
          }
 else {
            giveItemName(arg[0],arg[1],player);
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
      if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemdeny(Integer.valueOf(strip(arg[0]))))) {
                giveItemId(arg[0],arg[1],player);
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemdeny(Integer.valueOf(strip(arg[0]))))) {
                giveItemName(arg[0],arg[1],player);
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
          log.info(logPrefix + ""String_Node_Str"" + player.getDisplayName()+ ""String_Node_Str""+ command+ ""String_Node_Str"");
        }
      }
      return true;
    }
    return true;
  }
 catch (  CommandException e) {
    e.printStackTrace();
  }
  return true;
}",0.1976019184652278
6712,"public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  try {
    Player player=(Player)sender;
    String command=commandArg.getName().toLowerCase();
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"")) {
        if (arg.length >= 1 && arg.length <= 2) {
          Pattern p=Pattern.compile(""String_Node_Str"");
          Matcher m=p.matcher(strip(arg[0]));
          if (m.matches()) {
            if (arg.length == 2) {
              giveItemId(arg[0],arg[1],player);
            }
 else {
              giveItemId(arg[0],""String_Node_Str"",player);
            }
          }
 else {
            giveItemName(arg[0],arg[1],player);
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemDeny(Integer.valueOf(arg[0])))) {
                if (arg[1] != null) {
                  giveItemId(arg[0],arg[1],player);
                }
 else {
                  giveItemId(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemDeny(Integer.valueOf(strip(arg[0]))))) {
                if (arg[1] != null) {
                  giveItemName(arg[0],arg[1],player);
                }
 else {
                  giveItemName(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemAllow(Integer.valueOf(strip(arg[0]))))) {
                giveItemId(arg[0],arg[1],player);
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemAllow(Integer.valueOf(strip(arg[0]))))) {
                giveItemName(arg[0],arg[1],player);
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      return true;
    }
    return true;
  }
 catch (  CommandException e) {
    e.printStackTrace();
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  try {
    Player player=(Player)sender;
    String command=commandArg.getName().toLowerCase();
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"")) {
        if (arg.length >= 1 && arg.length <= 2) {
          Pattern p=Pattern.compile(""String_Node_Str"");
          Matcher m=p.matcher(strip(arg[0]));
          if (m.matches()) {
            if (arg.length == 2) {
              giveItemId(arg[0],arg[1],player);
            }
 else {
              giveItemId(arg[0],""String_Node_Str"",player);
            }
          }
 else {
            if (arg.length == 2) {
              giveItemName(arg[0],arg[1],player);
            }
 else {
              giveItemName(arg[0],""String_Node_Str"",player);
            }
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemDeny(Integer.valueOf(arg[0])))) {
                if (arg[1] != null) {
                  giveItemId(arg[0],arg[1],player);
                }
 else {
                  giveItemId(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemDeny(Integer.valueOf(arg[0])))) {
                if (arg[1] != null) {
                  giveItemName(arg[0],arg[1],player);
                }
 else {
                  giveItemName(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      if (gimme.Permissions.has(player,""String_Node_Str"")) {
        if (!gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(arg[0]);
            if (m.matches()) {
              if (!(itemAllow(Integer.valueOf(strip(arg[0]))))) {
                if (arg[1] != null) {
                  giveItemId(arg[0],arg[1],player);
                }
 else {
                  giveItemId(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
 else {
              if (!(itemAllow(Integer.valueOf(strip(arg[0]))))) {
                if (arg[1] != null) {
                  giveItemName(arg[0],arg[1],player);
                }
 else {
                  giveItemName(arg[0],""String_Node_Str"",player);
                }
              }
 else {
                player.sendMessage(logPrefix + ""String_Node_Str"");
                log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
            return false;
          }
        }
      }
      return true;
    }
    return true;
  }
 catch (  CommandException e) {
    e.printStackTrace();
  }
  return true;
}",0.6767038580454362
6713,"public boolean itemAllow(int args){
  gimme.config.load();
  String x=gimme.config.getProperty(""String_Node_Str"").toString();
  String[] whitelist=x.split(""String_Node_Str"");
  String arg=Integer.toString(args);
  if (arg.contains(""String_Node_Str"")) {
    String clone=arg;
    String[] split=clone.split(""String_Node_Str"");
    int item=Integer.parseInt(split[0]);
    for (    String s : whitelist) {
      String white=strip(s);
      if (!(Integer.parseInt(white) == item)) {
        return true;
      }
    }
    return false;
  }
 else {
    for (    String s : whitelist) {
      String white=strip(s);
      if (!(Integer.parseInt(white) == args)) {
        return true;
      }
    }
    return false;
  }
}","public boolean itemAllow(int args){
  gimme.config.load();
  String x=gimme.config.getProperty(""String_Node_Str"").toString();
  String[] whitelist=x.split(""String_Node_Str"");
  String arg=Integer.toString(args);
  if (arg.contains(""String_Node_Str"")) {
    String clone=arg;
    String[] split=clone.split(""String_Node_Str"");
    int item=Integer.parseInt(split[0]);
    for (    String s : whitelist) {
      String white=strip(s);
      if (Integer.parseInt(white) == item) {
        return true;
      }
    }
    return false;
  }
 else {
    for (    String s : whitelist) {
      String white=strip(s);
      if (Integer.parseInt(white) == args) {
        return true;
      }
    }
    return false;
  }
}",0.9958041958041958
6714,"public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  try {
    Player player=(Player)sender;
    String command=commandArg.getName().toLowerCase();
    try {
      if (command.equalsIgnoreCase(""String_Node_Str"")) {
        if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(strip(arg[0]));
            if (m.matches()) {
              if (arg.length == 2) {
                giveItemId(arg[0],arg[1],player);
              }
 else {
                giveItemId(arg[0],""String_Node_Str"",player);
              }
            }
 else {
              if (arg.length == 2) {
                giveItemName(arg[0],arg[1],player);
              }
 else {
                giveItemName(arg[0],""String_Node_Str"",player);
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
          }
        }
        if (gimme.Permissions.has(player,""String_Node_Str"")) {
          if (!gimme.Permissions.has(player,""String_Node_Str"")) {
            if (arg.length >= 1 && arg.length <= 2) {
              Pattern p=Pattern.compile(""String_Node_Str"");
              Matcher m=p.matcher(arg[0]);
              if (m.matches()) {
                if (!(itemDeny(Integer.valueOf(arg[0])))) {
                  if (arg[1] != null) {
                    giveItemId(arg[0],arg[1],player);
                  }
 else {
                    giveItemId(arg[0],""String_Node_Str"",player);
                  }
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
 else {
                if (!(itemDeny(items.get(arg[0])))) {
                  if (arg[1] != null) {
                    giveItemName(arg[0],arg[1],player);
                  }
 else {
                    giveItemName(arg[0],""String_Node_Str"",player);
                  }
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
            }
 else {
              player.sendMessage(""String_Node_Str"");
              return false;
            }
          }
        }
        if (gimme.Permissions.has(player,""String_Node_Str"")) {
          if (!gimme.Permissions.has(player,""String_Node_Str"")) {
            if (arg.length >= 1 && arg.length <= 2) {
              Pattern p=Pattern.compile(""String_Node_Str"");
              Matcher m=p.matcher(arg[0]);
              if (m.matches()) {
                if (!(itemAllow(Integer.valueOf(arg[0])))) {
                  if (arg[1] != null) {
                    giveItemId(arg[0],arg[1],player);
                  }
 else {
                    giveItemId(arg[0],""String_Node_Str"",player);
                  }
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
 else {
                if (!(itemAllow(items.get(arg[0])))) {
                  if (arg[1] != null) {
                    giveItemName(arg[0],arg[1],player);
                  }
 else {
                    giveItemName(arg[0],""String_Node_Str"",player);
                  }
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
            }
 else {
              player.sendMessage(""String_Node_Str"");
              return false;
            }
          }
        }
        return true;
      }
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
    return true;
  }
 catch (  CommandException e) {
    e.printStackTrace();
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  try {
    Player player=(Player)sender;
    String command=commandArg.getName().toLowerCase();
    try {
      if (command.equalsIgnoreCase(""String_Node_Str"")) {
        if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"")) {
          if (arg.length >= 1 && arg.length <= 2) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(strip(arg[0]));
            if (m.matches()) {
              if (arg.length == 2) {
                giveItemId(arg[0],arg[1],player);
              }
 else {
                giveItemId(arg[0],""String_Node_Str"",player);
              }
            }
 else {
              if (arg.length == 2) {
                giveItemName(arg[0],arg[1],player);
              }
 else {
                giveItemName(arg[0],""String_Node_Str"",player);
              }
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
          }
        }
        if (gimme.Permissions.has(player,""String_Node_Str"")) {
          if (!gimme.Permissions.has(player,""String_Node_Str"")) {
            if (arg.length >= 1 && arg.length <= 2) {
              Pattern p=Pattern.compile(""String_Node_Str"");
              Matcher m=p.matcher(arg[0]);
              if (m.matches()) {
                if (!(itemDeny(Integer.valueOf(arg[0])))) {
                  if (arg[1] != null) {
                    giveItemId(arg[0],arg[1],player);
                  }
 else {
                    giveItemId(arg[0],""String_Node_Str"",player);
                  }
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
 else {
                if (!(itemDeny(items.get(arg[0])))) {
                  if (arg[1] != null) {
                    giveItemName(arg[0],arg[1],player);
                  }
 else {
                    giveItemName(arg[0],""String_Node_Str"",player);
                  }
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
            }
 else {
              player.sendMessage(""String_Node_Str"");
              return false;
            }
          }
        }
        if (gimme.Permissions.has(player,""String_Node_Str"")) {
          if (!gimme.Permissions.has(player,""String_Node_Str"")) {
            if (arg.length >= 1 && arg.length <= 2) {
              Pattern p=Pattern.compile(""String_Node_Str"");
              Matcher m=p.matcher(arg[0]);
              if (m.matches()) {
                if (itemAllow(Integer.valueOf(arg[0]))) {
                  if (arg[1] != null) {
                    giveItemId(arg[0],arg[1],player);
                  }
 else {
                    giveItemId(arg[0],""String_Node_Str"",player);
                  }
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
 else {
                if (itemAllow(items.get(arg[0]))) {
                  if (arg[1] != null) {
                    giveItemName(arg[0],arg[1],player);
                  }
 else {
                    giveItemName(arg[0],""String_Node_Str"",player);
                  }
                }
 else {
                  player.sendMessage(logPrefix + ""String_Node_Str"");
                  log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
                }
              }
            }
 else {
              player.sendMessage(""String_Node_Str"");
              return false;
            }
          }
        }
        return true;
      }
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
    return true;
  }
 catch (  CommandException e) {
    e.printStackTrace();
  }
  return true;
}",0.9992812649736464
6715,"public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  Player player=(Player)sender;
  PlayerInventory inventory=player.getInventory();
  String command=commandArg.getName().toLowerCase();
  if (command.equalsIgnoreCase(""String_Node_Str"")) {
    if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"") || (gimme.Permissions.has(player,""String_Node_Str"") || gimme.Permissions.has(player,""String_Node_Str""))) {
      ItemStack itemstack=new ItemStack(Integer.valueOf(arg[0]));
      @SuppressWarnings(""String_Node_Str"") boolean check=itemdeny(Integer.valueOf(arg[0]));
      if (arg.length >= 1 && arg.length <= 2) {
        if (!(itemdeny(Integer.valueOf(arg[0])))) {
          if (arg.length == 1) {
            itemstack.setAmount(amount);
          }
          if (arg.length == 2) {
            itemstack.setAmount(Integer.parseInt(arg[1]));
          }
          player.sendMessage(""String_Node_Str"");
          inventory.addItem(itemstack);
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
      log.info(logPrefix + ""String_Node_Str"" + player.getDisplayName()+ ""String_Node_Str""+ command+ ""String_Node_Str"");
    }
    return true;
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  Player player=(Player)sender;
  PlayerInventory inventory=player.getInventory();
  String command=commandArg.getName().toLowerCase();
  if (command.equalsIgnoreCase(""String_Node_Str"")) {
    if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"") || (gimme.Permissions.has(player,""String_Node_Str"") || gimme.Permissions.has(player,""String_Node_Str""))) {
      if (arg.length >= 1 && arg.length <= 2) {
        ItemStack itemstack=new ItemStack(Integer.parseInt(arg[0]));
        @SuppressWarnings(""String_Node_Str"") boolean check=itemdeny(Integer.valueOf(arg[0]));
        if (!(itemdeny(Integer.valueOf(arg[0])))) {
          if (arg.length == 1) {
            itemstack.setAmount(amount);
          }
          if (arg.length == 2) {
            itemstack.setAmount(Integer.parseInt(arg[1]));
          }
          log.info(logPrefix + ""String_Node_Str"" + player+ ""String_Node_Str""+ itemstack.toString());
          player.sendMessage(""String_Node_Str"");
          inventory.addItem(itemstack);
        }
 else {
          player.sendMessage(logPrefix + ""String_Node_Str"");
          log.info(logPrefix + player + ""String_Node_Str""+ itemstack.toString());
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
      log.info(logPrefix + ""String_Node_Str"" + player.getDisplayName()+ ""String_Node_Str""+ command+ ""String_Node_Str"");
    }
    return true;
  }
  return true;
}",0.8693240901213172
6716,"public boolean itemdeny(int args){
  gimme.config.load();
  String x=gimme.config.getNodeList(""String_Node_Str"",null).toString();
  log.info(logPrefix + ""String_Node_Str"" + Integer.toString(args));
  if (x.contains(Integer.toString(args))) {
    return true;
  }
  return false;
}","public boolean itemdeny(int args){
  gimme.config.load();
  String x=gimme.config.getProperty(""String_Node_Str"").toString();
  if (x.contains(Integer.toString(args))) {
    return true;
  }
  return false;
}",0.6940451745379876
6717,"public void setupConfigs(){
  File config=new File(this.folder,""String_Node_Str"");
  if (!config.exists()) {
    try {
      log.info(logPrefix + ""String_Node_Str"");
      log.info(logPrefix + ""String_Node_Str"");
      config.createNewFile();
      FileWriter fstream=new FileWriter(config);
      BufferedWriter out=new BufferedWriter(fstream);
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.close();
      fstream.close();
      log.info(logPrefix + ""String_Node_Str"");
    }
 catch (    IOException ex) {
      log.severe(logPrefix + ""String_Node_Str"");
      log.severe(logPrefix + ""String_Node_Str"" + ex);
      this.plugin.getServer().getPluginManager().disablePlugin((Plugin)this);
    }
  }
}","public void setupConfigs(){
  File config=new File(this.folder,""String_Node_Str"");
  if (!config.exists()) {
    try {
      log.info(logPrefix + ""String_Node_Str"");
      log.info(logPrefix + ""String_Node_Str"");
      config.createNewFile();
      FileWriter fstream=new FileWriter(config);
      BufferedWriter out=new BufferedWriter(fstream);
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.close();
      fstream.close();
      log.info(logPrefix + ""String_Node_Str"");
    }
 catch (    IOException ex) {
      log.severe(logPrefix + ""String_Node_Str"");
      log.severe(logPrefix + ""String_Node_Str"" + ex);
      this.plugin.getServer().getPluginManager().disablePlugin((Plugin)this);
    }
  }
}",0.9790940766550522
6718,"public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  Player player=(Player)sender;
  PlayerInventory inventory=player.getInventory();
  String command=commandArg.getName().toLowerCase();
  ItemStack itemstack;
  if (command.equalsIgnoreCase(""String_Node_Str"")) {
    if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"") || (gimme.Permissions.has(player,""String_Node_Str"") || gimme.Permissions.has(player,""String_Node_Str""))) {
      if (arg.length >= 1 && arg.length <= 2) {
        Pattern p=Pattern.compile(""String_Node_Str"");
        Matcher m=p.matcher(arg[0]);
        if (m.matches()) {
          if (!(itemdeny(Integer.valueOf(arg[0])))) {
            itemstack=new ItemStack(Integer.parseInt(arg[0]));
            if (arg.length == 1) {
              itemstack.setAmount(amount);
            }
            if (arg.length == 2) {
              itemstack.setAmount(Integer.parseInt(arg[1]));
            }
            player.sendMessage(""String_Node_Str"");
            inventory.addItem(itemstack);
          }
 else {
            player.sendMessage(logPrefix + ""String_Node_Str"");
            log.info(logPrefix + player + ""String_Node_Str""+ arg[0].toString());
          }
        }
 else {
          int itemid=items.get(arg[0].toLowerCase());
          if (!(itemdeny(itemid))) {
            itemstack=new ItemStack(itemid);
            if (arg.length == 1) {
              itemstack.setAmount(amount);
            }
            if (arg.length == 2) {
              itemstack.setAmount(Integer.parseInt(arg[1]));
            }
            player.sendMessage(""String_Node_Str"");
            inventory.addItem(itemstack);
          }
 else {
            player.sendMessage(logPrefix + ""String_Node_Str"");
            log.info(logPrefix + player + ""String_Node_Str""+ arg[0].toString());
          }
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
      log.info(logPrefix + ""String_Node_Str"" + player.getDisplayName()+ ""String_Node_Str""+ command+ ""String_Node_Str"");
    }
    return true;
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  Player player=(Player)sender;
  PlayerInventory inventory=player.getInventory();
  String command=commandArg.getName().toLowerCase();
  ItemStack itemstack;
  if (command.equalsIgnoreCase(""String_Node_Str"")) {
    if (gimme.Permissions.has(player,""String_Node_Str"") || gimme.Permissions.has(player,""String_Node_Str"") || (gimme.Permissions.has(player,""String_Node_Str""))) {
      if (arg.length >= 1 && arg.length <= 2) {
        Pattern p=Pattern.compile(""String_Node_Str"");
        Matcher m=p.matcher(arg[0]);
        if (m.matches()) {
          itemstack=new ItemStack(Integer.parseInt(arg[0]));
          if (arg.length == 1) {
            itemstack.setAmount(amount);
          }
          if (arg.length == 2) {
            itemstack.setAmount(Integer.parseInt(arg[1]));
          }
          player.sendMessage(""String_Node_Str"");
          inventory.addItem(itemstack);
        }
 else {
          int itemid=items.get(arg[0].toLowerCase());
          if (!(itemdeny(itemid))) {
            itemstack=new ItemStack(itemid);
            if (arg.length == 1) {
              itemstack.setAmount(amount);
            }
            if (arg.length == 2) {
              itemstack.setAmount(Integer.parseInt(arg[1]));
            }
            player.sendMessage(""String_Node_Str"");
            inventory.addItem(itemstack);
          }
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
    if (player.isOp() || gimme.Permissions.has(player,""String_Node_Str"")) {
      if (!gimme.Permissions.has(player,""String_Node_Str"")) {
        if (arg.length >= 1 && arg.length <= 2) {
          Pattern p=Pattern.compile(""String_Node_Str"");
          Matcher m=p.matcher(arg[0]);
          if (m.matches()) {
            if (!(itemdeny(Integer.valueOf(arg[0])))) {
              itemstack=new ItemStack(Integer.parseInt(arg[0]));
              if (arg.length == 1) {
                itemstack.setAmount(amount);
              }
              if (arg.length == 2) {
                itemstack.setAmount(Integer.parseInt(arg[1]));
              }
              player.sendMessage(""String_Node_Str"");
              inventory.addItem(itemstack);
            }
 else {
              player.sendMessage(logPrefix + ""String_Node_Str"");
              log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
            }
          }
 else {
            int itemid=items.get(arg[0].toLowerCase());
            if (!(itemdeny(itemid))) {
              itemstack=new ItemStack(itemid);
              if (arg.length == 1) {
                itemstack.setAmount(amount);
              }
              if (arg.length == 2) {
                itemstack.setAmount(Integer.parseInt(arg[1]));
              }
              player.sendMessage(""String_Node_Str"");
              inventory.addItem(itemstack);
            }
 else {
              player.sendMessage(logPrefix + ""String_Node_Str"");
              log.info(logPrefix + player.getDisplayName() + ""String_Node_Str""+ arg[0].toString());
            }
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
      log.info(logPrefix + ""String_Node_Str"" + player.getDisplayName()+ ""String_Node_Str""+ command+ ""String_Node_Str"");
    }
    return true;
  }
  return true;
}",0.6654848431129232
6719,"/** 
 * Update things that need to be updated on playlists containing this track we're now sharing 
 */
public void checkPlaylistsForNewShare(SharedTrack sh){
  final List<Playlist> affectedPs=new ArrayList<Playlist>();
synchronized (this) {
    for (    Playlist p : playlists.values()) {
      if (p.getStreamIds().contains(sh.getStream().getStreamId()))       affectedPs.add(p);
    }
  }
  if (affectedPs.size() > 0 && Platform.getPlatform().iTunesAvailable()) {
    rbnb.getExecutor().execute(new CatchingRunnable(){
      public void doRun() throws Exception {
        for (        Playlist p : affectedPs) {
          PlaylistConfig pc=rbnb.getDbService().getPlaylistConfig(p.getPlaylistId());
          if (shouldITunesSync(pc))           syncITunesIfNecessary(p);
        }
      }
    }
);
  }
}","/** 
 * Update things that need to be updated on playlists containing this track we're now sharing 
 */
public void checkPlaylistsForNewShare(SharedTrack sh){
  final List<Playlist> affectedPs=new ArrayList<Playlist>();
synchronized (this) {
    for (    Playlist p : playlists.values()) {
      if (p.getStreamIds().contains(sh.getStream().getStreamId()))       affectedPs.add(p);
    }
  }
  if (affectedPs.size() > 0 && Platform.getPlatform().iTunesAvailable()) {
    rbnb.getExecutor().execute(new CatchingRunnable(){
      public void doRun() throws Exception {
        for (        Playlist p : affectedPs) {
          PlaylistConfig pc=rbnb.getDbService().getPlaylistConfig(p.getPlaylistId());
          if (shouldITunesSync(pc))           syncITunes(p);
        }
      }
    }
);
  }
}",0.9931207004377736
6720,"private void finishedFetchingPlaylist(Playlist p){
  long plId=p.getPlaylistId();
  log.warn(""String_Node_Str"" + plId);
  events.firePlaylistChanged(p);
  downloadTracksIfNecessary(p);
  comments.fetchCommentsForPlaylist(plId);
}","private void finishedFetchingPlaylist(Playlist p){
  long plId=p.getPlaylistId();
  log.warn(""String_Node_Str"" + plId);
  events.firePlaylistChanged(p);
  PlaylistConfig pc=db.getPlaylistConfig(p.getPlaylistId());
  downloadTracksIfNecessary(p,pc);
  if (shouldITunesSync(pc))   syncITunes(p);
  comments.fetchCommentsForPlaylist(plId);
}",0.8077601410934744
6721,"public void playlistConfigUpdated(PlaylistConfig oldPc,PlaylistConfig newPc){
  long plId=newPc.getPlaylistId();
  Playlist p;
synchronized (this) {
    p=playlists.get(plId);
  }
  if (p == null) {
    log.error(""String_Node_Str"" + plId + ""String_Node_Str"");
    return;
  }
  downloadTracksIfNecessary(p);
  if (shouldITunesSync(newPc) && !shouldITunesSync(oldPc))   syncITunesIfNecessary(p);
}","public void playlistConfigUpdated(PlaylistConfig oldPc,PlaylistConfig newPc){
  long plId=newPc.getPlaylistId();
  Playlist p;
synchronized (this) {
    p=playlists.get(plId);
  }
  if (p == null) {
    log.error(""String_Node_Str"" + plId + ""String_Node_Str"");
    return;
  }
  downloadTracksIfNecessary(p,newPc);
  if (shouldITunesSync(newPc) && !shouldITunesSync(oldPc))   syncITunes(p);
}",0.9783989834815756
6722,"private void downloadTracksIfNecessary(Playlist p){
  PlaylistConfig pc=db.getPlaylistConfig(p.getPlaylistId());
  if (((pc != null) && ""String_Node_Str"".equalsIgnoreCase(pc.getItem(""String_Node_Str"")))) {
    for (    String sid : p.getStreamIds()) {
      Track t=tracks.getTrack(sid);
      try {
        if (t instanceof CloudTrack)         rbnb.getDownloadService().addDownload(sid);
      }
 catch (      RobonoboException e) {
        log.error(""String_Node_Str"" + sid,e);
      }
    }
  }
}","private void downloadTracksIfNecessary(Playlist p,PlaylistConfig pc){
  if (((pc != null) && ""String_Node_Str"".equalsIgnoreCase(pc.getItem(""String_Node_Str"")))) {
    for (    String sid : p.getStreamIds()) {
      Track t=tracks.getTrack(sid);
      try {
        if (t instanceof CloudTrack)         rbnb.getDownloadService().addDownload(sid);
      }
 catch (      RobonoboException e) {
        log.error(""String_Node_Str"" + sid,e);
      }
    }
  }
}",0.9172774869109948
6723,"public void doRun() throws Exception {
  for (  Playlist p : affectedPs) {
    PlaylistConfig pc=rbnb.getDbService().getPlaylistConfig(p.getPlaylistId());
    if (shouldITunesSync(pc))     syncITunesIfNecessary(p);
  }
}","public void doRun() throws Exception {
  for (  Playlist p : affectedPs) {
    PlaylistConfig pc=rbnb.getDbService().getPlaylistConfig(p.getPlaylistId());
    if (shouldITunesSync(pc))     syncITunes(p);
  }
}",0.9743589743589745
6724,"public void componentShown(ComponentEvent e){
  if (haveShown)   return;
  haveShown=true;
  if (getWidth() == 0)   throw new SeekInnerCalmException();
  log.debug(""String_Node_Str"" + p.getPlaylistId());
  frame.ctrl.addPlaylistListener(MyPlaylistContentPanel.this);
  frame.ctrl.getExistingCommentsForPlaylist(p.getPlaylistId(),MyPlaylistContentPanel.this);
}","public void componentShown(ComponentEvent e){
  if (haveShown)   return;
  haveShown=true;
  if (getWidth() == 0)   throw new SeekInnerCalmException();
  log.debug(""String_Node_Str"" + p.getPlaylistId());
  frame.ctrl.addPlaylistListener(MyPlaylistContentPanel.this);
  Playlist newP=frame.ctrl.getKnownPlaylist(p.getPlaylistId());
  playlistChanged(newP);
  frame.ctrl.getExistingCommentsForPlaylist(p.getPlaylistId(),MyPlaylistContentPanel.this);
}",0.8899876390605687
6725,"protected void setupComments(){
  log.debug(""String_Node_Str"" + p.getPlaylistId());
  addComponentListener(new ComponentAdapter(){
    public void componentShown(    ComponentEvent e){
      if (haveShown)       return;
      haveShown=true;
      if (getWidth() == 0)       throw new SeekInnerCalmException();
      log.debug(""String_Node_Str"" + p.getPlaylistId());
      frame.ctrl.addPlaylistListener(MyPlaylistContentPanel.this);
      frame.ctrl.getExistingCommentsForPlaylist(p.getPlaylistId(),MyPlaylistContentPanel.this);
    }
  }
);
  tabPane.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (tabPane.getSelectedIndex() == 1) {
        if (unreadComments) {
          unreadComments=false;
          removeBangFromTab(1);
          frame.leftSidebar.markPlaylistCommentsAsRead(p.getPlaylistId());
          frame.ctrl.getExecutor().execute(new CatchingRunnable(){
            public void doRun() throws Exception {
              frame.ctrl.markPlaylistCommentsAsSeen(p.getPlaylistId());
            }
          }
);
        }
      }
    }
  }
);
}","protected void setupComments(){
  log.debug(""String_Node_Str"" + p.getPlaylistId());
  addComponentListener(new ComponentAdapter(){
    public void componentShown(    ComponentEvent e){
      if (haveShown)       return;
      haveShown=true;
      if (getWidth() == 0)       throw new SeekInnerCalmException();
      log.debug(""String_Node_Str"" + p.getPlaylistId());
      frame.ctrl.addPlaylistListener(MyPlaylistContentPanel.this);
      Playlist newP=frame.ctrl.getKnownPlaylist(p.getPlaylistId());
      playlistChanged(newP);
      frame.ctrl.getExistingCommentsForPlaylist(p.getPlaylistId(),MyPlaylistContentPanel.this);
    }
  }
);
  tabPane.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (tabPane.getSelectedIndex() == 1) {
        if (unreadComments) {
          unreadComments=false;
          removeBangFromTab(1);
          frame.leftSidebar.markPlaylistCommentsAsRead(p.getPlaylistId());
          frame.ctrl.getExecutor().execute(new CatchingRunnable(){
            public void doRun() throws Exception {
              frame.ctrl.markPlaylistCommentsAsSeen(p.getPlaylistId());
            }
          }
);
        }
      }
    }
  }
);
}",0.9580268282128948
6726,"public void deleteTracks(List<String> streamIds){
  updateLock.lock();
  try {
    ContiguousBlockList blockList=new ContiguousBlockList();
    for (    String sid : streamIds) {
      Integer delIdx=trackIndices.remove(sid);
      if (delIdx != null)       blockList.add(delIdx);
    }
    List<int[]> blox=blockList.getAllBlocks();
    for (int i=blox.size() - 1; i >= 0; i--) {
      int[] block=blox.get(i);
      int blockStart=block[0];
      int blockEnd=block[1];
      for (int j=blockEnd; j >= blockStart; j--) {
        eventList.remove(j);
      }
    }
    if (blox.size() > 0) {
      int bumpAbove=blox.get(0)[1];
      for (int i=eventList.size() - 1; i > bumpAbove; i--) {
        String bumpSid=eventList.get(i).stream.streamId;
        trackIndices.put(bumpSid,i);
      }
    }
  }
  finally {
    updateLock.unlock();
  }
}","public void deleteTracks(List<String> streamIds){
  updateLock.lock();
  try {
    ContiguousBlockList blockList=new ContiguousBlockList();
    for (    String sid : streamIds) {
      Integer delIdx=trackIndices.remove(sid);
      if (delIdx != null)       blockList.add(delIdx);
    }
    List<int[]> blox=blockList.getAllBlocks();
    for (int i=blox.size() - 1; i >= 0; i--) {
      int[] block=blox.get(i);
      int blockStart=block[0];
      int blockEnd=block[1];
      for (int j=blockEnd; j >= blockStart; j--) {
        eventList.remove(j);
      }
    }
    if (blox.size() > 0) {
      int bumpFrom=blox.get(0)[0];
      for (int i=eventList.size() - 1; i >= bumpFrom; i--) {
        String bumpSid=eventList.get(i).stream.streamId;
        trackIndices.put(bumpSid,i);
      }
    }
  }
  finally {
    updateLock.unlock();
  }
}",0.9282750444576172
6727,"@Override public void tracksUpdated(Collection<Track> trax){
  updateLock.lock();
  try {
    List<Track> traxToAdd=new ArrayList<Track>();
    for (    Track t : trax) {
      Integer idx=trackIndices.get(t.getStream().getStreamId());
      if (idx != null) {
        if (trackBelongsInMyLib(t))         eventList.set(idx,t);
 else         eventList.remove(idx);
      }
 else {
        if ((t instanceof SharedTrack) || (t instanceof DownloadingTrack))         traxToAdd.add(t);
      }
    }
    add(traxToAdd);
  }
  finally {
    updateLock.unlock();
  }
}","@Override public void tracksUpdated(Collection<Track> trax){
  updateLock.lock();
  try {
    List<Track> traxToUpdate=new ArrayList<Track>();
    List<Track> traxToAdd=new ArrayList<Track>();
    List<String> sidsToDel=new ArrayList<String>();
    for (    Track t : trax) {
      Integer idx=trackIndices.get(t.getStream().getStreamId());
      if (idx != null) {
        if (trackBelongsInMyLib(t))         traxToUpdate.add(t);
 else         sidsToDel.add(t.stream.streamId);
      }
 else {
        if ((t instanceof SharedTrack) || (t instanceof DownloadingTrack))         traxToAdd.add(t);
      }
    }
    if (traxToAdd.size() > 0)     add(traxToAdd);
    if (sidsToDel.size() > 0)     deleteTracks(sidsToDel);
    if (traxToUpdate.size() > 0)     super.tracksUpdated(traxToUpdate);
  }
  finally {
    updateLock.unlock();
  }
}",0.7153075822603719
6728,"@Override public void trackUpdated(String streamId,Track t){
  updateLock.lock();
  try {
    Integer idx=trackIndices.get(streamId);
    if (idx != null) {
      if (trackBelongsInMyLib(t))       eventList.set(idx,t);
 else       eventList.remove(idx);
    }
 else {
      if (trackBelongsInMyLib(t))       add(t);
    }
  }
  finally {
    updateLock.unlock();
  }
}","@Override public void trackUpdated(String streamId,Track t){
  updateLock.lock();
  try {
    if (containsTrack(streamId)) {
      if (trackBelongsInMyLib(t))       super.trackUpdated(streamId,t);
 else       deleteTrack(streamId);
    }
 else {
      if (trackBelongsInMyLib(t))       add(t);
    }
  }
  finally {
    updateLock.unlock();
  }
}",0.7955182072829131
6729,"@Override public void trackUpdated(String streamId,Track t){
  super.trackUpdated(streamId,t);
  if (activated || canEdit) {
    updateLock.lock();
    try {
      if (trackIndices.containsKey(streamId))       control.findSources(streamId,this);
    }
  finally {
      updateLock.unlock();
    }
  }
}","@Override public void trackUpdated(String streamId,Track t){
  super.trackUpdated(streamId,t);
  if ((activated || canEdit) && containsTrack(streamId))   control.findSources(streamId,this);
}",0.742393509127789
6730,"/** 
 * @syncpriority 90
 */
public synchronized void notifyOverduePage(String sid,Long pageNum){
  pendingPages.get(sid).remove(pageNum);
  if (!overduePages.containsKey(sid))   overduePages.put(sid,new TreeSet<Long>());
  overduePages.get(sid).add(pageNum);
}","/** 
 * @syncpriority 90
 */
public synchronized void notifyOverduePage(String sid,Long pageNum){
  if (!pendingPages.containsKey(sid)) {
    return;
  }
  pendingPages.get(sid).remove(pageNum);
  if (!overduePages.containsKey(sid))   overduePages.put(sid,new TreeSet<Long>());
  overduePages.get(sid).add(pageNum);
}",0.903114186851211
6731,"public void pauseDownload(String streamId){
  log.debug(""String_Node_Str"" + streamId);
  DownloadingTrack d=db.getDownload(streamId);
  try {
    stopDownload(d);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + streamId,e);
  }
  d.setDownloadStatus(DownloadStatus.Paused);
  db.putDownload(d);
  event.fireTrackUpdated(streamId);
}","public void pauseDownload(String streamId){
  log.debug(""String_Node_Str"" + streamId);
  DownloadingTrack d=getDownload(streamId);
  if (d == null) {
    log.error(""String_Node_Str"" + streamId + ""String_Node_Str"");
    return;
  }
  try {
    stopDownload(d);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + streamId,e);
  }
  d.setDownloadStatus(DownloadStatus.Paused);
  db.putDownload(d);
  event.fireTrackUpdated(streamId);
}",0.8141592920353983
6732,"public void foundBroadcaster(String sid,String nodeId){
  Track t=control.getTrack(sid);
  trackUpdated(sid,t);
}","public void foundBroadcaster(String sid,String nodeId){
  if (!containsTrack(sid))   return;
  Track t=control.getTrack(sid);
  trackUpdated(sid,t);
}",0.8593155893536122
6733,"private FriendLibraryTableModel(RobonoboFrame frame,Library lib,EventList<Track> el,SortedList<Track> sl,FilterList<Track> fl,MatcherEditor<Track> matchEdit){
  super(frame,el,sl,fl);
  this.lib=lib;
  this.matchEdit=matchEdit;
  frame.ctrl.addLibraryListener(this);
}","private FriendLibraryTableModel(RobonoboFrame frame,Library lib,EventList<Track> el,SortedList<Track> sl,FilterList<Track> fl,MatcherEditor<Track> matchEdit){
  super(frame,el,sl,fl);
  this.lib=lib;
  this.matchEdit=matchEdit;
  initialSids=new HashSet<String>();
  initialSids.addAll(lib.getTracks().keySet());
  frame.ctrl.addLibraryListener(this);
}",0.7987117552334944
6734,"@Override public void friendLibraryUpdated(long userId,int numUnseen,Map<String,Date> newTracks){
  if (userId != lib.getUserId())   return;
  List<Track> addTrax=new ArrayList<Track>();
  for (  String sid : newTracks.keySet()) {
    Track t=control.getTrack(sid);
    t.setDateAdded(newTracks.get(sid));
    addTrax.add(t);
  }
  add(addTrax);
}","@Override public void friendLibraryUpdated(long userId,int numUnseen,Map<String,Date> newTracks){
  if (userId != lib.getUserId())   return;
  List<Track> addTrax=new ArrayList<Track>();
  for (  String sid : newTracks.keySet()) {
    if (initialSids != null && initialSids.contains(sid))     continue;
    Track t=control.getTrack(sid);
    t.setDateAdded(newTracks.get(sid));
    addTrax.add(t);
  }
  initialSids=null;
  lib.getTracks().putAll(newTracks);
  add(addTrax);
}",0.8262454434993924
6735,"@Override public boolean handleSelect(){
  boolean hadUnseen=(numUnseenTracks > 0);
  numUnseenTracks=0;
  ContentPanel cp=frame.mainPanel.getContentPanel(contentPanelName());
  if (cp != null) {
    frame.mainPanel.selectContentPanel(contentPanelName());
    activatePanel();
  }
 else {
    CatchingRunnable task=new CatchingRunnable(){
      public void doRun() throws Exception {
        Library lib=frame.ctrl.getFriendLibrary(userId);
        frame.mainPanel.addContentPanel(contentPanelName(),new FriendLibraryContentPanel(frame,lib));
        frame.mainPanel.selectContentPanel(contentPanelName());
        activatePanel();
      }
    }
;
    frame.runSlowTask(""String_Node_Str"",task);
  }
  return hadUnseen;
}","@Override public boolean handleSelect(){
  boolean hadUnseen=(numUnseenTracks > 0);
  numUnseenTracks=0;
  ContentPanel cp=frame.mainPanel.getContentPanel(contentPanelName());
  if (cp != null) {
    frame.mainPanel.selectContentPanel(contentPanelName());
    activatePanel();
  }
 else {
    CatchingRunnable task=new CatchingRunnable(){
      public void doRun() throws Exception {
        Library lib=frame.ctrl.getFriendLibrary(userId);
        StringBuffer sb=new StringBuffer(""String_Node_Str"" + userId + ""String_Node_Str"");
        for (        String sid : lib.getTracks().keySet()) {
          sb.append(""String_Node_Str"").append(sid);
        }
        Log log=LogFactory.getLog(getClass());
        log.debug(sb);
        frame.mainPanel.addContentPanel(contentPanelName(),new FriendLibraryContentPanel(frame,lib));
        frame.mainPanel.selectContentPanel(contentPanelName());
        activatePanel();
      }
    }
;
    frame.runSlowTask(""String_Node_Str"",task);
  }
  return hadUnseen;
}",0.8352668213457076
6736,"public void doRun() throws Exception {
  Library lib=frame.ctrl.getFriendLibrary(userId);
  frame.mainPanel.addContentPanel(contentPanelName(),new FriendLibraryContentPanel(frame,lib));
  frame.mainPanel.selectContentPanel(contentPanelName());
  activatePanel();
}","public void doRun() throws Exception {
  Library lib=frame.ctrl.getFriendLibrary(userId);
  StringBuffer sb=new StringBuffer(""String_Node_Str"" + userId + ""String_Node_Str"");
  for (  String sid : lib.getTracks().keySet()) {
    sb.append(""String_Node_Str"").append(sid);
  }
  Log log=LogFactory.getLog(getClass());
  log.debug(sb);
  frame.mainPanel.addContentPanel(contentPanelName(),new FriendLibraryContentPanel(frame,lib));
  frame.mainPanel.selectContentPanel(contentPanelName());
  activatePanel();
}",0.6857142857142857
6737,"/** 
 * Must be called only from inside sync block
 */
private void updateWindow(String sid,PageBuffer pb){
  if (!winStartMap.containsKey(sid)) {
    winStartMap.put(sid,0L);
    winEndMap.put(sid,1L);
  }
  long lastContigPage=pb.getLastContiguousPage();
  if (lastContigPage >= winEndMap.get(sid)) {
    long winStart=lastContigPage + 1;
    long winEnd=winStart + windowSize(sid,pb) - 1;
    long totPgs=pb.getTotalPages();
    if (winEnd >= totPgs)     winEnd=totPgs - 1;
    winStartMap.put(sid,winStart);
    winEndMap.put(sid,winEnd);
  }
}","/** 
 * Must be called only from inside sync block
 */
private void updateWindow(String sid,PageBuffer pb){
  if (pb == null)   throw new SeekInnerCalmException();
  if (!winStartMap.containsKey(sid)) {
    winStartMap.put(sid,0L);
    winEndMap.put(sid,1L);
  }
  long lastContigPage=pb.getLastContiguousPage();
  if (lastContigPage >= winEndMap.get(sid)) {
    long winStart=lastContigPage + 1;
    long winEnd=winStart + windowSize(sid,pb) - 1;
    long totPgs=pb.getTotalPages();
    if (winEnd >= totPgs)     winEnd=totPgs - 1;
    winStartMap.put(sid,winStart);
    winEndMap.put(sid,winEnd);
  }
}",0.9513888888888888
6738,"/** 
 * Returns the set of ready sources, and removes trace of them - if you want to cache them, add them again 
 */
public synchronized Set<SourceStatus> getReadySources(String streamId){
  Set<SourceStatus> result=new HashSet<SourceStatus>();
  if (readySources.containsKey(streamId))   result.addAll(readySources.remove(streamId).values());
  return result;
}","/** 
 * Returns the set of ready sources, and removes trace of them - if you want to cache them, add them again 
 */
public synchronized Set<SourceStatus> getReadySources(String streamId){
  Set<SourceStatus> result=new HashSet<SourceStatus>();
  if (readySources.containsKey(streamId))   result.addAll(readySources.remove(streamId).values());
  for (  SourceStatus ss : result) {
    DEBUG_checkSourceStatContains(ss,streamId);
  }
  return result;
}",0.8585485854858549
6739,"/** 
 * Called when this source is good to service us, but we are not ready or able to handle it 
 */
public synchronized void cacheSourceUntilReady(SourceStatus sourceStat,StreamStatus streamStat){
  if (!readySources.containsKey(streamStat.getStreamId()))   readySources.put(streamStat.getStreamId(),new HashMap<String,SourceStatus>());
  readySources.get(streamStat.getStreamId()).put(sourceStat.getFromNode().getId(),sourceStat);
}","/** 
 * Called when this source is good to service us, but we are not ready or able to handle it 
 */
public synchronized void cacheSourceUntilReady(SourceStatus sourceStat,StreamStatus streamStat){
  if (streamStat == null)   throw new SeekInnerCalmException();
  DEBUG_checkSourceStatContains(sourceStat,streamStat.getStreamId());
  if (!readySources.containsKey(streamStat.getStreamId()))   readySources.put(streamStat.getStreamId(),new HashMap<String,SourceStatus>());
  readySources.get(streamStat.getStreamId()).put(sourceStat.getFromNode().getId(),sourceStat);
}",0.8665338645418327
6740,"private void setLastSourceStat(SourceStatus sourceStat){
  this.lastSourceStat=sourceStat;
  for (  StreamStatus streamStat : sourceStat.getSsList()) {
    if (streamStat.getStreamId().equals(sid))     this.lastStreamStat=streamStat;
  }
}","private void setLastSourceStat(SourceStatus sourceStat){
  StreamStatus myStreamStat=null;
  for (  StreamStatus streamStat : sourceStat.getSsList()) {
    if (streamStat.getStreamId().equals(sid)) {
      myStreamStat=streamStat;
      break;
    }
  }
  if (myStreamStat == null) {
    if (lastStreamStat == null)     throw new SeekInnerCalmException();
    this.lastSourceStat=SourceStatus.newBuilder(sourceStat).addSs(lastStreamStat).build();
  }
 else {
    this.lastSourceStat=sourceStat;
    this.lastStreamStat=myStreamStat;
  }
}",0.2419562419562419
6741,"/** 
 * @syncpriority 200 
 */
public void notifyStreamStatus(StreamStatus streamStat){
  this.lastStreamStat=streamStat;
  mina.getPRM().notifyStreamStatus(sid,cc.getNodeId(),streamStat);
  sendReqPageIfNecessary();
}","/** 
 * @syncpriority 200 
 */
public void notifyStreamStatus(StreamStatus streamStat){
  if (streamStat == null)   throw new SeekInnerCalmException();
  this.lastStreamStat=streamStat;
  mina.getPRM().notifyStreamStatus(sid,cc.getNodeId(),streamStat);
  sendReqPageIfNecessary();
}",0.872
6742,"/** 
 * @throws IOException 
 * @syncpriority 170 
 */
public LCPair(MinaInstance m,String streamId,ControlConnection ccon,SourceStatus ss) throws IOException {
  super(m,streamId,ccon);
  rto=MIN_PAGE_TIMEOUT;
  try {
    lc=ccon.getSCF().getListenConnection(ccon);
  }
 catch (  MinaConnectionException e) {
    log.error(""String_Node_Str"" + ccon.getNodeId(),e);
    die(false);
  }
  lc.setLCPair(this);
  setLastSourceStat(ss);
  ccon.addLCPair(this);
  final String nodeId=ccon.getNodeId();
  if (mina.getConfig().isAgoric() && mina.getBuyMgr().getAgreedBidTo(nodeId) > 0)   startListening();
 else {
    startAttempt=new Attempt(mina.getExecutor(),8 * mina.getConfig().getMessageTimeout() * 1000,""String_Node_Str"" + sid + ""String_Node_Str""+ nodeId){
      protected void onTimeout(){
        log.error(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid);
        mina.getSourceMgr().cachePossiblyDeadSource(cc.getNode(),sid);
        die(false);
      }
    }
;
    startAttempt.start();
    mina.getBuyMgr().setupAccount(ss);
  }
}","/** 
 * @throws IOException
 * @syncpriority 170 
 */
public LCPair(MinaInstance m,String streamId,ControlConnection ccon,SourceStatus ss) throws IOException {
  super(m,streamId,ccon);
  rto=MIN_PAGE_TIMEOUT;
  try {
    lc=ccon.getSCF().getListenConnection(ccon);
  }
 catch (  MinaConnectionException e) {
    log.error(""String_Node_Str"" + ccon.getNodeId(),e);
    die(false);
  }
  lc.setLCPair(this);
  setLastSourceStat(ss);
  if (lastStreamStat == null)   throw new SeekInnerCalmException();
  ccon.addLCPair(this);
  final String nodeId=ccon.getNodeId();
  if (mina.getConfig().isAgoric() && mina.getBuyMgr().getAgreedBidTo(nodeId) > 0)   startListening();
 else {
    startAttempt=new Attempt(mina.getExecutor(),8 * mina.getConfig().getMessageTimeout() * 1000,""String_Node_Str"" + sid + ""String_Node_Str""+ nodeId){
      protected void onTimeout(){
        log.error(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid);
        mina.getSourceMgr().cachePossiblyDeadSource(cc.getNode(),sid);
        die(false);
      }
    }
;
    startAttempt.start();
    mina.getBuyMgr().setupAccount(ss);
  }
}",0.967832167832168
6743,"@Override @Transactional(rollbackFor=Exception.class) public void lovesChanged(MidasUser u,Playlist oldP,Playlist newP) throws IOException {
  long uid=u.getUserId();
  Set<String> curArtists=new HashSet<String>();
  for (  String sid : oldP.getStreamIds()) {
    Stream s=streamDao.getStream(sid);
    curArtists.add(s.getArtist());
  }
  List<String> newArtists=new ArrayList<String>();
  for (  String sid : newP.getStreamIds()) {
    if (!oldP.getStreamIds().contains(sid)) {
      Stream s=streamDao.getStream(sid);
      String artist=s.getArtist();
      if (!curArtists.contains(artist))       newArtists.add(artist);
    }
  }
  if (newArtists.size() > 0) {
    List<String> al=new ArrayList<String>(newArtists);
    Collections.sort(al);
    int msgSizeLimit=140;
    String okMsg=""String_Node_Str"" + numItems(newArtists,""String_Node_Str"") + ""String_Node_Str"";
    String url=appConfig.getInitParam(""String_Node_Str"") + ""String_Node_Str"" + Long.toHexString(uid)+ ""String_Node_Str"";
    for (int i=0; i < newArtists.size(); i++) {
      StringBuffer sb=new StringBuffer(""String_Node_Str"");
      for (int j=0; j <= i; j++) {
        if (j != 0)         sb.append(""String_Node_Str"");
        sb.append(newArtists.get(j));
      }
      if (i < (newArtists.size() - 1)) {
        int numOtherArtists=newArtists.size() - (i + 1);
        sb.append(""String_Node_Str"").append(numItems(numOtherArtists,""String_Node_Str""));
      }
      sb.append(""String_Node_Str"");
      String msg=sb.toString();
      if ((msg.length() + url.length()) <= msgSizeLimit)       okMsg=msg;
 else       break;
    }
    MidasUserConfig muc=userConfigDao.getUserConfig(u.getUserId());
    if (muc != null) {
      if (muc.getItem(""String_Node_Str"") != null) {
        String fbStr=muc.getItem(""String_Node_Str"");
        if (fbStr == null || Boolean.valueOf(fbStr))         facebook.postSpecialPlaylistToFacebook(muc,uid,""String_Node_Str"",okMsg);
      }
      if (muc.getItem(""String_Node_Str"") != null) {
        String twitStr=muc.getItem(""String_Node_Str"");
        if (twitStr == null || Boolean.valueOf(twitStr))         twitter.postSpecialPlaylistToTwitter(muc,uid,""String_Node_Str"",okMsg);
      }
    }
    event.specialPlaylistPosted(u,uid,""String_Node_Str"");
    notification.lovesAdded(u,al);
  }
}","@Override @Transactional(rollbackFor=Exception.class) public void lovesChanged(MidasUser u,Playlist oldP,Playlist newP) throws IOException {
  long uid=u.getUserId();
  Set<String> curArtists=new HashSet<String>();
  for (  String sid : oldP.getStreamIds()) {
    Stream s=streamDao.getStream(sid);
    curArtists.add(s.getArtist());
  }
  Set<String> newArtists=new HashSet<String>();
  for (  String sid : newP.getStreamIds()) {
    if (!oldP.getStreamIds().contains(sid)) {
      Stream s=streamDao.getStream(sid);
      String artist=s.getArtist();
      if (!curArtists.contains(artist))       newArtists.add(artist);
    }
  }
  if (newArtists.size() > 0) {
    List<String> al=new ArrayList<String>(newArtists);
    Collections.sort(al);
    int msgSizeLimit=140;
    String okMsg=""String_Node_Str"" + numItems(newArtists,""String_Node_Str"") + ""String_Node_Str"";
    String url=appConfig.getInitParam(""String_Node_Str"") + ""String_Node_Str"" + Long.toHexString(uid)+ ""String_Node_Str"";
    for (int i=0; i < newArtists.size(); i++) {
      StringBuffer sb=new StringBuffer(""String_Node_Str"");
      for (int j=0; j <= i; j++) {
        if (j != 0)         sb.append(""String_Node_Str"");
        sb.append(al.get(j));
      }
      if (i < (newArtists.size() - 1)) {
        int numOtherArtists=newArtists.size() - (i + 1);
        sb.append(""String_Node_Str"").append(numItems(numOtherArtists,""String_Node_Str""));
      }
      sb.append(""String_Node_Str"");
      String msg=sb.toString();
      if ((msg.length() + url.length()) <= msgSizeLimit)       okMsg=msg;
 else       break;
    }
    MidasUserConfig muc=userConfigDao.getUserConfig(u.getUserId());
    if (muc != null) {
      if (muc.getItem(""String_Node_Str"") != null) {
        String fbStr=muc.getItem(""String_Node_Str"");
        if (fbStr == null || Boolean.valueOf(fbStr))         facebook.postSpecialPlaylistToFacebook(muc,uid,""String_Node_Str"",okMsg);
      }
      if (muc.getItem(""String_Node_Str"") != null) {
        String twitStr=muc.getItem(""String_Node_Str"");
        if (twitStr == null || Boolean.valueOf(twitStr))         twitter.postSpecialPlaylistToTwitter(muc,uid,""String_Node_Str"",okMsg);
      }
    }
    event.specialPlaylistPosted(u,uid,""String_Node_Str"");
    notification.lovesAdded(u,al);
  }
}",0.960017478697837
6744,"@Override public void newComment(MidasComment c) throws IOException {
  Set<Long> sentUids=new HashSet<Long>();
  MidasUser commentUser=userDao.getById(c.getUserId());
  if (c.getParentId() > 0) {
    MidasComment par=commentDao.getComment(c.getParentId());
    if (par.getUserId() != c.getUserId()) {
      MidasUserConfig muc=userCfgDao.getUserConfig(par.getUserId());
      String creStr=(muc == null) ? null : muc.getItem(""String_Node_Str"");
      boolean cre=(creStr == null) ? true : Boolean.valueOf(creStr);
      if (cre) {
        MidasUser origUser=userDao.getById(par.getUserId());
        Matcher pm=PLAYLIST_ITEM_PAT.matcher(c.getResourceId());
        if (pm.matches()) {
          MidasPlaylist p=playlistDao.getPlaylistById(Long.parseLong(pm.group(1)));
          message.sendReplyNotificationForPlaylist(origUser,commentUser,p);
          sentUids.add(origUser.getUserId());
        }
 else {
          Matcher lm=LIBRARY_ITEM_PAT.matcher(c.getResourceId());
          if (lm.matches()) {
            message.sendReplyNotificationForLibrary(origUser,commentUser,Long.parseLong(lm.group(1)));
            sentUids.add(origUser.getUserId());
          }
        }
      }
    }
  }
  Matcher pm=PLAYLIST_ITEM_PAT.matcher(c.getResourceId());
  if (pm.matches()) {
    MidasPlaylist p=playlistDao.getPlaylistById(Long.parseLong(pm.group(1)));
    for (    Long ownerId : p.getOwnerIds()) {
      if (sentUids.contains(ownerId))       continue;
      MidasUserConfig muc=userCfgDao.getUserConfig(ownerId);
      String pceStr=muc.getItem(""String_Node_Str"");
      boolean pce=(pceStr == null) ? true : Boolean.valueOf(pceStr);
      if (pce) {
        MidasUser owner=userDao.getById(ownerId);
        message.sendCommentNotificationForPlaylist(owner,commentUser,p);
        sentUids.add(ownerId);
      }
    }
  }
 else {
    Matcher lm=LIBRARY_ITEM_PAT.matcher(c.getResourceId());
    if (!lm.matches()) {
      log.error(""String_Node_Str"" + c.getResourceId());
      return;
    }
    long ownerId=Long.parseLong(lm.group(1));
    if (!sentUids.contains(ownerId)) {
      MidasUserConfig muc=userCfgDao.getUserConfig(ownerId);
      String pceStr=muc.getItem(""String_Node_Str"");
      boolean pce=(pceStr == null) ? true : Boolean.valueOf(pceStr);
      if (pce) {
        MidasUser owner=userDao.getById(ownerId);
        message.sendCommentNotificationForLibrary(owner,commentUser);
        sentUids.add(ownerId);
      }
    }
  }
}","@Override public void newComment(MidasComment c) throws IOException {
  Set<Long> sentUids=new HashSet<Long>();
  MidasUser commentUser=userDao.getById(c.getUserId());
  if (c.getParentId() > 0) {
    MidasComment par=commentDao.getComment(c.getParentId());
    if (par.getUserId() != c.getUserId()) {
      MidasUserConfig muc=userCfgDao.getUserConfig(par.getUserId());
      String creStr=(muc == null) ? null : muc.getItem(""String_Node_Str"");
      boolean cre=(creStr == null) ? true : Boolean.valueOf(creStr);
      if (cre) {
        MidasUser origUser=userDao.getById(par.getUserId());
        Matcher pm=PLAYLIST_ITEM_PAT.matcher(c.getResourceId());
        if (pm.matches()) {
          MidasPlaylist p=playlistDao.getPlaylistById(Long.parseLong(pm.group(1)));
          message.sendReplyNotificationForPlaylist(origUser,commentUser,p);
          sentUids.add(origUser.getUserId());
        }
 else {
          Matcher lm=LIBRARY_ITEM_PAT.matcher(c.getResourceId());
          if (lm.matches()) {
            message.sendReplyNotificationForLibrary(origUser,commentUser,Long.parseLong(lm.group(1)));
            sentUids.add(origUser.getUserId());
          }
        }
      }
    }
  }
  Matcher pm=PLAYLIST_ITEM_PAT.matcher(c.getResourceId());
  if (pm.matches()) {
    MidasPlaylist p=playlistDao.getPlaylistById(Long.parseLong(pm.group(1)));
    for (    Long ownerId : p.getOwnerIds()) {
      if (sentUids.contains(ownerId))       continue;
      MidasUserConfig muc=userCfgDao.getUserConfig(ownerId);
      String pceStr=(muc == null) ? null : muc.getItem(""String_Node_Str"");
      boolean pce=(pceStr == null) ? true : Boolean.valueOf(pceStr);
      if (pce) {
        MidasUser owner=userDao.getById(ownerId);
        message.sendCommentNotificationForPlaylist(owner,commentUser,p);
        sentUids.add(ownerId);
      }
    }
  }
 else {
    Matcher lm=LIBRARY_ITEM_PAT.matcher(c.getResourceId());
    if (!lm.matches()) {
      log.error(""String_Node_Str"" + c.getResourceId());
      return;
    }
    long ownerId=Long.parseLong(lm.group(1));
    if (!sentUids.contains(ownerId)) {
      MidasUserConfig muc=userCfgDao.getUserConfig(ownerId);
      String pceStr=(muc == null) ? null : muc.getItem(""String_Node_Str"");
      boolean pce=(pceStr == null) ? true : Boolean.valueOf(pceStr);
      if (pce) {
        MidasUser owner=userDao.getById(ownerId);
        message.sendCommentNotificationForLibrary(owner,commentUser);
        sentUids.add(ownerId);
      }
    }
  }
}",0.9907033144704932
6745,"private void playlistUpdated(long upPlId){
  waitingForPlaylists.remove(upPlId);
  if (waitingForPlaylists.size() == 0) {
    streamsToFetch=waitingForStreams.size();
    onStreamUpdate(0,streamsToFetch);
    if (streamsToFetch > 0) {
      for (      Long plId : plIds) {
        Playlist p;
synchronized (PlaylistService.this) {
          p=playlists.get(plId);
        }
        if (p != null) {
          if (p.getStreamIds().size() == 0)           finishedFetchingPlaylist(p);
 else           streams.fetchStreams(p.getStreamIds(),new StreamFetcher(p,this));
        }
      }
    }
 else {
      for (      long plId : plIds) {
        comments.fetchCommentsForPlaylist(plId);
      }
    }
  }
}","private void playlistUpdated(long upPlId){
  waitingForPlaylists.remove(upPlId);
  if (waitingForPlaylists.size() == 0) {
    streamsToFetch=waitingForStreams.size();
    onStreamUpdate(0,streamsToFetch);
    if (streamsToFetch > 0) {
      for (      Long plId : plIds) {
        Playlist p;
synchronized (PlaylistService.this) {
          p=playlists.get(plId);
        }
        if (p != null) {
          if (p.getStreamIds().size() == 0)           finishedFetchingPlaylist(p);
 else           streams.fetchStreams(p.getStreamIds(),new StreamFetcher(p,this));
        }
      }
    }
 else {
      for (      long plId : plIds) {
        Playlist p;
synchronized (PlaylistService.this) {
          p=playlists.get(plId);
        }
        finishedFetchingPlaylist(p);
      }
    }
  }
}",0.8600133958472873
6746,"public void love(Collection<String> sids){
  if (log.isDebugEnabled()) {
    StringBuffer sb=new StringBuffer(""String_Node_Str"");
    sb.append(TextUtil.numItems(sids,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    for (    String sid : sids) {
      sb.append(sid).append(""String_Node_Str"");
    }
    log.debug(sb);
  }
  Playlist loves;
synchronized (this) {
    Long lovePlid=myPlaylistIdsByTitle.get(""String_Node_Str"");
    loves=playlists.get(lovePlid);
  }
  if (loves == null) {
    log.error(""String_Node_Str"");
    return;
  }
  boolean haveNew=false;
  for (  String sid : sids) {
    if (!loves.getStreamIds().contains(sid)) {
      loves.getStreamIds().add(sid);
      haveNew=true;
    }
  }
  if (!haveNew) {
    log.debug(""String_Node_Str"");
    return;
  }
  lovesToPost=true;
  UserConfig uc=rbnb.getUserService().getMyUserConfig();
  String cfg=uc.getItem(""String_Node_Str"");
  if (cfg == null || cfg.equalsIgnoreCase(""String_Node_Str"")) {
    if (postLovesTimeout == null) {
      postLovesTimeout=new Timeout(rbnb.getExecutor(),new CatchingRunnable(){
        public void doRun() throws Exception {
          postLovesNow();
        }
      }
);
    }
    postLovesTimeout.set(rbnb.getConfig().getPostLovesDelayMins() * 60 * 1000);
  }
 else   postLovesNow();
}","public void love(Collection<String> sids){
  if (log.isDebugEnabled()) {
    StringBuffer sb=new StringBuffer(""String_Node_Str"");
    sb.append(TextUtil.numItems(sids,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    for (    String sid : sids) {
      sb.append(sid).append(""String_Node_Str"");
    }
    log.debug(sb);
  }
  Playlist loves;
synchronized (this) {
    Long lovePlid=myPlaylistIdsByTitle.get(""String_Node_Str"");
    loves=playlists.get(lovePlid);
  }
  if (loves == null) {
    log.error(""String_Node_Str"");
    return;
  }
  boolean haveNew=false;
  for (  String sid : sids) {
    if (!loves.getStreamIds().contains(sid)) {
      loves.getStreamIds().add(sid);
      haveNew=true;
    }
  }
  if (!haveNew) {
    log.debug(""String_Node_Str"");
    return;
  }
  lovesToPost=true;
  UserConfig uc=rbnb.getUserService().getMyUserConfig();
  String cfg=uc.getItem(""String_Node_Str"");
  if (cfg == null || cfg.equalsIgnoreCase(""String_Node_Str"")) {
    if (postLovesTimeout == null) {
      postLovesTimeout=new Timeout(rbnb.getExecutor(),new CatchingRunnable(){
        public void doRun() throws Exception {
          postLovesNow();
        }
      }
);
    }
    postLovesTimeout.set(rbnb.getConfig().getPostLovesDelayMins() * 60 * 1000);
    events.firePlaylistChanged(loves);
  }
 else   postLovesNow();
}",0.9851428571428572
6747,"private void postLovesNow(){
  if (postLovesTimeout != null)   postLovesTimeout.cancel();
  if (!lovesToPost)   return;
  lovesToPost=false;
  Playlist lovesPl;
synchronized (this) {
    Long lovePlid=myPlaylistIdsByTitle.get(""String_Node_Str"");
    lovesPl=playlists.get(lovePlid);
  }
  updatePlaylist(lovesPl);
}","private void postLovesNow(){
  if (postLovesTimeout != null)   postLovesTimeout.cancel();
  if (!lovesToPost)   return;
  lovesToPost=false;
  Playlist lovesPl;
synchronized (this) {
    Long lovePlid=myPlaylistIdsByTitle.get(""String_Node_Str"");
    lovesPl=playlists.get(lovePlid);
  }
  log.debug(""String_Node_Str"" + lovesPl.getPlaylistId() + ""String_Node_Str"");
  db.markAllAsSeen(lovesPl);
  events.firePlaylistChanged(lovesPl);
  metadata.updatePlaylist(lovesPl,new PlaylistCallback(){
    public void success(    Playlist newP){
      log.info(""String_Node_Str"" + newP.getPlaylistId() + ""String_Node_Str"");
      signalLovesPosted();
    }
    public void error(    long playlistId,    Exception ex){
      log.error(""String_Node_Str"" + playlistId + ""String_Node_Str"",ex);
      signalLovesPosted();
    }
    private void signalLovesPosted(){
      if (postLovesLock != null) {
        postLovesLock.lock();
        try {
          finalLovesPosted.signal();
        }
  finally {
          postLovesLock.unlock();
        }
      }
    }
  }
);
}",0.4251278305332359
6748,"@Override public void shutdown() throws Exception {
  postLovesNow();
}","@Override public void shutdown() throws Exception {
  if (lovesToPost) {
    postLovesLock=new ReentrantLock();
    finalLovesPosted=postLovesLock.newCondition();
    postLovesNow();
    postLovesLock.lock();
    try {
      log.info(""String_Node_Str"");
      finalLovesPosted.await();
      log.info(""String_Node_Str"");
    }
  finally {
      postLovesLock.unlock();
    }
  }
}",0.3148558758314856
6749,"/** 
 * @syncpriority 140 
 */
private void makeCCTo(Node nd,Attempt onCompletionAttempt,boolean canSendReqConn){
  ConnectAttempt newAt;
  String newNodeId=nd.getId();
synchronized (this) {
    if (cons.containsKey(newNodeId)) {
      log.debug(""String_Node_Str"" + newNodeId);
      if (onCompletionAttempt != null)       onCompletionAttempt.succeeded();
      return;
    }
    ConnectAttempt curAt=connectAttempts.get(newNodeId);
    if (curAt != null) {
      log.debug(""String_Node_Str"" + newNodeId);
      if (onCompletionAttempt != null) {
        log.debug(""String_Node_Str"" + newNodeId);
        curAt.addContingentAttempt(curAt);
      }
      return;
    }
    if (mina.getBadNodeList().checkBadNode(newNodeId)) {
      log.debug(""String_Node_Str"" + newNodeId);
      if (onCompletionAttempt != null)       onCompletionAttempt.failed();
      return;
    }
    newAt=new ConnectAttempt(nd,canSendReqConn);
    if (onCompletionAttempt != null)     newAt.addContingentAttempt(onCompletionAttempt);
    connectAttempts.put(newNodeId,newAt);
  }
  log.debug(""String_Node_Str"" + newNodeId);
  newAt.start();
  attemptConnection(newAt);
}","/** 
 * @syncpriority 140 
 */
private void makeCCTo(Node nd,Attempt onCompletionAttempt,boolean canSendReqConn){
  ConnectAttempt newAt;
  String newNodeId=nd.getId();
synchronized (this) {
    if (cons.containsKey(newNodeId)) {
      log.debug(""String_Node_Str"" + newNodeId);
      if (onCompletionAttempt != null)       onCompletionAttempt.succeeded();
      return;
    }
    ConnectAttempt curAt=connectAttempts.get(newNodeId);
    if (curAt != null) {
      log.debug(""String_Node_Str"" + newNodeId);
      if (onCompletionAttempt != null) {
        log.debug(""String_Node_Str"" + newNodeId + ""String_Node_Str""+ System.identityHashCode(curAt)+ ""String_Node_Str"");
        curAt.addContingentAttempt(onCompletionAttempt);
      }
      return;
    }
    if (mina.getBadNodeList().checkBadNode(newNodeId)) {
      log.debug(""String_Node_Str"" + newNodeId);
      if (onCompletionAttempt != null)       onCompletionAttempt.failed();
      return;
    }
    newAt=new ConnectAttempt(nd,canSendReqConn);
    if (onCompletionAttempt != null)     newAt.addContingentAttempt(onCompletionAttempt);
    connectAttempts.put(newNodeId,newAt);
  }
  log.debug(""String_Node_Str"" + newNodeId);
  newAt.start();
  attemptConnection(newAt);
}",0.9287220582032898
6750,"/** 
 * @syncpriority 140 
 */
public void notifySuccessfulConnection(ControlConnection cc){
  log.info(""String_Node_Str"" + cc.getNodeId());
  ConnectAttempt ca;
synchronized (this) {
    inProgressCons.remove(cc.getNodeId());
    waitingForCons.remove(cc.getNodeId());
    cons.put(cc.getNodeId(),cc);
    ca=connectAttempts.remove(cc.getNodeId());
  }
  mina.getBadNodeList().markNodeAsGood(cc.getNodeId());
  if (cc.getNode().getSupernode()) {
    List<String> advertSids=mina.getStreamMgr().getAdvertisingStreamIds();
    if (advertSids.size() > 0)     mina.getStreamAdvertiser().advertiseStreams(advertSids);
    List<String> wantingSources=mina.getSourceMgr().sidsWantingSources();
    if (wantingSources.size() > 0)     cc.sendMessage(""String_Node_Str"",WantSource.newBuilder().addAllStreamId(wantingSources).build());
  }
  if (ca != null)   ca.succeeded();
  if (mina.getEscrowMgr() != null)   mina.getEscrowMgr().notifySuccessfulConnection(cc);
  mina.getEventMgr().fireNodeConnected(buildConnectedNode(cc));
  checkNatTraversal(cc);
}","/** 
 * @syncpriority 140 
 */
public void notifySuccessfulConnection(ControlConnection cc){
  log.info(""String_Node_Str"" + cc.getNodeId());
  ConnectAttempt ca;
synchronized (this) {
    inProgressCons.remove(cc.getNodeId());
    waitingForCons.remove(cc.getNodeId());
    cons.put(cc.getNodeId(),cc);
    ca=connectAttempts.remove(cc.getNodeId());
  }
  mina.getBadNodeList().markNodeAsGood(cc.getNodeId());
  if (cc.getNode().getSupernode()) {
    List<String> advertSids=mina.getStreamMgr().getAdvertisingStreamIds();
    if (advertSids.size() > 0)     mina.getStreamAdvertiser().advertiseStreams(advertSids);
    List<String> wantingSources=mina.getSourceMgr().sidsWantingSources();
    if (wantingSources.size() > 0)     cc.sendMessage(""String_Node_Str"",WantSource.newBuilder().addAllStreamId(wantingSources).build());
  }
  if (ca != null) {
    ca.succeeded();
  }
  if (mina.getEscrowMgr() != null)   mina.getEscrowMgr().notifySuccessfulConnection(cc);
  mina.getEventMgr().fireNodeConnected(buildConnectedNode(cc));
  checkNatTraversal(cc);
}",0.9799618320610688
6751,"@Override public void runTask() throws Exception {
  log.debug(""String_Node_Str"" + plIds);
  statusText=""String_Node_Str"";
  fireUpdated();
  metadata.fetchPlaylists(plIds,fetcher);
}","@Override public void runTask() throws Exception {
  log.debug(""String_Node_Str"" + plIds);
  if (plIds.size() == 0) {
    statusText=""String_Node_Str"";
    completion=1f;
    fireUpdated();
    onCompletion();
    return;
  }
  statusText=""String_Node_Str"";
  fireUpdated();
  metadata.fetchPlaylists(plIds,fetcher);
}",0.7305389221556886
6752,"public TrackList(final RobonoboFrame frame,TrackListTableModel model){
  this.model=model;
  this.frame=frame;
  log=LogFactory.getLog(getClass());
  setLayout(new GridLayout(1,0));
  setBorder(BorderFactory.createEmptyBorder(0,1,0,1));
  table=new JXTable(model);
  table.setFont(RoboFont.getFont(13,false));
  table.setRowHeight(21);
  table.setColumnControlVisible(true);
  table.setHorizontalScrollEnabled(true);
  table.setFillsViewportHeight(true);
  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  table.setBackground(Color.WHITE);
  table.setHighlighters(HighlighterFactory.createSimpleStriping());
  table.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      frame.mainPanel.getPlaybackPanel().trackSelectionChanged();
    }
  }
);
  table.getColumn(0).setCellRenderer(new PlaybackStatusRenderer());
  TextRenderer tr=new TextRenderer();
  table.getColumn(1).setCellRenderer(tr);
  table.getColumn(2).setCellRenderer(tr);
  table.getColumn(3).setCellRenderer(tr);
  table.getColumn(4).setCellRenderer(tr);
  table.getColumn(5).setCellRenderer(tr);
  table.getColumn(6).setCellRenderer(tr);
  table.getColumn(7).setCellRenderer(tr);
  table.getColumn(8).setCellRenderer(new TransferStatusCellRenderer());
  table.getColumn(9).setCellRenderer(tr);
  table.getColumn(10).setCellRenderer(tr);
  table.getColumn(11).setCellRenderer(new DateRenderer());
  table.getColumn(12).setCellRenderer(tr);
  table.setSortable(false);
  table.getTableHeader().setDefaultRenderer(new JTableHeader().getDefaultRenderer());
  table.getTableHeader().setFont(RoboFont.getFont(13,false));
  if (javaMajorVersion() >= 6) {
    table.setAutoCreateRowSorter(false);
    table.setRowSorter(null);
  }
  scrollPane=new JScrollPane(table);
  if (model.wantScrollEventsEver())   viewportListener=new ViewportListener();
  if (model instanceof GlazedTrackListTableModel) {
    GlazedTrackListTableModel gtltm=(GlazedTrackListTableModel)model;
    if (gtltm.canSort()) {
      TableComparatorChooser<Track> tcc=TableComparatorChooser.install(table,gtltm.getSortedList(),TableComparatorChooser.SINGLE_COLUMN);
      if (viewportListener != null)       tcc.addSortActionListener(viewportListener);
    }
    MatcherEditor<Track> matchEdit=gtltm.getMatcherEditor();
    if (matchEdit != null && viewportListener != null)     matchEdit.addMatcherEditorListener(viewportListener);
  }
  TableColumnModelExt cm=(TableColumnModelExt)table.getColumnModel();
  cm.getColumn(0).setPreferredWidth(22);
  cm.getColumn(1).setPreferredWidth(187);
  cm.getColumn(2).setPreferredWidth(137);
  cm.getColumn(3).setPreferredWidth(139);
  cm.getColumn(4).setPreferredWidth(44);
  cm.getColumn(5).setPreferredWidth(40);
  cm.getColumn(6).setPreferredWidth(47);
  cm.getColumn(7).setPreferredWidth(60);
  cm.getColumn(8).setPreferredWidth(160);
  cm.getColumn(9).setPreferredWidth(80);
  cm.getColumn(10).setPreferredWidth(80);
  cm.getColumn(11).setPreferredWidth(140);
  cm.getColumn(12).setPreferredWidth(300);
  int[] hiddenCols=model.hiddenCols();
  List<TableColumn> cols=cm.getColumns(true);
  for (int i=0; i < hiddenCols.length; i++) {
    TableColumnExt colExt=(TableColumnExt)cols.get(hiddenCols[i]);
    colExt.setVisible(false);
  }
  table.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        frame.mainPanel.getPlaybackPanel().playSelectedTracks();
        e.consume();
      }
    }
    public void mousePressed(    MouseEvent e){
      maybeShowPopup(e);
    }
    public void mouseReleased(    MouseEvent e){
      maybeShowPopup(e);
    }
    private void maybeShowPopup(    MouseEvent e){
      if (!e.isPopupTrigger())       return;
      int mouseRow=table.rowAtPoint(e.getPoint());
      boolean alreadySel=false;
      for (      int selRow : table.getSelectedRows()) {
        if (selRow == mouseRow) {
          alreadySel=true;
          break;
        }
      }
      if (!alreadySel)       table.getSelectionModel().addSelectionInterval(mouseRow,mouseRow);
      popupMenu.refresh();
      popupMenu.show(e.getComponent(),e.getX(),e.getY());
    }
  }
);
  if (viewportListener != null)   scrollPane.getViewport().addChangeListener(viewportListener);
  add(scrollPane,""String_Node_Str"");
}","public TrackList(final RobonoboFrame frame,TrackListTableModel model){
  this.model=model;
  this.frame=frame;
  log=LogFactory.getLog(getClass());
  setLayout(new GridLayout(1,0));
  setBorder(BorderFactory.createEmptyBorder(0,1,0,1));
  table=new JXTable(model);
  table.setFont(RoboFont.getFont(13,false));
  table.setRowHeight(21);
  table.setColumnControlVisible(true);
  table.setHorizontalScrollEnabled(true);
  table.setFillsViewportHeight(true);
  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  table.setBackground(Color.WHITE);
  table.setHighlighters(HighlighterFactory.createSimpleStriping());
  table.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      frame.mainPanel.getPlaybackPanel().trackSelectionChanged();
    }
  }
);
  table.getColumn(0).setCellRenderer(new PlaybackStatusRenderer());
  TextRenderer tr=new TextRenderer();
  table.getColumn(1).setCellRenderer(tr);
  table.getColumn(2).setCellRenderer(tr);
  table.getColumn(3).setCellRenderer(tr);
  table.getColumn(4).setCellRenderer(tr);
  table.getColumn(5).setCellRenderer(tr);
  table.getColumn(6).setCellRenderer(tr);
  table.getColumn(7).setCellRenderer(tr);
  table.getColumn(8).setCellRenderer(new TransferStatusCellRenderer());
  table.getColumn(9).setCellRenderer(tr);
  table.getColumn(10).setCellRenderer(tr);
  table.getColumn(11).setCellRenderer(new DateRenderer());
  table.getColumn(12).setCellRenderer(tr);
  table.setSortable(false);
  table.getTableHeader().setDefaultRenderer(new JTableHeader().getDefaultRenderer());
  table.getTableHeader().setFont(RoboFont.getFont(13,false));
  if (javaMajorVersion() >= 6) {
    table.setAutoCreateRowSorter(false);
    table.setRowSorter(null);
  }
  scrollPane=new JScrollPane(table);
  if (model.wantScrollEventsEver())   viewportListener=new ViewportListener();
  if (model instanceof GlazedTrackListTableModel) {
    GlazedTrackListTableModel gtltm=(GlazedTrackListTableModel)model;
    MatcherEditor<Track> matchEdit=gtltm.getMatcherEditor();
    if (matchEdit != null && viewportListener != null)     matchEdit.addMatcherEditorListener(viewportListener);
  }
  TableColumnModelExt cm=(TableColumnModelExt)table.getColumnModel();
  cm.getColumn(0).setPreferredWidth(22);
  cm.getColumn(1).setPreferredWidth(187);
  cm.getColumn(2).setPreferredWidth(137);
  cm.getColumn(3).setPreferredWidth(139);
  cm.getColumn(4).setPreferredWidth(44);
  cm.getColumn(5).setPreferredWidth(40);
  cm.getColumn(6).setPreferredWidth(47);
  cm.getColumn(7).setPreferredWidth(60);
  cm.getColumn(8).setPreferredWidth(160);
  cm.getColumn(9).setPreferredWidth(80);
  cm.getColumn(10).setPreferredWidth(80);
  cm.getColumn(11).setPreferredWidth(140);
  cm.getColumn(12).setPreferredWidth(300);
  int[] hiddenCols=model.hiddenCols();
  List<TableColumn> cols=cm.getColumns(true);
  for (int i=0; i < hiddenCols.length; i++) {
    TableColumnExt colExt=(TableColumnExt)cols.get(hiddenCols[i]);
    colExt.setVisible(false);
  }
  table.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        frame.mainPanel.getPlaybackPanel().playSelectedTracks();
        e.consume();
      }
    }
    public void mousePressed(    MouseEvent e){
      maybeShowPopup(e);
    }
    public void mouseReleased(    MouseEvent e){
      maybeShowPopup(e);
    }
    private void maybeShowPopup(    MouseEvent e){
      if (!e.isPopupTrigger())       return;
      int mouseRow=table.rowAtPoint(e.getPoint());
      boolean alreadySel=false;
      for (      int selRow : table.getSelectedRows()) {
        if (selRow == mouseRow) {
          alreadySel=true;
          break;
        }
      }
      if (!alreadySel)       table.getSelectionModel().addSelectionInterval(mouseRow,mouseRow);
      popupMenu.refresh();
      popupMenu.show(e.getComponent(),e.getX(),e.getY());
    }
  }
);
  if (viewportListener != null)   scrollPane.getViewport().addChangeListener(viewportListener);
  add(scrollPane,""String_Node_Str"");
}",0.969993021632938
6753,"public CommentPanel(Comment c,User u,int totalWidth,int indentLvl,final CommentRemover remover){
  this.c=c;
  this.u=u;
  this.indentLvl=indentLvl;
  int textWidth=totalWidth - 80;
  double[][] cellSizen={{0,50,10,TableLayout.FILL,0},{0,50,TableLayout.FILL,0}};
  setLayout(new TableLayout(cellSizen));
  add(new JLabel(imgIconFromUrl(u.getImgUrl())),""String_Node_Str"");
  extendoPanel=new JPanel();
  BoxLayout epl=new BoxLayout(extendoPanel,BoxLayout.Y_AXIS);
  extendoPanel.setLayout(epl);
  Border botLine=BorderFactory.createMatteBorder(0,0,1,0,RoboColor.DARKISH_GRAY);
  Border margin=BorderFactory.createEmptyBorder(0,0,5,0);
  extendoPanel.setBorder(BorderFactory.createCompoundBorder(margin,botLine));
  nameLbl=new RLabel16B(u.getFriendlyName());
  nameLbl.setAlignmentX(LEFT_ALIGNMENT);
  dateLbl=new RLabel11(df.format(c.getDate()));
  dateLbl.setAlignmentX(LEFT_ALIGNMENT);
  textLbl=new LineBreakTextPanel(c.getText(),RoboFont.getFont(13,false),textWidth);
  textLbl.setAlignmentX(LEFT_ALIGNMENT);
  add(extendoPanel,""String_Node_Str"");
  btnsPnl=new JPanel();
  btnsPnl.setAlignmentX(LEFT_ALIGNMENT);
  double[][] btnsCellSizen={{80,10,100,TableLayout.FILL},{5,30,5}};
  btnsPnl.setLayout(new TableLayout(btnsCellSizen));
  RButton replyBtn=new RGlassButton(""String_Node_Str"");
  replyBtn.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      CatchingRunnable hideNewCmt=new CatchingRunnable(){
        public void doRun() throws Exception {
          newCmtForm=null;
          relayoutPanel();
        }
      }
;
      final int scrollOffset=offsetToComment(CommentPanel.this);
      newCmtForm=new NewCommentForm(hideNewCmt,CommentPanel.this.c.getCommentId());
      relayoutPanel();
      newCmtForm.textArea.requestFocusInWindow();
      invokeLater(new CatchingRunnable(){
        public void doRun() throws Exception {
          cmtListScrollPane.getViewport().setViewPosition(new Point(0,scrollOffset));
        }
      }
);
    }
  }
);
  btnsPnl.add(replyBtn,""String_Node_Str"");
  if (remover != null) {
    RButton removeBtn=new RRedGlassButton(""String_Node_Str"");
    final CatchingRunnable doRemove=new CatchingRunnable(){
      public void doRun() throws Exception {
        remover.doRemove(CommentPanel.this);
        frame.ctrl.deleteComment(CommentPanel.this.c,new CommentCallback(){
          public void success(          Comment c){
          }
          public void error(          long commentId,          Exception ex){
            log.error(""String_Node_Str"",ex);
          }
        }
);
      }
    }
;
    removeBtn.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        frame.showSheet(new ConfirmSheet(frame,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",doRemove));
      }
    }
);
    btnsPnl.add(removeBtn,""String_Node_Str"");
  }
  relayoutPanel();
}","public CommentPanel(Comment c,User u,int totalWidth,int indentLvl,final CommentRemover remover){
  this.c=c;
  this.u=u;
  this.indentLvl=indentLvl;
  int textWidth=totalWidth - 80;
  double[][] cellSizen={{0,50,10,TableLayout.FILL,0},{0,50,TableLayout.FILL,0}};
  setLayout(new TableLayout(cellSizen));
  add(new JLabel(imgIconFromUrl(u.getImgUrl())),""String_Node_Str"");
  extendoPanel=new JPanel();
  BoxLayout epl=new BoxLayout(extendoPanel,BoxLayout.Y_AXIS);
  extendoPanel.setLayout(epl);
  Border botLine=BorderFactory.createMatteBorder(0,0,1,0,RoboColor.DARKISH_GRAY);
  Border margin=BorderFactory.createEmptyBorder(0,0,5,0);
  extendoPanel.setBorder(BorderFactory.createCompoundBorder(margin,botLine));
  nameLbl=new RLabel16B(u.getFriendlyName());
  nameLbl.setAlignmentX(LEFT_ALIGNMENT);
  dateLbl=new RLabel11(df.format(c.getDate()));
  dateLbl.setAlignmentX(LEFT_ALIGNMENT);
  textLbl=new LineBreakTextPanel(c.getText(),RoboFont.getFont(13,false),textWidth);
  textLbl.setAlignmentX(LEFT_ALIGNMENT);
  add(extendoPanel,""String_Node_Str"");
  btnsPnl=new JPanel();
  btnsPnl.setAlignmentX(LEFT_ALIGNMENT);
  double[][] btnsCellSizen={{80,10,100,TableLayout.FILL},{5,30,5}};
  btnsPnl.setLayout(new TableLayout(btnsCellSizen));
  RButton replyBtn=new RGlassButton(""String_Node_Str"");
  replyBtn.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      CatchingRunnable hideNewCmt=new CatchingRunnable(){
        public void doRun() throws Exception {
          newCmtForm=null;
          relayoutPanel();
        }
      }
;
      final int scrollOffset=offsetToComment(CommentPanel.this);
      newCmtForm=new NewCommentForm(hideNewCmt,CommentPanel.this.c.getCommentId());
      relayoutPanel();
      newCmtForm.textArea.requestFocusInWindow();
      invokeLater(new CatchingRunnable(){
        public void doRun() throws Exception {
          cmtListScrollPane.getViewport().setViewPosition(new Point(0,scrollOffset));
        }
      }
);
    }
  }
);
  btnsPnl.add(replyBtn,""String_Node_Str"");
  if (remover != null) {
    RButton deleteBtn=new RRedGlassButton(""String_Node_Str"");
    final CatchingRunnable doRemove=new CatchingRunnable(){
      public void doRun() throws Exception {
        remover.doRemove(CommentPanel.this);
        frame.ctrl.deleteComment(CommentPanel.this.c,new CommentCallback(){
          public void success(          Comment c){
          }
          public void error(          long commentId,          Exception ex){
            log.error(""String_Node_Str"",ex);
          }
        }
);
      }
    }
;
    deleteBtn.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        frame.showSheet(new ConfirmSheet(frame,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",doRemove));
      }
    }
);
    btnsPnl.add(deleteBtn,""String_Node_Str"");
  }
  relayoutPanel();
}",0.9948293691830404
6754,"public ConfirmSheet(RobonoboFrame f,String title,String message,String confirmBtnLbl,final Runnable runOnUiThread){
  super(f);
  setName(""String_Node_Str"");
  confirmBtn=new RGlassButton(confirmBtnLbl);
  int btnWidth=getFontMetrics(confirmBtn.getFont()).stringWidth(confirmBtnLbl.toUpperCase()) + 50;
  JPanel msgLbl=new LineBreakTextPanel(message,RoboFont.getFont(13,false),400 + btnWidth);
  int msgHeight=msgLbl.getPreferredSize().height;
  double[][] cellSizen={{10,30,btnWidth,10,100,10},{10,20,5,msgHeight,10,30,10}};
  setLayout(new TableLayout(cellSizen));
  RLabel titleLbl=new RLabel14B(title);
  add(titleLbl,""String_Node_Str"");
  add(msgLbl,""String_Node_Str"");
  confirmBtn.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      setVisible(false);
      runOnUiThread.run();
    }
  }
);
  add(confirmBtn,""String_Node_Str"");
  cancelBtn=new RRedGlassButton(""String_Node_Str"");
  cancelBtn.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setVisible(false);
    }
  }
);
  add(cancelBtn,""String_Node_Str"");
}","public ConfirmSheet(RobonoboFrame f,String title,String message,String confirmBtnLbl,final Runnable runOnUiThread){
  super(f);
  setName(""String_Node_Str"");
  confirmBtn=new RGlassButton(confirmBtnLbl);
  int btnWidth=getFontMetrics(confirmBtn.getFont()).stringWidth(confirmBtnLbl.toUpperCase()) + 50;
  JPanel msgLbl=new LineBreakTextPanel(message,RoboFont.getFont(13,false),140 + btnWidth);
  int msgHeight=msgLbl.getPreferredSize().height;
  double[][] cellSizen={{10,30,btnWidth,10,100,10},{10,20,5,msgHeight,10,30,10}};
  setLayout(new TableLayout(cellSizen));
  RLabel titleLbl=new RLabel14B(title);
  add(titleLbl,""String_Node_Str"");
  add(msgLbl,""String_Node_Str"");
  confirmBtn.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      setVisible(false);
      runOnUiThread.run();
    }
  }
);
  add(confirmBtn,""String_Node_Str"");
  cancelBtn=new RRedGlassButton(""String_Node_Str"");
  cancelBtn.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setVisible(false);
    }
  }
);
  add(cancelBtn,""String_Node_Str"");
}",0.9991031390134528
6755,"public void run(RobonoboConsole console,String[] args,PrintWriter out) throws Exception {
  if (args.length < 2) {
    printHelp(out);
    return;
  }
  Connection conn;
  if (args[0].equalsIgnoreCase(""String_Node_Str""))   conn=console.getController().getMetadataDbConnection();
 else   if (args[0].equalsIgnoreCase(""String_Node_Str""))   conn=console.getController().getPageDbConnection();
 else {
    printHelp(out);
    return;
  }
  String query=args[1];
  try {
    Statement st=conn.createStatement();
    ResultSet rs=st.executeQuery(query);
    ResultSetMetaData md=rs.getMetaData();
    int[] maxWidths=new int[md.getColumnCount() + 1];
    List<String[]> vals=new ArrayList<String[]>();
    while (rs.next()) {
      String[] rowVals=new String[md.getColumnCount() + 1];
      for (int i=1; i < rowVals.length; i++) {
        Object val=rs.getObject(i);
        String valStr=String.valueOf(val);
        if (valStr.length() > maxWidths[i])         maxWidths[i]=valStr.length();
        rowVals[i]=valStr;
      }
      vals.add(rowVals);
    }
    int totalWidth=0;
    for (int i=1; i <= md.getColumnCount(); i++) {
      String colName=md.getColumnName(i);
      if (maxWidths[i] < colName.length())       maxWidths[i]=colName.length();
      int colWidth=maxWidths[i] + 1;
      out.print(rightPad(colName,colWidth));
      totalWidth+=colWidth;
    }
    out.println();
    out.println(repeat(""String_Node_Str"",totalWidth));
    int numRows=0;
    for (    String[] rowVals : vals) {
      for (int i=1; i < rowVals.length; i++) {
        out.print(rightPad(rowVals[i],maxWidths[i] + 1));
      }
      out.println();
      numRows++;
    }
    out.println(numItems(numRows,""String_Node_Str""));
    st.close();
  }
 catch (  SQLException e) {
    out.println(""String_Node_Str"" + e.getMessage());
  }
 finally {
    if (args[0].equalsIgnoreCase(""String_Node_Str""))     console.getController().returnMetadataDbConnection(conn);
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     console.getController().returnPageDbConnection(conn);
 else     throw new SeekInnerCalmException();
  }
}","public void run(RobonoboConsole console,String[] args,PrintWriter out) throws Exception {
  if (args.length < 2) {
    printHelp(out);
    return;
  }
  Connection conn;
  if (args[0].equalsIgnoreCase(""String_Node_Str""))   conn=console.getController().getMetadataDbConnection();
 else   if (args[0].equalsIgnoreCase(""String_Node_Str""))   conn=console.getController().getPageDbConnection();
 else {
    printHelp(out);
    return;
  }
  String query=args[1];
  try {
    DbUtil.runQuery(conn,query,out);
  }
  finally {
    if (args[0].equalsIgnoreCase(""String_Node_Str""))     console.getController().returnMetadataDbConnection(conn);
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     console.getController().returnPageDbConnection(conn);
 else     throw new SeekInnerCalmException();
  }
}",0.5360824742268041
6756,"public void startAllDownloads() throws RobonoboException {
  rbnb.getExecutor().execute(new CatchingRunnable(){
    public void doRun() throws Exception {
      int numStarted=0;
      List<String> dlSidList=db.getDownloadSids();
      for (      String sid : dlSidList) {
        DownloadingTrack d=db.getDownload(sid);
        if (d.getDownloadStatus() == DownloadStatus.Finished) {
          db.deleteDownload(sid);
          continue;
        }
        PageBuffer pb=storage.getPageBuf(sid);
        if (pb == null) {
          log.error(""String_Node_Str"" + sid + ""String_Node_Str"");
          db.deleteDownload(sid);
          continue;
        }
        d.setPageBuf(pb);
        if (pb.isComplete()) {
          share.addShareFromCompletedDownload(d);
          db.deleteDownload(sid);
          continue;
        }
synchronized (dPriority) {
          dPriority.add(d.getStream().getStreamId());
        }
synchronized (this) {
          downloadSids.add(sid);
        }
        if (numStarted < rbnb.getConfig().getMaxRunningDownloads()) {
          startDownload(d,pb);
          numStarted++;
        }
 else {
          d.setDownloadStatus(DownloadStatus.Paused);
          db.putDownload(d);
          log.debug(""String_Node_Str"" + sid);
        }
        rbnb.getEventService().fireTrackUpdated(sid);
      }
      updatePriorities();
      if (rbnb.getConfig().getDownloadCheckFreq() > 0) {
        int freqMs=rbnb.getConfig().getDownloadCheckFreq();
        checkDownloadsTask=rbnb.getExecutor().scheduleAtFixedRate(new CatchingRunnable(){
          public void doRun() throws Exception {
            startMoreDownloads();
          }
        }
,freqMs,freqMs,TimeUnit.SECONDS);
      }
    }
  }
);
}","public void startAllDownloads() throws RobonoboException {
  rbnb.getExecutor().execute(new CatchingRunnable(){
    public void doRun() throws Exception {
      int numStarted=0;
      List<String> dlSidList=db.getDownloadSids();
      for (      String sid : dlSidList) {
        DownloadingTrack d=db.getDownload(sid);
        if (d.getDownloadStatus() == DownloadStatus.Finished) {
          db.deleteDownload(sid);
          continue;
        }
        PageBuffer pb=storage.getPageBuf(sid);
        if (pb == null) {
          log.error(""String_Node_Str"" + sid + ""String_Node_Str"");
          db.deleteDownload(sid);
          continue;
        }
        d.setPageBuf(pb);
        if (pb.isComplete()) {
          d.setDownloadStatus(DownloadStatus.Finished);
          share.addShareFromCompletedDownload(d);
          db.deleteDownload(sid);
          continue;
        }
synchronized (dPriority) {
          dPriority.add(d.getStream().getStreamId());
        }
synchronized (this) {
          downloadSids.add(sid);
        }
        if (numStarted < rbnb.getConfig().getMaxRunningDownloads()) {
          startDownload(d,pb);
          numStarted++;
        }
 else {
          d.setDownloadStatus(DownloadStatus.Paused);
          db.putDownload(d);
          log.debug(""String_Node_Str"" + sid);
        }
        rbnb.getEventService().fireTrackUpdated(sid);
      }
      updatePriorities();
      if (rbnb.getConfig().getDownloadCheckFreq() > 0) {
        int freqMs=rbnb.getConfig().getDownloadCheckFreq();
        checkDownloadsTask=rbnb.getExecutor().scheduleAtFixedRate(new CatchingRunnable(){
          public void doRun() throws Exception {
            startMoreDownloads();
          }
        }
,freqMs,freqMs,TimeUnit.SECONDS);
      }
    }
  }
);
}",0.9839541547277936
6757,"private void configureUPnP(){
  RobonoboConfig roboCfg=rbnb.getConfig();
  MinaConfig minaCfg=(MinaConfig)getRobonobo().getConfig(""String_Node_Str"");
  roboCfg.setGatewayCfgResult(""String_Node_Str"");
  minaCfg.setGatewayAddress(null);
  GatewayDiscover gd=new GatewayDiscover();
  Map<InetAddress,GatewayDevice> devices;
  try {
    devices=gd.discover();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + CodeUtil.shortClassName(e.getClass()) + ""String_Node_Str"");
    roboCfg.setGatewayCfgResult(""String_Node_Str"");
    return;
  }
  if (devices.size() == 0) {
    log.info(""String_Node_Str"");
    roboCfg.setGatewayCfgResult(""String_Node_Str"");
    return;
  }
  InetAddress localAddr;
  try {
    localAddr=InetAddress.getByName(minaCfg.getLocalAddress());
  }
 catch (  UnknownHostException e) {
    log.error(""String_Node_Str"" + minaCfg.getLocalAddress());
    roboCfg.setGatewayCfgResult(""String_Node_Str"");
    return;
  }
  if (devices.containsKey(localAddr)) {
    log.info(""String_Node_Str"" + localAddr.getHostAddress() + ""String_Node_Str"");
    gateway=devices.get(localAddr);
  }
 else {
    if (roboCfg.getUserSpecifiedLocalAddr()) {
      log.info(""String_Node_Str"" + localAddr.getHostAddress() + ""String_Node_Str""+ devices.size()+ ""String_Node_Str"");
      roboCfg.setGatewayCfgResult(""String_Node_Str"");
      return;
    }
 else {
      localAddr=devices.keySet().iterator().next();
      minaCfg.setLocalAddress(localAddr.getHostAddress());
      log.info(""String_Node_Str"" + localAddr.getHostAddress() + ""String_Node_Str"");
      gateway=devices.get(localAddr);
    }
  }
  InetAddress gatewayIp;
  try {
    gatewayIp=InetAddress.getByName(gateway.getExternalIPAddress());
  }
 catch (  Exception e) {
    gatewayIp=null;
  }
  if (gatewayIp == null) {
    try {
      gatewayIp=getPublicIpFromSonar();
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      log.error(""String_Node_Str"");
      roboCfg.setGatewayCfgResult(""String_Node_Str"");
      return;
    }
  }
  Set<Integer> usedPorts=new HashSet<Integer>();
  for (int i=0; ; i++) {
    PortMappingEntry entry=new PortMappingEntry();
    try {
      if (!gateway.getGenericPortMappingEntry(i,entry))       break;
    }
 catch (    Exception e) {
      break;
    }
    int externalPort=entry.getExternalPort();
    usedPorts.add(externalPort);
    log.debug(""String_Node_Str"" + entry.getProtocol() + ""String_Node_Str""+ externalPort+ ""String_Node_Str""+ entry.getInternalClient()+ ""String_Node_Str""+ entry.getInternalPort()+ ""String_Node_Str""+ entry.getPortMappingDescription()+ ""String_Node_Str"");
  }
  String myName=""String_Node_Str"" + rbnb.getVersion();
  Random rand=new Random();
  int tried=0;
  do {
    try {
      int port;
      do {
        port=1025 + rand.nextInt(65535 - 1025);
      }
 while (usedPorts.contains(port));
      if (gateway.getSpecificPortMappingEntry(port,""String_Node_Str"",new PortMappingEntry()))       log.info(""String_Node_Str"" + port);
 else {
        if (gateway.addPortMapping(port,minaCfg.getListenUdpPort(),localAddr.getHostAddress(),""String_Node_Str"",myName)) {
          publicDetails=new InetSocketAddress(gatewayIp,port);
          minaCfg.setGatewayAddress(publicDetails.getAddress().getHostAddress());
          minaCfg.setGatewayUdpPort(port);
          log.info(""String_Node_Str"" + publicDetails);
          roboCfg.setGatewayCfgResult(""String_Node_Str"");
          return;
        }
 else         log.info(""String_Node_Str"" + port);
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + CodeUtil.shortClassName(e.getClass()) + ""String_Node_Str"");
    }
  }
 while (++tried < PORT_MAPPING_ATTEMPTS);
  log.info(""String_Node_Str"");
  roboCfg.setGatewayCfgResult(""String_Node_Str"");
}","private void configureUPnP(){
  RobonoboConfig roboCfg=rbnb.getConfig();
  MinaConfig minaCfg=(MinaConfig)getRobonobo().getConfig(""String_Node_Str"");
  roboCfg.setGatewayCfgResult(""String_Node_Str"");
  minaCfg.setGatewayAddress(null);
  GatewayDiscover gd=new GatewayDiscover();
  Map<InetAddress,GatewayDevice> devices;
  try {
    devices=gd.discover();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + CodeUtil.shortClassName(e.getClass()) + ""String_Node_Str"");
    roboCfg.setGatewayCfgResult(""String_Node_Str"");
    return;
  }
  if (devices.size() == 0) {
    log.info(""String_Node_Str"");
    roboCfg.setGatewayCfgResult(""String_Node_Str"");
    return;
  }
  InetAddress localAddr;
  try {
    localAddr=InetAddress.getByName(minaCfg.getLocalAddress());
  }
 catch (  UnknownHostException e) {
    log.error(""String_Node_Str"" + minaCfg.getLocalAddress());
    roboCfg.setGatewayCfgResult(""String_Node_Str"");
    return;
  }
  if (devices.containsKey(localAddr)) {
    log.info(""String_Node_Str"" + localAddr.getHostAddress() + ""String_Node_Str"");
    gateway=devices.get(localAddr);
  }
 else {
    if (roboCfg.getUserSpecifiedLocalAddr()) {
      log.info(""String_Node_Str"" + localAddr.getHostAddress() + ""String_Node_Str""+ devices.size()+ ""String_Node_Str"");
      roboCfg.setGatewayCfgResult(""String_Node_Str"");
      return;
    }
 else {
      localAddr=devices.keySet().iterator().next();
      minaCfg.setLocalAddress(localAddr.getHostAddress());
      log.info(""String_Node_Str"" + localAddr.getHostAddress() + ""String_Node_Str"");
      gateway=devices.get(localAddr);
    }
  }
  InetAddress gatewayIp;
  try {
    gatewayIp=InetAddress.getByName(gateway.getExternalIPAddress());
  }
 catch (  Exception e) {
    gatewayIp=null;
  }
  if (gatewayIp == null) {
    try {
      gatewayIp=getPublicIpFromSonar();
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      log.error(""String_Node_Str"");
      roboCfg.setGatewayCfgResult(""String_Node_Str"");
      return;
    }
  }
  Set<Integer> usedPorts=new HashSet<Integer>();
  for (int i=0; ; i++) {
    PortMappingEntry entry=new PortMappingEntry();
    try {
      if (!gateway.getGenericPortMappingEntry(i,entry))       break;
    }
 catch (    Exception e) {
      break;
    }
    if (entry.getInternalClient().equals(localAddr.getHostAddress()) && entry.getInternalPort() == minaCfg.getListenUdpPort() && entry.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
      publicDetails=new InetSocketAddress(gatewayIp,entry.getExternalPort());
      minaCfg.setGatewayAddress(publicDetails.getAddress().getHostAddress());
      minaCfg.setGatewayUdpPort(entry.getExternalPort());
      log.info(""String_Node_Str"" + publicDetails);
      roboCfg.setGatewayCfgResult(""String_Node_Str"");
      return;
    }
    int externalPort=entry.getExternalPort();
    usedPorts.add(externalPort);
    log.debug(""String_Node_Str"" + entry.getProtocol() + ""String_Node_Str""+ externalPort+ ""String_Node_Str""+ entry.getInternalClient()+ ""String_Node_Str""+ entry.getInternalPort()+ ""String_Node_Str""+ entry.getPortMappingDescription()+ ""String_Node_Str"");
  }
  String myName=""String_Node_Str"" + rbnb.getVersion();
  Random rand=new Random();
  int tried=0;
  do {
    try {
      int port;
      do {
        port=1025 + rand.nextInt(65535 - 1025);
      }
 while (usedPorts.contains(port));
      if (gateway.getSpecificPortMappingEntry(port,""String_Node_Str"",new PortMappingEntry()))       log.info(""String_Node_Str"" + port);
 else {
        if (gateway.addPortMapping(port,minaCfg.getListenUdpPort(),localAddr.getHostAddress(),""String_Node_Str"",myName)) {
          publicDetails=new InetSocketAddress(gatewayIp,port);
          minaCfg.setGatewayAddress(publicDetails.getAddress().getHostAddress());
          minaCfg.setGatewayUdpPort(port);
          log.info(""String_Node_Str"" + publicDetails);
          roboCfg.setGatewayCfgResult(""String_Node_Str"");
          return;
        }
 else         log.info(""String_Node_Str"" + port);
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + CodeUtil.shortClassName(e.getClass()) + ""String_Node_Str"");
    }
  }
 while (++tried < PORT_MAPPING_ATTEMPTS);
  log.info(""String_Node_Str"");
  roboCfg.setGatewayCfgResult(""String_Node_Str"");
}",0.9345747982619492
6758,"public void addDownload(String streamId) throws RobonoboException {
  rbnb.getShareService().nukeDefunctShare(streamId);
  File dataFile=new File(downloadsDir,makeFileNameSafe(streamId));
  log.info(""String_Node_Str"" + streamId);
  Stream s=streams.getKnownStream(streamId);
  DownloadingTrack d=new DownloadingTrack(s,dataFile,DownloadStatus.Paused);
  long startTime=System.currentTimeMillis();
synchronized (this) {
    if (startTime == lastDlStartTime)     startTime++;
    lastDlStartTime=startTime;
  }
  d.setDateAdded(new Date(startTime));
  try {
    PageBuffer pb=storage.createPageBufForDownload(s,dataFile);
    if (numRunningDownloads() < rbnb.getConfig().getMaxRunningDownloads())     startDownload(d,pb);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + s.getStreamId(),e);
    storage.nukePageBuf(streamId);
    throw new RobonoboException(e);
  }
  db.putDownload(d);
synchronized (dPriority) {
    dPriority.add(s.getStreamId());
  }
  updatePriorities();
synchronized (this) {
    downloadStreamIds.add(s.getStreamId());
  }
  event.fireTrackUpdated(s.getStreamId());
  event.fireMyLibraryUpdated();
}","private void addDownload(Stream s) throws RobonoboException {
  String sid=s.getStreamId();
  rbnb.getShareService().nukeDefunctShare(sid);
  File dataFile=new File(downloadsDir,makeFileNameSafe(sid));
  log.info(""String_Node_Str"" + sid);
  DownloadingTrack d=new DownloadingTrack(s,dataFile,DownloadStatus.Paused);
  long startTime=System.currentTimeMillis();
synchronized (this) {
    if (startTime == lastDlStartTime)     startTime++;
    lastDlStartTime=startTime;
  }
  d.setDateAdded(new Date(startTime));
  try {
    PageBuffer pb=storage.createPageBufForDownload(s,dataFile);
    if (numRunningDownloads() < rbnb.getConfig().getMaxRunningDownloads())     startDownload(d,pb);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + sid,e);
    storage.nukePageBuf(sid);
    throw new RobonoboException(e);
  }
  db.putDownload(d);
synchronized (dPriority) {
    dPriority.add(sid);
  }
  updatePriorities();
synchronized (this) {
    downloadStreamIds.add(sid);
  }
  event.fireTrackUpdated(sid);
  event.fireMyLibraryUpdated();
}",0.827902707664066
6759,"public void doRun() throws Exception {
  if (debugLogging)   log.debug(SEONConnection.this + ""String_Node_Str"");
  while (true) {
    PushDataReceiver dataRec=null;
    ByteBuffer buf=null;
    receiveLock.lock();
    try {
      dataRec=dataReceiver;
      if (dataRec == null || incomingDataBufs.size() == 0) {
        if (debugLogging)         log.debug(SEONConnection.this + ""String_Node_Str"");
        dataReceiverRunning=false;
        if (closeAfterDataReceiver) {
synchronized (SEONConnection.this) {
            closeConnection();
          }
        }
        return;
      }
      buf=incomingDataBufs.removeFirst();
    }
  finally {
      receiveLock.unlock();
    }
    if (debugLogging)     log.debug(SEONConnection.this + ""String_Node_Str"");
    try {
      dataRec.receiveData(buf,null);
    }
 catch (    Exception e) {
      log.error(SEONConnection.this + ""String_Node_Str"" + e.getClass().getSimpleName()+ ""String_Node_Str"",e);
      close();
    }
  }
}","public void doRun() throws Exception {
  if (debugLogging)   log.debug(SEONConnection.this + ""String_Node_Str"");
  while (true) {
    PushDataReceiver dataRec=null;
    ByteBuffer buf=null;
    receiveLock.lock();
    try {
      dataRec=dataReceiver;
      if (dataRec == null || incomingDataBufs.size() == 0) {
        if (debugLogging)         log.debug(SEONConnection.this + ""String_Node_Str"");
        dataReceiverRunning=false;
        if (closeAfterDataReceiver) {
synchronized (SEONConnection.this) {
            closeConnection();
          }
        }
        return;
      }
      buf=incomingDataBufs.removeFirst();
    }
  finally {
      receiveLock.unlock();
    }
    log.warn(SEONConnection.this + ""String_Node_Str"");
    try {
      dataRec.receiveData(buf,null);
    }
 catch (    Exception e) {
      log.error(SEONConnection.this + ""String_Node_Str"" + e.getClass().getSimpleName()+ ""String_Node_Str"",e);
      close();
    }
    log.warn(SEONConnection.this + ""String_Node_Str"");
  }
}",0.9525252525252526
6760,"public void doRun(){
synchronized (ControlConnection.this) {
    if (getUpFlowRate() > 0 || getDownFlowRate() > 0)     return;
    int timeoutSecs=mina.getConfig().getMessageTimeout();
    Date nextPingDate=new Date(lastDataRecvd.getTime() + timeoutSecs * 1000);
    if (nextPingDate.before(now())) {
      pingAttempt=new PingAttempt();
      pingAttempt.start();
      String tok=String.valueOf(rand.nextInt(9999));
      sendMessage(""String_Node_Str"",Ping.newBuilder().setPingId(tok).build());
    }
  }
}","public void doRun(){
  if (isClosing() || isClosed())   return;
synchronized (ControlConnection.this) {
    if (getUpFlowRate() > 0 || getDownFlowRate() > 0)     return;
    int timeoutSecs=mina.getConfig().getMessageTimeout();
    Date nextPingDate=new Date(lastDataRecvd.getTime() + timeoutSecs * 1000);
    if (nextPingDate.before(now())) {
      pingAttempt=new PingAttempt();
      pingAttempt.start();
      String tok=String.valueOf(rand.nextInt(9999));
      sendMessage(""String_Node_Str"",Ping.newBuilder().setPingId(tok).build());
    }
  }
}",0.959395656279509
6761,"public void putStream(Stream s){
  if (!running)   return;
  if (getStream(s.getStreamId()) != null)   return;
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps;
    ps=conn.prepareStatement(CREATE_STREAM);
    ps.setString(1,s.getStreamId());
    ps.setString(2,s.getTitle());
    ps.setString(3,s.getDescription());
    ps.setString(4,s.getMimeType());
    ps.setLong(5,s.getSize());
    ps.setLong(6,s.getDuration());
    ps.executeUpdate();
    for (    StreamAttribute attr : s.getAttributes()) {
      ps=conn.prepareStatement(CREATE_STREAM_ATTRIBUTES);
      ps.setString(1,s.getStreamId());
      ps.setString(2,attr.getName());
      ps.setString(3,attr.getValue());
      ps.executeUpdate();
    }
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}","public void putStream(Stream s){
  if (!running)   return;
  streamUpdateLock.lock();
  try {
    if (getStream(s.getStreamId()) != null)     return;
    Connection conn=null;
    try {
      conn=getConnection();
      PreparedStatement ps;
      ps=conn.prepareStatement(CREATE_STREAM);
      ps.setString(1,s.getStreamId());
      ps.setString(2,s.getTitle());
      ps.setString(3,s.getDescription());
      ps.setString(4,s.getMimeType());
      ps.setLong(5,s.getSize());
      ps.setLong(6,s.getDuration());
      ps.executeUpdate();
      for (      StreamAttribute attr : s.getAttributes()) {
        ps=conn.prepareStatement(CREATE_STREAM_ATTRIBUTES);
        ps.setString(1,s.getStreamId());
        ps.setString(2,attr.getName());
        ps.setString(3,attr.getValue());
        ps.executeUpdate();
      }
    }
 catch (    SQLException e) {
      log.error(""String_Node_Str"",e);
    }
 finally {
      if (conn != null)       returnConnection(conn);
    }
  }
  finally {
    streamUpdateLock.unlock();
  }
}",0.9158780231335436
6762,"public void playlistConfigUpdated(long plId){
  Playlist p;
synchronized (this) {
    p=playlists.get(plId);
  }
  if (p == null) {
    log.error(""String_Node_Str"" + plId + ""String_Node_Str"");
    return;
  }
  syncITunesIfNecessary(p);
  downloadTracksIfNecessary(p);
}","public void playlistConfigUpdated(long plId){
  Playlist p;
synchronized (this) {
    p=playlists.get(plId);
  }
  if (p == null) {
    log.error(""String_Node_Str"" + plId + ""String_Node_Str"");
    return;
  }
  downloadTracksIfNecessary(p);
  syncITunesIfNecessary(p);
}",0.8555555555555555
6763,"private void syncITunesIfNecessary(Playlist p){
  try {
    PlaylistConfig pc=getRobonobo().getDbService().getPlaylistConfig(p.getPlaylistId());
    if (""String_Node_Str"".equalsIgnoreCase(pc.getItem(""String_Node_Str""))) {
      for (      Long ownerId : p.getOwnerIds()) {
        User owner=rbnb.getUserService().getUser(ownerId);
        rbnb.getITunesService().syncPlaylist(owner,p);
      }
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + p.getPlaylistId() + ""String_Node_Str"");
  }
}","private void syncITunesIfNecessary(Playlist p){
  try {
    PlaylistConfig pc=getRobonobo().getDbService().getPlaylistConfig(p.getPlaylistId());
    if (""String_Node_Str"".equalsIgnoreCase(pc.getItem(""String_Node_Str""))) {
      for (      Long ownerId : p.getOwnerIds()) {
        User owner=rbnb.getUserService().getUser(ownerId);
        if (owner != null)         rbnb.getITunesService().syncPlaylist(owner,p);
      }
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + p.getPlaylistId() + ""String_Node_Str"");
  }
}",0.9742612011439468
6764,"public void activate(){
  if (!activated) {
    activated=true;
    readLock.lock();
    try {
      for (      Track t : eventList) {
        if (t instanceof CloudTrack)         control.findSources(t.stream.streamId,this);
      }
    }
  finally {
      readLock.unlock();
    }
  }
}","public void activate(){
  if (!activated) {
    activated=true;
    for (    String sid : p.getStreamIds()) {
      Track t=control.getTrack(sid);
      if (t instanceof CloudTrack)       control.findSources(sid,this);
      trackUpdated(sid,t);
    }
  }
}",0.3602941176470588
6765,"public void actionPerformed(ActionEvent e){
  pc.getItems().clear();
  for (  String opt : options.keySet()) {
    JCheckBox cb=options.get(opt);
    if (cb.isSelected())     pc.setItem(opt,""String_Node_Str"");
  }
  saveBtn.setEnabled(false);
  pc.setPlaylistId(p.getPlaylistId());
  frame.getController().putPlaylistConfig(pc);
  frame.getController().getExecutor().execute(new CatchingRunnable(){
    public void doRun() throws Exception {
      try {
        frame.getController().checkPlaylistUpdate(p.getPlaylistId());
      }
 catch (      RobonoboException e) {
        log.info(""String_Node_Str"",e);
      }
    }
  }
);
}","public void actionPerformed(ActionEvent e){
  pc.getItems().clear();
  for (  String opt : options.keySet()) {
    JCheckBox cb=options.get(opt);
    if (cb.isSelected())     pc.setItem(opt,""String_Node_Str"");
  }
  saveBtn.setEnabled(false);
  pc.setPlaylistId(p.getPlaylistId());
  frame.getController().getExecutor().execute(new CatchingRunnable(){
    public void doRun() throws Exception {
      frame.getController().putPlaylistConfig(pc);
    }
  }
);
}",0.7651376146788991
6766,"public void doRun() throws Exception {
  try {
    frame.getController().checkPlaylistUpdate(p.getPlaylistId());
  }
 catch (  RobonoboException e) {
    log.info(""String_Node_Str"",e);
  }
}","public void doRun() throws Exception {
  frame.getController().putPlaylistConfig(pc);
}",0.5631768953068592
6767,"public ButtonsPanel(){
  setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
  setLayout(new BoxLayout(this,BoxLayout.LINE_AXIS));
  saveBtn=new RGlassButton(""String_Node_Str"");
  saveBtn.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      pc.getItems().clear();
      for (      String opt : options.keySet()) {
        JCheckBox cb=options.get(opt);
        if (cb.isSelected())         pc.setItem(opt,""String_Node_Str"");
      }
      saveBtn.setEnabled(false);
      pc.setPlaylistId(p.getPlaylistId());
      frame.getController().putPlaylistConfig(pc);
      frame.getController().getExecutor().execute(new CatchingRunnable(){
        public void doRun() throws Exception {
          try {
            frame.getController().checkPlaylistUpdate(p.getPlaylistId());
          }
 catch (          RobonoboException e) {
            log.info(""String_Node_Str"",e);
          }
        }
      }
);
    }
  }
);
  saveBtn.setEnabled(false);
  add(saveBtn);
}","public ButtonsPanel(){
  setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
  setLayout(new BoxLayout(this,BoxLayout.LINE_AXIS));
  saveBtn=new RGlassButton(""String_Node_Str"");
  saveBtn.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      pc.getItems().clear();
      for (      String opt : options.keySet()) {
        JCheckBox cb=options.get(opt);
        if (cb.isSelected())         pc.setItem(opt,""String_Node_Str"");
      }
      saveBtn.setEnabled(false);
      pc.setPlaylistId(p.getPlaylistId());
      frame.getController().getExecutor().execute(new CatchingRunnable(){
        public void doRun() throws Exception {
          frame.getController().putPlaylistConfig(pc);
        }
      }
);
    }
  }
);
  saveBtn.setEnabled(false);
  add(saveBtn);
}",0.7751091703056768
6768,"private void checkPlayPauseDeleteEnabled(){
  boolean tracksSelected=false;
  boolean allowDownload=false;
  boolean allowDel=false;
  if (frame.getMainPanel() != null && frame.getMainPanel().currentContentPanel() != null) {
    TrackList tl=frame.getMainPanel().currentContentPanel().getTrackList();
    if (tl != null) {
      List<String> selSids=tl.getSelectedStreamIds();
      tracksSelected=(selSids.size() > 0);
      for (      String sid : selSids) {
        Track t=control.getTrack(sid);
        if (t instanceof CloudTrack) {
          allowDownload=true;
          break;
        }
      }
      allowDel=tl.getModel().allowDelete() && tracksSelected;
    }
  }
synchronized (this) {
    dloadBtn.setEnabled(allowDownload);
    delBtn.setEnabled(allowDel);
    boolean ppEnabled=!(state == PlayState.Stopped && !tracksSelected);
    playPauseBtn.setEnabled(ppEnabled);
  }
}","private void checkPlayPauseDeleteEnabled(){
  boolean tracksSelected=false;
  boolean allowDownload=false;
  boolean allowDel=false;
  if (frame.getMainPanel() != null && frame.getMainPanel().currentContentPanel() != null) {
    ContentPanel cp=frame.getMainPanel().currentContentPanel();
    TrackList tl=cp.getTrackList();
    if (tl != null) {
      List<String> selSids=tl.getSelectedStreamIds();
      tracksSelected=(selSids.size() > 0);
      if (cp instanceof MyLibraryContentPanel) {
        allowDownload=false;
        allowDel=tracksSelected;
      }
 else {
        for (        String sid : selSids) {
          Track t=control.getTrack(sid);
          if (t instanceof CloudTrack) {
            allowDownload=true;
            break;
          }
        }
        allowDel=tl.getModel().allowDelete() && tracksSelected;
      }
    }
  }
synchronized (this) {
    dloadBtn.setEnabled(allowDownload);
    delBtn.setEnabled(allowDel);
    boolean ppEnabled=!(state == PlayState.Stopped && !tracksSelected);
    playPauseBtn.setEnabled(ppEnabled);
  }
}",0.8540706605222734
6769,"public void putPlaylistConfig(PlaylistConfig pc){
  inst.getDbService().putPlaylistConfig(pc);
}","public void putPlaylistConfig(PlaylistConfig pc){
  inst.getDbService().putPlaylistConfig(pc);
  inst.getPlaylistService().playlistConfigUpdated(pc.getPlaylistId());
}",0.7300380228136882
6770,"@Override public int compareTo(Playlist o){
  return title.compareTo(o.getTitle());
}","@Override public int compareTo(Playlist o){
  return title.toLowerCase().compareTo(o.getTitle().toLowerCase());
}",0.8585858585858586
6771,"public void updatePlaylist(Playlist p,boolean fireUpdate){
  inst.getPlaylistService().updatePlaylist(p);
  if (fireUpdate)   inst.getEventService().firePlaylistChanged(p);
}","public void updatePlaylist(Playlist p){
  inst.getPlaylistService().updatePlaylist(p);
  inst.getEventService().firePlaylistChanged(p);
}",0.8810289389067524
6772,"/** 
 * Returns the sids for the streams in this user's library we haven't yet looked up
 */
public Map<String,Date> getUnknownTracksInLibrary(long userId){
  if (!running)   return null;
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(READ_LIBRARY_ALL_UNKNOWN_TRACKS);
    ps.setLong(1,userId);
    ResultSet rs=ps.executeQuery();
    Map<String,Date> result=new HashMap<String,Date>();
    while (rs.next()) {
      result.put(rs.getString(1),new Date(rs.getLong(2)));
    }
    return result;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + userId,e);
    return null;
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}","/** 
 * Returns the sids for the streams in this user's library we haven't yet looked up 
 */
public Map<String,Date> getUnknownTracksInLibrary(long userId){
  if (!running)   return null;
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(READ_LIBRARY_ALL_UNKNOWN_TRACKS);
    ps.setLong(1,userId);
    ResultSet rs=ps.executeQuery();
    Map<String,Date> result=new HashMap<String,Date>();
    while (rs.next()) {
      result.put(rs.getString(1),new Date(rs.getLong(2)));
    }
    return result;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + userId,e);
    return null;
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}",0.9993031358885016
6773,"/** 
 * Moves the supplied sid from unknown to known, and increments num_unseen by 1 for the library
 */
public void markTrackAsKnown(long userId,String sid){
  if (!running)   return;
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement readTrackSt=conn.prepareStatement(READ_LIBRARY_UNKNOWN_TRACK);
    readTrackSt.setLong(1,userId);
    readTrackSt.setString(2,sid);
    ResultSet rs=readTrackSt.executeQuery();
    if (!rs.next()) {
      log.error(""String_Node_Str"" + sid + ""String_Node_Str""+ userId+ ""String_Node_Str"");
      return;
    }
    long dateAddedMs=rs.getLong(1);
    readTrackSt.close();
    PreparedStatement delTrackSt=conn.prepareStatement(DELETE_LIBRARY_UNKNOWN_TRACK);
    delTrackSt.setLong(1,userId);
    delTrackSt.setString(2,sid);
    delTrackSt.executeUpdate();
    delTrackSt.close();
    PreparedStatement addTrackSt=conn.prepareStatement(CREATE_LIBRARY_KNOWN_TRACK);
    addTrackSt.setLong(1,userId);
    addTrackSt.setString(2,sid);
    addTrackSt.setLong(3,dateAddedMs);
    addTrackSt.executeUpdate();
    addTrackSt.close();
    PreparedStatement incUnseenSt=conn.prepareStatement(UPDATE_LIBRARY_INCREMENT_NUM_UNSEEN);
    incUnseenSt.setLong(1,userId);
    incUnseenSt.executeUpdate();
    incUnseenSt.close();
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + userId,e);
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}","/** 
 * Moves the supplied sid from unknown to known, and increments num_unseen by 1 for the library 
 */
public void markTrackAsKnown(long userId,String sid){
  if (!running)   return;
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement readTrackSt=conn.prepareStatement(READ_LIBRARY_UNKNOWN_TRACK);
    readTrackSt.setLong(1,userId);
    readTrackSt.setString(2,sid);
    ResultSet rs=readTrackSt.executeQuery();
    if (!rs.next()) {
      log.error(""String_Node_Str"" + sid + ""String_Node_Str""+ userId+ ""String_Node_Str"");
      return;
    }
    long dateAddedMs=rs.getLong(1);
    readTrackSt.close();
    PreparedStatement delTrackSt=conn.prepareStatement(DELETE_LIBRARY_UNKNOWN_TRACK);
    delTrackSt.setLong(1,userId);
    delTrackSt.setString(2,sid);
    delTrackSt.executeUpdate();
    delTrackSt.close();
    PreparedStatement addTrackSt=conn.prepareStatement(CREATE_LIBRARY_KNOWN_TRACK);
    addTrackSt.setLong(1,userId);
    addTrackSt.setString(2,sid);
    addTrackSt.setLong(3,dateAddedMs);
    addTrackSt.executeUpdate();
    addTrackSt.close();
    PreparedStatement incUnseenSt=conn.prepareStatement(UPDATE_LIBRARY_INCREMENT_NUM_UNSEEN);
    incUnseenSt.setLong(1,userId);
    incUnseenSt.executeUpdate();
    incUnseenSt.close();
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + userId,e);
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}",0.9996487530734106
6774,"public void markAllAsSeen(Playlist p){
  if (!running)   return;
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(DELETE_PLAYLIST_SEEN_SIDS);
    ps.setLong(1,p.getPlaylistId());
    ps.executeUpdate();
    ps=conn.prepareStatement(CREATE_PLAYLIST_SEEN_SID);
    for (    String sid : p.getStreamIds()) {
      ps.setLong(1,p.getPlaylistId());
      ps.setString(2,sid);
      ps.addBatch();
    }
    ps.executeBatch();
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + p.getPlaylistId(),e);
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}","public void markAllAsSeen(Playlist p){
  if (!running)   return;
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(DELETE_PLAYLIST_SEEN_SIDS);
    ps.setLong(1,p.getPlaylistId());
    ps.executeUpdate();
    ps=conn.prepareStatement(CREATE_PLAYLIST_SEEN_SID);
    if (p.getStreamIds().size() > 0) {
      for (      String sid : p.getStreamIds()) {
        ps.setLong(1,p.getPlaylistId());
        ps.setString(2,sid);
        ps.addBatch();
      }
      ps.executeBatch();
    }
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + p.getPlaylistId(),e);
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}",0.9495861550037622
6775,"/** 
 * This is public for debugging only - do not use this outside this class except for debugging
 */
public synchronized Connection getConnection() throws SQLException {
  if (freeConns.size() > 0)   return freeConns.remove(0);
 else {
    log.debug(""String_Node_Str"" + ++numConnsCreated + ""String_Node_Str"");
    return DriverManager.getConnection(dbUrl,""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * This is public for debugging only - do not use this outside this class except for debugging 
 */
public synchronized Connection getConnection() throws SQLException {
  if (freeConns.size() > 0)   return freeConns.remove(0);
 else {
    log.debug(""String_Node_Str"" + ++numConnsCreated + ""String_Node_Str"");
    return DriverManager.getConnection(dbUrl,""String_Node_Str"",""String_Node_Str"");
  }
}",0.9987546699875468
6776,"/** 
 * @return All downloads, sorted first-started-first
 */
public List<String> getDownloads(){
  if (!running)   return null;
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(GET_ALL_DOWNLOAD_STREAM_IDS);
    ResultSet rs=ps.executeQuery();
    List<String> result=new ArrayList<String>();
    while (rs.next()) {
      result.add(rs.getString(1));
    }
    return result;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}","/** 
 * @return All downloads, sorted first-started-first 
 */
public List<String> getDownloads(){
  if (!running)   return null;
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(GET_ALL_DOWNLOAD_STREAM_IDS);
    ResultSet rs=ps.executeQuery();
    List<String> result=new ArrayList<String>();
    while (rs.next()) {
      result.add(rs.getString(1));
    }
    return result;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}",0.9991503823279524
6777,"/** 
 * Adds the provided tracks as unknown in the library - you must call markTrackAsKnown() to make them known. Also updates check time for library.
 * @param userId
 * @param newTracks
 */
public void addUnknownTracksToLibrary(long userId,Map<String,Date> newTracks){
  if (!running)   return;
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement createTrackSt=conn.prepareStatement(CREATE_LIBRARY_UNKNOWN_TRACK);
    for (    Entry<String,Date> tEntry : newTracks.entrySet()) {
      String sid=tEntry.getKey();
      Date addedDate=tEntry.getValue();
      createTrackSt.setLong(1,userId);
      createTrackSt.setString(2,sid);
      createTrackSt.setLong(3,addedDate.getTime());
      createTrackSt.addBatch();
    }
    createTrackSt.executeBatch();
    markLibChecked(userId,conn);
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + userId,e);
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}","/** 
 * Adds the provided tracks as unknown in the library - you must call markTrackAsKnown() to make them known. Also updates check time for library.
 * @param userId
 * @param newTracks 
 */
public void addUnknownTracksToLibrary(long userId,Map<String,Date> newTracks){
  if (!running)   return;
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement createTrackSt=conn.prepareStatement(CREATE_LIBRARY_UNKNOWN_TRACK);
    for (    Entry<String,Date> tEntry : newTracks.entrySet()) {
      String sid=tEntry.getKey();
      Date addedDate=tEntry.getValue();
      createTrackSt.setLong(1,userId);
      createTrackSt.setString(2,sid);
      createTrackSt.setLong(3,addedDate.getTime());
      createTrackSt.addBatch();
    }
    createTrackSt.executeBatch();
    markLibChecked(userId,conn);
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + userId,e);
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}",0.9994815966822188
6778,"/** 
 * This is public for debugging only - do not use this outside this class except for debugging
 */
public synchronized void returnConnection(Connection conn){
  freeConns.add(conn);
}","/** 
 * This is public for debugging only - do not use this outside this class except for debugging 
 */
public synchronized void returnConnection(Connection conn){
  freeConns.add(conn);
}",0.9973474801061007
6779,"void gotStream(String sid){
  waitingForStreams.remove(sid);
  int streamsLeft=waitingForStreams.size();
  int streamsDone=streamsToFetch - streamsLeft;
  onStreamUpdate(streamsDone,streamsToFetch);
}","void gotStream(String sid){
  if (!waitingForStreams.remove(sid))   return;
  int streamsLeft=waitingForStreams.size();
  int streamsDone=streamsToFetch - streamsLeft;
  onStreamUpdate(streamsDone,streamsToFetch);
}",0.963855421686747
6780,"@Override public void playlistChanged(final Playlist p){
  User me=frame.getController().getMyUser();
  if (p.getOwnerIds().contains(me.getUserId())) {
    Long plId=p.getPlaylistId();
    Set<Long> myPlIds=frame.getController().getMyUser().getPlaylistIds();
    if (!myPlIds.contains(plId))     log.error(""String_Node_Str"");
    invokeLater(new CatchingRunnable(){
      public void doRun() throws Exception {
        Playlist selP=(getSelectedIndex() < 0) ? null : getModel().getPlaylistAt(getSelectedIndex());
        boolean needReselect=p.equals(selP);
        getModel().remove(p);
        getModel().insertSorted(p);
        if (needReselect) {
          int idx=getModel().getPlaylistIndex(p);
          setSelectedIndex(idx);
        }
      }
    }
);
  }
}","@Override public void playlistChanged(final Playlist p){
  User me=frame.getController().getMyUser();
  if (p.getOwnerIds().contains(me.getUserId())) {
    Long plId=p.getPlaylistId();
    Set<Long> myPlIds=frame.getController().getMyUser().getPlaylistIds();
    if (!myPlIds.contains(plId))     log.error(""String_Node_Str"");
    invokeLater(new CatchingRunnable(){
      public void doRun() throws Exception {
        Playlist selP=(getSelectedIndex() < 0) ? null : getModel().getPlaylistAt(getSelectedIndex());
        boolean needReselect=p.equals(selP);
        getModel().remove(p);
        getModel().insertSorted(p);
        if (needReselect) {
          int idx=getModel().getPlaylistIndex(p);
          setSelectedIndex(idx);
        }
        invalidate();
      }
    }
);
  }
}",0.9858611825192802
6781,"public void doRun() throws Exception {
  Playlist selP=(getSelectedIndex() < 0) ? null : getModel().getPlaylistAt(getSelectedIndex());
  boolean needReselect=p.equals(selP);
  getModel().remove(p);
  getModel().insertSorted(p);
  if (needReselect) {
    int idx=getModel().getPlaylistIndex(p);
    setSelectedIndex(idx);
  }
}","public void doRun() throws Exception {
  Playlist selP=(getSelectedIndex() < 0) ? null : getModel().getPlaylistAt(getSelectedIndex());
  boolean needReselect=p.equals(selP);
  getModel().remove(p);
  getModel().insertSorted(p);
  if (needReselect) {
    int idx=getModel().getPlaylistIndex(p);
    setSelectedIndex(idx);
  }
  invalidate();
}",0.9760479041916168
6782,"/** 
 * Call only from UI thread 
 */
public void postToFacebook(final Playlist p){
  if (!SwingUtilities.isEventDispatchThread())   throw new Errot();
  UserConfig uc=control.getMyUserConfig();
  if (uc == null || uc.getItem(""String_Node_Str"") == null) {
    final Sheet waitSheet=new PleaseWaitSheet(this,""String_Node_Str"");
    showSheet(waitSheet);
    control.fetchMyUserConfig(new UserConfigCallback(){
      public void success(      UserConfig freshUc){
        waitSheet.setVisible(false);
        if (freshUc.getItem(""String_Node_Str"") == null) {
          String facebookBounceMsg=""String_Node_Str"";
          final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",facebookBounceMsg,""String_Node_Str"",new CatchingRunnable(){
            public void doRun() throws Exception {
              NetUtil.browse(control.getConfig().getWebsiteUrlBase() + ""String_Node_Str"");
            }
          }
);
          runOnUiThread(new CatchingRunnable(){
            public void doRun() throws Exception {
              showSheet(sheet);
            }
          }
);
        }
 else {
          runOnUiThread(new CatchingRunnable(){
            public void doRun() throws Exception {
              if (p.getVisibility().equals(Playlist.VIS_ME)) {
                String msg=""String_Node_Str"";
                final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",msg,""String_Node_Str"",new CatchingRunnable(){
                  public void doRun() throws Exception {
                    p.setVisibility(Playlist.VIS_FRIENDS);
                    control.updatePlaylist(p);
                    showSheet(new PostToFacebookSheet(RobonoboFrame.this,p));
                  }
                }
);
                showSheet(sheet);
              }
 else               showSheet(new PostToFacebookSheet(RobonoboFrame.this,p));
            }
          }
);
        }
      }
      public void error(      long userId,      Exception e){
        waitSheet.setVisible(false);
      }
    }
);
  }
 else {
    if (p.getVisibility().equals(Playlist.VIS_ME)) {
      String msg=""String_Node_Str"";
      final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",msg,""String_Node_Str"",new CatchingRunnable(){
        public void doRun() throws Exception {
          p.setVisibility(Playlist.VIS_FRIENDS);
          showSheet(new PostToFacebookSheet(RobonoboFrame.this,p));
          control.updatePlaylist(p,true);
        }
      }
);
      showSheet(sheet);
    }
 else     showSheet(new PostToFacebookSheet(this,p));
  }
}","/** 
 * Call only from UI thread 
 */
public void postToFacebook(final Playlist p){
  if (!SwingUtilities.isEventDispatchThread())   throw new Errot();
  UserConfig uc=control.getMyUserConfig();
  if (uc == null || uc.getItem(""String_Node_Str"") == null) {
    final Sheet waitSheet=new PleaseWaitSheet(this,""String_Node_Str"");
    showSheet(waitSheet);
    control.fetchMyUserConfig(new UserConfigCallback(){
      public void success(      UserConfig freshUc){
        waitSheet.setVisible(false);
        if (freshUc.getItem(""String_Node_Str"") == null) {
          String facebookBounceMsg=""String_Node_Str"";
          final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",facebookBounceMsg,""String_Node_Str"",new CatchingRunnable(){
            public void doRun() throws Exception {
              NetUtil.browse(control.getConfig().getWebsiteUrlBase() + ""String_Node_Str"");
            }
          }
);
          runOnUiThread(new CatchingRunnable(){
            public void doRun() throws Exception {
              showSheet(sheet);
            }
          }
);
        }
 else {
          runOnUiThread(new CatchingRunnable(){
            public void doRun() throws Exception {
              if (p.getVisibility().equals(Playlist.VIS_ME)) {
                String msg=""String_Node_Str"";
                final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",msg,""String_Node_Str"",new CatchingRunnable(){
                  public void doRun() throws Exception {
                    p.setVisibility(Playlist.VIS_FRIENDS);
                    control.updatePlaylist(p);
                    showSheet(new PostToFacebookSheet(RobonoboFrame.this,p));
                  }
                }
);
                showSheet(sheet);
              }
 else               showSheet(new PostToFacebookSheet(RobonoboFrame.this,p));
            }
          }
);
        }
      }
      public void error(      long userId,      Exception e){
        waitSheet.setVisible(false);
      }
    }
);
  }
 else {
    if (p.getVisibility().equals(Playlist.VIS_ME)) {
      String msg=""String_Node_Str"";
      final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",msg,""String_Node_Str"",new CatchingRunnable(){
        public void doRun() throws Exception {
          p.setVisibility(Playlist.VIS_FRIENDS);
          showSheet(new PostToFacebookSheet(RobonoboFrame.this,p));
          control.updatePlaylist(p);
        }
      }
);
      showSheet(sheet);
    }
 else     showSheet(new PostToFacebookSheet(this,p));
  }
}",0.9571512424183134
6783,"public void success(UserConfig freshUc){
  waitSheet.setVisible(false);
  if (freshUc.getItem(""String_Node_Str"") == null) {
    String facebookBounceMsg=""String_Node_Str"";
    Runnable gotoAcct=new CatchingRunnable(){
      public void doRun() throws Exception {
        NetUtil.browse(control.getConfig().getWebsiteUrlBase() + ""String_Node_Str"");
      }
    }
;
    final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",facebookBounceMsg,""String_Node_Str"",gotoAcct);
    runOnUiThread(new CatchingRunnable(){
      public void doRun() throws Exception {
        showSheet(sheet);
      }
    }
);
  }
 else {
    runOnUiThread(new CatchingRunnable(){
      public void doRun() throws Exception {
        if (p.getVisibility().equals(Playlist.VIS_ALL))         showSheet(new PostToTwitterSheet(RobonoboFrame.this,p));
 else {
          String msg=""String_Node_Str"";
          final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",msg,""String_Node_Str"",new CatchingRunnable(){
            public void doRun() throws Exception {
              p.setVisibility(Playlist.VIS_ALL);
              showSheet(new PostToTwitterSheet(RobonoboFrame.this,p));
              control.updatePlaylist(p,true);
            }
          }
);
          showSheet(sheet);
        }
      }
    }
);
  }
}","public void success(UserConfig freshUc){
  waitSheet.setVisible(false);
  if (freshUc.getItem(""String_Node_Str"") == null) {
    String facebookBounceMsg=""String_Node_Str"";
    Runnable gotoAcct=new CatchingRunnable(){
      public void doRun() throws Exception {
        NetUtil.browse(control.getConfig().getWebsiteUrlBase() + ""String_Node_Str"");
      }
    }
;
    final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",facebookBounceMsg,""String_Node_Str"",gotoAcct);
    runOnUiThread(new CatchingRunnable(){
      public void doRun() throws Exception {
        showSheet(sheet);
      }
    }
);
  }
 else {
    runOnUiThread(new CatchingRunnable(){
      public void doRun() throws Exception {
        if (p.getVisibility().equals(Playlist.VIS_ALL))         showSheet(new PostToTwitterSheet(RobonoboFrame.this,p));
 else {
          String msg=""String_Node_Str"";
          final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",msg,""String_Node_Str"",new CatchingRunnable(){
            public void doRun() throws Exception {
              p.setVisibility(Playlist.VIS_ALL);
              showSheet(new PostToTwitterSheet(RobonoboFrame.this,p));
              control.updatePlaylist(p);
            }
          }
);
          showSheet(sheet);
        }
      }
    }
);
  }
}",0.998101025446259
6784,"public void postToTwitter(final Playlist p){
  if (!SwingUtilities.isEventDispatchThread())   throw new Errot();
  UserConfig uc=control.getMyUserConfig();
  if (uc == null || uc.getItem(""String_Node_Str"") == null) {
    final Sheet waitSheet=new PleaseWaitSheet(this,""String_Node_Str"");
    showSheet(waitSheet);
    control.fetchMyUserConfig(new UserConfigCallback(){
      public void success(      UserConfig freshUc){
        waitSheet.setVisible(false);
        if (freshUc.getItem(""String_Node_Str"") == null) {
          String facebookBounceMsg=""String_Node_Str"";
          Runnable gotoAcct=new CatchingRunnable(){
            public void doRun() throws Exception {
              NetUtil.browse(control.getConfig().getWebsiteUrlBase() + ""String_Node_Str"");
            }
          }
;
          final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",facebookBounceMsg,""String_Node_Str"",gotoAcct);
          runOnUiThread(new CatchingRunnable(){
            public void doRun() throws Exception {
              showSheet(sheet);
            }
          }
);
        }
 else {
          runOnUiThread(new CatchingRunnable(){
            public void doRun() throws Exception {
              if (p.getVisibility().equals(Playlist.VIS_ALL))               showSheet(new PostToTwitterSheet(RobonoboFrame.this,p));
 else {
                String msg=""String_Node_Str"";
                final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",msg,""String_Node_Str"",new CatchingRunnable(){
                  public void doRun() throws Exception {
                    p.setVisibility(Playlist.VIS_ALL);
                    showSheet(new PostToTwitterSheet(RobonoboFrame.this,p));
                    control.updatePlaylist(p,true);
                  }
                }
);
                showSheet(sheet);
              }
            }
          }
);
        }
      }
      public void error(      long userId,      Exception e){
        waitSheet.setVisible(false);
      }
    }
);
  }
 else {
    if (p.getVisibility().equals(Playlist.VIS_ALL))     showSheet(new PostToTwitterSheet(this,p));
 else {
      String msg=""String_Node_Str"";
      final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",msg,""String_Node_Str"",new CatchingRunnable(){
        public void doRun() throws Exception {
          p.setVisibility(Playlist.VIS_ALL);
          showSheet(new PostToTwitterSheet(RobonoboFrame.this,p));
          control.updatePlaylist(p,true);
        }
      }
);
      showSheet(sheet);
    }
  }
}","public void postToTwitter(final Playlist p){
  if (!SwingUtilities.isEventDispatchThread())   throw new Errot();
  UserConfig uc=control.getMyUserConfig();
  if (uc == null || uc.getItem(""String_Node_Str"") == null) {
    final Sheet waitSheet=new PleaseWaitSheet(this,""String_Node_Str"");
    showSheet(waitSheet);
    control.fetchMyUserConfig(new UserConfigCallback(){
      public void success(      UserConfig freshUc){
        waitSheet.setVisible(false);
        if (freshUc.getItem(""String_Node_Str"") == null) {
          String facebookBounceMsg=""String_Node_Str"";
          Runnable gotoAcct=new CatchingRunnable(){
            public void doRun() throws Exception {
              NetUtil.browse(control.getConfig().getWebsiteUrlBase() + ""String_Node_Str"");
            }
          }
;
          final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",facebookBounceMsg,""String_Node_Str"",gotoAcct);
          runOnUiThread(new CatchingRunnable(){
            public void doRun() throws Exception {
              showSheet(sheet);
            }
          }
);
        }
 else {
          runOnUiThread(new CatchingRunnable(){
            public void doRun() throws Exception {
              if (p.getVisibility().equals(Playlist.VIS_ALL))               showSheet(new PostToTwitterSheet(RobonoboFrame.this,p));
 else {
                String msg=""String_Node_Str"";
                final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",msg,""String_Node_Str"",new CatchingRunnable(){
                  public void doRun() throws Exception {
                    p.setVisibility(Playlist.VIS_ALL);
                    showSheet(new PostToTwitterSheet(RobonoboFrame.this,p));
                    control.updatePlaylist(p);
                  }
                }
);
                showSheet(sheet);
              }
            }
          }
);
        }
      }
      public void error(      long userId,      Exception e){
        waitSheet.setVisible(false);
      }
    }
);
  }
 else {
    if (p.getVisibility().equals(Playlist.VIS_ALL))     showSheet(new PostToTwitterSheet(this,p));
 else {
      String msg=""String_Node_Str"";
      final Sheet sheet=new ConfirmSheet(RobonoboFrame.this,""String_Node_Str"",msg,""String_Node_Str"",new CatchingRunnable(){
        public void doRun() throws Exception {
          p.setVisibility(Playlist.VIS_ALL);
          showSheet(new PostToTwitterSheet(RobonoboFrame.this,p));
          control.updatePlaylist(p);
        }
      }
);
      showSheet(sheet);
    }
  }
}",0.9980369061641148
6785,"/** 
 * @syncpriority 200 
 */
public void receivePage(Page p){
  Long pn=new Long(p.getPageNumber());
  PageAttempt rpa;
synchronized (this) {
    rpa=reqdPages.remove(pn);
  }
  if (rpa != null) {
    rpa.succeeded();
    updateRtt((int)(now().getTime() - rpa.startTime));
  }
 else {
    log.error(this + ""String_Node_Str"" + p.getPageNumber());
    return;
  }
  if (log.isDebugEnabled()) {
    long bytesInFlight=mina.getPageBufProvider().getPageBuf(sid).getAvgPageSize() * reqdPages.size();
    log.debug(""String_Node_Str"" + sid + ""String_Node_Str""+ cc.getNodeId()+ ""String_Node_Str""+ pn+ ""String_Node_Str""+ formatSizeInBytes(getFlowRate())+ ""String_Node_Str""+ reqdPages.size()+ ""String_Node_Str""+ FileUtil.humanReadableSize(bytesInFlight)+ ""String_Node_Str"");
  }
  mina.getStreamMgr().receivePage(sid,p);
  if (mina.getConfig().isAgoric()) {
    if (AuctionState.INDEX_MOD.lt(p.getAuctionStatus(),rpa.statusIdx)) {
      log.error(""String_Node_Str"" + this + ""String_Node_Str""+ p.getAuctionStatus()+ ""String_Node_Str""+ rpa.statusIdx);
      return;
    }
    mina.getBuyMgr().receivedPage(cc.getNodeId(),p.getAuctionStatus(),p.getLength());
  }
  sendReqPageIfNecessary();
}","/** 
 * @syncpriority 200 
 */
public void receivePage(Page p){
  if (closing)   return;
  Long pn=new Long(p.getPageNumber());
  PageAttempt rpa;
synchronized (this) {
    rpa=reqdPages.remove(pn);
  }
  if (rpa != null) {
    rpa.succeeded();
    updateRtt((int)(now().getTime() - rpa.startTime));
  }
 else {
    log.error(this + ""String_Node_Str"" + p.getPageNumber());
    return;
  }
  if (log.isDebugEnabled()) {
    long bytesInFlight=mina.getPageBufProvider().getPageBuf(sid).getAvgPageSize() * reqdPages.size();
    log.debug(""String_Node_Str"" + sid + ""String_Node_Str""+ cc.getNodeId()+ ""String_Node_Str""+ pn+ ""String_Node_Str""+ formatSizeInBytes(getFlowRate())+ ""String_Node_Str""+ reqdPages.size()+ ""String_Node_Str""+ FileUtil.humanReadableSize(bytesInFlight)+ ""String_Node_Str"");
  }
  mina.getStreamMgr().receivePage(sid,p);
  if (mina.getConfig().isAgoric()) {
    if (AuctionState.INDEX_MOD.lt(p.getAuctionStatus(),rpa.statusIdx)) {
      log.error(""String_Node_Str"" + this + ""String_Node_Str""+ p.getAuctionStatus()+ ""String_Node_Str""+ rpa.statusIdx);
      return;
    }
    mina.getBuyMgr().receivedPage(cc.getNodeId(),p.getAuctionStatus(),p.getLength());
  }
  sendReqPageIfNecessary();
}",0.989517819706499
6786,"private void update(){
  if (usersDone == u.getFriendIds().size()) {
    statusText=""String_Node_Str"";
    completion=1f;
    if (playlistIds.size() > 0)     playlists.refreshFriendPlaylists(playlistIds);
  }
 else {
    statusText=""String_Node_Str"" + (usersDone + 1) + ""String_Node_Str""+ u.getFriendIds().size();
    completion=((float)usersDone) / u.getFriendIds().size();
  }
  fireUpdated();
}","private void update(){
  if (usersDone == myUser.getFriendIds().size()) {
    statusText=""String_Node_Str"";
    completion=1f;
    Set<Long> myPlIds=new HashSet<Long>();
    Set<Long> myFriendIds=new HashSet<Long>();
synchronized (UserService.this) {
      myPlIds.addAll(me.getPlaylistIds());
      myFriendIds.addAll(me.getFriendIds());
    }
    plLoop:     for (    Long plId : myPlIds) {
      Playlist p=playlists.getExistingPlaylist(plId);
      for (      Long ownerId : p.getOwnerIds()) {
        if (myFriendIds.contains(ownerId)) {
          events.firePlaylistChanged(p);
          continue plLoop;
        }
      }
    }
    if (playlistIds.size() > 0)     playlists.refreshFriendPlaylists(playlistIds);
  }
 else {
    statusText=""String_Node_Str"" + (usersDone + 1) + ""String_Node_Str""+ myUser.getFriendIds().size();
    completion=((float)usersDone) / myUser.getFriendIds().size();
  }
  fireUpdated();
}",0.4813971146545178
6787,"/** 
 * This will return immediately (or as soon as the service is started) - to see the result, add a LoginListener before you call this
 */
public void login(String email,String password){
  if (!started) {
    startupLock.lock();
    try {
      try {
        log.debug(""String_Node_Str"");
        startupCondition.await();
      }
 catch (      InterruptedException e) {
        return;
      }
    }
  finally {
      startupLock.unlock();
    }
  }
  log.info(""String_Node_Str"" + email);
  metadata.fetchUserForLogin(email,password,new LoginHandler(email,password));
}","/** 
 * This will return immediately (or as soon as the service is started) - to see the result, add a LoginListener before you call this 
 */
public void login(String email,String password){
  if (!started) {
    startupLock.lock();
    try {
      try {
        log.debug(""String_Node_Str"");
        startupCondition.await();
      }
 catch (      InterruptedException e) {
        return;
      }
    }
  finally {
      startupLock.unlock();
    }
  }
  log.info(""String_Node_Str"" + email);
  metadata.fetchUserForLogin(email,password,new LoginHandler(email,password));
}",0.999129677980853
6788,"public FriendFetchTask(User u){
  title=""String_Node_Str"";
  this.u=u;
}","public FriendFetchTask(User myUser){
  title=""String_Node_Str"";
  this.myUser=myUser;
}",0.8679245283018868
6789,"public void addDownload(String streamId) throws RobonoboException {
  File dataFile=new File(downloadsDir,makeFileNameSafe(streamId));
  log.info(""String_Node_Str"" + streamId);
  Stream s=streams.getKnownStream(streamId);
  DownloadingTrack d=new DownloadingTrack(s,dataFile,DownloadStatus.Paused);
  long startTime=now().getTime();
synchronized (this) {
    if (startTime == lastDlStartTime)     startTime++;
    lastDlStartTime=startTime;
  }
  d.setDateAdded(new Date(startTime));
  try {
    PageBuffer pb=storage.createPageBufForDownload(s,dataFile);
    if (numRunningDownloads() < rbnb.getConfig().getMaxRunningDownloads())     startDownload(d,pb);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + s.getStreamId(),e);
    throw new RobonoboException(e);
  }
 finally {
    if (d != null)     db.putDownload(d);
  }
synchronized (dPriority) {
    dPriority.add(s.getStreamId());
  }
  updatePriorities();
synchronized (this) {
    downloadStreamIds.add(s.getStreamId());
  }
  event.fireTrackUpdated(s.getStreamId());
  event.fireMyLibraryUpdated();
}","public void addDownload(String streamId) throws RobonoboException {
  File dataFile=new File(downloadsDir,makeFileNameSafe(streamId));
  log.info(""String_Node_Str"" + streamId);
  Stream s=streams.getKnownStream(streamId);
  DownloadingTrack d=new DownloadingTrack(s,dataFile,DownloadStatus.Paused);
  long startTime=System.currentTimeMillis();
synchronized (this) {
    if (startTime == lastDlStartTime)     startTime++;
    lastDlStartTime=startTime;
  }
  d.setDateAdded(new Date(startTime));
  try {
    PageBuffer pb=storage.createPageBufForDownload(s,dataFile);
    if (numRunningDownloads() < rbnb.getConfig().getMaxRunningDownloads())     startDownload(d,pb);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + s.getStreamId(),e);
    storage.nukePageBuf(streamId);
    throw new RobonoboException(e);
  }
  db.putDownload(d);
synchronized (dPriority) {
    dPriority.add(s.getStreamId());
  }
  updatePriorities();
synchronized (this) {
    downloadStreamIds.add(s.getStreamId());
  }
  event.fireTrackUpdated(s.getStreamId());
  event.fireMyLibraryUpdated();
}",0.9544609665427508
6790,"public void doRun() throws Exception {
  LibraryTreeNode ltn;
  FriendTreeNode ftn;
synchronized (FriendTreeModel.this) {
    ltn=libNodes.get(uid);
    ftn=friendNodes.get(uid);
    if (ltn == null) {
      log.error(""String_Node_Str"" + uid + ""String_Node_Str"");
      return;
    }
 else     ltn.setNumUnseenTracks(numUnseen);
  }
  firePathToRootChanged(ltn);
  firePathToRootChanged(ftn);
  firePathToRootChanged(getRoot());
}","public void doRun() throws Exception {
  control.markAllLibraryTracksAsSeen(uid);
}",0.2378167641325536
6791,"@Override public void friendLibraryUpdated(final long uid,final int numUnseen,Map<String,Date> newTracks){
  runOnUiThread(new CatchingRunnable(){
    public void doRun() throws Exception {
      LibraryTreeNode ltn;
      FriendTreeNode ftn;
synchronized (FriendTreeModel.this) {
        ltn=libNodes.get(uid);
        ftn=friendNodes.get(uid);
        if (ltn == null) {
          log.error(""String_Node_Str"" + uid + ""String_Node_Str"");
          return;
        }
 else         ltn.setNumUnseenTracks(numUnseen);
      }
      firePathToRootChanged(ltn);
      firePathToRootChanged(ftn);
      firePathToRootChanged(getRoot());
    }
  }
);
}","@Override public void friendLibraryUpdated(final long uid,final int numUnseen,Map<String,Date> newTracks){
  runOnUiThread(new CatchingRunnable(){
    public void doRun() throws Exception {
      LibraryTreeNode ltn;
      FriendTreeNode ftn;
synchronized (FriendTreeModel.this) {
        ltn=libNodes.get(uid);
        ftn=friendNodes.get(uid);
        if (ltn == null) {
          log.error(""String_Node_Str"" + uid + ""String_Node_Str"");
          return;
        }
 else {
          if (tree.isSelectedNode(ltn)) {
            control.getExecutor().execute(new CatchingRunnable(){
              public void doRun() throws Exception {
                control.markAllLibraryTracksAsSeen(uid);
              }
            }
);
          }
 else           ltn.setNumUnseenTracks(numUnseen);
        }
      }
      firePathToRootChanged(ltn);
      firePathToRootChanged(ftn);
      firePathToRootChanged(getRoot());
    }
  }
);
}",0.8203174603174603
6792,"/** 
 * @syncpriority 170 
 */
public void setupAccount(SourceStatus ss){
  String nodeId=ss.getFromNode().getId();
  while (!mina.getCurrencyClient().isReady()) {
    try {
      Thread.sleep(100L);
    }
 catch (    InterruptedException e) {
      return;
    }
    if (mina.getCCM().isShuttingDown())     return;
  }
synchronized (this) {
    if (accounts.containsKey(nodeId) || accountsInProgress.contains(nodeId))     return;
    accountsInProgress.add(nodeId);
    asMap.put(nodeId,new AuctionState(ss.getAuctionState()));
    agMap.put(nodeId,ss.getAgorics());
  }
  String paymentMethod=getBestPaymentMethod(ss.getAgorics());
  if (paymentMethod == null) {
    log.info(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    return;
  }
  if (paymentMethod.equals(""String_Node_Str"")) {
    setupUpfrontAccount(nodeId);
    return;
  }
 else   if (paymentMethod.startsWith(""String_Node_Str"")) {
    String escrowProvId=paymentMethod.substring(7);
    setupEscrowAccount(nodeId,escrowProvId);
    return;
  }
  log.error(""String_Node_Str"" + nodeId + ""String_Node_Str""+ paymentMethod+ ""String_Node_Str"");
}","/** 
 * @throws IOException 
 * @syncpriority 170 
 */
public void setupAccount(SourceStatus ss) throws IOException {
  String nodeId=ss.getFromNode().getId();
  while (!mina.getCurrencyClient().isReady()) {
    try {
      Thread.sleep(100L);
    }
 catch (    InterruptedException e) {
      return;
    }
    if (mina.getCCM().isShuttingDown())     return;
  }
synchronized (this) {
    if (accounts.containsKey(nodeId) || accountsInProgress.contains(nodeId))     return;
    accountsInProgress.add(nodeId);
    asMap.put(nodeId,new AuctionState(ss.getAuctionState()));
    agMap.put(nodeId,ss.getAgorics());
  }
  String paymentMethod=getBestPaymentMethod(ss.getAgorics());
  if (paymentMethod == null) {
    log.info(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    return;
  }
  if (paymentMethod.equals(""String_Node_Str"")) {
    setupUpfrontAccount(nodeId);
    return;
  }
 else   if (paymentMethod.startsWith(""String_Node_Str"")) {
    String escrowProvId=paymentMethod.substring(7);
    setupEscrowAccount(nodeId,escrowProvId);
    return;
  }
  log.error(""String_Node_Str"" + nodeId + ""String_Node_Str""+ paymentMethod+ ""String_Node_Str"");
}",0.9805481874447391
6793,"private void setupUpfrontAccount(final String nodeId){
  log.info(""String_Node_Str"" + nodeId);
  ControlConnection cc=mina.getCCM().getCCWithId(nodeId);
  if (cc == null) {
    log.error(""String_Node_Str"" + nodeId);
    return;
  }
  double cashToSend=mina.getCurrencyClient().getOpeningBalance();
  byte[] token;
  try {
    token=mina.getCurrencyClient().withdrawToken(cashToSend,""String_Node_Str"" + nodeId);
  }
 catch (  CurrencyException e) {
    log.error(""String_Node_Str"" + cashToSend + ""String_Node_Str""+ nodeId);
    return;
  }
synchronized (this) {
    Account a=new Account();
    a.addRecentAs(asMap.get(nodeId));
    accounts.put(nodeId,a);
  }
  try {
    TopUp tu=TopUp.newBuilder().setCurrencyToken(ByteString.copyFrom(token)).build();
    cc.sendMessageOrThrow(""String_Node_Str"",tu);
  }
 catch (  IOException e) {
    final byte[] tok=token;
    mina.getExecutor().execute(new CatchingRunnable(){
      public void doRun() throws Exception {
        log.error(""String_Node_Str"");
        mina.getCurrencyClient().depositToken(tok,""String_Node_Str"" + nodeId);
      }
    }
);
  }
synchronized (this) {
    accounts.get(nodeId).balance+=cashToSend;
  }
  accountSetupSucceeded(nodeId);
}","private void setupUpfrontAccount(final String nodeId) throws IOException {
  log.info(""String_Node_Str"" + nodeId);
  ControlConnection cc=mina.getCCM().getCCWithId(nodeId);
  if (cc == null) {
    log.error(""String_Node_Str"" + nodeId);
    return;
  }
  double cashToSend=mina.getCurrencyClient().getOpeningBalance();
  byte[] token;
  try {
    token=mina.getCurrencyClient().withdrawToken(cashToSend,""String_Node_Str"" + nodeId);
  }
 catch (  CurrencyException e) {
    log.error(""String_Node_Str"" + cashToSend + ""String_Node_Str""+ nodeId);
    return;
  }
synchronized (this) {
    Account a=new Account();
    a.addRecentAs(asMap.get(nodeId));
    accounts.put(nodeId,a);
  }
  try {
    TopUp tu=TopUp.newBuilder().setCurrencyToken(ByteString.copyFrom(token)).build();
    cc.sendMessageOrThrow(""String_Node_Str"",tu);
  }
 catch (  IOException e) {
synchronized (this) {
      accounts.remove(nodeId);
    }
    final byte[] tok=token;
    mina.getExecutor().execute(new CatchingRunnable(){
      public void doRun() throws Exception {
        log.error(""String_Node_Str"");
        mina.getCurrencyClient().depositToken(tok,""String_Node_Str"" + nodeId);
      }
    }
);
    throw e;
  }
synchronized (this) {
    accounts.get(nodeId).balance+=cashToSend;
  }
  accountSetupSucceeded(nodeId);
}",0.2843450479233226
6794,"/** 
 * @syncpriority 200
 */
public void makeListenConnectionTo(final String sid,final SourceStatus ss){
  Node node=ss.getFromNode();
  final String nodeId=node.getId();
  if (mina.getCCM().isShuttingDown()) {
    log.debug(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    return;
  }
  if (mina.getConfig().isAgoric() && !mina.getCurrencyClient().isReady()) {
    log.debug(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    mina.getExecutor().schedule(new CatchingRunnable(){
      public void doRun() throws Exception {
        makeListenConnectionTo(sid,ss);
      }
    }
,5,TimeUnit.SECONDS);
    return;
  }
  ControlConnection cc=mina.getCCM().getCCWithId(nodeId);
  if (cc == null) {
synchronized (this) {
      if (!pendingCons.containsKey(sid))       pendingCons.put(sid,new HashSet<String>());
      if (pendingCons.get(sid).contains(nodeId)) {
        log.debug(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid+ ""String_Node_Str"");
        return;
      }
      Attempt getCCAttempt=new GetCCAttempt(sid,ss);
      pendingCons.get(sid).add(nodeId);
      getCCAttempt.start();
      log.debug(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid);
      mina.getCCM().makeCCTo(node,getCCAttempt);
    }
  }
 else   startListeningTo(cc,sid,ss);
}","/** 
 * @syncpriority 200
 */
public void makeListenConnectionTo(final String sid,final SourceStatus ss){
  Node node=ss.getFromNode();
  final String nodeId=node.getId();
  if (mina.getCCM().isShuttingDown()) {
    log.debug(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    return;
  }
  if (mina.getConfig().isAgoric() && !mina.getCurrencyClient().isReady()) {
    log.debug(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid+ ""String_Node_Str"");
    mina.getExecutor().schedule(new CatchingRunnable(){
      public void doRun() throws Exception {
        makeListenConnectionTo(sid,ss);
      }
    }
,5,TimeUnit.SECONDS);
    return;
  }
  ControlConnection cc=mina.getCCM().getCCWithId(nodeId);
  if (cc == null) {
synchronized (this) {
      if (!pendingCons.containsKey(sid))       pendingCons.put(sid,new HashSet<String>());
      if (pendingCons.get(sid).contains(nodeId)) {
        log.debug(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid+ ""String_Node_Str"");
        return;
      }
      Attempt getCCAttempt=new GetCCAttempt(sid,ss);
      pendingCons.get(sid).add(nodeId);
      getCCAttempt.start();
      log.debug(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid);
      mina.getCCM().makeCCTo(node,getCCAttempt);
    }
  }
 else {
    if (cc.isClosing()) {
      log.debug(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid+ ""String_Node_Str"");
      mina.getExecutor().schedule(new CatchingRunnable(){
        public void doRun() throws Exception {
          makeListenConnectionTo(sid,ss);
        }
      }
,5,TimeUnit.SECONDS);
      return;
    }
    try {
      startListeningTo(cc,sid,ss);
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"" + cc.getNodeId() + ""String_Node_Str""+ sid,e);
      mina.getSourceMgr().cachePossiblyDeadSource(cc.getNode(),sid);
      mina.getStreamMgr().requestCachedSources(sid);
    }
  }
}",0.7942766295707472
6795,"/** 
 * @syncpriority 200
 */
private void startListeningTo(final ControlConnection cc,String sid,SourceStatus ss){
  String nodeId=cc.getNodeId();
  if (mina.getCCM().isShuttingDown()) {
    log.debug(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    return;
  }
  if (cc.getLCPair(sid) != null) {
    log.error(""String_Node_Str"" + nodeId);
    return;
  }
  log.info(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid);
synchronized (this) {
    if (!lcPairs.containsKey(sid))     lcPairs.put(sid,new HashSet<LCPair>());
    lcPairs.get(sid).add(new LCPair(mina,sid,cc,ss));
  }
  mina.getEventMgr().fireReceptionConnsChanged(sid);
}","/** 
 * @throws IOException 
 * @syncpriority 200
 */
private void startListeningTo(final ControlConnection cc,String sid,SourceStatus ss) throws IOException {
  String nodeId=cc.getNodeId();
  if (mina.getCCM().isShuttingDown()) {
    log.debug(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    return;
  }
  if (cc.getLCPair(sid) != null) {
    log.error(""String_Node_Str"" + nodeId);
    return;
  }
  log.info(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid);
synchronized (this) {
    LCPair lcp=new LCPair(mina,sid,cc,ss);
    if (!lcPairs.containsKey(sid))     lcPairs.put(sid,new HashSet<LCPair>());
    lcPairs.get(sid).add(lcp);
  }
  mina.getEventMgr().fireReceptionConnsChanged(sid);
}",0.9135618479880776
6796,"/** 
 * @syncpriority 200
 */
protected void onSuccess(){
synchronized (StreamConnsMgr.this) {
    removePendingConn(sid,nid);
  }
  ControlConnection cc=mina.getCCM().getCCWithId(nid);
  if (cc == null) {
    onFail();
    return;
  }
  log.info(""String_Node_Str"" + cc.getNodeId() + ""String_Node_Str""+ sid);
  startListeningTo(cc,sid,sourceStat);
}","/** 
 * @syncpriority 200
 */
protected void onSuccess(){
synchronized (StreamConnsMgr.this) {
    removePendingConn(sid,nid);
  }
  ControlConnection cc=mina.getCCM().getCCWithId(nid);
  if (cc == null) {
    onFail();
    return;
  }
  log.info(""String_Node_Str"" + cc.getNodeId() + ""String_Node_Str""+ sid);
  try {
    startListeningTo(cc,sid,sourceStat);
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + cc.getNodeId() + ""String_Node_Str""+ sid,e);
    onFail();
  }
}",0.8359281437125748
6797,"/** 
 * @syncpriority 170 
 */
public LCPair(MinaInstance m,String streamId,ControlConnection ccon,SourceStatus ss){
  super(m,streamId,ccon);
  rto=MIN_PAGE_TIMEOUT;
  try {
    lc=ccon.getSCF().getListenConnection(ccon);
  }
 catch (  MinaConnectionException e) {
    log.error(""String_Node_Str"" + ccon.getNodeId(),e);
    die(false);
  }
  lc.setLCPair(this);
  setLastSourceStat(ss);
  ccon.addLCPair(this);
  final String nodeId=ccon.getNodeId();
  if (mina.getConfig().isAgoric() && mina.getBuyMgr().getAgreedBidTo(nodeId) > 0)   startListening();
 else {
    startAttempt=new Attempt(mina.getExecutor(),8 * mina.getConfig().getMessageTimeout() * 1000,""String_Node_Str"" + sid + ""String_Node_Str""+ nodeId){
      protected void onTimeout(){
        log.error(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid);
        mina.getSourceMgr().cachePossiblyDeadSource(cc.getNode(),sid);
        die(false);
      }
    }
;
    startAttempt.start();
    mina.getBuyMgr().setupAccount(ss);
  }
}","/** 
 * @throws IOException 
 * @syncpriority 170 
 */
public LCPair(MinaInstance m,String streamId,ControlConnection ccon,SourceStatus ss) throws IOException {
  super(m,streamId,ccon);
  rto=MIN_PAGE_TIMEOUT;
  try {
    lc=ccon.getSCF().getListenConnection(ccon);
  }
 catch (  MinaConnectionException e) {
    log.error(""String_Node_Str"" + ccon.getNodeId(),e);
    die(false);
  }
  lc.setLCPair(this);
  setLastSourceStat(ss);
  ccon.addLCPair(this);
  final String nodeId=ccon.getNodeId();
  if (mina.getConfig().isAgoric() && mina.getBuyMgr().getAgreedBidTo(nodeId) > 0)   startListening();
 else {
    startAttempt=new Attempt(mina.getExecutor(),8 * mina.getConfig().getMessageTimeout() * 1000,""String_Node_Str"" + sid + ""String_Node_Str""+ nodeId){
      protected void onTimeout(){
        log.error(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid);
        mina.getSourceMgr().cachePossiblyDeadSource(cc.getNode(),sid);
        die(false);
      }
    }
;
    startAttempt.start();
    mina.getBuyMgr().setupAccount(ss);
  }
}",0.9783677482792528
6798,"/** 
 * @syncpriority 130
 */
public void die(boolean sendStopSource){
  log.debug(this + ""String_Node_Str"");
synchronized (this) {
    if (closing)     return;
    closing=true;
    if (lc != null)     lc.close();
  }
  for (  PageAttempt rpa : reqdPages.values()) {
    rpa.failed();
  }
  if (usefulDataTimeout != null)   usefulDataTimeout.cancel(false);
  if (startAttempt != null)   startAttempt.cancel();
  if (sendStopSource)   sendMessage(""String_Node_Str"",StopSource.newBuilder().setStreamId(sid).build());
  cc.removeLCPair(this);
  super.die();
}","/** 
 * @syncpriority 130 
 */
public void die(boolean sendStopSource){
  log.debug(this + ""String_Node_Str"");
  List<PageAttempt> pas=new ArrayList<PageAttempt>();
synchronized (this) {
    if (closing)     return;
    closing=true;
    if (lc != null)     lc.close();
    pas.addAll(reqdPages.values());
  }
  for (  PageAttempt rpa : pas) {
    rpa.failed();
  }
  if (usefulDataTimeout != null)   usefulDataTimeout.cancel(false);
  if (startAttempt != null)   startAttempt.cancel();
  if (sendStopSource)   sendMessage(""String_Node_Str"",StopSource.newBuilder().setStreamId(sid).build());
  cc.removeLCPair(this);
  super.die();
}",0.9058823529411764
6799,"/** 
 * @syncpriority 170
 */
protected void startListening(){
  if (setupFinished)   throw new Errot();
  setupFinished=true;
  if (startAttempt != null)   startAttempt.cancel();
  mina.getPRM().notifyStreamStatus(sid,cc.getNodeId(),lastStreamStat);
  SortedSet<Long> newPages=mina.getPRM().getPagesToRequest(sid,cc.getNodeId(),1,reqdPages.keySet());
  StartSource ss=StartSource.newBuilder().setStreamId(sid).setEp(lc.getEndPoint()).addAllPage(newPages).build();
  cc.sendMessage(""String_Node_Str"",ss);
  if (newPages.size() == 0)   startUsefulDataTimeout();
 else {
    for (    Long pn : newPages) {
      int statusIdx=mina.getConfig().isAgoric() ? mina.getBuyMgr().getCurrentStatusIdx(cc.getNodeId()) : 0;
      PageAttempt rpa=new PageAttempt(rto,pn,currentTimeMillis(),statusIdx);
      reqdPages.put(pn,rpa);
      rpa.start();
    }
  }
}","/** 
 * @syncpriority 170 
 */
protected void startListening(){
  if (setupFinished)   throw new Errot();
  setupFinished=true;
  if (startAttempt != null)   startAttempt.cancel();
  mina.getPRM().notifyStreamStatus(sid,cc.getNodeId(),lastStreamStat);
  SortedSet<Long> newPages=mina.getPRM().getPagesToRequest(sid,cc.getNodeId(),1,reqdPages.keySet());
  StartSource ss=StartSource.newBuilder().setStreamId(sid).setEp(lc.getEndPoint()).addAllPage(newPages).build();
  cc.sendMessage(""String_Node_Str"",ss);
  if (newPages.size() == 0)   startUsefulDataTimeout();
 else {
    int statusIdx=mina.getConfig().isAgoric() ? mina.getBuyMgr().getCurrentStatusIdx(cc.getNodeId()) : 0;
synchronized (this) {
      for (      Long pn : newPages) {
        PageAttempt rpa=new PageAttempt(rto,pn,currentTimeMillis(),statusIdx);
        reqdPages.put(pn,rpa);
        rpa.start();
      }
    }
  }
}",0.919884726224784
6800,"/** 
 * @syncpriority 200
 */
public void notifyStreamStatus(StreamStatus streamStat){
  this.lastStreamStat=streamStat;
  mina.getPRM().notifyStreamStatus(sid,cc.getNodeId(),streamStat);
  sendReqPageIfNecessary();
}","/** 
 * @syncpriority 200 
 */
public void notifyStreamStatus(StreamStatus streamStat){
  this.lastStreamStat=streamStat;
  mina.getPRM().notifyStreamStatus(sid,cc.getNodeId(),streamStat);
  sendReqPageIfNecessary();
}",0.9977011494252872
6801,"/** 
 * @syncpriority 200
 */
public void receivePage(Page p){
  Long pn=new Long(p.getPageNumber());
  PageAttempt rpa;
synchronized (this) {
    rpa=reqdPages.remove(pn);
  }
  if (rpa != null) {
    rpa.succeeded();
    updateRtt((int)(now().getTime() - rpa.startTime));
  }
 else {
    log.error(this + ""String_Node_Str"" + p.getPageNumber());
    return;
  }
  if (log.isDebugEnabled()) {
    long bytesInFlight=mina.getPageBufProvider().getPageBuf(sid).getAvgPageSize() * reqdPages.size();
    log.debug(""String_Node_Str"" + sid + ""String_Node_Str""+ cc.getNodeId()+ ""String_Node_Str""+ pn+ ""String_Node_Str""+ formatSizeInBytes(getFlowRate())+ ""String_Node_Str""+ reqdPages.size()+ ""String_Node_Str""+ FileUtil.humanReadableSize(bytesInFlight)+ ""String_Node_Str"");
  }
  mina.getStreamMgr().receivePage(sid,p);
  if (mina.getConfig().isAgoric()) {
    if (AuctionState.INDEX_MOD.lt(p.getAuctionStatus(),rpa.statusIdx)) {
      log.error(""String_Node_Str"" + this + ""String_Node_Str""+ p.getAuctionStatus()+ ""String_Node_Str""+ rpa.statusIdx);
      return;
    }
    mina.getBuyMgr().receivedPage(cc.getNodeId(),p.getAuctionStatus(),p.getLength());
  }
  sendReqPageIfNecessary();
}","/** 
 * @syncpriority 200 
 */
public void receivePage(Page p){
  Long pn=new Long(p.getPageNumber());
  PageAttempt rpa;
synchronized (this) {
    rpa=reqdPages.remove(pn);
  }
  if (rpa != null) {
    rpa.succeeded();
    updateRtt((int)(now().getTime() - rpa.startTime));
  }
 else {
    log.error(this + ""String_Node_Str"" + p.getPageNumber());
    return;
  }
  if (log.isDebugEnabled()) {
    long bytesInFlight=mina.getPageBufProvider().getPageBuf(sid).getAvgPageSize() * reqdPages.size();
    log.debug(""String_Node_Str"" + sid + ""String_Node_Str""+ cc.getNodeId()+ ""String_Node_Str""+ pn+ ""String_Node_Str""+ formatSizeInBytes(getFlowRate())+ ""String_Node_Str""+ reqdPages.size()+ ""String_Node_Str""+ FileUtil.humanReadableSize(bytesInFlight)+ ""String_Node_Str"");
  }
  mina.getStreamMgr().receivePage(sid,p);
  if (mina.getConfig().isAgoric()) {
    if (AuctionState.INDEX_MOD.lt(p.getAuctionStatus(),rpa.statusIdx)) {
      log.error(""String_Node_Str"" + this + ""String_Node_Str""+ p.getAuctionStatus()+ ""String_Node_Str""+ rpa.statusIdx);
      return;
    }
    mina.getBuyMgr().receivedPage(cc.getNodeId(),p.getAuctionStatus(),p.getLength());
  }
  sendReqPageIfNecessary();
}",0.999576091564222
6802,"/** 
 * @syncpriority 200
 */
private void sendReqPageIfNecessary(){
  if (closing || !mina.getStreamMgr().isReceiving(sid) || mina.getCCM().isShuttingDown())   return;
  if (!cc.isHighestPriority(this)) {
    mina.getExecutor().schedule(new CatchingRunnable(){
      public void doRun() throws Exception {
        sendReqPageIfNecessary();
      }
    }
,1,TimeUnit.SECONDS);
    return;
  }
  int statusIdx=(mina.getConfig().isAgoric()) ? mina.getBuyMgr().getCurrentStatusIdx(cc.getNodeId()) : 0;
  int pgWin=pageWindowSize();
synchronized (this) {
    int reqdPgSz=reqdPages.size();
    if (reqdPgSz < pgWin) {
      int pagesToReq=pgWin - reqdPgSz;
      SortedSet<Long> newPages=mina.getPRM().getPagesToRequest(sid,cc.getNodeId(),pagesToReq,reqdPages.keySet());
      if (newPages.size() > 0) {
        if (usefulDataTimeout != null) {
          usefulDataTimeout.cancel(false);
          usefulDataTimeout=null;
        }
        sendMessage(""String_Node_Str"",ReqPage.newBuilder().setStreamId(sid).addAllRequestedPage(newPages).build());
        for (        long pn : newPages) {
          PageAttempt rpa=new PageAttempt(rto,pn,now().getTime(),statusIdx);
          reqdPages.put(pn,rpa);
          rpa.start();
        }
      }
 else       if (reqdPgSz == 0)       startUsefulDataTimeout();
    }
  }
}","/** 
 * @syncpriority 200 
 */
private void sendReqPageIfNecessary(){
  if (closing || !mina.getStreamMgr().isReceiving(sid) || mina.getCCM().isShuttingDown())   return;
  if (!cc.isHighestPriority(this)) {
    mina.getExecutor().schedule(new CatchingRunnable(){
      public void doRun() throws Exception {
        sendReqPageIfNecessary();
      }
    }
,1,TimeUnit.SECONDS);
    return;
  }
  int statusIdx=(mina.getConfig().isAgoric()) ? mina.getBuyMgr().getCurrentStatusIdx(cc.getNodeId()) : 0;
  int pgWin=pageWindowSize();
synchronized (this) {
    int reqdPgSz=reqdPages.size();
    if (reqdPgSz < pgWin) {
      int pagesToReq=pgWin - reqdPgSz;
      SortedSet<Long> newPages=mina.getPRM().getPagesToRequest(sid,cc.getNodeId(),pagesToReq,reqdPages.keySet());
      if (newPages.size() > 0) {
        if (usefulDataTimeout != null) {
          usefulDataTimeout.cancel(false);
          usefulDataTimeout=null;
        }
        sendMessage(""String_Node_Str"",ReqPage.newBuilder().setStreamId(sid).addAllRequestedPage(newPages).build());
        for (        long pn : newPages) {
          PageAttempt rpa=new PageAttempt(rto,pn,now().getTime(),statusIdx);
          reqdPages.put(pn,rpa);
          rpa.start();
        }
      }
 else       if (reqdPgSz == 0)       startUsefulDataTimeout();
    }
  }
}",0.9996190476190476
6803,"/** 
 * We have no pages in flight, and we just got given an empty set of pages to ask for, which means they have no pages that are useful to us... Start a timeout to shut us down if they don't offer any useful data within 2 mins
 */
private void startUsefulDataTimeout(){
  if (usefulDataTimeout == null) {
    log.debug(this + ""String_Node_Str"" + mina.getConfig().getUsefulDataSourceTimeout()+ ""String_Node_Str"");
    usefulDataTimeout=mina.getExecutor().schedule(new CatchingRunnable(){
      public void doRun() throws Exception {
        log.info(LCPair.this + ""String_Node_Str"");
        mina.getSourceMgr().cacheSourceUntilDataAvailable(cc.getNode(),sid);
        die();
      }
    }
,mina.getConfig().getUsefulDataSourceTimeout(),TimeUnit.SECONDS);
  }
}","/** 
 * We have no pages in flight, and we just got given an empty set of pages to ask for, which means they have no pages that are useful to us... Start a timeout to shut us down if they don't offer any useful data within 2 mins 
 */
private void startUsefulDataTimeout(){
  if (usefulDataTimeout == null) {
    log.debug(this + ""String_Node_Str"" + mina.getConfig().getUsefulDataSourceTimeout()+ ""String_Node_Str"");
    usefulDataTimeout=mina.getExecutor().schedule(new CatchingRunnable(){
      public void doRun() throws Exception {
        log.info(LCPair.this + ""String_Node_Str"");
        mina.getSourceMgr().cacheSourceUntilDataAvailable(cc.getNode(),sid);
        die();
      }
    }
,mina.getConfig().getUsefulDataSourceTimeout(),TimeUnit.SECONDS);
  }
}",0.9993451211525868
6804,"/** 
 * @syncpriority 200
 */
public void notifySourceStatus(SourceStatus sourceStat){
  setLastSourceStat(sourceStat);
  for (  StreamStatus streamStat : sourceStat.getSsList()) {
    if (streamStat.getStreamId().equals(sid)) {
      notifyStreamStatus(streamStat);
      break;
    }
  }
}","/** 
 * @syncpriority 200 
 */
public void notifySourceStatus(SourceStatus sourceStat){
  setLastSourceStat(sourceStat);
  for (  StreamStatus streamStat : sourceStat.getSsList()) {
    if (streamStat.getStreamId().equals(sid)) {
      notifyStreamStatus(streamStat);
      break;
    }
  }
}",0.9982847341337908
6805,"/** 
 * @syncpriority 130
 */
public synchronized void abort(){
  if (lc != null)   lc.close();
}","/** 
 * @syncpriority 130 
 */
public synchronized void abort(){
  if (lc != null)   lc.close();
}",0.9948717948717948
6806,"/** 
 * @syncpriority 170
 */
public LCPair(MinaInstance m,String streamId,ControlConnection ccon,SourceStatus ss){
  super(m,streamId,ccon);
  rto=MIN_PAGE_TIMEOUT;
  try {
    lc=ccon.getSCF().getListenConnection(ccon);
  }
 catch (  MinaConnectionException e) {
    log.error(""String_Node_Str"" + ccon.getNodeId(),e);
    die(false);
  }
  lc.setLCPair(this);
  setLastSourceStat(ss);
  ccon.addLCPair(this);
  final String nodeId=ccon.getNodeId();
  if (mina.getConfig().isAgoric() && mina.getBuyMgr().getAgreedBidTo(nodeId) > 0)   startListening();
 else {
    startAttempt=new Attempt(mina.getExecutor(),8 * mina.getConfig().getMessageTimeout() * 1000,""String_Node_Str"" + sid + ""String_Node_Str""+ nodeId){
      protected void onTimeout(){
        log.error(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid);
        mina.getSourceMgr().cachePossiblyDeadSource(cc.getNode(),sid);
        die(false);
      }
    }
;
    startAttempt.start();
    mina.getBuyMgr().setupAccount(ss);
  }
}","/** 
 * @syncpriority 170 
 */
public LCPair(MinaInstance m,String streamId,ControlConnection ccon,SourceStatus ss){
  super(m,streamId,ccon);
  rto=MIN_PAGE_TIMEOUT;
  try {
    lc=ccon.getSCF().getListenConnection(ccon);
  }
 catch (  MinaConnectionException e) {
    log.error(""String_Node_Str"" + ccon.getNodeId(),e);
    die(false);
  }
  lc.setLCPair(this);
  setLastSourceStat(ss);
  ccon.addLCPair(this);
  final String nodeId=ccon.getNodeId();
  if (mina.getConfig().isAgoric() && mina.getBuyMgr().getAgreedBidTo(nodeId) > 0)   startListening();
 else {
    startAttempt=new Attempt(mina.getExecutor(),8 * mina.getConfig().getMessageTimeout() * 1000,""String_Node_Str"" + sid + ""String_Node_Str""+ nodeId){
      protected void onTimeout(){
        log.error(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid);
        mina.getSourceMgr().cachePossiblyDeadSource(cc.getNode(),sid);
        die(false);
      }
    }
;
    startAttempt.start();
    mina.getBuyMgr().setupAccount(ss);
  }
}",0.9994972347913524
6807,"/** 
 * @syncpriority 170
 */
public void gotAgreedBid(){
  if (setupFinished)   return;
  startListening();
}","/** 
 * @syncpriority 170 
 */
public void gotAgreedBid(){
  if (setupFinished)   return;
  startListening();
}",0.995475113122172
6808,"@Override public void startup() throws Exception {
  String baseUrl=rbnb.getConfig().getMidasUrl();
  Matcher m=URL_PATTERN.matcher(baseUrl);
  if (!m.matches())   throw new Errot(""String_Node_Str"" + baseUrl + ""String_Node_Str"");
  cfg=new MidasClientConfig(baseUrl);
  String midasHost=m.group(1);
  String portStr=m.group(2);
  int midasPort;
  if (isEmpty(portStr) || portStr.equals(""String_Node_Str""))   midasPort=-1;
 else   midasPort=Integer.parseInt(portStr);
  log.debug(""String_Node_Str"" + midasHost + ""String_Node_Str""+ midasPort);
  midasAuthScope=new AuthScope(midasHost,midasPort);
  numThreads=rbnb.getConfig().getMidasThreadPoolSize();
  executor=Executors.newFixedThreadPool(numThreads);
  http=rbnb.getHttpService().getClient();
  fetchOrder=RequestFetchOrder.Serial;
}","@Override public void startup() throws Exception {
  String baseUrl=rbnb.getConfig().getMidasUrl();
  Matcher m=URL_PATTERN.matcher(baseUrl);
  if (!m.matches())   throw new Errot(""String_Node_Str"" + baseUrl + ""String_Node_Str"");
  cfg=new MidasClientConfig(baseUrl);
  String midasHost=m.group(1);
  String portStr=m.group(2);
  int midasPort;
  if (isEmpty(portStr) || portStr.equals(""String_Node_Str""))   midasPort=-1;
 else   midasPort=Integer.parseInt(portStr);
  midasAuthScope=new AuthScope(midasHost,midasPort);
  numThreads=rbnb.getConfig().getMidasThreadPoolSize();
  executor=Executors.newFixedThreadPool(numThreads);
  http=rbnb.getHttpService().getClient();
  fetchOrder=RequestFetchOrder.Serial;
}",0.9498997995991983
6809,"private synchronized void addRequest(Request r){
  requests.addFirst(r);
  int numToStart=min(r.remaining(),(numThreads - runningTasks));
  runningTasks+=numToStart;
  log.debug(""String_Node_Str"" + r.remaining() + ""String_Node_Str""+ numToStart+ ""String_Node_Str"");
  for (int i=0; i < numToStart; i++) {
    executor.execute(new FetchTask());
  }
}","private synchronized void addRequest(Request r){
  requests.addFirst(r);
  int numToStart=min(r.remaining(),(numThreads - runningTasks));
  runningTasks+=numToStart;
  for (int i=0; i < numToStart; i++) {
    executor.execute(new FetchTask());
  }
}",0.8341708542713567
6810,"@Override public void doRun() throws Exception {
  log.debug(this + ""String_Node_Str"");
  while (true) {
    if (refreshContext) {
      log.debug(this + ""String_Node_Str"");
      context=http.newPreemptiveContext(new HttpHost(midasAuthScope.getHost(),midasAuthScope.getPort()));
      refreshContext=false;
    }
    Request r;
    Params p;
synchronized (MidasClientService.this) {
      if (requests.size() == 0) {
        runningTasks--;
        log.debug(this + ""String_Node_Str"");
        fetchTasks.remove(taskId);
        return;
      }
      r=requests.removeFirst();
      p=r.getNextParams();
      if (p == null)       continue;
      if (r.remaining() > 0) {
        if (fetchOrder == RequestFetchOrder.Serial)         requests.addFirst(r);
 else         requests.addLast(r);
      }
    }
    log.debug(this + ""String_Node_Str"" + p.op+ ""String_Node_Str""+ p.url);
    try {
switch (p.op) {
case Get:
        HttpContext c=context;
      if (p.username != null)       c=http.newPreemptiveContext(new HttpHost(midasAuthScope.getHost(),midasAuthScope.getPort()));
    getFromUrl(c,p.resultBldr,p.url,p.username,p.password);
  break;
case Put:
putToUrl(context,p.sendMsg,p.url,p.resultBldr);
break;
case Delete:
deleteAtUrl(context,p.url);
break;
}
log.debug(this + ""String_Node_Str"" + p.op+ ""String_Node_Str""+ p.url);
if (p.resultBldr == null) r.success(null);
 else r.success(p.resultBldr.build());
}
 catch (Exception e) {
if (stopped) return;
log.debug(this + ""String_Node_Str"" + shortClassName(e.getClass())+ ""String_Node_Str""+ p.op+ ""String_Node_Str""+ p.url+ ""String_Node_Str""+ e.getMessage());
r.error(p,e);
}
}
}","@Override public void doRun() throws Exception {
  while (true) {
    if (refreshContext) {
      context=http.newPreemptiveContext(new HttpHost(midasAuthScope.getHost(),midasAuthScope.getPort()));
      refreshContext=false;
    }
    Request r;
    Params p;
synchronized (MidasClientService.this) {
      if (requests.size() == 0) {
        runningTasks--;
        fetchTasks.remove(taskId);
        return;
      }
      r=requests.removeFirst();
      p=r.getNextParams();
      if (p == null)       continue;
      if (r.remaining() > 0) {
        if (fetchOrder == RequestFetchOrder.Serial)         requests.addFirst(r);
 else         requests.addLast(r);
      }
    }
    try {
switch (p.op) {
case Get:
        HttpContext c=context;
      if (p.username != null)       c=http.newPreemptiveContext(new HttpHost(midasAuthScope.getHost(),midasAuthScope.getPort()));
    getFromUrl(c,p.resultBldr,p.url,p.username,p.password);
  break;
case Put:
putToUrl(context,p.sendMsg,p.url,p.resultBldr);
break;
case Delete:
deleteAtUrl(context,p.url);
break;
}
if (p.resultBldr == null) r.success(null);
 else r.success(p.resultBldr.build());
}
 catch (Exception e) {
if (stopped) return;
r.error(p,e);
}
}
}",0.8500881834215167
6811,"/** 
 * Returns all the files within the parent directory (including sub-dirs) that have the supplied extension. If extension is null, will return all files. Will not return the sub-dirs themselves. If the path is a file, it will be returned in the list it matches, or else an empty list will be returned
 */
public static List<File> getFilesWithinPath(File path,String fileExtension){
  List<File> result=new ArrayList<File>();
  if (!path.isDirectory()) {
    if (fileExtension == null || fileExtension.equalsIgnoreCase(getFileExtension(path)))     result.add(path);
    return result;
  }
  addChildFilesToList(path,result,fileExtension);
  return result;
}","/** 
 * Returns all the files within the parent directory (including sub-dirs) that have the supplied extension. If extension is null, will return all files. Will not return the sub-dirs themselves. If the path is a file, it will be returned in the list it matches, or else an empty list will be returned 
 */
public static List<File> getFilesWithinPath(File path,String fileExtension){
  List<File> result=new ArrayList<File>();
  if (!path.isDirectory()) {
    if (fileExtension == null || fileExtension.equalsIgnoreCase(getFileExtension(path)))     result.add(path);
    return result;
  }
  addChildFilesToList(path,result,fileExtension);
  return result;
}",0.9992429977289932
6812,"/** 
 * Returns the file extension, without the initial period. If there is no period in the file name, returns an empty string.
 */
public static String getFileExtension(File f){
  String fileName=f.getName();
  if (fileName.contains(""String_Node_Str""))   return fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
 else   return ""String_Node_Str"";
}","/** 
 * Returns the file extension, without the initial period. If there is no period in the file name, returns an empty string. 
 */
public static String getFileExtension(File f){
  String fileName=f.getName();
  if (fileName.contains(""String_Node_Str""))   return fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
 else   return ""String_Node_Str"";
}",0.9986282578875172
6813,"private static void addChildFilesToList(File directory,List<File> list,String fileExtension){
  for (  File f : directory.listFiles()) {
    if (f.isDirectory())     addChildFilesToList(f,list,fileExtension);
 else     if (fileExtension == null || fileExtension.equalsIgnoreCase(getFileExtension(f)))     list.add(f);
  }
}","private static void addChildFilesToList(File directory,List<File> list,String fileExtension){
  File[] filesInThisDir=directory.listFiles();
  if (filesInThisDir == null)   return;
  for (  File f : filesInThisDir) {
    if (f.isDirectory())     addChildFilesToList(f,list,fileExtension);
 else     if (fileExtension == null || fileExtension.equalsIgnoreCase(getFileExtension(f)))     list.add(f);
  }
}",0.8457300275482094
6814,"void startAllShares() throws IOException, RobonoboException {
  log.debug(""String_Node_Str"");
  String[] arr;
synchronized (this) {
    arr=new String[shareStreamIds.size()];
    shareStreamIds.toArray(arr);
  }
  Set<String> shareSids=new HashSet<String>();
  for (  String sid : arr) {
    FilePageBuffer pb=storage.getPageBuf(sid);
    if (pb == null) {
      log.error(""String_Node_Str"" + sid + ""String_Node_Str"");
      db.deleteShare(sid);
      continue;
    }
    File file=pb.getFile();
    if (!file.exists() || !file.canRead()) {
      log.error(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ sid+ ""String_Node_Str"");
synchronized (this) {
        shareStreamIds.remove(sid);
      }
      continue;
    }
    shareSids.add(sid);
  }
  getRobonobo().getMina().startBroadcasts(shareSids);
  log.debug(""String_Node_Str"" + shareSids.size() + ""String_Node_Str"");
}","void startAllShares() throws IOException, RobonoboException {
  log.debug(""String_Node_Str"");
  String[] arr;
synchronized (this) {
    arr=new String[shareStreamIds.size()];
    shareStreamIds.toArray(arr);
  }
  Set<String> shareSids=new HashSet<String>();
  for (  String sid : arr) {
    FilePageBuffer pb=storage.getPageBuf(sid,false);
    if (pb == null) {
      log.error(""String_Node_Str"" + sid + ""String_Node_Str"");
      db.deleteShare(sid);
      continue;
    }
    File file=pb.getFile();
    if (!file.exists() || !file.canRead()) {
      log.error(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ sid+ ""String_Node_Str"");
synchronized (this) {
        shareStreamIds.remove(sid);
      }
      continue;
    }
    shareSids.add(sid);
  }
  if (shareSids.size() > 0)   rbnb.getMina().startBroadcasts(shareSids);
  log.debug(""String_Node_Str"" + shareSids.size() + ""String_Node_Str"");
}",0.971682398667407
6815,"/** 
 * NB The stream referenced by stream id must already have been put into streamservice
 * @param streamId
 * @param dataFile
 * @throws RobonoboException
 */
public void addShare(Stream s,File dataFile) throws RobonoboException {
  String streamId=s.getStreamId();
  log.info(""String_Node_Str"" + streamId + ""String_Node_Str""+ dataFile.getAbsolutePath());
  SharedTrack sh=db.getShare(streamId);
  if (sh != null) {
    log.info(""String_Node_Str"" + streamId + ""String_Node_Str"");
    return;
  }
  sh=new SharedTrack(s,dataFile,ShareStatus.Sharing);
  try {
    PageBuffer pb=storage.createPageBufForShare(sh.getStream(),sh.getFile(),true);
    FormatSupportProvider fsp=rbnb.getFormatService().getFormatSupportProvider(s.getMimeType());
    if (fsp == null)     throw new IOException(""String_Node_Str"" + s.getMimeType());
    log.debug(""String_Node_Str"" + dataFile.getAbsolutePath());
    fsp.paginate(dataFile,pb);
  }
 catch (  IOException e) {
    throw new RobonoboException(e);
  }
  sh.setDateAdded(now());
  db.putShare(sh);
synchronized (this) {
    shareStreamIds.add(s.getStreamId());
  }
  startShare(streamId);
  rbnb.getLibraryService().addToLibrary(streamId);
  event.fireTrackUpdated(s.getStreamId());
  event.fireMyLibraryUpdated();
  rbnb.getPlaylistService().checkPlaylistsForNewShare(sh);
}","/** 
 * NB The stream referenced by stream id must already have been put into streamservice
 * @param streamId
 * @param dataFile
 * @throws RobonoboException 
 */
public void addShare(Stream s,File dataFile) throws RobonoboException {
  String streamId=s.getStreamId();
  log.info(""String_Node_Str"" + streamId + ""String_Node_Str""+ dataFile.getAbsolutePath());
  SharedTrack sh=db.getShare(streamId);
  if (sh != null) {
    log.info(""String_Node_Str"" + streamId + ""String_Node_Str"");
    return;
  }
  sh=new SharedTrack(s,dataFile,ShareStatus.Sharing);
  try {
    PageBuffer pb=storage.createPageBufForShare(sh.getStream(),sh.getFile(),true);
    FormatSupportProvider fsp=rbnb.getFormatService().getFormatSupportProvider(s.getMimeType());
    if (fsp == null)     throw new IOException(""String_Node_Str"" + s.getMimeType());
    log.debug(""String_Node_Str"" + dataFile.getAbsolutePath());
    fsp.paginate(dataFile,pb);
  }
 catch (  IOException e) {
    throw new RobonoboException(e);
  }
  sh.setDateAdded(now());
  db.putShare(sh);
synchronized (this) {
    shareStreamIds.add(s.getStreamId());
  }
  startShare(streamId);
  rbnb.getLibraryService().addToLibrary(streamId);
  event.fireTrackUpdated(s.getStreamId());
  event.fireMyLibraryUpdated();
  rbnb.getPlaylistService().checkPlaylistsForNewShare(sh);
}",0.99961962723469
6816,"private void setupUpfrontAccount(final String nodeId){
  log.info(""String_Node_Str"" + nodeId);
  ControlConnection cc=mina.getCCM().getCCWithId(nodeId);
  if (cc == null) {
    log.error(""String_Node_Str"" + nodeId);
    return;
  }
  double cashToSend=mina.getCurrencyClient().getOpeningBalance();
  byte[] token;
  try {
    token=mina.getCurrencyClient().withdrawToken(cashToSend,""String_Node_Str"" + nodeId);
  }
 catch (  CurrencyException e) {
    log.error(""String_Node_Str"" + cashToSend + ""String_Node_Str""+ nodeId);
    return;
  }
synchronized (this) {
    Account a=new Account();
    a.addRecentAs(asMap.get(nodeId));
    accounts.put(nodeId,a);
  }
  try {
    TopUp tu=TopUp.newBuilder().setCurrencyToken(ByteString.copyFrom(token)).build();
    cc.sendMessageOrThrow(""String_Node_Str"",tu);
  }
 catch (  Exception e) {
    final byte[] tok=token;
    mina.getExecutor().execute(new CatchingRunnable(){
      public void doRun() throws Exception {
        log.error(""String_Node_Str"");
        mina.getCurrencyClient().depositToken(tok,""String_Node_Str"" + nodeId);
      }
    }
);
  }
synchronized (this) {
    accounts.get(nodeId).balance+=cashToSend;
  }
  accountSetupSucceeded(nodeId);
}","private void setupUpfrontAccount(final String nodeId){
  log.info(""String_Node_Str"" + nodeId);
  ControlConnection cc=mina.getCCM().getCCWithId(nodeId);
  if (cc == null) {
    log.error(""String_Node_Str"" + nodeId);
    return;
  }
  double cashToSend=mina.getCurrencyClient().getOpeningBalance();
  byte[] token;
  try {
    token=mina.getCurrencyClient().withdrawToken(cashToSend,""String_Node_Str"" + nodeId);
  }
 catch (  CurrencyException e) {
    log.error(""String_Node_Str"" + cashToSend + ""String_Node_Str""+ nodeId);
    return;
  }
synchronized (this) {
    Account a=new Account();
    a.addRecentAs(asMap.get(nodeId));
    accounts.put(nodeId,a);
  }
  try {
    TopUp tu=TopUp.newBuilder().setCurrencyToken(ByteString.copyFrom(token)).build();
    cc.sendMessageOrThrow(""String_Node_Str"",tu);
  }
 catch (  IOException e) {
    final byte[] tok=token;
    mina.getExecutor().execute(new CatchingRunnable(){
      public void doRun() throws Exception {
        log.error(""String_Node_Str"");
        mina.getCurrencyClient().depositToken(tok,""String_Node_Str"" + nodeId);
      }
    }
);
  }
synchronized (this) {
    accounts.get(nodeId).balance+=cashToSend;
  }
  accountSetupSucceeded(nodeId);
}",0.9991701244813278
6817,"public GetCCAttempt(String sid,SourceStatus ss){
  super(mina.getExecutor(),mina.getConfig().getMessageTimeout() * 1000,""String_Node_Str"");
  this.sourceStat=ss;
  this.sid=sid;
  this.nodeId=ss.getFromNode().getId();
}","public GetCCAttempt(String sid,SourceStatus ss){
  super(mina.getExecutor(),mina.getConfig().getMessageTimeout() * 1000,""String_Node_Str"");
  this.sourceStat=ss;
  this.sid=sid;
  this.nid=ss.getFromNode().getId();
}",0.8873563218390804
6818,"/** 
 * @syncpriority 200
 */
protected void onFail(){
  log.info(""String_Node_Str"" + nodeId + ""String_Node_Str""+ sid+ ""String_Node_Str"");
synchronized (StreamConnsMgr.this) {
    pendingCons.remove(nodeId);
  }
  mina.getSourceMgr().cachePossiblyDeadSource(sourceStat.getFromNode(),sid);
  mina.getStreamMgr().requestCachedSources(sid);
}","/** 
 * @syncpriority 200
 */
protected void onFail(){
  log.info(""String_Node_Str"" + nid + ""String_Node_Str""+ sid+ ""String_Node_Str"");
synchronized (StreamConnsMgr.this) {
    removePendingConn(sid,nid);
  }
  mina.getSourceMgr().cachePossiblyDeadSource(sourceStat.getFromNode(),sid);
  mina.getStreamMgr().requestCachedSources(sid);
}",0.9481481481481482
6819,"/** 
 * @syncpriority 200
 */
protected void onSuccess(){
synchronized (StreamConnsMgr.this) {
    pendingCons.remove(nodeId);
  }
  ControlConnection cc=mina.getCCM().getCCWithId(nodeId);
  if (cc == null) {
    onFail();
    return;
  }
  log.info(""String_Node_Str"" + cc.getNodeId() + ""String_Node_Str""+ sid);
  startListeningTo(cc,sid,sourceStat);
}","/** 
 * @syncpriority 200
 */
protected void onSuccess(){
synchronized (StreamConnsMgr.this) {
    removePendingConn(sid,nid);
  }
  ControlConnection cc=mina.getCCM().getCCWithId(nid);
  if (cc == null) {
    onFail();
    return;
  }
  log.info(""String_Node_Str"" + cc.getNodeId() + ""String_Node_Str""+ sid);
  startListeningTo(cc,sid,sourceStat);
}",0.94151212553495
6820,"/** 
 * @syncpriority 60
 */
public synchronized void close(String reason){
  if (closing)   return;
  closing=true;
  if (reason != null) {
    try {
      Bye bye=Bye.newBuilder().setReason(reason).build();
      sendMessage(""String_Node_Str"",bye,false);
    }
 catch (    Exception ignore) {
    }
  }
  log.info(""String_Node_Str"" + nodeId + ""String_Node_Str"");
  mina.getExecutor().execute(new KillCPairsRunner());
  if (pingTask != null)   pingTask.cancel(true);
  if (helloAttempt != null)   helloAttempt.cancel();
  if (pingAttempt != null)   pingAttempt.cancel();
  if (closeAttempt != null)   closeAttempt.cancel();
  dataChan.close();
  closed=true;
}","/** 
 * @syncpriority 60
 */
public synchronized void close(String reason){
  if (closing)   return;
  closing=true;
  if (reason != null) {
    try {
      Bye bye=Bye.newBuilder().setReason(reason).build();
      sendMessage(""String_Node_Str"",bye,false);
    }
 catch (    Exception ignore) {
    }
  }
  log.info(""String_Node_Str"" + nodeId + ""String_Node_Str"");
  mina.getExecutor().execute(new DoCloseRunner());
  if (pingTask != null)   pingTask.cancel(true);
  if (helloAttempt != null)   helloAttempt.cancel();
  if (pingAttempt != null)   pingAttempt.cancel();
  if (closeAttempt != null)   closeAttempt.cancel();
  dataChan.close();
  closed=true;
}",0.9886277482941622
6821,"public void sendMessageOrThrow(String msgName,GeneratedMessage msg) throws Exception {
  try {
    sendMessage(msgName,msg,true);
  }
 catch (  Exception e) {
    log.error(this + ""String_Node_Str"",e);
    close();
    throw e;
  }
}","public void sendMessageOrThrow(String msgName,GeneratedMessage msg) throws IOException {
  try {
    sendMessage(msgName,msg,true);
  }
 catch (  IOException e) {
    log.error(this + ""String_Node_Str"",e);
    close();
    throw e;
  }
}",0.9914893617021276
6822,"/** 
 * @syncpriority 60
 */
private synchronized void sendMessage(String msgName,GeneratedMessage msg,boolean checkReady) throws Exception {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  baos.write(msgName.getBytes());
  baos.write(0);
  baos.write(Dlugosz.encode(msg.getSerializedSize()).array());
  msg.writeTo(baos);
  if (checkReady) {
    while (!handshakeComplete)     wait();
  }
  byte[] sendData=baos.toByteArray();
  log.debug(""String_Node_Str"" + msgName + ""String_Node_Str""+ msg+ ""String_Node_Str""+ nodeId.toString()+ ""String_Node_Str""+ sendData.length+ ""String_Node_Str"");
  try {
    dataChan.receiveData(ByteBuffer.wrap(sendData),null);
  }
 catch (  IOException e) {
    if (!closing) {
      if (CodeUtil.javaMajorVersion() >= 6)       throw new IOException(e);
      throw new IOException(""String_Node_Str"" + e.getClass().getSimpleName() + ""String_Node_Str""+ e.getMessage());
    }
  }
}","/** 
 * @syncpriority 60
 */
private synchronized void sendMessage(String msgName,GeneratedMessage msg,boolean checkReady) throws IOException {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  baos.write(msgName.getBytes());
  baos.write(0);
  baos.write(Dlugosz.encode(msg.getSerializedSize()).array());
  msg.writeTo(baos);
  if (checkReady) {
    while (!handshakeComplete) {
      try {
        wait();
      }
 catch (      InterruptedException e) {
        if (CodeUtil.javaMajorVersion() >= 6)         throw new IOException(e);
 else         throw new IOException(""String_Node_Str"");
      }
    }
  }
  byte[] sendData=baos.toByteArray();
  log.debug(""String_Node_Str"" + msgName + ""String_Node_Str""+ msg+ ""String_Node_Str""+ nodeId.toString()+ ""String_Node_Str""+ sendData.length+ ""String_Node_Str"");
  try {
    dataChan.receiveData(ByteBuffer.wrap(sendData),null);
  }
 catch (  IOException e) {
    if (!closing) {
      if (CodeUtil.javaMajorVersion() >= 6)       throw new IOException(e);
      throw new IOException(""String_Node_Str"" + e.getClass().getSimpleName() + ""String_Node_Str""+ e.getMessage());
    }
  }
}",0.8832684824902723
6823,"private void sendMessageImmediate(String msgName,GeneratedMessage msg){
  try {
    sendMessage(msgName,msg,false);
  }
 catch (  Exception e) {
    log.error(this + ""String_Node_Str"",e);
    close();
  }
}","private void sendMessageImmediate(String msgName,GeneratedMessage msg) throws IOException {
  try {
    sendMessage(msgName,msg,false);
  }
 catch (  IOException e) {
    log.error(this + ""String_Node_Str"",e);
    close();
    throw e;
  }
}",0.6532438478747203
6824,"public void completeHandshake(){
  handshakeComplete=true;
  Hello hel=Hello.newBuilder().setNode(mina.getNetMgr().getDescriptorForTalkingTo(nodeDesc,isLocal())).build();
  sendMessageImmediate(""String_Node_Str"",hel);
  lastDataRecvd=new Date();
  startPinging();
  mina.getCCM().notifySuccessfulConnection(this);
  dataChan.setDataReceiver(this);
}","public void completeHandshake(){
  handshakeComplete=true;
  Hello hel=Hello.newBuilder().setNode(mina.getNetMgr().getDescriptorForTalkingTo(nodeDesc,isLocal())).build();
  try {
    sendMessageImmediate(""String_Node_Str"",hel);
  }
 catch (  IOException e) {
    return;
  }
  lastDataRecvd=new Date();
  startPinging();
  mina.getCCM().notifySuccessfulConnection(this);
  dataChan.setDataReceiver(this);
}",0.924503311258278
6825,"/** 
 * @syncpriority 130
 */
public void die(boolean sendStopSource){
  log.debug(this + ""String_Node_Str"");
synchronized (this) {
    if (closing)     return;
    closing=true;
    if (lc != null)     lc.close();
  }
  for (  PageAttempt rpa : reqdPages.values()) {
    rpa.failed();
  }
  if (usefulDataTimeout != null)   usefulDataTimeout.cancel(false);
  if (sendStopSource)   sendMessage(""String_Node_Str"",StopSource.newBuilder().setStreamId(sid).build());
  cc.removeLCPair(this);
  super.die();
}","/** 
 * @syncpriority 130
 */
public void die(boolean sendStopSource){
  log.debug(this + ""String_Node_Str"");
synchronized (this) {
    if (closing)     return;
    closing=true;
    if (lc != null)     lc.close();
  }
  for (  PageAttempt rpa : reqdPages.values()) {
    rpa.failed();
  }
  if (usefulDataTimeout != null)   usefulDataTimeout.cancel(false);
  if (startAttempt != null)   startAttempt.cancel();
  if (sendStopSource)   sendMessage(""String_Node_Str"",StopSource.newBuilder().setStreamId(sid).build());
  cc.removeLCPair(this);
  super.die();
}",0.9500471253534402
6826,"public TrackList(final RobonoboFrame frame,TrackListTableModel model){
  this.model=model;
  this.frame=frame;
  log=LogFactory.getLog(getClass());
  setLayout(new GridLayout(1,0));
  setBorder(BorderFactory.createEmptyBorder(0,1,0,1));
  table=new JXTable(model);
  table.setFont(RoboFont.getFont(13,false));
  table.setRowHeight(21);
  table.setColumnControlVisible(true);
  table.setHorizontalScrollEnabled(true);
  table.setFillsViewportHeight(true);
  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  table.setBackground(Color.WHITE);
  table.setHighlighters(HighlighterFactory.createSimpleStriping());
  table.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      frame.getPlaybackPanel().trackSelectionChanged();
    }
  }
);
  table.getColumn(0).setCellRenderer(new PlaybackStatusRenderer());
  TextRenderer tr=new TextRenderer();
  table.getColumn(1).setCellRenderer(tr);
  table.getColumn(2).setCellRenderer(tr);
  table.getColumn(3).setCellRenderer(tr);
  table.getColumn(4).setCellRenderer(tr);
  table.getColumn(5).setCellRenderer(tr);
  table.getColumn(6).setCellRenderer(tr);
  table.getColumn(7).setCellRenderer(tr);
  table.getColumn(8).setCellRenderer(new TransferStatusCellRenderer());
  table.getColumn(9).setCellRenderer(tr);
  table.getColumn(10).setCellRenderer(tr);
  table.getColumn(11).setCellRenderer(new DateRenderer());
  table.getColumn(12).setCellRenderer(tr);
  table.setSortable(false);
  table.getTableHeader().setDefaultRenderer(new JTableHeader().getDefaultRenderer());
  table.getTableHeader().setFont(RoboFont.getFont(13,false));
  table.setAutoCreateRowSorter(false);
  table.setRowSorter(null);
  scrollPane=new JScrollPane(table);
  if (model.wantScrollEventsEver())   viewportListener=new ViewportListener();
  if (model instanceof GlazedTrackListTableModel) {
    GlazedTrackListTableModel gtltm=(GlazedTrackListTableModel)model;
    if (gtltm.canSort()) {
      TableComparatorChooser<Track> tcc=TableComparatorChooser.install(table,gtltm.getSortedList(),TableComparatorChooser.SINGLE_COLUMN);
      if (viewportListener != null)       tcc.addSortActionListener(viewportListener);
    }
    MatcherEditor<Track> matchEdit=gtltm.getMatcherEditor();
    if (matchEdit != null && viewportListener != null) {
      matchEdit.addMatcherEditorListener(viewportListener);
    }
  }
  TableColumnModelExt cm=(TableColumnModelExt)table.getColumnModel();
  cm.getColumn(0).setPreferredWidth(22);
  cm.getColumn(1).setPreferredWidth(187);
  cm.getColumn(2).setPreferredWidth(137);
  cm.getColumn(3).setPreferredWidth(139);
  cm.getColumn(4).setPreferredWidth(44);
  cm.getColumn(5).setPreferredWidth(40);
  cm.getColumn(6).setPreferredWidth(47);
  cm.getColumn(7).setPreferredWidth(60);
  cm.getColumn(8).setPreferredWidth(160);
  cm.getColumn(9).setPreferredWidth(80);
  cm.getColumn(10).setPreferredWidth(80);
  cm.getColumn(11).setPreferredWidth(140);
  cm.getColumn(12).setPreferredWidth(300);
  int[] hiddenCols=model.hiddenCols();
  List<TableColumn> cols=cm.getColumns(true);
  for (int i=0; i < hiddenCols.length; i++) {
    TableColumnExt colExt=(TableColumnExt)cols.get(hiddenCols[i]);
    colExt.setVisible(false);
  }
  table.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        frame.getPlaybackPanel().playSelectedTracks();
        e.consume();
      }
    }
    public void mousePressed(    MouseEvent e){
      maybeShowPopup(e);
    }
    public void mouseReleased(    MouseEvent e){
      maybeShowPopup(e);
    }
    private void maybeShowPopup(    MouseEvent e){
      if (!e.isPopupTrigger())       return;
      int mouseRow=table.rowAtPoint(e.getPoint());
      boolean alreadySel=false;
      for (      int selRow : table.getSelectedRows()) {
        if (selRow == mouseRow) {
          alreadySel=true;
          break;
        }
      }
      if (!alreadySel)       table.getSelectionModel().addSelectionInterval(mouseRow,mouseRow);
      popupMenu.refresh();
      popupMenu.show(e.getComponent(),e.getX(),e.getY());
    }
  }
);
  if (viewportListener != null)   scrollPane.getViewport().addChangeListener(viewportListener);
  add(scrollPane,""String_Node_Str"");
}","public TrackList(final RobonoboFrame frame,TrackListTableModel model){
  this.model=model;
  this.frame=frame;
  log=LogFactory.getLog(getClass());
  setLayout(new GridLayout(1,0));
  setBorder(BorderFactory.createEmptyBorder(0,1,0,1));
  table=new JXTable(model);
  table.setFont(RoboFont.getFont(13,false));
  table.setRowHeight(21);
  table.setColumnControlVisible(true);
  table.setHorizontalScrollEnabled(true);
  table.setFillsViewportHeight(true);
  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  table.setBackground(Color.WHITE);
  table.setHighlighters(HighlighterFactory.createSimpleStriping());
  table.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      frame.getPlaybackPanel().trackSelectionChanged();
    }
  }
);
  table.getColumn(0).setCellRenderer(new PlaybackStatusRenderer());
  TextRenderer tr=new TextRenderer();
  table.getColumn(1).setCellRenderer(tr);
  table.getColumn(2).setCellRenderer(tr);
  table.getColumn(3).setCellRenderer(tr);
  table.getColumn(4).setCellRenderer(tr);
  table.getColumn(5).setCellRenderer(tr);
  table.getColumn(6).setCellRenderer(tr);
  table.getColumn(7).setCellRenderer(tr);
  table.getColumn(8).setCellRenderer(new TransferStatusCellRenderer());
  table.getColumn(9).setCellRenderer(tr);
  table.getColumn(10).setCellRenderer(tr);
  table.getColumn(11).setCellRenderer(new DateRenderer());
  table.getColumn(12).setCellRenderer(tr);
  table.setSortable(false);
  table.getTableHeader().setDefaultRenderer(new JTableHeader().getDefaultRenderer());
  table.getTableHeader().setFont(RoboFont.getFont(13,false));
  if (javaMajorVersion() >= 6) {
    table.setAutoCreateRowSorter(false);
    table.setRowSorter(null);
  }
  scrollPane=new JScrollPane(table);
  if (model.wantScrollEventsEver())   viewportListener=new ViewportListener();
  if (model instanceof GlazedTrackListTableModel) {
    GlazedTrackListTableModel gtltm=(GlazedTrackListTableModel)model;
    if (gtltm.canSort()) {
      TableComparatorChooser<Track> tcc=TableComparatorChooser.install(table,gtltm.getSortedList(),TableComparatorChooser.SINGLE_COLUMN);
      if (viewportListener != null)       tcc.addSortActionListener(viewportListener);
    }
    MatcherEditor<Track> matchEdit=gtltm.getMatcherEditor();
    if (matchEdit != null && viewportListener != null)     matchEdit.addMatcherEditorListener(viewportListener);
  }
  TableColumnModelExt cm=(TableColumnModelExt)table.getColumnModel();
  cm.getColumn(0).setPreferredWidth(22);
  cm.getColumn(1).setPreferredWidth(187);
  cm.getColumn(2).setPreferredWidth(137);
  cm.getColumn(3).setPreferredWidth(139);
  cm.getColumn(4).setPreferredWidth(44);
  cm.getColumn(5).setPreferredWidth(40);
  cm.getColumn(6).setPreferredWidth(47);
  cm.getColumn(7).setPreferredWidth(60);
  cm.getColumn(8).setPreferredWidth(160);
  cm.getColumn(9).setPreferredWidth(80);
  cm.getColumn(10).setPreferredWidth(80);
  cm.getColumn(11).setPreferredWidth(140);
  cm.getColumn(12).setPreferredWidth(300);
  int[] hiddenCols=model.hiddenCols();
  List<TableColumn> cols=cm.getColumns(true);
  for (int i=0; i < hiddenCols.length; i++) {
    TableColumnExt colExt=(TableColumnExt)cols.get(hiddenCols[i]);
    colExt.setVisible(false);
  }
  table.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        frame.getPlaybackPanel().playSelectedTracks();
        e.consume();
      }
    }
    public void mousePressed(    MouseEvent e){
      maybeShowPopup(e);
    }
    public void mouseReleased(    MouseEvent e){
      maybeShowPopup(e);
    }
    private void maybeShowPopup(    MouseEvent e){
      if (!e.isPopupTrigger())       return;
      int mouseRow=table.rowAtPoint(e.getPoint());
      boolean alreadySel=false;
      for (      int selRow : table.getSelectedRows()) {
        if (selRow == mouseRow) {
          alreadySel=true;
          break;
        }
      }
      if (!alreadySel)       table.getSelectionModel().addSelectionInterval(mouseRow,mouseRow);
      popupMenu.refresh();
      popupMenu.show(e.getComponent(),e.getX(),e.getY());
    }
  }
);
  if (viewportListener != null)   scrollPane.getViewport().addChangeListener(viewportListener);
  add(scrollPane,""String_Node_Str"");
}",0.9941946499715424
6827,"/** 
 * Gives stream ids that have been on recently-updated playlists, one per line (text/plain response type)
 */
@RequestMapping(""String_Node_Str"") public void showStreamIdsOnRecentPlaylists(@RequestParam(value=""String_Node_Str"",required=false) Long maxAgeMs,HttpServletRequest req,HttpServletResponse resp) throws IOException {
  long tenMinsInMs=(long)(10 * 60 * 1000);
  if (maxAgeMs == null || maxAgeMs > tenMinsInMs)   maxAgeMs=tenMinsInMs;
  List<MidasPlaylist> playlists=midas.getRecentPlaylists(maxAgeMs);
  Set<String> streamIds=new HashSet<String>();
  for (  MidasPlaylist pl : playlists) {
    streamIds.addAll(pl.getStreamIds());
  }
  resp.setStatus(HttpServletResponse.SC_OK);
  resp.setContentType(""String_Node_Str"");
  PrintWriter out=new PrintWriter(resp.getOutputStream());
  for (  String sid : streamIds) {
    out.println(sid);
  }
  out.close();
}","/** 
 * Gives stream ids that have been on recently-updated playlists, one per line (text/plain response type)
 */
@RequestMapping(""String_Node_Str"") public void showStreamIdsOnRecentPlaylists(@RequestParam(value=""String_Node_Str"",required=false) Long maxAgeMs,HttpServletRequest req,HttpServletResponse resp) throws IOException {
  long tenMinsInMs=(long)(10 * 60 * 1000);
  if (maxAgeMs == null || maxAgeMs > tenMinsInMs)   maxAgeMs=tenMinsInMs;
  List<MidasPlaylist> playlists=midas.getRecentPlaylists(maxAgeMs);
  Set<String> streamIds=new HashSet<String>();
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(playlists.size()).append(""String_Node_Str"");
  sb.append(req.getRemoteAddr());
  boolean first=true;
  for (  MidasPlaylist pl : playlists) {
    if (first) {
      sb.append(""String_Node_Str"");
      first=false;
    }
 else     sb.append(""String_Node_Str"");
    sb.append(pl.getTitle()).append(""String_Node_Str"").append(pl.getPlaylistId()).append(""String_Node_Str"");
    streamIds.addAll(pl.getStreamIds());
  }
  log.info(sb);
  resp.setStatus(HttpServletResponse.SC_OK);
  resp.setContentType(""String_Node_Str"");
  PrintWriter out=new PrintWriter(resp.getOutputStream());
  for (  String sid : streamIds) {
    out.println(sid);
  }
  out.close();
}",0.8037122969837587
6828,"@Override @SuppressWarnings(""String_Node_Str"") public List<MidasPlaylist> getRecentPlaylists(long maxAgeMs){
  Date maxAge=timeInPast(maxAgeMs);
  String hql=""String_Node_Str"";
  Query q=getSession().createQuery(hql);
  q.setParameter(""String_Node_Str"",maxAge,Hibernate.DATE);
  return q.list();
}","@Override @SuppressWarnings(""String_Node_Str"") public List<MidasPlaylist> getRecentPlaylists(long maxAgeMs){
  Date maxAge=timeInPast(maxAgeMs);
  String hql=""String_Node_Str"";
  Query q=getSession().createQuery(hql);
  q.setParameter(""String_Node_Str"",maxAge,Hibernate.TIMESTAMP);
  return q.list();
}",0.9849749582637728
6829,"public void deletePlaylist(Playlist p){
  final long plId=p.getPlaylistId();
  log.debug(""String_Node_Str"" + plId);
  User me=rbnb.getUserService().getMyUser();
  me.getPlaylistIds().remove(plId);
  boolean firePlaylistUpdate=false;
synchronized (this) {
    p=playlists.get(plId);
    if (p == null)     throw new Errot();
    playlists.get(plId).getOwnerIds().remove(me.getUserId());
    if (p.getOwnerIds().size() > 0)     firePlaylistUpdate=true;
 else     playlists.remove(plId);
  }
  rbnb.getUserService().playlistDeleted(p);
  if (firePlaylistUpdate)   events.firePlaylistChanged(p);
  metadata.deletePlaylist(p,new PlaylistCallback(){
    public void success(    Playlist p){
      log.debug(""String_Node_Str"" + plId);
    }
    public void error(    long playlistId,    Exception ex){
      log.error(""String_Node_Str"" + playlistId,ex);
    }
  }
);
}","public void deletePlaylist(Playlist p){
  final long plId=p.getPlaylistId();
  log.debug(""String_Node_Str"" + plId);
  User me=rbnb.getUserService().getMyUser();
  boolean firePlaylistUpdate=false;
synchronized (this) {
    p=playlists.get(plId);
    if (p == null)     throw new Errot();
    playlists.get(plId).getOwnerIds().remove(me.getUserId());
    if (p.getOwnerIds().size() > 0)     firePlaylistUpdate=true;
 else     playlists.remove(plId);
  }
  rbnb.getUserService().playlistDeleted(p);
  if (firePlaylistUpdate)   events.firePlaylistChanged(p);
  metadata.deletePlaylist(p,new PlaylistCallback(){
    public void success(    Playlist p){
      log.debug(""String_Node_Str"" + plId);
    }
    public void error(    long playlistId,    Exception ex){
      log.error(""String_Node_Str"" + playlistId,ex);
    }
  }
);
}",0.9786476868327402
6830,"public User getMyUser(){
  if (me == null)   return null;
  return getUser(me.getEmail());
}","public User getMyUser(){
  return me;
}",0.5954198473282443
6831,"@Override public void playlistChanged(final Playlist p){
  Long plId=p.getPlaylistId();
  if (frame.getController().getMyUser().getPlaylistIds().contains(plId)) {
    invokeLater(new CatchingRunnable(){
      public void doRun() throws Exception {
        Playlist selP=(getSelectedIndex() < 0) ? null : getModel().getPlaylistAt(getSelectedIndex());
        boolean needReselect=p.equals(selP);
        getModel().remove(p);
        getModel().insertSorted(p);
        if (needReselect) {
          int idx=getModel().getPlaylistIndex(p);
          setSelectedIndex(idx);
        }
      }
    }
);
  }
}","@Override public void playlistChanged(final Playlist p){
  User me=frame.getController().getMyUser();
  if (p.getOwnerIds().contains(me.getUserId())) {
    Long plId=p.getPlaylistId();
    Set<Long> myPlIds=frame.getController().getMyUser().getPlaylistIds();
    if (!myPlIds.contains(plId))     log.error(""String_Node_Str"");
    invokeLater(new CatchingRunnable(){
      public void doRun() throws Exception {
        Playlist selP=(getSelectedIndex() < 0) ? null : getModel().getPlaylistAt(getSelectedIndex());
        boolean needReselect=p.equals(selP);
        getModel().remove(p);
        getModel().insertSorted(p);
        if (needReselect) {
          int idx=getModel().getPlaylistIndex(p);
          setSelectedIndex(idx);
        }
      }
    }
);
  }
}",0.7804522246535376
6832,"public void deleteDownload(String streamId) throws RobonoboException {
  log.info(""String_Node_Str"" + streamId);
  playback.stopIfCurrentlyPlaying(streamId);
  mina.stopReception(streamId);
  db.deleteDownload(streamId);
  if (db.getShare(streamId) == null)   storage.nukePageBuf(streamId);
synchronized (dPriority) {
    dPriority.remove(streamId);
  }
  updatePriorities();
synchronized (this) {
    downloadStreamIds.remove(streamId);
  }
  event.fireTrackUpdated(streamId);
  startMoreDownloads();
}","public void deleteDownload(String streamId) throws RobonoboException {
  log.info(""String_Node_Str"" + streamId);
  playback.stopIfCurrentlyPlaying(streamId);
  mina.stopReception(streamId);
  db.deleteDownload(streamId);
  if (db.getShare(streamId) == null)   storage.nukePageBuf(streamId);
synchronized (dPriority) {
    dPriority.remove(streamId);
  }
  updatePriorities();
synchronized (this) {
    downloadStreamIds.remove(streamId);
  }
  event.fireTrackUpdated(streamId);
  event.fireMyLibraryUpdated();
  startMoreDownloads();
}",0.9595375722543352
6833,"/** 
 * Delete in a batch to avoid starting downloads you're about to delete
 */
public void deleteDownloads(List<String> sids) throws RobonoboException {
  for (  String sid : sids) {
    log.info(""String_Node_Str"" + sid);
    playback.stopIfCurrentlyPlaying(sid);
    mina.stopReception(sid);
    db.deleteDownload(sid);
    if (db.getShare(sid) == null)     storage.nukePageBuf(sid);
synchronized (dPriority) {
      dPriority.remove(sid);
    }
synchronized (this) {
      downloadStreamIds.remove(sid);
    }
    event.fireTrackUpdated(sid);
  }
  updatePriorities();
  startMoreDownloads();
}","/** 
 * Delete in a batch to avoid starting downloads you're about to delete
 */
public void deleteDownloads(List<String> sids) throws RobonoboException {
  for (  String sid : sids) {
    log.info(""String_Node_Str"" + sid);
    playback.stopIfCurrentlyPlaying(sid);
    mina.stopReception(sid);
    db.deleteDownload(sid);
    if (db.getShare(sid) == null)     storage.nukePageBuf(sid);
synchronized (dPriority) {
      dPriority.remove(sid);
    }
synchronized (this) {
      downloadStreamIds.remove(sid);
    }
    event.fireTrackUpdated(sid);
  }
  updatePriorities();
  event.fireMyLibraryUpdated();
  startMoreDownloads();
}",0.9657980456026058
6834,"public void deleteShare(String streamId){
  log.info(""String_Node_Str"" + streamId);
  playback.stopIfCurrentlyPlaying(streamId);
  SharedTrack share=db.getShare(streamId);
  if (share == null)   return;
  stopShare(streamId);
  db.deleteShare(streamId);
  storage.nukePageBuf(streamId);
synchronized (this) {
    shareStreamIds.remove(streamId);
  }
  rbnb.getLibraryService().delFromLibrary(streamId);
  event.fireTrackUpdated(streamId);
}","public void deleteShare(String streamId){
  log.info(""String_Node_Str"" + streamId);
  playback.stopIfCurrentlyPlaying(streamId);
  SharedTrack share=db.getShare(streamId);
  if (share == null)   return;
  stopShare(streamId);
  db.deleteShare(streamId);
  storage.nukePageBuf(streamId);
synchronized (this) {
    shareStreamIds.remove(streamId);
  }
  rbnb.getLibraryService().delFromLibrary(streamId);
  event.fireTrackUpdated(streamId);
  event.fireMyLibraryUpdated();
}",0.9649122807017544
6835,"public static FriendLibraryTableModel create(RobonoboFrame frame,Library lib,Document searchTextDoc){
  List<Track> trax=new ArrayList<Track>();
  for (  Entry<String,Date> e : lib.getTracks().entrySet()) {
    String sid=e.getKey();
    Date added=e.getValue();
    Track t=frame.control.getTrack(sid);
    t.setDateAdded(added);
    trax.add(t);
  }
  EventList<Track> el=GlazedLists.eventList(trax);
  SortedList<Track> sl=new SortedList<Track>(el,new TrackComparator());
  TextComponentMatcherEditor<Track> matchEdit=new TextComponentMatcherEditor<Track>(searchTextDoc,new TrackFilterator());
  matchEdit.setLive(true);
  FilterList<Track> fl=new FilterList<Track>(sl,matchEdit);
  return new FriendLibraryTableModel(frame,lib,el,sl,fl);
}","public static FriendLibraryTableModel create(RobonoboFrame frame,Library lib,Document searchTextDoc){
  Map<String,Date> tMap=new HashMap<String,Date>(lib.getTracks());
  List<Track> trax=new ArrayList<Track>();
  for (  Entry<String,Date> e : tMap.entrySet()) {
    String sid=e.getKey();
    Date added=e.getValue();
    Track t=frame.control.getTrack(sid);
    t.setDateAdded(added);
    trax.add(t);
  }
  EventList<Track> el=GlazedLists.eventList(trax);
  SortedList<Track> sl=new SortedList<Track>(el,new TrackComparator());
  TextComponentMatcherEditor<Track> matchEdit=new TextComponentMatcherEditor<Track>(searchTextDoc,new TrackFilterator());
  matchEdit.setLive(true);
  FilterList<Track> fl=new FilterList<Track>(sl,matchEdit);
  return new FriendLibraryTableModel(frame,lib,el,sl,fl);
}",0.9442282749675746
6836,"public void getOrFetchPlaylist(long playlistId,PlaylistHandler handler){
  inst.getPlaylistService().getOrFetchPlaylist(playlistId,handler);
}","public void getOrFetchPlaylist(long playlistId,PlaylistCallback handler){
  inst.getPlaylistService().getOrFetchPlaylist(playlistId,handler);
}",0.9614035087719298
6837,"public void fetchMyUserConfig(UserConfigHandler handler){
  inst.getUserService().refreshMyUserConfig(handler);
}","public void fetchMyUserConfig(UserConfigCallback handler){
  inst.getUserService().refreshMyUserConfig(handler);
}",0.9515418502202644
6838,"public void createPlaylist(Playlist p,PlaylistHandler handler){
  inst.getPlaylistService().createPlaylist(p,handler);
}","public void createPlaylist(Playlist p,PlaylistCallback handler){
  inst.getPlaylistService().createPlaylist(p,handler);
}",0.9543568464730292
6839,"public abstract void fetchUsers(Collection<Long> userIds,UserHandler handler);","public abstract void fetchUsers(Collection<Long> userIds,UserCallback handler);",0.929936305732484
6840,"/** 
 * @param handler on error, the user id will not be meaningful
 */
public abstract void fetchUserForLogin(String email,String password,UserHandler handler);","/** 
 * @param handler on error, the user id will not be meaningful
 */
public abstract void fetchUserForLogin(String email,String password,UserCallback handler);",0.9659442724458204
6841,"/** 
 * @param handler on success, the passed stream may be null
 */
public abstract void putStream(Stream s,StreamHandler handler);","/** 
 * @param handler on success, the passed stream may be null
 */
public abstract void putStream(Stream s,StreamCallback handler);",0.958490566037736
6842,"public abstract void fetchPlaylist(long playlistId,PlaylistHandler handler);","public abstract void fetchPlaylist(long playlistId,PlaylistCallback handler);",0.9281045751633988
6843,"public abstract void fetchUserConfig(long userId,UserConfigHandler handler);","public abstract void fetchUserConfig(long userId,UserConfigCallback handler);",0.9281045751633988
6844,"public abstract void fetchStreams(Collection<String> sids,StreamHandler handler);","public abstract void fetchStreams(Collection<String> sids,StreamCallback handler);",0.9325153374233128
6845,"public abstract void sharePlaylist(Playlist p,Collection<Long> shareFriendIds,Collection<String> friendEmails,PlaylistHandler handler);","public abstract void sharePlaylist(Playlist p,Collection<Long> shareFriendIds,Collection<String> friendEmails,PlaylistCallback handler);",0.959409594095941
6846,"/** 
 * @param handler on success, the passed library may be null
 */
public abstract void addToLibrary(long userId,Library addedLib,LibraryHandler handler);","/** 
 * @param handler on success, the passed library may be null
 */
public abstract void addToLibrary(long userId,Library addedLib,LibraryCallback handler);",0.9650793650793652
6847,"public abstract void search(String query,int firstResult,SearchHandler handler);","public abstract void search(String query,int firstResult,SearchCallback handler);",0.9316770186335404
6848,"/** 
 * Will remove the logged-in user from the list of playlist owners, or delete the playlist if they are the only owner
 * @param handler on success, the passed playlist will be null
 */
public abstract void deletePlaylist(Playlist p,PlaylistHandler handler);","/** 
 * Will remove the logged-in user from the list of playlist owners, or delete the playlist if they are the only owner
 * @param handler on success, the passed playlist will be null
 */
public abstract void deletePlaylist(Playlist p,PlaylistCallback handler);",0.9714285714285714
6849,"public abstract void fetchPlaylists(Collection<Long> playlistIds,PlaylistHandler handler);","public abstract void fetchPlaylists(Collection<Long> playlistIds,PlaylistCallback handler);",0.9392265193370166
6850,"public abstract void fetchUser(long userId,UserHandler handler);","public abstract void fetchUser(long userId,UserCallback handler);",0.9147286821705426
6851,"/** 
 * @param handler on success, the passed userconfig may be null
 */
public abstract void updateUserConfig(UserConfig uc,UserConfigHandler handler);","/** 
 * @param handler on success, the passed userconfig may be null
 */
public abstract void updateUserConfig(UserConfig uc,UserConfigCallback handler);",0.9639344262295082
6852,"public abstract void fetchLibrary(long userId,Date lastUpdated,LibraryHandler handler);","public abstract void fetchLibrary(long userId,Date lastUpdated,LibraryCallback handler);",0.9371428571428572
6853,"/** 
 * @param handler on success, the passed playlist may be null
 */
public abstract void postPlaylistUpdateToService(String service,long playlistId,String msg,PlaylistHandler handler);","/** 
 * @param handler on success, the passed playlist may be null
 */
public abstract void postPlaylistUpdateToService(String service,long playlistId,String msg,PlaylistCallback handler);",0.9706666666666668
6854,"/** 
 * @param handler on success, the passed library may be null
 */
public abstract void deleteFromLibrary(long userId,Library delLib,LibraryHandler handler);","/** 
 * @param handler on success, the passed library may be null
 */
public abstract void deleteFromLibrary(long userId,Library delLib,LibraryCallback handler);",0.9657320872274144
6855,"public abstract void updatePlaylist(Playlist p,PlaylistHandler handler);","public abstract void updatePlaylist(Playlist p,PlaylistCallback handler);",0.9241379310344828
6856,"@Override protected void runBatch(Collection<String> streamIds) throws Exception {
  if (streamIds.size() == 0)   return;
  Library lib=new Library();
  for (  String sid : streamIds) {
    lib.getTracks().put(sid,null);
  }
  User me=rbnb.getUserService().getMyUser();
  metadata.deleteFromLibrary(me.getUserId(),lib,new LibraryHandler(){
    public void success(    Library l){
      log.debug(""String_Node_Str"");
    }
    public void error(    long userId,    Exception e){
      log.error(""String_Node_Str"",e);
    }
  }
);
}","@Override protected void runBatch(Collection<String> streamIds) throws Exception {
  if (streamIds.size() == 0)   return;
  Library lib=new Library();
  for (  String sid : streamIds) {
    lib.getTracks().put(sid,null);
  }
  User me=rbnb.getUserService().getMyUser();
  metadata.deleteFromLibrary(me.getUserId(),lib,new LibraryCallback(){
    public void success(    Library l){
      log.debug(""String_Node_Str"");
    }
    public void error(    long userId,    Exception e){
      log.error(""String_Node_Str"",e);
    }
  }
);
}",0.9858623939679548
6857,"public void sharePlaylist(final Playlist p,final Set<Long> friendIds,Set<String> emails) throws IOException, RobonoboException {
  metadata.sharePlaylist(p,friendIds,emails,new PlaylistHandler(){
    public void success(    Playlist newP){
      log.debug(""String_Node_Str"" + p.getPlaylistId());
synchronized (PlaylistService.this) {
        playlists.put(newP.getPlaylistId(),newP);
      }
      rbnb.getUserService().playlistShared(p,friendIds);
    }
    public void error(    long playlistId,    Exception ex){
      log.error(""String_Node_Str"" + playlistId,ex);
    }
  }
);
}","public void sharePlaylist(final Playlist p,final Set<Long> friendIds,Set<String> emails) throws IOException, RobonoboException {
  metadata.sharePlaylist(p,friendIds,emails,new PlaylistCallback(){
    public void success(    Playlist newP){
      log.debug(""String_Node_Str"" + p.getPlaylistId());
synchronized (PlaylistService.this) {
        playlists.put(newP.getPlaylistId(),newP);
      }
      rbnb.getUserService().playlistShared(p,friendIds);
    }
    public void error(    long playlistId,    Exception ex){
      log.error(""String_Node_Str"" + playlistId,ex);
    }
  }
);
}",0.9871244635193132
6858,"public void postPlaylistUpdateToService(final String service,final long playlistId,String msg){
  log.debug(""String_Node_Str"" + playlistId + ""String_Node_Str""+ service);
  metadata.postPlaylistUpdateToService(service,playlistId,msg,new PlaylistHandler(){
    public void success(    Playlist isnull){
      log.debug(""String_Node_Str"" + playlistId + ""String_Node_Str""+ service);
    }
    public void error(    long playlistId,    Exception ex){
      log.error(""String_Node_Str"" + playlistId + ""String_Node_Str""+ service,ex);
    }
  }
);
}","public void postPlaylistUpdateToService(final String service,final long playlistId,String msg){
  log.debug(""String_Node_Str"" + playlistId + ""String_Node_Str""+ service);
  metadata.postPlaylistUpdateToService(service,playlistId,msg,new PlaylistCallback(){
    public void success(    Playlist isnull){
      log.debug(""String_Node_Str"" + playlistId + ""String_Node_Str""+ service);
    }
    public void error(    long playlistId,    Exception ex){
      log.error(""String_Node_Str"" + playlistId + ""String_Node_Str""+ service,ex);
    }
  }
);
}",0.9861495844875346
6859,"public void updatePlaylist(Playlist p){
  log.debug(""String_Node_Str"" + p.getPlaylistId());
synchronized (this) {
    Playlist oldP=playlists.get(p.getPlaylistId());
    if (oldP != null && myPlaylistIdsByTitle.containsKey(oldP.getTitle()) && !oldP.getTitle().equals(p.getTitle())) {
      myPlaylistIdsByTitle.remove(oldP.getTitle());
      myPlaylistIdsByTitle.put(p.getTitle(),p.getPlaylistId());
    }
    playlists.put(p.getPlaylistId(),p);
  }
  metadata.updatePlaylist(p,new PlaylistHandler(){
    public void success(    Playlist newP){
      log.info(""String_Node_Str"" + newP.getPlaylistId() + ""String_Node_Str"");
    }
    public void error(    long playlistId,    Exception ex){
      log.error(""String_Node_Str"" + playlistId,ex);
    }
  }
);
}","public void updatePlaylist(Playlist p){
  log.debug(""String_Node_Str"" + p.getPlaylistId());
synchronized (this) {
    Playlist oldP=playlists.get(p.getPlaylistId());
    if (oldP != null && myPlaylistIdsByTitle.containsKey(oldP.getTitle()) && !oldP.getTitle().equals(p.getTitle())) {
      myPlaylistIdsByTitle.remove(oldP.getTitle());
      myPlaylistIdsByTitle.put(p.getTitle(),p.getPlaylistId());
    }
    playlists.put(p.getPlaylistId(),p);
  }
  metadata.updatePlaylist(p,new PlaylistCallback(){
    public void success(    Playlist newP){
      log.info(""String_Node_Str"" + newP.getPlaylistId() + ""String_Node_Str"");
    }
    public void error(    long playlistId,    Exception ex){
      log.error(""String_Node_Str"" + playlistId,ex);
    }
  }
);
}",0.9900859220092532
6860,"/** 
 * The handler will be called back with the updated playlist, which will have a playlist id set, or else with an errot
 */
public void createPlaylist(Playlist p,final PlaylistHandler handler){
  log.debug(""String_Node_Str"" + p.getTitle());
  metadata.updatePlaylist(p,new PlaylistHandler(){
    public void success(    Playlist newP){
      log.debug(""String_Node_Str"" + newP.getPlaylistId());
synchronized (PlaylistService.this) {
        playlists.put(newP.getPlaylistId(),newP);
        myPlaylistIdsByTitle.put(newP.getTitle(),newP.getPlaylistId());
      }
      rbnb.getUserService().playlistCreated(newP);
      events.firePlaylistChanged(newP);
      if (handler != null)       handler.success(newP);
    }
    public void error(    long playlistId,    Exception ex){
      log.error(""String_Node_Str"",ex);
      if (handler != null)       handler.error(playlistId,ex);
    }
  }
);
}","/** 
 * The handler will be called back with the updated playlist, which will have a playlist id set, or else with an errot
 */
public void createPlaylist(Playlist p,final PlaylistCallback handler){
  log.debug(""String_Node_Str"" + p.getTitle());
  metadata.updatePlaylist(p,new PlaylistCallback(){
    public void success(    Playlist newP){
      log.debug(""String_Node_Str"" + newP.getPlaylistId());
synchronized (PlaylistService.this) {
        playlists.put(newP.getPlaylistId(),newP);
        myPlaylistIdsByTitle.put(newP.getTitle(),newP.getPlaylistId());
      }
      rbnb.getUserService().playlistCreated(newP);
      events.firePlaylistChanged(newP);
      if (handler != null)       handler.success(newP);
    }
    public void error(    long playlistId,    Exception ex){
      log.error(""String_Node_Str"",ex);
      if (handler != null)       handler.error(playlistId,ex);
    }
  }
);
}",0.9832962138084632
6861,"public void deletePlaylist(Playlist p){
  final long plId=p.getPlaylistId();
  log.debug(""String_Node_Str"" + plId);
  User me=rbnb.getUserService().getMyUser();
  me.getPlaylistIds().remove(plId);
  boolean firePlaylistUpdate=false;
synchronized (this) {
    p=playlists.get(plId);
    if (p == null)     throw new Errot();
    playlists.get(plId).getOwnerIds().remove(me.getUserId());
    if (p.getOwnerIds().size() > 0)     firePlaylistUpdate=true;
 else     playlists.remove(plId);
  }
  rbnb.getUserService().playlistDeleted(p);
  if (firePlaylistUpdate)   events.firePlaylistChanged(p);
  metadata.deletePlaylist(p,new PlaylistHandler(){
    public void success(    Playlist p){
      log.debug(""String_Node_Str"" + plId);
    }
    public void error(    long playlistId,    Exception ex){
      log.error(""String_Node_Str"" + playlistId,ex);
    }
  }
);
}","public void deletePlaylist(Playlist p){
  final long plId=p.getPlaylistId();
  log.debug(""String_Node_Str"" + plId);
  User me=rbnb.getUserService().getMyUser();
  me.getPlaylistIds().remove(plId);
  boolean firePlaylistUpdate=false;
synchronized (this) {
    p=playlists.get(plId);
    if (p == null)     throw new Errot();
    playlists.get(plId).getOwnerIds().remove(me.getUserId());
    if (p.getOwnerIds().size() > 0)     firePlaylistUpdate=true;
 else     playlists.remove(plId);
  }
  rbnb.getUserService().playlistDeleted(p);
  if (firePlaylistUpdate)   events.firePlaylistChanged(p);
  metadata.deletePlaylist(p,new PlaylistCallback(){
    public void success(    Playlist p){
      log.debug(""String_Node_Str"" + plId);
    }
    public void error(    long playlistId,    Exception ex){
      log.error(""String_Node_Str"" + playlistId,ex);
    }
  }
);
}",0.991284137129576
6862,"public void getOrFetchPlaylist(long playlistId,final PlaylistHandler handler){
  Playlist p=getExistingPlaylist(playlistId);
  if (p != null) {
    handler.success(p);
    return;
  }
  metadata.fetchPlaylist(playlistId,new PlaylistHandler(){
    public void success(    Playlist p){
synchronized (PlaylistService.this) {
        playlists.put(p.getPlaylistId(),p);
      }
      handler.success(p);
    }
    public void error(    long playlistId,    Exception ex){
      handler.error(playlistId,ex);
    }
  }
);
}","public void getOrFetchPlaylist(long playlistId,final PlaylistCallback handler){
  Playlist p=getExistingPlaylist(playlistId);
  if (p != null) {
    handler.success(p);
    return;
  }
  metadata.fetchPlaylist(playlistId,new PlaylistCallback(){
    public void success(    Playlist p){
synchronized (PlaylistService.this) {
        playlists.put(p.getPlaylistId(),p);
      }
      handler.success(p);
    }
    public void error(    long playlistId,    Exception ex){
      handler.error(playlistId,ex);
    }
  }
);
}",0.971042471042471
6863,"/** 
 * Fetches metadata from our remote metadata service. Returns immediately - if you want to be informed when the stream has been fetched, pass in a handler
 */
public void fetchStreams(Collection<String> sids,StreamHandler handler){
  List<String> lookupSids=new ArrayList<String>();
  for (  String sid : sids) {
    Stream s=getKnownStream(sid);
    if (s == null)     lookupSids.add(sid);
 else     if (handler != null)     handler.success(s);
  }
  if (lookupSids.size() > 0)   metadata.fetchStreams(lookupSids,new AddToDbHandler(handler));
}","/** 
 * Fetches metadata from our remote metadata service. Returns immediately - if you want to be informed when the stream has been fetched, pass in a handler
 */
public void fetchStreams(Collection<String> sids,StreamCallback handler){
  List<String> lookupSids=new ArrayList<String>();
  for (  String sid : sids) {
    Stream s=getKnownStream(sid);
    if (s == null)     lookupSids.add(sid);
 else     if (handler != null)     handler.success(s);
  }
  if (lookupSids.size() > 0)   metadata.fetchStreams(lookupSids,new AddToDbHandler(handler));
}",0.9863760217983653
6864,"public AddToDbHandler(StreamHandler onwardHandler){
  this.onwardHandler=onwardHandler;
}","public AddToDbHandler(StreamCallback onwardHandler){
  this.onwardHandler=onwardHandler;
}",0.9385474860335196
6865,"/** 
 * Attempts to login with the supplied details. This method returns immediately - to know the result, add a LoginListener before you call this
 */
public void login(String email,String password){
  inst.getUserService().login(email,password);
}","/** 
 * Attempts to login with the supplied details. This method returns immediately - to know the result, add a LoginListener before you call this 
 */
public void login(String email,String password){
  inst.getUserService().login(email,password);
}",0.997995991983968
6866,"/** 
 * @param ms Position in the stream to seek to, as millisecs from stream start
 */
public void seek(long ms){
  inst.getPlaybackService().seek(ms);
}","/** 
 * @param ms Position in the stream to seek to, as millisecs from stream start 
 */
public void seek(long ms){
  inst.getPlaybackService().seek(ms);
}",0.9967637540453076
6867,"/** 
 * For debugging only
 */
public void returnMetadataDbConnection(Connection conn){
  inst.getDbService().returnConnection(conn);
}","/** 
 * For debugging only 
 */
public void returnMetadataDbConnection(Connection conn){
  inst.getDbService().returnConnection(conn);
}",0.996309963099631
6868,"/** 
 * For debugging only
 */
public void returnPageDbConnection(Connection conn) throws SQLException {
  inst.getStorageService().returnPageDbConnection(conn);
}","/** 
 * For debugging only 
 */
public void returnPageDbConnection(Connection conn) throws SQLException {
  inst.getStorageService().returnPageDbConnection(conn);
}",0.9969418960244648
6869,"/** 
 * Spawns off a thread to download any tracks that are not already being downloaded or shared - returns immediately
 */
public void spawnNecessaryDownloads(final Collection<String> streamIds){
  getExecutor().execute(new CatchingRunnable(){
    public void doRun() throws Exception {
      for (      String sid : streamIds) {
        Track t=getTrack(sid);
        if (t instanceof CloudTrack)         addDownload(sid);
      }
    }
  }
);
}","/** 
 * Spawns off a thread to download any tracks that are not already being downloaded or shared - returns immediately 
 */
public void spawnNecessaryDownloads(final Collection<String> streamIds){
  getExecutor().execute(new CatchingRunnable(){
    public void doRun() throws Exception {
      for (      String sid : streamIds) {
        Track t=getTrack(sid);
        if (t instanceof CloudTrack)         addDownload(sid);
      }
    }
  }
);
}",0.9988851727982164
6870,"/** 
 * Download must already be added
 */
public void startDownload(String streamId) throws RobonoboException {
  try {
    inst.getDownloadService().startDownload(streamId);
  }
 catch (  Exception e) {
    throw new RobonoboException(e);
  }
}","/** 
 * Download must already be added 
 */
public void startDownload(String streamId) throws RobonoboException {
  try {
    inst.getDownloadService().startDownload(streamId);
  }
 catch (  Exception e) {
    throw new RobonoboException(e);
  }
}",0.9979716024340772
6871,"/** 
 * For debugging only
 */
public Connection getPageDbConnection() throws SQLException {
  return inst.getStorageService().getPageDbConnection();
}","/** 
 * For debugging only 
 */
public Connection getPageDbConnection() throws SQLException {
  return inst.getStorageService().getPageDbConnection();
}",0.9966996699669968
6872,"/** 
 * For debugging only
 */
public Connection getMetadataDbConnection() throws SQLException {
  return inst.getDbService().getConnection();
}","/** 
 * For debugging only 
 */
public Connection getMetadataDbConnection() throws SQLException {
  return inst.getDbService().getConnection();
}",0.9965397923875432
6873,"/** 
 * @param streamId
 * @return
 */
public Set<String> getSources(String streamId){
  return inst.getMina().getSources(streamId);
}","/** 
 * @param streamId
 * @return 
 */
public Set<String> getSources(String streamId){
  return inst.getMina().getSources(streamId);
}",0.9962825278810408
6874,"private void setTrackPosition(long positionMs,boolean viaDrag){
  if (dragging && !viaDrag)   return;
  trackPositionMs=positionMs;
  String newSliderText=timeLblFromMs(positionMs);
  if (newSliderText.equals(getSliderText()))   return;
  int thumbPos=(int)((getMaximum() - SLIDER_OPAQUE_WIDTH) * ((float)positionMs / trackLengthMs));
  setSliderText(newSliderText);
  long msLeft=trackLengthMs - trackPositionMs;
  setStartText(""String_Node_Str"" + timeLblFromMs(msLeft));
  setThumbPosition(thumbPos);
  log.debug(""String_Node_Str"" + positionMs);
  doRepaint();
}","private void setTrackPosition(long positionMs,boolean viaDrag){
  if (dragging && !viaDrag)   return;
  trackPositionMs=positionMs;
  String newSliderText=timeLblFromMs(positionMs);
  if (newSliderText.equals(getSliderText()))   return;
  int thumbPos=(int)((getMaximum() - SLIDER_OPAQUE_WIDTH) * ((float)positionMs / trackLengthMs));
  setSliderText(newSliderText);
  long msLeft=trackLengthMs - trackPositionMs;
  setStartText(""String_Node_Str"" + timeLblFromMs(msLeft));
  setThumbPosition(thumbPos);
  doRepaint();
}",0.951061865189289
6875,"protected void add(final Collection<Track> trax,final boolean fireUpdate){
  try {
    runOnUiThread(new CatchingRunnable(){
      public void doRun() throws Exception {
        ContiguousBlock cb=new ContiguousBlock();
synchronized (FreeformTrackListTableModel.this) {
          for (          Track t : trax) {
            int idx=doAdd(t);
            if (idx >= 0)             cb.add(idx);
          }
        }
        if (fireUpdate) {
          int[] block;
          while ((block=cb.getNextBlock()) != null) {
            fireTableRowsInserted(block[0],block[1]);
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
  }
}","protected void add(final Collection<Track> trax,final boolean fireUpdate){
  try {
    runOnUiThread(new CatchingRunnable(){
      public void doRun() throws Exception {
        ContiguousBlockList cb=new ContiguousBlockList();
synchronized (FreeformTrackListTableModel.this) {
          for (          Track t : trax) {
            int idx=doAdd(t);
            if (idx >= 0)             cb.add(idx);
          }
        }
        if (fireUpdate) {
          int[] block;
          while ((block=cb.getNextBlock()) != null) {
            fireTableRowsInserted(block[0],block[1]);
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
  }
}",0.9941520467836256
6876,"protected void remove(final Collection<Track> trax,final boolean fireEvent){
  try {
    runOnUiThread(new CatchingRunnable(){
      public void doRun() throws Exception {
        ContiguousBlock cb=new ContiguousBlock();
synchronized (FreeformTrackListTableModel.this) {
          for (          Track t : trax) {
            int idx=doRemove(t);
            if (idx >= 0)             cb.add(idx);
          }
        }
        int[] block;
        if (fireEvent) {
          while ((block=cb.getNextBlock()) != null) {
            fireTableRowsDeleted(block[0],block[1]);
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
  }
}","protected void remove(final Collection<Track> trax,final boolean fireEvent){
  try {
    runOnUiThread(new CatchingRunnable(){
      public void doRun() throws Exception {
        ContiguousBlockList cb=new ContiguousBlockList();
synchronized (FreeformTrackListTableModel.this) {
          for (          Track t : trax) {
            int idx=doRemove(t);
            if (idx >= 0)             cb.add(idx);
          }
        }
        int[] block;
        if (fireEvent) {
          while ((block=cb.getNextBlock()) != null) {
            fireTableRowsDeleted(block[0],block[1]);
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
  }
}",0.994160583941606
6877,"public void doRun() throws Exception {
  ContiguousBlock cb=new ContiguousBlock();
synchronized (FreeformTrackListTableModel.this) {
    for (    Track t : trax) {
      int idx=doRemove(t);
      if (idx >= 0)       cb.add(idx);
    }
  }
  int[] block;
  if (fireEvent) {
    while ((block=cb.getNextBlock()) != null) {
      fireTableRowsDeleted(block[0],block[1]);
    }
  }
}","public void doRun() throws Exception {
  ContiguousBlockList cb=new ContiguousBlockList();
synchronized (FreeformTrackListTableModel.this) {
    for (    Track t : trax) {
      int idx=doRemove(t);
      if (idx >= 0)       cb.add(idx);
    }
  }
  int[] block;
  if (fireEvent) {
    while ((block=cb.getNextBlock()) != null) {
      fireTableRowsDeleted(block[0],block[1]);
    }
  }
}",0.9895833333333334
6878,"public TabPanel(){
  double[][] cellSizen={{10,300,TableLayout.FILL},{TableLayout.FILL}};
  setLayout(new TableLayout(cellSizen));
  JPanel innerP=new JPanel();
  innerP.setLayout(new BoxLayout(innerP,BoxLayout.Y_AXIS));
  innerP.add(Box.createVerticalStrut(5));
  TrackListSearchPanel sp=new TrackListSearchPanel(frame,trackList,""String_Node_Str"",searchTextDoc);
  sp.setAlignmentX(Component.LEFT_ALIGNMENT);
  innerP.add(sp);
  add(innerP,""String_Node_Str"");
}","public TabPanel(){
  double[][] cellSizen={{10,400,TableLayout.FILL},{TableLayout.FILL}};
  setLayout(new TableLayout(cellSizen));
  JPanel innerP=new JPanel();
  innerP.setLayout(new BoxLayout(innerP,BoxLayout.Y_AXIS));
  innerP.add(Box.createVerticalStrut(5));
  searchPanel=new TrackListSearchPanel(frame,trackList,""String_Node_Str"",searchTextDoc);
  searchPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE,30));
  searchPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
  innerP.add(searchPanel);
  add(innerP,""String_Node_Str"");
}",0.7843530591775326
6879,"public void selectContentPanel(String name){
  cpHolder.selectContentPanel(name);
  playbackPanel.trackListPanelChanged();
}","public void selectContentPanel(String name){
  ContentPanel cp=cpHolder.getContentPanel(name);
  if (cp != null) {
    cpHolder.selectContentPanel(name);
    playbackPanel.trackListPanelChanged();
    final JComponent toFocus=cp.defaultComponent();
    if (toFocus != null) {
      GuiUtil.runOnUiThread(new CatchingRunnable(){
        public void doRun() throws Exception {
          toFocus.requestFocusInWindow();
        }
      }
);
    }
  }
}",0.4153577661431064
6880,"public TabPanel(){
  double[][] cellSizen={{10,300,100,300,TableLayout.FILL},{TableLayout.FILL}};
  setLayout(new TableLayout(cellSizen));
  JPanel lPanel=new JPanel();
  lPanel.setLayout(new BoxLayout(lPanel,BoxLayout.Y_AXIS));
  lPanel.add(Box.createVerticalStrut(5));
  TrackListSearchPanel sp=new TrackListSearchPanel(frame,trackList,""String_Node_Str"",searchDoc);
  sp.setAlignmentX(Component.LEFT_ALIGNMENT);
  lPanel.add(sp);
  lPanel.add(Box.createVerticalStrut(15));
  RLabel optsLbl=new RLabel16B(""String_Node_Str"");
  optsLbl.setAlignmentX(Component.LEFT_ALIGNMENT);
  lPanel.add(optsLbl);
  lPanel.add(Box.createVerticalStrut(5));
  shareLibCheckBox=new RCheckBox(""String_Node_Str"");
  shareLibCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final boolean sel=shareLibCheckBox.isSelected();
      frame.getController().getExecutor().execute(new CatchingRunnable(){
        public void doRun() throws Exception {
          frame.getController().saveUserConfigItem(""String_Node_Str"",sel ? ""String_Node_Str"" : ""String_Node_Str"");
        }
      }
);
    }
  }
);
  shareLibCheckBox.setAlignmentX(Component.LEFT_ALIGNMENT);
  shareLibCheckBox.setSelected(false);
  shareLibCheckBox.setEnabled(false);
  lPanel.add(shareLibCheckBox);
  add(lPanel,""String_Node_Str"");
  JPanel rPanel=new JPanel();
  rPanel.setLayout(new BoxLayout(rPanel,BoxLayout.Y_AXIS));
  rPanel.add(Box.createVerticalStrut(5));
  addLbl=new RLabel16B(""String_Node_Str"");
  rPanel.add(addLbl);
  rPanel.add(Box.createVerticalStrut(10));
  RButton shareFilesBtn=new RGlassButton(""String_Node_Str"");
  shareFilesBtn.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      frame.showAddSharesDialog();
    }
  }
);
  shareFilesBtn.setMaximumSize(new Dimension(200,30));
  rPanel.add(shareFilesBtn);
  rPanel.add(Box.createVerticalStrut(10));
  if (Platform.getPlatform().iTunesAvailable()) {
    RButton shareITunesBtn=new RGlassButton(""String_Node_Str"");
    shareITunesBtn.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        frame.importITunes();
      }
    }
);
    shareITunesBtn.setMaximumSize(new Dimension(200,30));
    rPanel.add(shareITunesBtn);
  }
  add(rPanel,""String_Node_Str"");
  onStartup();
}","public TabPanel(){
  double[][] cellSizen={{10,400,TableLayout.FILL,200,70},{TableLayout.FILL}};
  setLayout(new TableLayout(cellSizen));
  JPanel lPanel=new JPanel();
  lPanel.setLayout(new BoxLayout(lPanel,BoxLayout.Y_AXIS));
  lPanel.add(Box.createVerticalStrut(5));
  searchPanel=new TrackListSearchPanel(frame,trackList,""String_Node_Str"",searchDoc);
  searchPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE,30));
  searchPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
  lPanel.add(searchPanel);
  lPanel.add(Box.createVerticalStrut(15));
  RLabel optsLbl=new RLabel16B(""String_Node_Str"");
  optsLbl.setAlignmentX(Component.LEFT_ALIGNMENT);
  lPanel.add(optsLbl);
  lPanel.add(Box.createVerticalStrut(5));
  shareLibCheckBox=new RCheckBox(""String_Node_Str"");
  shareLibCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final boolean sel=shareLibCheckBox.isSelected();
      frame.getController().getExecutor().execute(new CatchingRunnable(){
        public void doRun() throws Exception {
          frame.getController().saveUserConfigItem(""String_Node_Str"",sel ? ""String_Node_Str"" : ""String_Node_Str"");
        }
      }
);
    }
  }
);
  shareLibCheckBox.setAlignmentX(Component.LEFT_ALIGNMENT);
  shareLibCheckBox.setSelected(false);
  shareLibCheckBox.setEnabled(false);
  lPanel.add(shareLibCheckBox);
  add(lPanel,""String_Node_Str"");
  JPanel rPanel=new JPanel();
  rPanel.setLayout(new BoxLayout(rPanel,BoxLayout.Y_AXIS));
  rPanel.add(Box.createVerticalStrut(10));
  addLbl=new RLabel16B(""String_Node_Str"");
  rPanel.add(addLbl);
  rPanel.add(Box.createVerticalStrut(10));
  RButton shareFilesBtn=new RGlassButton(""String_Node_Str"");
  shareFilesBtn.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      frame.showAddSharesDialog();
    }
  }
);
  shareFilesBtn.setMaximumSize(new Dimension(200,30));
  rPanel.add(shareFilesBtn);
  rPanel.add(Box.createVerticalStrut(10));
  if (Platform.getPlatform().iTunesAvailable()) {
    RButton shareITunesBtn=new RGlassButton(""String_Node_Str"");
    shareITunesBtn.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        frame.importITunes();
      }
    }
);
    shareITunesBtn.setMaximumSize(new Dimension(200,30));
    rPanel.add(shareITunesBtn);
  }
  add(rPanel,""String_Node_Str"");
  onStartup();
}",0.96986301369863
6881,"public TrackListSearchPanel(RobonoboFrame frame,TrackList t,String lblName,Document searchDoc){
  this.frame=frame;
  this.trackList=t;
  setLayout(new BoxLayout(this,BoxLayout.X_AXIS));
  RLabel searchLbl=new RLabel16B(""String_Node_Str"" + lblName);
  add(searchLbl);
  add(Box.createHorizontalStrut(5));
  searchField=new RTextField(searchDoc,""String_Node_Str"",50);
  searchField.setMaximumSize(new Dimension(Integer.MAX_VALUE,30));
  add(searchField);
}","public TrackListSearchPanel(RobonoboFrame frame,TrackList t,String lblName,Document searchDoc){
  this.frame=frame;
  this.trackList=t;
  setLayout(new BoxLayout(this,BoxLayout.X_AXIS));
  RLabel searchLbl=new RLabel16B(""String_Node_Str"" + lblName);
  add(searchLbl);
  add(Box.createHorizontalStrut(10));
  searchField=new RTextField(searchDoc,""String_Node_Str"",50);
  searchField.setMaximumSize(new Dimension(Integer.MAX_VALUE,30));
  add(searchField);
}",0.9967069154774972
6882,"public void deleteDownload(String streamId) throws RobonoboException {
  log.info(""String_Node_Str"" + streamId);
  playback.stopIfCurrentlyPlaying(streamId);
  mina.stopReception(streamId);
  db.deleteDownload(streamId);
  if (db.getShare(streamId) == null)   storage.nukePageBuf(streamId);
synchronized (dPriority) {
    dPriority.remove(streamId);
  }
  updatePriorities();
synchronized (this) {
    downloadStreamIds.remove(streamId);
  }
  event.fireTrackUpdated(streamId);
  event.fireMyLibraryUpdated();
  startMoreDownloads();
}","public void deleteDownload(String streamId) throws RobonoboException {
  log.info(""String_Node_Str"" + streamId);
  playback.stopForDeletedStream(streamId);
  mina.stopReception(streamId);
  db.deleteDownload(streamId);
  if (db.getShare(streamId) == null)   storage.nukePageBuf(streamId);
synchronized (dPriority) {
    dPriority.remove(streamId);
  }
  updatePriorities();
synchronized (this) {
    downloadStreamIds.remove(streamId);
  }
  event.fireTrackUpdated(streamId);
  event.fireMyLibraryUpdated();
  startMoreDownloads();
}",0.9681647940074908
6883,"/** 
 * Delete in a batch to avoid starting downloads you're about to delete
 */
public void deleteDownloads(List<String> sids) throws RobonoboException {
  for (  String sid : sids) {
    log.info(""String_Node_Str"" + sid);
    playback.stopIfCurrentlyPlaying(sid);
    mina.stopReception(sid);
    db.deleteDownload(sid);
    if (db.getShare(sid) == null)     storage.nukePageBuf(sid);
synchronized (dPriority) {
      dPriority.remove(sid);
    }
synchronized (this) {
      downloadStreamIds.remove(sid);
    }
    event.fireTrackUpdated(sid);
  }
  updatePriorities();
  event.fireMyLibraryUpdated();
  startMoreDownloads();
}","/** 
 * Delete in a batch to avoid starting downloads you're about to delete
 */
public void deleteDownloads(List<String> sids) throws RobonoboException {
  for (  String sid : sids) {
    log.info(""String_Node_Str"" + sid);
    playback.stopForDeletedStream(sid);
    mina.stopReception(sid);
    db.deleteDownload(sid);
    if (db.getShare(sid) == null)     storage.nukePageBuf(sid);
synchronized (dPriority) {
      dPriority.remove(sid);
    }
synchronized (this) {
      downloadStreamIds.remove(sid);
    }
    event.fireTrackUpdated(sid);
  }
  updatePriorities();
  event.fireMyLibraryUpdated();
  startMoreDownloads();
}",0.972972972972973
6884,"/** 
 * Passing streamId = null is the same as passing the currently playing stream
 */
public synchronized void play(String streamId){
  if (streamId == null)   streamId=currentStreamId;
  if (streamId.equals(currentStreamId) && player != null) {
    try {
      player.play();
      status=Status.Starting;
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"",e);
    }
    tracks.notifyPlayingTrackChange(currentStreamId);
    event.firePlaybackStarted();
    return;
  }
  if (player != null) {
    String stoppedStreamId=currentStreamId;
    player.stop();
    currentStreamId=null;
    player=null;
    event.fireTrackUpdated(stoppedStreamId);
  }
  currentStreamId=streamId;
  Track t=tracks.getTrack(currentStreamId);
  if (t instanceof CloudTrack) {
    try {
      download.addDownload(currentStreamId);
    }
 catch (    RobonoboException e) {
      log.error(""String_Node_Str"",e);
      return;
    }
    t=download.getDownload(currentStreamId);
  }
  if (t instanceof DownloadingTrack) {
    DownloadingTrack d=(DownloadingTrack)t;
    if (d.getDownloadStatus() == DownloadStatus.Paused) {
      try {
        download.startDownload(currentStreamId);
      }
 catch (      RobonoboException e) {
        log.error(""String_Node_Str"",e);
        return;
      }
    }
    download.updatePriorities();
    mina.setStreamVelocity(currentStreamId,StreamVelocity.MaxRate);
    mina.setAllStreamVelocitiesExcept(currentStreamId,StreamVelocity.LowestCost);
  }
  PageBuffer pb=rbnb.getStorageService().getPageBuf(currentStreamId);
  if (pb == null)   throw new Errot();
  status=Status.Buffering;
  event.firePlaybackStarting();
  Stream s=streams.getKnownStream(currentStreamId);
  if (bufferedEnough(s,pb))   startPlaying(s,pb);
 else {
    tracks.notifyPlayingTrackChange(currentStreamId);
    pb.addListener(this);
  }
}","/** 
 * Passing streamId = null is the same as passing the currently playing stream 
 */
public synchronized void play(String streamId){
  if (streamId == null)   streamId=currentStreamId;
  if (streamId.equals(currentStreamId) && player != null) {
    try {
      player.play();
      status=Status.Starting;
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"",e);
    }
    tracks.notifyPlayingTrackChange(currentStreamId);
    event.firePlaybackStarted();
    return;
  }
  if (player != null) {
    String stoppedStreamId=currentStreamId;
    player.stop();
    currentStreamId=null;
    player=null;
    event.fireTrackUpdated(stoppedStreamId);
  }
  currentStreamId=streamId;
  Track t=tracks.getTrack(currentStreamId);
  if (t instanceof CloudTrack) {
    try {
      download.addDownload(currentStreamId);
    }
 catch (    RobonoboException e) {
      log.error(""String_Node_Str"",e);
      return;
    }
    t=download.getDownload(currentStreamId);
  }
  if (t instanceof DownloadingTrack) {
    DownloadingTrack d=(DownloadingTrack)t;
    if (d.getDownloadStatus() == DownloadStatus.Paused) {
      try {
        download.startDownload(currentStreamId);
      }
 catch (      RobonoboException e) {
        log.error(""String_Node_Str"",e);
        return;
      }
    }
    download.updatePriorities();
    mina.setStreamVelocity(currentStreamId,StreamVelocity.MaxRate);
    mina.setAllStreamVelocitiesExcept(currentStreamId,StreamVelocity.LowestCost);
  }
  PageBuffer pb=rbnb.getStorageService().getPageBuf(currentStreamId);
  if (pb == null)   throw new Errot();
  status=Status.Buffering;
  event.firePlaybackStarting();
  Stream s=streams.getKnownStream(currentStreamId);
  if (bufferedEnough(s,pb))   startPlaying(s,pb);
 else {
    tracks.notifyPlayingTrackChange(currentStreamId);
    pb.addListener(this);
  }
}",0.999729070712544
6885,"public void onCompletion(){
synchronized (this) {
    player=null;
    status=Status.Stopped;
  }
  log.debug(""String_Node_Str"");
  String justFinStreamId=currentStreamId;
  tracks.notifyPlayingTrackChange(justFinStreamId);
  event.firePlaybackCompleted();
}","public void onCompletion(){
synchronized (this) {
    player=null;
    status=Status.Stopped;
  }
  log.debug(""String_Node_Str"");
  tracks.notifyPlayingTrackChange(null);
  event.firePlaybackCompleted();
}",0.8682505399568035
6886,"/** 
 * This is called by the audioplayer when it starts playback
 */
@Override public void playbackStarted(){
  if (status == Status.Buffering || status == Status.Starting) {
    log.info(""String_Node_Str"");
    status=Status.Playing;
    event.firePlaybackStarted();
    event.fireTrackUpdated(currentStreamId);
  }
}","/** 
 * This is called by the audioplayer when it starts playback 
 */
@Override public void playbackStarted(){
  if (status == Status.Buffering || status == Status.Starting) {
    log.info(""String_Node_Str"");
    status=Status.Playing;
    event.firePlaybackStarted();
    event.fireTrackUpdated(currentStreamId);
  }
}",0.9984350547730828
6887,"/** 
 * Returns the current stream that is playing/paused, or null if none
 */
public String getCurrentStreamId(){
  return currentStreamId;
}","/** 
 * Returns the current stream that is playing/paused, or null if none 
 */
public String getCurrentStreamId(){
  return currentStreamId;
}",0.9964912280701754
6888,"/** 
 * @param ms Position to seek to, measured from the start of the stream
 */
public synchronized void seek(long ms){
  if (player != null) {
    event.fireSeekStarted();
    try {
      player.seek(ms);
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"",e);
      stop();
    }
 finally {
      event.fireSeekFinished();
    }
  }
}","/** 
 * @param ms Position to seek to, measured from the start of the stream 
 */
public synchronized void seek(long ms){
  if (player != null) {
    event.fireSeekStarted();
    try {
      player.seek(ms);
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"",e);
      stop();
    }
 finally {
      event.fireSeekFinished();
    }
  }
}",0.998589562764457
6889,"/** 
 * Called by the pagebuffer when it receives a page - check to see if we have enough data, and start playing if so
 */
public void gotPage(final PageBuffer pb,long pageNum){
  if (currentStreamId.equals(pb.getStreamId())) {
    Stream s=streams.getKnownStream(currentStreamId);
    if (status == Status.Buffering) {
      if (bufferedEnough(s,pb)) {
        pb.removeListener(this);
        startPlaying(s,pb);
      }
    }
  }
 else {
    pb.removeListener(this);
  }
}","/** 
 * Called by the pagebuffer when it receives a page - check to see if we have enough data, and start playing if so 
 */
public void gotPage(final PageBuffer pb,long pageNum){
  if (currentStreamId.equals(pb.getStreamId())) {
    Stream s=streams.getKnownStream(currentStreamId);
    if (status == Status.Buffering) {
      if (bufferedEnough(s,pb)) {
        pb.removeListener(this);
        startPlaying(s,pb);
      }
    }
  }
 else {
    pb.removeListener(this);
  }
}",0.9989506820566632
6890,"public void stop(){
  String stoppedStreamId;
synchronized (this) {
    if (player != null)     player.stop();
    player=null;
    status=Status.Stopped;
    stoppedStreamId=currentStreamId;
    currentStreamId=null;
  }
  tracks.notifyPlayingTrackChange(stoppedStreamId);
  event.firePlaybackStopped();
}","public void stop(){
synchronized (this) {
    if (player != null)     player.stop();
    player=null;
    status=Status.Stopped;
    currentStreamId=null;
  }
  tracks.notifyPlayingTrackChange(null);
  event.firePlaybackStopped();
}",0.8475836431226765
6891,"public void deleteShare(String streamId){
  log.info(""String_Node_Str"" + streamId);
  playback.stopIfCurrentlyPlaying(streamId);
  SharedTrack share=db.getShare(streamId);
  if (share == null)   return;
  stopShare(streamId);
  db.deleteShare(streamId);
  storage.nukePageBuf(streamId);
synchronized (this) {
    shareStreamIds.remove(streamId);
  }
  rbnb.getLibraryService().delFromLibrary(streamId);
  event.fireTrackUpdated(streamId);
  event.fireMyLibraryUpdated();
}","public void deleteShare(String streamId){
  log.info(""String_Node_Str"" + streamId);
  playback.stopForDeletedStream(streamId);
  SharedTrack share=db.getShare(streamId);
  if (share == null)   return;
  stopShare(streamId);
  db.deleteShare(streamId);
  storage.nukePageBuf(streamId);
synchronized (this) {
    shareStreamIds.remove(streamId);
  }
  rbnb.getLibraryService().delFromLibrary(streamId);
  event.fireTrackUpdated(streamId);
  event.fireMyLibraryUpdated();
}",0.9639065817409768
6892,"@Override public void doRun() throws Exception {
  log.debug(this + ""String_Node_Str"");
  while (true) {
    if (refreshContext) {
      log.debug(this + ""String_Node_Str"");
      context=http.newPreemptiveContext(new HttpHost(midasAuthScope.getHost(),midasAuthScope.getPort()));
      refreshContext=false;
    }
    Request r;
    Params p;
synchronized (MidasClientService.this) {
      if (requests.size() == 0) {
        runningTasks--;
        log.debug(this + ""String_Node_Str"");
        fetchTasks.remove(taskId);
        return;
      }
      r=requests.removeFirst();
      p=r.getNextParams();
      if (p == null)       continue;
      if (r.remaining() > 0) {
        if (fetchOrder == RequestFetchOrder.Serial)         requests.addFirst(r);
 else         requests.addLast(r);
      }
    }
    log.debug(this + ""String_Node_Str"" + p.op+ ""String_Node_Str""+ p.url);
    try {
switch (p.op) {
case Get:
        HttpContext c=context;
      if (p.username != null)       c=http.newPreemptiveContext(new HttpHost(midasAuthScope.getHost(),midasAuthScope.getPort()));
    getFromUrl(c,p.resultBldr,p.url,p.username,p.password);
  break;
case Put:
putToUrl(context,p.sendMsg,p.url,p.resultBldr);
break;
case Delete:
deleteAtUrl(context,p.url);
break;
}
log.debug(this + ""String_Node_Str"" + p.op+ ""String_Node_Str""+ p.url);
if (p.resultBldr == null) r.success(null);
 else r.success(p.resultBldr.build());
}
 catch (Exception e) {
log.debug(this + ""String_Node_Str"" + shortClassName(e.getClass())+ ""String_Node_Str""+ p.op+ ""String_Node_Str""+ p.url+ ""String_Node_Str""+ e.getMessage());
r.error(p,e);
}
}
}","@Override public void doRun() throws Exception {
  log.debug(this + ""String_Node_Str"");
  while (true) {
    if (refreshContext) {
      log.debug(this + ""String_Node_Str"");
      context=http.newPreemptiveContext(new HttpHost(midasAuthScope.getHost(),midasAuthScope.getPort()));
      refreshContext=false;
    }
    Request r;
    Params p;
synchronized (MidasClientService.this) {
      if (requests.size() == 0) {
        runningTasks--;
        log.debug(this + ""String_Node_Str"");
        fetchTasks.remove(taskId);
        return;
      }
      r=requests.removeFirst();
      p=r.getNextParams();
      if (p == null)       continue;
      if (r.remaining() > 0) {
        if (fetchOrder == RequestFetchOrder.Serial)         requests.addFirst(r);
 else         requests.addLast(r);
      }
    }
    log.debug(this + ""String_Node_Str"" + p.op+ ""String_Node_Str""+ p.url);
    try {
switch (p.op) {
case Get:
        HttpContext c=context;
      if (p.username != null)       c=http.newPreemptiveContext(new HttpHost(midasAuthScope.getHost(),midasAuthScope.getPort()));
    getFromUrl(c,p.resultBldr,p.url,p.username,p.password);
  break;
case Put:
putToUrl(context,p.sendMsg,p.url,p.resultBldr);
break;
case Delete:
deleteAtUrl(context,p.url);
break;
}
log.debug(this + ""String_Node_Str"" + p.op+ ""String_Node_Str""+ p.url);
if (p.resultBldr == null) r.success(null);
 else r.success(p.resultBldr.build());
}
 catch (Exception e) {
if (stopped) return;
log.debug(this + ""String_Node_Str"" + shortClassName(e.getClass())+ ""String_Node_Str""+ p.op+ ""String_Node_Str""+ p.url+ ""String_Node_Str""+ e.getMessage());
r.error(p,e);
}
}
}",0.9935165174436554
6893,"@Override public void shutdown() throws Exception {
  executor.shutdownNow();
}","@Override public void shutdown() throws Exception {
  stopped=true;
  executor.shutdownNow();
}",0.9080459770114944
6894,"public static FriendLibraryTableModel create(RobonoboFrame frame,Library lib,Document searchTextDoc){
  Map<String,Date> tMap=new HashMap<String,Date>(lib.getTracks());
  List<Track> trax=new ArrayList<Track>();
  for (  Entry<String,Date> e : tMap.entrySet()) {
    String sid=e.getKey();
    Date added=e.getValue();
    Track t=frame.control.getTrack(sid);
    t.setDateAdded(added);
    trax.add(t);
  }
  EventList<Track> el=GlazedLists.eventList(trax);
  SortedList<Track> sl=new SortedList<Track>(el,new TrackComparator());
  TextComponentMatcherEditor<Track> matchEdit=new TextComponentMatcherEditor<Track>(searchTextDoc,new TrackFilterator());
  matchEdit.setLive(true);
  FilterList<Track> fl=new FilterList<Track>(sl,matchEdit);
  return new FriendLibraryTableModel(frame,lib,el,sl,fl);
}","public static FriendLibraryTableModel create(RobonoboFrame frame,Library lib,Document searchTextDoc){
  Map<String,Date> mapCopy;
  lib.updateLock.lock();
  try {
    mapCopy=new HashMap<String,Date>(lib.getTracks());
  }
  finally {
    lib.updateLock.unlock();
  }
  List<Track> trax=new ArrayList<Track>();
  for (  Entry<String,Date> e : mapCopy.entrySet()) {
    String sid=e.getKey();
    Date added=e.getValue();
    Track t=frame.control.getTrack(sid);
    t.setDateAdded(added);
    trax.add(t);
  }
  EventList<Track> el=GlazedLists.eventList(trax);
  SortedList<Track> sl=new SortedList<Track>(el,new TrackComparator());
  TextComponentMatcherEditor<Track> matchEdit=new TextComponentMatcherEditor<Track>(searchTextDoc,new TrackFilterator());
  matchEdit.setLive(true);
  FilterList<Track> fl=new FilterList<Track>(sl,matchEdit);
  return new FriendLibraryTableModel(frame,lib,el,sl,fl);
}",0.9311359623307828
6895,"public void doRun() throws Exception {
  if (markAllAsSeen)   frame.getController().markAllAsSeen(lib);
  TrackList trackList=frame.getMainPanel().getContentPanel(contentPanelName()).getTrackList();
  if (!(trackList.getModel() instanceof FriendLibraryTableModel))   return;
  FriendLibraryTableModel model=(FriendLibraryTableModel)trackList.getModel();
  model.activate();
  trackList.updateViewport();
}","public void doRun() throws Exception {
  if (markAllAsSeen)   frame.getController().markAllAsSeen(lib);
  TrackList trackList=frame.getMainPanel().getContentPanel(contentPanelName()).getTrackList();
  FriendLibraryTableModel model=(FriendLibraryTableModel)trackList.getModel();
  model.activate();
  trackList.updateViewport();
}",0.8746594005449592
6896,"private void activatePanel(final boolean markAllAsSeen){
  frame.getController().getExecutor().execute(new CatchingRunnable(){
    public void doRun() throws Exception {
      if (markAllAsSeen)       frame.getController().markAllAsSeen(lib);
      TrackList trackList=frame.getMainPanel().getContentPanel(contentPanelName()).getTrackList();
      if (!(trackList.getModel() instanceof FriendLibraryTableModel))       return;
      FriendLibraryTableModel model=(FriendLibraryTableModel)trackList.getModel();
      model.activate();
      trackList.updateViewport();
    }
  }
);
}","private void activatePanel(final boolean markAllAsSeen){
  frame.getController().getExecutor().execute(new CatchingRunnable(){
    public void doRun() throws Exception {
      if (markAllAsSeen)       frame.getController().markAllAsSeen(lib);
      TrackList trackList=frame.getMainPanel().getContentPanel(contentPanelName()).getTrackList();
      FriendLibraryTableModel model=(FriendLibraryTableModel)trackList.getModel();
      model.activate();
      trackList.updateViewport();
    }
  }
);
}",0.907235621521336
6897,"@Override public void deleteTracks(List<String> streamIds){
  log.debug(""String_Node_Str"");
  super.deleteTracks(streamIds);
  List<String> dlSids=new ArrayList<String>();
  try {
    for (    String sid : streamIds) {
      Track t=control.getTrack(sid);
      if (t instanceof DownloadingTrack)       dlSids.add(sid);
 else       if (t instanceof SharedTrack)       control.deleteShare(sid);
    }
    control.deleteDownloads(dlSids);
  }
 catch (  RobonoboException ex) {
    log.error(""String_Node_Str"",ex);
  }
  log.debug(""String_Node_Str"");
}","@Override public void deleteTracks(List<String> streamIds){
  log.debug(""String_Node_Str"");
  List<String> dlSids=new ArrayList<String>();
  try {
    for (    String sid : streamIds) {
      Track t=control.getTrack(sid);
      if (t instanceof DownloadingTrack)       dlSids.add(sid);
 else       if (t instanceof SharedTrack)       control.deleteShare(sid);
    }
    control.deleteDownloads(dlSids);
  }
 catch (  RobonoboException ex) {
    log.error(""String_Node_Str"",ex);
  }
  super.deleteTracks(streamIds);
  log.debug(""String_Node_Str"");
}",0.2677595628415301
6898,"public void shutdown(){
  inst.getEventService().removeAllListeners();
  jobRunner.stop();
  inst.shutdown();
}","public void shutdown(){
  inst.getEventService().removeAllListeners();
  inst.shutdown();
}",0.900990099009901
6899,"public void start() throws RobonoboException {
  inst.start();
  jobRunner.start();
}","public void start() throws RobonoboException {
  inst.start();
}",0.8590604026845637
6900,"public PageInfoMgr(String dbPathPrefix){
  connReady=lock.newCondition();
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
  dbUrl=""String_Node_Str"" + dbPathPrefix;
  File dbPropsFile=new File(dbPathPrefix + ""String_Node_Str"");
  if (!dbPropsFile.exists()) {
    log.info(""String_Node_Str"" + dbPathPrefix);
    try {
      Connection conn=getConnection();
      Statement s=conn.createStatement();
      s.executeUpdate(CREATE_PB_PARAMS_SQL);
      s.executeUpdate(CREATE_PAGE_INFO_SQL);
      s.executeUpdate(CREATE_PAGE_INFO_PI_IDX_SQL);
      s.executeUpdate(CREATE_PAGE_INFO_SID_IDX_SQL);
      s.close();
      returnConnection(conn);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
 else   log.info(""String_Node_Str"" + dbPathPrefix);
}","public PageInfoMgr(String dbPathPrefix){
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
  dbUrl=""String_Node_Str"" + dbPathPrefix;
  File dbPropsFile=new File(dbPathPrefix + ""String_Node_Str"");
  if (!dbPropsFile.exists()) {
    log.info(""String_Node_Str"" + dbPathPrefix);
    try {
      Connection conn=getConnection();
      Statement s=conn.createStatement();
      s.executeUpdate(CREATE_PB_PARAMS_SQL);
      s.executeUpdate(CREATE_PAGE_INFO_SQL);
      s.executeUpdate(CREATE_PAGE_INFO_PI_IDX_SQL);
      s.executeUpdate(CREATE_PAGE_INFO_SID_IDX_SQL);
      s.close();
      returnConnection(conn);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
 else   log.info(""String_Node_Str"" + dbPathPrefix);
}",0.9802985074626864
6901,"public Connection getConnection() throws SQLException {
  lock.lock();
  try {
    if (conn == null)     conn=DriverManager.getConnection(dbUrl);
    if (connInUse)     connReady.await();
    connInUse=true;
    return conn;
  }
 catch (  InterruptedException e) {
    throw new SeekInnerCalmException(e);
  }
 finally {
    lock.unlock();
  }
}","public synchronized Connection getConnection() throws SQLException {
  try {
    if (conn == null)     conn=DriverManager.getConnection(dbUrl);
    while (connInUse)     wait();
    connInUse=true;
    return conn;
  }
 catch (  InterruptedException e) {
    log.debug(""String_Node_Str"");
    return null;
  }
}",0.7591463414634146
6902,"public synchronized void returnConnection(Connection conn){
  lock.lock();
  try {
    connInUse=false;
    connReady.signal();
  }
  finally {
    lock.unlock();
  }
}","public synchronized void returnConnection(Connection conn){
  connInUse=false;
  notify();
}",0.676923076923077
6903,"public synchronized void putPageInfo(String streamId,PageInfo pi) throws IOException {
  if (getPageInfo(streamId,pi.getPageNumber()) != null)   return;
  Connection conn=null;
  try {
    conn=getConnection();
    conn.setAutoCommit(false);
    PreparedStatement ps=conn.prepareStatement(PUT_PAGE_INFO_SQL);
    ps.setString(1,streamId);
    ps.setLong(2,pi.getPageNumber());
    ps.setLong(3,pi.getByteOffset());
    ps.setLong(4,pi.getTimeOffset());
    ps.setLong(5,pi.getLength());
    ps.executeUpdate();
    ps.close();
    long lastContigPage=getLastContiguousPage(streamId,conn);
    while ((lastContigPage + 1 == pi.getPageNumber()) || haveGotPage(streamId,lastContigPage + 1,conn)) {
      lastContigPage++;
    }
    ps=conn.prepareStatement(UPDATE_PB_PARAMS_SQL);
    ps.setLong(1,pi.getLength());
    ps.setLong(2,lastContigPage);
    ps.setString(3,streamId);
    ps.executeUpdate();
    ps.close();
    conn.commit();
  }
 catch (  SQLException e) {
    throw new IOException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    if (conn != null) {
      try {
        conn.setAutoCommit(true);
      }
 catch (      SQLException ignore) {
      }
      returnConnection(conn);
    }
  }
}","public void putPageInfo(String streamId,PageInfo pi) throws IOException {
  if (getPageInfo(streamId,pi.getPageNumber()) != null)   return;
  Connection conn=null;
  putPageInfoLock.lock();
  try {
    conn=getConnection();
    conn.setAutoCommit(false);
    PreparedStatement ps=conn.prepareStatement(PUT_PAGE_INFO_SQL);
    ps.setString(1,streamId);
    ps.setLong(2,pi.getPageNumber());
    ps.setLong(3,pi.getByteOffset());
    ps.setLong(4,pi.getTimeOffset());
    ps.setLong(5,pi.getLength());
    ps.executeUpdate();
    ps.close();
    long lastContigPage=getLastContiguousPage(streamId,conn);
    while ((lastContigPage + 1 == pi.getPageNumber()) || haveGotPage(streamId,lastContigPage + 1,conn)) {
      lastContigPage++;
    }
    ps=conn.prepareStatement(UPDATE_PB_PARAMS_SQL);
    ps.setLong(1,pi.getLength());
    ps.setLong(2,lastContigPage);
    ps.setString(3,streamId);
    ps.executeUpdate();
    ps.close();
    conn.commit();
  }
 catch (  SQLException e) {
    throw new IOException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    putPageInfoLock.unlock();
    if (conn != null) {
      try {
        conn.setAutoCommit(true);
      }
 catch (      SQLException ignore) {
      }
      returnConnection(conn);
    }
  }
}",0.9719398129320862
6904,"public LeftSidebarTree(TreeModel newModel,RobonoboFrame f){
  super(newModel);
  this.frame=f;
  setMaximumSize(new Dimension(Integer.MAX_VALUE,getMaximumSize().height));
  addTreeExpansionListener(new TreeExpansionListener(){
    public void treeExpanded(    TreeExpansionEvent event){
      updateMaxSize();
      if (selTreePath != null && event.getPath().isDescendant(selTreePath))       setSelectionPath(selTreePath);
    }
    public void treeCollapsed(    TreeExpansionEvent event){
      updateMaxSize();
    }
  }
);
}","public LeftSidebarTree(TreeModel newModel,RobonoboFrame f){
  super(newModel);
  this.frame=f;
  setToggleClickCount(1);
  setMaximumSize(new Dimension(Integer.MAX_VALUE,getMaximumSize().height));
  addTreeExpansionListener(new TreeExpansionListener(){
    public void treeExpanded(    TreeExpansionEvent event){
      updateMaxSize();
      if (selTreePath != null && event.getPath().isDescendant(selTreePath))       setSelectionPath(selTreePath);
    }
    public void treeCollapsed(    TreeExpansionEvent event){
      updateMaxSize();
    }
  }
);
}",0.975925925925926
6905,"void startAllShares() throws IOException, RobonoboException {
  log.debug(""String_Node_Str"");
  String[] arr;
synchronized (this) {
    arr=new String[shareStreamIds.size()];
    shareStreamIds.toArray(arr);
  }
  Set<String> shareSids=new HashSet<String>();
  for (  String streamId : arr) {
    FilePageBuffer pb=storage.getPageBuf(streamId);
    if (pb == null) {
      log.error(""String_Node_Str"" + streamId + ""String_Node_Str"");
      db.deleteShare(streamId);
      continue;
    }
    File file=pb.getFile();
    if (!file.exists() || !file.canRead()) {
      log.error(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ streamId+ ""String_Node_Str"");
synchronized (this) {
        shareStreamIds.remove(streamId);
      }
      continue;
    }
    shareSids.add(streamId);
  }
  getRobonobo().getMina().startBroadcasts(shareSids);
  log.debug(""String_Node_Str"" + shareSids.size() + ""String_Node_Str"");
}","void startAllShares() throws IOException, RobonoboException {
  log.debug(""String_Node_Str"");
  String[] arr;
synchronized (this) {
    arr=new String[shareStreamIds.size()];
    shareStreamIds.toArray(arr);
  }
  Set<String> shareSids=new HashSet<String>();
  for (  String sid : arr) {
    log.debug(""String_Node_Str"" + sid);
    FilePageBuffer pb=storage.getPageBuf(sid);
    if (pb == null) {
      log.error(""String_Node_Str"" + sid + ""String_Node_Str"");
      db.deleteShare(sid);
      continue;
    }
    File file=pb.getFile();
    if (!file.exists() || !file.canRead()) {
      log.error(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ sid+ ""String_Node_Str"");
synchronized (this) {
        shareStreamIds.remove(sid);
      }
      continue;
    }
    shareSids.add(sid);
  }
  getRobonobo().getMina().startBroadcasts(shareSids);
  log.debug(""String_Node_Str"" + shareSids.size() + ""String_Node_Str"");
}",0.4149108589951377
6906,"public PageInfoMgr(String dbPathPrefix){
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
  dbUrl=""String_Node_Str"" + dbPathPrefix;
  File dbPropsFile=new File(dbPathPrefix + ""String_Node_Str"");
  if (!dbPropsFile.exists()) {
    log.info(""String_Node_Str"" + dbPathPrefix);
    try {
      Connection conn=getConnection();
      Statement s=conn.createStatement();
      s.executeUpdate(CREATE_PB_PARAMS_SQL);
      s.close();
      returnConnection(conn);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
 else   log.info(""String_Node_Str"" + dbPathPrefix);
}","public PageInfoMgr(String dbPathPrefix){
  connReady=lock.newCondition();
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
  dbUrl=""String_Node_Str"" + dbPathPrefix;
  File dbPropsFile=new File(dbPathPrefix + ""String_Node_Str"");
  if (!dbPropsFile.exists()) {
    log.info(""String_Node_Str"" + dbPathPrefix);
    try {
      Connection conn=getConnection();
      Statement s=conn.createStatement();
      s.executeUpdate(CREATE_PB_PARAMS_SQL);
      s.executeUpdate(CREATE_PAGE_INFO_SQL);
      s.executeUpdate(CREATE_PAGE_INFO_PI_IDX_SQL);
      s.executeUpdate(CREATE_PAGE_INFO_SID_IDX_SQL);
      s.close();
      returnConnection(conn);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
 else   log.info(""String_Node_Str"" + dbPathPrefix);
}",0.8065573770491803
6907,"public FilePageBuffer createPageBuf(Stream s,File f) throws IOException {
  Connection conn=null;
  String sid=s.getStreamId();
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(getInitStreamSQL(sid));
    ps.executeUpdate();
    ps.close();
    ps=conn.prepareStatement(INSERT_PB_PARAMS_SQL);
    ps.setString(1,sid);
    ps.setLong(2,-1);
    ps.setLong(3,0);
    ps.setLong(4,0);
    ps.setLong(5,-1);
    ps.setString(6,f.getAbsolutePath());
    ps.executeUpdate();
    ps.close();
    FilePageBuffer pb=new FilePageBuffer(sid,f,this);
    return pb;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + sid,e);
    throw new IOException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}","public FilePageBuffer createPageBuf(Stream s,File f) throws IOException {
  Connection conn=null;
  String sid=s.getStreamId();
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(INSERT_PB_PARAMS_SQL);
    ps.setString(1,sid);
    ps.setLong(2,-1);
    ps.setLong(3,0);
    ps.setLong(4,0);
    ps.setLong(5,-1);
    ps.setString(6,f.getAbsolutePath());
    ps.executeUpdate();
    ps.close();
    FilePageBuffer pb=new FilePageBuffer(sid,f,this);
    return pb;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + sid,e);
    throw new IOException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}",0.9377093101138648
6908,"public synchronized Connection getConnection() throws SQLException {
  if (freeConns.size() > 0)   return freeConns.remove(0);
 else {
    log.debug(""String_Node_Str"" + ++numConnsCreated + ""String_Node_Str"");
    return DriverManager.getConnection(dbUrl);
  }
}","public Connection getConnection() throws SQLException {
  lock.lock();
  try {
    if (conn == null)     conn=DriverManager.getConnection(dbUrl);
    if (connInUse)     connReady.await();
    connInUse=true;
    return conn;
  }
 catch (  InterruptedException e) {
    throw new SeekInnerCalmException(e);
  }
 finally {
    lock.unlock();
  }
}",0.3399339933993399
6909,"public void nuke(String streamId){
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(getNukeStreamSQL(streamId));
    ps.executeUpdate();
    ps.close();
    ps=conn.prepareStatement(NUKE_PB_PARAMS_SQL);
    ps.setString(1,streamId);
    ps.executeUpdate();
    ps.close();
    tableNames.remove(streamId);
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}","public void nuke(String streamId){
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(DELETE_PAGE_INFO_SQL);
    ps.setString(1,streamId);
    ps.executeUpdate();
    ps.close();
    ps=conn.prepareStatement(NUKE_PB_PARAMS_SQL);
    ps.setString(1,streamId);
    ps.executeUpdate();
    ps.close();
    tableNames.remove(streamId);
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}",0.94921875
6910,"public boolean haveGotPage(String streamId,long pageNum){
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(getGetPageInfoSQL(streamId,pageNum));
    ResultSet rs=ps.executeQuery();
    boolean result=rs.next();
    ps.close();
    return result;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"",e);
    return false;
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}","private boolean haveGotPage(String streamId,long pageNum,Connection conn) throws SQLException {
  PreparedStatement ps=conn.prepareStatement(GET_PAGE_INFO_SQL);
  ps.setString(1,streamId);
  ps.setLong(2,pageNum);
  ResultSet rs=ps.executeQuery();
  boolean result=rs.next();
  ps.close();
  return result;
}",0.2323759791122715
6911,"public PageInfo getPageInfo(String streamId,long pageNum){
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(getGetPageInfoSQL(streamId,pageNum));
    ResultSet rs=ps.executeQuery();
    if (!rs.next()) {
      ps.close();
      return null;
    }
    PageInfo pi=new PageInfo();
    pi.setPageNumber(rs.getLong(1));
    pi.setByteOffset(rs.getLong(2));
    pi.setTimeOffset(rs.getLong(3));
    pi.setLength(rs.getLong(4));
    ps.close();
    return pi;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}","public PageInfo getPageInfo(String streamId,long pageNum){
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(GET_PAGE_INFO_SQL);
    ps.setString(1,streamId);
    ps.setLong(2,pageNum);
    ResultSet rs=ps.executeQuery();
    if (!rs.next()) {
      ps.close();
      return null;
    }
    PageInfo pi=new PageInfo();
    pi.setPageNumber(rs.getLong(1));
    pi.setByteOffset(rs.getLong(2));
    pi.setTimeOffset(rs.getLong(3));
    pi.setLength(rs.getLong(4));
    ps.close();
    return pi;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}",0.9525200876552228
6912,"public void putAllPageInfo(String streamId,List<PageInfo> pis) throws IOException {
  Connection conn=null;
  try {
    conn=getConnection();
    conn.setAutoCommit(false);
    Statement s=conn.createStatement();
    long bytesRecvd=0;
    long lastPage=-1;
    for (    PageInfo pi : pis) {
      s.addBatch(getInsertPageInfoSQL(streamId,pi.getPageNumber(),pi.getByteOffset(),pi.getTimeOffset(),pi.getLength()));
      bytesRecvd+=pi.getLength();
      if (pi.getPageNumber() > lastPage)       lastPage=pi.getPageNumber();
    }
    s.executeBatch();
    s.close();
    PreparedStatement ps=conn.prepareStatement(SET_PB_PARAMS_SQL);
    ps.setLong(1,pis.size());
    ps.setLong(2,pis.size());
    ps.setLong(3,bytesRecvd);
    ps.setLong(4,lastPage);
    ps.setString(5,streamId);
    ps.executeUpdate();
    ps.close();
    conn.commit();
  }
 catch (  SQLException e) {
    if (conn != null) {
      try {
        conn.rollback();
      }
 catch (      SQLException ignore) {
      }
    }
    throw new IOException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    if (conn != null) {
      try {
        conn.setAutoCommit(true);
      }
 catch (      SQLException ignore) {
      }
      returnConnection(conn);
    }
  }
}","public void putAllPageInfo(String streamId,List<PageInfo> pis) throws IOException {
  Connection conn=null;
  try {
    conn=getConnection();
    conn.setAutoCommit(false);
    long bytesRecvd=0;
    long lastPage=-1;
    PreparedStatement ps=conn.prepareStatement(PUT_PAGE_INFO_SQL);
    for (    PageInfo pi : pis) {
      ps.setString(1,streamId);
      ps.setLong(2,pi.getPageNumber());
      ps.setLong(3,pi.getByteOffset());
      ps.setLong(4,pi.getTimeOffset());
      ps.setLong(5,pi.getLength());
      ps.addBatch();
      bytesRecvd+=pi.getLength();
      if (pi.getPageNumber() > lastPage)       lastPage=pi.getPageNumber();
    }
    ps.executeBatch();
    ps.close();
    ps=conn.prepareStatement(SET_PB_PARAMS_SQL);
    ps.setLong(1,pis.size());
    ps.setLong(2,pis.size());
    ps.setLong(3,bytesRecvd);
    ps.setLong(4,lastPage);
    ps.setString(5,streamId);
    ps.executeUpdate();
    ps.close();
    conn.commit();
  }
 catch (  SQLException e) {
    if (conn != null) {
      try {
        conn.rollback();
      }
 catch (      SQLException ignore) {
      }
    }
    throw new IOException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    if (conn != null) {
      try {
        conn.setAutoCommit(true);
      }
 catch (      SQLException ignore) {
      }
      returnConnection(conn);
    }
  }
}",0.8263239875389408
6913,"public StreamPosition getStreamPosition(String streamId){
  long lastContig=getLastContiguousPage(streamId);
  long firstPageInMap=lastContig + 1;
  long lastPageInMap=lastContig + PAGEMAP_SZ;
  int pageMap=0;
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(getPageMapSQL(streamId,firstPageInMap,lastPageInMap));
    ResultSet rs=ps.executeQuery();
    while (rs.next()) {
      long gotPageNum=rs.getLong(1);
      int toShift=(int)(gotPageNum - firstPageInMap);
      pageMap|=(1 << toShift);
    }
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + streamId,e);
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
  return new StreamPosition(lastContig,pageMap);
}","public StreamPosition getStreamPosition(String streamId){
  int pageMap=0;
  long lastContig=-1;
  Connection conn=null;
  try {
    conn=getConnection();
    lastContig=getLastContiguousPage(streamId,conn);
    long firstPageInMap=lastContig + 1;
    long lastPageInMap=lastContig + PAGEMAP_SZ;
    PreparedStatement ps=conn.prepareStatement(GET_PAGE_MAP_SQL);
    ps.setString(1,streamId);
    ps.setLong(2,firstPageInMap);
    ps.setLong(3,lastPageInMap);
    ResultSet rs=ps.executeQuery();
    while (rs.next()) {
      long gotPageNum=rs.getLong(1);
      int toShift=(int)(gotPageNum - firstPageInMap);
      pageMap|=(1 << toShift);
    }
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + streamId,e);
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
  return new StreamPosition(lastContig,pageMap);
}",0.8269831355402874
6914,"public long getLastContiguousPage(String streamId){
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(GET_LAST_CONTIG_PAGE_SQL);
    ps.setString(1,streamId);
    ResultSet rs=ps.executeQuery();
    long result=-1;
    if (rs.next()) {
      result=rs.getLong(""String_Node_Str"");
    }
    ps.close();
    return result;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + streamId,e);
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
  return -1;
}","private long getLastContiguousPage(String streamId,Connection conn){
  try {
    PreparedStatement ps=conn.prepareStatement(GET_LAST_CONTIG_PAGE_SQL);
    ps.setString(1,streamId);
    ResultSet rs=ps.executeQuery();
    long result=-1;
    if (rs.next()) {
      result=rs.getLong(""String_Node_Str"");
    }
    ps.close();
    return result;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + streamId,e);
  }
  return -1;
}",0.8548057259713702
6915,"public synchronized void returnConnection(Connection conn){
  freeConns.add(conn);
}","public synchronized void returnConnection(Connection conn){
  lock.lock();
  try {
    connInUse=false;
    connReady.signal();
  }
  finally {
    lock.unlock();
  }
}",0.5634920634920635
6916,"public int getNumPageInfos(String streamId){
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(getCountPageInfosSQL(streamId));
    ResultSet rs=ps.executeQuery();
    rs.next();
    int result=rs.getInt(1);
    ps.close();
    return result;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"",e);
    return 0;
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}","public int getNumPageInfos(String streamId){
  Connection conn=null;
  try {
    conn=getConnection();
    PreparedStatement ps=conn.prepareStatement(COUNT_PAGE_INFO_SQL);
    ps.setString(1,streamId);
    ResultSet rs=ps.executeQuery();
    rs.next();
    int result=rs.getInt(1);
    ps.close();
    return result;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"",e);
    return 0;
  }
 finally {
    if (conn != null)     returnConnection(conn);
  }
}",0.9445048966267682
6917,"public synchronized void putPageInfo(String streamId,PageInfo pi) throws IOException {
  if (getPageInfo(streamId,pi.getPageNumber()) != null)   return;
  Connection conn=null;
  try {
    conn=getConnection();
    conn.setAutoCommit(false);
    String sql=getInsertPageInfoSQL(streamId,pi.getPageNumber(),pi.getByteOffset(),pi.getTimeOffset(),pi.getLength());
    PreparedStatement ps=conn.prepareStatement(sql);
    ps.executeUpdate();
    ps.close();
    long lastContigPage=getLastContiguousPage(streamId);
    while ((lastContigPage + 1 == pi.getPageNumber()) || haveGotPage(streamId,lastContigPage + 1)) {
      lastContigPage++;
    }
    ps=conn.prepareStatement(UPDATE_PB_PARAMS_SQL);
    ps.setLong(1,pi.getLength());
    ps.setLong(2,lastContigPage);
    ps.setString(3,streamId);
    ps.executeUpdate();
    ps.close();
    conn.commit();
  }
 catch (  SQLException e) {
    throw new IOException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    if (conn != null) {
      try {
        conn.setAutoCommit(true);
      }
 catch (      SQLException ignore) {
      }
      returnConnection(conn);
    }
  }
}","public synchronized void putPageInfo(String streamId,PageInfo pi) throws IOException {
  if (getPageInfo(streamId,pi.getPageNumber()) != null)   return;
  Connection conn=null;
  try {
    conn=getConnection();
    conn.setAutoCommit(false);
    PreparedStatement ps=conn.prepareStatement(PUT_PAGE_INFO_SQL);
    ps.setString(1,streamId);
    ps.setLong(2,pi.getPageNumber());
    ps.setLong(3,pi.getByteOffset());
    ps.setLong(4,pi.getTimeOffset());
    ps.setLong(5,pi.getLength());
    ps.executeUpdate();
    ps.close();
    long lastContigPage=getLastContiguousPage(streamId,conn);
    while ((lastContigPage + 1 == pi.getPageNumber()) || haveGotPage(streamId,lastContigPage + 1,conn)) {
      lastContigPage++;
    }
    ps=conn.prepareStatement(UPDATE_PB_PARAMS_SQL);
    ps.setLong(1,pi.getLength());
    ps.setLong(2,lastContigPage);
    ps.setString(3,streamId);
    ps.executeUpdate();
    ps.close();
    conn.commit();
  }
 catch (  SQLException e) {
    throw new IOException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    if (conn != null) {
      try {
        conn.setAutoCommit(true);
      }
 catch (      SQLException ignore) {
      }
      returnConnection(conn);
    }
  }
}",0.7543934847835405
6918,"public void doRun() throws Exception {
synchronized (FriendTreeModel.this) {
    long uid=lib.getUserId();
    LibraryTreeNode ltn=libNodes.get(uid);
    if (ltn == null) {
      FriendTreeNode ftn=friendNodes.get(uid);
      if (ftn == null) {
        log.error(""String_Node_Str"" + uid + ""String_Node_Str"");
        return;
      }
      ltn=new LibraryTreeNode(frame,lib);
      insertNodeSorted(ftn,ltn);
      libNodes.put(uid,ltn);
    }
 else     ltn.setLib(lib,tree.isSelectedNode(ltn));
    firePathToRootChanged(ltn);
  }
}","public void doRun() throws Exception {
  LibraryTreeNode ltn;
  FriendTreeNode ftn;
synchronized (FriendTreeModel.this) {
    long uid=lib.getUserId();
    ltn=libNodes.get(uid);
    ftn=friendNodes.get(uid);
    if (ltn == null) {
      if (ftn == null) {
        log.error(""String_Node_Str"" + uid + ""String_Node_Str"");
        return;
      }
      ltn=new LibraryTreeNode(frame,lib);
      insertNodeSorted(ftn,ltn);
      libNodes.put(uid,ltn);
    }
 else     ltn.setLib(lib,tree.isSelectedNode(ltn));
  }
  firePathToRootChanged(ltn);
  firePathToRootChanged(ftn);
  firePathToRootChanged(getRoot());
}",0.6649122807017543
6919,"@Override public void libraryChanged(final Library lib,final Set<String> newTrackSids){
  runOnUiThread(new CatchingRunnable(){
    public void doRun() throws Exception {
synchronized (FriendTreeModel.this) {
        long uid=lib.getUserId();
        LibraryTreeNode ltn=libNodes.get(uid);
        if (ltn == null) {
          FriendTreeNode ftn=friendNodes.get(uid);
          if (ftn == null) {
            log.error(""String_Node_Str"" + uid + ""String_Node_Str"");
            return;
          }
          ltn=new LibraryTreeNode(frame,lib);
          insertNodeSorted(ftn,ltn);
          libNodes.put(uid,ltn);
        }
 else         ltn.setLib(lib,tree.isSelectedNode(ltn));
        firePathToRootChanged(ltn);
      }
    }
  }
);
}","@Override public void libraryChanged(final Library lib,final Set<String> newTrackSids){
  runOnUiThread(new CatchingRunnable(){
    public void doRun() throws Exception {
      LibraryTreeNode ltn;
      FriendTreeNode ftn;
synchronized (FriendTreeModel.this) {
        long uid=lib.getUserId();
        ltn=libNodes.get(uid);
        ftn=friendNodes.get(uid);
        if (ltn == null) {
          if (ftn == null) {
            log.error(""String_Node_Str"" + uid + ""String_Node_Str"");
            return;
          }
          ltn=new LibraryTreeNode(frame,lib);
          insertNodeSorted(ftn,ltn);
          libNodes.put(uid,ltn);
        }
 else         ltn.setLib(lib,tree.isSelectedNode(ltn));
      }
      firePathToRootChanged(ltn);
      firePathToRootChanged(ftn);
      firePathToRootChanged(getRoot());
    }
  }
);
}",0.7701149425287356
6920,"public ControlConnection connectTo(Node node,List<EndPoint> alreadyTriedEps,boolean indirectAllowed){
  nextEp:   for (  EndPoint ep : node.getEndPointList()) {
    if (isEonUrl(ep.getUrl())) {
      if (alreadyTriedEps != null) {
        for (        EndPoint triedEp : alreadyTriedEps) {
          if (triedEp.equals(ep))           continue nextEp;
        }
      }
      EonEndPoint theirEp=EonEndPoint.parse(ep.getUrl());
      try {
        if (!(theirEp instanceof SeonEndPoint))         continue;
        if ((theirEp instanceof SeonNatTraversalEndPoint) && (natTraversalEp != null) && indirectAllowed) {
          if (natTraversalEp == null)           continue;
          if (indirectAllowed) {
            InetSocketAddress natSeedEp=new InetSocketAddress(theirEp.getAddress(),theirEp.getUdpPort());
            log.debug(""String_Node_Str"" + natSeedEp);
            eonMgr.sendNATSeed(natSeedEp);
            return null;
          }
        }
        log.info(""String_Node_Str"" + node.getId() + ""String_Node_Str""+ theirEp.getUrl());
        SEONConnection newConn=eonMgr.createSEONConnection();
        EonSocketAddress theirSockAddr=new EonSocketAddress(theirEp.getAddress(),theirEp.getUdpPort(),theirEp.getEonPort());
        newConn.connect(theirSockAddr);
        EonSocketAddress mySockAddr=newConn.getLocalSocketAddress();
        EonEndPoint myEp=new SeonEndPoint(mySockAddr.getAddress(),mySockAddr.getUdpPort(),mySockAddr.getEonPort());
        EonConnectionFactory scm=new EonConnectionFactory(eonMgr,mina);
        ControlConnection cc=new ControlConnection(mina,node,myEp.toMsg(),theirEp.toMsg(),newConn,scm);
        return cc;
      }
 catch (      EONException e) {
        log.error(""String_Node_Str"" + theirEp);
        return null;
      }
    }
  }
  return null;
}","public ControlConnection connectTo(Node node,List<EndPoint> alreadyTriedEps,boolean indirectAllowed){
  nextEp:   for (  EndPoint ep : node.getEndPointList()) {
    if (isEonUrl(ep.getUrl())) {
      if (alreadyTriedEps != null) {
        for (        EndPoint triedEp : alreadyTriedEps) {
          if (triedEp.equals(ep))           continue nextEp;
        }
      }
      EonEndPoint theirEp=EonEndPoint.parse(ep.getUrl());
      try {
        if (!(theirEp instanceof SeonEndPoint))         continue;
        if (theirEp instanceof SeonNatTraversalEndPoint) {
          if ((!natTraversalDecided) || natTraversalEp == null)           continue;
          if (indirectAllowed) {
            InetSocketAddress natSeedEp=new InetSocketAddress(theirEp.getAddress(),theirEp.getUdpPort());
            log.debug(""String_Node_Str"" + natSeedEp);
            eonMgr.sendNATSeed(natSeedEp);
            return null;
          }
        }
        log.info(""String_Node_Str"" + node.getId() + ""String_Node_Str""+ theirEp.getUrl());
        SEONConnection newConn=eonMgr.createSEONConnection();
        EonSocketAddress theirSockAddr=new EonSocketAddress(theirEp.getAddress(),theirEp.getUdpPort(),theirEp.getEonPort());
        newConn.connect(theirSockAddr);
        EonSocketAddress mySockAddr=newConn.getLocalSocketAddress();
        EonEndPoint myEp=new SeonEndPoint(mySockAddr.getAddress(),mySockAddr.getUdpPort(),mySockAddr.getEonPort());
        EonConnectionFactory scm=new EonConnectionFactory(eonMgr,mina);
        ControlConnection cc=new ControlConnection(mina,node,myEp.toMsg(),theirEp.toMsg(),newConn,scm);
        return cc;
      }
 catch (      EONException e) {
        log.error(""String_Node_Str"" + theirEp);
        return null;
      }
    }
  }
  return null;
}",0.97671809256662
6921,"public void play(){
  playingTrackList=frame.getMainPanel().currentContentPanel().getTrackList();
  playingContentPanel=frame.getMainPanel().currentContentPanelName();
  List<String> selSids=playingTrackList.getSelectedStreamIds();
  if (selSids.size() > 0) {
    playingTrackList.clearTableSelection();
    control.play(selSids.get(0));
  }
}","public void play(){
  playingTrackList=frame.getMainPanel().currentContentPanel().getTrackList();
  playingContentPanel=frame.getMainPanel().currentContentPanelName();
  List<String> selSids=playingTrackList.getSelectedStreamIds();
  if (selSids.size() > 0) {
    playingTrackList.clearTableSelection();
    final String sid=selSids.get(0);
    control.getExecutor().execute(new CatchingRunnable(){
      public void doRun() throws Exception {
        control.play(sid);
      }
    }
);
  }
}",0.7822966507177034
6922,"/** 
 * Query all sources whose time has come 
 */
private void querySources(){
  while (true) {
    SourceDetails sd;
synchronized (this) {
      if (possSourceQ.size() == 0)       return;
      PossibleSource ps=possSourceQ.peek();
      Date now=now();
      if (ps.nextQ.after(now)) {
        setTimeout();
        return;
      }
      possSourceQ.remove();
      sd=possSourcesById.get(ps.nodeId);
      if (sd == null || sd.nextQ.after(now)) {
        continue;
      }
      Node source=sd.node;
      possSourcesById.remove(source.getId());
      boolean wantIt=false;
      for (      String sid : sd.streamIds) {
        if (wantSources.contains(sid)) {
          wantIt=true;
          break;
        }
      }
      if (!wantIt)       continue;
      if (sd.retries < mina.getConfig().getSourceQueryRetries()) {
        sd.retries=sd.retries + 1;
        sd.nextQ=timeInFuture(sd.retryAfterMs);
        sd.retryAfterMs=sd.retryAfterMs * 2;
        possSourceQ.add(new PossibleSource(source.getId(),sd.nextQ));
        possSourcesById.put(source.getId(),sd);
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + source.getId() + ""String_Node_Str""+ getTimeFormat().format(sd.nextQ));
      }
    }
    queryStatus(sd,true);
  }
}","/** 
 * Query all sources whose time has come 
 */
private void querySources(){
  while (true) {
    SourceDetails sd;
synchronized (this) {
      if (possSourceQ.size() == 0)       return;
      PossibleSource ps=possSourceQ.peek();
      Date now=now();
      if (ps.nextQ.after(now)) {
        setTimeout();
        return;
      }
      possSourceQ.remove();
      sd=possSourcesById.get(ps.nodeId);
      if (sd == null || sd.nextQ.after(now)) {
        continue;
      }
      Node source=sd.node;
      possSourcesById.remove(source.getId());
      boolean wantIt=false;
      for (      String sid : sd.streamIds) {
        if (wantSources.contains(sid)) {
          wantIt=true;
          break;
        }
      }
      if (!wantIt)       continue;
      if (sd.retries < mina.getConfig().getSourceQueryRetries()) {
        sd.retries=sd.retries + 1;
        sd.nextQ=timeInFuture(sd.retryAfterMs);
        sd.retryAfterMs=sd.retryAfterMs * 2;
        possSourceQ.add(new PossibleSource(source.getId(),sd.nextQ));
        possSourcesById.put(source.getId(),sd);
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + source.getId() + ""String_Node_Str""+ getTimeFormat().format(sd.nextQ));
      }
    }
    String sourceId=sd.node.getId();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + sourceId + ""String_Node_Str""+ sd.streamIds);
    ReqSourceStatusBatcher rssb;
synchronized (this) {
      if (rssBatchers.containsKey(sourceId))       rssb=rssBatchers.get(sourceId);
 else {
        rssb=new ReqSourceStatusBatcher(sd.node);
        rssBatchers.put(sourceId,rssb);
      }
    }
    rssb.addAll(sd.streamIds);
  }
}",0.8502911956149366
6923,"/** 
 * Returns the set of ready nodes, but doesn't remove trace of them
 */
public synchronized Set<Node> getReadyNodes(String streamId){
  Set<Node> result=new HashSet<Node>();
  for (  SourceStatus ss : readySources.get(streamId).values()) {
    result.add(ss.getFromNode());
  }
  return result;
}","/** 
 * Returns the set of ready nodes, but doesn't remove trace of them
 */
public synchronized Set<Node> getReadyNodes(String streamId){
  Set<Node> result=new HashSet<Node>();
  for (  SourceStatus ss : readySources.get(streamId)) {
    result.add(ss.getFromNode());
  }
  return result;
}",0.9173693086003372
6924,"/** 
 * Returns the set of ready nodes, but doesn't remove trace of them
 */
public synchronized Set<String> getReadyNodeIds(String streamId){
  Set<String> result=new HashSet<String>();
  if (readySources.containsKey(streamId)) {
    for (    SourceStatus ss : readySources.get(streamId).values()) {
      result.add(ss.getFromNode().getId());
    }
  }
  return result;
}","/** 
 * Returns the set of ready nodes, but doesn't remove trace of them
 */
public synchronized Set<String> getReadyNodeIds(String streamId){
  Set<String> result=new HashSet<String>();
  if (readySources.containsKey(streamId)) {
    for (    SourceStatus ss : readySources.get(streamId)) {
      result.add(ss.getFromNode().getId());
    }
  }
  return result;
}",0.8113975576662144
6925,"/** 
 * Returns the set of ready sources, and removes trace of them - if you want to cache them, add them again
 */
public synchronized Set<SourceStatus> getReadySources(String streamId){
  Set<SourceStatus> result=new HashSet<SourceStatus>();
  if (readySources.containsKey(streamId))   result.addAll(readySources.remove(streamId).values());
  return result;
}","/** 
 * Returns the set of ready sources, and removes trace of them - if you want to cache them, add them again
 */
public synchronized Set<SourceStatus> getReadySources(String streamId){
  Set<SourceStatus> result=new HashSet<SourceStatus>();
  if (readySources.containsKey(streamId))   result.addAll(readySources.remove(streamId));
  return result;
}",0.9873772791023844
6926,"/** 
 * @syncpriority 180
 */
public void gotSource(String streamId,Node source){
synchronized (this) {
    if (!wantSources.contains(streamId))     return;
  }
  if (source.getId().equals(mina.getMyNodeId().toString()))   return;
  ControlConnection cc=mina.getCCM().getCCWithId(source.getId());
  if (cc != null && cc.getLCPair(streamId) != null)   return;
  if (mina.getBadNodeList().checkBadNode(source.getId())) {
    log.debug(""String_Node_Str"" + source.getId());
    return;
  }
  if (mina.getNetMgr().canConnectTo(source)) {
    cacheSourceInitially(source,streamId);
    SourceDetails sd;
synchronized (this) {
      sd=possSourcesById.get(source.getId());
    }
    queryStatus(sd,mina.getBidStrategy().tolerateDelay(streamId));
  }
 else {
    if (source.getEndPointCount() > 0) {
      log.debug(""String_Node_Str"" + source.getId() + ""String_Node_Str"");
synchronized (this) {
        if (!unreachableSources.containsKey(streamId))         unreachableSources.put(streamId,new HashSet<Node>());
        unreachableSources.get(streamId).add(source);
      }
    }
  }
}","/** 
 * @syncpriority 180
 */
public void gotSource(String streamId,Node source){
synchronized (this) {
    if (!wantSources.contains(streamId))     return;
  }
  if (source.getId().equals(mina.getMyNodeId().toString()))   return;
  ControlConnection cc=mina.getCCM().getCCWithId(source.getId());
  if (cc != null && cc.getLCPair(streamId) != null)   return;
  if (mina.getBadNodeList().checkBadNode(source.getId())) {
    log.debug(""String_Node_Str"" + source.getId());
    return;
  }
  if (mina.getNetMgr().canConnectTo(source)) {
    cacheSourceInitially(source,streamId);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + source.getId() + ""String_Node_Str""+ streamId);
    if (mina.getBidStrategy().tolerateDelay(streamId)) {
      ReqSourceStatusBatcher rssb;
synchronized (this) {
        if (rssBatchers.containsKey(source.getId()))         rssb=rssBatchers.get(source.getId());
 else {
          rssb=new ReqSourceStatusBatcher(source);
          rssBatchers.put(source.getId(),rssb);
        }
      }
      rssb.add(streamId);
    }
 else {
      ReqSourceStatus.Builder rssb=ReqSourceStatus.newBuilder();
      rssb.addStreamId(streamId);
      sendReqSourceStatus(source,rssb);
    }
  }
 else {
    if (source.getEndPointCount() > 0) {
      log.debug(""String_Node_Str"" + source.getId() + ""String_Node_Str"");
synchronized (this) {
        if (!unreachableSources.containsKey(streamId))         unreachableSources.put(streamId,new HashSet<Node>());
        unreachableSources.get(streamId).add(source);
      }
    }
  }
}",0.6613333333333333
6927,"/** 
 * Called when this source is good to service us, but we are not ready or able to handle it
 */
public synchronized void cacheSourceUntilReady(SourceStatus sourceStat,StreamStatus streamStat){
  if (!readySources.containsKey(streamStat.getStreamId()))   readySources.put(streamStat.getStreamId(),new HashMap<String,SourceStatus>());
  readySources.get(streamStat.getStreamId()).put(sourceStat.getFromNode().getId(),sourceStat);
}","/** 
 * Called when this source is good to service us, but we are not ready or able to handle it
 */
public synchronized void cacheSourceUntilReady(SourceStatus sourceStat,StreamStatus streamStat){
  if (!readySources.containsKey(streamStat.getStreamId()))   readySources.put(streamStat.getStreamId(),new HashSet<SourceStatus>());
  readySources.get(streamStat.getStreamId()).add(sourceStat);
}",0.9347826086956522
6928,"@Override public void runTask() throws Exception {
  updateTaskRunning=true;
  try {
    Set<Long> friendIds=new HashSet<Long>(rbnb.getUsersService().getMyUser().getFriendIds());
synchronized (LibraryService.this) {
      Iterator<Long> it=libs.keySet().iterator();
      while (it.hasNext()) {
        long libUid=it.next();
        if (!friendIds.contains(libUid))         it.remove();
      }
    }
    int friendsDone=0;
    for (    long friendId : friendIds) {
      completion=(float)friendsDone / friendIds.size();
      User u=rbnb.getUsersService().getUser(friendId);
      Library cLib;
      Set<String> newSidsForUi=new HashSet<String>();
synchronized (LibraryService.this) {
        cLib=libs.get(friendId);
        if (cLib == null) {
          cLib=rbnb.getDbService().getLibrary(friendId);
          if (cLib != null) {
            Map<String,Date> unknownSids=rbnb.getDbService().getUnknownStreamsInLibrary(friendId);
            for (            String uSid : unknownSids.keySet()) {
              cLib.getTracks().remove(uSid);
            }
            newSidsForUi.addAll(cLib.getTracks().keySet());
            libs.put(friendId,cLib);
          }
        }
      }
      statusText=""String_Node_Str"" + u.getEmail();
      fireUpdated();
      LibraryMsg.Builder b=LibraryMsg.newBuilder();
      MetadataServerConfig msc=rbnb.getUsersService().getMsc();
      Date lastUpdated=(cLib == null) ? null : cLib.getLastUpdated();
      try {
        rbnb.getSerializationManager().getObjectFromUrl(b,msc.getLibraryUrl(friendId,lastUpdated));
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
      lastUpdated=now();
      Library nLib=new Library(b.build());
      Map<String,Date> newTrax=nLib.getTracks();
      log.debug(""String_Node_Str"" + u.getEmail() + ""String_Node_Str""+ newTrax.size()+ ""String_Node_Str"");
      if (newTrax.size() > 0) {
        rbnb.getDbService().addTracksToLibrary(friendId,newTrax);
synchronized (LibraryService.this) {
          if (cLib == null) {
            cLib=new Library();
            cLib.setUserId(friendId);
            cLib.setLastUpdated(lastUpdated);
            libs.put(friendId,cLib);
          }
 else           cLib.setLastUpdated(lastUpdated);
        }
      }
      Map<String,Date> unknownTracks=rbnb.getDbService().getUnknownStreamsInLibrary(friendId);
      if (unknownTracks.size() > 0) {
        log.debug(""String_Node_Str"" + unknownTracks.size() + ""String_Node_Str""+ u.getEmail());
        Date lastFiredEvent=now();
        for (        String sid : unknownTracks.keySet()) {
          Stream s=rbnb.getMetadataService().getStream(sid);
          if (s == null) {
            if (rbnb.getStatus() == RobonoboStatus.Stopping)             return;
          }
 else           newSidsForUi.add(sid);
          if (newSidsForUi.size() > 0 && msElapsedSince(lastFiredEvent) > (FIRE_UI_EVENT_DELAY * 1000)) {
            for (            String newSid : newSidsForUi) {
              cLib.getTracks().put(newSid,unknownTracks.get(newSid));
            }
            rbnb.getEventService().fireLibraryChanged(cLib,newSidsForUi);
            newSidsForUi=new HashSet<String>();
            lastFiredEvent=now();
          }
        }
      }
      if (newSidsForUi.size() > 0) {
        for (        String newSid : newSidsForUi) {
          cLib.getTracks().put(newSid,unknownTracks.get(newSid));
        }
        rbnb.getEventService().fireLibraryChanged(cLib,newSidsForUi);
      }
    }
    statusText=""String_Node_Str"";
    completion=1f;
    fireUpdated();
  }
  finally {
    updateTaskRunning=false;
  }
}","@Override public void runTask() throws Exception {
  updateTaskRunning=true;
  try {
    Set<Long> friendIds=new HashSet<Long>(rbnb.getUsersService().getMyUser().getFriendIds());
synchronized (LibraryService.this) {
      Iterator<Long> it=libs.keySet().iterator();
      while (it.hasNext()) {
        long libUid=it.next();
        if (!friendIds.contains(libUid))         it.remove();
      }
    }
    int friendsDone=0;
    for (    long friendId : friendIds) {
      completion=(float)friendsDone / friendIds.size();
      User u=rbnb.getUsersService().getUser(friendId);
      Library cLib;
      Set<String> newSidsForUi=new HashSet<String>();
synchronized (LibraryService.this) {
        cLib=libs.get(friendId);
        if (cLib == null) {
          cLib=rbnb.getDbService().getLibrary(friendId);
          if (cLib != null) {
            Map<String,Date> unknownSids=rbnb.getDbService().getUnknownStreamsInLibrary(friendId);
            for (            String uSid : unknownSids.keySet()) {
              cLib.getTracks().remove(uSid);
            }
            newSidsForUi.addAll(cLib.getTracks().keySet());
            libs.put(friendId,cLib);
          }
        }
      }
      statusText=""String_Node_Str"" + u.getEmail();
      fireUpdated();
      LibraryMsg.Builder b=LibraryMsg.newBuilder();
      MetadataServerConfig msc=rbnb.getUsersService().getMsc();
      Date lastUpdated=(cLib == null) ? null : cLib.getLastUpdated();
      try {
        rbnb.getSerializationManager().getObjectFromUrl(b,msc.getLibraryUrl(friendId,lastUpdated));
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
      lastUpdated=now();
      Library nLib=new Library(b.build());
      Map<String,Date> newTrax=nLib.getTracks();
      log.debug(""String_Node_Str"" + u.getEmail() + ""String_Node_Str""+ newTrax.size()+ ""String_Node_Str"");
      if (newTrax.size() > 0) {
        rbnb.getDbService().addTracksToLibrary(friendId,newTrax);
synchronized (LibraryService.this) {
          if (cLib == null) {
            cLib=new Library();
            cLib.setUserId(friendId);
            cLib.setLastUpdated(lastUpdated);
            libs.put(friendId,cLib);
          }
 else           cLib.setLastUpdated(lastUpdated);
        }
      }
      Map<String,Date> unknownTracks=rbnb.getDbService().getUnknownStreamsInLibrary(friendId);
      for (      Entry<String,Date> entry : newTrax.entrySet()) {
        String sid=entry.getKey();
        Date dateAdded=entry.getValue();
        if (!unknownTracks.containsKey(sid)) {
          cLib.getTracks().put(sid,dateAdded);
          newSidsForUi.add(sid);
        }
      }
      if (unknownTracks.size() > 0) {
        log.debug(""String_Node_Str"" + unknownTracks.size() + ""String_Node_Str""+ u.getEmail());
        Date lastFiredEvent=now();
        for (        String sid : unknownTracks.keySet()) {
          Stream s=rbnb.getMetadataService().getStream(sid);
          if (s == null) {
            if (rbnb.getStatus() == RobonoboStatus.Stopping)             return;
          }
 else           newSidsForUi.add(sid);
          if (newSidsForUi.size() > 0 && msElapsedSince(lastFiredEvent) > (FIRE_UI_EVENT_DELAY * 1000)) {
            for (            String newSid : newSidsForUi) {
              cLib.getTracks().put(newSid,unknownTracks.get(newSid));
            }
            rbnb.getEventService().fireLibraryChanged(cLib,newSidsForUi);
            newSidsForUi=new HashSet<String>();
            lastFiredEvent=now();
          }
        }
      }
      if (newSidsForUi.size() > 0) {
        for (        String newSid : newSidsForUi) {
          cLib.getTracks().put(newSid,unknownTracks.get(newSid));
        }
        rbnb.getEventService().fireLibraryChanged(cLib,newSidsForUi);
      }
    }
    statusText=""String_Node_Str"";
    completion=1f;
    fireUpdated();
  }
  finally {
    updateTaskRunning=false;
  }
}",0.9618401808270176
6929,"public void login(final String email,final String password) throws IOException, SerializationException {
  if (!started) {
    startupLock.lock();
    try {
      try {
        log.debug(""String_Node_Str"");
        startupCondition.await();
      }
 catch (      InterruptedException e) {
        return;
      }
    }
  finally {
      startupLock.unlock();
    }
  }
  MetadataServerConfig msc=new MetadataServerConfig(rbnb.getConfig().getMetadataServerUrl());
  log.info(""String_Node_Str"" + email);
  try {
    UserMsg.Builder ub=UserMsg.newBuilder();
    SerializationManager sm=rbnb.getSerializationManager();
    sm.setCreds(email,password);
    sm.getObjectFromUrl(ub,msc.getUserUrl(email));
    User tryUser=new User(ub.build());
    tryUser.setPassword(password);
    rbnb.getConfig().setMetadataServerUsername(email);
    rbnb.getConfig().setMetadataServerPassword(password);
    rbnb.saveConfig();
    usersByEmail.clear();
    usersById.clear();
    playlists.clear();
    myPlaylistIdsByTitle.clear();
    usersByEmail.put(email,tryUser);
    usersById.put(tryUser.getUserId(),tryUser);
    this.msc=msc;
    me=tryUser;
    log.info(""String_Node_Str"" + email + ""String_Node_Str"");
    rbnb.getExecutor().execute(new CatchingRunnable(){
      public void doRun() throws Exception {
        rbnb.getEventService().fireLoggedIn();
synchronized (UserService.this) {
          usersByEmail.put(me.getEmail(),me);
          usersById.put(me.getUserId(),me);
        }
        rbnb.getEventService().fireUserChanged(me);
        rbnb.getTaskService().runTask(new InitialFetchTask());
      }
    }
);
    if (rbnb.getMina() != null & rbnb.getMina().isConnectedToSupernode()) {
      rbnb.setStatus(RobonoboStatus.Connected);
      rbnb.getEventService().fireStatusChanged();
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    throw e;
  }
catch (  SerializationException e) {
    log.error(""String_Node_Str"",e);
    throw e;
  }
}","public void login(final String email,final String password) throws IOException, SerializationException {
  if (!started) {
    startupLock.lock();
    try {
      try {
        log.debug(""String_Node_Str"");
        startupCondition.await();
      }
 catch (      InterruptedException e) {
        return;
      }
    }
  finally {
      startupLock.unlock();
    }
  }
  MetadataServerConfig msc=new MetadataServerConfig(rbnb.getConfig().getMetadataServerUrl());
  log.info(""String_Node_Str"" + email);
  try {
    UserMsg.Builder ub=UserMsg.newBuilder();
    SerializationManager sm=rbnb.getSerializationManager();
    sm.setCreds(email,password);
    sm.getObjectFromUrl(ub,msc.getUserUrl(email));
    User tryUser=new User(ub.build());
    tryUser.setPassword(password);
    rbnb.getConfig().setMetadataServerUsername(email);
    rbnb.getConfig().setMetadataServerPassword(password);
    rbnb.saveConfig();
    usersByEmail.clear();
    usersById.clear();
    playlists.clear();
    myPlaylistIdsByTitle.clear();
    usersByEmail.put(email,tryUser);
    usersById.put(tryUser.getUserId(),tryUser);
    this.msc=msc;
    me=tryUser;
    log.info(""String_Node_Str"" + email + ""String_Node_Str"");
    rbnb.getExecutor().execute(new CatchingRunnable(){
      public void doRun() throws Exception {
        rbnb.getEventService().fireLoggedIn();
synchronized (UserService.this) {
          usersByEmail.put(me.getEmail(),me);
          usersById.put(me.getUserId(),me);
        }
        rbnb.getEventService().fireUserChanged(me);
        rbnb.getTaskService().runTask(new InitialFetchTask());
      }
    }
);
    if (rbnb.getMina() != null && rbnb.getMina().isConnectedToSupernode()) {
      rbnb.setStatus(RobonoboStatus.Connected);
      rbnb.getEventService().fireStatusChanged();
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    throw e;
  }
catch (  SerializationException e) {
    log.error(""String_Node_Str"",e);
    throw e;
  }
}",0.9997453526865292
6930,"public void addShareFromCompletedDownload(DownloadingTrack d) throws RobonoboException {
  Stream s=d.getStream();
  log.debug(""String_Node_Str"" + s.getStreamId());
  if (d.getDownloadStatus() != DownloadStatus.Finished) {
    throw new SeekInnerCalmException();
  }
  File curFile=d.getFile();
  boolean delFile=false;
  File shareFile=fileForFinishedDownload(s);
  if (s.getStreamId().equals(rbnb.getPlaybackService().getCurrentStreamId())) {
    try {
      FileUtil.copyFile(curFile,shareFile);
    }
 catch (    IOException e) {
      throw new RobonoboException(e);
    }
    delFile=true;
  }
 else {
    boolean ok=d.getFile().renameTo(shareFile);
    if (!ok)     throw new RobonoboException(""String_Node_Str"" + s.getStreamId() + ""String_Node_Str""+ curFile.getAbsolutePath()+ ""String_Node_Str""+ shareFile.getAbsolutePath());
  }
  SharedTrack sh=new SharedTrack(s,shareFile,ShareStatus.Sharing);
  sh.setDateAdded(now());
  db.putShare(sh);
synchronized (this) {
    shareStreamIds.add(s.getStreamId());
  }
  PageBuffer pb;
  try {
    pb=rbnb.getStorageService().createPageBufForShare(s,shareFile,false);
  }
 catch (  IOException e) {
    throw new RobonoboException(e);
  }
  startShare(s.getStreamId(),pb);
  event.fireTrackUpdated(s.getStreamId());
  users.checkPlaylistsForNewShare(sh);
  if (delFile)   curFile.deleteOnExit();
}","public void addShareFromCompletedDownload(DownloadingTrack d) throws RobonoboException {
  Stream s=d.getStream();
  log.debug(""String_Node_Str"" + s.getStreamId());
  if (d.getDownloadStatus() != DownloadStatus.Finished) {
    throw new SeekInnerCalmException();
  }
  File curFile=d.getFile();
  File shareFile=fileForFinishedDownload(s);
  try {
    FileUtil.copyFile(curFile,shareFile);
  }
 catch (  IOException e) {
    throw new RobonoboException(e);
  }
  curFile.deleteOnExit();
  SharedTrack sh=new SharedTrack(s,shareFile,ShareStatus.Sharing);
  sh.setDateAdded(now());
  db.putShare(sh);
synchronized (this) {
    shareStreamIds.add(s.getStreamId());
  }
  PageBuffer pb;
  try {
    pb=rbnb.getStorageService().createPageBufForShare(s,shareFile,false);
  }
 catch (  IOException e) {
    throw new RobonoboException(e);
  }
  startShare(s.getStreamId(),pb);
  event.fireTrackUpdated(s.getStreamId());
  users.checkPlaylistsForNewShare(sh);
}",0.7902523933855526
6931,"/** 
 * Don't hang onto the object you get returned from here - implement TrackListener, and look it up every time instead. That way we keep ram usage down and you always have the correct status (tracks start off as CloudTracks, then become DownloadingTracks, then SharedTracks, plus they get played, then stopped, etc)
 */
public Track getTrack(String streamId){
  Track t;
  t=share.getShare(streamId);
  if (t == null) {
    t=download.getDownload(streamId);
    if (t == null) {
      Stream s=metadata.getStream(streamId);
      if (s == null)       return null;
      t=new CloudTrack(s,mina.numSources(streamId));
    }
  }
  String playingSid=playback.getCurrentStreamId();
  if (playingSid != null && playingSid.equals(streamId)) {
switch (playback.getStatus()) {
case Starting:
      t.setPlaybackStatus(PlaybackStatus.Starting);
    break;
case Playing:
  t.setPlaybackStatus(PlaybackStatus.Playing);
break;
case Paused:
t.setPlaybackStatus(PlaybackStatus.Paused);
break;
}
}
synchronized (this) {
if (transferSpeeds != null && transferSpeeds.containsKey(streamId)) {
TransferSpeed ts=transferSpeeds.get(streamId);
t.setRates(ts.getDownload(),ts.getUpload());
}
}
return t;
}","/** 
 * Don't hang onto the object you get returned from here - implement TrackListener, and look it up every time instead. That way we keep ram usage down and you always have the correct status (tracks start off as CloudTracks, then become DownloadingTracks, then SharedTracks, plus they get played, then stopped, etc)
 */
public Track getTrack(String streamId){
  while (!started) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      throw new SeekInnerCalmException(e);
    }
  }
  Track t;
  t=share.getShare(streamId);
  if (t == null) {
    t=download.getDownload(streamId);
    if (t == null) {
      Stream s=metadata.getStream(streamId);
      if (s == null)       return null;
      t=new CloudTrack(s,mina.numSources(streamId));
    }
  }
  String playingSid=playback.getCurrentStreamId();
  if (playingSid != null && playingSid.equals(streamId)) {
switch (playback.getStatus()) {
case Starting:
      t.setPlaybackStatus(PlaybackStatus.Starting);
    break;
case Playing:
  t.setPlaybackStatus(PlaybackStatus.Playing);
break;
case Paused:
t.setPlaybackStatus(PlaybackStatus.Paused);
break;
}
}
synchronized (this) {
if (transferSpeeds != null && transferSpeeds.containsKey(streamId)) {
TransferSpeed ts=transferSpeeds.get(streamId);
t.setRates(ts.getDownload(),ts.getUpload());
}
}
return t;
}",0.9394059405940594
6932,"@Override public void startup() throws Exception {
  share=rbnb.getShareService();
  download=rbnb.getDownloadService();
  metadata=rbnb.getMetadataService();
  playback=rbnb.getPlaybackService();
  event=rbnb.getEventService();
  mina=rbnb.getMina();
  log.debug(""String_Node_Str"");
  getRobonobo().getExecutor().execute(new CatchingRunnable(){
    public void doRun() throws Exception {
      share.startAllShares();
      allSharesStarted=true;
      event.fireAllTracksLoaded();
    }
  }
);
  event.addTransferSpeedListener(this);
}","@Override public void startup() throws Exception {
  share=rbnb.getShareService();
  download=rbnb.getDownloadService();
  metadata=rbnb.getMetadataService();
  playback=rbnb.getPlaybackService();
  event=rbnb.getEventService();
  mina=rbnb.getMina();
  log.debug(""String_Node_Str"");
  getRobonobo().getExecutor().execute(new CatchingRunnable(){
    public void doRun() throws Exception {
      share.startAllShares();
      allSharesStarted=true;
      event.fireAllTracksLoaded();
    }
  }
);
  event.addTransferSpeedListener(this);
  started=true;
}",0.9853211009174312
6933,"public void update(Playlist p,boolean fireChangedEvent){
  Playlist oldP=this.p;
  this.p=p;
  if (oldP != null) {
    for (    String streamId : oldP.getStreamIds()) {
      if (!p.getStreamIds().contains(streamId))       controller.stopFindingSources(streamId,this);
    }
  }
synchronized (this) {
    updateStreamIndices();
  }
  if (myPlaylist || activated)   activate();
  if (fireChangedEvent)   fireTableDataChanged();
}","public void update(Playlist p,boolean fireChangedEvent){
  Playlist oldP=this.p;
  this.p=p;
  if (oldP != null) {
    for (    String streamId : oldP.getStreamIds()) {
      if (!p.getStreamIds().contains(streamId))       controller.stopFindingSources(streamId,this);
    }
  }
synchronized (this) {
    updateStreamIndices();
  }
  if (myPlaylist || activated) {
    controller.getExecutor().execute(new CatchingRunnable(){
      public void doRun() throws Exception {
        activate();
      }
    }
);
  }
  if (fireChangedEvent)   fireTableDataChanged();
}",0.8395560040363269
6934,"@Override protected void paintComponent(Graphics g){
  GUIUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  GuiUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}",0.9831932773109244
6935,"@Override protected void paintComponent(Graphics g){
  GUIUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  GuiUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}",0.9831932773109244
6936,"public TrackList(final RobonoboFrame frame,TrackListTableModel model){
  this.model=model;
  this.frame=frame;
  log=LogFactory.getLog(getClass());
  setLayout(new GridLayout(1,0));
  setBorder(BorderFactory.createEmptyBorder(0,1,0,1));
  table=new JXTable(model);
  table.setFont(RoboFont.getFont(13,false));
  table.setRowHeight(21);
  table.setColumnControlVisible(true);
  table.setHorizontalScrollEnabled(true);
  table.setFillsViewportHeight(true);
  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  table.setBackground(Color.WHITE);
  table.setHighlighters(HighlighterFactory.createSimpleStriping());
  table.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      frame.getPlaybackPanel().trackSelectionChanged();
    }
  }
);
  table.getColumn(0).setCellRenderer(new PlaybackStatusRenderer());
  TextRenderer tr=new TextRenderer();
  table.getColumn(1).setCellRenderer(tr);
  table.getColumn(2).setCellRenderer(tr);
  table.getColumn(3).setCellRenderer(tr);
  table.getColumn(4).setCellRenderer(tr);
  table.getColumn(5).setCellRenderer(tr);
  table.getColumn(6).setCellRenderer(tr);
  table.getColumn(7).setCellRenderer(tr);
  table.getColumn(8).setCellRenderer(new TransferStatusCellRenderer());
  table.getColumn(9).setCellRenderer(tr);
  table.getColumn(10).setCellRenderer(tr);
  table.getColumn(11).setCellRenderer(tr);
  table.getColumn(12).setCellRenderer(tr);
  if (javaMajorVersion() >= 6) {
    table.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer(){
      ImageIcon ascSortIcon=GUIUtil.createImageIcon(""String_Node_Str"",null);
      ImageIcon descSortIcon=GUIUtil.createImageIcon(""String_Node_Str"",null);
      public Component getTableCellRendererComponent(      JTable table,      Object value,      boolean isSelected,      boolean hasFocus,      int row,      int column){
        JLabel result=(JLabel)super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
        result.setFont(RoboFont.getFont(12,false));
        result.setBorder(BorderFactory.createEmptyBorder(3,5,3,0));
        SortOrder so=TrackList.this.table.getSortOrder(column);
        if (so.isSorted()) {
          if (so.isAscending())           setIcon(ascSortIcon);
 else           setIcon(descSortIcon);
        }
 else         result.setIcon(null);
        result.setHorizontalTextPosition(SwingConstants.LEFT);
        return result;
      }
    }
);
  }
  TableColumnModelExt cm=(TableColumnModelExt)table.getColumnModel();
  cm.getColumn(0).setPreferredWidth(22);
  cm.getColumn(1).setPreferredWidth(187);
  cm.getColumn(2).setPreferredWidth(137);
  cm.getColumn(3).setPreferredWidth(139);
  cm.getColumn(4).setPreferredWidth(44);
  cm.getColumn(5).setPreferredWidth(40);
  cm.getColumn(6).setPreferredWidth(47);
  cm.getColumn(7).setPreferredWidth(60);
  cm.getColumn(8).setPreferredWidth(160);
  cm.getColumn(9).setPreferredWidth(80);
  cm.getColumn(10).setPreferredWidth(80);
  cm.getColumn(11).setPreferredWidth(140);
  cm.getColumn(12).setPreferredWidth(300);
  int[] hiddenCols=model.hiddenCols();
  List<TableColumn> cols=cm.getColumns(true);
  for (int i=0; i < hiddenCols.length; i++) {
    TableColumnExt colExt=(TableColumnExt)cols.get(hiddenCols[i]);
    colExt.setVisible(false);
  }
  table.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        frame.getPlaybackPanel().play();
        e.consume();
      }
    }
  }
);
  scrollPane=new JScrollPane(table);
  add(scrollPane,""String_Node_Str"");
}","public TrackList(final RobonoboFrame frame,TrackListTableModel model){
  this.model=model;
  this.frame=frame;
  log=LogFactory.getLog(getClass());
  setLayout(new GridLayout(1,0));
  setBorder(BorderFactory.createEmptyBorder(0,1,0,1));
  table=new JXTable(model);
  table.setFont(RoboFont.getFont(13,false));
  table.setRowHeight(21);
  table.setColumnControlVisible(true);
  table.setHorizontalScrollEnabled(true);
  table.setFillsViewportHeight(true);
  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  table.setBackground(Color.WHITE);
  table.setHighlighters(HighlighterFactory.createSimpleStriping());
  table.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      frame.getPlaybackPanel().trackSelectionChanged();
    }
  }
);
  table.getColumn(0).setCellRenderer(new PlaybackStatusRenderer());
  TextRenderer tr=new TextRenderer();
  table.getColumn(1).setCellRenderer(tr);
  table.getColumn(2).setCellRenderer(tr);
  table.getColumn(3).setCellRenderer(tr);
  table.getColumn(4).setCellRenderer(tr);
  table.getColumn(5).setCellRenderer(tr);
  table.getColumn(6).setCellRenderer(tr);
  table.getColumn(7).setCellRenderer(tr);
  table.getColumn(8).setCellRenderer(new TransferStatusCellRenderer());
  table.getColumn(9).setCellRenderer(tr);
  table.getColumn(10).setCellRenderer(tr);
  table.getColumn(11).setCellRenderer(tr);
  table.getColumn(12).setCellRenderer(tr);
  if (javaMajorVersion() >= 6) {
    table.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer(){
      ImageIcon ascSortIcon=GuiUtil.createImageIcon(""String_Node_Str"",null);
      ImageIcon descSortIcon=GuiUtil.createImageIcon(""String_Node_Str"",null);
      public Component getTableCellRendererComponent(      JTable table,      Object value,      boolean isSelected,      boolean hasFocus,      int row,      int column){
        JLabel result=(JLabel)super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
        result.setFont(RoboFont.getFont(12,false));
        result.setBorder(BorderFactory.createEmptyBorder(3,5,3,0));
        SortOrder so=TrackList.this.table.getSortOrder(column);
        if (so.isSorted()) {
          if (so.isAscending())           setIcon(ascSortIcon);
 else           setIcon(descSortIcon);
        }
 else         result.setIcon(null);
        result.setHorizontalTextPosition(SwingConstants.LEFT);
        return result;
      }
    }
);
  }
  TableColumnModelExt cm=(TableColumnModelExt)table.getColumnModel();
  cm.getColumn(0).setPreferredWidth(22);
  cm.getColumn(1).setPreferredWidth(187);
  cm.getColumn(2).setPreferredWidth(137);
  cm.getColumn(3).setPreferredWidth(139);
  cm.getColumn(4).setPreferredWidth(44);
  cm.getColumn(5).setPreferredWidth(40);
  cm.getColumn(6).setPreferredWidth(47);
  cm.getColumn(7).setPreferredWidth(60);
  cm.getColumn(8).setPreferredWidth(160);
  cm.getColumn(9).setPreferredWidth(80);
  cm.getColumn(10).setPreferredWidth(80);
  cm.getColumn(11).setPreferredWidth(140);
  cm.getColumn(12).setPreferredWidth(300);
  int[] hiddenCols=model.hiddenCols();
  List<TableColumn> cols=cm.getColumns(true);
  for (int i=0; i < hiddenCols.length; i++) {
    TableColumnExt colExt=(TableColumnExt)cols.get(hiddenCols[i]);
    colExt.setVisible(false);
  }
  table.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        frame.getPlaybackPanel().play();
        e.consume();
      }
    }
  }
);
  scrollPane=new JScrollPane(table);
  add(scrollPane,""String_Node_Str"");
}",0.9989192110240476
6937,"@Override protected void paintComponent(Graphics g){
  GUIUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  GuiUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}",0.9831932773109244
6938,"@Override protected void paintComponent(Graphics g){
  GUIUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  GuiUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}",0.9831932773109244
6939,"@Override protected void paintComponent(Graphics g){
  GUIUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  GuiUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}",0.9831932773109244
6940,"@Override protected void paintComponent(Graphics g){
  GUIUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  GuiUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}",0.9831932773109244
6941,"@Override protected void paintComponent(Graphics g){
  GUIUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  GuiUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}",0.9831932773109244
6942,"@Override protected void paintComponent(Graphics g){
  GUIUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  GuiUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}",0.9831932773109244
6943,"@Override protected void paintComponent(Graphics g){
  GUIUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  GuiUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}",0.9831932773109244
6944,"@Override protected void paintComponent(Graphics g){
  GUIUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  GuiUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}",0.9831932773109244
6945,"@Override protected void paintComponent(Graphics g){
  GUIUtil.makeTextLookLessRubbish(g);
  if (bgColor != null) {
    g.setColor(bgColor);
    g.fillRect(0,0,getWidth(),getHeight());
  }
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  GuiUtil.makeTextLookLessRubbish(g);
  if (bgColor != null) {
    g.setColor(bgColor);
    g.fillRect(0,0,getWidth(),getHeight());
  }
  super.paintComponent(g);
}",0.9907834101382488
6946,"@Override protected void paintComponent(Graphics g){
  GUIUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  GuiUtil.makeTextLookLessRubbish(g);
  super.paintComponent(g);
}",0.9831932773109244
6947,"@Override protected void paintComponent(Graphics g){
  GUIUtil.makeTextLookLessRubbish(g);
  if (bgColor != null) {
    g.setColor(bgColor);
    g.fillRect(0,0,getWidth(),getHeight());
  }
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  GuiUtil.makeTextLookLessRubbish(g);
  if (bgColor != null) {
    g.setColor(bgColor);
    g.fillRect(0,0,getWidth(),getHeight());
  }
  super.paintComponent(g);
}",0.9907834101382488
6948,"public RobonoboFrame(RobonoboController control,String[] args){
  this.control=control;
  this.cmdLineArgs=args;
  setTitle(""String_Node_Str"");
  setIconImage(GUIUtil.getImage(""String_Node_Str""));
  setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
  addWindowListener(new CloseListener());
  menuBar=Platform.getPlatform().getMenuBar(this);
  setJMenuBar(menuBar);
  JPanel contentPane=new JPanel();
  double[][] cellSizen={{5,200,5,TableLayout.FILL,5},{3,TableLayout.FILL,5}};
  contentPane.setLayout(new TableLayout(cellSizen));
  setContentPane(contentPane);
  leftSidebar=new LeftSidebar(this);
  contentPane.add(leftSidebar,""String_Node_Str"");
  mainPanel=new MainPanel(this);
  contentPane.add(mainPanel,""String_Node_Str"");
  setPreferredSize(new Dimension(1024,723));
  pack();
  leftSidebar.selectMyMusic();
  guiConfig=(GuiConfig)control.getConfig(""String_Node_Str"");
  addListeners();
}","public RobonoboFrame(RobonoboController control,String[] args){
  this.control=control;
  this.cmdLineArgs=args;
  setTitle(""String_Node_Str"");
  setIconImage(GuiUtil.getImage(""String_Node_Str""));
  setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
  addWindowListener(new CloseListener());
  menuBar=Platform.getPlatform().getMenuBar(this);
  setJMenuBar(menuBar);
  JPanel contentPane=new JPanel();
  double[][] cellSizen={{5,200,5,TableLayout.FILL,5},{3,TableLayout.FILL,5}};
  contentPane.setLayout(new TableLayout(cellSizen));
  setContentPane(contentPane);
  leftSidebar=new LeftSidebar(this);
  contentPane.add(leftSidebar,""String_Node_Str"");
  mainPanel=new MainPanel(this);
  contentPane.add(mainPanel,""String_Node_Str"");
  setPreferredSize(new Dimension(1024,723));
  pack();
  leftSidebar.selectMyMusic();
  guiConfig=(GuiConfig)control.getConfig(""String_Node_Str"");
  addListeners();
}",0.9977802441731408
6949,"public static Image getRobonoboIconImage(){
  return GUIUtil.getImage(""String_Node_Str"");
}","public static Image getRobonoboIconImage(){
  return GuiUtil.getImage(""String_Node_Str"");
}",0.978021978021978
6950,"public NewPlaylistContentPanel(RobonoboFrame frame){
  super(frame,new Playlist(),new PlaylistConfig(),new NewPlaylistTableModel(frame.getController()));
  showMessage(""String_Node_Str"",""String_Node_Str"");
}","public NewPlaylistContentPanel(RobonoboFrame frame){
  super(frame,new Playlist(),new PlaylistConfig(),new NewPlaylistTableModel(frame.getController()));
  SwingUtilities.invokeLater(new CatchingRunnable(){
    public void doRun() throws Exception {
      showMessage(""String_Node_Str"",""String_Node_Str"");
    }
  }
);
}",0.7855787476280834
6951,"@Override public boolean dispatchKeyEvent(KeyEvent e){
  int code=e.getKeyCode();
  int modifiers=e.getModifiers();
  if (code == KeyEvent.VK_ESCAPE) {
    if (isShowingSheet()) {
      discardTopSheet();
      return true;
    }
  }
  if (code == KeyEvent.VK_Q && modifiers == Platform.getPlatform().getCommandModifierMask()) {
    shutdown();
    return true;
  }
  return false;
}","@Override public boolean dispatchKeyEvent(KeyEvent e){
  int code=e.getKeyCode();
  int modifiers=e.getModifiers();
  if (code == KeyEvent.VK_ESCAPE) {
    if (isShowingSheet()) {
      discardTopSheet();
      return true;
    }
  }
  if (code == KeyEvent.VK_Q && modifiers == Platform.getPlatform().getCommandModifierMask()) {
    confirmThenShutdown();
    return true;
  }
  return false;
}",0.9832689832689832
6952,"public EndPoint getEndPointForTalkingTo(Node node){
  if (node.getLocal())   return myListenEp.toMsg();
  if (gatewayEp != null)   return gatewayEp.toMsg();
  if (localAddrIsPublic())   return myListenEp.toMsg();
  return null;
}","public EndPoint getEndPointForTalkingTo(Node node){
  if (node.getLocal())   return myListenEp.toMsg();
  return getPublicEndPoint();
}",0.6978021978021978
6953,"@Override protected PollingResult compareRemoteRevisionWith(AbstractProject<?,?> project,Launcher launcher,FilePath workspace,TaskListener listener,SCMRevisionState baseline) throws IOException, InterruptedException {
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  Date lastBuild=((SurroundSCMRevisionState)baseline).getDate();
  int lastBuildNum=((SurroundSCMRevisionState)baseline).getBuildNumber();
  Date now=new Date();
  File temporaryFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + lastBuildNum + ""String_Node_Str""+ scm_datetime_formatter.format(lastBuild)+ ""String_Node_Str""+ pluginVersion);
  double countChanges=determineChangeCount(launcher,workspace,listener,lastBuild,now,temporaryFile);
  if (countChanges == 0)   return PollingResult.NO_CHANGES;
 else   if (countChanges < changesThreshold)   return PollingResult.SIGNIFICANT;
  return PollingResult.BUILD_NOW;
}","@Override protected PollingResult compareRemoteRevisionWith(AbstractProject<?,?> project,Launcher launcher,FilePath workspace,TaskListener listener,SCMRevisionState baseline) throws IOException, InterruptedException {
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  Date lastBuild=((SurroundSCMRevisionState)baseline).getDate();
  int lastBuildNum=((SurroundSCMRevisionState)baseline).getBuildNumber();
  Date now=new Date();
  File temporaryFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  temporaryFile.deleteOnExit();
  listener.getLogger().println(""String_Node_Str"" + lastBuildNum + ""String_Node_Str""+ scm_datetime_formatter.format(lastBuild)+ ""String_Node_Str""+ pluginVersion);
  temporaryFile.delete();
  double countChanges=determineChangeCount(launcher,workspace,listener,lastBuild,now,temporaryFile);
  if (countChanges == 0)   return PollingResult.NO_CHANGES;
 else   if (countChanges < changesThreshold)   return PollingResult.SIGNIFICANT;
  return PollingResult.BUILD_NOW;
}",0.971596474045054
6954,"/** 
 * Create a windows style symbolic link, which is slightly different than the linux symbolic links. The commands that can be run in an mklink can be seen <a href=""http://technet.microsoft.com/en-us/library/cc753194(WS.10).aspx"">here</a>. This operation will only work on Windows Vista and up, attempting to use this on Windows XP and below will result in an exception and will perform a regular copy.
 * @param src       The source file
 * @param dest      The destination file
 * @param l         A copy progress listener to be used to listen to operations during the mklink/copy
 * @param overwrite A flag that if set to true, and the destination file already exists, then the operation willstop and the destination file will not be deleted.
 * @throws IOException Will be thrown should anything happen during the mklink process on the filesystem.
 */
public static void windowsSymlink(File src,File dest,CopyProgressListener l,boolean overwrite) throws IOException {
  try {
    if (dest.exists()) {
      if (!dest.isFile()) {
        throw new IOException(""String_Node_Str"" + dest);
      }
      if (!overwrite) {
        Message.verbose(dest + ""String_Node_Str"");
        return;
      }
    }
    if (dest.getParentFile() != null) {
      dest.getParentFile().mkdirs();
    }
    Runtime runtime=Runtime.getRuntime();
    Message.verbose(""String_Node_Str"" + src.getAbsolutePath() + ""String_Node_Str""+ dest.getPath()+ ""String_Node_Str"");
    Process process=runtime.exec(new String[]{""String_Node_Str"",src.getAbsolutePath(),dest.getPath()});
    if (process.waitFor() != 0) {
      InputStream errorStream=process.getErrorStream();
      InputStreamReader isr=new InputStreamReader(errorStream);
      BufferedReader br=new BufferedReader(isr);
      StringBuffer error=new StringBuffer();
      String line;
      while ((line=br.readLine()) != null) {
        error.append(line);
        error.append('\n');
      }
      throw new IOException(""String_Node_Str"" + src + ""String_Node_Str""+ dest+ ""String_Node_Str""+ error);
    }
    if (!dest.exists()) {
      throw new IOException(""String_Node_Str"" + dest + ""String_Node_Str"");
    }
    if (dest.getAbsolutePath().equals(dest.getCanonicalPath())) {
      dest.delete();
      throw new IOException(""String_Node_Str"" + dest + ""String_Node_Str"");
    }
  }
 catch (  IOException x) {
    Message.verbose(""String_Node_Str"");
    StringWriter buffer=new StringWriter();
    x.printStackTrace(new PrintWriter(buffer));
    Message.debug(buffer.toString());
    FileUtil.copy(src,dest,l,overwrite);
  }
catch (  InterruptedException x) {
    Thread.currentThread().interrupt();
  }
}","/** 
 * Create a windows style symbolic link, which is slightly different than the linux symbolic links. The commands that can be run in an mklink can be seen <a href=""http://technet.microsoft.com/en-us/library/cc753194(WS.10).aspx"">here</a>. This operation will only work on Windows Vista and up, attempting to use this on Windows XP and below will result in an exception and will perform a regular copy.
 * @param src       The source file
 * @param dest      The destination file
 * @param l         A copy progress listener to be used to listen to operations during the mklink/copy
 * @param overwrite A flag that if set to true, and the destination file already exists, then the operation willstop and the destination file will not be deleted.
 * @throws IOException Will be thrown should anything happen during the mklink process on the filesystem.
 */
public static void windowsSymlink(File src,File dest,CopyProgressListener l,boolean overwrite) throws IOException {
  try {
    if (dest.exists()) {
      if (!dest.isFile()) {
        throw new IOException(""String_Node_Str"" + dest);
      }
      if (!overwrite) {
        Message.verbose(dest + ""String_Node_Str"");
        return;
      }
    }
    if (dest.getParentFile() != null) {
      dest.getParentFile().mkdirs();
    }
    if (!mklinkWorks) {
      FileUtil.copy(src,dest,l,overwrite);
    }
 else {
      Runtime runtime=Runtime.getRuntime();
      Message.verbose(""String_Node_Str"" + src.getAbsolutePath() + ""String_Node_Str""+ dest.getPath()+ ""String_Node_Str"");
      Process process=runtime.exec(new String[]{""String_Node_Str"",src.getAbsolutePath(),dest.getPath()});
      if (process.waitFor() != 0) {
        InputStream errorStream=process.getErrorStream();
        InputStreamReader isr=new InputStreamReader(errorStream);
        BufferedReader br=new BufferedReader(isr);
        StringBuffer error=new StringBuffer();
        String line;
        while ((line=br.readLine()) != null) {
          error.append(line);
          error.append('\n');
        }
        throw new IOException(""String_Node_Str"" + src + ""String_Node_Str""+ dest+ ""String_Node_Str""+ error);
      }
      if (!dest.exists()) {
        throw new IOException(""String_Node_Str"" + dest + ""String_Node_Str"");
      }
      if (dest.getAbsolutePath().equals(dest.getCanonicalPath())) {
        dest.delete();
        throw new IOException(""String_Node_Str"" + dest + ""String_Node_Str"");
      }
    }
  }
 catch (  IOException x) {
    if (mklinkWorks) {
      Message.info(""String_Node_Str"");
      mklinkWorks=false;
    }
    StringWriter buffer=new StringWriter();
    x.printStackTrace(new PrintWriter(buffer));
    Message.debug(buffer.toString());
    FileUtil.copy(src,dest,l,overwrite);
  }
catch (  InterruptedException x) {
    Thread.currentThread().interrupt();
  }
}",0.9638025594149908
6955,"public WharfUrlResource(Resource resource){
  if (resource instanceof FileResource) {
    try {
      url=((FileResource)resource).getFile().toURI().toURL();
    }
 catch (    MalformedURLException e) {
      throw new IllegalArgumentException(""String_Node_Str"",e);
    }
  }
 else   if (resource instanceof URLResource) {
    url=((URLResource)resource).getURL();
  }
 else   if (resource instanceof WharfUrlResource) {
    try {
      url=new URL(resource.getName());
    }
 catch (    MalformedURLException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public WharfUrlResource(Resource resource){
  if (resource instanceof FileResource) {
    try {
      url=((FileResource)resource).getFile().toURI().toURL();
    }
 catch (    MalformedURLException e) {
      throw new IllegalArgumentException(""String_Node_Str"",e);
    }
  }
 else   if (resource instanceof URLResource) {
    url=((URLResource)resource).getURL();
  }
 else   if (resource instanceof WharfUrlResource) {
    WharfUrlResource wharfUrlResource=(WharfUrlResource)resource;
    this.url=wharfUrlResource.url;
    this.init=wharfUrlResource.init;
    this.lastModified=wharfUrlResource.lastModified;
    this.contentLength=wharfUrlResource.contentLength;
    this.exists=wharfUrlResource.exists;
    this.sha1=wharfUrlResource.sha1;
    this.md5=wharfUrlResource.md5;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.6295302013422819
6956,"public static ObjectBuffer createModuleRevisionMetadataObjectBuffer(Class<ModuleRevisionMetadata> mrmClazz){
  Kryo kryo=new Kryo();
  kryo.register(mrmClazz);
  kryo.register(HashSet.class);
  kryo.register(ArtifactMetadata.class);
  ObjectBuffer buffer=new ObjectBuffer(kryo);
  return buffer;
}","public static ObjectBuffer createModuleRevisionMetadataObjectBuffer(Class<ModuleRevisionMetadata> mrmClazz){
  Kryo kryo=new Kryo();
  kryo.register(mrmClazz);
  kryo.register(ArtifactMetadata.class);
  kryo.register(HashSet.class);
  ObjectBuffer buffer=new ObjectBuffer(kryo);
  return buffer;
}",0.8619528619528619
6957,"@Override public void save(File baseDir,Set<WharfResolverMetadata> wharfResolverMetadatas){
  File resolversFile=new File(baseDir,RESOLVERS_FILE_PATH);
  if (resolversFile.exists()) {
    OutputStream stream=null;
    try {
      stream=new FileOutputStream(resolversFile);
      ObjectBuffer buffer=KryoFactory.createWharfResolverObjectBuffer(WharfResolverMetadata.class);
      buffer.writeObject(stream,wharfResolverMetadatas);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if ((stream != null)) {
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}","@Override public void save(File baseDir,Set<WharfResolverMetadata> wharfResolverMetadatas){
  File resolversFile=new File(baseDir,RESOLVERS_FILE_PATH);
  OutputStream stream=null;
  try {
    stream=new FileOutputStream(resolversFile);
    ObjectBuffer buffer=KryoFactory.createWharfResolverObjectBuffer(WharfResolverMetadata.class);
    buffer.writeObject(stream,wharfResolverMetadatas);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if ((stream != null)) {
      try {
        stream.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.8915470494417863
6958,"public EntityWidget(ObjectScene s,Entity e){
  super(s);
  ent=e;
  imageWidget=new ImageWidget(s);
  addChild(imageWidget);
  setupToMatchEntity(e);
  moveToEntityPosition(ent);
  getActions().addAction(s.createSelectAction());
  getActions().addAction(ActionFactory.createMoveAction(ActionFactory.createSnapToGridMoveStrategy(6,6),new ObjectSceneAllSelectedMoveProvider(s)));
  e.addPropertyChangeListener(this);
}","public EntityWidget(ObjectScene s,Entity e){
  super(s);
  ent=e;
  imageWidget=new ImageWidget(s);
  addChild(imageWidget);
  setupToMatchEntity(e);
  moveToEntityPosition(ent);
  repaint();
  getActions().addAction(s.createSelectAction());
  getActions().addAction(ActionFactory.createMoveAction(ActionFactory.createSnapToGridMoveStrategy(6,6),new ObjectSceneAllSelectedMoveProvider(s)));
  e.addPropertyChangeListener(this);
}",0.9846153846153848
6959,"@Override public void entityAdded(GameMap m,Entity e){
  EntityWidget w=new EntityWidget(scene,e);
  scene.addChild(w);
  scene.repaint();
  scene.addObject(e,w);
}","@Override public void entityAdded(GameMap m,Entity e){
  EntityWidget w=new EntityWidget(scene,e);
  scene.addChild(w);
  scene.validate();
  scene.addObject(e,w);
}",0.96048632218845
6960,"@Override public EntityType[] getEntityTypes(){
  ObjectMapper mapper=new ObjectMapper();
  SimpleModule imageLoadingModule=new SimpleModule(""String_Node_Str"",new Version(1,0,0,null));
  imageLoadingModule.addDeserializer(Image.class,new FilenameToImageDeserializer());
  mapper.registerModule(imageLoadingModule);
  List<EntityType> entTypes=null;
  try {
    entTypes=mapper.readValue(new File(""String_Node_Str""),new TypeReference<List<EntityType>>(){
    }
);
  }
 catch (  JsonParseException ex) {
    IOProvider.getDefault().getIO(""String_Node_Str"",false).getOut().println(""String_Node_Str"");
  }
catch (  JsonMappingException ex) {
    IOProvider.getDefault().getIO(""String_Node_Str"",false).getOut().println(""String_Node_Str"" + ex.getLocalizedMessage());
  }
catch (  IOException ex) {
    IOProvider.getDefault().getIO(""String_Node_Str"",false).getOut().println(""String_Node_Str"");
  }
  if (entTypes == null)   return new EntityType[]{};
  IOProvider.getDefault().getIO(""String_Node_Str"",false).getOut().println(""String_Node_Str"" + entTypes.size() + ""String_Node_Str""+ (entTypes.size() > 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  return entTypes.toArray(new EntityType[]{});
}","@Override public EntityType[] getEntityTypes(){
  ObjectMapper mapper=new ObjectMapper();
  SimpleModule imageLoadingModule=new SimpleModule(""String_Node_Str"",new Version(1,0,0,null));
  imageLoadingModule.addDeserializer(Image.class,new FilenameToImageDeserializer());
  mapper.registerModule(imageLoadingModule);
  mapper.getJsonFactory().configure(Feature.ALLOW_COMMENTS,true).configure(Feature.ALLOW_UNQUOTED_FIELD_NAMES,true);
  List<EntityType> entTypes=null;
  try {
    entTypes=mapper.readValue(new File(""String_Node_Str""),new TypeReference<List<EntityType>>(){
    }
);
  }
 catch (  JsonParseException ex) {
    IOProvider.getDefault().getIO(""String_Node_Str"",false).getOut().println(""String_Node_Str"");
  }
catch (  JsonMappingException ex) {
    IOProvider.getDefault().getIO(""String_Node_Str"",false).getOut().println(""String_Node_Str"" + ex.getLocalizedMessage());
  }
catch (  IOException ex) {
    IOProvider.getDefault().getIO(""String_Node_Str"",false).getOut().println(""String_Node_Str"");
  }
  if (entTypes == null)   return new EntityType[]{};
  IOProvider.getDefault().getIO(""String_Node_Str"",false).getOut().println(""String_Node_Str"" + entTypes.size() + ""String_Node_Str""+ (entTypes.size() > 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  return entTypes.toArray(new EntityType[]{});
}",0.9537732121691032
6961,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  m_app=(XMMS2DroidApp)getApplication();
  m_netModule=m_app.netModule;
  setContentView(R.layout.connected);
  m_stopButton=(Button)findViewById(R.id.stopButton);
  m_stopButton.setOnClickListener(stopListener);
  m_playPauseButton=(Button)findViewById(R.id.playPauseButton);
  m_playPauseButton.setOnClickListener(playPauseListener);
  m_volumeBar=(SeekBar)findViewById(R.id.volumeBar);
  m_volumeBar.setOnSeekBarChangeListener(changeVolumeListener);
  m_nextButton=(Button)findViewById(R.id.next);
  m_nextButton.setOnClickListener(nextListener);
  m_prevButton=(Button)findViewById(R.id.prev);
  m_prevButton.setOnClickListener(prevListener);
  m_volumeView=(TextView)findViewById(R.id.volume);
  m_artistView=(TextView)findViewById(R.id.artist);
  m_titleView=(TextView)findViewById(R.id.track);
  m_playListView=(ListView)findViewById(R.id.playlist);
  m_playListView.setClickable(true);
  m_playListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  m_playDrawable=getResources().getDrawable(R.drawable.play);
  m_pauseDrawable=getResources().getDrawable(R.drawable.pause);
  new Thread(readerTask).start();
  sayHello();
  updatePlaylist();
  updateVolume();
  updatePlaybackStatus();
  updatePlayingTrack();
  registerPlayBackUpdate();
  registerTrackUpdate();
  m_playListAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,m_playList);
  m_playListView.setAdapter(m_playListAdapter);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.w(XMMS2DroidApp.TAG,""String_Node_Str"");
  m_app=(XMMS2DroidApp)getApplication();
  m_netModule=m_app.netModule;
  setContentView(R.layout.connected);
  m_stopButton=(Button)findViewById(R.id.stopButton);
  m_stopButton.setOnClickListener(stopListener);
  m_playPauseButton=(Button)findViewById(R.id.playPauseButton);
  m_playPauseButton.setOnClickListener(playPauseListener);
  m_volumeBar=(SeekBar)findViewById(R.id.volumeBar);
  m_volumeBar.setOnSeekBarChangeListener(changeVolumeListener);
  m_nextButton=(Button)findViewById(R.id.next);
  m_nextButton.setOnClickListener(nextListener);
  m_prevButton=(Button)findViewById(R.id.prev);
  m_prevButton.setOnClickListener(prevListener);
  m_volumeView=(TextView)findViewById(R.id.volume);
  m_artistView=(TextView)findViewById(R.id.artist);
  m_titleView=(TextView)findViewById(R.id.track);
  m_playListView=(ListView)findViewById(R.id.playlist);
  m_playListView.setClickable(true);
  m_playListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  m_playDrawable=getResources().getDrawable(R.drawable.play);
  m_pauseDrawable=getResources().getDrawable(R.drawable.pause);
}",0.861851332398317
6962,"@Override public void run(){
  m_readHandler=new ReadHandler(m_netModule);
  while (true) {
    if (m_readHandler.readMsg()) {
      ByteBuffer recHeader=m_readHandler.getHeader();
      ByteBuffer recMsg=m_readHandler.getMsg();
      ServerMsg parsed=XmmsMsgParser.parseMsg(recHeader,recMsg);
      handleMessage(parsed);
      m_readHandler.clear();
    }
  }
}","@Override public void run(){
  m_readHandler=new ReadHandler(m_netModule);
  while (running) {
    if (m_readHandler.readMsg()) {
      ByteBuffer recHeader=m_readHandler.getHeader();
      ByteBuffer recMsg=m_readHandler.getMsg();
      ServerMsg parsed=XmmsMsgParser.parseMsg(recHeader,recMsg);
      handleMessage(parsed);
      m_readHandler.clear();
    }
  }
}",0.9849108367626886
6963,"private void handleTrackInfoMsg(ServerTrackInfoMsg msg){
  HashMap<String,Object> artistMap=msg.getTrackInfo().get(""String_Node_Str"");
  String pluginKey=""String_Node_Str"";
  String artist=""String_Node_Str"";
  for (  Entry<String,Object> artistEntry : artistMap.entrySet()) {
    if (artistEntry.getKey().startsWith(""String_Node_Str"")) {
      artist=(String)artistEntry.getValue();
      pluginKey=artistEntry.getKey();
    }
  }
  final String song=(String)msg.getTrackInfo().get(""String_Node_Str"").get(pluginKey);
  if (!msg.getPlayListInfo()) {
    m_curArtist=artist;
    m_curSong=song;
    runOnUiThread(updateTrackDisplay);
  }
 else {
    int id=(Integer)msg.getTrackInfo().get(""String_Node_Str"").get(""String_Node_Str"");
    m_tracks.put(id,artist + ""String_Node_Str"" + song);
    runOnUiThread(updatePlayListDisplay);
  }
}","private void handleTrackInfoMsg(ServerTrackInfoMsg msg){
  HashMap<String,Object> infoMap=msg.getTrackInfo().get(""String_Node_Str"");
  String artist=""String_Node_Str"";
  String pluginKey=""String_Node_Str"";
  if (infoMap != null) {
    for (    Entry<String,Object> artistEntry : infoMap.entrySet()) {
      if (artistEntry.getKey().startsWith(""String_Node_Str"")) {
        artist=(String)artistEntry.getValue();
        pluginKey=artistEntry.getKey();
      }
    }
  }
  String song=""String_Node_Str"";
  infoMap=msg.getTrackInfo().get(""String_Node_Str"");
  if (infoMap != null) {
    song=(String)infoMap.get(pluginKey);
    if (song == null) {
      for (      Entry<String,Object> artistEntry : infoMap.entrySet()) {
        if (artistEntry.getKey().startsWith(""String_Node_Str"")) {
          artist=(String)artistEntry.getValue();
          pluginKey=artistEntry.getKey();
        }
      }
    }
  }
  if (!msg.getPlayListInfo()) {
    m_curArtist=artist;
    m_curSong=song;
    runOnUiThread(updateTrackDisplay);
  }
 else {
    int id=(Integer)msg.getTrackInfo().get(""String_Node_Str"").get(""String_Node_Str"");
    StringBuilder sb=new StringBuilder();
    if (artist != null)     sb.append(artist);
    if (song != null) {
      if (sb.length() > 0)       sb.append(""String_Node_Str"");
      sb.append(song);
    }
    m_tracks.put(id,sb.toString());
    runOnUiThread(updatePlayListDisplay);
  }
}",0.6449307726663689
6964,"private static ServerTrackInfoMsg parseTrackInfoMsg(ByteBuffer msg){
  msg.flip();
  msg.getInt();
  HashMap<String,HashMap<String,Object>> trackInfo=DictParser.parseTrackInfo(msg);
  return new ServerTrackInfoMsg(SrvMsgTypes.TRACKINFO_MSG,trackInfo);
}","private static ServerMsg parseTrackInfoMsg(ByteBuffer msg){
  if (msg.capacity() == 21) {
    return new ServerMsg(SrvMsgTypes.UNKNOWN);
  }
  msg.flip();
  msg.getInt();
  HashMap<String,HashMap<String,Object>> trackInfo=DictParser.parseTrackInfo(msg);
  return new ServerTrackInfoMsg(SrvMsgTypes.TRACKINFO_MSG,trackInfo);
}",0.8442906574394463
6965,"public ResponseStatus handleResponse(Player p,String r){
  SpoutPlayer player=(SpoutPlayer)p;
  int optionOffset=0;
  if (MenuMetaMod.debug)   System.out.println(""String_Node_Str"" + r);
  InGameHUD main=null;
  if (player.isSpoutCraftEnabled()) {
    main=player.getMainScreen();
    if (r.equalsIgnoreCase(""String_Node_Str"")) {
      if (main.getActivePopup() != null) {
        player.closeActiveWindow();
      }
      return ResponseStatus.HandledFinished;
    }
  }
  if (isNumber(r)) {
    if (player.isSpoutCraftEnabled()) {
      if (main.getActivePopup() != null) {
        player.closeActiveWindow();
      }
 else       return ResponseStatus.NotHandled;
    }
    int response=Integer.valueOf(r).intValue();
    if (response == 0)     response=10;
    if (pages > page && response == 10) {
      sendPage(player,page + 1);
      return ResponseStatus.Handled;
    }
 else     if (page > 1 && response == 9) {
      sendPage(player,page - 1);
      return ResponseStatus.Handled;
    }
 else     if (pages == page && response == 10) {
      return ResponseStatus.HandledFinished;
    }
    if (page > 1) {
      optionOffset=9;
      optionOffset+=((page - 2) * 8);
    }
    if (commands.length < (optionOffset + response - 1))     return ResponseStatus.NotHandled;
 else {
      String[] comArray={commands[optionOffset + response - 1]};
      if (commands[optionOffset + response - 1].contains(""String_Node_Str"")) {
        comArray=commands[optionOffset + response - 1].split(""String_Node_Str"");
      }
      MenuMetaMod.plugin.scheduler.scheduleSyncDelayedTask(MenuMetaMod.plugin,new CommandRunner(player,comArray),5);
      return ResponseStatus.HandledFinished;
    }
  }
  return ResponseStatus.NotHandled;
}","public ResponseStatus handleResponse(Player p,String r){
  SpoutPlayer player=(SpoutPlayer)p;
  int optionOffset=0;
  if (MenuMetaMod.debug)   System.out.println(""String_Node_Str"" + r);
  InGameHUD main=null;
  if (player.isSpoutCraftEnabled()) {
    main=player.getMainScreen();
    if (r.equalsIgnoreCase(""String_Node_Str"")) {
      if (main.getActivePopup() != null) {
        player.closeActiveWindow();
      }
      return ResponseStatus.HandledFinished;
    }
  }
  if (isNumber(r)) {
    if (player.isSpoutCraftEnabled()) {
      if (main.getActivePopup() != null) {
        player.closeActiveWindow();
      }
 else       return ResponseStatus.NotHandled;
    }
    int response=Integer.valueOf(r).intValue();
    if (response == 0)     response=10;
    if (pages > page && response == 10) {
      sendPage(player,page + 1);
      return ResponseStatus.Handled;
    }
 else     if (page > 1 && response == 9) {
      sendPage(player,page - 1);
      return ResponseStatus.Handled;
    }
 else     if (pages == page && response == 10) {
      return ResponseStatus.HandledFinished;
    }
    if (page > 1) {
      optionOffset=9;
      optionOffset+=((page - 2) * 8);
    }
    if ((optionOffset + response) > commands.length)     return ResponseStatus.NotHandled;
 else {
      String[] comArray={commands[optionOffset + response - 1]};
      if (commands[optionOffset + response - 1].contains(""String_Node_Str"")) {
        comArray=commands[optionOffset + response - 1].split(""String_Node_Str"");
      }
      MenuMetaMod.plugin.scheduler.scheduleSyncDelayedTask(MenuMetaMod.plugin,new CommandRunner(player,comArray),5);
      return ResponseStatus.HandledFinished;
    }
  }
  return ResponseStatus.NotHandled;
}",0.982608695652174
6966,"public ResponseStatus handleResponse(Player p,String r){
  System.out.println(""String_Node_Str"" + p.getDisplayName() + ""String_Node_Str""+ r);
  SpoutPlayer player=(SpoutPlayer)p;
  int optionOffset=0;
  if (MenuMetaMod.debug)   System.out.println(""String_Node_Str"" + r);
  InGameHUD main=null;
  if (player.isSpoutCraftEnabled()) {
    main=player.getMainScreen();
    if (r.equalsIgnoreCase(""String_Node_Str"")) {
      if (main.getActivePopup() != null) {
        player.closeActiveWindow();
      }
      return ResponseStatus.HandledFinished;
    }
  }
  if (valuesPending.get(player) != null) {
    String value=r;
    String[] comArray=valuesPending.get(player);
    for (    String command : comArray) {
      command=getCommand(player,command);
      command=command.replaceAll(""String_Node_Str"",value);
      if (MenuMetaMod.debug)       player.sendMessage(""String_Node_Str"" + command);
      player.performCommand(command);
    }
    valuesPending.remove(player);
    if (player.isSpoutCraftEnabled()) {
      main=player.getMainScreen();
      if (main.getActivePopup() != null) {
        player.closeActiveWindow();
      }
    }
    return ResponseStatus.HandledFinished;
  }
  if (isNumber(r)) {
    if (player.isSpoutCraftEnabled()) {
      if (main.getActivePopup() != null) {
        player.closeActiveWindow();
      }
 else       return ResponseStatus.NotHandled;
    }
    int response=Integer.valueOf(r).intValue();
    if (response == 0)     response=10;
    if (pages > page && response == 10) {
      sendPage(player,page + 1);
      return ResponseStatus.Handled;
    }
 else     if (page > 1 && response == 9) {
      sendPage(player,page - 1);
      return ResponseStatus.Handled;
    }
 else     if (pages == page && response == 10) {
      return ResponseStatus.HandledFinished;
    }
    if (page > 1) {
      optionOffset=9;
      optionOffset+=((page - 2) * 8);
    }
    if (commands.length < (optionOffset + response - 1))     return ResponseStatus.NotHandled;
 else {
      String[] comArray={commands[optionOffset + response - 1]};
      if (commands[optionOffset + response - 1].contains(""String_Node_Str"")) {
        comArray=commands[optionOffset + response - 1].split(""String_Node_Str"");
      }
      valuesPending.put(player,comArray);
      MenuMetaMod.plugin.scheduler.scheduleSyncDelayedTask(MenuMetaMod.plugin,new QuestionSender(player,this),5);
      if (sendQuestion(player))       return ResponseStatus.Handled;
    }
  }
  return ResponseStatus.NotHandled;
}","public ResponseStatus handleResponse(Player p,String r){
  System.out.println(""String_Node_Str"" + p.getDisplayName() + ""String_Node_Str""+ r);
  SpoutPlayer player=(SpoutPlayer)p;
  int optionOffset=0;
  if (MenuMetaMod.debug)   System.out.println(""String_Node_Str"" + r);
  InGameHUD main=null;
  if (player.isSpoutCraftEnabled()) {
    main=player.getMainScreen();
    if (r.equalsIgnoreCase(""String_Node_Str"")) {
      if (main.getActivePopup() != null) {
        ValueMenu.inputTextFields.remove(p);
        player.closeActiveWindow();
      }
      return ResponseStatus.HandledFinished;
    }
  }
  if (valuesPending.get(player) != null) {
    String value=r;
    String[] comArray=valuesPending.get(player);
    for (    String command : comArray) {
      command=getCommand(player,command);
      command=command.replaceAll(""String_Node_Str"",value);
      if (MenuMetaMod.debug)       player.sendMessage(""String_Node_Str"" + command);
      player.performCommand(command);
    }
    valuesPending.remove(player);
    if (player.isSpoutCraftEnabled()) {
      main=player.getMainScreen();
      if (main.getActivePopup() != null) {
        ValueMenu.inputTextFields.remove(p);
        player.closeActiveWindow();
      }
    }
    return ResponseStatus.HandledFinished;
  }
  if (isNumber(r)) {
    if (player.isSpoutCraftEnabled()) {
      if (main.getActivePopup() != null) {
        ValueMenu.inputTextFields.remove(p);
        player.closeActiveWindow();
      }
 else       return ResponseStatus.NotHandled;
    }
    int response=Integer.valueOf(r).intValue();
    if (response == 0)     response=10;
    if (pages > page && response == 10) {
      sendPage(player,page + 1);
      return ResponseStatus.Handled;
    }
 else     if (page > 1 && response == 9) {
      sendPage(player,page - 1);
      return ResponseStatus.Handled;
    }
 else     if (pages == page && response == 10) {
      return ResponseStatus.HandledFinished;
    }
    if (page > 1) {
      optionOffset=9;
      optionOffset+=((page - 2) * 8);
    }
    if ((optionOffset + response) > commands.length)     return ResponseStatus.NotHandled;
 else {
      String[] comArray={commands[optionOffset + response - 1]};
      if (commands[optionOffset + response - 1].contains(""String_Node_Str"")) {
        comArray=commands[optionOffset + response - 1].split(""String_Node_Str"");
      }
      valuesPending.put(player,comArray);
      MenuMetaMod.plugin.scheduler.scheduleSyncDelayedTask(MenuMetaMod.plugin,new QuestionSender(player,this),5);
      if (sendQuestion(player))       return ResponseStatus.Handled;
    }
  }
  return ResponseStatus.NotHandled;
}",0.9620991253644317
6967,"public void onTypingFinished(){
  MenuMetaModPlayerManager.onPlayerResponse(player,this.getText());
}","public void onTypingFinished(){
  System.out.println(""String_Node_Str"" + this.getText());
  MenuMetaModPlayerManager.onPlayerResponse(player,this.getText());
}",0.7769230769230769
6968,"public void testAddTestsAndExitOnFailureWithLocalServer() throws Exception {
  List<String> tests=tests();
  ActionSequenceBuilder builder=new ActionSequenceBuilder(new ActionFactory(null,Collections.<TestsPreProcessor>emptySet(),SlaveBrowser.TIMEOUT,Collections.<AuthStrategy>emptySet(),false,null,null),null,null,new BrowserActionExecutorAction(null,null,null,null,null,0,null,null),new FailureCheckerAction(null,null),new UploadAction(null),new CapturedBrowsers(new BrowserIdStrategy(new MockTime(0))),null,newConfigureProxyActionFactory());
  List<Class<? extends Action>> expectedActions=new ArrayList<Class<? extends Action>>();
  expectedActions.add(ServerStartupAction.class);
  expectedActions.add(ConfigureProxyAction.class);
  expectedActions.add(UploadAction.class);
  expectedActions.add(BrowserActionExecutorAction.class);
  expectedActions.add(ServerShutdownAction.class);
  expectedActions.add(FailureCheckerAction.class);
  builder.withLocalServerPort(1001).usingFiles(files,false);
  List<Action> sequence=builder.addTests(tests).raiseOnFailure().build();
  assertSequence(expectedActions,sequence);
}","public void testAddTestsAndExitOnFailureWithLocalServer() throws Exception {
  List<String> tests=tests();
  ActionSequenceBuilder builder=new ActionSequenceBuilder(new ActionFactory(null,Collections.<TestsPreProcessor>emptySet(),SlaveBrowser.TIMEOUT,Collections.<AuthStrategy>emptySet(),false,null,null),null,null,new BrowserActionExecutorAction(null,null,null,null,null,0,null,null),new FailureCheckerAction(null,null),new UploadAction(null),new CapturedBrowsers(new BrowserIdStrategy(new MockTime(0))),null,newConfigureProxyActionFactory(),null);
  List<Class<? extends Action>> expectedActions=new ArrayList<Class<? extends Action>>();
  expectedActions.add(ServerStartupAction.class);
  expectedActions.add(ConfigureProxyAction.class);
  expectedActions.add(UploadAction.class);
  expectedActions.add(BrowserActionExecutorAction.class);
  expectedActions.add(ServerShutdownAction.class);
  expectedActions.add(FailureCheckerAction.class);
  builder.withLocalServerPort(1001).usingFiles(files,false);
  List<Action> sequence=builder.addTests(tests).raiseOnFailure().build();
  assertSequence(expectedActions,sequence);
}",0.9977708426214892
6969,"public void testNoBrowsers() throws Exception {
  List<String> tests=tests();
  ActionSequenceBuilder builder=new ActionSequenceBuilder(new ActionFactory(null,Collections.<TestsPreProcessor>emptySet(),SlaveBrowser.TIMEOUT,Collections.<AuthStrategy>emptySet(),false,null,new NullPathPrefix()),null,null,new BrowserActionExecutorAction(null,null,null,null,null,0,null,null),new FailureCheckerAction(null,null),new UploadAction(null),new CapturedBrowsers(new BrowserIdStrategy(new MockTime(0))),null,newConfigureProxyActionFactory());
  List<Action> actions=builder.addTests(tests).withLocalServerPort(999).usingFiles(files,false).build();
  List<Class<? extends Action>> expectedActions=new ArrayList<Class<? extends Action>>();
  expectedActions.add(ServerStartupAction.class);
  expectedActions.add(ConfigureProxyAction.class);
  expectedActions.add(UploadAction.class);
  expectedActions.add(BrowserActionExecutorAction.class);
  expectedActions.add(ServerShutdownAction.class);
  this.<Action>assertSequence(expectedActions,actions);
}","public void testNoBrowsers() throws Exception {
  List<String> tests=tests();
  ActionSequenceBuilder builder=new ActionSequenceBuilder(new ActionFactory(null,Collections.<TestsPreProcessor>emptySet(),SlaveBrowser.TIMEOUT,Collections.<AuthStrategy>emptySet(),false,null,new NullPathPrefix()),null,null,new BrowserActionExecutorAction(null,null,null,null,null,0,null,null),new FailureCheckerAction(null,null),new UploadAction(null),new CapturedBrowsers(new BrowserIdStrategy(new MockTime(0))),null,newConfigureProxyActionFactory(),null);
  List<Action> actions=builder.addTests(tests).withLocalServerPort(999).usingFiles(files,false).build();
  List<Class<? extends Action>> expectedActions=new ArrayList<Class<? extends Action>>();
  expectedActions.add(ServerStartupAction.class);
  expectedActions.add(ConfigureProxyAction.class);
  expectedActions.add(UploadAction.class);
  expectedActions.add(BrowserActionExecutorAction.class);
  expectedActions.add(ServerShutdownAction.class);
  this.<Action>assertSequence(expectedActions,actions);
}",0.9975949975949976
6970,"public void testAddTestsWithLocalServer() throws Exception {
  List<String> tests=tests();
  ActionSequenceBuilder builder=new ActionSequenceBuilder(new ActionFactory(null,Collections.<TestsPreProcessor>emptySet(),SlaveBrowser.TIMEOUT,Collections.<AuthStrategy>emptySet(),false,null,null),null,null,new BrowserActionExecutorAction(null,null,null,null,null,0,null,null),new FailureCheckerAction(null,null),new UploadAction(null),new CapturedBrowsers(new BrowserIdStrategy(new MockTime(0))),null,newConfigureProxyActionFactory());
  List<Class<? extends Action>> expectedActions=new ArrayList<Class<? extends Action>>();
  expectedActions.add(ServerStartupAction.class);
  expectedActions.add(ConfigureProxyAction.class);
  expectedActions.add(UploadAction.class);
  expectedActions.add(BrowserActionExecutorAction.class);
  expectedActions.add(ServerShutdownAction.class);
  builder.withLocalServerPort(1001).usingFiles(files,false);
  List<Action> sequence=builder.addTests(tests).build();
  assertSequence(expectedActions,sequence);
}","public void testAddTestsWithLocalServer() throws Exception {
  List<String> tests=tests();
  ActionSequenceBuilder builder=new ActionSequenceBuilder(new ActionFactory(null,Collections.<TestsPreProcessor>emptySet(),SlaveBrowser.TIMEOUT,Collections.<AuthStrategy>emptySet(),false,null,null),null,null,new BrowserActionExecutorAction(null,null,null,null,null,0,null,null),new FailureCheckerAction(null,null),new UploadAction(null),new CapturedBrowsers(new BrowserIdStrategy(new MockTime(0))),null,newConfigureProxyActionFactory(),null);
  List<Class<? extends Action>> expectedActions=new ArrayList<Class<? extends Action>>();
  expectedActions.add(ServerStartupAction.class);
  expectedActions.add(ConfigureProxyAction.class);
  expectedActions.add(UploadAction.class);
  expectedActions.add(BrowserActionExecutorAction.class);
  expectedActions.add(ServerShutdownAction.class);
  builder.withLocalServerPort(1001).usingFiles(files,false);
  List<Action> sequence=builder.addTests(tests).build();
  assertSequence(expectedActions,sequence);
}",0.9975903614457832
6971,"public void testAddTestsWithRemoteServerAddress() throws Exception {
  List<String> tests=tests();
  ActionSequenceBuilder builder=new ActionSequenceBuilder(actionFactory,null,null,new BrowserActionExecutorAction(null,null,null,null,null,0,null,null),new FailureCheckerAction(null,null),new UploadAction(null),new CapturedBrowsers(new BrowserIdStrategy(new MockTime(0))),null,newConfigureProxyActionFactory());
  List<Class<? extends Action>> expectedActions=new ArrayList<Class<? extends Action>>();
  expectedActions.add(ConfigureProxyAction.class);
  expectedActions.add(UploadAction.class);
  expectedActions.add(BrowserActionExecutorAction.class);
  builder.usingFiles(files,false);
  List<Action> sequence=builder.addTests(tests).build();
  assertSequence(expectedActions,sequence);
}","public void testAddTestsWithRemoteServerAddress() throws Exception {
  List<String> tests=tests();
  ActionSequenceBuilder builder=new ActionSequenceBuilder(actionFactory,null,null,new BrowserActionExecutorAction(null,null,null,null,null,0,null,null),new FailureCheckerAction(null,null),new UploadAction(null),new CapturedBrowsers(new BrowserIdStrategy(new MockTime(0))),null,newConfigureProxyActionFactory(),null);
  List<Class<? extends Action>> expectedActions=new ArrayList<Class<? extends Action>>();
  expectedActions.add(ConfigureProxyAction.class);
  expectedActions.add(UploadAction.class);
  expectedActions.add(BrowserActionExecutorAction.class);
  builder.usingFiles(files,false);
  List<Action> sequence=builder.addTests(tests).build();
  assertSequence(expectedActions,sequence);
}",0.996845425867508
6972,"public long getHeartbeatTimeout(){
  return SlaveBrowser.TIMEOUT;
}","public long getHeartbeatTimeout(){
  return 10;
}",0.8103448275862069
6973,"public void stopBrowser(){
  started=false;
}","public void stopBrowser(){
}",0.7671232876712328
6974,"public int getTimeout(){
  return timeout;
}","public int getTimeout(){
  return 10;
}",0.891566265060241
6975,"public int getUploadSize(){
  return FileUploader.CHUNK_SIZE;
}","public int getUploadSize(){
  return 0;
}",0.7692307692307693
6976,"public void startBrowser(String serverAddress){
  this.serverAddress=serverAddress;
  started=true;
}","public void startBrowser(String serverAddress){
  this.serverAddress=serverAddress;
}",0.913978494623656
6977,"public void testParseFlagsAndCreateActionQueue() throws Exception {
  DefaultActionListProvider parser=createProvider(9876,false,Collections.<String>emptyList(),Collections.<ActionListProcessor>emptySet(),""String_Node_Str"",null);
  List<Action> actions=parser.get();
  ArrayList<Class<? extends Action>> expectedActions=new ArrayList<Class<? extends Action>>();
  expectedActions.add(ServerStartupAction.class);
  expectedActions.add(ConfigureProxyAction.class);
  expectedActions.add(UploadAction.class);
  assertSequence(expectedActions,actions);
}","public void testParseFlagsAndCreateActionQueue() throws Exception {
  DefaultActionListProvider provider=createProvider(9876,false,Collections.<String>emptyList(),Collections.<ActionListProcessor>emptySet(),""String_Node_Str"",null);
  List<Action> actions=provider.get();
  ArrayList<Class<? extends Action>> expectedActions=new ArrayList<Class<? extends Action>>();
  expectedActions.add(ServerStartupAction.class);
  expectedActions.add(ConfigureProxyAction.class);
  expectedActions.add(UploadAction.class);
  expectedActions.add(BrowserStartupAction.class);
  assertSequence(expectedActions,actions);
}",0.941991341991342
6978,"private DefaultActionListProvider createProvider(int port,boolean reset,List<String> tests,Set<ActionListProcessor> processors,String testOutput,XmlPrinter xmlPrinter){
  ActionFactory actionFactory=new ActionFactory(null,Collections.<TestsPreProcessor>emptySet(),SlaveBrowser.TIMEOUT,Collections.<AuthStrategy>emptySet(),false,null,null);
  return new DefaultActionListProvider(tests,Collections.<String>emptyList(),reset,Collections.<String>emptyList(),false,port,Collections.<FileInfo>emptySet(),testOutput,processors,xmlPrinter,new ActionSequenceBuilder(actionFactory,null,null,new BrowserActionExecutorAction(null,null,null,null,null,-1,null,null),new FailureCheckerAction(null,null),new UploadAction(null),new CapturedBrowsers(new BrowserIdStrategy(new MockTime(0))),null,newConfigureProxyActionFactory()),true);
}","private DefaultActionListProvider createProvider(int port,boolean reset,List<String> tests,Set<ActionListProcessor> processors,String testOutput,XmlPrinter xmlPrinter){
  ActionFactory actionFactory=new ActionFactory(null,Collections.<TestsPreProcessor>emptySet(),SlaveBrowser.TIMEOUT,Collections.<AuthStrategy>emptySet(),false,null,null);
  return new DefaultActionListProvider(tests,Collections.<String>emptyList(),reset,Collections.<String>emptyList(),false,port,Collections.<FileInfo>emptySet(),testOutput,processors,xmlPrinter,new ActionSequenceBuilder(actionFactory,null,null,new BrowserActionExecutorAction(null,null,null,null,null,-1,null,null),new FailureCheckerAction(null,null),new UploadAction(null),new CapturedBrowsers(new BrowserIdStrategy(new MockTime(0))),null,newConfigureProxyActionFactory(),new BrowserStartupAction(null,null,null,null,null)),true);
}",0.9698403311649912
6979,"public void testCall() throws Exception {
  String browserId=""String_Node_Str"";
  String serverAddress=""String_Node_Str"";
  final BrowserInfo browserInfo=new BrowserInfo();
  browserInfo.setId(Long.parseLong(browserId));
  browserInfo.setServerReceivedHeartbeat(true);
  final FakeJsTestDriverClient client=new FakeJsTestDriverClient(Lists.newArrayList(browserInfo));
  final FakeBrowserRunner runner=new FakeBrowserRunner();
  final FakeBrowserActionRunner browserActionRunner=new FakeBrowserActionRunner();
  final BrowserManagedRunner browserRunner=new BrowserManagedRunner(runner,browserId,serverAddress,client,browserActionRunner,new NullStopWatch());
  browserRunner.call();
}","public void testCall() throws Exception {
  String browserId=""String_Node_Str"";
  String serverAddress=""String_Node_Str"";
  final BrowserInfo browserInfo=new BrowserInfo();
  browserInfo.setId(Long.parseLong(browserId));
  browserInfo.setServerReceivedHeartbeat(true);
  final FakeJsTestDriverClient client=new FakeJsTestDriverClient(Lists.newArrayList(browserInfo));
  final FakeBrowserRunner runner=new FakeBrowserRunner();
  final FakeBrowserActionRunner browserActionRunner=new FakeBrowserActionRunner();
  final BrowserCallable<Collection<ResponseStream>> browserRunner=new BrowserCallable<Collection<ResponseStream>>(browserActionRunner,browserId,new BrowserControl(runner,serverAddress,new NullStopWatch(),client));
  browserRunner.call();
}",0.8769230769230769
6980,"private Factory newConfigureProxyActionFactory(){
  return new Factory(){
    public ConfigureProxyAction create(    JsonArray proxyConfig){
      return new ConfigureProxyAction(null,null,null,proxyConfig);
    }
  }
;
}","private Factory newConfigureProxyActionFactory(){
  return new Factory(){
    public ConfigureProxyAction create(    JsonArray proxyConfig){
      return new ConfigureProxyAction(null,null,null,null,proxyConfig);
    }
  }
;
}",0.988814317673378
6981,"public ConfigureProxyAction create(JsonArray proxyConfig){
  return new ConfigureProxyAction(null,null,null,proxyConfig);
}","public ConfigureProxyAction create(JsonArray proxyConfig){
  return new ConfigureProxyAction(null,null,null,null,proxyConfig);
}",0.9800796812749004
6982,"private Factory newConfigureProxyActionFactory(){
  return new Factory(){
    public ConfigureProxyAction create(    JsonArray proxyConfig){
      return new ConfigureProxyAction(null,null,null,proxyConfig);
    }
  }
;
}","private Factory newConfigureProxyActionFactory(){
  return new Factory(){
    public ConfigureProxyAction create(    JsonArray proxyConfig){
      return new ConfigureProxyAction(null,null,null,null,proxyConfig);
    }
  }
;
}",0.988814317673378
6983,"public ConfigureProxyAction create(JsonArray proxyConfig){
  return new ConfigureProxyAction(null,null,null,proxyConfig);
}","public ConfigureProxyAction create(JsonArray proxyConfig){
  return new ConfigureProxyAction(null,null,null,null,proxyConfig);
}",0.9800796812749004
6984,"public void testEscapeSlashes() throws Exception {
  StringWriter writer=new StringWriter();
  EscapingWriter escaper=new EscapingWriter(writer);
  escaper.write('\\');
  assertEquals(""String_Node_Str"",writer.toString());
}","public void testEscapeSlashes() throws Exception {
  StringWriter writer=new StringWriter();
  EscapingWriter escaper=new EscapingWriter(writer);
  escaper.write('\\');
  assertEquals(""String_Node_Str"",writer.toString());
  assertEquals(1,escaper.getEscapedCount('\\'));
}",0.901010101010101
6985,"public void testEscapeLineBreak() throws Exception {
  StringWriter writer=new StringWriter();
  EscapingWriter escaper=new EscapingWriter(writer);
  escaper.write('\n');
  assertEquals(""String_Node_Str"",writer.toString());
}","public void testEscapeLineBreak() throws Exception {
  StringWriter writer=new StringWriter();
  EscapingWriter escaper=new EscapingWriter(writer);
  escaper.write('\n');
  assertEquals(""String_Node_Str"",writer.toString());
  assertEquals(1,escaper.getEscapedCount('\n'));
}",0.9018036072144288
6986,"public void testEscapeQuotes() throws Exception {
  StringWriter writer=new StringWriter();
  EscapingWriter escaper=new EscapingWriter(writer);
  for (  char chr : ""String_Node_Str"".toCharArray()) {
    escaper.write(chr);
  }
  assertEquals(""String_Node_Str"",writer.toString());
}","public void testEscapeQuotes() throws Exception {
  StringWriter writer=new StringWriter();
  EscapingWriter escaper=new EscapingWriter(writer);
  for (  char chr : ""String_Node_Str"".toCharArray()) {
    escaper.write(chr);
  }
  assertEquals(""String_Node_Str"",writer.toString());
  assertEquals(1,escaper.getEscapedCount('""'));
}",0.9215686274509804
6987,"public void testAppend() throws Exception {
  String id=""String_Node_Str"";
  String html=""String_Node_Str"";
  Node node=new HtmlDocNestedNode(ConcreteToken.from(id),Lists.newArrayList(ConcreteToken.from(html)));
  StringWriter writer=new StringWriter();
  node.write(writer);
  assertEquals(String.format(""String_Node_Str"",html.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")),writer.toString());
}","public void testAppend() throws Exception {
  String id=""String_Node_Str"";
  String html=""String_Node_Str"";
  Node node=new HtmlDocNestedNode(ConcreteToken.from(id),Lists.newArrayList(ConcreteToken.from(html)));
  StringWriter writer=new StringWriter();
  node.write(writer);
  assertEquals(String.format(""String_Node_Str"",html.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")) + ""String_Node_Str"",writer.toString());
}",0.9777777777777776
6988,"public void testVariableAssignment() throws Exception {
  String id=""String_Node_Str"";
  String html=""String_Node_Str"";
  Node node=new HtmlDocNestedNode(ConcreteToken.from(id),Lists.newArrayList(ConcreteToken.from(html)));
  StringWriter writer=new StringWriter();
  node.write(writer);
  assertEquals(String.format(""String_Node_Str"",id,html.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")),writer.toString());
}","public void testVariableAssignment() throws Exception {
  String id=""String_Node_Str"";
  String html=""String_Node_Str"";
  Node node=new HtmlDocNestedNode(ConcreteToken.from(id),Lists.newArrayList(ConcreteToken.from(html)));
  StringWriter writer=new StringWriter();
  node.write(writer);
  assertEquals(String.format(""String_Node_Str"",id,html.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")) + ""String_Node_Str"",writer.toString());
}",0.978494623655914
6989,"@Override public void write(Writer writer){
  EscapingWriter escaping=new EscapingWriter(writer);
  try {
    if (id.contains('+')) {
      writer.write(JS_APPEND_HTML);
    }
 else {
      writer.write(JS_THIS);
      id.write(escaping);
      writer.write(JS_TO_HTML);
    }
    for (    Token fragment : html) {
      fragment.write(escaping);
    }
    writer.write(JS_ARG_SEP);
    writer.write(JS_END_STATEMENT);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public void write(Writer writer){
  EscapingWriter escaping=new EscapingWriter(writer);
  try {
    if (id.contains('+')) {
      writer.write(JS_APPEND_HTML);
    }
 else {
      writer.write(JS_THIS);
      id.write(escaping);
      writer.write(JS_TO_HTML);
    }
    for (    Token fragment : html) {
      fragment.write(escaping);
    }
    writer.write(JS_ARG_SEP);
    writer.write(JS_END_STATEMENT);
    for (int i=0; i < escaping.getEscapedCount('\n'); i++) {
      writer.append('\n');
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9124767225325884
6990,"public EscapingWriter(Writer out){
  super(out);
}","public EscapingWriter(Writer out){
  super(out);
  for (  Character key : REPLACE.keySet()) {
    escapedCounts.put(key,0);
  }
}",0.5586592178770949
6991,"public void testCaptureAndGenerateUrlStrict() throws Exception {
  BrowserHunter browserHunter=new BrowserHunter(new CapturedBrowsers(),SlaveBrowser.TIMEOUT,new NullPathPrefix());
  SlaveBrowser slaveBrowser=browserHunter.captureBrowser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  BrowserInfo browserInfo=slaveBrowser.getBrowserInfo();
  assertEquals(""String_Node_Str"",browserInfo.getName());
  assertEquals(""String_Node_Str"",browserInfo.getVersion());
  assertEquals(""String_Node_Str"",browserInfo.getOs());
  assertEquals(""String_Node_Str"",browserHunter.getCaptureUrl(slaveBrowser.getId(),CaptureHandler.STRICT,CLIENT,-1));
}","public void testCaptureAndGenerateUrlStrict() throws Exception {
  BrowserHunter browserHunter=new BrowserHunter(new CapturedBrowsers(),SlaveBrowser.TIMEOUT,new NullPathPrefix(),new TimeImpl());
  SlaveBrowser slaveBrowser=browserHunter.captureBrowser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  BrowserInfo browserInfo=slaveBrowser.getBrowserInfo();
  assertEquals(""String_Node_Str"",browserInfo.getName());
  assertEquals(""String_Node_Str"",browserInfo.getVersion());
  assertEquals(""String_Node_Str"",browserInfo.getOs());
  assertEquals(""String_Node_Str"",browserHunter.getCaptureUrl(slaveBrowser.getId(),CaptureHandler.STRICT,CLIENT,-1l));
}",0.9876543209876544
6992,"public void testCaptureAndGenerateUrlQuirks() throws Exception {
  BrowserHunter browserHunter=new BrowserHunter(new CapturedBrowsers(),SlaveBrowser.TIMEOUT,new NullPathPrefix());
  SlaveBrowser slaveBrowser=browserHunter.captureBrowser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  BrowserInfo browserInfo=slaveBrowser.getBrowserInfo();
  assertEquals(""String_Node_Str"",browserInfo.getName());
  assertEquals(""String_Node_Str"",browserInfo.getVersion());
  assertEquals(""String_Node_Str"",browserInfo.getOs());
  assertEquals(""String_Node_Str"",browserHunter.getCaptureUrl(slaveBrowser.getId(),CaptureHandler.QUIRKS,CLIENT,-1));
}","public void testCaptureAndGenerateUrlQuirks() throws Exception {
  BrowserHunter browserHunter=new BrowserHunter(new CapturedBrowsers(),SlaveBrowser.TIMEOUT,new NullPathPrefix(),new TimeImpl());
  SlaveBrowser slaveBrowser=browserHunter.captureBrowser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  BrowserInfo browserInfo=slaveBrowser.getBrowserInfo();
  assertEquals(""String_Node_Str"",browserInfo.getName());
  assertEquals(""String_Node_Str"",browserInfo.getVersion());
  assertEquals(""String_Node_Str"",browserInfo.getOs());
  assertEquals(""String_Node_Str"",browserHunter.getCaptureUrl(slaveBrowser.getId(),CaptureHandler.QUIRKS,CLIENT,-1l));
}",0.9876543209876544
6993,"public void testSlaveBrowserHeartBeat() throws Exception {
  MockTime mockTime=new MockTime(0);
  SlaveBrowser browser=new SlaveBrowser(mockTime,""String_Node_Str"",new BrowserInfo(),SlaveBrowser.TIMEOUT);
  assertEquals(null,browser.getLastHeartbeat());
  mockTime.add(5);
  browser.heartBeat();
  assertEquals(5L,browser.getLastHeartbeat().getMillis());
}","public void testSlaveBrowserHeartBeat() throws Exception {
  MockTime mockTime=new MockTime(0);
  SlaveBrowser browser=new SlaveBrowser(mockTime,""String_Node_Str"",new BrowserInfo(),SlaveBrowser.TIMEOUT);
  assertEquals(new Instant(0),browser.getLastHeartbeat());
  mockTime.add(5);
  browser.heartBeat();
  assertEquals(5L,browser.getLastHeartbeat().getMillis());
}",0.9777777777777776
6994,"public void testDecorate() throws Exception {
  CoverageReporterAction reporter=new CoverageReporterAction(null,null);
  List<Action> actions=Lists.<Action>newArrayList(new ServerStartupAction(0,null,null,SlaveBrowser.TIMEOUT,null,Collections.<AuthStrategy>emptySet(),false,null,new NullPathPrefix()));
  List<Action> actual=new CoverageActionDecorator(reporter).process(actions);
  assertEquals(2,actual.size());
  assertTrue(actual.get(0) instanceof ServerStartupAction);
  assertTrue(actual.get(1) instanceof CoverageReporterAction);
}","public void testDecorate() throws Exception {
  CoverageReporterAction reporter=new CoverageReporterAction(null,null,null);
  List<Action> actions=Lists.<Action>newArrayList(new ServerStartupAction(0,null,null,SlaveBrowser.TIMEOUT,null,Collections.<AuthStrategy>emptySet(),false,null,new NullPathPrefix()));
  List<Action> actual=new CoverageActionDecorator(reporter).process(actions);
  assertEquals(2,actual.size());
  assertTrue(actual.get(0) instanceof ServerStartupAction);
  assertTrue(actual.get(1) instanceof CoverageReporterAction);
}",0.9953746530989824
6995,"public void testSkipInstrument() throws Exception {
  FileInfo lcov=new FileInfo(""String_Node_Str"",0,-1,true,false,""String_Node_Str"");
  FileInfo serveOnly=new FileInfo(""String_Node_Str"",0,-1,true,true,""String_Node_Str"");
  FileInfo excluded=new FileInfo(""String_Node_Str"",0,-1,true,false,""String_Node_Str"");
  FileInfo remote=new FileInfo(""String_Node_Str"",0,-1,true,false,null);
  CoverageInstrumentingProcessor processor=new CoverageInstrumentingProcessor(null,Sets.<String>newHashSet(excluded.getFilePath()),null);
  assertSame(lcov,processor.process(lcov));
  assertSame(serveOnly,processor.process(serveOnly));
  assertSame(remote,processor.process(remote));
  assertSame(excluded,processor.process(excluded));
}","public void testSkipInstrument() throws Exception {
  FileInfo lcov=new FileInfo(""String_Node_Str"",0,-1,true,false,""String_Node_Str"");
  FileInfo serveOnly=new FileInfo(""String_Node_Str"",0,-1,true,true,""String_Node_Str"");
  FileInfo excluded=new FileInfo(""String_Node_Str"",0,-1,true,false,""String_Node_Str"");
  FileInfo remote=new FileInfo(""String_Node_Str"",0,-1,true,false,null);
  CoverageInstrumentingProcessor processor=new CoverageInstrumentingProcessor(null,Sets.<String>newHashSet(excluded.getFilePath()),null,new MockTime(0));
  assertSame(lcov,processor.process(lcov));
  assertSame(serveOnly,processor.process(serveOnly));
  assertSame(remote,processor.process(remote));
  assertSame(excluded,processor.process(excluded));
}",0.9889807162534436
6996,"public void testInstrument() throws Exception {
  FileInfo fileInfo=new FileInfo(""String_Node_Str"",0,-1,true,false,""String_Node_Str"");
  String expected=""String_Node_Str"";
  Code code=new Code(fileInfo.getFilePath(),fileInfo.getData());
  CoverageAccumulator accumulator=new CoverageAccumulator();
  FileInfo decorated=new CoverageInstrumentingProcessor(new DecoratorStub(expected,code),Collections.<String>emptySet(),accumulator).process(fileInfo);
  assertEquals(expected,decorated.getData());
  assertEquals(fileInfo.getFilePath(),decorated.getFilePath());
  assertEquals(fileInfo.getTimestamp(),decorated.getTimestamp());
  assertEquals(fileInfo.isServeOnly(),decorated.isServeOnly());
}","public void testInstrument() throws Exception {
  FileInfo fileInfo=new FileInfo(""String_Node_Str"",0,-1,true,false,""String_Node_Str"");
  String expected=""String_Node_Str"";
  Code code=new Code(fileInfo.getFilePath(),fileInfo.getData());
  CoverageAccumulator accumulator=new CoverageAccumulator();
  FileInfo decorated=new CoverageInstrumentingProcessor(new DecoratorStub(expected,code),Collections.<String>emptySet(),accumulator,new MockTime(0)).process(fileInfo);
  assertEquals(expected,decorated.getData());
  assertEquals(fileInfo.getFilePath(),decorated.getFilePath());
  assertEquals(fileInfo.getTimestamp(),decorated.getTimestamp());
  assertEquals(fileInfo.isServeOnly(),decorated.isServeOnly());
}",0.988555078683834
6997,"public void testAddJs() throws Exception {
  LinkedList<FileInfo> files=new LinkedList<FileInfo>();
  String lcovSource=""String_Node_Str"";
  List<FileInfo> processed=new CoverageJsAdder(new FileLoaderStub(lcovSource)).processPlugins(files);
  FileInfo lcov=processed.get(0);
  assertEquals(new LoadedFileInfo(CoverageJsAdder.LCOV_JS,-1,false,false,lcovSource),lcov);
  assertEquals(lcovSource,lcov.getData());
  assertFalse(lcov.canLoad());
}","public void testAddJs() throws Exception {
  LinkedList<FileInfo> files=new LinkedList<FileInfo>();
  String lcovSource=""String_Node_Str"";
  List<FileInfo> processed=new CoverageJsAdder(new FileLoaderStub(lcovSource),new CoverageNameMapper()).processPlugins(files);
  FileInfo lcov=processed.get(0);
  assertEquals(new LoadedFileInfo(CoverageJsAdder.LCOV_JS,-1,false,false,lcovSource),lcov);
  assertEquals(lcovSource,lcov.getData());
  assertFalse(lcov.canLoad());
}",0.9724972497249724
6998,"public void testAddJsWithExistingFiles() throws Exception {
  LinkedList<FileInfo> files=new LinkedList<FileInfo>();
  FileInfo expected=new FileInfo(""String_Node_Str"",1,-1,false,false,null);
  files.add(expected);
  String lcovSource=""String_Node_Str"";
  List<FileInfo> processed=new CoverageJsAdder(new FileLoaderStub(lcovSource)).processPlugins(files);
  FileInfo lcov=processed.get(0);
  assertEquals(new LoadedFileInfo(CoverageJsAdder.LCOV_JS,-1,false,false,lcovSource),lcov);
  assertEquals(lcovSource,lcov.getData());
  assertFalse(lcov.canLoad());
  assertSame(expected,processed.get(1));
}","public void testAddJsWithExistingFiles() throws Exception {
  LinkedList<FileInfo> files=new LinkedList<FileInfo>();
  FileInfo expected=new FileInfo(""String_Node_Str"",1,-1,false,false,null);
  files.add(expected);
  String lcovSource=""String_Node_Str"";
  List<FileInfo> processed=new CoverageJsAdder(new FileLoaderStub(lcovSource),new CoverageNameMapper()).processPlugins(files);
  FileInfo lcov=processed.get(0);
  assertEquals(new LoadedFileInfo(CoverageJsAdder.LCOV_JS,-1,false,false,lcovSource),lcov);
  assertEquals(lcovSource,lcov.getData());
  assertFalse(lcov.canLoad());
  assertSame(expected,processed.get(1));
}",0.9795249795249796
6999,"public RunData run(RunData testCase){
  logger.debug(""String_Node_Str"",writer);
  accumulator.write(writer);
  writer.flush();
  return testCase;
}","public RunData run(RunData runData){
  if (!runData.getTestCases().isEmpty()) {
    logger.debug(""String_Node_Str"",writer);
    accumulator.write(writer);
    writer.flush();
  }
  return runData;
}",0.8173913043478261
7000,"public List<JstdTestCase> createCases(List<FileInfo> plugins,List<FileInfo> deps,List<FileInfo> tests){
  final List<JstdTestCase> testCases=Lists.newArrayList();
  if (tests.isEmpty()) {
    testCases.add(new JstdTestCase(deps,Collections.<FileInfo>emptyList(),plugins));
  }
 else {
    testCases.add(new JstdTestCase(deps,tests,plugins));
  }
  return processTestCases(resolveDependencies(testCases));
}","public List<JstdTestCase> createCases(List<FileInfo> plugins,List<FileInfo> deps,List<FileInfo> tests){
  final List<JstdTestCase> testCases=Lists.newArrayList();
  if (!(deps.isEmpty() && tests.isEmpty())) {
    testCases.add(new JstdTestCase(deps,tests,plugins));
  }
  return processTestCases(resolveDependencies(testCases));
}",0.6929347826086957
