record_number,buggy_code,fixed_code,code_similarity
81001,"private static int getSellerID(String expo){
switch (expo.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    return 48;
case ""String_Node_Str"":
case ""String_Node_Str"":
  return 48;
case ""String_Node_Str"":
case ""String_Node_Str"":
return 48;
case ""String_Node_Str"":
case ""String_Node_Str"":
return 75;
default :
System.out.println(""String_Node_Str"" + expo);
return 48;
}
}","private static int getSellerID(String expo){
  if (expo == null) {
    return 48;
  }
switch (expo.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    return 48;
case ""String_Node_Str"":
case ""String_Node_Str"":
  return 48;
case ""String_Node_Str"":
case ""String_Node_Str"":
return 48;
case ""String_Node_Str"":
case ""String_Node_Str"":
return 75;
default :
System.out.println(""String_Node_Str"" + expo);
return 48;
}
}",0.9549945115257958
81002,"public long getLatestTweetID(){
  try {
    Paging p=new Paging(lastIDFound);
    List<Status> statuses=twitter.getUserTimeline(TWITTER_HANDLE,p);
    System.out.println(""String_Node_Str"" + statuses.size());
    if (statuses.isEmpty()) {
      return lastIDFound;
    }
    lastIDFound=statuses.get(0).getId();
    return lastIDFound;
  }
 catch (  TwitterException twitterException) {
  }
  return -1;
}","public long getLatestTweetID(){
  try {
    Paging p=new Paging(lastIDFound);
    List<Status> statuses=twitter.getUserTimeline(TWITTER_HANDLE,p);
    if (statuses.isEmpty()) {
      return lastIDFound;
    }
    lastIDFound=statuses.get(0).getId();
    return lastIDFound;
  }
 catch (  TwitterException twitterException) {
  }
  return -1;
}",0.9183400267737616
81003,"@Override public void run(){
  updateLink();
  System.out.println(""String_Node_Str"" + this.getClass().getSimpleName());
  cycBar.arriveAndAwaitAdvance();
}","@Override public final void run(){
  updateLink();
  System.out.println(""String_Node_Str"" + this.getClass().getSimpleName());
  cycBar.arriveAndAwaitAdvance();
}",0.981012658227848
81004,"/** 
 * Prompts the user for the required program information, including username, password, email, and other options. Note that this does NOT start the command-line website checking.
 */
public static void commandLineSettingsInput(){
  if (Email.getUsername() == null) {
    System.out.print(""String_Node_Str"");
    try {
      Email.setUsername(myScanner.next());
      System.out.print(""String_Node_Str"");
      Email.setPassword(myScanner.next());
    }
 catch (    Exception e) {
    }
  }
  if (Email.getAddressList().isEmpty()) {
    System.out.print(""String_Node_Str"");
    try {
      Email.addEmailAddress(myScanner.next());
    }
 catch (    Exception e) {
    }
  }
  System.out.print(""String_Node_Str"");
  try {
    if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
    }
 else {
    }
  }
 catch (  Exception e) {
  }
  System.out.print(""String_Node_Str"");
  try {
    if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
    }
 else {
    }
  }
 catch (  Exception e) {
  }
  if (getRefreshTime() == 10) {
    System.out.print(""String_Node_Str"");
    try {
      setRefreshTime(Integer.parseInt(myScanner.next(),10));
    }
 catch (    Exception e) {
    }
  }
  System.out.print(""String_Node_Str"");
  try {
    if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
      Audio.setPlayAlarm(true);
    }
  }
 catch (  Exception e) {
  }
  myScanner.nextLine();
  if (Browser.getExpo() == null) {
    System.out.print(""String_Node_Str"");
    try {
      String input=myScanner.nextLine();
      System.out.println(""String_Node_Str"" + input);
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
        Browser.setExpo(""String_Node_Str"");
      break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    Browser.setExpo(""String_Node_Str"");
  break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
Browser.setExpo(""String_Node_Str"");
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
Browser.setExpo(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + input + ""String_Node_Str"");
Browser.setExpo(""String_Node_Str"");
}
System.out.println();
}
 catch (Exception e) {
}
}
}","/** 
 * Prompts the user for the required program information, including username, password, email, and other options. Note that this does NOT start the command-line website checking.
 */
public static void commandLineSettingsInput(){
  if (Email.getUsername() == null) {
    System.out.print(""String_Node_Str"");
    try {
      Email.setUsername(myScanner.nextLine());
      System.out.print(""String_Node_Str"");
      Email.setPassword(myScanner.nextLine());
    }
 catch (    Exception e) {
    }
  }
  if (Email.getAddressList().isEmpty()) {
    System.out.print(""String_Node_Str"");
    try {
      Email.addEmailAddress(myScanner.nextLine());
    }
 catch (    Exception e) {
    }
  }
  if (Browser.getExpo() == null) {
    System.out.print(""String_Node_Str"");
    try {
      String input=myScanner.nextLine();
      System.out.println(""String_Node_Str"" + input);
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
        Browser.setExpo(""String_Node_Str"");
      break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    Browser.setExpo(""String_Node_Str"");
  break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
Browser.setExpo(""String_Node_Str"");
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
Browser.setExpo(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + input + ""String_Node_Str"");
Browser.setExpo(""String_Node_Str"");
}
System.out.println();
}
 catch (Exception e) {
}
}
if (!TicketChecker.isCheckingPaxsite()) {
System.out.print(""String_Node_Str"");
try {
if (!myScanner.nextLine().toLowerCase().startsWith(""String_Node_Str"")) {
TicketChecker.addChecker(new CheckPaxsite());
}
}
 catch (Exception e) {
}
}
if (!TicketChecker.isCheckingShowclix()) {
System.out.print(""String_Node_Str"");
try {
if (!myScanner.nextLine().toLowerCase().startsWith(""String_Node_Str"")) {
TicketChecker.addChecker(new CheckShowclix());
System.out.println(""String_Node_Str"");
}
}
 catch (Exception e) {
System.out.println(""String_Node_Str"");
e.printStackTrace();
}
}
if (!TicketChecker.isCheckingTwitter()) {
System.out.print(""String_Node_Str"");
try {
if (!myScanner.nextLine().toLowerCase().startsWith(""String_Node_Str"")) {
TicketChecker.addChecker(new CheckTwitter());
}
}
 catch (Exception e) {
}
}
if (getRefreshTime() == 10) {
System.out.print(""String_Node_Str"");
try {
setRefreshTime(Integer.parseInt(myScanner.nextLine(),10));
}
 catch (Exception e) {
}
}
System.out.print(""String_Node_Str"");
try {
if (!myScanner.nextLine().toLowerCase().startsWith(""String_Node_Str"")) {
Audio.setPlayAlarm(true);
}
}
 catch (Exception e) {
}
}",0.3594055533828705
81005,"public static void setupProgram(String[] args){
  boolean doUpdate=PreferenceHandler.getBooleanPreference(Preference.TYPES.LOAD_UPDATES);
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean checkTwitter=true;
  boolean verifyShowclix=false;
  boolean autoStart=false;
  boolean savePrefs=false;
  String[] twitterTokens=new String[4];
  CheckSetup.addHandle(""String_Node_Str"");
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    NotificationHandler.setLastNotificationID(args[a + 1]);
  break;
case ""String_Node_Str"":
NotificationHandler.setLastNotificationID(""String_Node_Str"");
break;
case ""String_Node_Str"":
KeyboardHandler.setTypeLink(true);
break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
if (!checkShowclix && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
verifyShowclix=true;
break;
case ""String_Node_Str"":
if (!checkPax && !checkShowclix) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkTwitter=false;
break;
case ""String_Node_Str"":
String twitterHandle=args[a + 1];
CheckSetup.addHandle(twitterHandle);
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
CheckSetup.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + CheckSetup.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
enableCommandLine();
break;
case ""String_Node_Str"":
try {
String key=args[a + 1];
String value=args[a + 2];
Email.setProperty(key,value);
}
 catch (Exception e) {
ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
}
break;
case ""String_Node_Str"":
savePrefs=true;
break;
case ""String_Node_Str"":
twitterTokens[0]=args[a + 1];
break;
case ""String_Node_Str"":
twitterTokens[1]=args[a + 1];
break;
case ""String_Node_Str"":
twitterTokens[2]=args[a + 1];
break;
case ""String_Node_Str"":
twitterTokens[3]=args[a + 1];
break;
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !checkPax && !checkShowclix&& !checkTwitter) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
if (!PreferenceHandler.getBooleanPreference(Preference.TYPES.LOAD_NOTIFICATIONS)) {
NotificationHandler.setLastNotificationID(""String_Node_Str"");
}
if (twitterTokens[0] != null) {
TwitterReader.setKeys(twitterTokens[0],twitterTokens[1],twitterTokens[2],twitterTokens[3]);
TwitterReader.init();
}
if (!TwitterReader.isInitialized()) {
if (PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_CONSUMER_KEY) != null) {
System.out.println(""String_Node_Str"");
try {
TwitterReader.setKeys(Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_CONSUMER_KEY)),Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_CONSUMER_SECRET)),Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_APP_KEY)),Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_APP_SECRET)));
}
 catch (Exception exception) {
System.out.println(""String_Node_Str"");
}
TwitterReader.init();
}
 else {
System.out.println(""String_Node_Str"");
}
}
System.out.println(""String_Node_Str"");
if (autoStart) {
if (checkPax) {
TicketChecker.addChecker(new CheckPaxsite());
}
if (checkShowclix) {
CheckShowclix c=new CheckShowclix();
if (checkShowclix) {
c.enablePageFiltering();
}
TicketChecker.addChecker(c);
}
if (checkTwitter && TwitterReader.isInitialized()) {
CheckSetup.startTwitterStreaming();
}
}
if (isCommandLine()) {
if (doUpdate) {
UpdateHandler.loadVersionNotes();
if (UpdateHandler.updateAvailable()) {
UpdateHandler.autoUpdate(args);
}
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
System.out.println(""String_Node_Str"");
NotificationHandler.loadNotifications();
System.out.println(""String_Node_Str"");
NotificationHandler.showNewNotifications();
if (!autoStart) {
CheckSetup.commandLineSettingsInput();
}
if (savePrefs) {
PreferenceHandler.savePreferences();
}
CheckSetup.startCommandLineWebsiteChecking();
return;
}
if (doUpdate) {
start.setStatus(""String_Node_Str"");
UpdateHandler.loadVersionNotes();
if (UpdateHandler.updateAvailable()) {
UpdateHandler.promptUpdate(args);
}
setup.setPatchNotesText(UpdateHandler.getVersionNotes());
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
setup.setPatchNotesText(UpdateHandler.getVersionNotes());
}
}
,""String_Node_Str"");
}
start.setStatus(""String_Node_Str"");
NotificationHandler.loadNotifications();
start.setStatus(""String_Node_Str"");
start.dispose();
NotificationHandler.showNewNotifications();
if (autoStart) {
start.dispose();
CheckSetup.startCheckingWebsites();
}
 else {
setup.loadProgramSettings();
setup.showWindow();
}
}","public static void setupProgram(String[] args){
  boolean doUpdate=PreferenceHandler.getBooleanPreference(Preference.TYPES.LOAD_UPDATES);
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean checkTwitter=true;
  boolean deepCheckShowclix=false;
  boolean autoStart=false;
  boolean savePrefs=false;
  boolean startMinimized=false;
  String[] twitterTokens=new String[4];
  CheckSetup.addHandle(""String_Node_Str"");
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    NotificationHandler.setLastNotificationID(args[a + 1]);
  break;
case ""String_Node_Str"":
NotificationHandler.setLastNotificationID(""String_Node_Str"");
break;
case ""String_Node_Str"":
KeyboardHandler.setTypeLink(true);
break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
if (!checkShowclix && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
deepCheckShowclix=true;
break;
case ""String_Node_Str"":
if (!checkPax && !checkShowclix) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkTwitter=false;
break;
case ""String_Node_Str"":
String twitterHandle=args[a + 1];
CheckSetup.addHandle(twitterHandle);
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
CheckSetup.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + CheckSetup.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
startMinimized=true;
break;
case ""String_Node_Str"":
enableCommandLine();
break;
case ""String_Node_Str"":
try {
String key=args[a + 1];
String value=args[a + 2];
Email.setProperty(key,value);
}
 catch (Exception e) {
ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
}
break;
case ""String_Node_Str"":
savePrefs=true;
break;
case ""String_Node_Str"":
twitterTokens[0]=args[a + 1];
break;
case ""String_Node_Str"":
twitterTokens[1]=args[a + 1];
break;
case ""String_Node_Str"":
twitterTokens[2]=args[a + 1];
break;
case ""String_Node_Str"":
twitterTokens[3]=args[a + 1];
break;
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !checkPax && !checkShowclix&& !checkTwitter) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
if (!PreferenceHandler.getBooleanPreference(Preference.TYPES.LOAD_NOTIFICATIONS)) {
NotificationHandler.setLastNotificationID(""String_Node_Str"");
}
if (twitterTokens[0] != null) {
TwitterReader.setKeys(twitterTokens[0],twitterTokens[1],twitterTokens[2],twitterTokens[3]);
TwitterReader.init();
}
if (!TwitterReader.isInitialized()) {
if (PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_CONSUMER_KEY) != null) {
System.out.println(""String_Node_Str"");
try {
TwitterReader.setKeys(Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_CONSUMER_KEY)),Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_CONSUMER_SECRET)),Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_APP_KEY)),Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_APP_SECRET)));
}
 catch (Exception exception) {
System.out.println(""String_Node_Str"");
}
TwitterReader.init();
}
 else {
System.out.println(""String_Node_Str"");
}
}
System.out.println(""String_Node_Str"");
if (autoStart) {
if (checkPax) {
TicketChecker.addChecker(new CheckPaxsite());
}
if (checkShowclix) {
CheckShowclix c=new CheckShowclix();
if (deepCheckShowclix) {
c.enableDeepChecking();
}
TicketChecker.addChecker(c);
}
if (checkTwitter && TwitterReader.isInitialized()) {
CheckSetup.startTwitterStreaming();
}
}
if (isCommandLine()) {
if (doUpdate) {
UpdateHandler.loadVersionNotes();
if (UpdateHandler.updateAvailable()) {
UpdateHandler.autoUpdate(args);
}
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
System.out.println(""String_Node_Str"");
NotificationHandler.loadNotifications();
System.out.println(""String_Node_Str"");
NotificationHandler.showNewNotifications();
if (!autoStart) {
CheckSetup.commandLineSettingsInput();
}
if (savePrefs) {
PreferenceHandler.savePreferences();
}
CheckSetup.startCommandLineWebsiteChecking();
return;
}
if (doUpdate) {
start.setStatus(""String_Node_Str"");
UpdateHandler.loadVersionNotes();
if (UpdateHandler.updateAvailable()) {
UpdateHandler.promptUpdate(args);
}
setup.setPatchNotesText(UpdateHandler.getVersionNotes());
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
setup.setPatchNotesText(UpdateHandler.getVersionNotes());
}
}
,""String_Node_Str"");
}
start.setStatus(""String_Node_Str"");
NotificationHandler.loadNotifications();
start.setStatus(""String_Node_Str"");
start.dispose();
NotificationHandler.showNewNotifications();
if (autoStart) {
start.dispose();
CheckSetup.startCheckingWebsites();
}
 else {
setup.loadProgramSettings();
setup.showWindow();
}
}",0.9885114472270436
81006,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  if (isCLine(args)) {
    enableCommandLine();
  }
 else {
    try {
      start=new LoadingWindow();
      start.setStatus(""String_Node_Str"");
      start.showWindow();
      javax.swing.ToolTipManager.sharedInstance().setDismissDelay(600000);
      setup=new Setup();
    }
 catch (    java.awt.HeadlessException e) {
      System.out.println(""String_Node_Str"");
      enableCommandLine();
    }
  }
  initClasses();
  setupProgram(args);
}","/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  if (isCLine(args)) {
    enableCommandLine();
  }
 else {
    try {
      start=new LoadingWindow();
      start.showWindow();
      Thread.setDefaultUncaughtExceptionHandler(new com.github.sunnybat.commoncode.error.ExceptionHandler());
      javax.swing.ToolTipManager.sharedInstance().setDismissDelay(600000);
      setup=new Setup();
    }
 catch (    java.awt.HeadlessException e) {
      System.out.println(""String_Node_Str"");
      enableCommandLine();
    }
  }
  initClasses();
  setupProgram(args);
}",0.8752052545155994
81007,"private static int getSellerID(String expo){
  if (expo == null) {
    return 48;
  }
switch (expo.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    return 48;
case ""String_Node_Str"":
case ""String_Node_Str"":
  return 48;
case ""String_Node_Str"":
case ""String_Node_Str"":
return 48;
case ""String_Node_Str"":
case ""String_Node_Str"":
return 75;
default :
System.out.println(""String_Node_Str"" + expo);
return 48;
}
}","private static int getSellerID(String expo){
  if (expo == null) {
    return 48;
  }
switch (expo.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    return 48;
case ""String_Node_Str"":
case ""String_Node_Str"":
  return 75;
default :
System.out.println(""String_Node_Str"" + expo);
return 48;
}
}",0.6258064516129033
81008,"public static boolean isPaxPage(int showclixID){
  try {
    HttpURLConnection connect=Browser.setUpConnection(new URL(""String_Node_Str"" + showclixID));
    BufferedReader reader=new BufferedReader(new InputStreamReader(connect.getInputStream()));
    String text=""String_Node_Str"";
    String line;
    while ((line=reader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      text+=line.toLowerCase();
    }
    if (text.contains(Browser.getExpo().toLowerCase())) {
      System.out.println(""String_Node_Str"");
      return true;
    }
  }
 catch (  IOException iOException) {
  }
  return false;
}","/** 
 * Checks whether or not the page associated with the given ShowclixID is a PAX ticket page.
 * @param showclixID The Showclix ID to check
 * @return True if it is, false if not
 */
public static boolean isPaxPage(int showclixID){
  try {
    HttpURLConnection connect=Browser.setUpConnection(new URL(""String_Node_Str"" + showclixID));
    BufferedReader reader=new BufferedReader(new InputStreamReader(connect.getInputStream()));
    String text=""String_Node_Str"";
    String line;
    while ((line=reader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      text+=line.toLowerCase();
    }
    if (text.contains(Browser.getExpo().toLowerCase())) {
      System.out.println(""String_Node_Str"");
      return true;
    }
  }
 catch (  IOException iOException) {
  }
  return false;
}",0.8691392582225332
81009,"@Override public synchronized boolean ticketsFound(){
  if (currentShowclixEventID > lastShowclixEventID) {
    if (pageFiltering) {
      return ShowclixReader.isPaxPage(currentShowclixEventID);
    }
 else {
      return true;
    }
  }
 else {
    return false;
  }
}","@Override public synchronized boolean ticketsFound(){
  if (currentShowclixEventID > lastShowclixEventID) {
    return ShowclixReader.isPaxPage(currentShowclixEventID);
  }
 else {
    return false;
  }
}",0.8143459915611815
81010,"public static void runTwitterStream(Twitter twitter,String[] handles){
  if (isStreamingTwitter()) {
    return;
  }
  System.out.println(Arrays.toString(handles));
  myStream=new TwitterStreamFactory().getInstance(twitter.getAuthorization());
  myStream.addListener(listener);
  myStream.user(handles);
}","public static void runTwitterStream(Twitter twitter,String[] handles){
  if (isStreamingTwitter()) {
    return;
  }
  System.out.println(Arrays.toString(handles));
  myStream=new TwitterStreamFactory().getInstance(twitter.getAuthorization());
  myStream.addListener(listener);
  myStream.user(handles);
  usersToCheck=handles.clone();
}",0.9501557632398754
81011,"@Override public void onException(Exception ex){
  ex.printStackTrace();
  System.out.println(""String_Node_Str"" + ex.getMessage());
}","@Override public void onException(Exception ex){
  ex.printStackTrace();
  System.out.println(""String_Node_Str"" + ex.getMessage());
  ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",ex);
}",0.7430167597765364
81012,"@Override public void onStatus(Status status){
  System.out.println(""String_Node_Str"" + status.getUser().getScreenName() + ""String_Node_Str""+ status.getText());
  if (!TwitterReader.hasKeyword(status.getText())) {
    System.out.println(""String_Node_Str"");
    return;
  }
  String link=Browser.parseLink(status.getText());
  if (!TicketChecker.hasOpenedLink(link)) {
    CheckSetup.linkFound(link);
    TicketChecker.addLinkFound(link);
  }
}","@Override public void onStatus(Status status){
  System.out.println(""String_Node_Str"" + status.getUser().getScreenName() + ""String_Node_Str""+ status.getText());
  if (!TwitterReader.hasKeyword(status.getText())) {
    System.out.println(""String_Node_Str"");
  }
 else {
    for (    String s : usersToCheck) {
      if (s.startsWith(""String_Node_Str"")) {
        s=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
      if (s.toLowerCase().equals(status.getUser().getScreenName().toLowerCase())) {
        String link=Browser.parseLink(status.getText());
        if (!TicketChecker.hasOpenedLink(link)) {
          CheckSetup.linkFound(link);
          TicketChecker.addLinkFound(link);
        }
        return;
      }
    }
    System.out.println(""String_Node_Str"");
  }
}",0.7078925956061839
81013,"public static void startProgram(String[] args){
  boolean doUpdate=PreferenceHandler.getBooleanPreference(Preference.TYPES.LOAD_UPDATES);
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean checkTwitter=true;
  boolean autoStart=false;
  boolean savePrefs=false;
  String[] twitterTokens=new String[4];
  Checker.addHandle(""String_Node_Str"");
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    NotificationHandler.setLastNotificationID(args[a + 1]);
  break;
case ""String_Node_Str"":
NotificationHandler.setLastNotificationID(""String_Node_Str"");
break;
case ""String_Node_Str"":
KeyboardHandler.setTypeLink(true);
break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
if (!checkShowclix && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkShowclix) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkTwitter=false;
break;
case ""String_Node_Str"":
String twitterHandle=args[a + 1];
Checker.addHandle(twitterHandle);
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
Checker.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + Checker.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
enableCommandLine();
break;
case ""String_Node_Str"":
try {
String key=args[a + 1];
String value=args[a + 2];
Email.setProperty(key,value);
}
 catch (Exception e) {
ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
}
break;
case ""String_Node_Str"":
savePrefs=true;
break;
case ""String_Node_Str"":
twitterTokens[0]=args[a + 1];
break;
case ""String_Node_Str"":
twitterTokens[1]=args[a + 1];
break;
case ""String_Node_Str"":
twitterTokens[2]=args[a + 1];
break;
case ""String_Node_Str"":
twitterTokens[3]=args[a + 1];
break;
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !checkPax && !checkShowclix&& !checkTwitter) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
if (!(boolean)PreferenceHandler.getPreferenceObject(Preference.TYPES.LOAD_NOTIFICATIONS).getValue()) {
NotificationHandler.setLastNotificationID(""String_Node_Str"");
}
if (twitterTokens[0] != null) {
TwitterReader.setKeys(twitterTokens[0],twitterTokens[1],twitterTokens[2],twitterTokens[3]);
TwitterReader.init();
}
if (!TwitterReader.isInitialized()) {
if (PreferenceHandler.getPreferenceObject(Preference.TYPES.TWITTER_CONSUMER_KEY) != null) {
System.out.println(""String_Node_Str"");
try {
TwitterReader.setKeys(Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_CONSUMER_KEY)),Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_CONSUMER_SECRET)),Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_APP_KEY)),Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_APP_SECRET)));
}
 catch (Exception exception) {
System.out.println(""String_Node_Str"");
}
TwitterReader.init();
}
 else {
System.out.println(""String_Node_Str"");
}
}
System.out.println(""String_Node_Str"");
if (autoStart) {
if (checkPax) {
TicketChecker.addChecker(new CheckPaxsite());
}
if (checkShowclix) {
TicketChecker.addChecker(new CheckShowclix());
}
if (checkTwitter && TwitterReader.isInitialized()) {
Checker.startTwitterStreaming();
}
}
if (isCommandLine()) {
if (doUpdate) {
UpdateHandler.loadVersionNotes();
if (UpdateHandler.updateAvailable()) {
UpdateHandler.autoUpdate(args);
}
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
System.out.println(""String_Node_Str"");
NotificationHandler.loadNotifications();
System.out.println(""String_Node_Str"");
NotificationHandler.showNewNotifications();
if (!autoStart) {
Checker.commandLineSettingsInput();
}
if (savePrefs) {
PreferenceHandler.savePreferences();
}
Checker.startCommandLineWebsiteChecking();
return;
}
if (doUpdate) {
start.setStatus(""String_Node_Str"");
UpdateHandler.loadVersionNotes();
if (UpdateHandler.updateAvailable()) {
UpdateHandler.promptUpdate(args);
}
setup.setPatchNotesText(UpdateHandler.getVersionNotes());
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
setup.setPatchNotesText(UpdateHandler.getVersionNotes());
}
}
,""String_Node_Str"");
}
start.setStatus(""String_Node_Str"");
NotificationHandler.loadNotifications();
start.setStatus(""String_Node_Str"");
start.dispose();
NotificationHandler.showNewNotifications();
if (autoStart) {
start.dispose();
Checker.startCheckingWebsites();
}
 else {
setup.loadProgramSettings();
setup.showWindow();
}
}","public static void startProgram(String[] args){
  boolean doUpdate=PreferenceHandler.getBooleanPreference(Preference.TYPES.LOAD_UPDATES);
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean checkTwitter=true;
  boolean autoStart=false;
  boolean savePrefs=false;
  String[] twitterTokens=new String[4];
  Checker.addHandle(""String_Node_Str"");
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    NotificationHandler.setLastNotificationID(args[a + 1]);
  break;
case ""String_Node_Str"":
NotificationHandler.setLastNotificationID(""String_Node_Str"");
break;
case ""String_Node_Str"":
KeyboardHandler.setTypeLink(true);
break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
if (!checkShowclix && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkShowclix) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkTwitter=false;
break;
case ""String_Node_Str"":
String twitterHandle=args[a + 1];
Checker.addHandle(twitterHandle);
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
Checker.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + Checker.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
enableCommandLine();
break;
case ""String_Node_Str"":
try {
String key=args[a + 1];
String value=args[a + 2];
Email.setProperty(key,value);
}
 catch (Exception e) {
ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
}
break;
case ""String_Node_Str"":
savePrefs=true;
break;
case ""String_Node_Str"":
twitterTokens[0]=args[a + 1];
break;
case ""String_Node_Str"":
twitterTokens[1]=args[a + 1];
break;
case ""String_Node_Str"":
twitterTokens[2]=args[a + 1];
break;
case ""String_Node_Str"":
twitterTokens[3]=args[a + 1];
break;
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !checkPax && !checkShowclix&& !checkTwitter) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
if (!PreferenceHandler.getBooleanPreference(Preference.TYPES.LOAD_NOTIFICATIONS)) {
NotificationHandler.setLastNotificationID(""String_Node_Str"");
}
if (twitterTokens[0] != null) {
TwitterReader.setKeys(twitterTokens[0],twitterTokens[1],twitterTokens[2],twitterTokens[3]);
TwitterReader.init();
}
if (!TwitterReader.isInitialized()) {
if (PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_CONSUMER_KEY) != null) {
System.out.println(""String_Node_Str"");
try {
TwitterReader.setKeys(Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_CONSUMER_KEY)),Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_CONSUMER_SECRET)),Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_APP_KEY)),Encryption.decrypt(PreferenceHandler.getStringPreference(Preference.TYPES.TWITTER_APP_SECRET)));
}
 catch (Exception exception) {
System.out.println(""String_Node_Str"");
}
TwitterReader.init();
}
 else {
System.out.println(""String_Node_Str"");
}
}
System.out.println(""String_Node_Str"");
if (autoStart) {
if (checkPax) {
TicketChecker.addChecker(new CheckPaxsite());
}
if (checkShowclix) {
TicketChecker.addChecker(new CheckShowclix());
}
if (checkTwitter && TwitterReader.isInitialized()) {
Checker.startTwitterStreaming();
}
}
if (isCommandLine()) {
if (doUpdate) {
UpdateHandler.loadVersionNotes();
if (UpdateHandler.updateAvailable()) {
UpdateHandler.autoUpdate(args);
}
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
System.out.println(""String_Node_Str"");
NotificationHandler.loadNotifications();
System.out.println(""String_Node_Str"");
NotificationHandler.showNewNotifications();
if (!autoStart) {
Checker.commandLineSettingsInput();
}
if (savePrefs) {
PreferenceHandler.savePreferences();
}
Checker.startCommandLineWebsiteChecking();
return;
}
if (doUpdate) {
start.setStatus(""String_Node_Str"");
UpdateHandler.loadVersionNotes();
if (UpdateHandler.updateAvailable()) {
UpdateHandler.promptUpdate(args);
}
setup.setPatchNotesText(UpdateHandler.getVersionNotes());
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
setup.setPatchNotesText(UpdateHandler.getVersionNotes());
}
}
,""String_Node_Str"");
}
start.setStatus(""String_Node_Str"");
NotificationHandler.loadNotifications();
start.setStatus(""String_Node_Str"");
start.dispose();
NotificationHandler.showNewNotifications();
if (autoStart) {
start.dispose();
Checker.startCheckingWebsites();
}
 else {
setup.loadProgramSettings();
setup.showWindow();
}
}",0.9961456102783726
81014,"public void loadProgramSettings(){
  javax.swing.SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      JTFEmail.setText(PreferenceHandler.getStringPreference(Preference.TYPES.EMAIL));
      JCBExpo.setSelectedIndex(getIndexOfEvent(PreferenceHandler.getStringPreference(Preference.TYPES.EVENT)));
      JCBCheckWebsite.setSelected(PreferenceHandler.getBooleanPreference(Preference.TYPES.CHECK_PAX));
      JCBCheckShowclix.setSelected(PreferenceHandler.getBooleanPreference(Preference.TYPES.CHECK_SHOWCLIX));
      JCBCheckTwitter.setSelected(TwitterReader.isInitialized() ? PreferenceHandler.getBooleanPreference(Preference.TYPES.CHECK_TWITTER) : false);
      JCBCheckTwitter.setEnabled(TwitterReader.isInitialized());
      JLTwitterDisabled.setVisible(!TwitterReader.isInitialized());
      JCBPlayAlarm.setSelected(PreferenceHandler.getBooleanPreference(Preference.TYPES.PLAY_ALARM));
      JSCheckTime.setValue(PreferenceHandler.getIntegerPreference(Preference.TYPES.REFRESHTIME));
      if (!JCBCheckWebsite.isSelected() && !JCBCheckShowclix.isSelected() && !JCBCheckTwitter.isSelected()) {
        JBStart.setEnabled(false);
      }
      java.awt.Dimension d=JTFCellNum.getSize();
      String cellnum=PreferenceHandler.getStringPreference(Preference.TYPES.CELLNUM);
      if (cellnum.contains(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"" + cellnum);
        String[] specificNumbers=cellnum.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
        JCBCarrier.setSelectedIndex(Setup.getIndexOfProvider(Email.getProvider(specificNumbers[0].substring(specificNumbers[0].indexOf(""String_Node_Str"")))));
        if (Email.getProvider(specificNumbers[0].substring(specificNumbers[0].indexOf(""String_Node_Str""))).equals(""String_Node_Str"")) {
          JTFCellNum.setText(specificNumbers[0].trim());
        }
 else {
          JTFCellNum.setText(specificNumbers[0].substring(0,specificNumbers[0].indexOf(""String_Node_Str"")).trim());
        }
        JTFCellNum.setCaretPosition(0);
        for (int a=1; a < specificNumbers.length; a++) {
          System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ specificNumbers[a]);
          addPhonePanel(new ExtraPhonePanel(Setup.this,Email.splitEmail(specificNumbers[a])[0].trim(),Email.splitEmail(specificNumbers[a])[1].trim()));
        }
      }
 else {
        System.out.println(""String_Node_Str"");
        JTFCellNum.setText(cellnum);
        JCBCarrier.setSelectedIndex(Setup.getIndexOfProvider(Email.getProvider(cellnum.substring(cellnum.indexOf(""String_Node_Str"")))));
      }
      JTFCellNum.setSize(d);
    }
  }
);
}","public void loadProgramSettings(){
  javax.swing.SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      JTFEmail.setText(PreferenceHandler.getStringPreference(Preference.TYPES.EMAIL));
      JCBExpo.setSelectedIndex(getIndexOfEvent(PreferenceHandler.getStringPreference(Preference.TYPES.EVENT)));
      if (PreferenceHandler.getPreferenceObject(Preference.TYPES.CHECK_PAX).isSavedInPreferences()) {
        JCBCheckWebsite.setSelected(PreferenceHandler.getBooleanPreference(Preference.TYPES.CHECK_PAX));
      }
      if (PreferenceHandler.getPreferenceObject(Preference.TYPES.CHECK_SHOWCLIX).isSavedInPreferences()) {
        JCBCheckShowclix.setSelected(PreferenceHandler.getBooleanPreference(Preference.TYPES.CHECK_SHOWCLIX));
      }
      JCBCheckTwitter.setSelected(TwitterReader.isInitialized() ? PreferenceHandler.getBooleanPreference(Preference.TYPES.CHECK_TWITTER) : false);
      JCBCheckTwitter.setEnabled(TwitterReader.isInitialized());
      JLTwitterDisabled.setVisible(!TwitterReader.isInitialized());
      JCBPlayAlarm.setSelected(PreferenceHandler.getBooleanPreference(Preference.TYPES.PLAY_ALARM));
      JSCheckTime.setValue(PreferenceHandler.getIntegerPreference(Preference.TYPES.REFRESHTIME));
      if (!JCBCheckWebsite.isSelected() && !JCBCheckShowclix.isSelected() && !JCBCheckTwitter.isSelected()) {
        JBStart.setEnabled(false);
      }
      java.awt.Dimension d=JTFCellNum.getSize();
      String cellnum=PreferenceHandler.getStringPreference(Preference.TYPES.CELLNUM);
      if (cellnum == null) {
        System.out.println(""String_Node_Str"");
      }
 else       if (cellnum.contains(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"" + cellnum);
        String[] specificNumbers=cellnum.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
        JCBCarrier.setSelectedIndex(Setup.getIndexOfProvider(Email.getProvider(specificNumbers[0].substring(specificNumbers[0].indexOf(""String_Node_Str"")))));
        if (Email.getProvider(specificNumbers[0].substring(specificNumbers[0].indexOf(""String_Node_Str""))).equals(""String_Node_Str"")) {
          JTFCellNum.setText(specificNumbers[0].trim());
        }
 else {
          JTFCellNum.setText(specificNumbers[0].substring(0,specificNumbers[0].indexOf(""String_Node_Str"")).trim());
        }
        JTFCellNum.setCaretPosition(0);
        for (int a=1; a < specificNumbers.length; a++) {
          System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ specificNumbers[a]);
          addPhonePanel(new ExtraPhonePanel(Setup.this,Email.splitEmail(specificNumbers[a])[0].trim(),Email.splitEmail(specificNumbers[a])[1].trim()));
        }
      }
 else {
        System.out.println(""String_Node_Str"");
        if (cellnum.contains(""String_Node_Str"")) {
          JCBCarrier.setSelectedIndex(Setup.getIndexOfProvider(Email.getProvider(cellnum.substring(cellnum.indexOf(""String_Node_Str"")))));
          if (JCBCarrier.getSelectedIndex() != 6) {
            JTFCellNum.setText(cellnum.substring(0,cellnum.indexOf(""String_Node_Str"")).trim());
          }
 else {
            JTFCellNum.setText(cellnum.trim());
          }
          JTFCellNum.setCaretPosition(0);
        }
      }
      JTFCellNum.setSize(d);
    }
  }
);
}",0.8714406065711878
81015,"private void customComponents(){
  setTitle(""String_Node_Str"" + PAXChecker.VERSION);
  JCBUseBeta.setSelected(PreferenceHandler.getBooleanPreference(Preference.TYPES.USE_BETA));
  JCBLoadNotifications.setSelected(PreferenceHandler.getBooleanPreference(Preference.TYPES.LOAD_NOTIFICATIONS));
  JCBCheckUpdates.setSelected(PreferenceHandler.getBooleanPreference(Preference.TYPES.LOAD_UPDATES));
  JCBSaveTwitterKeys.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.TWITTER_CONSUMER_KEY).shouldSave());
  if (PreferenceHandler.getBooleanPreference(Preference.TYPES.SAVE_PREFS)) {
    JCBSavePreferences.setSelected(true);
    JCBSaveCellnum.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.CELLNUM).shouldSave());
    JCBSaveCheckPax.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.CHECK_PAX).shouldSave());
    JCBSaveCheckShowclix.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.CHECK_SHOWCLIX).shouldSave());
    JCBSaveCheckTwitter.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.CHECK_TWITTER).shouldSave());
    JCBSaveEvent.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.EVENT).shouldSave());
    JCBSavePlayAlarm.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.PLAY_ALARM).shouldSave());
    JCBSaveRefreshTime.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.REFRESHTIME).shouldSave());
    JCBSaveEmail.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.EMAIL).shouldSave());
  }
 else {
    JCBSaveCellnum.setEnabled(false);
    JCBSaveCheckPax.setEnabled(false);
    JCBSaveCheckShowclix.setEnabled(false);
    JCBSaveCheckTwitter.setEnabled(false);
    JCBSaveEvent.setEnabled(false);
    JCBSavePlayAlarm.setEnabled(false);
    JCBSaveRefreshTime.setEnabled(false);
    JCBSaveEmail.setEnabled(false);
  }
  JTPExtra.setText(loadHtml(""String_Node_Str""));
  JTPExtra.setCaretPosition(0);
  JTPInstructions.setText(loadHtml(""String_Node_Str""));
  JTPInstructions.setCaretPosition(0);
}","private void customComponents(){
  setTitle(""String_Node_Str"" + PAXChecker.VERSION);
  if (PreferenceHandler.getBooleanPreference(Preference.TYPES.SAVE_PREFS)) {
    JCBSavePreferences.setSelected(true);
    JCBSaveCellnum.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.CELLNUM).shouldSave());
    JCBSaveCheckPax.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.CHECK_PAX).shouldSave());
    JCBSaveCheckShowclix.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.CHECK_SHOWCLIX).shouldSave());
    JCBSaveCheckTwitter.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.CHECK_TWITTER).shouldSave());
    JCBSaveEvent.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.EVENT).shouldSave());
    JCBSavePlayAlarm.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.PLAY_ALARM).shouldSave());
    JCBSaveRefreshTime.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.REFRESHTIME).shouldSave());
    JCBSaveEmail.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.EMAIL).shouldSave());
    JCBUseBeta.setSelected(PreferenceHandler.getBooleanPreference(Preference.TYPES.USE_BETA));
    JCBLoadNotifications.setSelected(PreferenceHandler.getBooleanPreference(Preference.TYPES.LOAD_NOTIFICATIONS));
    JCBCheckUpdates.setSelected(PreferenceHandler.getBooleanPreference(Preference.TYPES.LOAD_UPDATES));
    JCBSaveTwitterKeys.setSelected(PreferenceHandler.getPreferenceObject(Preference.TYPES.TWITTER_CONSUMER_KEY).shouldSave());
  }
 else {
    JCBSavePreferences.setSelected(false);
    JCBSaveCellnum.setEnabled(false);
    JCBSaveCheckPax.setEnabled(false);
    JCBSaveCheckShowclix.setEnabled(false);
    JCBSaveCheckTwitter.setEnabled(false);
    JCBSaveEvent.setEnabled(false);
    JCBSavePlayAlarm.setEnabled(false);
    JCBSaveRefreshTime.setEnabled(false);
    JCBSaveEmail.setEnabled(false);
    JCBUseBeta.setEnabled(false);
    JCBCheckUpdates.setEnabled(false);
    JCBLoadNotifications.setEnabled(false);
    JCBSaveTwitterKeys.setEnabled(false);
  }
  JTPExtra.setText(loadHtml(""String_Node_Str""));
  JTPExtra.setCaretPosition(0);
  JTPInstructions.setText(loadHtml(""String_Node_Str""));
  JTPInstructions.setCaretPosition(0);
}",0.751501154734411
81016,"/** 
 * Gets the index of the given Expo for the Setup JComboBox. The proper input for the method is the same Strings as the JComboBox in the Setup GUI.
 * @param eventName The expo (""Pax EXPO"") to get the index of
 * @return The index of the given expo, or 0 for incorrect inputs.
 */
public static final int getIndexOfEvent(String eventName){
switch (eventName.toLowerCase()) {
case ""String_Node_Str"":
default :
    return 0;
case ""String_Node_Str"":
  return 1;
case ""String_Node_Str"":
return 2;
case ""String_Node_Str"":
return 3;
}
}","/** 
 * Gets the index of the given Expo for the Setup JComboBox. The proper input for the method is the same Strings as the JComboBox in the Setup GUI.
 * @param eventName The expo (""Pax EXPO"") to get the index of
 * @return The index of the given expo, or 0 for incorrect inputs.
 */
public static final int getIndexOfEvent(String eventName){
  if (eventName == null) {
    return 0;
  }
switch (eventName.toLowerCase()) {
case ""String_Node_Str"":
default :
    return 0;
case ""String_Node_Str"":
  return 1;
case ""String_Node_Str"":
return 2;
case ""String_Node_Str"":
return 3;
}
}",0.9596412556053812
81017,"private void JCBSavePreferencesActionPerformed(java.awt.event.ActionEvent evt){
  boolean selected=JCBSavePreferences.isSelected();
  JCBSaveCellnum.setEnabled(selected);
  JCBSaveCheckPax.setEnabled(selected);
  JCBSaveCheckShowclix.setEnabled(selected);
  JCBSaveCheckTwitter.setEnabled(selected);
  JCBSaveEmail.setEnabled(selected);
  JCBSaveEvent.setEnabled(selected);
  JCBSavePlayAlarm.setEnabled(selected);
  JCBSaveRefreshTime.setEnabled(selected);
}","private void JCBSavePreferencesActionPerformed(java.awt.event.ActionEvent evt){
  boolean selected=JCBSavePreferences.isSelected();
  JCBSaveCellnum.setEnabled(selected);
  JCBSaveCheckPax.setEnabled(selected);
  JCBSaveCheckShowclix.setEnabled(selected);
  JCBSaveCheckTwitter.setEnabled(selected);
  JCBSaveEmail.setEnabled(selected);
  JCBSaveEvent.setEnabled(selected);
  JCBSavePlayAlarm.setEnabled(selected);
  JCBSaveRefreshTime.setEnabled(selected);
  JCBUseBeta.setEnabled(selected);
  JCBCheckUpdates.setEnabled(selected);
  JCBLoadNotifications.setEnabled(selected);
  JCBSaveTwitterKeys.setEnabled(selected);
}",0.849213691026827
81018,"/** 
 * Gets the index of the given provider for the Set JComboBox. The proper input for this method is the same Strings as the JComboBox in the Setup GUI.
 * @param provider The provider to get the index of
 * @return The index of the given provider, or 0 for incorrect inputs.
 */
public static final int getIndexOfProvider(String provider){
switch (provider.toLowerCase()) {
case ""String_Node_Str"":
default :
    return 0;
case ""String_Node_Str"":
  return 1;
case ""String_Node_Str"":
return 2;
case ""String_Node_Str"":
return 3;
case ""String_Node_Str"":
return 4;
case ""String_Node_Str"":
return 5;
case ""String_Node_Str"":
return 6;
}
}","/** 
 * Gets the index of the given provider for the Set JComboBox. The proper input for this method is the same Strings as the JComboBox in the Setup GUI.
 * @param provider The provider to get the index of
 * @return The index of the given provider, or 0 for incorrect inputs.
 */
public static final int getIndexOfProvider(String provider){
  if (provider == null) {
    return 0;
  }
switch (provider.toLowerCase()) {
case ""String_Node_Str"":
default :
    return 0;
case ""String_Node_Str"":
  return 1;
case ""String_Node_Str"":
return 2;
case ""String_Node_Str"":
return 3;
case ""String_Node_Str"":
return 4;
case ""String_Node_Str"":
return 5;
case ""String_Node_Str"":
return 6;
}
}",0.9665144596651446
81019,"/** 
 * Sets the last Notification ID loaded. Set to DISABLE to disable notifications.
 * @param lNID The last Notification ID loaded
 */
public static void setLastNotificationID(String lNID){
  lastNotificationID=lNID;
}","/** 
 * Sets the last Notification ID loaded. Set to DISABLE to disable notifications.
 * @param lNID The last Notification ID loaded
 */
public static void setLastNotificationID(String lNID){
  if (lNID == null) {
    return;
  }
  lastNotificationID=lNID;
}",0.8291666666666667
81020,"public void setValue(Object val){
  if (val == null) {
    System.out.println(""String_Node_Str"");
  }
  value=val;
  System.out.println(""String_Node_Str"" + value);
}","public void setValue(Object val){
  if (val == null) {
    System.out.println(""String_Node_Str"");
  }
  value=val;
  System.out.println(type.name() + ""String_Node_Str"" + value);
}",0.9593023255813954
81021,"protected static synchronized boolean isInPrefs(Preference.TYPES pref){
  try {
    String prefT=pref.name();
    String[] keys=myPrefs.keys();
    for (    String k : keys) {
      if (k.equalsIgnoreCase(prefT)) {
        return true;
      }
    }
  }
 catch (  BackingStoreException bse) {
    bse.printStackTrace();
  }
  return false;
}","protected static synchronized boolean isInPrefs(Preference.TYPES pref){
  try {
    String prefT=pref.name();
    String[] keys=myPrefs.keys();
    for (    String k : keys) {
      if (k.equalsIgnoreCase(prefT)) {
        System.out.println(""String_Node_Str"" + pref.name() + ""String_Node_Str"");
        return true;
      }
    }
  }
 catch (  BackingStoreException bse) {
    bse.printStackTrace();
  }
  return false;
}",0.8938401048492791
81022,"/** 
 * Creates all Preference objects that the program will use. Feels somewhat hacked together at the moment. Can be run more than once without repercussion.
 */
public static synchronized void init(){
  for (  Preference.TYPES pTypes : Preference.TYPES.values()) {
    getPreferenceObject(pTypes);
  }
}","/** 
 * Creates all Preference objects that the program will use. Feels somewhat hacked together at the moment. Can be run more than once without repercussion.
 */
public static synchronized void init(){
  for (  Preference.TYPES pTypes : Preference.TYPES.values()) {
    getPreferenceObject(pTypes);
  }
  getPreferenceObject(Preference.TYPES.LAST_NOTIFICATION_ID).setForceSave(true);
  getPreferenceObject(Preference.TYPES.SAVE_PREFS).setForceSave(true);
}",0.8010471204188482
81023,"public static synchronized void savePreferences(){
  boolean shouldSave=getPreferenceObject(Preference.TYPES.SAVE_PREFS).shouldSave();
  try {
    for (    Preference p : prefArray) {
      if (p.getValue() == null || !shouldSave) {
        myPrefs.remove(p.getPrefType().name());
      }
 else {
        myPrefs.put(p.getPrefType().name(),String.valueOf(p.getValue()));
      }
    }
    myPrefs.sync();
  }
 catch (  BackingStoreException bse) {
  }
}","public static synchronized void savePreferences(){
  boolean shouldSave=getBooleanPreference(Preference.TYPES.SAVE_PREFS);
  System.out.println(""String_Node_Str"" + shouldSave);
  try {
    for (    Preference p : prefArray) {
      if (p.getValue() == null || (!shouldSave && !p.forceSave())) {
        myPrefs.remove(p.getPrefType().name());
      }
 else {
        myPrefs.put(p.getPrefType().name(),String.valueOf(p.getValue()));
      }
    }
    myPrefs.sync();
  }
 catch (  BackingStoreException bse) {
  }
}",0.8987603305785123
81024,"public static synchronized String getStringPreference(Preference.TYPES type){
  return myPrefs.get(type.name(),null);
}","public static synchronized String getStringPreference(Preference.TYPES type){
  String str=String.valueOf(getPreferenceObject(type).getValue());
  if (str.equalsIgnoreCase(""String_Node_Str"")) {
    str=null;
  }
  return str;
}",0.5202312138728323
81025,"/** 
 * Gets the integer value for the given preference.
 * @param type The Preference to get the value of
 * @return The integer value, or -1 if preference is not an integer OR does not exist
 */
public static synchronized int getIntegerPreference(Preference.TYPES type){
  try {
    return Integer.parseInt(String.valueOf(loadPreferenceValue(type)));
  }
 catch (  NumberFormatException numberFormatException) {
    return -1;
  }
}","/** 
 * Gets the integer value for the given preference.
 * @param type The Preference to get the value of
 * @return The integer value, or -1 if preference is not an integer OR does not exist
 */
public static synchronized int getIntegerPreference(Preference.TYPES type){
  try {
    return Integer.parseInt(String.valueOf(getPreferenceObject(type).getValue()));
  }
 catch (  NumberFormatException numberFormatException) {
    return -1;
  }
}",0.969283276450512
81026,"public static synchronized boolean getBooleanPreference(Preference.TYPES type){
  return Boolean.parseBoolean(String.valueOf(loadPreferenceValue(type)));
}","public static synchronized boolean getBooleanPreference(Preference.TYPES type){
  System.out.println(""String_Node_Str"" + type.name() + ""String_Node_Str""+ Boolean.parseBoolean(String.valueOf(getPreferenceObject(type).getValue())));
  return Boolean.parseBoolean(String.valueOf(getPreferenceObject(type).getValue()));
}",0.5550847457627118
81027,"/** 
 * Opens the URL given in the computer's default browser. Note that this will NOT work if the desktop environment isn't supported (generally a non-issue). Also note that this will simply open the URL -- it will not parse through it to make sure it is valid!
 * @param url The URL to open in the computer's default browser
 */
public static void openLinkInBrowser(URL url){
  if (url == null) {
    ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
    return;
  }
  Desktop desktop=Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
  if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
    try {
      desktop.browse(url.toURI());
    }
 catch (    URISyntaxException|IOException e) {
      ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
 else {
    ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
  }
}","/** 
 * Opens the URL given in the computer's default browser. Note that this will NOT work if the desktop environment isn't supported (generally a non-issue). Also note that this will simply open the URL -- it will not parse through it to make sure it is valid!
 * @param url The URL to open in the computer's default browser
 */
public static void openLinkInBrowser(URL url){
  if (url == null) {
    ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
    return;
  }
  Desktop desktop=Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
  if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
    try {
      desktop.browse(url.toURI());
    }
 catch (    URISyntaxException|IOException e) {
      ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
 else {
    try {
      if (!browse(url.toURI())) {
        ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      }
    }
 catch (    URISyntaxException use) {
      ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"",use);
    }
  }
}",0.9089099054255848
81028,"private static Set<Integer> getRelevantSellerIDs(int partnerID){
  Set<Integer> retSet=new TreeSet<>();
  try {
    String jsonText=parseJSON(new URL(API_LINK_BASE + API_EXTENSION_PARTNER + partnerID+ ""String_Node_Str""));
    if (jsonText == null) {
      return retSet;
    }
    JSONParser mP=new JSONParser();
    try {
      JSONObject obj=(JSONObject)mP.parse(jsonText);
      for (      String s : (Iterable<String>)obj.keySet()) {
        try {
          JSONObject obj2=((JSONObject)obj.get(s));
          if (obj2.get(""String_Node_Str"") == null) {
            System.out.println(""String_Node_Str"");
          }
 else           if (((String)obj2.get(""String_Node_Str"")).toLowerCase().contains(""String_Node_Str"")) {
            System.out.println(""String_Node_Str"" + obj2.get(""String_Node_Str""));
            retSet.add(Integer.parseInt(s));
          }
        }
 catch (        ClassCastException e) {
          e.printStackTrace();
        }
      }
    }
 catch (    ClassCastException cce) {
      System.out.println(""String_Node_Str"" + mP.parse(jsonText).getClass().getName() + ""String_Node_Str""+ mP.parse(jsonText));
    }
  }
 catch (  IOException iOException) {
    System.out.println(""String_Node_Str"" + partnerID);
  }
catch (  ParseException parseException) {
  }
  return retSet;
}","private static Set<Integer> getRelevantSellerIDs(int partnerID){
  Set<Integer> retSet=new TreeSet<>();
  try {
    String jsonText=parseJSON(new URL(API_LINK_BASE + API_EXTENSION_PARTNER + partnerID+ ""String_Node_Str""));
    if (jsonText == null) {
      return retSet;
    }
    JSONParser mP=new JSONParser();
    try {
      JSONObject obj=(JSONObject)mP.parse(jsonText);
      for (      String s : (Iterable<String>)obj.keySet()) {
        try {
          JSONObject obj2=((JSONObject)obj.get(s));
          String seller=(String)obj2.get(""String_Node_Str"");
          if (seller == null) {
            System.out.println(""String_Node_Str"");
          }
 else           if (seller.toLowerCase().contains(""String_Node_Str"") || seller.toLowerCase().contains(""String_Node_Str"")) {
            System.out.println(""String_Node_Str"" + obj2.get(""String_Node_Str""));
            retSet.add(Integer.parseInt(s));
          }
        }
 catch (        ClassCastException e) {
          e.printStackTrace();
        }
      }
    }
 catch (    ClassCastException cce) {
      System.out.println(""String_Node_Str"" + mP.parse(jsonText).getClass().getName() + ""String_Node_Str""+ mP.parse(jsonText));
    }
  }
 catch (  IOException iOException) {
    System.out.println(""String_Node_Str"" + partnerID);
  }
catch (  ParseException parseException) {
  }
  return retSet;
}",0.9432970334209538
81029,"public static Set<String> getAllRelevantURLs(){
  Set<Integer> sellerIDs=getAllRelevantSellerIDs();
  Set<Integer> partnerIDs=getAllPartners(sellerIDs);
  final Set<String> retSet=new TreeSet<>();
  for (  int partnerID : partnerIDs) {
    retSet.addAll(getAllPartnerEventURLs(partnerID));
  }
  for (  int sellerID : sellerIDs) {
    retSet.addAll(getAllSellerEventURLs(sellerID));
  }
  int[] venues={13961,16418,20012,15820};
  for (  int venueID : venues) {
    retSet.addAll(getAllVenueEventURLs(venueID));
  }
  return retSet;
}","public static Set<String> getAllRelevantURLs(){
  Set<Integer> sellerIDs=getAllRelevantSellerIDs();
  sellerIDs.add(getSellerID(""String_Node_Str""));
  sellerIDs.add(getSellerID(""String_Node_Str""));
  sellerIDs.add(getSellerID(""String_Node_Str""));
  sellerIDs.add(getSellerID(""String_Node_Str""));
  Set<Integer> partnerIDs=getAllPartners(sellerIDs);
  partnerIDs.add(getPartnerID(""String_Node_Str""));
  partnerIDs.add(getPartnerID(""String_Node_Str""));
  partnerIDs.add(getPartnerID(""String_Node_Str""));
  partnerIDs.add(getPartnerID(""String_Node_Str""));
  final Set<String> retSet=new TreeSet<>();
  for (  int partnerID : partnerIDs) {
    retSet.addAll(getAllPartnerEventURLs(partnerID));
  }
  for (  int sellerID : sellerIDs) {
    retSet.addAll(getAllSellerEventURLs(sellerID));
  }
  int[] venues={13961,16418,20012,15820};
  for (  int venueID : venues) {
    retSet.addAll(getAllVenueEventURLs(venueID));
  }
  return retSet;
}",0.7275204359673024
81030,"private static Set<String> getAllEventURLs(JSONObject obj){
  Set<String> retSet=new TreeSet<>();
  for (  String s : (Iterable<String>)obj.keySet()) {
    retSet.add(""String_Node_Str"" + s);
    try {
      JSONObject obj2=((JSONObject)obj.get(s));
      if (obj2.get(""String_Node_Str"") != null) {
        retSet.add((String)obj2.get(""String_Node_Str""));
      }
    }
 catch (    ClassCastException cce) {
      System.out.println(""String_Node_Str"" + s + ""String_Node_Str""+ obj.get(s).getClass().getSimpleName());
    }
  }
  return retSet;
}","private static Set<String> getAllEventURLs(JSONObject obj){
  Set<String> retSet=new TreeSet<>();
  for (  String s : (Iterable<String>)obj.keySet()) {
    retSet.add(EVENT_LINK_BASE + s);
    try {
      JSONObject obj2=((JSONObject)obj.get(s));
      if (obj2.get(""String_Node_Str"") != null) {
        retSet.add((String)obj2.get(""String_Node_Str""));
      }
    }
 catch (    ClassCastException cce) {
      System.out.println(""String_Node_Str"" + s + ""String_Node_Str""+ obj.get(s).getClass().getSimpleName());
    }
  }
  return retSet;
}",0.970479704797048
81031,"@Override public synchronized boolean ticketsFound(){
  return !alreadyChecked.contains(currentLink);
}","@Override public synchronized boolean ticketsFound(){
  if (currentLink == null) {
    return false;
  }
  return !alreadyChecked.contains(currentLink);
}",0.8015564202334631
81032,"/** 
 * Parses the link from the given String. Note that this cannot parse links with spaces.
 * @param link The String with a link to extract
 * @return The link
 */
public static String parseLink(String link){
  if (link == null) {
    return ""String_Node_Str"";
  }
  if (link.contains(""String_Node_Str"")) {
    link=link.substring(link.indexOf(""String_Node_Str""));
  }
 else   if (link.contains(""String_Node_Str"")) {
    link=link.substring(link.indexOf(""String_Node_Str""));
  }
 else   if (link.contains(""String_Node_Str"")) {
    link=link.substring(link.indexOf(""String_Node_Str""));
  }
 else {
    return null;
  }
  if (link.contains(""String_Node_Str"")) {
    link=link.substring(0,link.indexOf(""String_Node_Str""));
  }
  link=link.trim();
  if (link.endsWith(""String_Node_Str"")) {
    link=link.substring(0,link.length() - 1);
  }
  System.out.println(""String_Node_Str"" + link);
  return link.trim();
}","/** 
 * Parses the link from the given String. Note that this cannot parse links with spaces.
 * @param link The String with a link to extract
 * @return The link
 */
public static String parseLink(String link){
  if (link == null) {
    return ""String_Node_Str"";
  }
  if (link.contains(""String_Node_Str"")) {
    link=link.substring(link.indexOf(""String_Node_Str""));
  }
 else   if (link.contains(""String_Node_Str"")) {
    link=link.substring(link.indexOf(""String_Node_Str""));
  }
 else   if (link.contains(""String_Node_Str"")) {
    link=link.substring(link.indexOf(""String_Node_Str""));
  }
 else {
    return null;
  }
  if (link.contains(""String_Node_Str"")) {
    link=link.substring(0,link.indexOf(""String_Node_Str""));
  }
  if (link.contains(""String_Node_Str"")) {
    link=link.substring(0,link.indexOf(""String_Node_Str""));
  }
  link=link.trim();
  if (link.endsWith(""String_Node_Str"")) {
    link=link.substring(0,link.length() - 1);
  }
  System.out.println(""String_Node_Str"" + link);
  return link.trim();
}",0.9023883696780892
81033,"/** 
 * Returns the expo currently set. This should adhere to the format of ""PAX [expo]"" or just ""[expo]"".
 * @return The expo currently set
 * @see #setExpo(java.lang.String)
 */
public static String getExpo(){
  return Expo;
}","/** 
 * Returns the expo currently set. This should adhere to the format of ""PAX [expo]"" or just ""[expo]"".
 * @return The expo currently set
 * @see #setExpo(java.lang.String)
 */
public static String getExpo(){
  if (Expo == null) {
    return ""String_Node_Str"";
  }
  return Expo;
}",0.84765625
81034,"/** 
 * Checks whether or not the given URL is a PAX ticket page.
 * @param URL The URL to check
 * @return True if it is, false if not
 */
public static boolean isPaxPage(String URL){
  try {
    HttpURLConnection connect=Browser.setUpConnection(new URL(URL));
    BufferedReader reader=new BufferedReader(new InputStreamReader(connect.getInputStream()));
    String text=""String_Node_Str"";
    String line;
    while ((line=reader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      text+=line.toLowerCase();
    }
    if (text.contains(Browser.getExpo().toLowerCase())) {
      System.out.println(""String_Node_Str"");
      return true;
    }
  }
 catch (  IOException iOException) {
  }
  return false;
}","/** 
 * Checks whether or not the given URL is a PAX ticket page or a queue page.
 * @param URL The URL to check
 * @return True if it is, false if not
 */
public static boolean isPaxPage(String URL){
  try {
    HttpURLConnection connect=Browser.setUpConnection(new URL(URL));
    BufferedReader reader=new BufferedReader(new InputStreamReader(connect.getInputStream()));
    String text=""String_Node_Str"";
    String line;
    while ((line=reader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      text+=line.toLowerCase();
    }
    if (text.contains(""String_Node_Str"") || text.contains(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"");
      return true;
    }
 else {
      return false;
    }
  }
 catch (  IOException iOException) {
    return true;
  }
}",0.8284409654272668
81035,"public static void runTwitterStream(Twitter twitter,String[] handles){
  if (isStreamingTwitter()) {
    return;
  }
  System.out.println(Arrays.toString(handles));
  try {
    myStream=new TwitterStreamFactory().getInstance(twitter.getAuthorization());
    myStream.addListener(listener);
    myStream.addConnectionLifeCycleListener(cLCListener);
    myStream.user(handles);
    usersToCheck=handles.clone();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void runTwitterStream(Twitter twitter,String[] handles){
  if (isStreamingTwitter()) {
    return;
  }
  System.out.println(Arrays.toString(handles));
  try {
    myStream=new TwitterStreamFactory().getInstance(twitter.getAuthorization());
    myStream.addListener(listener);
    myStream.addConnectionLifeCycleListener(cLCListener);
    myStream.user(handles);
    usersToCheck=handles.clone();
    for (int i=0; i < usersToCheck.length; i++) {
      if (usersToCheck[i].startsWith(""String_Node_Str"")) {
        usersToCheck[i]=usersToCheck[i].replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
      usersToCheck[i]=usersToCheck[i].toLowerCase();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.7784232365145228
81036,"@Override public void onException(Exception ex){
  System.out.println(""String_Node_Str"");
  ex.printStackTrace();
}","@Override public void onException(Exception ex){
  ex.printStackTrace();
  if (++successiveErrorCount == 1) {
    if (ex.getMessage().contains(""String_Node_Str"")) {
      ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",ex);
    }
  }
 else   if (successiveErrorCount == 3) {
    if (ex.getMessage().contains(""String_Node_Str"")) {
      ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",ex);
    }
 else {
      ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",ex);
    }
    myStream.shutdown();
  }
}",0.2044198895027624
81037,"@Override public void onConnect(){
  System.out.println(""String_Node_Str"");
  CheckSetup.twitterConnection(true);
}","@Override public void onConnect(){
  System.out.println(""String_Node_Str"");
  CheckSetup.twitterConnection(true);
  successiveErrorCount=0;
}",0.8984375
81038,"@Override public void onCleanUp(){
  System.out.println(""String_Node_Str"");
}","@Override public void onCleanUp(){
  System.out.println(""String_Node_Str"");
  myStream=null;
  successiveErrorCount=0;
}",0.7817258883248731
81039,"@Override public void onDisconnect(){
  System.out.println(""String_Node_Str"");
  ErrorDisplay.showErrorWindow(""String_Node_Str"" + ""String_Node_Str"");
  CheckSetup.twitterConnection(false);
}","@Override public void onDisconnect(){
  System.out.println(""String_Node_Str"");
  CheckSetup.twitterConnection(false);
}",0.7702265372168284
81040,"@Override public void onStatus(Status status){
  System.out.println(""String_Node_Str"" + status.getUser().getScreenName() + ""String_Node_Str""+ status.getText());
  if (!TwitterReader.hasKeyword(status.getText())) {
    System.out.println(""String_Node_Str"");
  }
 else {
    for (    String s : usersToCheck) {
      if (s.startsWith(""String_Node_Str"")) {
        s=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
      if (s.toLowerCase().equals(status.getUser().getScreenName().toLowerCase())) {
        if (status.getText().contains(""String_Node_Str"")) {
          String tStatus=status.getText();
          String link=Browser.parseLink(tStatus);
          while (link != null) {
            String toOpen=Browser.unshortenURL(link);
            if (!toOpen.contains(""String_Node_Str"") && !toOpen.contains(""String_Node_Str"") && !toOpen.contains(""String_Node_Str"")) {
              System.out.println(""String_Node_Str"");
            }
 else             if (!TicketChecker.hasOpenedLink(toOpen)) {
              CheckSetup.linkFound(toOpen);
              TicketChecker.addLinkFound(toOpen);
            }
 else {
              System.out.println(""String_Node_Str"");
            }
            tStatus=tStatus.substring(tStatus.indexOf(link) + link.length(),tStatus.length());
            link=Browser.parseLink(tStatus);
          }
          return;
        }
 else {
          System.out.println(""String_Node_Str"");
        }
      }
    }
    System.out.println(""String_Node_Str"");
  }
}","@Override public void onStatus(Status status){
  System.out.println(""String_Node_Str"" + status.getUser().getScreenName() + ""String_Node_Str""+ status.getText());
  if (!TwitterReader.hasKeyword(status.getText())) {
    System.out.println(""String_Node_Str"");
  }
 else {
    for (    String s : usersToCheck) {
      if (s.equals(status.getUser().getScreenName().toLowerCase()) && status.getText().contains(""String_Node_Str"")) {
        String tStatus=status.getText();
        String link=Browser.parseLink(tStatus);
        while (link != null) {
          String toOpen=Browser.unshortenURL(link);
          if (!toOpen.contains(""String_Node_Str"") && !toOpen.contains(""String_Node_Str"") && !toOpen.contains(""String_Node_Str"")) {
            System.out.println(""String_Node_Str"");
          }
 else           if (!TicketChecker.hasOpenedLink(toOpen)) {
            CheckSetup.linkFound(toOpen);
            TicketChecker.addLinkFound(toOpen);
          }
 else {
            System.out.println(""String_Node_Str"");
          }
          tStatus=tStatus.substring(tStatus.indexOf(link) + link.length(),tStatus.length());
          link=Browser.parseLink(tStatus);
        }
        return;
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
    System.out.println(""String_Node_Str"");
  }
}",0.8188920454545454
81041,"public void setShouldSave(boolean save){
  shouldSave=save && value != null;
}","public void setShouldSave(boolean save){
  shouldSave=save;
}",0.8776978417266187
81042,"public static synchronized void savePreferences(){
  boolean shouldSave=getBooleanPreference(Preference.TYPES.SAVE_PREFS);
  System.out.println(""String_Node_Str"" + shouldSave);
  try {
    for (    Preference p : prefArray) {
      if (p.getValue() == null || (!shouldSave && !p.forceSave())) {
        myPrefs.remove(p.getPrefType().name());
      }
 else {
        myPrefs.put(p.getPrefType().name(),String.valueOf(p.getValue()));
      }
    }
    myPrefs.sync();
  }
 catch (  BackingStoreException bse) {
  }
}","public static synchronized void savePreferences(){
  boolean shouldSave=getBooleanPreference(Preference.TYPES.SAVE_PREFS);
  System.out.println(""String_Node_Str"" + shouldSave);
  try {
    for (    Preference p : prefArray) {
      if (p.getValue() == null || ((!shouldSave || !p.shouldSave()) && !p.forceSave())) {
        myPrefs.remove(p.getPrefType().name());
      }
 else {
        myPrefs.put(p.getPrefType().name(),String.valueOf(p.getValue()));
      }
    }
    myPrefs.sync();
  }
 catch (  BackingStoreException bse) {
  }
}",0.9800190294957184
81043,"/** 
 * Gets the latest Showclix ID for a specific PAX event. This uses the Showclix API to find all of the events listed under a specific seller. In this case, each PAX event (Prime, East, etc) has a separate Showclix seller account associated with it. This uses the fact that every new Showclix event has a larger ID than before, and simply returns the largest Event ID for the specific expo given.
 * @param expo The expo to check
 * @return The most recent Showclix ID
 */
public static int getLatestShowclixID(String expo){
  try {
    URL url=new URL(getShowclixAPILink(expo));
    HttpURLConnection httpCon=(HttpURLConnection)url.openConnection();
    httpCon.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
    BufferedReader reader=new BufferedReader(new InputStreamReader(httpCon.getInputStream()));
    String jsonText=""String_Node_Str"";
    String line;
    while ((line=reader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      jsonText+=line;
    }
    reader.close();
    JSONParser mP=new JSONParser();
    JSONObject obj=(JSONObject)mP.parse(jsonText);
    int maxId=0;
    for (    String s : (Iterable<String>)obj.keySet()) {
      maxId=Math.max(maxId,Integer.parseInt((String)s));
    }
    System.out.println(""String_Node_Str"" + maxId);
    return maxId;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return -1;
  }
}","/** 
 * Gets the latest Showclix ID for a specific PAX event. This uses the Showclix API to find all of the events listed under a specific seller. In this case, each PAX event (Prime, East, etc) has a separate Showclix seller account associated with it. This uses the fact that every new Showclix event has a larger ID than before, and simply returns the largest Event ID for the specific expo given.
 * @param expo The expo to check
 * @return The most recent Showclix ID
 */
public static int getLatestShowclixID(String expo){
  try {
    URL url=new URL(getShowclixAPILink(expo));
    HttpURLConnection httpCon=(HttpURLConnection)url.openConnection();
    httpCon.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
    BufferedReader reader=new BufferedReader(new InputStreamReader(httpCon.getInputStream()));
    String jsonText=""String_Node_Str"";
    String line;
    while ((line=reader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      jsonText+=line;
    }
    reader.close();
    JSONParser mP=new JSONParser();
    JSONObject obj=(JSONObject)mP.parse(jsonText);
    int maxId=0;
    for (    String s : (Iterable<String>)obj.keySet()) {
      maxId=Math.max(maxId,Integer.parseInt((String)s));
    }
    return maxId;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return -1;
  }
}",0.9812292970187708
81044,"/** 
 * Sets the PAX Website link text. Note that this automatically starts with ""PAX Website link:""
 * @param s The text to use
 */
public static void setStatusWebsiteLink(String s){
  if (status != null) {
    status.setWebsiteLink(s);
  }
}","/** 
 * Sets the PAX Website link text. Note that this automatically starts with ""PAX Website link:""
 * @param s The text to use
 */
public static void setStatusWebsiteLink(String s){
  if (status != null) {
    status.setWebsiteLink(s);
  }
 else {
    System.out.println(""String_Node_Str"" + s);
  }
}",0.8917431192660551
81045,"/** 
 * Sets the Showclix link text. Note that this automatically starts with ""Showclix link:""
 * @param s The text to use
 */
public static void setStatusShowclixLink(String s){
  if (status != null) {
    status.setShowclixLink(s);
  }
}","/** 
 * Sets the Showclix link text. Note that this automatically starts with ""Showclix link:""
 * @param s The text to use
 */
public static void setStatusShowclixLink(String s){
  if (status != null) {
    status.setShowclixLink(s);
  }
 else {
    System.out.println(""String_Node_Str"" + s);
  }
}",0.8901303538175046
81046,"public void setEmailAddress(String address){
  if (address == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
 else   if (address.length() < 5) {
    System.out.println(""String_Node_Str"");
    return;
  }
 else   if (!address.contains(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + address + ""String_Node_Str"");
    address+=getCarrierExtension(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + address);
  address=address.trim();
  String temp=address.substring(0,address.indexOf(""String_Node_Str""));
  temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  address=temp + address.substring(address.indexOf(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + address);
  completeAddress=address;
}","public void setEmailAddress(String address){
  if (address == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
 else   if (address.length() < 5) {
    System.out.println(""String_Node_Str"");
    return;
  }
 else   if (!address.contains(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + address + ""String_Node_Str"");
    address+=getCarrierExtension(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + address);
  address=address.trim();
  String temp=address.substring(0,address.indexOf(""String_Node_Str""));
  temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  address=temp + address.substring(address.indexOf(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + address);
  completeAddress=address;
}",0.9680616740088106
81047,"/** 
 * Calculates how many error windows are open once an error window is closed. This method unlocks the   {@link Signin} window once ALL the errorwindows are closed. This should ONLY be called when an error window is closed, otherwise unexpected results could occur.
 */
public static void errWindowClosed(){
  if (--errorWindowCount == 0) {
    if (canExit()) {
      System.exit(0);
    }
  }
}","/** 
 * Calculates how many error windows are open once an error window is closed. This method unlocks the   {@link Signin} window once ALL the errorwindows are closed. This should ONLY be called when an error window is closed, otherwise unexpected results could occur.
 */
public static void errWindowClosed(){
}",0.8792134831460674
81048,"/** 
 * Sends a test email. Uses the same Thread, blocks for about 10 seconds.
 */
public static void sendTestEmail(){
  Email.testEmail();
}","/** 
 * Sends a test email. Uses the same Thread, blocks until completed.
 */
public static void sendTestEmail(){
  Email.testEmail();
}",0.9025270758122744
81049,"/** 
 * Prompts the user for the required program information, including username, password, email, and other options. Note that this does NOT start the command-line website checking.
 */
public static void commandLineSettingsInput(){
  if (Email.getUsername() == null) {
    System.out.print(""String_Node_Str"");
    try {
      Email.setUsername(myScanner.next());
      System.out.println(""String_Node_Str"");
      Email.setPassword(myScanner.next());
    }
 catch (    Exception e) {
    }
  }
  if (Email.getAddressList().isEmpty()) {
    System.out.print(""String_Node_Str"");
    try {
      Email.addEmailAddress(myScanner.next());
      System.out.println();
    }
 catch (    Exception e) {
    }
  }
  if (Paxsite.isCheckingPaxWebsite()) {
    System.out.print(""String_Node_Str"");
    try {
      if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
        Paxsite.enablePaxWebsiteChecking();
      }
      System.out.println();
    }
 catch (    Exception e) {
    }
  }
  if (Paxsite.isCheckingPaxWebsite()) {
    System.out.print(""String_Node_Str"");
    try {
      if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
        Showclix.enableShowclixWebsiteChecking();
      }
      System.out.println();
    }
 catch (    Exception e) {
    }
  }
  if (getRefreshTime() == 10) {
    System.out.print(""String_Node_Str"");
    try {
      setRefreshTime(Integer.parseInt(myScanner.next(),10));
      System.out.println();
    }
 catch (    Exception e) {
    }
  }
  if (!Paxsite.isCheckingPaxWebsite()) {
    System.out.print(""String_Node_Str"");
    try {
      if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
        Audio.setPlayAlarm(true);
      }
      System.out.println();
    }
 catch (    Exception e) {
    }
  }
  if (Browser.getExpo() == null) {
    System.out.print(""String_Node_Str"");
    try {
      String input=myScanner.next();
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
        Browser.setExpo(""String_Node_Str"");
case ""String_Node_Str"":
case ""String_Node_Str"":
      Browser.setExpo(""String_Node_Str"");
case ""String_Node_Str"":
case ""String_Node_Str"":
    Browser.setExpo(""String_Node_Str"");
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
  Browser.setExpo(""String_Node_Str"");
default :
System.out.println(""String_Node_Str"");
Browser.setExpo(""String_Node_Str"");
}
System.out.println();
}
 catch (Exception e) {
}
}
}","/** 
 * Prompts the user for the required program information, including username, password, email, and other options. Note that this does NOT start the command-line website checking.
 */
public static void commandLineSettingsInput(){
  if (Email.getUsername() == null) {
    System.out.print(""String_Node_Str"");
    try {
      Email.setUsername(myScanner.next());
      System.out.print(""String_Node_Str"");
      Email.setPassword(myScanner.next());
    }
 catch (    Exception e) {
    }
  }
  if (Email.getAddressList().isEmpty()) {
    System.out.print(""String_Node_Str"");
    try {
      Email.addEmailAddress(myScanner.next());
    }
 catch (    Exception e) {
    }
  }
  if (Paxsite.isCheckingPaxWebsite()) {
    System.out.print(""String_Node_Str"");
    try {
      if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
        Paxsite.setCheckPax(true);
      }
 else {
        Paxsite.setCheckPax(false);
      }
    }
 catch (    Exception e) {
    }
  }
  if (Paxsite.isCheckingPaxWebsite()) {
    System.out.print(""String_Node_Str"");
    try {
      if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
        Showclix.setCheckShowclix(true);
      }
 else {
        Showclix.setCheckShowclix(false);
      }
    }
 catch (    Exception e) {
    }
  }
  if (getRefreshTime() == 10) {
    System.out.print(""String_Node_Str"");
    try {
      setRefreshTime(Integer.parseInt(myScanner.next(),10));
    }
 catch (    Exception e) {
    }
  }
  System.out.print(""String_Node_Str"");
  try {
    if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
      Audio.setPlayAlarm(true);
    }
  }
 catch (  Exception e) {
  }
  if (Browser.getExpo() == null) {
    System.out.print(""String_Node_Str"");
    try {
      String input=myScanner.next();
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
        Browser.setExpo(""String_Node_Str"");
case ""String_Node_Str"":
case ""String_Node_Str"":
      Browser.setExpo(""String_Node_Str"");
case ""String_Node_Str"":
case ""String_Node_Str"":
    Browser.setExpo(""String_Node_Str"");
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
  Browser.setExpo(""String_Node_Str"");
default :
System.out.println(""String_Node_Str"");
Browser.setExpo(""String_Node_Str"");
}
System.out.println();
}
 catch (Exception e) {
}
}
}",0.7519044677784641
81050,"/** 
 * Starts checking for website updates and listening for commands given through the console.
 */
public static void startCommandLineWebsiteChecking(){
  PAXChecker.continueProgram(new Runnable(){
    @Override public void run(){
      String input;
      while (true) {
        try {
          input=myScanner.next();
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
switch (input.toLowerCase()) {
case ""String_Node_Str"":
          System.exit(0);
        break;
case ""String_Node_Str"":
      PAXChecker.sendTestEmail();
    break;
case ""String_Node_Str"":
  Audio.playAlarm();
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
forceRefresh=true;
break;
default :
System.out.println(""String_Node_Str"" + input.toLowerCase());
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
}
}
}
}
);
PAXChecker.continueProgram(new Runnable(){
@Override public void run(){
int seconds=getRefreshTime();
do {
long startMS=System.currentTimeMillis();
if (Paxsite.isPAXWebsiteUpdated()) {
final String link=Paxsite.getCurrentButtonLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
 else if (Showclix.isShowclixUpdated()) {
final String link=Showclix.getShowclixLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
System.out.println(""String_Node_Str"" + DataTracker.getDataUsedMB() + ""String_Node_Str"");
while (System.currentTimeMillis() - startMS < (seconds * 1000)) {
if (forceRefresh) {
forceRefresh=false;
break;
}
try {
Thread.sleep(100);
}
 catch (InterruptedException iE) {
}
}
}
 while (true);
System.out.println(""String_Node_Str"");
}
}
);
}","/** 
 * Starts checking for website updates and listening for commands given through the console.
 */
public static void startCommandLineWebsiteChecking(){
  PAXChecker.continueProgram(new Runnable(){
    @Override public void run(){
      String input;
      while (true) {
        try {
          input=myScanner.next();
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
          System.exit(0);
        break;
case ""String_Node_Str"":
case ""String_Node_Str"":
      PAXChecker.sendTestEmail();
    break;
case ""String_Node_Str"":
  Audio.playAlarm();
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
forceRefresh=true;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
break;
default :
if (input.toLowerCase().startsWith(""String_Node_Str"")) {
Email.addEmailAddress(input.substring(input.indexOf(""String_Node_Str"") + 1));
continue;
}
System.out.println(""String_Node_Str"" + input.toLowerCase());
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
break;
}
}
}
}
);
PAXChecker.continueProgram(new Runnable(){
@Override public void run(){
int seconds=getRefreshTime();
do {
long startMS=System.currentTimeMillis();
if (Paxsite.isPAXWebsiteUpdated()) {
final String link=Paxsite.getCurrentButtonLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
 else if (Showclix.isShowclixUpdated()) {
final String link=Showclix.getShowclixLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
System.out.println(""String_Node_Str"" + DataTracker.getDataUsedMB() + ""String_Node_Str"");
while (System.currentTimeMillis() - startMS < (seconds * 1000)) {
if (forceRefresh) {
forceRefresh=false;
break;
}
try {
Thread.sleep(100);
}
 catch (InterruptedException iE) {
}
}
}
 while (true);
System.out.println(""String_Node_Str"");
}
}
);
}",0.9343389529724934
81051,"private void jButton1ActionPerformed(java.awt.event.ActionEvent evt){
  jButton1.setText(""String_Node_Str"");
  jButton1.setEnabled(false);
  if (jCheckBox1.isSelected()) {
    Paxsite.enablePaxWebsiteChecking();
  }
 else {
    if (!jCheckBox2.isSelected()) {
      return;
    }
  }
  if (jCheckBox2.isSelected()) {
    Showclix.enableShowclixWebsiteChecking();
  }
  UpdateHandler.setUseBeta(JCBUseBeta.isSelected());
  Audio.setPlayAlarm(jCheckBox3.isSelected());
  Email.setUsername(jTextField1.getText());
  Email.setPassword(new String(jPasswordField1.getPassword()));
  Browser.setExpo(jComboBox2.getSelectedItem().toString());
  String text=jTextField2.getText();
  if (text == null || text.length() < 5) {
    text=""String_Node_Str"";
  }
 else   if (!text.contains(""String_Node_Str"")) {
    text+=Email.getCarrierExtension(jComboBox1.getSelectedItem().toString());
  }
  String tempText;
  java.util.Iterator<ExtraPhonePanel> myIt=extraPhonePanelList.iterator();
  while (myIt.hasNext()) {
    ExtraPhonePanel panel=myIt.next();
    tempText=panel.getNumber();
    if (tempText.length() < 4) {
      System.out.println(""String_Node_Str"");
      continue;
    }
    String[] split=tempText.split(""String_Node_Str"");
    tempText=""String_Node_Str"";
    for (    String split1 : split) {
      split1=split1.trim();
      tempText+=split1;
      if (!split1.contains(""String_Node_Str"")) {
        tempText+=Email.getCarrierExtension(panel.getProvider());
      }
      tempText+=""String_Node_Str"";
    }
    text+=""String_Node_Str"" + tempText;
    System.out.println(""String_Node_Str"" + tempText);
  }
  System.out.println(""String_Node_Str"" + text);
  Email.addEmailAddress(text);
  Checker.setRefreshTime(jSlider1.getValue());
  SettingsHandler.setSavePrefs(JCBSavePreferences.isSelected());
  if (JCBSavePreferences.isSelected()) {
    SettingsHandler.setSaveCellnum(JCBSaveCellnum.isSelected());
    SettingsHandler.setSavePax(JCBSaveCheckPax.isSelected());
    SettingsHandler.setSaveShowclix(JCBSaveCheckShowclix.isSelected());
    SettingsHandler.setSaveEvent(JCBSaveEvent.isSelected());
    SettingsHandler.setSaveAlarm(JCBSavePlayAlarm.isSelected());
    SettingsHandler.setSaveRefreshTime(JCBSaveRefreshTime.isSelected());
    SettingsHandler.setSaveEmail(JCBSaveEmail.isSelected());
  }
  this.dispose();
  Checker.startCheckingWebsites();
}","private void jButton1ActionPerformed(java.awt.event.ActionEvent evt){
  jButton1.setText(""String_Node_Str"");
  if (jCheckBox1.isSelected()) {
    Paxsite.setCheckPax(true);
  }
 else {
    if (!jCheckBox2.isSelected()) {
      return;
    }
    Paxsite.setCheckPax(false);
  }
  Showclix.setCheckShowclix(jCheckBox2.isSelected());
  UpdateHandler.setUseBeta(JCBUseBeta.isSelected());
  Audio.setPlayAlarm(jCheckBox3.isSelected());
  Email.setUsername(jTextField1.getText());
  Email.setPassword(new String(jPasswordField1.getPassword()));
  Browser.setExpo(jComboBox2.getSelectedItem().toString());
  String text=jTextField2.getText();
  if (text == null || text.length() < 5) {
    text=""String_Node_Str"";
  }
 else   if (!text.contains(""String_Node_Str"")) {
    text+=Email.getCarrierExtension(jComboBox1.getSelectedItem().toString());
  }
  String tempText;
  java.util.Iterator<ExtraPhonePanel> myIt=extraPhonePanelList.iterator();
  while (myIt.hasNext()) {
    ExtraPhonePanel panel=myIt.next();
    tempText=panel.getNumber();
    if (tempText.length() < 4) {
      System.out.println(""String_Node_Str"");
      continue;
    }
    String[] split=tempText.split(""String_Node_Str"");
    tempText=""String_Node_Str"";
    for (    String split1 : split) {
      split1=split1.trim();
      tempText+=split1;
      if (!split1.contains(""String_Node_Str"")) {
        tempText+=Email.getCarrierExtension(panel.getProvider());
      }
      tempText+=""String_Node_Str"";
    }
    text+=""String_Node_Str"" + tempText;
    System.out.println(""String_Node_Str"" + tempText);
  }
  System.out.println(""String_Node_Str"" + text);
  Email.addEmailAddress(text);
  Checker.setRefreshTime(jSlider1.getValue());
  SettingsHandler.setSavePrefs(JCBSavePreferences.isSelected());
  if (JCBSavePreferences.isSelected()) {
    SettingsHandler.setSaveCellnum(JCBSaveCellnum.isSelected());
    SettingsHandler.setSavePax(JCBSaveCheckPax.isSelected());
    SettingsHandler.setSaveShowclix(JCBSaveCheckShowclix.isSelected());
    SettingsHandler.setSaveEvent(JCBSaveEvent.isSelected());
    SettingsHandler.setSaveAlarm(JCBSavePlayAlarm.isSelected());
    SettingsHandler.setSaveRefreshTime(JCBSaveRefreshTime.isSelected());
    SettingsHandler.setSaveEmail(JCBSaveEmail.isSelected());
  }
  this.dispose();
  Checker.startCheckingWebsites();
}",0.9619495510902096
81052,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  javax.swing.ToolTipManager.sharedInstance().setDismissDelay(600000);
  Email.init();
  KeyboardHandler.init();
  System.out.println(""String_Node_Str"");
  UpdateHandler.loadVersionNotes();
  parseCommandLineArgs(args);
}","/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  javax.swing.ToolTipManager.sharedInstance().setDismissDelay(600000);
  Email.init();
  KeyboardHandler.init();
  System.out.println(""String_Node_Str"");
  UpdateHandler.loadVersionNotes();
  startProgram(args);
}",0.9541547277936964
81053,"/** 
 * Starts a new non-daemon Thread that checks the websites for updates. This Thread also updates the Status GUI.
 */
public static void startCheckingWebsites(){
  PAXChecker.continueProgram(new Runnable(){
    @Override public void run(){
      SettingsHandler.saveAllPrefs();
      if (!Browser.checkShowclixLink(SettingsHandler.getLastEvent())) {
        SettingsHandler.saveLastEvent(Browser.getShowclixLink());
        System.out.println(""String_Node_Str"");
      }
      status=new Status();
      setStatusIconInBackground(getIconName(Browser.getExpo()));
      long startMS;
      int seconds=getRefreshTime();
      do {
        status.setLastCheckedText(""String_Node_Str"");
        startMS=System.currentTimeMillis();
        if (Browser.isShowclixUpdated() || Browser.isPAXWebsiteUpdated()) {
          final String link=Browser.parseHRef(Browser.getCurrentButtonLinkLine());
          linkFound(link);
          break;
        }
        status.setDataUsageText(DataTracker.getDataUsedMB());
        while (System.currentTimeMillis() - startMS < (seconds * 1000)) {
          if (forceRefresh) {
            forceRefresh=false;
            break;
          }
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException interruptedException) {
          }
          status.setLastCheckedText(seconds - (int)((System.currentTimeMillis() - startMS) / 1000));
        }
      }
 while (status.isDisplayable());
      System.out.println(""String_Node_Str"");
    }
  }
);
}","/** 
 * Starts a new non-daemon Thread that checks the websites for updates. This Thread also updates the Status GUI.
 */
public static void startCheckingWebsites(){
  PAXChecker.continueProgram(new Runnable(){
    @Override public void run(){
      SettingsHandler.saveAllPrefs();
      if (!Browser.checkShowclixLink(SettingsHandler.getLastEvent())) {
        SettingsHandler.saveLastEvent(Browser.getShowclixLink());
        System.out.println(""String_Node_Str"");
      }
      status=new Status();
      setStatusIconInBackground(getIconName(Browser.getExpo()));
      long startMS;
      int seconds=getRefreshTime();
      do {
        status.setLastCheckedText(""String_Node_Str"");
        startMS=System.currentTimeMillis();
        if (Browser.isShowclixUpdated()) {
          final String link=Browser.parseHRef(Browser.getCurrentButtonLinkLine());
          linkFound(link);
          break;
        }
 else         if (Browser.isPAXWebsiteUpdated()) {
          final String link=Browser.getShowclixLink();
          linkFound(link);
          break;
        }
        status.setDataUsageText(DataTracker.getDataUsedMB());
        while (System.currentTimeMillis() - startMS < (seconds * 1000)) {
          if (forceRefresh) {
            forceRefresh=false;
            break;
          }
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException interruptedException) {
          }
          status.setLastCheckedText(seconds - (int)((System.currentTimeMillis() - startMS) / 1000));
        }
      }
 while (status.isDisplayable());
      System.out.println(""String_Node_Str"");
    }
  }
);
}",0.9320695102685624
81054,"/** 
 * Prompts the user for the required program information, including username, password, email, and other options. Note that this does NOT start the command-line website checking.
 */
public static void commandLineSettingsInput(){
  if (Email.getUsername() == null) {
    System.out.print(""String_Node_Str"");
    try {
      Email.setUsername(myScanner.next());
      System.out.print(""String_Node_Str"");
      Email.setPassword(myScanner.next());
    }
 catch (    Exception e) {
    }
  }
  if (Email.getAddressList().isEmpty()) {
    System.out.print(""String_Node_Str"");
    try {
      Email.addEmailAddress(myScanner.next());
    }
 catch (    Exception e) {
    }
  }
  if (Paxsite.isCheckingPaxWebsite()) {
    System.out.print(""String_Node_Str"");
    try {
      if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
        Paxsite.setCheckPax(true);
      }
 else {
        Paxsite.setCheckPax(false);
      }
    }
 catch (    Exception e) {
    }
  }
  if (Paxsite.isCheckingPaxWebsite()) {
    System.out.print(""String_Node_Str"");
    try {
      if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
        Showclix.setCheckShowclix(true);
      }
 else {
        Showclix.setCheckShowclix(false);
      }
    }
 catch (    Exception e) {
    }
  }
  if (getRefreshTime() == 10) {
    System.out.print(""String_Node_Str"");
    try {
      setRefreshTime(Integer.parseInt(myScanner.next(),10));
    }
 catch (    Exception e) {
    }
  }
  System.out.print(""String_Node_Str"");
  try {
    if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
      Audio.setPlayAlarm(true);
    }
  }
 catch (  Exception e) {
  }
  myScanner.nextLine();
  if (Browser.getExpo() == null) {
    System.out.print(""String_Node_Str"");
    try {
      String input=myScanner.nextLine();
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
        Browser.setExpo(""String_Node_Str"");
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
      Browser.setExpo(""String_Node_Str"");
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    Browser.setExpo(""String_Node_Str"");
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
  Browser.setExpo(""String_Node_Str"");
default :
System.out.println(""String_Node_Str"" + input + ""String_Node_Str"");
Browser.setExpo(""String_Node_Str"");
}
System.out.println();
}
 catch (Exception e) {
}
}
}","/** 
 * Prompts the user for the required program information, including username, password, email, and other options. Note that this does NOT start the command-line website checking.
 */
public static void commandLineSettingsInput(){
  if (Email.getUsername() == null) {
    System.out.print(""String_Node_Str"");
    try {
      Email.setUsername(myScanner.next());
      System.out.print(""String_Node_Str"");
      Email.setPassword(myScanner.next());
    }
 catch (    Exception e) {
    }
  }
  if (Email.getAddressList().isEmpty()) {
    System.out.print(""String_Node_Str"");
    try {
      Email.addEmailAddress(myScanner.next());
    }
 catch (    Exception e) {
    }
  }
  if (Paxsite.isCheckingPaxWebsite()) {
    System.out.print(""String_Node_Str"");
    try {
      if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
        Paxsite.setCheckPax(true);
      }
 else {
        Paxsite.setCheckPax(false);
      }
    }
 catch (    Exception e) {
    }
  }
  if (Paxsite.isCheckingPaxWebsite()) {
    System.out.print(""String_Node_Str"");
    try {
      if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
        Showclix.setCheckShowclix(true);
      }
 else {
        Showclix.setCheckShowclix(false);
      }
    }
 catch (    Exception e) {
    }
  }
  if (getRefreshTime() == 10) {
    System.out.print(""String_Node_Str"");
    try {
      setRefreshTime(Integer.parseInt(myScanner.next(),10));
    }
 catch (    Exception e) {
    }
  }
  System.out.print(""String_Node_Str"");
  try {
    if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
      Audio.setPlayAlarm(true);
    }
  }
 catch (  Exception e) {
  }
  myScanner.nextLine();
  if (Browser.getExpo() == null) {
    System.out.print(""String_Node_Str"");
    try {
      String input=myScanner.nextLine();
      System.out.println(""String_Node_Str"" + input);
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
        Browser.setExpo(""String_Node_Str"");
      break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    Browser.setExpo(""String_Node_Str"");
  break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
Browser.setExpo(""String_Node_Str"");
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
Browser.setExpo(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + input + ""String_Node_Str"");
Browser.setExpo(""String_Node_Str"");
}
System.out.println();
}
 catch (Exception e) {
}
}
}",0.9812705155435412
81055,"/** 
 * Starts checking for website updates and listening for commands given through the console.
 */
public static void startCommandLineWebsiteChecking(){
  PAXChecker.continueProgram(new Runnable(){
    @Override public void run(){
      String input;
      while (true) {
        try {
          input=myScanner.nextLine();
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
          System.exit(0);
        break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
      PAXChecker.sendTestEmail();
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  Audio.playAlarm();
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
forceRefresh=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
UpdateHandler.autoUpdate();
break;
default :
if (input.toLowerCase().startsWith(""String_Node_Str"") || input.toLowerCase().startsWith(""String_Node_Str"")) {
Email.addEmailAddress(input.substring(input.indexOf(""String_Node_Str"") + 1));
continue;
}
System.out.println(""String_Node_Str"" + input.toLowerCase());
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
break;
}
}
}
}
);
PAXChecker.continueProgram(new Runnable(){
@Override public void run(){
int seconds=getRefreshTime();
do {
long startMS=System.currentTimeMillis();
if (Paxsite.isPAXWebsiteUpdated()) {
final String link=Paxsite.getCurrentButtonLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
 else if (Showclix.isShowclixUpdated()) {
final String link=Showclix.getShowclixLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
System.out.println(""String_Node_Str"" + DataTracker.getDataUsedMB() + ""String_Node_Str"");
while (System.currentTimeMillis() - startMS < (seconds * 1000)) {
if (forceRefresh) {
forceRefresh=false;
break;
}
try {
Thread.sleep(100);
}
 catch (InterruptedException iE) {
}
}
}
 while (true);
System.out.println(""String_Node_Str"");
}
}
);
}","/** 
 * Starts checking for website updates and listening for commands given through the console.
 */
public static void startCommandLineWebsiteChecking(){
  PAXChecker.continueProgram(new Runnable(){
    @Override public void run(){
      String input;
      while (true) {
        try {
          input=myScanner.nextLine();
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
          System.exit(0);
        break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
      PAXChecker.sendTestEmail();
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  Audio.playAlarm();
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
forceRefresh=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
UpdateHandler.autoUpdate();
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
java.util.Iterator<Email.EmailAddress> it=Email.getAddressList().iterator();
while (it.hasNext()) {
System.out.println(it.next().getCompleteAddress());
}
break;
default :
if (input.toLowerCase().startsWith(""String_Node_Str"") || input.toLowerCase().startsWith(""String_Node_Str"")) {
Email.addEmailAddress(input.substring(input.indexOf(""String_Node_Str"") + 1));
continue;
}
System.out.println(""String_Node_Str"" + input.toLowerCase());
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
break;
}
}
}
}
);
PAXChecker.continueProgram(new Runnable(){
@Override public void run(){
int seconds=getRefreshTime();
do {
long startMS=System.currentTimeMillis();
if (Paxsite.isPAXWebsiteUpdated()) {
final String link=Paxsite.getCurrentButtonLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
 else if (Showclix.isShowclixUpdated()) {
final String link=Showclix.getShowclixLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
System.out.println(""String_Node_Str"" + DataTracker.getDataUsedMB() + ""String_Node_Str"");
while (System.currentTimeMillis() - startMS < (seconds * 1000)) {
if (forceRefresh) {
forceRefresh=false;
break;
}
try {
Thread.sleep(100);
}
 catch (InterruptedException iE) {
}
}
}
 while (true);
System.out.println(""String_Node_Str"");
}
}
);
}",0.9359271818668572
81056,"/** 
 * Starts checking for website updates and listening for commands given through the console.
 */
public static void startCommandLineWebsiteChecking(){
  PAXChecker.continueProgram(new Runnable(){
    @Override public void run(){
      String input;
      while (true) {
        try {
          input=myScanner.nextLine();
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
          System.exit(0);
        break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
      PAXChecker.sendTestEmail();
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  Audio.playAlarm();
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
forceRefresh=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
UpdateHandler.loadVersionNotes();
UpdateHandler.autoUpdate();
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
java.util.Iterator<Email.EmailAddress> it=Email.getAddressList().iterator();
while (it.hasNext()) {
System.out.println(it.next().getCompleteAddress());
}
break;
case ""String_Node_Str"":
Browser.openLinkInBrowser(""String_Node_Str"");
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
System.out.println(UpdateHandler.getVersionNotes());
break;
default :
if (input.toLowerCase().startsWith(""String_Node_Str"") || input.toLowerCase().startsWith(""String_Node_Str"")) {
Email.addEmailAddress(input.substring(input.indexOf(""String_Node_Str"") + 1).trim());
continue;
}
 else if (input.toLowerCase().startsWith(""String_Node_Str"") || input.toLowerCase().startsWith(""String_Node_Str"")) {
System.out.println(UpdateHandler.getVersionNotes(input.substring(input.indexOf(""String_Node_Str"") + 1)).trim());
continue;
}
System.out.println(""String_Node_Str"" + input.toLowerCase());
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
break;
}
}
}
}
);
PAXChecker.continueProgram(new Runnable(){
@Override public void run(){
int seconds=getRefreshTime();
do {
long startMS=System.currentTimeMillis();
if (Paxsite.isPAXWebsiteUpdated()) {
final String link=Paxsite.getCurrentButtonLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
 else if (Showclix.isShowclixUpdated()) {
final String link=Showclix.getShowclixLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
System.out.println(""String_Node_Str"" + DataTracker.getDataUsedMB() + ""String_Node_Str"");
while (System.currentTimeMillis() - startMS < (seconds * 1000)) {
if (forceRefresh) {
forceRefresh=false;
break;
}
try {
Thread.sleep(100);
}
 catch (InterruptedException iE) {
}
}
}
 while (true);
System.out.println(""String_Node_Str"");
}
}
);
}","/** 
 * Starts checking for website updates and listening for commands given through the console.
 */
public static void startCommandLineWebsiteChecking(){
  PAXChecker.startBackgroundThread(new Runnable(){
    @Override public void run(){
      String input;
      while (true) {
        try {
          input=myScanner.nextLine();
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
          System.exit(0);
        break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
      PAXChecker.sendTestEmail();
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  Audio.playAlarm();
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
forceRefresh=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
UpdateHandler.loadVersionNotes();
UpdateHandler.autoUpdate();
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
java.util.Iterator<Email.EmailAddress> it=Email.getAddressList().iterator();
while (it.hasNext()) {
System.out.println(it.next().getCompleteAddress());
}
break;
case ""String_Node_Str"":
Browser.openLinkInBrowser(""String_Node_Str"");
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
System.out.println(UpdateHandler.getVersionNotes());
break;
default :
if (input.toLowerCase().startsWith(""String_Node_Str"") || input.toLowerCase().startsWith(""String_Node_Str"")) {
Email.addEmailAddress(input.substring(input.indexOf(""String_Node_Str"") + 1).trim());
continue;
}
 else if (input.toLowerCase().startsWith(""String_Node_Str"") || input.toLowerCase().startsWith(""String_Node_Str"")) {
System.out.println(UpdateHandler.getVersionNotes(input.substring(input.indexOf(""String_Node_Str"") + 1)).trim());
continue;
}
System.out.println(""String_Node_Str"" + input.toLowerCase());
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
break;
}
}
}
}
,""String_Node_Str"");
PAXChecker.continueProgram(new Runnable(){
@Override public void run(){
int seconds=getRefreshTime();
do {
long startMS=System.currentTimeMillis();
if (Paxsite.isPAXWebsiteUpdated()) {
final String link=Paxsite.getCurrentButtonLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
 else if (Showclix.isShowclixUpdated()) {
final String link=Showclix.getShowclixLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
System.out.println(""String_Node_Str"" + DataTracker.getDataUsedMB() + ""String_Node_Str"");
while (System.currentTimeMillis() - startMS < (seconds * 1000)) {
if (forceRefresh) {
forceRefresh=false;
break;
}
try {
Thread.sleep(100);
}
 catch (InterruptedException iE) {
}
}
}
 while (true);
System.out.println(""String_Node_Str"");
}
}
);
}",0.992439092691123
81057,"/** 
 * Initializes the Email class. Note that this should be run before any other method in the Email class is used.
 */
public static void init(){
  emailSettings();
}","/** 
 * Initializes the Email class. Note that this should be run before any other method in the Email class is used.
 */
public static void init(){
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
}",0.6652452025586354
81058,"public static void startProgram(String[] args){
  boolean doUpdate=true;
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean autoStart=false;
  boolean commandLine=false;
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    KeyboardHandler.setTypeLink(true);
  break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
if (!checkShowclix) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
if (!checkPax) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
Checker.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + Checker.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
commandLine=true;
break;
case ""String_Node_Str"":
try {
String key=args[a + 1];
String value=args[a + 2];
Email.setProperty(key,value);
}
 catch (Exception e) {
ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
}
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !Paxsite.isCheckingPaxWebsite() && !Showclix.isCheckingShowclix()) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
System.out.println(""String_Node_Str"");
Paxsite.setCheckPax(checkPax);
Showclix.setCheckShowclix(checkShowclix);
if (commandLine) {
ErrorHandler.setCommandLine(true);
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.autoUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (!autoStart) {
Checker.commandLineSettingsInput();
}
Checker.startCommandLineWebsiteChecking();
return;
}
KeyboardHandler.init();
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.checkUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (autoStart) {
Checker.startCheckingWebsites();
}
 else {
setup=new Setup();
}
Checker.loadAlertIcon();
}","public static void startProgram(String[] args){
  boolean doUpdate=true;
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean autoStart=false;
  boolean commandLine=false;
  boolean savePrefs=false;
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    KeyboardHandler.setTypeLink(true);
  break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
if (!checkShowclix) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
if (!checkPax) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
Checker.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + Checker.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
commandLine=true;
break;
case ""String_Node_Str"":
try {
String key=args[a + 1];
String value=args[a + 2];
Email.setProperty(key,value);
}
 catch (Exception e) {
ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
}
break;
case ""String_Node_Str"":
savePrefs=true;
break;
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !Paxsite.isCheckingPaxWebsite() && !Showclix.isCheckingShowclix()) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
System.out.println(""String_Node_Str"");
Paxsite.setCheckPax(checkPax);
Showclix.setCheckShowclix(checkShowclix);
if (commandLine) {
ErrorHandler.setCommandLine(true);
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.autoUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (!autoStart) {
Checker.commandLineSettingsInput();
}
if (savePrefs) {
SettingsHandler.setSaveAll(true,true,true,true,true,true,true);
SettingsHandler.saveAllPrefs();
}
Checker.startCommandLineWebsiteChecking();
return;
}
KeyboardHandler.init();
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.checkUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (autoStart) {
Checker.startCheckingWebsites();
}
 else {
setup=new Setup();
}
Checker.loadAlertIcon();
}",0.9694227769110764
81059,"/** 
 * Plays the alarm. Note that this checks   {@link #soundEnabled()} to make sure it's supposed to play. This method only allows one sound to play at atime, and resets the sound currently playing to the beginning.
 * @return True if the alarm was successfully started, false if not
 */
public static boolean playAlarm(){
  if (!soundEnabled()) {
    return false;
  }
  try {
    if (clip != null) {
      clip.stop();
      clip.setFramePosition(0);
    }
    clip=AudioSystem.getClip();
    InputStream audioSrc=PAXChecker.class.getResourceAsStream(""String_Node_Str"");
    InputStream bufferedIn=new BufferedInputStream(audioSrc);
    AudioInputStream inputStream=AudioSystem.getAudioInputStream(bufferedIn);
    clip.open(inputStream);
    clip.start();
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}","/** 
 * Plays the alarm. Note that this checks   {@link #soundEnabled()} to make sure it's supposed to play. This method only allows one sound to play at atime, and resets the sound currently playing to the beginning.
 * @return True if the alarm was successfully started, false if not
 */
public static boolean playAlarm(){
  if (!soundEnabled()) {
    return false;
  }
  try {
    if (clip != null) {
      clip.stop();
      clip.setFramePosition(0);
    }
    clip=AudioSystem.getClip();
    clip.addLineListener(listener);
    InputStream audioSrc=PAXChecker.class.getResourceAsStream(""String_Node_Str"");
    InputStream bufferedIn=new BufferedInputStream(audioSrc);
    AudioInputStream inputStream=AudioSystem.getAudioInputStream(bufferedIn);
    clip.open(inputStream);
    clip.start();
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}",0.9793340987370838
81060,"/** 
 * Gets the amount of data (in bytes) used by the program.
 * @return The amount of data (in bytes) used by the program
 */
public static long getDataUsed(){
  return dataUsed;
}","/** 
 * Gets the amount of data (in bytes) used by the program.
 * @return The amount of data (in bytes) used by the program
 */
public static synchronized long getDataUsed(){
  return dataUsed;
}",0.9656992084432716
81061,"/** 
 * Gets the amount of data in megabytes used by the program. Note that the double only extends out two decimal places.
 * @return The amount of data in megabytes used by the program
 */
public static double getDataUsedMB(){
  return (double)((int)((double)getDataUsed() / 1024 / 1024 * 100)) / 100;
}","/** 
 * Gets the amount of data in megabytes used by the program. Note that the double only extends out two decimal places.
 * @return The amount of data in megabytes used by the program
 */
public static synchronized double getDataUsedMB(){
  return (double)((int)((double)getDataUsed() / 1024 / 1024 * 100)) / 100;
}",0.9791332263242376
81062,"/** 
 * Adds an amount of data (in bytes) used by the program. This should be called whenever a network connection is made.
 * @param data The amount of data (in bytes) to add to the total data used
 */
public static void addDataUsed(long data){
  dataUsed+=data;
}","/** 
 * Adds an amount of data (in bytes) used by the program. This should be called whenever a network connection is made.
 * @param data The amount of data (in bytes) to add to the total data used
 */
public static synchronized void addDataUsed(long data){
  dataUsed+=data;
}",0.9760589318600368
81063,"public static void startProgram(String[] args){
  boolean doUpdate=true;
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean checkTwitter=true;
  boolean autoStart=false;
  boolean commandLine=false;
  boolean savePrefs=false;
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    NotificationHandler.setLastNotificationID(args[a + 1]);
  break;
case ""String_Node_Str"":
NotificationHandler.setLastNotificationID(""String_Node_Str"");
break;
case ""String_Node_Str"":
KeyboardHandler.setTypeLink(true);
break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
if (!checkShowclix && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkShowclix) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkTwitter=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
Checker.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + Checker.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
commandLine=true;
break;
case ""String_Node_Str"":
try {
String key=args[a + 1];
String value=args[a + 2];
Email.setProperty(key,value);
}
 catch (Exception e) {
ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
}
break;
case ""String_Node_Str"":
savePrefs=true;
break;
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !checkPax && !checkShowclix) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
System.out.println(""String_Node_Str"");
if (autoStart) {
if (checkPax) {
TicketChecker.addChecker(new CheckPaxsite());
}
if (checkShowclix) {
TicketChecker.addChecker(new CheckShowclix());
}
if (checkTwitter) {
TicketChecker.addChecker(new CheckTwitter());
}
}
if (commandLine) {
ErrorDisplay.setCommandLine(true);
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.autoUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (!autoStart) {
Checker.commandLineSettingsInput();
}
if (savePrefs) {
SettingsHandler.setSaveAll(true,true,true,true,true,true,true,true);
SettingsHandler.saveAllPrefs();
}
Checker.startCommandLineWebsiteChecking();
return;
}
KeyboardHandler.init();
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.checkUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (autoStart) {
Checker.startCheckingWebsites();
}
 else {
NotificationHandler.loadNotifications();
setup=new Setup();
NotificationHandler.showNewNotifications();
}
Checker.loadAlertIcon();
}","public static void startProgram(String[] args){
  boolean doUpdate=true;
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean checkTwitter=true;
  boolean autoStart=false;
  boolean commandLine=false;
  boolean savePrefs=false;
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    NotificationHandler.setLastNotificationID(args[a + 1]);
  break;
case ""String_Node_Str"":
NotificationHandler.setLastNotificationID(""String_Node_Str"");
break;
case ""String_Node_Str"":
KeyboardHandler.setTypeLink(true);
break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
if (!checkShowclix && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkShowclix) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkTwitter=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
Checker.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + Checker.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
commandLine=true;
break;
case ""String_Node_Str"":
try {
String key=args[a + 1];
String value=args[a + 2];
Email.setProperty(key,value);
}
 catch (Exception e) {
ErrorDisplay.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
}
break;
case ""String_Node_Str"":
savePrefs=true;
break;
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !checkPax && !checkShowclix) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
System.out.println(""String_Node_Str"");
if (autoStart) {
if (checkPax) {
TicketChecker.addChecker(new CheckPaxsite());
}
if (checkShowclix) {
TicketChecker.addChecker(new CheckShowclix());
}
if (checkTwitter) {
TicketChecker.addChecker(new CheckTwitter());
}
}
if (commandLine) {
ErrorDisplay.setCommandLine(true);
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.autoUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (!autoStart) {
Checker.commandLineSettingsInput();
}
if (savePrefs) {
SettingsHandler.setSaveAll(true,true,true,true,true,true,true,true);
SettingsHandler.saveAllPrefs();
}
Checker.startCommandLineWebsiteChecking();
return;
}
start=new paxchecker.gui.Startup();
KeyboardHandler.init();
if (doUpdate) {
start.setStatus(""String_Node_Str"");
UpdateHandler.loadVersionNotes();
UpdateHandler.checkUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (autoStart) {
Checker.startCheckingWebsites();
}
 else {
start.setStatus(""String_Node_Str"");
NotificationHandler.loadNotifications();
start.dispose();
setup=new Setup();
NotificationHandler.showNewNotifications();
}
Checker.loadAlertIcon();
}",0.9843023985934948
81064,"public static void init(paxchecker.gui.Status s){
  status=s;
  threadPool=Executors.newFixedThreadPool(3);
}","public static void init(paxchecker.gui.Status s){
  status=s;
  threadPool=Executors.newFixedThreadPool(3);
  threadWait=new Phaser();
  threadWait.register();
}",0.8074074074074075
81065,"public static void addChecker(Check c){
  checks.add(c);
  cB=new Phaser();
  cB.register();
  c.init(status,cB);
}","public static void addChecker(Check c){
  for (  Check reg : checks) {
    if (c.getClass().isInstance(reg)) {
      System.out.println(""String_Node_Str"" + c.getClass().getSimpleName() + ""String_Node_Str"");
      return;
    }
  }
  c.init(status,threadWait);
  checks.add(c);
}",0.3206106870229007
81066,"public static boolean isUpdated(){
  for (  Check c : checks) {
    threadPool.submit(c);
  }
  System.out.println(""String_Node_Str"");
  cB.arriveAndAwaitAdvance();
  for (  Check c : checks) {
    c.updateGUI(status);
    if (c.ticketsFound() && !hasOpenedLink(c.getLink())) {
      System.out.println(""String_Node_Str"" + c.getLink());
      setLinkFound(c.getLink());
      c.reset();
      return true;
    }
 else {
      System.out.println(""String_Node_Str"" + c.getLink());
    }
  }
  return false;
}","public static boolean isUpdated(){
  for (  Check c : checks) {
    threadPool.submit(c);
  }
  System.out.println(""String_Node_Str"");
  threadWait.arriveAndAwaitAdvance();
  System.out.println(""String_Node_Str"");
  for (  Check c : checks) {
    c.updateGUI(status);
    if (c.ticketsFound() && !hasOpenedLink(c.getLink())) {
      System.out.println(""String_Node_Str"" + c.getLink());
      setLinkFound(c.getLink());
      c.reset();
      return true;
    }
 else {
      System.out.println(""String_Node_Str"" + c.getLink());
    }
  }
  return false;
}",0.9500471253534402
81067,"/** 
 * Sends an email to the provided number(s) using the supplied login information. This should only be called once  {@link #setUsername(java.lang.String)},   {@link #setPassword(java.lang.String)}, and (  {@link #setCellNum(java.lang.String,java.lang.String)} or{@link #setCellList(java.lang.String)}) have been called.
 * @param subject
 * @param msg
 * @return
 */
public static boolean sendMessage(String subject,String msg){
  if (!shouldSendEmail()) {
    System.out.println(""String_Node_Str"");
    return false;
  }
  if (System.currentTimeMillis() - lastEmailSent < 60000) {
    System.out.println(""String_Node_Str"");
    return false;
  }
  Session l_session=createSession();
  try {
    System.out.println(""String_Node_Str"");
    MimeMessage message=new MimeMessage(l_session);
    message.setFrom(new InternetAddress(getUsername()));
    if (getAddressList().size() == 1) {
      message.addRecipient(Message.RecipientType.TO,new InternetAddress(getAddressList().get(0).getCompleteAddress()));
    }
 else {
      ListIterator<EmailAddress> lI=getAddressList().listIterator();
      while (lI.hasNext()) {
        EmailAddress address=lI.next();
        System.out.println(""String_Node_Str"" + address.getCompleteAddress());
        message.addRecipient(Message.RecipientType.BCC,new InternetAddress(address.getCompleteAddress()));
      }
    }
    message.setSubject(subject);
    message.setText(msg);
    System.out.println(""String_Node_Str"");
    Transport transport=l_session.getTransport(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    transport.connect(getHost(),getUsername(),getPassword());
    System.out.println(""String_Node_Str"");
    transport.sendMessage(message,message.getAllRecipients());
    System.out.println(""String_Node_Str"");
    transport.close();
    lastEmailSent=System.currentTimeMillis();
  }
 catch (  MessagingException mex) {
    mex.printStackTrace();
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",mex);
    return false;
  }
catch (  Exception e) {
    e.printStackTrace();
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    return false;
  }
  System.out.println(""String_Node_Str"");
  return true;
}","/** 
 * Sends an email to the provided number(s) using the supplied login information. This should only be called once  {@link #setUsername(java.lang.String)},   {@link #setPassword(java.lang.String)}, and (  {@link #setCellNum(java.lang.String,java.lang.String)} or{@link #setCellList(java.lang.String)}) have been called.
 * @param subject
 * @param msg
 * @return
 */
public static boolean sendMessage(String subject,String msg){
  if (!shouldSendEmail()) {
    System.out.println(""String_Node_Str"");
    return false;
  }
  if (System.currentTimeMillis() - lastEmailSent < EMAIL_DELAY) {
    System.out.println(""String_Node_Str"");
    return false;
  }
  Session l_session=createSession();
  try {
    System.out.println(""String_Node_Str"");
    MimeMessage message=new MimeMessage(l_session);
    message.setFrom(new InternetAddress(getUsername()));
    if (getAddressList().size() == 1) {
      message.addRecipient(Message.RecipientType.TO,new InternetAddress(getAddressList().get(0).getCompleteAddress()));
    }
 else {
      ListIterator<EmailAddress> lI=getAddressList().listIterator();
      while (lI.hasNext()) {
        EmailAddress address=lI.next();
        System.out.println(""String_Node_Str"" + address.getCompleteAddress());
        message.addRecipient(Message.RecipientType.BCC,new InternetAddress(address.getCompleteAddress()));
      }
    }
    message.setSubject(subject);
    message.setText(msg);
    System.out.println(""String_Node_Str"");
    Transport transport=l_session.getTransport(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    transport.connect(getHost(),getUsername(),getPassword());
    System.out.println(""String_Node_Str"");
    transport.sendMessage(message,message.getAllRecipients());
    System.out.println(""String_Node_Str"");
    transport.close();
    lastEmailSent=System.currentTimeMillis();
  }
 catch (  MessagingException mex) {
    mex.printStackTrace();
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",mex);
    return false;
  }
catch (  Exception e) {
    e.printStackTrace();
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    return false;
  }
  System.out.println(""String_Node_Str"");
  return true;
}",0.9963947724200092
81068,"/** 
 * Sends a test email on a daemon Thread. Note that this also updates the Status window if possible.
 */
public static void sendBackgroundTestEmail(){
  startBackgroundThread(new Runnable(){
    @Override public void run(){
      try {
        Checker.setStatusTextButtonState(false);
        Checker.setStatusTextButtonText(""String_Node_Str"");
        if (!Email.testEmail()) {
          Checker.setStatusTextButtonText(""String_Node_Str"");
          Checker.setStatusTextButtonState(true);
          return;
        }
        long timeStarted=System.currentTimeMillis();
        while (System.currentTimeMillis() - timeStarted < 60000) {
          Checker.setStatusTextButtonText((60 - (int)((System.currentTimeMillis() - timeStarted) / 1000)) + ""String_Node_Str"");
          Thread.sleep(200);
        }
        Checker.setStatusTextButtonText(""String_Node_Str"");
        Checker.setStatusTextButtonState(true);
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
        Checker.setStatusTextButtonText(""String_Node_Str"");
        Checker.setStatusTextButtonState(true);
      }
    }
  }
,""String_Node_Str"");
}","/** 
 * Sends a test email on a daemon Thread. Note that this also updates the Status window if possible.
 */
public static void sendBackgroundTestEmail(){
  startBackgroundThread(new Runnable(){
    @Override public void run(){
      try {
        Checker.setStatusTextButtonState(false);
        Checker.setStatusTextButtonText(""String_Node_Str"");
        if (!Email.testEmail()) {
          Checker.setStatusTextButtonText(""String_Node_Str"");
          Checker.setStatusTextButtonState(true);
          return;
        }
        long timeStarted=System.currentTimeMillis();
        while (System.currentTimeMillis() - timeStarted < 300000) {
          Checker.setStatusTextButtonText((300 - (int)((System.currentTimeMillis() - timeStarted) / 1000)) + ""String_Node_Str"");
          Thread.sleep(200);
        }
        Checker.setStatusTextButtonText(""String_Node_Str"");
        Checker.setStatusTextButtonState(true);
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
        Checker.setStatusTextButtonText(""String_Node_Str"");
        Checker.setStatusTextButtonState(true);
      }
    }
  }
,""String_Node_Str"");
}",0.9974597798475868
81069,"public static void startProgram(String[] args){
  boolean doUpdate=true;
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean checkTwitter=true;
  boolean autoStart=false;
  boolean commandLine=false;
  boolean savePrefs=false;
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    NotificationHandler.setLastNotificationID(args[a + 1]);
  break;
case ""String_Node_Str"":
NotificationHandler.setLastNotificationID(""String_Node_Str"");
break;
case ""String_Node_Str"":
KeyboardHandler.setTypeLink(true);
break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
if (!checkShowclix && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkShowclix) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkTwitter=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
Checker.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + Checker.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
commandLine=true;
break;
case ""String_Node_Str"":
try {
String key=args[a + 1];
String value=args[a + 2];
Email.setProperty(key,value);
}
 catch (Exception e) {
ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
}
break;
case ""String_Node_Str"":
savePrefs=true;
break;
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !checkPax && !checkShowclix) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
System.out.println(""String_Node_Str"");
if (autoStart) {
if (checkPax) {
TicketChecker.addChecker(new CheckPaxsite());
}
if (checkShowclix) {
TicketChecker.addChecker(new CheckShowclix());
}
if (checkTwitter) {
TicketChecker.addChecker(new CheckTwitter());
}
}
if (commandLine) {
ErrorHandler.setCommandLine(true);
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.autoUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (!autoStart) {
Checker.commandLineSettingsInput();
}
if (savePrefs) {
SettingsHandler.setSaveAll(true,true,true,true,true,true,true,true);
SettingsHandler.saveAllPrefs();
}
Checker.startCommandLineWebsiteChecking();
return;
}
KeyboardHandler.init();
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.checkUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (autoStart) {
Checker.startCheckingWebsites();
}
 else {
setup=new Setup();
NotificationHandler.loadNotifications();
NotificationHandler.showNewNotifications();
}
Checker.loadAlertIcon();
}","public static void startProgram(String[] args){
  boolean doUpdate=true;
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean checkTwitter=true;
  boolean autoStart=false;
  boolean commandLine=false;
  boolean savePrefs=false;
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    NotificationHandler.setLastNotificationID(args[a + 1]);
  break;
case ""String_Node_Str"":
NotificationHandler.setLastNotificationID(""String_Node_Str"");
break;
case ""String_Node_Str"":
KeyboardHandler.setTypeLink(true);
break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
if (!checkShowclix && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkTwitter) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
if (!checkPax && !checkShowclix) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkTwitter=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
Checker.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + Checker.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
commandLine=true;
break;
case ""String_Node_Str"":
try {
String key=args[a + 1];
String value=args[a + 2];
Email.setProperty(key,value);
}
 catch (Exception e) {
ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
}
break;
case ""String_Node_Str"":
savePrefs=true;
break;
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !checkPax && !checkShowclix) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
System.out.println(""String_Node_Str"");
if (autoStart) {
if (checkPax) {
TicketChecker.addChecker(new CheckPaxsite());
}
if (checkShowclix) {
TicketChecker.addChecker(new CheckShowclix());
}
if (checkTwitter) {
TicketChecker.addChecker(new CheckTwitter());
}
}
if (commandLine) {
ErrorHandler.setCommandLine(true);
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.autoUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (!autoStart) {
Checker.commandLineSettingsInput();
}
if (savePrefs) {
SettingsHandler.setSaveAll(true,true,true,true,true,true,true,true);
SettingsHandler.saveAllPrefs();
}
Checker.startCommandLineWebsiteChecking();
return;
}
KeyboardHandler.init();
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.checkUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (autoStart) {
Checker.startCheckingWebsites();
}
 else {
NotificationHandler.loadNotifications();
setup=new Setup();
NotificationHandler.showNewNotifications();
}
Checker.loadAlertIcon();
}",0.9895381474866036
81070,"@Override public void run(){
  try {
    Checker.setStatusTextButtonState(false);
    Checker.setStatusTextButtonText(""String_Node_Str"");
    if (!Email.testEmail()) {
      Checker.setStatusTextButtonText(""String_Node_Str"");
      Checker.setStatusTextButtonState(true);
      return;
    }
    long timeStarted=System.currentTimeMillis();
    while (System.currentTimeMillis() - timeStarted < 60000) {
      Checker.setStatusTextButtonText((60 - (int)((System.currentTimeMillis() - timeStarted) / 1000)) + ""String_Node_Str"");
      Thread.sleep(200);
    }
    Checker.setStatusTextButtonText(""String_Node_Str"");
    Checker.setStatusTextButtonState(true);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    Checker.setStatusTextButtonText(""String_Node_Str"");
    Checker.setStatusTextButtonState(true);
  }
}","@Override public void run(){
  try {
    Checker.setStatusTextButtonState(false);
    Checker.setStatusTextButtonText(""String_Node_Str"");
    if (!Email.testEmail()) {
      Checker.setStatusTextButtonText(""String_Node_Str"");
      Checker.setStatusTextButtonState(true);
      return;
    }
    long timeStarted=System.currentTimeMillis();
    while (System.currentTimeMillis() - timeStarted < 300000) {
      Checker.setStatusTextButtonText((300 - (int)((System.currentTimeMillis() - timeStarted) / 1000)) + ""String_Node_Str"");
      Thread.sleep(200);
    }
    Checker.setStatusTextButtonText(""String_Node_Str"");
    Checker.setStatusTextButtonState(true);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    Checker.setStatusTextButtonText(""String_Node_Str"");
    Checker.setStatusTextButtonState(true);
  }
}",0.9965197215777262
81071,"private static int getLatestID(URL url){
  try {
    HttpURLConnection httpCon=Browser.setUpConnection(url);
    BufferedReader reader=new BufferedReader(new InputStreamReader(httpCon.getInputStream()));
    String jsonText=""String_Node_Str"";
    String line;
    while ((line=reader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      jsonText+=line;
    }
    reader.close();
    JSONParser mP=new JSONParser();
    JSONObject obj=(JSONObject)mP.parse(jsonText);
    int maxId=0;
    for (    String s : (Iterable<String>)obj.keySet()) {
      try {
        maxId=Math.max(maxId,Integer.parseInt((String)s));
      }
 catch (      NumberFormatException nfe) {
        System.out.println(""String_Node_Str"" + s);
      }
    }
    return maxId;
  }
 catch (  java.net.SocketTimeoutException ste) {
    System.out.println(""String_Node_Str"");
  }
catch (  IOException|ParseException e) {
    e.printStackTrace();
  }
  return -1;
}","private static int getLatestID(URL url){
  try {
    HttpURLConnection httpCon=Browser.setUpConnection(url);
    BufferedReader reader=new BufferedReader(new InputStreamReader(httpCon.getInputStream()));
    String jsonText=""String_Node_Str"";
    String line;
    while ((line=reader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      jsonText+=line;
    }
    reader.close();
    JSONParser mP=new JSONParser();
    JSONObject obj=(JSONObject)mP.parse(jsonText);
    int maxID=0;
    for (    String s : (Iterable<String>)obj.keySet()) {
      try {
        maxID=Math.max(maxID,Integer.parseInt((String)s));
      }
 catch (      NumberFormatException nfe) {
        System.out.println(""String_Node_Str"" + s);
      }
    }
    return maxID;
  }
 catch (  java.net.SocketTimeoutException ste) {
    System.out.println(""String_Node_Str"");
  }
catch (  IOException|ParseException e) {
    e.printStackTrace();
  }
  return -1;
}",0.9957983193277312
81072,"public void init(paxchecker.gui.Status s){
  linkLabel=s.addLinkJLabel();
}","public void init(paxchecker.gui.Status s,java.util.concurrent.Phaser cB){
  linkLabel=s.addLinkJLabel();
  cycBar=cB;
  cycBar.register();
  reset();
}",0.6637168141592921
81073,"@Override public void init(paxchecker.gui.Status s){
  super.init(s);
  reset();
  s.updateJLabel(linkLabel,getLink());
}","@Override public synchronized void init(paxchecker.gui.Status s,java.util.concurrent.Phaser cB){
  super.init(s,cB);
  s.updateJLabel(linkLabel,""String_Node_Str"");
}",0.7272727272727273
81074,"@Override public String getLink(){
  return currentLinkFound;
}","@Override public synchronized String getLink(){
  return currentLinkFound;
}",0.9064748201438848
81075,"@Override public void updateGUI(paxchecker.gui.Status s){
  s.updateJLabel(linkLabel,""String_Node_Str"" + getLink());
}","@Override public synchronized void updateGUI(paxchecker.gui.Status s){
  s.updateJLabel(linkLabel,""String_Node_Str"" + getLink());
}",0.9477911646586346
81076,"@Override public boolean ticketsFound(){
  if (currentLinkFound.equals(lastLinkFound)) {
    return false;
  }
 else   if (currentLinkFound == null) {
    return false;
  }
 else   if (currentLinkFound.equals(""String_Node_Str"") || currentLinkFound.equals(""String_Node_Str"")) {
    return false;
  }
 else   if (currentLinkFound.equals(""String_Node_Str"")) {
    return false;
  }
 else   if (!currentLinkFound.contains(""String_Node_Str"" + PaxsiteReader.getWebsiteLink(Browser.getExpo()) + ""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + currentLinkFound);
    return true;
  }
  return false;
}","@Override public synchronized boolean ticketsFound(){
  if (currentLinkFound.equals(lastLinkFound)) {
    return false;
  }
 else   if (currentLinkFound == null) {
    return false;
  }
 else   if (currentLinkFound.equals(""String_Node_Str"") || currentLinkFound.equals(""String_Node_Str"")) {
    return false;
  }
 else   if (currentLinkFound.equals(""String_Node_Str"")) {
    return false;
  }
 else   if (!currentLinkFound.contains(""String_Node_Str"" + PaxsiteReader.getWebsiteLink(Browser.getExpo()) + ""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + currentLinkFound);
    return true;
  }
  return false;
}",0.989456609894566
81077,"@Override public void reset(){
  lastLinkFound=PaxsiteReader.getCurrentButtonLink(Browser.getExpo());
}","@Override public synchronized void reset(){
  lastLinkFound=PaxsiteReader.getCurrentButtonLink(Browser.getExpo());
}",0.9406392694063926
81078,"@Override public void updateLink(){
  currentLinkFound=PaxsiteReader.getCurrentButtonLink(Browser.getExpo());
}","@Override public synchronized final void updateLink(){
  currentLinkFound=PaxsiteReader.getCurrentButtonLink(Browser.getExpo());
}",0.921161825726141
81079,"@Override public void init(paxchecker.gui.Status s){
  super.init(s);
  reset();
  s.updateJLabel(linkLabel,getLink());
}","@Override public synchronized void init(paxchecker.gui.Status s,java.util.concurrent.Phaser cB){
  super.init(s,cB);
  s.updateJLabel(linkLabel,""String_Node_Str"");
}",0.7272727272727273
81080,"@Override public void updateGUI(paxchecker.gui.Status s){
  s.updateJLabel(linkLabel,""String_Node_Str"" + getLink());
}","@Override public synchronized void updateGUI(paxchecker.gui.Status s){
  s.updateJLabel(linkLabel,""String_Node_Str"" + getLink());
}",0.9477911646586346
81081,"@Override public boolean ticketsFound(){
  return currentShowclixEventID > lastShowclixEventID;
}","@Override public synchronized boolean ticketsFound(){
synchronized (LOCK) {
  }
  return currentShowclixEventID > lastShowclixEventID;
}",0.8326180257510729
81082,"@Override public void reset(){
  lastShowclixEventID=ShowclixReader.getLatestEventID(Browser.getExpo());
}","@Override public synchronized void reset(){
  lastShowclixEventID=ShowclixReader.getLatestEventID(Browser.getExpo());
}",0.9422222222222222
81083,"@Override public void updateLink(){
  currentShowclixEventID=ShowclixReader.getLatestEventID(Browser.getExpo());
}","@Override public synchronized void updateLink(){
  currentShowclixEventID=ShowclixReader.getLatestEventID(Browser.getExpo());
}",0.946058091286307
81084,"@Override public void init(paxchecker.gui.Status s){
  super.init(s);
  s.updateJLabel(linkLabel,""String_Node_Str"");
}","@Override public synchronized void init(paxchecker.gui.Status s,java.util.concurrent.Phaser cB){
  super.init(s,cB);
  s.updateJLabel(linkLabel,""String_Node_Str"");
}",0.833922261484099
81085,"@Override public String getLink(){
  return null;
}","@Override public synchronized String getLink(){
  return null;
}",0.8869565217391304
81086,"@Override public void updateGUI(paxchecker.gui.Status s){
}","@Override public synchronized void updateGUI(paxchecker.gui.Status s){
}",0.900763358778626
81087,"@Override public boolean ticketsFound(){
  return false;
}","@Override public synchronized boolean ticketsFound(){
  return false;
}",0.8992248062015504
81088,"@Override public void reset(){
}","@Override public synchronized void reset(){
}",0.8311688311688312
81089,"@Override public void updateLink(){
}","@Override public synchronized void updateLink(){
}",0.8505747126436781
81090,"public static void init(paxchecker.gui.Status s){
  status=s;
}","public static void init(paxchecker.gui.Status s){
  status=s;
  threadPool=Executors.newFixedThreadPool(3);
}",0.7325581395348837
81091,"public static void addChecker(Check c){
  checks.add(c);
  c.init(status);
}","public static void addChecker(Check c){
  checks.add(c);
  cB=new Phaser();
  cB.register();
  c.init(status,cB);
}",0.7958115183246073
81092,"public static boolean isUpdated(){
  for (  Check c : checks) {
    c.updateLink();
    c.updateGUI(status);
    if (c.ticketsFound()) {
      System.out.println(""String_Node_Str"" + c.getLink());
      setLinkFound(c.getLink());
      c.reset();
      return true;
    }
 else {
      System.out.println(""String_Node_Str"" + c.getLink());
    }
  }
  return false;
}","public static boolean isUpdated(){
  for (  Check c : checks) {
    threadPool.submit(c);
  }
  System.out.println(""String_Node_Str"");
  cB.arriveAndAwaitAdvance();
  for (  Check c : checks) {
    c.updateGUI(status);
    if (c.ticketsFound()) {
      System.out.println(""String_Node_Str"" + c.getLink());
      setLinkFound(c.getLink());
      c.reset();
      return true;
    }
 else {
      System.out.println(""String_Node_Str"" + c.getLink());
    }
  }
  return false;
}",0.8333333333333334
81093,"/** 
 * Creates new form patchNotes.
 * @param uF The Update object that this patchNotes is attached to
 */
public PatchNotes(Update uF){
  javax.swing.SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      initComponents();
      customComponents();
      setVisible(true);
    }
  }
);
  updateFrom=uF;
}","/** 
 * Creates new form patchNotes.
 * @param uF The Update object that this patchNotes is attached to
 */
public PatchNotes(Update uF){
  updateFrom=uF;
  javax.swing.SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      initComponents();
      customComponents();
    }
  }
);
}",0.8909657320872274
81094,"/** 
 * Parses the link out of the given line of HTML. Note that this requires an href with the link surrounded by quotation marks for this to work. Furthermore, the link can't have any quotation marks in it (though if it does, you have bigger problems).
 * @param parse The HTML to parse
 * @return The link from the HTML, or the address to the current expo site
 * @see #getExpo()
 * @see #getWebsiteLink(java.lang.String)
 * @see #getCurrentButtonLinkLine()
 */
private static String parseHRef(String parse){
  if (parse == null) {
    System.out.println(""String_Node_Str"");
    return null;
  }
  try {
    parse=parse.trim();
    parse=parse.substring(parse.indexOf(""String_Node_Str"") + 6);
    parse=parse.substring(0,parse.indexOf(""String_Node_Str""));
    if (parse.startsWith(""String_Node_Str"") && parse.endsWith(""String_Node_Str"")) {
      parse=parse.substring(1,parse.length() - 1);
    }
 else     if (parse.length() < 10) {
      System.out.println(""String_Node_Str"");
      return null;
    }
    return parse.trim();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return null;
  }
}","/** 
 * Parses the link out of the given line of HTML. Note that this requires an href with the link surrounded by quotation marks for this to work. Furthermore, the link can't have any quotation marks in it (though if it does, you have bigger problems).
 * @param parse The HTML to parse
 * @return The link from the HTML, or the address to the current expo site
 * @see #getExpo()
 * @see #getWebsiteLink(java.lang.String)
 * @see #getCurrentButtonLinkLine()
 */
private static String parseHRef(String parse){
  if (parse == null) {
    System.out.println(""String_Node_Str"");
    return ""String_Node_Str"";
  }
  try {
    parse=parse.trim();
    parse=parse.substring(parse.indexOf(""String_Node_Str"") + 6);
    parse=parse.substring(0,parse.indexOf(""String_Node_Str""));
    if (parse.startsWith(""String_Node_Str"") && parse.endsWith(""String_Node_Str"")) {
      parse=parse.substring(1,parse.length() - 1);
    }
 else     if (parse.length() < 10) {
      System.out.println(""String_Node_Str"");
      return null;
    }
    return parse.trim();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return ""String_Node_Str"";
  }
}",0.981958762886598
81095,"@Override public synchronized void init(paxchecker.gui.Status s,java.util.concurrent.Phaser cB){
  super.init(s,cB);
  s.updateJLabel(linkLabel,""String_Node_Str"");
  twitter=new TwitterReader(""String_Node_Str"");
}","@Override public synchronized void init(paxchecker.gui.Status s,java.util.concurrent.Phaser cB){
  twitter=new TwitterReader(""String_Node_Str"");
  super.init(s,cB);
  s.updateJLabel(linkLabel,""String_Node_Str"");
}",0.7746478873239436
81096,"/** 
 * Displays a window clearly indicating something has gone wrong. This should be used only when the program encounters an error that impedes its function, not for notifications to the user.
 * @param windowTitle The title of the window (displayed on the taskbar)
 * @param title The title of the error message
 * @param message The error message to display to the user
 * @param t The error to display
 */
public static void showErrorWindow(String windowTitle,String title,String message,Throwable t){
  if (commandLine) {
    System.out.println(windowTitle + ""String_Node_Str"" + title+ ""String_Node_Str""+ message);
    if (t != null) {
      t.printStackTrace();
    }
    return;
  }
  if (errorWindowCount > 10) {
    System.out.println(""String_Node_Str"");
    return;
  }
  errorWindow=new ErrorWindow();
  errorWindow.setTitle(windowTitle);
  errorWindow.JLTitle.setText(title);
  errorWindow.JTAError.setText(message);
  errorWindow.setVisible(true);
  if (t != null) {
    errorWindow.JBError.setEnabled(true);
    errorWindow.myError=t;
    t.printStackTrace();
  }
  errorWindowCount++;
}","/** 
 * Displays a window clearly indicating something has gone wrong. This should be used only when the program encounters an error that impedes its function, not for notifications to the user.
 * @param windowTitle The title of the window (displayed on the taskbar)
 * @param title The title of the error message
 * @param message The error message to display to the user
 * @param t The error to display
 */
public static synchronized ErrorWindow showErrorWindow(String windowTitle,String title,String message,Throwable t){
  ErrorWindow errorWindow;
  if (commandLine) {
    System.out.println(windowTitle + ""String_Node_Str"" + title+ ""String_Node_Str""+ message);
    if (t != null) {
      t.printStackTrace();
    }
    return null;
  }
  if (errorWindowCount > 10) {
    System.out.println(""String_Node_Str"");
    return null;
  }
  errorWindow=new ErrorWindow();
  errorWindow.setTitleText(windowTitle);
  errorWindow.setErrorText(title);
  errorWindow.setInformationText(message);
  errorWindow.setVisible(true);
  if (t != null) {
    errorWindow.setExtraButtonEnabled(true);
    errorWindow.myError=t;
    t.printStackTrace();
  }
  errorWindowCount++;
  return errorWindow;
}",0.8859764089121888
81097,"public static void setCommandLine(boolean cl){
  commandLine=cl;
  System.out.println(""String_Node_Str"" + cl);
}","public static synchronized void setCommandLine(boolean cl){
  commandLine=cl;
  System.out.println(""String_Node_Str"" + cl);
}",0.9451476793248944
81098,"/** 
 * Shows the error information of t. It outputs all the information into an   {@link Error} window. This should only be accessible from a currentlyopen  {@link Error}.
 * @param t The error object
 */
public static void detailedReport(Throwable t){
  if (commandLine) {
    t.printStackTrace();
    return;
  }
  errorWindow=new ErrorWindow();
  errorWindow.setTitle(""String_Node_Str"");
  errorWindow.JLTitle.setText(""String_Node_Str"");
  errorWindow.JTAError.setLineWrap(false);
  errorWindow.setCopyClipboard();
  errorWindow.JBError.setText(""String_Node_Str"");
  errorWindow.JBError.setEnabled(true);
  String message=t.toString() + ""String_Node_Str"";
  StackTraceElement[] eE=t.getStackTrace();
  for (int a=0; a < eE.length; a++) {
    message+=""String_Node_Str"";
    message+=eE[a];
    message+=""String_Node_Str"";
  }
  errorWindow.JTAError.setText(message);
  errorWindow.JTAError.setCaretPosition(0);
  errorWindow.setVisible(true);
  errorWindowCount++;
  System.out.println(t.getMessage());
  t.printStackTrace();
}","/** 
 * Shows the error information of t. It outputs all the information into an   {@link Error} window. This should only be accessible from a currentlyopen  {@link Error}.
 * @param t The error object
 */
public static synchronized ErrorWindow detailedReport(Throwable t){
  ErrorWindow errorWindow;
  if (commandLine) {
    t.printStackTrace();
    return null;
  }
  errorWindow=new ErrorWindow();
  errorWindow.setTitleText(""String_Node_Str"");
  errorWindow.setErrorText(""String_Node_Str"");
  errorWindow.setLineWrap(false);
  errorWindow.setCopyClipboard();
  errorWindow.setExtraButtonText(""String_Node_Str"");
  errorWindow.setExtraButtonEnabled(true);
  String message=t.toString() + ""String_Node_Str"";
  StackTraceElement[] eE=t.getStackTrace();
  for (int a=0; a < eE.length; a++) {
    message+=""String_Node_Str"";
    message+=eE[a];
    message+=""String_Node_Str"";
  }
  errorWindow.setInformationText(message);
  errorWindow.setVisible(true);
  errorWindowCount++;
  System.out.println(t.getMessage());
  t.printStackTrace();
  return errorWindow;
}",0.890057361376673
81099,"/** 
 * Unused.
 */
public static void errWindowClosed(){
}","/** 
 * Unused.
 */
public static synchronized void errWindowClosed(){
  errorWindowCount--;
}",0.7712418300653595
81100,"public static void fatalError(){
  fatalError=true;
  if (UpdateHandler.update != null) {
    UpdateHandler.update.dispose();
  }
}","public static void fatalError(){
  System.out.println(""String_Node_Str"");
}",0.4466019417475728
81101,"public static void startProgram(String[] args){
  boolean doUpdate=true;
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean autoStart=false;
  boolean commandLine=false;
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    KeyboardHandler.setTypeLink(true);
  break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
if (!checkShowclix) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
if (!checkPax) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
Checker.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + Checker.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
commandLine=true;
break;
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !Paxsite.isCheckingPaxWebsite() && !Showclix.isCheckingShowclix()) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
System.out.println(""String_Node_Str"");
Paxsite.setCheckPax(checkPax);
Showclix.setCheckShowclix(checkShowclix);
if (commandLine) {
ErrorHandler.setCommandLine(true);
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.autoUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
Checker.commandLineSettingsInput();
Checker.startCommandLineWebsiteChecking();
return;
}
KeyboardHandler.init();
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.checkUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (autoStart) {
Checker.startCheckingWebsites();
}
 else {
new Setup();
}
Checker.loadAlertIcon();
}","public static void startProgram(String[] args){
  boolean doUpdate=true;
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean autoStart=false;
  boolean commandLine=false;
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    KeyboardHandler.setTypeLink(true);
  break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
if (!checkShowclix) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
if (!checkPax) {
System.out.println(""String_Node_Str"");
break;
}
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
Checker.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + Checker.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
commandLine=true;
break;
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !Paxsite.isCheckingPaxWebsite() && !Showclix.isCheckingShowclix()) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
System.out.println(""String_Node_Str"");
Paxsite.setCheckPax(checkPax);
Showclix.setCheckShowclix(checkShowclix);
if (commandLine) {
ErrorHandler.setCommandLine(true);
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.autoUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
Checker.commandLineSettingsInput();
Checker.startCommandLineWebsiteChecking();
return;
}
KeyboardHandler.init();
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.checkUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (autoStart) {
Checker.startCheckingWebsites();
}
 else {
setup=new Setup();
}
Checker.loadAlertIcon();
}",0.9989576094510076
81102,"/** 
 * Finds the link of the Register Now button on the PAX website. This scans EVENT.paxsite.com/registration for the Register Now button link, and returns the ENTIRE line, HTML and all.
 * @return The line (HTML included) that the Register Now button link is on
 * @see #parseHRef(java.lang.String)
 */
public static String getCurrentButtonLinkLine(){
  URL url;
  InputStream is=null;
  BufferedReader br;
  String line;
  try {
    url=new URL(websiteLink + ""String_Node_Str"");
    HttpURLConnection httpCon1=(HttpURLConnection)url.openConnection();
    httpCon1.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
    is=httpCon1.getInputStream();
    br=new BufferedReader(new InputStreamReader(is));
    while ((line=br.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      line=line.trim();
      if (line.contains(""String_Node_Str"") && line.contains(""String_Node_Str"")) {
        return line;
      }
    }
  }
 catch (  UnknownHostException|MalformedURLException uhe) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
catch (  Exception e) {
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    System.out.println(""String_Node_Str"");
    return null;
  }
 finally {
    try {
      if (is != null) {
        is.close();
      }
    }
 catch (    IOException ioe) {
      System.out.println(""String_Node_Str"");
      ioe.printStackTrace();
    }
  }
  System.out.println(""String_Node_Str"");
  return ""String_Node_Str"";
}","/** 
 * Finds the link of the Register Now button on the PAX website. This scans EVENT.paxsite.com/registration for the Register Now button link, and returns the ENTIRE line, HTML and all.
 * @return The line (HTML included) that the Register Now button link is on
 * @see #parseHRef(java.lang.String)
 */
public static String getCurrentButtonLinkLine(){
  URL url;
  InputStream is=null;
  BufferedReader br;
  String line;
  try {
    url=new URL(websiteLink + ""String_Node_Str"");
    HttpURLConnection httpCon1=(HttpURLConnection)url.openConnection();
    httpCon1.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
    httpCon1.setConnectTimeout(Math.min(Checker.getRefreshTime() * 1000,10000));
    is=httpCon1.getInputStream();
    br=new BufferedReader(new InputStreamReader(is));
    while ((line=br.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      line=line.trim();
      if (line.contains(""String_Node_Str"") && line.contains(""String_Node_Str"")) {
        return line;
      }
    }
  }
 catch (  UnknownHostException|MalformedURLException uhe) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
catch (  Exception e) {
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    System.out.println(""String_Node_Str"");
    return null;
  }
 finally {
    try {
      if (is != null) {
        is.close();
      }
    }
 catch (    IOException ioe) {
      System.out.println(""String_Node_Str"");
      ioe.printStackTrace();
    }
  }
  return ""String_Node_Str"";
}",0.960594315245478
81103,"/** 
 * Gets the latest Showclix ID for a specific PAX event. This uses the Showclix API to find all of the events listed under a specific seller. In this case, each PAX event (Prime, East, etc) has a separate Showclix seller account associated with it. This uses the fact that every new Showclix event has a larger ID than before, and simply returns the largest Event ID for the specific expo given.
 * @param expo The expo to check
 * @return The most recent Showclix ID
 */
public static int getLatestShowclixID(String expo){
  try {
    URL url=new URL(getShowclixAPILink(expo));
    HttpURLConnection httpCon=(HttpURLConnection)url.openConnection();
    httpCon.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
    BufferedReader reader=new BufferedReader(new InputStreamReader(httpCon.getInputStream()));
    String jsonText=""String_Node_Str"";
    String line;
    while ((line=reader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      jsonText+=line;
    }
    reader.close();
    JSONParser mP=new JSONParser();
    JSONObject obj=(JSONObject)mP.parse(jsonText);
    int maxId=0;
    for (    String s : (Iterable<String>)obj.keySet()) {
      maxId=Math.max(maxId,Integer.parseInt((String)s));
    }
    return maxId;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return -1;
  }
}","/** 
 * Gets the latest Showclix ID for a specific PAX event. This uses the Showclix API to find all of the events listed under a specific seller. In this case, each PAX event (Prime, East, etc) has a separate Showclix seller account associated with it. This uses the fact that every new Showclix event has a larger ID than before, and simply returns the largest Event ID for the specific expo given.
 * @param expo The expo to check
 * @return The most recent Showclix ID
 */
public static int getLatestShowclixID(String expo){
  try {
    URL url=new URL(getShowclixAPILink(expo));
    HttpURLConnection httpCon=(HttpURLConnection)url.openConnection();
    httpCon.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
    httpCon.setConnectTimeout(Math.min(Checker.getRefreshTime() * 1000,10000));
    BufferedReader reader=new BufferedReader(new InputStreamReader(httpCon.getInputStream()));
    String jsonText=""String_Node_Str"";
    String line;
    while ((line=reader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      jsonText+=line;
    }
    reader.close();
    JSONParser mP=new JSONParser();
    JSONObject obj=(JSONObject)mP.parse(jsonText);
    int maxId=0;
    for (    String s : (Iterable<String>)obj.keySet()) {
      maxId=Math.max(maxId,Integer.parseInt((String)s));
    }
    return maxId;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return -1;
  }
}",0.9708667152221412
81104,"/** 
 * Loads the current version notes from online. This retreives all of the version notes possible and stores them in one String, with each line separated by a line break (\n). Note that this method blocks until finished, which depends on the user's internet speed. This also parses tokens from the version notes (and does not add them into the version notes String).
 * @see paxchecker.PAXChecker#loadPatchNotesInBackground()
 * @see #getVersionNotes()
 */
public static void loadVersionNotes(){
  URLConnection inputConnection;
  InputStream textInputStream;
  BufferedReader myReader=null;
  try {
    URL patchNotesURL=new URL(PATCH_NOTES_LINK);
    inputConnection=patchNotesURL.openConnection();
    textInputStream=inputConnection.getInputStream();
    myReader=new BufferedReader(new InputStreamReader(textInputStream));
    String line;
    String lineSeparator=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    String allText=""String_Node_Str"";
    boolean versionFound=false;
    while ((line=myReader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      line=line.trim();
      if (line.contains(""String_Node_Str"" + PAXChecker.VERSION + ""String_Node_Str"")) {
        setUpdateLevel(0);
        versionFound=true;
      }
      if (line.startsWith(""String_Node_Str"")) {
        try {
          String d=line.substring(6);
          if (d.startsWith(""String_Node_Str"")) {
            String load=d.substring(14);
            System.out.println(""String_Node_Str"" + load);
            Showclix.setShowclixID(Integer.parseInt(load));
          }
 else           if (d.startsWith(""String_Node_Str"")) {
            if (!versionFound) {
              String load=d.substring(11);
              if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(1);
              }
 else               if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(2);
              }
 else               if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(3);
              }
 else               if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(4);
              }
 else {
                System.out.println(""String_Node_Str"" + load);
              }
            }
          }
 else {
            System.out.println(""String_Node_Str"" + d);
          }
        }
 catch (        NumberFormatException numberFormatException) {
          System.out.println(""String_Node_Str"" + line);
        }
      }
 else {
        allText+=line + lineSeparator;
      }
    }
    versionNotes=allText.trim();
    if (update != null) {
      update.setYesButtonText(getUpdateLevel());
    }
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    e.printStackTrace();
  }
 finally {
    try {
      if (myReader != null) {
        myReader.close();
      }
    }
 catch (    IOException e) {
    }
  }
}","/** 
 * Loads the current version notes from online. This retreives all of the version notes possible and stores them in one String, with each line separated by a line break (\n). Note that this method blocks until finished, which depends on the user's internet speed. This also parses tokens from the version notes (and does not add them into the version notes String).
 * @see paxchecker.PAXChecker#loadPatchNotesInBackground()
 * @see #getVersionNotes()
 */
public static void loadVersionNotes(){
  URLConnection inputConnection;
  InputStream textInputStream;
  BufferedReader myReader=null;
  try {
    URL patchNotesURL=new URL(PATCH_NOTES_LINK);
    inputConnection=patchNotesURL.openConnection();
    textInputStream=inputConnection.getInputStream();
    myReader=new BufferedReader(new InputStreamReader(textInputStream));
    String line;
    String lineSeparator=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    String allText=""String_Node_Str"";
    boolean versionFound=false;
    while ((line=myReader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      line=line.trim();
      if (line.contains(""String_Node_Str"" + PAXChecker.VERSION + ""String_Node_Str"")) {
        setUpdateLevel(0);
        versionFound=true;
      }
      if (line.startsWith(""String_Node_Str"")) {
        try {
          String d=line.substring(6);
          if (d.startsWith(""String_Node_Str"")) {
            String load=d.substring(14);
            System.out.println(""String_Node_Str"" + load);
            Showclix.setShowclixID(Integer.parseInt(load));
          }
 else           if (d.startsWith(""String_Node_Str"")) {
            if (!versionFound) {
              String load=d.substring(11);
              if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(1);
              }
 else               if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(2);
              }
 else               if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(3);
              }
 else               if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(4);
              }
 else {
                System.out.println(""String_Node_Str"" + load);
              }
            }
          }
 else {
            System.out.println(""String_Node_Str"" + d);
          }
        }
 catch (        NumberFormatException numberFormatException) {
          System.out.println(""String_Node_Str"" + line);
        }
      }
 else {
        allText+=line + lineSeparator;
      }
    }
    versionNotes=allText.trim();
    if (update != null) {
      update.setYesButtonText(getUpdateLevel());
    }
    if (PAXChecker.setup != null) {
      PAXChecker.setup.setPatchNotesText(versionNotes);
    }
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    e.printStackTrace();
  }
 finally {
    try {
      if (myReader != null) {
        myReader.close();
      }
    }
 catch (    IOException e) {
    }
  }
}",0.9837371390640558
81105,"/** 
 * Initialize the class Sets the lastStatusID to the latest tweet. The assumption is that tickets aren't already on sale. In case of false alarms (instances where the twitter uses one of the keywords, but tickets aren't on sale yet), after restarting the app it will not trigger on that tweet.
 */
public static void init(){
  if (consumerKey == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  ConfigurationBuilder cb=new ConfigurationBuilder();
  try {
    cb.setDebugEnabled(true).setOAuthConsumerKey(Encryption.decrypt(consumerKey)).setOAuthConsumerSecret(Encryption.decrypt(consumerSecret)).setOAuthAccessToken(Encryption.decrypt(accessToken)).setOAuthAccessTokenSecret(Encryption.decrypt(accessSecret));
  }
 catch (  GeneralSecurityException|IOException generalSecurityException) {
  }
  TwitterFactory tf=new TwitterFactory(cb.build());
  twitter=tf.getInstance();
  try {
    List<Status> statuses=twitter.getUserTimeline(TWITTERHANDLE);
    officialPAXTwitterID=statuses.get(0).getUser().getId();
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
}","/** 
 * Initialize the class Sets the lastStatusID to the latest tweet. The assumption is that tickets aren't already on sale. In case of false alarms (instances where the twitter uses one of the keywords, but tickets aren't on sale yet), after restarting the app it will not trigger on that tweet.
 */
public static void init(){
  if (consumerKey == null || consumerSecret == null || accessToken == null || accessSecret == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  ConfigurationBuilder cb=new ConfigurationBuilder();
  try {
    cb.setDebugEnabled(true).setOAuthConsumerKey(Encryption.decrypt(consumerKey)).setOAuthConsumerSecret(Encryption.decrypt(consumerSecret)).setOAuthAccessToken(Encryption.decrypt(accessToken)).setOAuthAccessTokenSecret(Encryption.decrypt(accessSecret));
  }
 catch (  GeneralSecurityException|IOException generalSecurityException) {
  }
  TwitterFactory tf=new TwitterFactory(cb.build());
  twitter=tf.getInstance();
  try {
    List<Status> statuses=twitter.getUserTimeline(TWITTERHANDLE);
    officialPAXTwitterID=statuses.get(0).getUser().getId();
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
}",0.9692631578947368
81106,"public static void setKeys(String CK,String CS,String AT,String AS){
  try {
    consumerKey=Encryption.encrypt(CK);
    consumerSecret=Encryption.encrypt(CS);
    accessToken=Encryption.encrypt(AT);
    accessSecret=Encryption.encrypt(AS);
  }
 catch (  GeneralSecurityException|UnsupportedEncodingException generalSecurityException) {
  }
}","public static void setKeys(String CK,String CS,String AT,String AS){
  if (CK == null || CS == null || AT == null || AS == null) {
    return;
  }
  try {
    consumerKey=Encryption.encrypt(CK);
    consumerSecret=Encryption.encrypt(CS);
    accessToken=Encryption.encrypt(AT);
    accessSecret=Encryption.encrypt(AS);
  }
 catch (  GeneralSecurityException|UnsupportedEncodingException generalSecurityException) {
  }
}",0.889763779527559
81107,"/** 
 * Opens the URL given in the computer's default browser. Note that this will NOT work if the desktop environment isn't supported (generally a non-issue). Also note that this will simply open the URL -- it will not parse through it to make sure it is valid!
 * @param url The URL to open in the computer's default browser
 */
public static void openLinkInBrowser(URL url){
  Desktop desktop=Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
  if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
    try {
      desktop.browse(url.toURI());
    }
 catch (    Exception e) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
  }
}","/** 
 * Opens the URL given in the computer's default browser. Note that this will NOT work if the desktop environment isn't supported (generally a non-issue). Also note that this will simply open the URL -- it will not parse through it to make sure it is valid!
 * @param url The URL to open in the computer's default browser
 */
public static void openLinkInBrowser(URL url){
  if (url == null) {
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
    return;
  }
  Desktop desktop=Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
  if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
    try {
      desktop.browse(url.toURI());
    }
 catch (    URISyntaxException|IOException e) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
 else {
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
  }
}",0.839193083573487
81108,"/** 
 * Prompts the user for the required program information, including username, password, email, and other options. Note that this does NOT start the command-line website checking.
 */
public static void commandLineSettingsInput(){
  if (Email.getUsername() == null) {
    System.out.print(""String_Node_Str"");
    try {
      Email.setUsername(myScanner.next());
      System.out.print(""String_Node_Str"");
      Email.setPassword(myScanner.next());
    }
 catch (    Exception e) {
    }
  }
  if (Email.getAddressList().isEmpty()) {
    System.out.print(""String_Node_Str"");
    try {
      Email.addEmailAddress(myScanner.next());
    }
 catch (    Exception e) {
    }
  }
  if (Paxsite.isCheckingPaxWebsite()) {
    System.out.print(""String_Node_Str"");
    try {
      if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
        Paxsite.setCheckPax(true);
      }
 else {
        Paxsite.setCheckPax(false);
      }
    }
 catch (    Exception e) {
    }
  }
  if (Paxsite.isCheckingPaxWebsite()) {
    System.out.print(""String_Node_Str"");
    try {
      if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
        Showclix.setCheckShowclix(true);
      }
 else {
        Showclix.setCheckShowclix(false);
      }
    }
 catch (    Exception e) {
    }
  }
  if (getRefreshTime() == 10) {
    System.out.print(""String_Node_Str"");
    try {
      setRefreshTime(Integer.parseInt(myScanner.next(),10));
    }
 catch (    Exception e) {
    }
  }
  System.out.print(""String_Node_Str"");
  try {
    if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
      Audio.setPlayAlarm(true);
    }
  }
 catch (  Exception e) {
  }
  myScanner.nextLine();
  if (Browser.getExpo() == null) {
    System.out.print(""String_Node_Str"");
    try {
      String input=myScanner.nextLine();
      System.out.println(""String_Node_Str"" + input);
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
        Browser.setExpo(""String_Node_Str"");
      break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    Browser.setExpo(""String_Node_Str"");
  break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
Browser.setExpo(""String_Node_Str"");
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
Browser.setExpo(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + input + ""String_Node_Str"");
Browser.setExpo(""String_Node_Str"");
}
System.out.println();
}
 catch (Exception e) {
}
}
}","/** 
 * Prompts the user for the required program information, including username, password, email, and other options. Note that this does NOT start the command-line website checking.
 */
public static void commandLineSettingsInput(){
  if (Email.getUsername() == null) {
    System.out.print(""String_Node_Str"");
    try {
      Email.setUsername(myScanner.next());
      System.out.print(""String_Node_Str"");
      Email.setPassword(myScanner.next());
    }
 catch (    Exception e) {
    }
  }
  if (Email.getAddressList().isEmpty()) {
    System.out.print(""String_Node_Str"");
    try {
      Email.addEmailAddress(myScanner.next());
    }
 catch (    Exception e) {
    }
  }
  if (Showclix.isCheckingShowclix() && Paxsite.isCheckingPaxWebsite()) {
    System.out.print(""String_Node_Str"");
    try {
      if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
        Paxsite.setCheckPax(true);
      }
 else {
        Paxsite.setCheckPax(false);
      }
    }
 catch (    Exception e) {
    }
  }
  if (Showclix.isCheckingShowclix() && Paxsite.isCheckingPaxWebsite()) {
    System.out.print(""String_Node_Str"");
    try {
      if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
        Showclix.setCheckShowclix(true);
      }
 else {
        Showclix.setCheckShowclix(false);
      }
    }
 catch (    Exception e) {
    }
  }
  if (getRefreshTime() == 10) {
    System.out.print(""String_Node_Str"");
    try {
      setRefreshTime(Integer.parseInt(myScanner.next(),10));
    }
 catch (    Exception e) {
    }
  }
  System.out.print(""String_Node_Str"");
  try {
    if (!myScanner.next().toLowerCase().startsWith(""String_Node_Str"")) {
      Audio.setPlayAlarm(true);
    }
  }
 catch (  Exception e) {
  }
  myScanner.nextLine();
  if (Browser.getExpo() == null) {
    System.out.print(""String_Node_Str"");
    try {
      String input=myScanner.nextLine();
      System.out.println(""String_Node_Str"" + input);
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
        Browser.setExpo(""String_Node_Str"");
      break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    Browser.setExpo(""String_Node_Str"");
  break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
Browser.setExpo(""String_Node_Str"");
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
Browser.setExpo(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + input + ""String_Node_Str"");
Browser.setExpo(""String_Node_Str"");
}
System.out.println();
}
 catch (Exception e) {
}
}
}",0.9876079609463012
81109,"/** 
 * Starts checking for website updates and listening for commands given through the console.
 */
public static void startCommandLineWebsiteChecking(){
  PAXChecker.continueProgram(new Runnable(){
    @Override public void run(){
      String input;
      while (true) {
        try {
          input=myScanner.nextLine();
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
          System.exit(0);
        break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
      PAXChecker.sendTestEmail();
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  Audio.playAlarm();
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
forceRefresh=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
UpdateHandler.autoUpdate();
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
java.util.Iterator<Email.EmailAddress> it=Email.getAddressList().iterator();
while (it.hasNext()) {
System.out.println(it.next().getCompleteAddress());
}
break;
default :
if (input.toLowerCase().startsWith(""String_Node_Str"") || input.toLowerCase().startsWith(""String_Node_Str"")) {
Email.addEmailAddress(input.substring(input.indexOf(""String_Node_Str"") + 1));
continue;
}
System.out.println(""String_Node_Str"" + input.toLowerCase());
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
break;
}
}
}
}
);
PAXChecker.continueProgram(new Runnable(){
@Override public void run(){
int seconds=getRefreshTime();
do {
long startMS=System.currentTimeMillis();
if (Paxsite.isPAXWebsiteUpdated()) {
final String link=Paxsite.getCurrentButtonLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
 else if (Showclix.isShowclixUpdated()) {
final String link=Showclix.getShowclixLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
System.out.println(""String_Node_Str"" + DataTracker.getDataUsedMB() + ""String_Node_Str"");
while (System.currentTimeMillis() - startMS < (seconds * 1000)) {
if (forceRefresh) {
forceRefresh=false;
break;
}
try {
Thread.sleep(100);
}
 catch (InterruptedException iE) {
}
}
}
 while (true);
System.out.println(""String_Node_Str"");
}
}
);
}","/** 
 * Starts checking for website updates and listening for commands given through the console.
 */
public static void startCommandLineWebsiteChecking(){
  PAXChecker.continueProgram(new Runnable(){
    @Override public void run(){
      String input;
      while (true) {
        try {
          input=myScanner.nextLine();
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
switch (input.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
          System.exit(0);
        break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
      PAXChecker.sendTestEmail();
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  Audio.playAlarm();
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
forceRefresh=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
UpdateHandler.autoUpdate();
break;
case ""String_Node_Str"":
Browser.openLinkInBrowser(""String_Node_Str"");
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
java.util.Iterator<Email.EmailAddress> it=Email.getAddressList().iterator();
while (it.hasNext()) {
System.out.println(it.next().getCompleteAddress());
}
break;
default :
if (input.toLowerCase().startsWith(""String_Node_Str"") || input.toLowerCase().startsWith(""String_Node_Str"")) {
Email.addEmailAddress(input.substring(input.indexOf(""String_Node_Str"") + 1));
continue;
}
System.out.println(""String_Node_Str"" + input.toLowerCase());
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
break;
}
}
}
}
);
PAXChecker.continueProgram(new Runnable(){
@Override public void run(){
int seconds=getRefreshTime();
do {
long startMS=System.currentTimeMillis();
if (Paxsite.isPAXWebsiteUpdated()) {
final String link=Paxsite.getCurrentButtonLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
 else if (Showclix.isShowclixUpdated()) {
final String link=Showclix.getShowclixLink();
System.out.println(""String_Node_Str"" + link);
Email.sendEmailInBackground(""String_Node_Str"",""String_Node_Str"" + link);
Browser.openLinkInBrowser(link);
Audio.playAlarm();
break;
}
System.out.println(""String_Node_Str"" + DataTracker.getDataUsedMB() + ""String_Node_Str"");
while (System.currentTimeMillis() - startMS < (seconds * 1000)) {
if (forceRefresh) {
forceRefresh=false;
break;
}
try {
Thread.sleep(100);
}
 catch (InterruptedException iE) {
}
}
}
 while (true);
System.out.println(""String_Node_Str"");
}
}
);
}",0.9872495446265938
81110,"public static void startProgram(String[] args){
  boolean doUpdate=true;
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean autoStart=false;
  boolean commandLine=false;
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    KeyboardHandler.setTypeLink(true);
  break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
Checker.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + Checker.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
commandLine=true;
break;
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !Paxsite.isCheckingPaxWebsite() && !Showclix.isCheckingShowclix()) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
Paxsite.setCheckPax(checkPax);
Showclix.setCheckShowclix(checkShowclix);
if (commandLine) {
ErrorHandler.setCommandLine(true);
if (doUpdate) {
UpdateHandler.autoUpdate(args);
}
Checker.commandLineSettingsInput();
Checker.startCommandLineWebsiteChecking();
return;
}
if (doUpdate) {
UpdateHandler.checkUpdate(args);
}
if (autoStart) {
Checker.startCheckingWebsites();
}
 else {
setup=new Setup();
}
Checker.loadAlertIcon();
}","public static void startProgram(String[] args){
  boolean doUpdate=true;
  boolean checkPax=true;
  boolean checkShowclix=true;
  boolean autoStart=false;
  boolean commandLine=false;
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    KeyboardHandler.setTypeLink(true);
  break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
Checker.setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + Checker.getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
case ""String_Node_Str"":
commandLine=true;
break;
default :
if (args[a].startsWith(""String_Node_Str"")) {
System.out.println(""String_Node_Str"" + args[a]);
}
break;
}
}
if (autoStart && !Paxsite.isCheckingPaxWebsite() && !Showclix.isCheckingShowclix()) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
System.out.println(""String_Node_Str"");
Paxsite.setCheckPax(checkPax);
Showclix.setCheckShowclix(checkShowclix);
if (commandLine) {
ErrorHandler.setCommandLine(true);
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.autoUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
Checker.commandLineSettingsInput();
Checker.startCommandLineWebsiteChecking();
return;
}
if (doUpdate) {
UpdateHandler.loadVersionNotes();
UpdateHandler.checkUpdate(args);
}
 else {
startBackgroundThread(new Runnable(){
@Override public void run(){
UpdateHandler.loadVersionNotes();
}
}
,""String_Node_Str"");
}
if (autoStart) {
Checker.startCheckingWebsites();
}
 else {
setup=new Setup();
}
Checker.loadAlertIcon();
}",0.9216189536031588
81111,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  javax.swing.ToolTipManager.sharedInstance().setDismissDelay(600000);
  Email.init();
  KeyboardHandler.init();
  System.out.println(""String_Node_Str"");
  UpdateHandler.loadVersionNotes();
  startProgram(args);
}","/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  javax.swing.ToolTipManager.sharedInstance().setDismissDelay(600000);
  Email.init();
  KeyboardHandler.init();
  startProgram(args);
}",0.8743882544861338
81112,"/** 
 * Loads the current version notes from online. This retreives all of the version notes possible and stores them in one String, with each line separated by a line break (\n). Note that this method takes several seconds to load and should be run in a background Thread. Note that this also parses tokens from the version notes (and does not add them into the version notes String). Currently the only token read is SETSHOWCLIXID, which is obsolete due to the program loading the most recent Showclix ID after the version notes.
 * @see paxchecker.PAXChecker#loadPatchNotesInBackground()
 * @see #getVersionNotes()
 */
public static void loadVersionNotes(){
  URLConnection inputConnection;
  InputStream textInputStream;
  BufferedReader myReader=null;
  try {
    URL patchNotesURL=new URL(PATCH_NOTES_LINK);
    inputConnection=patchNotesURL.openConnection();
    textInputStream=inputConnection.getInputStream();
    myReader=new BufferedReader(new InputStreamReader(textInputStream));
    String line;
    String lineSeparator=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    String allText=""String_Node_Str"";
    boolean versionFound=false;
    while ((line=myReader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      line=line.trim();
      if (line.contains(""String_Node_Str"" + PAXChecker.VERSION + ""String_Node_Str"")) {
        setUpdateLevel(0);
        versionFound=true;
      }
      if (line.startsWith(""String_Node_Str"")) {
        try {
          String d=line.substring(6);
          if (d.startsWith(""String_Node_Str"")) {
            String load=d.substring(14);
            System.out.println(""String_Node_Str"" + load);
            Showclix.setShowclixID(Integer.parseInt(load));
          }
 else           if (d.startsWith(""String_Node_Str"")) {
            if (!versionFound) {
              String load=d.substring(11);
              if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(1);
              }
 else               if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(2);
              }
 else               if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(3);
              }
            }
          }
 else {
            System.out.println(""String_Node_Str"" + d);
          }
        }
 catch (        NumberFormatException numberFormatException) {
          System.out.println(""String_Node_Str"" + line);
        }
      }
 else {
        allText+=line + lineSeparator;
      }
    }
    versionNotes=allText.trim();
    if (update != null) {
      update.setYesButtonText(getUpdateLevel());
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    try {
      if (myReader != null) {
        myReader.close();
      }
    }
 catch (    IOException e) {
    }
  }
}","/** 
 * Loads the current version notes from online. This retreives all of the version notes possible and stores them in one String, with each line separated by a line break (\n). Note that this method takes several seconds to load and should be run in a background Thread. Note that this also parses tokens from the version notes (and does not add them into the version notes String). Currently the only token read is SETSHOWCLIXID, which is obsolete due to the program loading the most recent Showclix ID after the version notes.
 * @see paxchecker.PAXChecker#loadPatchNotesInBackground()
 * @see #getVersionNotes()
 */
public static void loadVersionNotes(){
  URLConnection inputConnection;
  InputStream textInputStream;
  BufferedReader myReader=null;
  try {
    URL patchNotesURL=new URL(PATCH_NOTES_LINK);
    inputConnection=patchNotesURL.openConnection();
    textInputStream=inputConnection.getInputStream();
    myReader=new BufferedReader(new InputStreamReader(textInputStream));
    String line;
    String lineSeparator=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    String allText=""String_Node_Str"";
    boolean versionFound=false;
    while ((line=myReader.readLine()) != null) {
      DataTracker.addDataUsed(line.length());
      line=line.trim();
      if (line.contains(""String_Node_Str"" + PAXChecker.VERSION + ""String_Node_Str"")) {
        setUpdateLevel(0);
        versionFound=true;
      }
      if (line.startsWith(""String_Node_Str"")) {
        try {
          String d=line.substring(6);
          if (d.startsWith(""String_Node_Str"")) {
            String load=d.substring(14);
            System.out.println(""String_Node_Str"" + load);
            Showclix.setShowclixID(Integer.parseInt(load));
          }
 else           if (d.startsWith(""String_Node_Str"")) {
            if (!versionFound) {
              String load=d.substring(11);
              if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(1);
              }
 else               if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(2);
              }
 else               if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(3);
              }
 else               if (load.equals(""String_Node_Str"")) {
                setUpdateLevel(4);
              }
 else {
                System.out.println(""String_Node_Str"" + load);
              }
            }
          }
 else {
            System.out.println(""String_Node_Str"" + d);
          }
        }
 catch (        NumberFormatException numberFormatException) {
          System.out.println(""String_Node_Str"" + line);
        }
      }
 else {
        allText+=line + lineSeparator;
      }
    }
    versionNotes=allText.trim();
    if (update != null) {
      update.setYesButtonText(getUpdateLevel());
    }
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    try {
      if (myReader != null) {
        myReader.close();
      }
    }
 catch (    IOException e) {
    }
  }
}",0.960013440860215
81113,"/** 
 * Checks whether or not an update to the program is available. Note that this compares the file sizes between the current file and the file on the Dropbox server. This means that if ANY modification is made to the JAR file, it's likely to trigger an update. This THEORETICALLY works well. We'll find out whether or not it will actually work in practice.
 * @return True if an update is available, false if not.
 */
public static boolean updateAvailable(){
  try {
    if (getUpdateLevel() == -1) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      return false;
    }
 else     if (getUpdateLevel() == 0) {
      System.out.println(""String_Node_Str"");
      return false;
    }
    URL updateURL;
    if (getUpdateLevel() == 1) {
      if (!SettingsHandler.getUseBetaVersion()) {
        System.out.println(""String_Node_Str"");
        return false;
      }
      updateURL=new URL(BETA_UPDATE_LINK);
    }
 else {
      updateURL=new URL(UPDATE_LINK);
    }
    URLConnection conn=updateURL.openConnection();
    updateSize=conn.getContentLengthLong();
    System.out.println(""String_Node_Str"" + updateSize);
    if (updateSize == -1) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      return false;
    }
    return true;
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Checks whether or not an update to the program is available. Note that this compares the file sizes between the current file and the file on the Dropbox server. This means that if ANY modification is made to the JAR file, it's likely to trigger an update. This THEORETICALLY works well. We'll find out whether or not it will actually work in practice.
 * @return True if an update is available, false if not.
 */
public static boolean updateAvailable(){
  try {
    if (getUpdateLevel() == -1) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      return false;
    }
 else     if (getUpdateLevel() == 0) {
      System.out.println(""String_Node_Str"");
      return false;
    }
 else     if (getUpdateLevel() == 4) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      return false;
    }
    URL updateURL;
    if (getUpdateLevel() == 1) {
      if (!SettingsHandler.getUseBetaVersion()) {
        System.out.println(""String_Node_Str"");
        return false;
      }
      updateURL=new URL(BETA_UPDATE_LINK);
    }
 else {
      updateURL=new URL(UPDATE_LINK);
    }
    URLConnection conn=updateURL.openConnection();
    updateSize=conn.getContentLengthLong();
    System.out.println(""String_Node_Str"" + updateSize);
    if (updateSize == -1) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      return false;
    }
    return true;
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
  }
  return false;
}",0.9534353630739172
81114,"public void setEmailAddress(String address){
  if (address == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
 else   if (address.length() < 5) {
    System.out.println(""String_Node_Str"");
    return;
  }
 else   if (!address.contains(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + address + ""String_Node_Str"");
    address+=""String_Node_Str"";
  }
  System.out.println(""String_Node_Str"" + address);
  address=address.trim();
  String temp=address.substring(0,address.indexOf(""String_Node_Str""));
  temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  address=temp + address.substring(address.indexOf(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + address);
  completeAddress=address;
}","public void setEmailAddress(String address){
  if (address == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
 else   if (address.length() < 5) {
    System.out.println(""String_Node_Str"");
    return;
  }
 else   if (!address.contains(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + address + ""String_Node_Str"");
    address+=getCarrierExtension(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + address);
  address=address.trim();
  String temp=address.substring(0,address.indexOf(""String_Node_Str""));
  temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  temp=temp.replace(""String_Node_Str"",""String_Node_Str"");
  address=temp + address.substring(address.indexOf(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + address);
  completeAddress=address;
}",0.968336211859528
81115,"/** 
 * Sets the current email address (username) for the program to use. Note that if the username does not contain an ending (&#64;site.net) or is null, &#64;yahoo.com is automatically appended to the end of the username. If the site ending does not end in &#64;yahoo.com or &#64;gmail.com, the program parses the SMTP server addess after the address ending and two colons.<br> Example: User&#64;site.com::site.smtp.server<br> This also (optionall) parses the site's SMTP port after the SMTP server address and a colon.<br> Example: User&#64;site.com::site.smtp.server:123
 * @param user The username to set
 */
public static void setUsername(String user){
  if (user == null) {
    username=""String_Node_Str"";
    props.put(""String_Node_Str"",getUsername());
    return;
  }
  if (!user.contains(""String_Node_Str"")) {
    user+=""String_Node_Str"";
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else {
    String extraInfo=null;
    try {
      extraInfo=user.toLowerCase().substring(user.indexOf(""String_Node_Str""));
    }
 catch (    Exception e) {
    }
    if (extraInfo == null) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      username=""String_Node_Str"";
      return;
    }
    setHost(extraInfo.substring(0,extraInfo.indexOf(""String_Node_Str"")));
    if (extraInfo.indexOf(""String_Node_Str"") != -1) {
      setPort(extraInfo.substring(extraInfo.indexOf(""String_Node_Str"")));
    }
    user=user.substring(0,user.indexOf(""String_Node_Str""));
  }
  System.out.println(""String_Node_Str"" + user);
  username=user;
  props.put(""String_Node_Str"",getUsername());
}","/** 
 * Sets the current email address (username) for the program to use. Note that if the username does not contain an ending (&#64;site.net) or is null, &#64;yahoo.com is automatically appended to the end of the username. If the site ending does not end in &#64;yahoo.com or &#64;gmail.com, the program parses the SMTP server addess after the address ending and two colons.<br> Example: User&#64;site.com::site.smtp.server<br> This also (optionall) parses the site's SMTP port after the SMTP server address and a colon.<br> Example: User&#64;site.com::site.smtp.server:123
 * @param user The username to set
 */
public static void setUsername(String user){
  if (user == null) {
    username=""String_Node_Str"";
    props.put(""String_Node_Str"",getUsername());
    return;
  }
  if (!user.contains(""String_Node_Str"")) {
    user+=""String_Node_Str"";
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else {
    String extraInfo=null;
    try {
      extraInfo=user.toLowerCase().substring(user.indexOf(""String_Node_Str"") + 2);
    }
 catch (    Exception e) {
    }
    if (extraInfo == null) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      username=""String_Node_Str"";
      return;
    }
    setHost(extraInfo.substring(0,extraInfo.indexOf(""String_Node_Str"")));
    if (extraInfo.contains(""String_Node_Str"")) {
      setPort(extraInfo.substring(extraInfo.indexOf(""String_Node_Str"") + 1));
    }
    user=user.substring(0,user.indexOf(""String_Node_Str""));
  }
  System.out.println(""String_Node_Str"" + user);
  username=user;
  props.put(""String_Node_Str"",getUsername());
}",0.8807595643674951
81116,"/** 
 * Sends an email to the provided number(s) using the supplied login information. This should only be called once  {@link #setUsername(java.lang.String)},   {@link #setPassword(java.lang.String)}, and (  {@link #setCellNum(java.lang.String,java.lang.String)} or{@link #setCellList(java.lang.String)}) have been called.
 * @param subject
 * @param msg
 * @return
 */
public static boolean sendMessage(String subject,String msg){
  if (!shouldSendEmail()) {
    return false;
  }
  createSession();
  try {
    MimeMessage message=new MimeMessage(l_session);
    message.setFrom(new InternetAddress(getUsername()));
    ListIterator<EmailAddress> lI=getAddressList().listIterator();
    while (lI.hasNext()) {
      message.addRecipient(Message.RecipientType.BCC,new InternetAddress(lI.next().getCompleteAddress()));
    }
    message.setSubject(subject);
    message.setText(msg);
    Transport transport=l_session.getTransport(""String_Node_Str"");
    transport.connect(host,getUsername(),password);
    transport.sendMessage(message,message.getAllRecipients());
    transport.close();
    System.out.println(""String_Node_Str"");
  }
 catch (  MessagingException mex) {
    mex.printStackTrace();
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",mex);
    return false;
  }
catch (  Exception e) {
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    e.printStackTrace();
    return false;
  }
  return true;
}","/** 
 * Sends an email to the provided number(s) using the supplied login information. This should only be called once  {@link #setUsername(java.lang.String)},   {@link #setPassword(java.lang.String)}, and (  {@link #setCellNum(java.lang.String,java.lang.String)} or{@link #setCellList(java.lang.String)}) have been called.
 * @param subject
 * @param msg
 * @return
 */
public static boolean sendMessage(String subject,String msg){
  if (!shouldSendEmail()) {
    return false;
  }
  createSession();
  try {
    MimeMessage message=new MimeMessage(l_session);
    message.setFrom(new InternetAddress(getUsername()));
    if (getAddressList().size() == 1) {
      message.addRecipient(Message.RecipientType.TO,new InternetAddress(getAddressList().get(0).getCompleteAddress()));
    }
 else {
      ListIterator<EmailAddress> lI=getAddressList().listIterator();
      while (lI.hasNext()) {
        EmailAddress address=lI.next();
        System.out.println(""String_Node_Str"" + address.getCompleteAddress());
        message.addRecipient(Message.RecipientType.BCC,new InternetAddress(address.getCompleteAddress()));
      }
    }
    message.setSubject(subject);
    message.setText(msg);
    Transport transport=l_session.getTransport(""String_Node_Str"");
    transport.connect(host,getUsername(),password);
    transport.sendMessage(message,message.getAllRecipients());
    transport.close();
    System.out.println(""String_Node_Str"");
  }
 catch (  MessagingException mex) {
    mex.printStackTrace();
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",mex);
    return false;
  }
catch (  Exception e) {
    ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    e.printStackTrace();
    return false;
  }
  return true;
}",0.8999378495960224
81117,"private void jButton1ActionPerformed(java.awt.event.ActionEvent evt){
  jButton1.setText(""String_Node_Str"");
  jButton1.setEnabled(false);
  if (jCheckBox1.isSelected()) {
    Browser.enablePaxWebsiteChecking();
  }
 else {
    if (!jCheckBox2.isSelected()) {
      return;
    }
  }
  if (jCheckBox2.isSelected()) {
    Browser.enableShowclixWebsiteChecking();
  }
  Audio.setPlayAlarm(jCheckBox3.isSelected());
  Email.setUsername(jTextField1.getText());
  Email.setPassword(new String(jPasswordField1.getPassword()));
  Browser.setExpo(jComboBox2.getSelectedItem().toString());
  Browser.setWebsiteLink(Browser.getWebsiteLink(Browser.getExpo()));
  String text=jTextField2.getText();
  if (!text.contains(""String_Node_Str"")) {
    text+=Email.getCarrierExtension(jComboBox1.getSelectedItem().toString());
  }
  String tempText;
  java.util.Iterator<ExtraPhonePanel> myIt=extraPhonePanelList.iterator();
  while (myIt.hasNext()) {
    ExtraPhonePanel panel=myIt.next();
    tempText=panel.getNumber();
    if (tempText.length() < 4) {
      System.out.println(""String_Node_Str"");
      continue;
    }
    if (!tempText.contains(""String_Node_Str"")) {
      tempText+=Email.getCarrierExtension(panel.getProvider());
    }
    text+=""String_Node_Str"" + tempText;
    System.out.println(""String_Node_Str"" + tempText);
  }
  System.out.println(""String_Node_Str"" + text);
  Email.addEmailAddress(text);
  PAXChecker.setRefreshTime(jSlider1.getValue());
  SettingsHandler.setSavePrefs(JCBSavePreferences.isSelected());
  if (JCBSavePreferences.isSelected()) {
    SettingsHandler.setSaveCellnum(JCBSaveCellnum.isSelected());
    SettingsHandler.setSavePax(JCBSaveCheckPax.isSelected());
    SettingsHandler.setSaveShowclix(JCBSaveCheckShowclix.isSelected());
    SettingsHandler.setSaveEvent(JCBSaveEvent.isSelected());
    SettingsHandler.setSaveAlarm(JCBSavePlayAlarm.isSelected());
    SettingsHandler.setSaveProvider(JCBSaveProvider.isSelected());
    SettingsHandler.setSaveRefreshTime(JCBSaveRefreshTime.isSelected());
    SettingsHandler.setSaveEmail(JCBSaveEmail.isSelected());
  }
  this.dispose();
  PAXChecker.startCheckingWebsites();
}","private void jButton1ActionPerformed(java.awt.event.ActionEvent evt){
  jButton1.setText(""String_Node_Str"");
  jButton1.setEnabled(false);
  if (jCheckBox1.isSelected()) {
    Browser.enablePaxWebsiteChecking();
  }
 else {
    if (!jCheckBox2.isSelected()) {
      return;
    }
  }
  if (jCheckBox2.isSelected()) {
    Browser.enableShowclixWebsiteChecking();
  }
  Audio.setPlayAlarm(jCheckBox3.isSelected());
  Email.setUsername(jTextField1.getText());
  Email.setPassword(new String(jPasswordField1.getPassword()));
  Browser.setExpo(jComboBox2.getSelectedItem().toString());
  Browser.setWebsiteLink(Browser.getWebsiteLink(Browser.getExpo()));
  String text=jTextField2.getText();
  if (!text.contains(""String_Node_Str"")) {
    text+=Email.getCarrierExtension(jComboBox1.getSelectedItem().toString());
  }
  String tempText;
  java.util.Iterator<ExtraPhonePanel> myIt=extraPhonePanelList.iterator();
  while (myIt.hasNext()) {
    ExtraPhonePanel panel=myIt.next();
    tempText=panel.getNumber();
    if (tempText.length() < 4) {
      System.out.println(""String_Node_Str"");
      continue;
    }
    String[] split=tempText.split(""String_Node_Str"");
    tempText=""String_Node_Str"";
    for (    String split1 : split) {
      split1=split1.trim();
      tempText+=split1;
      if (!split1.contains(""String_Node_Str"")) {
        tempText+=Email.getCarrierExtension(panel.getProvider());
      }
      tempText+=""String_Node_Str"";
    }
    text+=""String_Node_Str"" + tempText;
    System.out.println(""String_Node_Str"" + tempText);
  }
  System.out.println(""String_Node_Str"" + text);
  Email.addEmailAddress(text);
  PAXChecker.setRefreshTime(jSlider1.getValue());
  SettingsHandler.setSavePrefs(JCBSavePreferences.isSelected());
  if (JCBSavePreferences.isSelected()) {
    SettingsHandler.setSaveCellnum(JCBSaveCellnum.isSelected());
    SettingsHandler.setSavePax(JCBSaveCheckPax.isSelected());
    SettingsHandler.setSaveShowclix(JCBSaveCheckShowclix.isSelected());
    SettingsHandler.setSaveEvent(JCBSaveEvent.isSelected());
    SettingsHandler.setSaveAlarm(JCBSavePlayAlarm.isSelected());
    SettingsHandler.setSaveProvider(JCBSaveProvider.isSelected());
    SettingsHandler.setSaveRefreshTime(JCBSaveRefreshTime.isSelected());
    SettingsHandler.setSaveEmail(JCBSaveEmail.isSelected());
  }
  this.dispose();
  PAXChecker.startCheckingWebsites();
}",0.9447526070556912
81118,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"" + Tickets.currentTime());
  System.out.println(""String_Node_Str"");
  javax.swing.ToolTipManager.sharedInstance().setDismissDelay(600000);
  boolean doUpdate=true;
  boolean autoStart=false;
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    boolean checkPax=true;
    boolean checkShowclix=true;
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    shouldTypeLink=true;
  break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + getRefreshTime());
break;
case ""String_Node_Str"":
break;
}
}
if (checkPax) Browser.enablePaxWebsiteChecking();
if (checkShowclix) Browser.enableShowclixWebsiteChecking();
if (autoStart && !Browser.isCheckingPaxWebsite() && !Browser.isCheckingShowclix()) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
Browser.init();
Email.init();
KeyboardHandler.init();
prefetchIconsInBackground();
loadPatchNotesInBackground();
if (doUpdate) {
try {
System.out.println(""String_Node_Str"");
if (Browser.updateAvailable()) {
update=new Update();
while (update.isVisible() && !updateProgram) {
Thread.sleep(100);
}
if (updateProgram) {
update.setStatusLabelText(""String_Node_Str"");
Browser.updateProgram();
update.dispose();
return;
}
update.dispose();
}
}
 catch (Exception e) {
ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
ErrorHandler.fatalError();
return;
}
}
if (autoStart) {
startCheckingWebsites();
}
 else {
setup=new Setup();
}
}","/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"" + Tickets.currentTime());
  System.out.println(""String_Node_Str"");
  javax.swing.ToolTipManager.sharedInstance().setDismissDelay(600000);
  boolean doUpdate=true;
  boolean autoStart=false;
  if (args.length > 0) {
    System.out.println(""String_Node_Str"");
    boolean checkPax=true;
    boolean checkShowclix=true;
    argsCycle:     for (int a=0; a < args.length; a++) {
      System.out.println(""String_Node_Str"" + a + ""String_Node_Str""+ args[a]);
switch (args[a].toLowerCase()) {
case ""String_Node_Str"":
        doUpdate=false;
      break;
case ""String_Node_Str"":
    shouldTypeLink=true;
  break;
case ""String_Node_Str"":
Email.setUsername(args[a + 1]);
System.out.println(""String_Node_Str"" + Email.getUsername());
break;
case ""String_Node_Str"":
Email.setPassword(args[a + 1]);
System.out.println(""String_Node_Str"");
break;
case ""String_Node_Str"":
for (int b=a + 1; b < args.length; b++) {
if (args[b].startsWith(""String_Node_Str"")) {
a=b - 1;
continue argsCycle;
}
System.out.println(""String_Node_Str"" + args[b]);
Email.addEmailAddress(args[b]);
}
break;
case ""String_Node_Str"":
Browser.setExpo(args[a + 1]);
System.out.println(""String_Node_Str"" + Browser.getExpo());
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
checkPax=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
checkShowclix=false;
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
Audio.setPlayAlarm(true);
break;
case ""String_Node_Str"":
setRefreshTime(Integer.getInteger(args[a + 1],15));
System.out.println(""String_Node_Str"" + getRefreshTime());
break;
case ""String_Node_Str"":
autoStart=true;
break;
}
}
if (checkPax) Browser.enablePaxWebsiteChecking();
if (checkShowclix) Browser.enableShowclixWebsiteChecking();
if (autoStart && !Browser.isCheckingPaxWebsite() && !Browser.isCheckingShowclix()) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
}
Browser.init();
Email.init();
KeyboardHandler.init();
prefetchIconsInBackground();
loadPatchNotesInBackground();
if (doUpdate) {
try {
System.out.println(""String_Node_Str"");
if (Browser.updateAvailable()) {
update=new Update();
while (update.isVisible() && !updateProgram) {
Thread.sleep(100);
}
if (updateProgram) {
update.setStatusLabelText(""String_Node_Str"");
Browser.updateProgram();
update.dispose();
return;
}
update.dispose();
}
}
 catch (Exception e) {
ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
ErrorHandler.fatalError();
return;
}
}
if (autoStart) {
startCheckingWebsites();
}
 else {
setup=new Setup();
}
}",0.9969992498124532
81119,"/** 
 * Sets the   {@link #props} settings for the the current email address being used. Call every time the email provider (Yahoo, GMail) changes.
 */
public static void emailSettings(){
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",port);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Sets the   {@link #props} settings for the the current email address being used. Call every time the email provider (Yahoo, GMail) changes.
 */
public static void emailSettings(){
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",port);
}",0.8670212765957447
81120,"public static void setHost(String h){
  host=h;
}","public static void setHost(String h){
  host=h;
  props.put(""String_Node_Str"",h);
}",0.7424242424242424
81121,"/** 
 * Sets the current email address (username) for the program to use. Note that if the username does not contain an ending (&#64;site.net) or is null, &#64;yahoo.com is automatically appended to the end of the username. If the site ending does not end in &#64;yahoo.com or &#64;gmail.com, the program parses the SMTP server addess after the address ending and two colons.<br> Example: User&#64;site.com::site.smtp.server<br> This also (optionall) parses the site's SMTP port after the SMTP server address and a colon.<br> Example: User&#64;site.com::site.smtp.server:123
 * @param user The username to set
 */
public static void setUsername(String user){
  if (user == null) {
    username=""String_Node_Str"";
    props.put(""String_Node_Str"",getUsername());
    return;
  }
  if (user.length() < 3) {
    System.out.println(""String_Node_Str"");
    username=""String_Node_Str"";
    props.put(""String_Node_Str"",getUsername());
    return;
  }
 else   if (!user.contains(""String_Node_Str"")) {
    user+=""String_Node_Str"";
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else {
    String extraInfo=null;
    try {
      extraInfo=user.toLowerCase().substring(user.indexOf(""String_Node_Str"") + 2);
    }
 catch (    Exception e) {
    }
    if (extraInfo == null) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      username=""String_Node_Str"";
      return;
    }
    String host;
    try {
      if (extraInfo.contains(""String_Node_Str"")) {
        host=extraInfo.substring(0,extraInfo.indexOf(""String_Node_Str""));
        setPort(extraInfo.substring(extraInfo.indexOf(""String_Node_Str"") + 1));
      }
 else {
        host=extraInfo;
      }
      setHost(extraInfo.substring(0,extraInfo.indexOf(""String_Node_Str"")));
      props.put(""String_Node_Str"",extraInfo.substring(0,extraInfo.indexOf(""String_Node_Str"")));
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"" + extraInfo + ""String_Node_Str"",e);
      username=""String_Node_Str"";
      props.put(""String_Node_Str"",getUsername());
      return;
    }
    if (extraInfo.contains(""String_Node_Str"")) {
    }
    user=user.substring(0,user.indexOf(""String_Node_Str""));
  }
  System.out.println(""String_Node_Str"" + user);
  username=user;
  props.put(""String_Node_Str"",getUsername());
}","/** 
 * Sets the current email address (username) for the program to use. Note that if the username does not contain an ending (&#64;site.net) or is null, &#64;yahoo.com is automatically appended to the end of the username. If the site ending does not end in &#64;yahoo.com or &#64;gmail.com, the program parses the SMTP server addess after the address ending and two colons.<br> Example: User&#64;site.com::site.smtp.server<br> This also (optionall) parses the site's SMTP port after the SMTP server address and a colon.<br> Example: User&#64;site.com::site.smtp.server:123
 * @param user The username to set
 */
public static void setUsername(String user){
  if (user == null) {
    username=""String_Node_Str"";
    props.put(""String_Node_Str"",getUsername());
    return;
  }
  if (user.length() < 3) {
    System.out.println(""String_Node_Str"");
    username=""String_Node_Str"";
    props.put(""String_Node_Str"",getUsername());
    return;
  }
 else   if (!user.contains(""String_Node_Str"")) {
    user+=""String_Node_Str"";
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else {
    String extraInfo=null;
    try {
      extraInfo=user.toLowerCase().substring(user.indexOf(""String_Node_Str"") + 2);
    }
 catch (    Exception e) {
    }
    if (extraInfo == null) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      username=""String_Node_Str"";
      return;
    }
    String host;
    try {
      if (extraInfo.contains(""String_Node_Str"")) {
        host=extraInfo.substring(0,extraInfo.indexOf(""String_Node_Str""));
        setPort(extraInfo.substring(extraInfo.indexOf(""String_Node_Str"") + 1));
      }
 else {
        host=extraInfo;
      }
      setHost(extraInfo.substring(0,extraInfo.indexOf(""String_Node_Str"")));
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"" + extraInfo + ""String_Node_Str"",e);
      username=""String_Node_Str"";
      props.put(""String_Node_Str"",getUsername());
      return;
    }
    if (extraInfo.contains(""String_Node_Str"")) {
    }
    user=user.substring(0,user.indexOf(""String_Node_Str""));
  }
  System.out.println(""String_Node_Str"" + user);
  username=user;
  props.put(""String_Node_Str"",getUsername());
}",0.9808383233532936
81122,"/** 
 * Starts a new non-daemon Thread that checks the websites for updates. This Thread also updates the Status GUI.
 */
public static void startCheckingWebsites(){
  PAXChecker.continueProgram(new Runnable(){
    @Override public void run(){
      SettingsHandler.saveAllPrefs();
      if (!Browser.checkShowclixLink(SettingsHandler.getLastEvent())) {
        SettingsHandler.saveLastEvent(Browser.getShowclixLink());
        System.out.println(""String_Node_Str"");
      }
      status=new Status();
      setStatusIconInBackground(getIconName(Browser.getExpo()));
      long startMS;
      int seconds=getRefreshTime();
      do {
        startMS=System.currentTimeMillis();
        if (Browser.isShowclixUpdated() || Browser.isPAXWebsiteUpdated()) {
          final String link=Browser.parseHRef(Browser.getCurrentButtonLinkLine());
          linkFound(link);
          break;
        }
        status.setDataUsageText(DataTracker.getDataUsedMB());
        while (System.currentTimeMillis() - startMS < (seconds * 1000)) {
          if (forceRefresh) {
            forceRefresh=false;
            break;
          }
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException interruptedException) {
          }
          status.setLastCheckedText(seconds - (int)((System.currentTimeMillis() - startMS) / 1000));
        }
      }
 while (status.isDisplayable());
      System.out.println(""String_Node_Str"");
    }
  }
);
}","/** 
 * Starts a new non-daemon Thread that checks the websites for updates. This Thread also updates the Status GUI.
 */
public static void startCheckingWebsites(){
  PAXChecker.continueProgram(new Runnable(){
    @Override public void run(){
      SettingsHandler.saveAllPrefs();
      if (!Browser.checkShowclixLink(SettingsHandler.getLastEvent())) {
        SettingsHandler.saveLastEvent(Browser.getShowclixLink());
        System.out.println(""String_Node_Str"");
      }
      status=new Status();
      setStatusIconInBackground(getIconName(Browser.getExpo()));
      long startMS;
      int seconds=getRefreshTime();
      do {
        status.setLastCheckedText(""String_Node_Str"");
        startMS=System.currentTimeMillis();
        if (Browser.isShowclixUpdated() || Browser.isPAXWebsiteUpdated()) {
          final String link=Browser.parseHRef(Browser.getCurrentButtonLinkLine());
          linkFound(link);
          break;
        }
        status.setDataUsageText(DataTracker.getDataUsedMB());
        while (System.currentTimeMillis() - startMS < (seconds * 1000)) {
          if (forceRefresh) {
            forceRefresh=false;
            break;
          }
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException interruptedException) {
          }
          status.setLastCheckedText(seconds - (int)((System.currentTimeMillis() - startMS) / 1000));
        }
      }
 while (status.isDisplayable());
      System.out.println(""String_Node_Str"");
    }
  }
);
}",0.9819034852546916
81123,"public static void setStatusShowclixLink(String s){
  if (status != null) {
    status.setShowclixLink(""String_Node_Str"");
  }
}","public static void setStatusShowclixLink(String s){
  if (status != null) {
    status.setShowclixLink(s);
  }
}",0.925
81124,"/** 
 * Returns the expo currently set. This generally adheres to the format of ""PAX [expo]"" or just ""[expo]"".
 * @return The expo currently set
 * @see #setExpo(java.lang.String)
 */
public static String getExpo(){
  return Expo;
}","/** 
 * Returns the expo currently set. This should adhere to the format of ""PAX [expo]"" or just ""[expo]"".
 * @return The expo currently set
 * @see #setExpo(java.lang.String)
 */
public static String getExpo(){
  return Expo;
}",0.9391304347826088
81125,"/** 
 * Initializes the Browser class. This should be run before any other method is run in the Browser.
 */
public static void init(){
  try {
    updateURL=new URL(UDATE_LINK);
    patchNotesURL=new URL(PATCH_NOTES_LINK);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}","/** 
 * Initializes the Browser class. This should be run before any other method is run in the Browser.
 */
public static void init(){
  try {
    updateURL=new URL(UDATE_LINK);
    patchNotesURL=new URL(PATCH_NOTES_LINK);
  }
 catch (  MalformedURLException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}",0.9819277108433736
81126,"/** 
 * Sets the current email address (username) for the program to use. Note that if the username does not contain an ending (&#64;site.net) or is null, &#64;yahoo.com is automatically appended to the end of the username. If the site ending does not end in &#64;yahoo.com or &#64;gmail.com, the program parses the SMTP server addess after the address ending and two colons.<br> Example: User&#64;site.com::site.smtp.server<br> This also (optionall) parses the site's SMTP port after the SMTP server address and a colon.<br> Example: User&#64;site.com::site.smtp.server:123
 * @param user The username to set
 */
public static void setUsername(String user){
  if (user == null) {
    username=""String_Node_Str"";
    props.put(""String_Node_Str"",getUsername());
    return;
  }
  if (!user.contains(""String_Node_Str"")) {
    user+=""String_Node_Str"";
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else {
    String extraInfo=null;
    try {
      extraInfo=user.toLowerCase().substring(user.indexOf(""String_Node_Str"") + 2);
    }
 catch (    Exception e) {
    }
    if (extraInfo == null) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      username=""String_Node_Str"";
      return;
    }
    setHost(extraInfo.substring(0,extraInfo.indexOf(""String_Node_Str"")));
    if (extraInfo.contains(""String_Node_Str"")) {
      setPort(extraInfo.substring(extraInfo.indexOf(""String_Node_Str"") + 1));
    }
    user=user.substring(0,user.indexOf(""String_Node_Str""));
  }
  System.out.println(""String_Node_Str"" + user);
  username=user;
  props.put(""String_Node_Str"",getUsername());
}","/** 
 * Sets the current email address (username) for the program to use. Note that if the username does not contain an ending (&#64;site.net) or is null, &#64;yahoo.com is automatically appended to the end of the username. If the site ending does not end in &#64;yahoo.com or &#64;gmail.com, the program parses the SMTP server addess after the address ending and two colons.<br> Example: User&#64;site.com::site.smtp.server<br> This also (optionall) parses the site's SMTP port after the SMTP server address and a colon.<br> Example: User&#64;site.com::site.smtp.server:123
 * @param user The username to set
 */
public static void setUsername(String user){
  if (user == null) {
    username=""String_Node_Str"";
    props.put(""String_Node_Str"",getUsername());
    return;
  }
  if (user.length() < 3) {
    System.out.println(""String_Node_Str"");
    username=""String_Node_Str"";
    props.put(""String_Node_Str"",getUsername());
    return;
  }
 else   if (!user.contains(""String_Node_Str"")) {
    user+=""String_Node_Str"";
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else {
    String extraInfo=null;
    try {
      extraInfo=user.toLowerCase().substring(user.indexOf(""String_Node_Str"") + 2);
    }
 catch (    Exception e) {
    }
    if (extraInfo == null) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      username=""String_Node_Str"";
      return;
    }
    setHost(extraInfo.substring(0,extraInfo.indexOf(""String_Node_Str"")));
    if (extraInfo.contains(""String_Node_Str"")) {
      setPort(extraInfo.substring(extraInfo.indexOf(""String_Node_Str"") + 1));
    }
    user=user.substring(0,user.indexOf(""String_Node_Str""));
  }
  System.out.println(""String_Node_Str"" + user);
  username=user;
  props.put(""String_Node_Str"",getUsername());
}",0.9542066027689032
81127,"/** 
 * Checks whether the program should send an email. If the username OR the email to send to is null (no valid address/number was given), it returns false. If both are valid, it returns true.
 * @return True if should send email, false if not.
 */
public static boolean shouldSendEmail(){
  return getUsername() != null && !getUsername().equals(""String_Node_Str"") && !addressList.isEmpty();
}","/** 
 * Checks whether the program should send an email. If the username OR the email to send to is null (no valid address/number was given), it returns false. If both are valid, it returns true.
 * @return True if should send email, false if not.
 */
public static boolean shouldSendEmail(){
  return getUsername() != null && !getUsername().equals(""String_Node_Str"") && !getAddressList().isEmpty();
}",0.9912170639899625
81128,"/** 
 * Sets the   {@link #props} settings for the the current email address being used. Call every time the email provider (Yahoo, GMail) changes.
 */
public static void emailSettings(){
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",port);
  props.put(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Sets the   {@link #props} settings for the the current email address being used. Call every time the email provider (Yahoo, GMail) changes.
 */
public static void emailSettings(){
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",port);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
}",0.9376558603491272
81129,"/** 
 * Sets the current email address (username) for the program to use. Note that if the username does not contain an ending (&#64;site.net) or is null, &#64;yahoo.com is automatically appended to the end of the username. If the site ending does not end in &#64;yahoo.com or &#64;gmail.com, the program parses the SMTP server addess after the address ending and two colons.<br> Example: User&#64;site.com::site.smtp.server<br> This also (optionall) parses the site's SMTP port after the SMTP server address and a colon.<br> Example: User&#64;site.com::site.smtp.server:123
 * @param user The username to set
 */
public static void setUsername(String user){
  if (user == null) {
    username=""String_Node_Str"";
    props.put(""String_Node_Str"",getUsername());
    return;
  }
  if (user.length() < 3) {
    System.out.println(""String_Node_Str"");
    username=""String_Node_Str"";
    props.put(""String_Node_Str"",getUsername());
    return;
  }
 else   if (!user.contains(""String_Node_Str"")) {
    user+=""String_Node_Str"";
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else {
    String extraInfo=null;
    try {
      extraInfo=user.toLowerCase().substring(user.indexOf(""String_Node_Str"") + 2);
    }
 catch (    Exception e) {
    }
    if (extraInfo == null) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      username=""String_Node_Str"";
      return;
    }
    setHost(extraInfo.substring(0,extraInfo.indexOf(""String_Node_Str"")));
    if (extraInfo.contains(""String_Node_Str"")) {
      setPort(extraInfo.substring(extraInfo.indexOf(""String_Node_Str"") + 1));
    }
    user=user.substring(0,user.indexOf(""String_Node_Str""));
  }
  System.out.println(""String_Node_Str"" + user);
  username=user;
  props.put(""String_Node_Str"",getUsername());
}","/** 
 * Sets the current email address (username) for the program to use. Note that if the username does not contain an ending (&#64;site.net) or is null, &#64;yahoo.com is automatically appended to the end of the username. If the site ending does not end in &#64;yahoo.com or &#64;gmail.com, the program parses the SMTP server addess after the address ending and two colons.<br> Example: User&#64;site.com::site.smtp.server<br> This also (optionall) parses the site's SMTP port after the SMTP server address and a colon.<br> Example: User&#64;site.com::site.smtp.server:123
 * @param user The username to set
 */
public static void setUsername(String user){
  if (user == null) {
    username=""String_Node_Str"";
    props.put(""String_Node_Str"",getUsername());
    return;
  }
  if (user.length() < 3) {
    System.out.println(""String_Node_Str"");
    username=""String_Node_Str"";
    props.put(""String_Node_Str"",getUsername());
    return;
  }
 else   if (!user.contains(""String_Node_Str"")) {
    user+=""String_Node_Str"";
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else   if (user.toLowerCase().contains(""String_Node_Str"")) {
    setHost(""String_Node_Str"");
  }
 else {
    String extraInfo=null;
    try {
      extraInfo=user.toLowerCase().substring(user.indexOf(""String_Node_Str"") + 2);
    }
 catch (    Exception e) {
    }
    if (extraInfo == null) {
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"",null);
      username=""String_Node_Str"";
      return;
    }
    String host;
    try {
      if (extraInfo.contains(""String_Node_Str"")) {
        host=extraInfo.substring(0,extraInfo.indexOf(""String_Node_Str""));
        setPort(extraInfo.substring(extraInfo.indexOf(""String_Node_Str"") + 1));
      }
 else {
        host=extraInfo;
      }
      setHost(extraInfo.substring(0,extraInfo.indexOf(""String_Node_Str"")));
      props.put(""String_Node_Str"",extraInfo.substring(0,extraInfo.indexOf(""String_Node_Str"")));
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      ErrorHandler.showErrorWindow(""String_Node_Str"",""String_Node_Str"" + extraInfo + ""String_Node_Str"",e);
      username=""String_Node_Str"";
      props.put(""String_Node_Str"",getUsername());
      return;
    }
    if (extraInfo.contains(""String_Node_Str"")) {
    }
    user=user.substring(0,user.indexOf(""String_Node_Str""));
  }
  System.out.println(""String_Node_Str"" + user);
  username=user;
  props.put(""String_Node_Str"",getUsername());
}",0.829754261678105
81130,"/** 
 * Sends a test email to every number put into the program and prints whether it was successful or not to the Status window.
 */
public static void testEmail(){
  if (sendMessage(""String_Node_Str"",""String_Node_Str"")) {
    if (PAXChecker.status != null) {
      PAXChecker.status.setButtonStatusText(""String_Node_Str"");
    }
  }
 else {
    if (PAXChecker.status != null) {
      PAXChecker.status.setButtonStatusText(""String_Node_Str"");
    }
  }
}","/** 
 * Sends a test email to every number put into the program and prints whether it was successful or not to the Status window.
 */
public static boolean testEmail(){
  if (sendMessage(""String_Node_Str"",""String_Node_Str"")) {
    if (PAXChecker.status != null) {
      PAXChecker.status.setButtonStatusText(""String_Node_Str"");
      return true;
    }
  }
 else {
    if (PAXChecker.status != null) {
      PAXChecker.status.setButtonStatusText(""String_Node_Str"");
    }
  }
  return false;
}",0.9514767932489452
81131,"private static boolean canExit(){
  if (errorWindowCount == 0) {
    if (fatalError) {
      return true;
    }
    int validCount=0;
    if (PAXChecker.setup != null) {
      if (!PAXChecker.setup.isVisible()) {
        validCount++;
      }
    }
 else {
      validCount++;
    }
    if (PAXChecker.tickets != null) {
      if (!PAXChecker.tickets.isVisible()) {
        validCount++;
      }
    }
 else {
      validCount++;
    }
    if (PAXChecker.update != null) {
      if (!PAXChecker.update.isVisible()) {
        validCount++;
      }
    }
 else {
      validCount++;
    }
    if (PAXChecker.status != null) {
      if (!PAXChecker.status.isVisible()) {
        validCount++;
      }
    }
 else {
      validCount++;
    }
    if (validCount == 4) {
      return true;
    }
  }
  return false;
}","private static boolean canExit(){
  if (errorWindowCount == 0) {
    if (fatalError) {
      return true;
    }
    int validCount=0;
    if (PAXChecker.setup != null) {
      if (!PAXChecker.setup.isVisible()) {
        validCount++;
      }
    }
 else {
      validCount++;
    }
    if (PAXChecker.tickets != null) {
      if (!PAXChecker.tickets.isVisible()) {
        validCount++;
      }
    }
 else {
      validCount++;
    }
    if (PAXChecker.update != null) {
      if (!PAXChecker.update.isVisible()) {
        validCount++;
      }
    }
 else {
      validCount++;
    }
    if (PAXChecker.status != null) {
      if (!PAXChecker.status.isDisplayable()) {
        validCount++;
      }
    }
 else {
      validCount++;
    }
    if (validCount == 4) {
      return true;
    }
  }
  return false;
}",0.992619926199262
81132,"@Override public void run(){
  try {
    status.setTextButtonState(false);
    status.setTextButtonText(""String_Node_Str"");
    Email.testEmail();
    long timeStarted=System.currentTimeMillis();
    while (System.currentTimeMillis() - timeStarted < 60000) {
      status.setTextButtonText((60 - (int)((System.currentTimeMillis() - timeStarted) / 1000)) + ""String_Node_Str"");
      Thread.sleep(200);
    }
    status.setTextButtonText(""String_Node_Str"");
    status.setTextButtonState(true);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    status.setTextButtonText(""String_Node_Str"");
    status.setTextButtonState(true);
  }
}","@Override public void run(){
  try {
    status.setTextButtonState(false);
    status.setTextButtonText(""String_Node_Str"");
    if (!Email.testEmail()) {
      status.setTextButtonText(""String_Node_Str"");
      status.setTextButtonState(true);
      return;
    }
    long timeStarted=System.currentTimeMillis();
    while (System.currentTimeMillis() - timeStarted < 60000) {
      status.setTextButtonText((60 - (int)((System.currentTimeMillis() - timeStarted) / 1000)) + ""String_Node_Str"");
      Thread.sleep(200);
    }
    status.setTextButtonText(""String_Node_Str"");
    status.setTextButtonState(true);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    status.setTextButtonText(""String_Node_Str"");
    status.setTextButtonState(true);
  }
}",0.9195402298850576
81133,"public static void sendBackgroundTestEmail(){
  if (status == null) {
    return;
  }
  startBackgroundThread(new Runnable(){
    @Override public void run(){
      try {
        status.setTextButtonState(false);
        status.setTextButtonText(""String_Node_Str"");
        Email.testEmail();
        long timeStarted=System.currentTimeMillis();
        while (System.currentTimeMillis() - timeStarted < 60000) {
          status.setTextButtonText((60 - (int)((System.currentTimeMillis() - timeStarted) / 1000)) + ""String_Node_Str"");
          Thread.sleep(200);
        }
        status.setTextButtonText(""String_Node_Str"");
        status.setTextButtonState(true);
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
        status.setTextButtonText(""String_Node_Str"");
        status.setTextButtonState(true);
      }
    }
  }
);
}","public static void sendBackgroundTestEmail(){
  if (status == null) {
    return;
  }
  startBackgroundThread(new Runnable(){
    @Override public void run(){
      try {
        status.setTextButtonState(false);
        status.setTextButtonText(""String_Node_Str"");
        if (!Email.testEmail()) {
          status.setTextButtonText(""String_Node_Str"");
          status.setTextButtonState(true);
          return;
        }
        long timeStarted=System.currentTimeMillis();
        while (System.currentTimeMillis() - timeStarted < 60000) {
          status.setTextButtonText((60 - (int)((System.currentTimeMillis() - timeStarted) / 1000)) + ""String_Node_Str"");
          Thread.sleep(200);
        }
        status.setTextButtonText(""String_Node_Str"");
        status.setTextButtonState(true);
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
        status.setTextButtonText(""String_Node_Str"");
        status.setTextButtonState(true);
      }
    }
  }
);
}",0.9298701298701298
81134,"/** 
 * <HTML>Sets   {@link #textEmail} to the specified email address. If no [AT] symbol is in {@link num},  {@link carrier} is used to add the correct carrier email ending to the number. If an invalidcarrier is specified, the method defaults to AT&T.<br> Note that this sets  {@link #emailList} to null.</HTML>
 * @param num
 * @param carrier 
 */
public static void setCellNum(String num,String carrier){
  if (num == null) {
    textEmail=null;
    return;
  }
 else   if (num.length() == 0) {
    textEmail=null;
    return;
  }
  if (!num.contains(""String_Node_Str"")) {
switch (carrier) {
case ""String_Node_Str"":
      num+=""String_Node_Str"";
    break;
case ""String_Node_Str"":
  num+=""String_Node_Str"";
break;
case ""String_Node_Str"":
num+=""String_Node_Str"";
break;
case ""String_Node_Str"":
num+=""String_Node_Str"";
break;
case ""String_Node_Str"":
num+=""String_Node_Str"";
break;
default :
System.out.println(""String_Node_Str"");
setCellNum(num,""String_Node_Str"");
return;
}
}
textEmail=num;
System.out.println(""String_Node_Str"" + textEmail);
emailList=null;
}","/** 
 * <HTML>Sets   {@link #textEmail} to the specified email address. If no [AT] symbol is in {@link num},  {@link carrier} is used to add the correct carrier email ending to the number. If an invalidcarrier is specified, the method defaults to AT&T.<br> Note that this sets  {@link #emailList} to null.</HTML>
 * @param num
 * @param carrier
 */
public static void setCellNum(String num,String carrier){
  if (num == null) {
    textEmail=null;
    return;
  }
 else   if (num.length() == 0) {
    textEmail=null;
    return;
  }
  if (!num.contains(""String_Node_Str"")) {
    num+=getCarrierExtension(carrier);
  }
  textEmail=num;
  System.out.println(""String_Node_Str"" + textEmail);
  emailList=null;
}",0.6877828054298643
81135,"/** 
 * <HTML>Sets the current email list to the String specified. This parses every email address by splitting the String by ; (semicolons).<br> Example String: 1234567890[AT]mms.att.net;2345678901[AT]vtext.net;3456789012[AT]carr.ier.com><br> Note that [AT] should be one character. Javadocs are fun.<br> Also note that this sets   {@link #textEmail} to null.</HTML>
 * @param parseList
 */
public static void setCellList(String parseList){
  emailList=new ArrayList<String>();
  try {
    String[] parsed=parseList.split(""String_Node_Str"");
    for (int a=0; a < parsed.length; a++) {
      emailList.add(parsed[a]);
    }
  }
 catch (  Exception e) {
    emailList=null;
    ErrorManagement.showErrorWindow(""String_Node_Str"",""String_Node_Str"" + parseList,e);
  }
  textEmail=null;
}","/** 
 * <HTML>Sets the current email list to the String specified. This parses every email address by splitting the String by ; (semicolons).<br> Example String: 1234567890[AT]mms.att.net;2345678901[AT]vtext.net;3456789012[AT]carr.ier.com><br> Note that [AT] should be one character. Javadocs are fun.<br> Also note that this sets   {@link #textEmail} to null.</HTML>
 * @param parseList      The list of numbers to read through
 * @param defaultCarrier The default carrier to email to, if none is specified
 */
public static void setCellList(String parseList,String defaultCarrier){
  emailList=new ArrayList<>();
  try {
    String[] parsed=parseList.split(""String_Node_Str"");
    for (int a=0; a < parsed.length; a++) {
      parsed[a]=parsed[a].trim();
      if (!parsed[a].contains(""String_Node_Str"")) {
        parsed[a]+=getCarrierExtension(defaultCarrier);
      }
      emailList.add(parsed[a]);
    }
  }
 catch (  Exception e) {
    emailList=null;
    ErrorManagement.showErrorWindow(""String_Node_Str"",""String_Node_Str"" + parseList,e);
  }
  textEmail=null;
}",0.8394396551724138
81136,"private static boolean canExit(){
  if ((PAXChecker.setup == null && PAXChecker.status == null && PAXChecker.tickets == null && PAXChecker.update == null) || fatalError) {
    return true;
  }
  return false;
}","private static boolean canExit(){
  if (errorWindowCount == 0) {
    if (fatalError) {
      return true;
    }
    int validCount=0;
    if (PAXChecker.setup != null) {
      if (!PAXChecker.setup.isVisible()) {
        validCount++;
      }
    }
 else {
      validCount++;
    }
    if (PAXChecker.tickets != null) {
      if (!PAXChecker.tickets.isVisible()) {
        validCount++;
      }
    }
 else {
      validCount++;
    }
    if (PAXChecker.update != null) {
      if (!PAXChecker.update.isVisible()) {
        validCount++;
      }
    }
 else {
      validCount++;
    }
    if (PAXChecker.status != null) {
      if (!PAXChecker.status.isVisible()) {
        validCount++;
      }
    }
 else {
      validCount++;
    }
    if (validCount == 4) {
      return true;
    }
  }
  return false;
}",0.2193927522037218
81137,"/** 
 * Set the updateProgram flag to true. This will start the program updating process. This should only be called by the Update GUI when the main() method is waiti ng for the prompt.
 */
public static void startUpdatingProgram(){
  updateProgram=true;
}","/** 
 * Set the updateProgram flag to true. This will start the program updating process. This should only be called by the Update GUI when the main() method is waiting for the prompt.
 */
public static void startUpdatingProgram(){
  updateProgram=true;
}",0.9980430528375732
81138,"/** 
 * Creates the Tickets window and makes it visible. This should really only be called once, as subsequent calls will rewrite   {@link #status} and lose the object reference to the previouslyopened tickets window.
 */
public static void showTicketsWindow(){
  tickets=new Tickets();
  tickets.setAlwaysOnTop(true);
  try {
    tickets.setIconImage(javax.imageio.ImageIO.read(PAXChecker.class.getResourceAsStream(""String_Node_Str"")));
    tickets.setBackground(Color.RED);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  tickets.setVisible(true);
  tickets.toFront();
  tickets.requestFocus();
}","/** 
 * Creates the Tickets window and makes it visible. This should really only be called once, as subsequent calls will rewrite   {@link #tickets} and lose the object reference to the previouslyopened tickets window.
 */
public static void showTicketsWindow(){
  tickets=new Tickets();
  tickets.setAlwaysOnTop(true);
  try {
    tickets.setIconImage(javax.imageio.ImageIO.read(PAXChecker.class.getResourceAsStream(""String_Node_Str"")));
    tickets.setBackground(Color.RED);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  tickets.setVisible(true);
  tickets.toFront();
  tickets.requestFocus();
}",0.991583779648049
81139,"/** 
 * Downloads the latest JAR file from the Dropbox server. Note that this automatically closes the program once finished. Also note that once this is run, the program WILL eventually close, either through finishing the update or failing to properly update.
 */
private static void updateProgram(){
  try {
    URLConnection conn=updateURL.openConnection();
    InputStream is=conn.getInputStream();
    long max=conn.getContentLength();
    System.out.println(""String_Node_Str"" + max + ""String_Node_Str"");
    BufferedOutputStream fOut=new BufferedOutputStream(new FileOutputStream(new File(PAXChecker.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath())));
    byte[] buffer=new byte[32 * 1024];
    int bytesRead=0;
    int in=0;
    int prevPercent=0;
    while ((bytesRead=is.read(buffer)) != -1) {
      in+=bytesRead;
      fOut.write(buffer,0,bytesRead);
      if ((int)(((in * 100) / max)) != prevPercent) {
        prevPercent=(int)(((in * 100) / max));
        update.updateProgress(prevPercent);
      }
    }
    fOut.flush();
    fOut.close();
    is.close();
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    ErrorManagement.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    ErrorManagement.fatalError();
  }
}","/** 
 * Downloads the latest JAR file from the Dropbox server. Note that this automatically closes the program once finished. Also note that once this is run, the program WILL eventually close, either through finishing the update or failing to properly update.
 */
private static void updateProgram(){
  try {
    URLConnection conn=updateURL.openConnection();
    InputStream inputStream=conn.getInputStream();
    long remoteFileSize=conn.getContentLength();
    System.out.println(""String_Node_Str"" + remoteFileSize + ""String_Node_Str"");
    String path=PAXChecker.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
    BufferedOutputStream buffOutputStream=new BufferedOutputStream(new FileOutputStream(new File(path.substring(0,path.lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"")));
    byte[] buffer=new byte[32 * 1024];
    int bytesRead=0;
    int in=0;
    int prevPercent=0;
    while ((bytesRead=inputStream.read(buffer)) != -1) {
      in+=bytesRead;
      buffOutputStream.write(buffer,0,bytesRead);
      if ((int)(((in * 100) / remoteFileSize)) != prevPercent) {
        prevPercent=(int)(((in * 100) / remoteFileSize));
        update.updateProgress(prevPercent);
      }
    }
    buffOutputStream.flush();
    buffOutputStream.close();
    inputStream.close();
    update.setStatusLabelText(""String_Node_Str"");
    try {
      File inputFile=new File(path.substring(0,path.lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"");
      InputStream fIn=new BufferedInputStream(new FileInputStream(inputFile));
      File outputFile=new File(path);
      buffOutputStream=new BufferedOutputStream(new FileOutputStream(outputFile));
      buffer=new byte[32 * 1024];
      bytesRead=0;
      in=0;
      while ((bytesRead=fIn.read(buffer)) != -1) {
        in+=bytesRead;
        buffOutputStream.write(buffer,0,bytesRead);
      }
      buffOutputStream.flush();
      buffOutputStream.close();
      fIn.close();
      inputFile.delete();
    }
 catch (    Exception e) {
      ErrorManagement.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
      ErrorManagement.fatalError();
    }
    System.out.println(""String_Node_Str"");
    try {
      ProcessBuilder pb=new ProcessBuilder(System.getProperty(""String_Node_Str"") + ""String_Node_Str"",""String_Node_Str"",new File(path).getAbsolutePath());
      Process p=pb.start();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
    ErrorManagement.showErrorWindow(""String_Node_Str"",""String_Node_Str"",e);
    ErrorManagement.fatalError();
  }
}",0.563
81140,"@PUT @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(ADMIN) public Catalog modify(Catalog catalog){
  Catalog originalCatalog=entityManager.find(Catalog.class,catalog.getId());
  checkNotNull(originalCatalog);
  if (catalog.getRootCategoriesIds() != null) {
    List<Category> newCategories=new ArrayList<>();
    catalog.getRootCategoriesIds().forEach(categoryId -> newCategories.add(entityManager.find(Category.class,categoryId)));
    catalog.setRootCategories(newCategories);
  }
 else {
    catalog.setRootCategories(originalCatalog.getRootCategories());
  }
  return entityManager.merge(catalog);
}","@PUT @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(ADMIN) public Catalog modify(Catalog catalog){
  Catalog originalCatalog=entityManager.find(Catalog.class,catalog.getId());
  checkNotNull(originalCatalog);
  if (catalog.getRootCategoriesIds() != null) {
    List<Category> newCategories=new ArrayList<>();
    catalog.getRootCategoriesIds().forEach(categoryId -> newCategories.add(entityManager.find(Category.class,categoryId)));
    catalog.setRootCategories(newCategories);
  }
 else {
    catalog.setRootCategories(originalCatalog.getRootCategories());
  }
  catalog.setPresentationByLocale(originalCatalog.getPresentationByLocale());
  return entityManager.merge(catalog);
}",0.9430656934306568
81141,"@PUT @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(JeeshopRoles.ADMIN) public Category modify(Category category){
  Category originalCategory=entityManager.find(Category.class,category.getId());
  checkNotNull(originalCategory);
  if (category.getChildCategoriesIds() != null) {
    List<Category> newCategories=new ArrayList<>();
    category.getChildCategoriesIds().forEach(categoryId -> newCategories.add(entityManager.find(Category.class,categoryId)));
    category.setChildCategories(newCategories);
  }
 else {
    category.setChildCategories(originalCategory.getChildCategories());
  }
  if (category.getChildProductsIds() != null) {
    List<Product> newProducts=new ArrayList<>();
    category.getChildProductsIds().forEach(productId -> newProducts.add(entityManager.find(Product.class,productId)));
    category.setChildProducts(newProducts);
  }
 else {
    category.setChildProducts(originalCategory.getChildProducts());
  }
  return entityManager.merge(category);
}","@PUT @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(JeeshopRoles.ADMIN) public Category modify(Category category){
  Category originalCategory=entityManager.find(Category.class,category.getId());
  checkNotNull(originalCategory);
  if (category.getChildCategoriesIds() != null) {
    List<Category> newCategories=new ArrayList<>();
    category.getChildCategoriesIds().forEach(categoryId -> newCategories.add(entityManager.find(Category.class,categoryId)));
    category.setChildCategories(newCategories);
  }
 else {
    category.setChildCategories(originalCategory.getChildCategories());
  }
  if (category.getChildProductsIds() != null) {
    List<Product> newProducts=new ArrayList<>();
    category.getChildProductsIds().forEach(productId -> newProducts.add(entityManager.find(Product.class,productId)));
    category.setChildProducts(newProducts);
  }
 else {
    category.setChildProducts(originalCategory.getChildProducts());
  }
  category.setPresentationByLocale(originalCategory.getPresentationByLocale());
  return entityManager.merge(category);
}",0.9623352165725048
81142,"@PUT @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(JeeshopRoles.ADMIN) public Product modify(Product product){
  Product originalProduct=entityManager.find(Product.class,product.getId());
  checkNotNull(originalProduct);
  if (product.getChildSKUsIds() != null) {
    List<SKU> newSkus=new ArrayList<>();
    product.getChildSKUsIds().forEach(skuId -> newSkus.add(entityManager.find(SKU.class,skuId)));
    product.setChildSKUs(newSkus);
  }
 else {
    product.setChildSKUs(originalProduct.getChildSKUs());
  }
  if (product.getDiscountsIds() != null) {
    List<Discount> newDiscounts=new ArrayList<>();
    product.getDiscountsIds().forEach(discountId -> newDiscounts.add(entityManager.find(Discount.class,discountId)));
    product.setDiscounts(newDiscounts);
  }
 else {
    product.setDiscounts(originalProduct.getDiscounts());
  }
  return entityManager.merge(product);
}","@PUT @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(JeeshopRoles.ADMIN) public Product modify(Product product){
  Product originalProduct=entityManager.find(Product.class,product.getId());
  checkNotNull(originalProduct);
  if (product.getChildSKUsIds() != null) {
    List<SKU> newSkus=new ArrayList<>();
    product.getChildSKUsIds().forEach(skuId -> newSkus.add(entityManager.find(SKU.class,skuId)));
    product.setChildSKUs(newSkus);
  }
 else {
    product.setChildSKUs(originalProduct.getChildSKUs());
  }
  if (product.getDiscountsIds() != null) {
    List<Discount> newDiscounts=new ArrayList<>();
    product.getDiscountsIds().forEach(discountId -> newDiscounts.add(entityManager.find(Discount.class,discountId)));
    product.setDiscounts(newDiscounts);
  }
 else {
    product.setDiscounts(originalProduct.getDiscounts());
  }
  product.setPresentationByLocale(originalProduct.getPresentationByLocale());
  return entityManager.merge(product);
}",0.959417273673257
81143,"@PUT @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(JeeshopRoles.ADMIN) public SKU modify(SKU sku){
  SKU originalSKU=entityManager.find(SKU.class,sku.getId());
  checkNotNull(originalSKU);
  if (sku.getDiscountsIds() != null) {
    List<Discount> newDiscounts=new ArrayList<>();
    sku.getDiscountsIds().forEach(discountId -> newDiscounts.add(entityManager.find(Discount.class,discountId)));
    sku.setDiscounts(newDiscounts);
  }
 else {
    sku.setDiscounts(originalSKU.getDiscounts());
  }
  return entityManager.merge(sku);
}","@PUT @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(JeeshopRoles.ADMIN) public SKU modify(SKU sku){
  SKU originalSKU=entityManager.find(SKU.class,sku.getId());
  checkNotNull(originalSKU);
  if (sku.getDiscountsIds() != null) {
    List<Discount> newDiscounts=new ArrayList<>();
    sku.getDiscountsIds().forEach(discountId -> newDiscounts.add(entityManager.find(Discount.class,discountId)));
    sku.setDiscounts(newDiscounts);
  }
 else {
    sku.setDiscounts(originalSKU.getDiscounts());
  }
  sku.setPresentationByLocale(originalSKU.getPresentationByLocale());
  return entityManager.merge(sku);
}",0.9426229508196722
81144,"@PUT @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(""String_Node_Str"") @PermitAll public void activate(@NotNull @PathParam(""String_Node_Str"") String userLogin,@NotNull UUID token){
  User user=userFinder.findByLogin(userLogin);
  if (user != null && user.getActionToken().equals(token)) {
    user.setActivated(true);
    user.setActionToken(null);
  }
 else {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
}","@PUT @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(""String_Node_Str"") @PermitAll public void activate(@NotNull @PathParam(""String_Node_Str"") String userLogin,@NotNull String token){
  User user=userFinder.findByLogin(userLogin);
  if (user != null && user.getActionToken() != null && user.getActionToken().equals(UUID.fromString(token))) {
    user.setActivated(true);
    user.setActionToken(null);
  }
 else {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
}",0.7322515212981744
81145,"@Test public void activate_shouldThrowNotFoundExWhenUserIsNotFound() throws Exception {
  ;
  try {
    service.activate(""String_Node_Str"",UUID.randomUUID());
    fail(""String_Node_Str"");
  }
 catch (  WebApplicationException e) {
    assertThat(e.getResponse().getStatus()).isEqualTo(Response.Status.NOT_FOUND.getStatusCode());
  }
}","@Test public void activate_shouldThrowNotFoundExWhenUserIsNotFound() throws Exception {
  ;
  try {
    service.activate(""String_Node_Str"",UUID.randomUUID().toString());
    fail(""String_Node_Str"");
  }
 catch (  WebApplicationException e) {
    assertThat(e.getResponse().getStatus()).isEqualTo(Response.Status.NOT_FOUND.getStatusCode());
  }
}",0.98379970544919
81146,"@Test public void activate_shouldActivateUserAndClearActionToken() throws Exception {
  User user=new User(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Date(),""String_Node_Str"",null);
  user.setGender(""String_Node_Str"");
  final UUID actionToken=UUID.randomUUID();
  user.setActionToken(actionToken);
  user.setActivated(false);
  entityManager.getTransaction().begin();
  entityManager.persist(user);
  entityManager.getTransaction().commit();
  service.activate(user.getLogin(),actionToken);
  final User modifiedUser=entityManager.find(User.class,user.getId());
  assertThat(modifiedUser).isNotNull();
  assertThat(modifiedUser.getActivated()).isTrue();
  assertThat(modifiedUser.getActionToken()).isNull();
  entityManager.remove(user);
}","@Test public void activate_shouldActivateUserAndClearActionToken() throws Exception {
  User user=new User(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Date(),""String_Node_Str"",null);
  user.setGender(""String_Node_Str"");
  final UUID actionToken=UUID.randomUUID();
  user.setActionToken(actionToken);
  user.setActivated(false);
  entityManager.getTransaction().begin();
  entityManager.persist(user);
  entityManager.getTransaction().commit();
  service.activate(user.getLogin(),actionToken.toString());
  final User modifiedUser=entityManager.find(User.class,user.getId());
  assertThat(modifiedUser).isNotNull();
  assertThat(modifiedUser.getActivated()).isTrue();
  assertThat(modifiedUser.getActionToken()).isNull();
  entityManager.remove(user);
}",0.993137866500312
81147,"public void sendMail(String subject,String to,String content) throws MessagingException {
  Properties props=new Properties();
  props.put(""String_Node_Str"",host);
  props.put(""String_Node_Str"",port);
  props.put(""String_Node_Str"",port);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",connectTimeout);
  props.put(""String_Node_Str"",readTimeout);
  Authenticator authenticator=null;
  if (StringUtils.isNotEmpty(user)) {
    props.put(""String_Node_Str"",""String_Node_Str"");
    authenticator=new Authenticator(){
      private PasswordAuthentication pa=new PasswordAuthentication(user,password);
      @Override public PasswordAuthentication getPasswordAuthentication(){
        return pa;
      }
    }
;
  }
  Session session=Session.getInstance(props,authenticator);
  session.setDebug(Boolean.parseBoolean(debug));
  MimeMessage message=new MimeMessage(session);
  message.setFrom(new InternetAddress(sender));
  InternetAddress[] address={new InternetAddress(to)};
  message.setRecipients(Message.RecipientType.TO,address);
  message.setSubject(subject);
  message.setSentDate(new Date());
  Multipart multipart=new MimeMultipart(""String_Node_Str"");
  MimeBodyPart htmlPart=new MimeBodyPart();
  htmlPart.setContent(content,""String_Node_Str"");
  multipart.addBodyPart(htmlPart);
  message.setContent(multipart);
  Transport.send(message);
}","public void sendMail(String subject,String to,String content) throws MessagingException {
  Properties props=new Properties();
  props.put(""String_Node_Str"",host);
  props.put(""String_Node_Str"",port);
  props.put(""String_Node_Str"",port);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",connectTimeout);
  props.put(""String_Node_Str"",readTimeout);
  Authenticator authenticator=null;
  if (StringUtils.isNotEmpty(user)) {
    props.put(""String_Node_Str"",""String_Node_Str"");
    authenticator=new Authenticator(){
      private PasswordAuthentication pa=new PasswordAuthentication(user,password);
      @Override public PasswordAuthentication getPasswordAuthentication(){
        return pa;
      }
    }
;
  }
  Session session=Session.getInstance(props,authenticator);
  session.setDebug(Boolean.parseBoolean(debug));
  MimeMessage message=new MimeMessage(session);
  message.setFrom(new InternetAddress(sender));
  InternetAddress[] address={new InternetAddress(to)};
  message.setRecipients(Message.RecipientType.TO,address);
  message.setSubject(subject,""String_Node_Str"");
  message.setSentDate(new Date());
  Multipart multipart=new MimeMultipart(""String_Node_Str"");
  MimeBodyPart htmlPart=new MimeBodyPart();
  htmlPart.setContent(content,""String_Node_Str"");
  multipart.addBodyPart(htmlPart);
  message.setContent(multipart);
  Transport.send(message);
}",0.9935018050541516
81148,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public List<Category> findCategories(@PathParam(""String_Node_Str"") Long catalogId){
  Catalog catalog=entityManager.find(Catalog.class,catalogId);
  if (catalog == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  return new JPAQuery(entityManager).from(category).where(category.disabled.isFalse(),category.endDate.after(new Date()),category.in(catalog.getRootCategories())).list(category);
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public List<Category> findCategories(@PathParam(""String_Node_Str"") Long catalogId){
  Catalog catalog=entityManager.find(Catalog.class,catalogId);
  if (catalog == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  if (catalog.getRootCategories().isEmpty()) {
    return null;
  }
  return new JPAQuery(entityManager).from(category).where(category.disabled.isFalse(),category.endDate.after(new Date()),category.in(catalog.getRootCategories())).list(category);
}",0.9351145038167938
81149,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public List<Category> findCategories(@PathParam(""String_Node_Str"") @NotNull Long categoryId){
  Category cat=entityManager.find(Category.class,categoryId);
  if (cat == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  return new JPAQuery(entityManager).from(category).where(category.disabled.isFalse(),category.endDate.after(new Date()),category.in(cat.getChildCategories())).list(category);
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public List<Category> findCategories(@PathParam(""String_Node_Str"") @NotNull Long categoryId){
  Category cat=entityManager.find(Category.class,categoryId);
  if (cat == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  if (cat.getChildCategories().isEmpty()) {
    return null;
  }
  return new JPAQuery(entityManager).from(category).where(category.disabled.isFalse(),category.endDate.after(new Date()),category.in(cat.getChildCategories())).list(category);
}",0.9380362249761678
81150,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public List<Product> findProducts(@PathParam(""String_Node_Str"") @NotNull Long categoryId){
  Category cat=entityManager.find(Category.class,categoryId);
  if (cat == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  return new JPAQuery(entityManager).from(product).where(product.disabled.isFalse(),product.endDate.after(new Date()),product.in(cat.getChildProducts())).list(product);
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public List<Product> findProducts(@PathParam(""String_Node_Str"") @NotNull Long categoryId){
  Category cat=entityManager.find(Category.class,categoryId);
  if (cat == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  if (cat.getChildProducts().isEmpty()) {
    return null;
  }
  return new JPAQuery(entityManager).from(product).where(product.disabled.isFalse(),product.endDate.after(new Date()),product.in(cat.getChildProducts())).list(product);
}",0.9386562804284324
81151,"@Override public void remove(int n){
  for (int i=0; i < n; i++) {
    tasks.remove();
    if (listener != null) {
      listener.onRemove(this);
    }
  }
}","@Override public void remove(int n){
  for (int i=0; i < n; i++) {
    removeFromQueue();
    if (listener != null) {
      listener.onRemove(this);
    }
  }
}",0.9526813880126184
81152,"private void callPersistSuccess(T batch){
  if (!isWaitingToFinish) {
    isWaitingToFinish=true;
    if (listener != null) {
      listener.onPersistSuccess(batch);
    }
  }
}","private void callPersistSuccess(T batch){
  if (listener != null) {
    listener.onPersistSuccess(batch);
  }
}",0.7708333333333334
81153,"private void checkPendingAndContinue(){
  initializeIfRequired();
  if (queueFile.size() > 0) {
    try {
      peekedBatch=(queueFile.size() == cachedQueue.size()) ? cachedQueue.peek() : queueFile.peek();
      if (peekedBatch != null) {
        callPersistSuccess(peekedBatch);
      }
    }
 catch (    IOException e) {
      if (log.isErrorEnabled()) {
        log.error(e.getLocalizedMessage());
      }
    }
  }
 else {
    callQueueEnd();
  }
}","private void checkPendingAndContinue(){
  initializeIfRequired();
  if (queueFile.size() > 0) {
    try {
      if (!isWaitingToFinish) {
        peekedBatch=(queueFile.size() == cachedQueue.size()) ? cachedQueue.peek() : queueFile.peek();
        if (peekedBatch != null) {
          isWaitingToFinish=true;
          callPersistSuccess(peekedBatch);
        }
      }
    }
 catch (    IOException e) {
      if (log.isErrorEnabled()) {
        log.error(e.getLocalizedMessage());
      }
    }
  }
 else {
    callQueueEnd();
  }
}",0.9168356997971604
81154,"private void trimQueue(){
  int oldSize=getSize();
  if (oldSize >= maxQueueSize && remove(trimSize)) {
    remove(trimSize);
    callTrimListener(oldSize,getSize());
  }
}","private void trimQueue(){
  int oldSize=getSize();
  if (oldSize >= maxQueueSize && remove(trimSize)) {
    callTrimListener(oldSize,getSize());
  }
}",0.9316770186335404
81155,"private void checkPendingAndContinue(){
  initializeIfRequired();
  if (!queueFile.isEmpty()) {
    try {
      byte[] eldest=queueFile.peek();
      if (eldest != null) {
        T batch=serializationStrategy.deserializeBatch(eldest);
        callPersistSuccess(batch);
      }
    }
 catch (    IOException|DeserializeException e) {
      if (log.isErrorEnabled()) {
        log.error(e.getLocalizedMessage());
      }
    }
  }
 else {
    callQueueEnd();
  }
}","private void checkPendingAndContinue(){
  initializeIfRequired();
  if (!queueFile.isEmpty()) {
    try {
      byte[] eldest=queueFile.peek();
      if (eldest != null) {
        peekedBatch=serializationStrategy.deserializeBatch(eldest);
        callPersistSuccess(peekedBatch);
      }
    }
 catch (    IOException|DeserializeException e) {
      if (log.isErrorEnabled()) {
        log.error(e.getLocalizedMessage());
      }
    }
  }
 else {
    callQueueEnd();
  }
}",0.9808102345415778
81156,"@Override public void run(){
  try {
    byte[] peeked=queueFile.peek();
    if (peeked != null) {
      T peekedBatch=serializationStrategy.deserializeBatch(peeked);
      if (batch != null && batch.equals(peekedBatch)) {
        queueFile.remove();
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + peekedBatch + ""String_Node_Str""+ batch);
      }
    }
  }
 catch (  DeserializeException e) {
    if (log.isErrorEnabled()) {
      log.error(e.getLocalizedMessage());
    }
    throw new IllegalStateException(""String_Node_Str"" + e.getRealException().getLocalizedMessage());
  }
catch (  IOException e) {
    if (log.isErrorEnabled()) {
      log.error(e.getLocalizedMessage());
    }
    throw new IllegalStateException(""String_Node_Str"" + e.getLocalizedMessage());
  }
  isWaitingToFinish=false;
  checkPendingAndContinue();
}","@Override public void run(){
  if (!queueFile.isEmpty()) {
    try {
      if (peekedBatch != null) {
        if (batch != null && batch.equals(peekedBatch)) {
          queueFile.remove();
        }
 else {
          if (log.isErrorEnabled()) {
            log.error(""String_Node_Str"" + peekedBatch + ""String_Node_Str""+ batch);
          }
        }
      }
    }
 catch (    IOException e) {
      if (log.isErrorEnabled()) {
        log.error(e.getLocalizedMessage());
      }
      throw new IllegalStateException(""String_Node_Str"" + e.getLocalizedMessage());
    }
    peekedBatch=null;
    isWaitingToFinish=false;
    checkPendingAndContinue();
  }
 else {
    peekedBatch=null;
  }
}",0.5804783451842276
81157,"public void finish(final T batch){
  if (!queueFile.isEmpty()) {
    handler.post(new Runnable(){
      @Override public void run(){
        try {
          byte[] peeked=queueFile.peek();
          if (peeked != null) {
            T peekedBatch=serializationStrategy.deserializeBatch(peeked);
            if (batch != null && batch.equals(peekedBatch)) {
              queueFile.remove();
            }
 else {
              throw new IllegalStateException(""String_Node_Str"" + peekedBatch + ""String_Node_Str""+ batch);
            }
          }
        }
 catch (        DeserializeException e) {
          if (log.isErrorEnabled()) {
            log.error(e.getLocalizedMessage());
          }
          throw new IllegalStateException(""String_Node_Str"" + e.getRealException().getLocalizedMessage());
        }
catch (        IOException e) {
          if (log.isErrorEnabled()) {
            log.error(e.getLocalizedMessage());
          }
          throw new IllegalStateException(""String_Node_Str"" + e.getLocalizedMessage());
        }
        isWaitingToFinish=false;
        checkPendingAndContinue();
      }
    }
);
  }
}","public void finish(final T batch){
  handler.post(new Runnable(){
    @Override public void run(){
      if (!queueFile.isEmpty()) {
        try {
          if (peekedBatch != null) {
            if (batch != null && batch.equals(peekedBatch)) {
              queueFile.remove();
            }
 else {
              if (log.isErrorEnabled()) {
                log.error(""String_Node_Str"" + peekedBatch + ""String_Node_Str""+ batch);
              }
            }
          }
        }
 catch (        IOException e) {
          if (log.isErrorEnabled()) {
            log.error(e.getLocalizedMessage());
          }
          throw new IllegalStateException(""String_Node_Str"" + e.getLocalizedMessage());
        }
        peekedBatch=null;
        isWaitingToFinish=false;
        checkPendingAndContinue();
      }
 else {
        peekedBatch=null;
      }
    }
  }
);
}",0.6406796601699151
81158,"public <R>TypeAdapter<R> create(Gson gson,TypeToken<R> type){
  if (type.getRawType() != baseType) {
    return null;
  }
  final Map<String,TypeAdapter<?>> labelToDelegate=new LinkedHashMap<String,TypeAdapter<?>>();
  final Map<Class<?>,TypeAdapter<?>> subtypeToDelegate=new LinkedHashMap<Class<?>,TypeAdapter<?>>();
  for (  Map.Entry<String,Class<?>> entry : labelToSubtype.entrySet()) {
    TypeAdapter<?> delegate=gson.getDelegateAdapter(this,TypeToken.get(entry.getValue()));
    labelToDelegate.put(entry.getKey(),delegate);
    subtypeToDelegate.put(entry.getValue(),delegate);
  }
  return new TypeAdapter<R>(){
    @Override public R read(    JsonReader in) throws IOException {
      JsonElement jsonElement=Streams.parse(in);
      JsonElement labelJsonElement=jsonElement.getAsJsonObject().remove(typeFieldName);
      if (labelJsonElement == null) {
        throw new JsonParseException(""String_Node_Str"" + baseType + ""String_Node_Str""+ typeFieldName);
      }
      String label=labelJsonElement.getAsString();
      @SuppressWarnings(""String_Node_Str"") TypeAdapter<R> delegate=(TypeAdapter<R>)labelToDelegate.get(label);
      if (delegate == null) {
        throw new JsonParseException(""String_Node_Str"" + baseType + ""String_Node_Str""+ label+ ""String_Node_Str"");
      }
      return delegate.fromJsonTree(jsonElement);
    }
    @Override public void write(    JsonWriter out,    R value) throws IOException {
      Class<?> srcType=value.getClass();
      String label=subtypeToLabel.get(srcType);
      @SuppressWarnings(""String_Node_Str"") TypeAdapter<R> delegate=(TypeAdapter<R>)subtypeToDelegate.get(srcType);
      if (delegate == null) {
        throw new JsonParseException(""String_Node_Str"" + srcType.getName() + ""String_Node_Str"");
      }
      JsonObject jsonObject=delegate.toJsonTree(value).getAsJsonObject();
      if (jsonObject.has(typeFieldName)) {
        throw new JsonParseException(""String_Node_Str"" + srcType.getName() + ""String_Node_Str""+ typeFieldName);
      }
      JsonObject clone=new JsonObject();
      clone.add(typeFieldName,new JsonPrimitive(label));
      for (      Map.Entry<String,JsonElement> e : jsonObject.entrySet()) {
        clone.add(e.getKey(),e.getValue());
      }
      Streams.write(clone,out);
    }
  }
;
}","public <R>TypeAdapter<R> create(Gson gson,TypeToken<R> type){
  if (type.getRawType() != baseType) {
    return null;
  }
  final Map<String,TypeAdapter<?>> labelToDelegate=new LinkedHashMap<String,TypeAdapter<?>>();
  final Map<Class<?>,TypeAdapter<?>> subtypeToDelegate=new LinkedHashMap<Class<?>,TypeAdapter<?>>();
  for (  Map.Entry<String,Class<?>> entry : labelToSubtype.entrySet()) {
    TypeAdapter<?> delegate=gson.getDelegateAdapter(this,TypeToken.get(entry.getValue()));
    labelToDelegate.put(entry.getKey(),delegate);
    subtypeToDelegate.put(entry.getValue(),delegate);
  }
  return new TypeAdapter<R>(){
    @Override public R read(    JsonReader in) throws IOException {
      JsonElement jsonElement=Streams.parse(in);
      JsonElement labelJsonElement=jsonElement.getAsJsonObject().remove(typeFieldName);
      if (labelJsonElement == null) {
        throw new JsonParseException(""String_Node_Str"" + baseType + ""String_Node_Str""+ typeFieldName);
      }
      String label=labelJsonElement.getAsString();
      @SuppressWarnings(""String_Node_Str"") TypeAdapter<R> delegate=(TypeAdapter<R>)labelToDelegate.get(label);
      if (delegate == null) {
        throw new JsonParseException(""String_Node_Str"" + baseType + ""String_Node_Str""+ label+ ""String_Node_Str"");
      }
      return delegate.fromJsonTree(jsonElement);
    }
    @Override public void write(    JsonWriter out,    R value) throws IOException {
      Class<?> srcType=value.getClass();
      String label=subtypeToLabel.get(srcType);
      @SuppressWarnings(""String_Node_Str"") TypeAdapter<R> delegate=(TypeAdapter<R>)subtypeToDelegate.get(srcType);
      if (delegate == null) {
        throw new JsonParseException(""String_Node_Str"" + srcType.getName() + ""String_Node_Str"");
      }
      JsonObject jsonObject=delegate.toJsonTree(value).getAsJsonObject();
      if (jsonObject.has(typeFieldName)) {
        throw new JsonParseException(""String_Node_Str"" + srcType.getName() + ""String_Node_Str""+ typeFieldName);
      }
      JsonObject clone=new JsonObject();
      clone.add(typeFieldName,new JsonPrimitive(label));
      for (      Map.Entry<String,JsonElement> e : jsonObject.entrySet()) {
        clone.add(e.getKey(),e.getValue());
      }
      Streams.write(clone,out);
    }
  }
.nullSafe();
}",0.9975893052816128
81159,"@Override public void onInitialized(){
  if (!isInitialized()) {
    try {
      File file=new File(filePath);
      this.queueFile=new QueueFile(file);
    }
 catch (    IOException e) {
      if (log.isErrorEnabled()) {
        log.error(e.getLocalizedMessage());
      }
    }
    syncData();
  }
  super.onInitialized();
}","@Override public void onInitialized(){
  if (!isInitialized()) {
    try {
      File file=new File(filePath);
      this.queueFile=new TapeQueueFile(file);
    }
 catch (    IOException e) {
      this.queueFile=new InMemoryQueueFile();
      if (log.isErrorEnabled()) {
        log.error(e.getLocalizedMessage());
      }
    }
    syncData();
  }
  super.onInitialized();
}",0.9287749287749288
81160,"public QueueFile getQueueFile(){
  return queueFile;
}","public IQueueFile getQueueFile(){
  return queueFile;
}",0.9908256880733946
81161,"public static JsonElement forJSONGenericObject(Object value,JsonSerializationContext context){
  JsonElement element;
  if (null != value) {
    if (value instanceof JSONObject) {
      element=context.serialize(value,JSONObject.class);
    }
 else     if (value instanceof JSONArray) {
      element=context.serialize(value,JSONArray.class);
    }
 else {
      element=context.serialize(value);
    }
  }
 else {
    element=context.serialize(value);
  }
  return element;
}","public static JsonElement forJSONGenericObject(Object value,JsonSerializationContext context){
  JsonElement element;
  if (null != value) {
    if (value instanceof JSONObject) {
      element=context.serialize(value,JSONObject.class);
    }
 else     if (value instanceof JSONArray) {
      element=context.serialize(value,JSONArray.class);
    }
 else     if (value instanceof String) {
      element=context.serialize(value,String.class);
    }
 else     if (value instanceof Number) {
      element=context.serialize(value,Number.class);
    }
 else     if (value instanceof Boolean) {
      element=context.serialize(value,Boolean.class);
    }
 else {
      element=context.serialize(value);
    }
  }
 else {
    element=context.serialize(value);
  }
  return element;
}",0.6842105263157895
81162,"private void makeNetworkRequest(final T batch,boolean isRetry){
  if (isConnectedToNetwork()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",batch);
    }
    if (!isRetry) {
      resetRetryCounters();
    }
    waitingForCallback=true;
    networkBatchListener.performNetworkRequest(batch,new ValueCallback<NetworkRequestResponse>(){
      @Override public void onReceiveValue(      NetworkRequestResponse value){
        waitingForCallback=false;
        if (!value.complete || (value.httpErrorCode >= HTTP_SERVER_ERROR_CODE_RANGE_START && value.httpErrorCode <= HTTP_SERVER_ERROR_CODE_RANGE_END)) {
          retryCount++;
          if (retryCount < maxRetryCount) {
            int backOff=exponentialBackOff();
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"",value.complete,value.httpErrorCode,batch,backOff);
            }
            handler.postDelayed(new Runnable(){
              @Override public void run(){
                makeNetworkRequest(batch,true);
              }
            }
,backOff);
          }
 else {
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"",getQueueFile());
            }
            retryLimitReached=true;
          }
        }
 else {
          finish(batch);
        }
      }
    }
);
  }
 else {
    resetRetryCounters();
    waitingForCallback=false;
  }
}","private void makeNetworkRequest(final T batch,boolean isRetry){
  if (isConnectedToNetwork()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",batch,this);
    }
    if (!isRetry) {
      resetRetryCounters();
    }
    waitingForCallback=true;
    networkBatchListener.performNetworkRequest(batch,new ValueCallback<NetworkRequestResponse>(){
      @Override public void onReceiveValue(      final NetworkRequestResponse value){
        handler.post(new Runnable(){
          @Override public void run(){
            waitingForCallback=false;
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"",this);
            }
            if (!value.complete || (value.httpErrorCode >= HTTP_SERVER_ERROR_CODE_RANGE_START && value.httpErrorCode <= HTTP_SERVER_ERROR_CODE_RANGE_END)) {
              retryCount++;
              if (retryCount < maxRetryCount) {
                int backOff=exponentialBackOff();
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"",value.complete,value.httpErrorCode,batch,backOff);
                }
                handler.postDelayed(new Runnable(){
                  @Override public void run(){
                    makeNetworkRequest(batch,true);
                  }
                }
,backOff);
              }
 else {
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"",getQueueFile());
                }
                needsResumeOnReady=true;
              }
            }
 else {
              finish(batch);
            }
          }
        }
);
      }
    }
);
  }
 else {
    resetRetryCounters();
    waitingForCallback=false;
    needsResumeOnReady=true;
  }
}",0.8550305368048859
81163,"@Override public void run(){
  makeNetworkRequest(lastBatch,false);
}","@Override public void run(){
  if (!waitingForCallback && isConnectedToNetwork() && lastBatch != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",waitingForCallback,isConnectedToNetwork(),lastBatch);
    }
    makeNetworkRequest(lastBatch,false);
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",waitingForCallback,isConnectedToNetwork(),lastBatch);
    }
  }
}",0.2851239669421487
81164,"private void resume(){
  if (!waitingForCallback && isConnectedToNetwork() && lastBatch != null) {
    handler.post(new Runnable(){
      @Override public void run(){
        makeNetworkRequest(lastBatch,false);
      }
    }
);
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",waitingForCallback,isConnectedToNetwork(),lastBatch);
    }
  }
}","private void resume(){
  handler.post(new Runnable(){
    @Override public void run(){
      if (!waitingForCallback && isConnectedToNetwork() && lastBatch != null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"",waitingForCallback,isConnectedToNetwork(),lastBatch);
        }
        makeNetworkRequest(lastBatch,false);
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"",waitingForCallback,isConnectedToNetwork(),lastBatch);
        }
      }
    }
  }
);
}",0.5077951002227171
81165,"private void registerReceiverIfRequired(){
  if (!receiverRegistered) {
    IntentFilter filter=new IntentFilter();
    filter.addAction(Context.CONNECTIVITY_SERVICE);
    context.registerReceiver(networkBroadcastReceiver,filter);
    receiverRegistered=true;
  }
}","private void registerReceiverIfRequired(){
  if (!receiverRegistered) {
    IntentFilter filter=new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
    context.registerReceiver(networkBroadcastReceiver,filter);
    receiverRegistered=true;
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",this);
    }
  }
}",0.7751677852348994
81166,"@Override public void onReceive(Context context,Intent intent){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  resume();
}","@Override public void onReceive(Context context,Intent intent){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",NetworkPersistedBatchReadyListener.this);
  }
  resume();
}",0.8787878787878788
81167,"@Override public void onReceiveValue(NetworkRequestResponse value){
  waitingForCallback=false;
  if (!value.complete || (value.httpErrorCode >= HTTP_SERVER_ERROR_CODE_RANGE_START && value.httpErrorCode <= HTTP_SERVER_ERROR_CODE_RANGE_END)) {
    retryCount++;
    if (retryCount < maxRetryCount) {
      int backOff=exponentialBackOff();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"",value.complete,value.httpErrorCode,batch,backOff);
      }
      handler.postDelayed(new Runnable(){
        @Override public void run(){
          makeNetworkRequest(batch,true);
        }
      }
,backOff);
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"",getQueueFile());
      }
      retryLimitReached=true;
    }
  }
 else {
    finish(batch);
  }
}","@Override public void onReceiveValue(final NetworkRequestResponse value){
  handler.post(new Runnable(){
    @Override public void run(){
      waitingForCallback=false;
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"",this);
      }
      if (!value.complete || (value.httpErrorCode >= HTTP_SERVER_ERROR_CODE_RANGE_START && value.httpErrorCode <= HTTP_SERVER_ERROR_CODE_RANGE_END)) {
        retryCount++;
        if (retryCount < maxRetryCount) {
          int backOff=exponentialBackOff();
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"",value.complete,value.httpErrorCode,batch,backOff);
          }
          handler.postDelayed(new Runnable(){
            @Override public void run(){
              makeNetworkRequest(batch,true);
            }
          }
,backOff);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"",getQueueFile());
          }
          needsResumeOnReady=true;
        }
      }
 else {
        finish(batch);
      }
    }
  }
);
}",0.7784366576819407
81168,"private void unregisterReceiver(){
  if (receiverRegistered) {
    context.unregisterReceiver(networkBroadcastReceiver);
    receiverRegistered=false;
  }
}","private void unregisterReceiver(){
  if (receiverRegistered) {
    context.unregisterReceiver(networkBroadcastReceiver);
    receiverRegistered=false;
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",this);
    }
  }
}",0.7979539641943734
81169,"@Override public void onPersistSuccess(final T batch){
  lastBatch=batch;
  registerReceiverIfRequired();
  handler.post(new Runnable(){
    @Override public void run(){
      makeNetworkRequest(batch,false);
    }
  }
);
}","@Override public void onPersistSuccess(final T batch){
  lastBatch=batch;
  registerReceiverIfRequired();
  resume();
}",0.6842105263157895
81170,"@Override public void onReady(BatchingStrategy<E,T> causingStrategy,T batch){
  super.onReady(causingStrategy,batch);
  if (retryLimitReached) {
    retryLimitReached=false;
    resume();
  }
}","@Override public void onReady(BatchingStrategy<E,T> causingStrategy,T batch){
  super.onReady(causingStrategy,batch);
  if (needsResumeOnReady) {
    needsResumeOnReady=false;
    resume();
  }
}",0.8814432989690721
81171,"@Override public void add(Collection<E> dataCollection){
  super.add(dataCollection);
  for (  E data : dataCollection) {
    try {
      queueFile.add(serializationStrategy.serializeData(data));
    }
 catch (    IOException|SerializeException e) {
      if (log.isErrorEnabled()) {
        log.error(e.getLocalizedMessage());
      }
    }
  }
}","@Override public boolean add(Collection<E> dataCollection){
  boolean isAdded=false;
  Collection<E> oldData=getData();
  for (  E data : dataCollection) {
    try {
      if (!oldData.contains(data)) {
        isAdded=true;
        queueFile.add(serializationStrategy.serializeData(data));
      }
    }
 catch (    IOException|SerializeException e) {
      if (log.isErrorEnabled()) {
        log.error(e.getLocalizedMessage());
      }
    }
  }
  super.add(dataCollection);
  return isAdded;
}",0.7772511848341233
81172,"/** 
 * Method to send fake BroadcastReceiver for network change
 * @param context
 */
private void sendFakeNetworkBroadcast(Context context){
  Intent intent=new Intent();
  intent.setAction(Context.CONNECTIVITY_SERVICE);
  context.sendBroadcast(intent);
}","/** 
 * Method to send fake BroadcastReceiver for network change
 * @param context
 */
private void sendFakeNetworkBroadcast(Context context){
  Intent intent=new Intent();
  intent.setAction(ConnectivityManager.CONNECTIVITY_ACTION);
  context.sendBroadcast(intent);
}",0.9371428571428572
81173,"private void initializeIfRequired(){
  if (!initialized) {
    initialized=true;
    try {
      this.queueFile=new QueueFile(file);
      onInitialized(queueFile);
    }
 catch (    IOException e) {
      if (log.isErrorEnabled()) {
        log.error(e.getLocalizedMessage());
      }
    }
  }
}","private void initializeIfRequired(){
  if (!isInitialized()) {
    try {
      this.queueFile=new QueueFile(file);
      onInitialized(queueFile);
    }
 catch (    IOException e) {
      if (log.isErrorEnabled()) {
        log.error(e.getLocalizedMessage());
      }
    }
  }
}",0.9097222222222222
81174,"public boolean isInitialized(){
  return initialized;
}","public boolean isInitialized(){
  return queueFile != null;
}",0.8103448275862069
81175,"@Override public void run(){
  try {
    byte[] peeked=queueFile.peek();
    if (peeked != null) {
      T peekedBatch=serializationStrategy.deserializeBatch(peeked);
      if (batch != null && batch.equals(peekedBatch)) {
        queueFile.remove();
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + peekedBatch + ""String_Node_Str""+ batch);
      }
    }
  }
 catch (  IOException|DeserializeException e) {
    if (log.isErrorEnabled()) {
      log.error(e.getLocalizedMessage());
    }
  }
  isWaitingToFinish=false;
  checkPendingAndContinue();
}","@Override public void run(){
  try {
    byte[] peeked=queueFile.peek();
    if (peeked != null) {
      T peekedBatch=serializationStrategy.deserializeBatch(peeked);
      if (batch != null && batch.equals(peekedBatch)) {
        queueFile.remove();
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + peekedBatch + ""String_Node_Str""+ batch);
      }
    }
  }
 catch (  DeserializeException e) {
    if (log.isErrorEnabled()) {
      log.error(e.getLocalizedMessage());
    }
    throw new IllegalStateException(""String_Node_Str"" + e.getRealException().getLocalizedMessage());
  }
catch (  IOException e) {
    if (log.isErrorEnabled()) {
      log.error(e.getLocalizedMessage());
    }
    throw new IllegalStateException(""String_Node_Str"" + e.getLocalizedMessage());
  }
  isWaitingToFinish=false;
  checkPendingAndContinue();
}",0.7099930118798043
81176,"public void finish(final T batch){
  if (!queueFile.isEmpty()) {
    handler.post(new Runnable(){
      @Override public void run(){
        try {
          byte[] peeked=queueFile.peek();
          if (peeked != null) {
            T peekedBatch=serializationStrategy.deserializeBatch(peeked);
            if (batch != null && batch.equals(peekedBatch)) {
              queueFile.remove();
            }
 else {
              throw new IllegalStateException(""String_Node_Str"" + peekedBatch + ""String_Node_Str""+ batch);
            }
          }
        }
 catch (        IOException|DeserializeException e) {
          if (log.isErrorEnabled()) {
            log.error(e.getLocalizedMessage());
          }
        }
        isWaitingToFinish=false;
        checkPendingAndContinue();
      }
    }
);
  }
}","public void finish(final T batch){
  if (!queueFile.isEmpty()) {
    handler.post(new Runnable(){
      @Override public void run(){
        try {
          byte[] peeked=queueFile.peek();
          if (peeked != null) {
            T peekedBatch=serializationStrategy.deserializeBatch(peeked);
            if (batch != null && batch.equals(peekedBatch)) {
              queueFile.remove();
            }
 else {
              throw new IllegalStateException(""String_Node_Str"" + peekedBatch + ""String_Node_Str""+ batch);
            }
          }
        }
 catch (        DeserializeException e) {
          if (log.isErrorEnabled()) {
            log.error(e.getLocalizedMessage());
          }
          throw new IllegalStateException(""String_Node_Str"" + e.getRealException().getLocalizedMessage());
        }
catch (        IOException e) {
          if (log.isErrorEnabled()) {
            log.error(e.getLocalizedMessage());
          }
          throw new IllegalStateException(""String_Node_Str"" + e.getLocalizedMessage());
        }
        isWaitingToFinish=false;
        checkPendingAndContinue();
      }
    }
);
  }
}",0.7457452294997421
81177,"@Override public void onReady(BatchingStrategy<E,T> causingStrategy,final T batch){
  handler.post(new Runnable(){
    @Override public void run(){
      initializeIfRequired();
      try {
        queueFile.add(serializationStrategy.serializeBatch(batch));
        callPersistSuccess(batch);
      }
 catch (      Exception e) {
        if (log.isErrorEnabled()) {
          log.error(e.getLocalizedMessage());
        }
        callPersistFailure(batch,e);
      }
    }
  }
);
}","@Override public void onReady(BatchingStrategy<E,T> causingStrategy,final T batch){
  handler.post(new Runnable(){
    @Override public void run(){
      initializeIfRequired();
      try {
        queueFile.add(serializationStrategy.serializeBatch(batch));
        checkPendingAndContinue();
      }
 catch (      Exception e) {
        if (log.isErrorEnabled()) {
          log.error(e.getLocalizedMessage());
        }
        callPersistFailure(batch,e);
      }
    }
  }
);
}",0.9563409563409564
81178,"@Override public E deserializeData(byte[] data) throws DeserializeException {
  checkIfBuildCalled();
  return (E)gson.fromJson(new String(data),Data.class);
}","@Override public E deserializeData(byte[] data) throws DeserializeException {
  checkIfBuildCalled();
  try {
    return (E)gson.fromJson(new String(data),Data.class);
  }
 catch (  JsonParseException e) {
    throw new DeserializeException(e);
  }
}",0.7775061124694377
81179,"@Override public byte[] serializeBatch(T batch) throws SerializeException {
  checkIfBuildCalled();
  return gson.toJson(batch,Batch.class).getBytes();
}","@Override public byte[] serializeBatch(T batch) throws SerializeException {
  checkIfBuildCalled();
  try {
    return gson.toJson(batch,Batch.class).getBytes();
  }
 catch (  JsonParseException e) {
    throw new SerializeException(e);
  }
}",0.7746835443037975
81180,"@Override public byte[] serializeCollection(Collection<E> data) throws SerializeException {
  checkIfBuildCalled();
  Type type=new TypeToken<Collection<Data>>(){
  }
.getType();
  return gson.toJson(data,type).getBytes();
}","@Override public byte[] serializeCollection(Collection<E> data) throws SerializeException {
  checkIfBuildCalled();
  Type type=new TypeToken<Collection<Data>>(){
  }
.getType();
  try {
    return gson.toJson(data,type).getBytes();
  }
 catch (  JsonParseException e) {
    throw new SerializeException(e);
  }
}",0.8342644320297952
81181,"@Override public byte[] serializeData(E data) throws SerializeException {
  checkIfBuildCalled();
  return gson.toJson(data,Data.class).getBytes();
}","@Override public byte[] serializeData(E data) throws SerializeException {
  checkIfBuildCalled();
  try {
    return gson.toJson(data,Data.class).getBytes();
  }
 catch (  JsonParseException e) {
    throw new SerializeException(e);
  }
}",0.7700258397932817
81182,"@Override public Collection<E> deserializeCollection(byte[] data) throws DeserializeException {
  checkIfBuildCalled();
  Type type=new TypeToken<Collection<Data>>(){
  }
.getType();
  return gson.fromJson(new String(data),type);
}","@Override public Collection<E> deserializeCollection(byte[] data) throws DeserializeException {
  checkIfBuildCalled();
  Type type=new TypeToken<Collection<Data>>(){
  }
.getType();
  try {
    return gson.fromJson(new String(data),type);
  }
 catch (  JsonParseException e) {
    throw new DeserializeException(e);
  }
}",0.8354430379746836
81183,"@Override public T deserializeBatch(byte[] data) throws DeserializeException {
  checkIfBuildCalled();
  return (T)gson.fromJson(new String(data),Batch.class);
}","@Override public T deserializeBatch(byte[] data) throws DeserializeException {
  checkIfBuildCalled();
  try {
    return (T)gson.fromJson(new String(data),Batch.class);
  }
 catch (  JsonParseException e) {
    throw new DeserializeException(e);
  }
}",0.7796610169491526
81184,"public static ArrayList<Data> fakeCollection(int size){
  ArrayList<Data> dataList=new ArrayList<>();
  for (int i=0; i < size; i++) {
    eventData=new EventData(""String_Node_Str"" + i);
    dataList.add(eventData);
  }
  return dataList;
}","public static ArrayList<Data> fakeCollection(int size){
  ArrayList<Data> dataList=new ArrayList<>();
  for (int i=0; i < size; i++) {
    eventData=new EventData(""String_Node_Str"" + i);
    eventData.setEventId(System.currentTimeMillis() + System.nanoTime() + i);
    dataList.add(eventData);
  }
  return dataList;
}",0.8315412186379928
81185,"public static ArrayList<TagData> fakeTagAdsCollection(int size){
  ArrayList<TagData> dataList=new ArrayList<>();
  for (int i=0; i < size; i++) {
    TagData eventData=new TagData(new Tag(""String_Node_Str""),""String_Node_Str"" + i);
    dataList.add(eventData);
  }
  return dataList;
}","public static ArrayList<TagData> fakeTagAdsCollection(int size){
  ArrayList<TagData> dataList=new ArrayList<>();
  for (int i=0; i < size; i++) {
    TagData eventData=new TagData(new Tag(""String_Node_Str""),""String_Node_Str"" + i);
    eventData.setEventId(System.currentTimeMillis() + System.nanoTime() + i);
    dataList.add(eventData);
  }
  return dataList;
}",0.8395061728395061
81186,"public static ArrayList<Data> fakeBuisnessCollection(int size){
  ArrayList<Data> dataList=new ArrayList<>();
  for (int i=0; i < size; i++) {
    eventData=new EventData(""String_Node_Str"" + i);
    dataList.add(eventData);
  }
  return dataList;
}","public static ArrayList<Data> fakeBuisnessCollection(int size){
  ArrayList<Data> dataList=new ArrayList<>();
  for (int i=0; i < size; i++) {
    eventData=new EventData(""String_Node_Str"" + i);
    eventData.setEventId(System.currentTimeMillis() + System.nanoTime() + i);
    dataList.add(eventData);
  }
  return dataList;
}",0.8362369337979094
81187,"public static ArrayList<Data> fakeAdsCollection(int size){
  ArrayList<Data> dataList=new ArrayList<>();
  for (int i=0; i < size; i++) {
    eventData=new EventData(""String_Node_Str"" + i);
    dataList.add(eventData);
  }
  return dataList;
}","public static ArrayList<Data> fakeAdsCollection(int size){
  ArrayList<Data> dataList=new ArrayList<>();
  for (int i=0; i < size; i++) {
    eventData=new EventData(""String_Node_Str"" + i);
    eventData.setEventId(System.currentTimeMillis() + System.nanoTime() + i);
    dataList.add(eventData);
  }
  return dataList;
}",0.8333333333333334
81188,"public static ArrayList<Data> fakeDebugCollection(int size){
  ArrayList<Data> dataList=new ArrayList<>();
  for (int i=0; i < size; i++) {
    eventData=new EventData(""String_Node_Str"" + i);
    dataList.add(eventData);
  }
  return dataList;
}","public static ArrayList<Data> fakeDebugCollection(int size){
  ArrayList<Data> dataList=new ArrayList<>();
  for (int i=0; i < size; i++) {
    eventData=new EventData(""String_Node_Str"" + i);
    eventData.setEventId(System.currentTimeMillis() + System.nanoTime() + i);
    dataList.add(eventData);
  }
  return dataList;
}",0.8345070422535211
81189,"public static ArrayList<TagData> fakeTagDebugCollection(int size){
  ArrayList<TagData> dataList=new ArrayList<>();
  for (int i=0; i < size; i++) {
    TagData eventData=new TagData(new Tag(""String_Node_Str""),""String_Node_Str"" + i);
    dataList.add(eventData);
  }
  return dataList;
}","public static ArrayList<TagData> fakeTagDebugCollection(int size){
  ArrayList<TagData> dataList=new ArrayList<>();
  for (int i=0; i < size; i++) {
    TagData eventData=new TagData(new Tag(""String_Node_Str""),""String_Node_Str"" + i);
    eventData.setEventId(System.currentTimeMillis() + System.nanoTime() + i);
    dataList.add(eventData);
  }
  return dataList;
}",0.8404907975460123
81190,"/** 
 * Test to verify   {@link JsonSyntaxException} is thrown, when the byte to be deserialized gets corrupted
 * @throws SerializeException
 * @throws DeserializeException
 */
@Test(expected=Exception.class) public void testIfExceptionThrownWhenCorrupt() throws SerializeException, DeserializeException {
  GsonSerializationStrategy<Data,Batch<Data>> serializationStrategy;
  ArrayList<Data> dataCollection=Utils.fakeCollection(4);
  serializationStrategy=new GsonSerializationStrategy<>();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  Batch<Data> batch=new Batch<>(dataCollection);
  byte[] serializedData=serializationStrategy.serializeBatch(batch);
  try {
    String foo=new String(serializedData,""String_Node_Str"");
    foo+=""String_Node_Str"";
    serializedData=foo.getBytes();
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  serializationStrategy.deserializeData(serializedData);
}","/** 
 * Test to verify   {@link JsonSyntaxException} is thrown, when the byte to be deserialized gets corrupted
 * @throws SerializeException
 * @throws DeserializeException
 */
@Test(expected=DeserializeException.class) public void testIfExceptionThrownWhenCorrupt() throws SerializeException, DeserializeException {
  GsonSerializationStrategy<Data,Batch<Data>> serializationStrategy;
  ArrayList<Data> dataCollection=Utils.fakeCollection(4);
  serializationStrategy=new GsonSerializationStrategy<>();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  Batch<Data> batch=new Batch<>(dataCollection);
  byte[] serializedData=serializationStrategy.serializeBatch(batch);
  try {
    String foo=new String(serializedData,""String_Node_Str"");
    foo+=""String_Node_Str"";
    serializedData=foo.getBytes();
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  serializationStrategy.deserializeData(serializedData);
}",0.9943676395289298
81191,"@Test(expected=Exception.class) public void testSerializeException(){
  PersistenceStrategy<Data> persistenceStrategy;
  Context context;
  context=RuntimeEnvironment.application;
  persistenceStrategy=new SQLPersistenceStrategy<>(new GsonSerializationStrategy<>(),""String_Node_Str"",context);
  persistenceStrategy.onInitialized();
  persistenceStrategy.add(Utils.fakeCollection(4));
}","@Test(expected=Exception.class) public void testSerializeException(){
  PersistenceStrategy<Data> persistenceStrategy;
  Context context;
  context=RuntimeEnvironment.application;
  persistenceStrategy=new SQLPersistenceStrategy<>(new GsonSerializationStrategy<>(),createRandomString(),context);
  persistenceStrategy.onInitialized();
  persistenceStrategy.add(Utils.fakeCollection(4));
}",0.9521345407503234
81192,"/** 
 * Initialize the SQLPersistenceStrategy
 */
private PersistenceStrategy<Data> initializeSQLPersistence(){
  PersistenceStrategy<Data> persistenceStrategy;
  Context context;
  context=RuntimeEnvironment.application;
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  persistenceStrategy=new SQLPersistenceStrategy<>(serializationStrategy,""String_Node_Str"",context);
  persistenceStrategy.onInitialized();
  return persistenceStrategy;
}","/** 
 * Initialize the SQLPersistenceStrategy
 */
private PersistenceStrategy<Data> initializeSQLPersistence(){
  PersistenceStrategy<Data> persistenceStrategy;
  Context context;
  context=RuntimeEnvironment.application;
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  persistenceStrategy=new SQLPersistenceStrategy<>(serializationStrategy,createRandomString(),context);
  persistenceStrategy.onInitialized();
  return persistenceStrategy;
}",0.9691085613415712
81193,"@Override public void run(){
  assignEventIds(dataCollection);
  logEvents(dataCollection);
  if (batchingStrategy.isInitialized()) {
    batchingStrategy.onDataPushed(dataCollection);
    batchingStrategy.flush(false);
  }
 else {
    throw new IllegalAccessError(""String_Node_Str"");
  }
}","@Override public void run(){
  batchingStrategy.flush(forced);
}",0.3389830508474576
81194,"public TrimPersistedBatchReadyListener(File file,SerializationStrategy<E,T> serializationStrategy,Handler handler,int maxQueueSize,int trimToSize,int mode,PersistedBatchCallback<T> persistedBatchCallback,TrimmedBatchCallback trimmedBatchCallback){
  super(file,serializationStrategy,handler,persistedBatchCallback);
  if (trimToSize > maxQueueSize) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.trimSize=trimToSize;
  this.queueSize=maxQueueSize;
  this.handler=handler;
  this.mode=mode;
  this.trimListener=trimmedBatchCallback;
}","public TrimPersistedBatchReadyListener(File file,SerializationStrategy<E,T> serializationStrategy,Handler handler,int maxQueueSize,int trimSize,int mode,PersistedBatchCallback<T> persistedBatchCallback,TrimmedBatchCallback trimmedBatchCallback){
  super(file,serializationStrategy,handler,persistedBatchCallback);
  if (trimSize > maxQueueSize) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.trimSize=trimSize;
  this.queueSize=maxQueueSize;
  this.handler=handler;
  this.mode=mode;
  this.trimListener=trimmedBatchCallback;
}",0.9945945945945946
81195,"/** 
 * Backoff time to retry the batch for 5XX Server errors.
 * @return
 */
private int exponentialBackOff(){
  mCurrentTimeoutMs+=(mCurrentTimeoutMs * defaultBackoffMultiplier);
  return mCurrentTimeoutMs;
}","/** 
 * Backoff time to retry the batch for 5XX Server errors.
 * @return
 */
private int exponentialBackOff(){
  int timeout=mCurrentTimeoutMs;
  mCurrentTimeoutMs+=(mCurrentTimeoutMs * defaultBackoffMultiplier);
  return timeout;
}",0.871331828442438
81196,"public void setDefaultTimeoutMs(int defaultTimeoutMs){
  this.defaultTimeoutMs=defaultTimeoutMs;
}","public void setDefaultTimeoutMs(int defaultTimeoutMs){
  this.defaultTimeoutMs=defaultTimeoutMs;
  this.mCurrentTimeoutMs=defaultTimeoutMs;
}",0.8200836820083682
81197,"@Override public boolean equals(Object o){
  if (o instanceof SizeBatch) {
    return ((SizeBatch)o).getMaxBatchSize() == maxBatchSize;
  }
  return super.equals(o);
}","@Override public boolean equals(Object o){
  if (o instanceof SizeBatch) {
    return ((SizeBatch)o).getMaxBatchSize() == maxBatchSize && super.equals(o);
  }
  return super.equals(o);
}",0.9461756373937678
81198,"@Override public boolean equals(Object o){
  if (o instanceof TimeBatch) {
    return ((TimeBatch)o).getTimeOut() == timeOut;
  }
  return super.equals(o);
}","@Override public boolean equals(Object o){
  if (o instanceof TimeBatch) {
    return ((TimeBatch)o).getTimeOut() == timeOut && super.equals(o);
  }
  return super.equals(o);
}",0.9429429429429428
81199,"@Test public void testRetryPolicy(){
  Context context=RuntimeEnvironment.application;
  File file=createRandomFile();
  HandlerThread handlerThread=new HandlerThread(createRandomString());
  handlerThread.start();
  Looper looper=handlerThread.getLooper();
  Handler handler=new Handler(looper);
  ShadowLooper shadowLooper=Shadows.shadowOf(looper);
  SizeBatchingStrategy strategy=mock(SizeBatchingStrategy.class);
  SizeBatchingStrategy.SizeBatch<Data> firstBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  int ERROR_CODE_2XX=200;
  long callbackIdle=1000;
  MockNetworkPersistedBatchReadyListener networkBatchListener=spy(new MockNetworkPersistedBatchReadyListener(new NetworkPersistedBatchReadyListener.NetworkRequestResponse(true,ERROR_CODE_2XX),handler,callbackIdle,context));
  NetworkPersistedBatchReadyListener networkPersistedBatchReadyListener=new NetworkPersistedBatchReadyListener(context,file,serializationStrategy,handler,networkBatchListener,0);
  networkPersistedBatchReadyListener.onReady(strategy,firstBatch);
  shadowLooper.runToEndOfTasks();
}","@Test public void testRetryPolicy(){
  Context context=RuntimeEnvironment.application;
  File file=createRandomFile();
  ShadowLooper shadowLooper=Shadows.shadowOf(Looper.getMainLooper());
  Handler handler=new Handler();
  SizeBatchingStrategy strategy=mock(SizeBatchingStrategy.class);
  SizeBatchingStrategy.SizeBatch<Data> firstBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  int errorCode=500;
  long callbackIdle=1000;
  int retryCount=4;
  NetworkPersistedBatchReadyListener.NetworkRequestResponse requestResponse=new NetworkPersistedBatchReadyListener.NetworkRequestResponse(true,errorCode);
  MockNetworkPersistedBatchReadyListener networkBatchListener=spy(new MockNetworkPersistedBatchReadyListener(requestResponse,handler,callbackIdle,context));
  NetworkPersistedBatchReadyListener networkPersistedBatchReadyListener=new NetworkPersistedBatchReadyListener(context,file,serializationStrategy,handler,networkBatchListener,retryCount);
  networkPersistedBatchReadyListener.onReady(strategy,firstBatch);
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(1)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  shadowLooper.idle(networkPersistedBatchReadyListener.getDefaultTimeoutMs());
  verify(networkBatchListener,times(2)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 2);
  verify(networkBatchListener,times(3)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 4);
  verify(networkBatchListener,times(4)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  sendFakeNetworkBroadcast(context);
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 8);
  verify(networkBatchListener,times(4)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  sendFakeNetworkBroadcast(context);
  SizeBatchingStrategy.SizeBatch<Data> secondBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  networkPersistedBatchReadyListener.onReady(strategy,secondBatch);
  shadowLooper.idle();
  verify(networkBatchListener,times(5)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs());
  sendFakeNetworkBroadcast(context);
  verify(networkBatchListener,times(6)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  requestResponse.complete=true;
  requestResponse.httpErrorCode=200;
  sendFakeNetworkBroadcast(context);
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 2);
  verify(networkBatchListener,times(7)).performNetworkRequest(eq(secondBatch),any(ValueCallback.class));
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,atLeastOnce()).isNetworkConnected(context);
  verifyNoMoreInteractions(networkBatchListener);
}",0.3232278198840838
81200,"/** 
 * Test to verify the retry policy for 5XX errors
 * @throws IOException
 * @throws SerializeException
 */
@Test public void test5XXRetryPolicy() throws IOException, SerializeException {
  Context context=RuntimeEnvironment.application;
  File file=createRandomFile();
  HandlerThread handlerThread=new HandlerThread(createRandomString());
  handlerThread.start();
  Looper looper=handlerThread.getLooper();
  Handler handler=new Handler(looper);
  ShadowLooper shadowLooper=Shadows.shadowOf(looper);
  SizeBatchingStrategy strategy=mock(SizeBatchingStrategy.class);
  SizeBatchingStrategy.SizeBatch<Data> firstBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  int ERROR_CODE_5XX=500;
  long callbackIdle=1000;
  MockNetworkPersistedBatchReadyListener networkBatchListener=spy(new MockNetworkPersistedBatchReadyListener(new NetworkPersistedBatchReadyListener.NetworkRequestResponse(true,ERROR_CODE_5XX),handler,callbackIdle,context));
  int maxRetryCount=5;
  NetworkPersistedBatchReadyListener networkPersistedBatchReadyListener=new NetworkPersistedBatchReadyListener(context,file,serializationStrategy,handler,networkBatchListener,maxRetryCount);
  networkPersistedBatchReadyListener.onReady(strategy,firstBatch);
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(1)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(5000);
  verify(networkBatchListener,times(2)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + 10000);
  verify(networkBatchListener,times(3)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + 20000);
  verify(networkBatchListener,times(4)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + 40000);
  verify(networkBatchListener,times(5)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + 80000);
  ArgumentCaptor<ValueCallback> valueCallbackCapture=ArgumentCaptor.forClass(ValueCallback.class);
  verify(networkBatchListener,times(5)).performNetworkRequest(any(Batch.class),valueCallbackCapture.capture());
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(5)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  NetworkPersistedBatchReadyListener.NetworkRequestResponse requestResponse=new NetworkPersistedBatchReadyListener.NetworkRequestResponse(true,200);
  valueCallbackCapture.getValue().onReceiveValue(requestResponse);
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(5)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  networkPersistedBatchReadyListener.onReady(strategy,firstBatch);
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(6)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(5000);
  verify(networkBatchListener,times(7)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
}","/** 
 * Test to verify the retry policy for 5XX errors
 * @throws IOException
 * @throws SerializeException
 */
@Test public void test5XXRetryPolicy() throws IOException, SerializeException {
  Context context=RuntimeEnvironment.application;
  File file=createRandomFile();
  HandlerThread handlerThread=new HandlerThread(createRandomString());
  handlerThread.start();
  Looper looper=handlerThread.getLooper();
  Handler handler=new Handler(looper);
  ShadowLooper shadowLooper=Shadows.shadowOf(looper);
  SizeBatchingStrategy strategy=mock(SizeBatchingStrategy.class);
  SizeBatchingStrategy.SizeBatch<Data> firstBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  int ERROR_CODE_5XX=500;
  long callbackIdle=1000;
  MockNetworkPersistedBatchReadyListener networkBatchListener=spy(new MockNetworkPersistedBatchReadyListener(new NetworkPersistedBatchReadyListener.NetworkRequestResponse(true,ERROR_CODE_5XX),handler,callbackIdle,context));
  int maxRetryCount=5;
  NetworkPersistedBatchReadyListener networkPersistedBatchReadyListener=new NetworkPersistedBatchReadyListener(context,file,serializationStrategy,handler,networkBatchListener,maxRetryCount);
  networkPersistedBatchReadyListener.onReady(strategy,firstBatch);
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(1)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(networkPersistedBatchReadyListener.getDefaultTimeoutMs());
  verify(networkBatchListener,times(2)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 2);
  verify(networkBatchListener,times(3)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 4);
  verify(networkBatchListener,times(4)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 8);
  verify(networkBatchListener,times(5)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 16);
  ArgumentCaptor<ValueCallback> valueCallbackCapture=ArgumentCaptor.forClass(ValueCallback.class);
  verify(networkBatchListener,times(5)).performNetworkRequest(any(Batch.class),valueCallbackCapture.capture());
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(5)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  NetworkPersistedBatchReadyListener.NetworkRequestResponse requestResponse=new NetworkPersistedBatchReadyListener.NetworkRequestResponse(true,200);
  valueCallbackCapture.getValue().onReceiveValue(requestResponse);
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(5)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  networkPersistedBatchReadyListener.onReady(strategy,firstBatch);
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(6)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(networkPersistedBatchReadyListener.getDefaultTimeoutMs());
  verify(networkBatchListener,times(7)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
}",0.9437970202094704
81201,"/** 
 * Test to verify the retry policy for 4XX errors.
 * @throws IOException
 * @throws SerializeException
 */
@Test public void test4XXRetryPolicy() throws IOException, SerializeException {
  Context context=RuntimeEnvironment.application;
  File file=createRandomFile();
  HandlerThread handlerThread=new HandlerThread(createRandomString());
  handlerThread.start();
  Looper looper=handlerThread.getLooper();
  Handler handler=new Handler(looper);
  ShadowLooper shadowLooper=Shadows.shadowOf(looper);
  SizeBatchingStrategy strategy=mock(SizeBatchingStrategy.class);
  SizeBatchingStrategy.SizeBatch<Data> firstBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  int ERROR_CODE_4XX=400;
  long callbackIdle=1000;
  MockNetworkPersistedBatchReadyListener networkBatchListener=spy(new MockNetworkPersistedBatchReadyListener(new NetworkPersistedBatchReadyListener.NetworkRequestResponse(true,ERROR_CODE_4XX),handler,callbackIdle,context));
  int maxRetryCount=5;
  NetworkPersistedBatchReadyListener networkPersistedBatchReadyListener=new NetworkPersistedBatchReadyListener(context,file,serializationStrategy,handler,networkBatchListener,maxRetryCount);
  networkPersistedBatchReadyListener.onReady(strategy,firstBatch);
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(1)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(5000);
  verify(networkBatchListener,times(1)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
}","/** 
 * Test to verify the retry policy for 4XX errors.
 * @throws IOException
 * @throws SerializeException
 */
@Test public void test4XXRetryPolicy() throws IOException, SerializeException {
  Context context=RuntimeEnvironment.application;
  File file=createRandomFile();
  HandlerThread handlerThread=new HandlerThread(createRandomString());
  handlerThread.start();
  Looper looper=handlerThread.getLooper();
  Handler handler=new Handler(looper);
  ShadowLooper shadowLooper=Shadows.shadowOf(looper);
  SizeBatchingStrategy strategy=mock(SizeBatchingStrategy.class);
  SizeBatchingStrategy.SizeBatch<Data> firstBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  int ERROR_CODE_4XX=400;
  long callbackIdle=1000;
  MockNetworkPersistedBatchReadyListener networkBatchListener=spy(new MockNetworkPersistedBatchReadyListener(new NetworkPersistedBatchReadyListener.NetworkRequestResponse(true,ERROR_CODE_4XX),handler,callbackIdle,context));
  int maxRetryCount=5;
  NetworkPersistedBatchReadyListener networkPersistedBatchReadyListener=new NetworkPersistedBatchReadyListener(context,file,serializationStrategy,handler,networkBatchListener,maxRetryCount);
  networkPersistedBatchReadyListener.onReady(strategy,firstBatch);
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(1)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  shadowLooper.idle(networkPersistedBatchReadyListener.getDefaultTimeoutMs());
  verify(networkBatchListener,times(1)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
}",0.982527664531159
81202,"@Override public boolean equals(Object o){
  if (o instanceof DataCollection) {
    return ((DataCollection)o).dataCollection.equals(((DataCollection)o).dataCollection);
  }
 else {
    return super.equals(o);
  }
}","@Override public boolean equals(Object o){
  if (o instanceof DataCollection) {
    return (dataCollection.equals(((DataCollection)o).dataCollection));
  }
 else {
    return super.equals(o);
  }
}",0.9514563106796116
81203,"@Test public void testRetryPolicy(){
  Context context=RuntimeEnvironment.application;
  File file=createRandomFile();
  ShadowLooper shadowLooper=Shadows.shadowOf(Looper.getMainLooper());
  Handler handler=new Handler();
  SizeBatchingStrategy strategy=mock(SizeBatchingStrategy.class);
  SizeBatchingStrategy.SizeBatch<Data> firstBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  int errorCode=500;
  long callbackIdle=1000;
  int retryCount=4;
  NetworkPersistedBatchReadyListener.NetworkRequestResponse requestResponse=new NetworkPersistedBatchReadyListener.NetworkRequestResponse(true,errorCode);
  MockNetworkPersistedBatchReadyListener networkBatchListener=spy(new MockNetworkPersistedBatchReadyListener(requestResponse,handler,callbackIdle,context));
  NetworkPersistedBatchReadyListener networkPersistedBatchReadyListener=new NetworkPersistedBatchReadyListener(context,file,serializationStrategy,handler,networkBatchListener,retryCount);
  networkPersistedBatchReadyListener.onReady(strategy,firstBatch);
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(1)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  shadowLooper.idle(networkPersistedBatchReadyListener.getDefaultTimeoutMs());
  verify(networkBatchListener,times(2)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 2);
  verify(networkBatchListener,times(3)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 4);
  verify(networkBatchListener,times(4)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  sendFakeNetworkBroadcast(context);
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 8);
  verify(networkBatchListener,times(4)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  sendFakeNetworkBroadcast(context);
  SizeBatchingStrategy.SizeBatch<Data> secondBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  networkPersistedBatchReadyListener.onReady(strategy,secondBatch);
  shadowLooper.idle();
  verify(networkBatchListener,times(5)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs());
  sendFakeNetworkBroadcast(context);
  verify(networkBatchListener,times(6)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  requestResponse.complete=true;
  requestResponse.httpErrorCode=200;
  sendFakeNetworkBroadcast(context);
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 2);
  verify(networkBatchListener,times(7)).performNetworkRequest(eq(secondBatch),any(ValueCallback.class));
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,atLeastOnce()).isNetworkConnected(context);
  verifyNoMoreInteractions(networkBatchListener);
}","@Test public void testRetryPolicy(){
  Context context=RuntimeEnvironment.application;
  File file=createRandomFile();
  ShadowLooper shadowLooper=Shadows.shadowOf(Looper.getMainLooper());
  Handler handler=new Handler();
  SizeBatchingStrategy strategy=mock(SizeBatchingStrategy.class);
  SizeBatchingStrategy.SizeBatch<Data> firstBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  int errorCode=500;
  long callbackIdle=1000;
  int retryCount=4;
  NetworkPersistedBatchReadyListener.NetworkRequestResponse requestResponse=new NetworkPersistedBatchReadyListener.NetworkRequestResponse(true,errorCode);
  MockNetworkPersistedBatchReadyListener networkBatchListener=spy(new MockNetworkPersistedBatchReadyListener(requestResponse,handler,callbackIdle,context));
  NetworkPersistedBatchReadyListener networkPersistedBatchReadyListener=new NetworkPersistedBatchReadyListener(context,file,serializationStrategy,handler,networkBatchListener,retryCount);
  networkPersistedBatchReadyListener.onReady(strategy,firstBatch);
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(1)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  shadowLooper.idle(networkPersistedBatchReadyListener.getDefaultTimeoutMs());
  verify(networkBatchListener,times(2)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 2);
  verify(networkBatchListener,times(3)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 4);
  verify(networkBatchListener,times(4)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  sendFakeNetworkBroadcast(context);
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 8);
  verify(networkBatchListener,times(4)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  sendFakeNetworkBroadcast(context);
  SizeBatchingStrategy.SizeBatch<Data> secondBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  networkPersistedBatchReadyListener.onReady(strategy,secondBatch);
  shadowLooper.idle();
  verify(networkBatchListener,times(5)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs());
  sendFakeNetworkBroadcast(context);
  verify(networkBatchListener,times(6)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  requestResponse.complete=true;
  requestResponse.httpErrorCode=200;
  sendFakeNetworkBroadcast(context);
  shadowLooper.idle(callbackIdle + networkPersistedBatchReadyListener.getDefaultTimeoutMs() * 2);
  verify(networkBatchListener,times(1)).performNetworkRequest(eq(secondBatch),any(ValueCallback.class));
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,atLeastOnce()).isNetworkConnected(context);
  verifyNoMoreInteractions(networkBatchListener);
}",0.9996899224806202
81204,"/** 
 * Test to verify the retry policy for 2XX response codes.
 * @throws IOException
 * @throws SerializeException
 */
@Test public void testNetworkBroadcast() throws IOException, SerializeException {
  Context context=RuntimeEnvironment.application;
  File file=createRandomFile();
  HandlerThread handlerThread=new HandlerThread(createRandomString());
  handlerThread.start();
  Looper looper=handlerThread.getLooper();
  Handler handler=new Handler(looper);
  ShadowLooper shadowLooper=Shadows.shadowOf(looper);
  SizeBatchingStrategy strategy=mock(SizeBatchingStrategy.class);
  SizeBatchingStrategy.SizeBatch<Data> firstBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  int ERROR_CODE_2XX=200;
  long callbackIdle=1000;
  MockNetworkPersistedBatchReadyListener networkBatchListener=spy(new MockNetworkPersistedBatchReadyListener(new NetworkPersistedBatchReadyListener.NetworkRequestResponse(true,ERROR_CODE_2XX),handler,callbackIdle,context));
  NetworkPersistedBatchReadyListener networkPersistedBatchReadyListener=new NetworkPersistedBatchReadyListener(context,file,serializationStrategy,handler,networkBatchListener,0);
  networkPersistedBatchReadyListener.onReady(strategy,firstBatch);
  shadowLooper.runToEndOfTasks();
  ArgumentCaptor<ValueCallback> valueCallbackCapture=ArgumentCaptor.forClass(ValueCallback.class);
  verify(networkBatchListener,times(1)).performNetworkRequest(any(Batch.class),valueCallbackCapture.capture());
  sendFakeNetworkBroadcast(context);
  shadowLooper.idle(100);
  verify(networkBatchListener,times(1)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  NetworkPersistedBatchReadyListener.NetworkRequestResponse requestResponse=new NetworkPersistedBatchReadyListener.NetworkRequestResponse(true,200);
  valueCallbackCapture.getValue().onReceiveValue(requestResponse);
  networkBatchListener.setMockedNetworkConnected(false);
  SizeBatchingStrategy.SizeBatch<Data> secondBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  networkPersistedBatchReadyListener.onReady(strategy,secondBatch);
  shadowLooper.idle(100);
  verify(networkBatchListener,times(1)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  networkBatchListener.setMockedNetworkConnected(true);
  sendFakeNetworkBroadcast(context);
  shadowLooper.idle(100);
  ArgumentCaptor<Batch> batchCapture=ArgumentCaptor.forClass(Batch.class);
  verify(networkBatchListener,times(2)).performNetworkRequest(batchCapture.capture(),any(ValueCallback.class));
  Assert.assertEquals(batchCapture.getValue(),secondBatch);
  verify(networkBatchListener,atLeastOnce()).isNetworkConnected(context);
  verify(networkBatchListener,atLeastOnce()).setMockedNetworkConnected(anyBoolean());
  shadowLooper.runToEndOfTasks();
  verifyNoMoreInteractions(networkBatchListener);
}","/** 
 * Test to verify the retry policy for 2XX response codes.
 * @throws IOException
 * @throws SerializeException
 */
@Test public void testNetworkBroadcast() throws IOException, SerializeException {
  Context context=RuntimeEnvironment.application;
  File file=createRandomFile();
  HandlerThread handlerThread=new HandlerThread(createRandomString());
  handlerThread.start();
  Looper looper=handlerThread.getLooper();
  Handler handler=new Handler(looper);
  ShadowLooper shadowLooper=Shadows.shadowOf(looper);
  SizeBatchingStrategy strategy=mock(SizeBatchingStrategy.class);
  SizeBatchingStrategy.SizeBatch<Data> firstBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),3);
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  int ERROR_CODE_2XX=200;
  long callbackIdle=1000;
  MockNetworkPersistedBatchReadyListener networkBatchListener=spy(new MockNetworkPersistedBatchReadyListener(new NetworkPersistedBatchReadyListener.NetworkRequestResponse(true,ERROR_CODE_2XX),handler,callbackIdle,context));
  NetworkPersistedBatchReadyListener networkPersistedBatchReadyListener=new NetworkPersistedBatchReadyListener(context,file,serializationStrategy,handler,networkBatchListener,0);
  networkPersistedBatchReadyListener.onReady(strategy,firstBatch);
  shadowLooper.runToEndOfTasks();
  ArgumentCaptor<ValueCallback> valueCallbackCapture=ArgumentCaptor.forClass(ValueCallback.class);
  verify(networkBatchListener,times(1)).performNetworkRequest(eq(firstBatch),valueCallbackCapture.capture());
  sendFakeNetworkBroadcast(context);
  shadowLooper.runToEndOfTasks();
  verify(networkBatchListener,times(1)).performNetworkRequest(eq(firstBatch),any(ValueCallback.class));
  networkBatchListener.setMockedNetworkConnected(false);
  SizeBatchingStrategy.SizeBatch<Data> secondBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),4);
  networkPersistedBatchReadyListener.onReady(strategy,secondBatch);
  shadowLooper.idle(100);
  verify(networkBatchListener,times(1)).performNetworkRequest(any(Batch.class),any(ValueCallback.class));
  networkBatchListener.setMockedNetworkConnected(true);
  sendFakeNetworkBroadcast(context);
  shadowLooper.idle(100);
  ArgumentCaptor<Batch> batchCapture=ArgumentCaptor.forClass(Batch.class);
  verify(networkBatchListener,times(2)).performNetworkRequest(batchCapture.capture(),any(ValueCallback.class));
  Assert.assertEquals(batchCapture.getValue(),secondBatch);
  verify(networkBatchListener,atLeastOnce()).isNetworkConnected(context);
  verify(networkBatchListener,atLeastOnce()).setMockedNetworkConnected(anyBoolean());
  shadowLooper.runToEndOfTasks();
  verifyNoMoreInteractions(networkBatchListener);
}",0.8024137931034483
81205,"/** 
 * Test that persist success is not called until finish is called.
 * @throws IOException
 * @throws SerializeException
 */
@Test public void testPersistSuccessNotCalledMoreThanOnce() throws IOException, SerializeException {
  File file=createRandomFile();
  HandlerThread handlerThread=new HandlerThread(createRandomString());
  handlerThread.start();
  Looper looper=handlerThread.getLooper();
  ShadowLooper shadowLooper=Shadows.shadowOf(looper);
  Handler handler=new Handler(looper);
  SizeBatchingStrategy strategy=mock(SizeBatchingStrategy.class);
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  PersistedBatchCallback persistedBatchCallback=mock(PersistedBatchCallback.class);
  PersistedBatchReadyListener persistedBatchReadyListener=new PersistedBatchReadyListener(file,serializationStrategy,handler,persistedBatchCallback);
  SizeBatchingStrategy.SizeBatch<Data> firstBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  persistedBatchReadyListener.onReady(strategy,firstBatch);
  SizeBatchingStrategy.SizeBatch<Data> subsequentBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  persistedBatchReadyListener.onReady(strategy,subsequentBatch);
  subsequentBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  persistedBatchReadyListener.onReady(strategy,subsequentBatch);
  subsequentBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  persistedBatchReadyListener.onReady(strategy,subsequentBatch);
  subsequentBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  persistedBatchReadyListener.onReady(strategy,subsequentBatch);
  shadowLooper.runToEndOfTasks();
  verify(persistedBatchCallback,times(1)).onPersistSuccess(firstBatch);
  persistedBatchReadyListener.finish(firstBatch);
  shadowLooper.runToEndOfTasks();
  verify(persistedBatchCallback,times(2)).onPersistSuccess(firstBatch);
  persistedBatchReadyListener.finish(firstBatch);
  shadowLooper.runToEndOfTasks();
  verify(persistedBatchCallback,times(3)).onPersistSuccess(firstBatch);
}","/** 
 * Test that persist success is not called until finish is called.
 * @throws IOException
 * @throws SerializeException
 */
@Test public void testPersistSuccessNotCalledMoreThanOnce() throws IOException, SerializeException {
  File file=createRandomFile();
  HandlerThread handlerThread=new HandlerThread(createRandomString());
  handlerThread.start();
  Looper looper=handlerThread.getLooper();
  ShadowLooper shadowLooper=Shadows.shadowOf(looper);
  Handler handler=new Handler(looper);
  SizeBatchingStrategy strategy=mock(SizeBatchingStrategy.class);
  SerializationStrategy serializationStrategy=new GsonSerializationStrategy();
  BatchManager.registerBuiltInTypes(serializationStrategy);
  serializationStrategy.build();
  PersistedBatchCallback persistedBatchCallback=mock(PersistedBatchCallback.class);
  PersistedBatchReadyListener persistedBatchReadyListener=new PersistedBatchReadyListener(file,serializationStrategy,handler,persistedBatchCallback);
  SizeBatchingStrategy.SizeBatch<Data> firstBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  persistedBatchReadyListener.onReady(strategy,firstBatch);
  SizeBatchingStrategy.SizeBatch<Data> secondBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  persistedBatchReadyListener.onReady(strategy,secondBatch);
  SizeBatchingStrategy.SizeBatch<Data> thirdBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  persistedBatchReadyListener.onReady(strategy,thirdBatch);
  SizeBatchingStrategy.SizeBatch<Data> fourthBatch=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  persistedBatchReadyListener.onReady(strategy,fourthBatch);
  shadowLooper.runToEndOfTasks();
  verify(persistedBatchCallback,times(1)).onPersistSuccess(firstBatch);
  persistedBatchReadyListener.finish(firstBatch);
  shadowLooper.runToEndOfTasks();
  verify(persistedBatchCallback,times(1)).onPersistSuccess(secondBatch);
  persistedBatchReadyListener.finish(secondBatch);
  shadowLooper.runToEndOfTasks();
  verify(persistedBatchCallback,times(1)).onPersistSuccess(thirdBatch);
  verifyNoMoreInteractions(persistedBatchCallback);
}",0.897045244690674
81206,"@Test public void testSizeBatchInfo(){
  SizeBatchingStrategy.SizeBatch sizeBatchInfo=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  SizeBatchingStrategy.SizeBatch sizeBatchInfo1=new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5);
  Assert.assertTrue(sizeBatchInfo.equals(sizeBatchInfo1));
  Assert.assertTrue(!sizeBatchInfo.equals(""String_Node_Str""));
}","@Test public void testSizeBatchInfo(){
  ArrayList<Data> list1=Utils.fakeCollection(5);
  ArrayList<Data> list2=new ArrayList<>(list1);
  SizeBatchingStrategy.SizeBatch sizeBatchInfo=new SizeBatchingStrategy.SizeBatch<>(list1,5);
  SizeBatchingStrategy.SizeBatch sizeBatchInfo1=new SizeBatchingStrategy.SizeBatch<>(list2,5);
  Assert.assertTrue(sizeBatchInfo.equals(sizeBatchInfo1));
  Assert.assertTrue(!sizeBatchInfo.equals(""String_Node_Str""));
}",0.6395209580838324
81207,"@Test public void testTagBatchingInfo(){
  TagBatchingStrategy.TagBatch tagBatchInfo=new TagBatchingStrategy.TagBatch(AD_TAG,new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5));
  TagBatchingStrategy.TagBatch tagBatchInfo1=new TagBatchingStrategy.TagBatch(AD_TAG,new SizeBatchingStrategy.SizeBatch<>(Utils.fakeCollection(5),5));
  Assert.assertNotNull(tagBatchInfo.getTag());
  Assert.assertTrue(tagBatchInfo.equals(tagBatchInfo1));
  Assert.assertTrue(!tagBatchInfo.equals(""String_Node_Str""));
}","@Test public void testTagBatchingInfo(){
  ArrayList<Data> list1=Utils.fakeCollection(5);
  ArrayList<Data> list2=new ArrayList<>(list1);
  TagBatchingStrategy.TagBatch tagBatchInfo=new TagBatchingStrategy.TagBatch(AD_TAG,new SizeBatchingStrategy.SizeBatch<>(list1,5));
  TagBatchingStrategy.TagBatch tagBatchInfo1=new TagBatchingStrategy.TagBatch(AD_TAG,new SizeBatchingStrategy.SizeBatch<>(list2,5));
  Assert.assertNotNull(tagBatchInfo.getTag());
  Assert.assertTrue(tagBatchInfo.equals(tagBatchInfo1));
  Assert.assertTrue(!tagBatchInfo.equals(""String_Node_Str""));
}",0.8582020389249305
81208,"@Test public void testTimeBatchingInfo(){
  TimeBatchingStrategy.TimeBatch timeBatchInfo=new TimeBatchingStrategy.TimeBatch<>(Utils.fakeCollection(2),5000);
  TimeBatchingStrategy.TimeBatch timeBatchInfo1=new TimeBatchingStrategy.TimeBatch<>(Utils.fakeCollection(2),5000);
  Assert.assertTrue(timeBatchInfo.equals(timeBatchInfo1));
  Assert.assertTrue(!timeBatchInfo.equals(""String_Node_Str""));
}","@Test public void testTimeBatchingInfo(){
  ArrayList<Data> list1=Utils.fakeCollection(2);
  ArrayList<Data> list2=new ArrayList<>(list1);
  TimeBatchingStrategy.TimeBatch timeBatchInfo=new TimeBatchingStrategy.TimeBatch<>(list1,5000);
  TimeBatchingStrategy.TimeBatch timeBatchInfo1=new TimeBatchingStrategy.TimeBatch<>(list2,5000);
  Assert.assertTrue(timeBatchInfo.equals(timeBatchInfo1));
  Assert.assertTrue(!timeBatchInfo.equals(""String_Node_Str""));
}",0.64947245017585
81209,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  HandlerThread handlerThread=new HandlerThread(""String_Node_Str"");
  handlerThread.start();
  Handler backgroundHandler=new Handler(handlerThread.getLooper());
  SerializationStrategy<TagData,TagBatchingStrategy.TagBatch<TagData>> serializationStrategy=new GsonSerializationStrategy<>();
  debugTag=new Tag(DEBUG_LOGGER_GROUPID);
  perfTag=new Tag(PERF_LOGGER_GROUPID);
  dgTag=new Tag(DG_LOGGER_GROUPID);
  InMemoryPersistenceStrategy<TagData> prefInMemoryPersistenceStrategy=new TapePersistenceStrategy<>(new File(getCacheDir(),""String_Node_Str""),serializationStrategy);
  TagBasedPersistenceStrategy<TagData> prefTagBatchingPersistence=new TagBasedPersistenceStrategy<>(perfTag,prefInMemoryPersistenceStrategy);
  BatchingStrategy<TagData,Batch<TagData>> prefSizeBatchingStrategy=new SizeBatchingStrategy(2,prefTagBatchingPersistence);
  InMemoryPersistenceStrategy<TagData> debugInMemoryPersistenceStrategy=new TapePersistenceStrategy<>(new File(getCacheDir(),""String_Node_Str""),serializationStrategy);
  TagBasedPersistenceStrategy<TagData> debugTagBatchingPersistence=new TagBasedPersistenceStrategy<>(debugTag,debugInMemoryPersistenceStrategy);
  BatchingStrategy<TagData,Batch<TagData>> debugTimeBatchingStrategy=new TimeBatchingStrategy(5000,debugTagBatchingPersistence);
  InMemoryPersistenceStrategy<TagData> dgInMemoryPersistenceStrategy=new TapePersistenceStrategy<>(new File(getCacheDir(),""String_Node_Str""),serializationStrategy);
  TagBasedPersistenceStrategy<TagData> dgTagBatchingPersistence=new TagBasedPersistenceStrategy<>(dgTag,dgInMemoryPersistenceStrategy);
  BatchingStrategy<TagData,Batch<TagData>> dgTimeBatchingStrategy=new SizeBatchingStrategy(2,dgTagBatchingPersistence);
  final TagBatchingStrategy<TagData> tagBatchingStrategy=new TagBatchingStrategy<>();
  tagBatchingStrategy.addTagStrategy(perfTag,prefSizeBatchingStrategy);
  tagBatchingStrategy.addTagStrategy(debugTag,debugTimeBatchingStrategy);
  tagBatchingStrategy.addTagStrategy(dgTag,dgTimeBatchingStrategy);
  File perfFile=new File(getCacheDir(),""String_Node_Str"");
  File debugFile=new File(getCacheDir(),""String_Node_Str"");
  File dgFile=new File(getCacheDir(),""String_Node_Str"");
  final PersistedBatchReadyListener perfListener=new PersistedBatchReadyListener<>(perfFile,serializationStrategy,backgroundHandler,null);
  perfListener.setListener(new PersistedBatchCallback(){
    @Override public void onPersistFailure(    Batch batch,    Exception e){
    }
    @Override public void onPersistSuccess(    Batch batch){
      SystemClock.sleep(2000);
      perfListener.finish(batch);
      Log.e(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onFinish(){
    }
  }
);
  final PersistedBatchReadyListener debugListener=new PersistedBatchReadyListener<>(debugFile,serializationStrategy,backgroundHandler,null);
  debugListener.setListener(new PersistedBatchCallback<TagBatchingStrategy.TagBatch<TagData>>(){
    @Override public void onPersistFailure(    TagBatchingStrategy.TagBatch<TagData> batch,    Exception e){
    }
    @Override public void onPersistSuccess(    TagBatchingStrategy.TagBatch<TagData> batch){
      SystemClock.sleep(2000);
      debugListener.finish(batch);
      Log.e(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onFinish(){
    }
  }
);
  final PersistedBatchReadyListener dgListener=new PersistedBatchReadyListener<>(dgFile,serializationStrategy,backgroundHandler,null);
  dgListener.setListener(new PersistedBatchCallback<TagBatchingStrategy.TagBatch<TagData>>(){
    @Override public void onPersistFailure(    TagBatchingStrategy.TagBatch<TagData> batch,    Exception e){
    }
    @Override public void onPersistSuccess(    TagBatchingStrategy.TagBatch<TagData> batch){
      SystemClock.sleep(2000);
      dgListener.finish(batch);
      Log.e(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onFinish(){
    }
  }
);
  TagBatchReadyListener<TagData> tagBatchReadyListener=new TagBatchReadyListener<>();
  tagBatchReadyListener.addListenerForTag(perfTag,perfListener);
  tagBatchReadyListener.addListenerForTag(debugTag,debugListener);
  tagBatchReadyListener.addListenerForTag(dgTag,dgListener);
  batchManager=new BatchManager.Builder<>().setBatchingStrategy(tagBatchingStrategy).setSerializationStrategy(serializationStrategy).setHandler(backgroundHandler).setOnBatchReadyListener(tagBatchReadyListener).build(getApplicationContext());
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  FloatingActionButton fab=(FloatingActionButton)findViewById(R.id.fab);
  fab.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      batchManager.addToBatch(Collections.singleton(new TagData(perfTag,""String_Node_Str"")));
      Snackbar.make(view,""String_Node_Str"",Snackbar.LENGTH_LONG).setAction(""String_Node_Str"",null).show();
    }
  }
);
  DrawerLayout drawer=(DrawerLayout)findViewById(R.id.drawer_layout);
  ActionBarDrawerToggle toggle=new ActionBarDrawerToggle(this,drawer,toolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
  drawer.setDrawerListener(toggle);
  toggle.syncState();
  NavigationView navigationView=(NavigationView)findViewById(R.id.nav_view);
  navigationView.setNavigationItemSelectedListener(this);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  HandlerThread handlerThread=new HandlerThread(""String_Node_Str"");
  handlerThread.start();
  Handler backgroundHandler=new Handler(handlerThread.getLooper());
  SerializationStrategy<TagData,TagBatchingStrategy.TagBatch<TagData>> serializationStrategy=new GsonSerializationStrategy<>();
  debugTag=new Tag(DEBUG_LOGGER_GROUPID);
  perfTag=new Tag(PERF_LOGGER_GROUPID);
  dgTag=new Tag(DG_LOGGER_GROUPID);
  InMemoryPersistenceStrategy<TagData> prefInMemoryPersistenceStrategy=new TapePersistenceStrategy<>(new File(getCacheDir(),""String_Node_Str""),serializationStrategy);
  TagBasedPersistenceStrategy<TagData> prefTagBatchingPersistence=new TagBasedPersistenceStrategy<>(perfTag,prefInMemoryPersistenceStrategy);
  BatchingStrategy<TagData,Batch<TagData>> prefSizeBatchingStrategy=new SizeBatchingStrategy(2,prefTagBatchingPersistence);
  InMemoryPersistenceStrategy<TagData> debugInMemoryPersistenceStrategy=new TapePersistenceStrategy<>(new File(getCacheDir(),""String_Node_Str""),serializationStrategy);
  TagBasedPersistenceStrategy<TagData> debugTagBatchingPersistence=new TagBasedPersistenceStrategy<>(debugTag,debugInMemoryPersistenceStrategy);
  BatchingStrategy<TagData,Batch<TagData>> debugTimeBatchingStrategy=new TimeBatchingStrategy(5000,debugTagBatchingPersistence);
  InMemoryPersistenceStrategy<TagData> dgInMemoryPersistenceStrategy=new TapePersistenceStrategy<>(new File(getCacheDir(),""String_Node_Str""),serializationStrategy);
  TagBasedPersistenceStrategy<TagData> dgTagBatchingPersistence=new TagBasedPersistenceStrategy<>(dgTag,dgInMemoryPersistenceStrategy);
  BatchingStrategy<TagData,Batch<TagData>> dgTimeBatchingStrategy=new SizeBatchingStrategy(2,dgTagBatchingPersistence);
  final TagBatchingStrategy<TagData> tagBatchingStrategy=new TagBatchingStrategy<>();
  tagBatchingStrategy.addTagStrategy(perfTag,prefSizeBatchingStrategy);
  tagBatchingStrategy.addTagStrategy(debugTag,debugTimeBatchingStrategy);
  tagBatchingStrategy.addTagStrategy(dgTag,dgTimeBatchingStrategy);
  File perfFile=new File(getCacheDir(),""String_Node_Str"");
  File debugFile=new File(getCacheDir(),""String_Node_Str"");
  File dgFile=new File(getCacheDir(),""String_Node_Str"");
  final PersistedBatchReadyListener perfListener=new PersistedBatchReadyListener<>(perfFile,serializationStrategy,backgroundHandler,null);
  perfListener.setListener(new PersistedBatchCallback(){
    @Override public void onPersistFailure(    Batch batch,    Exception e){
    }
    @Override public void onPersistSuccess(    Batch batch){
      perfListener.finish(batch);
      Log.e(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onFinish(){
    }
  }
);
  final PersistedBatchReadyListener debugListener=new PersistedBatchReadyListener<>(debugFile,serializationStrategy,backgroundHandler,null);
  debugListener.setListener(new PersistedBatchCallback<TagBatchingStrategy.TagBatch<TagData>>(){
    @Override public void onPersistFailure(    TagBatchingStrategy.TagBatch<TagData> batch,    Exception e){
    }
    @Override public void onPersistSuccess(    TagBatchingStrategy.TagBatch<TagData> batch){
      debugListener.finish(batch);
      Log.e(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onFinish(){
    }
  }
);
  final PersistedBatchReadyListener dgListener=new PersistedBatchReadyListener<>(dgFile,serializationStrategy,backgroundHandler,null);
  dgListener.setListener(new PersistedBatchCallback<TagBatchingStrategy.TagBatch<TagData>>(){
    @Override public void onPersistFailure(    TagBatchingStrategy.TagBatch<TagData> batch,    Exception e){
    }
    @Override public void onPersistSuccess(    TagBatchingStrategy.TagBatch<TagData> batch){
      dgListener.finish(batch);
      Log.e(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onFinish(){
    }
  }
);
  TagBatchReadyListener<TagData> tagBatchReadyListener=new TagBatchReadyListener<>();
  tagBatchReadyListener.addListenerForTag(perfTag,perfListener);
  tagBatchReadyListener.addListenerForTag(debugTag,debugListener);
  tagBatchReadyListener.addListenerForTag(dgTag,dgListener);
  batchManager=new BatchManager.Builder<>().setBatchingStrategy(tagBatchingStrategy).setSerializationStrategy(serializationStrategy).setHandler(backgroundHandler).setOnBatchReadyListener(tagBatchReadyListener).build(getApplicationContext());
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  FloatingActionButton fab=(FloatingActionButton)findViewById(R.id.fab);
  fab.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      batchManager.addToBatch(Collections.singleton(new TagData(perfTag,""String_Node_Str"")));
      Snackbar.make(view,""String_Node_Str"",Snackbar.LENGTH_LONG).setAction(""String_Node_Str"",null).show();
    }
  }
);
  DrawerLayout drawer=(DrawerLayout)findViewById(R.id.drawer_layout);
  ActionBarDrawerToggle toggle=new ActionBarDrawerToggle(this,drawer,toolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
  drawer.setDrawerListener(toggle);
  toggle.syncState();
  NavigationView navigationView=(NavigationView)findViewById(R.id.nav_view);
  navigationView.setNavigationItemSelectedListener(this);
}",0.9914182891944264
81210,"@Override public void onPersistSuccess(TagBatchingStrategy.TagBatch<TagData> batch){
  SystemClock.sleep(2000);
  dgListener.finish(batch);
  Log.e(""String_Node_Str"",""String_Node_Str"");
}","@Override public void onPersistSuccess(TagBatchingStrategy.TagBatch<TagData> batch){
  dgListener.finish(batch);
  Log.e(""String_Node_Str"",""String_Node_Str"");
}",0.9221902017291066
81211,"@SuppressWarnings(""String_Node_Str"") @Override public boolean onNavigationItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.nav_camera) {
    batchManager.addToBatch(Collections.singleton(new TagData(perfTag,""String_Node_Str"")));
  }
 else   if (id == R.id.nav_gallery) {
    batchManager.addToBatch(Collections.singleton(new TagData(dgTag,""String_Node_Str"")));
  }
 else   if (id == R.id.nav_slideshow) {
    batchManager.addToBatch(Collections.singleton(new TagData(debugTag,""String_Node_Str"")));
  }
 else   if (id == R.id.nav_manage) {
    batchManager.addToBatch(Collections.singleton(new TagData(perfTag,""String_Node_Str"")));
  }
 else   if (id == R.id.nav_share) {
    batchManager.addToBatch(Collections.singleton(new TagData(dgTag,""String_Node_Str"")));
  }
 else   if (id == R.id.nav_send) {
    batchManager.addToBatch(Collections.singleton(new TagData(perfTag,""String_Node_Str"")));
  }
  DrawerLayout drawer=(DrawerLayout)findViewById(R.id.drawer_layout);
  drawer.closeDrawer(GravityCompat.START);
  return true;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean onNavigationItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.nav_camera) {
    batchManager.addToBatch(Collections.singleton(new TagData(perfTag,""String_Node_Str"" + System.currentTimeMillis())));
  }
 else   if (id == R.id.nav_gallery) {
    batchManager.addToBatch(Collections.singleton(new TagData(dgTag,""String_Node_Str"" + System.currentTimeMillis())));
  }
 else   if (id == R.id.nav_slideshow) {
    batchManager.addToBatch(Collections.singleton(new TagData(debugTag,""String_Node_Str"" + System.currentTimeMillis())));
  }
 else   if (id == R.id.nav_manage) {
    batchManager.addToBatch(Collections.singleton(new TagData(perfTag,""String_Node_Str"")));
  }
 else   if (id == R.id.nav_share) {
    batchManager.addToBatch(Collections.singleton(new TagData(dgTag,""String_Node_Str"")));
  }
 else   if (id == R.id.nav_send) {
    batchManager.addToBatch(Collections.singleton(new TagData(perfTag,""String_Node_Str"")));
  }
  DrawerLayout drawer=(DrawerLayout)findViewById(R.id.drawer_layout);
  drawer.closeDrawer(GravityCompat.START);
  return true;
}",0.960183066361556
81212,"@Override public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer,int par2){
  ItemStack itemstack=null;
  Slot slot=(Slot)this.inventorySlots.get(par2);
  if (slot != null && slot.getHasStack()) {
    ItemStack itemstack1=slot.getStack();
    itemstack=itemstack1.copy();
    if (par2 < 27) {
      if (!this.mergeItemStack(itemstack1,27,63,true)) {
        return null;
      }
    }
 else     if (!this.mergeItemStack(itemstack1,0,27,false)) {
      return null;
    }
    if (itemstack1.stackSize == 0) {
      slot.putStack((ItemStack)null);
    }
 else {
      slot.onSlotChanged();
    }
    if (itemstack1.stackSize == itemstack.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(par1EntityPlayer,itemstack1);
  }
  return itemstack;
}","@Override public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer,int par2){
  ItemStack itemstack=null;
  Slot slot=(Slot)inventorySlots.get(par2);
  if (slot != null && slot.getHasStack()) {
    ItemStack itemstack1=slot.getStack();
    itemstack=itemstack1.copy();
    if (par2 < 27) {
      if (!mergeItemStack(itemstack1,27,63,true)) {
        return null;
      }
    }
 else     if (!mergeItemStack(itemstack1,0,27,false)) {
      return null;
    }
    if (itemstack1.stackSize == 0) {
      slot.putStack((ItemStack)null);
    }
 else {
      slot.onSlotChanged();
    }
    if (itemstack1.stackSize == itemstack.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(par1EntityPlayer,itemstack1);
  }
  return itemstack;
}",0.990125082290981
81213,"public ContainerCanvasBag(ItemStack bag,IInventory playerInventory,IInventory canvasBagInventory){
  this.bag=bag;
  int i=-1 * 18;
  canvasBagInventory.openInventory();
  for (int j=0; j < 3; ++j) {
    for (int k=0; k < 9; ++k) {
      this.addSlotToContainer(new SlotExclude(canvasBagInventory,k + j * 9,8 + k * 18,18 + j * 18,BPItems.canvas_bag));
    }
  }
  for (int j=0; j < 3; ++j) {
    for (int k=0; k < 9; ++k) {
      this.addSlotToContainer(new Slot(playerInventory,k + j * 9 + 9,8 + k * 18,103 + j * 18 + i));
    }
  }
  for (int j=0; j < 9; ++j) {
    if (playerInventory.getStackInSlot(j) == ((InventoryItem)canvasBagInventory).getItem()) {
      this.addSlotToContainer(new SlotLocked(playerInventory,j,8 + j * 18,161 + i));
    }
 else {
      this.addSlotToContainer(new Slot(playerInventory,j,8 + j * 18,161 + i));
    }
    this.addSlotToContainer(new Slot(playerInventory,j,8 + j * 18,161 + i));
  }
  this.canvasBagInventory=canvasBagInventory;
}","public ContainerCanvasBag(ItemStack bag,IInventory playerInventory,IInventory canvasBagInventory){
  this.bag=bag;
  int i=-1 * 18;
  canvasBagInventory.openInventory();
  for (int j=0; j < 3; ++j) {
    for (int k=0; k < 9; ++k) {
      addSlotToContainer(new SlotExclude(canvasBagInventory,k + j * 9,8 + k * 18,18 + j * 18,BPItems.canvas_bag));
    }
  }
  for (int j=0; j < 3; ++j) {
    for (int k=0; k < 9; ++k) {
      addSlotToContainer(new Slot(playerInventory,k + j * 9 + 9,8 + k * 18,103 + j * 18 + i));
    }
  }
  for (int j=0; j < 9; ++j) {
    if (playerInventory.getStackInSlot(j) == ((InventoryItem)canvasBagInventory).getItem()) {
      addSlotToContainer(new SlotLocked(playerInventory,j,8 + j * 18,161 + i));
    }
 else {
      addSlotToContainer(new Slot(playerInventory,j,8 + j * 18,161 + i));
    }
    addSlotToContainer(new Slot(playerInventory,j,8 + j * 18,161 + i));
  }
  this.canvasBagInventory=canvasBagInventory;
}",0.6892950391644909
81214,"@Override public boolean mergeItemStack(ItemStack par1ItemStack,int par2,int par3,boolean par4){
  boolean flag1=false;
  int k=par2;
  if (par4) {
    k=par3 - 1;
  }
  Slot slot;
  ItemStack itemstack1;
  if (par1ItemStack.isStackable()) {
    while (par1ItemStack.stackSize > 0 && (!par4 && k < par3 || par4 && k >= par2)) {
      slot=(Slot)this.inventorySlots.get(k);
      itemstack1=slot.getStack();
      if (itemstack1 != null && itemstack1.getItem() == par1ItemStack.getItem() && (!par1ItemStack.getHasSubtypes() || par1ItemStack.getItemDamage() == itemstack1.getItemDamage()) && ItemStack.areItemStackTagsEqual(par1ItemStack,itemstack1) && slot.isItemValid(par1ItemStack)) {
        int l=itemstack1.stackSize + par1ItemStack.stackSize;
        if (l <= par1ItemStack.getMaxStackSize()) {
          par1ItemStack.stackSize=0;
          itemstack1.stackSize=l;
          slot.onSlotChanged();
          flag1=true;
        }
 else         if (itemstack1.stackSize < par1ItemStack.getMaxStackSize()) {
          par1ItemStack.stackSize-=par1ItemStack.getMaxStackSize() - itemstack1.stackSize;
          itemstack1.stackSize=par1ItemStack.getMaxStackSize();
          slot.onSlotChanged();
          flag1=true;
        }
      }
      if (par4) {
        --k;
      }
 else {
        ++k;
      }
    }
  }
  if (par1ItemStack.stackSize > 0) {
    if (par4) {
      k=par3 - 1;
    }
 else {
      k=par2;
    }
    while (!par4 && k < par3 || par4 && k >= par2) {
      slot=(Slot)this.inventorySlots.get(k);
      itemstack1=slot.getStack();
      if (itemstack1 == null && slot.isItemValid(par1ItemStack)) {
        if (1 < par1ItemStack.stackSize) {
          ItemStack copy=par1ItemStack.copy();
          copy.stackSize=1;
          slot.putStack(copy);
          par1ItemStack.stackSize-=1;
          flag1=true;
          break;
        }
 else {
          slot.putStack(par1ItemStack.copy());
          slot.onSlotChanged();
          par1ItemStack.stackSize=0;
          flag1=true;
          break;
        }
      }
      if (par4) {
        --k;
      }
 else {
        ++k;
      }
    }
  }
  return flag1;
}","@Override public boolean mergeItemStack(ItemStack par1ItemStack,int par2,int par3,boolean par4){
  boolean flag1=false;
  int k=par2;
  if (par4) {
    k=par3 - 1;
  }
  Slot slot;
  ItemStack itemstack1;
  if (par1ItemStack.isStackable()) {
    while (par1ItemStack.stackSize > 0 && (!par4 && k < par3 || par4 && k >= par2)) {
      slot=(Slot)inventorySlots.get(k);
      itemstack1=slot.getStack();
      if (itemstack1 != null && itemstack1.getItem() == par1ItemStack.getItem() && (!par1ItemStack.getHasSubtypes() || par1ItemStack.getItemDamage() == itemstack1.getItemDamage()) && ItemStack.areItemStackTagsEqual(par1ItemStack,itemstack1) && slot.isItemValid(par1ItemStack)) {
        int l=itemstack1.stackSize + par1ItemStack.stackSize;
        if (l <= par1ItemStack.getMaxStackSize()) {
          par1ItemStack.stackSize=0;
          itemstack1.stackSize=l;
          slot.onSlotChanged();
          flag1=true;
        }
 else         if (itemstack1.stackSize < par1ItemStack.getMaxStackSize()) {
          par1ItemStack.stackSize-=par1ItemStack.getMaxStackSize() - itemstack1.stackSize;
          itemstack1.stackSize=par1ItemStack.getMaxStackSize();
          slot.onSlotChanged();
          flag1=true;
        }
      }
      if (par4) {
        --k;
      }
 else {
        ++k;
      }
    }
  }
  if (par1ItemStack.stackSize > 0) {
    if (par4) {
      k=par3 - 1;
    }
 else {
      k=par2;
    }
    while (!par4 && k < par3 || par4 && k >= par2) {
      slot=(Slot)inventorySlots.get(k);
      itemstack1=slot.getStack();
      if (itemstack1 == null && slot.isItemValid(par1ItemStack)) {
        if (1 < par1ItemStack.stackSize) {
          ItemStack copy=par1ItemStack.copy();
          copy.stackSize=1;
          slot.putStack(copy);
          par1ItemStack.stackSize-=1;
          flag1=true;
          break;
        }
 else {
          slot.putStack(par1ItemStack.copy());
          slot.onSlotChanged();
          par1ItemStack.stackSize=0;
          flag1=true;
          break;
        }
      }
      if (par4) {
        --k;
      }
 else {
        ++k;
      }
    }
  }
  return flag1;
}",0.997649271274095
81215,"private void addOreToGenerate(int veinCount,int veinSize,int minY,int maxY,Block block,World world,int chunkX,int chunkZ){
  Random rand=new Random(Integer.valueOf(chunkX).hashCode() + Integer.valueOf(chunkZ).hashCode());
  for (int i=0; i < veinCount; i++) {
    int x=chunkX * 16 + rand.nextInt(16);
    int y=rand.nextInt(maxY - minY) + minY;
    int z=chunkZ * 16 + rand.nextInt(16);
    (new WorldGenMinable(block,veinSize)).generate(world,rand,x,y,z);
  }
}","private void addOreToGenerate(Random random,int veinCount,int veinSize,int minY,int maxY,Block block,World world,int chunkX,int chunkZ){
  for (int i=0; i < veinCount; i++) {
    int x=chunkX * 16 + random.nextInt(16);
    int y=random.nextInt(maxY - minY) + minY;
    int z=chunkZ * 16 + random.nextInt(16);
    (new WorldGenMinable(block,veinSize)).generate(world,random,x,y,z);
  }
}",0.8574793875147232
81216,"@Override public void generate(Random random,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  if (!world.provider.isSurfaceWorld()) {
    return;
  }
  if (Config.generateAmethyst) {
    this.addOreToGenerate(Config.veinCountAmethyst,Config.veinSizeAmethyst,Config.minAmethystY,Config.maxAmethystY,BPBlocks.amethyst_ore,world,chunkX,chunkZ);
  }
  if (Config.generateRuby) {
    this.addOreToGenerate(Config.veinCountRuby,Config.veinSizeRuby,Config.minRubyY,Config.maxRubyY,BPBlocks.ruby_ore,world,chunkX,chunkZ);
  }
  if (Config.generateSapphire) {
    this.addOreToGenerate(Config.veinCountSapphire,Config.veinSizeSapphire,Config.minSapphireY,Config.maxSapphireY,BPBlocks.sapphire_ore,world,chunkX,chunkZ);
  }
  if (Config.generateSilver) {
    this.addOreToGenerate(Config.veinCountSilver,Config.veinSizeSilver,Config.minSilverY,Config.maxSilverY,BPBlocks.silver_ore,world,chunkX,chunkZ);
  }
  if (Config.generateNikolite) {
    this.addOreToGenerate(Config.veinCountNikolite,Config.veinSizeNikolite,Config.minNikoliteY,Config.maxNikoliteY,BPBlocks.nikolite_ore,world,chunkX,chunkZ);
  }
  if (Config.generateTin) {
    this.addOreToGenerate(Config.veinCountTin,Config.veinSizeTin,Config.minTinY,Config.maxTinY,BPBlocks.tin_ore,world,chunkX,chunkZ);
  }
  if (Config.generateCopper) {
    this.addOreToGenerate(Config.veinCountCopper,Config.veinSizeCopper,Config.minCopperY,Config.maxCopperY,BPBlocks.copper_ore,world,chunkX,chunkZ);
  }
  BiomeGenBase bgb=world.getWorldChunkManager().getBiomeGenAt(chunkX * 16 + 16,chunkZ * 16 + 16);
  int n=0;
  if (bgb == BiomeGenBase.birchForest)   n=1;
 else   if (bgb == BiomeGenBase.birchForestHills)   n=1;
 else   if (bgb == BiomeGenBase.plains)   n=1;
 else   if (bgb == BiomeGenBase.forest)   n=4;
 else   if (bgb == BiomeGenBase.roofedForest)   n=4;
  for (int i=0; i < n; i++) {
    int x=chunkX * 16 + random.nextInt(16) + 8;
    int y=random.nextInt(128);
    int z=chunkZ * 16 + random.nextInt(16) + 8;
    new WorldGenFlowers(BPBlocks.indigo_flower).generate(world,random,x,y,z);
  }
  for (int i=0; i < 4; i++) {
    int x=chunkX * 16 + random.nextInt(16);
    int y=32 + random.nextInt(32);
    int z=chunkZ * 16 + random.nextInt(16);
    new WorldGenMarble(BPBlocks.marble,random.nextInt(4096)).generate(world,random,x,y,z);
  }
  if (random.nextDouble() < Config.volcanoSpawnChance) {
    int x=chunkX * 16 + random.nextInt(16);
    int z=chunkZ * 16 + random.nextInt(16);
    int y=world.getHeightValue(x,z) + 20 + random.nextInt(10);
    if (world.getBlock(x,10,z) == Blocks.lava)     new WorldGenVolcano().generate(world,random,x,y,z);
  }
}","@Override public void generate(Random random,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  if (!world.provider.isSurfaceWorld()) {
    return;
  }
  if (Config.generateAmethyst) {
    this.addOreToGenerate(random,Config.veinCountAmethyst,Config.veinSizeAmethyst,Config.minAmethystY,Config.maxAmethystY,BPBlocks.amethyst_ore,world,chunkX,chunkZ);
  }
  if (Config.generateRuby) {
    this.addOreToGenerate(random,Config.veinCountRuby,Config.veinSizeRuby,Config.minRubyY,Config.maxRubyY,BPBlocks.ruby_ore,world,chunkX,chunkZ);
  }
  if (Config.generateSapphire) {
    this.addOreToGenerate(random,Config.veinCountSapphire,Config.veinSizeSapphire,Config.minSapphireY,Config.maxSapphireY,BPBlocks.sapphire_ore,world,chunkX,chunkZ);
  }
  if (Config.generateSilver) {
    this.addOreToGenerate(random,Config.veinCountSilver,Config.veinSizeSilver,Config.minSilverY,Config.maxSilverY,BPBlocks.silver_ore,world,chunkX,chunkZ);
  }
  if (Config.generateNikolite) {
    this.addOreToGenerate(random,Config.veinCountNikolite,Config.veinSizeNikolite,Config.minNikoliteY,Config.maxNikoliteY,BPBlocks.nikolite_ore,world,chunkX,chunkZ);
  }
  if (Config.generateTin) {
    this.addOreToGenerate(random,Config.veinCountTin,Config.veinSizeTin,Config.minTinY,Config.maxTinY,BPBlocks.tin_ore,world,chunkX,chunkZ);
  }
  if (Config.generateCopper) {
    this.addOreToGenerate(random,Config.veinCountCopper,Config.veinSizeCopper,Config.minCopperY,Config.maxCopperY,BPBlocks.copper_ore,world,chunkX,chunkZ);
  }
  BiomeGenBase bgb=world.getWorldChunkManager().getBiomeGenAt(chunkX * 16 + 16,chunkZ * 16 + 16);
  int n=0;
  if (bgb == BiomeGenBase.birchForest)   n=1;
 else   if (bgb == BiomeGenBase.birchForestHills)   n=1;
 else   if (bgb == BiomeGenBase.plains)   n=1;
 else   if (bgb == BiomeGenBase.forest)   n=4;
 else   if (bgb == BiomeGenBase.roofedForest)   n=4;
  for (int i=0; i < n; i++) {
    int x=chunkX * 16 + random.nextInt(16) + 8;
    int y=random.nextInt(128);
    int z=chunkZ * 16 + random.nextInt(16) + 8;
    new WorldGenFlowers(BPBlocks.indigo_flower).generate(world,random,x,y,z);
  }
  for (int i=0; i < 4; i++) {
    int x=chunkX * 16 + random.nextInt(16);
    int y=32 + random.nextInt(32);
    int z=chunkZ * 16 + random.nextInt(16);
    new WorldGenMarble(BPBlocks.marble,random.nextInt(4096)).generate(world,random,x,y,z);
  }
  if (random.nextDouble() < Config.volcanoSpawnChance) {
    int x=chunkX * 16 + random.nextInt(16);
    int z=chunkZ * 16 + random.nextInt(16);
    int y=world.getHeightValue(x,z) + 20 + random.nextInt(10);
    if (world.getBlock(x,10,z) == Blocks.lava)     new WorldGenVolcano().generate(world,random,x,y,z);
  }
}",0.9908530894157176
81217,"/** 
 * Can this block stay at this position.  Similar to canPlaceBlockAt except gets checked often with plants.
 */
@Override public boolean canBlockStay(World world,int x,int y,int z){
  if (world.getBlock(x,y,z) != this)   return super.canBlockStay(world,x,y,z);
  if ((world.getBlock(x,y - 1,z) instanceof BlockFarmland) || (world.getBlock(x,y - 1,z) instanceof BlockCrop)) {
    return true;
  }
 else   return false;
}","/** 
 * Can this block stay at this position.  Similar to canPlaceBlockAt except gets checked often with plants.
 */
@Override public boolean canBlockStay(World world,int x,int y,int z){
  if (world.getBlock(x,y,z) != this)   return super.canBlockStay(world,x,y,z);
  return (world.getBlock(x,y - 1,z) instanceof BlockFarmland) || (world.getBlock(x,y - 1,z) instanceof BlockCrop);
}",0.9305210918114144
81218,"public static void init(){
  basalt=new BlockStoneOre(Refs.BASALT_NAME);
  marble=new BlockStoneOre(Refs.MARBLE_NAME);
  basalt_cobble=new BlockStoneOre(Refs.BASALTCOBBLE_NAME);
  basalt_brick=new BlockStoneOre(Refs.BASALTBRICK_NAME);
  marble_brick=new BlockStoneOre(Refs.MARBLEBRICK_NAME);
  cracked_basalt=new BlockCrackedBasalt(Refs.CRACKED_BASALT);
  basaltbrick_cracked=new BlockStoneOre(Refs.CRACKEDBASALTBRICK_NAME);
  basalt_brick_small=new BlockStoneOre(Refs.SMALLBASALTBRICK_NAME);
  marble_brick_small=new BlockStoneOre(Refs.SMALLMARBLEBRICK_NAME);
  fancy_basalt=new BlockStoneOre(Refs.CHISELEDBASALTBRICK_NAME);
  fancy_marble=new BlockStoneOre(Refs.CHISELEDMARBLEBRICK_NAME);
  marble_tile=new BlockStoneOreConnected(Refs.MARBLETILE_NAME);
  basalt_tile=new BlockStoneOreConnected(Refs.BASALTTILE_NAME);
  marble_paver=new BlockStoneOre(Refs.MARBLEPAVER_NAME);
  basalt_paver=new BlockStoneOre(Refs.BASALTPAVER_NAME);
  nikolite_ore=new BlockItemOre(Refs.NIKOLITEORE_NAME);
  ruby_ore=new BlockItemOre(Refs.RUBYORE_NAME);
  sapphire_ore=new BlockItemOre(Refs.SAPPHIREORE_NAME);
  amethyst_ore=new BlockItemOre(Refs.AMETHYSTORE_NAME);
  copper_ore=new BlockStoneOre(Refs.COPPERORE_NAME);
  silver_ore=new BlockStoneOre(Refs.SILVERORE_NAME);
  tin_ore=new BlockStoneOre(Refs.TINORE_NAME);
  ruby_block=new BlockStoneOre(Refs.RUBYBLOCK_NAME);
  sapphire_block=new BlockStoneOre(Refs.SAPPHIREBLOCK_NAME);
  amethyst_block=new BlockStoneOre(Refs.AMETHYSTBLOCK_NAME);
  nikolite_block=new BlockStoneOre(Refs.NIKOLITEBLOCK_NAME);
  copper_block=new BlockStoneOre(Refs.COPPERBLOCK_NAME);
  silver_block=new BlockStoneOre(Refs.SILVERBLOCK_NAME);
  tin_block=new BlockStoneOre(Refs.TINBLOCK_NAME);
  flax_crop=new BlockCrop().setBlockName(Refs.FLAXCROP_NAME);
  indigo_flower=new BlockCustomFlower(Refs.INDIGOFLOWER_NAME);
  alloy_furnace=new BlockAlloyFurnace();
  lamp_white=new BlockCustomLamp(Refs.LAMP_WHITE,0,false);
  invertedlamp_white=new BlockCustomLamp(Refs.INVERTEDLAMP_WHITE,0,true);
  lamp_orange=new BlockCustomLamp(Refs.LAMP_ORANGE,1,false);
  invertedlamp_orange=new BlockCustomLamp(Refs.INVERTEDLAMP_ORANGE,1,true);
  lamp_magenta=new BlockCustomLamp(Refs.LAMP_MAGENTA,2,false);
  invertedlamp_magenta=new BlockCustomLamp(Refs.INVERTEDLAMP_MAGENTA,2,true);
  lamp_lightblue=new BlockCustomLamp(Refs.LAMP_LIGHTBLUE,3,false);
  invertedlamp_lightblue=new BlockCustomLamp(Refs.INVERTEDLAMP_LIGHTBLUE,3,true);
  lamp_yellow=new BlockCustomLamp(Refs.LAMP_YELLOW,4,false);
  invertedlamp_yellow=new BlockCustomLamp(Refs.INVERTEDLAMP_YELLOW,4,true);
  lamp_lime=new BlockCustomLamp(Refs.LAMP_LIME,5,false);
  invertedlamp_lime=new BlockCustomLamp(Refs.INVERTEDLAMP_LIME,5,true);
  lamp_pink=new BlockCustomLamp(Refs.LAMP_PINK,6,false);
  invertedlamp_pink=new BlockCustomLamp(Refs.INVERTEDLAMP_PINK,6,true);
  lamp_gray=new BlockCustomLamp(Refs.LAMP_GRAY,7,false);
  invertedlamp_gray=new BlockCustomLamp(Refs.INVERTEDLAMP_GRAY,7,true);
  lamp_lightgray=new BlockCustomLamp(Refs.LAMP_LIGHTGRAY,8,false);
  invertedlamp_lightgray=new BlockCustomLamp(Refs.INVERTEDLAMP_LIGHTGRAY,8,true);
  lamp_cyan=new BlockCustomLamp(Refs.LAMP_CYAN,9,false);
  invertedlamp_cyan=new BlockCustomLamp(Refs.INVERTEDLAMP_CYAN,9,true);
  lamp_purple=new BlockCustomLamp(Refs.LAMP_PURPLE,10,false);
  invertedlamp_purple=new BlockCustomLamp(Refs.INVERTEDLAMP_PURPLE,10,true);
  lamp_blue=new BlockCustomLamp(Refs.LAMP_BLUE,11,false);
  invertedlamp_blue=new BlockCustomLamp(Refs.INVERTEDLAMP_BLUE,11,true);
  lamp_brown=new BlockCustomLamp(Refs.LAMP_BROWN,12,false);
  invertedlamp_brown=new BlockCustomLamp(Refs.INVERTEDLAMP_BROWN,12,true);
  lamp_green=new BlockCustomLamp(Refs.LAMP_GREEN,13,false);
  invertedlamp_green=new BlockCustomLamp(Refs.INVERTEDLAMP_GREEN,13,true);
  lamp_red=new BlockCustomLamp(Refs.LAMP_RED,14,false);
  invertedlamp_red=new BlockCustomLamp(Refs.INVERTEDLAMP_RED,14,true);
  lamp_black=new BlockCustomLamp(Refs.LAMP_BLACK,15,false);
  invertedlamp_black=new BlockCustomLamp(Refs.INVERTEDLAMP_BLACK,15,true);
  registerBlocks();
}","public static void init(){
  basalt=new BlockStoneOre(Refs.BASALT_NAME);
  marble=new BlockStoneOre(Refs.MARBLE_NAME);
  basalt_cobble=new BlockStoneOre(Refs.BASALTCOBBLE_NAME);
  basalt_brick=new BlockStoneOre(Refs.BASALTBRICK_NAME);
  marble_brick=new BlockStoneOre(Refs.MARBLEBRICK_NAME);
  cracked_basalt=new BlockCrackedBasalt(Refs.CRACKED_BASALT);
  basaltbrick_cracked=new BlockStoneOre(Refs.CRACKEDBASALTBRICK_NAME);
  basalt_brick_small=new BlockStoneOre(Refs.SMALLBASALTBRICK_NAME);
  marble_brick_small=new BlockStoneOre(Refs.SMALLMARBLEBRICK_NAME);
  fancy_basalt=new BlockStoneOre(Refs.CHISELEDBASALTBRICK_NAME);
  fancy_marble=new BlockStoneOre(Refs.CHISELEDMARBLEBRICK_NAME);
  marble_tile=new BlockStoneOreConnected(Refs.MARBLETILE_NAME);
  basalt_tile=new BlockStoneOreConnected(Refs.BASALTTILE_NAME);
  marble_paver=new BlockStoneOre(Refs.MARBLEPAVER_NAME);
  basalt_paver=new BlockStoneOre(Refs.BASALTPAVER_NAME);
  nikolite_ore=new BlockItemOre(Refs.NIKOLITEORE_NAME);
  ruby_ore=new BlockItemOre(Refs.RUBYORE_NAME);
  sapphire_ore=new BlockItemOre(Refs.SAPPHIREORE_NAME);
  amethyst_ore=new BlockItemOre(Refs.AMETHYSTORE_NAME);
  copper_ore=new BlockStoneOre(Refs.COPPERORE_NAME);
  silver_ore=new BlockStoneOre(Refs.SILVERORE_NAME);
  tin_ore=new BlockStoneOre(Refs.TINORE_NAME);
  ruby_block=new BlockStoneOre(Refs.RUBYBLOCK_NAME);
  sapphire_block=new BlockStoneOre(Refs.SAPPHIREBLOCK_NAME);
  amethyst_block=new BlockStoneOre(Refs.AMETHYSTBLOCK_NAME);
  nikolite_block=new BlockStoneOre(Refs.NIKOLITEBLOCK_NAME);
  copper_block=new BlockStoneOre(Refs.COPPERBLOCK_NAME);
  silver_block=new BlockStoneOre(Refs.SILVERBLOCK_NAME);
  tin_block=new BlockStoneOre(Refs.TINBLOCK_NAME);
  flax_crop=new BlockCrop().setBlockName(Refs.FLAXCROP_NAME);
  indigo_flower=new BlockCustomFlower(Refs.INDIGOFLOWER_NAME);
  alloy_furnace=new BlockAlloyFurnace();
  registerBlocks();
}",0.6352624495289367
81219,"private static void registerBlocks(){
  GameRegistry.registerBlock(basalt,Refs.BASALT_NAME);
  GameRegistry.registerBlock(basalt_cobble,Refs.BASALTCOBBLE_NAME);
  GameRegistry.registerBlock(basalt_brick,Refs.BASALTBRICK_NAME);
  GameRegistry.registerBlock(basaltbrick_cracked,Refs.CRACKEDBASALTBRICK_NAME);
  GameRegistry.registerBlock(fancy_basalt,Refs.CHISELEDBASALTBRICK_NAME);
  GameRegistry.registerBlock(basalt_brick_small,Refs.SMALLBASALTBRICK_NAME);
  GameRegistry.registerBlock(cracked_basalt,Refs.CRACKED_BASALT);
  GameRegistry.registerBlock(basalt_tile,Refs.BASALTTILE_NAME);
  GameRegistry.registerBlock(basalt_paver,Refs.BASALTPAVER_NAME);
  GameRegistry.registerBlock(marble,Refs.MARBLE_NAME);
  GameRegistry.registerBlock(marble_brick,Refs.MARBLEBRICK_NAME);
  GameRegistry.registerBlock(fancy_marble,Refs.CHISELEDMARBLEBRICK_NAME);
  GameRegistry.registerBlock(marble_brick_small,Refs.SMALLMARBLEBRICK_NAME);
  GameRegistry.registerBlock(marble_tile,Refs.MARBLETILE_NAME);
  GameRegistry.registerBlock(marble_paver,Refs.MARBLEPAVER_NAME);
  GameRegistry.registerBlock(nikolite_ore,Refs.NIKOLITEORE_NAME);
  GameRegistry.registerBlock(copper_ore,Refs.COPPERORE_NAME);
  GameRegistry.registerBlock(silver_ore,Refs.SILVERORE_NAME);
  GameRegistry.registerBlock(tin_ore,Refs.TINORE_NAME);
  GameRegistry.registerBlock(ruby_ore,Refs.RUBYORE_NAME);
  GameRegistry.registerBlock(sapphire_ore,Refs.SAPPHIREORE_NAME);
  GameRegistry.registerBlock(amethyst_ore,Refs.AMETHYSTORE_NAME);
  GameRegistry.registerBlock(ruby_block,Refs.RUBYBLOCK_NAME);
  GameRegistry.registerBlock(sapphire_block,Refs.SAPPHIREBLOCK_NAME);
  GameRegistry.registerBlock(amethyst_block,Refs.AMETHYSTBLOCK_NAME);
  GameRegistry.registerBlock(nikolite_block,Refs.NIKOLITEBLOCK_NAME);
  GameRegistry.registerBlock(copper_block,Refs.COPPERBLOCK_NAME);
  GameRegistry.registerBlock(silver_block,Refs.SILVERBLOCK_NAME);
  GameRegistry.registerBlock(tin_block,Refs.TINBLOCK_NAME);
  GameRegistry.registerBlock(flax_crop,Refs.FLAXCROP_NAME);
  GameRegistry.registerBlock(indigo_flower,Refs.INDIGOFLOWER_NAME);
  GameRegistry.registerBlock(alloy_furnace,Refs.ALLOYFURNACE_NAME);
  GameRegistry.registerBlock(lamp_white,Refs.LAMP_WHITE);
  GameRegistry.registerBlock(invertedlamp_white,Refs.INVERTEDLAMP_WHITE);
  GameRegistry.registerBlock(lamp_orange,Refs.LAMP_ORANGE);
  GameRegistry.registerBlock(invertedlamp_orange,Refs.INVERTEDLAMP_ORANGE);
  GameRegistry.registerBlock(lamp_magenta,Refs.LAMP_MAGENTA);
  GameRegistry.registerBlock(invertedlamp_magenta,Refs.INVERTEDLAMP_MAGENTA);
  GameRegistry.registerBlock(lamp_lightblue,Refs.LAMP_LIGHTBLUE);
  GameRegistry.registerBlock(invertedlamp_lightblue,Refs.INVERTEDLAMP_LIGHTBLUE);
  GameRegistry.registerBlock(lamp_yellow,Refs.LAMP_YELLOW);
  GameRegistry.registerBlock(invertedlamp_yellow,Refs.INVERTEDLAMP_YELLOW);
  GameRegistry.registerBlock(lamp_lime,Refs.LAMP_LIME);
  GameRegistry.registerBlock(invertedlamp_lime,Refs.INVERTEDLAMP_LIME);
  GameRegistry.registerBlock(lamp_pink,Refs.LAMP_PINK);
  GameRegistry.registerBlock(invertedlamp_pink,Refs.INVERTEDLAMP_PINK);
  GameRegistry.registerBlock(lamp_gray,Refs.LAMP_GRAY);
  GameRegistry.registerBlock(invertedlamp_gray,Refs.INVERTEDLAMP_GRAY);
  GameRegistry.registerBlock(lamp_lightgray,Refs.LAMP_LIGHTGRAY);
  GameRegistry.registerBlock(invertedlamp_lightgray,Refs.INVERTEDLAMP_LIGHTGRAY);
  GameRegistry.registerBlock(lamp_cyan,Refs.LAMP_CYAN);
  GameRegistry.registerBlock(invertedlamp_cyan,Refs.INVERTEDLAMP_CYAN);
  GameRegistry.registerBlock(lamp_purple,Refs.LAMP_PURPLE);
  GameRegistry.registerBlock(invertedlamp_purple,Refs.INVERTEDLAMP_PURPLE);
  GameRegistry.registerBlock(lamp_blue,Refs.LAMP_BLUE);
  GameRegistry.registerBlock(invertedlamp_blue,Refs.INVERTEDLAMP_BLUE);
  GameRegistry.registerBlock(lamp_brown,Refs.LAMP_BROWN);
  GameRegistry.registerBlock(invertedlamp_brown,Refs.INVERTEDLAMP_BROWN);
  GameRegistry.registerBlock(lamp_green,Refs.LAMP_GREEN);
  GameRegistry.registerBlock(invertedlamp_green,Refs.INVERTEDLAMP_GREEN);
  GameRegistry.registerBlock(lamp_red,Refs.LAMP_RED);
  GameRegistry.registerBlock(invertedlamp_red,Refs.INVERTEDLAMP_RED);
  GameRegistry.registerBlock(lamp_black,Refs.LAMP_BLACK);
  GameRegistry.registerBlock(invertedlamp_black,Refs.INVERTEDLAMP_BLACK);
}","private static void registerBlocks(){
  GameRegistry.registerBlock(basalt,Refs.BASALT_NAME);
  GameRegistry.registerBlock(basalt_cobble,Refs.BASALTCOBBLE_NAME);
  GameRegistry.registerBlock(basalt_brick,Refs.BASALTBRICK_NAME);
  GameRegistry.registerBlock(basaltbrick_cracked,Refs.CRACKEDBASALTBRICK_NAME);
  GameRegistry.registerBlock(fancy_basalt,Refs.CHISELEDBASALTBRICK_NAME);
  GameRegistry.registerBlock(basalt_brick_small,Refs.SMALLBASALTBRICK_NAME);
  GameRegistry.registerBlock(cracked_basalt,Refs.CRACKED_BASALT);
  GameRegistry.registerBlock(basalt_tile,Refs.BASALTTILE_NAME);
  GameRegistry.registerBlock(basalt_paver,Refs.BASALTPAVER_NAME);
  GameRegistry.registerBlock(marble,Refs.MARBLE_NAME);
  GameRegistry.registerBlock(marble_brick,Refs.MARBLEBRICK_NAME);
  GameRegistry.registerBlock(fancy_marble,Refs.CHISELEDMARBLEBRICK_NAME);
  GameRegistry.registerBlock(marble_brick_small,Refs.SMALLMARBLEBRICK_NAME);
  GameRegistry.registerBlock(marble_tile,Refs.MARBLETILE_NAME);
  GameRegistry.registerBlock(marble_paver,Refs.MARBLEPAVER_NAME);
  GameRegistry.registerBlock(nikolite_ore,Refs.NIKOLITEORE_NAME);
  GameRegistry.registerBlock(copper_ore,Refs.COPPERORE_NAME);
  GameRegistry.registerBlock(silver_ore,Refs.SILVERORE_NAME);
  GameRegistry.registerBlock(tin_ore,Refs.TINORE_NAME);
  GameRegistry.registerBlock(ruby_ore,Refs.RUBYORE_NAME);
  GameRegistry.registerBlock(sapphire_ore,Refs.SAPPHIREORE_NAME);
  GameRegistry.registerBlock(amethyst_ore,Refs.AMETHYSTORE_NAME);
  GameRegistry.registerBlock(ruby_block,Refs.RUBYBLOCK_NAME);
  GameRegistry.registerBlock(sapphire_block,Refs.SAPPHIREBLOCK_NAME);
  GameRegistry.registerBlock(amethyst_block,Refs.AMETHYSTBLOCK_NAME);
  GameRegistry.registerBlock(nikolite_block,Refs.NIKOLITEBLOCK_NAME);
  GameRegistry.registerBlock(copper_block,Refs.COPPERBLOCK_NAME);
  GameRegistry.registerBlock(silver_block,Refs.SILVERBLOCK_NAME);
  GameRegistry.registerBlock(tin_block,Refs.TINBLOCK_NAME);
  GameRegistry.registerBlock(flax_crop,Refs.FLAXCROP_NAME);
  GameRegistry.registerBlock(indigo_flower,Refs.INDIGOFLOWER_NAME);
  GameRegistry.registerBlock(alloy_furnace,Refs.ALLOYFURNACE_NAME);
}",0.668425954672462
81220,"private void generateLavaColumn(World world,int x,int topY,int z,Random rand){
  if (rand.nextDouble() < Config.volcanoActiveToInactiveRatio) {
    world.setBlock(x,topY,z,BPBlocks.cracked_basalt);
  }
 else {
    world.setBlock(x,topY + 1,z,Blocks.lava);
    world.setBlock(x,topY,z,Blocks.lava);
  }
  for (int y=10; y < topY; y++) {
    world.setBlock(x + 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x - 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z + 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z - 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z,Blocks.lava,0,0);
  }
}","private void generateLavaColumn(World world,int x,int topY,int z,Random rand){
  if (rand.nextDouble() < Config.volcanoActiveToInactiveRatio) {
    world.setBlock(x,topY,z,BPBlocks.cracked_basalt);
  }
 else {
    world.setBlock(x,topY + 1,z,Blocks.lava);
    world.setBlock(x,topY,z,Blocks.lava);
  }
  for (int y=topY - 1; y >= 10; y--) {
    world.setBlock(x + 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x - 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z + 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z - 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z,Blocks.lava,0,0);
  }
}",0.7434377646062659
81221,"private void generateLavaColumn(World world,int x,int topY,int z,Random rand){
  if (rand.nextDouble() < Config.volcanoActiveToInactiveRatio) {
    world.setBlock(x,topY,z,BPBlocks.cracked_basalt);
  }
 else {
    world.setBlock(x,topY + 1,z,Blocks.lava);
    world.setBlock(x,topY,z,Blocks.lava);
  }
  for (int y=10; y < topY; y++) {
    world.setBlock(x,y,z,Blocks.lava,0,0);
    world.setBlock(x + 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x - 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z + 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z - 1,BPBlocks.basalt,0,0);
  }
}","private void generateLavaColumn(World world,int x,int topY,int z,Random rand){
  if (rand.nextDouble() < Config.volcanoActiveToInactiveRatio) {
    world.setBlock(x,topY,z,BPBlocks.cracked_basalt);
  }
 else {
    world.setBlock(x,topY + 1,z,Blocks.lava);
    world.setBlock(x,topY,z,Blocks.lava);
  }
  for (int y=10; y < topY; y++) {
    world.setBlock(x + 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x - 1,y,z,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z + 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z - 1,BPBlocks.basalt,0,0);
    world.setBlock(x,y,z,Blocks.lava,0,0);
  }
}",0.9268707482993196
81222,"public void generate(World world,Random rand,int middleX,int vulcanoHeight,int middleZ){
  List<Pos>[] distMap=calculateDistMap();
  boolean first=true;
  for (int dist=0; dist < distMap.length; dist++) {
    List<Pos> distList=distMap[dist];
    boolean isFinished=true;
    for (    Pos p : distList) {
      int worldHeight=world.getHeightValue(p.x + middleX,p.z + middleZ) - 1;
      int posHeight=first ? vulcanoHeight : getNewVulcanoHeight(worldHeight,p,rand,dist);
      if (posHeight >= 0 && (posHeight > worldHeight || canReplace(world,p.x + middleX,posHeight,p.z + middleZ))) {
        vulcanoMap.put(p,posHeight);
        if (!first) {
          for (int i=posHeight; i > 0 && (i > worldHeight || canReplace(world,p.x + middleX,i,p.z + middleZ)); i--) {
            world.setBlock(p.x + middleX,i,p.z + middleZ,BPBlocks.basalt,0,0);
          }
          for (int i=posHeight + 1; i < vulcanoHeight; i++) {
            if (canReplace(world,p.x + middleX,i,p.z + middleZ))             world.setBlock(p.x + middleX,i,p.z + middleZ,Blocks.air,0,0);
          }
        }
        isFinished=false;
      }
      first=false;
    }
    if (isFinished)     break;
  }
  generateLavaColumn(world,middleX,vulcanoHeight,middleZ,rand);
}","public void generate(World world,Random rand,int middleX,int vulcanoHeight,int middleZ){
  List<Pos>[] distMap=calculateDistMap();
  boolean first=true;
  for (int dist=0; dist < distMap.length; dist++) {
    List<Pos> distList=distMap[dist];
    boolean isFinished=true;
    for (    Pos p : distList) {
      int worldHeight=world.getHeightValue(p.x + middleX,p.z + middleZ) - 1;
      int posHeight=first ? vulcanoHeight : getNewVulcanoHeight(worldHeight,p,rand,dist);
      if (posHeight >= 0 && (posHeight > worldHeight || canReplace(world,p.x + middleX,posHeight,p.z + middleZ))) {
        vulcanoMap.put(p,posHeight);
        if (!first) {
          for (int i=posHeight; i > 0 && (i > worldHeight || canReplace(world,p.x + middleX,i,p.z + middleZ)); i--) {
            world.setBlock(p.x + middleX,i,p.z + middleZ,BPBlocks.basalt,0,0);
          }
          for (int i=posHeight + 1; i < vulcanoHeight; i++) {
            if (canReplace(world,p.x + middleX,i,p.z + middleZ) && world.getBlock(p.x + middleX,i,p.z + middleZ).getMaterial() != Material.water)             world.setBlock(p.x + middleX,i,p.z + middleZ,Blocks.air,0,0);
          }
        }
        isFinished=false;
      }
      first=false;
    }
    if (isFinished)     break;
  }
  generateLavaColumn(world,middleX,vulcanoHeight,middleZ,rand);
}",0.9683222526398124
81223,"@Override public int getLightValue(IBlockAccess world,int x,int y,int z){
}","@Override public int getLightValue(IBlockAccess world,int x,int y,int z){
  int metadata=world.getBlockMetadata(x,y,z);
  if ((metadata & 8) != 0) {
    return 13;
  }
  return 0;
}",0.5859375
81224,"@Override @SideOnly(Side.CLIENT) public IIcon getIcon(int side,int meta){
}","@Override @SideOnly(Side.CLIENT) public IIcon getIcon(int side,int meta){
  ForgeDirection s=ForgeDirection.getOrientation(side);
  if ((meta & 7) == side) {
    if ((meta & 8) != 0) {
      return this.textureFrontOn;
    }
 else {
      return this.textureFrontOff;
    }
  }
switch (s) {
case UP:
    return textureTop;
case DOWN:
  return textureBottom;
case EAST:
case NORTH:
case SOUTH:
case WEST:
case UNKNOWN:
return textureSide;
default :
break;
}
return null;
}",0.2747252747252747
81225,"/** 
 * Function gets called every tick. Do not forget to call the super method!
 */
@Override public void updateEntity(){
}","/** 
 * Function gets called every tick. Do not forget to call the super method!
 */
@Override public void updateEntity(){
  super.updateEntity();
  if (!metaSet) {
    metaSet=true;
    int newMeta=getBlockMetadata();
    newMeta=newMeta & 7;
    newMeta|=(isActive == true ? 8 : 0);
    getWorldObj().setBlockMetadataWithNotify(xCoord,yCoord,zCoord,newMeta,2);
  }
}",0.5040650406504065
81226,"/** 
 * Ticks the block if it's been scheduled
 */
public void updateTick(World world,int x,int y,int z,Random random){
  super.updateTick(world,x,y,z,random);
  if (world.getBlockLightValue(x,y + 1,z) >= 9) {
    int l=world.getBlockMetadata(x,y,z);
    if (l < 7) {
      float f=this.func_149864_n(world,x,y,z);
      if (random.nextInt((int)(25.0F / f) + 1) == 0) {
        ++l;
        world.setBlockMetadataWithNotify(x,y,z,l,2);
      }
    }
  }
}","/** 
 * Ticks the block if it's been scheduled
 */
public void updateTick(World world,int x,int y,int z,Random random){
  super.updateTick(world,x,y,z,random);
  if (world.getBlockLightValue(x,y + 1,z) >= 9) {
    int meta=world.getBlockMetadata(x,y,z);
    if ((meta == 4) || (meta == 5)) {
      return;
    }
    if ((world.getBlock(x,y - 1,z) != Blocks.farmland) || (world.getBlock(x,y - 1,z) == Blocks.air) || (!world.isAirBlock(x,y + 1,z))) {
      return;
    }
    if (random.nextInt(30) == 0) {
      world.setBlockMetadataWithNotify(x,y,z,meta + 1,2);
      if (meta == 3)       world.setBlock(x,y + 1,z,BPBlocks.flax_crop,5,2);
    }
  }
}",0.669683257918552
81227,"public static void init(){
  GameRegistry.registerItem(malachite,Refs.ITEMMALACHITE_NAME);
  GameRegistry.registerItem(sapphire,Refs.ITEMSAPPHIRE_NAME);
  GameRegistry.registerItem(ruby,Refs.ITEMRUBY_NAME);
  GameRegistry.registerItem(nikolite,Refs.ITEMNIKOLITE_NAME);
  GameRegistry.registerItem(copper_ingot,Refs.ITEMCOPPERINGOT_NAME);
  GameRegistry.registerItem(silver_ingot,Refs.ITEMSILVERINGOT_NAME);
  GameRegistry.registerItem(tin_ingot,Refs.ITEMTININGOT_NAME);
  GameRegistry.registerItem(ruby_axe,Refs.RUBYAXE_NAME);
  GameRegistry.registerItem(ruby_sword,Refs.RUBYSWORD_NAME);
  GameRegistry.registerItem(ruby_pickaxe,Refs.RUBYPICKAXE_NAME);
  GameRegistry.registerItem(ruby_spade,Refs.RUBYSPADE_NAME);
  GameRegistry.registerItem(ruby_hoe,Refs.RUBYHOE_NAME);
  GameRegistry.registerItem(ruby_sickle,Refs.RUBYSICKLE_NAME);
  GameRegistry.registerItem(sapphire_axe,Refs.SAPPHIREAXE_NAME);
  GameRegistry.registerItem(sapphire_sword,Refs.SAPPHIRESWORD_NAME);
  GameRegistry.registerItem(sapphire_pickaxe,Refs.SAPPHIREPICKAXE_NAME);
  GameRegistry.registerItem(sapphire_spade,Refs.SAPPHIRESPADE_NAME);
  GameRegistry.registerItem(sapphire_hoe,Refs.SAPPHIREHOE_NAME);
  GameRegistry.registerItem(sapphire_sickle,Refs.SAPPHIRESICKLE_NAME);
  GameRegistry.registerItem(malachite_axe,Refs.MALACHITEAXE_NAME);
  GameRegistry.registerItem(malachite_sword,Refs.MALACHITESWORD_NAME);
  GameRegistry.registerItem(malachite_pickaxe,Refs.MALACHITEPICKAXE_NAME);
  GameRegistry.registerItem(malachite_spade,Refs.MALACHITESPADE_NAME);
  GameRegistry.registerItem(malachite_hoe,Refs.MALACHITEHOE_NAME);
  GameRegistry.registerItem(malachite_sickle,Refs.MALACHITESICKLE_NAME);
  GameRegistry.registerItem(wood_sickle,Refs.WOODSICKLE_NAME);
  GameRegistry.registerItem(stone_sickle,Refs.STONESICKLE_NAME);
  GameRegistry.registerItem(iron_sickle,Refs.IRONSICKLE_NAME);
  GameRegistry.registerItem(gold_sickle,Refs.GOLDSICKLE_NAME);
  GameRegistry.registerItem(diamond_sickle,Refs.DIAMONDSICKLE_NAME);
  GameRegistry.registerItem(flax_seed,Refs.FLAXSEED_NAME);
  GameRegistry.registerItem(indigo_dye,Refs.INDIGODYE_NAME);
}","public static void init(){
  GameRegistry.registerItem(malachite,Refs.ITEMMALACHITE_NAME);
  GameRegistry.registerItem(sapphire,Refs.ITEMSAPPHIRE_NAME);
  GameRegistry.registerItem(ruby,Refs.ITEMRUBY_NAME);
  GameRegistry.registerItem(nikolite,Refs.ITEMNIKOLITE_NAME);
  GameRegistry.registerItem(copper_ingot,Refs.ITEMCOPPERINGOT_NAME);
  GameRegistry.registerItem(silver_ingot,Refs.ITEMSILVERINGOT_NAME);
  GameRegistry.registerItem(tin_ingot,Refs.ITEMTININGOT_NAME);
  GameRegistry.registerItem(ruby_axe,Refs.RUBYAXE_NAME);
  GameRegistry.registerItem(ruby_sword,Refs.RUBYSWORD_NAME);
  GameRegistry.registerItem(ruby_pickaxe,Refs.RUBYPICKAXE_NAME);
  GameRegistry.registerItem(ruby_spade,Refs.RUBYSPADE_NAME);
  GameRegistry.registerItem(ruby_hoe,Refs.RUBYHOE_NAME);
  GameRegistry.registerItem(ruby_sickle,Refs.RUBYSICKLE_NAME);
  GameRegistry.registerItem(sapphire_axe,Refs.SAPPHIREAXE_NAME);
  GameRegistry.registerItem(sapphire_sword,Refs.SAPPHIRESWORD_NAME);
  GameRegistry.registerItem(sapphire_pickaxe,Refs.SAPPHIREPICKAXE_NAME);
  GameRegistry.registerItem(sapphire_spade,Refs.SAPPHIRESPADE_NAME);
  GameRegistry.registerItem(sapphire_hoe,Refs.SAPPHIREHOE_NAME);
  GameRegistry.registerItem(sapphire_sickle,Refs.SAPPHIRESICKLE_NAME);
  GameRegistry.registerItem(malachite_axe,Refs.MALACHITEAXE_NAME);
  GameRegistry.registerItem(malachite_sword,Refs.MALACHITESWORD_NAME);
  GameRegistry.registerItem(malachite_pickaxe,Refs.MALACHITEPICKAXE_NAME);
  GameRegistry.registerItem(malachite_spade,Refs.MALACHITESPADE_NAME);
  GameRegistry.registerItem(malachite_hoe,Refs.MALACHITEHOE_NAME);
  GameRegistry.registerItem(malachite_sickle,Refs.MALACHITESICKLE_NAME);
  GameRegistry.registerItem(wood_sickle,Refs.WOODSICKLE_NAME);
  GameRegistry.registerItem(stone_sickle,Refs.STONESICKLE_NAME);
  GameRegistry.registerItem(iron_sickle,Refs.IRONSICKLE_NAME);
  GameRegistry.registerItem(gold_sickle,Refs.GOLDSICKLE_NAME);
  GameRegistry.registerItem(diamond_sickle,Refs.DIAMONDSICKLE_NAME);
  GameRegistry.registerItem(flax_seed,Refs.FLAXSEED_NAME);
  GameRegistry.registerItem(indigo_dye,Refs.INDIGODYE_NAME);
  MinecraftForge.addGrassSeed(new ItemStack(flax_seed),5);
}",0.986237462094705
81228,"public boolean onItemUse(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (side != 1) {
    return false;
  }
 else   if (player.canPlayerEdit(x,y,z,side,itemStack) && player.canPlayerEdit(x,y + 1,z,side,itemStack)) {
    if (world.getBlock(x,y,z).canSustainPlant(world,x,y,z,ForgeDirection.UP,this) && world.isAirBlock(x,y + 1,z)) {
      world.setBlock(x,y + 1,z,this.field_150925_a);
      --itemStack.stackSize;
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}","public boolean onItemUse(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (side != 1) {
    return false;
  }
 else   if (player.canPlayerEdit(x,y,z,side,itemStack) && player.canPlayerEdit(x,y + 1,z,side,itemStack)) {
    if (world.getBlock(x,y,z).canSustainPlant(world,x,y,z,ForgeDirection.UP,this) && world.isAirBlock(x,y + 1,z)) {
      world.setBlock(x,y + 1,z,this.field_150925_a,0,2);
      --itemStack.stackSize;
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}",0.9965635738831616
81229,"public BlockCrop(){
  this.setTickRandomly(true);
  float f=0.5F;
  this.setBlockBounds(0.5F - f,0.0F,0.5F - f,0.5F + f,0.25F,0.5F + f);
  this.setCreativeTab((CreativeTabs)null);
  this.setHardness(0.0F);
  this.setStepSound(soundTypeGrass);
  this.disableStats();
  this.setBlockName(Refs.FLAXCROP_NAME);
}","public BlockCrop(){
  this.setTickRandomly(true);
  float f=0.5F;
  this.setBlockBounds(0.5F - f,0.0F,0.5F - f,0.5F + f,0.25F,0.5F + f);
  this.setCreativeTab((CreativeTabs)null);
  this.setHardness(0.0F);
  this.setStepSound(soundTypeGrass);
  this.disableStats();
  this.setBlockName(Refs.FLAXCROP_NAME);
  this.setBlockTextureName(Refs.MODID + ""String_Node_Str"" + Refs.FLAXCROP_NAME);
}",0.8837876614060258
81230,"@EventHandler public void PreInit(FMLPreInitializationEvent event){
  event.getModMetadata().version=Refs.fullVersionString();
  Logger log=event.getModLog();
  Configuration config=new Configuration(event.getSuggestedConfigurationFile());
  config.load();
  Config.setUp(config);
  config.save();
  Blocks.init();
  Items.init();
}","@EventHandler public void PreInit(FMLPreInitializationEvent event){
  event.getModMetadata().version=Refs.fullVersionString();
  Logger log=event.getModLog();
  Configuration config=new Configuration(event.getSuggestedConfigurationFile());
  CustomTabs.init();
  config.load();
  Config.setUp(config);
  config.save();
  Blocks.init();
  Items.init();
}",0.9693430656934306
81231,"public BlockGemOre(String type){
  super(Material.iron);
  this.setCreativeTab(BluePower.creativeTab);
  this.setStepSound(soundTypeStone);
  this.setHardness(2.5F);
  this.setResistance(10.0F);
  this.textureName=Refs.MODID + ""String_Node_Str"" + type;
  this.setBlockName(type);
}","public BlockGemOre(String type){
  super(Material.iron);
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
  this.setStepSound(soundTypeStone);
  this.setHardness(2.5F);
  this.setResistance(10.0F);
  this.textureName=Refs.MODID + ""String_Node_Str"" + type;
  this.setBlockName(type);
}",0.9438596491228072
81232,"public BlockNikoliteBlock(String name){
  super(Material.rock);
  this.textureName=Refs.MODID + ""String_Node_Str"" + name;
  this.setCreativeTab(CreativeTabs.tabBlock);
  this.setStepSound(soundTypeStone);
  this.setHardness(1.9F);
  this.setResistance(10.0F);
  this.setBlockName(name);
}","public BlockNikoliteBlock(String name){
  super(Material.rock);
  this.textureName=Refs.MODID + ""String_Node_Str"" + name;
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
  this.setStepSound(soundTypeStone);
  this.setHardness(1.9F);
  this.setResistance(10.0F);
  this.setBlockName(name);
}",0.952054794520548
81233,"public BlockNikoliteOre(String name){
  super(Material.rock);
  this.textureName=Refs.MODID + ""String_Node_Str"" + name;
  this.setCreativeTab(BluePower.creativeTab);
  this.setStepSound(soundTypeStone);
  this.setHardness(1.9F);
  this.setResistance(10.0F);
  this.setBlockName(name);
}","public BlockNikoliteOre(String name){
  super(Material.rock);
  this.textureName=Refs.MODID + ""String_Node_Str"" + name;
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
  this.setStepSound(soundTypeStone);
  this.setHardness(1.9F);
  this.setResistance(10.0F);
  this.setBlockName(name);
}",0.9448275862068966
81234,"public BlockStoneOre(String name){
  super(Material.rock);
  this.setBlockName(name);
  this.setHardness(1.9F);
  if (name == Refs.BASALT_NAME) {
    this.setResistance(25.0F);
  }
 else {
    this.setResistance(10.0F);
  }
  this.textureName=Refs.MODID + ""String_Node_Str"" + name;
  this.setCreativeTab(BluePower.creativeTab);
  this.setStepSound(soundTypeStone);
}","public BlockStoneOre(String name){
  super(Material.rock);
  this.setBlockName(name);
  this.setHardness(1.9F);
  if (name == Refs.BASALT_NAME) {
    this.setResistance(25.0F);
  }
 else {
    this.setResistance(10.0F);
  }
  this.textureName=Refs.MODID + ""String_Node_Str"" + name;
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
  this.setStepSound(soundTypeStone);
}",0.9567567567567568
81235,"public ContainerAlloyFurnace(){
  super(Material.rock);
  this.setHardness(1.5F);
  this.setResistance(20.0F);
  this.setCreativeTab(BluePower.creativeTab);
}","public ContainerAlloyFurnace(){
  super(Material.rock);
  this.setHardness(1.5F);
  this.setResistance(20.0F);
  this.setCreativeTab(CustomTabs.tabBluePowerMachines);
}",0.9079754601226994
81236,"public ItemMalachite(){
  super();
  this.setUnlocalizedName(Refs.ITEMMALACHITE_NAME);
  this.setCreativeTab(BluePower.creativeTab);
}","public ItemMalachite(){
  super();
  this.setUnlocalizedName(Refs.ITEMMALACHITE_NAME);
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
}",0.8913043478260869
81237,"public ItemNikolite(){
  super();
  this.setUnlocalizedName(Refs.ITEMNIKOLITE_NAME);
  this.setCreativeTab(BluePower.creativeTab);
}","public ItemNikolite(){
  super();
  this.setUnlocalizedName(Refs.ITEMNIKOLITE_NAME);
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
}",0.8897058823529411
81238,"public ItemRuby(){
  super();
  this.setUnlocalizedName(Refs.ITEMRUBY_NAME);
  this.setCreativeTab(BluePower.creativeTab);
}","public ItemRuby(){
  super();
  this.setUnlocalizedName(Refs.ITEMRUBY_NAME);
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
}",0.8828125
81239,"public ItemSapphire(){
  super();
  this.setUnlocalizedName(Refs.ITEMSAPPHIRE_NAME);
  this.setCreativeTab(BluePower.creativeTab);
}","public ItemSapphire(){
  super();
  this.setUnlocalizedName(Refs.ITEMSAPPHIRE_NAME);
  this.setCreativeTab(CustomTabs.tabBluePowerBlocks);
}",0.8897058823529411
81240,"public void setup(){
  if (!isSetup) {
    fileDescriptor=NativeEpoll.addFile(epollFd,NativeEpoll.EPOLL_CTL_ADD,filename,NativeEpoll.EPOLLPRI | NativeEpoll.EPOLLIN | NativeEpoll.EPOLLET);
    isSetup=true;
  }
}","public void setup(){
  if (!isSetup) {
    epollFd=NativeEpoll.epollCreate();
    fileDescriptor=NativeEpoll.addFile(epollFd,NativeEpoll.EPOLL_CTL_ADD,filename,NativeEpoll.EPOLLPRI | NativeEpoll.EPOLLIN | NativeEpoll.EPOLLET);
    isSetup=true;
  }
}",0.915401301518438
81241,"public void teardown(){
  stop();
  if (isSetup) {
    NativeEpoll.removeFile(epollFd,fileDescriptor);
  }
  isSetup=false;
}","public void teardown(){
  stop();
  if (isSetup) {
    NativeEpoll.removeFile(epollFd,fileDescriptor);
  }
  NativeEpoll.shutdown(epollFd);
  isSetup=false;
}",0.8833922261484098
81242,"private BeagleBoneBlack(){
  createPins();
  createBuses();
  createProperties();
  createShutdownHook();
}","private BeagleBoneBlack(){
  super();
  createPins();
  createBuses();
  createProperties();
}",0.8258706467661692
81243,"private RaspberryPi(){
  if (getRevision() >= 4) {
    createPinsRev2();
  }
 else {
    createPinsRev1();
  }
}","private RaspberryPi(){
  super();
  if (getRevision() >= 4) {
    createPinsRev2();
  }
 else {
    createPinsRev1();
  }
}",0.9531914893617022
81244,"public void setDuty(double duty){
  if (duty < 0.0 || duty > 1.0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.duty=duty;
  setPwmImpl(getFrequency(),duty);
}","public void setDuty(double duty){
  if (duty < 0.0 || duty > 1.0) {
    throw new IllegalArgumentException(""String_Node_Str"" + duty);
  }
  this.duty=duty;
  setPwmImpl(getFrequency(),duty);
}",0.9814323607427056
81245,"public void setFrequency(double frequency){
  if (frequency < 1.0f) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.frequency=frequency;
  setPwmImpl(frequency,getDuty());
}","public void setFrequency(double frequency){
  if (frequency < 1.0f) {
    throw new IllegalArgumentException(""String_Node_Str"" + frequency);
  }
  this.frequency=frequency;
  setPwmImpl(frequency,getDuty());
}",0.9704433497536946
81246,"public Blinker(DigitalOutput output){
  executorService=Executors.newScheduledThreadPool(1);
  this.output=output;
}","public Blinker(DigitalOutput output){
  executorService=Executors.newScheduledThreadPool(1,new DaemonThreadFactory());
  this.output=output;
}",0.8992248062015504
81247,"public void dutyTransition(Pwm pwm,double toDuty,int milliseconds,Easing easing){
  long startTime=System.currentTimeMillis();
  double startDuty=pwm.getDuty();
  double diff=Math.abs(startDuty - toDuty);
  long currentTime=0;
  while (currentTime < milliseconds) {
    currentTime=System.currentTimeMillis() - startTime;
    double currentDuty=diff * easing.easeInOut(currentTime,milliseconds);
    if (startDuty < toDuty) {
      pwm.setDuty(startDuty + currentDuty);
    }
 else {
      pwm.setDuty(startDuty - currentDuty);
    }
  }
}","public void dutyTransition(Pwm pwm,double toDuty,int milliseconds,Easing easing,EasingOptions option){
  long startTime=System.currentTimeMillis();
  double startDuty=pwm.getDuty();
  double diff=Math.abs(startDuty - toDuty);
  long currentTime=0;
  while (currentTime < milliseconds) {
    currentTime=System.currentTimeMillis() - startTime;
    double currentDuty=diff * option.calculate(easing,currentTime,milliseconds);
    if (startDuty < toDuty) {
      double duty=startDuty + currentDuty;
      if (duty > 1.0) {
        duty=1.0;
      }
      if (duty < 0.0) {
        duty=0.0;
      }
      pwm.setDuty(duty);
    }
 else {
      double duty=startDuty - currentDuty;
      if (duty > 1.0) {
        duty=1.0;
      }
      if (duty < 0.0) {
        duty=0.0;
      }
      pwm.setDuty(duty);
    }
  }
}",0.7208271787296898
81248,"public void frequencyTransition(Pwm pwm,double toFrequency,int milliseconds,Easing easing){
  long startTime=System.currentTimeMillis();
  double startFrequency=pwm.getFrequency();
  double diff=Math.abs(startFrequency - toFrequency);
  long currentTime=0;
  while (currentTime < milliseconds) {
    currentTime=System.currentTimeMillis() - startTime;
    double currentDuty=diff * easing.easeInOut(currentTime,milliseconds);
    if (startFrequency < toFrequency) {
      pwm.setDuty(startFrequency + currentDuty);
    }
 else {
      pwm.setDuty(startFrequency - currentDuty);
    }
  }
}","public void frequencyTransition(Pwm pwm,double toFrequency,int milliseconds,Easing easing,EasingOptions option){
  long startTime=System.currentTimeMillis();
  double startFrequency=pwm.getFrequency();
  double diff=Math.abs(startFrequency - toFrequency);
  long currentTime=0;
  while (currentTime < milliseconds) {
    currentTime=System.currentTimeMillis() - startTime;
    double currentDuty=diff * option.calculate(easing,currentTime,milliseconds);
    if (startFrequency < toFrequency) {
      pwm.setDuty(startFrequency + currentDuty);
    }
 else {
      pwm.setDuty(startFrequency - currentDuty);
    }
  }
}",0.7479270315091211
81249,"private void createScheduler(){
  if (executorService != null) {
    return;
  }
  executorService=Executors.newScheduledThreadPool(1);
  future=executorService.scheduleAtFixedRate(this,0,periodInNanoseconds,TimeUnit.NANOSECONDS);
}","private void createScheduler(){
  if (executorService != null) {
    return;
  }
  executorService=Executors.newScheduledThreadPool(1,new DaemonThreadFactory());
  future=executorService.scheduleAtFixedRate(this,0,periodInNanoseconds,TimeUnit.NANOSECONDS);
}",0.946938775510204
81250,"public void fadeOut(int milliseconds,Easing easing){
  pwmController.dutyTransition(pwm,0.0,milliseconds,easing);
}","public void fadeOut(int milliseconds,Easing easing){
  pwmController.dutyTransition(pwm,0.0,milliseconds,easing,EasingOptions.EaseOut);
}",0.9126984126984128
81251,"public void fadeIn(int milliseconds,Easing easing){
  pwmController.dutyTransition(pwm,1.0,milliseconds,easing);
}","public void fadeIn(int milliseconds,Easing easing){
  pwmController.dutyTransition(pwm,1.0,milliseconds,easing,EasingOptions.EaseIn);
}",0.9156626506024096
81252,"public Led(Pwm pwm){
  this.pwm=pwm;
  this.pwmController=new PwmController();
}","public Led(Pwm pwm,Easing defaultEasing){
  this.pwm=pwm;
  this.defaultEasing=defaultEasing;
  this.pwmController=new PwmController();
  pwm.setFrequency(10000.0);
  pwm.setDuty(0.0);
  pwm.enable();
}",0.5673758865248227
81253,"public static void main(String[] args) throws IOException {
  Board board=Platform.createBoard();
  DigitalOutput output=board.getPin(BBBNames.P8_12).as(DigitalOutput.class);
  output.write(Signal.High);
  output.toggle();
  BulldogUtil.sleepMs(500);
  output.high();
  BulldogUtil.sleepMs(500);
  output.low();
  BulldogUtil.sleepMs(500);
  output.applySignal(Signal.High);
  BulldogUtil.sleepMs(500);
  output.blinkTimes(500,3);
  BulldogUtil.sleepMs(2000);
  output.startBlinking(100,5000);
  BulldogUtil.sleepMs(5500);
  output.startBlinking(200);
  while (true) {
    BulldogUtil.sleepMs(50);
  }
}","public static void main(String[] args) throws IOException {
  Board board=Platform.createBoard();
  DigitalOutput output=board.getPin(BBBNames.P8_12).as(DigitalOutput.class);
  output.write(Signal.High);
  output.toggle();
  BulldogUtil.sleepMs(500);
  output.high();
  BulldogUtil.sleepMs(500);
  output.low();
  BulldogUtil.sleepMs(500);
  output.applySignal(Signal.High);
  BulldogUtil.sleepMs(500);
  output.blinkTimes(500,3);
  output.awaitBlinkingStopped();
  output.startBlinking(100,5000);
  output.awaitBlinkingStopped();
  output.startBlinking(200);
  while (true) {
    BulldogUtil.sleepMs(50);
  }
}",0.914332784184514
81254,"public void echoAndWait(String path,String value,int waitMs){
  try {
    waitForFileCreation(path,WAIT_TIMEOUT_MS);
    BufferedWriter writer=new BufferedWriter(new FileWriter(path));
    writer.write(value);
    BulldogUtil.sleepMs(waitMs);
    writer.close();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public void echoAndWait(String path,String value,int waitMs){
  try {
    System.out.println(path + ""String_Node_Str"" + value);
    waitForFileCreation(path,WAIT_TIMEOUT_MS);
    BufferedWriter writer=new BufferedWriter(new FileWriter(path));
    writer.write(value);
    BulldogUtil.sleepMs(waitMs);
    writer.close();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9196675900277008
81255,"public static void initialize(){
  if (isInitialized) {
    return;
  }
  setup();
  isInitialized=true;
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      deinitialize();
    }
  }
);
}","public static void initialize(){
  if (isInitialized) {
    return;
  }
  setup();
  enableGpio();
  isInitialized=true;
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      deinitialize();
    }
  }
);
}",0.9659574468085106
81256,"public byte readState(){
  try {
    byte buffer=getLastKnownState();
    switchInputsHigh();
    byte readByte=connection.readByte();
    writeState(buffer);
    return readByte;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return (byte)0;
}","/** 
 * This method preservers the outputs' state and adjust the state of the inputs. Before it reads, it sets all the input pins that are to be read to high, according to the PCF8574 datasheet.
 * @return the state read from the PCF857
 */
public byte readState(){
  try {
    byte buffer=getState();
    switchInputsHigh();
    byte readByte=connection.readByte();
    buffer=applyReadInputs(readByte,buffer);
    writeState(buffer);
    return readByte;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return (byte)0;
}",0.5937106918238994
81257,"private void switchInputsHigh(){
  byte highInputState=getLastKnownState();
  for (  Pin pin : getPins()) {
    if (pin.isFeatureActive(DigitalInput.class)) {
      highInputState=BitMagic.setBit(highInputState,pin.getAddress(),1);
    }
  }
  writeState(highInputState);
}","private void switchInputsHigh(){
  byte highInputState=getState();
  for (  Pin pin : getPins()) {
    if (pin.isFeatureActive(DigitalInput.class)) {
      highInputState=BitMagic.setBit(highInputState,pin.getAddress(),1);
    }
  }
  writeState(highInputState);
}",0.9832402234636872
81258,"@Override public void setup(){
  byte state=expander.getLastKnownState();
  byte newState=(byte)BitMagic.setBit(state,getPin().getAddress(),1);
  expander.writeState(newState);
}","@Override public void setup(){
  byte state=expander.getState();
  byte newState=(byte)BitMagic.setBit(state,getPin().getAddress(),1);
  expander.writeState(newState);
}",0.9740634005763688
81259,"@Override public Signal getAppliedSignal(){
  return Signal.fromNumericValue(BitMagic.getBit(expander.getLastKnownState(),getPin().getAddress()));
}","@Override public Signal getAppliedSignal(){
  return Signal.fromNumericValue(BitMagic.getBit(expander.getState(),getPin().getAddress()));
}",0.9686411149825784
81260,"@Override protected void applySignalImpl(Signal signal){
  byte state=expander.getLastKnownState();
  byte newState=(byte)BitMagic.setBit(state,getPin().getAddress(),signal.getNumericValue());
  expander.writeState(newState);
}","@Override protected void applySignalImpl(Signal signal){
  byte state=expander.getState();
  byte newState=(byte)BitMagic.setBit(state,getPin().getAddress(),signal.getNumericValue());
  expander.writeState(newState);
}",0.9797752808988764
81261,"public static int setBit(int dword,int bitPosition,int value){
  if (value == 1) {
    dword|=(value << bitPosition);
  }
 else {
    dword&=~(1 << bitPosition);
  }
  return dword;
}","public static byte setBit(byte b,int bitPosition,int value){
  if (value == 1) {
    b|=(value << bitPosition);
  }
 else {
    b&=~(1 << bitPosition);
  }
  return b;
}",0.9034090909090908
81262,"public byte readState(){
  try {
    byte readByte=connection.readByte();
    return readByte;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return (byte)0;
}","public byte readState(){
  try {
    byte buffer=getLastKnownState();
    switchInputsHigh();
    byte readByte=connection.readByte();
    writeState(buffer);
    return readByte;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return (byte)0;
}",0.8036951501154734
81263,"@Override public void interruptRequest(InterruptEventArgs args){
  byte lastKnownState=(byte)state;
  state=readState();
  for (int i=0; i <= 7; i++) {
    Pin currentPin=getPin(i);
    if (!currentPin.isFeatureActive(PCF8574DigitalInput.class)) {
      continue;
    }
    PCF8574DigitalInput input=currentPin.as(PCF8574DigitalInput.class);
    int lastKnownPinState=BitMagic.getBit(lastKnownState,currentPin.getAddress());
    int currentState=BitMagic.getBit(state,currentPin.getAddress());
    if (lastKnownPinState == currentState) {
      continue;
    }
    input.handleInterruptEvent(Signal.fromNumericValue(lastKnownState),Signal.fromNumericValue(currentState));
  }
}","@Override public void interruptRequest(InterruptEventArgs args){
  byte lastKnownState=(byte)state;
  byte readState=readState();
  for (int i=0; i <= 7; i++) {
    Pin currentPin=getPin(i);
    if (!currentPin.isFeatureActive(PCF8574DigitalInput.class)) {
      continue;
    }
    PCF8574DigitalInput input=currentPin.as(PCF8574DigitalInput.class);
    int lastKnownPinState=BitMagic.getBit(lastKnownState,currentPin.getAddress());
    int currentState=BitMagic.getBit(readState,currentPin.getAddress());
    if (lastKnownPinState == currentState) {
      continue;
    }
    input.handleInterruptEvent(Signal.fromNumericValue(lastKnownState),Signal.fromNumericValue(currentState));
  }
}",0.9875640087783468
81264,"public static void main(String[] args) throws IOException {
  Board board=Platform.createBoard();
  DigitalOutput output=board.getPin(BBBNames.P8_12).as(DigitalOutput.class);
  output.write(Signal.High);
  output.toggle();
  BulldogUtil.sleepMs(500);
  output.high();
  BulldogUtil.sleepMs(500);
  output.low();
  BulldogUtil.sleepMs(500);
  output.applySignal(Signal.High);
  output.blinkTimes(500,3);
  BulldogUtil.sleepMs(2000);
  output.startBlinking(50,3000);
  BulldogUtil.sleepMs(3500);
  output.startBlinking(100);
  while (true) {
    BulldogUtil.sleepMs(50);
  }
}","public static void main(String[] args) throws IOException {
  Board board=Platform.createBoard();
  DigitalOutput output=board.getPin(BBBNames.P8_12).as(DigitalOutput.class);
  output.write(Signal.High);
  output.toggle();
  BulldogUtil.sleepMs(500);
  output.high();
  BulldogUtil.sleepMs(500);
  output.low();
  BulldogUtil.sleepMs(500);
  output.applySignal(Signal.High);
  BulldogUtil.sleepMs(500);
  output.blinkTimes(500,3);
  BulldogUtil.sleepMs(2000);
  output.startBlinking(50,3000);
  BulldogUtil.sleepMs(3500);
  output.startBlinking(100);
  while (true) {
    BulldogUtil.sleepMs(50);
  }
}",0.9761904761904762
81265,"private void createPins(){
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,6,8,3));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,7,8,4));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,2,8,5));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,3,8,6));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,2,8,7));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,3,8,8));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,5,8,9));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,4,8,10));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,13,8,11));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,12,8,12));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,23,8,13));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,26,8,14));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,15,8,15));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,14,8,16));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,27,8,17));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,1,8,18));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,22,8,19));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,31,8,20));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,30,8,21));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,5,8,22));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,4,8,23));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,1,8,24));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,0,8,25));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,29,8,26));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,22,8,27));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,24,8,28));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,23,8,29));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,25,8,30));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,10,8,31));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,11,8,32));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,9,8,33));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,17,8,34));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,8,8,35));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,16,8,36));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,14,8,37));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,1,8,38));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,12,8,39));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,14,8,40));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,10,8,41));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,11,8,42));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,8,8,43));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,9,8,44));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,6,8,45));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,27,8,46));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,30,9,11));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,28,9,12));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,31,9,13));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,18,9,14));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,16,9,15));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,19,9,16));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,5,9,17));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,4,9,18));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,15,9,19));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,14,9,20));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,3,9,21));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,2,9,22));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,17,9,23));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,12,9,24));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",3,21,9,25));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,13,9,26));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",3,19,9,27));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",3,17,9,28));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",3,15,9,29));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",3,16,9,30));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",3,14,9,31));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,7,9,33,4));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,9,9,35,6));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,8,9,36,5));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,5,9,37,2));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,6,9,38,3));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,3,9,39,0));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,4,9,40,1));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,20,9,31));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,7,9,31));
  addPwmToPin(getPinByName(""String_Node_Str""));
  addPwmToPin(getPinByName(""String_Node_Str""));
  addPwmToPin(getPinByName(""String_Node_Str""));
  addPwmToPin(getPinByName(""String_Node_Str""));
}","private void createPins(){
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,6,8,3));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,7,8,4));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,2,8,5));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,3,8,6));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,2,8,7));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,3,8,8));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,5,8,9));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,4,8,10));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,13,8,11));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,12,8,12));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,23,8,13));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,26,8,14));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,15,8,15));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,14,8,16));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,27,8,17));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,1,8,18));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,22,8,19));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,31,8,20));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,30,8,21));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,5,8,22));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,4,8,23));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,1,8,24));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,0,8,25));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,29,8,26));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,22,8,27));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,24,8,28));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,23,8,29));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,25,8,30));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,10,8,31));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,11,8,32));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,9,8,33));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,17,8,34));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,8,8,35));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,16,8,36));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,14,8,37));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,1,8,38));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,12,8,39));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,14,8,40));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,10,8,41));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,11,8,42));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,8,8,43));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,9,8,44));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,6,8,45));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",2,27,8,46));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,30,9,11));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,28,9,12));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,31,9,13));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,18,9,14));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,16,9,15));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,19,9,16));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,5,9,17));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,4,9,18));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,15,9,19));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,14,9,20));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,3,9,21));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,2,9,22));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",1,17,9,23));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,12,9,24));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",3,21,9,25));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,13,9,26));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",3,19,9,27));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",3,17,9,28));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",3,15,9,29));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",3,16,9,30));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",3,14,9,31));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,7,9,33,4));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,9,9,35,6));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,8,9,36,5));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,5,9,37,2));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,6,9,38,3));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,3,9,39,0));
  getPins().add(createAnalogInputPin(""String_Node_Str"",""String_Node_Str"",2,4,9,40,1));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,20,9,31));
  getPins().add(createDigitalIOPin(""String_Node_Str"",""String_Node_Str"",0,7,9,31));
  addPwmToPin(getPinByName(""String_Node_Str""));
  addPwmToPin(getPinByName(""String_Node_Str""));
  addPwmToPin(getPinByName(""String_Node_Str""));
  addPwmToPin(getPinByName(""String_Node_Str""));
  addPwmToPin(getPinByName(""String_Node_Str""));
  addPwmToPin(getPinByName(""String_Node_Str""));
  addPwmToPin(getPinByName(""String_Node_Str""));
  addPwmToPin(getPinByName(""String_Node_Str""));
  addPwmToPin(getPinByName(""String_Node_Str""));
  addPwmToPin(getPinByName(""String_Node_Str""));
}",0.978082191780822
81266,"private void createBuses(){
  getI2cBuses().add(new BBBI2cBus(""String_Node_Str""));
  getI2cBuses().add(new BBBI2cBus(""String_Node_Str""));
}","private void createBuses(){
  detectI2cBuses();
  detectSerialBuses();
}",0.5592417061611374
81267,"public BeagleBonePin(String name,String internalName,int bank,int pinIndex,int port,int indexOnPort){
  super(name,internalName,32 * bank + pinIndex);
  this.port=port;
  this.indexOnPort=indexOnPort;
}","public BeagleBonePin(String name,String am335xName,int bank,int pinIndex,int port,int indexOnPort){
  super(name,32 * bank + pinIndex);
  this.port=port;
  this.indexOnPort=indexOnPort;
  this.am335xName=am335xName;
}",0.548926014319809
81268,"@Override public void addInterruptListener(InterruptListener listener){
  super.addInterruptListener(listener);
  if (areInterruptsEnabled() && interruptControl.isRunning()) {
    interruptControl.start();
  }
}","@Override public void addInterruptListener(InterruptListener listener){
  super.addInterruptListener(listener);
  if (areInterruptsEnabled() && !interruptControl.isRunning()) {
    interruptControl.start();
  }
}",0.9976359338061466
81269,"public void run(){
  while (running) {
    NativePollResult[] results=NativeEpoll.waitForInterrupt(epollFd);
    if (results == null) {
      continue;
    }
    for (    NativePollResult result : results) {
      if (lastEdge != null && lastEdge.equals(result.getEdge())) {
        continue;
      }
      Edge edge=result.getEdge();
      long delta=System.currentTimeMillis() - lastInterruptTime;
      if (delta <= this.debounceMilliseconds) {
        continue;
      }
      lastInterruptTime=System.currentTimeMillis();
      lastEdge=result.getEdge();
      interrupt.fireInterruptEvent(new InterruptEventArgs(edge));
    }
  }
}","public void run(){
  while (running) {
    NativePollResult[] results=NativeEpoll.waitForInterrupt(epollFd);
    if (results == null) {
      continue;
    }
    for (    NativePollResult result : results) {
      Edge edge=result.getEdge();
      if (lastEdge != null && lastEdge.equals(edge)) {
        continue;
      }
      long delta=System.currentTimeMillis() - lastInterruptTime;
      if (delta <= this.debounceMilliseconds) {
        continue;
      }
      lastInterruptTime=System.currentTimeMillis();
      lastEdge=result.getEdge();
      interrupt.fireInterruptEvent(new InterruptEventArgs(edge));
    }
  }
}",0.9301587301587302
81270,"private JsonElement toJsonElement(final Range range){
  if (range.size() == 1 && !(range.get(0) instanceof SimpleNote)) {
    return new JsonArray();
  }
  final JsonElement[] noteJsons=new JsonElement[range.size()];
  int i=0;
  for (  final Note note : range.values()) {
    noteJsons[i++]=new Gson().toJsonTree(this.toJsonElement(note));
  }
  return new Gson().toJsonTree(noteJsons);
}","private JsonElement toJsonElement(final Range range){
  if (range.size() == 1 && !(range.values().iterator().next() instanceof SimpleNote)) {
    return new JsonArray();
  }
  final JsonElement[] noteJsons=new JsonElement[range.size()];
  int i=0;
  for (  final Note note : range.values()) {
    noteJsons[i++]=SMALL_GSON_OBJECT.toJsonTree(this.toJsonElement(note));
  }
  return SMALL_GSON_OBJECT.toJsonTree(noteJsons);
}",0.8669950738916257
81271,"@Override public String toString(final Range range){
  return new GsonBuilder().setPrettyPrinting().create().toJson(this.toJsonElement(range));
}","@Override public String toString(final Range range){
  return GSON_OBJECT.toJson(this.toJsonElement(range));
}",0.792156862745098
81272,"public StreamInfo getStreamInfo(ConverterData converterData){
  return new StreamInfo(converterData.jorbisData.info.channels,converterData.pcmData.baos == null ? 0 : (int)(converterData.pcmData.baos.size() * 1.0 / converterData.jorbisData.info.channels),2,converterData.jorbisData.info.rate,false,true,""String_Node_Str"");
}","public StreamInfo getStreamInfo(ConverterData converterData){
  return new StreamInfo(converterData.jorbisData.info.channels,converterData.pcmData.baos == null ? 0 : (int)(converterData.pcmData.baos.size() * 1.0 / Byte.SIZE),2,converterData.jorbisData.info.rate,false,true,""String_Node_Str"");
}",0.9238249594813616
81273,"public StreamInfo getStreamInfo(final ConverterData converterData){
  return new StreamInfo(converterData.jorbisData.info.channels,converterData.pcmData.baos == null ? 0 : (int)(converterData.pcmData.baos.size() * 1.0 * converterData.jorbisData.info.channels* 2 / Byte.SIZE),2,converterData.jorbisData.info.rate,false,true,""String_Node_Str"");
}","public StreamInfo getStreamInfo(final ConverterData converterData){
  return new StreamInfo(converterData.jorbisData.info.channels,converterData.pcmData.baos == null ? 0 : (int)(converterData.pcmData.baos.size() * 1.0 * converterData.jorbisData.info.channels / Byte.SIZE),2,converterData.jorbisData.info.rate,false,true,""String_Node_Str"");
}",0.9956204379562044
81274,"@Override public int findSustain(final double[] magnitudeArray,final int decay) throws SoundTransformException {
  int sustainIndex=decay;
  final int start=decay;
  final double[] sustainArray=new double[magnitudeArray.length - start];
  System.arraycopy(magnitudeArray,start,sustainArray,0,magnitudeArray.length - start);
  try {
    MathArrays.checkOrder(sustainArray,MathArrays.OrderDirection.DECREASING,true);
  }
 catch (  final NonMonotonicSequenceException nmse) {
    this.log(new LogEvent(MagnitudeADSRHelperEventCode.FOUND_EDGE,nmse));
    sustainIndex=nmse.getIndex() - 1;
  }
  return sustainIndex;
}","@Override public int findSustain(final double[] magnitudeArray,final int decay) throws SoundTransformException {
  int sustainIndex=decay;
  final int start=decay;
  final double[] sustainArray=new double[magnitudeArray.length - start];
  System.arraycopy(magnitudeArray,start,sustainArray,0,magnitudeArray.length - start);
  try {
    MathArrays.checkOrder(sustainArray,MathArrays.OrderDirection.DECREASING,true);
  }
 catch (  final NonMonotonicSequenceException nmse) {
    this.log(new LogEvent(MagnitudeADSRHelperEventCode.FOUND_EDGE,nmse));
    sustainIndex=nmse.getIndex() - 1;
  }
  return Math.max(decay,sustainIndex);
}",0.9871175523349436
81275,"/** 
 * @param noteInfo
 * @param sound
 * @param channel1
 * @param noteInfoValues
 * @return
 * @throws SoundTransformException
 */
private Note newNote(final SimpleNoteInfo noteInfo,final Sound sound,final Channel channel1,final Map<String,Object> noteInfoValues) throws SoundTransformException {
  final ComputeMagnitudeSoundTransform soundTransform=new ComputeMagnitudeSoundTransform(DefaultSoundToNoteService.ACCURATE_STEP);
  final double[] magnitudeArray=soundTransform.transform(channel1);
  noteInfoValues.put(SimpleNoteInfo.ATTACK_KEY,0);
  noteInfoValues.put(SimpleNoteInfo.DECAY_KEY,this.adsrHelper.findDecay(magnitudeArray,((Integer)noteInfoValues.get(SimpleNoteInfo.ATTACK_KEY)).intValue()) * DefaultSoundToNoteService.ACCURATE_STEP);
  noteInfoValues.put(SimpleNoteInfo.SUSTAIN_KEY,this.adsrHelper.findSustain(magnitudeArray,((Integer)noteInfoValues.get(SimpleNoteInfo.DECAY_KEY)).intValue()) * DefaultSoundToNoteService.ACCURATE_STEP);
  noteInfoValues.put(SimpleNoteInfo.RELEASE_KEY,this.adsrHelper.findRelease(magnitudeArray) * DefaultSoundToNoteService.ACCURATE_STEP);
  noteInfoValues.put(SimpleNoteInfo.FREQUENCY_KEY,noteInfo.hasFrequency() ? noteInfo.getFrequency() : this.frequencyHelper.findFrequency(sound));
  noteInfoValues.put(SimpleNoteInfo.NAME_KEY,noteInfo.getName());
  return new SimpleNote(new SimpleNoteInfo(noteInfoValues),sound.getChannels());
}","/** 
 * @param noteInfo
 * @param sound
 * @param channel1
 * @param noteInfoValues
 * @return
 * @throws SoundTransformException
 */
private Note newNote(final SimpleNoteInfo noteInfo,final Sound sound,final Channel channel1,final Map<String,Object> noteInfoValues) throws SoundTransformException {
  final ComputeMagnitudeSoundTransform soundTransform=new ComputeMagnitudeSoundTransform(DefaultSoundToNoteService.ACCURATE_STEP);
  final double[] magnitudeArray=soundTransform.transform(channel1);
  noteInfoValues.put(SimpleNoteInfo.ATTACK_KEY,0);
  noteInfoValues.put(SimpleNoteInfo.DECAY_KEY,this.adsrHelper.findDecay(magnitudeArray,(int)((Integer)noteInfoValues.get(SimpleNoteInfo.ATTACK_KEY)).intValue() / DefaultSoundToNoteService.ACCURATE_STEP) * DefaultSoundToNoteService.ACCURATE_STEP);
  noteInfoValues.put(SimpleNoteInfo.SUSTAIN_KEY,this.adsrHelper.findSustain(magnitudeArray,(int)((Integer)noteInfoValues.get(SimpleNoteInfo.DECAY_KEY)).intValue() / DefaultSoundToNoteService.ACCURATE_STEP) * DefaultSoundToNoteService.ACCURATE_STEP);
  noteInfoValues.put(SimpleNoteInfo.RELEASE_KEY,this.adsrHelper.findRelease(magnitudeArray) * DefaultSoundToNoteService.ACCURATE_STEP);
  noteInfoValues.put(SimpleNoteInfo.FREQUENCY_KEY,noteInfo.hasFrequency() ? noteInfo.getFrequency() : this.frequencyHelper.findFrequency(sound));
  noteInfoValues.put(SimpleNoteInfo.NAME_KEY,noteInfo.getName());
  return new SimpleNote(new SimpleNoteInfo(noteInfoValues),sound.getChannels());
}",0.965034965034965
81276,"@Override public int findSustain(final Channel channel1,final int decay) throws SoundTransformException {
  int sustainIndex=decay;
  this.ensureComputedMagnitudeArray(channel1,MagnitudeADSRHelper.ACCURATE_STEP_FOR_ADSR_HELPER);
  final int start=decay / MagnitudeADSRHelper.ACCURATE_STEP_FOR_ADSR_HELPER;
  final double[] sustainArray=new double[this.magnitude.length - start];
  System.arraycopy(this.magnitude,start,sustainArray,0,this.magnitude.length - start);
  try {
    MathArrays.checkOrder(sustainArray,MathArrays.OrderDirection.DECREASING,true);
  }
 catch (  final NonMonotonicSequenceException nmse) {
    this.log(new LogEvent(MagnitudeADSRHelperEventCode.FOUND_EDGE,nmse));
    sustainIndex=(nmse.getIndex() - 1) * MagnitudeADSRHelper.ACCURATE_STEP_FOR_ADSR_HELPER;
  }
  return sustainIndex;
}","@Override public int findSustain(final double[] magnitudeArray,final int decay) throws SoundTransformException {
  int sustainIndex=decay;
  final int start=decay / MagnitudeADSRHelper.ACCURATE_STEP_FOR_ADSR_HELPER;
  final double[] sustainArray=new double[magnitudeArray.length - start];
  System.arraycopy(magnitudeArray,start,sustainArray,0,magnitudeArray.length - start);
  try {
    MathArrays.checkOrder(sustainArray,MathArrays.OrderDirection.DECREASING,true);
  }
 catch (  final NonMonotonicSequenceException nmse) {
    this.log(new LogEvent(MagnitudeADSRHelperEventCode.FOUND_EDGE,nmse));
    sustainIndex=(nmse.getIndex() - 1) * MagnitudeADSRHelper.ACCURATE_STEP_FOR_ADSR_HELPER;
  }
  return sustainIndex;
}",0.824607329842932
81277,"@Override public int findRelease(final Channel channel1) throws SoundTransformException {
  int releaseIndexFromReversed=0;
  this.ensureComputedMagnitudeArray(channel1,MagnitudeADSRHelper.ACCURATE_STEP_FOR_ADSR_HELPER);
  final double[] reversed=new double[this.magnitude.length];
  System.arraycopy(this.magnitude,0,reversed,0,reversed.length);
  Collections.reverse(Arrays.asList(reversed));
  try {
    MathArrays.checkOrder(this.magnitude,MathArrays.OrderDirection.INCREASING,true);
  }
 catch (  final NonMonotonicSequenceException nmse) {
    this.log(new LogEvent(MagnitudeADSRHelperEventCode.FOUND_EDGE,nmse));
    releaseIndexFromReversed=(nmse.getIndex() - 1) * MagnitudeADSRHelper.ACCURATE_STEP_FOR_ADSR_HELPER;
  }
  return channel1.getSamplesLength() - releaseIndexFromReversed;
}","@Override public int findRelease(final double[] magnitudeArray,final int samplesLength) throws SoundTransformException {
  int releaseIndexFromReversed=0;
  final double[] reversed=new double[magnitudeArray.length];
  System.arraycopy(magnitudeArray,0,reversed,0,reversed.length);
  Collections.reverse(Arrays.asList(reversed));
  try {
    MathArrays.checkOrder(magnitudeArray,MathArrays.OrderDirection.INCREASING,true);
  }
 catch (  final NonMonotonicSequenceException nmse) {
    this.log(new LogEvent(MagnitudeADSRHelperEventCode.FOUND_EDGE,nmse));
    releaseIndexFromReversed=(nmse.getIndex() - 1) * MagnitudeADSRHelper.ACCURATE_STEP_FOR_ADSR_HELPER;
  }
  return samplesLength - releaseIndexFromReversed;
}",0.8275862068965517
81278,"@Override public int findDecay(final Channel channel1,final int attack) throws SoundTransformException {
  int decayIndex=attack;
  this.ensureComputedMagnitudeArray(channel1,MagnitudeADSRHelper.ACCURATE_STEP_FOR_ADSR_HELPER);
  final double[] decayArray=new double[this.magnitude.length - attack];
  System.arraycopy(this.magnitude,attack,decayArray,0,this.magnitude.length - attack);
  try {
    MathArrays.checkOrder(decayArray,MathArrays.OrderDirection.INCREASING,true);
  }
 catch (  final NonMonotonicSequenceException nmse) {
    this.log(new LogEvent(MagnitudeADSRHelperEventCode.FOUND_EDGE,nmse));
    decayIndex=(nmse.getIndex() - 1) * MagnitudeADSRHelper.ACCURATE_STEP_FOR_ADSR_HELPER;
  }
  return decayIndex;
}","@Override public int findDecay(final double[] magnitudeArray,final int attack) throws SoundTransformException {
  int decayIndex=attack;
  final double[] decayArray=new double[magnitudeArray.length - attack];
  System.arraycopy(magnitudeArray,attack,decayArray,0,magnitudeArray.length - attack);
  try {
    MathArrays.checkOrder(decayArray,MathArrays.OrderDirection.INCREASING,true);
  }
 catch (  final NonMonotonicSequenceException nmse) {
    this.log(new LogEvent(MagnitudeADSRHelperEventCode.FOUND_EDGE,nmse));
    decayIndex=(nmse.getIndex() - 1) * MagnitudeADSRHelper.ACCURATE_STEP_FOR_ADSR_HELPER;
  }
  return decayIndex;
}",0.303834808259587
81279,"int findSustain(Channel channel1,int decay) throws SoundTransformException ;","int findSustain(final double[] magnitudeArray,int decay) throws SoundTransformException ;",0.8
81280,int findRelease(Channel channel1) throws SoundTransformException ;,"int findRelease(final double[] magnitudeArray,int samplesLength) throws SoundTransformException ;",0.6625766871165644
81281,"int findDecay(Channel channel1,int attack) throws SoundTransformException ;","int findDecay(final double[] magnitudeArray,int attack) throws SoundTransformException ;",0.7975460122699386
81282,"@Override public Note convert(final SimpleNoteInfo noteInfo,final Sound sound) throws SoundTransformException {
  final Channel channel1=sound.getChannels()[0];
  final Map<String,Object> noteInfoValues=new HashMap<String,Object>();
  noteInfoValues.put(SimpleNoteInfo.ATTACK_KEY,noteInfo.hasAttack() ? noteInfo.getAttack() : 0);
  noteInfoValues.put(SimpleNoteInfo.DECAY_KEY,noteInfo.hasDecay() ? noteInfo.getDecay() : this.adsrHelper.findDecay(channel1,((Integer)noteInfoValues.get(SimpleNoteInfo.ATTACK_KEY)).intValue()));
  noteInfoValues.put(SimpleNoteInfo.SUSTAIN_KEY,noteInfo.hasSustain() ? noteInfo.getSustain() : this.adsrHelper.findSustain(channel1,((Integer)noteInfoValues.get(SimpleNoteInfo.DECAY_KEY)).intValue()));
  noteInfoValues.put(SimpleNoteInfo.RELEASE_KEY,noteInfo.hasRelease() ? noteInfo.getRelease() : this.adsrHelper.findRelease(channel1));
  noteInfoValues.put(SimpleNoteInfo.FREQUENCY_KEY,noteInfo.hasFrequency() ? noteInfo.getFrequency() : this.frequencyHelper.findFrequency(sound));
  noteInfoValues.put(SimpleNoteInfo.NAME_KEY,noteInfo.getName());
  return new SimpleNote(new SimpleNoteInfo(noteInfoValues),sound.getChannels());
}","@Override public Note convert(final SimpleNoteInfo noteInfo,final Sound sound) throws SoundTransformException {
  final Channel channel1=sound.getChannels()[0];
  final Map<String,Object> noteInfoValues=new HashMap<String,Object>();
  final ComputeMagnitudeSoundTransform soundTransform=new ComputeMagnitudeSoundTransform(DefaultSoundToNoteService.ACCURATE_STEP);
  final double[] magnitudeArray=soundTransform.transform(channel1);
  noteInfoValues.put(SimpleNoteInfo.ATTACK_KEY,noteInfo.hasAttack() ? noteInfo.getAttack() : 0);
  noteInfoValues.put(SimpleNoteInfo.DECAY_KEY,noteInfo.hasDecay() ? noteInfo.getDecay() : this.adsrHelper.findDecay(magnitudeArray,((Integer)noteInfoValues.get(SimpleNoteInfo.ATTACK_KEY)).intValue()));
  noteInfoValues.put(SimpleNoteInfo.SUSTAIN_KEY,noteInfo.hasSustain() ? noteInfo.getSustain() : this.adsrHelper.findSustain(magnitudeArray,((Integer)noteInfoValues.get(SimpleNoteInfo.DECAY_KEY)).intValue()));
  noteInfoValues.put(SimpleNoteInfo.RELEASE_KEY,noteInfo.hasRelease() ? noteInfo.getRelease() : this.adsrHelper.findRelease(magnitudeArray,channel1.getSamplesLength()));
  noteInfoValues.put(SimpleNoteInfo.FREQUENCY_KEY,noteInfo.hasFrequency() ? noteInfo.getFrequency() : this.frequencyHelper.findFrequency(sound));
  noteInfoValues.put(SimpleNoteInfo.NAME_KEY,noteInfo.getName());
  return new SimpleNote(new SimpleNoteInfo(noteInfoValues),sound.getChannels());
}",0.8919235271166601
81283,"@Override public Note convert(final SimpleNoteInfo noteInfo,final Sound sound) throws SoundTransformException {
  final Channel channel1=sound.getChannels()[0];
  final Map<String,Object> noteInfoValues=new HashMap<String,Object>();
  final ComputeMagnitudeSoundTransform soundTransform=new ComputeMagnitudeSoundTransform(DefaultSoundToNoteService.ACCURATE_STEP);
  final double[] magnitudeArray=soundTransform.transform(channel1);
  noteInfoValues.put(SimpleNoteInfo.ATTACK_KEY,noteInfo.hasAttack() ? noteInfo.getAttack() : 0);
  noteInfoValues.put(SimpleNoteInfo.DECAY_KEY,noteInfo.hasDecay() ? noteInfo.getDecay() : this.adsrHelper.findDecay(magnitudeArray,((Integer)noteInfoValues.get(SimpleNoteInfo.ATTACK_KEY)).intValue()) * DefaultSoundToNoteService.ACCURATE_STEP);
  noteInfoValues.put(SimpleNoteInfo.SUSTAIN_KEY,noteInfo.hasSustain() ? noteInfo.getSustain() : this.adsrHelper.findSustain(magnitudeArray,((Integer)noteInfoValues.get(SimpleNoteInfo.DECAY_KEY)).intValue()) * DefaultSoundToNoteService.ACCURATE_STEP);
  noteInfoValues.put(SimpleNoteInfo.RELEASE_KEY,noteInfo.hasRelease() ? noteInfo.getRelease() : this.adsrHelper.findRelease(magnitudeArray) * DefaultSoundToNoteService.ACCURATE_STEP);
  noteInfoValues.put(SimpleNoteInfo.FREQUENCY_KEY,noteInfo.hasFrequency() ? noteInfo.getFrequency() : this.frequencyHelper.findFrequency(sound));
  noteInfoValues.put(SimpleNoteInfo.NAME_KEY,noteInfo.getName());
  return new SimpleNote(new SimpleNoteInfo(noteInfoValues),sound.getChannels());
}","@Override public Note convert(final SimpleNoteInfo noteInfo,final Sound sound) throws SoundTransformException {
  final Channel channel1=sound.getChannels()[0];
  final Map<String,Object> noteInfoValues=new HashMap<String,Object>();
  final ComputeMagnitudeSoundTransform soundTransform=new ComputeMagnitudeSoundTransform(DefaultSoundToNoteService.ACCURATE_STEP);
  final double[] magnitudeArray=soundTransform.transform(channel1);
  noteInfoValues.put(SimpleNoteInfo.ATTACK_KEY,noteInfo.hasAttack() ? noteInfo.getAttack() : 0);
  noteInfoValues.put(SimpleNoteInfo.DECAY_KEY,noteInfo.hasDecay() ? noteInfo.getDecay() : this.adsrHelper.findDecay(magnitudeArray,((Integer)noteInfoValues.get(SimpleNoteInfo.ATTACK_KEY)).intValue()) * DefaultSoundToNoteService.ACCURATE_STEP);
  noteInfoValues.put(SimpleNoteInfo.SUSTAIN_KEY,noteInfo.hasSustain() ? noteInfo.getSustain() : this.adsrHelper.findSustain(magnitudeArray,((Integer)noteInfoValues.get(SimpleNoteInfo.DECAY_KEY)).intValue() / DefaultSoundToNoteService.ACCURATE_STEP) * DefaultSoundToNoteService.ACCURATE_STEP);
  noteInfoValues.put(SimpleNoteInfo.RELEASE_KEY,noteInfo.hasRelease() ? noteInfo.getRelease() : this.adsrHelper.findRelease(magnitudeArray) * DefaultSoundToNoteService.ACCURATE_STEP);
  noteInfoValues.put(SimpleNoteInfo.FREQUENCY_KEY,noteInfo.hasFrequency() ? noteInfo.getFrequency() : this.frequencyHelper.findFrequency(sound));
  noteInfoValues.put(SimpleNoteInfo.NAME_KEY,noteInfo.getName());
  return new SimpleNote(new SimpleNoteInfo(noteInfoValues),sound.getChannels());
}",0.9862114248194354
81284,"private Channel soundToSubSound(final Channel input,final int beginning,final int end){
  long[] newsamples=new long[0];
  if (beginning < end) {
    newsamples=new long[end - beginning];
    input.copyTo(newsamples,beginning,0,end - beginning);
  }
  return new Channel(newsamples,input.getFormatInfo(),input.getChannelNum());
}","private Channel soundToSubSound(final Channel input,final int beginning,final int end){
  long[] newsamples=new long[0];
  if (beginning < end) {
    final int size=Math.min(end - beginning,input.getSamplesLength() - beginning);
    newsamples=new long[size];
    input.copyTo(newsamples,beginning,0,size);
  }
  return new Channel(newsamples,input.getFormatInfo(),input.getChannelNum());
}",0.803894297635605
81285,"private void stopRecording(){
  if (this.recorder != null) {
    this.recorder.stop();
    this.recorder.release();
  }
}","private void stopRecording(){
  if (this.recorder != null) {
    this.recorder.stop();
    this.recorder.release();
  }
  this.recordingThread.stop();
}",0.8864468864468864
81286,"@Test public void shapeAndMockRecordedSoundInParallel() throws Exception {
  final AudioRecord audioRecord=Mockito.mock(AudioRecord.class);
  Mockito.when(audioRecord.getState()).thenReturn(AudioRecord.STATE_INITIALIZED);
  Mockito.when(audioRecord.getRecordingState()).thenReturn(AudioRecord.STATE_INITIALIZED);
  Mockito.when(audioRecord.read(Matchers.any(short[].class),Matchers.any(int.class),Matchers.any(int.class))).thenReturn(1024);
  PowerMockito.whenNew(AudioRecord.class).withParameterTypes(int.class,int.class,int.class,int.class,int.class).withArguments(Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class)).thenReturn(audioRecord);
  PowerMockito.mockStatic(AudioRecord.class,new Answer<Object>(){
    @Override public Object answer(    final InvocationOnMock invocation) throws Throwable {
      if (""String_Node_Str"".equals(invocation.getMethod().getName())) {
        return 2048;
      }
      return invocation.callRealMethod();
    }
  }
);
  final Object stop=new Object();
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(4000);
      }
 catch (      final InterruptedException e) {
        throw new RuntimeException(e);
      }
      boolean notified=false;
synchronized (stop) {
        while (!notified) {
          stop.notify();
          notified=true;
        }
      }
    }
  }
.start();
  final List<float[]> resultFloats=FluentClient.start().whileRecordingASound(new StreamInfo(2,10000,2,44100.0f,false,true,null),stop).findLoudestFrequencies().stopWithFreqs();
  Assert.assertThat(resultFloats,new IsNot<List<float[]>>(new IsNull<List<float[]>>()));
  Assert.assertNotEquals(resultFloats.size(),0);
  Assert.assertNotEquals(resultFloats.get(0).length,0);
}","@Test public void shapeAndMockRecordedSoundInParallel() throws Exception {
  final AudioRecord audioRecord=Mockito.mock(AudioRecord.class);
  Mockito.when(audioRecord.getState()).thenReturn(AudioRecord.STATE_INITIALIZED);
  Mockito.when(audioRecord.getRecordingState()).thenReturn(AudioRecord.STATE_INITIALIZED);
  Mockito.when(audioRecord.read(Matchers.any(short[].class),Matchers.any(int.class),Matchers.any(int.class))).thenReturn(1024);
  PowerMockito.whenNew(AudioRecord.class).withParameterTypes(int.class,int.class,int.class,int.class,int.class).withArguments(Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class)).thenReturn(audioRecord);
  PowerMockito.mockStatic(AudioRecord.class,new Answer<Object>(){
    @Override public Object answer(    final InvocationOnMock invocation) throws Throwable {
      if (""String_Node_Str"".equals(invocation.getMethod().getName())) {
        return 2048;
      }
      return invocation.callRealMethod();
    }
  }
);
  final Object stop=new Object();
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(4000);
      }
 catch (      final InterruptedException e) {
        throw new RuntimeException(e);
      }
      boolean notified=false;
synchronized (stop) {
        while (!notified) {
          stop.notifyAll();
          notified=true;
        }
      }
    }
  }
.start();
  final List<float[]> resultFloats=FluentClient.start().whileRecordingASound(new StreamInfo(2,10000,2,44100.0f,false,true,null),stop).findLoudestFrequencies().stopWithFreqs();
  Assert.assertThat(resultFloats,new IsNot<List<float[]>>(new IsNull<List<float[]>>()));
  Assert.assertNotEquals(resultFloats.size(),0);
  Assert.assertNotEquals(resultFloats.get(0).length,0);
}",0.999163179916318
81287,"@Override public void run(){
  try {
    Thread.sleep(4000);
  }
 catch (  final InterruptedException e) {
    throw new RuntimeException(e);
  }
  boolean notified=false;
synchronized (stop) {
    while (!notified) {
      stop.notify();
      notified=true;
    }
  }
}","@Override public void run(){
  try {
    Thread.sleep(4000);
  }
 catch (  final InterruptedException e) {
    throw new RuntimeException(e);
  }
  boolean notified=false;
synchronized (stop) {
    while (!notified) {
      stop.notifyAll();
      notified=true;
    }
  }
}",0.9944954128440368
81288,"@Test public void mockRecordedAndProcessedSound() throws Exception {
  final AudioRecord audioRecord=Mockito.mock(AudioRecord.class);
  Mockito.when(audioRecord.getState()).thenReturn(AudioRecord.STATE_INITIALIZED);
  Mockito.when(audioRecord.getRecordingState()).thenReturn(AudioRecord.STATE_INITIALIZED);
  Mockito.when(audioRecord.read(Matchers.any(short[].class),Matchers.any(int.class),Matchers.any(int.class))).thenReturn(1024);
  PowerMockito.mockStatic(AudioRecord.class,new Answer<Object>(){
    @Override public Object answer(    final InvocationOnMock invocation) throws Throwable {
      if (""String_Node_Str"".equals(invocation.getMethod().getName())) {
        return 2048;
      }
      return invocation.callRealMethod();
    }
  }
);
  final Object stop=new Object();
  PowerMockito.whenNew(AudioRecord.class).withParameterTypes(int.class,int.class,int.class,int.class,int.class).withArguments(Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class)).thenReturn(audioRecord);
  final List<Sound> list=FluentClient.start().inParallelWhileRecordingASound(new StreamInfo(2,10000,2,44100.0f,false,true,null),stop,FluentClientOperation.prepare().importToSound().apply(new EightBitsSoundTransform(25)).build(),Sound.class);
  try {
    Thread.sleep(4000);
  }
 catch (  final InterruptedException e) {
    throw new RuntimeException(e);
  }
  boolean notified=false;
synchronized (stop) {
    while (!notified) {
      stop.notify();
      notified=true;
    }
  }
  try {
    Thread.sleep(4000);
  }
 catch (  final InterruptedException e) {
    throw new RuntimeException(e);
  }
  Assert.assertThat(list,new IsNot<List<Sound>>(new IsNull<List<Sound>>()));
  Assert.assertNotEquals(list.size(),0);
}","@Test public void mockRecordedAndProcessedSound() throws Exception {
  final AudioRecord audioRecord=Mockito.mock(AudioRecord.class);
  Mockito.when(audioRecord.getState()).thenReturn(AudioRecord.STATE_INITIALIZED);
  Mockito.when(audioRecord.getRecordingState()).thenReturn(AudioRecord.STATE_INITIALIZED);
  Mockito.when(audioRecord.read(Matchers.any(short[].class),Matchers.any(int.class),Matchers.any(int.class))).thenReturn(1024);
  PowerMockito.mockStatic(AudioRecord.class,new Answer<Object>(){
    @Override public Object answer(    final InvocationOnMock invocation) throws Throwable {
      if (""String_Node_Str"".equals(invocation.getMethod().getName())) {
        return 2048;
      }
      return invocation.callRealMethod();
    }
  }
);
  final Object stop=new Object();
  PowerMockito.whenNew(AudioRecord.class).withParameterTypes(int.class,int.class,int.class,int.class,int.class).withArguments(Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class)).thenReturn(audioRecord);
  final List<Sound> list=FluentClient.start().inParallelWhileRecordingASound(new StreamInfo(2,10000,2,44100.0f,false,true,null),stop,FluentClientOperation.prepare().importToSound().apply(new EightBitsSoundTransform(25)).build(),Sound.class);
  try {
    Thread.sleep(4000);
  }
 catch (  final InterruptedException e) {
    throw new RuntimeException(e);
  }
  boolean notified=false;
synchronized (stop) {
    while (!notified) {
      stop.notifyAll();
      notified=true;
    }
  }
  try {
    Thread.sleep(4000);
  }
 catch (  final InterruptedException e) {
    throw new RuntimeException(e);
  }
  Assert.assertThat(list,new IsNot<List<Sound>>(new IsNull<List<Sound>>()));
  Assert.assertNotEquals(list.size(),0);
}",0.9991556431184914
81289,"private int getSamplesIndex(final int index){
  int realIndex=index;
  int channelPartIndex=0;
  while (channelPartIndex < this.channelParts.size() && realIndex > this.channelParts.get(channelPartIndex).getSamplesLength()) {
    realIndex-=this.channelParts.get(channelPartIndex).getSamplesLength();
    channelPartIndex++;
  }
  return realIndex;
}","private int getSamplesIndex(final int index){
  int realIndex=index;
  int channelPartIndex=0;
  while (channelPartIndex < this.channelParts.size() && realIndex >= this.channelParts.get(channelPartIndex).getSamplesLength()) {
    realIndex-=this.channelParts.get(channelPartIndex).getSamplesLength();
    channelPartIndex++;
  }
  return realIndex;
}",0.9985693848354792
81290,"private int getChannelPartIndex(final int index){
  int realIndex=index;
  int channelPartIndex=0;
  while (channelPartIndex < this.channelParts.size() && realIndex > this.channelParts.get(channelPartIndex).getSamplesLength()) {
    realIndex-=this.channelParts.get(channelPartIndex).getSamplesLength();
    channelPartIndex++;
  }
  if (channelPartIndex == this.channelParts.size()) {
    throw new SoundTransformRuntimeException(new SoundTransformException(SegmentedChannelErrorCode.ARRAY_INDEX_OUT_OF_BOUNDS,new ArrayIndexOutOfBoundsException(),index));
  }
  return channelPartIndex;
}","private int getChannelPartIndex(final int index){
  int realIndex=index;
  int channelPartIndex=0;
  while (channelPartIndex < this.channelParts.size() && realIndex >= this.channelParts.get(channelPartIndex).getSamplesLength()) {
    realIndex-=this.channelParts.get(channelPartIndex).getSamplesLength();
    channelPartIndex++;
  }
  if (channelPartIndex == this.channelParts.size()) {
    throw new SoundTransformRuntimeException(new SoundTransformException(SegmentedChannelErrorCode.ARRAY_INDEX_OUT_OF_BOUNDS,new ArrayIndexOutOfBoundsException(),index));
  }
  return channelPartIndex;
}",0.9991518235793044
81291,"@Override public Channel initSound(final Channel input){
  if (this.note) {
    this.step=input.getSamplesLength();
    this.fsLimit=input.getSamplesLength();
    this.loudestfreqs=new float[1];
  }
 else {
    this.loudestfreqs=new float[(int)(input.getSamplesLength() / this.step) + 1];
    this.fsLimit=input.getSampleRate();
  }
  this.soundLength=input.getSamplesLength();
  return super.initSound(input);
}","@Override public Channel initSound(final Channel input1){
  this.input=input1;
  if (this.note) {
    this.step=input1.getSamplesLength();
    this.fsLimit=input1.getSamplesLength();
    this.loudestfreqs=new float[1];
  }
 else {
    this.loudestfreqs=new float[(int)(input1.getSamplesLength() / this.step) + 1];
    this.fsLimit=input1.getSampleRate();
  }
  return super.initSound(input1);
}",0.7344913151364765
81292,"public void transformFrequencies(final Object spectrum,final float sampleRate,final int offset,final int powOf2NearestLength,final int length,final float soundLevelInDB){
  final int percent=(int)Math.floor(100.0 * (offset / this.step) / (this.soundLength / this.step));
  if (percent > Math.floor(100.0 * ((offset - this.step) / this.step) / (this.soundLength / this.step))) {
    this.log(new LogEvent(PeakFindSoundTransformEventCode.ITERATION_IN_PROGRESS,(int)(offset / this.step),(int)Math.ceil(this.soundLength / this.step),percent));
  }
  float f0=0;
  if (soundLevelInDB > 30 || this.note) {
    final float[] peaks=new float[10];
    for (int i=1; i <= 10; i++) {
      peaks[i - 1]=this.f0(spectrum,sampleRate,i);
    }
    Arrays.sort(peaks);
    f0=this.bestCandidate(peaks);
  }
  if (this.note) {
    this.detectedNoteVolume=soundLevelInDB;
  }
  this.loudestfreqs[(int)(offset / this.step)]=f0;
}","public void transformFrequencies(final Object spectrum,final float sampleRate,final int offset,final int powOf2NearestLength,final int length,final float soundLevelInDB){
  final int percent=(int)Math.floor(100.0 * (offset / this.step) / (this.input.getSamplesLength() / this.step));
  if (percent > Math.floor(100.0 * ((offset - this.step) / this.step) / (this.input.getSamplesLength() / this.step))) {
    this.log(new LogEvent(PeakFindSoundTransformEventCode.ITERATION_IN_PROGRESS,(int)(offset / this.step),(int)Math.ceil(this.input.getSamplesLength() / this.step),percent));
  }
  float f0=0;
  if (soundLevelInDB > 30 || this.note) {
    final float[] peaks=new float[10];
    for (int i=1; i <= 10; i++) {
      peaks[i - 1]=this.f0(spectrum,sampleRate,i);
    }
    Arrays.sort(peaks);
    f0=this.bestCandidate(peaks);
  }
  if (this.note) {
    this.detectedNoteVolume=soundLevelInDB;
  }
  this.ensureArrayLengthIsCorrect(offset);
  this.loudestfreqs[(int)(offset / this.step)]=f0;
}",0.9411764705882352
81293,"private <O>Thread getStreamReader(final StreamInfo streamInfo,final RunnableWithInputStream runnable,final Class<O> returnType,final ByteBuffer targetByteBuffer,final List<InputStream> streamsFromBuffer,final List<O> results){
  return new Thread(){
    @Override public void run(){
      try {
        DefaultRecordSoundService.this.waitForNewBytes(targetByteBuffer);
        final InputStream inputStream=DefaultRecordSoundService.this.audioFileService.streamFromRawStream(new ByteArrayInputStream(targetByteBuffer.array()),streamInfo);
        if (inputStream.available() > 0) {
          streamsFromBuffer.add(inputStream);
          results.add(runnable.runWithInputStreamAndGetResult(inputStream,streamInfo,returnType));
        }
      }
 catch (      final IOException e) {
        throw new SoundTransformRuntimeException(new SoundTransformException(DefaultRecordSoundServiceErrorCode.PROBLEM_WHILE_READING_THE_BUFFER_IN_A_CONTINUOUS_RECORDING,e));
      }
catch (      final SoundTransformException e) {
        throw new SoundTransformRuntimeException(e);
      }
    }
  }
;
}","private <O>Thread getStreamReader(final StreamInfo streamInfo,final RunnableWithInputStream runnable,final Class<O> returnType,final ByteBuffer targetByteBuffer,final List<InputStream> streamsFromBuffer,final List<O> results){
  return new Thread(){
    @Override public void run(){
      while (true) {
        try {
          DefaultRecordSoundService.this.waitForNewBytes(targetByteBuffer);
          final InputStream inputStream=DefaultRecordSoundService.this.audioFileService.streamFromRawStream(new ByteArrayInputStream(targetByteBuffer.array()),streamInfo);
          if (inputStream.available() > 0) {
            streamsFromBuffer.add(inputStream);
            results.add(runnable.runWithInputStreamAndGetResult(inputStream,streamInfo,returnType));
          }
        }
 catch (        final IOException e) {
          throw new SoundTransformRuntimeException(new SoundTransformException(DefaultRecordSoundServiceErrorCode.PROBLEM_WHILE_READING_THE_BUFFER_IN_A_CONTINUOUS_RECORDING,e));
        }
catch (        final SoundTransformException e) {
          throw new SoundTransformRuntimeException(e);
        }
      }
    }
  }
;
}",0.974473802060009
81294,"private void waitForNewBytes(final ByteBuffer targetByteBuffer) throws SoundTransformException {
  boolean waited=false;
synchronized (targetByteBuffer) {
    try {
      while (!waited) {
        targetByteBuffer.wait();
        waited=true;
      }
    }
 catch (    final InterruptedException e) {
      throw new SoundTransformRuntimeException(new SoundTransformException(DefaultRecordSoundServiceErrorCode.NOT_ABLE,e));
    }
  }
}","private void waitForNewBytes(final ByteBuffer targetByteBuffer) throws SoundTransformException {
  boolean waited=false;
synchronized (targetByteBuffer) {
    try {
      while (!waited) {
        targetByteBuffer.wait();
        waited=true;
      }
    }
 catch (    final InterruptedException e) {
      this.log(new LogEvent(DefaultRecordSoundServiceEventCode.STREAM_READER_STOPPED,e));
    }
  }
}",0.801909307875895
81295,"@Override public InputStream recordLimitedTimeRawInputStream(final StreamInfo streamInfo) throws SoundTransformException {
  final long millis=(long)(streamInfo.getFrameLength() / streamInfo.getSampleRate() * DefaultRecordSoundService.MS_PER_SECOND);
  final Object stop=new Object();
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(millis);
      }
 catch (      final InterruptedException e) {
        throw new SoundTransformRuntimeException(DefaultRecordSoundServiceErrorCode.NOT_ABLE,e);
      }
synchronized (stop) {
        stop.notify();
      }
    }
  }
.start();
  return this.recordRawInputStream(streamInfo,stop);
}","@Override public InputStream recordLimitedTimeRawInputStream(final StreamInfo streamInfo) throws SoundTransformException {
  final long millis=(long)(streamInfo.getFrameLength() / streamInfo.getSampleRate() * DefaultRecordSoundService.MS_PER_SECOND);
  final Object stop=new Object();
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(millis);
      }
 catch (      final InterruptedException e) {
        throw new SoundTransformRuntimeException(DefaultRecordSoundServiceErrorCode.NOT_ABLE,e,e.getMessage());
      }
synchronized (stop) {
        stop.notify();
      }
    }
  }
.start();
  return this.recordRawInputStream(streamInfo,stop);
}",0.9887976101568334
81296,"@Override public <O>List<O> recordAndProcess(final StreamInfo streamInfo,final Object stop,final RunnableWithInputStream runnable,final Class<O> returnType) throws SoundTransformException {
  final ByteBuffer targetByteBuffer=this.startRecordingAndReturnByteBuffer(streamInfo,stop);
  final List<InputStream> streamsFromBuffer=new ArrayList<InputStream>();
  final List<O> results=new ArrayList<O>();
  final Thread streamReader=this.getStreamReader(streamInfo,runnable,returnType,targetByteBuffer,streamsFromBuffer,results);
  streamReader.start();
  try {
    Thread.sleep(DefaultRecordSoundService.ARBITRARY_SLEEP_TIME_TO_ENSURE_THE_STREAMING_IS_INITIALIZED);
  }
 catch (  final InterruptedException e) {
    throw new SoundTransformRuntimeException(new SoundTransformException(DefaultRecordSoundServiceErrorCode.NOT_ABLE,e));
  }
  this.stopDetector(stop,streamReader).start();
  return results;
}","@Override public <O>List<O> recordAndProcess(final StreamInfo streamInfo,final Object stop,final RunnableWithInputStream runnable,final Class<O> returnType) throws SoundTransformException {
  final ByteBuffer targetByteBuffer=this.startRecordingAndReturnByteBuffer(streamInfo,stop);
  final List<InputStream> streamsFromBuffer=new ArrayList<InputStream>();
  final List<O> results=new ArrayList<O>();
  final Thread streamReader=this.getStreamReader(streamInfo,runnable,returnType,targetByteBuffer,streamsFromBuffer,results);
  streamReader.start();
  try {
    Thread.sleep(DefaultRecordSoundService.ARBITRARY_SLEEP_TIME_TO_ENSURE_THE_STREAMING_IS_INITIALIZED);
  }
 catch (  final InterruptedException e) {
    throw new SoundTransformRuntimeException(new SoundTransformException(DefaultRecordSoundServiceErrorCode.NOT_ABLE,e,e.getMessage()));
  }
  this.stopDetector(stop,streamReader).start();
  return results;
}",0.9917537108301264
81297,"private void stopRecording(){
  if (this.recorder != null) {
    this.recorder.stop();
    this.recorder.release();
  }
  this.recordingThread.stop();
}","private void stopRecording(){
  if (this.recorder != null) {
    this.recorder.stop();
    this.recorder.release();
  }
  this.recordingThread.stopRecording();
}",0.9712460063897764
81298,"@Override public ByteBuffer startRecordingAndReturnByteBuffer(final Object audioFormat,final Object stop) throws SoundTransformException {
  final RecordSoundProcessor processor=this;
  if (!(audioFormat instanceof StreamInfo)) {
    throw new SoundTransformException(AndroidRecordSoundProcessorErrorCode.STREAM_INFO_EXPECTED,new IllegalArgumentException());
  }
  final StreamInfo streamInfo=(StreamInfo)audioFormat;
  this.recorder=this.findAudioRecorder(streamInfo);
  this.bytesExporter=$.select(OutputAsByteBuffer.class);
  this.bytesExporter.init(this.bufferSize);
  this.recordingThread=new AndroidRecorderThread(this.recorder,bytesExporter);
  this.recorder.startRecording();
  this.recordingThread.start();
  new Thread(){
    @Override public void run(){
      try {
        processor.stopProperly(stop);
      }
 catch (      final SoundTransformException soundTransformException) {
        throw new SoundTransformRuntimeException(soundTransformException);
      }
    }
  }
.start();
  return (ByteBuffer)this.bytesExporter.getOutput();
}","@Override public ByteBuffer startRecordingAndReturnByteBuffer(final Object audioFormat,final Object stop) throws SoundTransformException {
  final RecordSoundProcessor processor=this;
  if (!(audioFormat instanceof StreamInfo)) {
    throw new SoundTransformException(AndroidRecordSoundProcessorErrorCode.STREAM_INFO_EXPECTED,new IllegalArgumentException());
  }
  final StreamInfo streamInfo=(StreamInfo)audioFormat;
  this.recorder=this.findAudioRecorder(streamInfo);
  this.bytesExporter=$.select(OutputAsByteBuffer.class);
  this.bytesExporter.init(this.bufferSize);
  this.recordingThread=new AndroidRecorderThread(this.recorder,bytesExporter);
  this.recorder.startRecording();
  this.recordingThread.start();
  new StopProperlyThread(processor,stop).start();
  return (ByteBuffer)this.bytesExporter.getOutput();
}",0.8476750400855158
81299,"/** 
 * @param bufferSize
 * @param androidRecordSoundProcessor
 * @param bytesExporter1
 */
AndroidRecorderThread(final AudioRecord audioRecord1,final BytesExporterFromThread<?> bytesExporter1){
  this.audioRecord=audioRecord1;
  this.bytesExporter=bytesExporter1;
}","/** 
 * @param bufferSize
 * @param androidRecordSoundProcessor
 * @param bytesExporter1
 */
AndroidRecorderThread(final AudioRecord audioRecord1,final BytesExporterFromThread<?> bytesExporter1){
  this.audioRecord=audioRecord1;
  this.bytesExporter=bytesExporter1;
  this.setName(this.getClass().getSimpleName());
}",0.915951972555746
81300,"/** 
 * @param dataLine1
 */
TargetDataLineReaderThread(final TargetDataLine dataLine1,final BytesExporterFromThread<?> exporter1){
  this.dataLine=dataLine1;
  this.exporter=exporter1;
}","/** 
 * @param dataLine1
 */
TargetDataLineReaderThread(final TargetDataLine dataLine1,final BytesExporterFromThread<?> exporter1){
  this.dataLine=dataLine1;
  this.exporter=exporter1;
  this.setName(this.getClass().getSimpleName());
}",0.8841607565011821
81301,"@Override public ByteBuffer startRecordingAndReturnByteBuffer(final Object audioFormat1,final Object stop) throws SoundTransformException {
  final RecordSoundProcessor processor=this;
  if (!(audioFormat1 instanceof AudioFormat)) {
    throw new SoundTransformException(TargetDataLineRecordSoundProcessorErrorCode.AUDIO_FORMAT_EXPECTED,new IllegalArgumentException());
  }
  final AudioFormat audioFormat=(AudioFormat)audioFormat1;
  final OutputAsByteBuffer bytesExporter=$.select(OutputAsByteBuffer.class);
  bytesExporter.init(TargetDataLineRecordSoundProcessor.DEFAULT_BYTE_BUFFER_SIZE);
  this.startRecording(audioFormat,bytesExporter);
  new Thread(){
    @Override public void run(){
      try {
        processor.stopProperly(stop);
      }
 catch (      final SoundTransformException soundTransformException) {
        throw new SoundTransformRuntimeException(soundTransformException);
      }
    }
  }
.start();
  return bytesExporter.getOutput();
}","@Override public ByteBuffer startRecordingAndReturnByteBuffer(final Object audioFormat1,final Object stop) throws SoundTransformException {
  final RecordSoundProcessor processor=this;
  if (!(audioFormat1 instanceof AudioFormat)) {
    throw new SoundTransformException(TargetDataLineRecordSoundProcessorErrorCode.AUDIO_FORMAT_EXPECTED,new IllegalArgumentException());
  }
  final AudioFormat audioFormat=(AudioFormat)audioFormat1;
  final OutputAsByteBuffer bytesExporter=$.select(OutputAsByteBuffer.class);
  bytesExporter.init(TargetDataLineRecordSoundProcessor.DEFAULT_BYTE_BUFFER_SIZE);
  this.startRecording(audioFormat,bytesExporter);
  new StopProperlyThread(stop,processor).start();
  return bytesExporter.getOutput();
}",0.8314606741573034
81302,"private Thread getStreamReader(final StreamInfo streamInfo,final ByteBuffer targetByteBuffer,final List<Sound> results){
  final AudioFileService<?> audioFileService1=this.audioFileService;
  final InputStreamToSoundService<?> isToSoundService1=this.isToSoundService;
  return new Thread(){
    private void waitForNewBytes(    final ByteBuffer targetByteBuffer) throws SoundTransformException {
      boolean waited=false;
synchronized (targetByteBuffer) {
        try {
          while (!waited) {
            targetByteBuffer.wait();
            waited=true;
          }
        }
 catch (        final InterruptedException e) {
          new LogEvent(DefaultRecordSoundServiceEventCode.STREAM_READER_STOPPED,e);
        }
      }
    }
    @Override public void run(){
      while (true) {
        try {
          this.waitForNewBytes(targetByteBuffer);
          final InputStream inputStream=audioFileService1.streamFromRawStream(new ByteArrayInputStream(targetByteBuffer.array()),streamInfo);
          if (inputStream.available() > 0) {
            results.add(isToSoundService1.fromInputStream(inputStream,streamInfo));
          }
        }
 catch (        final IOException e) {
          throw new SoundTransformRuntimeException(new SoundTransformException(DefaultRecordSoundServiceErrorCode.PROBLEM_WHILE_READING_THE_BUFFER_IN_A_CONTINUOUS_RECORDING,e));
        }
catch (        final SoundTransformException e) {
          throw new SoundTransformRuntimeException(e);
        }
      }
    }
  }
;
}","private StreamReaderThread getStreamReader(final StreamInfo streamInfo,final ByteBuffer targetByteBuffer,final List<Sound> results){
  final AudioFileService<?> audioFileService1=this.audioFileService;
  final InputStreamToSoundService<?> isToSoundService1=this.isToSoundService;
  return new StreamReaderThread(results,streamInfo,targetByteBuffer,audioFileService1,isToSoundService1);
}",0.3082588111520252
81303,"private List<Sound> recordInBackgroundTask(final StreamInfo streamInfo,final Object stop) throws SoundTransformException {
  final ByteBuffer targetByteBuffer=this.startRecordingAndReturnByteBuffer(streamInfo,stop);
  final List<Sound> results=new ArrayList<Sound>();
  final Thread streamReader=this.getStreamReader(streamInfo,targetByteBuffer,results);
  streamReader.start();
  try {
    Thread.sleep(DefaultRecordSoundService.ARBITRARY_SLEEP_TIME_TO_ENSURE_THE_STREAMING_IS_INITIALIZED);
  }
 catch (  final InterruptedException e) {
    throw new SoundTransformRuntimeException(new SoundTransformException(DefaultRecordSoundServiceErrorCode.NOT_ABLE,e,e.getMessage()));
  }
  this.stopDetector(stop,streamReader,targetByteBuffer).start();
  return results;
}","private List<Sound> recordInBackgroundTask(final StreamInfo streamInfo,final Object stop) throws SoundTransformException {
  final ByteBuffer targetByteBuffer=this.startRecordingAndReturnByteBuffer(streamInfo,stop);
  final List<Sound> results=new ArrayList<Sound>();
  final StreamReaderThread streamReader=this.getStreamReader(streamInfo,targetByteBuffer,results);
  streamReader.start();
  try {
    Thread.sleep(DefaultRecordSoundService.ARBITRARY_SLEEP_TIME_TO_ENSURE_THE_STREAMING_IS_INITIALIZED);
  }
 catch (  final InterruptedException e) {
    throw new SoundTransformRuntimeException(new SoundTransformException(DefaultRecordSoundServiceErrorCode.NOT_ABLE,e,e.getMessage()));
  }
  this.stopDetector(stop,streamReader,targetByteBuffer).start();
  return results;
}",0.9921976592977894
81304,"private Thread stopDetector(final Object stop,final Thread streamReader,final ByteBuffer targetByteBuffer){
  return new Thread(){
    @Override public void run(){
synchronized (stop) {
        try {
          boolean waited=false;
          while (!waited) {
            stop.wait();
            waited=true;
          }
synchronized (targetByteBuffer) {
            if (waited) {
              targetByteBuffer.notifyAll();
            }
          }
          streamReader.interrupt();
        }
 catch (        final InterruptedException e) {
          targetByteBuffer.notify();
          streamReader.interrupt();
        }
      }
      streamReader.interrupt();
    }
  }
;
}","private Thread stopDetector(final Object stop,final StreamReaderThread streamReader,final ByteBuffer targetByteBuffer){
  return new StopDetectorThread(targetByteBuffer,stop,streamReader);
}",0.3715596330275229
81305,"@Override public InputStream recordLimitedTimeRawInputStream(final StreamInfo streamInfo) throws SoundTransformException {
  final long millis=(long)(streamInfo.getFrameLength() / streamInfo.getSampleRate() * DefaultRecordSoundService.MS_PER_SECOND);
  final Object stop=new Object();
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(millis);
      }
 catch (      final InterruptedException e) {
        throw new SoundTransformRuntimeException(DefaultRecordSoundServiceErrorCode.NOT_ABLE,e,e.getMessage());
      }
synchronized (stop) {
        stop.notify();
      }
    }
  }
.start();
  return this.recordRawInputStream(streamInfo,stop);
}","@Override public InputStream recordLimitedTimeRawInputStream(final StreamInfo streamInfo) throws SoundTransformException {
  final long millis=(long)(streamInfo.getFrameLength() / streamInfo.getSampleRate() * DefaultRecordSoundService.MS_PER_SECOND);
  final Object stop=new Object();
  new SleepThread(stop,millis).start();
  return this.recordRawInputStream(streamInfo,stop);
}",0.5738636363636364
81306,"@Override public void run(){
  while (true) {
    try {
      this.waitForNewBytes(targetByteBuffer);
      final InputStream inputStream=audioFileService1.streamFromRawStream(new ByteArrayInputStream(targetByteBuffer.array()),streamInfo);
      if (inputStream.available() > 0) {
        results.add(isToSoundService1.fromInputStream(inputStream,streamInfo));
      }
    }
 catch (    final IOException e) {
      throw new SoundTransformRuntimeException(new SoundTransformException(DefaultRecordSoundServiceErrorCode.PROBLEM_WHILE_READING_THE_BUFFER_IN_A_CONTINUOUS_RECORDING,e));
    }
catch (    final SoundTransformException e) {
      throw new SoundTransformRuntimeException(e);
    }
  }
}","@Override public void run(){
  try {
    Thread.sleep(millis);
  }
 catch (  final InterruptedException e) {
    throw new SoundTransformRuntimeException(DefaultRecordSoundServiceErrorCode.NOT_ABLE,e,e.getMessage());
  }
synchronized (stop) {
    stop.notify();
  }
}",0.1098445595854922
81307,"@Test public void shapeAndMockRecordedSoundInParallel() throws Exception {
  final AudioRecord audioRecord=Mockito.mock(AudioRecord.class);
  Mockito.when(audioRecord.getState()).thenReturn(AudioRecord.STATE_INITIALIZED);
  Mockito.when(audioRecord.getRecordingState()).thenReturn(AudioRecord.STATE_INITIALIZED);
  Mockito.when(audioRecord.read(Matchers.any(short[].class),Matchers.any(int.class),Matchers.any(int.class))).thenReturn(1024);
  PowerMockito.whenNew(AudioRecord.class).withParameterTypes(int.class,int.class,int.class,int.class,int.class).withArguments(Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class)).thenReturn(audioRecord);
  PowerMockito.mockStatic(AudioRecord.class,new Answer<Object>(){
    @Override public Object answer(    final InvocationOnMock invocation) throws Throwable {
      if (""String_Node_Str"".equals(invocation.getMethod().getName())) {
        return 2048;
      }
      return invocation.callRealMethod();
    }
  }
);
  final Object stop=new Object();
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(4000);
      }
 catch (      final InterruptedException e) {
        throw new RuntimeException(e);
      }
      boolean notified=false;
synchronized (stop) {
        while (!notified) {
          stop.notifyAll();
          notified=true;
        }
      }
    }
  }
.start();
  final List<float[]> resultFloats=FluentClient.start().whileRecordingASound(new StreamInfo(2,10000,2,44100.0f,false,true,null),stop).findLoudestFrequencies().stopWithFreqs();
  Assert.assertThat(resultFloats,new IsNot<List<float[]>>(new IsNull<List<float[]>>()));
  Assert.assertNotEquals(resultFloats.size(),0);
  Assert.assertNotEquals(resultFloats.get(0).length,0);
}","@Test public void shapeAndMockRecordedSoundInParallel() throws Exception {
  final AudioRecord audioRecord=Mockito.mock(AudioRecord.class);
  Mockito.when(audioRecord.getState()).thenReturn(AudioRecord.STATE_INITIALIZED);
  Mockito.when(audioRecord.getRecordingState()).thenReturn(AudioRecord.STATE_INITIALIZED);
  Mockito.when(audioRecord.read(Matchers.any(short[].class),Matchers.any(int.class),Matchers.any(int.class))).thenReturn(1024);
  PowerMockito.whenNew(AudioRecord.class).withParameterTypes(int.class,int.class,int.class,int.class,int.class).withArguments(Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class),Matchers.any(int.class)).thenReturn(audioRecord);
  PowerMockito.mockStatic(AudioRecord.class,new Answer<Object>(){
    @Override public Object answer(    final InvocationOnMock invocation) throws Throwable {
      if (""String_Node_Str"".equals(invocation.getMethod().getName())) {
        return 2048;
      }
      return invocation.callRealMethod();
    }
  }
);
  final Object stop=new Object();
  new Thread(""String_Node_Str""){
    @Override public void run(){
      try {
        Thread.sleep(4000);
      }
 catch (      final InterruptedException e) {
        throw new RuntimeException(e);
      }
      boolean notified=false;
synchronized (stop) {
        while (!notified) {
          stop.notifyAll();
          notified=true;
        }
      }
    }
  }
.start();
  final List<float[]> resultFloats=FluentClient.start().whileRecordingASound(new StreamInfo(2,10000,2,44100.0f,false,true,null),stop).findLoudestFrequencies().stopWithFreqs();
  Assert.assertThat(resultFloats,new IsNot<List<float[]>>(new IsNull<List<float[]>>()));
  Assert.assertNotEquals(resultFloats.size(),0);
  Assert.assertNotEquals(resultFloats.get(0).length,0);
}",0.9952843273231624
81308,"@Test public void shapeAndMockRecordedSoundInParallel() throws Exception {
  this.rule.hashCode();
  final byte[][] buffers=new byte[15][1024];
  for (int i=0; i < 14; i++) {
    new Random().nextBytes(buffers[i]);
  }
  buffers[14]=new byte[0];
  this.mockRecordSoundProcessor(buffers);
  final Object stop=new Object();
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(4000);
      }
 catch (      final InterruptedException e) {
        throw new RuntimeException(e);
      }
      boolean notified=false;
synchronized (stop) {
        while (!notified) {
          stop.notifyAll();
          notified=true;
        }
      }
    }
  }
.start();
  final Sound resultSound=FluentClient.start().withAPack(""String_Node_Str"",Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str"")).whileRecordingASound(new StreamInfo(2,10000,2,44100.0f,false,true,null),stop).findLoudestFrequencies().shapeIntoSound(""String_Node_Str"",""String_Node_Str"",new FormatInfo(2,44100f)).stopWithSound();
  Assert.assertThat(resultSound,new IsNot<Sound>(new IsNull<Sound>()));
  Assert.assertNotNull(resultSound.getChannels());
  Assert.assertEquals(resultSound.getChannels().length,1);
  Assert.assertNotEquals(resultSound.getChannels()[0].getSamplesLength(),0);
}","@Test public void shapeAndMockRecordedSoundInParallel() throws Exception {
  this.rule.hashCode();
  final byte[][] buffers=new byte[15][1024];
  for (int i=0; i < 14; i++) {
    new Random().nextBytes(buffers[i]);
  }
  buffers[14]=new byte[0];
  this.mockRecordSoundProcessor(buffers);
  FluentClient.start().withAPack(""String_Node_Str"",Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str""));
  final Object stop=new Object();
  new Thread(""String_Node_Str""){
    @Override public void run(){
      try {
        Thread.sleep(300);
      }
 catch (      final InterruptedException e) {
        throw new RuntimeException(e);
      }
      boolean notified=false;
synchronized (stop) {
        while (!notified) {
          stop.notifyAll();
          notified=true;
        }
      }
    }
  }
.start();
  final Sound resultSound=FluentClient.start().whileRecordingASound(new StreamInfo(2,1024,2,8000.0f,false,true,null),stop).findLoudestFrequencies().shapeIntoSound(""String_Node_Str"",""String_Node_Str"",new FormatInfo(2,8000f)).stopWithSound();
  Assert.assertThat(resultSound,new IsNot<Sound>(new IsNull<Sound>()));
  Assert.assertNotNull(resultSound.getChannels());
  Assert.assertEquals(resultSound.getChannels().length,1);
  Assert.assertNotEquals(resultSound.getChannels()[0].getSamplesLength(),0);
}",0.8004543733434305
81309,"@Override public void run(){
  try {
    Thread.sleep(4000);
  }
 catch (  final InterruptedException e) {
    throw new RuntimeException(e);
  }
  boolean notified=false;
synchronized (stop) {
    while (!notified) {
      stop.notifyAll();
      notified=true;
    }
  }
}","@Override public void run(){
  try {
    Thread.sleep(300);
  }
 catch (  final InterruptedException e) {
    throw new RuntimeException(e);
  }
  boolean notified=false;
synchronized (stop) {
    while (!notified) {
      stop.notifyAll();
      notified=true;
    }
  }
}",0.9945155393053016
81310,"private float surroundFreqInRange(final float inputValue,final float low,final float high){
  float result=inputValue;
  while (result < low) {
    result*=SimpleSurroundInOctaveProcessor.TWO;
  }
  while (result > high) {
    result/=SimpleSurroundInOctaveProcessor.TWO;
  }
  while (result < low && result * SimpleSurroundInOctaveProcessor.TWO > high) {
    result*=SimpleSurroundInOctaveProcessor.OCTAVE_HALF;
  }
  return result;
}","private float surroundFreqInRange(final float inputValue,final float low,final float high){
  float result=inputValue;
  if (result == 0) {
    return 0;
  }
  while (result < low) {
    result*=SimpleSurroundInOctaveProcessor.TWO;
  }
  while (result > high) {
    result/=SimpleSurroundInOctaveProcessor.TWO;
  }
  while (result < low && result * SimpleSurroundInOctaveProcessor.TWO > high) {
    result*=SimpleSurroundInOctaveProcessor.OCTAVE_HALF;
  }
  return result;
}",0.9570957095709572
81311,"private Chart getChart(String[] notes,Spectrum<Complex[]>... fs){
  double[] xData=new double[fs[0].getState().length];
  double[][] yData=new double[fs.length][fs[0].getState().length];
  final float timelapseInTheCepstrum=fs[0].getState().length * 1.0f / fs[0].getSampleRate();
  for (int i=10; i < 1000; i++) {
    xData[i]=1.0 / (i * 1.0 / fs[0].getState().length * timelapseInTheCepstrum);
  }
  for (int j=0; j < fs.length; j++) {
    for (int i=10; i < 1000; i++) {
      yData[j][i]=(i > 10 && i < fs[j].getState().length - 10 ? fs[j].getState()[i].abs() : 0);
    }
  }
  return QuickChart.getChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",notes,xData,yData);
}","private Chart getChart(String[] notes,Spectrum<Complex[]>... fs){
  double[] xData=new double[fs[0].getState().length];
  double[][] yData=new double[fs.length][fs[0].getState().length];
  final float timelapseInTheCepstrum=fs[0].getState().length * 1.0f / fs[0].getSampleRate();
  for (int i=10; i < 1000; i++) {
    xData[i]=1.0 / (i * 1.0 / fs[0].getState().length * timelapseInTheCepstrum);
  }
  for (int j=0; j < fs.length; j++) {
    for (int i=10; i < 1000; i++) {
      yData[j][i]=(i > 10 && i < fs[j].getState().length - 10 ? fs[j].getState()[i].abs() : 0);
    }
  }
  Chart chart=QuickChart.getChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",notes,xData,yData);
  chart.setBackgroundColor(Color.BLACK);
  chart.setLegendBackgroundColor(Color.BLACK);
  chart.setForegroundColor(Color.BLACK);
  chart.setGridLinesColor(Color.LIGHT_GRAY);
  chart.setFontColor(Color.WHITE);
  return chart;
}",0.8471177944862155
81312,"@SuppressWarnings(""String_Node_Str"") @Test public void canAskToDoALotOfThingsToTheFluentClientOperationAndNothingShouldBeDone() throws SoundTransformException {
  FluentClientOperation.prepare().withAnObserver().andAfterStart().withAPack(null,new ByteArrayInputStream(new byte[0])).withAPack(null,""String_Node_Str"").withAPack(null,null,null,0).withAudioInputStream(null).importToSound().append(null).apply(null).changeFormat(null).cutSubSound(0,0).playIt().changeFormat(null).exportToClasspathResource(null).playIt().importToStream().playIt().importToSound().exportToClasspathResourceWithSiblingResource(null,null).convertIntoSound().exportToFile(null).convertIntoSound().exportToStream().importToSound().findLoudestFrequencies().compress(0).filterRange(0,0).insertPart(null,0).octaveDown().octaveUp().replacePart(null,0).shapeIntoSound(null,null,null).loop(0).mixWith(null).splitIntoSpectrums().playIt().extractSound().andAfterStart().inParallel(null,0,new File(""String_Node_Str"")).mixAllInOneSound().andAfterStart().inParallel(null,0,Arrays.asList(new float[0])).andAfterStart().inParallel(null,0,new ByteArrayInputStream(new byte[0])).andAfterStart().inParallel(null,0,new Sound[0]).andAfterStart().inParallel(null,0,""String_Node_Str"").andAfterStart().inParallel(null,0,FluentClient.start()).build();
}","@SuppressWarnings(""String_Node_Str"") @Test public void canAskToDoALotOfThingsToTheFluentClientOperationAndNothingShouldBeDone() throws SoundTransformException {
  FluentClientOperation.prepare().withAnObserver().andAfterStart().withAPack(null,new ByteArrayInputStream(new byte[0])).withAPack(null,""String_Node_Str"").withAPack(null,null,null,0).withAudioInputStream(null).importToSound().append(null).apply(null).changeFormat(null).cutSubSound(0,0).playIt().changeFormat(null).exportToClasspathResource(null).playIt().importToStream().playIt().importToSound().exportToClasspathResourceWithSiblingResource(null,null).convertIntoSound().exportToFile(null).convertIntoSound().exportToStream().importToSound().findLoudestFrequencies().compress(0).filterRange(0,0).insertPart(null,0).octaveDown().octaveUp().replacePart(null,0).shapeIntoSound(null,null,null).loop(0).mixWith(null).splitIntoSpectrums().playIt().extractSound().andAfterStart().inParallel(null,0,new File(""String_Node_Str"")).mixAllInOneSound().andAfterStart().inParallel(null,0,new LinkedList<float[]>()).andAfterStart().inParallel(null,0,new ByteArrayInputStream(new byte[0])).andAfterStart().inParallel(null,0,new Sound[0]).andAfterStart().inParallel(null,0,""String_Node_Str"").andAfterStart().inParallel(null,0,FluentClient.start()).build();
}",0.9877300613496932
81313,"/** 
 * Stops the client pipeline and get all the values inside each nested client
 * @param resultClass You have to specify what type of result you expect. the value can be one of this list : (Sound.class, InputStream.class, File.class, String.class, float [].class)
 * @return an array of results
 */
@Override @SuppressWarnings(""String_Node_Str"") public <T>T[] stopWithResults(final Class<T> resultClass){
  final T[] results=(T[])Array.newInstance(resultClass,this.parallelizedClients.length);
  int i=0;
  for (  final FluentClientCommon fcc : this.parallelizedClients) {
    if (resultClass == float[].class) {
      results[i++]=(T)((FluentClient)fcc).stopWithFreqs();
    }
 else     if (resultClass == Sound.class) {
      results[i++]=(T)((FluentClient)fcc).stopWithSound();
    }
 else     if (resultClass == InputStream.class) {
      results[i++]=(T)((FluentClient)fcc).stopWithInputStream();
    }
 else     if (resultClass == File.class) {
      results[i++]=(T)((FluentClient)fcc).stopWithFile();
    }
  }
  return results;
}","/** 
 * Stops the client pipeline and get all the values inside each nested client
 * @param resultClass You have to specify what type of result you expect. the value can be one of this list : (Sound.class, InputStream.class, File.class, String.class, float [].class)
 * @return an array of results
 */
@Override @SuppressWarnings(""String_Node_Str"") public <T>T[] stopWithResults(final Class<T> resultClass){
  final T[] results=(T[])Array.newInstance(resultClass,this.parallelizedClients.length);
  int i=0;
  for (  final FluentClientCommon fcc : this.parallelizedClients) {
    if (resultClass == List.class) {
      results[i++]=(T)((FluentClient)fcc).stopWithFreqs();
    }
 else     if (resultClass == Sound.class) {
      results[i++]=(T)((FluentClient)fcc).stopWithSound();
    }
 else     if (resultClass == InputStream.class) {
      results[i++]=(T)((FluentClient)fcc).stopWithInputStream();
    }
 else     if (resultClass == File.class) {
      results[i++]=(T)((FluentClient)fcc).stopWithFile();
    }
  }
  return results;
}",0.9947140797693416
81314,"@Override public String fsToString(final Spectrum<Complex[]> fs,final int low,final int high,final int compression,final int height){
  final StringBuilder sb=new StringBuilder();
  final float lastFrequency=fs.getState().length < high ? fs.getState().length : (float)high;
  final int length=(int)lastFrequency / compression;
  final int maxIndex=this.spectrumHelper.getMaxIndex(fs,low,high);
  final double maxValue=(double)fs.getState()[maxIndex].abs();
  final double maxMagn=(GraphSpectrumToStringHelper.DECIBELS_FORMULA_COEFFICIENT * Math.log10(maxValue));
  final int step=(int)lastFrequency / length;
  final int[] valuesOnPlot=this.prepareValuesOnPlot(fs,step,maxMagn,length,low,height);
  for (int j=height; j >= 0; j--) {
    this.diplayRow(sb,j,valuesOnPlot,this.getMaxValueOrMaxMagn(maxValue,maxMagn),length,height);
  }
  this.diplayFooter(sb,length,this.spectrumHelper,compression,lastFrequency);
  this.displayLoudestFrequency(sb,length,this.spectrumHelper,maxIndex,compression,lastFrequency);
  return sb.toString();
}","@Override public String fsToString(final Spectrum<Complex[]> fs,final int low,final int high,final int compression,final int height){
  final StringBuilder sb=new StringBuilder();
  final float lastFrequency=fs.getState().length < high ? fs.getState().length : (float)high;
  final int length=(int)lastFrequency / compression;
  final int maxIndex=this.spectrumHelper.getMaxIndex(fs,low,high);
  final double maxValue=(double)fs.getState()[maxIndex].abs();
  final double maxMagn=(GraphSpectrumToStringHelper.DECIBELS_FORMULA_COEFFICIENT * Math.log10(maxValue));
  final int step=(int)lastFrequency / length;
  final int[] valuesOnPlot=this.prepareValuesOnPlot(fs,step,this.getMaxValueOrMaxMagn(maxValue,maxMagn),length,low,height);
  for (int j=height; j >= 0; j--) {
    this.diplayRow(sb,j,valuesOnPlot,this.getMaxValueOrMaxMagn(maxValue,maxMagn),length,height);
  }
  this.diplayFooter(sb,length,this.spectrumHelper,compression,lastFrequency);
  this.displayLoudestFrequency(sb,length,this.spectrumHelper,maxIndex,compression,lastFrequency);
  return sb.toString();
}",0.976258309591643
81315,"@Test public void testCepstrum() throws SoundTransformException {
  CepstrumSoundTransformation<Serializable> cepstrum=new CepstrumSoundTransformation<Serializable>(100);
  FluentClient.start().withAnObserver(new Slf4jObserver(LogLevel.WARN)).withFile(new File(this.classLoader.getResource(""String_Node_Str"").getFile())).convertIntoSound().apply(cepstrum).exportToFile(this.output);
  new Slf4jObserver(LogLevel.INFO).notify(cepstrum.getCepstrums().get(0).toString());
}","@Test public void testCepstrum() throws SoundTransformException {
  CepstrumSoundTransformation<Serializable> cepstrum=new CepstrumSoundTransformation<Serializable>(100);
  FluentClient.start().withAnObserver(new Slf4jObserver(LogLevel.WARN)).withFile(new File(this.classLoader.getResource(""String_Node_Str"").getFile())).convertIntoSound().apply(cepstrum).exportToFile(this.output);
  new Slf4jObserver(LogLevel.INFO).notify(""String_Node_Str"" + cepstrum.getCepstrums().get(0).toString());
}",0.9791666666666666
81316,"@Override public FluentClientOperation extractSound() throws SoundTransformException {
  return this;
}","@Override public FluentClientOperation extractSound() throws SoundTransformException {
  this.steps.add(new Step(){
    @Override public void run(    final FluentClientInterface client) throws SoundTransformException {
      client.extractSound();
    }
  }
);
  return this;
}",0.4842105263157895
81317,"@Override @SuppressWarnings(""String_Node_Str"") public <T>List<T> stopWithResults(Class<T> resultClass){
  List<T> results=new LinkedList<T>();
  for (  FluentClientCommon fcc : this.parallelizedClients) {
    if (resultClass == float[].class) {
      results.add((T)((FluentClient)fcc).stopWithFreqs());
    }
 else     if (resultClass == Sound[].class) {
      results.add((T)((FluentClient)fcc).stopWithSounds());
    }
 else     if (resultClass == InputStream.class) {
      results.add((T)((FluentClient)fcc).stopWithInputStream());
    }
 else     if (resultClass == File.class) {
      results.add((T)((FluentClient)fcc).stopWithFile());
    }
  }
  return results;
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>T[] stopWithResults(Class<T> resultClass){
  final T[] results=(T[])Array.newInstance(resultClass,this.parallelizedClients.length);
  int i=0;
  for (  FluentClientCommon fcc : this.parallelizedClients) {
    if (resultClass == float[].class) {
      results[i++]=(T)((FluentClient)fcc).stopWithFreqs();
    }
 else     if (resultClass == Sound[].class) {
      results[i++]=(T)((FluentClient)fcc).stopWithSounds();
    }
 else     if (resultClass == InputStream.class) {
      results[i++]=(T)((FluentClient)fcc).stopWithInputStream();
    }
 else     if (resultClass == File.class) {
      results[i++]=(T)((FluentClient)fcc).stopWithFile();
    }
  }
  return (T[])results;
}",0.8693181818181818
81318,public abstract <T>List<T> stopWithResults(Class<T> resultClass);,public abstract <T>T[] stopWithResults(Class<T> resultClass);,0.9365079365079364
81319,"@Override public <T>List<T> stopWithResults(Class<T> resultClass){
  throw new SoundTransformRuntimeException(FluentClientOperationErrorCode.NOT_POSSIBLE_IN_AN_OPERATION,new UnsupportedOperationException());
}","@Override public <T>T[] stopWithResults(Class<T> resultClass){
  throw new SoundTransformRuntimeException(FluentClientOperationErrorCode.NOT_POSSIBLE_IN_AN_OPERATION,new UnsupportedOperationException());
}",0.9758454106280192
81320,<T>List<T> stopWithResults(Class<T> resultClass);,<T>T[] stopWithResults(Class<T> resultClass);,0.9148936170212766
81321,"@Override public Sound transform(final Sound input){
  final Sound[] onlyOneChannelSounds=new Sound[this.otherSounds.size()];
  int i=0;
  for (  final Sound[] sounds : this.otherSounds) {
    if (sounds.length > input.getChannelNum()) {
      onlyOneChannelSounds[i++]=sounds[input.getChannelNum()];
    }
  }
  return this.mix(input,onlyOneChannelSounds);
}","@Override public Sound transform(final Sound input){
  final Sound[] onlyOneChannelFromSounds=new Sound[this.otherSounds.size()];
  int i=0;
  for (  final Sound[] sounds : this.otherSounds) {
    if (sounds.length > input.getChannelNum()) {
      onlyOneChannelFromSounds[i++]=sounds[input.getChannelNum()];
    }
  }
  return this.mix(input,onlyOneChannelFromSounds);
}",0.9835616438356164
81322,"@Override public Sound transform(final Sound sound) throws SoundTransformException {
  if (this.pack == null) {
    throw new SoundTransformException(ShapeSoundTransformationErrorCode.NO_PACK_IN_PARAMETER,new NullPointerException());
  }
  final int step=100;
  int channelNum=1;
  int soundLength=0;
  this.log(new LogEvent(ShapeSoundTransformationEventCode.FINDING_LOUDEST_FREQUENCIES));
  if (this.freqs == null) {
    this.formatInfo=sound.getFormatInfo();
    soundLength=sound.getSamplesLength();
    this.freqs=this.getLoudestFreqs(sound,step);
    channelNum=sound.getChannelNum();
  }
  if (soundLength == 0) {
    soundLength=step * this.freqs.length;
  }
  return this.transform(step,channelNum,soundLength);
}","@Override public Sound transform(final Sound sound) throws SoundTransformException {
  if (this.pack == null) {
    throw new SoundTransformException(ShapeSoundTransformationErrorCode.NO_PACK_IN_PARAMETER,new NullPointerException());
  }
  final int step=100;
  int channelNum=0;
  int soundLength=0;
  this.log(new LogEvent(ShapeSoundTransformationEventCode.FINDING_LOUDEST_FREQUENCIES));
  if (this.freqs == null) {
    this.formatInfo=sound.getFormatInfo();
    soundLength=sound.getSamplesLength();
    this.freqs=this.getLoudestFreqs(sound,step);
    channelNum=sound.getChannelNum();
  }
  if (soundLength == 0) {
    soundLength=step * this.freqs.length;
  }
  return this.transform(step,channelNum,soundLength);
}",0.9986130374479888
81323,"private void writeSound(final InputStream ais,final StreamInfo isInfo,final Sound[] result) throws SoundTransformException {
  final long neutral=this.getNeutral(isInfo.getSampleSize());
  for (int position=0; position < (int)isInfo.getFrameLength(); position++) {
    final byte[] frame=new byte[isInfo.getSampleSize() * isInfo.getChannels()];
    try {
      final int frameSize=ais.read(frame);
      this.log(new LogEvent(FrameProcessorEventCode.READ_FRAME_SIZE,frameSize));
    }
 catch (    final IOException e) {
      throw new SoundTransformException(FrameProcessorErrorCode.COULD_NOT_READ_STREAM,e);
    }
    final int currentPercent=this.getPercent(position,isInfo.getFrameLength());
    final int lastPercent=this.getPercent(position - 1,isInfo.getFrameLength());
    if (currentPercent % ByteArrayFrameProcessor.EACH_X_PERCENT == 0 && lastPercent % ByteArrayFrameProcessor.EACH_X_PERCENT == ByteArrayFrameProcessor.EACH_X_PERCENT_MINUS_ONE) {
      this.log(new LogEvent(FrameProcessorEventCode.BYTEARRAY_TO_FRAME_CONVERSION,position,isInfo.getFrameLength(),currentPercent));
    }
    this.byteArrayToFrame(frame,result,position,isInfo.isBigEndian(),isInfo.isPcmSigned(),neutral);
  }
}","private void writeSound(final InputStream ais,final StreamInfo isInfo,final Sound[] result) throws SoundTransformException {
  final long neutral=this.getNeutral(isInfo.getSampleSize());
  final int frameLength=this.findFrameLength(ais,isInfo);
  for (int position=0; position < frameLength; position++) {
    final byte[] frame=new byte[isInfo.getSampleSize() * isInfo.getChannels()];
    try {
      final int frameSize=ais.read(frame);
      this.log(new LogEvent(FrameProcessorEventCode.READ_FRAME_SIZE,frameSize));
    }
 catch (    final IOException e) {
      throw new SoundTransformException(FrameProcessorErrorCode.COULD_NOT_READ_STREAM,e);
    }
    final int currentPercent=this.getPercent(position,isInfo.getFrameLength());
    final int lastPercent=this.getPercent(position - 1,isInfo.getFrameLength());
    if (currentPercent % ByteArrayFrameProcessor.EACH_X_PERCENT == 0 && lastPercent % ByteArrayFrameProcessor.EACH_X_PERCENT == ByteArrayFrameProcessor.EACH_X_PERCENT_MINUS_ONE) {
      this.log(new LogEvent(FrameProcessorEventCode.BYTEARRAY_TO_FRAME_CONVERSION,position,isInfo.getFrameLength(),currentPercent));
    }
    this.byteArrayToFrame(frame,result,position,isInfo.isBigEndian(),isInfo.isPcmSigned(),neutral);
  }
}",0.968481375358166
81324,"private int findFrameLength(final InputStream ais,final StreamInfo isInfo) throws SoundTransformException {
  try {
    return isInfo.getFrameLength() > 0 ? (int)isInfo.getFrameLength() : ais.available();
  }
 catch (  final IOException e) {
    throw new SoundTransformException(FrameProcessorErrorCode.COULD_NOT_FIND_LENGTH,e);
  }
}","private int findFrameLength(final InputStream ais,final StreamInfo isInfo) throws SoundTransformException {
  try {
    return isInfo.getFrameLength() > 0 ? (int)isInfo.getFrameLength() : ais.available() / isInfo.getSampleSize();
  }
 catch (  final IOException e) {
    throw new SoundTransformException(FrameProcessorErrorCode.COULD_NOT_FIND_LENGTH,e);
  }
}",0.9640287769784172
81325,"@Override public Object play(final InputStream ais,final StreamInfo streamInfo) throws PlaySoundException {
  StreamInfo si;
  try {
    si=$.select(AudioFormatParser.class).getStreamInfo(ais);
  }
 catch (  final SoundTransformException ste) {
    throw new PlaySoundException(ste);
  }
  final AudioTrack audioTrack=new AudioTrack(AudioManager.STREAM_MUSIC,(int)si.getSampleRate(),AudioFormat.CHANNEL_OUT_MONO,AudioFormat.ENCODING_PCM_16BIT,(int)si.getFrameLength(),AudioTrack.MODE_STATIC);
  final byte[] baSoundByteArray=new byte[(int)si.getFrameLength() * si.getSampleSize()];
  try {
    final int byteArraySize=ais.read(baSoundByteArray);
    this.log(new LogEvent(AndroidPlaySoundProcessorEventCode.READ_BYTEARRAY_SIZE,byteArraySize));
  }
 catch (  final IOException e1) {
    throw new PlaySoundException(new SoundTransformException(PlaySoundErrorCode.COULD_NOT_PLAY_SOUND,e1));
  }
  audioTrack.write(baSoundByteArray,0,baSoundByteArray.length);
  audioTrack.flush();
  audioTrack.play();
  final Thread thread=new Thread(){
    @Override public void run(){
      int lastFrame=-1;
      while (lastFrame != audioTrack.getPlaybackHeadPosition()) {
        lastFrame=audioTrack.getPlaybackHeadPosition();
        try {
          Thread.sleep(AndroidPlaySoundProcessor.ONE_SECOND);
        }
 catch (        final InterruptedException e) {
          throw new SoundTransformRuntimeException(new PlaySoundException(new SoundTransformException(PlaySoundErrorCode.COULD_NOT_PLAY_SOUND,e)));
        }
      }
      audioTrack.stop();
      audioTrack.release();
    }
  }
;
  thread.start();
  return thread;
}","@Override public Object play(final InputStream ais,final StreamInfo streamInfo) throws PlaySoundException {
  StreamInfo si;
  try {
    si=$.select(AudioFormatParser.class).getStreamInfo(ais);
  }
 catch (  final SoundTransformException ste) {
    throw new PlaySoundException(ste);
  }
  final int channelConf=this.getChannelConfiguration(si);
  final AudioTrack audioTrack=new AudioTrack(AudioManager.STREAM_MUSIC,(int)si.getSampleRate(),channelConf,streamInfo.getSampleSize() == 2 ? AudioFormat.ENCODING_PCM_16BIT : AudioFormat.ENCODING_PCM_8BIT,(int)si.getFrameLength() * streamInfo.getSampleSize(),AudioTrack.MODE_STATIC);
  final byte[] baSoundByteArray=new byte[(int)si.getFrameLength() * si.getSampleSize()];
  try {
    final int byteArraySize=ais.read(baSoundByteArray);
    this.log(new LogEvent(AndroidPlaySoundProcessorEventCode.READ_BYTEARRAY_SIZE,byteArraySize));
  }
 catch (  final IOException e1) {
    throw new PlaySoundException(new SoundTransformException(PlaySoundErrorCode.COULD_NOT_PLAY_SOUND,e1));
  }
  audioTrack.write(baSoundByteArray,0,baSoundByteArray.length);
  audioTrack.flush();
  audioTrack.play();
  final Thread thread=new Thread(){
    @Override public void run(){
      int lastFrame=-1;
      while (lastFrame != audioTrack.getPlaybackHeadPosition()) {
        lastFrame=audioTrack.getPlaybackHeadPosition();
        try {
          Thread.sleep(AndroidPlaySoundProcessor.ONE_SECOND);
        }
 catch (        final InterruptedException e) {
          throw new SoundTransformRuntimeException(new PlaySoundException(new SoundTransformException(PlaySoundErrorCode.COULD_NOT_PLAY_SOUND,e)));
        }
      }
      audioTrack.stop();
      audioTrack.release();
    }
  }
;
  thread.start();
  return thread;
}",0.943586698337292
81326,"private void writeAudioDataToFile() throws IOException {
  final short[] sData=new short[AndroidRecorderThread.ARBITRARY_BUFFER];
  while (this.recording) {
    if (this.audioRecord.getRecordingState() != AudioRecord.STATE_UNINITIALIZED) {
      final int read=this.audioRecord.read(sData,0,sData.length);
      if (read > 0) {
        this.baos.write(this.short2byte(sData),0,read);
      }
 else       if (read == 0) {
        this.recording=false;
      }
    }
  }
}","private void writeAudioDataToFile() throws IOException {
  final short[] sData=new short[AndroidRecorderThread.ARBITRARY_BUFFER];
  while (this.recording) {
    if (this.audioRecord.getRecordingState() != AudioRecord.STATE_UNINITIALIZED) {
      final int read=this.audioRecord.read(sData,0,sData.length);
      if (read > 0) {
        this.baos.write(this.short2byte(sData),0,read * AndroidRecorderThread.TWO);
      }
 else       if (read == 0) {
        this.recording=false;
      }
    }
  }
}",0.9710743801652892
81327,"@Test public void recordTwoSeconds() throws SoundTransformException {
  Sound[] sounds=FluentClient.start().withLimitedTimeRecordedInputStream(new StreamInfo(2,100000,2,48000,false,true,null)).importToSound().stopWithSounds();
  sounds.hashCode();
}","@Test public void recordTwoSeconds() throws SoundTransformException {
  FluentClient.start().withLimitedTimeRecordedInputStream(new StreamInfo(2,100000,2,48000,false,true,null)).writeToClasspathResourceWithSiblingResource(""String_Node_Str"",""String_Node_Str"");
}",0.7333333333333333
81328,"private void startRecording(AudioFormat audioFormat) throws SoundTransformException {
  final TargetDataLine line;
  DataLine.Info info=new DataLine.Info(TargetDataLine.class,audioFormat);
  this.baos=new ByteArrayOutputStream();
  if (!AudioSystem.isLineSupported(info)) {
    throw new SoundTransformException(TargetDataLineRecordSoundProcessorErrorCode.AUDIO_FORMAT_NOT_SUPPORTED,new UnsupportedOperationException(),audioFormat);
  }
  try {
    line=(TargetDataLine)AudioSystem.getLine(info);
    line.open(audioFormat);
  }
 catch (  LineUnavailableException ex) {
    throw new SoundTransformException(TargetDataLineRecordSoundProcessorErrorCode.TARGET_LINE_UNAVAILABLE,ex);
  }
  this.isRecording=true;
  line.start();
  new Thread(){
    public void run(){
      byte[] data=new byte[line.getBufferSize() / 5];
      while (TargetDataLineRecordSoundProcessor.this.isRecording) {
        final int numBytesRead=line.read(data,0,data.length);
        TargetDataLineRecordSoundProcessor.this.baos.write(data,0,numBytesRead);
      }
    }
  }
.start();
  line.close();
}","private void startRecording(AudioFormat audioFormat) throws SoundTransformException {
  DataLine.Info info=new DataLine.Info(TargetDataLine.class,audioFormat);
  this.baos=new ByteArrayOutputStream();
  if (!AudioSystem.isLineSupported(info)) {
    throw new SoundTransformException(TargetDataLineRecordSoundProcessorErrorCode.AUDIO_FORMAT_NOT_SUPPORTED,new UnsupportedOperationException(),audioFormat);
  }
  try {
    this.line=(TargetDataLine)AudioSystem.getLine(info);
    this.line.open(audioFormat);
  }
 catch (  LineUnavailableException ex) {
    throw new SoundTransformException(TargetDataLineRecordSoundProcessorErrorCode.TARGET_LINE_UNAVAILABLE,ex);
  }
  this.isRecording=true;
  this.line.start();
  new Thread(){
    public void run(){
      byte[] data=new byte[line.getBufferSize() / 5];
      while (TargetDataLineRecordSoundProcessor.this.isRecording) {
        final int numBytesRead=line.read(data,0,data.length);
        TargetDataLineRecordSoundProcessor.this.baos.write(data,0,numBytesRead);
      }
    }
  }
.start();
}",0.9716981132075472
81329,"private void stopRecording(){
  this.isRecording=false;
}","private void stopRecording(){
  this.isRecording=false;
  this.line.stop();
  this.line.close();
}",0.7354838709677419
81330,"private Clip prepareClip(InputStream ais) throws PlaySoundException {
  if (!(ais instanceof AudioInputStream)) {
    throw new PlaySoundException(new IllegalArgumentException(""String_Node_Str"" + ais));
  }
  try {
    final Line.Info linfo=new Line.Info(Clip.class);
    final Line line=AudioSystem.getLine(linfo);
    final Clip clip=(Clip)line;
    clip.addLineListener(new LineListener(){
      @Override public void update(      final LineEvent event){
        final LineEvent.Type type=event.getType();
        if (type == LineEvent.Type.STOP) {
synchronized (clip) {
            clip.stop();
            clip.close();
            clip.notify();
          }
        }
      }
    }
);
    clip.open((AudioInputStream)ais);
    return clip;
  }
 catch (  final LineUnavailableException lineUnavailableException) {
    throw new PlaySoundException(lineUnavailableException);
  }
catch (  final IOException e) {
    throw new PlaySoundException(e);
  }
}","private Clip prepareClip(InputStream ais) throws PlaySoundException {
  if (!(ais instanceof AudioInputStream)) {
    throw new PlaySoundException(new IllegalArgumentException(""String_Node_Str"" + ais));
  }
  try {
    final Line.Info linfo=new Line.Info(Clip.class);
    final Line line=AudioSystem.getLine(linfo);
    final Clip clip=(Clip)line;
    this.addLineListener(clip);
    clip.open((AudioInputStream)ais);
    return clip;
  }
 catch (  final LineUnavailableException lineUnavailableException) {
    throw new PlaySoundException(lineUnavailableException);
  }
catch (  final IOException e) {
    throw new PlaySoundException(e);
  }
catch (  final IllegalArgumentException e) {
    throw new PlaySoundException(e);
  }
}",0.7554766133806986
81331,"@Test public void playIt() throws SoundTransformException {
  FluentClient.start().withAnObserver(new Slf4jObserver(LogLevel.WARN)).withClasspathResource(""String_Node_Str"").playIt().convertIntoSound().playIt().exportToStream().playIt();
}","@Test public void playIt() throws SoundTransformException {
  try {
    FluentClient.start().withAnObserver(new Slf4jObserver(LogLevel.WARN)).withClasspathResource(""String_Node_Str"").playIt().convertIntoSound().playIt().exportToStream().playIt();
  }
 catch (  PlaySoundException pse) {
    new Slf4jObserver().notify(""String_Node_Str"" + pse);
  }
}",0.8109028960817717
81332,"@Test public void playBeforeWav() throws SoundTransformException {
  final PlaySoundProcessor ps=$.select(PlaySoundProcessor.class);
  final ConvertAudioFileService convertAudioFileService=$.create(ConvertAudioFileService.class);
  final InputStream ais=convertAudioFileService.callConverter(this.input);
  try {
    ps.play(ais);
  }
 catch (  final java.lang.IllegalArgumentException iae) {
    if (!""String_Node_Str"".equals(iae.getMessage())) {
      throw iae;
    }
  }
catch (  final PlaySoundException e) {
    if (!javax.sound.sampled.LineUnavailableException.class.equals(e.getCause().getClass())) {
      throw e;
    }
  }
catch (  final RuntimeException e) {
    if (!""String_Node_Str"".equals(e.getMessage())) {
      throw e;
    }
  }
}","@Test public void playBeforeWav() throws SoundTransformException {
  final PlaySoundProcessor ps=$.select(PlaySoundProcessor.class);
  final ConvertAudioFileService convertAudioFileService=$.create(ConvertAudioFileService.class);
  final InputStream ais=convertAudioFileService.callConverter(this.input);
  try {
    ps.play(ais);
  }
 catch (  final java.lang.IllegalArgumentException iae) {
    if (!""String_Node_Str"".equals(iae.getMessage())) {
      throw iae;
    }
  }
catch (  final PlaySoundException e) {
  }
catch (  final RuntimeException e) {
    if (!""String_Node_Str"".equals(e.getMessage())) {
      throw e;
    }
  }
}",0.884393063583815
81333,"@Test public void playBeforeWav() throws SoundTransformException {
  final PlaySoundProcessor ps=$.select(PlaySoundProcessor.class);
  final ConvertAudioFileService convertAudioFileService=$.create(ConvertAudioFileService.class);
  final InputStream ais=convertAudioFileService.callConverter(this.input);
  try {
    ps.play(ais);
  }
 catch (  final java.lang.IllegalArgumentException iae) {
    if (!""String_Node_Str"".equals(iae.getMessage())) {
      throw iae;
    }
  }
catch (  final PlaySoundException e) {
  }
catch (  final RuntimeException e) {
    if (!""String_Node_Str"".equals(e.getMessage())) {
      throw e;
    }
  }
}","@Test public void playBeforeWav() throws SoundTransformException {
  final PlaySoundProcessor ps=$.select(PlaySoundProcessor.class);
  final ConvertAudioFileService convertAudioFileService=$.create(ConvertAudioFileService.class);
  final InputStream ais=convertAudioFileService.callConverter(this.input);
  try {
    ps.play(ais);
  }
 catch (  final java.lang.IllegalArgumentException iae) {
    if (!""String_Node_Str"".equals(iae.getMessage())) {
      throw iae;
    }
  }
catch (  final PlaySoundException e) {
    if (!javax.sound.sampled.LineUnavailableException.class.equals(e.getCause().getClass()) && !java.lang.IllegalArgumentException.class.equals(e.getCause().getClass())) {
      throw e;
    }
  }
catch (  final RuntimeException e) {
    if (!""String_Node_Str"".equals(e.getMessage())) {
      throw e;
    }
  }
}",0.837782340862423
81334,"private void writeSound(final InputStream ais,final InputStreamInfo isInfo,final Sound[] result) throws SoundTransformException {
  final long neutral=isInfo.isPcmSigned() ? this.getNeutral(isInfo.getSampleSize()) : 0;
  for (int position=0; position < (int)isInfo.getFrameLength(); position++) {
    final byte[] frame=new byte[isInfo.getSampleSize() * isInfo.getChannels()];
    try {
      int frameSize=ais.read(frame);
      this.log(new LogEvent(FrameProcessorEventCode.READ_FRAME_SIZE,frameSize));
    }
 catch (    final IOException e) {
      throw new SoundTransformException(TransformInputStreamServiceErrorCode.COULD_NOT_READ_STREAM,e);
    }
    if (this.getPercent(position,isInfo.getFrameLength()) != this.getPercent(position - 1,isInfo.getFrameLength())) {
      this.log(new LogEvent(FrameProcessorEventCode.BYTEARRAY_TO_FRAME_CONVERSION,position,isInfo.getFrameLength(),this.getPercent(position,isInfo.getFrameLength())));
    }
    this.byteArrayToFrame(frame,result,position,isInfo.isBigEndian(),isInfo.isPcmSigned(),neutral);
  }
}","private void writeSound(final InputStream ais,final InputStreamInfo isInfo,final Sound[] result) throws SoundTransformException {
  final long neutral=this.getNeutral(isInfo.getSampleSize());
  for (int position=0; position < (int)isInfo.getFrameLength(); position++) {
    final byte[] frame=new byte[isInfo.getSampleSize() * isInfo.getChannels()];
    try {
      int frameSize=ais.read(frame);
      this.log(new LogEvent(FrameProcessorEventCode.READ_FRAME_SIZE,frameSize));
    }
 catch (    final IOException e) {
      throw new SoundTransformException(TransformInputStreamServiceErrorCode.COULD_NOT_READ_STREAM,e);
    }
    if (this.getPercent(position,isInfo.getFrameLength()) != this.getPercent(position - 1,isInfo.getFrameLength())) {
      this.log(new LogEvent(FrameProcessorEventCode.BYTEARRAY_TO_FRAME_CONVERSION,position,isInfo.getFrameLength(),this.getPercent(position,isInfo.getFrameLength())));
    }
    this.byteArrayToFrame(frame,result,position,isInfo.isBigEndian(),isInfo.isPcmSigned(),neutral);
  }
}",0.9870004814636496
81335,"public void playIt() throws SoundTransformException {
  FluentClient.start().withAnObserver(new Slf4jObserver(LogLevel.WARN)).withClasspathResource(""String_Node_Str"").playIt().convertIntoSound().playIt().exportToStream().playIt();
}","@Test public void playIt() throws SoundTransformException {
  FluentClient.start().withAnObserver(new Slf4jObserver(LogLevel.WARN)).withClasspathResource(""String_Node_Str"").playIt().convertIntoSound().playIt().exportToStream().playIt();
}",0.9872340425531916
81336,"@Override public Sound transform(final Sound input){
  return this.mix(input,this.otherSounds);
}","@Override public Sound transform(final Sound input){
  Sound[] onlyOneChannelSounds=new Sound[this.otherSounds.size()];
  int i=0;
  for (  Sound[] sounds : this.otherSounds) {
    if (sounds.length > input.getChannelNum()) {
      onlyOneChannelSounds[i++]=sounds[input.getChannelNum()];
    }
  }
  return this.mix(input,onlyOneChannelSounds);
}",0.3378378378378378
81337,"private Sound mix(final Sound firstSound,final Sound... sounds){
  int maxlength=0;
  final Sound[] ajustedSounds=new Sound[sounds.length + 1];
  ajustedSounds[0]=sounds[0];
  for (int i=1; i < sounds.length; i++) {
    ajustedSounds[i]=this.soundAppender.changeNbBytesPerSample(this.soundAppender.resizeToSampleRate(sounds[i - 1],firstSound.getSampleRate()),firstSound.getNbBytesPerSample());
  }
  for (  final Sound sound : ajustedSounds) {
    maxlength=Math.max(maxlength,sound.getSamples().length);
  }
  final long[] newdata=new long[maxlength];
  double max=0;
  for (int i=0; i < maxlength; i++) {
    long element=0;
    for (    final Sound sound : ajustedSounds) {
      if (sound.getSamples().length > i) {
        element+=Math.abs(sound.getSamples()[i]);
        newdata[i]=sound.getSamples()[i];
      }
    }
    max=Math.max(element,max);
  }
  final double maxValue=Math.pow(256,sounds[0].getNbBytesPerSample()) - 1;
  final double ratio=maxValue / max;
  for (int i=0; i < maxlength; i++) {
    newdata[i]*=ratio;
  }
  return new Sound(newdata,firstSound.getNbBytesPerSample(),firstSound.getSampleRate(),firstSound.getChannelNum());
}","private Sound mix(final Sound firstSound,final Sound... sounds){
  int maxlength=0;
  final Sound[] ajustedSounds=new Sound[sounds.length + 1];
  ajustedSounds[0]=firstSound;
  for (int i=1; i < sounds.length + 1; i++) {
    ajustedSounds[i]=this.soundAppender.changeNbBytesPerSample(this.soundAppender.resizeToSampleRate(sounds[i - 1],firstSound.getSampleRate()),firstSound.getNbBytesPerSample());
  }
  for (  final Sound sound : ajustedSounds) {
    maxlength=Math.max(maxlength,sound.getSamples().length);
  }
  final long[] newdata=new long[maxlength];
  double max=0;
  for (int i=0; i < maxlength; i++) {
    for (    final Sound sound : ajustedSounds) {
      if (sound.getSamples().length > i) {
        newdata[i]+=sound.getSamples()[i];
      }
    }
    max=Math.max(newdata[i],max);
  }
  final double maxValue=Math.pow(256,sounds[0].getNbBytesPerSample()) - 1;
  final double ratio=maxValue / (max * ajustedSounds.length);
  for (int i=0; i < maxlength; i++) {
    newdata[i]*=ratio;
  }
  return new Sound(newdata,firstSound.getNbBytesPerSample(),firstSound.getSampleRate(),firstSound.getChannelNum());
}",0.8891820580474934
81338,"public MixSoundTransformation(final Sound... otherSounds1){
  this.soundAppender=$.select(SoundAppender.class);
  this.otherSounds=otherSounds1;
}","public MixSoundTransformation(final List<Sound[]> otherSounds1){
  this.soundAppender=$.select(SoundAppender.class);
  this.otherSounds=otherSounds1;
}",0.9629629629629628
81339,"public void writeMetadata(ByteArrayWithAudioFormatInputStream audioInputStream,WavOutputStream outputStream) throws IOException {
  final InputStreamInfo info=audioInputStream.getInfo();
  final int fileSize=(int)(AndroidWavHelper.INFO_METADATA_SIZE + info.getSoundInfo().length() + (info.getFrameLength() * info.getSampleSize() * info.getChannels()));
  final int chunkSize=AndroidWavHelper.INFO_CHUNK_SIZE;
  final int typeOfEncoding=1;
  final int channels=info.getChannels();
  final int sampleRate=(int)info.getSampleRate();
  final int byterate=(int)info.getSampleRate() * info.getSampleSize();
  final int frameSize=info.getSampleSize() / info.getChannels();
  final int sampleSize=info.getSampleSize() * 8;
  final int dataSize=(int)info.getFrameLength() * info.getSampleSize();
  outputStream.write(AndroidWavHelper.RIFF.getBytes());
  outputStream.writeInt(fileSize);
  outputStream.write(AndroidWavHelper.WAVE.getBytes());
  outputStream.write(AndroidWavHelper.FMT_.getBytes());
  outputStream.writeInt(chunkSize);
  outputStream.writeShortInt(typeOfEncoding);
  outputStream.writeShortInt(channels);
  outputStream.writeInt(sampleRate);
  outputStream.writeInt(byterate);
  outputStream.writeShortInt(frameSize);
  outputStream.writeShortInt(sampleSize);
  if (info.getSoundInfo() != null) {
    outputStream.write(AndroidWavHelper.LIST.getBytes());
    outputStream.writeInt(info.getSoundInfo().length());
    outputStream.write(info.getSoundInfo().getBytes());
  }
  outputStream.write(AndroidWavHelper.DATA.getBytes());
  outputStream.writeInt(dataSize);
}","public void writeMetadata(ByteArrayWithAudioFormatInputStream audioInputStream,WavOutputStream outputStream) throws IOException {
  final InputStreamInfo info=audioInputStream.getInfo();
  final int soundInfoSize=info.getSoundInfo() == null ? 0 : info.getSoundInfo().length();
  final int fileSize=(int)(AndroidWavHelper.INFO_METADATA_SIZE + soundInfoSize + (info.getFrameLength() * info.getSampleSize() * info.getChannels()));
  final int chunkSize=AndroidWavHelper.INFO_CHUNK_SIZE;
  final int typeOfEncoding=1;
  final int channels=info.getChannels();
  final int sampleRate=(int)info.getSampleRate();
  final int byterate=(int)info.getSampleRate() * info.getSampleSize();
  final int frameSize=info.getSampleSize() / info.getChannels();
  final int sampleSize=info.getSampleSize() * 8;
  final int dataSize=(int)info.getFrameLength() * info.getSampleSize();
  outputStream.write(AndroidWavHelper.RIFF.getBytes());
  outputStream.writeInt(fileSize);
  outputStream.write(AndroidWavHelper.WAVE.getBytes());
  outputStream.write(AndroidWavHelper.FMT_.getBytes());
  outputStream.writeInt(chunkSize);
  outputStream.writeShortInt(typeOfEncoding);
  outputStream.writeShortInt(channels);
  outputStream.writeInt(sampleRate);
  outputStream.writeInt(byterate);
  outputStream.writeShortInt(frameSize);
  outputStream.writeShortInt(sampleSize);
  if (info.getSoundInfo() != null) {
    outputStream.write(AndroidWavHelper.LIST.getBytes());
    outputStream.writeInt(info.getSoundInfo().length());
    outputStream.write(info.getSoundInfo().getBytes());
  }
  outputStream.write(AndroidWavHelper.DATA.getBytes());
  outputStream.writeInt(dataSize);
}",0.9592788312092012
81340,"private void findMetadata() throws IOException {
  String string=this.readFourChars();
  if (!""String_Node_Str"".equals(string)) {
    throw new SoundTransformRuntimeException(new SoundTransformException(AudioInputStreamErrorCode.NO_MAGIC_NUMBER,new IllegalArgumentException()));
  }
  this.readInt();
  string=this.readFourChars();
  if (!""String_Node_Str"".equals(string)) {
    throw new SoundTransformRuntimeException(new SoundTransformException(AudioInputStreamErrorCode.NO_WAVE_HEADER,new IllegalArgumentException()));
  }
  string=this.readFourChars();
  if (!""String_Node_Str"".equals(string)) {
    throw new SoundTransformRuntimeException(new SoundTransformException(AudioInputStreamErrorCode.NO_WAVE_HEADER,new IllegalArgumentException()));
  }
  this.readInt();
  int typeOfEncoding=this.readShort();
  if (typeOfEncoding != 1) {
    throw new SoundTransformRuntimeException(new SoundTransformException(AudioInputStreamErrorCode.NON_PCM_WAV,new IllegalArgumentException()));
  }
  int channels=this.readShort();
  int sampleRate=(this.readInt() + 65536) % 65536;
  this.readInt();
  int frameSize=this.readShort();
  int sampleSize=this.readShort() / 8;
  string=this.readFourChars();
  if (""String_Node_Str"".equals(string)) {
    int soundInfoSize=this.readInt();
    this.skip(soundInfoSize);
    string=this.readFourChars();
  }
  if (!""String_Node_Str"".equals(string)) {
    throw new SoundTransformRuntimeException(new SoundTransformException(AudioInputStreamErrorCode.NO_DATA_SEPARATOR,new IllegalArgumentException()));
  }
  int dataSize=this.readInt();
  this.info=new InputStreamInfo(channels,dataSize / (frameSize * 8),sampleSize,sampleRate,false,true);
}","private void findMetadata() throws IOException {
  String string=this.readFourChars();
  if (!""String_Node_Str"".equals(string)) {
    throw new SoundTransformRuntimeException(new SoundTransformException(AudioInputStreamErrorCode.NO_MAGIC_NUMBER,new IllegalArgumentException()));
  }
  this.readInt();
  string=this.readFourChars();
  if (!""String_Node_Str"".equals(string)) {
    throw new SoundTransformRuntimeException(new SoundTransformException(AudioInputStreamErrorCode.NO_WAVE_HEADER,new IllegalArgumentException()));
  }
  string=this.readFourChars();
  if (!""String_Node_Str"".equals(string)) {
    throw new SoundTransformRuntimeException(new SoundTransformException(AudioInputStreamErrorCode.NO_WAVE_HEADER,new IllegalArgumentException()));
  }
  this.readInt();
  int typeOfEncoding=this.readShort();
  if (typeOfEncoding != 1) {
    throw new SoundTransformRuntimeException(new SoundTransformException(AudioInputStreamErrorCode.NON_PCM_WAV,new IllegalArgumentException()));
  }
  int channels=this.readShort();
  int sampleRate=(this.readInt() + 65536) % 65536;
  this.readInt();
  int frameSize=this.readShort();
  int sampleSize=this.readShort() / 8;
  string=this.readFourChars();
  if (""String_Node_Str"".equals(string)) {
    int soundInfoSize=this.readInt();
    this.skip(soundInfoSize);
    string=this.readFourChars();
  }
  if (!""String_Node_Str"".equals(string)) {
    throw new SoundTransformRuntimeException(new SoundTransformException(AudioInputStreamErrorCode.NO_DATA_SEPARATOR,new IllegalArgumentException()));
  }
  int dataSize=this.readInt();
  this.info=new InputStreamInfo(channels,dataSize / (frameSize),sampleSize,sampleRate,false,true);
}",0.998803827751196
81341,"private void getLoudestFreqs(Sound sound,int threshold){
  final PeakFindWithHPSSoundTransformation peak=new PeakFindWithHPSSoundTransformation(threshold,-1);
  peak.setObservers(this.observers);
  peak.transform(sound);
  freqs=peak.getLoudestFreqs();
}","private int[] getLoudestFreqs(Sound sound,int threshold){
  final PeakFindWithHPSSoundTransformation peak=new PeakFindWithHPSSoundTransformation(threshold,-1);
  peak.setObservers(this.observers);
  peak.transform(sound);
  return peak.getLoudestFreqs();
}",0.8941176470588236
81342,"private boolean freqHasChanged(int freq1,int freq2){
  return Math.abs(freq1 - freq2) > freq1 * 2.0 / 100;
}","private boolean freqHasChanged(int freq1,int freq2){
  return Math.abs(freq1 - freq2) > freq1 * 5.0 / 100;
}",0.9907407407407408
81343,"@Test public void test1() throws SoundTransformException {
  final int value=200;
  final int twopercents=(int)(value * 2.0 / 100 - 1);
  final List<String> messages=new LinkedList<String>();
  final int[] t=new int[2000];
  for (int i=200; i < 600; i++) {
    t[i]=(int)(value + Math.random() * twopercents - twopercents / 2);
  }
  for (int i=800; i < 1000; i++) {
    t[i]=(int)(value + Math.random() * twopercents - twopercents / 2);
  }
  for (int i=1100; i < 1600; i++) {
    t[i]=(int)(value + Math.random() * twopercents - twopercents / 2);
  }
  new ShapeSoundTransformation(Library.defaultPack,""String_Node_Str"",t).setObservers(new PrintlnTransformObserver(),new Observer(){
    @Override public void notify(    final LogEvent logEvent){
      messages.add(logEvent.toString());
    }
  }
).transform(200000,100,2,44100,1);
  Assert.assertTrue(messages.get(0).endsWith(""String_Node_Str""));
  Assert.assertTrue(messages.get(1).endsWith(""String_Node_Str""));
  Assert.assertTrue(messages.get(2).endsWith(""String_Node_Str""));
}","@Test public void test1() throws SoundTransformException {
  final int value=200;
  final int twopercents=(int)(value * 5.0 / 100 - 1);
  final List<String> messages=new LinkedList<String>();
  final int[] t=new int[2000];
  for (int i=200; i < 600; i++) {
    t[i]=(int)(value + Math.random() * twopercents - twopercents / 2);
  }
  for (int i=800; i < 1000; i++) {
    t[i]=(int)(value + Math.random() * twopercents - twopercents / 2);
  }
  for (int i=1100; i < 1600; i++) {
    t[i]=(int)(value + Math.random() * twopercents - twopercents / 2);
  }
  new ShapeSoundTransformation(Library.defaultPack,""String_Node_Str"",t).setObservers(new PrintlnTransformObserver(),new Observer(){
    @Override public void notify(    final LogEvent logEvent){
      messages.add(logEvent.toString());
    }
  }
).transform(200000,100,2,44100,1);
  Assert.assertTrue(messages.get(0).endsWith(""String_Node_Str""));
  Assert.assertTrue(messages.get(1).endsWith(""String_Node_Str""));
  Assert.assertTrue(messages.get(2).endsWith(""String_Node_Str""));
}",0.999031945788964
81344,"@Override public Sound initSound(final Sound input){
  this.loudestfreqs=new int[(int)(input.getSamples().length / this.threshold) + 1];
  if (this.note) {
    this.threshold=input.getSamples().length;
    this.fsLimit=input.getSamples().length;
  }
 else {
    this.fsLimit=input.getSampleRate();
  }
  this.soundLength=input.getSamples().length;
  return super.initSound(input);
}","@Override public Sound initSound(final Sound input){
  if (this.note) {
    this.threshold=input.getSamples().length;
    this.fsLimit=input.getSamples().length;
    this.loudestfreqs=new int[1];
  }
 else {
    this.loudestfreqs=new int[(int)(input.getSamples().length / this.threshold) + 1];
    this.fsLimit=input.getSampleRate();
  }
  this.soundLength=input.getSamples().length;
  return super.initSound(input);
}",0.355
81345,"public Sound transform(int length,int threshold,int nbBytesPerSample,int sampleRate,int channelNum) throws SoundTransformException {
  final Sound builtSound=new Sound(new long[length],nbBytesPerSample,sampleRate,channelNum);
  double lastFreq=freqs[0];
  int lastBegining=0;
  int countZeros=0;
  for (int i=0; i < freqs.length; i++) {
    final float lengthInSeconds=(i - lastBegining < 1 ? freqs[i] * threshold : (i - 1 - lastBegining) * threshold * 1.0f) / sampleRate;
    final boolean freqChanged=Math.abs(freqs[i] - lastFreq) > freqs[i] / 100;
    if (freqChanged && freqs[i] == 0) {
      countZeros++;
    }
 else {
      countZeros=0;
    }
    if (i == freqs.length - 1 || freqChanged && (lastFreq == 0 || freqs[i] == 0 && countZeros >= 3)) {
      countZeros=0;
      Note note=this.findNote(lastFreq,sampleRate,i,lastBegining);
      this.soundAppender.appendNote(builtSound,note,lastFreq,threshold * lastBegining,channelNum,lengthInSeconds);
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}","public Sound transform(int length,int threshold,int nbBytesPerSample,int sampleRate,int channelNum) throws SoundTransformException {
  final Sound builtSound=new Sound(new long[length],nbBytesPerSample,sampleRate,channelNum);
  double lastFreq=freqs[0];
  int lastBegining=0;
  int countZeros=0;
  for (int i=0; i < freqs.length; i++) {
    final float lengthInSeconds=(i - lastBegining < 1 ? freqs[i] * threshold : (i - 1 - lastBegining) * threshold * 1.0f) / sampleRate;
    final boolean freqChanged=Math.abs(freqs[i] - lastFreq) > freqs[i] / 100;
    if (freqChanged && freqs[i] == 0) {
      countZeros++;
    }
 else {
      countZeros=0;
    }
    if (i == freqs.length - 1 || freqChanged && (lastFreq == 0 || freqs[i] == 0 && countZeros >= 3)) {
      countZeros=0;
      Note note=this.findNote(lastFreq,sampleRate,i,lastBegining);
      this.soundAppender.appendNote(builtSound,note,lastFreq,threshold * lastBegining,channelNum,lengthInSeconds);
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  this.freqs=null;
  return builtSound;
}",0.9909047391096218
81346,"@Test public void test1() throws SoundTransformException {
  final int value=200;
  final int tenpercent=(int)(value * 2 / 100 - 1);
  final List<String> messages=new LinkedList<String>();
  final int[] t=new int[2000];
  for (int i=200; i < 600; i++) {
    t[i]=(int)(value + Math.random() * tenpercent - tenpercent / 2);
  }
  for (int i=800; i < 1000; i++) {
    t[i]=(int)(value + Math.random() * tenpercent - tenpercent / 2);
  }
  for (int i=1100; i < 1600; i++) {
    t[i]=(int)(value + Math.random() * tenpercent - tenpercent / 2);
  }
  new ShapeSoundTransformation(Library.defaultPack,""String_Node_Str"",t).setObservers(new PrintlnTransformObserver(),new Observer(){
    @Override public void notify(    final LogEvent logEvent){
      messages.add(logEvent.toString());
    }
  }
).transform(200000,100,2,44100,1);
  Assert.assertTrue(messages.get(0).endsWith(""String_Node_Str""));
  Assert.assertTrue(messages.get(1).endsWith(""String_Node_Str""));
  Assert.assertTrue(messages.get(2).endsWith(""String_Node_Str""));
}","@Test public void test1() throws SoundTransformException {
  final int value=200;
  final int twopercents=(int)(value * 2.0 / 100 - 1);
  final List<String> messages=new LinkedList<String>();
  final int[] t=new int[2000];
  for (int i=200; i < 600; i++) {
    t[i]=(int)(value + Math.random() * twopercents - twopercents / 2);
  }
  for (int i=800; i < 1000; i++) {
    t[i]=(int)(value + Math.random() * twopercents - twopercents / 2);
  }
  for (int i=1100; i < 1600; i++) {
    t[i]=(int)(value + Math.random() * twopercents - twopercents / 2);
  }
  new ShapeSoundTransformation(Library.defaultPack,""String_Node_Str"",t).setObservers(new PrintlnTransformObserver(),new Observer(){
    @Override public void notify(    final LogEvent logEvent){
      messages.add(logEvent.toString());
    }
  }
).transform(200000,100,2,44100,1);
  Assert.assertTrue(messages.get(0).endsWith(""String_Node_Str""));
  Assert.assertTrue(messages.get(1).endsWith(""String_Node_Str""));
  Assert.assertTrue(messages.get(2).endsWith(""String_Node_Str""));
}",0.9820126397666504
81347,"public Sound transform(AbstractFrequencySoundTransformation st,Sound sound){
  Sound output=st.initSound(sound);
  double freqmax=sound.getSampleRate();
  double threshold=st.getLowThreshold(freqmax);
  int maxlength=st.getWindowLength(freqmax);
  long[] data=sound.getSamples();
  long[] newdata=output.getSamples();
  double[] transformeddata=new double[maxlength];
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  for (int i=0; i < data.length; i+=threshold) {
    long maxValue=0;
    long minValue=Long.MAX_VALUE;
    int length=Math.min(maxlength,data.length - i);
    for (int j=i; j < i + length; j++) {
      if (j - i < threshold) {
        if (maxValue < data[j]) {
          maxValue=data[j];
        }
        if (minValue > data[j]) {
          minValue=data[j];
        }
      }
      transformeddata[j - i]=data[j];
    }
    Complex[] complexArray=fastFourierTransformer.transform(transformeddata,TransformType.FORWARD);
    Spectrum fs=new Spectrum(complexArray,(int)freqmax,sound.getNbBytesPerSample());
    Spectrum result=st.transformFrequencies(fs,i,maxlength,length,Math.abs(maxValue - minValue) > Math.pow(256,sound.getNbBytesPerSample()) / 6);
    if (result == null) {
      continue;
    }
    complexArray=fastFourierTransformer.transform(result.getState(),TransformType.INVERSE);
    int k=st.getOffsetFromASimpleLoop(i,freqmax);
    for (int j=0; j < freqmax; j++) {
      if (i + j + k < newdata.length && newdata[i + j + k] == 0) {
        newdata[i + j + k]=(long)Math.floor(complexArray[j].getReal());
      }
    }
  }
  return output;
}","public Sound transform(AbstractFrequencySoundTransformation st,Sound sound){
  Sound output=st.initSound(sound);
  double freqmax=sound.getSampleRate();
  double threshold=st.getLowThreshold(freqmax);
  int maxlength=st.getWindowLength(freqmax);
  long[] data=sound.getSamples();
  long[] newdata=output.getSamples();
  double[] transformeddata=new double[maxlength];
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  for (int i=0; i < data.length; i+=threshold) {
    long maxValue=0;
    long minValue=Long.MAX_VALUE;
    int length=Math.min(maxlength,data.length - i);
    for (int j=i; j < i + length; j++) {
      if (j - i < threshold) {
        if (maxValue < data[j]) {
          maxValue=data[j];
        }
        if (minValue > data[j]) {
          minValue=data[j];
        }
      }
      transformeddata[j - i]=data[j];
    }
    Complex[] complexArray=fastFourierTransformer.transform(transformeddata,TransformType.FORWARD);
    Spectrum fs=new Spectrum(complexArray,(int)freqmax,sound.getNbBytesPerSample());
    Spectrum result=st.transformFrequencies(fs,i,maxlength,length,Math.abs(maxValue - minValue) > Math.pow(256,sound.getNbBytesPerSample()) / 8);
    if (result == null) {
      continue;
    }
    complexArray=fastFourierTransformer.transform(result.getState(),TransformType.INVERSE);
    int k=st.getOffsetFromASimpleLoop(i,freqmax);
    for (int j=0; j < freqmax; j++) {
      if (i + j + k < newdata.length && newdata[i + j + k] == 0) {
        newdata[i + j + k]=(long)Math.floor(complexArray[j].getReal());
      }
    }
  }
  return output;
}",0.9993861264579496
81348,"@Override public Sound transform(Sound sound){
  int threshold=100;
  Note silence=new Silence();
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getSampleRate(),channelNum);
  List<Integer> freqs;
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PeakFindWithHPSSoundTransformation peak=new PeakFindWithHPSSoundTransformation(threshold,-1);
  peak.setObservers(this.observers);
  peak.transform(sound);
  freqs=peak.getLoudestFreqs();
  double lastFreq=freqs.get(0);
  int lastBegining=0;
  for (int i=0; i < freqs.size(); i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.size()));
    float lengthInSeconds=(i - lastBegining < 1 ? freqs.size() * threshold : (i - 1 - lastBegining) * threshold) / sound.getSampleRate();
    if (i == freqs.size() - 1 || (Math.abs(freqs.get(i) - lastFreq) > freqs.get(i) / 100 && lengthInSeconds > 0.5)) {
      Note note=silence;
      if (lastFreq > 50 && Math.abs(sound.getSampleRate() - lastFreq) > 100) {
        note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      }
      Sound attack=note.getAttack((int)lastFreq,channelNum,lengthInSeconds);
      Sound decay=note.getDecay((int)lastFreq,channelNum,lengthInSeconds);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,lengthInSeconds);
      Sound release=note.getRelease((int)lastFreq,channelNum,lengthInSeconds);
      soundAppender.append(builtSound,threshold * lastBegining,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs.get(i);
    }
  }
  return builtSound;
}","@Override public Sound transform(Sound sound){
  int threshold=100;
  Note silence=new Silence();
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getSampleRate(),channelNum);
  List<Integer> freqs;
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PeakFindWithHPSSoundTransformation peak=new PeakFindWithHPSSoundTransformation(threshold,-1);
  peak.setObservers(this.observers);
  peak.transform(sound);
  freqs=peak.getLoudestFreqs();
  double lastFreq=freqs.get(0);
  int lastBegining=0;
  int countZeros=0;
  for (int i=0; i < freqs.size(); i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.size()));
    float lengthInSeconds=(i - lastBegining < 1 ? freqs.size() * threshold : (i - 1 - lastBegining) * threshold * 1.0f) / sound.getSampleRate();
    boolean freqChanged=Math.abs(freqs.get(i) - lastFreq) > freqs.get(i) / 100 && lengthInSeconds > 0.5;
    if (freqChanged && freqs.get(i) == 0) {
      countZeros++;
    }
 else {
      countZeros=0;
    }
    if (i == freqs.size() - 1 || (freqChanged && (lastFreq == 0 || (freqs.get(i) == 0 && countZeros >= 3)))) {
      countZeros=0;
      Note note=silence;
      if (lastFreq > 50 && Math.abs(sound.getSampleRate() - lastFreq) > 100) {
        note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      }
      Sound attack=note.getAttack((int)lastFreq,channelNum,lengthInSeconds);
      Sound decay=note.getDecay((int)lastFreq,channelNum,lengthInSeconds);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,lengthInSeconds);
      Sound release=note.getRelease((int)lastFreq,channelNum,lengthInSeconds);
      soundAppender.append(builtSound,threshold * lastBegining,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs.get(i);
    }
  }
  return builtSound;
}",0.9132496513249652
81349,"@Override public Sound initSound(Sound input){
  this.loudestfreqs=new LinkedList<Integer>();
  if (this.note) {
    this.threshold=input.getSamples().length;
    this.fsLimit=input.getSamples().length;
  }
 else {
    this.fsLimit=input.getSampleRate();
  }
  this.soundLength=input.getSamples().length;
  return super.initSound(input);
}","@Override public Sound initSound(Sound input){
  this.loudestfreqs=new ArrayList<Integer>();
  if (this.note) {
    this.threshold=input.getSamples().length;
    this.fsLimit=input.getSamples().length;
  }
 else {
    this.fsLimit=input.getSampleRate();
  }
  this.soundLength=input.getSamples().length;
  return super.initSound(input);
}",0.983751846381093
81350,"@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getSampleRate(),channelNum);
  List<Integer> freqs;
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PeakFindWithHPSSoundTransformation peak=new PeakFindWithHPSSoundTransformation(100,-1);
  peak.setObservers(this.observers);
  peak.transform(sound);
  freqs=peak.getLoudestFreqs();
  double lastFreq=freqs.get(0);
  int lastBegining=0;
  for (int i=0; i < freqs.size(); i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.size()));
    float length=(i - lastBegining < 1 ? freqs.size() * threshold : (i - 1 - lastBegining) * threshold) / sound.getSampleRate();
    if (i == freqs.size() - 1 || (Math.abs(freqs.get(i) - lastFreq) > freqs.get(i) / 100 && length > sound.getSampleRate() / 2)) {
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      soundAppender.append(builtSound,threshold * lastBegining,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs.get(i);
    }
  }
  return builtSound;
}","@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getSampleRate(),channelNum);
  List<Integer> freqs;
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PeakFindWithHPSSoundTransformation peak=new PeakFindWithHPSSoundTransformation(100,-1);
  peak.setObservers(this.observers);
  peak.transform(sound);
  freqs=peak.getLoudestFreqs();
  double lastFreq=freqs.get(0);
  int lastBegining=0;
  for (int i=0; i < freqs.size(); i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.size()));
    float lengthInSeconds=(i - lastBegining < 1 ? freqs.size() * threshold : (i - 1 - lastBegining) * threshold) / sound.getSampleRate();
    if (i == freqs.size() - 1 || (Math.abs(freqs.get(i) - lastFreq) > freqs.get(i) / 100 && lengthInSeconds > 0.5)) {
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,lengthInSeconds);
      Sound decay=note.getDecay((int)lastFreq,channelNum,lengthInSeconds);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,lengthInSeconds);
      Sound release=note.getRelease((int)lastFreq,channelNum,lengthInSeconds);
      soundAppender.append(builtSound,threshold * lastBegining,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs.get(i);
    }
  }
  return builtSound;
}",0.7412076974120769
81351,"@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getSampleRate(),channelNum);
  List<Integer> freqs;
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PeakFindWithHPSSoundTransformation peak=new PeakFindWithHPSSoundTransformation(100,-1);
  peak.setObservers(this.observers);
  peak.transform(sound);
  freqs=peak.getLoudestFreqs();
  double lastFreq=freqs.get(0);
  int lastBegining=0;
  for (int i=0; i < freqs.size(); i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.size()));
    float lengthInSeconds=(i - lastBegining < 1 ? freqs.size() * threshold : (i - 1 - lastBegining) * threshold) / sound.getSampleRate();
    if (i == freqs.size() - 1 || (Math.abs(freqs.get(i) - lastFreq) > freqs.get(i) / 100 && lengthInSeconds > 0.5)) {
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,lengthInSeconds);
      Sound decay=note.getDecay((int)lastFreq,channelNum,lengthInSeconds);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,lengthInSeconds);
      Sound release=note.getRelease((int)lastFreq,channelNum,lengthInSeconds);
      soundAppender.append(builtSound,threshold * lastBegining,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs.get(i);
    }
  }
  return builtSound;
}","@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getSampleRate(),channelNum);
  List<Integer> freqs;
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PeakFindWithHPSSoundTransformation peak=new PeakFindWithHPSSoundTransformation(threshold,-1);
  peak.setObservers(this.observers);
  peak.transform(sound);
  freqs=peak.getLoudestFreqs();
  double lastFreq=freqs.get(0);
  int lastBegining=0;
  for (int i=0; i < freqs.size(); i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.size()));
    float lengthInSeconds=(i - lastBegining < 1 ? freqs.size() * threshold : (i - 1 - lastBegining) * threshold) / sound.getSampleRate();
    if (i == freqs.size() - 1 || (Math.abs(freqs.get(i) - lastFreq) > freqs.get(i) / 100 && lengthInSeconds > 0.5)) {
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,lengthInSeconds);
      Sound decay=note.getDecay((int)lastFreq,channelNum,lengthInSeconds);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,lengthInSeconds);
      Sound release=note.getRelease((int)lastFreq,channelNum,lengthInSeconds);
      soundAppender.append(builtSound,threshold * lastBegining,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs.get(i);
    }
  }
  return builtSound;
}",0.9960681520314548
81352,"public Sound transform(AbstractFrequencySoundTransformation st,Sound sound){
  Sound output=st.initSound(sound);
  double freqmax=sound.getSampleRate();
  double threshold=st.getLowThreshold(freqmax);
  int maxlength=st.getWindowLength(freqmax);
  long[] data=sound.getSamples();
  long[] newdata=output.getSamples();
  double[] transformeddata=new double[maxlength];
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  long maxValue=0;
  long minValue=Long.MAX_VALUE;
  for (int i=0; i < data.length; i+=threshold) {
    int length=Math.min(maxlength,data.length - i);
    for (int j=i; j < i + length; j++) {
      if (j - i < threshold) {
        if (maxValue < data[j]) {
          maxValue=data[j];
        }
        if (minValue > data[j]) {
          minValue=data[j];
        }
      }
      transformeddata[j - i]=data[j];
    }
    Complex[] complexArray=fastFourierTransformer.transform(transformeddata,TransformType.FORWARD);
    Spectrum fs=new Spectrum(complexArray,(int)freqmax,sound.getNbBytesPerSample());
    Spectrum result=st.transformFrequencies(fs,i,maxlength,length,Math.abs(maxValue - minValue) > Math.pow(256,sound.getNbBytesPerSample()) / 5);
    if (result == null) {
      continue;
    }
    complexArray=fastFourierTransformer.transform(result.getState(),TransformType.INVERSE);
    int k=st.getOffsetFromASimpleLoop(i,freqmax);
    for (int j=0; j < freqmax; j++) {
      if (i + j + k < newdata.length && newdata[i + j + k] == 0) {
        newdata[i + j + k]=(long)Math.floor(complexArray[j].getReal());
      }
    }
  }
  return output;
}","public Sound transform(AbstractFrequencySoundTransformation st,Sound sound){
  Sound output=st.initSound(sound);
  double freqmax=sound.getSampleRate();
  double threshold=st.getLowThreshold(freqmax);
  int maxlength=st.getWindowLength(freqmax);
  long[] data=sound.getSamples();
  long[] newdata=output.getSamples();
  double[] transformeddata=new double[maxlength];
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  for (int i=0; i < data.length; i+=threshold) {
    long maxValue=0;
    long minValue=Long.MAX_VALUE;
    int length=Math.min(maxlength,data.length - i);
    for (int j=i; j < i + length; j++) {
      if (j - i < threshold) {
        if (maxValue < data[j]) {
          maxValue=data[j];
        }
        if (minValue > data[j]) {
          minValue=data[j];
        }
      }
      transformeddata[j - i]=data[j];
    }
    Complex[] complexArray=fastFourierTransformer.transform(transformeddata,TransformType.FORWARD);
    Spectrum fs=new Spectrum(complexArray,(int)freqmax,sound.getNbBytesPerSample());
    Spectrum result=st.transformFrequencies(fs,i,maxlength,length,Math.abs(maxValue - minValue) > Math.pow(256,sound.getNbBytesPerSample()) / 6);
    if (result == null) {
      continue;
    }
    complexArray=fastFourierTransformer.transform(result.getState(),TransformType.INVERSE);
    int k=st.getOffsetFromASimpleLoop(i,freqmax);
    for (int j=0; j < freqmax; j++) {
      if (i + j + k < newdata.length && newdata[i + j + k] == 0) {
        newdata[i + j + k]=(long)Math.floor(complexArray[j].getReal());
      }
    }
  }
  return output;
}",0.968039336201598
81353,"private float getRatio(Sound[] subsound){
  float lengthOfSubsound=1.0f * subsound[0].getSamples().length / subsound[0].getSampleRate();
  float lengthOfSound=1.0f * (this.attack[0].getSamples().length / this.attack[0].getSampleRate() + this.decay[0].getSamples().length / this.decay[0].getSampleRate() + this.sustain[0].getSamples().length / this.sustain[0].getSampleRate() + this.release[0].getSamples().length / this.release[0].getSampleRate());
  return lengthOfSubsound * 1.0f / lengthOfSound;
}","private float getRatio(Sound[] subsound){
  float lengthOfSubsound=1.0f * subsound[0].getSamples().length / subsound[0].getSampleRate();
  float lengthOfSound=(1.0f * this.attack[0].getSamples().length / this.attack[0].getSampleRate() + 1.0f * this.decay[0].getSamples().length / this.decay[0].getSampleRate() + 1.0f * this.sustain[0].getSamples().length / this.sustain[0].getSampleRate() + 1.0f * this.release[0].getSamples().length / this.release[0].getSampleRate());
  return lengthOfSubsound * 1.0f / lengthOfSound;
}",0.9774730656219393
81354,"@Override public Sound getSustain(int frequency,int channelnum,float length){
  return new SoundPitchAndTempoService().callTransform(this.get(this.sustain,channelnum),this.getPercent(frequency),(int)(this.getRatio(this.sustain) * length));
}","@Override public Sound getSustain(int frequency,int channelnum,float length){
  return new SoundPitchAndTempoService().callTransform(this.get(this.sustain,channelnum),this.getPercent(frequency),(float)(this.getRatio(this.sustain) * length));
}",0.987603305785124
81355,"@Override public Sound getAttack(int frequency,int channelnum,float length){
  return new SoundPitchAndTempoService().callTransform(this.get(this.attack,channelnum),this.getPercent(frequency),(int)(this.getRatio(this.attack) * length));
}","@Override public Sound getAttack(int frequency,int channelnum,float length){
  return new SoundPitchAndTempoService().callTransform(this.get(this.attack,channelnum),this.getPercent(frequency),(float)(this.getRatio(this.attack) * length));
}",0.98744769874477
81356,"@Override public Sound getDecay(int frequency,int channelnum,float length){
  return new SoundPitchAndTempoService().callTransform(this.get(this.decay,channelnum),this.getPercent(frequency),(int)(this.getRatio(this.decay) * length));
}","@Override public Sound getDecay(int frequency,int channelnum,float length){
  return new SoundPitchAndTempoService().callTransform(this.get(this.decay,channelnum),this.getPercent(frequency),(float)(this.getRatio(this.decay) * length));
}",0.9872881355932204
81357,"@Override public Sound getRelease(int frequency,int channelnum,float length){
  return new SoundPitchAndTempoService().callTransform(this.get(this.release,channelnum),this.getPercent(frequency),(int)(this.getRatio(this.release) * length));
}","@Override public Sound getRelease(int frequency,int channelnum,float length){
  return new SoundPitchAndTempoService().callTransform(this.get(this.release,channelnum),this.getPercent(frequency),(float)(this.getRatio(this.release) * length));
}",0.987603305785124
81358,"public void testShape(){
  try {
    System.out.println(""String_Node_Str"");
    Library packsList=Library.getInstance();
    new TransformSoundService(new PrintlnTransformObserver()).transformFile(input,output,new EqualizerSoundTransformation(new double[]{0,20,50,100,120,140,160,180,200,220,1000,2000,5000,11000,22050},new double[]{0,0.5,0.75,1,1,1,1,0.70,0.30,0.00,0.00,0.00,0.00,0.00,0.00}),new NormalizeSoundTransformation(),new ShapeSoundTransformation(packsList.defaultPack,""String_Node_Str""));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@Test public void testShape(){
  try {
    System.out.println(""String_Node_Str"");
    Library packsList=Library.getInstance();
    new TransformSoundService(new PrintlnTransformObserver()).transformFile(input,output,new EqualizerSoundTransformation(new double[]{0,20,50,100,120,140,160,180,200,220,1000,2000,5000,11000,44100},new double[]{0,0.5,0.75,1,1,1,1,0.70,0.30,0.00,0.00,0.00,0.00,0.00,0.00}),new NormalizeSoundTransformation(),new ShapeSoundTransformation(packsList.defaultPack,""String_Node_Str""));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9890282131661442
81359,"public AudioInputStream getAudioInputStream(File inputFile) throws UnsupportedAudioFileException, IOException {
  File tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  if (inputFile.getName().toLowerCase().endsWith(""String_Node_Str"")) {
    AudioInputStream ais=new javazoom.spi.mpeg.sampled.file.MpegAudioFileReader().getAudioInputStream(inputFile);
    AudioFormat cdFormat=new AudioFormat(44100,16,2,true,false);
    javazoom.spi.mpeg.sampled.convert.DecodedMpegAudioInputStream decodedais=new javazoom.spi.mpeg.sampled.convert.DecodedMpegAudioInputStream(cdFormat,ais);
    AudioSystem.write(decodedais,AudioFileFormat.Type.WAVE,tempFile);
  }
  return AudioSystem.getAudioInputStream(tempFile);
}","public AudioInputStream getAudioInputStream(File inputFile) throws UnsupportedAudioFileException, IOException {
  File readFile=inputFile;
  if (inputFile.getName().toLowerCase().endsWith(""String_Node_Str"")) {
    File tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    AudioInputStream ais=new javazoom.spi.mpeg.sampled.file.MpegAudioFileReader().getAudioInputStream(inputFile);
    AudioFormat cdFormat=new AudioFormat(44100,16,2,true,false);
    javazoom.spi.mpeg.sampled.convert.DecodedMpegAudioInputStream decodedais=new javazoom.spi.mpeg.sampled.convert.DecodedMpegAudioInputStream(cdFormat,ais);
    AudioSystem.write(decodedais,AudioFileFormat.Type.WAVE,tempFile);
    readFile=tempFile;
  }
  return AudioSystem.getAudioInputStream(readFile);
}",0.8540829986613119
81360,"public Sound transform(AbstractFrequencySoundTransformation st,Sound sound){
  Sound output=st.initSound(sound);
  double freqmax=sound.getSampleRate();
  double threshold=st.getLowThreshold(freqmax);
  int maxlength=st.getWindowLength(freqmax);
  long[] data=sound.getSamples();
  long[] newdata=output.getSamples();
  double[] transformeddata=new double[maxlength];
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  for (int i=0; i < data.length; i+=threshold) {
    int length=Math.min(maxlength,data.length - i);
    for (int j=i; j < i + length; j++) {
      transformeddata[j - i]=data[j];
    }
    Complex[] complexArray=fastFourierTransformer.transform(transformeddata,TransformType.FORWARD);
    Spectrum fs=new Spectrum(complexArray,(int)freqmax,sound.getNbBytesPerSample() / sound.getSamples().length);
    Spectrum result=st.transformFrequencies(fs,i,maxlength,length);
    if (result == null) {
      continue;
    }
    complexArray=fastFourierTransformer.transform(result.getState(),TransformType.INVERSE);
    int k=st.getOffsetFromASimpleLoop(i,freqmax);
    for (int j=0; j < freqmax; j++) {
      if (i + j + k < newdata.length && newdata[i + j + k] == 0) {
        newdata[i + j + k]=(long)Math.floor(complexArray[j].getReal());
      }
    }
  }
  return output;
}","public Sound transform(AbstractFrequencySoundTransformation st,Sound sound){
  Sound output=st.initSound(sound);
  double freqmax=sound.getSampleRate();
  double threshold=st.getLowThreshold(freqmax);
  int maxlength=st.getWindowLength(freqmax);
  long[] data=sound.getSamples();
  long[] newdata=output.getSamples();
  double[] transformeddata=new double[maxlength];
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  for (int i=0; i < data.length; i+=threshold) {
    int length=Math.min(maxlength,data.length - i);
    for (int j=i; j < i + length; j++) {
      transformeddata[j - i]=data[j];
    }
    Complex[] complexArray=fastFourierTransformer.transform(transformeddata,TransformType.FORWARD);
    Spectrum fs=new Spectrum(complexArray,(int)freqmax,sound.getNbBytesPerSample());
    Spectrum result=st.transformFrequencies(fs,i,maxlength,length);
    if (result == null) {
      continue;
    }
    complexArray=fastFourierTransformer.transform(result.getState(),TransformType.INVERSE);
    int k=st.getOffsetFromASimpleLoop(i,freqmax);
    for (int j=0; j < freqmax; j++) {
      if (i + j + k < newdata.length && newdata[i + j + k] == 0) {
        newdata[i + j + k]=(long)Math.floor(complexArray[j].getReal());
      }
    }
  }
  return output;
}",0.9894498869630746
81361,"public int getMaxIndex(Spectrum fs,int low,int high){
  double max=0;
  int maxIndex=0;
  int reallow=low == 0 ? 1 : low;
  int realhigh=Math.min(high,fs.getState().length);
  for (int i=reallow; i < realhigh; i++) {
    if (max < fs.getState()[i].abs() && fs.getState()[i].abs() > Math.pow(256,fs.getNbBytes()) / 2) {
      max=fs.getState()[i].abs();
      maxIndex=i;
    }
  }
  return maxIndex;
}","public int getMaxIndex(Spectrum fs,int low,int high){
  double max=0;
  int maxIndex=0;
  int reallow=low == 0 ? 1 : low;
  int realhigh=Math.min(high,fs.getState().length);
  for (int i=reallow; i < realhigh; i++) {
    if (max < fs.getState()[i].abs() && fs.getState()[i].abs() > Math.pow(256,fs.getNbBytes()) + 1) {
      max=fs.getState()[i].abs();
      maxIndex=i;
    }
  }
  return maxIndex;
}",0.9925187032418952
81362,"public Spectrum(Complex[] state,int sampleRate,int nbBytes){
  super();
  this.state=state;
  this.sampleRate=sampleRate;
}","public Spectrum(Complex[] state,int sampleRate,int nbBytes){
  super();
  this.state=state;
  this.sampleRate=sampleRate;
  this.nbBytes=nbBytes;
}",0.9111111111111112
81363,"private static Sound pitch(Sound sound,float percent){
  float total=100;
  if (percent == total) {
    return new Sound(sound.getSamples(),sound.getNbBytesPerSample(),sound.getSampleRate(),sound.getChannelNum());
  }
  float nbSamples=sound.getSamples().length;
  float nbFiltered=Math.abs(percent / total * nbSamples);
  float incr=nbSamples / nbFiltered;
  long[] data=sound.getSamples();
  long[] ret=new long[(int)(nbFiltered)];
  for (float i=0; i < incr * nbFiltered; i+=incr) {
    int j=(int)(i / incr);
    if (j < ret.length) {
      ret[j]=data[(int)i];
    }
  }
  return new Sound(ret,sound.getNbBytesPerSample(),sound.getSampleRate(),sound.getChannelNum());
}","private static Sound pitch(Sound sound,float percent){
  float total=100;
  if (percent == total) {
    return new Sound(sound.getSamples(),sound.getNbBytesPerSample(),sound.getSampleRate(),sound.getChannelNum());
  }
  float nbSamples=sound.getSamples().length;
  float nbFiltered=Math.abs(total * nbSamples / percent);
  float incr=nbSamples / nbFiltered;
  long[] data=sound.getSamples();
  long[] ret=new long[(int)(nbFiltered)];
  for (float i=0; i < incr * nbFiltered; i+=incr) {
    int j=(int)(i / incr);
    if (j < ret.length) {
      ret[j]=data[(int)i];
    }
  }
  return new Sound(ret,sound.getNbBytesPerSample(),sound.getSampleRate(),sound.getChannelNum());
}",0.9643916913946587
81364,"@Test public void testPitch(){
  try {
    new TransformSoundService(new PrintlnTransformObserver()).transformFile(input,output,new PitchSoundTransformation(85));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@Test public void testPitch(){
  try {
    new TransformSoundService(new PrintlnTransformObserver()).transformFile(input,output,new PitchSoundTransformation(100));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9915966386554622
81365,"private static Sound upsampleWithRatio(Sound sound,float ratio){
  float appendWhileLessThanOrEqualsRatio=0;
  int indexResult=0;
  long[] result=new long[(int)Math.ceil(sound.getSamples().length * ratio)];
  for (int i=0; i < sound.getSamples().length; i++) {
    while (appendWhileLessThanOrEqualsRatio <= ratio) {
      result[indexResult++]=sound.getSamples()[i];
      appendWhileLessThanOrEqualsRatio++;
    }
    appendWhileLessThanOrEqualsRatio-=ratio;
  }
  return new Sound(result,sound.getNbBytesPerSample(),(int)(sound.getSampleRate() * ratio),sound.getChannelNum());
}","private static Sound upsampleWithRatio(Sound sound,float ratio){
  float appendWhileLessThanOrEqualsRatio=0;
  int indexResult=0;
  long[] result=new long[(int)Math.ceil(sound.getSamples().length * (ratio + 1))];
  for (int i=0; i < sound.getSamples().length; i++) {
    while (appendWhileLessThanOrEqualsRatio <= ratio) {
      result[indexResult++]=sound.getSamples()[i];
      appendWhileLessThanOrEqualsRatio++;
    }
    appendWhileLessThanOrEqualsRatio-=ratio;
  }
  return new Sound((indexResult == 0 ? new long[0] : Arrays.copyOfRange(result,0,indexResult - 1)),sound.getNbBytesPerSample(),(int)(sound.getSampleRate() * ratio),sound.getChannelNum());
}",0.918614020950846
81366,"@Override public Sound transform(Sound input){
  double compression=input.getSamples().length / this.length;
  this.sb=new StringBuffer();
  float lastSample=input.getSamples().length;
  long maxMagn=(long)Math.pow(256,input.getNbBytesPerSample()) / 2;
  int step=(int)lastSample / this.length;
  int[] valuesOnPlot=new int[this.length];
  int maxPlotValue=0;
  double minValuePlotted=-1;
  for (int i=0; i < valuesOnPlot.length; i++) {
    double maxValue=0;
    for (int j=0; j < step; j++) {
      int x=i * step + j;
      if (x < input.getSamples().length && maxValue < input.getSamples()[x]) {
        maxValue=20.0 * Math.log10(input.getSamples()[x]);
      }
    }
    if (minValuePlotted == -1 || minValuePlotted > maxValue) {
      minValuePlotted=maxValue;
    }
    valuesOnPlot[i]=(int)(maxValue * height / (maxMagn));
    if (maxPlotValue < valuesOnPlot[i] && i > 0) {
      maxPlotValue=valuesOnPlot[i];
    }
  }
  for (int i=0; i < valuesOnPlot.length; i++) {
    valuesOnPlot[i]-=minValuePlotted * height / maxMagn;
  }
  for (int j=height; j >= 0; j--) {
    if (j == height) {
      sb.append(""String_Node_Str"" + maxMagn + ""String_Node_Str"");
      continue;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    for (int i=0; i < this.length; i++) {
      if (valuesOnPlot[i] == j) {
        sb.append(""String_Node_Str"");
      }
 else       if (valuesOnPlot[i] > j) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  for (int i=0; i < this.length; i++) {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + (int)(this.length * compression / input.getSampleRate()) + ""String_Node_Str"");
  return input;
}","@Override public Sound transform(Sound input){
  double compression=input.getSamples().length / this.length;
  this.sb=new StringBuffer();
  float lastSample=input.getSamples().length;
  long maxMagn=(long)Math.pow(256,input.getNbBytesPerSample()) / 2;
  int step=(int)lastSample / this.length;
  int[] valuesOnPlot=new int[this.length];
  int maxPlotValue=0;
  double minValuePlotted=-1;
  for (int i=0; i < valuesOnPlot.length; i++) {
    double maxValue=0;
    for (int j=0; j < step; j++) {
      int x=i * step + j;
      if (x < input.getSamples().length && maxValue < input.getSamples()[x]) {
        maxValue=input.getSamples()[x];
      }
    }
    if (minValuePlotted == -1 || minValuePlotted > maxValue) {
      minValuePlotted=maxValue;
    }
    valuesOnPlot[i]=(int)(maxValue * height / (maxMagn));
    if (maxPlotValue < valuesOnPlot[i] && i > 0) {
      maxPlotValue=valuesOnPlot[i];
    }
  }
  for (int i=0; i < valuesOnPlot.length; i++) {
    valuesOnPlot[i]-=minValuePlotted * height / maxMagn;
  }
  for (int j=height; j >= 0; j--) {
    if (j == height) {
      sb.append(""String_Node_Str"" + maxMagn + ""String_Node_Str"");
      continue;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    for (int i=0; i < this.length; i++) {
      if (valuesOnPlot[i] == j) {
        sb.append(""String_Node_Str"");
      }
 else       if (valuesOnPlot[i] > j) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  for (int i=0; i < this.length; i++) {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + (int)(this.length * compression / input.getSampleRate()) + ""String_Node_Str"");
  return input;
}",0.9946282160022618
81367,"private Sound transformSubsound(Sound[] subSound,int channelNum,int frequency,int length){
  int percent=(int)(frequency * 100.0 / this.frequency);
  Sound result=subSound[channelNum];
  PitchSoundTransformation pitcher=new PitchSoundTransformation(percent);
  if (percent < 98 || percent > 102) {
    result=pitcher.transform(result);
  }
  double factor=subSound[0].getSamples().length == 0 ? 0 : length * 1.0 / result.getSamples().length;
  if (factor == 0) {
    return result;
  }
 else   if (factor < 0.98 || factor > 1.02) {
    if (factor < 0.98) {
      SpeedUpSoundTransformation speedup=new SpeedUpSoundTransformation(100,(float)(1 / factor));
      result=speedup.transform(result);
    }
 else     if (factor > 1.02) {
      SlowdownSoundTransformation slowdown=new SlowdownSoundTransformation(100,(float)factor);
      result=slowdown.transform(result);
    }
  }
  return result;
}","private Sound transformSubsound(Sound[] subSound,int channelNum,int frequency,int length){
  int percent=(int)(frequency * 100.0 / this.frequency);
  Sound result=subSound[(subSound.length > channelNum ? channelNum : subSound.length - 1)];
  PitchSoundTransformation pitcher=new PitchSoundTransformation(percent);
  if (percent < 98 || percent > 102) {
    result=pitcher.transform(result);
  }
  double factor=subSound[0].getSamples().length == 0 ? 0 : length * 1.0 / result.getSamples().length;
  if (factor == 0) {
    return result;
  }
 else   if (factor < 0.98 || factor > 1.02) {
    if (factor < 0.98) {
      SpeedUpSoundTransformation speedup=new SpeedUpSoundTransformation(100,(float)(1 / factor));
      result=speedup.transform(result);
    }
 else     if (factor > 1.02) {
      SlowdownSoundTransformation slowdown=new SlowdownSoundTransformation(100,(float)factor);
      result=slowdown.transform(result);
    }
  }
  return result;
}",0.9702219815917704
81368,"@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  List<Integer> freqs;
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PeakFindSoundTransformation peak=new PeakFindSoundTransformation(threshold);
  peak.transform(sound);
  freqs=peak.getLoudestFreqs();
  double lastFreq=freqs.get(0);
  int lastBegining=0;
  for (int i=0; i < freqs.size(); i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.size()));
    int length=(i - 1 - lastBegining) * threshold;
    if (Math.abs(freqs.get(i) - lastFreq) > freqs.get(i) / 100 && length > sound.getFreq() / 2) {
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      builtSound.append(threshold * lastBegining,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs.get(i);
    }
  }
  return builtSound;
}","@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  List<Integer> freqs;
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PeakFindSoundTransformation peak=new PeakFindSoundTransformation(threshold);
  peak.transform(sound);
  freqs=peak.getLoudestFreqs();
  double lastFreq=freqs.get(0);
  int lastBegining=0;
  for (int i=0; i < freqs.size(); i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.size()));
    int length=(i - 1 - lastBegining) * threshold;
    if (i == freqs.size() - 1 || (Math.abs(freqs.get(i) - lastFreq) > freqs.get(i) / 100 && length > sound.getFreq() / 2)) {
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      builtSound.append(threshold * lastBegining,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs.get(i);
    }
  }
  return builtSound;
}",0.989815164089023
81369,"@Override public Sound transform(Sound input){
  double compression=input.getSamples().length / this.length;
  this.sb=new StringBuffer();
  float lastSample=input.getSamples().length;
  long maxMagn=128;
  int step=(int)lastSample / this.length;
  int[] valuesOnPlot=new int[this.length];
  int maxPlotValue=0;
  double minValuePlotted=-1;
  for (int i=0; i < valuesOnPlot.length; i++) {
    double maxValue=0;
    for (int j=0; j < step; j++) {
      int x=i * step + j;
      if (x < input.getSamples().length && maxValue < input.getSamples()[x]) {
        maxValue=20.0 * Math.log10(input.getSamples()[x]);
      }
    }
    if (minValuePlotted == -1 || minValuePlotted > maxValue) {
      minValuePlotted=maxValue;
    }
    valuesOnPlot[i]=(int)(maxValue * height / (maxMagn));
    if (maxPlotValue < valuesOnPlot[i] && i > 0) {
      maxPlotValue=valuesOnPlot[i];
    }
  }
  for (int i=0; i < valuesOnPlot.length; i++) {
    valuesOnPlot[i]-=minValuePlotted * height / maxMagn;
  }
  for (int j=height; j >= 0; j--) {
    if (j == height) {
      sb.append(""String_Node_Str"" + maxMagn + ""String_Node_Str"");
      continue;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    for (int i=0; i < this.length; i++) {
      if (valuesOnPlot[i] == j) {
        sb.append(""String_Node_Str"");
      }
 else       if (valuesOnPlot[i] > j) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  for (int i=0; i < this.length; i++) {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + (int)(this.length * compression / input.getFreq()) + ""String_Node_Str"");
  return input;
}","@Override public Sound transform(Sound input){
  double compression=input.getSamples().length / this.length;
  this.sb=new StringBuffer();
  float lastSample=input.getSamples().length;
  long maxMagn=(long)Math.pow(256,input.getNbBytesPerSample()) / 2;
  int step=(int)lastSample / this.length;
  int[] valuesOnPlot=new int[this.length];
  int maxPlotValue=0;
  double minValuePlotted=-1;
  for (int i=0; i < valuesOnPlot.length; i++) {
    double maxValue=0;
    for (int j=0; j < step; j++) {
      int x=i * step + j;
      if (x < input.getSamples().length && maxValue < input.getSamples()[x]) {
        maxValue=20.0 * Math.log10(input.getSamples()[x]);
      }
    }
    if (minValuePlotted == -1 || minValuePlotted > maxValue) {
      minValuePlotted=maxValue;
    }
    valuesOnPlot[i]=(int)(maxValue * height / (maxMagn));
    if (maxPlotValue < valuesOnPlot[i] && i > 0) {
      maxPlotValue=valuesOnPlot[i];
    }
  }
  for (int i=0; i < valuesOnPlot.length; i++) {
    valuesOnPlot[i]-=minValuePlotted * height / maxMagn;
  }
  for (int j=height; j >= 0; j--) {
    if (j == height) {
      sb.append(""String_Node_Str"" + maxMagn + ""String_Node_Str"");
      continue;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    for (int i=0; i < this.length; i++) {
      if (valuesOnPlot[i] == j) {
        sb.append(""String_Node_Str"");
      }
 else       if (valuesOnPlot[i] > j) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  for (int i=0; i < this.length; i++) {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + (int)(this.length * compression / input.getFreq()) + ""String_Node_Str"");
  return input;
}",0.9851258581235698
81370,"@Override public Sound initSound(Sound input){
  this.loudestfreqs=new LinkedList<Integer>();
  if (this.note) {
    this.threshold=input.getSamples().length;
    this.fsLimit=input.getSamples().length;
  }
 else   if (this.windowLength != -1) {
    this.fsLimit=input.getSampleRate();
  }
  return super.initSound(input);
}","@Override public Sound initSound(Sound input){
  this.loudestfreqs=new LinkedList<Integer>();
  if (this.note) {
    this.threshold=input.getSamples().length;
    this.fsLimit=input.getSamples().length;
  }
 else {
    this.fsLimit=input.getSampleRate();
  }
  return super.initSound(input);
}",0.9497568881685576
81371,"@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getSampleRate(),channelNum);
  List<Integer> freqs;
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PeakFindWithHPSSoundTransformation peak=new PeakFindWithHPSSoundTransformation(100,(int)Math.pow(2,Math.ceil(Math.log(sound.getSamples().length) / Math.log(2))));
  peak.transform(sound);
  freqs=peak.getLoudestFreqs();
  double lastFreq=freqs.get(0);
  int lastBegining=0;
  for (int i=0; i < freqs.size(); i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.size()));
    int length=(i - lastBegining < 1 ? freqs.size() * threshold : (i - 1 - lastBegining) * threshold);
    if (i == freqs.size() - 1 || (Math.abs(freqs.get(i) - lastFreq) > freqs.get(i) / 100 && length > sound.getSampleRate() / 2)) {
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      soundAppender.append(builtSound,threshold * lastBegining,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs.get(i);
    }
  }
  return builtSound;
}","@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getSampleRate(),channelNum);
  List<Integer> freqs;
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PeakFindWithHPSSoundTransformation peak=new PeakFindWithHPSSoundTransformation(100,-1);
  peak.transform(sound);
  freqs=peak.getLoudestFreqs();
  double lastFreq=freqs.get(0);
  int lastBegining=0;
  for (int i=0; i < freqs.size(); i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.size()));
    int length=(i - lastBegining < 1 ? freqs.size() * threshold : (i - 1 - lastBegining) * threshold);
    if (i == freqs.size() - 1 || (Math.abs(freqs.get(i) - lastFreq) > freqs.get(i) / 100 && length > sound.getSampleRate() / 2)) {
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      soundAppender.append(builtSound,threshold * lastBegining,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs.get(i);
    }
  }
  return builtSound;
}",0.9730467417263732
81372,"public void testShape(){
  try {
    System.out.println(""String_Node_Str"");
    Library packsList=Library.getInstance();
    new TransformSoundService(new PrintlnTransformObserver()).transformFile(input,output,new EqualizerSoundTransformation(new double[]{0,20,50,100,120,140,160,180,200,220,1000,2000,5000,11000,22050},new double[]{0,0.5,0.75,1,1,1,1,0.70,0.30,0.00,0.00,0.00,0.00,0.00,0.00}),new NormalizeSoundTransformation(),new ShapeSoundTransformation(packsList.defaultPack,""String_Node_Str""));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@Test public void testShape(){
  try {
    System.out.println(""String_Node_Str"");
    Library packsList=Library.getInstance();
    new TransformSoundService(new PrintlnTransformObserver()).transformFile(input,output,new EqualizerSoundTransformation(new double[]{0,20,50,100,120,140,160,180,200,220,1000,2000,5000,11000,22050},new double[]{0,0.5,0.75,1,1,1,1,0.70,0.30,0.00,0.00,0.00,0.00,0.00,0.00}),new NormalizeSoundTransformation(),new ShapeSoundTransformation(packsList.defaultPack,""String_Node_Str""));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9952978056426331
81373,"public Sound toSubSound(int beginning,int end){
  long[] newsamples=Arrays.copyOfRange(this.samples,beginning,end);
  return new Sound(newsamples,nbBytesPerSample,freq,channelNum);
}","public Sound toSubSound(int beginning,int end){
  long[] newsamples=(beginning < end ? Arrays.copyOfRange(this.samples,beginning,end) : new long[0]);
  return new Sound(newsamples,nbBytesPerSample,freq,channelNum);
}",0.914572864321608
81374,"private static int getMaxIndex(FrequenciesState fs,int low,int high){
  int max=0;
  int maxIndex=0;
  for (int i=low; i < high; i++) {
    if (max < fs.getState()[i].abs()) {
      max=(int)Math.ceil(fs.getState()[i].abs());
      maxIndex=i;
    }
  }
  return maxIndex;
}","private static int getMaxIndex(FrequenciesState fs,int low,int high){
  int max=0;
  int maxIndex=0;
  int realhigh=Math.min(high,fs.getState().length);
  for (int i=low; i < realhigh; i++) {
    if (max < fs.getState()[i].abs()) {
      max=(int)Math.ceil(fs.getState()[i].abs());
      maxIndex=i;
    }
  }
  return maxIndex;
}",0.9072847682119204
81375,"public static String fsToString(FrequenciesState fs,int low,int high){
  float lastFrequency=(float)high;
  int length=(int)lastFrequency / 20;
  int height=15;
  int maxIndex=FrequenciesHelper.getMaxIndex(fs,low,high);
  long maxMagn=(long)fs.getState()[maxIndex].abs();
  StringBuffer sb=new StringBuffer();
  int step=(int)lastFrequency / length;
  int[] valuesOnPlot=new int[length];
  int maxPlotIndex=0;
  int maxPlotValue=0;
  double peakIndex=0;
  double peakValue=0;
  double minValuePlotted=-1;
  for (int i=0; i < valuesOnPlot.length; i++) {
    double maxValue=0;
    for (int j=0; j < step; j++) {
      if (peakValue * 2 < fs.getState()[i * step + j + low].abs()) {
        peakValue=fs.getState()[i * step + j + low].abs();
        peakIndex=i * step + j + low;
      }
      if (maxValue < fs.getState()[i * step + j + low].abs()) {
        maxValue=fs.getState()[i * step + j + low].abs();
      }
    }
    if (minValuePlotted == -1 || minValuePlotted > maxValue) {
      minValuePlotted=maxValue;
    }
    valuesOnPlot[i]=(int)(maxValue * height / (maxMagn));
    if (maxPlotValue < valuesOnPlot[i]) {
      maxPlotValue=valuesOnPlot[i];
      maxPlotIndex=i;
    }
  }
  for (int i=0; i < valuesOnPlot.length; i++) {
    valuesOnPlot[i]-=minValuePlotted * height / maxMagn;
  }
  for (int j=height; j >= 0; j--) {
    if (j == height) {
      sb.append(""String_Node_Str"" + maxMagn + ""String_Node_Str"");
      continue;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    for (int i=0; i < length; i++) {
      if (valuesOnPlot[i] == j) {
        sb.append(""String_Node_Str"");
      }
 else       if (valuesOnPlot[i] > j) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  for (int i=0; i < length; i++) {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + lastFrequency + ""String_Node_Str"");
  sb.append(""String_Node_Str"" + (int)(maxPlotIndex * 1.0 / length * lastFrequency + low) + ""String_Node_Str""+ (int)((maxPlotIndex + 1.0) / length * lastFrequency + low)+ ""String_Node_Str"");
  sb.append(""String_Node_Str"" + (int)(peakIndex - 10) + ""String_Node_Str""+ (int)(peakIndex + 10)+ ""String_Node_Str"");
  return sb.toString();
}","public static String fsToString(FrequenciesState fs,int low,int high){
  float lastFrequency=(fs.getState().length < high ? fs.getState().length : (float)high);
  int length=(int)lastFrequency / 20;
  int height=15;
  int maxIndex=FrequenciesHelper.getMaxIndex(fs,low,high);
  long maxMagn=(long)fs.getState()[maxIndex].abs();
  StringBuffer sb=new StringBuffer();
  int step=(int)lastFrequency / length;
  int[] valuesOnPlot=new int[length];
  int maxPlotIndex=0;
  int maxPlotValue=0;
  double peakIndex=0;
  double peakValue=0;
  double minValuePlotted=-1;
  for (int i=0; i < valuesOnPlot.length; i++) {
    double maxValue=0;
    for (int j=0; j < step; j++) {
      int x=i * step + j + low;
      if (x < fs.getState().length && peakValue * 2 < fs.getState()[x].abs()) {
        peakValue=fs.getState()[x].abs();
        peakIndex=x;
      }
      if (x < fs.getState().length && maxValue < fs.getState()[x].abs()) {
        maxValue=fs.getState()[x].abs();
      }
    }
    if (minValuePlotted == -1 || minValuePlotted > maxValue) {
      minValuePlotted=maxValue;
    }
    valuesOnPlot[i]=(int)(maxValue * height / (maxMagn));
    if (maxPlotValue < valuesOnPlot[i]) {
      maxPlotValue=valuesOnPlot[i];
      maxPlotIndex=i;
    }
  }
  for (int i=0; i < valuesOnPlot.length; i++) {
    valuesOnPlot[i]-=minValuePlotted * height / maxMagn;
  }
  for (int j=height; j >= 0; j--) {
    if (j == height) {
      sb.append(""String_Node_Str"" + maxMagn + ""String_Node_Str"");
      continue;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    for (int i=0; i < length; i++) {
      if (valuesOnPlot[i] == j) {
        sb.append(""String_Node_Str"");
      }
 else       if (valuesOnPlot[i] > j) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  for (int i=0; i < length; i++) {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + lastFrequency + ""String_Node_Str"");
  sb.append(""String_Node_Str"" + (int)(maxPlotIndex * 1.0 / length * lastFrequency + low) + ""String_Node_Str""+ (int)((maxPlotIndex + 1.0) / length * lastFrequency + low)+ ""String_Node_Str"");
  sb.append(""String_Node_Str"" + (int)(peakIndex - 10) + ""String_Node_Str""+ (int)(peakIndex + 10)+ ""String_Node_Str"");
  return sb.toString();
}",0.9438009438009438
81376,"private int bestCandidate(int[] peaks){
  int leftEdge=0;
  while (leftEdge < peaks.length && peaks[leftEdge] == 0) {
    leftEdge++;
  }
  int rightEdge=leftEdge;
  while (rightEdge < peaks.length && Math.abs((peaks[rightEdge] - peaks[leftEdge]) * 1.0 / peaks[rightEdge]) * 100.0 < 10) {
    rightEdge++;
  }
  int sum=0;
  for (int i=leftEdge; i < rightEdge; i++) {
    sum+=peaks[i];
  }
  return (rightEdge == leftEdge ? sum : sum / (rightEdge - leftEdge));
}","private int bestCandidate(int[] peaks){
  int leftEdge=0;
  while (leftEdge < peaks.length && peaks[leftEdge] <= 0) {
    leftEdge++;
  }
  int rightEdge=leftEdge;
  while (rightEdge < peaks.length && Math.abs((peaks[rightEdge] - peaks[leftEdge]) * 1.0 / peaks[rightEdge]) * 100.0 < 10) {
    rightEdge++;
  }
  int sum=0;
  for (int i=leftEdge; i < rightEdge; i++) {
    sum+=peaks[i];
  }
  return (rightEdge == leftEdge ? sum : sum / (rightEdge - leftEdge));
}",0.9978401727861772
81377,"public PurifySoundTransformation(){
}","public PurifySoundTransformation(int increment){
  this.increment=increment;
}",0.6434782608695652
81378,"@Test public void testPurify(){
  try {
    new TransformSound(new PrintlnTransformObserver()).transformFile(input,output,new PurifySoundTransformation());
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@Test public void testPurify(){
  try {
    new TransformSound(new PrintlnTransformObserver()).transformFile(input,output,new PurifySoundTransformation(100));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9948542024013722
81379,"@Override public FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length){
  for (int i=0; i < fs.getState().length; i++) {
    Complex c=fs.getState()[i];
    double abs=c.abs();
    double abs2=Math.pow(abs,2);
    double log=Math.log(abs2);
    fs.getState()[i]=new Complex(log);
  }
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  FrequenciesState fscep=new FrequenciesState(fastFourierTransformer.transform(fs.getState(),TransformType.INVERSE),fs.getMaxfrequency());
  this.loudestfreqs[index]=this.computeLoudestFreq(fscep);
  ;
  this.index++;
  return fscep;
}","@Override public FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length){
  for (int i=0; i < fs.getState().length; i++) {
    Complex c=fs.getState()[i];
    double abs=c.abs();
    double abs2=Math.pow(abs,2);
    double log=Math.log(abs2);
    fs.getState()[i]=new Complex(log);
  }
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  FrequenciesState fscep=new FrequenciesState(fastFourierTransformer.transform(fs.getState(),TransformType.INVERSE),fs.getMaxfrequency());
  this.loudestfreqs[index]=this.computeLoudestFreq(fscep);
  this.index++;
  return fscep;
}",0.9970193740685545
81380,"private int bestCandidate(int[] peaks){
  int leftEdge=0;
  while (leftEdge < peaks.length && peaks[leftEdge] == 0) {
    leftEdge++;
  }
  int rightEdge=leftEdge;
  while (rightEdge < peaks.length && Math.abs((peaks[rightEdge] - peaks[leftEdge]) * 1.0 / peaks[rightEdge]) * 100.0 < 10) {
    rightEdge++;
  }
  int sum=0;
  for (int i=leftEdge; i < rightEdge; i++) {
    sum+=peaks[i];
  }
  return sum / (rightEdge - leftEdge);
}","private int bestCandidate(int[] peaks){
  int leftEdge=0;
  while (leftEdge < peaks.length && peaks[leftEdge] == 0) {
    leftEdge++;
  }
  int rightEdge=leftEdge;
  while (rightEdge < peaks.length && Math.abs((peaks[rightEdge] - peaks[leftEdge]) * 1.0 / peaks[rightEdge]) * 100.0 < 10) {
    rightEdge++;
  }
  int sum=0;
  for (int i=leftEdge; i < rightEdge; i++) {
    sum+=peaks[i];
  }
  return (rightEdge == leftEdge ? sum : sum / (rightEdge - leftEdge));
}",0.96420581655481
81381,"@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  int[] freqs;
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  CepstrumSoundTransformation peak=new CepstrumSoundTransformation(threshold);
  peak.transform(sound);
  freqs=peak.getLoudestFreqs();
  double lastFreq=freqs[0];
  int lastBegining=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    int length=(i - 1 - lastBegining) * threshold;
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100 && length > sound.getFreq() / 2) {
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      builtSound.append(threshold * lastBegining,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}","@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  int[] freqs;
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PeakFindSoundTransformation peak=new PeakFindSoundTransformation(threshold);
  peak.transform(sound);
  freqs=peak.getLoudestFreqs();
  double lastFreq=freqs[0];
  int lastBegining=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    int length=(i - 1 - lastBegining) * threshold;
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100 && length > sound.getFreq() / 2) {
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      builtSound.append(threshold * lastBegining,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}",0.9720496894409938
81382,"@Override public FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length){
  int[] peaks=new int[10];
  for (int i=1; i <= 10; i++) {
    peaks[i - 1]=FrequenciesHelper.f0(fs,i);
  }
  Arrays.sort(peaks);
  int f0=this.bestCandidate(peaks);
  this.loudestfreqs[index]=f0;
  this.index++;
  return fs;
}","@Override public FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length){
  int[] peaks=new int[10];
  for (int i=1; i <= 10; i++) {
    peaks[i - 1]=FrequenciesHelper.f0(fs,i);
  }
  Arrays.sort(peaks);
  int f0=this.bestCandidate(peaks);
  if (this.index < this.loudestfreqs.length) {
    this.loudestfreqs[this.index]=f0;
  }
  this.index++;
  return fs;
}",0.9234828496042216
81383,"private static FrequenciesState hpc(FrequenciesState fs,int factor){
  Complex[] result=new Complex[fs.getMaxfrequency() / (2 * factor)];
  for (int i=0; i < fs.getMaxfrequency() / (2 * factor); i++) {
    double val=fs.getState()[i].abs();
    for (int j=1; j < factor; j++) {
      if (i * factor < fs.getMaxfrequency() / 2 && i * factor < fs.getState().length) {
        val*=fs.getState()[i * factor].abs();
      }
    }
    result[i]=new Complex(val);
  }
  return new FrequenciesState(result,fs.getMaxfrequency() / factor);
}","private static FrequenciesState hpc(FrequenciesState fs,int factor){
  int max=Math.min(fs.getMaxfrequency() / (2 * factor),fs.getState().length);
  Complex[] result=new Complex[max];
  for (int i=0; i < max; i++) {
    double val=fs.getState()[i].abs();
    for (int j=1; j < factor; j++) {
      if (i * factor < fs.getMaxfrequency() / 2 && i * factor < fs.getState().length) {
        val*=fs.getState()[i * factor].abs();
      }
    }
    result[i]=new Complex(val);
  }
  return new FrequenciesState(result,fs.getMaxfrequency() / factor);
}",0.8571428571428571
81384,"public static int loudestMultiple(FrequenciesState fs,int f0,int low,int high){
  if (f0 == 0) {
    return 0;
  }
  int loudest=f0;
  double loudestValue=fs.getState()[f0].abs();
  int i=Math.max(f0,low);
  while (i < high) {
    if (fs.getState()[i].abs() > loudestValue) {
      loudest=i;
      loudestValue=fs.getState()[i].abs();
    }
    i+=f0;
  }
  return loudest;
}","public static int loudestMultiple(FrequenciesState fs,int f0,int low,int high){
  if (f0 == 0) {
    return 0;
  }
  int loudest=f0;
  double loudestValue=fs.getState()[f0].abs();
  int i=Math.max(f0,low);
  int realhigh=Math.min(high,fs.getState().length);
  while (i < realhigh) {
    if (fs.getState()[i].abs() > loudestValue) {
      loudest=i;
      loudestValue=fs.getState()[i].abs();
    }
    i+=f0;
  }
  return loudest;
}",0.9306930693069309
81385,"public static FrequenciesState spectrumToCepstrum(FrequenciesState fs){
  for (int i=0; i < fs.getState().length; i++) {
    Complex c=fs.getState()[i];
    double log=Math.log(Math.pow(c.abs(),2));
    fs.getState()[i]=new Complex(log);
  }
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  FrequenciesState fscep=new FrequenciesState(fastFourierTransformer.transform(fs.getState(),TransformType.FORWARD),fs.getMaxfrequency());
  for (int i=0; i < fscep.getState().length; i++) {
    Complex c=fscep.getState()[i];
    double sqr=Math.pow(c.abs(),2);
    fscep.getState()[i]=new Complex(sqr);
  }
  return fscep;
}","public static FrequenciesState spectrumToCepstrum(FrequenciesState fs){
  for (int i=0; i < fs.getState().length; i++) {
    Complex c=fs.getState()[i];
    double log=Math.log(Math.pow(c.abs(),2));
    fs.getState()[i]=new Complex(log);
  }
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  FrequenciesState fscep=new FrequenciesState(fastFourierTransformer.transform(fs.getState(),TransformType.FORWARD),fs.getMaxfrequency());
  for (int i=0; i < fscep.getState().length; i++) {
    Complex c=fscep.getState()[i];
    double sqr=Math.pow(c.abs(),2);
    fscep.getState()[i]=new Complex(sqr);
  }
  for (int i=0; i < 50; i++) {
    fscep.getState()[i]=new Complex(0);
  }
  for (int i=fscep.getState().length - 50; i < fscep.getState().length; i++) {
    fscep.getState()[i]=new Complex(0);
  }
  return fscep;
}",0.8530559167750326
81386,"private static int findFrequency(Sound channel1){
  double sum=0;
  int nb=0;
  PeakFindSoundTransformation peak=new PeakFindSoundTransformation(100);
  peak.transform(channel1);
  int[] magnitude=peak.getLoudestFreqs();
  for (int i=0; i < magnitude.length; i++) {
    if (magnitude[i] > 70) {
      sum+=magnitude[i];
      nb++;
    }
  }
  return (int)(sum / nb);
}","private static int findFrequency(Sound channel1){
  double sum=0;
  int nb=0;
  PeakFindSoundTransformation peak=new PeakFindSoundTransformation(100);
  peak.transform(channel1);
  int[] magnitude=peak.getLoudestFreqs();
  for (int i=0; i < magnitude.length; i++) {
    sum+=magnitude[i];
    nb++;
  }
  return (int)(sum / nb);
}",0.8555078683834049
81387,"@Override public Sound initSound(Sound input){
  this.loudestfreqs=new int[(int)(input.getSamples().length / threshold) + 1];
  this.index=0;
  return super.initSound(input);
}","@Override public Sound initSound(Sound input){
  this.loudestfreqs=new int[(int)(input.getSamples().length / threshold) + 1];
  this.index=0;
  this.length=input.getSamples().length;
  if (this.length < CepstrumSoundTransformation.shortSoundLength) {
    this.loudestfreqs=new int[1];
  }
 else {
    this.loudestfreqs=new int[(int)(input.getSamples().length / threshold) + 1];
  }
  return super.initSound(input);
}",0.4898648648648648
81388,"@Override protected double getLowThreshold(double defaultValue){
  return this.threshold;
}","@Override protected double getLowThreshold(double defaultValue){
  if (this.length < CepstrumSoundTransformation.shortSoundLength) {
    return this.length;
  }
  return this.threshold;
}",0.6546762589928058
81389,"@Override public FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length){
  int f0=FrequenciesHelper.f0(fs,10);
  int fk=FrequenciesHelper.loudestMultiple(fs,f0,50,1200);
  this.loudestfreqs[index]=fk;
  this.index++;
  return fs;
}","@Override public FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length){
  int avg=0;
  int nb=0;
  for (int i=1; i < 10; i++) {
    int f0=FrequenciesHelper.f0(fs,i);
    int fk=FrequenciesHelper.loudestMultiple(fs,f0,50,1200);
    if (fk != 0) {
      avg+=fk;
      nb++;
    }
  }
  this.loudestfreqs[index]=avg / nb;
  this.index++;
  return fs;
}",0.8111273792093704
81390,"private static Sound pitch(Sound sound,float percent){
  float total=100;
  if (percent == total) {
    return new Sound(sound.getSamples(),sound.getNbBytesPerSample(),sound.getFreq(),sound.getChannelNum());
  }
  float nbSamples=sound.getSamples().length;
  float nbFiltered=percent / total * nbSamples;
  float incr=nbSamples / nbFiltered;
  long[] data=sound.getSamples();
  long[] ret=new long[(int)(nbFiltered)];
  for (float i=0; i < incr * nbFiltered; i+=incr) {
    int j=(int)(i / incr);
    if (j < ret.length) {
      ret[j]=data[(int)i];
    }
  }
  return new Sound(ret,sound.getNbBytesPerSample(),sound.getFreq(),sound.getChannelNum());
}","private static Sound pitch(Sound sound,float percent){
  float total=100;
  if (percent == total) {
    return new Sound(sound.getSamples(),sound.getNbBytesPerSample(),sound.getFreq(),sound.getChannelNum());
  }
  float nbSamples=sound.getSamples().length;
  float nbFiltered=Math.abs(percent / total * nbSamples);
  float incr=nbSamples / nbFiltered;
  long[] data=sound.getSamples();
  long[] ret=new long[(int)(nbFiltered)];
  for (float i=0; i < incr * nbFiltered; i+=incr) {
    int j=(int)(i / incr);
    if (j < ret.length) {
      ret[j]=data[(int)i];
    }
  }
  return new Sound(ret,sound.getNbBytesPerSample(),sound.getFreq(),sound.getChannelNum());
}",0.9923896499238964
81391,"@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  double[] freqs=new double[sound.getSamples().length / threshold + 1];
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  Sound2Note.getSoundLoudestFreqs(freqs,sound,threshold);
  double lastFreq=freqs[0];
  int lastBegining=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    int length=(i - 1 - lastBegining) * threshold;
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100 && length > sound.getFreq() / 2) {
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      builtSound.append(threshold * i,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}","@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  double[] freqs=new double[sound.getSamples().length / threshold + 1];
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  Sound2Note.getSoundLoudestFreqs(freqs,sound,threshold);
  double lastFreq=freqs[0];
  int lastBegining=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    int length=(i - 1 - lastBegining) * threshold;
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100 && length > sound.getFreq() / 2) {
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      builtSound.append(threshold * lastBegining,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}",0.9948474038842648
81392,"@Override protected FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length,double maxfrequency){
  int total=(int)(this.sound.getSamples().length * factor);
  if (offset % ((total / 100 - (total / 100) % this.threshold)) == 0) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + offset + ""String_Node_Str""+ (int)(sound.getSamples().length / factor)));
  }
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  Complex[] complexArray=fs.getState();
  float remaining=(float)(factor - Math.floor(factor));
  int padding=(int)Math.floor(this.writeIfGreaterEqThan1 + remaining);
  int loops=(int)(factor + padding - 1);
  this.additionalFrames+=loops;
  for (int p=0; p < loops; p++) {
    complexArray=fastFourierTransformer.transform(complexArray,TransformType.INVERSE);
    for (int j=0; j < maxfrequency; j++) {
      if (offset + p * maxfrequency + j < this.sound.getSamples().length && this.sound.getSamples()[(int)(offset + p * maxfrequency + j)] == 0) {
        this.sound.getSamples()[(int)(offset + p * maxfrequency + j)]=(long)Math.floor(complexArray[j].getReal());
      }
    }
  }
  if (padding == 1) {
    this.writeIfGreaterEqThan1-=1;
  }
 else {
    this.writeIfGreaterEqThan1+=remaining;
  }
  return fs;
}","@Override protected FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length,double maxfrequency){
  int total=(int)(this.sound.getSamples().length * factor);
  if (total / 100 != 0 && (total / 100 - (total / 100) % this.threshold) != 0 && offset % ((total / 100 - (total / 100) % this.threshold)) == 0) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + offset + ""String_Node_Str""+ (int)(sound.getSamples().length / factor)));
  }
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  Complex[] complexArray=fs.getState();
  float remaining=(float)(factor - Math.floor(factor));
  int padding=(int)Math.floor(this.writeIfGreaterEqThan1 + remaining);
  int loops=(int)(factor + padding - 1);
  this.additionalFrames+=loops;
  for (int p=0; p < loops; p++) {
    complexArray=fastFourierTransformer.transform(complexArray,TransformType.INVERSE);
    for (int j=0; j < maxfrequency; j++) {
      if (offset + p * maxfrequency + j < this.sound.getSamples().length && this.sound.getSamples()[(int)(offset + p * maxfrequency + j)] == 0) {
        this.sound.getSamples()[(int)(offset + p * maxfrequency + j)]=(long)Math.floor(complexArray[j].getReal());
      }
    }
  }
  if (padding == 1) {
    this.writeIfGreaterEqThan1-=1;
  }
 else {
    this.writeIfGreaterEqThan1+=remaining;
  }
  return fs;
}",0.972657674079475
81393,"@Override protected FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length,double maxfrequency){
  int total=(int)(this.sound.getSamples().length / factor);
  if (total != 0 && offset % ((total / 100 - (total / 100) % this.threshold)) == 0) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + offset + ""String_Node_Str""+ (int)(sound.getSamples().length * factor)));
  }
  if (this.writeIfGreaterEqThanFactor >= factor) {
    this.writeIfGreaterEqThanFactor-=factor;
    return fs;
  }
 else {
    this.writeIfGreaterEqThanFactor++;
    return null;
  }
}","@Override protected FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length,double maxfrequency){
  int total=(int)(this.sound.getSamples().length / factor);
  if (total / 100 != 0 && (total / 100 - (total / 100) % this.threshold) != 0 && offset % ((total / 100 - (total / 100) % this.threshold)) == 0) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + offset + ""String_Node_Str""+ (int)(sound.getSamples().length * factor)));
  }
  if (this.writeIfGreaterEqThanFactor >= factor) {
    this.writeIfGreaterEqThanFactor-=factor;
    return fs;
  }
 else {
    this.writeIfGreaterEqThanFactor++;
    return null;
  }
}",0.9528228924980664
81394,"@Override protected Sound initSound(Sound input){
  long[] newdata=new long[(int)(input.getSamples().length * factor)];
  this.sound=new Sound(newdata,input.getNbBytesPerSample(),input.getFreq(),sound.getChannelNum());
  return this.sound;
}","@Override protected Sound initSound(Sound input){
  long[] newdata=new long[(int)(input.getSamples().length * factor)];
  this.sound=new Sound(newdata,input.getNbBytesPerSample(),input.getFreq(),input.getChannelNum());
  return this.sound;
}",0.979253112033195
81395,"protected static double computeLoudestFreq(FrequenciesState fs){
  double max=0;
  double freq=0;
  for (int i=0; i < fs.getMaxfrequency() / 2; i++) {
    double val=fs.getState()[i].abs();
    freq=(max < val ? i : freq);
    max=(max < val ? val : max);
  }
  return freq;
}","protected static double computeLoudestFreq(FrequenciesState fs){
  double max=0;
  double freq=0;
  for (int i=0; i < fs.getMaxfrequency() / 2; i++) {
    double val=Math.pow(fs.getState()[i].abs(),2);
    freq=(max < val ? i : freq);
    max=(max < val ? val : max);
  }
  return freq;
}",0.9787234042553192
81396,"@Override public Sound initSound(Sound input){
  this.loudestfreqs=new int[input.getSamples().length];
  this.i=0;
  return super.initSound(input);
}","@Override public Sound initSound(Sound input){
  this.loudestfreqs=new int[(int)(input.getSamples().length / threshold) + 1];
  this.index=0;
  return super.initSound(input);
}",0.916923076923077
81397,"private void computeLoudestFreq(FrequenciesState fs){
  double max=0;
  double freq=0;
  for (int j=0; j < fs.getMaxfrequency() / 2; j++) {
    double val=fs.getState()[j].abs();
    freq=(max < val ? i : freq);
    max=(max < val ? val : max);
  }
  this.loudestfreqs[i]=(int)freq;
}","private void computeLoudestFreq(FrequenciesState fs){
  double max=0;
  double freq=0;
  for (int j=50; j < 900; j++) {
    double val=fs.getState()[j].abs();
    freq=(max < val ? j : freq);
    max=(max < val ? val : max);
  }
  this.loudestfreqs[index]=(int)freq;
}",0.8514492753623188
81398,"@Override public FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length){
  for (int i=0; i < fs.getState().length; i++) {
    Complex c=fs.getState()[i];
    double abs=c.abs();
    double abs2=Math.pow(abs,2);
    double log=Math.log(abs2);
    fs.getState()[i]=new Complex(log);
  }
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  FrequenciesState fscep=new FrequenciesState(fastFourierTransformer.transform(fs.getState(),TransformType.INVERSE),fs.getMaxfrequency());
  this.computeLoudestFreq(fscep);
  return fscep;
}","@Override public FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length){
  for (int i=0; i < fs.getState().length; i++) {
    Complex c=fs.getState()[i];
    double abs=c.abs();
    double abs2=Math.pow(abs,2);
    double log=Math.log(abs2);
    fs.getState()[i]=new Complex(log);
  }
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  FrequenciesState fscep=new FrequenciesState(fastFourierTransformer.transform(fs.getState(),TransformType.INVERSE),fs.getMaxfrequency());
  this.computeLoudestFreq(fscep);
  this.index++;
  return fscep;
}",0.9874213836477987
81399,"protected static double computeLoudestFreq(FrequenciesState fs,int maxFrequency){
  double max=0;
  double freq=0;
  for (int i=0; i < maxFrequency; i++) {
    double val=fs.getState()[i].abs();
    freq=(max < val ? i : freq);
    max=(max < val ? val : max);
  }
  return freq;
}","protected static double computeLoudestFreq(FrequenciesState fs,int maxFrequency){
  double max=0;
  double freq=0;
  for (int i=0; i < maxFrequency / 2; i++) {
    double val=fs.getState()[i].abs();
    freq=(max < val ? i : freq);
    max=(max < val ? val : max);
  }
  return freq;
}",0.9929328621908128
81400,"@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  double[] freqs=new double[sound.getSamples().length / threshold + 1];
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  Sound2Note.getSoundLoudestFreqs(freqs,sound,threshold);
  double lastFreq=freqs[0];
  int lastBegining=0;
  int usedarraylength=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    int length=(i - 1 - lastBegining) * threshold;
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100 && length > sound.getFreq() / 2) {
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      builtSound=builtSound.concat(true,usedarraylength,attack,decay,sustain,release);
      usedarraylength+=threshold;
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}","@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  double[] freqs=new double[sound.getSamples().length / threshold + 1];
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  Sound2Note.getSoundLoudestFreqs(freqs,sound,threshold);
  double lastFreq=freqs[0];
  int lastBegining=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    int length=(i - 1 - lastBegining) * threshold;
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100 && length > sound.getFreq() / 2) {
      System.out.println(length);
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      builtSound.append(threshold * i,attack,decay,sustain,release);
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}",0.8547464735036218
81401,"protected byte[] framesToByteArray(Sound[] channels,int sampleSize,boolean bigEndian,boolean pcmSigned){
  int length=channels.length * sampleSize * channels[0].getSamples().length;
  byte[] data=new byte[length];
  double value=0;
  double dividedValue=0;
  byte byteValueSigned=0;
  long neutral=(pcmSigned ? this.getNeutral(sampleSize) : 0);
  for (int i=0; i < data.length; i++) {
    int numByte=i % sampleSize;
    int currentChannel=(i / sampleSize) % channels.length;
    int currentFrame=i / (sampleSize * channels.length);
    if (numByte == 0) {
      value=channels[currentChannel].getSamples()[currentFrame] + neutral;
    }
    dividedValue=value / 256;
    byteValueSigned=(byte)(value + (pcmSigned ? Byte.MIN_VALUE : 0));
    data[i + (!bigEndian ? 0 : (sampleSize - 2 * numByte) - 1)]=byteValueSigned;
    value=dividedValue;
  }
  return data;
}","protected byte[] framesToByteArray(Sound[] channels,int sampleSize,boolean bigEndian,boolean pcmSigned){
  int length=channels.length * sampleSize * channels[0].getSamples().length;
  byte[] data=new byte[length];
  double value=0;
  double dividedValue=0;
  byte byteValueSigned=0;
  long neutral=(pcmSigned ? this.getNeutral(sampleSize) : 0);
  for (int i=0; i < data.length; i++) {
    int numByte=i % sampleSize;
    int currentChannel=(i / sampleSize) % channels.length;
    int currentFrame=i / (sampleSize * channels.length);
    if (numByte == 0 && channels[currentChannel].getSamples().length > currentFrame) {
      value=channels[currentChannel].getSamples()[currentFrame] + neutral;
    }
    dividedValue=value / 256;
    byteValueSigned=(byte)(value + (pcmSigned ? Byte.MIN_VALUE : 0));
    data[i + (!bigEndian ? 0 : (sampleSize - 2 * numByte) - 1)]=byteValueSigned;
    value=dividedValue;
  }
  return data;
}",0.9647847959754052
81402,"@Override public void log(LogEvent logEvent){
  for (  TransformObserver transformObserver : this.observers) {
    transformObserver.notify(logEvent);
  }
}","@Override public void log(LogEvent logEvent){
  if (this.observers == null) {
    return;
  }
  for (  TransformObserver transformObserver : this.observers) {
    transformObserver.notify(logEvent);
  }
}",0.8666666666666667
81403,"private static int findSustain(Sound channel1,int decay){
  final int threshold=100;
  final double[] magnitude=new double[channel1.getSamples().length / threshold + 1];
  int sustainIndex=decay;
  SoundTransformation magnitudeTransform=new NoOpFrequencySoundTransformation(){
    int arraylength=0;
    @Override public Sound initSound(    Sound input){
      this.arraylength=0;
      return super.initSound(input);
    }
    @Override protected double getLowThreshold(    double defaultValue){
      return threshold;
    }
    @Override public FrequenciesState transformFrequencies(    FrequenciesState fs,    int offset,    int powOf2NearestLength,    int length,    double maxFrequency){
      magnitude[arraylength++]=Sound2Note.computeMagnitude(fs);
      return super.transformFrequencies(fs,offset,powOf2NearestLength,length,maxFrequency);
    }
  }
;
  magnitudeTransform.transform(channel1);
  try {
    MathArrays.checkOrder(Arrays.copyOfRange(magnitude,decay,magnitude.length),MathArrays.OrderDirection.DECREASING,true);
  }
 catch (  NonMonotonicSequenceException nmse) {
    sustainIndex=(nmse.getIndex() - 1) * threshold;
  }
  return sustainIndex;
}","private static int findSustain(Sound channel1,int decay){
  final int threshold=100;
  final double[] magnitude=new double[channel1.getSamples().length / threshold + 1];
  int sustainIndex=decay;
  SoundTransformation magnitudeTransform=new NoOpFrequencySoundTransformation(){
    int arraylength=0;
    @Override public Sound initSound(    Sound input){
      this.arraylength=0;
      return super.initSound(input);
    }
    @Override protected double getLowThreshold(    double defaultValue){
      return threshold;
    }
    @Override public FrequenciesState transformFrequencies(    FrequenciesState fs,    int offset,    int powOf2NearestLength,    int length,    double maxFrequency){
      magnitude[arraylength++]=Sound2Note.computeMagnitude(fs);
      return super.transformFrequencies(fs,offset,powOf2NearestLength,length,maxFrequency);
    }
  }
;
  magnitudeTransform.transform(channel1);
  try {
    MathArrays.checkOrder(Arrays.copyOfRange(magnitude,decay / threshold,magnitude.length),MathArrays.OrderDirection.DECREASING,true);
  }
 catch (  NonMonotonicSequenceException nmse) {
    sustainIndex=(nmse.getIndex() - 1) * threshold;
  }
  return sustainIndex;
}",0.9948849104859336
81404,"private static int findRelease(Sound channel1){
  final int threshold=channel1.getFreq() / 10;
  Sound reversed=new ReverseSoundTransformation().transform(channel1);
  final double[] magnitude=new double[channel1.getSamples().length / threshold + 1];
  int releaseIndexFromReversed=0;
  SoundTransformation magnitudeTransform=new NoOpFrequencySoundTransformation(){
    int arraylength=0;
    @Override public Sound initSound(    Sound input){
      this.arraylength=0;
      return super.initSound(input);
    }
    @Override protected double getLowThreshold(    double defaultValue){
      return threshold;
    }
    @Override public FrequenciesState transformFrequencies(    FrequenciesState fs,    int offset,    int powOf2NearestLength,    int length,    double maxFrequency){
      magnitude[arraylength++]=Sound2Note.computeMagnitude(fs);
      return super.transformFrequencies(fs,offset,powOf2NearestLength,length,maxFrequency);
    }
  }
;
  magnitudeTransform.transform(reversed);
  try {
    MathArrays.checkOrder(magnitude,MathArrays.OrderDirection.INCREASING,true);
  }
 catch (  NonMonotonicSequenceException nmse) {
    releaseIndexFromReversed=(nmse.getIndex() - 1) * threshold;
  }
  return channel1.getSamples().length - releaseIndexFromReversed;
}","private static int findRelease(Sound channel1){
  final int threshold=100;
  Sound reversed=new ReverseSoundTransformation().transform(channel1);
  final double[] magnitude=new double[channel1.getSamples().length / threshold + 1];
  int releaseIndexFromReversed=0;
  SoundTransformation magnitudeTransform=new NoOpFrequencySoundTransformation(){
    int arraylength=0;
    @Override public Sound initSound(    Sound input){
      this.arraylength=0;
      return super.initSound(input);
    }
    @Override protected double getLowThreshold(    double defaultValue){
      return threshold;
    }
    @Override public FrequenciesState transformFrequencies(    FrequenciesState fs,    int offset,    int powOf2NearestLength,    int length,    double maxFrequency){
      magnitude[arraylength++]=Sound2Note.computeMagnitude(fs);
      return super.transformFrequencies(fs,offset,powOf2NearestLength,length,maxFrequency);
    }
  }
;
  magnitudeTransform.transform(reversed);
  try {
    MathArrays.checkOrder(magnitude,MathArrays.OrderDirection.INCREASING,true);
  }
 catch (  NonMonotonicSequenceException nmse) {
    releaseIndexFromReversed=(nmse.getIndex() - 1) * threshold;
  }
  return channel1.getSamples().length - releaseIndexFromReversed;
}",0.9912559618441972
81405,"public void testShape(){
  try {
    System.out.println(""String_Node_Str"");
    PacksList packsList=PacksList.getInstance();
    new TransformSound(new PrintlnTransformObserver()).transformFile(input,output,new EqualizerSoundTransformation(new double[]{0,20,50,100,120,140,160,180,200,220,1000,2000,5000,11000,22050},new double[]{0,0.5,0.75,1,1,1,1,0.70,0.30,0.00,0.00,0.00,0.00,0.00,0.00}),new NormalizeSoundTransformation(),new ShapeSoundTransformation(packsList.defaultPack,""String_Node_Str""));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@Test public void testShape(){
  try {
    System.out.println(""String_Node_Str"");
    PacksList packsList=PacksList.getInstance();
    new TransformSound(new PrintlnTransformObserver()).transformFile(input,output,new EqualizerSoundTransformation(new double[]{0,20,50,100,120,140,160,180,200,220,1000,2000,5000,11000,22050},new double[]{0,0.5,0.75,1,1,1,1,0.70,0.30,0.00,0.00,0.00,0.00,0.00,0.00}),new NormalizeSoundTransformation(),new ShapeSoundTransformation(packsList.defaultPack,""String_Node_Str""));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9952755905511812
81406,"private Sound transformSubsound(Sound[] subSound,int channelNum,int frequency,int length){
  int percent=(int)(frequency * 100.0 / this.frequency);
  Sound result=subSound[channelNum];
  PitchSoundTransformation pitcher=new PitchSoundTransformation(percent);
  if (percent < 98 || percent > 102) {
    result=pitcher.transform(result);
  }
  double factor=subSound[0].getSamples().length == 0 ? 0 : length / subSound[0].getSamples().length;
  if (factor == 0) {
    return result;
  }
 else   if (factor < 0.98 || factor > 1.02) {
    if (factor < 0.98) {
      SpeedUpSoundTransformation speedup=new SpeedUpSoundTransformation(100,percent);
      result=speedup.transform(result);
    }
 else     if (factor > 1.02) {
      SlowdownSoundTransformation slowdown=new SlowdownSoundTransformation(100,percent);
      result=slowdown.transform(result);
    }
  }
  return result;
}","private Sound transformSubsound(Sound[] subSound,int channelNum,int frequency,int length){
  int percent=(int)(frequency * 100.0 / this.frequency);
  Sound result=subSound[channelNum];
  PitchSoundTransformation pitcher=new PitchSoundTransformation(percent);
  if (percent < 98 || percent > 102) {
    result=pitcher.transform(result);
  }
  double factor=subSound[0].getSamples().length == 0 ? 0 : length * 1.0 / subSound[0].getSamples().length;
  if (factor == 0) {
    return result;
  }
 else   if (factor < 0.98 || factor > 1.02) {
    if (factor < 0.98) {
      SpeedUpSoundTransformation speedup=new SpeedUpSoundTransformation(100,percent);
      result=speedup.transform(result);
    }
 else     if (factor > 1.02) {
      SlowdownSoundTransformation slowdown=new SlowdownSoundTransformation(100,percent);
      result=slowdown.transform(result);
    }
  }
  return result;
}",0.9965909090909092
81407,"@Test public void testShape(){
  try {
    System.out.println(""String_Node_Str"");
    PacksList packsList=PacksList.getInstance();
    new TransformSound(new PrintlnTransformObserver()).transformFile(input,output,new EqualizerSoundTransformation(new double[]{0,20,50,100,120,140,160,180,200,220,1000,2000,5000,11000,22050},new double[]{1,1,1,1,1,1,1,0.70,0.30,0.10,0.10,0.10,0.10,0.10,0.10}),new PurifySoundTransformation(),new ShapeSoundTransformation(packsList.defaultPack,""String_Node_Str""));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@Test public void testShape(){
  try {
    System.out.println(""String_Node_Str"");
    PacksList packsList=PacksList.getInstance();
    new TransformSound(new PrintlnTransformObserver()).transformFile(input,output,new EqualizerSoundTransformation(new double[]{0,20,50,100,120,140,160,180,200,220,1000,2000,5000,11000,22050},new double[]{1,1,1,1,1,1,1,0.70,0.30,0.10,0.10,0.10,0.10,0.10,0.10}),new ShapeSoundTransformation(packsList.defaultPack,""String_Node_Str""));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.973941368078176
81408,"private Sound transformSubsound(Sound[] subSound,int channelNum,int frequency,int length){
  int percent=(int)(frequency * 100.0 / this.frequency);
  Sound result=subSound[channelNum];
  PitchSoundTransformation pitcher=new PitchSoundTransformation(percent);
  if (percent < 98 || percent > 102) {
    result=pitcher.transform(result);
  }
  double factor=length / subSound.length;
  if (factor < 0.98 || factor > 1.02) {
    if (factor < 0.98) {
      SpeedUpSoundTransformation speedup=new SpeedUpSoundTransformation(100,percent);
      result=speedup.transform(result);
    }
 else     if (factor > 1.02) {
      SlowdownSoundTransformation slowdown=new SlowdownSoundTransformation(100,percent);
      result=slowdown.transform(result);
    }
  }
  return result;
}","private Sound transformSubsound(Sound[] subSound,int channelNum,int frequency,int length){
  int percent=(int)(frequency * 100.0 / this.frequency);
  Sound result=subSound[channelNum];
  PitchSoundTransformation pitcher=new PitchSoundTransformation(percent);
  if (percent < 98 || percent > 102) {
    result=pitcher.transform(result);
  }
  double factor=length / subSound[0].getSamples().length;
  if (factor < 0.98 || factor > 1.02) {
    if (factor < 0.98) {
      SpeedUpSoundTransformation speedup=new SpeedUpSoundTransformation(100,percent);
      result=speedup.transform(result);
    }
 else     if (factor > 1.02) {
      SlowdownSoundTransformation slowdown=new SlowdownSoundTransformation(100,percent);
      result=slowdown.transform(result);
    }
  }
  return result;
}",0.9896907216494846
81409,"@Override public Sound transform(Sound sound){
  int threshold=2000;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  double[] freqs=new double[sound.getSamples().length / threshold + 1];
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  Sound2Note.getSoundLoudestFreqs(freqs,sound,threshold);
  double lastFreq=freqs[0];
  int lastBegining=0;
  int usedarraylength=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100) {
      int length=(i - 1 - lastBegining) * threshold;
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      builtSound=builtSound.concat(true,usedarraylength,attack,decay,sustain,release);
      usedarraylength+=attack.getSamples().length + decay.getSamples().length + sustain.getSamples().length+ release.getSamples().length;
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}","@Override public Sound transform(Sound sound){
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  double[] freqs=new double[sound.getSamples().length / threshold + 1];
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  Sound2Note.getSoundLoudestFreqs(freqs,sound,threshold);
  double lastFreq=freqs[0];
  int lastBegining=0;
  int usedarraylength=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100) {
      int length=(i - 1 - lastBegining) * threshold;
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      builtSound=builtSound.concat(true,usedarraylength,attack,decay,sustain,release);
      usedarraylength+=attack.getSamples().length + decay.getSamples().length + sustain.getSamples().length+ release.getSamples().length;
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}",0.9989342806394316
81410,"public String toString(){
  float lastFrequency=maxfrequency / 2.0f;
  int length=(int)lastFrequency / 20;
  int height=15;
  int maxMagn=this.getMaxValue();
  StringBuffer sb=new StringBuffer();
  int step=(int)lastFrequency / length;
  int[] valuesOnPlot=new int[length];
  int max=0;
  int maxValue=0;
  for (int i=0; i < valuesOnPlot.length; i++) {
    double sum=0;
    for (int j=0; j < step; j++) {
      sum+=state[i * step + j].abs();
    }
    valuesOnPlot[i]=(int)(sum * 1.0 / step * height / (maxMagn));
    if (maxValue < valuesOnPlot[i]) {
      maxValue=valuesOnPlot[i];
      max=i;
    }
  }
  for (int j=height; j >= 0; j--) {
    if (j == height) {
      sb.append(""String_Node_Str"" + maxMagn + ""String_Node_Str"");
      continue;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    for (int i=0; i < length; i++) {
      if (valuesOnPlot[i] == j) {
        sb.append(""String_Node_Str"");
      }
 else       if (valuesOnPlot[i] > j) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  for (int i=0; i < length; i++) {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + lastFrequency + ""String_Node_Str"");
  sb.append(""String_Node_Str"" + (int)(max * 1.0 / length * lastFrequency) + ""String_Node_Str""+ (int)((max + 1.0) / length * lastFrequency)+ ""String_Node_Str"");
  return sb.toString();
}","public String toString(){
  float lastFrequency=maxfrequency / 2.0f;
  int length=(int)lastFrequency / 20;
  int height=15;
  int maxMagn=this.getMaxValue();
  StringBuffer sb=new StringBuffer();
  int step=(int)lastFrequency / length;
  int[] valuesOnPlot=new int[length];
  int max=0;
  int maxValue=0;
  for (int i=0; i < valuesOnPlot.length; i++) {
    double peak=0;
    for (int j=0; j < step; j++) {
      if (peak < state[i * step + j].abs()) {
        peak=state[i * step + j].abs();
      }
    }
    valuesOnPlot[i]=(int)(peak * height / (maxMagn));
    if (maxValue < valuesOnPlot[i]) {
      maxValue=valuesOnPlot[i];
      max=i;
    }
  }
  for (int j=height; j >= 0; j--) {
    if (j == height) {
      sb.append(""String_Node_Str"" + maxMagn + ""String_Node_Str"");
      continue;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    for (int i=0; i < length; i++) {
      if (valuesOnPlot[i] == j) {
        sb.append(""String_Node_Str"");
      }
 else       if (valuesOnPlot[i] > j) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  for (int i=0; i < length; i++) {
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + lastFrequency + ""String_Node_Str"");
  sb.append(""String_Node_Str"" + (int)(max * 1.0 / length * lastFrequency) + ""String_Node_Str""+ (int)((max + 1.0) / length * lastFrequency)+ ""String_Node_Str"");
  return sb.toString();
}",0.9673730238816012
81411,"public Sound concat(boolean inPlace,Sound... otherSounds){
  int newlength=this.samples.length;
  for (int i=0; i < otherSounds.length; i++) {
    newlength+=otherSounds[i].getSamples().length;
  }
  long[] newsamples;
  if (newlength <= this.getSamples().length && inPlace) {
    newsamples=this.samples;
  }
 else {
    newsamples=new long[newlength];
    System.arraycopy(this.samples,0,newsamples,0,this.samples.length);
  }
  int newindex=this.samples.length;
  for (int i=0; i < otherSounds.length; i++) {
    System.arraycopy(otherSounds[i].samples,0,newsamples,newindex,otherSounds[i].samples.length);
    newindex+=otherSounds[i].samples.length;
  }
  return new Sound(newsamples,nbBytesPerSample,freq,channelNum);
}","public Sound concat(boolean inPlace,int offset,Sound... otherSounds){
  int newlength=offset;
  for (int i=0; i < otherSounds.length; i++) {
    newlength+=otherSounds[i].getSamples().length;
  }
  long[] newsamples;
  if (newlength <= this.getSamples().length && inPlace) {
    newsamples=this.samples;
  }
 else {
    newsamples=new long[newlength];
    System.arraycopy(this.samples,0,newsamples,0,this.samples.length);
  }
  int newindex=offset;
  for (int i=0; i < otherSounds.length; i++) {
    System.arraycopy(otherSounds[i].samples,0,newsamples,newindex,otherSounds[i].samples.length);
    newindex+=otherSounds[i].samples.length;
  }
  return new Sound(newsamples,nbBytesPerSample,freq,channelNum);
}",0.9574912891986064
81412,"@Override public Sound transform(Sound sound){
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PacksList packsList=PacksList.getInstance();
  int threshold=20000;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  double[] freqs=new double[sound.getSamples().length / threshold + 1];
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  Sound2Note.getSoundLoudestFreqs(freqs,sound,threshold);
  double lastFreq=freqs[0];
  int lastBegining=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100) {
      int length=(i - 1 - lastBegining) * threshold;
      Note n=packsList.defaultPack.get(""String_Node_Str"").getNearestNote((int)lastFreq);
      builtSound=builtSound.concat(true,n.getAttack((int)lastFreq,channelNum,length),n.getDecay((int)lastFreq,channelNum,length),n.getSustain((int)lastFreq,channelNum,length),n.getRelease((int)lastFreq,channelNum,length));
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}","@Override public Sound transform(Sound sound){
  int threshold=20000;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[sound.getSamples().length],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  double[] freqs=new double[sound.getSamples().length / threshold + 1];
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  Sound2Note.getSoundLoudestFreqs(freqs,sound,threshold);
  double lastFreq=freqs[0];
  int lastBegining=0;
  int usedarraylength=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100) {
      int length=(i - 1 - lastBegining) * threshold;
      Note note=this.pack.get(this.instrument).getNearestNote((int)lastFreq);
      Sound attack=note.getAttack((int)lastFreq,channelNum,length);
      Sound decay=note.getDecay((int)lastFreq,channelNum,length);
      Sound sustain=note.getSustain((int)lastFreq,channelNum,length);
      Sound release=note.getRelease((int)lastFreq,channelNum,length);
      builtSound=builtSound.concat(true,usedarraylength,attack,decay,sustain,release);
      usedarraylength+=attack.getSamples().length + decay.getSamples().length + sustain.getSamples().length+ release.getSamples().length;
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}",0.2760712931361395
81413,"public ShapeSoundTransformation(){
}","public ShapeSoundTransformation(Pack pack,String instrument){
  this.pack=pack;
  this.instrument=instrument;
}",0.4897959183673469
81414,"@Test public void testShape(){
  try {
    new TransformSound(new PrintlnTransformObserver()).transformFile(input,output,new PurifySoundTransformation(),new ShapeSoundTransformation());
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@Test public void testShape(){
  try {
    System.out.println(""String_Node_Str"");
    PacksList packsList=PacksList.getInstance();
    new TransformSound(new PrintlnTransformObserver()).transformFile(input,output,new PurifySoundTransformation(),new ShapeSoundTransformation(packsList.defaultPack,""String_Node_Str""));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.8300907911802854
81415,"private Sound transformSubsound(Sound[] subSound,int channelNum,int frequency,int length){
  int percent=(int)(frequency * 100.0 / this.frequency);
  Sound result=subSound[channelNum];
  PitchSoundTransformation pitcher=new PitchSoundTransformation(percent);
  if (percent < 98 || percent > 102) {
    result=pitcher.transform(result);
  }
  double factor=subSound[0].getSamples().length == 0 ? 0 : length * 1.0 / result.getSamples().length;
  if (factor == 0) {
    return result;
  }
 else   if (factor < 0.98 || factor > 1.02) {
    if (factor < 0.98) {
      SpeedUpSoundTransformation speedup=new SpeedUpSoundTransformation(100,percent);
      result=speedup.transform(result);
    }
 else     if (factor > 1.02) {
      SlowdownSoundTransformation slowdown=new SlowdownSoundTransformation(100,percent);
      result=slowdown.transform(result);
    }
  }
  return result;
}","private Sound transformSubsound(Sound[] subSound,int channelNum,int frequency,int length){
  int percent=(int)(frequency * 100.0 / this.frequency);
  Sound result=subSound[channelNum];
  PitchSoundTransformation pitcher=new PitchSoundTransformation(percent);
  if (percent < 98 || percent > 102) {
    result=pitcher.transform(result);
  }
  double factor=subSound[0].getSamples().length == 0 ? 0 : length * 1.0 / result.getSamples().length;
  if (factor == 0) {
    return result;
  }
 else   if (factor < 0.98 || factor > 1.02) {
    if (factor < 0.98) {
      SpeedUpSoundTransformation speedup=new SpeedUpSoundTransformation(100,(float)(1 / factor));
      result=speedup.transform(result);
    }
 else     if (factor > 1.02) {
      SlowdownSoundTransformation slowdown=new SlowdownSoundTransformation(100,(float)factor);
      result=slowdown.transform(result);
    }
  }
  return result;
}",0.9740698985343856
81416,"@Override public Sound transform(Sound sound){
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PacksList packsList=PacksList.getInstance();
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[0],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  double[] freqs=new double[sound.getSamples().length / threshold + 1];
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  Sound2Note.getSoundLoudestFreqs(freqs,sound,threshold);
  double lastFreq=freqs[0];
  int lastBegining=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100) {
      int length=(i - 1 - lastBegining) * threshold;
      Note n=packsList.defaultPack.get(""String_Node_Str"").getNearestNote((int)lastFreq);
      builtSound.concat(n.getAttack((int)lastFreq,channelNum,length),n.getDecay((int)lastFreq,channelNum,length),n.getSustain((int)lastFreq,channelNum,length),n.getRelease((int)lastFreq,channelNum,length));
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}","@Override public Sound transform(Sound sound){
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PacksList packsList=PacksList.getInstance();
  int threshold=2000;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[0],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  double[] freqs=new double[sound.getSamples().length / threshold + 1];
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  Sound2Note.getSoundLoudestFreqs(freqs,sound,threshold);
  double lastFreq=freqs[0];
  int lastBegining=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100) {
      int length=(i - 1 - lastBegining) * threshold;
      Note n=packsList.defaultPack.get(""String_Node_Str"").getNearestNote((int)lastFreq);
      builtSound=builtSound.concat(n.getAttack((int)lastFreq,channelNum,length),n.getDecay((int)lastFreq,channelNum,length),n.getSustain((int)lastFreq,channelNum,length),n.getRelease((int)lastFreq,channelNum,length));
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}",0.9941275167785236
81417,"@Test public void testShape(){
  try {
    new TransformSound(new PrintlnTransformObserver()).transformFile(input,output,new ShapeSoundTransformation());
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@Test public void testShape(){
  try {
    new TransformSound(new PrintlnTransformObserver()).transformFile(input,output,new PurifySoundTransformation(),new ShapeSoundTransformation());
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9473684210526316
81418,"private float getRatio(Sound[] subsound){
  return subsound[0].getSamples().length * 1.0f / (this.attack[0].getSamples().length + this.decay[0].getSamples().length + this.sustain[0].getSamples().length+ this.release[0].getSamples().length);
}","private float getRatio(Sound[] subsound){
  int lengthOfSubsound=subsound[0].getSamples().length;
  int lengthOfSound=(this.attack[0].getSamples().length + this.decay[0].getSamples().length + this.sustain[0].getSamples().length+ this.release[0].getSamples().length);
  return lengthOfSubsound * 1.0f / lengthOfSound;
}",0.7178571428571429
81419,"private Sound transformSubsound(Sound[] subSound,int channelNum,int frequency,int length){
  int percent=(int)(frequency * 100.0 / this.frequency);
  Sound result=subSound[channelNum];
  PitchSoundTransformation pitcher=new PitchSoundTransformation(percent);
  if (percent < 98 || percent > 102) {
    result=pitcher.transform(result);
  }
  double factor=subSound[0].getSamples().length == 0 ? 0 : length * 1.0 / subSound[0].getSamples().length;
  if (factor == 0) {
    return result;
  }
 else   if (factor < 0.98 || factor > 1.02) {
    if (factor < 0.98) {
      SpeedUpSoundTransformation speedup=new SpeedUpSoundTransformation(100,percent);
      result=speedup.transform(result);
    }
 else     if (factor > 1.02) {
      SlowdownSoundTransformation slowdown=new SlowdownSoundTransformation(100,percent);
      result=slowdown.transform(result);
    }
  }
  return result;
}","private Sound transformSubsound(Sound[] subSound,int channelNum,int frequency,int length){
  int percent=(int)(frequency * 100.0 / this.frequency);
  Sound result=subSound[channelNum];
  PitchSoundTransformation pitcher=new PitchSoundTransformation(percent);
  if (percent < 98 || percent > 102) {
    result=pitcher.transform(result);
  }
  double factor=subSound[0].getSamples().length == 0 ? 0 : length * 1.0 / result.getSamples().length;
  if (factor == 0) {
    return result;
  }
 else   if (factor < 0.98 || factor > 1.02) {
    if (factor < 0.98) {
      SpeedUpSoundTransformation speedup=new SpeedUpSoundTransformation(100,percent);
      result=speedup.transform(result);
    }
 else     if (factor > 1.02) {
      SlowdownSoundTransformation slowdown=new SlowdownSoundTransformation(100,percent);
      result=slowdown.transform(result);
    }
  }
  return result;
}",0.9903463940942646
81420,"private void computeLoudestFreq(FrequenciesState fs){
  double max=0;
  double freq=0;
  for (int j=50; j < 900; j++) {
    double val=fs.getState()[j].abs();
    freq=(max < val ? j : freq);
    max=(max < val ? val : max);
  }
  this.loudestfreqs[index]=(int)freq;
}","private int computeLoudestFreq(FrequenciesState fs){
  double max=0;
  double freq=0;
  for (int j=50; j < 900; j++) {
    double val=fs.getState()[j].abs();
    freq=(max < val ? j : freq);
    max=(max < val ? val : max);
  }
  return (int)freq;
}",0.9245647969052224
81421,"@Override public FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length){
  for (int i=0; i < fs.getState().length; i++) {
    Complex c=fs.getState()[i];
    double abs=c.abs();
    double abs2=Math.pow(abs,2);
    double log=Math.log(abs2);
    fs.getState()[i]=new Complex(log);
  }
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  FrequenciesState fscep=new FrequenciesState(fastFourierTransformer.transform(fs.getState(),TransformType.INVERSE),fs.getMaxfrequency());
  this.computeLoudestFreq(fscep);
  this.index++;
  return fscep;
}","@Override public FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length){
  for (int i=0; i < fs.getState().length; i++) {
    Complex c=fs.getState()[i];
    double abs=c.abs();
    double abs2=Math.pow(abs,2);
    double log=Math.log(abs2);
    fs.getState()[i]=new Complex(log);
  }
  FastFourierTransformer fastFourierTransformer=new FastFourierTransformer(DftNormalization.STANDARD);
  FrequenciesState fscep=new FrequenciesState(fastFourierTransformer.transform(fs.getState(),TransformType.INVERSE),fs.getMaxfrequency());
  this.loudestfreqs[index]=this.computeLoudestFreq(fscep);
  ;
  this.index++;
  return fscep;
}",0.9779802581624903
81422,"private void byteArrayToFrame(byte[] frame,Sound sound,int position,boolean bigEndian){
  double value=0;
  int destination=(!bigEndian ? 0 : frame.length - 1);
  for (int j=0; j <= frame.length; j++) {
    int i=(bigEndian ? frame.length - j - 1 : j);
    int fromIndex=(i < destination ? i : destination);
    int toIndex=(i < destination ? destination : i);
    if (fromIndex < toIndex && !new HashSet<Object>(Arrays.asList(this.toObject(frame)).subList(fromIndex,toIndex)).equals(new HashSet<Object>(Arrays.asList(new byte[]{0})))) {
      value+=frame[i - 1] * Math.pow(256,i - 1);
    }
  }
  sound.getSamples()[position]=value;
}","private void byteArrayToFrame(byte[] frame,Sound sound,int position,boolean bigEndian){
  double value=0;
  int destination=(!bigEndian ? 0 : frame.length - 1);
  for (int j=0; j < frame.length; j++) {
    int cursor=(!bigEndian ? frame.length - j - 1 : j);
    int fromIndex=(cursor < destination ? cursor : destination);
    int toIndex=(cursor < destination ? destination : cursor);
    if (fromIndex <= toIndex) {
      value+=frame[cursor] * Math.pow(256,cursor);
    }
  }
  sound.getSamples()[position]=value;
}",0.7816291161178509
81423,"private static Sound normalize(Sound sound){
  double[] data=sound.getSamples();
  double[] newdata=new double[sound.getSamples().length];
  double max=0;
  for (int i=0; i < data.length; i++) {
    if (Math.abs(data[i]) > max)     max=Math.abs(data[i]);
  }
  double maxValue=Math.pow(256,sound.getNbBytesPerFrame() - 1) / 2;
  double ratio=maxValue / max;
  for (int i=0; i < data.length; i++) {
    double rescaled=data[i] * ratio;
    newdata[i]=Math.floor(rescaled);
  }
  return new Sound(newdata,sound.getNbBytesPerFrame(),sound.getFreq());
}","private static Sound normalize(Sound sound){
  double[] data=sound.getSamples();
  double[] newdata=new double[sound.getSamples().length];
  double max=0;
  for (int i=0; i < data.length; i++) {
    if (Math.abs(data[i]) > max)     max=Math.abs(data[i]);
  }
  double maxValue=Math.pow(256,sound.getNbBytesPerFrame()) / 2;
  double ratio=maxValue / max;
  for (int i=0; i < data.length; i++) {
    double rescaled=data[i] * ratio;
    newdata[i]=Math.floor(rescaled);
  }
  return new Sound(newdata,sound.getNbBytesPerFrame(),sound.getFreq());
}",0.9963436928702012
81424,"private float getRatio(Sound[] subsound){
  return subsound[0].getSamples().length / (this.attack[0].getSamples().length + this.decay[0].getSamples().length + this.sustain[0].getSamples().length+ this.release[0].getSamples().length);
}","private float getRatio(Sound[] subsound){
  return subsound[0].getSamples().length * 1.0f / (this.attack[0].getSamples().length + this.decay[0].getSamples().length + this.sustain[0].getSamples().length+ this.release[0].getSamples().length);
}",0.9853249475890984
81425,"private static int findRelease(Sound channel1){
  final int threshold=channel1.getFreq() / 10;
  Sound reversed=new ReverseSoundTransformation().transform(channel1);
  final double[] magnitude=new double[channel1.getSamples().length / threshold + 1];
  int releaseIndexFromReversed=0;
  SoundTransformation magnitudeTransform=new NoOpFrequencySoundTransformation(){
    int arraylength=0;
    @Override public Sound initSound(    Sound input){
      this.arraylength=0;
      return super.initSound(input);
    }
    @Override protected double getLowThreshold(    double defaultValue){
      return threshold;
    }
    @Override public FrequenciesState transformFrequencies(    FrequenciesState fs,    int offset,    int powOf2NearestLength,    int length,    double maxFrequency){
      magnitude[arraylength++]=Sound2Note.computeMagnitude(fs);
      return super.transformFrequencies(fs,offset,powOf2NearestLength,length,maxFrequency);
    }
  }
;
  magnitudeTransform.transform(reversed);
  try {
    MathArrays.checkOrder(magnitude,MathArrays.OrderDirection.INCREASING,true);
  }
 catch (  NonMonotonicSequenceException nmse) {
    releaseIndexFromReversed=(nmse.getIndex() - 1) * threshold;
  }
  return magnitude.length - releaseIndexFromReversed;
}","private static int findRelease(Sound channel1){
  final int threshold=channel1.getFreq() / 10;
  Sound reversed=new ReverseSoundTransformation().transform(channel1);
  final double[] magnitude=new double[channel1.getSamples().length / threshold + 1];
  int releaseIndexFromReversed=0;
  SoundTransformation magnitudeTransform=new NoOpFrequencySoundTransformation(){
    int arraylength=0;
    @Override public Sound initSound(    Sound input){
      this.arraylength=0;
      return super.initSound(input);
    }
    @Override protected double getLowThreshold(    double defaultValue){
      return threshold;
    }
    @Override public FrequenciesState transformFrequencies(    FrequenciesState fs,    int offset,    int powOf2NearestLength,    int length,    double maxFrequency){
      magnitude[arraylength++]=Sound2Note.computeMagnitude(fs);
      return super.transformFrequencies(fs,offset,powOf2NearestLength,length,maxFrequency);
    }
  }
;
  magnitudeTransform.transform(reversed);
  try {
    MathArrays.checkOrder(magnitude,MathArrays.OrderDirection.INCREASING,true);
  }
 catch (  NonMonotonicSequenceException nmse) {
    releaseIndexFromReversed=(nmse.getIndex() - 1) * threshold;
  }
  return channel1.getSamples().length - releaseIndexFromReversed;
}",0.9881141045958796
81426,"private static int findFrequency(Sound channel1){
  final int threshold=channel1.getFreq() / 10;
  double sum=0;
  final double[] magnitude=new double[channel1.getSamples().length / threshold + 1];
  SoundTransformation magnFreqTransform=new NoOpFrequencySoundTransformation(){
    int index=0;
    @Override public Sound initSound(    Sound input){
      return super.initSound(input);
    }
    @Override protected double getLowThreshold(    double defaultValue){
      return threshold;
    }
    @Override public FrequenciesState transformFrequencies(    FrequenciesState fs,    int offset,    int powOf2NearestLength,    int length,    double maxFrequency){
      index++;
      magnitude[index]+=Sound2Note.computeLoudestFreq(fs);
      return super.transformFrequencies(fs,offset,powOf2NearestLength,length,maxFrequency);
    }
  }
;
  magnFreqTransform.transform(channel1);
  for (int i=0; i < magnitude.length; i++) {
    sum+=magnitude[i];
  }
  return (int)(sum / magnitude.length);
}","private static int findFrequency(Sound channel1){
  final int threshold=100;
  double sum=0;
  final double[] magnitude=new double[channel1.getSamples().length / threshold + threshold];
  SoundTransformation magnFreqTransform=new NoOpFrequencySoundTransformation(){
    int index=0;
    @Override public Sound initSound(    Sound input){
      return super.initSound(input);
    }
    @Override protected double getLowThreshold(    double defaultValue){
      return threshold;
    }
    @Override public FrequenciesState transformFrequencies(    FrequenciesState fs,    int offset,    int powOf2NearestLength,    int length,    double maxFrequency){
      index++;
      magnitude[index]+=Sound2Note.computeLoudestFreq(fs);
      return super.transformFrequencies(fs,offset,powOf2NearestLength,length,maxFrequency);
    }
  }
;
  magnFreqTransform.transform(channel1);
  for (int i=0; i < magnitude.length; i++) {
    sum+=magnitude[i];
  }
  return (int)(sum / magnitude.length);
}",0.9089989888776542
81427,"@Test public void run() throws UnsupportedAudioFileException, IOException {
  AudioInputStream ais=AudioFileHelper.getAudioInputStream(input);
  TransformSound ts=new TransformSound();
  Note n=Sound2Note.convert(ts.fromInputStream(ais));
}","@Test public void run() throws UnsupportedAudioFileException, IOException {
  AudioInputStream ais=AudioFileHelper.getAudioInputStream(input);
  TransformSound ts=new TransformSound();
  Note n=Sound2Note.convert(ts.fromInputStream(ais));
  n.hashCode();
}",0.967741935483871
81428,"Sound[] getSustain(int frequency,int length);","Sound getSustain(int frequency,int channelnum,int length);",0.8349514563106796
81429,"Sound[] getAttack(int frequency,int length);","Sound getAttack(int frequency,int channelnum,int length);",0.8316831683168316
81430,"Sound[] getDecay(int frequency,int length);","Sound getDecay(int frequency,int channelnum,int length);",0.8282828282828283
81431,"Sound[] getRelease(int frequency,int length);","Sound getRelease(int frequency,int channelnum,int length);",0.8349514563106796
81432,"@Override public Sound[] getSustain(int frequency,int length){
  return this.transformSubsound(this.sustain,frequency,(int)(this.getRatio(this.sustain) * length));
}","@Override public Sound getSustain(int frequency,int channelnum,int length){
  return this.transformSubsound(this.sustain,channelnum,frequency,(int)(this.getRatio(this.sustain) * length));
}",0.9209039548022598
81433,"@Override public Sound[] getAttack(int frequency,int length){
  return this.transformSubsound(this.attack,frequency,(int)(this.getRatio(this.attack) * length));
}","@Override public Sound getAttack(int frequency,int channelnum,int length){
  return this.transformSubsound(this.attack,channelnum,frequency,(int)(this.getRatio(this.attack) * length));
}",0.9195402298850576
81434,"@Override public Sound[] getDecay(int frequency,int length){
  return this.transformSubsound(this.decay,frequency,(int)(this.getRatio(this.decay) * length));
}","@Override public Sound getDecay(int frequency,int channelnum,int length){
  return this.transformSubsound(this.decay,channelnum,frequency,(int)(this.getRatio(this.decay) * length));
}",0.9181286549707602
81435,"private Sound[] transformSubsound(Sound[] subSound,int frequency,int length){
  int percent=(int)(frequency * 100.0 / this.frequency);
  Sound[] result=new Sound[subSound.length];
  PitchSoundTransformation pitcher=new PitchSoundTransformation(percent);
  if (percent < 98 || percent > 102) {
    for (int i=0; i < result.length; i++) {
      result[i]=pitcher.transform(subSound[i]);
    }
  }
  double factor=length / subSound.length;
  if (factor < 0.98 || factor > 1.02) {
    if (factor < 0.98) {
      SpeedUpSoundTransformation speedup=new SpeedUpSoundTransformation(100,percent);
      for (int i=0; i < result.length; i++) {
        result[i]=speedup.transform(subSound[i]);
      }
    }
 else     if (factor > 1.02) {
      SlowdownSoundTransformation slowdown=new SlowdownSoundTransformation(100,percent);
      for (int i=0; i < result.length; i++) {
        result[i]=slowdown.transform(subSound[i]);
      }
    }
  }
  return result;
}","private Sound transformSubsound(Sound[] subSound,int channelNum,int frequency,int length){
  int percent=(int)(frequency * 100.0 / this.frequency);
  Sound result=subSound[channelNum];
  PitchSoundTransformation pitcher=new PitchSoundTransformation(percent);
  if (percent < 98 || percent > 102) {
    result=pitcher.transform(result);
  }
  double factor=length / subSound.length;
  if (factor < 0.98 || factor > 1.02) {
    if (factor < 0.98) {
      SpeedUpSoundTransformation speedup=new SpeedUpSoundTransformation(100,percent);
      result=speedup.transform(result);
    }
 else     if (factor > 1.02) {
      SlowdownSoundTransformation slowdown=new SlowdownSoundTransformation(100,percent);
      result=slowdown.transform(result);
    }
  }
  return result;
}",0.5317044793484584
81436,"@Override public Sound[] getRelease(int frequency,int length){
  return this.transformSubsound(this.release,frequency,(int)(this.getRatio(this.release) * length));
}","@Override public Sound getRelease(int frequency,int channelnum,int length){
  return this.transformSubsound(this.release,channelnum,frequency,(int)(this.getRatio(this.release) * length));
}",0.9209039548022598
81437,"@Override public Sound transform(Sound sound){
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PacksList packsList=PacksList.getInstance();
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[0],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  double[] freqs=new double[sound.getSamples().length / threshold + 1];
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  Sound2Note.getSoundLoudestFreqs(freqs,sound,threshold);
  double lastFreq=freqs[0];
  int lastBegining=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100) {
      int length=(i - 1 - lastBegining) * threshold;
      Note n=packsList.defaultPack.get(""String_Node_Str"").getNearestNote((int)lastFreq);
      builtSound.concat(n.getAttack((int)lastFreq,length)[channelNum],n.getDecay((int)lastFreq,length)[channelNum],n.getSustain((int)lastFreq,length)[channelNum],n.getRelease((int)lastFreq,length)[channelNum]);
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}","@Override public Sound transform(Sound sound){
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  PacksList packsList=PacksList.getInstance();
  int threshold=100;
  int channelNum=sound.getChannelNum();
  Sound builtSound=new Sound(new long[0],sound.getNbBytesPerSample(),sound.getFreq(),channelNum);
  double[] freqs=new double[sound.getSamples().length / threshold + 1];
  this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str""));
  Sound2Note.getSoundLoudestFreqs(freqs,sound,threshold);
  double lastFreq=freqs[0];
  int lastBegining=0;
  for (int i=0; i < freqs.length; i++) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + i + ""String_Node_Str""+ freqs.length));
    if (Math.abs(freqs[i] - lastFreq) > freqs[i] / 100) {
      int length=(i - 1 - lastBegining) * threshold;
      Note n=packsList.defaultPack.get(""String_Node_Str"").getNearestNote((int)lastFreq);
      builtSound.concat(n.getAttack((int)lastFreq,channelNum,length),n.getDecay((int)lastFreq,channelNum,length),n.getSustain((int)lastFreq,channelNum,length),n.getRelease((int)lastFreq,channelNum,length));
      lastBegining=i;
      lastFreq=freqs[i];
    }
  }
  return builtSound;
}",0.9713804713804712
81438,"@Override protected FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length,double maxfrequency){
  int total=(int)(this.sound.getSamples().length / factor);
  if (offset % ((total / 100 - (total / 100) % this.threshold)) == 0) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + offset + ""String_Node_Str""+ (int)(sound.getSamples().length * factor)));
  }
  if (this.writeIfGreaterEqThanFactor >= factor) {
    this.writeIfGreaterEqThanFactor-=factor;
    return fs;
  }
 else {
    this.writeIfGreaterEqThanFactor++;
    return null;
  }
}","@Override protected FrequenciesState transformFrequencies(FrequenciesState fs,int offset,int powOf2NearestLength,int length,double maxfrequency){
  int total=(int)(this.sound.getSamples().length / factor);
  if (total != 0 && offset % ((total / 100 - (total / 100) % this.threshold)) == 0) {
    this.log(new LogEvent(LogLevel.VERBOSE,""String_Node_Str"" + offset + ""String_Node_Str""+ (int)(sound.getSamples().length * factor)));
  }
  if (this.writeIfGreaterEqThanFactor >= factor) {
    this.writeIfGreaterEqThanFactor-=factor;
    return fs;
  }
 else {
    this.writeIfGreaterEqThanFactor++;
    return null;
  }
}",0.9885057471264368
81439,"protected static double computeLoudestFreq(FrequenciesState fs){
  double max=0;
  for (int i=0; i < fs.getState().length; i++) {
    double val=fs.getState()[i].abs();
    max=(max < val ? val : max);
  }
  return max;
}","protected static double computeLoudestFreq(FrequenciesState fs){
  double max=0;
  double freq=0;
  for (int i=0; i < fs.getState().length; i++) {
    double val=fs.getState()[i].abs();
    freq=(max < val ? i : freq);
    max=(max < val ? val : max);
  }
  return freq;
}",0.8600405679513184
81440,"private static int findFrequency(Sound channel1){
  final int threshold=100;
  double sum=0;
  final double[] magnitude=new double[channel1.getSamples().length / threshold + threshold];
  SoundTransformation magnFreqTransform=new NoOpFrequencySoundTransformation(){
    int index=0;
    @Override public Sound initSound(    Sound input){
      return super.initSound(input);
    }
    @Override protected double getLowThreshold(    double defaultValue){
      return threshold;
    }
    @Override public FrequenciesState transformFrequencies(    FrequenciesState fs,    int offset,    int powOf2NearestLength,    int length,    double maxFrequency){
      index++;
      magnitude[index]+=Sound2Note.computeLoudestFreq(fs);
      return super.transformFrequencies(fs,offset,powOf2NearestLength,length,maxFrequency);
    }
  }
;
  magnFreqTransform.transform(channel1);
  for (int i=0; i < magnitude.length; i++) {
    sum+=magnitude[i];
  }
  return (int)(sum / magnitude.length);
}","private static int findFrequency(Sound channel1){
  final int threshold=100;
  double sum=0;
  final double[] magnitude=new double[channel1.getSamples().length / threshold + 1];
  SoundTransformation magnFreqTransform=new NoOpFrequencySoundTransformation(){
    int index=0;
    @Override public Sound initSound(    Sound input){
      return super.initSound(input);
    }
    @Override protected double getLowThreshold(    double defaultValue){
      return threshold;
    }
    @Override public FrequenciesState transformFrequencies(    FrequenciesState fs,    int offset,    int powOf2NearestLength,    int length,    double maxFrequency){
      magnitude[index++]+=Sound2Note.computeLoudestFreq(fs);
      return super.transformFrequencies(fs,offset,powOf2NearestLength,length,maxFrequency);
    }
  }
;
  magnFreqTransform.transform(channel1);
  for (int i=0; i < magnitude.length; i++) {
    sum+=magnitude[i];
  }
  return (int)(sum / magnitude.length);
}",0.9778920308483292
81441,"public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new NoOpSoundTransformation());
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new ReverseSoundTransformation());
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9897292250233428
81442,"private Sound[] fromAudioInputStream(AudioInputStream ais) throws IOException {
  this.notifyAll(""String_Node_Str"");
  int channels=ais.getFormat().getChannels();
  int currentChannel=0;
  Sound[] ret=new Sound[channels];
  int length=(int)ais.getFrameLength();
  for (int channel=0; channel < channels; channel++) {
    ret[channel]=new Sound(new double[length],ais.getFormat().getFrameSize());
  }
  for (int position=0; position < length; ) {
    byte[] frame=new byte[ais.getFormat().getFrameSize()];
    ais.read(frame);
    this.byteArrayToFrame(frame,ret[currentChannel],position,ais.getFormat().isBigEndian());
    currentChannel=(currentChannel + 1) % channels;
    if (currentChannel == 0) {
      position++;
    }
  }
  this.notifyAll(""String_Node_Str"");
  return ret;
}","private Sound[] fromAudioInputStream(AudioInputStream ais) throws IOException {
  this.notifyAll(""String_Node_Str"");
  int channels=ais.getFormat().getChannels();
  int currentChannel=0;
  Sound[] ret=new Sound[channels];
  int length=(int)(ais.getFrameLength() / channels);
  for (int channel=0; channel < channels; channel++) {
    ret[channel]=new Sound(new double[length],ais.getFormat().getFrameSize());
  }
  for (int position=0; position < length; ) {
    byte[] frame=new byte[ais.getFormat().getFrameSize()];
    ais.read(frame);
    this.byteArrayToFrame(frame,ret[currentChannel],position,ais.getFormat().isBigEndian());
    currentChannel=(currentChannel + 1) % channels;
    if (currentChannel == 0) {
      position++;
    }
  }
  this.notifyAll(""String_Node_Str"");
  return ret;
}",0.9917564996829424
81443,"private AudioInputStream toStream(Sound[] channels,AudioFormat audioFormat){
  int length=audioFormat.getFrameSize() * channels[0].getSamples().length;
  byte[] data=new byte[length];
  for (int i=0; i < data.length; i++) {
    int currentFrameByte=i % audioFormat.getFrameSize();
    int currentChannel=(i / audioFormat.getFrameSize()) % channels.length;
    int currentFrame=i / (audioFormat.getFrameSize() * channels.length);
    if (!audioFormat.isBigEndian()) {
      data[i]=(byte)((int)(channels[currentChannel].getSamples()[currentFrame]) >> (8 * currentFrameByte));
    }
 else {
      data[i]=(byte)((int)(channels[currentChannel].getSamples()[currentFrame]) >> (8 * (audioFormat.getFrameSize() - 1 - currentFrameByte)));
    }
  }
  this.notifyAll(""String_Node_Str"");
  ByteArrayInputStream bais=new ByteArrayInputStream(data);
  return new AudioInputStream(bais,audioFormat,channels[0].getSamples().length);
}","private AudioInputStream toStream(Sound[] channels,AudioFormat audioFormat){
  int length=channels.length * audioFormat.getFrameSize() * channels[0].getSamples().length;
  byte[] data=new byte[length];
  for (int i=0; i < data.length; i++) {
    int currentFrameByte=i % audioFormat.getFrameSize();
    int currentChannel=(i / audioFormat.getFrameSize()) % channels.length;
    int currentFrame=i / (audioFormat.getFrameSize() * channels.length);
    if (!audioFormat.isBigEndian()) {
      data[i]=(byte)((int)(channels[currentChannel].getSamples()[currentFrame]) >> (8 * currentFrameByte));
    }
 else {
      data[i]=(byte)((int)(channels[currentChannel].getSamples()[currentFrame]) >> (8 * (audioFormat.getFrameSize() - 1 - currentFrameByte)));
    }
  }
  this.notifyAll(""String_Node_Str"");
  ByteArrayInputStream bais=new ByteArrayInputStream(data);
  return new AudioInputStream(bais,audioFormat,channels[0].getSamples().length * channels.length);
}",0.9808306709265175
81444,"@Test public void test8bits(){
  try {
    ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
    new TransformSound(new PrintlnTransformObserver()).transformWav(new File(classLoader.getResource(""String_Node_Str"").getFile()),new File(classLoader.getResource(""String_Node_Str"").getFile()),new EightBitsSoundTransformation(25));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@Test public void test8bits(){
  try {
    ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
    new TransformSound(new PrintlnTransformObserver()).transformWav(new File(classLoader.getResource(""String_Node_Str"").getFile()),new File(classLoader.getResource(""String_Node_Str"").getPath() + ""String_Node_Str""),new EightBitsSoundTransformation(25));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.967479674796748
81445,"@Override public Sound transform(Sound input){
  SplineInterpolator reg=new SplineInterpolator();
  double[] x=new double[input.getSamples().length / step];
  double[] y=new double[input.getSamples().length / step];
  for (int i=0; i < input.getSamples().length; i+=step) {
    if (i / step < x.length) {
      x[i / step]=i;
      y[i / step]=input.getSamples()[i];
    }
  }
  PolynomialSplineFunction psf=reg.interpolate(x,y);
  Sound outputSound=new Sound(new double[input.getSamples().length],input.getNbBytesPerFrame());
  for (int i=0; i < input.getSamples().length; i+=step) {
    outputSound.getSamples()[i]=psf.value(i);
  }
  return outputSound;
}","@Override public Sound transform(Sound input){
  SplineInterpolator reg=new SplineInterpolator();
  double[] x=new double[input.getSamples().length / step];
  double[] y=new double[input.getSamples().length / step];
  for (int i=0; i < input.getSamples().length; i+=step) {
    if (i / step < x.length) {
      x[i / step]=i;
      y[i / step]=input.getSamples()[i];
    }
  }
  PolynomialSplineFunction psf=reg.interpolate(x,y);
  Sound outputSound=new Sound(new double[input.getSamples().length],input.getNbBytesPerFrame());
  for (int i=0; i < input.getSamples().length; i+=step) {
    if (i / step < x.length) {
      outputSound.getSamples()[i]=psf.value(i);
    }
 else {
      outputSound.getSamples()[i]=input.getSamples()[i];
    }
  }
  return outputSound;
}",0.8513323983169705
81446,"public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new LinearRegressionSoundTransformation(1));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new LinearRegressionSoundTransformation(25));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9972602739726028
81447,"@Override public Sound transform(Sound input){
  Sound fs=input;
  UnivariateFunction function=this.getFunction(fs);
  return DownsampleSoundTransformation.buildSoundFromFunction(function,fs.getSamples().length,input.getNbBytesPerFrame(),input.getFreq());
}","@Override public Sound transform(Sound input){
  Sound fs=input;
  UnivariateFunction function=this.getFunction(fs);
  return DownsampleSoundTransformation.buildSoundFromFunction(function,this.times,fs.getSamples().length,input.getNbBytesPerFrame(),input.getFreq());
}",0.979047619047619
81448,"public DownsampleSoundTransformation(){
}","public DownsampleSoundTransformation(int times){
  this.times=times;
}",0.7387387387387387
81449,"private static Sound buildSoundFromFunction(UnivariateFunction function,int length,int nbBytesPerFrame,int freq){
  double[] result=new double[length];
  for (int i=0; i < length; i++) {
    result[i]=function.value(i);
  }
  return new Sound(result,nbBytesPerFrame,freq);
}","private static Sound buildSoundFromFunction(UnivariateFunction function,int times,int length,int nbBytesPerFrame,int freq){
  double[] result=new double[length * times];
  for (int i=0; i < length * times; i++) {
    result[i]=function.value(i / times);
  }
  return new Sound(result,nbBytesPerFrame,freq);
}",0.9415807560137456
81450,"@Test public void test8bits(){
  try {
    ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
    new TransformSound(new PrintlnTransformObserver()).transformWav(new File(classLoader.getResource(""String_Node_Str"").getFile()),new File(classLoader.getResource(""String_Node_Str"").getPath() + ""String_Node_Str""),new EightBitsSoundTransformation(25));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@Test public void test8bits(){
  try {
    new TransformSound(new PrintlnTransformObserver()).transformWav(input,output,new EightBitsSoundTransformation(25));
  }
 catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.7094339622641509
81451,"@Override public Sound transform(Sound input){
  Sound fs=input;
  UnivariateFunction function=this.getFunction(fs);
  return DownsampleSoundTransformation.buildSoundFromFunction(function,(int)fs.getTime()[fs.getTime().length - 1],input.getNbBytesPerFrame());
}","@Override public Sound transform(Sound input){
  Sound fs=input;
  UnivariateFunction function=this.getFunction(fs);
  return DownsampleSoundTransformation.buildSoundFromFunction(function,fs.getSamples().length,input.getNbBytesPerFrame());
}",0.9083665338645418
81452,"protected UnivariateFunction getFunction(Sound fs){
  return new SplineInterpolator().interpolate(fs.getTime(),fs.getSamples());
}","protected UnivariateFunction getFunction(Sound fs){
  double[] time=new double[fs.getSamples().length];
  for (int i=0; i < time.length; i++) {
    time[i]=i;
  }
  return new SplineInterpolator().interpolate(time,fs.getSamples());
}",0.6115702479338843
81453,"public FilteredSound(double[] samples,double[] time,int nbBytesPerFrame){
  super(samples,nbBytesPerFrame);
  this.time=time;
}","public FilteredSound(double[] samples,int division,int nbBytesPerFrame){
  super(samples,nbBytesPerFrame);
  this.division=division;
}",0.842911877394636
81454,"private static Sound precisionFilter(Sound sound,float percent){
  float total=100;
  if (percent == total) {
    return new Sound(sound.getSamples(),sound.getNbBytesPerFrame());
  }
  float nbSamples=sound.getSamples().length;
  float nbFiltered=percent / total * nbSamples;
  float incr=nbSamples / nbFiltered;
  double[] data=sound.getSamples();
  double[] ret=new double[(int)(nbFiltered)];
  double[] time=new double[(int)(nbFiltered)];
  for (float i=0; i < incr * nbFiltered; i+=incr) {
    int j=(int)(i / incr);
    if (j < ret.length) {
      ret[j]=data[(int)i];
      time[j]=i;
    }
  }
  return new FilteredSound(ret,time,sound.getNbBytesPerFrame());
}","private static Sound precisionFilter(Sound sound,float percent){
  float total=100;
  if (percent == total) {
    return new Sound(sound.getSamples(),sound.getNbBytesPerFrame());
  }
  float nbSamples=sound.getSamples().length;
  float nbFiltered=percent / total * nbSamples;
  float incr=nbSamples / nbFiltered;
  double[] data=sound.getSamples();
  double[] ret=new double[(int)(nbFiltered)];
  for (float i=0; i < incr * nbFiltered; i+=incr) {
    int j=(int)(i / incr);
    if (j < ret.length) {
      ret[j]=data[(int)i];
    }
  }
  return new FilteredSound(ret,(int)incr,sound.getNbBytesPerFrame());
}",0.9396078431372548
81455,"public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new NormalizeSoundTransformation());
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new NoOpSoundTransformation());
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9916123019571296
81456,"public AudioInputStream transformAudioStream(AudioInputStream ais,SoundTransformation... sts) throws IOException {
  Sound[] input=this.fromAudioInputStream(ais);
  Sound[] output=Arrays.copyOf(input,input.length);
  int transformNumber=0;
  for (  SoundTransformation st : sts) {
    for (int i=0; i < input.length; i++) {
      this.notifyAll(""String_Node_Str"" + (transformNumber + 1) + ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""+ input.length);
      output[i]=st.transform(output[i]);
    }
    transformNumber++;
  }
  if (sts.length == 0) {
    output=input;
  }
  this.notifyAll(""String_Node_Str"");
  return this.toStream(output,ais.getFormat());
}","public AudioInputStream transformAudioStream(AudioInputStream ais,SoundTransformation... sts) throws IOException {
  Sound[] input=this.fromAudioInputStream(ais);
  Sound[] output=Arrays.copyOf(input,input.length);
  int transformNumber=0;
  for (  SoundTransformation st : sts) {
    for (int i=0; i < input.length; i++) {
      this.notifyAll(""String_Node_Str"" + (transformNumber + 1) + ""String_Node_Str""+ sts.length+ ""String_Node_Str""+ st.getClass().getSimpleName()+ ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""+ input.length);
      output[i]=st.transform(output[i]);
    }
    transformNumber++;
  }
  if (sts.length == 0) {
    output=input;
  }
  this.notifyAll(""String_Node_Str"");
  return this.toStream(output,ais.getFormat());
}",0.94201861130995
81457,"private Sound[] fromAudioInputStream(AudioInputStream ais) throws IOException {
  this.notifyAll(""String_Node_Str"");
  int channels=ais.getFormat().getChannels();
  int currentChannel=0;
  Sound[] ret=new Sound[channels];
  for (int channel=0; channel < channels; channel++) {
    ret[channel]=new Sound(new double[(int)ais.getFrameLength()],ais.getFormat().getFrameSize());
  }
  for (int position=0; position < ais.getFrameLength(); ) {
    byte[] frame=new byte[ais.getFormat().getFrameSize()];
    ais.read(frame);
    this.byteArrayToFrame(frame,ret[currentChannel],position,ais.getFormat().isBigEndian());
    currentChannel=(currentChannel + 1) % channels;
    if (currentChannel == 0) {
      position++;
    }
  }
  this.notifyAll(""String_Node_Str"");
  return ret;
}","private Sound[] fromAudioInputStream(AudioInputStream ais) throws IOException {
  this.notifyAll(""String_Node_Str"");
  int channels=ais.getFormat().getChannels();
  int currentChannel=0;
  Sound[] ret=new Sound[channels];
  int length=(int)(ais.getFrameLength() / ais.getFormat().getFrameSize());
  for (int channel=0; channel < channels; channel++) {
    ret[channel]=new Sound(new double[length],ais.getFormat().getFrameSize());
  }
  for (int position=0; position < length; ) {
    byte[] frame=new byte[ais.getFormat().getFrameSize()];
    ais.read(frame);
    this.byteArrayToFrame(frame,ret[currentChannel],position,ais.getFormat().isBigEndian());
    currentChannel=(currentChannel + 1) % channels;
    if (currentChannel == 0) {
      position++;
    }
  }
  this.notifyAll(""String_Node_Str"");
  return ret;
}",0.9170854271356784
81458,"private Sound[] fromAudioInputStream(AudioInputStream ais) throws IOException {
  this.notifyAll(""String_Node_Str"");
  int channels=ais.getFormat().getChannels();
  int currentChannel=0;
  Sound[] ret=new Sound[channels];
  int length=(int)(ais.getFrameLength() / channels);
  for (int channel=0; channel < channels; channel++) {
    ret[channel]=new Sound(new double[length],ais.getFormat().getFrameSize(),ais.getFormat().getFrameSize());
  }
  for (int position=0; position < length; ) {
    byte[] frame=new byte[ais.getFormat().getFrameSize()];
    ais.read(frame);
    this.byteArrayToFrame(frame,ret[currentChannel],position,ais.getFormat().isBigEndian());
    currentChannel=(currentChannel + 1) % channels;
    if (currentChannel == 0) {
      position++;
    }
  }
  this.notifyAll(""String_Node_Str"");
  return ret;
}","private Sound[] fromAudioInputStream(AudioInputStream ais) throws IOException {
  this.notifyAll(""String_Node_Str"");
  int channels=ais.getFormat().getChannels();
  int currentChannel=0;
  Sound[] ret=new Sound[channels];
  int length=(int)(ais.getFrameLength() / channels);
  for (int channel=0; channel < channels; channel++) {
    ret[channel]=new Sound(new double[length],ais.getFormat().getFrameSize(),(int)ais.getFormat().getSampleRate());
  }
  for (int position=0; position < length; ) {
    byte[] frame=new byte[ais.getFormat().getFrameSize()];
    ais.read(frame);
    this.byteArrayToFrame(frame,ret[currentChannel],position,ais.getFormat().isBigEndian());
    currentChannel=(currentChannel + 1) % channels;
    if (currentChannel == 0) {
      position++;
    }
  }
  this.notifyAll(""String_Node_Str"");
  return ret;
}",0.9867310012062728
81459,"private Sound[] fromAudioInputStream(AudioInputStream ais) throws IOException {
  this.notifyAll(""String_Node_Str"");
  int channels=ais.getFormat().getChannels();
  int currentChannel=0;
  Sound[] ret=new Sound[channels];
  int length=(int)(ais.getFrameLength() / ais.getFormat().getFrameSize());
  for (int channel=0; channel < channels; channel++) {
    ret[channel]=new Sound(new double[length],ais.getFormat().getFrameSize());
  }
  for (int position=0; position < length; ) {
    byte[] frame=new byte[ais.getFormat().getFrameSize()];
    ais.read(frame);
    this.byteArrayToFrame(frame,ret[currentChannel],position,ais.getFormat().isBigEndian());
    currentChannel=(currentChannel + 1) % channels;
    if (currentChannel == 0) {
      position++;
    }
  }
  this.notifyAll(""String_Node_Str"");
  return ret;
}","private Sound[] fromAudioInputStream(AudioInputStream ais) throws IOException {
  this.notifyAll(""String_Node_Str"");
  int channels=ais.getFormat().getChannels();
  int currentChannel=0;
  Sound[] ret=new Sound[channels];
  int length=(int)ais.getFrameLength();
  for (int channel=0; channel < channels; channel++) {
    ret[channel]=new Sound(new double[length],ais.getFormat().getFrameSize());
  }
  for (int position=0; position < length; ) {
    byte[] frame=new byte[ais.getFormat().getFrameSize()];
    ais.read(frame);
    this.byteArrayToFrame(frame,ret[currentChannel],position,ais.getFormat().isBigEndian());
    currentChannel=(currentChannel + 1) % channels;
    if (currentChannel == 0) {
      position++;
    }
  }
  this.notifyAll(""String_Node_Str"");
  return ret;
}",0.9781113195747342
81460,"private AudioInputStream toStream(Sound[] channels,AudioFormat audioFormat){
  byte[] data=new byte[audioFormat.getFrameSize() * channels.length * channels[0].getSamples().length];
  for (int i=0; i < data.length; i++) {
    int currentFrameByte=i % audioFormat.getFrameSize();
    int currentChannel=(i / audioFormat.getFrameSize()) % channels.length;
    int currentFrame=i / (audioFormat.getFrameSize() * channels.length);
    if (!audioFormat.isBigEndian()) {
      data[i]=(byte)((int)(channels[currentChannel].getSamples()[currentFrame]) >> (8 * currentFrameByte));
    }
 else {
      data[i]=(byte)((int)(channels[currentChannel].getSamples()[currentFrame]) >> (8 * (audioFormat.getFrameSize() - 1 - currentFrameByte)));
    }
  }
  this.notifyAll(""String_Node_Str"");
  ByteArrayInputStream bais=new ByteArrayInputStream(data);
  return new AudioInputStream(bais,audioFormat,2 * channels.length * channels[0].getSamples().length);
}","private AudioInputStream toStream(Sound[] channels,AudioFormat audioFormat){
  int length=audioFormat.getFrameSize() * channels[0].getSamples().length;
  byte[] data=new byte[length];
  for (int i=0; i < data.length; i++) {
    int currentFrameByte=i % audioFormat.getFrameSize();
    int currentChannel=(i / audioFormat.getFrameSize()) % channels.length;
    int currentFrame=i / (audioFormat.getFrameSize() * channels.length);
    if (!audioFormat.isBigEndian()) {
      data[i]=(byte)((int)(channels[currentChannel].getSamples()[currentFrame]) >> (8 * currentFrameByte));
    }
 else {
      data[i]=(byte)((int)(channels[currentChannel].getSamples()[currentFrame]) >> (8 * (audioFormat.getFrameSize() - 1 - currentFrameByte)));
    }
  }
  this.notifyAll(""String_Node_Str"");
  ByteArrayInputStream bais=new ByteArrayInputStream(data);
  return new AudioInputStream(bais,audioFormat,channels[0].getSamples().length);
}",0.9091886082751208
81461,"private static Sound noop(Sound sound){
  double[] data=sound.getSamples();
  return new Sound(data,sound.getNbBytesPerFrame(),sound.getFreq());
}","private static Sound noop(Sound sound){
  double[] data=sound.getSamples();
  double[] newdata=new double[data.length];
  for (int i=0; i < data.length; i++) {
    newdata[i]=data[i];
  }
  return new Sound(newdata,sound.getNbBytesPerFrame(),sound.getFreq());
}",0.6339066339066339
81462,"private static Sound normalize(Sound sound){
  double[] data=sound.getSamples();
  double[] newdata=new double[sound.getSamples().length];
  double max=0;
  for (int i=0; i < data.length; i++) {
    if (Math.abs(data[i]) > max)     max=Math.abs(data[i]);
  }
  double maxValue=Math.pow(256,sound.getNbBytesPerFrame() - 1) / 2;
  System.out.println(max);
  System.out.println(maxValue);
  for (int i=0; i < data.length; i++) {
    double underOne=data[i] / max;
    double rescaled=underOne * maxValue;
    newdata[i]=rescaled;
  }
  return new Sound(newdata,sound.getNbBytesPerFrame(),sound.getFreq());
}","private static Sound normalize(Sound sound){
  double[] data=sound.getSamples();
  double[] newdata=new double[sound.getSamples().length];
  double max=0;
  for (int i=0; i < data.length; i++) {
    if (Math.abs(data[i]) > max)     max=Math.abs(data[i]);
  }
  double maxValue=Math.pow(256,sound.getNbBytesPerFrame() - 1) / 2;
  for (int i=0; i < data.length; i++) {
    double underOne=data[i] / max;
    double rescaled=underOne * maxValue;
    newdata[i]=Math.floor(rescaled);
  }
  return new Sound(newdata,sound.getNbBytesPerFrame(),sound.getFreq());
}",0.7372954349698536
81463,"public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new EqualizerSoundTransformation(new double[]{0,10000,22050},new double[]{1,1,1}),new EightBitsSoundTransformation(25));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new EightBitsSoundTransformation(25));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.929553264604811
81464,"private AudioInputStream toStream(Sound[] channels,AudioFormat audioFormat){
  int length=channels.length * audioFormat.getFrameSize() * channels[0].getSamples().length;
  byte[] data=new byte[length];
  for (int i=0; i < data.length; i++) {
    int currentFrameByte=i % audioFormat.getFrameSize();
    int currentChannel=(i / audioFormat.getFrameSize()) % channels.length;
    int currentFrame=i / (audioFormat.getFrameSize() * channels.length);
    if (audioFormat.isBigEndian()) {
      data[i]=(byte)((int)(channels[currentChannel].getSamples()[currentFrame]) >> (8 * currentFrameByte));
    }
 else {
      data[i]=(byte)((int)(channels[currentChannel].getSamples()[currentFrame]) >> (8 * (audioFormat.getFrameSize() - 1 - currentFrameByte)));
    }
  }
  this.notifyAll(""String_Node_Str"");
  ByteArrayInputStream bais=new ByteArrayInputStream(data);
  return new AudioInputStream(bais,audioFormat,channels[0].getSamples().length * channels.length);
}","private AudioInputStream toStream(Sound[] channels,AudioFormat audioFormat){
  int length=channels.length * audioFormat.getFrameSize() * channels[0].getSamples().length;
  byte[] data=new byte[length];
  for (int i=0; i < data.length; i++) {
    int currentFrameByte=i % audioFormat.getFrameSize();
    int currentChannel=(i / audioFormat.getFrameSize()) % channels.length;
    int currentFrame=i / (audioFormat.getFrameSize() * channels.length);
    if (audioFormat.isBigEndian()) {
      data[i]=(byte)((int)(channels[currentChannel].getSamples()[currentFrame]) >> (8 * currentFrameByte));
    }
 else {
      data[i]=(byte)((int)(channels[currentChannel].getSamples()[currentFrame]) >> (8 * (audioFormat.getFrameSize() - 1 - currentFrameByte)));
    }
  }
  this.notifyAll(""String_Node_Str"");
  ByteArrayInputStream bais=new ByteArrayInputStream(data);
  return new AudioInputStream(bais,audioFormat,length / audioFormat.getFrameSize());
}",0.9557428872497366
81465,"@Override public Sound transform(Sound input){
  SimpleRegression reg=new SimpleRegression();
  for (int i=0; i < input.getSamples().length; i+=step) {
    reg.addData(i,input.getSamples()[i]);
  }
  reg.regress();
  Sound outputSound=new Sound(new double[input.getSamples().length],input.getNbBytesPerFrame());
  for (int i=0; i < input.getSamples().length; i+=step) {
    outputSound.getSamples()[i]=reg.predict(i);
  }
  return outputSound;
}","@Override public Sound transform(Sound input){
  SplineInterpolator reg=new SplineInterpolator();
  double[] x=new double[input.getSamples().length / step + 1];
  double[] y=new double[input.getSamples().length / step + 1];
  for (int i=0; i < input.getSamples().length; i+=step) {
    x[i / step]=i;
    y[i / step]=input.getSamples()[i];
  }
  PolynomialSplineFunction psf=reg.interpolate(x,y);
  Sound outputSound=new Sound(new double[input.getSamples().length],input.getNbBytesPerFrame());
  for (int i=0; i < input.getSamples().length; i+=step) {
    outputSound.getSamples()[i]=psf.value(i);
  }
  return outputSound;
}",0.6485981308411215
81466,"private static Sound normalize(Sound sound){
  double[] data=sound.getSamples();
  double[] newdata=new double[sound.getSamples().length];
  double max=0;
  for (int i=0; i < data.length; i++) {
    if (Math.abs(data[i]) > max)     max=Math.abs(data[i]);
  }
  double maxValue=Math.pow(256,sound.getNbBytesPerFrame());
  for (int i=0; i < data.length; i++) {
    newdata[i]=Math.round(maxValue * (data[i]) / max);
  }
  return new Sound(newdata,sound.getNbBytesPerFrame());
}","private static Sound normalize(Sound sound){
  double[] data=sound.getSamples();
  double[] newdata=new double[sound.getSamples().length];
  double max=0;
  for (int i=0; i < data.length; i++) {
    if (Math.abs(data[i]) > max)     max=Math.abs(data[i]);
  }
  double maxValue=Math.pow(256,sound.getNbBytesPerFrame() - 1) / 2;
  System.out.println(max);
  System.out.println(maxValue);
  for (int i=0; i < data.length; i++) {
    double underOne=data[i] / max;
    double rescaled=underOne * maxValue;
    newdata[i]=rescaled;
  }
  return new Sound(newdata,sound.getNbBytesPerFrame());
}",0.8222013170272813
81467,"public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new ReverseSoundTransformation());
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new LinearRegressionSoundTransformation(5));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.981549815498155
81468,"public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new LinearRegressionSoundTransformation(20));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new PrecisionFilterSoundTransformation(115));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9671532846715328
81469,"@Override public Sound transform(Sound input){
  SplineInterpolator reg=new SplineInterpolator();
  double[] x=new double[input.getSamples().length / step + 1];
  double[] y=new double[input.getSamples().length / step + 1];
  for (int i=0; i < input.getSamples().length; i+=step) {
    x[i / step]=i;
    y[i / step]=input.getSamples()[i];
  }
  PolynomialSplineFunction psf=reg.interpolate(x,y);
  Sound outputSound=new Sound(new double[input.getSamples().length],input.getNbBytesPerFrame());
  for (int i=0; i < input.getSamples().length; i+=step) {
    outputSound.getSamples()[i]=psf.value(i);
  }
  return outputSound;
}","@Override public Sound transform(Sound input){
  SplineInterpolator reg=new SplineInterpolator();
  double[] x=new double[input.getSamples().length / step];
  double[] y=new double[input.getSamples().length / step];
  for (int i=0; i < input.getSamples().length; i+=step) {
    if (i / step < x.length) {
      x[i / step]=i;
      y[i / step]=input.getSamples()[i];
    }
  }
  PolynomialSplineFunction psf=reg.interpolate(x,y);
  Sound outputSound=new Sound(new double[input.getSamples().length],input.getNbBytesPerFrame());
  for (int i=0; i < input.getSamples().length; i+=step) {
    outputSound.getSamples()[i]=psf.value(i);
  }
  return outputSound;
}",0.7014809041309431
81470,"public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new LinearRegressionSoundTransformation(5));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    File fParam=new File(args[0]);
    File fOrigin=new File(""String_Node_Str"");
    File fDest=new File(""String_Node_Str"");
    TestTransformMain.copyFile(fParam,fOrigin);
    new TransformSound(new PrintlnTransformObserver()).transformWav(fOrigin,fDest,new LinearRegressionSoundTransformation(1));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedAudioFileException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9981718464351006
81471,"public void addSheetReader(XLSSheetReader reader){
  addSheetReader(reader.getSheetName(),reader);
  addSheetReader(new Integer(reader.getSheetIdx()),reader);
}","public void addSheetReader(XLSSheetReader reader){
  addSheetReader(reader.getSheetName(),reader);
  if (reader.getSheetIdx() >= 0) {
    addSheetReader(new Integer(reader.getSheetIdx()),reader);
  }
}",0.8864265927977839
81472,"public static void clearCache(){
  if (cache.get() != null) {
    cache.get().clear();
  }
}","public static void clearCache(){
  cache.remove();
}",0.6666666666666666
81473,"public static void clearCache(){
  if (cache.get() != null) {
    cache.get().clear();
  }
}","public static void clearCache(){
  cache.remove();
}",0.6666666666666666
81474,"private FormulaPartInfo(final List parts,final FormulaPart parentFormula){
  this.parts=new LinkedList();
  for (int i=0, c=parts.size(); i < c; i++) {
    Object part=parts.get(i);
    if (part instanceof String) {
      this.parts.add(part);
    }
 else     if (part instanceof CellRef) {
      this.parts.add(new CellRef((CellRef)part,parentFormula));
    }
  }
}","private FormulaPartInfo(final List parts,final FormulaPart parentFormula){
  this.defaultValue=parentFormula.defaultValue;
  this.parts=new LinkedList();
  for (int i=0, c=parts.size(); i < c; i++) {
    Object part=parts.get(i);
    if (part instanceof String) {
      this.parts.add(part);
    }
 else     if (part instanceof CellRef) {
      this.parts.add(new CellRef((CellRef)part,parentFormula));
    }
  }
}",0.9384615384615383
81475,"private List parseCells(Sheet sheet,org.apache.poi.ss.usermodel.Row hssfRow,int startCell,int endCell,Map beans){
  if (configuration.getRowKeyName() != null) {
    beans.put(configuration.getRowKeyName(),hssfRow);
  }
  List transformers=new ArrayList();
  RowTransformer rowTransformer=null;
  Row row=new Row(sheet,hssfRow);
  SimpleRowTransformer simpleRowTransformer=new SimpleRowTransformer(row,cellProcessors,configuration);
  boolean hasCollections=false;
  for (int j=startCell; j <= endCell; j++) {
    org.apache.poi.ss.usermodel.Cell hssfCell=hssfRow.getCell(j);
    CellParser cellParser=new CellParser(hssfCell,row,configuration);
    Cell cell=cellParser.parseCell(beans);
    if (cell.getTag() == null) {
      if (cell.getLabel() != null && cell.getLabel().length() > 0) {
        sheet.addNamedCell(cell.getLabel(),cell);
      }
      RowCollection rowCollection=row.addCell(cell);
      if (cell.getCollectionProperty() != null) {
        hasCollections=true;
        if (rowTransformer == null) {
          rowTransformer=new CollectionRowTransformer(row,fixedSizeCollections,cellProcessors,rowProcessors,configuration);
          transformers.add(rowTransformer);
        }
        ((CollectionRowTransformer)rowTransformer).addRowCollection(rowCollection);
        ListRange listRange=new ListRange(row.getPoiRow().getRowNum(),row.getPoiRow().getRowNum() + rowCollection.getCollectionProperty().getCollection().size() - 1,j);
        addListRange(sheet,cell.getCollectionProperty().getProperty(),listRange);
      }
 else {
        if (!cell.isEmpty()) {
          simpleRowTransformer.addCell(cell);
        }
      }
    }
 else {
      rowTransformer=new TagRowTransformer(row,cell);
      Block tagBody=cell.getTag().getTagContext().getTagBody();
      j+=tagBody.getNumberOfColumns() - 1;
      transformers.add(rowTransformer);
    }
  }
  if (!hasCollections && simpleRowTransformer.getCells().size() > 0) {
    transformers.add(simpleRowTransformer);
  }
  for (int i=0; i < row.getCells().size(); i++) {
    Cell cell=(Cell)row.getCells().get(i);
    if (cell.getTag() == null) {
      if (cell.getRowCollection() == null && cell.getCollectionName() != null) {
        RowCollection rowCollection=row.getRowCollectionByCollectionName(cell.getCollectionName());
        if (rowCollection != null) {
          rowCollection.addCell(cell);
        }
 else {
          log.debug(""String_Node_Str"" + cell.getCollectionName() + ""String_Node_Str"");
        }
      }
 else {
        if (cell.isEmpty() && cell.getRowCollection() == null && cell.getMergedRegion() == null && row.getRowCollections().size() == 1) {
          ((RowCollection)row.getRowCollections().get(0)).addCell(cell);
        }
      }
      if (cell.isFormula()) {
        if (cell.getFormula().isInline() && cell.getLabel() != null && cell.getLabel().length() > 0) {
          ListRange listRange=new ListRange(row.getPoiRow().getRowNum(),row.getPoiRow().getRowNum() + cell.getRowCollection().getCollectionProperty().getCollection().size() - 1,cell.getPoiCell().getColumnIndex());
          addListRange(sheet,cell.getLabel(),listRange);
        }
      }
    }
  }
  return transformers;
}","private List parseCells(Sheet sheet,org.apache.poi.ss.usermodel.Row hssfRow,int startCell,int endCell,Map beans){
  if (configuration.getRowKeyName() != null) {
    beans.put(configuration.getRowKeyName(),hssfRow);
  }
  List transformers=new ArrayList();
  RowTransformer rowTransformer=null;
  Row row=new Row(sheet,hssfRow);
  SimpleRowTransformer simpleRowTransformer=new SimpleRowTransformer(row,cellProcessors,configuration);
  boolean hasCollections=false;
  for (int j=startCell; j <= endCell && j > -1; j++) {
    org.apache.poi.ss.usermodel.Cell hssfCell=hssfRow.getCell(j);
    CellParser cellParser=new CellParser(hssfCell,row,configuration);
    Cell cell=cellParser.parseCell(beans);
    if (cell.getTag() == null) {
      if (cell.getLabel() != null && cell.getLabel().length() > 0) {
        sheet.addNamedCell(cell.getLabel(),cell);
      }
      RowCollection rowCollection=row.addCell(cell);
      if (cell.getCollectionProperty() != null) {
        hasCollections=true;
        if (rowTransformer == null) {
          rowTransformer=new CollectionRowTransformer(row,fixedSizeCollections,cellProcessors,rowProcessors,configuration);
          transformers.add(rowTransformer);
        }
        ((CollectionRowTransformer)rowTransformer).addRowCollection(rowCollection);
        ListRange listRange=new ListRange(row.getPoiRow().getRowNum(),row.getPoiRow().getRowNum() + rowCollection.getCollectionProperty().getCollection().size() - 1,j);
        addListRange(sheet,cell.getCollectionProperty().getProperty(),listRange);
      }
 else {
        if (!cell.isEmpty()) {
          simpleRowTransformer.addCell(cell);
        }
      }
    }
 else {
      rowTransformer=new TagRowTransformer(row,cell);
      Block tagBody=cell.getTag().getTagContext().getTagBody();
      j+=tagBody.getNumberOfColumns() - 1;
      transformers.add(rowTransformer);
    }
  }
  if (!hasCollections && simpleRowTransformer.getCells().size() > 0) {
    transformers.add(simpleRowTransformer);
  }
  for (int i=0; i < row.getCells().size(); i++) {
    Cell cell=(Cell)row.getCells().get(i);
    if (cell.getTag() == null) {
      if (cell.getRowCollection() == null && cell.getCollectionName() != null) {
        RowCollection rowCollection=row.getRowCollectionByCollectionName(cell.getCollectionName());
        if (rowCollection != null) {
          rowCollection.addCell(cell);
        }
 else {
          log.debug(""String_Node_Str"" + cell.getCollectionName() + ""String_Node_Str"");
        }
      }
 else {
        if (cell.isEmpty() && cell.getRowCollection() == null && cell.getMergedRegion() == null && row.getRowCollections().size() == 1) {
          ((RowCollection)row.getRowCollections().get(0)).addCell(cell);
        }
      }
      if (cell.isFormula()) {
        if (cell.getFormula().isInline() && cell.getLabel() != null && cell.getLabel().length() > 0) {
          ListRange listRange=new ListRange(row.getPoiRow().getRowNum(),row.getPoiRow().getRowNum() + cell.getRowCollection().getCollectionProperty().getCollection().size() - 1,cell.getPoiCell().getColumnIndex());
          addListRange(sheet,cell.getLabel(),listRange);
        }
      }
    }
  }
  return transformers;
}",0.9984326018808778
81476,"void transformSheet(WorkbookTransformationController workbookTransformationController,Sheet sheet,Map beans) throws ParsePropertyException {
  log.debug(""String_Node_Str"" + sheet.getSheetName());
  exposePOIBeans(sheet,beans);
  if (!beans.isEmpty()) {
    SheetTransformationController stc=new SheetTransformationControllerImpl(sheet);
    workbookTransformationController.addSheetTransformationController(stc);
    for (int i=sheet.getPoiSheet().getFirstRowNum(); i <= sheet.getPoiSheet().getLastRowNum(); i++) {
      org.apache.poi.ss.usermodel.Row hssfRow=sheet.getPoiSheet().getRow(i);
      if (hssfRow != null) {
        List rowTransformers=parseRow(sheet,hssfRow,beans);
        if (!rowTransformers.isEmpty()) {
          ResultTransformation processResult=new ResultTransformation();
          RowTransformer rowTransformer=(RowTransformer)rowTransformers.get(0);
          if (rowTransformer != null) {
            Row row=rowTransformer.getRow();
            applyRowProcessors(sheet,row);
            processResult=rowTransformer.transform(stc,this,beans,null);
            ownTransformers.add(rowTransformer);
            if (!processResult.isTagProcessResult()) {
              i+=processResult.getNextRowShift();
            }
 else {
              if (processResult.getLastProcessedRow() >= 0) {
                i=processResult.getLastProcessedRow();
              }
 else {
                i--;
              }
            }
          }
          for (int j=1; j < rowTransformers.size(); j++) {
            rowTransformer=(RowTransformer)rowTransformers.get(j);
            if (rowTransformer != null) {
              ResultTransformation newTransformation=rowTransformer.transform(stc,this,beans,processResult);
              processResult.add(newTransformation);
              ownTransformers.add(rowTransformer);
            }
          }
        }
      }
    }
    groupRows(sheet);
  }
}","void transformSheet(WorkbookTransformationController workbookTransformationController,Sheet sheet,Map beans) throws ParsePropertyException {
  log.debug(""String_Node_Str"" + sheet.getSheetName());
  exposePOIBeans(sheet,beans);
  if (!beans.isEmpty()) {
    SheetTransformationController stc=new SheetTransformationControllerImpl(sheet);
    workbookTransformationController.addSheetTransformationController(stc);
    for (int i=sheet.getPoiSheet().getFirstRowNum(); i <= sheet.getPoiSheet().getLastRowNum(); i++) {
      org.apache.poi.ss.usermodel.Row hssfRow=sheet.getPoiSheet().getRow(i);
      if (hssfRow != null) {
        List rowTransformers=parseRow(sheet,hssfRow,beans);
        if (!rowTransformers.isEmpty()) {
          ResultTransformation processResult=new ResultTransformation();
          RowTransformer rowTransformer=(RowTransformer)rowTransformers.get(0);
          if (rowTransformer != null) {
            Row row=rowTransformer.getRow();
            applyRowProcessors(sheet,row);
            processResult=rowTransformer.transform(stc,this,beans,null);
            ownTransformers.add(rowTransformer);
            if (!processResult.isTagProcessResult()) {
              i+=processResult.getNextRowShift();
            }
 else {
              if (processResult.getLastProcessedRow() >= 0) {
                i=processResult.getLastProcessedRow();
              }
 else {
                i--;
              }
            }
          }
          for (int j=1; j < rowTransformers.size(); j++) {
            rowTransformer=(RowTransformer)rowTransformers.get(j);
            if (rowTransformer != null) {
              Block transformationBlock=rowTransformer.getTransformationBlock();
              transformationBlock=processResult.transformBlock(transformationBlock);
              rowTransformer.setTransformationBlock(transformationBlock);
              ResultTransformation newTransformation=rowTransformer.transform(stc,this,beans,processResult);
              processResult.add(newTransformation);
              ownTransformers.add(rowTransformer);
            }
          }
        }
      }
    }
    groupRows(sheet);
  }
}",0.9410029498525072
81477,"private void parseFormula(){
  final String poiCellValue=cell.getPoiCellValue();
  int i=poiCellValue.lastIndexOf(configuration.getEndFormulaToken());
  String expr=poiCellValue.substring(2,i);
  cell.setFormula(new Formula(expr));
  cell.getFormula().setRowNum(cell.getRow().getPoiRow().getRowNum());
  cell.getFormula().setCellNum(cell.getPoiCell().getColumnIndex());
  if (i + 1 < poiCellValue.length()) {
    String tail=poiCellValue.substring(i + 1);
    int j=tail.indexOf(configuration.getMetaInfoToken());
    if (j >= 0) {
      cell.setMetaInfo(tail.substring(j));
      if (j > 0) {
        cell.setLabel(tail.substring(0,j));
      }
      cell.setCollectionName(tail.substring(j + 2));
    }
 else {
      cell.setLabel(tail);
    }
  }
  cell.setStringCellValue(poiCellValue.substring(0,i + 1));
}","private void parseFormula(){
  final String poiCellValue=cell.getPoiCellValue();
  int i=poiCellValue.lastIndexOf(configuration.getEndFormulaToken());
  String expr=poiCellValue.substring(2,i);
  cell.setFormula(new Formula(expr,cell.getRow().getSheet()));
  cell.getFormula().setRowNum(cell.getRow().getPoiRow().getRowNum());
  cell.getFormula().setCellNum(cell.getPoiCell().getColumnIndex());
  if (i + 1 < poiCellValue.length()) {
    String tail=poiCellValue.substring(i + 1);
    int j=tail.indexOf(configuration.getMetaInfoToken());
    if (j >= 0) {
      cell.setMetaInfo(tail.substring(j));
      if (j > 0) {
        cell.setLabel(tail.substring(0,j));
      }
      cell.setCollectionName(tail.substring(j + 2));
    }
 else {
      cell.setLabel(tail);
    }
  }
  cell.setStringCellValue(poiCellValue.substring(0,i + 1));
}",0.9848208864602308
81478,"public void testFindRefCells(){
  String formulaValue=""String_Node_Str"";
  Formula formula=new Formula(formulaValue);
  Set refCells=formula.findRefCells();
  assertEquals(""String_Node_Str"",refCells.size(),7);
  assertTrue(contains(refCells,""String_Node_Str""));
  assertTrue(contains(refCells,""String_Node_Str""));
  assertTrue(contains(refCells,""String_Node_Str""));
  assertTrue(contains(refCells,""String_Node_Str""));
  assertTrue(contains(refCells,""String_Node_Str""));
  assertTrue(contains(refCells,""String_Node_Str""));
  assertTrue(contains(refCells,""String_Node_Str""));
}","public void testFindRefCells(){
  String formulaValue=""String_Node_Str"";
  Formula formula=new Formula(formulaValue,null);
  Set refCells=formula.findRefCells();
  assertEquals(""String_Node_Str"",refCells.size(),7);
  assertTrue(contains(refCells,""String_Node_Str""));
  assertTrue(contains(refCells,""String_Node_Str""));
  assertTrue(contains(refCells,""String_Node_Str""));
  assertTrue(contains(refCells,""String_Node_Str""));
  assertTrue(contains(refCells,""String_Node_Str""));
  assertTrue(contains(refCells,""String_Node_Str""));
  assertTrue(contains(refCells,""String_Node_Str""));
}",0.9956709956709956
81479,"public void testFormulaWhenTopRowsAreNull() throws InvalidFormatException, IOException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",itDepartment);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(formulaXLS));
  XLSTransformer transformer=new XLSTransformer();
  Workbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  saveWorkbook(resultWorkbook,formulaDestXLS);
}","public void testFormulaWhenTopRowsAreNull() throws InvalidFormatException, IOException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",itDepartment);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(formulaXLS));
  XLSTransformer transformer=new XLSTransformer();
  Workbook resultWorkbook=transformer.transformXLS(is,beans);
  Sheet resultSheet=resultWorkbook.getSheetAt(0);
  CellsChecker checker=new CellsChecker();
  checker.checkCell(resultSheet,8,1,1500);
  checker.checkCell(resultSheet,9,1,2300);
  checker.checkFormulaCell(resultSheet,13,1,""String_Node_Str"");
  is.close();
  saveWorkbook(resultWorkbook,formulaDestXLS);
}",0.7764489420423183
81480,"public SheetTransformationControllerImpl(Sheet sheet){
  this.sheet=sheet;
  helper=new TagBodyHelper();
  formulaController=sheet.getWorkbook().getFormulaController();
}","public SheetTransformationControllerImpl(Sheet sheet){
  this.sheet=sheet;
  formulaController=sheet.getWorkbook().getFormulaController();
}",0.9032258064516128
81481,"String buildCommaSeparatedListOfCells(String refSheetName,List cells){
  String listOfCells=""String_Node_Str"";
  for (int i=0; i < cells.size() - 1; i++) {
    String cell=(String)cells.get(i);
    listOfCells+=getRefCellName(refSheetName,cell) + ""String_Node_Str"";
  }
  listOfCells+=getRefCellName(refSheetName,(String)cells.get(cells.size() - 1));
  return listOfCells;
}","String buildCommaSeparatedListOfCells(String refSheetName,List cells){
  StringBuilder buf=new StringBuilder();
  for (int i=0; i < cells.size() - 1; i++) {
    String cell=(String)cells.get(i);
    buf.append(getRefCellName(refSheetName,cell));
    buf.append(""String_Node_Str"");
  }
  buf.append(getRefCellName(refSheetName,(String)cells.get(cells.size() - 1)));
  return buf.toString();
}",0.5333333333333333
81482,"/** 
 * Method to replace coded list ranges (like @department.staff.payment@) with excel range string like B10:B20
 * @param formula - {@link Formula} object to replace list ranges in
 * @return Formula string that should be set into Excel cell using POI
 */
String replaceListRanges(Formula formula){
  String codedFormula=formula.getFormula();
  Sheet sheet=formula.getSheet();
  String appliedFormula=""String_Node_Str"";
  String delimiter=formulaListRangeToken;
  int index=codedFormula.indexOf(delimiter);
  boolean isExpression=false;
  while (index >= 0) {
    String token=codedFormula.substring(0,index);
    if (isExpression) {
      if (sheet.getListRanges().containsKey(token)) {
        appliedFormula+=((ListRange)sheet.getListRanges().get(token)).toExcelCellRange();
      }
 else       if (sheet.getNamedCells().containsKey(token)) {
        appliedFormula+=((Cell)sheet.getNamedCells().get(token)).toCellName();
      }
 else {
        log.warn(""String_Node_Str"" + token);
        return null;
      }
    }
 else {
      appliedFormula+=token;
    }
    codedFormula=codedFormula.substring(index + 1);
    index=codedFormula.indexOf(delimiter);
    isExpression=!isExpression;
  }
  appliedFormula+=codedFormula;
  return appliedFormula;
}","/** 
 * Method to replace coded list ranges (like @department.staff.payment@) with excel range string like B10:B20
 * @param formula - {@link Formula} object to replace list ranges in
 * @return Formula string that should be set into Excel cell using POI
 */
String replaceListRanges(Formula formula){
  String codedFormula=formula.getFormula();
  Sheet sheet=formula.getSheet();
  StringBuilder appliedFormulaBuilder=new StringBuilder();
  String delimiter=formulaListRangeToken;
  int index=codedFormula.indexOf(delimiter);
  boolean isExpression=false;
  while (index >= 0) {
    String token=codedFormula.substring(0,index);
    if (isExpression) {
      if (sheet.getListRanges().containsKey(token)) {
        appliedFormulaBuilder.append(((ListRange)sheet.getListRanges().get(token)).toExcelCellRange());
      }
 else       if (sheet.getNamedCells().containsKey(token)) {
        appliedFormulaBuilder.append(((Cell)sheet.getNamedCells().get(token)).toCellName());
      }
 else {
        log.warn(""String_Node_Str"" + token);
        return null;
      }
    }
 else {
      appliedFormulaBuilder.append(token);
    }
    codedFormula=codedFormula.substring(index + 1);
    index=codedFormula.indexOf(delimiter);
    isExpression=!isExpression;
  }
  appliedFormulaBuilder.append(codedFormula);
  return appliedFormulaBuilder.toString();
}",0.9108378170637972
81483,"String buildCommaSeparatedListOfCells(String refSheetName,List cells){
  String listOfCells=""String_Node_Str"";
  for (int i=0; i < cells.size() - 1; i++) {
    String cell=(String)cells.get(i);
    String refCellName=getRefCellName(refSheetName,cell);
    listOfCells+=refCellName + ""String_Node_Str"";
    rangeFormulaParts.add(new CellRef(refCellName,parentFormula));
    rangeFormulaParts.add(""String_Node_Str"");
  }
  String refCellName=getRefCellName(refSheetName,(String)cells.get(cells.size() - 1));
  listOfCells+=refCellName;
  rangeFormulaParts.add(new CellRef(refCellName,parentFormula));
  return listOfCells;
}","String buildCommaSeparatedListOfCells(String refSheetName,List cells){
  StringBuilder listOfCellsBuilder=new StringBuilder();
  for (int i=0; i < cells.size() - 1; i++) {
    String cell=(String)cells.get(i);
    String refCellName=getRefCellName(refSheetName,cell);
    listOfCellsBuilder.append(refCellName);
    listOfCellsBuilder.append(""String_Node_Str"");
    rangeFormulaParts.add(new CellRef(refCellName,parentFormula));
    rangeFormulaParts.add(""String_Node_Str"");
  }
  String refCellName=getRefCellName(refSheetName,(String)cells.get(cells.size() - 1));
  listOfCellsBuilder.append(refCellName);
  rangeFormulaParts.add(new CellRef(refCellName,parentFormula));
  return listOfCellsBuilder.toString();
}",0.4775449101796407
81484,"/** 
 * @return Formula string that should be set into Excel cell using POI
 */
public String getAppliedFormula(Map listRanges,Map namedCells){
  String codedFormula=formula;
  String appliedFormula=""String_Node_Str"";
  String delimiter=formulaListRangeToken;
  int index=codedFormula.indexOf(delimiter);
  boolean isExpression=false;
  while (index >= 0) {
    String token=codedFormula.substring(0,index);
    if (isExpression) {
      if (listRanges.containsKey(token)) {
        appliedFormula+=((ListRange)listRanges.get(token)).toExcelCellRange();
      }
 else       if (namedCells.containsKey(token)) {
        appliedFormula+=((Cell)namedCells.get(token)).toCellName();
      }
 else {
        log.warn(""String_Node_Str"" + token);
        return null;
      }
    }
 else {
      appliedFormula+=token;
    }
    codedFormula=codedFormula.substring(index + 1);
    index=codedFormula.indexOf(delimiter);
    isExpression=!isExpression;
  }
  appliedFormula+=codedFormula;
  return appliedFormula;
}","/** 
 * @return Formula string that should be set into Excel cell using POI
 */
public String getAppliedFormula(Map listRanges,Map namedCells){
  String codedFormula=formula;
  StringBuilder appliedFormulaBuilder=new StringBuilder();
  String delimiter=formulaListRangeToken;
  int index=codedFormula.indexOf(delimiter);
  boolean isExpression=false;
  while (index >= 0) {
    String token=codedFormula.substring(0,index);
    if (isExpression) {
      if (listRanges.containsKey(token)) {
        appliedFormulaBuilder.append(((ListRange)listRanges.get(token)).toExcelCellRange());
      }
 else       if (namedCells.containsKey(token)) {
        appliedFormulaBuilder.append(((Cell)namedCells.get(token)).toCellName());
      }
 else {
        log.warn(""String_Node_Str"" + token);
        return null;
      }
    }
 else {
      appliedFormulaBuilder.append(token);
    }
    codedFormula=codedFormula.substring(index + 1);
    index=codedFormula.indexOf(delimiter);
    isExpression=!isExpression;
  }
  appliedFormulaBuilder.append(codedFormula);
  return appliedFormulaBuilder.toString();
}",0.282319391634981
81485,"public String getActualFormula(){
  FormulaPart formulaPart;
  String actualFormula=""String_Node_Str"";
  for (Iterator iterator=formulaParts.iterator(); iterator.hasNext(); ) {
    formulaPart=(FormulaPart)iterator.next();
    actualFormula+=formulaPart.getActualFormula();
  }
  return actualFormula;
}","public String getActualFormula(){
  FormulaPart formulaPart;
  StringBuilder actualFormulaBuilder=new StringBuilder();
  for (Iterator iterator=formulaParts.iterator(); iterator.hasNext(); ) {
    formulaPart=(FormulaPart)iterator.next();
    actualFormulaBuilder.append(formulaPart.getActualFormula());
  }
  return actualFormulaBuilder.toString();
}",0.8440366972477065
81486,"public FormulaControllerImpl(Workbook workbook){
  this.workbook=workbook;
  sheetFormulasMap=workbook.createFormulaSheetMap();
}","public FormulaControllerImpl(Workbook workbook){
  sheetFormulasMap=workbook.createFormulaSheetMap();
}",0.8879310344827587
81487,"public void updateWorkbookFormulas(BlockTransformation transformation){
  Set sheetNames=sheetFormulasMap.keySet();
  Formula formula, newFormula;
  Set cellRefs, newCellRefs;
  CellRef cellRef, newCellRef;
  List resultCells;
  String newCell;
  Point point, newPoint;
  Set cellRefsToRemove=new HashSet();
  Set formulasToRemove=new HashSet();
  for (Iterator iterator=sheetNames.iterator(); iterator.hasNext(); ) {
    String sheetName=(String)iterator.next();
    List formulas=(List)sheetFormulasMap.get(sheetName);
    formulasToRemove.clear();
    for (int i=0, size=formulas.size(); i < size; i++) {
      formula=(Formula)formulas.get(i);
      List formulaPoints=null;
      Point formulaPoint=null;
      boolean transformFormula=false;
      if (formula.getSheet().getSheetName().equals(transformation.getBlock().getSheet().getSheetName())) {
        transformFormula=true;
        formulaPoint=new Point(formula.getRowNum().intValue(),formula.getCellNum().shortValue());
        formulaPoints=transformation.transformCell(formulaPoint);
      }
      if (!transformFormula || (formulaPoints != null && !formulaPoints.isEmpty())) {
        cellRefs=formula.getCellRefs();
        cellRefsToRemove.clear();
        for (Iterator iter=cellRefs.iterator(); iter.hasNext(); ) {
          cellRef=(CellRef)iter.next();
          if (!(transformation instanceof DuplicateTransformation && transformation.getBlock().contains(cellRef) && transformation.getBlock().contains(formula))) {
            resultCells=transformation.transformCell(sheetName,cellRef);
            if (resultCells != null) {
              if (resultCells.size() == 1) {
                newCell=(String)resultCells.get(0);
                cellRef.update(newCell);
              }
 else               if (resultCells.size() > 1) {
                cellRef.update(resultCells);
              }
            }
 else {
              cellRefsToRemove.add(cellRef);
            }
          }
        }
        if (!cellRefsToRemove.isEmpty()) {
          formula.removeCellRefs(cellRefsToRemove);
        }
        formula.updateReplacedRefCellsCollection();
        formula.updateCellRefs();
        if (formulaPoints != null && !formulaPoints.isEmpty()) {
          if (formulaPoints.size() == 1) {
            newPoint=(Point)formulaPoints.get(0);
            formula.setRowNum(new Integer(newPoint.getRow()));
            formula.setCellNum(new Integer(newPoint.getCol()));
          }
 else {
            List sheetFormulas=(List)sheetFormulasMap.get(formula.getSheet().getSheetName());
            for (int j=1, num=formulaPoints.size(); j < num; j++) {
              point=(Point)formulaPoints.get(j);
              newFormula=new Formula(formula);
              newFormula.setRowNum(new Integer(point.getRow()));
              newFormula.setCellNum(new Integer(point.getCol()));
              newCellRefs=newFormula.getCellRefs();
              for (Iterator iterator1=newCellRefs.iterator(); iterator1.hasNext(); ) {
                newCellRef=(CellRef)iterator1.next();
                if (transformation.getBlock().contains(newCellRef) && transformation.getBlock().contains(formulaPoint)) {
                  newCellRef.update(transformation.getDuplicatedCellRef(sheetName,newCellRef.toString(),j));
                }
              }
              sheetFormulas.add(newFormula);
            }
          }
        }
      }
 else {
        if (formulaPoints == null) {
          formulasToRemove.add(formula);
        }
      }
    }
    formulas.removeAll(formulasToRemove);
  }
}","public void updateWorkbookFormulas(BlockTransformation transformation){
  Set sheetNames=sheetFormulasMap.keySet();
  Formula formula, newFormula;
  Set cellRefs, newCellRefs;
  CellRef cellRef, newCellRef;
  List resultCells;
  String newCell;
  Point point, newPoint;
  Set cellRefsToRemove=new HashSet();
  Set formulasToRemove=new HashSet();
  for (Iterator iterator=sheetNames.iterator(); iterator.hasNext(); ) {
    String sheetName=(String)iterator.next();
    List formulas=(List)sheetFormulasMap.get(sheetName);
    formulasToRemove.clear();
    for (int i=0, size=formulas.size(); i < size; i++) {
      formula=(Formula)formulas.get(i);
      List formulaPoints=null;
      Point formulaPoint=null;
      boolean transformFormula=false;
      if (formula.getSheet().getSheetName().equals(transformation.getBlock().getSheet().getSheetName())) {
        transformFormula=true;
        formulaPoint=new Point(formula.getRowNum().intValue(),formula.getCellNum().shortValue());
        formulaPoints=transformation.transformCell(formulaPoint);
      }
      if (!transformFormula || (formulaPoints != null && !formulaPoints.isEmpty())) {
        cellRefs=formula.getCellRefs();
        cellRefsToRemove.clear();
        for (Iterator iter=cellRefs.iterator(); iter.hasNext(); ) {
          cellRef=(CellRef)iter.next();
          if (!(transformation instanceof DuplicateTransformation && transformation.getBlock().contains(cellRef) && transformation.getBlock().contains(formula))) {
            resultCells=transformation.transformCell(sheetName,cellRef);
            if (resultCells != null) {
              if (resultCells.size() == 1) {
                newCell=(String)resultCells.get(0);
                cellRef.update(newCell);
              }
 else               if (resultCells.size() > 1) {
                cellRef.update(resultCells);
              }
            }
 else {
              cellRefsToRemove.add(cellRef);
            }
          }
        }
        if (!cellRefsToRemove.isEmpty()) {
          formula.removeCellRefs(cellRefsToRemove);
        }
        formula.updateReplacedRefCellsCollection();
        formula.updateCellRefs();
        if (formulaPoints != null && !formulaPoints.isEmpty()) {
          if (formulaPoints.size() == 1) {
            newPoint=(Point)formulaPoints.get(0);
            formula.setRowNum(newPoint.getRow());
            formula.setCellNum((int)newPoint.getCol());
          }
 else {
            List sheetFormulas=(List)sheetFormulasMap.get(formula.getSheet().getSheetName());
            for (int j=1, num=formulaPoints.size(); j < num; j++) {
              point=(Point)formulaPoints.get(j);
              newFormula=new Formula(formula);
              newFormula.setRowNum(point.getRow());
              newFormula.setCellNum((int)point.getCol());
              newCellRefs=newFormula.getCellRefs();
              for (Iterator iterator1=newCellRefs.iterator(); iterator1.hasNext(); ) {
                newCellRef=(CellRef)iterator1.next();
                if (transformation.getBlock().contains(newCellRef) && transformation.getBlock().contains(formulaPoint)) {
                  newCellRef.update(transformation.getDuplicatedCellRef(sheetName,newCellRef.toString(),j));
                }
              }
              sheetFormulas.add(newFormula);
            }
          }
        }
      }
 else {
        if (formulaPoints == null) {
          formulasToRemove.add(formula);
        }
      }
    }
    formulas.removeAll(formulasToRemove);
  }
}",0.9723007348784624
81488,"private static List findFormulasInRow(Sheet sheet,org.apache.poi.ss.usermodel.Row hssfRow){
  List formulas=new ArrayList();
  if (hssfRow != null) {
    Row row=new Row(sheet,hssfRow);
    CellParser cellParser;
    Formula formula;
    Cell hssfCell;
    for (int i=hssfRow.getFirstCellNum(); i <= hssfRow.getLastCellNum(); i++) {
      hssfCell=hssfRow.getCell(i);
      if (hssfCell != null) {
        cellParser=new CellParser(hssfCell,row,sheet.getConfiguration());
        if (cellParser.parseCellFormula() != null && !cellParser.getCell().getFormula().isInline()) {
          formula=cellParser.getCell().getFormula();
          formula.setSheet(sheet);
          formulas.add(formula);
        }
      }
    }
  }
  return formulas;
}","private static List findFormulasInRow(Sheet sheet,org.apache.poi.ss.usermodel.Row hssfRow){
  List formulas=new ArrayList();
  if (hssfRow != null) {
    Row row=new Row(sheet,hssfRow);
    CellParser cellParser;
    Formula formula;
    Cell hssfCell;
    for (int i=hssfRow.getFirstCellNum(); i <= hssfRow.getLastCellNum() && i > -1; i++) {
      hssfCell=hssfRow.getCell(i);
      if (hssfCell != null) {
        cellParser=new CellParser(hssfCell,row,sheet.getConfiguration());
        if (cellParser.parseCellFormula() != null && !cellParser.getCell().getFormula().isInline()) {
          formula=cellParser.getCell().getFormula();
          formula.setSheet(sheet);
          formulas.add(formula);
        }
      }
    }
  }
  return formulas;
}",0.9933155080213903
81489,"private ResultTransformation processOneRowTag(SheetTransformer sheetTransformer){
  Block body=tagContext.getTagBody();
  int shiftNumber=0;
  Map beans=tagContext.getBeans();
  Collection collectionToProcess=null;
  if (groupBy == null || groupBy.length() == 0) {
    collectionToProcess=selectCollectionDataToProcess(beans);
  }
  if (itemsCollection != null && !itemsCollection.isEmpty() && (collectionToProcess == null || !collectionToProcess.isEmpty())) {
    tagContext.getSheetTransformationController().removeLeftRightBorders(body);
    shiftNumber+=-2;
    ResultTransformation shift=new ResultTransformation();
    shift.setLastProcessedRow(-1);
    shift.setStartCellShift(body.getEndCellNum() + 1);
    if (groupBy == null || groupBy.length() == 0) {
      shiftNumber+=tagContext.getSheetTransformationController().duplicateRight(body,collectionToProcess.size() - 1);
      processCollectionItemsOneRow(collectionToProcess,beans,body,shift,sheetTransformer);
    }
 else {
      try {
        Collection groupedData=ReportUtil.groupCollectionData(itemsCollection,groupBy,groupOrder,select,configuration);
        shiftNumber+=tagContext.getSheetTransformationController().duplicateRight(body,groupedData.size() - 1);
        Object savedGroupData=null;
        if (beans.containsKey(GROUP_DATA_KEY)) {
          savedGroupData=beans.get(GROUP_DATA_KEY);
        }
        processGroupedDataOneRow(groupedData,beans,body,shift,sheetTransformer);
        beans.remove(GROUP_DATA_KEY);
        if (savedGroupData != null) {
          beans.put(GROUP_DATA_KEY,savedGroupData);
        }
      }
 catch (      NoSuchMethodException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      IllegalAccessException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      InvocationTargetException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
    }
    shift.addRightShift((short)shiftNumber);
    shift.setTagProcessResult(true);
    return shift;
  }
  log.warn(""String_Node_Str"" + items + ""String_Node_Str"");
  HSSFRow currentRow=tagContext.getSheet().getHssfSheet().getRow(body.getStartRowNum());
  tagContext.getSheetTransformationController().removeRowCells(currentRow,body.getStartCellNum(),body.getEndCellNum());
  ResultTransformation shift=new ResultTransformation(0);
  shift.add(new ResultTransformation((short)-body.getNumberOfColumns(),(short)(-body.getNumberOfColumns())));
  shift.setLastProcessedRow(-1);
  shift.setTagProcessResult(true);
  return shift;
}","private ResultTransformation processOneRowTag(SheetTransformer sheetTransformer){
  Block body=tagContext.getTagBody();
  int shiftNumber=0;
  Map beans=tagContext.getBeans();
  Collection collectionToProcess=null;
  if (groupBy == null || groupBy.length() == 0) {
    collectionToProcess=selectCollectionDataToProcess(beans);
  }
  if (itemsCollection != null && !itemsCollection.isEmpty() && (collectionToProcess == null || !collectionToProcess.isEmpty())) {
    body.setSheet(tagContext.getSheet());
    tagContext.getSheetTransformationController().removeLeftRightBorders(body);
    shiftNumber+=-2;
    ResultTransformation shift=new ResultTransformation();
    shift.setLastProcessedRow(0);
    shift.setStartCellShift(body.getEndCellNum() + 1);
    if (groupBy == null || groupBy.length() == 0) {
      shiftNumber+=tagContext.getSheetTransformationController().duplicateRight(body,collectionToProcess.size() - 1);
      processCollectionItemsOneRow(collectionToProcess,beans,body,shift,sheetTransformer);
    }
 else {
      try {
        Collection groupedData=ReportUtil.groupCollectionData(itemsCollection,groupBy,groupOrder,select,configuration);
        shiftNumber+=tagContext.getSheetTransformationController().duplicateRight(body,groupedData.size() - 1);
        Object savedGroupData=null;
        if (beans.containsKey(GROUP_DATA_KEY)) {
          savedGroupData=beans.get(GROUP_DATA_KEY);
        }
        processGroupedDataOneRow(groupedData,beans,body,shift,sheetTransformer);
        beans.remove(GROUP_DATA_KEY);
        if (savedGroupData != null) {
          beans.put(GROUP_DATA_KEY,savedGroupData);
        }
      }
 catch (      NoSuchMethodException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      IllegalAccessException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      InvocationTargetException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
    }
    shift.addRightShift((short)shiftNumber);
    shift.setTagProcessResult(true);
    return shift;
  }
  log.warn(""String_Node_Str"" + items + ""String_Node_Str"");
  HSSFRow currentRow=tagContext.getSheet().getHssfSheet().getRow(body.getStartRowNum());
  tagContext.getSheetTransformationController().removeRowCells(currentRow,body.getStartCellNum(),body.getEndCellNum());
  ResultTransformation shift=new ResultTransformation(0);
  shift.add(new ResultTransformation((short)-body.getNumberOfColumns(),(short)(-body.getNumberOfColumns())));
  shift.setTagProcessResult(true);
  return shift;
}",0.9837837837837838
81490,"public static void removeLeftRightBorders(HSSFSheet sheet,Block block){
  HSSFRow row=sheet.getRow(block.getStartRowNum());
  if (row != null) {
    Util.shiftCellsLeft(sheet,block.getStartRowNum(),(int)(block.getStartCellNum() + 1),block.getEndRowNum(),row.getLastCellNum(),(int)1);
    HSSFCell cellToRemove=row.getCell(row.getLastCellNum());
    clearAndRemoveCell(row,cellToRemove);
    Util.shiftCellsLeft(sheet,block.getStartRowNum(),block.getEndCellNum(),block.getEndRowNum(),row.getLastCellNum(),(int)1);
    HSSFCell cell=cellToRemove;
    clearAndRemoveCell(row,cell);
    block.setEndCellNum((int)(block.getEndCellNum() - 2));
  }
}","public static void removeLeftRightBorders(HSSFSheet sheet,Block block){
  HSSFRow row=sheet.getRow(block.getStartRowNum());
  if (row != null) {
    Util.shiftCellsLeft(sheet,block.getStartRowNum(),(block.getStartCellNum() + 1),block.getEndRowNum(),row.getLastCellNum(),1,true);
    HSSFCell cellToRemove=row.getCell(row.getLastCellNum());
    clearAndRemoveCell(row,cellToRemove);
    Util.shiftCellsLeft(sheet,block.getStartRowNum(),block.getEndCellNum(),block.getEndRowNum(),row.getLastCellNum(),1,true);
    HSSFCell cell=cellToRemove;
    clearAndRemoveCell(row,cell);
    block.setEndCellNum((int)(block.getEndCellNum() - 2));
  }
}",0.9804839968774396
81491,"public static int duplicateRight(HSSFSheet sheet,Block block,int n){
  if (n > 0) {
    Util.shiftCellsRight(sheet,block.getStartRowNum(),block.getEndRowNum(),(int)(block.getEndCellNum() + 1),(int)(block.getNumberOfColumns() * n));
    for (int i=block.getStartRowNum(); i <= block.getEndRowNum(); i++) {
      HSSFRow row=sheet.getRow(i);
      if (row != null) {
        for (int k=0; k < n; k++) {
          for (int j=block.getStartCellNum(); j <= block.getEndCellNum(); j++) {
            int destCellNum=(int)(block.getEndCellNum() + k * block.getNumberOfColumns() + j - block.getStartCellNum() + 1);
            HSSFCell destCell=row.getCell(destCellNum);
            HSSFCell cell=row.getCell(j);
            if (destCell == null) {
              destCell=row.createCell(destCellNum);
            }
            Util.copyCell(cell,destCell,true);
            sheet.setColumnWidth(destCellNum,Util.getWidth(sheet,j));
          }
        }
      }
    }
    return block.getNumberOfColumns() * n;
  }
  return 0;
}","public static int duplicateRight(HSSFSheet sheet,Block block,int n){
  if (n > 0) {
    Set mergedRegions=new HashSet();
    Util.shiftCellsRight(sheet,block.getStartRowNum(),block.getEndRowNum(),(block.getEndCellNum() + 1),(block.getNumberOfColumns() * n),true);
    for (int rowNum=block.getStartRowNum(); rowNum <= block.getEndRowNum(); rowNum++) {
      HSSFRow row=sheet.getRow(rowNum);
      if (row != null) {
        for (int k=0; k < n; k++) {
          for (int cellNum=block.getStartCellNum(); cellNum <= block.getEndCellNum(); cellNum++) {
            int destCellNum=(block.getEndCellNum() + k * block.getNumberOfColumns() + cellNum - block.getStartCellNum() + 1);
            HSSFCell destCell=row.getCell(destCellNum);
            HSSFCell cell=row.getCell(cellNum);
            if (destCell == null) {
              destCell=row.createCell(destCellNum);
            }
            Util.copyCell(cell,destCell,true);
            Util.updateMergedRegionInRow(sheet,mergedRegions,rowNum,cellNum,destCellNum,false);
            sheet.setColumnWidth(destCellNum,Util.getWidth(sheet,cellNum));
          }
        }
      }
    }
    return block.getNumberOfColumns() * n;
  }
  return 0;
}",0.896800360522758
81492,"public static void removeRowCells(HSSFSheet sheet,HSSFRow row,int startCellNum,int endCellNum){
  clearRowCells(row,startCellNum,endCellNum);
  Util.shiftCellsLeft(sheet,row.getRowNum(),(int)(endCellNum + 1),row.getRowNum(),row.getLastCellNum(),(int)(endCellNum - startCellNum + 1));
  clearRowCells(row,(int)(row.getLastCellNum() - (endCellNum - startCellNum)),row.getLastCellNum());
}","public static void removeRowCells(HSSFSheet sheet,HSSFRow row,int startCellNum,int endCellNum){
  clearRowCells(row,startCellNum,endCellNum);
  Util.shiftCellsLeft(sheet,row.getRowNum(),(int)(endCellNum + 1),row.getRowNum(),row.getLastCellNum(),(int)(endCellNum - startCellNum + 1),true);
  clearRowCells(row,(int)(row.getLastCellNum() - (endCellNum - startCellNum)),row.getLastCellNum());
}",0.9935649935649936
81493,"public static void shiftCellsLeft(HSSFSheet sheet,int startRow,int startCol,int endRow,int endCol,int shiftNumber){
  for (int i=startRow; i <= endRow; i++) {
    boolean doSetWidth=true;
    HSSFRow row=sheet.getRow(i);
    if (row != null) {
      for (int j=startCol; j <= endCol; j++) {
        HSSFCell cell=row.getCell(j);
        if (cell == null) {
          cell=row.createCell(j);
          doSetWidth=false;
        }
        HSSFCell destCell=row.getCell((int)(j - shiftNumber));
        if (destCell == null) {
          destCell=row.createCell((int)(j - shiftNumber));
        }
        copyCell(cell,destCell,true);
        if (doSetWidth) {
          sheet.setColumnWidth(destCell.getColumnIndex(),getWidth(sheet,cell.getColumnIndex()));
        }
      }
    }
  }
}","public static void shiftCellsLeft(HSSFSheet sheet,int startRow,int startCol,int endRow,int endCol,int shiftNumber,boolean removeSourceMergedRegion){
  Set mergedRegions=new HashSet();
  for (int rowNum=startRow; rowNum <= endRow; rowNum++) {
    boolean doSetWidth=true;
    HSSFRow row=sheet.getRow(rowNum);
    if (row != null) {
      for (int colNum=startCol; colNum <= endCol; colNum++) {
        HSSFCell cell=row.getCell(colNum);
        if (cell == null) {
          cell=row.createCell(colNum);
          doSetWidth=false;
        }
        int destColNum=colNum - shiftNumber;
        HSSFCell destCell=row.getCell(destColNum);
        if (destCell == null) {
          destCell=row.createCell(destColNum);
        }
        copyCell(cell,destCell,true);
        Util.updateMergedRegionInRow(sheet,mergedRegions,rowNum,colNum,destColNum,removeSourceMergedRegion);
        if (doSetWidth) {
          sheet.setColumnWidth(destCell.getColumnIndex(),getWidth(sheet,cell.getColumnIndex()));
        }
      }
    }
  }
}",0.7705914870093975
81494,"public static void shiftCellsRight(HSSFSheet sheet,int startRow,int endRow,int startCol,int shiftNumber){
  for (int i=startRow; i <= endRow; i++) {
    HSSFRow row=sheet.getRow(i);
    if (row != null) {
      int lastCellNum=row.getLastCellNum();
      for (int j=lastCellNum; j >= startCol; j--) {
        HSSFCell destCell=row.getCell((int)(j + shiftNumber));
        if (destCell == null) {
          destCell=row.createCell((int)(j + shiftNumber));
        }
        HSSFCell cell=row.getCell(j);
        if (cell == null) {
          cell=row.createCell(j);
        }
        copyCell(cell,destCell,true);
      }
    }
  }
}","public static void shiftCellsRight(HSSFSheet sheet,int startRow,int endRow,int startCol,int shiftNumber,boolean removeSourceMergedRegion){
  Set mergedRegions=new HashSet();
  for (int rowNum=startRow; rowNum <= endRow; rowNum++) {
    HSSFRow row=sheet.getRow(rowNum);
    if (row != null) {
      int lastCellNum=row.getLastCellNum();
      for (int colNum=lastCellNum; colNum >= startCol; colNum--) {
        int destColNum=colNum + shiftNumber;
        HSSFCell destCell=row.getCell(destColNum);
        if (destCell == null) {
          destCell=row.createCell(destColNum);
        }
        HSSFCell cell=row.getCell(colNum);
        if (cell == null) {
          cell=row.createCell(colNum);
        }
        copyCell(cell,destCell,true);
        Util.updateMergedRegionInRow(sheet,mergedRegions,rowNum,colNum,destColNum,removeSourceMergedRegion);
      }
    }
  }
}",0.5812873258128732
81495,"private static boolean isNewMergedRegion(CellRangeAddress region,Collection mergedRegions){
  for (Iterator iterator=mergedRegions.iterator(); iterator.hasNext(); ) {
    CellRangeAddress cellRangeAddress=(CellRangeAddress)iterator.next();
    if (areRegionsEqual(cellRangeAddress,region)) {
      return false;
    }
  }
  return true;
}","protected static boolean isNewMergedRegion(CellRangeAddress region,Collection mergedRegions){
  for (Iterator iterator=mergedRegions.iterator(); iterator.hasNext(); ) {
    CellRangeAddress cellRangeAddress=(CellRangeAddress)iterator.next();
    if (areRegionsEqual(cellRangeAddress,region)) {
      return false;
    }
  }
  return true;
}",0.9823008849557522
81496,"public static void copyRow(HSSFSheet srcSheet,HSSFSheet destSheet,HSSFRow srcRow,HSSFRow destRow,String expressionToReplace,String expressionReplacement){
  Set mergedRegions=new TreeSet();
  if (srcRow.getHeight() >= 0) {
    destRow.setHeight(srcRow.getHeight());
  }
  for (int j=srcRow.getFirstCellNum(); j <= srcRow.getLastCellNum(); j++) {
    HSSFCell oldCell=srcRow.getCell(j);
    HSSFCell newCell=destRow.getCell(j);
    if (oldCell != null) {
      if (newCell == null) {
        newCell=destRow.createCell(j);
      }
      copyCell(oldCell,newCell,true,expressionToReplace,expressionReplacement);
      CellRangeAddress mergedRegion=getMergedRegion(srcSheet,srcRow.getRowNum(),oldCell.getColumnIndex());
      if (mergedRegion != null) {
        CellRangeAddress newMergedRegion=new CellRangeAddress(mergedRegion.getFirstRow(),mergedRegion.getLastRow(),mergedRegion.getFirstColumn(),mergedRegion.getLastColumn());
        if (isNewMergedRegion(newMergedRegion,mergedRegions)) {
          mergedRegions.add(newMergedRegion);
          destSheet.addMergedRegion(newMergedRegion);
        }
      }
    }
  }
}","public static void copyRow(HSSFSheet srcSheet,HSSFSheet destSheet,HSSFRow srcRow,HSSFRow destRow,String expressionToReplace,String expressionReplacement){
  Set mergedRegions=new HashSet();
  if (srcRow.getHeight() >= 0) {
    destRow.setHeight(srcRow.getHeight());
  }
  for (int j=srcRow.getFirstCellNum(); j <= srcRow.getLastCellNum(); j++) {
    HSSFCell oldCell=srcRow.getCell(j);
    HSSFCell newCell=destRow.getCell(j);
    if (oldCell != null) {
      if (newCell == null) {
        newCell=destRow.createCell(j);
      }
      copyCell(oldCell,newCell,true,expressionToReplace,expressionReplacement);
      CellRangeAddress mergedRegion=getMergedRegion(srcSheet,srcRow.getRowNum(),oldCell.getColumnIndex());
      if (mergedRegion != null) {
        CellRangeAddress newMergedRegion=new CellRangeAddress(mergedRegion.getFirstRow(),mergedRegion.getLastRow(),mergedRegion.getFirstColumn(),mergedRegion.getLastColumn());
        if (isNewMergedRegion(newMergedRegion,mergedRegions)) {
          mergedRegions.add(newMergedRegion);
          destSheet.addMergedRegion(newMergedRegion);
        }
      }
    }
  }
}",0.9964285714285714
81497,"private void parseCellExpression(Map beans){
  cell.setCollectionProperty(null);
  String curValue=cell.getHssfCellValue();
  int depRowNum=0;
  int j=curValue.lastIndexOf(configuration.getMetaInfoToken());
  if (j >= 0) {
    cell.setStringCellValue(cell.getHssfCellValue().substring(0,j));
    cell.setMetaInfo(cell.getHssfCellValue().substring(j + 2));
    String tail=curValue.substring(j + 2);
    int k=tail.indexOf(""String_Node_Str"");
    if (k >= 0) {
      try {
        depRowNum=Integer.parseInt(tail.substring(k + 1));
      }
 catch (      NumberFormatException e) {
      }
      cell.setCollectionName(tail.substring(0,k));
    }
 else {
      cell.setCollectionName(tail);
    }
    curValue=curValue.substring(0,j);
  }
 else {
    cell.setStringCellValue(cell.getHssfCellValue());
  }
  try {
    while (curValue.length() > 0) {
      int i=curValue.indexOf(configuration.getStartExpressionToken());
      if (i >= 0) {
        int k=curValue.indexOf(configuration.getEndExpressionToken(),i + 2);
        if (k >= 0) {
          String expr=curValue.substring(i + 2,k);
          if (i > 0) {
            String before=curValue.substring(0,i);
            cell.getExpressions().add(new Expression(before,configuration));
          }
          Expression expression=new Expression(expr,beans,configuration);
          if (expression.getCollectionProperty() != null) {
            if (cell.getCollectionProperty() == null) {
              cell.setCollectionName(expression.getCollectionProperty().getFullCollectionName());
              cell.setCollectionProperty(expression.getCollectionProperty());
              cell.setDependentRowNumber(depRowNum);
            }
 else {
              if (log.isInfoEnabled()) {
                log.info(""String_Node_Str"");
              }
            }
          }
          cell.getExpressions().add(expression);
          curValue=curValue.substring(k + 1,curValue.length());
        }
 else {
          cell.getExpressions().add(new Expression(curValue,configuration));
        }
      }
 else {
        if (curValue.length() != cell.getHssfCellValue().length()) {
          cell.getExpressions().add(new Expression(curValue,configuration));
        }
        curValue=""String_Node_Str"";
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(""String_Node_Str"",e);
  }
}","private void parseCellExpression(Map beans){
  cell.setCollectionProperty(null);
  String curValue=cell.getHssfCellValue();
  int depRowNum=0;
  int j=curValue.lastIndexOf(configuration.getMetaInfoToken());
  if (j >= 0) {
    cell.setStringCellValue(cell.getHssfCellValue().substring(0,j));
    cell.setMetaInfo(cell.getHssfCellValue().substring(j + 2));
    String tail=curValue.substring(j + 2);
    int k=tail.indexOf(""String_Node_Str"");
    if (k >= 0) {
      try {
        depRowNum=Integer.parseInt(tail.substring(k + 1));
      }
 catch (      NumberFormatException e) {
      }
      cell.setCollectionName(tail.substring(0,k));
    }
 else {
      cell.setCollectionName(tail);
    }
    curValue=curValue.substring(0,j);
  }
 else {
    cell.setStringCellValue(cell.getHssfCellValue());
  }
  try {
    while (curValue.length() > 0) {
      int i=curValue.indexOf(configuration.getStartExpressionToken());
      if (i >= 0) {
        int k=curValue.indexOf(configuration.getEndExpressionToken(),i + 2);
        if (k >= 0) {
          String expr=curValue.substring(i + 2,k);
          if (i > 0) {
            String before=curValue.substring(0,i);
            cell.getExpressions().add(new Expression(before,configuration));
          }
          Expression expression=new Expression(expr,beans,configuration);
          if (expression.getCollectionProperty() != null) {
            if (cell.getCollectionProperty() == null) {
              cell.setCollectionName(expression.getCollectionProperty().getFullCollectionName());
              cell.setCollectionProperty(expression.getCollectionProperty());
              cell.setDependentRowNumber(depRowNum);
            }
 else {
              if (log.isInfoEnabled()) {
                log.info(""String_Node_Str"");
              }
            }
          }
          cell.getExpressions().add(expression);
          curValue=curValue.substring(k + 1,curValue.length());
        }
 else {
          cell.getExpressions().add(new Expression(curValue,configuration));
          curValue=""String_Node_Str"";
        }
      }
 else {
        if (curValue.length() != cell.getHssfCellValue().length()) {
          cell.getExpressions().add(new Expression(curValue,configuration));
        }
        curValue=""String_Node_Str"";
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.error(""String_Node_Str"",e);
  }
}",0.9161752316764954
81498,"public void testOutTagInOneRow(){
  Map beans=new HashMap();
  List employees=itDepartment.getStaff();
  beans.put(""String_Node_Str"",employees);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(outTagOneRowXLS));
  XLSTransformer transformer=new XLSTransformer();
  transformer.setJexlInnerCollectionsAccess(true);
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  HSSFSheet sheet=resultWorkbook.getSheetAt(0);
  int index=0;
  for (int i=0; i < employees.size(); i++) {
    Employee employee=(Employee)employees.get(i);
    if (employee.getPayment().doubleValue() > 2000) {
      HSSFRow row=sheet.getRow(index);
      index++;
      assertNotNull(""String_Node_Str"",row);
      assertEquals(""String_Node_Str"",employee.getName(),row.getCell((short)0).getRichStringCellValue().getString());
      assertEquals(""String_Node_Str"",employee.getPayment().doubleValue(),row.getCell((short)1).getNumericCellValue(),1e-6);
      assertEquals(""String_Node_Str"",employee.getBonus().doubleValue(),row.getCell((short)2).getNumericCellValue(),1e-6);
    }
  }
}","public void testOutTagInOneRow() throws IOException {
  Map beans=new HashMap();
  List employees=itDepartment.getStaff();
  beans.put(""String_Node_Str"",employees);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(outTagOneRowXLS));
  XLSTransformer transformer=new XLSTransformer();
  transformer.setJexlInnerCollectionsAccess(true);
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  HSSFSheet sheet=resultWorkbook.getSheetAt(0);
  int index=0;
  for (int i=0; i < employees.size(); i++) {
    Employee employee=(Employee)employees.get(i);
    if (employee.getPayment().doubleValue() > 2000) {
      HSSFRow row=sheet.getRow(index);
      index++;
      assertNotNull(""String_Node_Str"",row);
      assertEquals(""String_Node_Str"",employee.getName(),row.getCell((short)0).getRichStringCellValue().getString());
      assertEquals(""String_Node_Str"",employee.getPayment().doubleValue(),row.getCell((short)1).getNumericCellValue(),1e-6);
      assertEquals(""String_Node_Str"",employee.getBonus().doubleValue(),row.getCell((short)2).getNumericCellValue(),1e-6);
    }
  }
  is.close();
}",0.9846153846153848
81499,"private String parseAggregate(String expr){
  int i=expr.indexOf(""String_Node_Str"");
  if (i >= 0) {
    String aggregate=expr.substring(0,i);
    if (aggregate.length() == 0) {
      aggregateFunction=null;
      aggregateField=null;
    }
 else {
      int f1=aggregate.indexOf(""String_Node_Str"");
      int f2=aggregate.indexOf(""String_Node_Str"");
      if (f1 != -1 && f2 != -1 && f2 > f1) {
        aggregateFunction=aggregate.substring(0,f1);
        aggregateField=aggregate.substring(f1 + 1,f2);
      }
 else {
        aggregateFunction=aggregate;
        aggregateField=""String_Node_Str"";
      }
    }
    return expr.substring(i + 1);
  }
  aggregateFunction=null;
  aggregateField=null;
  return expr;
}","private String parseAggregate(String expr){
  String[] aggregateParts=expr.split(aggregateSeparator,2);
  int i=expr.indexOf(""String_Node_Str"");
  if (aggregateParts.length >= 2 && i >= 0) {
    String aggregate=expr.substring(0,i);
    if (aggregate.length() == 0) {
      aggregateFunction=null;
      aggregateField=null;
    }
 else {
      int f1=aggregate.indexOf(""String_Node_Str"");
      int f2=aggregate.indexOf(""String_Node_Str"");
      if (f1 != -1 && f2 != -1 && f2 > f1) {
        aggregateFunction=aggregate.substring(0,f1);
        aggregateField=aggregate.substring(f1 + 1,f2);
      }
 else {
        aggregateFunction=aggregate;
        aggregateField=""String_Node_Str"";
      }
    }
    return expr.substring(i + 1);
  }
  aggregateFunction=null;
  aggregateField=null;
  return expr;
}",0.9408672798948752
81500,"protected void setUp() throws Exception {
  Class.forName(""String_Node_Str"");
  conn=DriverManager.getConnection(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Statement stmt=conn.createStatement();
  stmt.executeUpdate(CREATE_DEPARTMENT_TABLE);
  stmt.executeUpdate(CREATE_EMPLOYEE_TABLE);
  PreparedStatement insertDep=conn.prepareStatement(INSERT_DEPARTMENT);
  PreparedStatement insertStmt=conn.prepareStatement(INSERT_EMPLOYEE);
  int k=1;
  int n=1;
  for (int i=0; i < depNames.length; i++) {
    String depName=depNames[i];
    insertDep.setString(1,depName);
    insertDep.setInt(2,n++);
    insertDep.executeUpdate();
    for (int j=0; j < employeeNames[i].length; j++) {
      insertStmt.setString(1,employeeNames[i][j]);
      insertStmt.setInt(2,employeeAges[i][j]);
      insertStmt.setDouble(3,employeePayments[i][j]);
      insertStmt.setDouble(4,employeeBonuses[i][j]);
      SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
      insertStmt.setDate(5,new Date(sdf.parse(employeeBirthDates[i][j]).getTime()));
      insertStmt.setInt(6,n - 1);
      insertStmt.setInt(7,k++);
      insertStmt.executeUpdate();
    }
  }
  stmt.close();
  insertStmt.close();
}","protected void setUp() throws Exception {
  Class.forName(""String_Node_Str"");
  conn=DriverManager.getConnection(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Statement stmt=conn.createStatement();
  stmt.executeUpdate(CREATE_DEPARTMENT_TABLE);
  stmt.executeUpdate(CREATE_EMPLOYEE_TABLE);
  PreparedStatement insertDep=conn.prepareStatement(INSERT_DEPARTMENT);
  PreparedStatement insertStmt=conn.prepareStatement(INSERT_EMPLOYEE);
  int k=1;
  int n=1;
  for (int i=0; i < depNames.length; i++) {
    String depName=depNames[i];
    insertDep.setString(1,depName);
    insertDep.setInt(2,n++);
    insertDep.executeUpdate();
    for (int j=0; j < employeeNames[i].length; j++) {
      insertStmt.setString(1,employeeNames[i][j]);
      insertStmt.setInt(2,employeeAges[i][j]);
      insertStmt.setDouble(3,employeePayments[i][j]);
      insertStmt.setDouble(4,employeeBonuses[i][j]);
      SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
      insertStmt.setDate(5,new Date(sdf.parse(employeeBirthDates[i][j]).getTime()));
      SimpleDateFormat tdf=new SimpleDateFormat(""String_Node_Str"");
      insertStmt.setTimestamp(6,new Timestamp(tdf.parse(birthTimestamps[i][j]).getTime()));
      insertStmt.setInt(7,n - 1);
      insertStmt.setInt(8,k++);
      insertStmt.executeUpdate();
    }
  }
  stmt.close();
  insertStmt.close();
}",0.9234375
81501,"public Set findRefCells(){
  Set refCells=new HashSet();
  for (Iterator iterator=formulaParts.iterator(); iterator.hasNext(); ) {
    FormulaPart formulaPart=(FormulaPart)iterator.next();
    refCells.addAll(formulaPart.findRefCells());
  }
  return refCells;
}","public Set findRefCells(){
  Set refCells=new HashSet();
  for (Iterator iterator=formulaParts.iterator(); iterator.hasNext(); ) {
    FormulaPart formulaPart=(FormulaPart)iterator.next();
    refCells.addAll(formulaPart.getRefCells());
  }
  return refCells;
}",0.9866156787762906
81502,"public FormulaPart(FormulaPart aFormulaPart){
  this.parentFormula=aFormulaPart.parentFormula;
  for (int i=0; i < aFormulaPart.parts.size(); i++) {
    Object part=aFormulaPart.parts.get(i);
    if (part instanceof String) {
      parts.add(part.toString());
    }
 else     if (part instanceof CellRef) {
      CellRef cellRef=new CellRef(part.toString(),this);
      parts.add(cellRef);
      cellRefs.add(cellRef);
    }
  }
}","public FormulaPart(FormulaPart aFormulaPart){
  this.parentFormula=aFormulaPart.parentFormula;
  for (int i=0; i < aFormulaPart.parts.size(); i++) {
    Object part=aFormulaPart.parts.get(i);
    if (part instanceof String) {
      parts.add(part.toString());
    }
 else     if (part instanceof CellRef) {
      CellRef cellRef=new CellRef(part.toString(),this);
      parts.add(cellRef);
      cellRefs.add(cellRef);
    }
  }
  this.defaultValue=aFormulaPart.defaultValue;
}",0.948180815876516
81503,"public void removeCellRefs(Set cellRefsToRemove){
  List formulaPartIndexesToRemove=new ArrayList();
  Object prevFormulaPart=null;
  Object nextFormulaPart=null;
  for (int i=0; i < parts.size(); i++) {
    Object formulaPart=parts.get(i);
    if (cellRefsToRemove.contains(formulaPart)) {
      formulaPartIndexesToRemove.add(new Integer(i));
      if (i > 0) {
        prevFormulaPart=parts.get(i - 1);
      }
      if (i < parts.size() - 1) {
        nextFormulaPart=parts.get(i + 1);
      }
 else {
        nextFormulaPart=null;
      }
      if (prevFormulaPart != null) {
        if (prevFormulaPart.toString().equals(""String_Node_Str"")) {
          formulaPartIndexesToRemove.add(new Integer(i - 1));
        }
 else         if (nextFormulaPart != null && nextFormulaPart.toString().equals(""String_Node_Str"")) {
          formulaPartIndexesToRemove.add(new Integer(i + 1));
        }
      }
    }
  }
  int shift=0;
  for (int i=0; i < formulaPartIndexesToRemove.size(); i++) {
    int index=((Integer)formulaPartIndexesToRemove.get(i)).intValue();
    parts.remove(index - shift);
    shift++;
  }
  cellRefs.removeAll(cellRefsToRemove);
}","public void removeCellRefs(Set cellRefsToRemove){
  List formulaPartIndexesToRemove=new ArrayList();
  Object prevFormulaPart=null;
  Object nextFormulaPart;
  for (int i=0; i < parts.size(); i++) {
    Object formulaPart=parts.get(i);
    if (cellRefsToRemove.contains(formulaPart)) {
      formulaPartIndexesToRemove.add(new Integer(i));
      if (i > 0) {
        prevFormulaPart=parts.get(i - 1);
      }
      if (i < parts.size() - 1) {
        nextFormulaPart=parts.get(i + 1);
      }
 else {
        nextFormulaPart=null;
      }
      if (prevFormulaPart != null) {
        if (prevFormulaPart.toString().equals(""String_Node_Str"")) {
          formulaPartIndexesToRemove.add(new Integer(i - 1));
        }
 else         if (nextFormulaPart != null && nextFormulaPart.toString().equals(""String_Node_Str"")) {
          formulaPartIndexesToRemove.add(new Integer(i + 1));
        }
      }
    }
  }
  Collections.sort(formulaPartIndexesToRemove);
  int shift=0;
  for (int i=0; i < formulaPartIndexesToRemove.size(); i++) {
    int index=((Integer)formulaPartIndexesToRemove.get(i)).intValue();
    parts.remove(index - shift);
    shift++;
  }
  cellRefs.removeAll(cellRefsToRemove);
}",0.9773987206823028
81504,"public CellRef(String cellRef,Formula parentFormula){
  this(cellRef);
  this.parentFormula=parentFormula;
}","public CellRef(String cellRef,FormulaPart parentFormula){
  this(cellRef);
  this.parentFormula=parentFormula;
}",0.9818181818181818
81505,"public boolean containsListRanges(){
  return formula.indexOf(formulaListRangeToken) >= 0;
}","public boolean containsListRanges(){
  return formula.matches(""String_Node_Str"");
}",0.72
81506,"public Formula(Formula f){
  this.formula=f.formula;
  this.sheet=f.getSheet();
  for (int i=0; i < f.formulaParts.size(); i++) {
    Object formulaPart=f.formulaParts.get(i);
    if (formulaPart instanceof String) {
      formulaParts.add(formulaPart.toString());
    }
 else     if (formulaPart instanceof CellRef) {
      CellRef cellRef=new CellRef(formulaPart.toString(),this);
      formulaParts.add(cellRef);
      cellRefs.add(cellRef);
    }
  }
}","public Formula(Formula f){
  this.formula=f.formula;
  this.sheet=f.getSheet();
  for (int i=0; i < f.formulaParts.size(); i++) {
    FormulaPart formulaPart=(FormulaPart)f.formulaParts.get(i);
    formulaParts.add(new FormulaPart(formulaPart));
  }
  updateCellRefs();
}",0.5281980742778541
81507,"public Set findRefCells(){
  Set refCells=new HashSet();
  Matcher refCellMatcher=regexCellRefPattern.matcher(formula);
  while (refCellMatcher.find()) {
    refCells.add(refCellMatcher.group());
  }
  return refCells;
}","public Set findRefCells(){
  Set refCells=new HashSet();
  for (Iterator iterator=formulaParts.iterator(); iterator.hasNext(); ) {
    FormulaPart formulaPart=(FormulaPart)iterator.next();
    refCells.addAll(formulaPart.findRefCells());
  }
  return refCells;
}",0.3941908713692946
81508,"public void removeCellRefs(Set cellRefsToRemove){
  List formulaPartIndexesToRemove=new ArrayList();
  Object prevFormulaPart=null;
  Object nextFormulaPart=null;
  for (int i=0; i < formulaParts.size(); i++) {
    Object formulaPart=formulaParts.get(i);
    if (cellRefsToRemove.contains(formulaPart)) {
      formulaPartIndexesToRemove.add(new Integer(i));
      if (i > 0) {
        prevFormulaPart=formulaParts.get(i - 1);
      }
      if (i < formulaParts.size() - 1) {
        nextFormulaPart=formulaParts.get(i + 1);
      }
 else {
        nextFormulaPart=null;
      }
      if (prevFormulaPart != null) {
        if (prevFormulaPart.toString().equals(""String_Node_Str"")) {
          formulaPartIndexesToRemove.add(new Integer(i - 1));
        }
 else         if (nextFormulaPart != null && nextFormulaPart.toString().equals(""String_Node_Str"")) {
          formulaPartIndexesToRemove.add(new Integer(i + 1));
        }
      }
    }
  }
  int shift=0;
  for (int i=0; i < formulaPartIndexesToRemove.size(); i++) {
    int index=((Integer)formulaPartIndexesToRemove.get(i)).intValue();
    formulaParts.remove(index - shift);
    shift++;
  }
  cellRefs.removeAll(cellRefsToRemove);
}","public void removeCellRefs(Set cellRefsToRemove){
  for (int i=0; i < formulaParts.size(); i++) {
    FormulaPart formulaPart=(FormulaPart)formulaParts.get(i);
    formulaPart.removeCellRefs(cellRefsToRemove);
  }
  updateCellRefs();
}",0.2240896358543417
81509,"public String getActualFormula(){
  Object formulaPart;
  String actualFormula=""String_Node_Str"";
  for (Iterator iterator=formulaParts.iterator(); iterator.hasNext(); ) {
    formulaPart=iterator.next();
    actualFormula+=formulaPart.toString();
  }
  return actualFormula;
}","public String getActualFormula(){
  FormulaPart formulaPart;
  String actualFormula=""String_Node_Str"";
  for (Iterator iterator=formulaParts.iterator(); iterator.hasNext(); ) {
    formulaPart=(FormulaPart)iterator.next();
    actualFormula+=formulaPart.getActualFormula();
  }
  return actualFormula;
}",0.9103448275862068
81510,"public void updateReplacedRefCellsCollection(){
  CellRef cellRef;
  for (int i=0, size=cellRefsToRemove.size(); i < size; i++) {
    cellRef=(CellRef)cellRefsToRemove.get(i);
    cellRefs.remove(cellRef);
  }
  cellRefsToRemove.clear();
  Object cellRef2;
  for (int i=0, size=cellRefsToAdd.size(); i < size; i++) {
    cellRef2=cellRefsToAdd.get(i);
    cellRefs.add(cellRef2);
  }
  cellRefsToAdd.clear();
}","public void updateReplacedRefCellsCollection(){
  for (Iterator iterator=formulaParts.iterator(); iterator.hasNext(); ) {
    FormulaPart formulaPart=(FormulaPart)iterator.next();
    formulaPart.updateReplacedRefCellsCollection();
  }
}",0.1823802163833075
81511,"public void parseFormula(){
  formulaParts.clear();
  cellRefs.clear();
  Matcher refCellMatcher=regexCellRefPattern.matcher(formula);
  int end=0;
  CellRef cellRef=null;
  while (refCellMatcher.find()) {
    String formulaPart=formula.substring(end,refCellMatcher.start());
    formulaPart=adjustFormulaPartForCellIndex(cellRef,formulaPart);
    formulaParts.add(formulaPart);
    cellRef=new CellRef(refCellMatcher.group(),this);
    formulaParts.add(cellRef);
    cellRefs.add(cellRef);
    end=refCellMatcher.end();
  }
  formulaParts.add(adjustFormulaPartForCellIndex(cellRef,formula.substring(end)));
}","public void parseFormula(){
  formulaParts.clear();
  Matcher formulaPartMatcher=regexFormulaPartPattern.matcher(formula);
  int end=0;
  while (formulaPartMatcher.find()) {
    String formulaPartString=formula.substring(end,formulaPartMatcher.start());
    if (formulaPartString.length() > 0) {
      formulaParts.add(new FormulaPart(formulaPartString,this));
    }
    formulaParts.add(new FormulaPart(formulaPartMatcher.group(),this));
    end=formulaPartMatcher.end();
  }
  String endPart=formula.substring(end);
  if (endPart.length() > 0) {
    formulaParts.add(new FormulaPart(endPart,this));
  }
  updateCellRefs();
}",0.2008097165991902
81512,"public void updateWorkbookFormulas(BlockTransformation transformation){
  Set sheetNames=sheetFormulasMap.keySet();
  Formula formula, newFormula;
  Set cellRefs, newCellRefs;
  CellRef cellRef, newCellRef;
  List resultCells;
  String newCell;
  Point point, newPoint;
  Set cellRefsToRemove=new HashSet();
  Set formulasToRemove=new HashSet();
  for (Iterator iterator=sheetNames.iterator(); iterator.hasNext(); ) {
    String sheetName=(String)iterator.next();
    List formulas=(List)sheetFormulasMap.get(sheetName);
    formulasToRemove.clear();
    for (int i=0, size=formulas.size(); i < size; i++) {
      formula=(Formula)formulas.get(i);
      List formulaPoints=null;
      Point formulaPoint=null;
      boolean transformFormula=false;
      if (formula.getSheet().getSheetName().equals(transformation.getBlock().getSheet().getSheetName())) {
        transformFormula=true;
        formulaPoint=new Point(formula.getRowNum().intValue(),formula.getCellNum().shortValue());
        formulaPoints=transformation.transformCell(formulaPoint);
      }
      if (!transformFormula || (formulaPoints != null && !formulaPoints.isEmpty())) {
        cellRefs=formula.getCellRefs();
        cellRefsToRemove.clear();
        for (Iterator iter=cellRefs.iterator(); iter.hasNext(); ) {
          cellRef=(CellRef)iter.next();
          if (!(transformation instanceof DuplicateTransformation && transformation.getBlock().contains(cellRef) && transformation.getBlock().contains(formula))) {
            resultCells=transformation.transformCell(sheetName,cellRef);
            if (resultCells != null) {
              if (resultCells.size() == 1) {
                newCell=(String)resultCells.get(0);
                cellRef.update(newCell);
              }
 else               if (resultCells.size() > 1) {
                cellRef.update(resultCells);
              }
            }
 else {
              cellRefsToRemove.add(cellRef);
            }
          }
        }
        if (!cellRefsToRemove.isEmpty()) {
          formula.removeCellRefs(cellRefsToRemove);
        }
        formula.updateReplacedRefCellsCollection();
        if (formulaPoints != null && !formulaPoints.isEmpty()) {
          if (formulaPoints.size() == 1) {
            newPoint=(Point)formulaPoints.get(0);
            formula.setRowNum(new Integer(newPoint.getRow()));
            formula.setCellNum(new Integer(newPoint.getCol()));
          }
 else {
            List sheetFormulas=(List)sheetFormulasMap.get(formula.getSheet().getSheetName());
            for (int j=1, num=formulaPoints.size(); j < num; j++) {
              point=(Point)formulaPoints.get(j);
              newFormula=new Formula(formula);
              newFormula.setRowNum(new Integer(point.getRow()));
              newFormula.setCellNum(new Integer(point.getCol()));
              newCellRefs=newFormula.getCellRefs();
              for (Iterator iterator1=newCellRefs.iterator(); iterator1.hasNext(); ) {
                newCellRef=(CellRef)iterator1.next();
                if (transformation.getBlock().contains(newCellRef) && transformation.getBlock().contains(formulaPoint)) {
                  newCellRef.update(transformation.getDuplicatedCellRef(sheetName,newCellRef.toString(),j));
                }
              }
              sheetFormulas.add(newFormula);
            }
          }
        }
      }
 else {
        if (formulaPoints == null) {
          formulasToRemove.add(formula);
        }
      }
    }
    formulas.removeAll(formulasToRemove);
  }
}","public void updateWorkbookFormulas(BlockTransformation transformation){
  Set sheetNames=sheetFormulasMap.keySet();
  Formula formula, newFormula;
  Set cellRefs, newCellRefs;
  CellRef cellRef, newCellRef;
  List resultCells;
  String newCell;
  Point point, newPoint;
  Set cellRefsToRemove=new HashSet();
  Set formulasToRemove=new HashSet();
  for (Iterator iterator=sheetNames.iterator(); iterator.hasNext(); ) {
    String sheetName=(String)iterator.next();
    List formulas=(List)sheetFormulasMap.get(sheetName);
    formulasToRemove.clear();
    for (int i=0, size=formulas.size(); i < size; i++) {
      formula=(Formula)formulas.get(i);
      List formulaPoints=null;
      Point formulaPoint=null;
      boolean transformFormula=false;
      if (formula.getSheet().getSheetName().equals(transformation.getBlock().getSheet().getSheetName())) {
        transformFormula=true;
        formulaPoint=new Point(formula.getRowNum().intValue(),formula.getCellNum().shortValue());
        formulaPoints=transformation.transformCell(formulaPoint);
      }
      if (!transformFormula || (formulaPoints != null && !formulaPoints.isEmpty())) {
        cellRefs=formula.getCellRefs();
        cellRefsToRemove.clear();
        for (Iterator iter=cellRefs.iterator(); iter.hasNext(); ) {
          cellRef=(CellRef)iter.next();
          if (!(transformation instanceof DuplicateTransformation && transformation.getBlock().contains(cellRef) && transformation.getBlock().contains(formula))) {
            resultCells=transformation.transformCell(sheetName,cellRef);
            if (resultCells != null) {
              if (resultCells.size() == 1) {
                newCell=(String)resultCells.get(0);
                cellRef.update(newCell);
              }
 else               if (resultCells.size() > 1) {
                cellRef.update(resultCells);
              }
            }
 else {
              cellRefsToRemove.add(cellRef);
            }
          }
        }
        if (!cellRefsToRemove.isEmpty()) {
          formula.removeCellRefs(cellRefsToRemove);
        }
        formula.updateReplacedRefCellsCollection();
        formula.updateCellRefs();
        if (formulaPoints != null && !formulaPoints.isEmpty()) {
          if (formulaPoints.size() == 1) {
            newPoint=(Point)formulaPoints.get(0);
            formula.setRowNum(new Integer(newPoint.getRow()));
            formula.setCellNum(new Integer(newPoint.getCol()));
          }
 else {
            List sheetFormulas=(List)sheetFormulasMap.get(formula.getSheet().getSheetName());
            for (int j=1, num=formulaPoints.size(); j < num; j++) {
              point=(Point)formulaPoints.get(j);
              newFormula=new Formula(formula);
              newFormula.setRowNum(new Integer(point.getRow()));
              newFormula.setCellNum(new Integer(point.getCol()));
              newCellRefs=newFormula.getCellRefs();
              for (Iterator iterator1=newCellRefs.iterator(); iterator1.hasNext(); ) {
                newCellRef=(CellRef)iterator1.next();
                if (transformation.getBlock().contains(newCellRef) && transformation.getBlock().contains(formulaPoint)) {
                  newCellRef.update(transformation.getDuplicatedCellRef(sheetName,newCellRef.toString(),j));
                }
              }
              sheetFormulas.add(newFormula);
            }
          }
        }
      }
 else {
        if (formulaPoints == null) {
          formulasToRemove.add(formula);
        }
      }
    }
    formulas.removeAll(formulasToRemove);
  }
}",0.9952004517221908
81513,"static void clearRowCells(HSSFRow row,short startCell,short endCell){
  if (row != null) {
    for (short i=startCell; i <= endCell; i++) {
      HSSFCell cell=row.getCell(i);
      clearCell(cell);
    }
  }
}","static void clearRowCells(HSSFRow row,short startCell,short endCell){
  if (row != null) {
    for (short i=startCell; i <= endCell; i++) {
      HSSFCell cell=row.getCell(i);
      row.removeCell(cell);
      row.createCell(i);
    }
  }
}",0.8711111111111111
81514,"private Object getCellValue(HSSFCell cell,Object obj){
  Object value=null;
  if (obj instanceof String) {
    value=cell.getStringCellValue() != null ? cell.getStringCellValue().trim() : null;
  }
 else   if (obj instanceof Double) {
    value=new Double(cell.getNumericCellValue());
  }
 else   if (obj instanceof BigDecimal) {
    value=new BigDecimal(cell.getNumericCellValue());
  }
 else   if (obj instanceof Integer) {
    value=new Integer((int)cell.getNumericCellValue());
  }
 else   if (obj instanceof Float) {
    value=new Float(cell.getNumericCellValue());
  }
 else   if (obj instanceof Date) {
    value=cell.getDateCellValue();
  }
 else   if (obj instanceof Calendar) {
    Calendar c=Calendar.getInstance();
    c.setTime(cell.getDateCellValue());
    value=c;
  }
 else   if (obj instanceof Boolean) {
    if (cell.getCellType() == HSSFCell.CELL_TYPE_BOOLEAN) {
      value=(cell.getBooleanCellValue()) ? Boolean.TRUE : Boolean.FALSE;
    }
 else     if (cell.getCellType() == HSSFCell.CELL_TYPE_STRING) {
      value=Boolean.valueOf(cell.getStringCellValue());
    }
 else {
      value=Boolean.FALSE;
    }
  }
  return value;
}","private Object getCellValue(HSSFCell cell,Object obj){
  Object value=null;
  if (obj instanceof String) {
    value=readStringValue(cell);
  }
 else   if (obj instanceof Double) {
    value=new Double(cell.getNumericCellValue());
  }
 else   if (obj instanceof BigDecimal) {
    value=new BigDecimal(cell.getNumericCellValue());
  }
 else   if (obj instanceof Integer) {
    value=new Integer((int)cell.getNumericCellValue());
  }
 else   if (obj instanceof Float) {
    value=new Float(cell.getNumericCellValue());
  }
 else   if (obj instanceof Date) {
    value=cell.getDateCellValue();
  }
 else   if (obj instanceof Calendar) {
    Calendar c=Calendar.getInstance();
    c.setTime(cell.getDateCellValue());
    value=c;
  }
 else   if (obj instanceof Boolean) {
    if (cell.getCellType() == HSSFCell.CELL_TYPE_BOOLEAN) {
      value=(cell.getBooleanCellValue()) ? Boolean.TRUE : Boolean.FALSE;
    }
 else     if (cell.getCellType() == HSSFCell.CELL_TYPE_STRING) {
      value=Boolean.valueOf(cell.getStringCellValue());
    }
 else {
      value=Boolean.FALSE;
    }
  }
  return value;
}",0.96260017809439
81515,"private Object getCellValue(HSSFCell cell,Class type){
  if (cell == null) {
    return null;
  }
  Object value=null;
  if (isDate(type)) {
    value=cell.getDateCellValue();
  }
 else {
switch (cell.getCellType()) {
case HSSFCell.CELL_TYPE_STRING:
      value=cell.getStringCellValue();
    break;
case HSSFCell.CELL_TYPE_NUMERIC:
  value=new Double(cell.getNumericCellValue());
break;
case HSSFCell.CELL_TYPE_BOOLEAN:
value=(cell.getBooleanCellValue()) ? Boolean.TRUE : Boolean.FALSE;
break;
case HSSFCell.CELL_TYPE_BLANK:
break;
case HSSFCell.CELL_TYPE_ERROR:
break;
case HSSFCell.CELL_TYPE_FORMULA:
break;
default :
break;
}
}
return value;
}","private Object getCellValue(HSSFCell cell,Class type){
  if (cell == null) {
    return null;
  }
  Object value=null;
  if (isDate(type)) {
    value=cell.getDateCellValue();
  }
 else {
switch (cell.getCellType()) {
case HSSFCell.CELL_TYPE_STRING:
      value=cell.getStringCellValue();
    break;
case HSSFCell.CELL_TYPE_NUMERIC:
  value=new Double(cell.getNumericCellValue());
if (!type.isInstance(value)) {
  double doubleValue=((Double)value).doubleValue();
  if (Math.floor(doubleValue) == doubleValue) {
    value=Long.toString(((Double)value).longValue());
  }
 else {
    value=value.toString();
  }
}
break;
case HSSFCell.CELL_TYPE_BOOLEAN:
value=(cell.getBooleanCellValue()) ? Boolean.TRUE : Boolean.FALSE;
break;
case HSSFCell.CELL_TYPE_BLANK:
break;
case HSSFCell.CELL_TYPE_ERROR:
break;
case HSSFCell.CELL_TYPE_FORMULA:
break;
default :
break;
}
}
return value;
}",0.8485245901639344
81516,"/** 
 * This method transforms given XLS input stream template into multiple sheets workbook creating separate Excel worksheet for every object in the list
 * @param is        - {@link InputStream} for source XLS template file
 * @param objects   - List of beans where each list item should be exported into a separated worksheet
 * @param newSheetNames - Sheet names to be used for newly created worksheets
 * @param beanName - Bean name to be used for a list item when processing sheet
 * @param beanParams - Common bean map containing all other objects to be used in the workbook
 * @param startSheetNum - Worksheet number (zero based) of the worksheet that needs to be used to create multiple worksheets
 * @return new {@link HSSFWorkbook} object containing the result of transformation
 * @throws net.sf.jxls.exception.ParsePropertyException - {@link ParsePropertyException} is thrown when some property can't be parsed
 */
public HSSFWorkbook transformMultipleSheetsList(InputStream is,List objects,List newSheetNames,String beanName,Map beanParams,int startSheetNum) throws ParsePropertyException {
  HSSFWorkbook hssfWorkbook=null;
  try {
    if (beanParams != null && beanParams.containsKey(beanName)) {
      throw new IllegalArgumentException(""String_Node_Str"" + beanName + ""String_Node_Str"");
    }
    if (beanName == null) {
      throw new IllegalArgumentException((""String_Node_Str""));
    }
    if (beanParams == null) {
      beanParams=new HashMap();
    }
    POIFSFileSystem fs=new POIFSFileSystem(is);
    hssfWorkbook=new HSSFWorkbook(fs);
    preprocess(hssfWorkbook);
    Workbook workbook=createWorkbook(hssfWorkbook);
    exposePOIObjects(workbook,beanParams);
    workbookTransformationController=new WorkbookTransformationControllerImpl(workbook);
    SheetTransformer sheetTransformer=new SheetTransformer(fixedSizeCollections,groupedCollections,rowProcessors,cellProcessors,configuration);
    final String templateSheetName=""String_Node_Str"";
    for (int sheetNo=0; sheetNo < hssfWorkbook.getNumberOfSheets(); sheetNo++) {
      final String spreadsheetName=hssfWorkbook.getSheetName(sheetNo);
      if (!isSpreadsheetToHide(spreadsheetName)) {
        if (isSpreadsheetToRename(spreadsheetName)) {
          hssfWorkbook.setSheetName(sheetNo,getSpreadsheetToReName(spreadsheetName));
        }
        HSSFSheet hssfSheet=hssfWorkbook.getSheetAt(sheetNo);
        if (startSheetNum == sheetNo && objects != null && !objects.isEmpty()) {
          Object firstBean=objects.get(0);
          beanParams.put(beanName,firstBean);
          hssfWorkbook.setSheetName(sheetNo,(String)newSheetNames.get(0),HSSFWorkbook.ENCODING_UTF_16);
          HSSFSheet templateSheet=hssfWorkbook.createSheet(templateSheetName);
          Util.copySheets(templateSheet,hssfSheet);
          Sheet sheet=workbook.getSheetAt(sheetNo);
          sheetTransformer.transformSheet(workbookTransformationController,sheet,beanParams);
          for (int i=1; i < objects.size(); i++) {
            Object bean=objects.get(i);
            beanParams.put(beanName,bean);
            HSSFSheet newSheet=hssfWorkbook.createSheet((String)newSheetNames.get(i));
            Util.copySheets(newSheet,templateSheet);
            Util.copyPageSetup(newSheet,hssfSheet);
            Util.copyPrintSetup(newSheet,hssfSheet);
            sheet=new Sheet(hssfWorkbook,newSheet,configuration);
            workbook.addSheet(sheet);
            workbook.initSheetNames();
            sheetTransformer.transformSheet(workbookTransformationController,sheet,beanParams);
          }
          hssfWorkbook.removeSheetAt(hssfWorkbook.getSheetIndex(templateSheetName));
          beanParams.remove(beanName);
        }
 else {
          Sheet sheet=workbook.getSheetAt(sheetNo);
          sheetTransformer.transformSheet(workbookTransformationController,sheet,beanParams);
        }
      }
 else {
        workbook.removeSheetAt(sheetNo);
        sheetNo--;
      }
    }
    updateFormulas();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (hssfWorkbook != null) {
    for (int i=0; i < hssfWorkbook.getNumberOfSheets(); i++) {
      Util.setPrintArea(hssfWorkbook,i);
    }
  }
  return hssfWorkbook;
}","/** 
 * This method transforms given XLS input stream template into multiple sheets workbook creating separate Excel worksheet for every object in the list
 * @param is        - {@link InputStream} for source XLS template file
 * @param objects   - List of beans where each list item should be exported into a separated worksheet
 * @param newSheetNames - Sheet names to be used for newly created worksheets
 * @param beanName - Bean name to be used for a list item when processing sheet
 * @param beanParams - Common bean map containing all other objects to be used in the workbook
 * @param startSheetNum - Worksheet number (zero based) of the worksheet that needs to be used to create multiple worksheets
 * @return new {@link HSSFWorkbook} object containing the result of transformation
 * @throws net.sf.jxls.exception.ParsePropertyException - {@link ParsePropertyException} is thrown when some property can't be parsed
 */
public HSSFWorkbook transformMultipleSheetsList(InputStream is,List objects,List newSheetNames,String beanName,Map beanParams,int startSheetNum) throws ParsePropertyException {
  HSSFWorkbook hssfWorkbook=null;
  try {
    if (beanParams != null && beanParams.containsKey(beanName)) {
      throw new IllegalArgumentException(""String_Node_Str"" + beanName + ""String_Node_Str"");
    }
    if (beanName == null) {
      throw new IllegalArgumentException((""String_Node_Str""));
    }
    if (beanParams == null) {
      beanParams=new HashMap();
    }
    POIFSFileSystem fs=new POIFSFileSystem(is);
    hssfWorkbook=new HSSFWorkbook(fs);
    SheetTransformer sheetTransformer=new SheetTransformer(fixedSizeCollections,groupedCollections,rowProcessors,cellProcessors,configuration);
    int sheetNumber=1;
    for (int sheetNo=0; sheetNo < hssfWorkbook.getNumberOfSheets(); sheetNo++) {
      final String spreadsheetName=hssfWorkbook.getSheetName(sheetNo);
      if (!isSpreadsheetToHide(spreadsheetName)) {
        if (isSpreadsheetToRename(spreadsheetName)) {
          hssfWorkbook.setSheetName(sheetNo,getSpreadsheetToReName(spreadsheetName));
        }
        HSSFSheet hssfSheet=hssfWorkbook.getSheetAt(sheetNo);
        if (startSheetNum == sheetNo && objects != null && !objects.isEmpty()) {
          for (int i=0; i < objects.size(); i++) {
            Object bean=objects.get(i);
            String beanKey=beanName;
            HSSFSheet newSheet;
            if (i != 0) {
              beanKey=beanName + i;
              newSheet=hssfWorkbook.createSheet((String)newSheetNames.get(i));
              Util.copySheets(newSheet,hssfSheet,beanName,beanKey);
              Util.copyPageSetup(newSheet,hssfSheet);
              Util.copyPrintSetup(newSheet,hssfSheet);
            }
 else {
              hssfWorkbook.setSheetName(sheetNo,(String)newSheetNames.get(i));
            }
            beanParams.put(beanKey,bean);
          }
        }
 else {
        }
      }
 else {
        hssfWorkbook.removeSheetAt(sheetNo);
        sheetNo--;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (hssfWorkbook != null) {
    for (int i=0; i < hssfWorkbook.getNumberOfSheets(); i++) {
      Util.setPrintArea(hssfWorkbook,i);
    }
  }
  transformWorkbook(hssfWorkbook,beanParams);
  return hssfWorkbook;
}",0.7024064171122995
81517,"public static void copyRow(HSSFSheet srcSheet,HSSFSheet destSheet,HSSFRow srcRow,HSSFRow destRow){
  Set mergedRegions=new TreeSet();
  destRow.setHeight(srcRow.getHeight());
  for (short j=srcRow.getFirstCellNum(); j <= srcRow.getLastCellNum(); j++) {
    HSSFCell oldCell=srcRow.getCell(j);
    HSSFCell newCell=destRow.getCell(j);
    if (oldCell != null) {
      if (newCell == null) {
        newCell=destRow.createCell(j);
      }
      copyCell(oldCell,newCell,true);
      Region mergedRegion=getMergedRegion(srcSheet,srcRow.getRowNum(),oldCell.getCellNum());
      if (mergedRegion != null) {
        Region newMergedRegion=new Region(mergedRegion.getRowFrom(),mergedRegion.getColumnFrom(),mergedRegion.getRowTo(),mergedRegion.getColumnTo());
        if (isNewMergedRegion(newMergedRegion,mergedRegions)) {
          mergedRegions.add(newMergedRegion);
          destSheet.addMergedRegion(newMergedRegion);
        }
      }
    }
  }
}","public static void copyRow(HSSFSheet srcSheet,HSSFSheet destSheet,HSSFRow srcRow,HSSFRow destRow,String expressionToReplace,String expressionReplacement){
  Set mergedRegions=new TreeSet();
  destRow.setHeight(srcRow.getHeight());
  for (short j=srcRow.getFirstCellNum(); j <= srcRow.getLastCellNum(); j++) {
    HSSFCell oldCell=srcRow.getCell(j);
    HSSFCell newCell=destRow.getCell(j);
    if (oldCell != null) {
      if (newCell == null) {
        newCell=destRow.createCell(j);
      }
      copyCell(oldCell,newCell,true,expressionToReplace,expressionReplacement);
      Region mergedRegion=getMergedRegion(srcSheet,srcRow.getRowNum(),oldCell.getCellNum());
      if (mergedRegion != null) {
        Region newMergedRegion=new Region(mergedRegion.getRowFrom(),mergedRegion.getColumnFrom(),mergedRegion.getRowTo(),mergedRegion.getColumnTo());
        if (isNewMergedRegion(newMergedRegion,mergedRegions)) {
          mergedRegions.add(newMergedRegion);
          destSheet.addMergedRegion(newMergedRegion);
        }
      }
    }
  }
}",0.9507042253521126
81518,"public static void copyCell(HSSFCell oldCell,HSSFCell newCell,boolean copyStyle){
  if (copyStyle) {
    newCell.setCellStyle(oldCell.getCellStyle());
  }
  newCell.setEncoding(oldCell.getEncoding());
switch (oldCell.getCellType()) {
case HSSFCell.CELL_TYPE_STRING:
    newCell.setCellValue(oldCell.getStringCellValue());
  break;
case HSSFCell.CELL_TYPE_NUMERIC:
newCell.setCellValue(oldCell.getNumericCellValue());
break;
case HSSFCell.CELL_TYPE_BLANK:
newCell.setCellType(HSSFCell.CELL_TYPE_BLANK);
break;
case HSSFCell.CELL_TYPE_BOOLEAN:
newCell.setCellValue(oldCell.getBooleanCellValue());
break;
case HSSFCell.CELL_TYPE_ERROR:
newCell.setCellErrorValue(oldCell.getErrorCellValue());
break;
case HSSFCell.CELL_TYPE_FORMULA:
newCell.setCellFormula(oldCell.getCellFormula());
break;
default :
break;
}
}","public static void copyCell(HSSFCell oldCell,HSSFCell newCell,boolean copyStyle,String expressionToReplace,String expressionReplacement){
  if (copyStyle) {
    newCell.setCellStyle(oldCell.getCellStyle());
  }
  newCell.setEncoding(oldCell.getEncoding());
switch (oldCell.getCellType()) {
case HSSFCell.CELL_TYPE_STRING:
    String oldValue=oldCell.getStringCellValue();
  newCell.setCellValue(oldValue != null ? oldValue.replaceAll(expressionToReplace,expressionReplacement) : null);
break;
case HSSFCell.CELL_TYPE_NUMERIC:
newCell.setCellValue(oldCell.getNumericCellValue());
break;
case HSSFCell.CELL_TYPE_BLANK:
newCell.setCellType(HSSFCell.CELL_TYPE_BLANK);
break;
case HSSFCell.CELL_TYPE_BOOLEAN:
newCell.setCellValue(oldCell.getBooleanCellValue());
break;
case HSSFCell.CELL_TYPE_ERROR:
newCell.setCellErrorValue(oldCell.getErrorCellValue());
break;
case HSSFCell.CELL_TYPE_FORMULA:
newCell.setCellFormula(oldCell.getCellFormula());
break;
default :
break;
}
}",0.874859075535513
81519,"public static void copySheets(HSSFSheet newSheet,HSSFSheet sheet){
  int maxColumnNum=0;
  for (int i=sheet.getFirstRowNum(); i <= sheet.getLastRowNum(); i++) {
    HSSFRow srcRow=sheet.getRow(i);
    HSSFRow destRow=newSheet.createRow(i);
    if (srcRow != null) {
      Util.copyRow(sheet,newSheet,srcRow,destRow);
      if (srcRow.getLastCellNum() > maxColumnNum) {
        maxColumnNum=srcRow.getLastCellNum();
      }
    }
  }
  for (short i=0; i <= maxColumnNum; i++) {
    newSheet.setColumnWidth(i,sheet.getColumnWidth(i));
  }
}","public static void copySheets(HSSFSheet newSheet,HSSFSheet sheet,String expressionToReplace,String expressionReplacement){
  int maxColumnNum=0;
  for (int i=sheet.getFirstRowNum(); i <= sheet.getLastRowNum(); i++) {
    HSSFRow srcRow=sheet.getRow(i);
    HSSFRow destRow=newSheet.createRow(i);
    if (srcRow != null) {
      Util.copyRow(sheet,newSheet,srcRow,destRow,expressionToReplace,expressionReplacement);
      if (srcRow.getLastCellNum() > maxColumnNum) {
        maxColumnNum=srcRow.getLastCellNum();
      }
    }
  }
  for (short i=0; i <= maxColumnNum; i++) {
    newSheet.setColumnWidth(i,sheet.getColumnWidth(i));
  }
}",0.9165247018739352
81520,"public void testMultipleSheetList() throws IOException, ParsePropertyException {
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(multipleSheetListXLS));
  XLSTransformer transformer=new XLSTransformer();
  List sheetNames=new ArrayList();
  sheetNames.add(""String_Node_Str"");
  for (int i=0; i < departments.size(); i++) {
    Department department=(Department)departments.get(i);
    sheetNames.add(department.getName());
  }
  HSSFWorkbook resultWorkbook=transformer.transformMultipleSheetsList(is,departments,sheetNames,""String_Node_Str"",new HashMap(),0);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(multipleSheetListXLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  assertEquals(""String_Node_Str"",sourceWorkbook.getNumberOfSheets() + departments.size() - 1,resultWorkbook.getNumberOfSheets());
  is.close();
  saveWorkbook(resultWorkbook,multipleSheetListDestXLS);
}","public void testMultipleSheetList() throws IOException, ParsePropertyException {
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(multipleSheetListXLS));
  XLSTransformer transformer=new XLSTransformer();
  List sheetNames=new ArrayList();
  for (int i=0; i < departments.size(); i++) {
    Department department=(Department)departments.get(i);
    sheetNames.add(department.getName());
  }
  HSSFWorkbook resultWorkbook=transformer.transformMultipleSheetsList(is,departments,sheetNames,""String_Node_Str"",new HashMap(),0);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(multipleSheetListXLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  assertEquals(""String_Node_Str"",sourceWorkbook.getNumberOfSheets() + departments.size() - 1,resultWorkbook.getNumberOfSheets());
  is.close();
  saveWorkbook(resultWorkbook,multipleSheetListDestXLS);
}",0.9807792207792208
81521,"public void testPoiObjectsExpose() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",departments);
  beans.put(""String_Node_Str"",itDepartment);
  List employees=itDepartment.getStaff();
  ((Employee)employees.get(0)).setComment(""String_Node_Str"");
  for (int i=1; i < employees.size(); i++) {
    Employee employee=(Employee)employees.get(i);
    String comment=""String_Node_Str"";
    for (int j=0; j <= i; j++) {
      comment+=""String_Node_Str"" + j + ""String_Node_Str"";
    }
    employee.setComment(comment);
  }
  beans.put(""String_Node_Str"",employees);
  beans.put(""String_Node_Str"",new Integer(0));
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(poiobjectsXLS));
  XLSTransformer transformer=new XLSTransformer();
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(poiobjectsXLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  HSSFSheet sourceSheet=sourceWorkbook.getSheetAt(0);
  HSSFSheet resultSheet=resultWorkbook.getSheetAt(0);
  assertEquals(""String_Node_Str"",sourceSheet.getFirstRowNum(),resultSheet.getFirstRowNum());
  assertEquals(resultSheet.getHeader().getLeft(),""String_Node_Str"");
  assertEquals(resultSheet.getHeader().getCenter(),itDepartment.getName());
  assertEquals(resultSheet.getHeader().getRight(),""String_Node_Str"");
  assertEquals(resultSheet.getFooter().getRight(),""String_Node_Str"");
  assertEquals(resultSheet.getFooter().getCenter(),""String_Node_Str"");
  assertEquals(resultWorkbook.getSheetName(2),itDepartment.getName());
  Map props=new HashMap();
  props.put(""String_Node_Str"",""String_Node_Str"");
  CellsChecker checker=new CellsChecker(props);
  checker.checkRows(sourceSheet,resultSheet,1,0,3);
  checker.checkListCells(sourceSheet,5,resultSheet,3,(short)0,itEmployeeNames);
  checker.checkListCells(sourceSheet,5,resultSheet,3,(short)1,itPayments);
  checker.checkListCells(sourceSheet,5,resultSheet,3,(short)2,itBonuses);
  props.clear();
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker=new CellsChecker(props);
  checker.checkRows(sourceSheet,resultSheet,1,9,3);
  props.clear();
  checker.checkListCells(sourceSheet,5,resultSheet,12,(short)0,hrEmployeeNames);
  checker.checkListCells(sourceSheet,5,resultSheet,12,(short)1,hrPayments);
  checker.checkListCells(sourceSheet,5,resultSheet,12,(short)2,hrBonuses);
  props.clear();
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker=new CellsChecker(props);
  checker.checkRows(sourceSheet,resultSheet,1,17,3);
  props.clear();
  checker.checkListCells(sourceSheet,5,resultSheet,20,(short)0,baEmployeeNames);
  checker.checkListCells(sourceSheet,5,resultSheet,20,(short)1,baPayments);
  checker.checkListCells(sourceSheet,5,resultSheet,20,(short)2,baBonuses);
  is.close();
  saveWorkbook(resultWorkbook,poiobjectsDestXLS);
}","public void testPoiObjectsExpose() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",departments);
  beans.put(""String_Node_Str"",itDepartment);
  List employees=itDepartment.getStaff();
  ((Employee)employees.get(0)).setComment(""String_Node_Str"");
  for (int i=1; i < employees.size(); i++) {
    Employee employee=(Employee)employees.get(i);
    String comment=""String_Node_Str"";
    for (int j=0; j <= i; j++) {
      comment+=""String_Node_Str"" + j + ""String_Node_Str"";
    }
    employee.setComment(comment);
  }
  beans.put(""String_Node_Str"",employees);
  beans.put(""String_Node_Str"",new Integer(0));
  beans.put(""String_Node_Str"",new Integer(3));
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(poiobjectsXLS));
  XLSTransformer transformer=new XLSTransformer();
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(poiobjectsXLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  HSSFSheet sourceSheet=sourceWorkbook.getSheetAt(0);
  HSSFSheet resultSheet=resultWorkbook.getSheetAt(0);
  assertEquals(""String_Node_Str"",sourceSheet.getFirstRowNum(),resultSheet.getFirstRowNum());
  assertEquals(resultSheet.getHeader().getLeft(),""String_Node_Str"");
  assertEquals(resultSheet.getHeader().getCenter(),itDepartment.getName());
  assertEquals(resultSheet.getHeader().getRight(),""String_Node_Str"");
  assertEquals(resultSheet.getFooter().getRight(),""String_Node_Str"");
  assertEquals(resultSheet.getFooter().getCenter(),""String_Node_Str"");
  assertEquals(resultWorkbook.getSheetName(2),itDepartment.getName());
  Map props=new HashMap();
  props.put(""String_Node_Str"",""String_Node_Str"");
  CellsChecker checker=new CellsChecker(props);
  checker.checkRows(sourceSheet,resultSheet,1,0,3);
  checker.checkListCells(sourceSheet,5,resultSheet,3,(short)0,itEmployeeNames);
  checker.checkListCells(sourceSheet,5,resultSheet,3,(short)1,itPayments);
  checker.checkListCells(sourceSheet,5,resultSheet,3,(short)2,itBonuses);
  props.clear();
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker=new CellsChecker(props);
  checker.checkRows(sourceSheet,resultSheet,1,9,3);
  props.clear();
  checker.checkListCells(sourceSheet,5,resultSheet,12,(short)0,hrEmployeeNames);
  checker.checkListCells(sourceSheet,5,resultSheet,12,(short)1,hrPayments);
  checker.checkListCells(sourceSheet,5,resultSheet,12,(short)2,hrBonuses);
  props.clear();
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker=new CellsChecker(props);
  checker.checkRows(sourceSheet,resultSheet,1,17,3);
  props.clear();
  checker.checkListCells(sourceSheet,5,resultSheet,20,(short)0,baEmployeeNames);
  checker.checkListCells(sourceSheet,5,resultSheet,20,(short)1,baPayments);
  checker.checkListCells(sourceSheet,5,resultSheet,20,(short)2,baBonuses);
  is.close();
  saveWorkbook(resultWorkbook,poiobjectsDestXLS);
}",0.9921180613785008
81522,"public void testJEXLExpressions() throws IOException {
  Map beans=new HashMap();
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  beans.put(""String_Node_Str"",dateFormat);
  MyBean obj=new MyBean();
  Bean bean=new Bean();
  beans.put(""String_Node_Str"",bean);
  beans.put(""String_Node_Str"",obj);
  beans.put(""String_Node_Str"",itDepartment);
  beans.put(""String_Node_Str"",mgrDepartment);
  mgrDepartment.getStaff().clear();
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(jexlXLS));
  XLSTransformer transformer=new XLSTransformer();
  transformer.setJexlInnerCollectionsAccess(true);
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(jexlXLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  HSSFSheet sourceSheet=sourceWorkbook.getSheetAt(0);
  HSSFSheet resultSheet=resultWorkbook.getSheetAt(0);
  Map props=new HashMap();
  props.put(""String_Node_Str"",obj.getName());
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getFlag()));
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getName() == null));
  props.put(""String_Node_Str"",new Integer(obj.getName().length()));
  props.put(""String_Node_Str"",Boolean.valueOf(!obj.getCollection().isEmpty() && obj.getId() > 0));
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getCollection().isEmpty() && obj.getId() == 1));
  props.put(""String_Node_Str"",Boolean.valueOf(!obj.getCollection().isEmpty()));
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getId() > 1));
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getId() == 1));
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getId() != 1));
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getId() == 1));
  props.put(""String_Node_Str"",new Integer(obj.getId() % 2));
  props.put(""String_Node_Str"",obj.getMyArray()[0] + ""String_Node_Str"" + obj.getMyArray()[1]);
  props.put(""String_Node_Str"",dateFormat.format(obj.getDate()));
  props.put(""String_Node_Str"",obj.printIt());
  props.put(""String_Node_Str"",obj.getName());
  props.put(""String_Node_Str"",obj.echo(""String_Node_Str""));
  CellsChecker checker=new CellsChecker(props);
  checker.checkSection(sourceSheet,resultSheet,0,0,(short)0,(short)1,25,false,false);
  props.clear();
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkListCells(sourceSheet,25,resultSheet,25,(short)1,new String[]{((Bean.InnerBean)bean.getCollection().get(0)).getInnerCollection().get(0).toString(),((Bean.InnerBean)bean.getCollection().get(1)).getInnerCollection().get(0).toString(),((Bean.InnerBean)bean.getCollection().get(2)).getInnerCollection().get(0).toString()});
  saveWorkbook(resultWorkbook,jexlDestXLS);
}","public void testJEXLExpressions() throws IOException {
  Map beans=new HashMap();
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  beans.put(""String_Node_Str"",dateFormat);
  MyBean obj=new MyBean();
  Bean bean=new Bean();
  beans.put(""String_Node_Str"",bean);
  beans.put(""String_Node_Str"",obj);
  beans.put(""String_Node_Str"",((Department)departments.get(0)).getStaff());
  beans.put(""String_Node_Str"",new ArrayList());
  beans.put(""String_Node_Str"",((Department)departments.get(1)).getStaff());
  beans.put(""String_Node_Str"",new ArrayList());
  beans.put(""String_Node_Str"",((Department)departments.get(2)).getStaff());
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(jexlXLS));
  XLSTransformer transformer=new XLSTransformer();
  transformer.setJexlInnerCollectionsAccess(true);
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(jexlXLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  HSSFSheet sourceSheet=sourceWorkbook.getSheetAt(0);
  HSSFSheet resultSheet=resultWorkbook.getSheetAt(0);
  Map props=new HashMap();
  props.put(""String_Node_Str"",obj.getName());
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getFlag()));
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getName() == null));
  props.put(""String_Node_Str"",new Integer(obj.getName().length()));
  props.put(""String_Node_Str"",Boolean.valueOf(!obj.getCollection().isEmpty() && obj.getId() > 0));
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getCollection().isEmpty() && obj.getId() == 1));
  props.put(""String_Node_Str"",Boolean.valueOf(!obj.getCollection().isEmpty()));
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getId() > 1));
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getId() == 1));
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getId() != 1));
  props.put(""String_Node_Str"",Boolean.valueOf(obj.getId() == 1));
  props.put(""String_Node_Str"",new Integer(obj.getId() % 2));
  props.put(""String_Node_Str"",obj.getMyArray()[0] + ""String_Node_Str"" + obj.getMyArray()[1]);
  props.put(""String_Node_Str"",dateFormat.format(obj.getDate()));
  props.put(""String_Node_Str"",obj.printIt());
  props.put(""String_Node_Str"",obj.getName());
  props.put(""String_Node_Str"",obj.echo(""String_Node_Str""));
  CellsChecker checker=new CellsChecker(props);
  checker.checkSection(sourceSheet,resultSheet,0,0,(short)0,(short)1,25,false,false);
  props.clear();
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkListCells(sourceSheet,25,resultSheet,25,(short)1,new String[]{((Bean.InnerBean)bean.getCollection().get(0)).getInnerCollection().get(0).toString(),((Bean.InnerBean)bean.getCollection().get(1)).getInnerCollection().get(0).toString(),((Bean.InnerBean)bean.getCollection().get(2)).getInnerCollection().get(0).toString()});
  saveWorkbook(resultWorkbook,jexlDestXLS);
}",0.941338379494237
81523,"public void updateWorkbookFormulas(BlockTransformation transformation){
  Set sheetNames=sheetFormulasMap.keySet();
  Formula formula, newFormula;
  Set cellRefs, newCellRefs;
  CellRef cellRef, newCellRef;
  List resultCells;
  String newCell;
  Point point, newPoint;
  Set cellRefsToRemove=new HashSet();
  Set formulasToRemove=new HashSet();
  for (Iterator iterator=sheetNames.iterator(); iterator.hasNext(); ) {
    String sheetName=(String)iterator.next();
    List formulas=(List)sheetFormulasMap.get(sheetName);
    formulasToRemove.clear();
    for (int i=0, size=formulas.size(); i < size; i++) {
      formula=(Formula)formulas.get(i);
      List formulaPoints=null;
      Point formulaPoint=null;
      boolean transformFormula=false;
      if (formula.getSheet().getSheetName().equals(transformation.getBlock().getSheet().getSheetName())) {
        transformFormula=true;
        formulaPoint=new Point(formula.getRowNum().intValue(),formula.getCellNum().shortValue());
        formulaPoints=transformation.transformCell(formulaPoint);
      }
      if (!transformFormula || (formulaPoints != null && !formulaPoints.isEmpty())) {
        cellRefs=formula.getCellRefs();
        cellRefsToRemove.clear();
        for (Iterator iter=cellRefs.iterator(); iter.hasNext(); ) {
          cellRef=(CellRef)iter.next();
          if (!(transformation instanceof DuplicateTransformation && transformation.getBlock().contains(cellRef) && transformation.getBlock().contains(formula.getRowNum().intValue(),formula.getCellNum().intValue()))) {
            resultCells=transformation.transformCell(sheetName,cellRef);
            if (resultCells != null) {
              if (resultCells.size() == 1) {
                newCell=(String)resultCells.get(0);
                cellRef.update(newCell);
              }
 else               if (resultCells.size() > 1) {
                cellRef.update(resultCells);
              }
            }
 else {
              cellRefsToRemove.add(cellRef);
            }
          }
        }
        if (!cellRefsToRemove.isEmpty()) {
          formula.removeCellRefs(cellRefsToRemove);
        }
        formula.updateReplacedRefCellsCollection();
        if (formulaPoints != null && !formulaPoints.isEmpty()) {
          if (formulaPoints.size() == 1) {
            newPoint=(Point)formulaPoints.get(0);
            formula.setRowNum(new Integer(newPoint.getRow()));
            formula.setCellNum(new Integer(newPoint.getCol()));
          }
 else {
            List sheetFormulas=(List)sheetFormulasMap.get(formula.getSheet().getSheetName());
            for (int j=1, num=formulaPoints.size(); j < num; j++) {
              point=(Point)formulaPoints.get(j);
              newFormula=new Formula(formula);
              newFormula.setRowNum(new Integer(point.getRow()));
              newFormula.setCellNum(new Integer(point.getCol()));
              newCellRefs=newFormula.getCellRefs();
              for (Iterator iterator1=newCellRefs.iterator(); iterator1.hasNext(); ) {
                newCellRef=(CellRef)iterator1.next();
                if (transformation.getBlock().contains(newCellRef) && transformation.getBlock().contains(formulaPoint)) {
                  newCellRef.update(transformation.getDuplicatedCellRef(sheetName,newCellRef.toString(),j));
                }
              }
              sheetFormulas.add(newFormula);
            }
          }
        }
      }
 else {
        if (formulaPoints == null) {
          formulasToRemove.add(formula);
        }
      }
    }
    formulas.removeAll(formulasToRemove);
  }
}","public void updateWorkbookFormulas(BlockTransformation transformation){
  Set sheetNames=sheetFormulasMap.keySet();
  Formula formula, newFormula;
  Set cellRefs, newCellRefs;
  CellRef cellRef, newCellRef;
  List resultCells;
  String newCell;
  Point point, newPoint;
  Set cellRefsToRemove=new HashSet();
  Set formulasToRemove=new HashSet();
  for (Iterator iterator=sheetNames.iterator(); iterator.hasNext(); ) {
    String sheetName=(String)iterator.next();
    List formulas=(List)sheetFormulasMap.get(sheetName);
    formulasToRemove.clear();
    for (int i=0, size=formulas.size(); i < size; i++) {
      formula=(Formula)formulas.get(i);
      List formulaPoints=null;
      Point formulaPoint=null;
      boolean transformFormula=false;
      if (formula.getSheet().getSheetName().equals(transformation.getBlock().getSheet().getSheetName())) {
        transformFormula=true;
        formulaPoint=new Point(formula.getRowNum().intValue(),formula.getCellNum().shortValue());
        formulaPoints=transformation.transformCell(formulaPoint);
      }
      if (!transformFormula || (formulaPoints != null && !formulaPoints.isEmpty())) {
        cellRefs=formula.getCellRefs();
        cellRefsToRemove.clear();
        for (Iterator iter=cellRefs.iterator(); iter.hasNext(); ) {
          cellRef=(CellRef)iter.next();
          if (!(transformation instanceof DuplicateTransformation && transformation.getBlock().contains(cellRef) && transformation.getBlock().contains(formula))) {
            resultCells=transformation.transformCell(sheetName,cellRef);
            if (resultCells != null) {
              if (resultCells.size() == 1) {
                newCell=(String)resultCells.get(0);
                cellRef.update(newCell);
              }
 else               if (resultCells.size() > 1) {
                cellRef.update(resultCells);
              }
            }
 else {
              cellRefsToRemove.add(cellRef);
            }
          }
        }
        if (!cellRefsToRemove.isEmpty()) {
          formula.removeCellRefs(cellRefsToRemove);
        }
        formula.updateReplacedRefCellsCollection();
        if (formulaPoints != null && !formulaPoints.isEmpty()) {
          if (formulaPoints.size() == 1) {
            newPoint=(Point)formulaPoints.get(0);
            formula.setRowNum(new Integer(newPoint.getRow()));
            formula.setCellNum(new Integer(newPoint.getCol()));
          }
 else {
            List sheetFormulas=(List)sheetFormulasMap.get(formula.getSheet().getSheetName());
            for (int j=1, num=formulaPoints.size(); j < num; j++) {
              point=(Point)formulaPoints.get(j);
              newFormula=new Formula(formula);
              newFormula.setRowNum(new Integer(point.getRow()));
              newFormula.setCellNum(new Integer(point.getCol()));
              newCellRefs=newFormula.getCellRefs();
              for (Iterator iterator1=newCellRefs.iterator(); iterator1.hasNext(); ) {
                newCellRef=(CellRef)iterator1.next();
                if (transformation.getBlock().contains(newCellRef) && transformation.getBlock().contains(formulaPoint)) {
                  newCellRef.update(transformation.getDuplicatedCellRef(sheetName,newCellRef.toString(),j));
                }
              }
              sheetFormulas.add(newFormula);
            }
          }
        }
      }
 else {
        if (formulaPoints == null) {
          formulasToRemove.add(formula);
        }
      }
    }
    formulas.removeAll(formulasToRemove);
  }
}",0.9922589725545392
81524,"public boolean contains(CellRef cellRef){
  boolean flag=(startRowNum <= cellRef.getRowNum() && cellRef.getRowNum() <= endRowNum && ((startCellNum < 0 || endCellNum < 0) || (startCellNum <= cellRef.getColNum() && cellRef.getColNum() <= endCellNum)));
  if (flag && !affectedColumns.isEmpty()) {
    return affectedColumns.contains(new Short(cellRef.getColNum()));
  }
 else {
    return flag;
  }
}","public boolean contains(CellRef cellRef){
  String refSheetName=cellRef.getSheetName();
  boolean flag=((refSheetName == null || sheet.getSheetName().equals(refSheetName)) && startRowNum <= cellRef.getRowNum() && cellRef.getRowNum() <= endRowNum && ((startCellNum < 0 || endCellNum < 0) || (startCellNum <= cellRef.getColNum() && cellRef.getColNum() <= endCellNum)));
  if (flag && !affectedColumns.isEmpty()) {
    return affectedColumns.contains(new Short(cellRef.getColNum()));
  }
 else {
    return flag;
  }
}",0.5585980284775466
81525,"/** 
 * Multiple sheet template multiple transform. It can be used to generate a workbook with N (N=N1+N2+...+Nn) sheets based on : - N1 transformations of the sheet template T1 - N2 transformations of the sheet template T2 ... - Nn transformations of the sheet template Tn
 * @param is  the {@link InputStream} of the workbook template containing the n template sheets
 * @param templateSheetNameList  the ordered list of the template sheet name used in the transformation.
 * @param sheetNameList  the ordered list of the resulting sheet name after transformation
 * @param beanParamsList  the ordered list of beanParams used in the transformation
 * @return - {@link HSSFWorkbook} representing transformation result
 * @throws ParsePropertyException  in case property parsing failure
 */
public HSSFWorkbook transformXLS(InputStream is,List templateSheetNameList,List sheetNameList,List beanParamsList) throws ParsePropertyException {
  HSSFWorkbook hssfWorkbook=null;
  try {
    POIFSFileSystem fs=new POIFSFileSystem(is);
    hssfWorkbook=new HSSFWorkbook(fs);
    int numberOfSheets=hssfWorkbook.getNumberOfSheets();
    for (int templateSheetIndex=0; templateSheetIndex < templateSheetNameList.size(); templateSheetIndex++) {
      String templateSheetName=(String)templateSheetNameList.get(templateSheetIndex);
      String sheetName=(String)sheetNameList.get(templateSheetIndex);
      for (int workbookSheetIndex=0; workbookSheetIndex < numberOfSheets; workbookSheetIndex++) {
        if (templateSheetName.equals(hssfWorkbook.getSheetName(workbookSheetIndex))) {
          cloneSheet(hssfWorkbook,workbookSheetIndex,sheetName);
          break;
        }
      }
    }
    for (int i=0; i < numberOfSheets; i++) {
      hssfWorkbook.removeSheetAt(0);
    }
    Workbook workbook=createWorkbook(hssfWorkbook);
    workbookTransformationController=new WorkbookTransformationControllerImpl(workbook);
    preprocess(hssfWorkbook);
    SheetTransformer sheetTransformer=new SheetTransformer(fixedSizeCollections,groupedCollections,rowProcessors,cellProcessors,configuration);
    for (int sheetNo=0; sheetNo < workbook.getNumberOfSheets(); sheetNo++) {
      final String spreadsheetName=hssfWorkbook.getSheetName(sheetNo);
      if (!isSpreadsheetToHide(spreadsheetName)) {
        if (isSpreadsheetToRename(spreadsheetName)) {
          hssfWorkbook.setSheetName(sheetNo,getSpreadsheetToReName(spreadsheetName));
        }
        Sheet sheet=workbook.getSheetAt(sheetNo);
        Map beanParams=(Map)beanParamsList.get(sheetNo);
        beanParams.put(""String_Node_Str"",String.valueOf(sheetNo));
        sheetTransformer.transformSheet(workbookTransformationController,sheet,beanParams);
      }
 else {
        hssfWorkbook.removeSheetAt(sheetNo);
        sheetNo--;
      }
    }
    updateFormulas();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return hssfWorkbook;
}","/** 
 * Multiple sheet template multiple transform. It can be used to generate a workbook with N (N=N1+N2+...+Nn) sheets based on : - N1 transformations of the sheet template T1 - N2 transformations of the sheet template T2 ... - Nn transformations of the sheet template Tn
 * @param is  the {@link InputStream} of the workbook template containing the n template sheets
 * @param templateSheetNameList  the ordered list of the template sheet name used in the transformation.
 * @param sheetNameList  the ordered list of the resulting sheet name after transformation
 * @param beanParamsList  the ordered list of beanParams used in the transformation
 * @return - {@link HSSFWorkbook} representing transformation result
 * @throws ParsePropertyException  in case property parsing failure
 */
public HSSFWorkbook transformXLS(InputStream is,List templateSheetNameList,List sheetNameList,List beanParamsList) throws ParsePropertyException {
  HSSFWorkbook hssfWorkbook=null;
  try {
    POIFSFileSystem fs=new POIFSFileSystem(is);
    hssfWorkbook=new HSSFWorkbook(fs);
    int numberOfSheets=hssfWorkbook.getNumberOfSheets();
    for (int templateSheetIndex=0; templateSheetIndex < templateSheetNameList.size(); templateSheetIndex++) {
      String templateSheetName=(String)templateSheetNameList.get(templateSheetIndex);
      String sheetName=(String)sheetNameList.get(templateSheetIndex);
      for (int workbookSheetIndex=0; workbookSheetIndex < numberOfSheets; workbookSheetIndex++) {
        if (templateSheetName.equals(hssfWorkbook.getSheetName(workbookSheetIndex))) {
          cloneSheet(hssfWorkbook,workbookSheetIndex,sheetName);
          break;
        }
      }
    }
    for (int i=0; i < numberOfSheets; i++) {
      hssfWorkbook.removeSheetAt(0);
    }
    Workbook workbook=createWorkbook(hssfWorkbook);
    workbookTransformationController=new WorkbookTransformationControllerImpl(workbook);
    preprocess(hssfWorkbook);
    SheetTransformer sheetTransformer=new SheetTransformer(fixedSizeCollections,groupedCollections,rowProcessors,cellProcessors,configuration);
    for (int sheetNo=0; sheetNo < workbook.getNumberOfSheets(); sheetNo++) {
      final String spreadsheetName=hssfWorkbook.getSheetName(sheetNo);
      if (!isSpreadsheetToHide(spreadsheetName)) {
        if (isSpreadsheetToRename(spreadsheetName)) {
          hssfWorkbook.setSheetName(sheetNo,getSpreadsheetToReName(spreadsheetName));
        }
        Sheet sheet=workbook.getSheetAt(sheetNo);
        Map beanParams=(Map)beanParamsList.get(sheetNo);
        beanParams.put(""String_Node_Str"",String.valueOf(sheetNo));
        sheetTransformer.transformSheet(workbookTransformationController,sheet,beanParams);
      }
 else {
        workbook.removeSheetAt(sheetNo);
        sheetNo--;
      }
    }
    updateFormulas();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return hssfWorkbook;
}",0.9989644459785986
81526,"/** 
 * This method transforms given XLS input stream template into multiple sheets workbook creating separate Excel worksheet for every object in the list
 * @param is        - {@link InputStream} for source XLS template file
 * @param objects   - List of beans where each list item should be exported into a separated worksheet
 * @param newSheetNames - Sheet names to be used for newly created worksheets
 * @param beanName - Bean name to be used for a list item when processing sheet
 * @param beanParams - Common bean map containing all other objects to be used in the workbook
 * @param startSheetNum - Worksheet number (zero based) of the worksheet that needs to be used to create multiple worksheets
 * @return new {@link HSSFWorkbook} object containing the result of transformation
 * @throws net.sf.jxls.exception.ParsePropertyException - {@link ParsePropertyException} is thrown when some property can't be parsed
 */
public HSSFWorkbook transformMultipleSheetsList(InputStream is,List objects,List newSheetNames,String beanName,Map beanParams,int startSheetNum) throws ParsePropertyException {
  HSSFWorkbook hssfWorkbook=null;
  try {
    if (beanParams != null && beanParams.containsKey(beanName)) {
      throw new IllegalArgumentException(""String_Node_Str"" + beanName + ""String_Node_Str"");
    }
    if (beanName == null) {
      throw new IllegalArgumentException((""String_Node_Str""));
    }
    if (beanParams == null) {
      beanParams=new HashMap();
    }
    POIFSFileSystem fs=new POIFSFileSystem(is);
    hssfWorkbook=new HSSFWorkbook(fs);
    preprocess(hssfWorkbook);
    Workbook workbook=createWorkbook(hssfWorkbook);
    workbookTransformationController=new WorkbookTransformationControllerImpl(workbook);
    SheetTransformer sheetTransformer=new SheetTransformer(fixedSizeCollections,groupedCollections,rowProcessors,cellProcessors,configuration);
    final String templateSheetName=""String_Node_Str"";
    for (int sheetNo=0; sheetNo < hssfWorkbook.getNumberOfSheets(); sheetNo++) {
      final String spreadsheetName=hssfWorkbook.getSheetName(sheetNo);
      if (!isSpreadsheetToHide(spreadsheetName)) {
        if (isSpreadsheetToRename(spreadsheetName)) {
          hssfWorkbook.setSheetName(sheetNo,getSpreadsheetToReName(spreadsheetName));
        }
        HSSFSheet hssfSheet=hssfWorkbook.getSheetAt(sheetNo);
        if (startSheetNum == sheetNo && objects != null && !objects.isEmpty()) {
          Object firstBean=objects.get(0);
          beanParams.put(beanName,firstBean);
          hssfWorkbook.setSheetName(sheetNo,(String)newSheetNames.get(0),HSSFWorkbook.ENCODING_UTF_16);
          HSSFSheet templateSheet=hssfWorkbook.createSheet(templateSheetName);
          Util.copySheets(templateSheet,hssfSheet);
          Sheet sheet=workbook.getSheetAt(sheetNo);
          sheetTransformer.transformSheet(workbookTransformationController,sheet,beanParams);
          for (int i=1; i < objects.size(); i++) {
            Object bean=objects.get(i);
            beanParams.put(beanName,bean);
            HSSFSheet newSheet=hssfWorkbook.createSheet((String)newSheetNames.get(i));
            Util.copySheets(newSheet,templateSheet);
            Util.copyPageSetup(newSheet,hssfSheet);
            Util.copyPrintSetup(newSheet,hssfSheet);
            sheet=new Sheet(hssfWorkbook,newSheet,configuration);
            workbook.addSheet(sheet);
            workbook.initSheetNames();
            sheetTransformer.transformSheet(workbookTransformationController,sheet,beanParams);
          }
          hssfWorkbook.removeSheetAt(hssfWorkbook.getSheetIndex(templateSheetName));
          beanParams.remove(beanName);
        }
 else {
          Sheet sheet=workbook.getSheetAt(sheetNo);
          sheetTransformer.transformSheet(workbookTransformationController,sheet,beanParams);
        }
      }
 else {
        hssfWorkbook.removeSheetAt(sheetNo);
        workbook.getSheets().remove(sheetNo);
        sheetNo--;
      }
    }
    updateFormulas();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (hssfWorkbook != null) {
    for (int i=0; i < hssfWorkbook.getNumberOfSheets(); i++) {
      Util.setPrintArea(hssfWorkbook,i);
    }
  }
  return hssfWorkbook;
}","/** 
 * This method transforms given XLS input stream template into multiple sheets workbook creating separate Excel worksheet for every object in the list
 * @param is        - {@link InputStream} for source XLS template file
 * @param objects   - List of beans where each list item should be exported into a separated worksheet
 * @param newSheetNames - Sheet names to be used for newly created worksheets
 * @param beanName - Bean name to be used for a list item when processing sheet
 * @param beanParams - Common bean map containing all other objects to be used in the workbook
 * @param startSheetNum - Worksheet number (zero based) of the worksheet that needs to be used to create multiple worksheets
 * @return new {@link HSSFWorkbook} object containing the result of transformation
 * @throws net.sf.jxls.exception.ParsePropertyException - {@link ParsePropertyException} is thrown when some property can't be parsed
 */
public HSSFWorkbook transformMultipleSheetsList(InputStream is,List objects,List newSheetNames,String beanName,Map beanParams,int startSheetNum) throws ParsePropertyException {
  HSSFWorkbook hssfWorkbook=null;
  try {
    if (beanParams != null && beanParams.containsKey(beanName)) {
      throw new IllegalArgumentException(""String_Node_Str"" + beanName + ""String_Node_Str"");
    }
    if (beanName == null) {
      throw new IllegalArgumentException((""String_Node_Str""));
    }
    if (beanParams == null) {
      beanParams=new HashMap();
    }
    POIFSFileSystem fs=new POIFSFileSystem(is);
    hssfWorkbook=new HSSFWorkbook(fs);
    preprocess(hssfWorkbook);
    Workbook workbook=createWorkbook(hssfWorkbook);
    workbookTransformationController=new WorkbookTransformationControllerImpl(workbook);
    SheetTransformer sheetTransformer=new SheetTransformer(fixedSizeCollections,groupedCollections,rowProcessors,cellProcessors,configuration);
    final String templateSheetName=""String_Node_Str"";
    for (int sheetNo=0; sheetNo < hssfWorkbook.getNumberOfSheets(); sheetNo++) {
      final String spreadsheetName=hssfWorkbook.getSheetName(sheetNo);
      if (!isSpreadsheetToHide(spreadsheetName)) {
        if (isSpreadsheetToRename(spreadsheetName)) {
          hssfWorkbook.setSheetName(sheetNo,getSpreadsheetToReName(spreadsheetName));
        }
        HSSFSheet hssfSheet=hssfWorkbook.getSheetAt(sheetNo);
        if (startSheetNum == sheetNo && objects != null && !objects.isEmpty()) {
          Object firstBean=objects.get(0);
          beanParams.put(beanName,firstBean);
          hssfWorkbook.setSheetName(sheetNo,(String)newSheetNames.get(0),HSSFWorkbook.ENCODING_UTF_16);
          HSSFSheet templateSheet=hssfWorkbook.createSheet(templateSheetName);
          Util.copySheets(templateSheet,hssfSheet);
          Sheet sheet=workbook.getSheetAt(sheetNo);
          sheetTransformer.transformSheet(workbookTransformationController,sheet,beanParams);
          for (int i=1; i < objects.size(); i++) {
            Object bean=objects.get(i);
            beanParams.put(beanName,bean);
            HSSFSheet newSheet=hssfWorkbook.createSheet((String)newSheetNames.get(i));
            Util.copySheets(newSheet,templateSheet);
            Util.copyPageSetup(newSheet,hssfSheet);
            Util.copyPrintSetup(newSheet,hssfSheet);
            sheet=new Sheet(hssfWorkbook,newSheet,configuration);
            workbook.addSheet(sheet);
            workbook.initSheetNames();
            sheetTransformer.transformSheet(workbookTransformationController,sheet,beanParams);
          }
          hssfWorkbook.removeSheetAt(hssfWorkbook.getSheetIndex(templateSheetName));
          beanParams.remove(beanName);
        }
 else {
          Sheet sheet=workbook.getSheetAt(sheetNo);
          sheetTransformer.transformSheet(workbookTransformationController,sheet,beanParams);
        }
      }
 else {
        workbook.removeSheetAt(sheetNo);
        sheetNo--;
      }
    }
    updateFormulas();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (hssfWorkbook != null) {
    for (int i=0; i < hssfWorkbook.getNumberOfSheets(); i++) {
      Util.setPrintArea(hssfWorkbook,i);
    }
  }
  return hssfWorkbook;
}",0.993797709923664
81527,"public void testHiddenSheetsExport() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",simpleBean1);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(hideSheetsXLS));
  XLSTransformer transformer=new XLSTransformer();
  transformer.setSpreadsheetsToHide(new String[]{""String_Node_Str"",""String_Node_Str""});
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  assertEquals(""String_Node_Str"",1,resultWorkbook.getNumberOfSheets());
  is.close();
  saveWorkbook(resultWorkbook,hideSheetsDestXLS);
}","public void testHiddenSheetsExport() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",simpleBean1);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(hideSheetsXLS));
  XLSTransformer transformer=new XLSTransformer();
  transformer.setSpreadsheetsToHide(new String[]{""String_Node_Str"",""String_Node_Str""});
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  assertEquals(""String_Node_Str"",1,resultWorkbook.getNumberOfSheets());
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(hideSheetsXLS));
  transformer.setSpreadsheetsToHide(new String[]{""String_Node_Str""});
  resultWorkbook=transformer.transformXLS(is,beans);
  assertEquals(""String_Node_Str"",2,resultWorkbook.getNumberOfSheets());
  is.close();
  saveWorkbook(resultWorkbook,hideSheetsDestXLS);
}",0.7427785419532325
81528,"public ResultTransformation process(SheetTransformer sheetTransformer){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + var + ""String_Node_Str""+ items);
    log.debug(""String_Node_Str"" + tagContext);
    log.debug(""String_Node_Str"" + itemsCollection);
  }
  Block body=tagContext.getTagBody();
  if (body.getNumberOfRows() == 1) {
    return processOneRowTag(sheetTransformer);
  }
  int shiftNumber=0;
  if (itemsCollection != null && !itemsCollection.isEmpty()) {
    tagContext.getSheetTransformationController().removeBorders(body);
    shiftNumber+=-2;
    ResultTransformation shift=new ResultTransformation(0);
    Map beans=tagContext.getBeans();
    int k=0;
    ResultTransformation processResult;
    int startRowNum, endRowNum;
    if (groupBy == null || groupBy.length() == 0) {
      Collection c2=new ArrayList();
      for (Iterator iterator=itemsCollection.iterator(); iterator.hasNext(); ) {
        Object o=iterator.next();
        beans.put(var,o);
        if (ReportUtil.shouldSelectCollectionData(beans,select,configuration)) {
          c2.add(o);
        }
      }
      shiftNumber+=tagContext.getSheetTransformationController().duplicateDown(body,c2.size() - 1);
      for (Iterator iterator=c2.iterator(); iterator.hasNext(); ) {
        Object o=iterator.next();
        beans.put(var,o);
        if (ReportUtil.shouldSelectCollectionData(beans,select,configuration)) {
          try {
            startRowNum=body.getStartRowNum() + shift.getLastRowShift() + body.getNumberOfRows() * k++;
            endRowNum=startRowNum + body.getNumberOfRows() - 1;
            processResult=sheetTransformer.processRows(tagContext.getSheetTransformationController(),tagContext.getSheet(),startRowNum,endRowNum,beans,null);
            shift.add(processResult);
          }
 catch (          ParsePropertyException e) {
            log.error(""String_Node_Str"",e);
            throw new RuntimeException(""String_Node_Str"",e);
          }
        }
      }
    }
 else {
      try {
        Collection groupedData=ReportUtil.groupCollectionData(itemsCollection,groupBy,groupOrder,select,configuration);
        shiftNumber+=tagContext.getSheetTransformationController().duplicateDown(body,groupedData.size() - 1);
        Object savedGroupData=null;
        if (beans.containsKey(GROUP_DATA_KEY)) {
          savedGroupData=beans.get(GROUP_DATA_KEY);
        }
        for (Iterator iterator=groupedData.iterator(); iterator.hasNext(); ) {
          GroupData groupData=(GroupData)iterator.next();
          beans.put(GROUP_DATA_KEY,groupData);
          try {
            startRowNum=body.getStartRowNum() + shift.getLastRowShift() + body.getNumberOfRows() * k++;
            endRowNum=startRowNum + body.getNumberOfRows() - 1;
            processResult=sheetTransformer.processRows(tagContext.getSheetTransformationController(),tagContext.getSheet(),startRowNum,endRowNum,beans,null);
            shift.add(processResult);
          }
 catch (          ParsePropertyException e) {
            log.error(""String_Node_Str"",e);
          }
        }
        beans.remove(GROUP_DATA_KEY);
        if (savedGroupData != null) {
          beans.put(GROUP_DATA_KEY,savedGroupData);
        }
      }
 catch (      NoSuchMethodException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      IllegalAccessException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      InvocationTargetException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
    }
    shift.add(new ResultTransformation(shiftNumber,shiftNumber));
    shift.setTagProcessResult(true);
    return shift;
  }
 else {
    log.warn(""String_Node_Str"" + items + ""String_Node_Str"");
    tagContext.getSheetTransformationController().removeBodyRows(body);
    ResultTransformation shift=new ResultTransformation(0);
    shift.add(new ResultTransformation(-1,-body.getNumberOfRows()));
    shift.setLastProcessedRow(-1);
    shift.setTagProcessResult(true);
    return shift;
  }
}","public ResultTransformation process(SheetTransformer sheetTransformer){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + var + ""String_Node_Str""+ items);
    log.debug(""String_Node_Str"" + tagContext);
    log.debug(""String_Node_Str"" + itemsCollection);
  }
  Block body=tagContext.getTagBody();
  if (body.getNumberOfRows() == 1) {
    return processOneRowTag(sheetTransformer);
  }
  int shiftNumber=0;
  if (itemsCollection != null && !itemsCollection.isEmpty()) {
    tagContext.getSheetTransformationController().removeBorders(body);
    shiftNumber+=-2;
    ResultTransformation shift=new ResultTransformation(0);
    Map beans=tagContext.getBeans();
    int k=0;
    ResultTransformation processResult;
    int startRowNum, endRowNum;
    if (groupBy == null || groupBy.length() == 0) {
      Collection c2=new ArrayList();
      for (Iterator iterator=itemsCollection.iterator(); iterator.hasNext(); ) {
        Object o=iterator.next();
        beans.put(var,o);
        if (ReportUtil.shouldSelectCollectionData(beans,select,configuration)) {
          c2.add(o);
        }
      }
      shiftNumber+=tagContext.getSheetTransformationController().duplicateDown(body,c2.size() - 1);
      for (Iterator iterator=c2.iterator(); iterator.hasNext(); ) {
        Object o=iterator.next();
        beans.put(var,o);
        try {
          startRowNum=body.getStartRowNum() + shift.getLastRowShift() + body.getNumberOfRows() * k++;
          endRowNum=startRowNum + body.getNumberOfRows() - 1;
          processResult=sheetTransformer.processRows(tagContext.getSheetTransformationController(),tagContext.getSheet(),startRowNum,endRowNum,beans,null);
          shift.add(processResult);
        }
 catch (        ParsePropertyException e) {
          log.error(""String_Node_Str"",e);
          throw new RuntimeException(""String_Node_Str"",e);
        }
      }
    }
 else {
      try {
        Collection groupedData=ReportUtil.groupCollectionData(itemsCollection,groupBy,groupOrder,select,configuration);
        shiftNumber+=tagContext.getSheetTransformationController().duplicateDown(body,groupedData.size() - 1);
        Object savedGroupData=null;
        if (beans.containsKey(GROUP_DATA_KEY)) {
          savedGroupData=beans.get(GROUP_DATA_KEY);
        }
        for (Iterator iterator=groupedData.iterator(); iterator.hasNext(); ) {
          GroupData groupData=(GroupData)iterator.next();
          beans.put(GROUP_DATA_KEY,groupData);
          try {
            startRowNum=body.getStartRowNum() + shift.getLastRowShift() + body.getNumberOfRows() * k++;
            endRowNum=startRowNum + body.getNumberOfRows() - 1;
            processResult=sheetTransformer.processRows(tagContext.getSheetTransformationController(),tagContext.getSheet(),startRowNum,endRowNum,beans,null);
            shift.add(processResult);
          }
 catch (          ParsePropertyException e) {
            log.error(""String_Node_Str"",e);
          }
        }
        beans.remove(GROUP_DATA_KEY);
        if (savedGroupData != null) {
          beans.put(GROUP_DATA_KEY,savedGroupData);
        }
      }
 catch (      NoSuchMethodException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      IllegalAccessException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      InvocationTargetException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
    }
    shift.add(new ResultTransformation(shiftNumber,shiftNumber));
    shift.setTagProcessResult(true);
    return shift;
  }
 else {
    log.warn(""String_Node_Str"" + items + ""String_Node_Str"");
    tagContext.getSheetTransformationController().removeBodyRows(body);
    ResultTransformation shift=new ResultTransformation(0);
    shift.add(new ResultTransformation(-1,-body.getNumberOfRows()));
    shift.setLastProcessedRow(-1);
    shift.setTagProcessResult(true);
    return shift;
  }
}",0.9789670192906036
81529,"public static void shiftCellsLeft(HSSFSheet sheet,int startRow,short startCol,int endRow,short endCol,short shiftNumber){
  for (int i=startRow; i <= endRow; i++) {
    HSSFRow row=sheet.getRow(i);
    if (row != null) {
      for (short j=startCol; j <= endCol; j++) {
        HSSFCell cell=row.getCell(j);
        if (cell == null) {
          cell=row.createCell(j);
        }
        HSSFCell destCell=row.getCell((short)(j - shiftNumber));
        if (destCell == null) {
          destCell=row.createCell((short)(j - shiftNumber));
        }
        copyCell(cell,destCell,true);
        sheet.setColumnWidth(destCell.getCellNum(),sheet.getColumnWidth(cell.getCellNum()));
      }
    }
  }
}","public static void shiftCellsLeft(HSSFSheet sheet,int startRow,short startCol,int endRow,short endCol,short shiftNumber){
  for (int i=startRow; i <= endRow; i++) {
    boolean doSetWidth=true;
    HSSFRow row=sheet.getRow(i);
    if (row != null) {
      for (short j=startCol; j <= endCol; j++) {
        HSSFCell cell=row.getCell(j);
        if (cell == null) {
          cell=row.createCell(j);
          doSetWidth=false;
        }
        HSSFCell destCell=row.getCell((short)(j - shiftNumber));
        if (destCell == null) {
          destCell=row.createCell((short)(j - shiftNumber));
        }
        copyCell(cell,destCell,true);
        if (doSetWidth) {
          sheet.setColumnWidth(destCell.getCellNum(),sheet.getColumnWidth(cell.getCellNum()));
        }
      }
    }
  }
}",0.9362843729040912
81530,"protected void setUp() throws Exception {
  super.setUp();
  simpleBean1=new SimpleBean(names[0].toString(),(Double)doubleValues[0],(Integer)intValues[0],(Date)dateValues[0]);
  simpleBean2=new SimpleBean(names[1].toString(),(Double)doubleValues[1],(Integer)intValues[1],(Date)dateValues[1]);
  simpleBean3=new SimpleBean(names[2].toString(),(Double)doubleValues[2],(Integer)intValues[2],(Date)dateValues[2]);
  listBean2.addBean(new SimpleBean(names2[0].toString(),(Double)doubleValues2[0],(Integer)intValues2[0]));
  listBean2.addBean(new SimpleBean(names2[1].toString(),(Double)doubleValues2[1],(Integer)intValues2[1]));
  listBean2.addBean(new SimpleBean(names2[2].toString(),(Double)doubleValues2[2],(Integer)intValues2[2]));
  listBean2.addBean(new SimpleBean(names2[3].toString(),(Double)doubleValues2[3],(Integer)intValues2[3]));
  listBean2.addBean(new SimpleBean(names2[4].toString(),(Double)doubleValues2[4],(Integer)intValues2[4]));
  listBean2.addBean(new SimpleBean(names2[5].toString(),(Double)doubleValues2[5],(Integer)intValues2[5]));
  listBean2.addBean(new SimpleBean(names2[6].toString(),(Double)doubleValues2[6],(Integer)intValues2[6]));
  simpleBean1.setOther(simpleBean2);
  simpleBean2.setOther(simpleBean3);
  beanWithList=new BeanWithList(""String_Node_Str"",new Double(1976.1202));
  beans.add(simpleBean1);
  beans.add(simpleBean2);
  beans.add(simpleBean3);
  listBean1.addBean(simpleBean1);
  listBean1.addBean(simpleBean2);
  listBean1.addBean(simpleBean3);
  Department department=new Department(""String_Node_Str"");
  for (int i=0; i < itEmployeeNames.length; i++) {
    Employee employee=new Employee(itEmployeeNames[i],itAges[i],itPayments[i],itBonuses[i]);
    employee.setNotes(generateNotes(employee.getName()));
    department.addEmployee(employee);
    itEmployees.add(employee);
  }
  departments.add(department);
  department=new Department(""String_Node_Str"");
  for (int i=0; i < hrEmployeeNames.length; i++) {
    department.addEmployee(new Employee(hrEmployeeNames[i],hrAges[i],hrPayments[i],hrBonuses[i]));
  }
  departments.add(department);
  department=new Department(""String_Node_Str"");
  for (int i=0; i < baEmployeeNames.length; i++) {
    department.addEmployee(new Employee(baEmployeeNames[i],baAges[i],baPayments[i],baBonuses[i]));
  }
  departments.add(department);
  department=new Department(""String_Node_Str"");
  for (int i=0; i < mgrEmployeeNames.length; i++) {
    department.addEmployee(new Employee(mgrEmployeeNames[i],mgrAges[i],mgrPayments[i],mgrBonuses[i]));
  }
  mgrDepartment=department;
  beanWithList.setBeans(beans);
  propertyMap.put(""String_Node_Str"",simpleBean1.getName());
  propertyMap.put(""String_Node_Str"",simpleBean1.getDoubleValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getIntValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getDateValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getName());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getIntValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getDoubleValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getDateValue());
  propertyMap.put(""String_Node_Str"",beanWithList.getName());
  for (int i=0; i < amounts.length; i++) {
    int amount=amounts[i];
    amountBeans.add(new SimpleBean(amount));
  }
}","protected void setUp() throws Exception {
  super.setUp();
  simpleBean1=new SimpleBean(names[0].toString(),(Double)doubleValues[0],(Integer)intValues[0],(Date)dateValues[0]);
  simpleBean2=new SimpleBean(names[1].toString(),(Double)doubleValues[1],(Integer)intValues[1],(Date)dateValues[1]);
  simpleBean3=new SimpleBean(names[2].toString(),(Double)doubleValues[2],(Integer)intValues[2],(Date)dateValues[2]);
  listBean2.addBean(new SimpleBean(names2[0].toString(),(Double)doubleValues2[0],(Integer)intValues2[0]));
  listBean2.addBean(new SimpleBean(names2[1].toString(),(Double)doubleValues2[1],(Integer)intValues2[1]));
  listBean2.addBean(new SimpleBean(names2[2].toString(),(Double)doubleValues2[2],(Integer)intValues2[2]));
  listBean2.addBean(new SimpleBean(names2[3].toString(),(Double)doubleValues2[3],(Integer)intValues2[3]));
  listBean2.addBean(new SimpleBean(names2[4].toString(),(Double)doubleValues2[4],(Integer)intValues2[4]));
  listBean2.addBean(new SimpleBean(names2[5].toString(),(Double)doubleValues2[5],(Integer)intValues2[5]));
  listBean2.addBean(new SimpleBean(names2[6].toString(),(Double)doubleValues2[6],(Integer)intValues2[6]));
  simpleBean1.setOther(simpleBean2);
  simpleBean2.setOther(simpleBean3);
  beanWithList=new BeanWithList(""String_Node_Str"",new Double(1976.1202));
  beans.add(simpleBean1);
  beans.add(simpleBean2);
  beans.add(simpleBean3);
  listBean1.addBean(simpleBean1);
  listBean1.addBean(simpleBean2);
  listBean1.addBean(simpleBean3);
  Department department=new Department(""String_Node_Str"");
  for (int i=0; i < itEmployeeNames.length; i++) {
    Employee employee=new Employee(itEmployeeNames[i],itAges[i],itPayments[i],itBonuses[i]);
    employee.setNotes(generateNotes(employee.getName()));
    department.addEmployee(employee);
    itEmployees.add(employee);
  }
  itDepartment=department;
  departments.add(department);
  department=new Department(""String_Node_Str"");
  for (int i=0; i < hrEmployeeNames.length; i++) {
    department.addEmployee(new Employee(hrEmployeeNames[i],hrAges[i],hrPayments[i],hrBonuses[i]));
  }
  departments.add(department);
  department=new Department(""String_Node_Str"");
  for (int i=0; i < baEmployeeNames.length; i++) {
    department.addEmployee(new Employee(baEmployeeNames[i],baAges[i],baPayments[i],baBonuses[i]));
  }
  departments.add(department);
  department=new Department(""String_Node_Str"");
  for (int i=0; i < mgrEmployeeNames.length; i++) {
    department.addEmployee(new Employee(mgrEmployeeNames[i],mgrAges[i],mgrPayments[i],mgrBonuses[i]));
  }
  mgrDepartment=department;
  beanWithList.setBeans(beans);
  propertyMap.put(""String_Node_Str"",simpleBean1.getName());
  propertyMap.put(""String_Node_Str"",simpleBean1.getDoubleValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getIntValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getDateValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getName());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getIntValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getDoubleValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getDateValue());
  propertyMap.put(""String_Node_Str"",beanWithList.getName());
  for (int i=0; i < amounts.length; i++) {
    int amount=amounts[i];
    amountBeans.add(new SimpleBean(amount));
  }
}",0.9959526307899864
81531,"private Object getCellValue(HSSFCell cell,Object obj){
  Object value=null;
  if (obj instanceof String) {
    value=cell.getStringCellValue();
  }
 else   if (obj instanceof Double) {
    value=new Double(cell.getNumericCellValue());
  }
 else   if (obj instanceof BigDecimal) {
    value=new BigDecimal(cell.getNumericCellValue());
  }
 else   if (obj instanceof Integer) {
    value=new Integer((int)cell.getNumericCellValue());
  }
 else   if (obj instanceof Float) {
    value=new Float(cell.getNumericCellValue());
  }
 else   if (obj instanceof Date) {
    value=cell.getDateCellValue();
  }
 else   if (obj instanceof Calendar) {
    Calendar c=Calendar.getInstance();
    c.setTime(cell.getDateCellValue());
    value=c;
  }
 else   if (obj instanceof Boolean) {
    if (cell.getCellType() == HSSFCell.CELL_TYPE_BOOLEAN) {
      value=(cell.getBooleanCellValue()) ? Boolean.TRUE : Boolean.FALSE;
    }
 else     if (cell.getCellType() == HSSFCell.CELL_TYPE_STRING) {
      value=Boolean.valueOf(cell.getStringCellValue());
    }
 else {
      value=Boolean.FALSE;
    }
  }
  return value;
}","private Object getCellValue(HSSFCell cell,Object obj){
  Object value=null;
  if (obj instanceof String) {
    value=cell.getStringCellValue() != null ? cell.getStringCellValue().trim() : null;
  }
 else   if (obj instanceof Double) {
    value=new Double(cell.getNumericCellValue());
  }
 else   if (obj instanceof BigDecimal) {
    value=new BigDecimal(cell.getNumericCellValue());
  }
 else   if (obj instanceof Integer) {
    value=new Integer((int)cell.getNumericCellValue());
  }
 else   if (obj instanceof Float) {
    value=new Float(cell.getNumericCellValue());
  }
 else   if (obj instanceof Date) {
    value=cell.getDateCellValue();
  }
 else   if (obj instanceof Calendar) {
    Calendar c=Calendar.getInstance();
    c.setTime(cell.getDateCellValue());
    value=c;
  }
 else   if (obj instanceof Boolean) {
    if (cell.getCellType() == HSSFCell.CELL_TYPE_BOOLEAN) {
      value=(cell.getBooleanCellValue()) ? Boolean.TRUE : Boolean.FALSE;
    }
 else     if (cell.getCellType() == HSSFCell.CELL_TYPE_STRING) {
      value=Boolean.valueOf(cell.getStringCellValue());
    }
 else {
      value=Boolean.FALSE;
    }
  }
  return value;
}",0.9777777777777776
81532,"public boolean isCheckSuccessful(XLSRowCursor cursor){
  if (!cursor.hasNext()) {
    return cellChecks.isEmpty();
  }
  HSSFRow row=cursor.getSheet().getRow(offset + cursor.getCurrentRowNum());
  if (row == null) {
    return cellChecks.isEmpty();
  }
 else {
    return isCheckSuccessful(row);
  }
}","public boolean isCheckSuccessful(XLSRowCursor cursor){
  if (!cursor.hasNext()) {
    return isCellChecksEmpty();
  }
  HSSFRow row=cursor.getSheet().getRow(offset + cursor.getCurrentRowNum());
  if (row == null) {
    return cellChecks.isEmpty();
  }
 else {
    return isCheckSuccessful(row);
  }
}",0.9883527454242927
81533,"public void testRead2() throws IOException {
  InputStream inputXLS=new BufferedInputStream(getClass().getResourceAsStream(dataXLS));
  POIFSFileSystem fsInput=new POIFSFileSystem(inputXLS);
  HSSFWorkbook hssfInputWorkbook=new HSSFWorkbook(fsInput);
  HSSFSheet sheet=hssfInputWorkbook.getSheetAt(2);
  Department department;
  Map beans=new HashMap();
  List departments=new ArrayList();
  beans.put(""String_Node_Str"",departments);
  List chiefMappings=new ArrayList();
  chiefMappings.add(new BeanCellMapping(0,(short)1,""String_Node_Str"",""String_Node_Str""));
  chiefMappings.add(new BeanCellMapping(3,(short)0,""String_Node_Str"",""String_Node_Str""));
  chiefMappings.add(new BeanCellMapping(3,(short)1,""String_Node_Str""));
  chiefMappings.add(new BeanCellMapping(3,(short)2,""String_Node_Str""));
  chiefMappings.add(new BeanCellMapping(3,(short)3,""String_Node_Str"",""String_Node_Str""));
  XLSBlockReader chiefReader=new SimpleBlockReaderImpl(0,6,chiefMappings);
  List employeeMappings=new ArrayList();
  employeeMappings.add(new BeanCellMapping(7,(short)0,""String_Node_Str"",""String_Node_Str""));
  employeeMappings.add(new BeanCellMapping(7,(short)1,""String_Node_Str"",""String_Node_Str""));
  employeeMappings.add(new BeanCellMapping(7,(short)2,""String_Node_Str"",""String_Node_Str""));
  employeeMappings.add(new BeanCellMapping(7,(short)3,""String_Node_Str"",""String_Node_Str""));
  XLSBlockReader employeeReader=new SimpleBlockReaderImpl(7,7,employeeMappings);
  XLSLoopBlockReader employeesReader=new XLSForEachBlockReaderImpl(7,7,""String_Node_Str"",""String_Node_Str"",Employee.class);
  employeesReader.addBlockReader(employeeReader);
  SectionCheck loopBreakCheck=getLoopBreakCheck();
  employeesReader.setLoopBreakCondition(loopBreakCheck);
  XLSLoopBlockReader departmentInfoReader=new XLSForEachBlockReaderImpl(0,8,""String_Node_Str"",""String_Node_Str"",Department.class);
  departmentInfoReader.addBlockReader(chiefReader);
  departmentInfoReader.addBlockReader(employeesReader);
  departmentInfoReader.addBlockReader(new SimpleBlockReaderImpl(8,8,new ArrayList()));
  loopBreakCheck=new SimpleSectionCheck();
  loopBreakCheck.addRowCheck(new OffsetRowCheckImpl(0));
  loopBreakCheck.addRowCheck(new OffsetRowCheckImpl(1));
  departmentInfoReader.setLoopBreakCondition(loopBreakCheck);
  XLSRowCursor cursor=new XLSRowCursorImpl(sheet);
  cursor.setCurrentRowNum(0);
  departmentInfoReader.read(cursor,beans);
  assertEquals(3,departments.size());
  department=(Department)departments.get(0);
  checkDepartmentInfo(department,""String_Node_Str"",""String_Node_Str"",new Integer(35),new Double(3000.0),new Double(0.30));
  assertEquals(5,department.getStaff().size());
  Employee employee=(Employee)department.getStaff().get(0);
  checkEmployee(employee,""String_Node_Str"",new Integer(28),new Double(1500.0),new Double(0.15));
  employee=(Employee)department.getStaff().get(1);
  checkEmployee(employee,""String_Node_Str"",new Integer(32),new Double(2300.0),new Double(0.25));
  employee=(Employee)department.getStaff().get(2);
  checkEmployee(employee,""String_Node_Str"",new Integer(34),new Double(2500.0),new Double(0.00));
  employee=(Employee)department.getStaff().get(3);
  checkEmployee(employee,""String_Node_Str"",new Integer(34),new Double(1700.0),new Double(0.15));
  employee=(Employee)department.getStaff().get(4);
  checkEmployee(employee,""String_Node_Str"",new Integer(35),new Double(2800.0),new Double(0.20));
  department=(Department)departments.get(1);
  checkDepartmentInfo(department,""String_Node_Str"",""String_Node_Str"",new Integer(37),new Double(2200.0),new Double(0.30));
  assertEquals(4,department.getStaff().size());
  employee=(Employee)department.getStaff().get(0);
  checkEmployee(employee,""String_Node_Str"",new Integer(26),new Double(1400.0),new Double(0.20));
  employee=(Employee)department.getStaff().get(1);
  checkEmployee(employee,""String_Node_Str"",new Integer(30),new Double(2100.0),new Double(0.10));
  employee=(Employee)department.getStaff().get(2);
  checkEmployee(employee,""String_Node_Str"",new Integer(24),new Double(1800.0),new Double(0.15));
  employee=(Employee)department.getStaff().get(3);
  checkEmployee(employee,""String_Node_Str"",new Integer(34),new Double(1900.0),new Double(0.15));
  department=(Department)departments.get(2);
  checkDepartmentInfo(department,""String_Node_Str"",""String_Node_Str"",new Integer(35),new Double(2900.0),new Double(0.35));
  assertEquals(4,department.getStaff().size());
  employee=(Employee)department.getStaff().get(0);
  checkEmployee(employee,""String_Node_Str"",new Integer(30),new Double(2400.0),new Double(0.20));
  employee=(Employee)department.getStaff().get(1);
  checkEmployee(employee,""String_Node_Str"",new Integer(32),new Double(2200.0),new Double(0.15));
  employee=(Employee)department.getStaff().get(2);
  checkEmployee(employee,""String_Node_Str"",new Integer(28),new Double(2600.0),new Double(0.10));
  employee=(Employee)department.getStaff().get(3);
  checkEmployee(employee,""String_Node_Str"",new Integer(33),new Double(2150.0),new Double(0.25));
}","public void testRead2() throws IOException {
  InputStream inputXLS=new BufferedInputStream(getClass().getResourceAsStream(departmentDataXLS));
  POIFSFileSystem fsInput=new POIFSFileSystem(inputXLS);
  HSSFWorkbook hssfInputWorkbook=new HSSFWorkbook(fsInput);
  HSSFSheet sheet=hssfInputWorkbook.getSheetAt(2);
  Department department;
  Map beans=new HashMap();
  List departments=new ArrayList();
  beans.put(""String_Node_Str"",departments);
  List chiefMappings=new ArrayList();
  chiefMappings.add(new BeanCellMapping(0,(short)1,""String_Node_Str"",""String_Node_Str""));
  chiefMappings.add(new BeanCellMapping(3,(short)0,""String_Node_Str"",""String_Node_Str""));
  chiefMappings.add(new BeanCellMapping(3,(short)1,""String_Node_Str""));
  chiefMappings.add(new BeanCellMapping(3,(short)2,""String_Node_Str""));
  chiefMappings.add(new BeanCellMapping(3,(short)3,""String_Node_Str"",""String_Node_Str""));
  XLSBlockReader chiefReader=new SimpleBlockReaderImpl(0,6,chiefMappings);
  List employeeMappings=new ArrayList();
  employeeMappings.add(new BeanCellMapping(7,(short)0,""String_Node_Str"",""String_Node_Str""));
  employeeMappings.add(new BeanCellMapping(7,(short)1,""String_Node_Str"",""String_Node_Str""));
  employeeMappings.add(new BeanCellMapping(7,(short)2,""String_Node_Str"",""String_Node_Str""));
  employeeMappings.add(new BeanCellMapping(7,(short)3,""String_Node_Str"",""String_Node_Str""));
  XLSBlockReader employeeReader=new SimpleBlockReaderImpl(7,7,employeeMappings);
  XLSLoopBlockReader employeesReader=new XLSForEachBlockReaderImpl(7,7,""String_Node_Str"",""String_Node_Str"",Employee.class);
  employeesReader.addBlockReader(employeeReader);
  SectionCheck loopBreakCheck=getLoopBreakCheck();
  employeesReader.setLoopBreakCondition(loopBreakCheck);
  XLSLoopBlockReader departmentInfoReader=new XLSForEachBlockReaderImpl(0,8,""String_Node_Str"",""String_Node_Str"",Department.class);
  departmentInfoReader.addBlockReader(chiefReader);
  departmentInfoReader.addBlockReader(employeesReader);
  departmentInfoReader.addBlockReader(new SimpleBlockReaderImpl(8,8,new ArrayList()));
  loopBreakCheck=new SimpleSectionCheck();
  loopBreakCheck.addRowCheck(new OffsetRowCheckImpl(0));
  loopBreakCheck.addRowCheck(new OffsetRowCheckImpl(1));
  departmentInfoReader.setLoopBreakCondition(loopBreakCheck);
  XLSRowCursor cursor=new XLSRowCursorImpl(sheet);
  cursor.setCurrentRowNum(0);
  departmentInfoReader.read(cursor,beans);
  assertEquals(3,departments.size());
  department=(Department)departments.get(0);
  checkDepartmentInfo(department,""String_Node_Str"",""String_Node_Str"",new Integer(35),new Double(3000.0),new Double(0.30));
  assertEquals(5,department.getStaff().size());
  Employee employee=(Employee)department.getStaff().get(0);
  checkEmployee(employee,""String_Node_Str"",new Integer(28),new Double(1500.0),new Double(0.15));
  employee=(Employee)department.getStaff().get(1);
  checkEmployee(employee,""String_Node_Str"",new Integer(32),new Double(2300.0),new Double(0.25));
  employee=(Employee)department.getStaff().get(2);
  checkEmployee(employee,""String_Node_Str"",new Integer(34),new Double(2500.0),new Double(0.00));
  employee=(Employee)department.getStaff().get(3);
  checkEmployee(employee,""String_Node_Str"",new Integer(34),new Double(1700.0),new Double(0.15));
  employee=(Employee)department.getStaff().get(4);
  checkEmployee(employee,""String_Node_Str"",new Integer(35),new Double(2800.0),new Double(0.20));
  department=(Department)departments.get(1);
  checkDepartmentInfo(department,""String_Node_Str"",""String_Node_Str"",new Integer(37),new Double(2200.0),new Double(0.30));
  assertEquals(4,department.getStaff().size());
  employee=(Employee)department.getStaff().get(0);
  checkEmployee(employee,""String_Node_Str"",new Integer(26),new Double(1400.0),new Double(0.20));
  employee=(Employee)department.getStaff().get(1);
  checkEmployee(employee,""String_Node_Str"",new Integer(30),new Double(2100.0),new Double(0.10));
  employee=(Employee)department.getStaff().get(2);
  checkEmployee(employee,""String_Node_Str"",new Integer(24),new Double(1800.0),new Double(0.15));
  employee=(Employee)department.getStaff().get(3);
  checkEmployee(employee,""String_Node_Str"",new Integer(34),new Double(1900.0),new Double(0.15));
  department=(Department)departments.get(2);
  checkDepartmentInfo(department,""String_Node_Str"",""String_Node_Str"",new Integer(35),new Double(2900.0),new Double(0.35));
  assertEquals(4,department.getStaff().size());
  employee=(Employee)department.getStaff().get(0);
  checkEmployee(employee,""String_Node_Str"",new Integer(30),new Double(2400.0),new Double(0.20));
  employee=(Employee)department.getStaff().get(1);
  checkEmployee(employee,""String_Node_Str"",new Integer(32),new Double(2200.0),new Double(0.15));
  employee=(Employee)department.getStaff().get(2);
  checkEmployee(employee,""String_Node_Str"",new Integer(28),new Double(2600.0),new Double(0.10));
  employee=(Employee)department.getStaff().get(3);
  checkEmployee(employee,""String_Node_Str"",new Integer(33),new Double(2150.0),new Double(0.25));
}",0.9990061617968596
81534,"public void testRead() throws IOException {
  InputStream inputXLS=new BufferedInputStream(getClass().getResourceAsStream(dataXLS));
  POIFSFileSystem fsInput=new POIFSFileSystem(inputXLS);
  HSSFWorkbook hssfInputWorkbook=new HSSFWorkbook(fsInput);
  HSSFSheet sheet=hssfInputWorkbook.getSheetAt(0);
  List mappings=new ArrayList();
  Department department=new Department();
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",department);
  mappings.add(new BeanCellMapping(7,(short)0,""String_Node_Str"",""String_Node_Str""));
  mappings.add(new BeanCellMapping(7,(short)1,""String_Node_Str"",""String_Node_Str""));
  mappings.add(new BeanCellMapping(7,(short)3,""String_Node_Str"",""String_Node_Str""));
  mappings.add(new BeanCellMapping(7,(short)4,""String_Node_Str"",""String_Node_Str""));
  XLSBlockReader reader=new SimpleBlockReaderImpl(7,7,mappings);
  XLSRowCursor cursor=new XLSRowCursorImpl(sheet);
  XLSLoopBlockReader forEachReader=new XLSForEachBlockReaderImpl(7,7,""String_Node_Str"",""String_Node_Str"",Employee.class);
  forEachReader.addBlockReader(reader);
  SectionCheck loopBreakCheck=getLoopBreakCheck();
  forEachReader.setLoopBreakCondition(loopBreakCheck);
  cursor.setCurrentRowNum(7);
  forEachReader.read(cursor,beans);
  assertEquals(4,department.getStaff().size());
  Employee employee=(Employee)department.getStaff().get(0);
  checkEmployee(employee,""String_Node_Str"",new Integer(32),new Double(2000.0),new Double(0.20));
  employee=(Employee)department.getStaff().get(1);
  checkEmployee(employee,""String_Node_Str"",new Integer(29),new Double(1800.0),new Double(0.15));
  employee=(Employee)department.getStaff().get(2);
  checkEmployee(employee,""String_Node_Str"",new Integer(30),new Double(1700.0),new Double(0.20));
  employee=(Employee)department.getStaff().get(3);
  checkEmployee(employee,""String_Node_Str"",new Integer(28),new Double(1600.0),new Double(0.20));
}","public void testRead() throws IOException {
  InputStream inputXLS=new BufferedInputStream(getClass().getResourceAsStream(departmentDataXLS));
  POIFSFileSystem fsInput=new POIFSFileSystem(inputXLS);
  HSSFWorkbook hssfInputWorkbook=new HSSFWorkbook(fsInput);
  HSSFSheet sheet=hssfInputWorkbook.getSheetAt(0);
  List mappings=new ArrayList();
  Department department=new Department();
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",department);
  mappings.add(new BeanCellMapping(7,(short)0,""String_Node_Str"",""String_Node_Str""));
  mappings.add(new BeanCellMapping(7,(short)1,""String_Node_Str"",""String_Node_Str""));
  mappings.add(new BeanCellMapping(7,(short)3,""String_Node_Str"",""String_Node_Str""));
  mappings.add(new BeanCellMapping(7,(short)4,""String_Node_Str"",""String_Node_Str""));
  XLSBlockReader reader=new SimpleBlockReaderImpl(7,7,mappings);
  XLSRowCursor cursor=new XLSRowCursorImpl(sheet);
  XLSLoopBlockReader forEachReader=new XLSForEachBlockReaderImpl(7,7,""String_Node_Str"",""String_Node_Str"",Employee.class);
  forEachReader.addBlockReader(reader);
  SectionCheck loopBreakCheck=getLoopBreakCheck();
  forEachReader.setLoopBreakCondition(loopBreakCheck);
  cursor.setCurrentRowNum(7);
  forEachReader.read(cursor,beans);
  assertEquals(4,department.getStaff().size());
  Employee employee=(Employee)department.getStaff().get(0);
  checkEmployee(employee,""String_Node_Str"",new Integer(32),new Double(2000.0),new Double(0.20));
  employee=(Employee)department.getStaff().get(1);
  checkEmployee(employee,""String_Node_Str"",new Integer(29),new Double(1800.0),new Double(0.15));
  employee=(Employee)department.getStaff().get(2);
  checkEmployee(employee,""String_Node_Str"",new Integer(30),new Double(1700.0),new Double(0.20));
  employee=(Employee)department.getStaff().get(3);
  checkEmployee(employee,""String_Node_Str"",new Integer(28),new Double(1600.0),new Double(0.20));
}",0.997355896351137
81535,"private ResultTransformation processOneRowTag(SheetTransformer sheetTransformer){
  Block body=tagContext.getTagBody();
  int shiftNumber=0;
  if (itemsCollection != null && !itemsCollection.isEmpty()) {
    tagContext.getSheetTransformationController().removeLeftRightBorders(body);
    shiftNumber+=-2;
    Map beans=tagContext.getBeans();
    ResultTransformation shift=new ResultTransformation();
    shift.setLastProcessedRow(-1);
    if (groupBy == null || groupBy.length() == 0) {
      shiftNumber+=tagContext.getSheetTransformationController().duplicateRight(body,itemsCollection.size() - 1);
      processCollectionItemsOneRow(beans,body,shift,sheetTransformer);
    }
 else {
      try {
        Collection groupedData=ReportUtil.groupCollectionData(itemsCollection,groupBy,groupOrder,select,configuration);
        shiftNumber+=tagContext.getSheetTransformationController().duplicateRight(body,groupedData.size() - 1);
        Object savedGroupData=null;
        if (beans.containsKey(GROUP_DATA_KEY)) {
          savedGroupData=beans.get(GROUP_DATA_KEY);
        }
        processGroupedDataOneRow(groupedData,beans,body,shift,sheetTransformer);
        beans.remove(GROUP_DATA_KEY);
        if (savedGroupData != null) {
          beans.put(GROUP_DATA_KEY,savedGroupData);
        }
      }
 catch (      NoSuchMethodException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      IllegalAccessException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      InvocationTargetException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
    }
    shift.addRightShift((short)shiftNumber);
    shift.setTagProcessResult(true);
    return shift;
  }
 else {
    log.warn(""String_Node_Str"" + items + ""String_Node_Str"");
    tagContext.getSheetTransformationController().removeBodyRows(body);
    ResultTransformation shift=new ResultTransformation(0);
    shift.add(new ResultTransformation(-1,-body.getNumberOfRows()));
    shift.setLastProcessedRow(-1);
    shift.setTagProcessResult(true);
    return shift;
  }
}","private ResultTransformation processOneRowTag(SheetTransformer sheetTransformer){
  Block body=tagContext.getTagBody();
  int shiftNumber=0;
  if (itemsCollection != null && !itemsCollection.isEmpty()) {
    tagContext.getSheetTransformationController().removeLeftRightBorders(body);
    shiftNumber+=-2;
    Map beans=tagContext.getBeans();
    ResultTransformation shift=new ResultTransformation();
    shift.setLastProcessedRow(-1);
    if (groupBy == null || groupBy.length() == 0) {
      shiftNumber+=tagContext.getSheetTransformationController().duplicateRight(body,itemsCollection.size() - 1);
      processCollectionItemsOneRow(beans,body,shift,sheetTransformer);
    }
 else {
      try {
        Collection groupedData=ReportUtil.groupCollectionData(itemsCollection,groupBy,groupOrder,select,configuration);
        shiftNumber+=tagContext.getSheetTransformationController().duplicateRight(body,groupedData.size() - 1);
        Object savedGroupData=null;
        if (beans.containsKey(GROUP_DATA_KEY)) {
          savedGroupData=beans.get(GROUP_DATA_KEY);
        }
        processGroupedDataOneRow(groupedData,beans,body,shift,sheetTransformer);
        beans.remove(GROUP_DATA_KEY);
        if (savedGroupData != null) {
          beans.put(GROUP_DATA_KEY,savedGroupData);
        }
      }
 catch (      NoSuchMethodException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      IllegalAccessException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      InvocationTargetException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
    }
    shift.addRightShift((short)shiftNumber);
    shift.setTagProcessResult(true);
    return shift;
  }
 else {
    log.warn(""String_Node_Str"" + items + ""String_Node_Str"");
    HSSFRow currentRow=tagContext.getSheet().getHssfSheet().getRow(body.getStartRowNum());
    tagContext.getSheetTransformationController().removeRowCells(currentRow,body.getStartCellNum(),body.getEndCellNum());
    ResultTransformation shift=new ResultTransformation(0);
    shift.add(new ResultTransformation((short)-body.getNumberOfColumns(),(short)(-body.getNumberOfColumns())));
    shift.setLastProcessedRow(-1);
    shift.setTagProcessResult(true);
    return shift;
  }
}",0.8758434547908233
81536,"public void testDynamicColumns() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  List cols=new ArrayList();
  String[] colNames=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < colNames.length; i++) {
    String colName=colNames[i];
    cols.add(new Column(colName));
  }
  beans.put(""String_Node_Str"",cols);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(dynamicColumnsXLS));
  XLSTransformer transformer=new XLSTransformer();
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(dynamicColumnsXLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  HSSFSheet sourceSheet=sourceWorkbook.getSheetAt(0);
  HSSFSheet resultSheet=resultWorkbook.getSheetAt(0);
  Map props=new HashMap();
  props.put(""String_Node_Str"",colNames[0]);
  CellsChecker checker=new CellsChecker(props);
  checker.checkCells(sourceSheet,resultSheet,0,(short)1,0,(short)0,true);
  props.put(""String_Node_Str"",colNames[1]);
  checker.checkCells(sourceSheet,resultSheet,0,(short)1,0,(short)1,true);
  props.put(""String_Node_Str"",colNames[2]);
  checker.checkCells(sourceSheet,resultSheet,0,(short)1,0,(short)2,true);
  is.close();
  saveWorkbook(resultWorkbook,dynamicColumnsDestXLS);
}","public void testDynamicColumns() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  List cols=new ArrayList();
  String[] colNames=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < colNames.length; i++) {
    String colName=colNames[i];
    cols.add(new Column(colName));
  }
  beans.put(""String_Node_Str"",cols);
  List list=new ArrayList();
  list.add(new Item(""String_Node_Str"",new int[]{1,2,3}));
  list.add(new Item(""String_Node_Str"",new int[]{}));
  list.add(new Item(""String_Node_Str"",new int[]{4,5,6}));
  list.add(new Item(""String_Node_Str"",new int[]{}));
  beans.put(""String_Node_Str"",list);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(dynamicColumnsXLS));
  XLSTransformer transformer=new XLSTransformer();
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(dynamicColumnsXLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  HSSFSheet sourceSheet=sourceWorkbook.getSheetAt(0);
  HSSFSheet resultSheet=resultWorkbook.getSheetAt(0);
  Map props=new HashMap();
  props.put(""String_Node_Str"",colNames[0]);
  CellsChecker checker=new CellsChecker(props);
  checker.checkCells(sourceSheet,resultSheet,0,(short)1,0,(short)0,true);
  props.put(""String_Node_Str"",colNames[1]);
  checker.checkCells(sourceSheet,resultSheet,0,(short)1,0,(short)1,true);
  props.put(""String_Node_Str"",colNames[2]);
  checker.checkCells(sourceSheet,resultSheet,0,(short)1,0,(short)2,true);
  is.close();
  saveWorkbook(resultWorkbook,dynamicColumnsDestXLS);
}",0.9057591623036648
81537,"public Item(String name){
  attributes.add(name + ""String_Node_Str"");
  attributes.add(name + ""String_Node_Str"");
}","public Item(String key,int[] _values){
  this.key=key;
  for (int i=0; i < _values.length; i++) {
    values.add(Integer.valueOf(_values[i]));
  }
}",0.3726235741444867
81538,"public void removeBodyRows(Block block){
  if (block.getSheet() == null) {
    block.setSheet(sheet);
  }
  transformations.add(new RemoveTransformation(block));
  ShiftTransformation shiftTransformation=new ShiftTransformation(new Block(sheet,block.getEndRowNum() + 1,Integer.MAX_VALUE),-block.getNumberOfRows(),0);
  transformations.add(shiftTransformation);
  formulaController.updateWorkbookFormulas(shiftTransformation);
  TagBodyHelper.removeBodyRows(sheet.getHssfSheet(),block);
}","public void removeBodyRows(Block block){
  if (block.getSheet() == null) {
    block.setSheet(sheet);
  }
  RemoveTransformation removeTransformation=new RemoveTransformation(block);
  transformations.add(removeTransformation);
  ShiftTransformation shiftTransformation=new ShiftTransformation(new Block(sheet,block.getEndRowNum() + 1,Integer.MAX_VALUE),-block.getNumberOfRows(),0);
  transformations.add(shiftTransformation);
  formulaController.updateWorkbookFormulas(removeTransformation);
  formulaController.updateWorkbookFormulas(shiftTransformation);
  TagBodyHelper.removeBodyRows(sheet.getHssfSheet(),block);
}",0.8444846292947559
81539,"public void updateWorkbookFormulas(BlockTransformation transformation){
  Set sheetNames=sheetFormulasMap.keySet();
  Formula formula, newFormula;
  Set cellRefs, newCellRefs;
  CellRef cellRef, newCellRef;
  List resultCells;
  String newCell;
  Point p, point, newPoint;
  for (Iterator iterator=sheetNames.iterator(); iterator.hasNext(); ) {
    String sheetName=(String)iterator.next();
    List formulas=(List)sheetFormulasMap.get(sheetName);
    for (int i=0, size=formulas.size(); i < size; i++) {
      formula=(Formula)formulas.get(i);
      cellRefs=formula.getCellRefs();
      for (Iterator iter=cellRefs.iterator(); iter.hasNext(); ) {
        cellRef=(CellRef)iter.next();
        if (!(transformation instanceof DuplicateTransformation && transformation.getBlock().contains(cellRef) && transformation.getBlock().contains(formula.getRowNum().intValue(),formula.getCellNum().intValue()))) {
          resultCells=transformation.transformCell(sheetName,cellRef);
          if (resultCells.size() == 1) {
            newCell=(String)resultCells.get(0);
            cellRef.update(newCell);
          }
 else           if (resultCells.size() > 1) {
            cellRef.update(resultCells);
          }
        }
      }
      formula.updateReplacedRefCellsCollection();
      if (formula.getSheet().getSheetName().equals(transformation.getBlock().getSheet().getSheetName())) {
        p=new Point(formula.getRowNum().intValue(),formula.getCellNum().shortValue());
        List points=transformation.transformCell(p);
        if (points != null && !points.isEmpty()) {
          if (points.size() == 1) {
            newPoint=(Point)points.get(0);
            formula.setRowNum(new Integer(newPoint.getRow()));
            formula.setCellNum(new Integer(newPoint.getCol()));
          }
 else {
            List sheetFormulas=(List)sheetFormulasMap.get(formula.getSheet().getSheetName());
            for (int j=1, num=points.size(); j < num; j++) {
              point=(Point)points.get(j);
              newFormula=new Formula(formula);
              newFormula.setRowNum(new Integer(point.getRow()));
              newFormula.setCellNum(new Integer(point.getCol()));
              newCellRefs=newFormula.getCellRefs();
              for (Iterator iterator1=newCellRefs.iterator(); iterator1.hasNext(); ) {
                newCellRef=(CellRef)iterator1.next();
                if (transformation.getBlock().contains(newCellRef) && transformation.getBlock().contains(p)) {
                  newCellRef.update(((DuplicateTransformation)transformation).getDuplicatedCellRef(sheetName,newCellRef.toString(),j));
                }
              }
              sheetFormulas.add(newFormula);
            }
          }
        }
      }
    }
  }
}","public void updateWorkbookFormulas(BlockTransformation transformation){
  Set sheetNames=sheetFormulasMap.keySet();
  Formula formula, newFormula;
  Set cellRefs, newCellRefs;
  CellRef cellRef, newCellRef;
  List resultCells;
  String newCell;
  Point p, point, newPoint;
  Set cellRefsToRemove=new HashSet();
  Set formulasToRemove=new HashSet();
  for (Iterator iterator=sheetNames.iterator(); iterator.hasNext(); ) {
    String sheetName=(String)iterator.next();
    List formulas=(List)sheetFormulasMap.get(sheetName);
    formulasToRemove.clear();
    for (int i=0, size=formulas.size(); i < size; i++) {
      formula=(Formula)formulas.get(i);
      cellRefs=formula.getCellRefs();
      cellRefsToRemove.clear();
      for (Iterator iter=cellRefs.iterator(); iter.hasNext(); ) {
        cellRef=(CellRef)iter.next();
        if (!(transformation instanceof DuplicateTransformation && transformation.getBlock().contains(cellRef) && transformation.getBlock().contains(formula.getRowNum().intValue(),formula.getCellNum().intValue()))) {
          resultCells=transformation.transformCell(sheetName,cellRef);
          if (resultCells != null) {
            if (resultCells.size() == 1) {
              newCell=(String)resultCells.get(0);
              cellRef.update(newCell);
            }
 else             if (resultCells.size() > 1) {
              cellRef.update(resultCells);
            }
          }
 else {
            cellRefsToRemove.add(cellRef);
          }
        }
      }
      if (!cellRefsToRemove.isEmpty()) {
        formula.removeCellRefs(cellRefsToRemove);
      }
      formula.updateReplacedRefCellsCollection();
      if (formula.getSheet().getSheetName().equals(transformation.getBlock().getSheet().getSheetName())) {
        p=new Point(formula.getRowNum().intValue(),formula.getCellNum().shortValue());
        List points=transformation.transformCell(p);
        if (points != null && !points.isEmpty()) {
          if (points.size() == 1) {
            newPoint=(Point)points.get(0);
            formula.setRowNum(new Integer(newPoint.getRow()));
            formula.setCellNum(new Integer(newPoint.getCol()));
          }
 else {
            List sheetFormulas=(List)sheetFormulasMap.get(formula.getSheet().getSheetName());
            for (int j=1, num=points.size(); j < num; j++) {
              point=(Point)points.get(j);
              newFormula=new Formula(formula);
              newFormula.setRowNum(new Integer(point.getRow()));
              newFormula.setCellNum(new Integer(point.getCol()));
              newCellRefs=newFormula.getCellRefs();
              for (Iterator iterator1=newCellRefs.iterator(); iterator1.hasNext(); ) {
                newCellRef=(CellRef)iterator1.next();
                if (transformation.getBlock().contains(newCellRef) && transformation.getBlock().contains(p)) {
                  newCellRef.update(((DuplicateTransformation)transformation).getDuplicatedCellRef(sheetName,newCellRef.toString(),j));
                }
              }
              sheetFormulas.add(newFormula);
            }
          }
        }
 else {
          if (points == null) {
            formulasToRemove.add(formula);
          }
        }
      }
    }
    formulas.removeAll(formulasToRemove);
  }
}",0.9152260638297872
81540,"private void parseTag(String tagName,Block tagBody,Map beans){
  Digester digester=new Digester();
  digester.setNamespaceAware(true);
  digester.setRuleNamespaceURI(Configuration.NAMESPACE_URI);
  digester.setValidating(false);
  Set tagKeys=Taglib.getTags().keySet();
  for (Iterator iterator=tagKeys.iterator(); iterator.hasNext(); ) {
    String tagKey=(String)iterator.next();
    digester.addObjectCreate(Configuration.JXLS_ROOT_TAG + ""String_Node_Str"" + tagKey,(String)Taglib.getTags().get(tagKey));
    digester.addSetProperties(Configuration.JXLS_ROOT_TAG + ""String_Node_Str"" + tagKey);
  }
  try {
    String xml=Configuration.JXLS_ROOT_START + cell.getHssfCellValue() + ""String_Node_Str""+ configuration.getTagPrefix()+ tagName+ ""String_Node_Str""+ Configuration.JXLS_ROOT_END;
    String escapedXml=Util.escapeAttributes(xml);
    Tag tag=(Tag)digester.parse(new StringReader(escapedXml));
    cell.setTag(tag);
    TagContext tagContext=new TagContext(cell.getRow().getSheet(),tagBody,beans);
    tag.init(tagContext);
  }
 catch (  IOException e) {
    log.warn(""String_Node_Str"" + cell.getHssfCellValue(),e);
  }
catch (  SAXException e) {
    log.warn(""String_Node_Str"" + cell.getHssfCellValue(),e);
  }
}","private void parseTag(String tagName,Block tagBody,Map beans){
  Digester digester=new Digester();
  digester.setNamespaceAware(true);
  digester.setRuleNamespaceURI(Configuration.NAMESPACE_URI);
  digester.setValidating(false);
  Set tagKeys=Taglib.getTagMap().keySet();
  for (Iterator iterator=tagKeys.iterator(); iterator.hasNext(); ) {
    String tagKey=(String)iterator.next();
    digester.addObjectCreate(Configuration.JXLS_ROOT_TAG + ""String_Node_Str"" + tagKey,(String)Taglib.getTagMap().get(tagKey));
    digester.addSetProperties(Configuration.JXLS_ROOT_TAG + ""String_Node_Str"" + tagKey);
  }
  try {
    String xml=Configuration.JXLS_ROOT_START + cell.getHssfCellValue() + ""String_Node_Str""+ configuration.getTagPrefix()+ tagName+ ""String_Node_Str""+ Configuration.JXLS_ROOT_END;
    String escapedXml=Util.escapeAttributes(xml);
    Tag tag=(Tag)digester.parse(new StringReader(escapedXml));
    cell.setTag(tag);
    TagContext tagContext=new TagContext(cell.getRow().getSheet(),tagBody,beans);
    tag.init(tagContext);
  }
 catch (  IOException e) {
    log.warn(""String_Node_Str"" + cell.getHssfCellValue(),e);
  }
catch (  SAXException e) {
    log.warn(""String_Node_Str"" + cell.getHssfCellValue(),e);
  }
}",0.9967239967239968
81541,"public List transformCell(String sheetName,CellRef cellRef){
  return null;
}","public List transformCell(String sheetName,CellRef cellRef){
  List cells=null;
  String refSheetName=cellRef.getSheetName();
  if (block.getSheet().getSheetName().equalsIgnoreCase(refSheetName) || (cellRef.getSheetName() == null && block.getSheet().getSheetName().equalsIgnoreCase(sheetName))) {
    if (!block.contains(cellRef.getRowNum(),cellRef.getColNum())) {
      cells=new ArrayList();
      cells.add(cellRef.toString());
    }
  }
 else {
    cells=new ArrayList();
    cells.add(cellRef.toString());
  }
  return cells;
}",0.2101806239737274
81542,"public void registerTaglib(String prefix,Taglib taglib){
  if (taglibs.containsKey(prefix)) {
    throw new TaglibRegistrationException(""String_Node_Str"" + prefix + ""String_Node_Str"");
  }
 else {
    taglibs.put(prefix,taglib);
  }
}","public void registerTaglib(String taglibFileName){
  TaglibXMLParser parser=new TaglibXMLParser();
  Taglib taglib=parser.parseTaglibXMLFile(taglibFileName);
}",0.3307888040712468
81543,"private static void prepareCollectionPropertyInCellForDuplication(HSSFCell cell,String collectionName,String collectionItemName){
  if (cell != null && cell.getCellType() == HSSFCell.CELL_TYPE_STRING) {
    String cellValue=cell.getStringCellValue();
    String newValue=cellValue.replaceAll(collectionName,collectionItemName);
    cell.setCellValue(newValue);
  }
}","private static void prepareCollectionPropertyInCellForDuplication(HSSFCell cell,String collectionName,String collectionItemName){
  if (cell != null && cell.getCellType() == HSSFCell.CELL_TYPE_STRING) {
    String cellValue=cell.getStringCellValue();
    String newValue=replaceCollectionProperty(cellValue,collectionName,collectionItemName);
    cell.setCellValue(newValue);
  }
}",0.923694779116466
81544,"protected void setUp() throws Exception {
  super.setUp();
  simpleBean1=new SimpleBean(names[0].toString(),(Double)doubleValues[0],(Integer)intValues[0],(Date)dateValues[0]);
  simpleBean2=new SimpleBean(names[1].toString(),(Double)doubleValues[1],(Integer)intValues[1],(Date)dateValues[1]);
  simpleBean3=new SimpleBean(names[2].toString(),(Double)doubleValues[2],(Integer)intValues[2],(Date)dateValues[2]);
  listBean2.addBean(new SimpleBean(names2[0].toString(),(Double)doubleValues2[0],(Integer)intValues2[0]));
  listBean2.addBean(new SimpleBean(names2[1].toString(),(Double)doubleValues2[1],(Integer)intValues2[1]));
  listBean2.addBean(new SimpleBean(names2[2].toString(),(Double)doubleValues2[2],(Integer)intValues2[2]));
  listBean2.addBean(new SimpleBean(names2[3].toString(),(Double)doubleValues2[3],(Integer)intValues2[3]));
  listBean2.addBean(new SimpleBean(names2[4].toString(),(Double)doubleValues2[4],(Integer)intValues2[4]));
  listBean2.addBean(new SimpleBean(names2[5].toString(),(Double)doubleValues2[5],(Integer)intValues2[5]));
  listBean2.addBean(new SimpleBean(names2[6].toString(),(Double)doubleValues2[6],(Integer)intValues2[6]));
  simpleBean1.setOther(simpleBean2);
  simpleBean2.setOther(simpleBean3);
  beanWithList=new BeanWithList(""String_Node_Str"",new Double(1976.1202));
  beans.add(simpleBean1);
  beans.add(simpleBean2);
  beans.add(simpleBean3);
  listBean1.addBean(simpleBean1);
  listBean1.addBean(simpleBean2);
  listBean1.addBean(simpleBean3);
  Department department=new Department(""String_Node_Str"");
  for (int i=0; i < itEmployeeNames.length; i++) {
    Employee employee=new Employee(itEmployeeNames[i],itAges[i],itPayments[i],itBonuses[i]);
    employee.setNotes(generateNotes(employee.getName()));
    department.addEmployee(employee);
    itEmployees.add(employee);
  }
  departments.add(department);
  department=new Department(""String_Node_Str"");
  for (int i=0; i < hrEmployeeNames.length; i++) {
    department.addEmployee(new Employee(hrEmployeeNames[i],hrAges[i],hrPayments[i],hrBonuses[i]));
  }
  departments.add(department);
  department=new Department(""String_Node_Str"");
  for (int i=0; i < baEmployeeNames.length; i++) {
    department.addEmployee(new Employee(baEmployeeNames[i],baAges[i],baPayments[i],baBonuses[i]));
  }
  departments.add(department);
  beanWithList.setBeans(beans);
  propertyMap.put(""String_Node_Str"",simpleBean1.getName());
  propertyMap.put(""String_Node_Str"",simpleBean1.getDoubleValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getIntValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getDateValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getName());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getIntValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getDoubleValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getDateValue());
  propertyMap.put(""String_Node_Str"",beanWithList.getName());
}","protected void setUp() throws Exception {
  super.setUp();
  simpleBean1=new SimpleBean(names[0].toString(),(Double)doubleValues[0],(Integer)intValues[0],(Date)dateValues[0]);
  simpleBean2=new SimpleBean(names[1].toString(),(Double)doubleValues[1],(Integer)intValues[1],(Date)dateValues[1]);
  simpleBean3=new SimpleBean(names[2].toString(),(Double)doubleValues[2],(Integer)intValues[2],(Date)dateValues[2]);
  listBean2.addBean(new SimpleBean(names2[0].toString(),(Double)doubleValues2[0],(Integer)intValues2[0]));
  listBean2.addBean(new SimpleBean(names2[1].toString(),(Double)doubleValues2[1],(Integer)intValues2[1]));
  listBean2.addBean(new SimpleBean(names2[2].toString(),(Double)doubleValues2[2],(Integer)intValues2[2]));
  listBean2.addBean(new SimpleBean(names2[3].toString(),(Double)doubleValues2[3],(Integer)intValues2[3]));
  listBean2.addBean(new SimpleBean(names2[4].toString(),(Double)doubleValues2[4],(Integer)intValues2[4]));
  listBean2.addBean(new SimpleBean(names2[5].toString(),(Double)doubleValues2[5],(Integer)intValues2[5]));
  listBean2.addBean(new SimpleBean(names2[6].toString(),(Double)doubleValues2[6],(Integer)intValues2[6]));
  simpleBean1.setOther(simpleBean2);
  simpleBean2.setOther(simpleBean3);
  beanWithList=new BeanWithList(""String_Node_Str"",new Double(1976.1202));
  beans.add(simpleBean1);
  beans.add(simpleBean2);
  beans.add(simpleBean3);
  listBean1.addBean(simpleBean1);
  listBean1.addBean(simpleBean2);
  listBean1.addBean(simpleBean3);
  Department department=new Department(""String_Node_Str"");
  for (int i=0; i < itEmployeeNames.length; i++) {
    Employee employee=new Employee(itEmployeeNames[i],itAges[i],itPayments[i],itBonuses[i]);
    employee.setNotes(generateNotes(employee.getName()));
    department.addEmployee(employee);
    itEmployees.add(employee);
  }
  departments.add(department);
  department=new Department(""String_Node_Str"");
  for (int i=0; i < hrEmployeeNames.length; i++) {
    department.addEmployee(new Employee(hrEmployeeNames[i],hrAges[i],hrPayments[i],hrBonuses[i]));
  }
  departments.add(department);
  department=new Department(""String_Node_Str"");
  for (int i=0; i < baEmployeeNames.length; i++) {
    department.addEmployee(new Employee(baEmployeeNames[i],baAges[i],baPayments[i],baBonuses[i]));
  }
  departments.add(department);
  beanWithList.setBeans(beans);
  propertyMap.put(""String_Node_Str"",simpleBean1.getName());
  propertyMap.put(""String_Node_Str"",simpleBean1.getDoubleValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getIntValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getDateValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getName());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getIntValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getDoubleValue());
  propertyMap.put(""String_Node_Str"",simpleBean1.getOther().getDateValue());
  propertyMap.put(""String_Node_Str"",beanWithList.getName());
  for (int i=0; i < amounts.length; i++) {
    int amount=amounts[i];
    amountBeans.add(new SimpleBean(amount));
  }
}",0.9803468208092484
81545,"public void testFormulas() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",beanWithList);
  beans.put(""String_Node_Str"",departments);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(formulasXLS));
  XLSTransformer transformer=new XLSTransformer();
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(formulasXLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  HSSFSheet sourceSheet=sourceWorkbook.getSheetAt(0);
  HSSFSheet resultSheet=resultWorkbook.getSheetAt(0);
  assertEquals(""String_Node_Str"",sourceSheet.getFirstRowNum(),resultSheet.getFirstRowNum());
  Map props=new HashMap();
  props.put(""String_Node_Str"",beanWithList.getName());
  CellsChecker checker=new CellsChecker(props);
  checker.checkRows(sourceSheet,resultSheet,0,0,3);
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)0,names);
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)1,doubleValues);
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)2,new Object[]{new Integer(123),new Integer(10234)});
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)3,dateValues);
  checker.checkFormulaCell(sourceSheet,4,resultSheet,6,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,4,resultSheet,6,(short)2,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,6,resultSheet,8,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,3,resultSheet,3,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,3,resultSheet,4,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,3,resultSheet,5,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,4,resultSheet,6,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,8,resultSheet,10,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,8,resultSheet,10,(short)2,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,8,resultSheet,10,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,10,resultSheet,12,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,23,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,32,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,40,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,23,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,32,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,40,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,22,resultSheet,41,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,22,resultSheet,41,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,18,resultSheet,18,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,18,resultSheet,22,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,18,resultSheet,28,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,19,resultSheet,31,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,19,resultSheet,37,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,19,resultSheet,39,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,24,resultSheet,43,(short)1,""String_Node_Str"");
  sourceSheet=sourceWorkbook.getSheetAt(1);
  resultSheet=resultWorkbook.getSheetAt(1);
  checker.checkFormulaCell(sourceSheet,0,resultSheet,0,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,0,resultSheet,0,(short)2,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,0,resultSheet,0,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,2,resultSheet,2,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,4,resultSheet,4,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,15,resultSheet,24,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,15,resultSheet,40,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,15,resultSheet,53,(short)1,""String_Node_Str"");
  is.close();
  saveWorkbook(resultWorkbook,formulasDestXLS);
}","public void testFormulas() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",beanWithList);
  beans.put(""String_Node_Str"",departments);
  beans.put(""String_Node_Str"",amountBeans);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(formulasXLS));
  XLSTransformer transformer=new XLSTransformer();
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(formulasXLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  HSSFSheet sourceSheet=sourceWorkbook.getSheetAt(0);
  HSSFSheet resultSheet=resultWorkbook.getSheetAt(0);
  assertEquals(""String_Node_Str"",sourceSheet.getFirstRowNum(),resultSheet.getFirstRowNum());
  Map props=new HashMap();
  props.put(""String_Node_Str"",beanWithList.getName());
  CellsChecker checker=new CellsChecker(props);
  checker.checkRows(sourceSheet,resultSheet,0,0,3);
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)0,names);
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)1,doubleValues);
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)2,new Object[]{new Integer(123),new Integer(10234)});
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)3,dateValues);
  checker.checkFormulaCell(sourceSheet,4,resultSheet,6,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,4,resultSheet,6,(short)2,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,6,resultSheet,8,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,3,resultSheet,3,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,3,resultSheet,4,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,3,resultSheet,5,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,4,resultSheet,6,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,8,resultSheet,10,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,8,resultSheet,10,(short)2,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,8,resultSheet,10,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,10,resultSheet,12,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,23,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,32,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,40,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,23,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,32,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,40,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,22,resultSheet,41,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,22,resultSheet,41,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,18,resultSheet,18,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,18,resultSheet,22,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,18,resultSheet,28,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,19,resultSheet,31,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,19,resultSheet,37,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,19,resultSheet,39,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,24,resultSheet,43,(short)1,""String_Node_Str"");
  sourceSheet=sourceWorkbook.getSheetAt(1);
  resultSheet=resultWorkbook.getSheetAt(1);
  checker.checkFormulaCell(sourceSheet,0,resultSheet,0,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,0,resultSheet,0,(short)2,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,0,resultSheet,0,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,2,resultSheet,2,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,4,resultSheet,4,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,15,resultSheet,24,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,15,resultSheet,40,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,15,resultSheet,53,(short)1,""String_Node_Str"");
  is.close();
  saveWorkbook(resultWorkbook,formulasDestXLS);
}",0.99496336996337
81546,"public SimpleBean(String name,Double doubleValue,Integer intValue){
  this.name=name;
  this.doubleValue=doubleValue;
  this.intValue=intValue;
}","public SimpleBean(int amount){
  this.amount=amount;
}",0.4522613065326633
81547,"void transformSheet(WorkbookTransformationController workbookTransformationController,Sheet sheet,Map beans) throws ParsePropertyException {
  log.info(""String_Node_Str"" + sheet.getSheetName());
  if (!beans.isEmpty()) {
    SheetTransformationController stc=new SheetTransformationControllerImpl(sheet);
    workbookTransformationController.addSheetTransformationController(stc);
    for (int i=sheet.getHssfSheet().getFirstRowNum(); i <= sheet.getHssfSheet().getLastRowNum(); i++) {
      HSSFRow hssfRow=sheet.getHssfSheet().getRow(i);
      if (hssfRow != null) {
        RowTransformer rowTransformer=parseRow(sheet,hssfRow,beans);
        if (rowTransformer != null) {
          Row row=rowTransformer.getRow();
          applyRowProcessors(sheet,row);
          ResultTransformation processResult=rowTransformer.transform(stc,this,beans);
          transformers.add(rowTransformer);
          if (!processResult.isTagProcessResult()) {
            i+=processResult.getNextRowShift();
          }
 else {
            if (processResult.getLastProcessedRow() >= 0) {
              i=processResult.getLastProcessedRow();
            }
          }
        }
      }
    }
    groupRows(sheet);
  }
}","void transformSheet(WorkbookTransformationController workbookTransformationController,Sheet sheet,Map beans) throws ParsePropertyException {
  log.info(""String_Node_Str"" + sheet.getSheetName());
  if (!beans.isEmpty()) {
    SheetTransformationController stc=new SheetTransformationControllerImpl(sheet);
    workbookTransformationController.addSheetTransformationController(stc);
    for (int i=sheet.getHssfSheet().getFirstRowNum(); i <= sheet.getHssfSheet().getLastRowNum(); i++) {
      HSSFRow hssfRow=sheet.getHssfSheet().getRow(i);
      if (hssfRow != null) {
        RowTransformer rowTransformer=parseRow(sheet,hssfRow,beans);
        if (rowTransformer != null) {
          Row row=rowTransformer.getRow();
          applyRowProcessors(sheet,row);
          ResultTransformation processResult=rowTransformer.transform(stc,this,beans);
          transformers.add(rowTransformer);
          if (!processResult.isTagProcessResult()) {
            i+=processResult.getNextRowShift();
          }
 else {
            if (processResult.getLastProcessedRow() >= 0) {
              i=processResult.getLastProcessedRow();
            }
 else {
              i--;
            }
          }
        }
      }
    }
    groupRows(sheet);
  }
}",0.9832173557101924
81548,"/** 
 * Processes rows in a template sheet using map of beans as parameter
 * @param stc - {@link SheetTransformationController} corresponding to the sheet containing given rows
 * @param sheet {@link net.sf.jxls.transformer.Sheet} object
 * @param startRow Row to start processing
 * @param endRow   Last row to be processed
 * @param beans    Beans for substitution
 * @param parentRow - {@link Row} object representing original template row linked to rows to process
 * @return A number of rows to be shifted
 * @throws ParsePropertyException
 */
public ResultTransformation processRows(SheetTransformationController stc,Sheet sheet,int startRow,int endRow,Map beans,Row parentRow) throws ParsePropertyException {
  int origEndRow=endRow;
  int nextRowShiftNumber=0;
  boolean hasTagProcessing=false;
  int lastProcessedRow=-1;
  for (int i=startRow; i <= endRow; i++) {
    HSSFRow hssfRow=sheet.getHssfSheet().getRow(i);
    lastProcessedRow=i;
    if (hssfRow != null) {
      ResultTransformation processResult=processRow(stc,sheet,hssfRow,beans,parentRow);
      if (!processResult.isTagProcessResult()) {
        int shiftNumber=processResult.getNextRowShift();
        nextRowShiftNumber+=shiftNumber;
        endRow+=processResult.getLastRowShift();
        i+=shiftNumber;
      }
 else {
        hasTagProcessing=true;
        if (processResult.getLastProcessedRow() >= 0) {
          i=processResult.getLastProcessedRow();
        }
 else {
          i--;
        }
        endRow+=processResult.getLastRowShift();
      }
    }
  }
  ResultTransformation r=new ResultTransformation(nextRowShiftNumber,endRow - origEndRow);
  r.setTagProcessResult(hasTagProcessing);
  r.setLastProcessedRow(lastProcessedRow);
  return r;
}","/** 
 * Processes rows in a template sheet using map of beans as parameter
 * @param stc - {@link SheetTransformationController} corresponding to the sheet containing given rows
 * @param sheet {@link net.sf.jxls.transformer.Sheet} object
 * @param startRow Row to start processing
 * @param endRow   Last row to be processed
 * @param beans    Beans for substitution
 * @param parentRow - {@link Row} object representing original template row linked to rows to process
 * @return A number of rows to be shifted
 * @throws ParsePropertyException
 */
public ResultTransformation processRows(SheetTransformationController stc,Sheet sheet,int startRow,int endRow,Map beans,Row parentRow) throws ParsePropertyException {
  int origEndRow=endRow;
  int nextRowShiftNumber=0;
  boolean hasTagProcessing=false;
  int lastProcessedRow=-1;
  for (int i=startRow; i <= endRow; i++) {
    HSSFRow hssfRow=sheet.getHssfSheet().getRow(i);
    if (hssfRow != null) {
      ResultTransformation processResult=processRow(stc,sheet,hssfRow,beans,parentRow);
      if (!processResult.isTagProcessResult()) {
        int shiftNumber=processResult.getNextRowShift();
        nextRowShiftNumber+=shiftNumber;
        endRow+=processResult.getLastRowShift();
        i+=shiftNumber;
        lastProcessedRow=i;
      }
 else {
        hasTagProcessing=true;
        if (processResult.getLastProcessedRow() >= 0) {
          i=processResult.getLastProcessedRow();
          lastProcessedRow=i;
        }
 else {
          i--;
        }
        endRow+=processResult.getLastRowShift();
      }
    }
  }
  ResultTransformation r=new ResultTransformation(nextRowShiftNumber,endRow - origEndRow);
  r.setTagProcessResult(hasTagProcessing);
  r.setLastProcessedRow(lastProcessedRow);
  return r;
}",0.9766248574686432
81549,"void checkRows(HSSFSheet sourceSheet,HSSFSheet destSheet,int sourceRowNum,int destRowNum,int numberOfRows){
  for (int i=0; i < numberOfRows; i++) {
    HSSFRow sourceRow=sourceSheet.getRow(sourceRowNum + i);
    HSSFRow destRow=destSheet.getRow(destRowNum + i);
    assertTrue(""String_Node_Str"",(sourceRow != null && destRow != null) || (sourceRow == null && destRow == null));
    if (sourceRow != null && destRow != null) {
      assertEquals(""String_Node_Str"",sourceRow.getFirstCellNum(),destRow.getFirstCellNum());
      assertEquals(""String_Node_Str"",sourceRow.getPhysicalNumberOfCells(),destRow.getPhysicalNumberOfCells());
      assertEquals(""String_Node_Str"",sourceRow.getHeight(),destRow.getHeight());
      checkCells(sourceRow,destRow,sourceRow.getFirstCellNum(),sourceRow.getLastCellNum());
    }
  }
}","void checkRows(HSSFSheet sourceSheet,HSSFSheet destSheet,int sourceRowNum,int destRowNum,int numberOfRows){
  for (int i=0; i < numberOfRows; i++) {
    HSSFRow sourceRow=sourceSheet.getRow(sourceRowNum + i);
    HSSFRow destRow=destSheet.getRow(destRowNum + i);
    assertTrue(""String_Node_Str"",(sourceRow != null && destRow != null) || (sourceRow == null && destRow == null));
    if (sourceRow != null && destRow != null) {
      if (!ignoreFirstLastCellNums) {
        assertEquals(""String_Node_Str"",sourceRow.getFirstCellNum(),destRow.getFirstCellNum());
      }
      assertEquals(""String_Node_Str"",sourceRow.getPhysicalNumberOfCells(),destRow.getPhysicalNumberOfCells());
      assertEquals(""String_Node_Str"",sourceRow.getHeight(),destRow.getHeight());
      checkCells(sourceRow,destRow,sourceRow.getFirstCellNum(),sourceRow.getLastCellNum());
    }
  }
}",0.9713945172824792
81550,"public void testForIfTag3() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",departments);
  beans.put(""String_Node_Str"",""String_Node_Str"");
  Configuration config=new Configuration();
  config.setMetaInfoToken(""String_Node_Str"");
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(forifTag3XLS));
  XLSTransformer transformer=new XLSTransformer(config);
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(forifTag3XLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  HSSFSheet sourceSheet=sourceWorkbook.getSheetAt(0);
  HSSFSheet resultSheet=resultWorkbook.getSheetAt(0);
  assertEquals(""String_Node_Str"",sourceSheet.getFirstRowNum(),resultSheet.getFirstRowNum());
  assertEquals(""String_Node_Str"",54,resultSheet.getLastRowNum());
  Map props=new HashMap();
  CellsChecker checker=new CellsChecker(props);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,1,0,3);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,1,4,3);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,1,8,3);
  checker.checkRows(sourceSheet,resultSheet,11,3,1);
  checker.checkRows(sourceSheet,resultSheet,11,7,1);
  checker.checkRows(sourceSheet,resultSheet,11,11,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,1,12,3);
  checker.checkListCells(sourceSheet,19,resultSheet,15,(short)0,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  checker.checkListCells(sourceSheet,19,resultSheet,15,(short)1,new Double[]{new Double(2300),new Double(2500),new Double(2800)});
  checker.checkListCells(sourceSheet,19,resultSheet,15,(short)2,new Double[]{new Double(0.25),new Double(0.00),new Double(0.20)});
  checker.checkRows(sourceSheet,resultSheet,11,18,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,1,19,3);
  checker.checkListCells(sourceSheet,19,resultSheet,22,(short)0,new String[]{""String_Node_Str""});
  checker.checkListCells(sourceSheet,19,resultSheet,22,(short)1,new Double[]{new Double(2100)});
  checker.checkListCells(sourceSheet,19,resultSheet,22,(short)2,new Double[]{new Double(0.10)});
  checker.checkRows(sourceSheet,resultSheet,11,23,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,1,24,3);
  checker.checkListCells(sourceSheet,19,resultSheet,27,(short)0,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  checker.checkListCells(sourceSheet,19,resultSheet,27,(short)1,new Double[]{new Double(2400),new Double(2200),new Double(2600)});
  checker.checkListCells(sourceSheet,19,resultSheet,27,(short)2,new Double[]{new Double(0.20),new Double(0.15),new Double(0.10)});
  checker.checkRows(sourceSheet,resultSheet,11,30,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,14,12,3);
  checker.checkListCells(sourceSheet,19,resultSheet,15,(short)0,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  checker.checkListCells(sourceSheet,19,resultSheet,15,(short)1,new Double[]{new Double(2300),new Double(2500),new Double(2800)});
  checker.checkListCells(sourceSheet,19,resultSheet,15,(short)2,new Double[]{new Double(0.25),new Double(0.00),new Double(0.20)});
  checker.checkRows(sourceSheet,resultSheet,22,18,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,14,19,3);
  checker.checkListCells(sourceSheet,19,resultSheet,22,(short)0,new String[]{""String_Node_Str""});
  checker.checkListCells(sourceSheet,19,resultSheet,22,(short)1,new Double[]{new Double(2100)});
  checker.checkListCells(sourceSheet,19,resultSheet,22,(short)2,new Double[]{new Double(0.10)});
  checker.checkRows(sourceSheet,resultSheet,22,23,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,14,24,3);
  checker.checkListCells(sourceSheet,19,resultSheet,27,(short)0,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  checker.checkListCells(sourceSheet,19,resultSheet,27,(short)1,new Double[]{new Double(2400),new Double(2200),new Double(2600)});
  checker.checkListCells(sourceSheet,19,resultSheet,27,(short)2,new Double[]{new Double(0.20),new Double(0.15),new Double(0.10)});
  checker.checkRows(sourceSheet,resultSheet,22,30,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,25,31,3);
  checker.checkListCells(sourceSheet,29,resultSheet,34,(short)0,itEmployeeNames);
  checker.checkListCells(sourceSheet,29,resultSheet,34,(short)1,itPayments);
  checker.checkListCells(sourceSheet,29,resultSheet,34,(short)2,itBonuses);
  checker.checkRows(sourceSheet,resultSheet,31,18,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,25,40,3);
  checker.checkListCells(sourceSheet,29,resultSheet,43,(short)0,hrEmployeeNames);
  checker.checkListCells(sourceSheet,29,resultSheet,43,(short)1,hrPayments);
  checker.checkListCells(sourceSheet,29,resultSheet,43,(short)2,hrBonuses);
  checker.checkRows(sourceSheet,resultSheet,31,23,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,25,48,3);
  checker.checkListCells(sourceSheet,29,resultSheet,51,(short)0,baEmployeeNames);
  checker.checkListCells(sourceSheet,29,resultSheet,51,(short)1,baPayments);
  checker.checkListCells(sourceSheet,29,resultSheet,51,(short)2,baBonuses);
  checker.checkRows(sourceSheet,resultSheet,31,30,1);
  is.close();
  saveWorkbook(resultWorkbook,forifTag3DestXLS);
}","public void testForIfTag3() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",departments);
  beans.put(""String_Node_Str"",""String_Node_Str"");
  List deps=new ArrayList();
  Department testDep=new Department(""String_Node_Str"");
  deps.add(testDep);
  beans.put(""String_Node_Str"",deps);
  List employees=new ArrayList();
  beans.put(""String_Node_Str"",employees);
  Configuration config=new Configuration();
  config.setMetaInfoToken(""String_Node_Str"");
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(forifTag3XLS));
  XLSTransformer transformer=new XLSTransformer(config);
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(forifTag3XLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  HSSFSheet sourceSheet=sourceWorkbook.getSheetAt(0);
  HSSFSheet resultSheet=resultWorkbook.getSheetAt(0);
  assertEquals(""String_Node_Str"",sourceSheet.getFirstRowNum(),resultSheet.getFirstRowNum());
  assertEquals(""String_Node_Str"",54,resultSheet.getLastRowNum());
  Map props=new HashMap();
  CellsChecker checker=new CellsChecker(props);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,1,0,3);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,1,4,3);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,1,8,3);
  checker.checkRows(sourceSheet,resultSheet,11,3,1);
  checker.checkRows(sourceSheet,resultSheet,11,7,1);
  checker.checkRows(sourceSheet,resultSheet,11,11,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,1,12,3);
  checker.checkListCells(sourceSheet,19,resultSheet,15,(short)0,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  checker.checkListCells(sourceSheet,19,resultSheet,15,(short)1,new Double[]{new Double(2300),new Double(2500),new Double(2800)});
  checker.checkListCells(sourceSheet,19,resultSheet,15,(short)2,new Double[]{new Double(0.25),new Double(0.00),new Double(0.20)});
  checker.checkRows(sourceSheet,resultSheet,11,18,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,1,19,3);
  checker.checkListCells(sourceSheet,19,resultSheet,22,(short)0,new String[]{""String_Node_Str""});
  checker.checkListCells(sourceSheet,19,resultSheet,22,(short)1,new Double[]{new Double(2100)});
  checker.checkListCells(sourceSheet,19,resultSheet,22,(short)2,new Double[]{new Double(0.10)});
  checker.checkRows(sourceSheet,resultSheet,11,23,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,1,24,3);
  checker.checkListCells(sourceSheet,19,resultSheet,27,(short)0,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  checker.checkListCells(sourceSheet,19,resultSheet,27,(short)1,new Double[]{new Double(2400),new Double(2200),new Double(2600)});
  checker.checkListCells(sourceSheet,19,resultSheet,27,(short)2,new Double[]{new Double(0.20),new Double(0.15),new Double(0.10)});
  checker.checkRows(sourceSheet,resultSheet,11,30,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,14,12,3);
  checker.checkListCells(sourceSheet,19,resultSheet,15,(short)0,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  checker.checkListCells(sourceSheet,19,resultSheet,15,(short)1,new Double[]{new Double(2300),new Double(2500),new Double(2800)});
  checker.checkListCells(sourceSheet,19,resultSheet,15,(short)2,new Double[]{new Double(0.25),new Double(0.00),new Double(0.20)});
  checker.checkRows(sourceSheet,resultSheet,22,18,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,14,19,3);
  checker.checkListCells(sourceSheet,19,resultSheet,22,(short)0,new String[]{""String_Node_Str""});
  checker.checkListCells(sourceSheet,19,resultSheet,22,(short)1,new Double[]{new Double(2100)});
  checker.checkListCells(sourceSheet,19,resultSheet,22,(short)2,new Double[]{new Double(0.10)});
  checker.checkRows(sourceSheet,resultSheet,22,23,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,14,24,3);
  checker.checkListCells(sourceSheet,19,resultSheet,27,(short)0,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  checker.checkListCells(sourceSheet,19,resultSheet,27,(short)1,new Double[]{new Double(2400),new Double(2200),new Double(2600)});
  checker.checkListCells(sourceSheet,19,resultSheet,27,(short)2,new Double[]{new Double(0.20),new Double(0.15),new Double(0.10)});
  checker.checkRows(sourceSheet,resultSheet,22,30,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,25,31,3);
  checker.checkListCells(sourceSheet,29,resultSheet,34,(short)0,itEmployeeNames);
  checker.checkListCells(sourceSheet,29,resultSheet,34,(short)1,itPayments);
  checker.checkListCells(sourceSheet,29,resultSheet,34,(short)2,itBonuses);
  checker.checkRows(sourceSheet,resultSheet,31,18,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,25,40,3);
  checker.checkListCells(sourceSheet,29,resultSheet,43,(short)0,hrEmployeeNames);
  checker.checkListCells(sourceSheet,29,resultSheet,43,(short)1,hrPayments);
  checker.checkListCells(sourceSheet,29,resultSheet,43,(short)2,hrBonuses);
  checker.checkRows(sourceSheet,resultSheet,31,23,1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  checker.checkRows(sourceSheet,resultSheet,25,48,3);
  checker.checkListCells(sourceSheet,29,resultSheet,51,(short)0,baEmployeeNames);
  checker.checkListCells(sourceSheet,29,resultSheet,51,(short)1,baPayments);
  checker.checkListCells(sourceSheet,29,resultSheet,51,(short)2,baBonuses);
  checker.checkRows(sourceSheet,resultSheet,31,30,1);
  sourceSheet=sourceWorkbook.getSheetAt(1);
  resultSheet=resultWorkbook.getSheetAt(1);
  assertEquals(""String_Node_Str"",1,resultSheet.getLastRowNum() + 1);
  checker.setIgnoreFirstLastCellNums(true);
  checker.checkRows(sourceSheet,resultSheet,11,0,1);
  is.close();
  saveWorkbook(resultWorkbook,forifTag3DestXLS);
}",0.9611243527574588
81551,"public ResultTransformation process(SheetTransformer sheetTransformer){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + var + ""String_Node_Str""+ items);
    log.debug(""String_Node_Str"" + tagContext);
    log.debug(""String_Node_Str"" + itemsCollection);
  }
  Block body=tagContext.getTagBody();
  if (body.getNumberOfRows() == 1) {
    return processOneRowTag(sheetTransformer);
  }
  int shiftNumber=0;
  tagContext.getSheetTransformationController().removeBorders(body);
  shiftNumber+=-2;
  ResultTransformation shift=new ResultTransformation(0);
  if (itemsCollection != null) {
    Map beans=tagContext.getBeans();
    int k=0;
    if (groupBy == null || groupBy.length() == 0) {
      shiftNumber+=tagContext.getSheetTransformationController().duplicateDown(body,itemsCollection.size() - 1);
      for (Iterator iterator=itemsCollection.iterator(); iterator.hasNext(); ) {
        Object o=iterator.next();
        beans.put(var,o);
        try {
          int startRowNum=body.getStartRowNum() + shift.getLastRowShift() + body.getNumberOfRows() * k++;
          int endRowNum=startRowNum + body.getNumberOfRows() - 1;
          ResultTransformation processResult=sheetTransformer.processRows(tagContext.getSheetTransformationController(),tagContext.getSheet(),startRowNum,endRowNum,beans,null);
          shift.add(processResult);
        }
 catch (        ParsePropertyException e) {
          log.error(""String_Node_Str"",e);
        }
      }
    }
 else {
      try {
        Collection groupedData=ReportUtil.groupCollectionData(itemsCollection,groupBy);
        shiftNumber+=tagContext.getSheetTransformationController().duplicateDown(body,groupedData.size() - 1);
        Object savedGroupData=null;
        if (beans.containsKey(GROUP_DATA_KEY)) {
          savedGroupData=beans.get(GROUP_DATA_KEY);
        }
        for (Iterator iterator=groupedData.iterator(); iterator.hasNext(); ) {
          GroupData groupData=(GroupData)iterator.next();
          beans.put(GROUP_DATA_KEY,groupData);
          try {
            int startRowNum=body.getStartRowNum() + shift.getLastRowShift() + body.getNumberOfRows() * k++;
            int endRowNum=startRowNum + body.getNumberOfRows() - 1;
            ResultTransformation processResult=sheetTransformer.processRows(tagContext.getSheetTransformationController(),tagContext.getSheet(),startRowNum,endRowNum,beans,null);
            shift.add(processResult);
          }
 catch (          ParsePropertyException e) {
            log.error(""String_Node_Str"",e);
          }
        }
        beans.remove(GROUP_DATA_KEY);
        if (savedGroupData != null) {
          beans.put(GROUP_DATA_KEY,savedGroupData);
        }
      }
 catch (      NoSuchMethodException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      IllegalAccessException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      InvocationTargetException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
    }
  }
 else {
    log.warn(items + ""String_Node_Str"");
  }
  shift.add(new ResultTransformation(shiftNumber,shiftNumber));
  return shift;
}","public ResultTransformation process(SheetTransformer sheetTransformer){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + var + ""String_Node_Str""+ items);
    log.debug(""String_Node_Str"" + tagContext);
    log.debug(""String_Node_Str"" + itemsCollection);
  }
  Block body=tagContext.getTagBody();
  if (body.getNumberOfRows() == 1) {
    return processOneRowTag(sheetTransformer);
  }
  int shiftNumber=0;
  if (itemsCollection != null && !itemsCollection.isEmpty()) {
    tagContext.getSheetTransformationController().removeBorders(body);
    shiftNumber+=-2;
    ResultTransformation shift=new ResultTransformation(0);
    Map beans=tagContext.getBeans();
    int k=0;
    if (groupBy == null || groupBy.length() == 0) {
      shiftNumber+=tagContext.getSheetTransformationController().duplicateDown(body,itemsCollection.size() - 1);
      for (Iterator iterator=itemsCollection.iterator(); iterator.hasNext(); ) {
        Object o=iterator.next();
        beans.put(var,o);
        try {
          int startRowNum=body.getStartRowNum() + shift.getLastRowShift() + body.getNumberOfRows() * k++;
          int endRowNum=startRowNum + body.getNumberOfRows() - 1;
          ResultTransformation processResult=sheetTransformer.processRows(tagContext.getSheetTransformationController(),tagContext.getSheet(),startRowNum,endRowNum,beans,null);
          shift.add(processResult);
        }
 catch (        ParsePropertyException e) {
          log.error(""String_Node_Str"",e);
        }
      }
    }
 else {
      try {
        Collection groupedData=ReportUtil.groupCollectionData(itemsCollection,groupBy);
        shiftNumber+=tagContext.getSheetTransformationController().duplicateDown(body,groupedData.size() - 1);
        Object savedGroupData=null;
        if (beans.containsKey(GROUP_DATA_KEY)) {
          savedGroupData=beans.get(GROUP_DATA_KEY);
        }
        for (Iterator iterator=groupedData.iterator(); iterator.hasNext(); ) {
          GroupData groupData=(GroupData)iterator.next();
          beans.put(GROUP_DATA_KEY,groupData);
          try {
            int startRowNum=body.getStartRowNum() + shift.getLastRowShift() + body.getNumberOfRows() * k++;
            int endRowNum=startRowNum + body.getNumberOfRows() - 1;
            ResultTransformation processResult=sheetTransformer.processRows(tagContext.getSheetTransformationController(),tagContext.getSheet(),startRowNum,endRowNum,beans,null);
            shift.add(processResult);
          }
 catch (          ParsePropertyException e) {
            log.error(""String_Node_Str"",e);
          }
        }
        beans.remove(GROUP_DATA_KEY);
        if (savedGroupData != null) {
          beans.put(GROUP_DATA_KEY,savedGroupData);
        }
      }
 catch (      NoSuchMethodException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      IllegalAccessException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
catch (      InvocationTargetException e) {
        log.error(e,new Exception(""String_Node_Str"" + groupBy,e));
      }
    }
    shift.add(new ResultTransformation(shiftNumber,shiftNumber));
    return shift;
  }
 else {
    log.warn(""String_Node_Str"" + items + ""String_Node_Str"");
    tagContext.getSheetTransformationController().removeBodyRows(body);
    ResultTransformation shift=new ResultTransformation(0);
    shift.add(new ResultTransformation(-1,-body.getNumberOfRows()));
    return shift;
  }
}",0.9219241720365652
81552,"public void testForGroupBy() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",departments);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(forGroupByXLS));
  XLSTransformer transformer=new XLSTransformer();
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(forGroupByXLS));
  is.close();
  saveWorkbook(resultWorkbook,forGroupByDestXLS);
}","public void testForGroupBy() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",departments);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(forGroupByXLS));
  XLSTransformer transformer=new XLSTransformer();
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(forGroupByXLS));
  is.close();
  saveWorkbook(resultWorkbook,forGroupByDestXLS);
  ((Department)departments.get(0)).getStaff().clear();
  is=new BufferedInputStream(getClass().getResourceAsStream(forGroupByXLS));
  resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
}",0.8359439406430338
81553,"public void initSheetName(){
  for (int i=0; i < hssfWorkbook.getNumberOfSheets(); i++) {
    HSSFSheet sheet=hssfWorkbook.getSheetAt(i);
    if (sheet == hssfSheet) {
      sheetName=hssfWorkbook.getSheetName(i);
    }
  }
}","public void initSheetName(){
  for (int i=0; i < hssfWorkbook.getNumberOfSheets(); i++) {
    HSSFSheet sheet=hssfWorkbook.getSheetAt(i);
    if (sheet == hssfSheet) {
      sheetName=hssfWorkbook.getSheetName(i);
      if (sheetName.indexOf(' ') >= 0) {
        sheetName=""String_Node_Str"" + sheetName + ""String_Node_Str"";
      }
    }
  }
}",0.7922535211267606
81554,"public void testFormulas() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",beanWithList);
  beans.put(""String_Node_Str"",departments);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(formulasXLS));
  XLSTransformer transformer=new XLSTransformer();
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(formulasXLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  HSSFSheet sourceSheet=sourceWorkbook.getSheetAt(0);
  HSSFSheet resultSheet=resultWorkbook.getSheetAt(0);
  assertEquals(""String_Node_Str"",sourceSheet.getFirstRowNum(),resultSheet.getFirstRowNum());
  Map props=new HashMap();
  props.put(""String_Node_Str"",beanWithList.getName());
  CellsChecker checker=new CellsChecker(props);
  checker.checkRows(sourceSheet,resultSheet,0,0,3);
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)0,names);
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)1,doubleValues);
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)2,new Object[]{new Integer(123),new Integer(10234)});
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)3,dateValues);
  checker.checkFormulaCell(sourceSheet,4,resultSheet,6,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,4,resultSheet,6,(short)2,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,6,resultSheet,8,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,3,resultSheet,3,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,3,resultSheet,4,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,3,resultSheet,5,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,4,resultSheet,6,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,8,resultSheet,10,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,8,resultSheet,10,(short)2,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,8,resultSheet,10,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,10,resultSheet,12,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,23,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,32,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,40,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,23,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,32,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,40,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,22,resultSheet,41,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,22,resultSheet,41,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,18,resultSheet,18,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,18,resultSheet,22,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,18,resultSheet,28,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,19,resultSheet,31,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,19,resultSheet,37,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,19,resultSheet,39,(short)3,""String_Node_Str"");
  sourceSheet=sourceWorkbook.getSheetAt(1);
  resultSheet=resultWorkbook.getSheetAt(1);
  checker.checkFormulaCell(sourceSheet,0,resultSheet,0,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,0,resultSheet,0,(short)2,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,0,resultSheet,0,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,2,resultSheet,2,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,4,resultSheet,4,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,15,resultSheet,24,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,15,resultSheet,40,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,15,resultSheet,53,(short)1,""String_Node_Str"");
  is.close();
  saveWorkbook(resultWorkbook,formulasDestXLS);
}","public void testFormulas() throws IOException, ParsePropertyException {
  Map beans=new HashMap();
  beans.put(""String_Node_Str"",beanWithList);
  beans.put(""String_Node_Str"",departments);
  InputStream is=new BufferedInputStream(getClass().getResourceAsStream(formulasXLS));
  XLSTransformer transformer=new XLSTransformer();
  HSSFWorkbook resultWorkbook=transformer.transformXLS(is,beans);
  is.close();
  is=new BufferedInputStream(getClass().getResourceAsStream(formulasXLS));
  POIFSFileSystem fs=new POIFSFileSystem(is);
  HSSFWorkbook sourceWorkbook=new HSSFWorkbook(fs);
  HSSFSheet sourceSheet=sourceWorkbook.getSheetAt(0);
  HSSFSheet resultSheet=resultWorkbook.getSheetAt(0);
  assertEquals(""String_Node_Str"",sourceSheet.getFirstRowNum(),resultSheet.getFirstRowNum());
  Map props=new HashMap();
  props.put(""String_Node_Str"",beanWithList.getName());
  CellsChecker checker=new CellsChecker(props);
  checker.checkRows(sourceSheet,resultSheet,0,0,3);
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)0,names);
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)1,doubleValues);
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)2,new Object[]{new Integer(123),new Integer(10234)});
  checker.checkListCells(sourceSheet,3,resultSheet,3,(short)3,dateValues);
  checker.checkFormulaCell(sourceSheet,4,resultSheet,6,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,4,resultSheet,6,(short)2,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,6,resultSheet,8,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,3,resultSheet,3,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,3,resultSheet,4,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,3,resultSheet,5,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,4,resultSheet,6,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,8,resultSheet,10,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,8,resultSheet,10,(short)2,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,8,resultSheet,10,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,10,resultSheet,12,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,23,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,32,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,40,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,23,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,32,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,20,resultSheet,40,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,22,resultSheet,41,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,22,resultSheet,41,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,18,resultSheet,18,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,18,resultSheet,22,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,18,resultSheet,28,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,19,resultSheet,31,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,19,resultSheet,37,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,19,resultSheet,39,(short)3,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,24,resultSheet,43,(short)1,""String_Node_Str"");
  sourceSheet=sourceWorkbook.getSheetAt(1);
  resultSheet=resultWorkbook.getSheetAt(1);
  checker.checkFormulaCell(sourceSheet,0,resultSheet,0,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,0,resultSheet,0,(short)2,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,0,resultSheet,0,(short)4,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,2,resultSheet,2,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,4,resultSheet,4,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,15,resultSheet,24,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,15,resultSheet,40,(short)1,""String_Node_Str"");
  checker.checkFormulaCell(sourceSheet,15,resultSheet,53,(short)1,""String_Node_Str"");
  is.close();
  saveWorkbook(resultWorkbook,formulasDestXLS);
}",0.9900069718800836
81555,"private static String printObject(Object obj){
  List<String> result=new ArrayList<>();
  for (  Field field : getFields(obj,Object.class)) {
    Object value=getFieldValue(field,obj);
    String strValue=null;
    if (value == null)     strValue=""String_Node_Str"";
 else     if (isClass(value.getClass(),String.class))     strValue=(String)value;
 else     if (isClass(value.getClass(),Enum.class))     strValue=value.toString();
 else     if (field.isAnnotationPresent(Complex.class))     strValue=""String_Node_Str"" + printObject(value) + ""String_Node_Str"";
    if (strValue != null)     result.add(String.format(""String_Node_Str"",AnnotationsUtil.getElementName(field),strValue));
  }
  return print(result,""String_Node_Str"",""String_Node_Str"");
}","private static String printObject(Object obj){
  List<String> result=new ArrayList<>();
  for (  Field field : getFields(obj,Object.class)) {
    Object value=getValueField(field,obj);
    String strValue=null;
    if (value == null)     strValue=""String_Node_Str"";
 else     if (isClass(value.getClass(),String.class))     strValue=(String)value;
 else     if (isClass(value.getClass(),Enum.class))     strValue=value.toString();
 else     if (field.isAnnotationPresent(Complex.class))     strValue=""String_Node_Str"" + printObject(value) + ""String_Node_Str"";
    if (strValue != null)     result.add(String.format(""String_Node_Str"",AnnotationsUtil.getElementName(field),strValue));
  }
  return print(result,""String_Node_Str"",""String_Node_Str"");
}",0.9933155080213903
81556,"public static String printFields(Object obj,String separator){
  String className=obj.getClass().getSimpleName();
  String params=print(select(getFields(obj,String.class),field -> format(""String_Node_Str"",field.getName(),getFieldValue(field,obj))),separator,""String_Node_Str"");
  return format(""String_Node_Str"",className,params);
}","public static String printFields(Object obj,String separator){
  String className=obj.getClass().getSimpleName();
  String params=print(select(getFields(obj,String.class),field -> format(""String_Node_Str"",field.getName(),getValueField(field,obj))),separator,""String_Node_Str"");
  return format(""String_Node_Str"",className,params);
}",0.9849397590361446
81557,"public static <T>T getFirstField(Object obj,Class<T> type){
  return (T)getFieldValue(LinqUtils.first(obj.getClass().getDeclaredFields(),field -> isClass(field,type) || isInterface(field,type)),obj);
}","public static <T>T getFirstField(Object obj,Class<T> type){
  return (T)getValueField(LinqUtils.first(obj.getClass().getDeclaredFields(),field -> isClass(field,type) || isInterface(field,type)),obj);
}",0.9751243781094528
81558,"private static BaseElement createChildFromField(Object parent,Object parentInstance,Field field,Class<?> type){
  BaseElement instance=(BaseElement)getFieldValue(field,parentInstance);
  if (instance == null)   try {
    instance=getElementInstance(type,field.getName(),getNewLocator(field));
  }
 catch (  Exception ex) {
    throw exception(format(""String_Node_Str"",parentInstance.getClass().getSimpleName(),field.getType().getSimpleName()));
  }
 else   if (instance.getLocator() == null)   instance.avatar.byLocator=getNewLocator(field);
  instance.avatar.context=(isBaseElement(parent)) ? ((BaseElement)parent).avatar.context.copy() : new Pairs<>();
  if (type != null) {
    By frameBy=AnnotationsUtil.getFrame(type.getDeclaredAnnotation(Frame.class));
    if (frameBy != null)     instance.avatar.context.add(ContextType.Frame,frameBy);
  }
  if (isBaseElement(parent)) {
    By parentLocator=((BaseElement)parent).getLocator();
    if (parentLocator != null)     instance.avatar.context.add(ContextType.Locator,parentLocator);
  }
  return instance;
}","private static BaseElement createChildFromField(Object parent,Object parentInstance,Field field,Class<?> type){
  BaseElement instance=(BaseElement)getValueField(field,parentInstance);
  if (instance == null)   try {
    instance=getElementInstance(type,field.getName(),getNewLocator(field));
  }
 catch (  Exception ex) {
    throw exception(format(""String_Node_Str"",parentInstance.getClass().getSimpleName(),field.getType().getSimpleName()));
  }
 else   if (instance.getLocator() == null)   instance.avatar.byLocator=getNewLocator(field);
  instance.avatar.context=(isBaseElement(parent)) ? ((BaseElement)parent).avatar.context.copy() : new Pairs<>();
  if (type != null) {
    By frameBy=AnnotationsUtil.getFrame(type.getDeclaredAnnotation(Frame.class));
    if (frameBy != null)     instance.avatar.context.add(ContextType.Frame,frameBy);
  }
  if (isBaseElement(parent)) {
    By parentLocator=((BaseElement)parent).getLocator();
    if (parentLocator != null)     instance.avatar.context.add(ContextType.Locator,parentLocator);
  }
  return instance;
}",0.9952785646836638
81559,"private static BaseElement createChildFromFieldStatic(Class<?> parentClass,Field field,Class<?> type){
  BaseElement instance=(BaseElement)getFieldValue(field,null);
  if (instance == null)   try {
    instance=getElementInstance(type,field.getName(),getNewLocator(field));
  }
 catch (  Exception ex) {
    throw exception(format(""String_Node_Str"",parentClass.getSimpleName(),field.getType().getSimpleName()));
  }
 else   if (instance.getLocator() == null)   instance.avatar.byLocator=getNewLocator(field);
  instance.avatar.context=new Pairs<>();
  if (type != null) {
    By frameBy=AnnotationsUtil.getFrame(type.getDeclaredAnnotation(Frame.class));
    if (frameBy != null)     instance.avatar.context.add(ContextType.Frame,frameBy);
  }
  return instance;
}","private static BaseElement createChildFromFieldStatic(Class<?> parentClass,Field field,Class<?> type){
  BaseElement instance=(BaseElement)getValueField(field,null);
  if (instance == null)   try {
    instance=getElementInstance(type,field.getName(),getNewLocator(field));
  }
 catch (  Exception ex) {
    throw exception(format(""String_Node_Str"",parentClass.getSimpleName(),field.getType().getSimpleName()));
  }
 else   if (instance.getLocator() == null)   instance.avatar.byLocator=getNewLocator(field);
  instance.avatar.context=new Pairs<>();
  if (type != null) {
    By frameBy=AnnotationsUtil.getFrame(type.getDeclaredAnnotation(Frame.class));
    if (frameBy != null)     instance.avatar.context.add(ContextType.Frame,frameBy);
  }
  return instance;
}",0.9934469200524246
81560,"public static void setElement(Object parent,Object parentInstance,Field field){
  try {
    Class<?> type=field.getType();
    if (parentInstance == null)     parentInstance=parent;
    BaseElement instance;
    if (isClass(type,Page.class)) {
      instance=(BaseElement)getFieldValue(field,parentInstance);
      if (instance == null)       instance=(BaseElement)type.newInstance();
      fillPage(instance,field,parent != null ? parent.getClass() : null);
    }
 else {
      instance=createChildFromField(parent,parentInstance,field,type);
      instance.function=AnnotationsUtil.getFunction(field);
    }
    instance.setName(field);
    if (instance.getClass().getSimpleName().equals(""String_Node_Str""))     instance.setTypeName(type.getSimpleName());
    instance.setParentName(getClassName(parent));
    field.set(parent,instance);
    if (isInterface(field,IComposite.class))     InitElements(instance);
  }
 catch (  Exception ex) {
    throw exception(""String_Node_Str"",field.getName(),getClassName(parent) + LineBreak + ex.getMessage());
  }
}","public static void setElement(Object parent,Object parentInstance,Field field){
  try {
    Class<?> type=field.getType();
    if (parentInstance == null)     parentInstance=parent;
    BaseElement instance;
    if (isClass(type,Page.class)) {
      instance=(BaseElement)getValueField(field,parentInstance);
      if (instance == null)       instance=(BaseElement)type.newInstance();
      fillPage(instance,field,parent != null ? parent.getClass() : null);
    }
 else {
      instance=createChildFromField(parent,parentInstance,field,type);
      instance.function=AnnotationsUtil.getFunction(field);
    }
    instance.setName(field);
    if (instance.getClass().getSimpleName().equals(""String_Node_Str""))     instance.setTypeName(type.getSimpleName());
    instance.setParentName(getClassName(parent));
    field.set(parent,instance);
    if (isInterface(field,IComposite.class))     InitElements(instance);
  }
 catch (  Exception ex) {
    throw exception(""String_Node_Str"",field.getName(),getClassName(parent) + LineBreak + ex.getMessage());
  }
}",0.995260663507109
81561,"public void submit(T entity,Enum buttonName){
  fill(PrintUtils.objToSetValue(entity));
  getElement.getButton(buttonName.toString().toLowerCase()).click();
}","public void submit(T entity,Enum buttonName){
  fill(objToSetValue(entity));
  getElement.getButton(buttonName.toString().toLowerCase()).click();
}",0.9639344262295082
81562,"protected String getValueAction(){
  return PrintUtils.print(LinqUtils.select(ReflectionUtils.getFields(this,IHasValue.class),field -> ((IHasValue)ReflectionUtils.getFieldValue(field,this)).getValue()));
}","protected String getValueAction(){
  return PrintUtils.print(LinqUtils.select(getFields(this,IHasValue.class),field -> ((IHasValue)getValueField(field,this)).getValue()));
}",0.8888888888888888
81563,"public void verify(T entity){
  verify(PrintUtils.objToSetValue(entity),JDISettings.asserter::areEquals);
}","public List<String> verify(T entity){
  return verify(objToSetValue(entity));
}",0.6559139784946236
81564,"private Button getSubmitButton(){
  List<Field> fields=ReflectionUtils.getFields(this,IButton.class);
switch (fields.size()) {
case 0:
    throw JDISettings.exception(""String_Node_Str"",toString());
case 1:
  return (Button)ReflectionUtils.getFieldValue(fields.get(0),this);
default :
throw JDISettings.exception(""String_Node_Str"",toString());
}
}","private Button getSubmitButton(){
  List<Field> fields=getFields(this,IButton.class);
switch (fields.size()) {
case 0:
    throw exception(""String_Node_Str"",toString());
case 1:
  return (Button)getValueField(fields.get(0),this);
default :
throw exception(""String_Node_Str"",toString());
}
}",0.8522012578616353
81565,"public void fill(T entity){
  fill(PrintUtils.objToSetValue(entity));
}","public void fill(T entity){
  fill(objToSetValue(entity));
}",0.916030534351145
81566,"private void setText(String text){
  Field field=ReflectionUtils.getFields(this,ISetValue.class).get(0);
  ISetValue setValueElement=(ISetValue)ReflectionUtils.getFieldValue(field,this);
  doActionRule.invoke(text,val -> setValueAction(val,setValueElement));
}","private void setText(String text){
  Field field=getFields(this,ISetValue.class).get(0);
  ISetValue setValueElement=(ISetValue)getValueField(field,this);
  doActionRule.invoke(text,val -> setValueAction(val,setValueElement));
}",0.9016393442622952
81567,"private Clickable getClickable(String name){
  List<Field> fields=ReflectionUtils.getFields(this,IClickable.class);
  Collection<Clickable> clickables=select(fields,f -> (Clickable)ReflectionUtils.getFieldValue(f,this));
  return LinqUtils.first(clickables,cl -> cl.getName().contains(getElementName(name.toLowerCase())));
}","private Clickable getClickable(String name){
  List<Field> fields=ReflectionUtils.getFields(this,IClickable.class);
  Collection<Clickable> clickables=select(fields,f -> (Clickable)ReflectionUtils.getValueField(f,this));
  return LinqUtils.first(clickables,cl -> cl.getName().contains(getElementName(name.toLowerCase())));
}",0.984567901234568
81568,"private ITextField getSearchField(){
  List<Field> fields=getFields(this,ITextField.class);
switch (fields.size()) {
case 0:
    throw JDISettings.exception(""String_Node_Str"",toString());
case 1:
  return (ITextField)getFieldValue(fields.get(0),this);
default :
throw JDISettings.exception(""String_Node_Str"",toString());
}
}","private ITextField getSearchField(){
  List<Field> fields=getFields(this,ITextField.class);
switch (fields.size()) {
case 0:
    throw JDISettings.exception(""String_Node_Str"",toString());
case 1:
  return (ITextField)getValueField(fields.get(0),this);
default :
throw JDISettings.exception(""String_Node_Str"",toString());
}
}",0.984567901234568
81569,"private IButton getSearchButton(){
  List<Field> fields=getFields(this,IButton.class);
switch (fields.size()) {
case 0:
    throw JDISettings.exception(""String_Node_Str"",toString());
case 1:
  return (IButton)getFieldValue(fields.get(0),this);
default :
throw JDISettings.exception(""String_Node_Str"",toString());
}
}","private IButton getSearchButton(){
  List<Field> fields=getFields(this,IButton.class);
switch (fields.size()) {
case 0:
    throw JDISettings.exception(""String_Node_Str"",toString());
case 1:
  return (IButton)getValueField(fields.get(0),this);
default :
throw JDISettings.exception(""String_Node_Str"",toString());
}
}",0.9841772151898734
81570,"public Button getButton(Functions funcName){
  List<Field> fields=getFields(element,IButton.class);
  if (fields.size() == 1)   return (Button)getFieldValue(fields.get(0),element);
  Collection<Button> buttons=LinqUtils.select(fields,f -> (Button)getFieldValue(f,element));
  Button button=LinqUtils.first(buttons,b -> b.function.equals(funcName));
  if (button == null) {
    String name=funcName.name;
    String buttonName=name.toLowerCase().contains(""String_Node_Str"") ? name : name + ""String_Node_Str"";
    button=LinqUtils.first(buttons,b -> namesEqual(b.getName(),buttonName));
    if (button == null)     throw JDISettings.exception(""String_Node_Str"",name,toString());
  }
  return button;
}","public Button getButton(Functions funcName){
  List<Field> fields=getFields(element,IButton.class);
  if (fields.size() == 1)   return (Button)getValueField(fields.get(0),element);
  Collection<Button> buttons=LinqUtils.select(fields,f -> (Button)getValueField(f,element));
  Button button=LinqUtils.first(buttons,b -> b.function.equals(funcName));
  if (button == null) {
    String name=funcName.name;
    String buttonName=name.toLowerCase().contains(""String_Node_Str"") ? name : name + ""String_Node_Str"";
    button=LinqUtils.first(buttons,b -> namesEqual(b.getName(),buttonName));
    if (button == null)     throw JDISettings.exception(""String_Node_Str"",name,toString());
  }
  return button;
}",0.9856938483547926
81571,"public Text getTextElement(){
  Field textField=LinqUtils.first(getClass().getDeclaredFields(),f -> (f.getType() == Text.class) || (f.getType() == IText.class));
  if (textField == null)   throw JDISettings.exception(""String_Node_Str"",toString());
  return (Text)getFieldValue(textField,element);
}","public Text getTextElement(){
  Field textField=LinqUtils.first(getClass().getDeclaredFields(),f -> (f.getType() == Text.class) || (f.getType() == IText.class));
  if (textField == null)   throw JDISettings.exception(""String_Node_Str"",toString());
  return (Text)getValueField(textField,element);
}",0.9832214765100672
81572,"public static List<Field> getFields(Object obj,Class<?> type){
  return where(deepGetFields(obj.getClass()),field -> !isStatic(field.getModifiers()) && (isClass(field,type) || isInterface(field,type)));
}","public static List<Field> getFields(Object obj,Class<?> type){
  return where(obj.getClass().getDeclaredFields(),field -> !isStatic(field.getModifiers()) && (isClass(field,type) || isInterface(field,type)));
}",0.9200968523002422
81573,"private static List<Field> deepGetFields(Class<?> clazz){
  List<Field> result=new ArrayList<>();
  if (clazz != BaseElement.class)   result.addAll(deepGetFields(clazz.getSuperclass()));
  result.addAll(Arrays.asList(clazz.getDeclaredFields()));
  return result;
}","public static List<Field> deepGetFields(Object obj,Class<?> type){
  return where(deepGetFields(obj.getClass()),field -> !isStatic(field.getModifiers()) && (isClass(field,type) || isInterface(field,type)));
}",0.2838983050847458
81574,"private static void initSubElements(Object parent,Object parentInstance){
  foreach(getFields(parent,IBaseElement.class),field -> setElement(parent,parentInstance,field));
}","private static void initSubElements(Object parent,Object parentInstance){
  foreach(deepGetFields(parent,IBaseElement.class),field -> setElement(parent,parentInstance,field));
}",0.9828571428571428
81575,"public String[] footer(){
  if (_footer != null)   return _footer;
  _footer=invoker.doJActionResult(""String_Node_Str"",this::getFooterAction);
  if (_footer == null || _footer.length == 0)   return new String[]{};
  columns().setCount(_footer.length);
  return _footer;
}","public String[] footer(){
  if (_footer != null)   return getFooter();
  _footer=invoker.doJActionResult(""String_Node_Str"",this::getFooterAction);
  if (_footer == null || _footer.length == 0)   return new String[]{};
  columns().setCount(_footer.length);
  return getFooter();
}",0.9345454545454546
81576,"public void setFooter(final String[] value){
  _footer=value;
}","public void setFooter(String[] value){
  _footer=value.clone();
}",0.890625
81577,"public String[] headers(){
  if (headers != null)   return headers;
  String[] localHeaders=Timer.getResultAction(this::getHeadersTextAction);
  localHeaders=(hasHeader) ? localHeaders : getNumList(localHeaders.length);
  setHeaders(localHeaders);
  if (localHeaders == null || localHeaders.length == 0)   throw exception(""String_Node_Str"");
  setCount(localHeaders.length);
  return localHeaders;
}","public String[] headers(){
  if (headers != null)   return headers.clone();
  String[] localHeaders=Timer.getResultAction(this::getHeadersTextAction);
  localHeaders=(hasHeader) ? localHeaders : getNumList(localHeaders.length);
  setHeaders(localHeaders);
  if (localHeaders == null || localHeaders.length == 0)   throw exception(""String_Node_Str"");
  setCount(localHeaders.length);
  return localHeaders;
}",0.9900744416873448
81578,"@DataProvider(name=""String_Node_Str"") public static Object[][] matchText(){
  return new Object[][]{{""String_Node_Str"",currentDate()}};
}","@DataProvider(name=""String_Node_Str"") public static Object[][] matchText(){
  return new Object[][]{{""String_Node_Str"",Timer.nowTime(""String_Node_Str"")}};
}",0.8805460750853242
81579,"@DataProvider(name=""String_Node_Str"") public static Object[][] waitText(){
  return new Object[][]{{currentYear(),currentDate()}};
}","@DataProvider(name=""String_Node_Str"") public static Object[][] waitText(){
  return new Object[][]{{Timer.nowTime(""String_Node_Str""),Timer.nowTime(""String_Node_Str"")}};
}",0.7748344370860927
81580,"@Test public void multiKeyTest() throws Exception {
  BaseScenarioInput.multiKeyTest(this,DatePickerDP.currentDate());
}","@Test public void multiKeyTest() throws Exception {
  BaseScenarioInput.multiKeyTest(this,Timer.nowTime(""String_Node_Str""));
}",0.8292682926829268
81581,"@Test public void newInputTest() throws Exception {
  BaseScenarioInput.newInputTest(this,DatePickerDP.currentDate());
}","@Test public void newInputTest() throws Exception {
  BaseScenarioInput.newInputTest(this,Timer.nowTime(""String_Node_Str""));
}",0.8292682926829268
81582,"@BeforeMethod public void before(final Method method) throws Exception {
  isInState(_onPage,method);
}","@BeforeMethod public void before(final Method method){
  isInState(_onPage,method);
}",0.9042553191489362
81583,"protected void checkAction(){
  if (!isCheckedAction())   clickAction();
}","protected void checkAction(){
  if (!isCheckedAction())   clickAction();
  if (!isCheckedAction())   throw asserter.exception(""String_Node_Str"");
}",0.669683257918552
81584,"protected void uncheckAction(){
  if (isCheckedAction())   clickAction();
}","protected void uncheckAction(){
  if (isCheckedAction())   clickAction();
  if (isCheckedAction())   throw asserter.exception(""String_Node_Str"");
}",0.6756756756756757
81585,"protected boolean isCheckedAction(){
  return getWebElement().isSelected();
}","protected boolean isCheckedAction(){
  return isCheckedFunc.invoke(getWebElement());
}",0.7975460122699386
81586,"public String rowName(){
  return (rowName != null && !rowName.equals(""String_Node_Str"")) ? rowName : table.rows().headers()[rowNum];
}","public String rowName(){
  return (rowName != null && !rowName.equals(""String_Node_Str"")) ? rowName : table.rows().headers()[rowNum - 1];
}",0.9854014598540146
81587,"public String columnName(){
  return (columnName != null && !columnName.equals(""String_Node_Str"")) ? columnName : table.columns().headers()[columnNum];
}","public String columnName(){
  return (columnName != null && !columnName.equals(""String_Node_Str"")) ? columnName : table.columns().headers()[columnNum - 1];
}",0.9870967741935484
81588,"protected List<WebElement> getHeadersAction(){
  return table.getWebElement().findElements(columnsHeadersTemplate);
}","protected List<WebElement> getHeadersAction(){
  List<WebElement> headers=table.getWebElement().findElements(columnsHeadersLocator);
  return (table.rows().hasHeader) ? listCopy(headers,1,WebElement.class) : headers;
}",0.3701492537313433
81589,"protected List<WebElement> getHeadersAction(){
  return table.getWebElement().findElements(rowsHeadersTemplate);
}","protected List<WebElement> getHeadersAction(){
  return table.getWebElement().findElements(rowsHeadersLocator);
}",0.9515418502202644
81590,"public Table(By tableLocator,Class<?>... columnsTemplate){
  this(tableLocator);
  this.columnsTemplate=columnsTemplate;
}","public Table(TableSettings settings){
  this();
  rows().hasHeader=settings.rowHasHeaders;
  rows().headers=settings.rowHeaders;
  rows().count=settings.rowsCount;
  columns().hasHeader=settings.columnHasHeaders;
  columns().headers=settings.columnHeaders;
  columns().count=settings.columnsCount;
}",0.0997624703087886
81591,"public final String[] headers(){
  if (headers != null)   return headers;
  String[] localHeaders=Timer.getResultAction(this::getHeadersTextAction);
  localHeaders=(hasHeader) ? localHeaders : getNumList(localHeaders.length);
  setHeaders(localHeaders);
  if (localHeaders == null || localHeaders.length == 0)   throw exception(""String_Node_Str"");
  setCount(localHeaders.length);
  return localHeaders;
}","public String[] headers(){
  if (headers != null)   return headers;
  String[] localHeaders=Timer.getResultAction(this::getHeadersTextAction);
  localHeaders=(hasHeader) ? localHeaders : getNumList(localHeaders.length);
  setHeaders(localHeaders);
  if (localHeaders == null || localHeaders.length == 0)   throw exception(""String_Node_Str"");
  setCount(localHeaders.length);
  return localHeaders;
}",0.9925373134328358
81592,"public void clean(){
  headers=null;
  count=0;
  hasHeader=false;
}","public void clean(){
  headers=null;
  count=0;
}",0.8376068376068376
81593,"@Override protected boolean isCheckedAction(){
  return getWebElement().getAttribute(""String_Node_Str"") != null;
}","@Override protected boolean isCheckedAction(){
  return new Element(By.xpath(""String_Node_Str"")).getInvisibleElement().getAttribute(""String_Node_Str"") != null;
}",0.8145454545454546
81594,"public MapArray<String,ICell> getRow(int rowNum){
  if (count() < 0 || count() < rowNum || rowNum <= 0)   throw exception(""String_Node_Str"",rowNum,count());
  try {
    List<WebElement> webRow=table.rows().getRowAction(rowNum);
    return new MapArray<>(count(),key -> headers()[key],value -> table.cell(webRow.get(value),new Column(value + 1),new Row(rowNum)));
  }
 catch (  Throwable ex) {
    throw throwColsException(rowNum + ""String_Node_Str"",ex.getMessage());
  }
}","public MapArray<String,ICell> getRow(int rowNum){
  if (count() < 0 || table.rows().count() < rowNum || rowNum <= 0)   throw exception(""String_Node_Str"",rowNum,count());
  try {
    List<WebElement> webRow=table.rows().getRowAction(rowNum);
    return new MapArray<>(count(),key -> headers()[key],value -> table.cell(webRow.get(value),new Column(value + 1),new Row(rowNum)));
  }
 catch (  Throwable ex) {
    throw throwColsException(rowNum + ""String_Node_Str"",ex.getMessage());
  }
}",0.9864158829676072
81595,"public final MapArray<String,ICell> getColumn(int colNum){
  if (count() < 0 || count() < colNum || colNum <= 0)   throw exception(""String_Node_Str"",colNum,count());
  try {
    List<WebElement> webColumn=table.columns().getColumnAction(colNum);
    return new MapArray<>(count(),key -> headers()[key],value -> table.cell(webColumn.get(value),new Column(colNum),new Row(value + 1)));
  }
 catch (  Throwable ex) {
    throw throwRowsException(colNum + ""String_Node_Str"",ex.getMessage());
  }
}","public final MapArray<String,ICell> getColumn(int colNum){
  if (count() < 0 || table.columns().count() < colNum || colNum <= 0)   throw exception(""String_Node_Str"",colNum,count());
  try {
    List<WebElement> webColumn=table.columns().getColumnAction(colNum);
    return new MapArray<>(count(),key -> headers()[key],value -> table.cell(webColumn.get(value),new Column(colNum),new Row(value + 1)));
  }
 catch (  Throwable ex) {
    throw throwRowsException(colNum + ""String_Node_Str"",ex.getMessage());
  }
}",0.9840319361277444
81596,"@Test public void getRowsCacheTest(){
  List<ICell> cells=support().getCells();
  Timer timer=new Timer();
  support().useCache();
  MapArray<String,MapArray<String,String>> rows=support().rows().getAsText();
  logger.info(""String_Node_Str"" + timer.timePassedInMSec() + ""String_Node_Str"");
  Assert.areEquals(rows,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Test public void getRowsCacheTest(){
  Timer timer=new Timer();
  support().useCache();
  MapArray<String,MapArray<String,String>> rows=support().rows().getAsText();
  logger.info(""String_Node_Str"" + timer.timePassedInMSec() + ""String_Node_Str"");
  Assert.areEquals(rows,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.8685258964143426
81597,"public IText textElement() throws Exception {
  throw new Exception();
}","public IText textElement() throws RuntimeException {
  throw new RuntimeException();
}",0.9113924050632912
81598,"@Override public IDatePicker textElement() throws Exception {
  return EpamJDISite.dates._datepicker;
}","@Override public IDatePicker textElement(){
  return EpamJDISite.dates._datepicker;
}",0.9042553191489362
81599,"public IFileInput robotInput() throws Exception {
  return EpamJDISite.dates._imageInput;
}","public IFileInput robotInput(){
  return EpamJDISite.dates._imageInput;
}",0.8902439024390244
81600,"@Test public void inputTest() throws Exception {
  textElement().input(getFPath());
  checkAction(""String_Node_Str"" + getFName() + ""String_Node_Str"");
}","@Test public void inputTest(){
  textElement().input(getFPath());
  checkAction(""String_Node_Str"" + getFName() + ""String_Node_Str"");
}",0.9370629370629372
81601,"@Test public void sendKeysTest() throws Exception {
  textElement().sendKeys(getFPath());
  checkAction(""String_Node_Str"" + getFName() + ""String_Node_Str"");
}","@Test public void sendKeysTest(){
  textElement().sendKeys(getFPath());
  checkAction(""String_Node_Str"" + getFName() + ""String_Node_Str"");
}",0.9395973154362416
81602,"@Override public RFileInput textElement() throws Exception {
  return EpamJDISite.dates._rImageInput;
}","@Override public RFileInput textElement(){
  return EpamJDISite.dates._rImageInput;
}",0.9042553191489362
81603,"protected List<WebElement> getColumnAction(String colName){
  return (columnNameTemplate == null) ? getColumnAction(index(headers,colName) + 1) : table.getWebElement().findElements(fillByTemplate(columnNameTemplate,colName));
}","protected List<WebElement> getColumnAction(String colName){
  return (columnNameTemplate == null) ? getColumnAction(index(headers(),colName) + 1) : table.getWebElement().findElements(fillByTemplate(columnNameTemplate,colName));
}",0.9956140350877192
81604,"protected List<WebElement> getRowAction(String rowName){
  return (rowNameTemplate == null) ? getRowAction(index(headers,rowName) + 1) : table.getWebElement().findElements(fillByTemplate(rowNameTemplate,rowName));
}","protected List<WebElement> getRowAction(String rowName){
  return (rowNameTemplate == null) ? getRowAction(index(headers(),rowName) + 1) : table.getWebElement().findElements(fillByTemplate(rowNameTemplate,rowName));
}",0.9953703703703703
81605,"public final String[] headers(){
  if (headers != null)   return headers;
  String[] localHeaders=Timer.getResultAction(this::getHeadersTextAction);
  setHeaders((hasHeader) ? localHeaders : getNumList(localHeaders.length));
  if (localHeaders == null || localHeaders.length == 0)   throw exception(""String_Node_Str"");
  setCount(localHeaders.length);
  return localHeaders;
}","public final String[] headers(){
  if (headers != null)   return headers;
  String[] localHeaders=Timer.getResultAction(this::getHeadersTextAction);
  localHeaders=(hasHeader) ? localHeaders : getNumList(localHeaders.length);
  setHeaders(localHeaders);
  if (localHeaders == null || localHeaders.length == 0)   throw exception(""String_Node_Str"");
  setCount(localHeaders.length);
  return localHeaders;
}",0.9346991037131882
81606,"@Test public void getRowsCacheTest(){
  Timer timer=new Timer();
  support().useCache();
  MapArray<String,MapArray<String,String>> rows=support().rows().getAsText();
  logger.info(""String_Node_Str"" + timer.timePassedInMSec() + ""String_Node_Str"");
  Assert.areEquals(rows,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Test public void getRowsCacheTest(){
  List<ICell> cells=support().getCells();
  Timer timer=new Timer();
  support().useCache();
  MapArray<String,MapArray<String,String>> rows=support().rows().getAsText();
  logger.info(""String_Node_Str"" + timer.timePassedInMSec() + ""String_Node_Str"");
  Assert.areEquals(rows,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9721115537848606
81607,"protected void selectAction(int index){
  if (!haveLocator() && allLabels == null)   throw exception(""String_Node_Str"",index);
  if (allLabels != null) {
    selectFromList(allLabels.getWebElements(),index);
    return;
  }
  if (getLocator().toString().contains(""String_Node_Str"")) {
    new Clickable(fillByTemplate(getLocator(),index)).click();
    return;
  }
  List<WebElement> els=getDriver().findElements(getLocator());
  if (els.size() == 1)   getSelector().selectByIndex(index);
 else   selectFromList(els,index);
}","protected void selectAction(int index){
  if (!haveLocator() && allLabels == null)   throw exception(""String_Node_Str"",index);
  if (allLabels != null) {
    selectFromList(allLabels.getWebElements(),index);
    return;
  }
  if (getLocator().toString().contains(""String_Node_Str"")) {
    new Clickable(fillByTemplate(getLocator(),index)).click();
    return;
  }
  List<WebElement> els=getAvatar().getElements();
  if (els.size() == 1)   getSelector().selectByIndex(index);
 else   selectFromList(els,index);
}",0.966183574879227
81608,"protected List<WebElement> getElements(){
  if (!haveLocator() && allLabels == null)   throw exception(""String_Node_Str"");
  if (allLabels != null)   return allLabels.getWebElements();
  if (getLocator().toString().contains(""String_Node_Str""))   throw exception(""String_Node_Str"");
  List<WebElement> els=getDriver().findElements(getLocator());
  if (els.size() == 1)   els=getSelector().getAllSelectedOptions();
  return els;
}","protected List<WebElement> getElements(){
  if (!haveLocator() && allLabels == null)   throw exception(""String_Node_Str"");
  if (allLabels != null)   return allLabels.getWebElements();
  if (getLocator().toString().contains(""String_Node_Str""))   throw exception(""String_Node_Str"");
  List<WebElement> els=getAvatar().getElements();
  if (els.size() == 1)   els=getSelector().getAllSelectedOptions();
  return els;
}",0.9584816132858838
81609,"protected void clearAction(){
  if (!haveLocator() && allLabels == null)   throw exception(""String_Node_Str"");
  if (getLocator().toString().contains(""String_Node_Str""))   throw exception(""String_Node_Str"");
  if (allLabels != null) {
    clearElements(allLabels.getWebElements());
    return;
  }
  List<WebElement> els=getDriver().findElements(getLocator());
  if (els.size() == 1)   getSelector().deselectAll();
 else   clearElements(els);
}","protected void clearAction(){
  if (!haveLocator() && allLabels == null)   throw exception(""String_Node_Str"");
  if (getLocator().toString().contains(""String_Node_Str""))   throw exception(""String_Node_Str"");
  if (allLabels != null) {
    clearElements(allLabels.getWebElements());
    return;
  }
  List<WebElement> els=getAvatar().getElements();
  if (els.size() == 1)   getSelector().deselectAll();
 else   clearElements(els);
}",0.7817142857142857
81610,"protected int getSelectedIndexAction(){
  if (allLabels != null) {
    return getSelectedIndex(allLabels.getWebElements());
  }
  if (getLocator().toString().contains(""String_Node_Str""))   throw exception(""String_Node_Str"");
  List<WebElement> els=getDriver().findElements(getLocator());
  if (els.size() == 1)   return getSelectedIndex(getSelector().getOptions());
 else   return getSelectedIndex(els);
}","protected int getSelectedIndexAction(){
  if (allLabels != null) {
    return getSelectedIndex(allLabels.getWebElements());
  }
  if (getLocator().toString().contains(""String_Node_Str""))   throw exception(""String_Node_Str"");
  List<WebElement> els=getAvatar().getElements();
  if (els.size() == 1)   return getSelectedIndex(getSelector().getOptions());
 else   return getSelectedIndex(els);
}",0.9560853199498118
81611,"protected String getSelectedAction(){
  if (allLabels != null)   return getSelected(allLabels.getWebElements());
  if (getLocator().toString().contains(""String_Node_Str""))   throw exception(""String_Node_Str"");
  List<WebElement> els=getDriver().findElements(getLocator());
  if (els.size() == 1)   return getSelected(getSelector().getOptions());
 else   return getSelected(els);
}","protected String getSelectedAction(){
  if (allLabels != null)   return getSelected(allLabels.getWebElements());
  if (getLocator().toString().contains(""String_Node_Str""))   throw exception(""String_Node_Str"");
  List<WebElement> els=getAvatar().getElements();
  if (els.size() == 1)   return getSelected(getSelector().getOptions());
 else   return getSelected(els);
}",0.9531459170013388
81612,"public RuntimeException exception(String failMessage,Object... args){
  failMessage=format(failMessage,args);
  logger.error(FRAMEWORK,failMessage);
  throwFail().invoke(failMessage);
  return new RuntimeException(failMessage);
}","public RuntimeException exception(String failMessage,Object... args){
  if (args.length > 0)   failMessage=format(failMessage,args);
  logger.error(FRAMEWORK,failMessage);
  throwFail().invoke(failMessage);
  return new RuntimeException(failMessage);
}",0.9521829521829522
81613,"public static <T extends Enum>List<T> getAllEnumValues(T enumValue){
  return asList(enumValue.getDeclaringClass().getEnumConstants());
}","public static <T extends Enum>List<T> getAllEnumValues(T enumValue){
  return asList((T[])enumValue.getDeclaringClass().getEnumConstants());
}",0.982078853046595
81614,"public static void fillPageFromAnnotaiton(Page element,JPage pageAnnotation,Class<?> parentClass){
  String url=pageAnnotation.url();
  if (!hasDomain() && parentClass != null && parentClass.isAnnotationPresent(JSite.class))   domain=parentClass.getAnnotation(JSite.class).domain();
  url=(url.contains(""String_Node_Str"") || parentClass == null || !hasDomain()) ? url : getUrlFromUri(url);
  String title=pageAnnotation.title();
  String urlContains=pageAnnotation.urlContains();
  String titleContains=pageAnnotation.titleContains();
  String urlMatchs=pageAnnotation.urlMatchs();
  urlMatchs=(urlMatchs.contains(""String_Node_Str"") || parentClass == null || !hasDomain()) ? urlMatchs : getUrlFromUri(urlMatchs);
  String titleMatchs=pageAnnotation.titleMatchs();
  element.updatePageData(url,title,urlContains,titleContains,urlMatchs,titleMatchs);
}","public static void fillPageFromAnnotaiton(Page element,JPage pageAnnotation,Class<?> parentClass){
  String url=pageAnnotation.url();
  if (!hasDomain() && parentClass != null && parentClass.isAnnotationPresent(JSite.class))   domain=parentClass.getAnnotation(JSite.class).domain();
  url=(url.contains(""String_Node_Str"") || parentClass == null || !hasDomain()) ? url : getUrlFromUri(url);
  String title=pageAnnotation.title();
  String urlContains=pageAnnotation.urlContains();
  String titleContains=pageAnnotation.titleContains();
  String urlMatchs=pageAnnotation.urlMatchs();
  if (urlMatchs != null && !urlMatchs.equals(""String_Node_Str""))   urlMatchs=(urlMatchs.contains(""String_Node_Str"") || parentClass == null || !hasDomain()) ? urlMatchs : getUrlFromUri(urlMatchs);
  String titleMatchs=pageAnnotation.titleMatchs();
  element.updatePageData(url,title,urlContains,titleContains,urlMatchs,titleMatchs);
}",0.9314447592067988
81615,"private void selectFromList(List<WebElement> els,int index){
  if (index <= 0)   throw asserter.exception(""String_Node_Str"",index);
  if (els == null)   throw asserter.exception(""String_Node_Str"",index);
  if (els.size() < index)   throw asserter.exception(""String_Node_Str"",index,els.size());
  els.get(index).click();
}","private void selectFromList(List<WebElement> els,int index){
  if (index <= 0)   throw asserter.exception(""String_Node_Str"",index);
  if (els == null)   throw asserter.exception(""String_Node_Str"",index);
  if (els.size() < index)   throw asserter.exception(""String_Node_Str"",index,els.size());
  els.get(index - 1).click();
}",0.9938080495356038
81616,"private String getSelected(List<WebElement> els){
  WebElement element=first(els,this::isSelected);
  if (element == null)   throw asserter.exception(""String_Node_Str"");
  return element.getText();
}","private String getSelected(List<WebElement> els){
  WebElement element=first(els,this::isSelectedAction);
  if (element == null)   throw asserter.exception(""String_Node_Str"");
  return element.getText();
}",0.9851485148514852
81617,"protected boolean isSelectedAction(int index){
  return getSelectedIndexAction() == index;
}","protected boolean isSelectedAction(WebElement el){
  return el.isSelected();
}",0.7647058823529411
81618,"private int getSelectedIndex(List<WebElement> els){
  return firstIndex(els,this::isSelected);
}","private int getSelectedIndex(List<WebElement> els){
  return firstIndex(els,this::isSelectedAction) + 1;
}",0.9504950495049505
81619,"private String printShortBy(By by){
  return getByFunc(by).toString().split(""String_Node_Str"")[1] + ""String_Node_Str"" + getByLocator(by);
}","private String printShortBy(By by){
  return getByName(by) + ""String_Node_Str"" + getByLocator(by);
}",0.803347280334728
81620,"public int count(){
  return (count > 0) ? count : headers() != null ? headers.length : 0;
}","public int count(){
  if (count > 0)   return count;
 else {
    String[] headers=headers();
    return headers != null ? headers.length : 0;
  }
}",0.702928870292887
81621,"public MapArray<String,ICell<T>> getRow(int rowNum){
  int colsCount=-1;
  if (count > 0)   colsCount=count;
 else   if (headers != null && (headers.length > 0))   colsCount=headers.length;
  if (colsCount > 0 && colsCount < rowNum)   asserter.exception(format(""String_Node_Str"",rowNum,colsCount));
  try {
    return new MapArray<>(count(),colNum -> headers()[colNum],colNum -> table.cell(new Column(colNum),new Row(rowNum)));
  }
 catch (  Exception ex) {
    throw throwColsException(rowNum + ""String_Node_Str"",ex);
  }
}","public MapArray<String,ICell<T>> getRow(int rowNum){
  int colsCount=-1;
  if (count > 0)   colsCount=count;
 else   if (headers != null && (headers.length > 0))   colsCount=headers.length;
  if (colsCount == -1)   colsCount=headers().length;
  if (colsCount > 0 && colsCount < rowNum)   throw asserter.exception(format(""String_Node_Str"",rowNum,colsCount));
  try {
    return new MapArray<>(count(),colNum -> headers()[colNum],colNum -> table.cell(new Column(colNum + 1),new Row(rowNum)));
  }
 catch (  Exception ex) {
    throw throwColsException(rowNum + ""String_Node_Str"",ex);
  }
}",0.9432943294329432
81622,"public final MapArray<String,ICell<T>> getColumn(int colNum){
  int rowsCount=-1;
  if (count > 0)   rowsCount=count;
 else   if (headers != null && (headers.length > 0))   rowsCount=headers.length;
  if (rowsCount > 0 && rowsCount < colNum)   asserter.exception(format(""String_Node_Str"",colNum,rowsCount));
  try {
    return new MapArray<>(count(),rowNum -> headers()[rowNum],rowNum -> table.cell(new Column(colNum),new Row(rowNum)));
  }
 catch (  Exception ex) {
    throw throwRowsException(colNum + ""String_Node_Str"",ex);
  }
}","public final MapArray<String,ICell<T>> getColumn(int colNum){
  int rowsCount=-1;
  if (count > 0)   rowsCount=count;
 else   if (headers != null && (headers.length > 0))   rowsCount=headers.length;
  if (rowsCount == -1)   rowsCount=headers().length;
  if (rowsCount > 0 && rowsCount < colNum)   throw asserter.exception(format(""String_Node_Str"",colNum,rowsCount));
  try {
    return new MapArray<>(count(),rowNum -> headers()[rowNum],rowNum -> table.cell(new Column(colNum),new Row(rowNum + 1)));
  }
 catch (  Exception ex) {
    throw throwRowsException(colNum + ""String_Node_Str"",ex);
  }
}",0.9441984056687334
81623,"public Verify(String checkMessage,DoScreen doScreenshot){
  super(checkMessage,doScreenshot);
  setFailMethod(fails::add);
}","public Verify(String checkMessage){
  super(checkMessage);
}",0.6521739130434783
81624,"private static BaseChecker getAssert(){
  return new Check(doScreenOnFail ? SCREEN_ON_FAIL : NO_SCREEN);
}","private static BaseChecker getAssert(){
  return new Check().setFailMethod(doScreenOnFail ? SCREEN_ON_FAIL : NO_SCREEN);
}",0.9298245614035088
81625,"public Check(String checkMessage,DoScreen doScreenshot){
  super(checkMessage,doScreenshot);
  setFailMethod(Assert::fail);
}","public Check(String checkMessage){
  super(checkMessage);
}",0.6413043478260869
81626,"private static BaseChecker getAssert(){
  return new Check(DO_SCREEN);
}","private static BaseChecker getAssert(){
  return new Check().setFailMethod(DO_SCREEN);
}",0.9
81627,"private static BaseChecker getAssert(){
  return new Check(doScreenOnFail ? SCREEN_ON_FAIL : NO_SCREEN);
}","private static BaseChecker getAssert(){
  return new Check().setFailMethod(doScreenOnFail ? SCREEN_ON_FAIL : NO_SCREEN);
}",0.9298245614035088
81628,"public Check(String checkMessage,DoScreen doScreenshot){
  super(checkMessage,doScreenshot);
  setFailMethod(Assert::fail);
}","public Check(String checkMessage){
  super(checkMessage);
}",0.6413043478260869
81629,"private static BaseChecker getAssert(){
  return new Check(DO_SCREEN);
}","private static BaseChecker getAssert(){
  return new Check().setFailMethod(DO_SCREEN);
}",0.9
81630,"private String getCheckMessage(String checkMessage){
  String firstWord=checkMessage.split(""String_Node_Str"")[0];
  return (!firstWord.toLowerCase().equals(""String_Node_Str"") || firstWord.toLowerCase().equals(""String_Node_Str"")) ? ""String_Node_Str"" + checkMessage : checkMessage;
}","private String getCheckMessage(String checkMessage){
  if (checkMessage == null)   checkMessage=""String_Node_Str"";
  String firstWord=checkMessage.split(""String_Node_Str"")[0];
  return (!firstWord.toLowerCase().equals(""String_Node_Str"") || firstWord.toLowerCase().equals(""String_Node_Str"")) ? ""String_Node_Str"" + checkMessage : checkMessage;
}",0.9006410256410257
81631,"public void actionPerformed(ActionEvent ae){
  EgDownloaderWindow mainWindow=window;
  if (action == addAction) {
    new AddGroupDialog((JFrame)mainWindow);
  }
 else   if (action == changeAction) {
    File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
    if (!dataFile.exists()) {
      dataFile.mkdirs();
      JOptionPane.showMessageDialog(mainWindow,""String_Node_Str"");
    }
 else {
      File[] files=dataFile.listFiles();
      List<File> groups=new ArrayList<File>();
      for (      File file : files) {
        if (file.isDirectory()) {
          groups.add(file);
        }
      }
      if (groups.size() > 0) {
        new GroupWindow(groups,mainWindow);
      }
 else {
        JOptionPane.showMessageDialog(mainWindow,""String_Node_Str"");
      }
    }
  }
}","public void actionPerformed(ActionEvent ae){
  EgDownloaderWindow mainWindow=window;
  if (action == addAction) {
    new AddGroupDialog(null,mainWindow);
  }
 else   if (action == changeAction) {
    File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
    if (!dataFile.exists()) {
      dataFile.mkdirs();
      JOptionPane.showMessageDialog(mainWindow,""String_Node_Str"");
    }
 else {
      File[] files=dataFile.listFiles();
      List<File> groups=new ArrayList<File>();
      for (      File file : files) {
        if (file.isDirectory()) {
          groups.add(file);
        }
      }
      if (groups.size() > 0) {
        new GroupWindow(groups,mainWindow);
      }
 else {
        JOptionPane.showMessageDialog(mainWindow,""String_Node_Str"");
      }
    }
  }
}",0.99165061014772
81632,"public AddTaskGroupMenuItem(String text,final EgDownloaderWindow window,final int action){
  super(text);
  this.setIcon(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(action == addAction ? ""String_Node_Str"" : ""String_Node_Str""))));
  this.setForeground(new Color(0,0,85));
  this.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      EgDownloaderWindow mainWindow=window;
      if (action == addAction) {
        new AddGroupDialog((JFrame)mainWindow);
      }
 else       if (action == changeAction) {
        File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
        if (!dataFile.exists()) {
          dataFile.mkdirs();
          JOptionPane.showMessageDialog(mainWindow,""String_Node_Str"");
        }
 else {
          File[] files=dataFile.listFiles();
          List<File> groups=new ArrayList<File>();
          for (          File file : files) {
            if (file.isDirectory()) {
              groups.add(file);
            }
          }
          if (groups.size() > 0) {
            new GroupWindow(groups,mainWindow);
          }
 else {
            JOptionPane.showMessageDialog(mainWindow,""String_Node_Str"");
          }
        }
      }
    }
  }
);
}","public AddTaskGroupMenuItem(String text,final EgDownloaderWindow window,final int action){
  super(text);
  this.setIcon(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(action == addAction ? ""String_Node_Str"" : ""String_Node_Str""))));
  this.setForeground(new Color(0,0,85));
  this.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      EgDownloaderWindow mainWindow=window;
      if (action == addAction) {
        new AddGroupDialog(null,mainWindow);
      }
 else       if (action == changeAction) {
        File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
        if (!dataFile.exists()) {
          dataFile.mkdirs();
          JOptionPane.showMessageDialog(mainWindow,""String_Node_Str"");
        }
 else {
          File[] files=dataFile.listFiles();
          List<File> groups=new ArrayList<File>();
          for (          File file : files) {
            if (file.isDirectory()) {
              groups.add(file);
            }
          }
          if (groups.size() > 0) {
            new GroupWindow(groups,mainWindow);
          }
 else {
            JOptionPane.showMessageDialog(mainWindow,""String_Node_Str"");
          }
        }
      }
    }
  }
);
}",0.9949709864603482
81633,"public void doWork(Window window,MouseEvent e){
  new AddGroupDialog((JFrame)window);
}","public void doWork(Window window,MouseEvent e){
  new AddGroupDialog((GroupWindow)window,mainWindow);
}",0.8631578947368421
81634,"public GroupWindow(List<File> groups,EgDownloaderWindow mainWindow){
  super(Version.NAME + ""String_Node_Str"");
  this.mainWindow=mainWindow;
  this.setSize(300,400);
  this.setResizable(false);
  this.setIconImage(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""))).getImage());
  this.setLocationRelativeTo(null);
  this.getContentPane().setLayout(null);
  this.setDefaultCloseOperation(mainWindow == null ? EXIT_ON_CLOSE : DISPOSE_ON_CLOSE);
  JLabel tipLabel=new AJLabel(""String_Node_Str"",new Color(67,44,1),15,15,100,30);
  JButton addGroupBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      new AddGroupDialog((JFrame)window);
    }
  }
),215,15,62,30);
  addGroupBtn.setUI(new BEButtonUI().setNormalColor(BEButtonUI.NormalColor.blue));
  JList list=new GroupList(groups,this,mainWindow);
  list.setSelectedIndex(0);
  JScrollPane listPane=new JScrollPane(list);
  listPane.setBounds(new Rectangle(10,50,270,300));
  listPane.setAutoscrolls(true);
  listPane.getViewport().setBackground(new Color(254,254,254));
  ComponentUtil.addComponents(this.getContentPane(),tipLabel,addGroupBtn,listPane);
  this.setVisible(true);
}","public GroupWindow(List<File> groups,final EgDownloaderWindow mainWindow){
  super(Version.NAME + ""String_Node_Str"");
  this.mainWindow=mainWindow;
  this.setSize(300,400);
  this.setResizable(false);
  this.setIconImage(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""))).getImage());
  this.setLocationRelativeTo(null);
  this.getContentPane().setLayout(null);
  this.setDefaultCloseOperation(mainWindow == null ? EXIT_ON_CLOSE : DISPOSE_ON_CLOSE);
  JLabel tipLabel=new AJLabel(""String_Node_Str"",new Color(67,44,1),15,15,100,30);
  JButton addGroupBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      new AddGroupDialog((GroupWindow)window,mainWindow);
    }
  }
),215,15,62,30);
  addGroupBtn.setUI(new BEButtonUI().setNormalColor(BEButtonUI.NormalColor.blue));
  JList list=new GroupList(groups,this,mainWindow);
  list.setSelectedIndex(0);
  JScrollPane listPane=new JScrollPane(list);
  listPane.setBounds(new Rectangle(10,50,270,300));
  listPane.setAutoscrolls(true);
  listPane.getViewport().setBackground(new Color(254,254,254));
  ComponentUtil.addComponents(this.getContentPane(),tipLabel,addGroupBtn,listPane);
  this.setVisible(true);
}",0.9867872044506258
81635,"public AddGroupDialog(final JFrame window){
  this.setTitle(""String_Node_Str"");
  this.setIconImage(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""))).getImage());
  this.setSize(300,120);
  this.setResizable(false);
  this.setLayout(null);
  this.setLocationRelativeTo(window);
  JLabel groupNameLabel=new AJLabel(""String_Node_Str"",Color.BLUE,15,20,40,30);
  final JTextField groupNameField=new AJTextField(""String_Node_Str"",""String_Node_Str"",50,20,160,30);
  JButton addBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window dialog,    MouseEvent event){
      AddGroupDialog addGroupDialog=(AddGroupDialog)dialog;
      String groupName=groupNameField.getText().trim();
      if (""String_Node_Str"".equals(groupName)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else       if (!FileUtil.dirValidate(groupName)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        if (window instanceof EgDownloaderWindow) {
          EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
          mainWindow.saveTaskGroupData();
          mainWindow.dispose();
        }
 else {
          window.dispose();
        }
        ComponentConst.groupName=groupName;
        ComponentConst.changeDataPath(groupName);
        ComponentConst.changeDataXmlPath();
        addGroupDialog.dispose();
        if (window instanceof EgDownloaderWindow) {
          FileUtil.ifNotExistsThenCreate(ComponentConst.getXmlDirPath());
          SettingDom4jDbTemplate.updateDom();
          TaskDom4jDbTemplate.updateDom();
          PictureDom4jDbTemplate.updateDom();
        }
        new InitWindow();
      }
    }
  }
),220,20,60,30);
  addBtn.setUI(new BEButtonUI().setNormalColor(BEButtonUI.NormalColor.blue));
  ComponentUtil.addComponents(getContentPane(),groupNameLabel,groupNameField,addBtn);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      AddGroupDialog w=(AddGroupDialog)e.getSource();
      w.dispose();
    }
    public void windowDeactivated(    WindowEvent e){
      AddGroupDialog w=(AddGroupDialog)e.getSource();
      w.dispose();
    }
  }
);
  setDefaultCloseOperation(DISPOSE_ON_CLOSE);
  setVisible(true);
}","public AddGroupDialog(final GroupWindow window,final EgDownloaderWindow mainWindow){
  this.setTitle(""String_Node_Str"");
  this.setIconImage(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""))).getImage());
  this.setSize(300,120);
  this.setResizable(false);
  this.setLayout(null);
  this.setLocationRelativeTo(window);
  JLabel groupNameLabel=new AJLabel(""String_Node_Str"",Color.BLUE,15,20,40,30);
  final JTextField groupNameField=new AJTextField(""String_Node_Str"",""String_Node_Str"",50,20,160,30);
  JButton addBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window dialog,    MouseEvent event){
      AddGroupDialog addGroupDialog=(AddGroupDialog)dialog;
      String groupName=groupNameField.getText().trim();
      if (""String_Node_Str"".equals(groupName)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else       if (!FileUtil.dirValidate(groupName)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        FileUtil.ifNotExistsThenCreate(ComponentConst.ROOT_DATA_PATH);
        File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
        for (        File file : dataFile.listFiles()) {
          if (file.getName().equals(groupName)) {
            JOptionPane.showMessageDialog(null,""String_Node_Str"");
            return;
          }
        }
        if (mainWindow != null) {
          mainWindow.saveTaskGroupData();
          mainWindow.dispose();
        }
        ComponentConst.groupName=groupName;
        ComponentConst.changeDataPath(groupName);
        ComponentConst.changeDataXmlPath();
        addGroupDialog.dispose();
        if (mainWindow != null) {
          FileUtil.ifNotExistsThenCreate(ComponentConst.getXmlDirPath());
          SettingDom4jDbTemplate.updateDom();
          TaskDom4jDbTemplate.updateDom();
          PictureDom4jDbTemplate.updateDom();
        }
        if (window != null) {
          window.dispose();
        }
        new InitWindow();
      }
    }
  }
),220,20,60,30);
  addBtn.setUI(new BEButtonUI().setNormalColor(BEButtonUI.NormalColor.blue));
  ComponentUtil.addComponents(getContentPane(),groupNameLabel,groupNameField,addBtn);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      AddGroupDialog w=(AddGroupDialog)e.getSource();
      w.dispose();
    }
    public void windowDeactivated(    WindowEvent e){
      AddGroupDialog w=(AddGroupDialog)e.getSource();
      w.dispose();
    }
  }
);
  setDefaultCloseOperation(DISPOSE_ON_CLOSE);
  setVisible(true);
}",0.8723283525628901
81636,"public void doWork(Window dialog,MouseEvent event){
  AddGroupDialog addGroupDialog=(AddGroupDialog)dialog;
  String groupName=groupNameField.getText().trim();
  if (""String_Node_Str"".equals(groupName)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
 else   if (!FileUtil.dirValidate(groupName)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
 else {
    if (window instanceof EgDownloaderWindow) {
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      mainWindow.saveTaskGroupData();
      mainWindow.dispose();
    }
 else {
      window.dispose();
    }
    ComponentConst.groupName=groupName;
    ComponentConst.changeDataPath(groupName);
    ComponentConst.changeDataXmlPath();
    addGroupDialog.dispose();
    if (window instanceof EgDownloaderWindow) {
      FileUtil.ifNotExistsThenCreate(ComponentConst.getXmlDirPath());
      SettingDom4jDbTemplate.updateDom();
      TaskDom4jDbTemplate.updateDom();
      PictureDom4jDbTemplate.updateDom();
    }
    new InitWindow();
  }
}","public void doWork(Window dialog,MouseEvent event){
  AddGroupDialog addGroupDialog=(AddGroupDialog)dialog;
  String groupName=groupNameField.getText().trim();
  if (""String_Node_Str"".equals(groupName)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
 else   if (!FileUtil.dirValidate(groupName)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
 else {
    FileUtil.ifNotExistsThenCreate(ComponentConst.ROOT_DATA_PATH);
    File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
    for (    File file : dataFile.listFiles()) {
      if (file.getName().equals(groupName)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
    }
    if (mainWindow != null) {
      mainWindow.saveTaskGroupData();
      mainWindow.dispose();
    }
    ComponentConst.groupName=groupName;
    ComponentConst.changeDataPath(groupName);
    ComponentConst.changeDataXmlPath();
    addGroupDialog.dispose();
    if (mainWindow != null) {
      FileUtil.ifNotExistsThenCreate(ComponentConst.getXmlDirPath());
      SettingDom4jDbTemplate.updateDom();
      TaskDom4jDbTemplate.updateDom();
      PictureDom4jDbTemplate.updateDom();
    }
    if (window != null) {
      window.dispose();
    }
    new InitWindow();
  }
}",0.7584415584415585
81637,"public InitWindow(){
  super(Version.NAME + ""String_Node_Str"");
  if (ComponentConst.mainWindow != null) {
    ((TaskingTable)ComponentConst.mainWindow.runningTable).stopAllTasks();
    ComponentConst.mainWindow.dispose();
    ComponentConst.mainWindow=null;
    System.gc();
  }
  this.setSize(300,100);
  this.setResizable(false);
  this.setLocationRelativeTo(null);
  this.setUndecorated(true);
  this.getContentPane().setLayout(null);
  this.setDefaultCloseOperation(EXIT_ON_CLOSE);
  textLabel=new AJLabel(""String_Node_Str"",new Color(123,23,89),0,10,300,30);
  textLabel.setHorizontalAlignment(JLabel.CENTER);
  this.getContentPane().add(textLabel);
  this.setVisible(true);
  textLabel.setForeground(new Color(123,23,89));
  textLabel.setText(""String_Node_Str"");
  File data_path=new File(ComponentConst.getXmlDirPath());
  if (!data_path.exists()) {
    data_path.mkdirs();
  }
  DbTemplate<Setting> settingDbTemplate=new SettingDom4jDbTemplate();
  List<Setting> settings=settingDbTemplate.query();
  Setting setting=null;
  if (settings == null || settings.size() == 0) {
    setting=new Setting();
    settingDbTemplate.store(setting);
  }
 else {
    setting=settings.get(0);
  }
  textLabel.setForeground(new Color(123,23,89));
  textLabel.setText(""String_Node_Str"");
  DbTemplate<Task> taskDbTemplate=new TaskDom4jDbTemplate();
  DbTemplate<Picture> pictureDbTemplate=new PictureDom4jDbTemplate();
  List<Task> tasks=taskDbTemplate.query();
  if (tasks != null) {
    int p_historyCount=0;
    for (    Task task : tasks) {
      task.setPictures(pictureDbTemplate.query(""String_Node_Str"",task.getId()));
      p_historyCount+=task.getTotal();
    }
    if (setting.getTaskHistoryCount() == 0) {
      setting.setTaskHistoryCount(tasks.size());
    }
    if (setting.getPictureHistoryCount() == 0) {
      setting.setPictureHistoryCount(p_historyCount);
    }
  }
  ComponentConst.mainWindow=new EgDownloaderWindow(setting,tasks,taskDbTemplate,pictureDbTemplate,settingDbTemplate);
  textLabel.setText(""String_Node_Str"");
  ComponentConst.mainWindow.setVisible(true);
  this.dispose();
}","public InitWindow(){
  super(Version.NAME + ""String_Node_Str"");
  this.setSize(300,100);
  this.setResizable(false);
  this.setLocationRelativeTo(null);
  this.setUndecorated(true);
  this.getContentPane().setLayout(null);
  this.setDefaultCloseOperation(EXIT_ON_CLOSE);
  textLabel=new AJLabel(""String_Node_Str"",new Color(123,23,89),0,10,300,30);
  textLabel.setHorizontalAlignment(JLabel.CENTER);
  this.getContentPane().add(textLabel);
  this.setVisible(true);
  textLabel.setForeground(new Color(123,23,89));
  textLabel.setText(""String_Node_Str"");
  File data_path=new File(ComponentConst.getXmlDirPath());
  if (!data_path.exists()) {
    data_path.mkdirs();
  }
  DbTemplate<Setting> settingDbTemplate=new SettingDom4jDbTemplate();
  List<Setting> settings=settingDbTemplate.query();
  Setting setting=null;
  if (settings == null || settings.size() == 0) {
    setting=new Setting();
    settingDbTemplate.store(setting);
  }
 else {
    setting=settings.get(0);
  }
  textLabel.setForeground(new Color(123,23,89));
  textLabel.setText(""String_Node_Str"");
  DbTemplate<Task> taskDbTemplate=new TaskDom4jDbTemplate();
  DbTemplate<Picture> pictureDbTemplate=new PictureDom4jDbTemplate();
  List<Task> tasks=taskDbTemplate.query();
  if (tasks != null) {
    int p_historyCount=0;
    for (    Task task : tasks) {
      task.setPictures(pictureDbTemplate.query(""String_Node_Str"",task.getId()));
      p_historyCount+=task.getTotal();
    }
    if (setting.getTaskHistoryCount() == 0) {
      setting.setTaskHistoryCount(tasks.size());
    }
    if (setting.getPictureHistoryCount() == 0) {
      setting.setPictureHistoryCount(p_historyCount);
    }
  }
  if (ComponentConst.mainWindow != null) {
    ((TaskingTable)ComponentConst.mainWindow.runningTable).stopAllTasks();
    ComponentConst.mainWindow.changeTaskGroup(setting,tasks,taskDbTemplate,pictureDbTemplate,settingDbTemplate);
  }
 else {
    ComponentConst.mainWindow=new EgDownloaderWindow(setting,tasks,taskDbTemplate,pictureDbTemplate,settingDbTemplate);
  }
  textLabel.setText(""String_Node_Str"");
  ComponentConst.mainWindow.setVisible(true);
  this.dispose();
}",0.888731396172927
81638,"public void actionPerformed(ActionEvent e){
  if (this_.getSelectedIndex() == 0) {
    JOptionPane.showMessageDialog(this_,""String_Node_Str"");
  }
 else {
    String name=this_.getSelectedValue().toString();
    if (name.indexOf(""String_Node_Str"") != -1) {
      name=name.substring(name.indexOf(""String_Node_Str"") + 1,name.length()).trim();
    }
    int r=JOptionPane.showConfirmDialog(this_,""String_Node_Str"" + name + ""String_Node_Str"");
    if (r == JOptionPane.OK_OPTION) {
      if (mainWindow != null && name.equals(ComponentConst.groupName)) {
        mainWindow.dispose();
      }
      File file=new File(ComponentConst.ROOT_DATA_PATH + ""String_Node_Str"" + name);
      if (file.exists()) {
        FileUtil.deleteFile(file);
      }
      File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
      if (!dataFile.exists()) {
        dataFile.mkdirs();
        if (window != null) {
          window.dispose();
        }
        ComponentConst.groupName=""String_Node_Str"";
        ComponentConst.changeDataPath(""String_Node_Str"");
        ComponentConst.changeDataXmlPath();
        SettingDom4jDbTemplate.updateDom();
        TaskDom4jDbTemplate.updateDom();
        PictureDom4jDbTemplate.updateDom();
        new InitWindow();
      }
 else {
        File[] files=dataFile.listFiles();
        List<File> groups=new ArrayList<File>();
        for (        File file2 : files) {
          if (file2.isDirectory()) {
            groups.add(file2);
          }
        }
        if (groups.size() > 0) {
          this_.setModel(new GroupListModel(groups));
          this_.updateUI();
        }
 else {
          if (window != null) {
            window.dispose();
          }
          ComponentConst.groupName=""String_Node_Str"";
          ComponentConst.changeDataPath(""String_Node_Str"");
          ComponentConst.changeDataXmlPath();
          SettingDom4jDbTemplate.updateDom();
          TaskDom4jDbTemplate.updateDom();
          PictureDom4jDbTemplate.updateDom();
          new InitWindow();
        }
      }
    }
  }
}","public void actionPerformed(ActionEvent e){
  if (this_.getSelectedIndex() == 0) {
    JOptionPane.showMessageDialog(this_,""String_Node_Str"");
  }
 else {
    String name=this_.getSelectedValue().toString();
    if (name.indexOf(""String_Node_Str"") != -1) {
      name=name.substring(name.indexOf(""String_Node_Str"") + 1,name.length()).trim();
    }
    int r=JOptionPane.showConfirmDialog(this_,""String_Node_Str"" + name + ""String_Node_Str"");
    if (r == JOptionPane.OK_OPTION) {
      if (mainWindow != null && name.equals(ComponentConst.groupName)) {
        mainWindow.saveTaskGroupData();
        mainWindow.dispose();
      }
      File file=new File(ComponentConst.ROOT_DATA_PATH + ""String_Node_Str"" + name);
      if (file.exists()) {
        FileUtil.deleteFile(file);
      }
      File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
      if (!dataFile.exists()) {
        dataFile.mkdirs();
        if (window != null) {
          window.dispose();
        }
        ComponentConst.groupName=""String_Node_Str"";
        ComponentConst.changeDataPath(""String_Node_Str"");
        ComponentConst.changeDataXmlPath();
        SettingDom4jDbTemplate.updateDom();
        TaskDom4jDbTemplate.updateDom();
        PictureDom4jDbTemplate.updateDom();
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            new InitWindow();
          }
        }
);
      }
 else {
        File[] files=dataFile.listFiles();
        List<File> groups=new ArrayList<File>();
        for (        File file2 : files) {
          if (file2.isDirectory()) {
            groups.add(file2);
          }
        }
        if (groups.size() > 0) {
          this_.setModel(new GroupListModel(groups));
          this_.updateUI();
        }
 else {
          if (window != null) {
            window.dispose();
          }
          ComponentConst.groupName=""String_Node_Str"";
          ComponentConst.changeDataPath(""String_Node_Str"");
          ComponentConst.changeDataXmlPath();
          SettingDom4jDbTemplate.updateDom();
          TaskDom4jDbTemplate.updateDom();
          PictureDom4jDbTemplate.updateDom();
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              new InitWindow();
            }
          }
);
        }
      }
    }
  }
}",0.938822447102116
81639,"public GroupList(List<File> groups,final GroupWindow window,final EgDownloaderWindow mainWindow){
  this.setModel(new GroupListModel(groups));
  this.setCursor(CursorManager.getPointerCursor());
  this.setForeground(Color.BLUE);
  this.addMouseListener(new MouseListener(){
    public void mouseReleased(    MouseEvent arg0){
    }
    public void mousePressed(    MouseEvent arg0){
    }
    public void mouseExited(    MouseEvent arg0){
    }
    public void mouseEntered(    MouseEvent arg0){
    }
    public void mouseClicked(    MouseEvent me){
      int clickNum=me.getClickCount();
      GroupList list=(GroupList)me.getSource();
      if (me.getButton() == MouseEvent.BUTTON1) {
        if (2 == clickNum) {
          String groupName=""String_Node_Str"";
          if (list.getSelectedIndex() != 0) {
            groupName=list.getSelectedValue().toString();
            if (groupName.indexOf(""String_Node_Str"") != -1) {
              groupName=groupName.substring(groupName.indexOf(""String_Node_Str"") + 1,groupName.length()).trim();
            }
          }
          if (mainWindow != null && groupName.equals(ComponentConst.groupName)) {
            window.dispose();
            return;
          }
          if (mainWindow != null) {
            mainWindow.saveTaskGroupData();
            mainWindow.dispose();
          }
          ComponentConst.groupName=groupName;
          ComponentConst.changeDataPath(groupName);
          ComponentConst.changeDataXmlPath();
          window.dispose();
          if (mainWindow != null) {
            SettingDom4jDbTemplate.updateDom();
            TaskDom4jDbTemplate.updateDom();
            PictureDom4jDbTemplate.updateDom();
          }
          new InitWindow();
        }
      }
 else       if (me.getButton() == MouseEvent.BUTTON3) {
        int rowIndex=list.locationToIndex(me.getPoint());
        list.getSelectionModel().setSelectionInterval(rowIndex,rowIndex);
        if (popupMenu == null) {
          popupMenu=new AJPopupMenu(deleteMenu);
        }
        popupMenu.show(list,me.getPoint().x,me.getPoint().y);
      }
    }
  }
);
  final GroupList this_=this;
  deleteMenu.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (this_.getSelectedIndex() == 0) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else {
        String name=this_.getSelectedValue().toString();
        if (name.indexOf(""String_Node_Str"") != -1) {
          name=name.substring(name.indexOf(""String_Node_Str"") + 1,name.length()).trim();
        }
        int r=JOptionPane.showConfirmDialog(this_,""String_Node_Str"" + name + ""String_Node_Str"");
        if (r == JOptionPane.OK_OPTION) {
          if (mainWindow != null && name.equals(ComponentConst.groupName)) {
            mainWindow.dispose();
          }
          File file=new File(ComponentConst.ROOT_DATA_PATH + ""String_Node_Str"" + name);
          if (file.exists()) {
            FileUtil.deleteFile(file);
          }
          File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
          if (!dataFile.exists()) {
            dataFile.mkdirs();
            if (window != null) {
              window.dispose();
            }
            ComponentConst.groupName=""String_Node_Str"";
            ComponentConst.changeDataPath(""String_Node_Str"");
            ComponentConst.changeDataXmlPath();
            SettingDom4jDbTemplate.updateDom();
            TaskDom4jDbTemplate.updateDom();
            PictureDom4jDbTemplate.updateDom();
            new InitWindow();
          }
 else {
            File[] files=dataFile.listFiles();
            List<File> groups=new ArrayList<File>();
            for (            File file2 : files) {
              if (file2.isDirectory()) {
                groups.add(file2);
              }
            }
            if (groups.size() > 0) {
              this_.setModel(new GroupListModel(groups));
              this_.updateUI();
            }
 else {
              if (window != null) {
                window.dispose();
              }
              ComponentConst.groupName=""String_Node_Str"";
              ComponentConst.changeDataPath(""String_Node_Str"");
              ComponentConst.changeDataXmlPath();
              SettingDom4jDbTemplate.updateDom();
              TaskDom4jDbTemplate.updateDom();
              PictureDom4jDbTemplate.updateDom();
              new InitWindow();
            }
          }
        }
      }
    }
  }
);
}","public GroupList(List<File> groups,final GroupWindow window,final EgDownloaderWindow mainWindow){
  this.setModel(new GroupListModel(groups));
  this.setCursor(CursorManager.getPointerCursor());
  this.setForeground(Color.BLUE);
  this.addMouseListener(new MouseListener(){
    public void mouseReleased(    MouseEvent arg0){
    }
    public void mousePressed(    MouseEvent arg0){
    }
    public void mouseExited(    MouseEvent arg0){
    }
    public void mouseEntered(    MouseEvent arg0){
    }
    public void mouseClicked(    MouseEvent me){
      int clickNum=me.getClickCount();
      GroupList list=(GroupList)me.getSource();
      if (me.getButton() == MouseEvent.BUTTON1) {
        if (2 == clickNum) {
          String groupName=""String_Node_Str"";
          if (list.getSelectedIndex() != 0) {
            groupName=list.getSelectedValue().toString();
            if (groupName.indexOf(""String_Node_Str"") != -1) {
              groupName=groupName.substring(groupName.indexOf(""String_Node_Str"") + 1,groupName.length()).trim();
            }
          }
          if (mainWindow != null && groupName.equals(ComponentConst.groupName)) {
            window.dispose();
            return;
          }
          if (mainWindow != null) {
            mainWindow.saveTaskGroupData();
            mainWindow.dispose();
          }
          ComponentConst.groupName=groupName;
          ComponentConst.changeDataPath(groupName);
          ComponentConst.changeDataXmlPath();
          window.dispose();
          if (mainWindow != null) {
            SettingDom4jDbTemplate.updateDom();
            TaskDom4jDbTemplate.updateDom();
            PictureDom4jDbTemplate.updateDom();
          }
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              new InitWindow();
            }
          }
);
        }
      }
 else       if (me.getButton() == MouseEvent.BUTTON3) {
        int rowIndex=list.locationToIndex(me.getPoint());
        list.getSelectionModel().setSelectionInterval(rowIndex,rowIndex);
        if (popupMenu == null) {
          popupMenu=new AJPopupMenu(deleteMenu);
        }
        popupMenu.show(list,me.getPoint().x,me.getPoint().y);
      }
    }
  }
);
  final GroupList this_=this;
  deleteMenu.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (this_.getSelectedIndex() == 0) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else {
        String name=this_.getSelectedValue().toString();
        if (name.indexOf(""String_Node_Str"") != -1) {
          name=name.substring(name.indexOf(""String_Node_Str"") + 1,name.length()).trim();
        }
        int r=JOptionPane.showConfirmDialog(this_,""String_Node_Str"" + name + ""String_Node_Str"");
        if (r == JOptionPane.OK_OPTION) {
          if (mainWindow != null && name.equals(ComponentConst.groupName)) {
            mainWindow.saveTaskGroupData();
            mainWindow.dispose();
          }
          File file=new File(ComponentConst.ROOT_DATA_PATH + ""String_Node_Str"" + name);
          if (file.exists()) {
            FileUtil.deleteFile(file);
          }
          File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
          if (!dataFile.exists()) {
            dataFile.mkdirs();
            if (window != null) {
              window.dispose();
            }
            ComponentConst.groupName=""String_Node_Str"";
            ComponentConst.changeDataPath(""String_Node_Str"");
            ComponentConst.changeDataXmlPath();
            SettingDom4jDbTemplate.updateDom();
            TaskDom4jDbTemplate.updateDom();
            PictureDom4jDbTemplate.updateDom();
            SwingUtilities.invokeLater(new Runnable(){
              public void run(){
                new InitWindow();
              }
            }
);
          }
 else {
            File[] files=dataFile.listFiles();
            List<File> groups=new ArrayList<File>();
            for (            File file2 : files) {
              if (file2.isDirectory()) {
                groups.add(file2);
              }
            }
            if (groups.size() > 0) {
              this_.setModel(new GroupListModel(groups));
              this_.updateUI();
            }
 else {
              if (window != null) {
                window.dispose();
              }
              ComponentConst.groupName=""String_Node_Str"";
              ComponentConst.changeDataPath(""String_Node_Str"");
              ComponentConst.changeDataXmlPath();
              SettingDom4jDbTemplate.updateDom();
              TaskDom4jDbTemplate.updateDom();
              PictureDom4jDbTemplate.updateDom();
              SwingUtilities.invokeLater(new Runnable(){
                public void run(){
                  new InitWindow();
                }
              }
);
            }
          }
        }
      }
    }
  }
);
}",0.954656993491945
81640,"public void mouseClicked(MouseEvent me){
  int clickNum=me.getClickCount();
  GroupList list=(GroupList)me.getSource();
  if (me.getButton() == MouseEvent.BUTTON1) {
    if (2 == clickNum) {
      String groupName=""String_Node_Str"";
      if (list.getSelectedIndex() != 0) {
        groupName=list.getSelectedValue().toString();
        if (groupName.indexOf(""String_Node_Str"") != -1) {
          groupName=groupName.substring(groupName.indexOf(""String_Node_Str"") + 1,groupName.length()).trim();
        }
      }
      if (mainWindow != null && groupName.equals(ComponentConst.groupName)) {
        window.dispose();
        return;
      }
      if (mainWindow != null) {
        mainWindow.saveTaskGroupData();
        mainWindow.dispose();
      }
      ComponentConst.groupName=groupName;
      ComponentConst.changeDataPath(groupName);
      ComponentConst.changeDataXmlPath();
      window.dispose();
      if (mainWindow != null) {
        SettingDom4jDbTemplate.updateDom();
        TaskDom4jDbTemplate.updateDom();
        PictureDom4jDbTemplate.updateDom();
      }
      new InitWindow();
    }
  }
 else   if (me.getButton() == MouseEvent.BUTTON3) {
    int rowIndex=list.locationToIndex(me.getPoint());
    list.getSelectionModel().setSelectionInterval(rowIndex,rowIndex);
    if (popupMenu == null) {
      popupMenu=new AJPopupMenu(deleteMenu);
    }
    popupMenu.show(list,me.getPoint().x,me.getPoint().y);
  }
}","public void mouseClicked(MouseEvent me){
  int clickNum=me.getClickCount();
  GroupList list=(GroupList)me.getSource();
  if (me.getButton() == MouseEvent.BUTTON1) {
    if (2 == clickNum) {
      String groupName=""String_Node_Str"";
      if (list.getSelectedIndex() != 0) {
        groupName=list.getSelectedValue().toString();
        if (groupName.indexOf(""String_Node_Str"") != -1) {
          groupName=groupName.substring(groupName.indexOf(""String_Node_Str"") + 1,groupName.length()).trim();
        }
      }
      if (mainWindow != null && groupName.equals(ComponentConst.groupName)) {
        window.dispose();
        return;
      }
      if (mainWindow != null) {
        mainWindow.saveTaskGroupData();
        mainWindow.dispose();
      }
      ComponentConst.groupName=groupName;
      ComponentConst.changeDataPath(groupName);
      ComponentConst.changeDataXmlPath();
      window.dispose();
      if (mainWindow != null) {
        SettingDom4jDbTemplate.updateDom();
        TaskDom4jDbTemplate.updateDom();
        PictureDom4jDbTemplate.updateDom();
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          new InitWindow();
        }
      }
);
    }
  }
 else   if (me.getButton() == MouseEvent.BUTTON3) {
    int rowIndex=list.locationToIndex(me.getPoint());
    list.getSelectionModel().setSelectionInterval(rowIndex,rowIndex);
    if (popupMenu == null) {
      popupMenu=new AJPopupMenu(deleteMenu);
    }
    popupMenu.show(list,me.getPoint().x,me.getPoint().y);
  }
}",0.9658899020601148
81641,"public InitWindow(){
  super(Version.NAME + ""String_Node_Str"");
  this.setSize(300,100);
  this.setResizable(false);
  this.setLocationRelativeTo(null);
  this.setUndecorated(true);
  this.getContentPane().setLayout(null);
  this.setDefaultCloseOperation(EXIT_ON_CLOSE);
  textLabel=new AJLabel(""String_Node_Str"",new Color(123,23,89),0,10,300,30);
  textLabel.setHorizontalAlignment(JLabel.CENTER);
  this.getContentPane().add(textLabel);
  this.setVisible(true);
  textLabel.setForeground(new Color(123,23,89));
  textLabel.setText(""String_Node_Str"");
  File data_path=new File(ComponentConst.getXmlDirPath());
  if (!data_path.exists()) {
    data_path.mkdirs();
  }
  DbTemplate<Setting> settingDbTemplate=new SettingDom4jDbTemplate();
  List<Setting> settings=settingDbTemplate.query();
  Setting setting=null;
  if (settings == null || settings.size() == 0) {
    setting=new Setting();
    settingDbTemplate.store(setting);
  }
 else {
    setting=settings.get(0);
  }
  textLabel.setForeground(new Color(123,23,89));
  textLabel.setText(""String_Node_Str"");
  DbTemplate<Task> taskDbTemplate=new TaskDom4jDbTemplate();
  DbTemplate<Picture> pictureDbTemplate=new PictureDom4jDbTemplate();
  List<Task> tasks=taskDbTemplate.query();
  if (tasks != null) {
    int p_historyCount=0;
    for (    Task task : tasks) {
      task.setPictures(pictureDbTemplate.query(""String_Node_Str"",task.getId()));
      p_historyCount+=task.getTotal();
    }
    if (setting.getTaskHistoryCount() == 0) {
      setting.setTaskHistoryCount(tasks.size());
    }
    if (setting.getPictureHistoryCount() == 0) {
      setting.setPictureHistoryCount(p_historyCount);
    }
  }
  JFrame egDownloaderWindow=new EgDownloaderWindow(setting,tasks,taskDbTemplate,pictureDbTemplate,settingDbTemplate);
  textLabel.setText(""String_Node_Str"");
  egDownloaderWindow.setVisible(true);
  this.dispose();
}","public InitWindow(){
  super(Version.NAME + ""String_Node_Str"");
  if (ComponentConst.mainWindow != null) {
    ((TaskingTable)ComponentConst.mainWindow.runningTable).stopAllTasks();
    ComponentConst.mainWindow.dispose();
    ComponentConst.mainWindow=null;
    System.gc();
  }
  this.setSize(300,100);
  this.setResizable(false);
  this.setLocationRelativeTo(null);
  this.setUndecorated(true);
  this.getContentPane().setLayout(null);
  this.setDefaultCloseOperation(EXIT_ON_CLOSE);
  textLabel=new AJLabel(""String_Node_Str"",new Color(123,23,89),0,10,300,30);
  textLabel.setHorizontalAlignment(JLabel.CENTER);
  this.getContentPane().add(textLabel);
  this.setVisible(true);
  textLabel.setForeground(new Color(123,23,89));
  textLabel.setText(""String_Node_Str"");
  File data_path=new File(ComponentConst.getXmlDirPath());
  if (!data_path.exists()) {
    data_path.mkdirs();
  }
  DbTemplate<Setting> settingDbTemplate=new SettingDom4jDbTemplate();
  List<Setting> settings=settingDbTemplate.query();
  Setting setting=null;
  if (settings == null || settings.size() == 0) {
    setting=new Setting();
    settingDbTemplate.store(setting);
  }
 else {
    setting=settings.get(0);
  }
  textLabel.setForeground(new Color(123,23,89));
  textLabel.setText(""String_Node_Str"");
  DbTemplate<Task> taskDbTemplate=new TaskDom4jDbTemplate();
  DbTemplate<Picture> pictureDbTemplate=new PictureDom4jDbTemplate();
  List<Task> tasks=taskDbTemplate.query();
  if (tasks != null) {
    int p_historyCount=0;
    for (    Task task : tasks) {
      task.setPictures(pictureDbTemplate.query(""String_Node_Str"",task.getId()));
      p_historyCount+=task.getTotal();
    }
    if (setting.getTaskHistoryCount() == 0) {
      setting.setTaskHistoryCount(tasks.size());
    }
    if (setting.getPictureHistoryCount() == 0) {
      setting.setPictureHistoryCount(p_historyCount);
    }
  }
  ComponentConst.mainWindow=new EgDownloaderWindow(setting,tasks,taskDbTemplate,pictureDbTemplate,settingDbTemplate);
  textLabel.setText(""String_Node_Str"");
  ComponentConst.mainWindow.setVisible(true);
  this.dispose();
}",0.9263263766658284
81642,"public AddFormDialog(final JFrame mainWindow){
  this.mainWindow=mainWindow;
  this.setTitle(""String_Node_Str"");
  this.setIconImage(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""))).getImage());
  this.setSize(480,250);
  this.setResizable(false);
  this.setLayout(null);
  this.setLocationRelativeTo(mainWindow);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      mainWindow.setVisible(true);
      mainWindow.setEnabled(true);
      AddFormDialog w=(AddFormDialog)e.getSource();
      w.dispose();
    }
    public void windowActivated(    WindowEvent e){
      mainWindow.setEnabled(false);
    }
  }
);
  setDefaultCloseOperation(HIDE_ON_CLOSE);
  tipLabel=new AJLabel(""String_Node_Str"",Color.LIGHT_GRAY,80,5,this.getWidth() - 80,30);
  urlLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,40,60,30);
  urlField=new AJTextField(""String_Node_Str"",65,40,395,30);
  saveDirLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,120,60,30);
  saveDirField=new AJTextField(""String_Node_Str"",65,120,320,30);
  tagLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,80,60,30);
  final Setting setting=((EgDownloaderWindow)mainWindow).setting;
  tagField=new AJTextField(""String_Node_Str"",65,80,setting.getTags() != null ? 300 : 395,30);
  initOrUpdateTagComboBox(setting);
  saveDirField.setText(setting.getDefaultSaveDir() + ""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date()));
  chooserBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window addFormDialog,    MouseEvent e){
      AddFormDialog this_=(AddFormDialog)addFormDialog;
      int result=this_.saveDirChooser.showOpenDialog(this_);
      File file=null;
      if (result == JFileChooser.APPROVE_OPTION) {
        file=this_.saveDirChooser.getSelectedFile();
        if (!file.isDirectory()) {
          JOptionPane.showMessageDialog(this_,""String_Node_Str"");
          return;
        }
        String path=file.getAbsolutePath();
        this_.saveDirField.setText(path);
      }
    }
  }
),400,120,60,30);
  addTaskBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window addFormDialog,    MouseEvent event){
      AddFormDialog this_=(AddFormDialog)addFormDialog;
      String url=this_.urlField.getText().trim();
      String saveDir=this_.saveDirField.getText().trim();
      String tag=this_.tagField.getText().trim();
      if (""String_Node_Str"".equals(url)) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(saveDir)) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else {
        if (""String_Node_Str"".equals(tag)) {
          tag=""String_Node_Str"";
        }
        EgDownloaderWindow mainWindow=(EgDownloaderWindow)this_.mainWindow;
        if (isValidUrl(mainWindow.setting,url)) {
          if (""String_Node_Str"".equals(url.substring(url.length() - 1,url.length()))) {
            url=url.substring(0,url.length() - 1);
          }
          if (!mainWindow.taskDbTemplate.exsits(""String_Node_Str"",url)) {
            if (addTaskBtn.isEnabled()) {
              addTaskBtn.setEnabled(false);
            }
 else {
              return;
            }
            if (((EgDownloaderWindow)this_.mainWindow).creatingWindow == null) {
              ((EgDownloaderWindow)this_.mainWindow).creatingWindow=new CreatingWindow(mainWindow);
            }
            String tags=setting.getTags();
            if (!""String_Node_Str"".equals(tag)) {
              if (tags == null) {
                setting.setTags(tag);
                mainWindow.settingDbTemplate.update(setting);
              }
 else {
                String[] tagsArr=tags.split(""String_Node_Str"" + Setting.TAGSPLIT);
                if (!ArrayUtil.exists(tagsArr,tag)) {
                  setting.setTags(tag + Setting.TAGSPLIT + setting.getTags());
                }
 else {
                  tags=change(tags.split(""String_Node_Str"" + Setting.TAGSPLIT),tag,Setting.TAGSPLIT);
                  setting.setTags(tags);
                }
                mainWindow.settingDbTemplate.update(setting);
              }
              initOrUpdateTagComboBox(setting);
            }
            Task task=new Task(url,saveDir);
            task.setTag(tag);
            CreateWorker worker=new CreateWorker(task,mainWindow);
            worker.execute();
            addTaskBtn.setEnabled(true);
          }
 else {
            JOptionPane.showMessageDialog(this_,""String_Node_Str"");
          }
        }
 else {
          JOptionPane.showMessageDialog(this_,""String_Node_Str"");
        }
      }
    }
  }
),(this.getWidth() - 100) / 2,170,100,30);
  saveDirChooser=new JFileChooser(""String_Node_Str"");
  saveDirChooser.setDialogTitle(""String_Node_Str"");
  saveDirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  ComponentUtil.addComponents(this.getContentPane(),addTaskBtn,urlLabel,urlField,tagLabel,tagField,saveDirLabel,saveDirField,chooserBtn,tipLabel);
}","public AddFormDialog(final JFrame mainWindow){
  this.mainWindow=mainWindow;
  this.setTitle(""String_Node_Str"");
  this.setIconImage(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""))).getImage());
  this.setSize(480,250);
  this.setResizable(false);
  this.setLayout(null);
  this.setLocationRelativeTo(mainWindow);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      mainWindow.setVisible(true);
      mainWindow.setEnabled(true);
      AddFormDialog w=(AddFormDialog)e.getSource();
      w.dispose();
    }
    public void windowActivated(    WindowEvent e){
      mainWindow.setEnabled(false);
    }
  }
);
  setDefaultCloseOperation(HIDE_ON_CLOSE);
  tipLabel=new AJLabel(""String_Node_Str"",Color.LIGHT_GRAY,80,5,this.getWidth() - 80,30);
  urlLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,40,60,30);
  urlField=new AJTextField(""String_Node_Str"",65,40,395,30);
  saveDirLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,120,60,30);
  saveDirField=new AJTextField(""String_Node_Str"",65,120,320,30);
  tagLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,80,60,30);
  final Setting setting=((EgDownloaderWindow)mainWindow).setting;
  tagField=new AJTextField(""String_Node_Str"",65,80,setting.getTags() != null ? 300 : 395,30);
  initOrUpdateTagComboBox(setting);
  saveDirField.setText(setting.getDefaultSaveDir() + ""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date()));
  chooserBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window addFormDialog,    MouseEvent e){
      AddFormDialog this_=(AddFormDialog)addFormDialog;
      int result=this_.saveDirChooser.showOpenDialog(this_);
      File file=null;
      if (result == JFileChooser.APPROVE_OPTION) {
        file=this_.saveDirChooser.getSelectedFile();
        if (!file.isDirectory()) {
          JOptionPane.showMessageDialog(this_,""String_Node_Str"");
          return;
        }
        String path=file.getAbsolutePath();
        this_.saveDirField.setText(path);
      }
    }
  }
),400,120,60,30);
  addTaskBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window addFormDialog,    MouseEvent event){
      AddFormDialog this_=(AddFormDialog)addFormDialog;
      String url=this_.urlField.getText().trim();
      String saveDir=this_.saveDirField.getText().trim();
      String tag=this_.tagField.getText().trim();
      if (""String_Node_Str"".equals(url)) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(saveDir)) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else {
        if (""String_Node_Str"".equals(tag)) {
          tag=""String_Node_Str"";
        }
        EgDownloaderWindow mainWindow=(EgDownloaderWindow)this_.mainWindow;
        if (isValidUrl(mainWindow.setting,url)) {
          if (""String_Node_Str"".equals(url.substring(url.length() - 1,url.length()))) {
            url=url.substring(0,url.length() - 1);
          }
          if (!mainWindow.taskDbTemplate.exsits(""String_Node_Str"",url)) {
            if (addTaskBtn.isEnabled()) {
              addTaskBtn.setEnabled(false);
            }
 else {
              return;
            }
            if (((EgDownloaderWindow)this_.mainWindow).creatingWindow == null) {
              ((EgDownloaderWindow)this_.mainWindow).creatingWindow=new CreatingWindow(mainWindow);
            }
            String tags=setting.getTags();
            if (!""String_Node_Str"".equals(tag)) {
              if (tags == null) {
                setting.setTags(tag);
                mainWindow.settingDbTemplate.update(setting);
              }
 else {
                String[] tagsArr=tags.split(""String_Node_Str"" + Setting.TAGSPLIT);
                if (!ArrayUtil.exists(tagsArr,tag)) {
                  setting.setTags(tag + Setting.TAGSPLIT + setting.getTags());
                }
 else {
                  tags=change(tags.split(""String_Node_Str"" + Setting.TAGSPLIT),tag,Setting.TAGSPLIT);
                  setting.setTags(tags);
                }
                mainWindow.settingDbTemplate.update(setting);
              }
              initOrUpdateTagComboBox(setting);
            }
            Task task=new Task(url,saveDir);
            task.setTag(tag);
            task.setCreateWorker(new CreateWorker(task,mainWindow));
            task.getCreateWorker().execute();
            addTaskBtn.setEnabled(true);
          }
 else {
            JOptionPane.showMessageDialog(this_,""String_Node_Str"");
          }
        }
 else {
          JOptionPane.showMessageDialog(this_,""String_Node_Str"");
        }
      }
    }
  }
),(this.getWidth() - 100) / 2,170,100,30);
  saveDirChooser=new JFileChooser(""String_Node_Str"");
  saveDirChooser.setDialogTitle(""String_Node_Str"");
  saveDirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  ComponentUtil.addComponents(this.getContentPane(),addTaskBtn,urlLabel,urlField,tagLabel,tagField,saveDirLabel,saveDirField,chooserBtn,tipLabel);
}",0.9903970452446906
81643,"public void doWork(Window addFormDialog,MouseEvent event){
  AddFormDialog this_=(AddFormDialog)addFormDialog;
  String url=this_.urlField.getText().trim();
  String saveDir=this_.saveDirField.getText().trim();
  String tag=this_.tagField.getText().trim();
  if (""String_Node_Str"".equals(url)) {
    JOptionPane.showMessageDialog(this_,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(saveDir)) {
    JOptionPane.showMessageDialog(this_,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(tag)) {
      tag=""String_Node_Str"";
    }
    EgDownloaderWindow mainWindow=(EgDownloaderWindow)this_.mainWindow;
    if (isValidUrl(mainWindow.setting,url)) {
      if (""String_Node_Str"".equals(url.substring(url.length() - 1,url.length()))) {
        url=url.substring(0,url.length() - 1);
      }
      if (!mainWindow.taskDbTemplate.exsits(""String_Node_Str"",url)) {
        if (addTaskBtn.isEnabled()) {
          addTaskBtn.setEnabled(false);
        }
 else {
          return;
        }
        if (((EgDownloaderWindow)this_.mainWindow).creatingWindow == null) {
          ((EgDownloaderWindow)this_.mainWindow).creatingWindow=new CreatingWindow(mainWindow);
        }
        String tags=setting.getTags();
        if (!""String_Node_Str"".equals(tag)) {
          if (tags == null) {
            setting.setTags(tag);
            mainWindow.settingDbTemplate.update(setting);
          }
 else {
            String[] tagsArr=tags.split(""String_Node_Str"" + Setting.TAGSPLIT);
            if (!ArrayUtil.exists(tagsArr,tag)) {
              setting.setTags(tag + Setting.TAGSPLIT + setting.getTags());
            }
 else {
              tags=change(tags.split(""String_Node_Str"" + Setting.TAGSPLIT),tag,Setting.TAGSPLIT);
              setting.setTags(tags);
            }
            mainWindow.settingDbTemplate.update(setting);
          }
          initOrUpdateTagComboBox(setting);
        }
        Task task=new Task(url,saveDir);
        task.setTag(tag);
        CreateWorker worker=new CreateWorker(task,mainWindow);
        worker.execute();
        addTaskBtn.setEnabled(true);
      }
 else {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
    }
 else {
      JOptionPane.showMessageDialog(this_,""String_Node_Str"");
    }
  }
}","public void doWork(Window addFormDialog,MouseEvent event){
  AddFormDialog this_=(AddFormDialog)addFormDialog;
  String url=this_.urlField.getText().trim();
  String saveDir=this_.saveDirField.getText().trim();
  String tag=this_.tagField.getText().trim();
  if (""String_Node_Str"".equals(url)) {
    JOptionPane.showMessageDialog(this_,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(saveDir)) {
    JOptionPane.showMessageDialog(this_,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(tag)) {
      tag=""String_Node_Str"";
    }
    EgDownloaderWindow mainWindow=(EgDownloaderWindow)this_.mainWindow;
    if (isValidUrl(mainWindow.setting,url)) {
      if (""String_Node_Str"".equals(url.substring(url.length() - 1,url.length()))) {
        url=url.substring(0,url.length() - 1);
      }
      if (!mainWindow.taskDbTemplate.exsits(""String_Node_Str"",url)) {
        if (addTaskBtn.isEnabled()) {
          addTaskBtn.setEnabled(false);
        }
 else {
          return;
        }
        if (((EgDownloaderWindow)this_.mainWindow).creatingWindow == null) {
          ((EgDownloaderWindow)this_.mainWindow).creatingWindow=new CreatingWindow(mainWindow);
        }
        String tags=setting.getTags();
        if (!""String_Node_Str"".equals(tag)) {
          if (tags == null) {
            setting.setTags(tag);
            mainWindow.settingDbTemplate.update(setting);
          }
 else {
            String[] tagsArr=tags.split(""String_Node_Str"" + Setting.TAGSPLIT);
            if (!ArrayUtil.exists(tagsArr,tag)) {
              setting.setTags(tag + Setting.TAGSPLIT + setting.getTags());
            }
 else {
              tags=change(tags.split(""String_Node_Str"" + Setting.TAGSPLIT),tag,Setting.TAGSPLIT);
              setting.setTags(tags);
            }
            mainWindow.settingDbTemplate.update(setting);
          }
          initOrUpdateTagComboBox(setting);
        }
        Task task=new Task(url,saveDir);
        task.setTag(tag);
        task.setCreateWorker(new CreateWorker(task,mainWindow));
        task.getCreateWorker().execute();
        addTaskBtn.setEnabled(true);
      }
 else {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
    }
 else {
      JOptionPane.showMessageDialog(this_,""String_Node_Str"");
    }
  }
}",0.986050566695728
81644,"public AddGroupDialog(final GroupWindow window,final EgDownloaderWindow mainWindow){
  this.setTitle(""String_Node_Str"");
  this.setIconImage(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""))).getImage());
  this.setSize(300,120);
  this.setResizable(false);
  this.setLayout(null);
  this.setLocationRelativeTo(window);
  JLabel groupNameLabel=new AJLabel(""String_Node_Str"",Color.BLUE,15,20,40,30);
  final JTextField groupNameField=new AJTextField(""String_Node_Str"",""String_Node_Str"",50,20,160,30);
  JButton addBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window dialog,    MouseEvent event){
      AddGroupDialog addGroupDialog=(AddGroupDialog)dialog;
      String groupName=groupNameField.getText().trim();
      if (""String_Node_Str"".equals(groupName)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else       if (!FileUtil.dirValidate(groupName)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        FileUtil.ifNotExistsThenCreate(ComponentConst.ROOT_DATA_PATH);
        File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
        for (        File file : dataFile.listFiles()) {
          if (file.getName().equals(groupName)) {
            JOptionPane.showMessageDialog(null,""String_Node_Str"");
            return;
          }
        }
        if (mainWindow != null) {
          mainWindow.saveTaskGroupData();
          mainWindow.dispose();
        }
        ComponentConst.groupName=groupName;
        ComponentConst.changeDataPath(groupName);
        ComponentConst.changeDataXmlPath();
        addGroupDialog.dispose();
        if (mainWindow != null) {
          FileUtil.ifNotExistsThenCreate(ComponentConst.getXmlDirPath());
          SettingDom4jDbTemplate.updateDom();
          TaskDom4jDbTemplate.updateDom();
          PictureDom4jDbTemplate.updateDom();
        }
        if (window != null) {
          window.dispose();
        }
        new InitWindow();
      }
    }
  }
),220,20,60,30);
  addBtn.setUI(new BEButtonUI().setNormalColor(BEButtonUI.NormalColor.blue));
  ComponentUtil.addComponents(getContentPane(),groupNameLabel,groupNameField,addBtn);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      AddGroupDialog w=(AddGroupDialog)e.getSource();
      w.dispose();
    }
    public void windowDeactivated(    WindowEvent e){
      AddGroupDialog w=(AddGroupDialog)e.getSource();
      w.dispose();
    }
  }
);
  setDefaultCloseOperation(DISPOSE_ON_CLOSE);
  setVisible(true);
}","public AddGroupDialog(final GroupWindow window,final EgDownloaderWindow mainWindow){
  this.setTitle(""String_Node_Str"");
  this.setIconImage(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""))).getImage());
  this.setSize(300,120);
  this.setResizable(false);
  this.setLayout(null);
  this.setLocationRelativeTo(window);
  JLabel groupNameLabel=new AJLabel(""String_Node_Str"",Color.BLUE,15,20,40,30);
  final JTextField groupNameField=new AJTextField(""String_Node_Str"",""String_Node_Str"",50,20,160,30);
  JButton addBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window dialog,    MouseEvent event){
      AddGroupDialog addGroupDialog=(AddGroupDialog)dialog;
      String groupName=groupNameField.getText().trim();
      if (""String_Node_Str"".equals(groupName)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else       if (!FileUtil.dirValidate(groupName)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        FileUtil.ifNotExistsThenCreate(ComponentConst.ROOT_DATA_PATH);
        File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
        for (        File file : dataFile.listFiles()) {
          if (file.getName().equals(groupName)) {
            JOptionPane.showMessageDialog(null,""String_Node_Str"");
            return;
          }
        }
        if (mainWindow != null) {
          mainWindow.saveTaskGroupData();
        }
        ComponentConst.groupName=groupName;
        ComponentConst.changeDataPath(groupName);
        ComponentConst.changeDataXmlPath();
        if (mainWindow != null) {
          FileUtil.ifNotExistsThenCreate(ComponentConst.getXmlDirPath());
          SettingDom4jDbTemplate.updateDom();
          TaskDom4jDbTemplate.updateDom();
          PictureDom4jDbTemplate.updateDom();
          mainWindow.dispose();
        }
        if (window != null) {
          window.dispose();
        }
        addGroupDialog.dispose();
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            new InitWindow();
          }
        }
);
      }
    }
  }
),220,20,60,30);
  addBtn.setUI(new BEButtonUI().setNormalColor(BEButtonUI.NormalColor.blue));
  ComponentUtil.addComponents(getContentPane(),groupNameLabel,groupNameField,addBtn);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      AddGroupDialog w=(AddGroupDialog)e.getSource();
      w.dispose();
    }
    public void windowDeactivated(    WindowEvent e){
      AddGroupDialog w=(AddGroupDialog)e.getSource();
      w.dispose();
    }
  }
);
  setDefaultCloseOperation(DISPOSE_ON_CLOSE);
  setVisible(true);
}",0.9577563540753724
81645,"public void doWork(Window dialog,MouseEvent event){
  AddGroupDialog addGroupDialog=(AddGroupDialog)dialog;
  String groupName=groupNameField.getText().trim();
  if (""String_Node_Str"".equals(groupName)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
 else   if (!FileUtil.dirValidate(groupName)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
 else {
    FileUtil.ifNotExistsThenCreate(ComponentConst.ROOT_DATA_PATH);
    File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
    for (    File file : dataFile.listFiles()) {
      if (file.getName().equals(groupName)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
    }
    if (mainWindow != null) {
      mainWindow.saveTaskGroupData();
      mainWindow.dispose();
    }
    ComponentConst.groupName=groupName;
    ComponentConst.changeDataPath(groupName);
    ComponentConst.changeDataXmlPath();
    addGroupDialog.dispose();
    if (mainWindow != null) {
      FileUtil.ifNotExistsThenCreate(ComponentConst.getXmlDirPath());
      SettingDom4jDbTemplate.updateDom();
      TaskDom4jDbTemplate.updateDom();
      PictureDom4jDbTemplate.updateDom();
    }
    if (window != null) {
      window.dispose();
    }
    new InitWindow();
  }
}","public void doWork(Window dialog,MouseEvent event){
  AddGroupDialog addGroupDialog=(AddGroupDialog)dialog;
  String groupName=groupNameField.getText().trim();
  if (""String_Node_Str"".equals(groupName)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
 else   if (!FileUtil.dirValidate(groupName)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
 else {
    FileUtil.ifNotExistsThenCreate(ComponentConst.ROOT_DATA_PATH);
    File dataFile=new File(ComponentConst.ROOT_DATA_PATH);
    for (    File file : dataFile.listFiles()) {
      if (file.getName().equals(groupName)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
    }
    if (mainWindow != null) {
      mainWindow.saveTaskGroupData();
    }
    ComponentConst.groupName=groupName;
    ComponentConst.changeDataPath(groupName);
    ComponentConst.changeDataXmlPath();
    if (mainWindow != null) {
      FileUtil.ifNotExistsThenCreate(ComponentConst.getXmlDirPath());
      SettingDom4jDbTemplate.updateDom();
      TaskDom4jDbTemplate.updateDom();
      PictureDom4jDbTemplate.updateDom();
      mainWindow.dispose();
    }
    if (window != null) {
      window.dispose();
    }
    addGroupDialog.dispose();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        new InitWindow();
      }
    }
);
  }
}",0.9206831119544592
81646,"protected Void doInBackground() throws Exception {
  if (((EgDownloaderWindow)mainWindow).taskDbTemplate.exsits(""String_Node_Str"",task.getUrl())) {
    return null;
  }
  EgDownloaderWindow window=(EgDownloaderWindow)mainWindow;
  window.setEnabled(false);
  AddFormDialog addFormWindow=((AddFormDialog)window.addFormWindow);
  addFormWindow.setVisible(false);
  window.creatingWindow.setVisible(true);
  Setting setting=window.setting;
  InputStream is;
  try {
    if (setting.isOpenScript()) {
      if (""String_Node_Str"".equals(setting.getCreateTaskScriptPath())) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return null;
      }
 else       if (""String_Node_Str"".equals(setting.getCollectPictureScriptPath())) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return null;
      }
      task=ScriptParser.buildTaskByJavaScript(task,setting,window.creatingWindow);
    }
 else {
      task=ParseEngine.buildTask_new(task,setting,window.creatingWindow);
    }
    if (task != null) {
      is=WebClient.getStreamUseJava(task.getCoverUrl());
      FileUtil.storeStream(ComponentConst.getSavePathPreffix() + task.getSaveDir(),""String_Node_Str"",is);
      setting.setLastCreateTime(task.getCreateTime());
      setting.setTaskHistoryCount(setting.getTaskHistoryCount() + 1);
      setting.setPictureHistoryCount(setting.getPictureHistoryCount() + task.getTotal());
      window.pictureDbTemplate.store(task.getPictures());
      window.taskDbTemplate.store(task);
      window.settingDbTemplate.update(setting);
      TaskingTable taskTable=(TaskingTable)window.runningTable;
      taskTable.getTasks().add(0,task);
      addFormWindow.emptyField();
      addFormWindow.dispose();
      window.tablePane.setVisible(true);
      window.emptyTableTips.setVisible(false);
      taskTable.updateUI();
      if (setting.isAutoDownload()) {
        taskTable.startTask(task);
      }
    }
 else {
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
  }
 catch (  SocketTimeoutException e) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  ConnectTimeoutException e) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  SpiderException e) {
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
catch (  WebClientException e) {
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
catch (  FileNotFoundException e) {
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
catch (  ScriptException e) {
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
 finally {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    addFormWindow.dispose();
    window.setEnabled(true);
    window.setVisible(true);
  }
  return null;
}","protected Void doInBackground() throws Exception {
  if (((EgDownloaderWindow)mainWindow).taskDbTemplate.exsits(""String_Node_Str"",task.getUrl())) {
    return null;
  }
  EgDownloaderWindow window=(EgDownloaderWindow)mainWindow;
  window.setEnabled(false);
  window.setVisible(true);
  AddFormDialog addFormWindow=((AddFormDialog)window.addFormWindow);
  addFormWindow.setVisible(false);
  window.creatingWindow.setVisible(true);
  Setting setting=window.setting;
  InputStream is;
  try {
    if (setting.isOpenScript()) {
      if (""String_Node_Str"".equals(setting.getCreateTaskScriptPath())) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return null;
      }
 else       if (""String_Node_Str"".equals(setting.getCollectPictureScriptPath())) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return null;
      }
      task=ScriptParser.buildTaskByJavaScript(task,setting,window.creatingWindow);
    }
 else {
      task=ParseEngine.buildTask_new(task,setting,window.creatingWindow);
    }
    if (task != null) {
      is=WebClient.getStreamUseJava(task.getCoverUrl());
      FileUtil.storeStream(ComponentConst.getSavePathPreffix() + task.getSaveDir(),""String_Node_Str"",is);
      setting.setLastCreateTime(task.getCreateTime());
      setting.setTaskHistoryCount(setting.getTaskHistoryCount() + 1);
      setting.setPictureHistoryCount(setting.getPictureHistoryCount() + task.getTotal());
      window.pictureDbTemplate.store(task.getPictures());
      window.taskDbTemplate.store(task);
      window.settingDbTemplate.update(setting);
      TaskingTable taskTable=(TaskingTable)window.runningTable;
      taskTable.getTasks().add(0,task);
      addFormWindow.emptyField();
      addFormWindow.dispose();
      window.tablePane.setVisible(true);
      window.emptyTableTips.setVisible(false);
      taskTable.updateUI();
      if (setting.isAutoDownload()) {
        taskTable.startTask(task);
      }
      task.setCreateWorker(null);
    }
 else {
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
  }
 catch (  SocketTimeoutException e) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  ConnectTimeoutException e) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  SpiderException e) {
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
catch (  WebClientException e) {
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
catch (  FileNotFoundException e) {
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
catch (  ScriptException e) {
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
catch (  Throwable e) {
    e.printStackTrace();
  }
 finally {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    addFormWindow.dispose();
    window.setEnabled(true);
    window.setVisible(true);
  }
  return null;
}",0.9800140252454418
81647,"public DeletingWindow(JFrame window){
  this.mainWindow=window;
  this.setTitle(""String_Node_Str"");
  this.setSize(400,120);
  this.setLayout(null);
  this.setResizable(false);
  this.setLocationRelativeTo(this.mainWindow);
  this.setBackground(Color.WHITE);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      DeletingWindow window=(DeletingWindow)e.getSource();
      window.mainWindow.setEnabled(true);
      window.mainWindow.setVisible(true);
      window.dispose();
    }
    public void windowActivated(    WindowEvent e){
      mainWindow.setEnabled(false);
    }
  }
);
  dataLabel=new AJLabel(""String_Node_Str"",Color.BLACK,160,10,80,30);
  infoLabel=new AJLabel(""String_Node_Str"",Color.BLACK,10,50,380,30);
  ComponentUtil.addComponents(getContentPane(),dataLabel,infoLabel);
}","public DeletingWindow(JFrame window){
  this.mainWindow=window;
  this.setTitle(""String_Node_Str"");
  this.setSize(400,120);
  this.setLayout(null);
  this.setResizable(false);
  this.setLocationRelativeTo(this.mainWindow);
  this.setBackground(Color.WHITE);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      DeletingWindow window=(DeletingWindow)e.getSource();
      window.mainWindow.setEnabled(true);
      window.mainWindow.setVisible(true);
      window.dispose();
    }
  }
);
  dataLabel=new AJLabel(""String_Node_Str"",Color.BLACK,160,10,80,30);
  infoLabel=new AJLabel(""String_Node_Str"",Color.BLACK,10,50,380,30);
  ComponentUtil.addComponents(getContentPane(),dataLabel,infoLabel);
}",0.940506329113924
81648,"public static File getCollectScriptFile(String filePath){
  return collectScriptFile == null ? new File(filePath) : collectScriptFile;
}","public static File getCollectScriptFile(String filePath){
  return collectScriptFile == null ? collectScriptFile=new File(filePath) : collectScriptFile;
}",0.9379310344827586
81649,"public static File getCreateScriptFile(String filePath){
  return createScriptFile == null ? new File(filePath) : createScriptFile;
}","public static File getCreateScriptFile(String filePath){
  return createScriptFile == null ? createScriptFile=new File(filePath) : createScriptFile;
}",0.939929328621908
81650,"public static File getDownloadScriptFile(String filePath){
  return downloadScriptFile == null ? new File(filePath) : downloadScriptFile;
}","public static File getDownloadScriptFile(String filePath){
  return downloadScriptFile == null ? downloadScriptFile=new File(filePath) : downloadScriptFile;
}",0.936026936026936
81651,"public static void main(String[] args){
  for (int i=0; i < FontConst.DEFAULT_FONT.length; i++)   UIManager.put(FontConst.DEFAULT_FONT[i],new Font(""String_Node_Str"",Font.BOLD,14));
  try {
    BeautyEyeLNFHelper.frameBorderStyle=BeautyEyeLNFHelper.FrameBorderStyle.generalNoTranslucencyShadow;
    BeautyEyeLNFHelper.launchBeautyEyeLNF();
    UIManager.put(""String_Node_Str"",false);
  }
 catch (  Exception e) {
  }
  new InitWindow();
}","public static void main(String[] args){
  for (int i=0; i < FontConst.DEFAULT_FONT.length; i++)   UIManager.put(FontConst.DEFAULT_FONT[i],new Font(""String_Node_Str"",Font.BOLD,12));
  try {
    BeautyEyeLNFHelper.frameBorderStyle=BeautyEyeLNFHelper.FrameBorderStyle.generalNoTranslucencyShadow;
    BeautyEyeLNFHelper.launchBeautyEyeLNF();
    UIManager.put(""String_Node_Str"",false);
  }
 catch (  Exception e) {
  }
  new InitWindow();
}",0.9977116704805492
81652,"/** 
 * 添加排队等待的任务
 * @param task
 */
public void addWaitingTask(Task task){
  if (waitingTasks == null) {
    waitingTasks=new ArrayList<Task>();
  }
  if (!waitingTasks.contains(task)) {
    task.setStatus(TaskStatus.WAITING);
    waitingTasks.add(task);
  }
}","/** 
 * 添加排队等待的任务
 * @param task
 */
public void addWaitingTask(Task task){
  if (waitingTasks == null) {
    waitingTasks=new ArrayList<Task>();
  }
  if (!waitingTasks.contains(task)) {
    task.setStatus(TaskStatus.WAITING);
    waitingTasks.add(task);
  }
  this.updateUI();
}",0.9648798521256932
81653,"/** 
 * 开启任务下载
 * @param task 
 * @return void
 */
public void startTask(Task task){
  task.setStatus(TaskStatus.STARTED);
  task.setDownloadWorker(new DownloadWorker(task,this.getMainWindow()));
  task.getDownloadWorker().execute();
  this.setRunningNum(this.getRunningNum() + 1);
}","/** 
 * 开启任务下载
 * @param task 
 * @return void
 */
public void startTask(Task task){
  task.setStatus(TaskStatus.STARTED);
  if (task.getPictures() == null || task.getPictures().size() == 0) {
    task.setReCreateWorker(new ReCreateWorker(task,this.getMainWindow()));
    task.getReCreateWorker().execute();
  }
 else {
    task.setDownloadWorker(new DownloadWorker(task,this.getMainWindow()));
    task.getDownloadWorker().execute();
  }
  this.setRunningNum(this.getRunningNum() + 1);
  this.updateUI();
}",0.7164556962025317
81654,"public void actionPerformed(ActionEvent ae){
  TaskingTable table=(TaskingTable)window.runningTable;
  List<Task> tasks=table.getTasks();
  Task task=null;
  for (int i=0; i < tasks.size(); i++) {
    if (tasks.get(i).getStatus() == TaskStatus.STARTED || tasks.get(i).getStatus() == TaskStatus.WAITING) {
      task=tasks.get(i);
      task.setStatus(TaskStatus.STOPED);
      if (task.getDownloadWorker() != null) {
        task.getDownloadWorker().cancel(true);
        task.setDownloadWorker(null);
        window.taskDbTemplate.update(task);
      }
    }
  }
  table.getWaitingTasks().clear();
  table.setRunningNum(0);
  table.updateUI();
  Tracker.println(getClass(),""String_Node_Str"");
}","public void actionPerformed(ActionEvent ae){
  TaskingTable table=(TaskingTable)window.runningTable;
  List<Task> tasks=table.getTasks();
  Task task=null;
  for (int i=0; i < tasks.size(); i++) {
    if (tasks.get(i).getStatus() == TaskStatus.STARTED || tasks.get(i).getStatus() == TaskStatus.WAITING) {
      task=tasks.get(i);
      task.setStatus(TaskStatus.STOPED);
      if (task.getDownloadWorker() != null) {
        task.getDownloadWorker().cancel(true);
        task.setDownloadWorker(null);
        window.taskDbTemplate.update(task);
      }
    }
  }
  if (table.getWaitingTasks() != null) {
    table.getWaitingTasks().clear();
  }
  table.setRunningNum(0);
  table.updateUI();
  Tracker.println(getClass(),""String_Node_Str"");
}",0.9672929714683368
81655,"public StopAllTaskMenuItem(String text,final EgDownloaderWindow window){
  super(text);
  this.setForeground(new Color(0,0,85));
  this.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      TaskingTable table=(TaskingTable)window.runningTable;
      List<Task> tasks=table.getTasks();
      Task task=null;
      for (int i=0; i < tasks.size(); i++) {
        if (tasks.get(i).getStatus() == TaskStatus.STARTED || tasks.get(i).getStatus() == TaskStatus.WAITING) {
          task=tasks.get(i);
          task.setStatus(TaskStatus.STOPED);
          if (task.getDownloadWorker() != null) {
            task.getDownloadWorker().cancel(true);
            task.setDownloadWorker(null);
            window.taskDbTemplate.update(task);
          }
        }
      }
      table.getWaitingTasks().clear();
      table.setRunningNum(0);
      table.updateUI();
      Tracker.println(getClass(),""String_Node_Str"");
    }
  }
);
}","public StopAllTaskMenuItem(String text,final EgDownloaderWindow window){
  super(text);
  this.setForeground(new Color(0,0,85));
  this.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      TaskingTable table=(TaskingTable)window.runningTable;
      List<Task> tasks=table.getTasks();
      Task task=null;
      for (int i=0; i < tasks.size(); i++) {
        if (tasks.get(i).getStatus() == TaskStatus.STARTED || tasks.get(i).getStatus() == TaskStatus.WAITING) {
          task=tasks.get(i);
          task.setStatus(TaskStatus.STOPED);
          if (task.getDownloadWorker() != null) {
            task.getDownloadWorker().cancel(true);
            task.setDownloadWorker(null);
            window.taskDbTemplate.update(task);
          }
        }
      }
      if (table.getWaitingTasks() != null) {
        table.getWaitingTasks().clear();
      }
      table.setRunningNum(0);
      table.updateUI();
      Tracker.println(getClass(),""String_Node_Str"");
    }
  }
);
}",0.97226424609178
81656,"private Element setting2Element(Setting t){
  Element ele=DocumentHelper.createElement(""String_Node_Str"");
  ele.addAttribute(""String_Node_Str"",t.getId());
  ele.addAttribute(""String_Node_Str"",t.getDefaultSaveDir());
  ele.addAttribute(""String_Node_Str"",t.getCookieInfo());
  ele.addAttribute(""String_Node_Str"",t.isSaveAsName() + ""String_Node_Str"");
  ele.addAttribute(""String_Node_Str"",t.getMaxThread() + ""String_Node_Str"");
  ele.addAttribute(""String_Node_Str"",t.getGidPrefix());
  ele.addAttribute(""String_Node_Str"",t.getHentaiHome().getUri());
  ele.addAttribute(""String_Node_Str"",t.getHentaiHome().getFirstParameterName());
  ele.addAttribute(""String_Node_Str"",t.getHentaiHome().getSecondParameterName() + ""String_Node_Str"");
  ele.addAttribute(""String_Node_Str"",t.getTotalPrefix());
  ele.addAttribute(""String_Node_Str"",t.getNamePrefix());
  ele.addAttribute(""String_Node_Str"",t.getFileListPrefix());
  ele.addAttribute(""String_Node_Str"",t.getFileListSuffix());
  ele.addAttribute(""String_Node_Str"",t.getFileListPrefix());
  ele.addAttribute(""String_Node_Str"",t.getPageCount() + ""String_Node_Str"");
  ele.addAttribute(""String_Node_Str"",t.getPageParam());
  ele.addAttribute(""String_Node_Str"",t.getSourcePrefix());
  ele.addAttribute(""String_Node_Str"",t.getSourceSuffix());
  ele.addAttribute(""String_Node_Str"",t.getShowPicPrefix());
  ele.addAttribute(""String_Node_Str"",t.getShowPicSuffix());
  ele.addAttribute(""String_Node_Str"",t.getRealUrlPrefix());
  ele.addAttribute(""String_Node_Str"",t.getRealUrlSuffix());
  ele.addAttribute(""String_Node_Str"",t.getLoginUrl());
  ele.addAttribute(""String_Node_Str"",t.getTags());
  ele.addAttribute(""String_Node_Str"",t.getLastCreateTime());
  ele.addAttribute(""String_Node_Str"",t.getLastDownloadTime());
  return ele;
}","private Element setting2Element(Setting t){
  Element ele=DocumentHelper.createElement(""String_Node_Str"");
  ele.addAttribute(""String_Node_Str"",t.getId());
  ele.addAttribute(""String_Node_Str"",t.getDefaultSaveDir());
  ele.addAttribute(""String_Node_Str"",t.getCookieInfo());
  ele.addAttribute(""String_Node_Str"",t.isSaveAsName() + ""String_Node_Str"");
  ele.addAttribute(""String_Node_Str"",t.isAutoDownload() + ""String_Node_Str"");
  ele.addAttribute(""String_Node_Str"",t.getMaxThread() + ""String_Node_Str"");
  ele.addAttribute(""String_Node_Str"",t.getGidPrefix());
  ele.addAttribute(""String_Node_Str"",t.getHentaiHome().getUri());
  ele.addAttribute(""String_Node_Str"",t.getHentaiHome().getFirstParameterName());
  ele.addAttribute(""String_Node_Str"",t.getHentaiHome().getSecondParameterName() + ""String_Node_Str"");
  ele.addAttribute(""String_Node_Str"",t.getTotalPrefix());
  ele.addAttribute(""String_Node_Str"",t.getNamePrefix());
  ele.addAttribute(""String_Node_Str"",t.getFileListPrefix());
  ele.addAttribute(""String_Node_Str"",t.getFileListSuffix());
  ele.addAttribute(""String_Node_Str"",t.getFileListPrefix());
  ele.addAttribute(""String_Node_Str"",t.getPageCount() + ""String_Node_Str"");
  ele.addAttribute(""String_Node_Str"",t.getPageParam());
  ele.addAttribute(""String_Node_Str"",t.getSourcePrefix());
  ele.addAttribute(""String_Node_Str"",t.getSourceSuffix());
  ele.addAttribute(""String_Node_Str"",t.getShowPicPrefix());
  ele.addAttribute(""String_Node_Str"",t.getShowPicSuffix());
  ele.addAttribute(""String_Node_Str"",t.getRealUrlPrefix());
  ele.addAttribute(""String_Node_Str"",t.getRealUrlSuffix());
  ele.addAttribute(""String_Node_Str"",t.getLoginUrl());
  ele.addAttribute(""String_Node_Str"",t.getTags());
  ele.addAttribute(""String_Node_Str"",t.getLastCreateTime());
  ele.addAttribute(""String_Node_Str"",t.getLastDownloadTime());
  return ele;
}",0.978369384359401
81657,"private Setting node2Setting(Node node){
  Element ele=(Element)node;
  Setting t=new Setting();
  t.setId(ele.attributeValue(""String_Node_Str""));
  t.setDefaultSaveDir(ele.attributeValue(""String_Node_Str""));
  t.setCookieInfo(ele.attributeValue(""String_Node_Str""));
  t.setSaveAsName(""String_Node_Str"".equals(ele.attributeValue(""String_Node_Str"")) ? true : false);
  t.setGidPrefix(ele.attributeValue(""String_Node_Str""));
  t.setMaxThread(ele.attributeValue(""String_Node_Str"") == null ? 0 : Integer.parseInt(ele.attributeValue(""String_Node_Str"")));
  t.getHentaiHome().setUri(ele.attributeValue(""String_Node_Str""));
  t.getHentaiHome().setFirstParameterName(ele.attributeValue(""String_Node_Str""));
  t.getHentaiHome().setSecondParameterName(ele.attributeValue(""String_Node_Str""));
  t.setTotalPrefix(ele.attributeValue(""String_Node_Str""));
  t.setNamePrefix(ele.attributeValue(""String_Node_Str""));
  t.setFileListPrefix(ele.attributeValue(""String_Node_Str""));
  t.setFileListSuffix(ele.attributeValue(""String_Node_Str""));
  t.setFileListPrefix(ele.attributeValue(""String_Node_Str""));
  t.setPageCount(ele.attributeValue(""String_Node_Str"") == null ? 0 : Integer.parseInt(ele.attributeValue(""String_Node_Str"")));
  t.setPageParam(ele.attributeValue(""String_Node_Str""));
  t.setSourcePrefix(ele.attributeValue(""String_Node_Str""));
  t.setSourceSuffix(ele.attributeValue(""String_Node_Str""));
  t.setShowPicPrefix(ele.attributeValue(""String_Node_Str""));
  t.setShowPicSuffix(ele.attributeValue(""String_Node_Str""));
  t.setRealUrlPrefix(ele.attributeValue(""String_Node_Str""));
  t.setRealUrlSuffix(ele.attributeValue(""String_Node_Str""));
  t.setLoginUrl(ele.attributeValue(""String_Node_Str""));
  if (ele.attributeValue(""String_Node_Str"") != null) {
    t.setTags(ele.attributeValue(""String_Node_Str""));
  }
  t.setLastCreateTime(ele.attributeValue(""String_Node_Str""));
  t.setLastDownloadTime(ele.attributeValue(""String_Node_Str""));
  return t;
}","private Setting node2Setting(Node node){
  Element ele=(Element)node;
  Setting t=new Setting();
  t.setId(ele.attributeValue(""String_Node_Str""));
  t.setDefaultSaveDir(ele.attributeValue(""String_Node_Str""));
  t.setCookieInfo(ele.attributeValue(""String_Node_Str""));
  t.setSaveAsName(""String_Node_Str"".equals(ele.attributeValue(""String_Node_Str"")) ? true : false);
  t.setAutoDownload(""String_Node_Str"".equals(ele.attributeValue(""String_Node_Str"")) ? true : false);
  t.setGidPrefix(ele.attributeValue(""String_Node_Str""));
  t.setMaxThread(ele.attributeValue(""String_Node_Str"") == null ? 0 : Integer.parseInt(ele.attributeValue(""String_Node_Str"")));
  t.getHentaiHome().setUri(ele.attributeValue(""String_Node_Str""));
  t.getHentaiHome().setFirstParameterName(ele.attributeValue(""String_Node_Str""));
  t.getHentaiHome().setSecondParameterName(ele.attributeValue(""String_Node_Str""));
  t.setTotalPrefix(ele.attributeValue(""String_Node_Str""));
  t.setNamePrefix(ele.attributeValue(""String_Node_Str""));
  t.setFileListPrefix(ele.attributeValue(""String_Node_Str""));
  t.setFileListSuffix(ele.attributeValue(""String_Node_Str""));
  t.setFileListPrefix(ele.attributeValue(""String_Node_Str""));
  t.setPageCount(ele.attributeValue(""String_Node_Str"") == null ? 0 : Integer.parseInt(ele.attributeValue(""String_Node_Str"")));
  t.setPageParam(ele.attributeValue(""String_Node_Str""));
  t.setSourcePrefix(ele.attributeValue(""String_Node_Str""));
  t.setSourceSuffix(ele.attributeValue(""String_Node_Str""));
  t.setShowPicPrefix(ele.attributeValue(""String_Node_Str""));
  t.setShowPicSuffix(ele.attributeValue(""String_Node_Str""));
  t.setRealUrlPrefix(ele.attributeValue(""String_Node_Str""));
  t.setRealUrlSuffix(ele.attributeValue(""String_Node_Str""));
  t.setLoginUrl(ele.attributeValue(""String_Node_Str""));
  if (ele.attributeValue(""String_Node_Str"") != null) {
    t.setTags(ele.attributeValue(""String_Node_Str""));
  }
  t.setLastCreateTime(ele.attributeValue(""String_Node_Str""));
  t.setLastDownloadTime(ele.attributeValue(""String_Node_Str""));
  return t;
}",0.97464222947527
81658,"public SettingWindow(JFrame mainWindow){
  super(""String_Node_Str"");
  Setting setting=((EgDownloaderWindow)mainWindow).setting;
  enginePanel=new JPanel();
  enginePanel.setLayout(null);
  nameLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,100,30);
  nameTextFieldPrefix=new AJTextField(setting.getTask_name()[0],""String_Node_Str"",125,30,240,30);
  nameTextFieldSuffix=new AJTextField(setting.getTask_name()[1],""String_Node_Str"",385,30,240,30);
  subnameLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,100,30);
  subnameTextFieldPrefix=new AJTextField(setting.getTask_subname()[0] + ""String_Node_Str"",""String_Node_Str"",125,70,240,30);
  subnameTextFieldSuffix=new AJTextField(setting.getTask_subname()[1] + ""String_Node_Str"",""String_Node_Str"",385,70,240,30);
  coverLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,100,30);
  coverTextFieldPrefix=new AJTextField(setting.getTask_coverUrl()[0] + ""String_Node_Str"",""String_Node_Str"",125,110,240,30);
  coverTextFieldSuffix=new AJTextField(setting.getTask_coverUrl()[1] + ""String_Node_Str"",""String_Node_Str"",385,110,240,30);
  totalSizeLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,100,30);
  totalSizeTextFieldPrefix=new AJTextField(setting.getTask_total_size()[0] + ""String_Node_Str"",""String_Node_Str"",125,150,240,30);
  totalSizeTextFieldSuffix=new AJTextField(setting.getTask_total_size()[1] + ""String_Node_Str"",""String_Node_Str"",385,150,240,30);
  languageLabel=new AJLabel(""String_Node_Str"",labelColor,25,190,100,30);
  languageTextFieldPrefix=new AJTextField(setting.getTask_language()[0] + ""String_Node_Str"",""String_Node_Str"",125,190,240,30);
  languageTextFieldSuffix=new AJTextField(setting.getTask_language()[1] + ""String_Node_Str"",""String_Node_Str"",385,190,240,30);
  interceptLabel=new AJLabel(""String_Node_Str"",labelColor,25,230,100,30);
  interceptTextFieldPrefix=new AJTextField(setting.getPicture_intercept()[0] + ""String_Node_Str"",""String_Node_Str"",125,230,240,30);
  interceptTextFieldSuffix=new AJTextField(setting.getPicture_intercept()[1] + ""String_Node_Str"",""String_Node_Str"",385,230,240,30);
  showUrlLabel=new AJLabel(""String_Node_Str"",labelColor,25,270,100,30);
  showUrlTextFieldPrefix=new AJTextField(setting.getPicture_showUrl()[0] + ""String_Node_Str"",""String_Node_Str"",125,270,240,30);
  showUrlTextFieldSuffix=new AJTextField(setting.getPicture_showUrl()[1] + ""String_Node_Str"",""String_Node_Str"",385,270,240,30);
  picNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,310,100,30);
  picNameTextFieldPrefix=new AJTextField(setting.getPicture_name()[0] + ""String_Node_Str"",""String_Node_Str"",125,310,240,30);
  picNameTextFieldSuffix=new AJTextField(setting.getPicture_name()[1] + ""String_Node_Str"",""String_Node_Str"",385,310,240,30);
  addComponentsJpanel(enginePanel,nameLabel,nameTextFieldPrefix,nameTextFieldSuffix,subnameLabel,subnameTextFieldPrefix,subnameTextFieldSuffix,coverLabel,coverTextFieldPrefix,coverTextFieldSuffix,totalSizeLabel,totalSizeTextFieldPrefix,totalSizeTextFieldSuffix,languageLabel,languageTextFieldPrefix,languageTextFieldSuffix,interceptLabel,interceptTextFieldPrefix,interceptTextFieldSuffix,showUrlLabel,showUrlTextFieldPrefix,showUrlTextFieldSuffix,picNameLabel,picNameTextFieldPrefix,picNameTextFieldSuffix);
  this.getContentPane().setLayout(null);
  this.setSize(800,450);
  this.setResizable(false);
  this.setLocationRelativeTo(null);
  settingTabPanel.setBounds(20,5,780,400);
  basicPanel=new JPanel();
  basicPanel.setLayout(null);
  saveDirLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,100,30);
  saveDirField=new AJTextField(setting.getDefaultSaveDir(),""String_Node_Str"",125,30,360,30);
  saveAsNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,100,30);
  saveAsNameBox=new JCheckBox(""String_Node_Str"",setting.isSaveAsName());
  saveAsNameBox.setBounds(125,70,30,30);
  maxThreadLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,100,30);
  maxThreadField=new AJTextField(setting.getMaxThread() + ""String_Node_Str"",""String_Node_Str"",125,110,100,30);
  loginUrlLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,100,30);
  loginUrlField=new AJTextField(setting.getLoginUrl(),""String_Node_Str"",125,150,360,30);
  cookieLabel=new AJLabel(""String_Node_Str"",labelColor,25,190,100,30);
  cookieField=new AJTextField(setting.getCookieInfo(),""String_Node_Str"",125,190,360,30);
  cookieButton=new AJButton(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      if (settingWindow.loginWindow == null) {
        settingWindow.loginWindow=new LoginWindow(mainWindow);
        settingWindow.loginWindow.setVisible(true);
      }
 else {
        settingWindow.loginWindow.setVisible(true);
      }
    }
  }
),500,190,60,30);
  MouseListener basicBtnListener=new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      String saveDir=settingWindow.saveDirField.getText();
      String maxThread=settingWindow.maxThreadField.getText();
      String loginUrl=settingWindow.loginUrlField.getText();
      boolean saveAsName=settingWindow.saveAsNameBox.getSelectedObjects() == null ? false : true;
      String cookieInfo=settingWindow.cookieField.getText();
      Pattern p=Pattern.compile(""String_Node_Str"");
      if (""String_Node_Str"".equals(saveDir)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(maxThread)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (!p.matcher(maxThread).matches()) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(loginUrl)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else {
        if (""String_Node_Str"".equals(cookieInfo)) {
          int result=JOptionPane.showConfirmDialog(null,""String_Node_Str"");
          if (result != 0) {
            return;
          }
        }
        mainWindow.setting.setDefaultSaveDir(saveDir);
        mainWindow.setting.setSaveAsName(saveAsName);
        mainWindow.setting.setMaxThread(Integer.parseInt(maxThread));
        mainWindow.setting.setLoginUrl(loginUrl);
        mainWindow.setting.setCookieInfo(cookieInfo);
        mainWindow.settingDbTemplate.update(mainWindow.setting);
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
);
  basicBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),basicBtnListener,250,250,60,30);
  addComponentsJpanel(basicPanel,saveDirLabel,saveDirField,saveAsNameLabel,saveAsNameBox,maxThreadLabel,maxThreadField,loginUrlLabel,loginUrlField,cookieLabel,cookieField,cookieButton,basicBtn);
  h_uriLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,80,30);
  h_uriTextField=new AJTextField(setting.getHentaiHome().getUri(),null,105,30,400,30);
  h_firstParameterNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,80,30);
  h_firstParameterNameTextField=new AJTextField(setting.getHentaiHome().getFirstParameterName(),null,105,70,400,30);
  h_secondParameterNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,80,30);
  h_secondParameterNameTextField=new AJTextField(setting.getHentaiHome().getSecondParameterName(),null,105,110,400,30);
  h_totalPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,80,30);
  h_totalPrefixTextField=new AJTextField(setting.getTotalPrefix(),null,105,150,120,30);
  h_namePrefixLabel=new AJLabel(""String_Node_Str"",labelColor,300,150,80,30);
  h_namePrefixTextField=new AJTextField(setting.getNamePrefix(),null,385,150,120,30);
  h_fileListPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,190,80,30);
  h_fileListPrefixTextField=new AJTextField(setting.getFileListPrefix(),null,105,190,120,30);
  h_fileListSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,300,190,80,30);
  h_fileListSuffixTextField=new AJTextField(setting.getFileListSuffix(),null,385,190,120,30);
  MouseListener h_BtnListener=new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      String uri=settingWindow.h_uriTextField.getText();
      String gid=settingWindow.h_firstParameterNameTextField.getText();
      String t=settingWindow.h_secondParameterNameTextField.getText();
      String totalPrefix=settingWindow.h_totalPrefixTextField.getText();
      String namePrefix=settingWindow.h_namePrefixTextField.getText();
      String fileListPrefix=settingWindow.h_fileListPrefixTextField.getText();
      String fileListSuffix=settingWindow.h_fileListSuffixTextField.getText();
      if (""String_Node_Str"".equals(uri)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(gid)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(t)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(totalPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(namePrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(fileListPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(fileListSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else {
        mainWindow.setting.getHentaiHome().setUri(uri);
        mainWindow.setting.getHentaiHome().setFirstParameterName(gid);
        mainWindow.setting.getHentaiHome().setSecondParameterName(t);
        mainWindow.setting.setTotalPrefix(totalPrefix);
        mainWindow.setting.setNamePrefix(namePrefix);
        mainWindow.setting.setFileListPrefix(fileListPrefix);
        mainWindow.setting.setFileListSuffix(fileListSuffix);
        mainWindow.settingDbTemplate.update(mainWindow.setting);
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
);
  h_Btn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),h_BtnListener,250,250,60,30);
  henTaiHomePanel=new AJPanel(h_uriLabel,h_uriTextField,h_firstParameterNameLabel,h_firstParameterNameTextField,h_secondParameterNameLabel,h_secondParameterNameTextField,h_totalPrefixLabel,h_totalPrefixTextField,h_namePrefixLabel,h_namePrefixTextField,h_fileListPrefixLabel,h_fileListPrefixTextField,h_fileListSuffixLabel,h_fileListSuffixTextField,h_Btn);
  d_pageCountLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,100,30);
  d_pageCountTextField=new AJTextField(setting.getPageCount() + ""String_Node_Str"",""String_Node_Str"",125,30,120,30);
  d_pageParamLabel=new AJLabel(""String_Node_Str"",labelColor,280,30,100,30);
  d_pageParamTextField=new AJTextField(setting.getPageParam() + ""String_Node_Str"",""String_Node_Str"",380,30,120,30);
  d_sourcePrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,100,30);
  d_sourcePrefixTextField=new AJTextField(setting.getSourcePrefix() + ""String_Node_Str"",""String_Node_Str"",125,70,120,30);
  d_sourceSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,280,70,100,30);
  d_sourceSuffixTextField=new AJTextField(setting.getSourceSuffix() + ""String_Node_Str"",""String_Node_Str"",380,70,120,30);
  d_showPicPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,100,30);
  d_showPicPrefixTextField=new AJTextField(setting.getShowPicPrefix() + ""String_Node_Str"",""String_Node_Str"",125,110,120,30);
  d_showPicSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,280,110,100,30);
  d_showPicSuffixTextField=new AJTextField(setting.getShowPicSuffix() + ""String_Node_Str"",""String_Node_Str"",380,110,120,30);
  d_realUrlPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,100,30);
  d_realUrlPrefixTextField=new AJTextField(setting.getRealUrlPrefix() + ""String_Node_Str"",""String_Node_Str"",125,150,120,30);
  d_realUrlSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,280,150,100,30);
  d_realUrlSuffixTextField=new AJTextField(setting.getRealUrlSuffix() + ""String_Node_Str"",""String_Node_Str"",380,150,120,30);
  MouseListener d_BtnListener=new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      String pageCount=settingWindow.d_pageCountTextField.getText();
      String pageParam=settingWindow.d_pageParamTextField.getText();
      String sourcePrefix=settingWindow.d_sourcePrefixTextField.getText();
      String sourceSuffix=settingWindow.d_sourceSuffixTextField.getText();
      String showPicPrefix=settingWindow.d_showPicPrefixTextField.getText();
      String showPicSuffix=settingWindow.d_showPicSuffixTextField.getText();
      String realUrlPrefix=settingWindow.d_realUrlPrefixTextField.getText();
      String realUrlSuffix=settingWindow.d_realUrlSuffixTextField.getText();
      Pattern p=Pattern.compile(""String_Node_Str"");
      if (""String_Node_Str"".equals(pageCount)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (!p.matcher(pageCount).matches()) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(pageParam)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(sourcePrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(sourceSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(showPicPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(showPicSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(realUrlPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(realUrlSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else {
        mainWindow.setting.setPageCount(Integer.parseInt(pageCount));
        mainWindow.setting.setPageParam(pageParam);
        mainWindow.setting.setSourcePrefix(sourcePrefix);
        mainWindow.setting.setSourceSuffix(sourceSuffix);
        mainWindow.setting.setShowPicPrefix(showPicPrefix);
        mainWindow.setting.setShowPicSuffix(showPicSuffix);
        mainWindow.setting.setRealUrlPrefix(realUrlPrefix);
        mainWindow.setting.setRealUrlSuffix(realUrlSuffix);
        mainWindow.settingDbTemplate.update(mainWindow.setting);
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
);
  d_Btn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),d_BtnListener,250,250,60,30);
  downloadPanel=new AJPanel(d_pageCountLabel,d_pageCountTextField,d_pageParamLabel,d_pageParamTextField,d_sourcePrefixLabel,d_sourcePrefixTextField,d_sourceSuffixLabel,d_sourceSuffixTextField,d_showPicPrefixLabel,d_showPicPrefixTextField,d_showPicSuffixLabel,d_showPicSuffixTextField,d_realUrlPrefixLabel,d_realUrlPrefixTextField,d_realUrlSuffixLabel,d_realUrlSuffixTextField,d_Btn);
  settingTabPanel.add(""String_Node_Str"",basicPanel);
  settingTabPanel.add(""String_Node_Str"",enginePanel);
  settingTabPanel.add(""String_Node_Str"",henTaiHomePanel);
  settingTabPanel.add(""String_Node_Str"",downloadPanel);
  addComponents(settingTabPanel);
  this.setVisible(true);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      SettingWindow this_=(SettingWindow)e.getSource();
      this_.dispose();
    }
  }
);
}","public SettingWindow(JFrame mainWindow){
  super(""String_Node_Str"");
  Setting setting=((EgDownloaderWindow)mainWindow).setting;
  enginePanel=new JPanel();
  enginePanel.setLayout(null);
  nameLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,100,30);
  nameTextFieldPrefix=new AJTextField(setting.getTask_name()[0],""String_Node_Str"",125,30,240,30);
  nameTextFieldSuffix=new AJTextField(setting.getTask_name()[1],""String_Node_Str"",385,30,240,30);
  subnameLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,100,30);
  subnameTextFieldPrefix=new AJTextField(setting.getTask_subname()[0] + ""String_Node_Str"",""String_Node_Str"",125,70,240,30);
  subnameTextFieldSuffix=new AJTextField(setting.getTask_subname()[1] + ""String_Node_Str"",""String_Node_Str"",385,70,240,30);
  coverLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,100,30);
  coverTextFieldPrefix=new AJTextField(setting.getTask_coverUrl()[0] + ""String_Node_Str"",""String_Node_Str"",125,110,240,30);
  coverTextFieldSuffix=new AJTextField(setting.getTask_coverUrl()[1] + ""String_Node_Str"",""String_Node_Str"",385,110,240,30);
  totalSizeLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,100,30);
  totalSizeTextFieldPrefix=new AJTextField(setting.getTask_total_size()[0] + ""String_Node_Str"",""String_Node_Str"",125,150,240,30);
  totalSizeTextFieldSuffix=new AJTextField(setting.getTask_total_size()[1] + ""String_Node_Str"",""String_Node_Str"",385,150,240,30);
  languageLabel=new AJLabel(""String_Node_Str"",labelColor,25,190,100,30);
  languageTextFieldPrefix=new AJTextField(setting.getTask_language()[0] + ""String_Node_Str"",""String_Node_Str"",125,190,240,30);
  languageTextFieldSuffix=new AJTextField(setting.getTask_language()[1] + ""String_Node_Str"",""String_Node_Str"",385,190,240,30);
  interceptLabel=new AJLabel(""String_Node_Str"",labelColor,25,230,100,30);
  interceptTextFieldPrefix=new AJTextField(setting.getPicture_intercept()[0] + ""String_Node_Str"",""String_Node_Str"",125,230,240,30);
  interceptTextFieldSuffix=new AJTextField(setting.getPicture_intercept()[1] + ""String_Node_Str"",""String_Node_Str"",385,230,240,30);
  showUrlLabel=new AJLabel(""String_Node_Str"",labelColor,25,270,100,30);
  showUrlTextFieldPrefix=new AJTextField(setting.getPicture_showUrl()[0] + ""String_Node_Str"",""String_Node_Str"",125,270,240,30);
  showUrlTextFieldSuffix=new AJTextField(setting.getPicture_showUrl()[1] + ""String_Node_Str"",""String_Node_Str"",385,270,240,30);
  picNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,310,100,30);
  picNameTextFieldPrefix=new AJTextField(setting.getPicture_name()[0] + ""String_Node_Str"",""String_Node_Str"",125,310,240,30);
  picNameTextFieldSuffix=new AJTextField(setting.getPicture_name()[1] + ""String_Node_Str"",""String_Node_Str"",385,310,240,30);
  addComponentsJpanel(enginePanel,nameLabel,nameTextFieldPrefix,nameTextFieldSuffix,subnameLabel,subnameTextFieldPrefix,subnameTextFieldSuffix,coverLabel,coverTextFieldPrefix,coverTextFieldSuffix,totalSizeLabel,totalSizeTextFieldPrefix,totalSizeTextFieldSuffix,languageLabel,languageTextFieldPrefix,languageTextFieldSuffix,interceptLabel,interceptTextFieldPrefix,interceptTextFieldSuffix,showUrlLabel,showUrlTextFieldPrefix,showUrlTextFieldSuffix,picNameLabel,picNameTextFieldPrefix,picNameTextFieldSuffix);
  this.getContentPane().setLayout(null);
  this.setSize(800,450);
  this.setResizable(false);
  this.setLocationRelativeTo(null);
  settingTabPanel.setBounds(20,5,780,400);
  basicPanel=new JPanel();
  basicPanel.setLayout(null);
  saveDirLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,100,30);
  saveDirField=new AJTextField(setting.getDefaultSaveDir(),""String_Node_Str"",125,30,360,30);
  saveAsNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,100,30);
  saveAsNameBox=new JCheckBox(""String_Node_Str"",setting.isSaveAsName());
  saveAsNameBox.setBounds(125,70,30,30);
  autoDownloadLabel=new AJLabel(""String_Node_Str"",labelColor,300,70,100,30);
  autoDownloadBox=new JCheckBox(""String_Node_Str"",setting.isAutoDownload());
  autoDownloadBox.setBounds(400,70,30,30);
  maxThreadLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,100,30);
  maxThreadField=new AJTextField(setting.getMaxThread() + ""String_Node_Str"",""String_Node_Str"",125,110,100,30);
  loginUrlLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,100,30);
  loginUrlField=new AJTextField(setting.getLoginUrl(),""String_Node_Str"",125,150,360,30);
  cookieLabel=new AJLabel(""String_Node_Str"",labelColor,25,190,100,30);
  cookieField=new AJTextField(setting.getCookieInfo(),""String_Node_Str"",125,190,360,30);
  cookieButton=new AJButton(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      if (settingWindow.loginWindow == null) {
        settingWindow.loginWindow=new LoginWindow(mainWindow);
        settingWindow.loginWindow.setVisible(true);
      }
 else {
        settingWindow.loginWindow.setVisible(true);
      }
    }
  }
),500,190,60,30);
  MouseListener basicBtnListener=new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      String saveDir=settingWindow.saveDirField.getText();
      String maxThread=settingWindow.maxThreadField.getText();
      String loginUrl=settingWindow.loginUrlField.getText();
      boolean saveAsName=settingWindow.saveAsNameBox.getSelectedObjects() == null ? false : true;
      boolean autoDownload=settingWindow.autoDownloadBox.getSelectedObjects() == null ? false : true;
      String cookieInfo=settingWindow.cookieField.getText();
      Pattern p=Pattern.compile(""String_Node_Str"");
      if (""String_Node_Str"".equals(saveDir)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(maxThread)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (!p.matcher(maxThread).matches()) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(loginUrl)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else {
        if (""String_Node_Str"".equals(cookieInfo)) {
          int result=JOptionPane.showConfirmDialog(null,""String_Node_Str"");
          if (result != 0) {
            return;
          }
        }
        mainWindow.setting.setDefaultSaveDir(saveDir);
        mainWindow.setting.setSaveAsName(saveAsName);
        mainWindow.setting.setAutoDownload(autoDownload);
        mainWindow.setting.setMaxThread(Integer.parseInt(maxThread));
        mainWindow.setting.setLoginUrl(loginUrl);
        mainWindow.setting.setCookieInfo(cookieInfo);
        mainWindow.settingDbTemplate.update(mainWindow.setting);
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
);
  basicBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),basicBtnListener,250,250,60,30);
  addComponentsJpanel(basicPanel,saveDirLabel,saveDirField,saveAsNameLabel,saveAsNameBox,autoDownloadLabel,autoDownloadBox,maxThreadLabel,maxThreadField,loginUrlLabel,loginUrlField,cookieLabel,cookieField,cookieButton,basicBtn);
  h_uriLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,80,30);
  h_uriTextField=new AJTextField(setting.getHentaiHome().getUri(),null,105,30,400,30);
  h_firstParameterNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,80,30);
  h_firstParameterNameTextField=new AJTextField(setting.getHentaiHome().getFirstParameterName(),null,105,70,400,30);
  h_secondParameterNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,80,30);
  h_secondParameterNameTextField=new AJTextField(setting.getHentaiHome().getSecondParameterName(),null,105,110,400,30);
  h_totalPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,80,30);
  h_totalPrefixTextField=new AJTextField(setting.getTotalPrefix(),null,105,150,120,30);
  h_namePrefixLabel=new AJLabel(""String_Node_Str"",labelColor,300,150,80,30);
  h_namePrefixTextField=new AJTextField(setting.getNamePrefix(),null,385,150,120,30);
  h_fileListPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,190,80,30);
  h_fileListPrefixTextField=new AJTextField(setting.getFileListPrefix(),null,105,190,120,30);
  h_fileListSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,300,190,80,30);
  h_fileListSuffixTextField=new AJTextField(setting.getFileListSuffix(),null,385,190,120,30);
  MouseListener h_BtnListener=new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      String uri=settingWindow.h_uriTextField.getText();
      String gid=settingWindow.h_firstParameterNameTextField.getText();
      String t=settingWindow.h_secondParameterNameTextField.getText();
      String totalPrefix=settingWindow.h_totalPrefixTextField.getText();
      String namePrefix=settingWindow.h_namePrefixTextField.getText();
      String fileListPrefix=settingWindow.h_fileListPrefixTextField.getText();
      String fileListSuffix=settingWindow.h_fileListSuffixTextField.getText();
      if (""String_Node_Str"".equals(uri)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(gid)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(t)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(totalPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(namePrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(fileListPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(fileListSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else {
        mainWindow.setting.getHentaiHome().setUri(uri);
        mainWindow.setting.getHentaiHome().setFirstParameterName(gid);
        mainWindow.setting.getHentaiHome().setSecondParameterName(t);
        mainWindow.setting.setTotalPrefix(totalPrefix);
        mainWindow.setting.setNamePrefix(namePrefix);
        mainWindow.setting.setFileListPrefix(fileListPrefix);
        mainWindow.setting.setFileListSuffix(fileListSuffix);
        mainWindow.settingDbTemplate.update(mainWindow.setting);
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
);
  h_Btn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),h_BtnListener,250,250,60,30);
  henTaiHomePanel=new AJPanel(h_uriLabel,h_uriTextField,h_firstParameterNameLabel,h_firstParameterNameTextField,h_secondParameterNameLabel,h_secondParameterNameTextField,h_totalPrefixLabel,h_totalPrefixTextField,h_namePrefixLabel,h_namePrefixTextField,h_fileListPrefixLabel,h_fileListPrefixTextField,h_fileListSuffixLabel,h_fileListSuffixTextField,h_Btn);
  d_pageCountLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,100,30);
  d_pageCountTextField=new AJTextField(setting.getPageCount() + ""String_Node_Str"",""String_Node_Str"",125,30,120,30);
  d_pageParamLabel=new AJLabel(""String_Node_Str"",labelColor,280,30,100,30);
  d_pageParamTextField=new AJTextField(setting.getPageParam() + ""String_Node_Str"",""String_Node_Str"",380,30,120,30);
  d_sourcePrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,100,30);
  d_sourcePrefixTextField=new AJTextField(setting.getSourcePrefix() + ""String_Node_Str"",""String_Node_Str"",125,70,120,30);
  d_sourceSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,280,70,100,30);
  d_sourceSuffixTextField=new AJTextField(setting.getSourceSuffix() + ""String_Node_Str"",""String_Node_Str"",380,70,120,30);
  d_showPicPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,100,30);
  d_showPicPrefixTextField=new AJTextField(setting.getShowPicPrefix() + ""String_Node_Str"",""String_Node_Str"",125,110,120,30);
  d_showPicSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,280,110,100,30);
  d_showPicSuffixTextField=new AJTextField(setting.getShowPicSuffix() + ""String_Node_Str"",""String_Node_Str"",380,110,120,30);
  d_realUrlPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,100,30);
  d_realUrlPrefixTextField=new AJTextField(setting.getRealUrlPrefix() + ""String_Node_Str"",""String_Node_Str"",125,150,120,30);
  d_realUrlSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,280,150,100,30);
  d_realUrlSuffixTextField=new AJTextField(setting.getRealUrlSuffix() + ""String_Node_Str"",""String_Node_Str"",380,150,120,30);
  MouseListener d_BtnListener=new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      String pageCount=settingWindow.d_pageCountTextField.getText();
      String pageParam=settingWindow.d_pageParamTextField.getText();
      String sourcePrefix=settingWindow.d_sourcePrefixTextField.getText();
      String sourceSuffix=settingWindow.d_sourceSuffixTextField.getText();
      String showPicPrefix=settingWindow.d_showPicPrefixTextField.getText();
      String showPicSuffix=settingWindow.d_showPicSuffixTextField.getText();
      String realUrlPrefix=settingWindow.d_realUrlPrefixTextField.getText();
      String realUrlSuffix=settingWindow.d_realUrlSuffixTextField.getText();
      Pattern p=Pattern.compile(""String_Node_Str"");
      if (""String_Node_Str"".equals(pageCount)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (!p.matcher(pageCount).matches()) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(pageParam)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(sourcePrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(sourceSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(showPicPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(showPicSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(realUrlPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(realUrlSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else {
        mainWindow.setting.setPageCount(Integer.parseInt(pageCount));
        mainWindow.setting.setPageParam(pageParam);
        mainWindow.setting.setSourcePrefix(sourcePrefix);
        mainWindow.setting.setSourceSuffix(sourceSuffix);
        mainWindow.setting.setShowPicPrefix(showPicPrefix);
        mainWindow.setting.setShowPicSuffix(showPicSuffix);
        mainWindow.setting.setRealUrlPrefix(realUrlPrefix);
        mainWindow.setting.setRealUrlSuffix(realUrlSuffix);
        mainWindow.settingDbTemplate.update(mainWindow.setting);
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
);
  d_Btn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),d_BtnListener,250,250,60,30);
  downloadPanel=new AJPanel(d_pageCountLabel,d_pageCountTextField,d_pageParamLabel,d_pageParamTextField,d_sourcePrefixLabel,d_sourcePrefixTextField,d_sourceSuffixLabel,d_sourceSuffixTextField,d_showPicPrefixLabel,d_showPicPrefixTextField,d_showPicSuffixLabel,d_showPicSuffixTextField,d_realUrlPrefixLabel,d_realUrlPrefixTextField,d_realUrlSuffixLabel,d_realUrlSuffixTextField,d_Btn);
  settingTabPanel.add(""String_Node_Str"",basicPanel);
  settingTabPanel.add(""String_Node_Str"",enginePanel);
  settingTabPanel.add(""String_Node_Str"",henTaiHomePanel);
  settingTabPanel.add(""String_Node_Str"",downloadPanel);
  addComponents(settingTabPanel);
  this.setVisible(true);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      SettingWindow this_=(SettingWindow)e.getSource();
      this_.dispose();
    }
  }
);
}",0.988526658646087
81659,"public AddFormDialog(final JFrame mainWindow){
  this.mainWindow=mainWindow;
  this.setTitle(""String_Node_Str"");
  this.setIconImage(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""))).getImage());
  this.setSize(480,250);
  this.setResizable(false);
  this.setLayout(null);
  this.setLocationRelativeTo(mainWindow);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      mainWindow.setVisible(true);
      mainWindow.setEnabled(true);
      AddFormDialog w=(AddFormDialog)e.getSource();
      w.dispose();
    }
    public void windowActivated(    WindowEvent e){
      mainWindow.setEnabled(false);
    }
  }
);
  setDefaultCloseOperation(HIDE_ON_CLOSE);
  tipLabel=new AJLabel(""String_Node_Str"",Color.LIGHT_GRAY,80,5,this.getWidth() - 80,30);
  urlLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,40,60,30);
  urlField=new AJTextField(""String_Node_Str"",65,40,395,30);
  saveDirLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,120,60,30);
  saveDirField=new AJTextField(""String_Node_Str"",65,120,320,30);
  tagLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,80,60,30);
  final Setting setting=((EgDownloaderWindow)mainWindow).setting;
  tagField=new AJTextField(""String_Node_Str"",65,80,setting.getTags() != null ? 300 : 395,30);
  initOrUpdateTagComboBox(setting);
  saveDirField.setText(setting.getDefaultSaveDir() + ""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date()));
  chooserBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window addFormDialog,    MouseEvent e){
      AddFormDialog this_=(AddFormDialog)addFormDialog;
      int result=this_.saveDirChooser.showOpenDialog(this_);
      File file=null;
      if (result == JFileChooser.APPROVE_OPTION) {
        file=this_.saveDirChooser.getSelectedFile();
        if (!file.isDirectory()) {
          JOptionPane.showMessageDialog(this_,""String_Node_Str"");
          return;
        }
        String path=file.getAbsolutePath();
        this_.saveDirField.setText(path);
      }
    }
  }
),400,120,60,30);
  addTaskBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window addFormDialog,    MouseEvent event){
      AddFormDialog this_=(AddFormDialog)addFormDialog;
      String url=this_.urlField.getText().trim();
      String saveDir=this_.saveDirField.getText().trim();
      String tag=this_.tagField.getText().trim();
      if (""String_Node_Str"".equals(url)) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(saveDir)) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else {
        if (""String_Node_Str"".equals(tag)) {
          tag=""String_Node_Str"";
        }
        EgDownloaderWindow mainWindow=(EgDownloaderWindow)this_.mainWindow;
        if (isValidUrl(mainWindow.setting,url)) {
          if (""String_Node_Str"".equals(url.substring(url.length() - 1,url.length()))) {
            url=url.substring(0,url.length() - 1);
          }
          if (!mainWindow.taskDbTemplate.exsits(""String_Node_Str"",url)) {
            if (((EgDownloaderWindow)this_.mainWindow).creatingWindow == null) {
              ((EgDownloaderWindow)this_.mainWindow).creatingWindow=new CreatingWindow(mainWindow);
            }
            String tags=setting.getTags();
            if (!""String_Node_Str"".equals(tag)) {
              if (tags == null) {
                setting.setTags(tag);
                mainWindow.settingDbTemplate.update(setting);
              }
 else {
                String[] tagsArr=tags.split(""String_Node_Str"" + Setting.TAGSPLIT);
                if (!ArrayUtil.exists(tagsArr,tag)) {
                  setting.setTags(tag + Setting.TAGSPLIT + setting.getTags());
                }
 else {
                  tags=change(tags.split(""String_Node_Str"" + Setting.TAGSPLIT),tag,Setting.TAGSPLIT);
                  setting.setTags(tags);
                }
                mainWindow.settingDbTemplate.update(setting);
              }
              initOrUpdateTagComboBox(setting);
            }
            Task task=new Task(url,saveDir);
            task.setTag(tag);
            CreateWorker worker=new CreateWorker(task,mainWindow);
            worker.execute();
          }
 else {
            JOptionPane.showMessageDialog(this_,""String_Node_Str"");
          }
        }
 else {
          JOptionPane.showMessageDialog(this_,""String_Node_Str"");
        }
      }
    }
  }
),(this.getWidth() - 100) / 2,170,100,30);
  saveDirChooser=new JFileChooser(""String_Node_Str"");
  saveDirChooser.setDialogTitle(""String_Node_Str"");
  saveDirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  ComponentUtil.addComponents(this.getContentPane(),addTaskBtn,urlLabel,urlField,tagLabel,tagField,saveDirLabel,saveDirField,chooserBtn,tipLabel);
}","public AddFormDialog(final JFrame mainWindow){
  this.mainWindow=mainWindow;
  this.setTitle(""String_Node_Str"");
  this.setIconImage(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""))).getImage());
  this.setSize(480,250);
  this.setResizable(false);
  this.setLayout(null);
  this.setLocationRelativeTo(mainWindow);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      mainWindow.setVisible(true);
      mainWindow.setEnabled(true);
      AddFormDialog w=(AddFormDialog)e.getSource();
      w.dispose();
    }
    public void windowActivated(    WindowEvent e){
      mainWindow.setEnabled(false);
    }
  }
);
  setDefaultCloseOperation(HIDE_ON_CLOSE);
  tipLabel=new AJLabel(""String_Node_Str"",Color.LIGHT_GRAY,80,5,this.getWidth() - 80,30);
  urlLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,40,60,30);
  urlField=new AJTextField(""String_Node_Str"",65,40,395,30);
  saveDirLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,120,60,30);
  saveDirField=new AJTextField(""String_Node_Str"",65,120,320,30);
  tagLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,80,60,30);
  final Setting setting=((EgDownloaderWindow)mainWindow).setting;
  tagField=new AJTextField(""String_Node_Str"",65,80,setting.getTags() != null ? 300 : 395,30);
  initOrUpdateTagComboBox(setting);
  saveDirField.setText(setting.getDefaultSaveDir() + ""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date()));
  chooserBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window addFormDialog,    MouseEvent e){
      AddFormDialog this_=(AddFormDialog)addFormDialog;
      int result=this_.saveDirChooser.showOpenDialog(this_);
      File file=null;
      if (result == JFileChooser.APPROVE_OPTION) {
        file=this_.saveDirChooser.getSelectedFile();
        if (!file.isDirectory()) {
          JOptionPane.showMessageDialog(this_,""String_Node_Str"");
          return;
        }
        String path=file.getAbsolutePath();
        this_.saveDirField.setText(path);
      }
    }
  }
),400,120,60,30);
  addTaskBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window addFormDialog,    MouseEvent event){
      AddFormDialog this_=(AddFormDialog)addFormDialog;
      String url=this_.urlField.getText().trim();
      String saveDir=this_.saveDirField.getText().trim();
      String tag=this_.tagField.getText().trim();
      if (""String_Node_Str"".equals(url)) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(saveDir)) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else {
        if (""String_Node_Str"".equals(tag)) {
          tag=""String_Node_Str"";
        }
        EgDownloaderWindow mainWindow=(EgDownloaderWindow)this_.mainWindow;
        if (isValidUrl(mainWindow.setting,url)) {
          if (""String_Node_Str"".equals(url.substring(url.length() - 1,url.length()))) {
            url=url.substring(0,url.length() - 1);
          }
          if (!mainWindow.taskDbTemplate.exsits(""String_Node_Str"",url)) {
            if (addTaskBtn.isEnabled()) {
              addTaskBtn.setEnabled(false);
            }
 else {
              return;
            }
            if (((EgDownloaderWindow)this_.mainWindow).creatingWindow == null) {
              ((EgDownloaderWindow)this_.mainWindow).creatingWindow=new CreatingWindow(mainWindow);
            }
            String tags=setting.getTags();
            if (!""String_Node_Str"".equals(tag)) {
              if (tags == null) {
                setting.setTags(tag);
                mainWindow.settingDbTemplate.update(setting);
              }
 else {
                String[] tagsArr=tags.split(""String_Node_Str"" + Setting.TAGSPLIT);
                if (!ArrayUtil.exists(tagsArr,tag)) {
                  setting.setTags(tag + Setting.TAGSPLIT + setting.getTags());
                }
 else {
                  tags=change(tags.split(""String_Node_Str"" + Setting.TAGSPLIT),tag,Setting.TAGSPLIT);
                  setting.setTags(tags);
                }
                mainWindow.settingDbTemplate.update(setting);
              }
              initOrUpdateTagComboBox(setting);
            }
            Task task=new Task(url,saveDir);
            task.setTag(tag);
            CreateWorker worker=new CreateWorker(task,mainWindow);
            worker.execute();
            addTaskBtn.setEnabled(true);
          }
 else {
            JOptionPane.showMessageDialog(this_,""String_Node_Str"");
          }
        }
 else {
          JOptionPane.showMessageDialog(this_,""String_Node_Str"");
        }
      }
    }
  }
),(this.getWidth() - 100) / 2,170,100,30);
  saveDirChooser=new JFileChooser(""String_Node_Str"");
  saveDirChooser.setDialogTitle(""String_Node_Str"");
  saveDirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  ComponentUtil.addComponents(this.getContentPane(),addTaskBtn,urlLabel,urlField,tagLabel,tagField,saveDirLabel,saveDirField,chooserBtn,tipLabel);
}",0.9825915121859414
81660,"public void doWork(Window addFormDialog,MouseEvent event){
  AddFormDialog this_=(AddFormDialog)addFormDialog;
  String url=this_.urlField.getText().trim();
  String saveDir=this_.saveDirField.getText().trim();
  String tag=this_.tagField.getText().trim();
  if (""String_Node_Str"".equals(url)) {
    JOptionPane.showMessageDialog(this_,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(saveDir)) {
    JOptionPane.showMessageDialog(this_,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(tag)) {
      tag=""String_Node_Str"";
    }
    EgDownloaderWindow mainWindow=(EgDownloaderWindow)this_.mainWindow;
    if (isValidUrl(mainWindow.setting,url)) {
      if (""String_Node_Str"".equals(url.substring(url.length() - 1,url.length()))) {
        url=url.substring(0,url.length() - 1);
      }
      if (!mainWindow.taskDbTemplate.exsits(""String_Node_Str"",url)) {
        if (((EgDownloaderWindow)this_.mainWindow).creatingWindow == null) {
          ((EgDownloaderWindow)this_.mainWindow).creatingWindow=new CreatingWindow(mainWindow);
        }
        String tags=setting.getTags();
        if (!""String_Node_Str"".equals(tag)) {
          if (tags == null) {
            setting.setTags(tag);
            mainWindow.settingDbTemplate.update(setting);
          }
 else {
            String[] tagsArr=tags.split(""String_Node_Str"" + Setting.TAGSPLIT);
            if (!ArrayUtil.exists(tagsArr,tag)) {
              setting.setTags(tag + Setting.TAGSPLIT + setting.getTags());
            }
 else {
              tags=change(tags.split(""String_Node_Str"" + Setting.TAGSPLIT),tag,Setting.TAGSPLIT);
              setting.setTags(tags);
            }
            mainWindow.settingDbTemplate.update(setting);
          }
          initOrUpdateTagComboBox(setting);
        }
        Task task=new Task(url,saveDir);
        task.setTag(tag);
        CreateWorker worker=new CreateWorker(task,mainWindow);
        worker.execute();
      }
 else {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
    }
 else {
      JOptionPane.showMessageDialog(this_,""String_Node_Str"");
    }
  }
}","public void doWork(Window addFormDialog,MouseEvent event){
  AddFormDialog this_=(AddFormDialog)addFormDialog;
  String url=this_.urlField.getText().trim();
  String saveDir=this_.saveDirField.getText().trim();
  String tag=this_.tagField.getText().trim();
  if (""String_Node_Str"".equals(url)) {
    JOptionPane.showMessageDialog(this_,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(saveDir)) {
    JOptionPane.showMessageDialog(this_,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(tag)) {
      tag=""String_Node_Str"";
    }
    EgDownloaderWindow mainWindow=(EgDownloaderWindow)this_.mainWindow;
    if (isValidUrl(mainWindow.setting,url)) {
      if (""String_Node_Str"".equals(url.substring(url.length() - 1,url.length()))) {
        url=url.substring(0,url.length() - 1);
      }
      if (!mainWindow.taskDbTemplate.exsits(""String_Node_Str"",url)) {
        if (addTaskBtn.isEnabled()) {
          addTaskBtn.setEnabled(false);
        }
 else {
          return;
        }
        if (((EgDownloaderWindow)this_.mainWindow).creatingWindow == null) {
          ((EgDownloaderWindow)this_.mainWindow).creatingWindow=new CreatingWindow(mainWindow);
        }
        String tags=setting.getTags();
        if (!""String_Node_Str"".equals(tag)) {
          if (tags == null) {
            setting.setTags(tag);
            mainWindow.settingDbTemplate.update(setting);
          }
 else {
            String[] tagsArr=tags.split(""String_Node_Str"" + Setting.TAGSPLIT);
            if (!ArrayUtil.exists(tagsArr,tag)) {
              setting.setTags(tag + Setting.TAGSPLIT + setting.getTags());
            }
 else {
              tags=change(tags.split(""String_Node_Str"" + Setting.TAGSPLIT),tag,Setting.TAGSPLIT);
              setting.setTags(tags);
            }
            mainWindow.settingDbTemplate.update(setting);
          }
          initOrUpdateTagComboBox(setting);
        }
        Task task=new Task(url,saveDir);
        task.setTag(tag);
        CreateWorker worker=new CreateWorker(task,mainWindow);
        worker.execute();
        addTaskBtn.setEnabled(true);
      }
 else {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
    }
 else {
      JOptionPane.showMessageDialog(this_,""String_Node_Str"");
    }
  }
}",0.963483783170787
81661,"protected Void doInBackground() throws Exception {
  EgDownloaderWindow window=(EgDownloaderWindow)mainWindow;
  window.setEnabled(false);
  AddFormDialog addFormWindow=((AddFormDialog)window.addFormWindow);
  addFormWindow.setVisible(false);
  window.creatingWindow.setVisible(true);
  Setting setting=window.setting;
  InputStream is;
  try {
    task=ParseEngine.buildTask_new(task,setting,window.creatingWindow);
    if (task != null) {
      is=WebClient.getStreamUseJava(task.getCoverUrl());
      FileUtil.storeStream(task.getSaveDir(),""String_Node_Str"",is);
      window.pictureDbTemplate.store(task.getPictures());
      window.taskDbTemplate.store(task);
      setting.setLastCreateTime(task.getCreateTime());
      TaskingTable taskTable=(TaskingTable)window.runningTable;
      taskTable.getTasks().add(0,task);
      addFormWindow.emptyField();
      addFormWindow.dispose();
      window.tablePane.setVisible(true);
      window.emptyTableTips.setVisible(false);
      taskTable.updateUI();
    }
 else {
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
  }
 catch (  SocketTimeoutException e) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  ConnectTimeoutException e) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  SpiderException e) {
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
catch (  WebClientException e) {
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
 finally {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    addFormWindow.dispose();
    window.setEnabled(true);
    window.setVisible(true);
  }
  return null;
}","protected Void doInBackground() throws Exception {
  if (((EgDownloaderWindow)mainWindow).taskDbTemplate.exsits(""String_Node_Str"",task.getUrl())) {
    return null;
  }
  EgDownloaderWindow window=(EgDownloaderWindow)mainWindow;
  window.setEnabled(false);
  AddFormDialog addFormWindow=((AddFormDialog)window.addFormWindow);
  addFormWindow.setVisible(false);
  window.creatingWindow.setVisible(true);
  Setting setting=window.setting;
  InputStream is;
  try {
    task=ParseEngine.buildTask_new(task,setting,window.creatingWindow);
    if (task != null) {
      is=WebClient.getStreamUseJava(task.getCoverUrl());
      FileUtil.storeStream(task.getSaveDir(),""String_Node_Str"",is);
      window.pictureDbTemplate.store(task.getPictures());
      window.taskDbTemplate.store(task);
      setting.setLastCreateTime(task.getCreateTime());
      TaskingTable taskTable=(TaskingTable)window.runningTable;
      taskTable.getTasks().add(0,task);
      addFormWindow.emptyField();
      addFormWindow.dispose();
      window.tablePane.setVisible(true);
      window.emptyTableTips.setVisible(false);
      taskTable.updateUI();
      if (setting.isAutoDownload()) {
        taskTable.startTask(task);
      }
    }
 else {
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
  }
 catch (  SocketTimeoutException e) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  ConnectTimeoutException e) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  SpiderException e) {
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
catch (  WebClientException e) {
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
 finally {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    addFormWindow.dispose();
    window.setEnabled(true);
    window.setVisible(true);
  }
  return null;
}",0.94424208461754
81662,"protected Void doInBackground() throws Exception {
  EgDownloaderWindow window=(EgDownloaderWindow)mainWindow;
  if (window.creatingWindow == null) {
    window.creatingWindow=new CreatingWindow(mainWindow);
  }
  window.creatingWindow.setVisible(true);
  Setting setting=window.setting;
  InputStream is=null;
  try {
    task=ParseEngine.buildTask_new(task,setting,window.creatingWindow);
    if (task != null && task.getPictures() != null) {
      if (task.getCoverUrl() == null) {
        is=WebClient.getStreamUseJava(task.getCoverUrl());
        FileUtil.storeStream(task.getSaveDir(),""String_Node_Str"",is);
      }
      window.pictureDbTemplate.store(task.getPictures());
      TaskingTable taskTable=(TaskingTable)window.runningTable;
      ((CreatingWindow)(window.creatingWindow)).reset();
      window.creatingWindow.dispose();
      window.tablePane.setVisible(true);
      taskTable.updateUI();
      window.setEnabled(true);
      window.setVisible(true);
      int maxThread=setting.getMaxThread();
      TaskingTable table=(TaskingTable)window.runningTable;
      if (table.getRunningNum() >= maxThread) {
        table.addWaitingTask(task);
        return null;
      }
      table.startTask(task);
    }
 else {
      window.creatingWindow.dispose();
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
  }
 catch (  SocketTimeoutException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  ConnectTimeoutException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  SpiderException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
catch (  WebClientException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
 finally {
    if (is != null) {
      is.close();
    }
  }
  return null;
}","protected Void doInBackground() throws Exception {
  EgDownloaderWindow window=(EgDownloaderWindow)mainWindow;
  if (window.creatingWindow == null) {
    window.creatingWindow=new CreatingWindow(mainWindow);
  }
  window.creatingWindow.setVisible(true);
  Setting setting=window.setting;
  InputStream is=null;
  try {
    task=ParseEngine.buildTask_new(task,setting,window.creatingWindow);
    if (task != null && task.getPictures() != null) {
      if (task.getCoverUrl() == null) {
        is=WebClient.getStreamUseJava(task.getCoverUrl());
        FileUtil.storeStream(task.getSaveDir(),""String_Node_Str"",is);
      }
      window.pictureDbTemplate.store(task.getPictures());
      TaskingTable taskTable=(TaskingTable)window.runningTable;
      ((CreatingWindow)(window.creatingWindow)).reset();
      window.creatingWindow.dispose();
      window.tablePane.setVisible(true);
      taskTable.updateUI();
      window.setEnabled(true);
      window.setVisible(true);
      TaskingTable table=(TaskingTable)window.runningTable;
      table.startTask(task);
    }
 else {
      window.creatingWindow.dispose();
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
  }
 catch (  SocketTimeoutException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  ConnectTimeoutException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  SpiderException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
catch (  WebClientException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
 finally {
    if (is != null) {
      is.close();
    }
  }
  return null;
}",0.94336917562724
81663,"public CreatingWindow(JFrame window){
  this.mainWindow=window;
  this.setTitle(""String_Node_Str"");
  this.setSize(400,150);
  this.setLayout(null);
  this.setResizable(false);
  this.setLocationRelativeTo(this.mainWindow);
  this.setBackground(Color.WHITE);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      CreatingWindow window=(CreatingWindow)e.getSource();
      window.mainWindow.setEnabled(true);
      window.mainWindow.setVisible(true);
      window.dispose();
    }
    public void windowDeactivated(    WindowEvent e){
      mainWindow.setVisible(true);
      mainWindow.setEnabled(true);
      CreatingWindow window=(CreatingWindow)e.getSource();
      window.dispose();
    }
    public void windowActivated(    WindowEvent e){
      mainWindow.setEnabled(false);
    }
  }
);
  nameLabel=new AJLabel(""String_Node_Str"",Color.BLACK,10,5,380,20);
  nameLabel.setVisible(false);
  subnameLabel=new AJLabel(""String_Node_Str"",Color.BLACK,10,25,380,20);
  subnameLabel.setVisible(false);
  totalLabel=new AJLabel(""String_Node_Str"",Color.BLACK,10,45,100,20);
  totalLabel.setVisible(false);
  sizeLabel=new AJLabel(""String_Node_Str"",Color.BLACK,120,45,120,20);
  sizeLabel.setVisible(false);
  languageLabel=new AJLabel(""String_Node_Str"",Color.BLACK,250,45,120,20);
  languageLabel.setVisible(false);
  bar=new AJProgressBar(40,75,310,20,0,100);
  bar.setStringPainted(true);
  ComponentUtil.addComponents(getContentPane(),nameLabel,subnameLabel,totalLabel,sizeLabel,languageLabel,bar);
}","public CreatingWindow(JFrame window){
  this.mainWindow=window;
  this.setTitle(""String_Node_Str"");
  this.setSize(400,150);
  this.setLayout(null);
  this.setResizable(false);
  this.setLocationRelativeTo(this.mainWindow);
  this.setBackground(Color.WHITE);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      CreatingWindow window=(CreatingWindow)e.getSource();
      window.mainWindow.setEnabled(true);
      window.mainWindow.setVisible(true);
      window.dispose();
    }
    public void windowActivated(    WindowEvent e){
      mainWindow.setEnabled(false);
    }
  }
);
  nameLabel=new AJLabel(""String_Node_Str"",Color.BLACK,10,5,380,20);
  nameLabel.setVisible(false);
  subnameLabel=new AJLabel(""String_Node_Str"",Color.BLACK,10,25,380,20);
  subnameLabel.setVisible(false);
  totalLabel=new AJLabel(""String_Node_Str"",Color.BLACK,10,45,100,20);
  totalLabel.setVisible(false);
  sizeLabel=new AJLabel(""String_Node_Str"",Color.BLACK,120,45,120,20);
  sizeLabel.setVisible(false);
  languageLabel=new AJLabel(""String_Node_Str"",Color.BLACK,250,45,120,20);
  languageLabel.setVisible(false);
  bar=new AJProgressBar(40,75,310,20,0,100);
  bar.setStringPainted(true);
  ComponentUtil.addComponents(getContentPane(),nameLabel,subnameLabel,totalLabel,sizeLabel,languageLabel,bar);
}",0.9260159777700592
81664,"public DeletingWindow(JFrame window){
  this.mainWindow=window;
  this.setTitle(""String_Node_Str"");
  this.setSize(400,120);
  this.setLayout(null);
  this.setResizable(false);
  this.setLocationRelativeTo(this.mainWindow);
  this.setBackground(Color.WHITE);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      DeletingWindow window=(DeletingWindow)e.getSource();
      window.mainWindow.setEnabled(true);
      window.mainWindow.setVisible(true);
      window.dispose();
    }
    public void windowDeactivated(    WindowEvent e){
      mainWindow.setVisible(true);
      mainWindow.setEnabled(true);
      DeletingWindow window=(DeletingWindow)e.getSource();
      window.dispose();
    }
    public void windowActivated(    WindowEvent e){
      mainWindow.setEnabled(false);
    }
  }
);
  dataLabel=new AJLabel(""String_Node_Str"",Color.BLACK,160,10,80,30);
  infoLabel=new AJLabel(""String_Node_Str"",Color.BLACK,10,50,380,30);
  ComponentUtil.addComponents(getContentPane(),dataLabel,infoLabel);
}","public DeletingWindow(JFrame window){
  this.mainWindow=window;
  this.setTitle(""String_Node_Str"");
  this.setSize(400,120);
  this.setLayout(null);
  this.setResizable(false);
  this.setLocationRelativeTo(this.mainWindow);
  this.setBackground(Color.WHITE);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      DeletingWindow window=(DeletingWindow)e.getSource();
      window.mainWindow.setEnabled(true);
      window.mainWindow.setVisible(true);
      window.dispose();
    }
    public void windowActivated(    WindowEvent e){
      mainWindow.setEnabled(false);
    }
  }
);
  dataLabel=new AJLabel(""String_Node_Str"",Color.BLACK,160,10,80,30);
  infoLabel=new AJLabel(""String_Node_Str"",Color.BLACK,10,50,380,30);
  ComponentUtil.addComponents(getContentPane(),dataLabel,infoLabel);
}",0.8871224165341812
81665,"public EditWindow(EgDownloaderWindow _mainWindow,Task _task){
  this.mainWindow=_mainWindow;
  this.setTask(_task);
  this.setTitle(""String_Node_Str"");
  this.setSize(480,250);
  this.getContentPane().setLayout(null);
  this.setResizable(false);
  this.setLocationRelativeTo(null);
  nameLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,10,40,30);
  nameField=new AJTextField(""String_Node_Str"",65,10,395,30);
  subnameLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,55,40,30);
  subnameField=new AJTextField(""String_Node_Str"",65,55,395,30);
  tagLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,100,40,30);
  tagField=new AJTextField(""String_Node_Str"",65,100,395,30);
  editTaskBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window dialog,    MouseEvent event){
      String name=nameField.getText().trim();
      String subname=subnameField.getText().trim();
      String tag=tagField.getText().trim();
      if (""String_Node_Str"".equals(name)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        if (""String_Node_Str"".equals(subname)) {
          subname=null;
        }
        if (""String_Node_Str"".equals(tag)) {
          tag=""String_Node_Str"";
        }
        task.setName(name);
        task.setSubname(subname);
        task.setTag(tag);
        mainWindow.taskDbTemplate.update(task);
        mainWindow.runningTable.updateUI();
        dialog.dispose();
      }
    }
  }
),190,145,100,30);
  ComponentUtil.addComponents(getContentPane(),nameLabel,nameField,subnameLabel,subnameField,tagLabel,tagField,editTaskBtn);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      EditWindow this_=(EditWindow)e.getSource();
      mainWindow.setVisible(true);
      mainWindow.setEnabled(true);
      this_.dispose();
    }
    public void windowDeactivated(    WindowEvent e){
      mainWindow.setVisible(true);
      mainWindow.setEnabled(true);
    }
    public void windowActivated(    WindowEvent e){
      mainWindow.setEnabled(false);
    }
  }
);
}","public EditWindow(EgDownloaderWindow _mainWindow,Task _task){
  this.mainWindow=_mainWindow;
  this.setTask(_task);
  this.setTitle(""String_Node_Str"");
  this.setSize(480,250);
  this.getContentPane().setLayout(null);
  this.setResizable(false);
  this.setLocationRelativeTo(null);
  nameLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,10,40,30);
  nameField=new AJTextField(""String_Node_Str"",65,10,395,30);
  subnameLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,55,40,30);
  subnameField=new AJTextField(""String_Node_Str"",65,55,395,30);
  tagLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,100,40,30);
  tagField=new AJTextField(""String_Node_Str"",65,100,395,30);
  editTaskBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window dialog,    MouseEvent event){
      String name=nameField.getText().trim();
      String subname=subnameField.getText().trim();
      String tag=tagField.getText().trim();
      if (""String_Node_Str"".equals(name)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
 else {
        if (""String_Node_Str"".equals(subname)) {
          subname=null;
        }
        if (""String_Node_Str"".equals(tag)) {
          tag=""String_Node_Str"";
        }
        task.setName(name);
        task.setSubname(subname);
        task.setTag(tag);
        mainWindow.taskDbTemplate.update(task);
        mainWindow.runningTable.updateUI();
        dialog.dispose();
      }
    }
  }
),190,145,100,30);
  ComponentUtil.addComponents(getContentPane(),nameLabel,nameField,subnameLabel,subnameField,tagLabel,tagField,editTaskBtn);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      EditWindow this_=(EditWindow)e.getSource();
      mainWindow.setVisible(true);
      mainWindow.setEnabled(true);
      this_.dispose();
    }
    public void windowActivated(    WindowEvent e){
      mainWindow.setEnabled(false);
    }
  }
);
}",0.9661410018552876
81666,"public AddFormDialog(final JFrame mainWindow){
  this.mainWindow=mainWindow;
  this.setTitle(""String_Node_Str"");
  this.setIconImage(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""))).getImage());
  this.setSize(480,250);
  this.setResizable(false);
  this.setLayout(null);
  this.setLocationRelativeTo(mainWindow);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      mainWindow.setVisible(true);
      mainWindow.setEnabled(true);
      AddFormDialog w=(AddFormDialog)e.getSource();
      w.dispose();
    }
    public void windowDeactivated(    WindowEvent e){
      mainWindow.setVisible(true);
      mainWindow.setEnabled(true);
      AddFormDialog w=(AddFormDialog)e.getSource();
      w.dispose();
    }
    public void windowActivated(    WindowEvent e){
      mainWindow.setEnabled(false);
    }
  }
);
  setDefaultCloseOperation(HIDE_ON_CLOSE);
  tipLabel=new AJLabel(""String_Node_Str"",Color.LIGHT_GRAY,80,5,this.getWidth() - 80,30);
  urlLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,40,60,30);
  urlField=new AJTextField(""String_Node_Str"",65,40,395,30);
  saveDirLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,120,60,30);
  saveDirField=new AJTextField(""String_Node_Str"",65,120,320,30);
  tagLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,80,60,30);
  tagField=new AJTextField(""String_Node_Str"",65,80,395,30);
  Setting setting=((EgDownloaderWindow)mainWindow).setting;
  saveDirField.setText(setting.getDefaultSaveDir() + ""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date()));
  chooserBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window addFormDialog,    MouseEvent e){
      AddFormDialog this_=(AddFormDialog)addFormDialog;
      int result=this_.saveDirChooser.showOpenDialog(this_);
      File file=null;
      if (result == JFileChooser.APPROVE_OPTION) {
        file=this_.saveDirChooser.getSelectedFile();
        if (!file.isDirectory()) {
          JOptionPane.showMessageDialog(this_,""String_Node_Str"");
          return;
        }
        String path=file.getAbsolutePath();
        this_.saveDirField.setText(path);
      }
    }
  }
),400,120,60,30);
  addTaskBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window addFormDialog,    MouseEvent event){
      AddFormDialog this_=(AddFormDialog)addFormDialog;
      String url=this_.urlField.getText().trim();
      String saveDir=this_.saveDirField.getText().trim();
      String tag=this_.tagField.getText().trim();
      if (""String_Node_Str"".equals(url)) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(saveDir)) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else {
        if (""String_Node_Str"".equals(tag)) {
          tag=""String_Node_Str"";
        }
        EgDownloaderWindow mainWindow=(EgDownloaderWindow)this_.mainWindow;
        if (isValidUrl(mainWindow.setting,url)) {
          if (""String_Node_Str"".equals(url.substring(url.length() - 1,url.length()))) {
            url=url.substring(0,url.length() - 1);
          }
          if (!mainWindow.taskDbTemplate.exsits(""String_Node_Str"",url)) {
            if (((EgDownloaderWindow)this_.mainWindow).creatingWindow == null) {
              ((EgDownloaderWindow)this_.mainWindow).creatingWindow=new CreatingWindow(mainWindow);
            }
            Task task=new Task(url,saveDir);
            task.setTag(tag);
            CreateWorker worker=new CreateWorker(task,mainWindow);
            worker.execute();
          }
 else {
            JOptionPane.showMessageDialog(this_,""String_Node_Str"");
          }
        }
 else {
          JOptionPane.showMessageDialog(this_,""String_Node_Str"");
        }
      }
    }
  }
),(this.getWidth() - 100) / 2,170,100,30);
  saveDirChooser=new JFileChooser(""String_Node_Str"");
  saveDirChooser.setDialogTitle(""String_Node_Str"");
  saveDirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  ComponentUtil.addComponents(this.getContentPane(),addTaskBtn,urlLabel,urlField,tagLabel,tagField,saveDirLabel,saveDirField,chooserBtn,tipLabel);
}","public AddFormDialog(final JFrame mainWindow){
  this.mainWindow=mainWindow;
  this.setTitle(""String_Node_Str"");
  this.setIconImage(new ImageIcon(getClass().getResource(ComponentConst.ICON_PATH + ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""))).getImage());
  this.setSize(480,250);
  this.setResizable(false);
  this.setLayout(null);
  this.setLocationRelativeTo(mainWindow);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      mainWindow.setVisible(true);
      mainWindow.setEnabled(true);
      AddFormDialog w=(AddFormDialog)e.getSource();
      w.dispose();
    }
    public void windowActivated(    WindowEvent e){
      mainWindow.setEnabled(false);
    }
  }
);
  setDefaultCloseOperation(HIDE_ON_CLOSE);
  tipLabel=new AJLabel(""String_Node_Str"",Color.LIGHT_GRAY,80,5,this.getWidth() - 80,30);
  urlLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,40,60,30);
  urlField=new AJTextField(""String_Node_Str"",65,40,395,30);
  saveDirLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,120,60,30);
  saveDirField=new AJTextField(""String_Node_Str"",65,120,320,30);
  tagLabel=new AJLabel(""String_Node_Str"",Color.BLUE,5,80,60,30);
  tagField=new AJTextField(""String_Node_Str"",65,80,395,30);
  Setting setting=((EgDownloaderWindow)mainWindow).setting;
  saveDirField.setText(setting.getDefaultSaveDir() + ""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date()));
  chooserBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window addFormDialog,    MouseEvent e){
      AddFormDialog this_=(AddFormDialog)addFormDialog;
      int result=this_.saveDirChooser.showOpenDialog(this_);
      File file=null;
      if (result == JFileChooser.APPROVE_OPTION) {
        file=this_.saveDirChooser.getSelectedFile();
        if (!file.isDirectory()) {
          JOptionPane.showMessageDialog(this_,""String_Node_Str"");
          return;
        }
        String path=file.getAbsolutePath();
        this_.saveDirField.setText(path);
      }
    }
  }
),400,120,60,30);
  addTaskBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),new OperaBtnMouseListener(this,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window addFormDialog,    MouseEvent event){
      AddFormDialog this_=(AddFormDialog)addFormDialog;
      String url=this_.urlField.getText().trim();
      String saveDir=this_.saveDirField.getText().trim();
      String tag=this_.tagField.getText().trim();
      if (""String_Node_Str"".equals(url)) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(saveDir)) {
        JOptionPane.showMessageDialog(this_,""String_Node_Str"");
      }
 else {
        if (""String_Node_Str"".equals(tag)) {
          tag=""String_Node_Str"";
        }
        EgDownloaderWindow mainWindow=(EgDownloaderWindow)this_.mainWindow;
        if (isValidUrl(mainWindow.setting,url)) {
          if (""String_Node_Str"".equals(url.substring(url.length() - 1,url.length()))) {
            url=url.substring(0,url.length() - 1);
          }
          if (!mainWindow.taskDbTemplate.exsits(""String_Node_Str"",url)) {
            if (((EgDownloaderWindow)this_.mainWindow).creatingWindow == null) {
              ((EgDownloaderWindow)this_.mainWindow).creatingWindow=new CreatingWindow(mainWindow);
            }
            Task task=new Task(url,saveDir);
            task.setTag(tag);
            CreateWorker worker=new CreateWorker(task,mainWindow);
            worker.execute();
          }
 else {
            JOptionPane.showMessageDialog(this_,""String_Node_Str"");
          }
        }
 else {
          JOptionPane.showMessageDialog(this_,""String_Node_Str"");
        }
      }
    }
  }
),(this.getWidth() - 100) / 2,170,100,30);
  saveDirChooser=new JFileChooser(""String_Node_Str"");
  saveDirChooser.setDialogTitle(""String_Node_Str"");
  saveDirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  ComponentUtil.addComponents(this.getContentPane(),addTaskBtn,urlLabel,urlField,tagLabel,tagField,saveDirLabel,saveDirField,chooserBtn,tipLabel);
}",0.9774233404470404
81667,"/** 
 * 步骤： 1、验证url的合法性。http://exhentai.org/g/446779/553f5c4086/ 2、分析url构造hentai@home下载地址,通过hentai@home获取图片数量（size）、漫画名(name)、漫画查看地址集合 3、开启采集picture真实下载路径的任务。 4、根据pictures集合开始下载图片，存放到saveDir/name/目录下
 * @throws SpiderException 
 * @throws WebClientException 
 * @throws ConnectTimeoutException 
 * @throws SocketTimeoutException 
 */
public static Task buildTask(String url,String saveDir,Setting setting,JDialog window) throws SpiderException, WebClientException, ConnectTimeoutException, SocketTimeoutException {
  CreatingWindow creatingWindow=(CreatingWindow)window;
  Task task=new Task(url,saveDir);
  task.setId(UUID.randomUUID().toString());
  String host=url.substring(0,url.indexOf(setting.getGidPrefix()));
  System.out.println(""String_Node_Str"" + host);
  String gid=Spider.substring(url,setting.getGidPrefix()).substring(0,Spider.substring(url,setting.getGidPrefix()).indexOf(""String_Node_Str""));
  String t=Spider.substring(url,gid + ""String_Node_Str"").substring(0,Spider.substring(url,gid + ""String_Node_Str"").length()).replaceAll(""String_Node_Str"",""String_Node_Str"");
  String hentaiHomeUrl=host + ""String_Node_Str"" + setting.getHentaiHome().getUri()+ ""String_Node_Str""+ setting.getHentaiHome().getFirstParameterName()+ ""String_Node_Str""+ gid+ ""String_Node_Str""+ setting.getHentaiHome().getSecondParameterName()+ ""String_Node_Str""+ t;
  System.out.println(""String_Node_Str"" + hentaiHomeUrl);
  String hentaiHomeSource=WebClient.postRequestWithCookie(hentaiHomeUrl,setting.getCookieInfo());
  String total_=Spider.getTextFromSource(hentaiHomeSource,setting.getTotalPrefix(),""String_Node_Str"");
  System.out.println(""String_Node_Str"" + total_);
  String name=Spider.getTextFromSource(hentaiHomeSource,setting.getNamePrefix(),""String_Node_Str"");
  System.out.println(""String_Node_Str"" + name);
  creatingWindow.nameLabel.setText(creatingWindow.nameLabel.getText() + name);
  creatingWindow.totalLabel.setText(creatingWindow.totalLabel.getText() + total_);
  creatingWindow.nameLabel.setVisible(true);
  creatingWindow.totalLabel.setVisible(true);
  String fileList=Spider.getTextFromSource(hentaiHomeSource,setting.getFileListPrefix(),setting.getFileListSuffix());
  int total=Integer.parseInt(total_.trim());
  creatingWindow.bar.setMaximum(total);
  List<Picture> pictures=getPictures(task,fileList,total);
  setPicturesUrl(url,pictures,setting,creatingWindow);
  task.setTotal(total);
  task.setName(name);
  task.setSaveDir(saveDir + ""String_Node_Str"" + name);
  task.setPictures(pictures);
  return task;
}","/** 
 * 步骤： 1、验证url的合法性。http://exhentai.org/g/446779/553f5c4086/ 2、分析url构造hentai@home下载地址,通过hentai@home获取图片数量（size）、漫画名(name)、漫画查看地址集合 3、开启采集picture真实下载路径的任务。 4、根据pictures集合开始下载图片，存放到saveDir/name/目录下
 * @throws SpiderException 
 * @throws WebClientException 
 * @throws ConnectTimeoutException 
 * @throws SocketTimeoutException 
 */
public static Task buildTask(String url,String saveDir,Setting setting,JDialog window) throws SpiderException, WebClientException, ConnectTimeoutException, SocketTimeoutException {
  CreatingWindow creatingWindow=(CreatingWindow)window;
  Task task=new Task(url,saveDir);
  task.setId(UUID.randomUUID().toString());
  String host=url.substring(0,url.indexOf(setting.getGidPrefix()));
  System.out.println(""String_Node_Str"" + host);
  String gid=Spider.substring(url,setting.getGidPrefix()).substring(0,Spider.substring(url,setting.getGidPrefix()).indexOf(""String_Node_Str""));
  String t=Spider.substring(url,gid + ""String_Node_Str"").substring(0,Spider.substring(url,gid + ""String_Node_Str"").length()).replaceAll(""String_Node_Str"",""String_Node_Str"");
  String hentaiHomeUrl=host + ""String_Node_Str"" + setting.getHentaiHome().getUri()+ ""String_Node_Str""+ setting.getHentaiHome().getFirstParameterName()+ ""String_Node_Str""+ gid+ ""String_Node_Str""+ setting.getHentaiHome().getSecondParameterName()+ ""String_Node_Str""+ t;
  System.out.println(""String_Node_Str"" + hentaiHomeUrl);
  String hentaiHomeSource=WebClient.postRequestWithCookie(hentaiHomeUrl,setting.getCookieInfo());
  String total_=Spider.getTextFromSource(hentaiHomeSource,setting.getTotalPrefix(),""String_Node_Str"");
  System.out.println(""String_Node_Str"" + total_);
  String name=Spider.getTextFromSource(hentaiHomeSource,setting.getNamePrefix(),""String_Node_Str"");
  System.out.println(""String_Node_Str"" + name);
  if (total_ == null || name == null) {
    return null;
  }
  creatingWindow.nameLabel.setText(creatingWindow.nameLabel.getText() + name);
  creatingWindow.totalLabel.setText(creatingWindow.totalLabel.getText() + total_);
  creatingWindow.nameLabel.setVisible(true);
  creatingWindow.totalLabel.setVisible(true);
  String fileList=Spider.getTextFromSource(hentaiHomeSource,setting.getFileListPrefix(),setting.getFileListSuffix());
  int total=Integer.parseInt(total_.trim());
  creatingWindow.bar.setMaximum(total);
  List<Picture> pictures=getPictures(task,fileList,total);
  setPicturesUrl(url,pictures,setting,creatingWindow);
  task.setTotal(total);
  task.setName(name);
  task.setSaveDir(saveDir + ""String_Node_Str"" + name);
  task.setPictures(pictures);
  return task;
}",0.9880602857702094
81668,"public void doWork(Window window,MouseEvent e){
  EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
  SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
  String pageCount=settingWindow.d_pageCountTextField.getText();
  String pageParam=settingWindow.d_pageParamTextField.getText();
  String sourcePrefix=settingWindow.d_sourcePrefixTextField.getText();
  String sourceSuffix=settingWindow.d_sourceSuffixTextField.getText();
  String showPicPrefix=settingWindow.d_showPicPrefixTextField.getText();
  String showPicSuffix=settingWindow.d_showPicPrefixTextField.getText();
  String realUrlPrefix=settingWindow.d_realUrlPrefixTextField.getText();
  String realUrlSuffix=settingWindow.d_realUrlSuffixTextField.getText();
  Pattern p=Pattern.compile(""String_Node_Str"");
  if (""String_Node_Str"".equals(pageCount)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (!p.matcher(pageCount).matches()) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(pageParam)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(sourcePrefix)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(sourceSuffix)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(showPicPrefix)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(showPicSuffix)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(realUrlPrefix)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(realUrlSuffix)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else {
    mainWindow.setting.setPageCount(Integer.parseInt(pageCount));
    mainWindow.setting.setPageParam(pageParam);
    mainWindow.setting.setSourcePrefix(sourcePrefix);
    mainWindow.setting.setSourceSuffix(sourceSuffix);
    mainWindow.setting.setShowPicPrefix(showPicPrefix);
    mainWindow.setting.setShowPicSuffix(showPicSuffix);
    mainWindow.setting.setRealUrlPrefix(realUrlPrefix);
    mainWindow.setting.setRealUrlSuffix(realUrlSuffix);
    mainWindow.settingDbTemplate.update(mainWindow.setting);
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
}","public void doWork(Window window,MouseEvent e){
  EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
  SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
  String pageCount=settingWindow.d_pageCountTextField.getText();
  String pageParam=settingWindow.d_pageParamTextField.getText();
  String sourcePrefix=settingWindow.d_sourcePrefixTextField.getText();
  String sourceSuffix=settingWindow.d_sourceSuffixTextField.getText();
  String showPicPrefix=settingWindow.d_showPicPrefixTextField.getText();
  String showPicSuffix=settingWindow.d_showPicSuffixTextField.getText();
  String realUrlPrefix=settingWindow.d_realUrlPrefixTextField.getText();
  String realUrlSuffix=settingWindow.d_realUrlSuffixTextField.getText();
  Pattern p=Pattern.compile(""String_Node_Str"");
  if (""String_Node_Str"".equals(pageCount)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (!p.matcher(pageCount).matches()) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(pageParam)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(sourcePrefix)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(sourceSuffix)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(showPicPrefix)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(showPicSuffix)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(realUrlPrefix)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else   if (""String_Node_Str"".equals(realUrlSuffix)) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
 else {
    mainWindow.setting.setPageCount(Integer.parseInt(pageCount));
    mainWindow.setting.setPageParam(pageParam);
    mainWindow.setting.setSourcePrefix(sourcePrefix);
    mainWindow.setting.setSourceSuffix(sourceSuffix);
    mainWindow.setting.setShowPicPrefix(showPicPrefix);
    mainWindow.setting.setShowPicSuffix(showPicSuffix);
    mainWindow.setting.setRealUrlPrefix(realUrlPrefix);
    mainWindow.setting.setRealUrlSuffix(realUrlSuffix);
    mainWindow.settingDbTemplate.update(mainWindow.setting);
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
}",0.9988076311605724
81669,"public SettingWindow(JFrame mainWindow){
  super(""String_Node_Str"");
  this.getContentPane().setLayout(null);
  this.setSize(640,450);
  this.setResizable(false);
  this.setLocationRelativeTo(null);
  Setting setting=((EgDownloaderWindow)mainWindow).setting;
  settingTabPanel.setBounds(20,5,600,400);
  Color labelColor=Color.BLUE;
  basicPanel=new JPanel();
  basicPanel.setLayout(null);
  saveDirLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,100,30);
  saveDirField=new AJTextField(setting.getDefaultSaveDir(),""String_Node_Str"",125,30,360,30);
  saveAsNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,100,30);
  saveAsNameBox=new JCheckBox(""String_Node_Str"",setting.isSaveAsName());
  saveAsNameBox.setBounds(125,70,30,30);
  maxThreadLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,100,30);
  maxThreadField=new AJTextField(setting.getMaxThread() + ""String_Node_Str"",""String_Node_Str"",125,110,100,30);
  loginUrlLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,100,30);
  loginUrlField=new AJTextField(setting.getLoginUrl(),""String_Node_Str"",125,150,360,30);
  cookieLabel=new AJLabel(""String_Node_Str"",labelColor,25,190,100,30);
  cookieField=new AJTextField(setting.getCookieInfo(),""String_Node_Str"",125,190,360,30);
  MouseListener basicBtnListener=new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      String saveDir=settingWindow.saveDirField.getText();
      String maxThread=settingWindow.maxThreadField.getText();
      String loginUrl=settingWindow.loginUrlField.getText();
      boolean saveAsName=settingWindow.saveAsNameBox.getSelectedObjects() == null ? false : true;
      String cookieInfo=settingWindow.cookieField.getText();
      Pattern p=Pattern.compile(""String_Node_Str"");
      if (""String_Node_Str"".equals(saveDir)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(maxThread)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (!p.matcher(maxThread).matches()) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(loginUrl)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else {
        if (""String_Node_Str"".equals(cookieInfo)) {
          int result=JOptionPane.showConfirmDialog(null,""String_Node_Str"");
          if (result != 0) {
            return;
          }
        }
        mainWindow.setting.setDefaultSaveDir(saveDir);
        mainWindow.setting.setSaveAsName(saveAsName);
        mainWindow.setting.setMaxThread(Integer.parseInt(maxThread));
        mainWindow.setting.setLoginUrl(loginUrl);
        mainWindow.setting.setCookieInfo(cookieInfo);
        mainWindow.settingDbTemplate.update(mainWindow.setting);
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
);
  basicBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),basicBtnListener,250,250,60,30);
  addComponentsJpanel(basicPanel,saveDirLabel,saveDirField,saveAsNameLabel,saveAsNameBox,maxThreadLabel,maxThreadField,loginUrlLabel,loginUrlField,cookieLabel,cookieField,basicBtn);
  h_uriLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,80,30);
  h_uriTextField=new AJTextField(setting.getHentaiHome().getUri(),null,105,30,400,30);
  h_firstParameterNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,80,30);
  h_firstParameterNameTextField=new AJTextField(setting.getHentaiHome().getFirstParameterName(),null,105,70,400,30);
  h_secondParameterNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,80,30);
  h_secondParameterNameTextField=new AJTextField(setting.getHentaiHome().getSecondParameterName(),null,105,110,400,30);
  h_totalPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,80,30);
  h_totalPrefixTextField=new AJTextField(setting.getTotalPrefix(),null,105,150,120,30);
  h_namePrefixLabel=new AJLabel(""String_Node_Str"",labelColor,300,150,80,30);
  h_namePrefixTextField=new AJTextField(setting.getNamePrefix(),null,385,150,120,30);
  h_fileListPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,190,80,30);
  h_fileListPrefixTextField=new AJTextField(setting.getFileListPrefix(),null,105,190,120,30);
  h_fileListSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,300,190,80,30);
  h_fileListSuffixTextField=new AJTextField(setting.getFileListSuffix(),null,385,190,120,30);
  MouseListener h_BtnListener=new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      String uri=settingWindow.h_uriTextField.getText();
      String gid=settingWindow.h_firstParameterNameTextField.getText();
      String t=settingWindow.h_secondParameterNameTextField.getText();
      String totalPrefix=settingWindow.h_totalPrefixTextField.getText();
      String namePrefix=settingWindow.h_namePrefixTextField.getText();
      String fileListPrefix=settingWindow.h_fileListPrefixTextField.getText();
      String fileListSuffix=settingWindow.h_fileListSuffixTextField.getText();
      if (""String_Node_Str"".equals(uri)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(gid)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(t)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(totalPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(namePrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(fileListPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(fileListSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else {
        mainWindow.setting.getHentaiHome().setUri(uri);
        mainWindow.setting.getHentaiHome().setFirstParameterName(gid);
        mainWindow.setting.getHentaiHome().setSecondParameterName(t);
        mainWindow.setting.setTotalPrefix(totalPrefix);
        mainWindow.setting.setNamePrefix(namePrefix);
        mainWindow.setting.setFileListPrefix(fileListPrefix);
        mainWindow.setting.setFileListSuffix(fileListSuffix);
        mainWindow.settingDbTemplate.update(mainWindow.setting);
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
);
  h_Btn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),h_BtnListener,250,250,60,30);
  henTaiHomePanel=new AJPanel(h_uriLabel,h_uriTextField,h_firstParameterNameLabel,h_firstParameterNameTextField,h_secondParameterNameLabel,h_secondParameterNameTextField,h_totalPrefixLabel,h_totalPrefixTextField,h_namePrefixLabel,h_namePrefixTextField,h_fileListPrefixLabel,h_fileListPrefixTextField,h_fileListSuffixLabel,h_fileListSuffixTextField,h_Btn);
  d_pageCountLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,100,30);
  d_pageCountTextField=new AJTextField(setting.getPageCount() + ""String_Node_Str"",""String_Node_Str"",125,30,120,30);
  d_pageParamLabel=new AJLabel(""String_Node_Str"",labelColor,280,30,100,30);
  d_pageParamTextField=new AJTextField(setting.getPageParam() + ""String_Node_Str"",""String_Node_Str"",380,30,120,30);
  d_sourcePrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,100,30);
  d_sourcePrefixTextField=new AJTextField(setting.getSourcePrefix() + ""String_Node_Str"",""String_Node_Str"",125,70,120,30);
  d_sourceSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,280,70,100,30);
  d_sourceSuffixTextField=new AJTextField(setting.getSourceSuffix() + ""String_Node_Str"",""String_Node_Str"",380,70,120,30);
  d_showPicPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,100,30);
  d_showPicPrefixTextField=new AJTextField(setting.getShowPicPrefix() + ""String_Node_Str"",""String_Node_Str"",125,110,120,30);
  d_showPicSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,280,110,100,30);
  d_showPicSuffixTextField=new AJTextField(setting.getShowPicSuffix() + ""String_Node_Str"",""String_Node_Str"",380,110,120,30);
  d_realUrlPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,100,30);
  d_realUrlPrefixTextField=new AJTextField(setting.getRealUrlPrefix() + ""String_Node_Str"",""String_Node_Str"",125,150,120,30);
  d_realUrlSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,280,150,100,30);
  d_realUrlSuffixTextField=new AJTextField(setting.getRealUrlSuffix() + ""String_Node_Str"",""String_Node_Str"",380,150,120,30);
  MouseListener d_BtnListener=new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      String pageCount=settingWindow.d_pageCountTextField.getText();
      String pageParam=settingWindow.d_pageParamTextField.getText();
      String sourcePrefix=settingWindow.d_sourcePrefixTextField.getText();
      String sourceSuffix=settingWindow.d_sourceSuffixTextField.getText();
      String showPicPrefix=settingWindow.d_showPicPrefixTextField.getText();
      String showPicSuffix=settingWindow.d_showPicPrefixTextField.getText();
      String realUrlPrefix=settingWindow.d_realUrlPrefixTextField.getText();
      String realUrlSuffix=settingWindow.d_realUrlSuffixTextField.getText();
      Pattern p=Pattern.compile(""String_Node_Str"");
      if (""String_Node_Str"".equals(pageCount)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (!p.matcher(pageCount).matches()) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(pageParam)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(sourcePrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(sourceSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(showPicPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(showPicSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(realUrlPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(realUrlSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else {
        mainWindow.setting.setPageCount(Integer.parseInt(pageCount));
        mainWindow.setting.setPageParam(pageParam);
        mainWindow.setting.setSourcePrefix(sourcePrefix);
        mainWindow.setting.setSourceSuffix(sourceSuffix);
        mainWindow.setting.setShowPicPrefix(showPicPrefix);
        mainWindow.setting.setShowPicSuffix(showPicSuffix);
        mainWindow.setting.setRealUrlPrefix(realUrlPrefix);
        mainWindow.setting.setRealUrlSuffix(realUrlSuffix);
        mainWindow.settingDbTemplate.update(mainWindow.setting);
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
);
  d_Btn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),d_BtnListener,250,250,60,30);
  downloadPanel=new AJPanel(d_pageCountLabel,d_pageCountTextField,d_pageParamLabel,d_pageParamTextField,d_sourcePrefixLabel,d_sourcePrefixTextField,d_sourceSuffixLabel,d_sourceSuffixTextField,d_showPicPrefixLabel,d_showPicPrefixTextField,d_showPicSuffixLabel,d_showPicSuffixTextField,d_realUrlPrefixLabel,d_realUrlPrefixTextField,d_realUrlSuffixLabel,d_realUrlSuffixTextField,d_Btn);
  settingTabPanel.add(""String_Node_Str"",basicPanel);
  settingTabPanel.add(""String_Node_Str"",henTaiHomePanel);
  settingTabPanel.add(""String_Node_Str"",downloadPanel);
  addComponents(settingTabPanel);
  this.setVisible(true);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      SettingWindow this_=(SettingWindow)e.getSource();
      this_.dispose();
    }
  }
);
}","public SettingWindow(JFrame mainWindow){
  super(""String_Node_Str"");
  this.getContentPane().setLayout(null);
  this.setSize(640,450);
  this.setResizable(false);
  this.setLocationRelativeTo(null);
  Setting setting=((EgDownloaderWindow)mainWindow).setting;
  settingTabPanel.setBounds(20,5,600,400);
  Color labelColor=Color.BLUE;
  basicPanel=new JPanel();
  basicPanel.setLayout(null);
  saveDirLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,100,30);
  saveDirField=new AJTextField(setting.getDefaultSaveDir(),""String_Node_Str"",125,30,360,30);
  saveAsNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,100,30);
  saveAsNameBox=new JCheckBox(""String_Node_Str"",setting.isSaveAsName());
  saveAsNameBox.setBounds(125,70,30,30);
  maxThreadLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,100,30);
  maxThreadField=new AJTextField(setting.getMaxThread() + ""String_Node_Str"",""String_Node_Str"",125,110,100,30);
  loginUrlLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,100,30);
  loginUrlField=new AJTextField(setting.getLoginUrl(),""String_Node_Str"",125,150,360,30);
  cookieLabel=new AJLabel(""String_Node_Str"",labelColor,25,190,100,30);
  cookieField=new AJTextField(setting.getCookieInfo(),""String_Node_Str"",125,190,360,30);
  MouseListener basicBtnListener=new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      String saveDir=settingWindow.saveDirField.getText();
      String maxThread=settingWindow.maxThreadField.getText();
      String loginUrl=settingWindow.loginUrlField.getText();
      boolean saveAsName=settingWindow.saveAsNameBox.getSelectedObjects() == null ? false : true;
      String cookieInfo=settingWindow.cookieField.getText();
      Pattern p=Pattern.compile(""String_Node_Str"");
      if (""String_Node_Str"".equals(saveDir)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(maxThread)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (!p.matcher(maxThread).matches()) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(loginUrl)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else {
        if (""String_Node_Str"".equals(cookieInfo)) {
          int result=JOptionPane.showConfirmDialog(null,""String_Node_Str"");
          if (result != 0) {
            return;
          }
        }
        mainWindow.setting.setDefaultSaveDir(saveDir);
        mainWindow.setting.setSaveAsName(saveAsName);
        mainWindow.setting.setMaxThread(Integer.parseInt(maxThread));
        mainWindow.setting.setLoginUrl(loginUrl);
        mainWindow.setting.setCookieInfo(cookieInfo);
        mainWindow.settingDbTemplate.update(mainWindow.setting);
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
);
  basicBtn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),basicBtnListener,250,250,60,30);
  addComponentsJpanel(basicPanel,saveDirLabel,saveDirField,saveAsNameLabel,saveAsNameBox,maxThreadLabel,maxThreadField,loginUrlLabel,loginUrlField,cookieLabel,cookieField,basicBtn);
  h_uriLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,80,30);
  h_uriTextField=new AJTextField(setting.getHentaiHome().getUri(),null,105,30,400,30);
  h_firstParameterNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,80,30);
  h_firstParameterNameTextField=new AJTextField(setting.getHentaiHome().getFirstParameterName(),null,105,70,400,30);
  h_secondParameterNameLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,80,30);
  h_secondParameterNameTextField=new AJTextField(setting.getHentaiHome().getSecondParameterName(),null,105,110,400,30);
  h_totalPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,80,30);
  h_totalPrefixTextField=new AJTextField(setting.getTotalPrefix(),null,105,150,120,30);
  h_namePrefixLabel=new AJLabel(""String_Node_Str"",labelColor,300,150,80,30);
  h_namePrefixTextField=new AJTextField(setting.getNamePrefix(),null,385,150,120,30);
  h_fileListPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,190,80,30);
  h_fileListPrefixTextField=new AJTextField(setting.getFileListPrefix(),null,105,190,120,30);
  h_fileListSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,300,190,80,30);
  h_fileListSuffixTextField=new AJTextField(setting.getFileListSuffix(),null,385,190,120,30);
  MouseListener h_BtnListener=new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      String uri=settingWindow.h_uriTextField.getText();
      String gid=settingWindow.h_firstParameterNameTextField.getText();
      String t=settingWindow.h_secondParameterNameTextField.getText();
      String totalPrefix=settingWindow.h_totalPrefixTextField.getText();
      String namePrefix=settingWindow.h_namePrefixTextField.getText();
      String fileListPrefix=settingWindow.h_fileListPrefixTextField.getText();
      String fileListSuffix=settingWindow.h_fileListSuffixTextField.getText();
      if (""String_Node_Str"".equals(uri)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(gid)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(t)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(totalPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(namePrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(fileListPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(fileListSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else {
        mainWindow.setting.getHentaiHome().setUri(uri);
        mainWindow.setting.getHentaiHome().setFirstParameterName(gid);
        mainWindow.setting.getHentaiHome().setSecondParameterName(t);
        mainWindow.setting.setTotalPrefix(totalPrefix);
        mainWindow.setting.setNamePrefix(namePrefix);
        mainWindow.setting.setFileListPrefix(fileListPrefix);
        mainWindow.setting.setFileListSuffix(fileListSuffix);
        mainWindow.settingDbTemplate.update(mainWindow.setting);
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
);
  h_Btn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),h_BtnListener,250,250,60,30);
  henTaiHomePanel=new AJPanel(h_uriLabel,h_uriTextField,h_firstParameterNameLabel,h_firstParameterNameTextField,h_secondParameterNameLabel,h_secondParameterNameTextField,h_totalPrefixLabel,h_totalPrefixTextField,h_namePrefixLabel,h_namePrefixTextField,h_fileListPrefixLabel,h_fileListPrefixTextField,h_fileListSuffixLabel,h_fileListSuffixTextField,h_Btn);
  d_pageCountLabel=new AJLabel(""String_Node_Str"",labelColor,25,30,100,30);
  d_pageCountTextField=new AJTextField(setting.getPageCount() + ""String_Node_Str"",""String_Node_Str"",125,30,120,30);
  d_pageParamLabel=new AJLabel(""String_Node_Str"",labelColor,280,30,100,30);
  d_pageParamTextField=new AJTextField(setting.getPageParam() + ""String_Node_Str"",""String_Node_Str"",380,30,120,30);
  d_sourcePrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,70,100,30);
  d_sourcePrefixTextField=new AJTextField(setting.getSourcePrefix() + ""String_Node_Str"",""String_Node_Str"",125,70,120,30);
  d_sourceSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,280,70,100,30);
  d_sourceSuffixTextField=new AJTextField(setting.getSourceSuffix() + ""String_Node_Str"",""String_Node_Str"",380,70,120,30);
  d_showPicPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,110,100,30);
  d_showPicPrefixTextField=new AJTextField(setting.getShowPicPrefix() + ""String_Node_Str"",""String_Node_Str"",125,110,120,30);
  d_showPicSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,280,110,100,30);
  d_showPicSuffixTextField=new AJTextField(setting.getShowPicSuffix() + ""String_Node_Str"",""String_Node_Str"",380,110,120,30);
  d_realUrlPrefixLabel=new AJLabel(""String_Node_Str"",labelColor,25,150,100,30);
  d_realUrlPrefixTextField=new AJTextField(setting.getRealUrlPrefix() + ""String_Node_Str"",""String_Node_Str"",125,150,120,30);
  d_realUrlSuffixLabel=new AJLabel(""String_Node_Str"",labelColor,280,150,100,30);
  d_realUrlSuffixTextField=new AJTextField(setting.getRealUrlSuffix() + ""String_Node_Str"",""String_Node_Str"",380,150,120,30);
  MouseListener d_BtnListener=new OperaBtnMouseListener(mainWindow,MouseAction.CLICK,new IListenerTask(){
    public void doWork(    Window window,    MouseEvent e){
      EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
      SettingWindow settingWindow=(SettingWindow)mainWindow.settingWindow;
      String pageCount=settingWindow.d_pageCountTextField.getText();
      String pageParam=settingWindow.d_pageParamTextField.getText();
      String sourcePrefix=settingWindow.d_sourcePrefixTextField.getText();
      String sourceSuffix=settingWindow.d_sourceSuffixTextField.getText();
      String showPicPrefix=settingWindow.d_showPicPrefixTextField.getText();
      String showPicSuffix=settingWindow.d_showPicSuffixTextField.getText();
      String realUrlPrefix=settingWindow.d_realUrlPrefixTextField.getText();
      String realUrlSuffix=settingWindow.d_realUrlSuffixTextField.getText();
      Pattern p=Pattern.compile(""String_Node_Str"");
      if (""String_Node_Str"".equals(pageCount)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (!p.matcher(pageCount).matches()) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(pageParam)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(sourcePrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(sourceSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(showPicPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(showPicSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(realUrlPrefix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else       if (""String_Node_Str"".equals(realUrlSuffix)) {
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
        return;
      }
 else {
        mainWindow.setting.setPageCount(Integer.parseInt(pageCount));
        mainWindow.setting.setPageParam(pageParam);
        mainWindow.setting.setSourcePrefix(sourcePrefix);
        mainWindow.setting.setSourceSuffix(sourceSuffix);
        mainWindow.setting.setShowPicPrefix(showPicPrefix);
        mainWindow.setting.setShowPicSuffix(showPicSuffix);
        mainWindow.setting.setRealUrlPrefix(realUrlPrefix);
        mainWindow.setting.setRealUrlSuffix(realUrlSuffix);
        mainWindow.settingDbTemplate.update(mainWindow.setting);
        JOptionPane.showMessageDialog(null,""String_Node_Str"");
      }
    }
  }
);
  d_Btn=new AJButton(""String_Node_Str"",""String_Node_Str"",ComponentConst.SKIN_NUM + ComponentConst.SKIN_ICON.get(""String_Node_Str""),d_BtnListener,250,250,60,30);
  downloadPanel=new AJPanel(d_pageCountLabel,d_pageCountTextField,d_pageParamLabel,d_pageParamTextField,d_sourcePrefixLabel,d_sourcePrefixTextField,d_sourceSuffixLabel,d_sourceSuffixTextField,d_showPicPrefixLabel,d_showPicPrefixTextField,d_showPicSuffixLabel,d_showPicSuffixTextField,d_realUrlPrefixLabel,d_realUrlPrefixTextField,d_realUrlSuffixLabel,d_realUrlSuffixTextField,d_Btn);
  settingTabPanel.add(""String_Node_Str"",basicPanel);
  settingTabPanel.add(""String_Node_Str"",henTaiHomePanel);
  settingTabPanel.add(""String_Node_Str"",downloadPanel);
  addComponents(settingTabPanel);
  this.setVisible(true);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      SettingWindow this_=(SettingWindow)e.getSource();
      this_.dispose();
    }
  }
);
}",0.9997704315886136
81670,"protected Void doInBackground() throws Exception {
  EgDownloaderWindow window=(EgDownloaderWindow)mainWindow;
  AddFormDialog addFormWindow=((AddFormDialog)window.addFormWindow);
  addFormWindow.dispose();
  window.creatingWindow.setVisible(true);
  Setting setting=window.setting;
  Task task=null;
  try {
    task=ParseEngine.buildTask(url,saveDir,setting,window.creatingWindow);
    if (task != null) {
      window.pictureDbTemplate.store(task.getPictures());
      window.taskDbTemplate.store(task);
      TaskingTable taskTable=(TaskingTable)window.runningTable;
      taskTable.getTasks().add(0,task);
      addFormWindow.emptyField();
      ((CreatingWindow)(window.creatingWindow)).reset();
      window.creatingWindow.dispose();
      addFormWindow.dispose();
      window.tablePane.setVisible(true);
      window.emptyTableTips.setVisible(false);
      taskTable.updateUI();
      window.setEnabled(true);
      window.setVisible(true);
    }
  }
 catch (  SocketTimeoutException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  ConnectTimeoutException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  SpiderException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
catch (  WebClientException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
  return null;
}","protected Void doInBackground() throws Exception {
  EgDownloaderWindow window=(EgDownloaderWindow)mainWindow;
  AddFormDialog addFormWindow=((AddFormDialog)window.addFormWindow);
  addFormWindow.dispose();
  window.creatingWindow.setVisible(true);
  Setting setting=window.setting;
  Task task=null;
  try {
    task=ParseEngine.buildTask(url,saveDir,setting,window.creatingWindow);
    if (task != null) {
      window.pictureDbTemplate.store(task.getPictures());
      window.taskDbTemplate.store(task);
      TaskingTable taskTable=(TaskingTable)window.runningTable;
      taskTable.getTasks().add(0,task);
      addFormWindow.emptyField();
      ((CreatingWindow)(window.creatingWindow)).reset();
      window.creatingWindow.dispose();
      addFormWindow.dispose();
      window.tablePane.setVisible(true);
      window.emptyTableTips.setVisible(false);
      taskTable.updateUI();
      window.setEnabled(true);
      window.setVisible(true);
    }
 else {
      window.creatingWindow.dispose();
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
  }
 catch (  SocketTimeoutException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  ConnectTimeoutException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  SpiderException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
catch (  WebClientException e) {
    ((CreatingWindow)(window.creatingWindow)).reset();
    window.creatingWindow.dispose();
    JOptionPane.showMessageDialog(null,e.getMessage());
  }
  return null;
}",0.8908174692049272
81671,"protected Void doInBackground() throws Exception {
  task.setStatus(TaskStatus.STARTED);
  List<Picture> pics=task.getPictures();
  Picture pic;
  Setting setting=((EgDownloaderWindow)mainWindow).setting;
  JTable table=((EgDownloaderWindow)mainWindow).runningTable;
  InputStream is;
  if (pics.size() != 0) {
    for (int i=0; i < pics.size(); i++) {
      pic=pics.get(i);
      if (pic.getUrl() != null && !pic.isRunning() && !pic.isCompleted()) {
        try {
          if (this.isCancelled())           return null;
          pic.setRealUrl(ParseEngine.getdownloadUrl(pic.getUrl(),setting));
          if (this.isCancelled())           return null;
          is=WebClient.getStreamUseJava(pic.getRealUrl());
          if (this.isCancelled())           return null;
          int size=is.available();
          if (size < 1000) {
            pic.setRealUrl(null);
            System.out.println(pic.getName() + ""String_Node_Str"");
            continue;
          }
          size=FileUtil.storeStream(task.getSaveDir(),pic.getName(),is);
          if (this.isCancelled())           return null;
          pic.setSize(size);
          pic.setTime(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
          pic.setCompleted(true);
          task.setCurrent(task.getCurrent() + 1);
          if (this.isCancelled())           return null;
          ((EgDownloaderWindow)mainWindow).pictureDbTemplate.update(pic);
          table.updateUI();
          Tracker.println(DownloadWorker.class,task.getName() + ""String_Node_Str"" + pic.getName()+ ""String_Node_Str"");
        }
 catch (        SocketTimeoutException e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
catch (        ConnectTimeoutException e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
catch (        Exception e) {
          System.out.println(e.getMessage());
          continue;
        }
      }
    }
  }
  if (task.getCurrent() < pics.size()) {
    if (this.isCancelled())     return null;
    doInBackground();
  }
 else {
    task.setStatus(TaskStatus.COMPLETED);
    ((EgDownloaderWindow)mainWindow).taskDbTemplate.update(task);
  }
  return null;
}","protected Void doInBackground() throws Exception {
  task.setStatus(TaskStatus.STARTED);
  List<Picture> pics=task.getPictures();
  Picture pic;
  Setting setting=((EgDownloaderWindow)mainWindow).setting;
  JTable table=((EgDownloaderWindow)mainWindow).runningTable;
  InputStream is;
  if (pics.size() != 0) {
    for (int i=0; i < pics.size(); i++) {
      pic=pics.get(i);
      if (pic.getUrl() != null && !pic.isRunning() && !pic.isCompleted()) {
        try {
          if (this.isCancelled())           return null;
          pic.setRealUrl(ParseEngine.getdownloadUrl(pic.getUrl(),setting));
          if (this.isCancelled())           return null;
          is=WebClient.getStreamUseJava(pic.getRealUrl());
          if (this.isCancelled())           return null;
          int size=is.available();
          if (size < 1000) {
            pic.setRealUrl(null);
            System.out.println(pic.getName() + ""String_Node_Str"");
            is.close();
            continue;
          }
 else           if (size < 1010) {
            pic.setRealUrl(null);
            System.out.println(pic.getName() + ""String_Node_Str"");
            is.close();
            continue;
          }
          size=FileUtil.storeStream(task.getSaveDir(),pic.getName(),is);
          if (this.isCancelled())           return null;
          pic.setSize(size);
          pic.setTime(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
          pic.setCompleted(true);
          task.setCurrent(task.getCurrent() + 1);
          if (this.isCancelled())           return null;
          ((EgDownloaderWindow)mainWindow).pictureDbTemplate.update(pic);
          table.updateUI();
          Tracker.println(DownloadWorker.class,task.getName() + ""String_Node_Str"" + pic.getName()+ ""String_Node_Str"");
        }
 catch (        SocketTimeoutException e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
catch (        ConnectTimeoutException e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
catch (        Exception e) {
          System.out.println(e.getMessage());
          continue;
        }
      }
    }
  }
  if (task.getCurrent() < pics.size()) {
    if (this.isCancelled())     return null;
    doInBackground();
  }
 else {
    task.setStatus(TaskStatus.COMPLETED);
    ((EgDownloaderWindow)mainWindow).taskDbTemplate.update(task);
  }
  return null;
}",0.9528546712802768
81672,"public static Task buildTask_new(String url,String saveDir,Setting setting,JDialog window) throws SpiderException, WebClientException, ConnectTimeoutException, SocketTimeoutException {
  CreatingWindow creatingWindow=(CreatingWindow)window;
  Task task=new Task(url,saveDir);
  task.setId(UUID.randomUUID().toString());
  String host=url.substring(0,url.indexOf(setting.getGidPrefix()));
  System.out.println(""String_Node_Str"" + host);
  String gid=Spider.substring(url,setting.getGidPrefix()).substring(0,Spider.substring(url,setting.getGidPrefix()).indexOf(""String_Node_Str""));
  String t=Spider.substring(url,gid + ""String_Node_Str"").substring(0,Spider.substring(url,gid + ""String_Node_Str"").length()).replaceAll(""String_Node_Str"",""String_Node_Str"");
  String hentaiHomeUrl=host + ""String_Node_Str"" + setting.getHentaiHome().getUri()+ ""String_Node_Str""+ setting.getHentaiHome().getFirstParameterName()+ ""String_Node_Str""+ gid+ ""String_Node_Str""+ setting.getHentaiHome().getSecondParameterName()+ ""String_Node_Str""+ t;
  System.out.println(""String_Node_Str"" + hentaiHomeUrl);
  String hentaiHomeSource=WebClient.postRequestWithCookie(hentaiHomeUrl,setting.getCookieInfo());
  String total_=Spider.getTextFromSource(hentaiHomeSource,setting.getTotalPrefix(),""String_Node_Str"");
  System.out.println(""String_Node_Str"" + total_);
  String name=Spider.getTextFromSource(hentaiHomeSource,setting.getNamePrefix(),""String_Node_Str"");
  System.out.println(""String_Node_Str"" + name);
  creatingWindow.nameLabel.setText(creatingWindow.nameLabel.getText() + name);
  creatingWindow.totalLabel.setText(creatingWindow.totalLabel.getText() + total_);
  creatingWindow.nameLabel.setVisible(true);
  creatingWindow.totalLabel.setVisible(true);
  String fileList=Spider.getTextFromSource(hentaiHomeSource,setting.getFileListPrefix(),setting.getFileListSuffix());
  int total=Integer.parseInt(total_.trim());
  creatingWindow.bar.setMaximum(total);
  task.setTotal(total);
  List<Picture> pictures=getPictures_new(host,setting,gid,fileList.trim(),task,creatingWindow);
  if (pictures.size() == 0) {
    pictures=getPictures(task,fileList,total);
  }
  task.setName(name);
  task.setSaveDir(saveDir + ""String_Node_Str"" + name);
  task.setPictures(pictures);
  return task;
}","public static Task buildTask_new(String url,String saveDir,Setting setting,JDialog window) throws SpiderException, WebClientException, ConnectTimeoutException, SocketTimeoutException {
  CreatingWindow creatingWindow=(CreatingWindow)window;
  Task task=new Task(url,saveDir);
  task.setId(UUID.randomUUID().toString());
  String host=url.substring(0,url.indexOf(setting.getGidPrefix()));
  System.out.println(""String_Node_Str"" + host);
  String gid=Spider.substring(url,setting.getGidPrefix()).substring(0,Spider.substring(url,setting.getGidPrefix()).indexOf(""String_Node_Str""));
  String t=Spider.substring(url,gid + ""String_Node_Str"").substring(0,Spider.substring(url,gid + ""String_Node_Str"").length()).replaceAll(""String_Node_Str"",""String_Node_Str"");
  String hentaiHomeUrl=host + ""String_Node_Str"" + setting.getHentaiHome().getUri()+ ""String_Node_Str""+ setting.getHentaiHome().getFirstParameterName()+ ""String_Node_Str""+ gid+ ""String_Node_Str""+ setting.getHentaiHome().getSecondParameterName()+ ""String_Node_Str""+ t;
  System.out.println(""String_Node_Str"" + hentaiHomeUrl);
  String hentaiHomeSource=WebClient.postRequestWithCookie(hentaiHomeUrl,setting.getCookieInfo());
  String total_=Spider.getTextFromSource(hentaiHomeSource,setting.getTotalPrefix(),""String_Node_Str"");
  System.out.println(""String_Node_Str"" + total_);
  String name=Spider.getTextFromSource(hentaiHomeSource,setting.getNamePrefix(),""String_Node_Str"");
  System.out.println(""String_Node_Str"" + name);
  creatingWindow.nameLabel.setText(creatingWindow.nameLabel.getText() + name);
  creatingWindow.totalLabel.setText(creatingWindow.totalLabel.getText() + total_);
  creatingWindow.nameLabel.setVisible(true);
  creatingWindow.totalLabel.setVisible(true);
  String fileList=Spider.getTextFromSource(hentaiHomeSource,setting.getFileListPrefix(),setting.getFileListSuffix());
  int total=Integer.parseInt(total_.trim());
  creatingWindow.bar.setMaximum(total);
  task.setTotal(total);
  List<Picture> pictures=getPictures_new(host,setting,gid,fileList.trim(),task,creatingWindow);
  if (pictures.size() == 0) {
    pictures=getPictures(task,fileList,total);
    setPicturesUrl(url,pictures,setting,creatingWindow);
  }
  task.setName(name);
  task.setSaveDir(saveDir + ""String_Node_Str"" + name);
  task.setPictures(pictures);
  return task;
}",0.9875300809450888
81673,"public void doWork(Window window,MouseEvent e){
  EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
  TaskingTable table=(TaskingTable)mainWindow.runningTable;
  int rowIndex=table.getSelectedRow();
  Task task=table.getTasks().get(rowIndex);
  if (TaskStatus.UNSTARTED != task.getStatus()) {
    try {
      Desktop.getDesktop().open(new File(task.getSaveDir()));
    }
 catch (    IOException e1) {
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
      mainWindow.tablePopupMenu.setVisible(false);
    }
  }
 else {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
  mainWindow.tablePopupMenu.setVisible(false);
}","public void doWork(Window window,MouseEvent e){
  EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
  TaskingTable table=(TaskingTable)mainWindow.runningTable;
  int rowIndex=table.getSelectedRow();
  Task task=table.getTasks().get(rowIndex);
  if (TaskStatus.UNSTARTED != task.getStatus()) {
    try {
      Desktop.getDesktop().open(new File(task.getSaveDir()));
    }
 catch (    Exception e1) {
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
      mainWindow.tablePopupMenu.setVisible(false);
    }
  }
 else {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
  mainWindow.tablePopupMenu.setVisible(false);
}",0.9984591679506932
81674,"protected Void doInBackground() throws Exception {
  EgDownloaderWindow window=(EgDownloaderWindow)mainWindow;
  AddFormDialog addFormWindow=((AddFormDialog)window.addFormWindow);
  addFormWindow.setVisible(false);
  window.creatingWindow.setVisible(true);
  window.setEnabled(false);
  Setting setting=window.setting;
  Task task=null;
  try {
    task=ParseEngine.buildTask(url,saveDir,setting,window.creatingWindow);
    if (task != null) {
      window.pictureDbTemplate.store(task.pictures);
      window.taskDbTemplate.store(task);
      TaskingTable taskTable=(TaskingTable)window.runningTable;
      taskTable.getTasks().add(task);
      addFormWindow.emptyField();
      window.creatingWindow.dispose();
      addFormWindow.dispose();
      window.tablePane.setVisible(true);
      window.emptyTableTips.setVisible(false);
      taskTable.updateUI();
      window.setEnabled(true);
      window.setVisible(true);
    }
  }
 catch (  SocketTimeoutException e) {
    window.creatingWindow.dispose();
    addFormWindow.dispose();
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  ConnectTimeoutException e) {
    window.creatingWindow.dispose();
    addFormWindow.dispose();
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  SpiderException e) {
    window.creatingWindow.dispose();
    addFormWindow.dispose();
    e.printStackTrace();
  }
catch (  WebClientException e) {
    window.creatingWindow.dispose();
    addFormWindow.dispose();
    e.printStackTrace();
  }
  return null;
}","protected Void doInBackground() throws Exception {
  EgDownloaderWindow window=(EgDownloaderWindow)mainWindow;
  AddFormDialog addFormWindow=((AddFormDialog)window.addFormWindow);
  addFormWindow.setVisible(false);
  window.creatingWindow.setVisible(true);
  window.setEnabled(false);
  Setting setting=window.setting;
  Task task=null;
  try {
    task=ParseEngine.buildTask(url,saveDir,setting,window.creatingWindow);
    if (task != null) {
      window.pictureDbTemplate.store(task.pictures);
      window.taskDbTemplate.store(task);
      TaskingTable taskTable=(TaskingTable)window.runningTable;
      taskTable.getTasks().add(task);
      addFormWindow.emptyField();
      window.creatingWindow.dispose();
      addFormWindow.dispose();
      window.tablePane.setVisible(true);
      window.emptyTableTips.setVisible(false);
      taskTable.updateUI();
      window.setEnabled(true);
      window.setVisible(true);
    }
  }
 catch (  SocketTimeoutException e) {
    window.creatingWindow.dispose();
    addFormWindow.dispose();
    window.setEnabled(true);
    window.setVisible(true);
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  ConnectTimeoutException e) {
    window.creatingWindow.dispose();
    addFormWindow.dispose();
    window.setEnabled(true);
    window.setVisible(true);
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
  }
catch (  SpiderException e) {
    window.creatingWindow.dispose();
    addFormWindow.dispose();
    window.setEnabled(true);
    window.setVisible(true);
    e.printStackTrace();
  }
catch (  WebClientException e) {
    window.creatingWindow.dispose();
    addFormWindow.dispose();
    window.setEnabled(true);
    window.setVisible(true);
    e.printStackTrace();
  }
  return null;
}",0.929739551786796
81675,public List<T> query(Object id);,"public List<T> query(String name,String value);",0.6582278481012658
81676,"public List<Picture> query(Object id){
  @SuppressWarnings(""String_Node_Str"") List<Node> nodes=dom.selectNodes(""String_Node_Str"" + id.toString() + ""String_Node_Str"");
  if (nodes != null && nodes.size() > 0) {
    List<Picture> pics=new ArrayList<Picture>();
    for (    Node node : nodes) {
      pics.add(node2Picture(node));
    }
    return pics;
  }
  return null;
}","public List<Picture> query(String name,String value){
  @SuppressWarnings(""String_Node_Str"") List<Node> nodes=dom.selectNodes(""String_Node_Str"" + name + ""String_Node_Str""+ value+ ""String_Node_Str"");
  List<Picture> pics=null;
  if (nodes != null && nodes.size() > 0) {
    pics=new ArrayList<Picture>();
    for (    Node node : nodes) {
      pics.add(node2Picture(node));
    }
  }
  return pics;
}",0.7823834196891192
81677,"public List<Task> query(Object id){
  @SuppressWarnings(""String_Node_Str"") List<Node> nodes=dom.selectNodes(""String_Node_Str"" + id.toString() + ""String_Node_Str"");
  if (nodes != null && nodes.size() > 0) {
    List<Task> tasks=new ArrayList<Task>();
    for (    Node node : nodes) {
      tasks.add(node2Task(node));
    }
    return tasks;
  }
  return null;
}","public List<Task> query(String name,String value){
  @SuppressWarnings(""String_Node_Str"") List<Node> nodes=dom.selectNodes(""String_Node_Str"" + name + ""String_Node_Str""+ value+ ""String_Node_Str"");
  List<Task> tasks=null;
  if (nodes != null && nodes.size() > 0) {
    tasks=new ArrayList<Task>();
    for (    Node node : nodes) {
      tasks.add(node2Task(node));
    }
  }
  return tasks;
}",0.7735099337748345
81678,"public String toString(){
  return ""String_Node_Str"" + url + ""String_Node_Str""+ name+ ""String_Node_Str""+ saveDir+ ""String_Node_Str""+ createTime+ ""String_Node_Str""+ completedTime+ ""String_Node_Str""+ total+ ""String_Node_Str""+ current+ ""String_Node_Str""+ size+ ""String_Node_Str""+ status+ ""String_Node_Str""+ pictures+ ""String_Node_Str"";
}","public String toString(){
  return ""String_Node_Str"" + id + ""String_Node_Str""+ url+ ""String_Node_Str""+ name+ ""String_Node_Str""+ saveDir+ ""String_Node_Str""+ createTime+ ""String_Node_Str""+ completedTime+ ""String_Node_Str""+ total+ ""String_Node_Str""+ current+ ""String_Node_Str""+ size+ ""String_Node_Str""+ status+ ""String_Node_Str""+ downloadWorker+ ""String_Node_Str""+ pictures+ ""String_Node_Str"";
}",0.9090909090909092
81679,"public static void main(String[] args){
  for (int i=0; i < FontConst.DEFAULT_FONT.length; i++)   UIManager.put(FontConst.DEFAULT_FONT[i],new Font(""String_Node_Str"",Font.BOLD,12));
  try {
    BeautyEyeLNFHelper.frameBorderStyle=BeautyEyeLNFHelper.FrameBorderStyle.generalNoTranslucencyShadow;
    BeautyEyeLNFHelper.launchBeautyEyeLNF();
    UIManager.put(""String_Node_Str"",false);
  }
 catch (  Exception e) {
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      new InitWindow();
    }
  }
);
}","public static void main(String[] args){
  for (int i=0; i < FontConst.DEFAULT_FONT.length; i++)   UIManager.put(FontConst.DEFAULT_FONT[i],new Font(""String_Node_Str"",Font.BOLD,12));
  try {
    BeautyEyeLNFHelper.frameBorderStyle=BeautyEyeLNFHelper.FrameBorderStyle.generalNoTranslucencyShadow;
    BeautyEyeLNFHelper.launchBeautyEyeLNF();
    UIManager.put(""String_Node_Str"",false);
  }
 catch (  Exception e) {
  }
  new InitWindow();
}",0.8779979144942649
81680,"public InitWindow(){
  super(Version.NAME + ""String_Node_Str"");
  this.setSize(300,100);
  this.setResizable(false);
  this.setLocationRelativeTo(null);
  this.setUndecorated(true);
  this.getContentPane().setLayout(null);
  this.setDefaultCloseOperation(EXIT_ON_CLOSE);
  textLabel=new AJLabel(""String_Node_Str"",new Color(123,23,89),0,10,300,30);
  textLabel.setHorizontalAlignment(JLabel.CENTER);
  this.getContentPane().add(textLabel);
  this.setVisible(true);
  textLabel.setForeground(new Color(123,23,89));
  textLabel.setText(""String_Node_Str"");
  File data_path=new File(ComponentConst.DATA_PATH);
  if (!data_path.exists()) {
    data_path.mkdirs();
  }
  List<Setting> settings=Db4oTemplate.query(Setting.class,ComponentConst.SETTING_DATA_PATH);
  Setting setting=settings.size() > 0 ? settings.get(0) : new Setting();
  textLabel.setForeground(new Color(123,23,89));
  textLabel.setText(""String_Node_Str"");
  DbTemplate<Task> taskDbTemplate=new TaskDom4jDbTemplate();
  DbTemplate<Picture> pictureDbTemplate=new PictureDom4jDbTemplate();
  List<Task> tasks=taskDbTemplate.query();
  if (tasks != null) {
    for (    Task task : tasks) {
      task.pictures=pictureDbTemplate.query();
    }
  }
  JFrame egDownloaderWindow=new EgDownloaderWindow(setting,tasks,taskDbTemplate,pictureDbTemplate);
  textLabel.setText(""String_Node_Str"");
  egDownloaderWindow.setVisible(true);
  this.dispose();
}","public InitWindow(){
  super(Version.NAME + ""String_Node_Str"");
  this.setSize(300,100);
  this.setResizable(false);
  this.setLocationRelativeTo(null);
  this.setUndecorated(true);
  this.getContentPane().setLayout(null);
  this.setDefaultCloseOperation(EXIT_ON_CLOSE);
  textLabel=new AJLabel(""String_Node_Str"",new Color(123,23,89),0,10,300,30);
  textLabel.setHorizontalAlignment(JLabel.CENTER);
  this.getContentPane().add(textLabel);
  this.setVisible(true);
  textLabel.setForeground(new Color(123,23,89));
  textLabel.setText(""String_Node_Str"");
  File data_path=new File(ComponentConst.DATA_PATH);
  if (!data_path.exists()) {
    data_path.mkdirs();
  }
  List<Setting> settings=Db4oTemplate.query(Setting.class,ComponentConst.SETTING_DATA_PATH);
  Setting setting=settings.size() > 0 ? settings.get(0) : new Setting();
  textLabel.setForeground(new Color(123,23,89));
  textLabel.setText(""String_Node_Str"");
  DbTemplate<Task> taskDbTemplate=new TaskDom4jDbTemplate();
  DbTemplate<Picture> pictureDbTemplate=new PictureDom4jDbTemplate();
  List<Task> tasks=taskDbTemplate.query();
  if (tasks != null) {
    for (    Task task : tasks) {
      task.pictures=pictureDbTemplate.query(""String_Node_Str"",task.getId());
    }
  }
  JFrame egDownloaderWindow=new EgDownloaderWindow(setting,tasks,taskDbTemplate,pictureDbTemplate);
  textLabel.setText(""String_Node_Str"");
  egDownloaderWindow.setVisible(true);
  this.dispose();
}",0.9894291754756872
81681,"public void doWork(Window window,MouseEvent e){
  EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
  TaskingTable table=(TaskingTable)mainWindow.runningTable;
  int[] rows=table.getSelectedRows();
  if (rows.length == 0) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
  int option=JOptionPane.showConfirmDialog(null,""String_Node_Str"" + (rows.length > 1 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  if (option == 0) {
    Task task;
    for (int i=0; i < rows.length; i++) {
      if (table.getTasks().size() >= (rows[i] - i)) {
        task=table.getTasks().get(rows[i] - i);
        System.out.println(""String_Node_Str"" + task.getName());
        if (task.pictures != null && task.pictures.size() > 0) {
          for (          Picture pic : task.pictures) {
            mainWindow.pictureDbTemplate.delete(pic);
          }
        }
        mainWindow.taskDbTemplate.delete(task);
        table.getTasks().remove(rows[i] - i);
      }
    }
    table.clearSelection();
    table.updateUI();
    if (table.getTasks().size() == 0) {
      mainWindow.tablePane.setVisible(false);
      mainWindow.emptyTableTips.setVisible(true);
    }
    mainWindow.setVisible(true);
  }
}","public void doWork(Window window,MouseEvent e){
  EgDownloaderWindow mainWindow=(EgDownloaderWindow)window;
  TaskingTable table=(TaskingTable)mainWindow.runningTable;
  int[] rows=table.getSelectedRows();
  if (rows.length == 0) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
  int option=JOptionPane.showConfirmDialog(null,""String_Node_Str"" + (rows.length > 1 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  if (option == 0) {
    Task task;
    for (int i=0; i < rows.length; i++) {
      if (table.getTasks().size() >= (rows[i] - i)) {
        task=table.getTasks().get(rows[i] - i);
        if (task.pictures != null && task.pictures.size() > 0) {
          for (          Picture pic : task.pictures) {
            mainWindow.pictureDbTemplate.delete(pic);
          }
        }
        mainWindow.taskDbTemplate.delete(task);
        table.getTasks().remove(rows[i] - i);
      }
    }
    table.clearSelection();
    table.updateUI();
    if (table.getTasks().size() == 0) {
      mainWindow.tablePane.setVisible(false);
      mainWindow.emptyTableTips.setVisible(true);
    }
    mainWindow.setVisible(true);
  }
}",0.9733777038269552
81682,"protected Void doInBackground() throws Exception {
  task.setStatus(TaskStatus.STARTED);
  List<Picture> pics=task.pictures;
  Picture pic;
  Setting setting=((EgDownloaderWindow)mainWindow).setting;
  JTable table=((EgDownloaderWindow)mainWindow).runningTable;
  InputStream is;
  if (pics.size() != 0) {
    for (int i=0; i < pics.size(); i++) {
      pic=pics.get(i);
      if (pic.getUrl() != null && !pic.isRunning() && !pic.isCompleted()) {
        try {
          if (this.isCancelled())           return null;
          if (pic.getRealUrl() == null) {
            pic.setRealUrl(ParseEngine.getdownloadUrl(pic.getUrl(),setting));
          }
          if (this.isCancelled())           return null;
          is=WebClient.getStreamUseJava(pic.getRealUrl());
          if (this.isCancelled())           return null;
          int size=is.available();
          if (size < 1000) {
            pic.setRealUrl(null);
            System.out.println(pic.getName() + ""String_Node_Str"");
            continue;
          }
          FileUtil.storeStream(task.getSaveDir() + ""String_Node_Str"",pic.getName(),is);
          if (this.isCancelled())           return null;
          pic.setSize(size);
          pic.setTime(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
          pic.setCompleted(true);
          task.setCurrent(task.getCurrent() + 1);
          if (this.isCancelled())           return null;
          ((EgDownloaderWindow)mainWindow).pictureDbTemplate.update(pic);
          table.updateUI();
          Tracker.println(DownloadWorker.class,task.getName() + ""String_Node_Str"" + pic.getName()+ ""String_Node_Str"");
        }
 catch (        SocketTimeoutException e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
catch (        ConnectTimeoutException e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
catch (        Exception e) {
          System.out.println(e.getMessage());
          continue;
        }
      }
    }
  }
  if (task.getCurrent() < pics.size()) {
    if (this.isCancelled())     return null;
    doInBackground();
  }
 else {
    task.setStatus(TaskStatus.COMPLETED);
    ((EgDownloaderWindow)mainWindow).taskDbTemplate.update(task);
  }
  return null;
}","protected Void doInBackground() throws Exception {
  task.setStatus(TaskStatus.STARTED);
  List<Picture> pics=task.pictures;
  Picture pic;
  Setting setting=((EgDownloaderWindow)mainWindow).setting;
  JTable table=((EgDownloaderWindow)mainWindow).runningTable;
  InputStream is;
  if (pics.size() != 0) {
    for (int i=0; i < pics.size(); i++) {
      pic=pics.get(i);
      if (pic.getUrl() != null && !pic.isRunning() && !pic.isCompleted()) {
        try {
          if (this.isCancelled())           return null;
          if (pic.getRealUrl() == null) {
            pic.setRealUrl(ParseEngine.getdownloadUrl(pic.getUrl(),setting));
          }
          if (this.isCancelled())           return null;
          is=WebClient.getStreamUseJava(pic.getRealUrl());
          if (this.isCancelled())           return null;
          int size=is.available();
          if (size < 1000) {
            pic.setRealUrl(null);
            System.out.println(pic.getName() + ""String_Node_Str"");
            continue;
          }
          FileUtil.storeStream(task.getSaveDir(),pic.getName(),is);
          if (this.isCancelled())           return null;
          pic.setSize(size);
          pic.setTime(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
          pic.setCompleted(true);
          task.setCurrent(task.getCurrent() + 1);
          if (this.isCancelled())           return null;
          ((EgDownloaderWindow)mainWindow).pictureDbTemplate.update(pic);
          table.updateUI();
          Tracker.println(DownloadWorker.class,task.getName() + ""String_Node_Str"" + pic.getName()+ ""String_Node_Str"");
        }
 catch (        SocketTimeoutException e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
catch (        ConnectTimeoutException e) {
          System.out.println(""String_Node_Str"");
          continue;
        }
catch (        Exception e) {
          System.out.println(e.getMessage());
          continue;
        }
      }
    }
  }
  if (task.getCurrent() < pics.size()) {
    if (this.isCancelled())     return null;
    doInBackground();
  }
 else {
    task.setStatus(TaskStatus.COMPLETED);
    ((EgDownloaderWindow)mainWindow).taskDbTemplate.update(task);
  }
  return null;
}",0.9955732625055336
81683,"protected Void doInBackground() throws Exception {
  task.setStatus(TaskStatus.STARTED);
  List<Picture> pics=task.getPictures();
  Picture pic;
  Setting setting=((EgDownloaderWindow)mainWindow).setting;
  JTable table=((EgDownloaderWindow)mainWindow).runningTable;
  InputStream is;
  if (pics.size() != 0) {
    for (int i=0; i < pics.size(); i++) {
      pic=pics.get(i);
      if (pic.getUrl() != null && !pic.isRunning() && !pic.isCompleted()) {
        try {
          if (pic.getRealUrl() == null) {
            pic.setRealUrl(ParseEngine.getdownloadUrl(pic.getUrl(),setting));
          }
          is=WebClient.getStreamUseJava(pic.getRealUrl());
          int size=is.available();
          WebClient.storeStream(task.getSaveDir() + ""String_Node_Str"",pic.getName(),is);
          pic.setSize(size);
          pic.setTime(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
          pic.setCompleted(true);
          task.setCurrent(task.getCurrent() + 1);
          final String taskUrl=task.getUrl();
          Db4oTemplate.update(new Predicate<Task>(){
            public boolean match(            Task task){
              return task.getUrl() == taskUrl;
            }
          }
,task,ComponentConst.TASK_DATA_PATH);
          table.updateUI();
        }
 catch (        Exception e) {
          System.out.println(e.getMessage());
          continue;
        }
      }
    }
  }
  if (task.getCurrent() < pics.size()) {
    doInBackground();
  }
 else {
    task.setStatus(TaskStatus.COMPLETED);
  }
  return null;
}","protected Void doInBackground() throws Exception {
  task.setStatus(TaskStatus.STARTED);
  List<Picture> pics=task.getPictures();
  Picture pic;
  Setting setting=((EgDownloaderWindow)mainWindow).setting;
  JTable table=((EgDownloaderWindow)mainWindow).runningTable;
  InputStream is;
  if (pics.size() != 0) {
    for (int i=0; i < pics.size(); i++) {
      pic=pics.get(i);
      if (pic.getUrl() != null && !pic.isRunning() && !pic.isCompleted()) {
        try {
          if (pic.getRealUrl() == null) {
            pic.setRealUrl(ParseEngine.getdownloadUrl(pic.getUrl(),setting));
          }
          is=WebClient.getStreamUseJava(pic.getRealUrl());
          int size=is.available();
          WebClient.storeStream(task.getSaveDir() + ""String_Node_Str"",pic.getName(),is);
          pic.setSize(size);
          pic.setTime(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
          pic.setCompleted(true);
          task.setCurrent(task.getCurrent() + 1);
          final String taskUrl=task.getUrl();
          Db4oTemplate.update(new Predicate<Task>(){
            public boolean match(            Task task){
              return task.getUrl().equals(taskUrl);
            }
          }
,task,ComponentConst.TASK_DATA_PATH);
          table.updateUI();
        }
 catch (        Exception e) {
          System.out.println(e.getMessage());
          continue;
        }
      }
    }
  }
  if (task.getCurrent() < pics.size()) {
    doInBackground();
  }
 else {
    task.setStatus(TaskStatus.COMPLETED);
  }
  return null;
}",0.9957969608794052
81684,"public boolean match(Task task){
  return task.getUrl() == taskUrl;
}","public boolean match(Task task){
  return task.getUrl().equals(taskUrl);
}",0.9090909090909092
81685,"/** 
 * Extracts the query string from the request.
 * @param httpRequest current HTTP request
 * @return query string from the request
 */
public static Map<String,List<String>> extractQueryString(final Http.Request httpRequest){
  return httpRequest.queryString().entrySet().stream().collect(toMap(Map.Entry::getKey,entry -> asList(entry.getValue())));
}","/** 
 * Extracts the query string from the request.
 * @param httpRequest current HTTP request
 * @param ignoredParams params that should not be included in the link
 * @return query string from the request
 */
public static Map<String,List<String>> extractQueryString(final Http.Request httpRequest,final Set<String> ignoredParams){
  return httpRequest.queryString().entrySet().stream().filter(stringEntry -> !ignoredParams.contains(stringEntry.getKey())).collect(toMap(Map.Entry::getKey,entry -> asList(entry.getValue())));
}",0.8054298642533937
81686,"@Override protected void fillValue(final FacetOptionViewModel viewModel,final TermFacetResult stats,final Category category,@Nullable final Category selectedValue){
  productReverseRouter.productOverviewPageCall(category).ifPresent(call -> {
    viewModel.setValue(buildUri(call.url(),extractQueryString(Http.Context.current().request())));
  }
);
}","@Override protected void fillValue(final FacetOptionViewModel viewModel,final TermFacetResult stats,final Category category,@Nullable final Category selectedValue){
  productReverseRouter.productOverviewPageCall(category).ifPresent(call -> {
    viewModel.setValue(buildUri(call.url(),extractQueryString(Http.Context.current().request(),IGNORED_PARAMS)));
  }
);
}",0.9789621318373072
81687,"protected void fillImageUrl(final WishlistItemViewModel viewModel,final LineItem lineItem){
  if (lineItem != null) {
    final String imageUrl=lineItem.getVariant().getImages().stream().findFirst().map(image -> image.getUrl()).orElse(null);
    viewModel.setImageUrl(imageUrl);
  }
}","protected void fillImageUrl(final WishlistItemViewModel viewModel,final LineItem lineItem){
  if (lineItem != null && lineItem.getVariant() != null) {
    final String imageUrl=lineItem.getVariant().getImages().stream().findFirst().map(image -> image.getUrl()).orElse(null);
    viewModel.setImageUrl(imageUrl);
  }
}",0.9450915141430948
81688,"private List<Reference<Payment>> findPaymentsToRemove(final Cart cart,final Payment payment){
  return Optional.ofNullable(cart.getPaymentInfo()).map(paymentInfo -> paymentInfo.getPayments().stream().filter(paymentRef -> !paymentRef.referencesSameResource(payment)).collect(toList())).orElseGet(() -> {
    LOGGER.warn(""String_Node_Str"");
    return emptyList();
  }
);
}","private List<Payment> findPaymentsToRemove(final Cart cart,final Payment payment){
  return Optional.ofNullable(cart.getPaymentInfo()).map(paymentInfo -> {
    if (!hasReferencesExpanded(paymentInfo)) {
      LOGGER.warn(""String_Node_Str"");
    }
    return paymentInfo.getPayments().stream().filter(paymentRef -> !paymentRef.referencesSameResource(payment)).map(Reference::getObj).filter(Objects::nonNull).collect(toList());
  }
).orElseGet(Collections::emptyList);
}",0.5506555423122765
81689,"private CompletionStage<Cart> deletePreviousPayments(final Cart cart,final Payment payment){
  final List<CompletionStage<Payment>> paymentStages=findPaymentsToRemove(cart,payment).stream().map(paymentRef -> getSphereClient().execute(PaymentByIdGet.of(paymentRef))).collect(toList());
  return CompletableFutureUtils.listOfFuturesToFutureOfList(paymentStages).thenComposeAsync(payments -> {
    payments.removeIf(Objects::isNull);
    return removePaymentsFormCart(cart,payments).thenApply(updatedCart -> {
      payments.forEach(paymentToDelete -> getSphereClient().execute(PaymentDeleteCommand.of(paymentToDelete)));
      return updatedCart;
    }
);
  }
);
}","private CompletionStage<Cart> deletePreviousPayments(final Cart cart,final Payment payment){
  final List<Payment> paymentsToRemove=findPaymentsToRemove(cart,payment);
  return removePaymentsFormCart(cart,paymentsToRemove).thenApply(updatedCart -> {
    paymentsToRemove.forEach(paymentToRemove -> getSphereClient().execute(PaymentDeleteCommand.of(paymentToRemove)));
    return updatedCart;
  }
);
}",0.3446327683615819
81690,"protected final CompletableFuture<CustomerSignInResult> resultOrRecoverIfMergingCartFailed(final CompletionStage<CustomerSignInResult> resultStage,final LogInFormData formData){
  return recoverWith(resultStage,throwable -> {
    if (isInvalidOperationError(throwable.getCause())) {
      LOGGER.warn(""String_Node_Str"");
      return executeRequest(CustomerSignInCommand.of(formData.username(),formData.password()));
    }
    return exceptionallyCompletedFuture(throwable);
  }
);
}","protected final CompletableFuture<CustomerSignInResult> resultOrRecoverIfMergingCartFailed(final CompletionStage<CustomerSignInResult> resultStage,final LogInFormData formData){
  return recoverWith(resultStage,throwable -> {
    if (isInvalidInputError(throwable.getCause())) {
      LOGGER.warn(""String_Node_Str"",throwable);
      return signInWithoutCart(formData);
    }
 else     if (isInvalidOperationError(throwable.getCause())) {
      LOGGER.warn(""String_Node_Str"",throwable);
      return signInWithoutCart(formData);
    }
    return exceptionallyCompletedFuture(throwable);
  }
,HttpExecution.defaultContext());
}",0.7310469314079422
81691,"@Provides public Http.Context httpContext(){
  return Http.Context.current();
}","@Provides public Http.Context httpContext(){
  final Http.Context context=Http.Context.current.get();
  if (context != null) {
    return context;
  }
 else {
    return new Http.Context(new Http.RequestBuilder());
  }
}",0.354515050167224
81692,"@Inject UserLanguageImpl(final Locale locale,final Http.Request request,final ProjectContext projectContext){
  this.locale=locale;
  this.locales=acceptedLocales(locale,request,projectContext);
  LOGGER.debug(""String_Node_Str"",locale,locales);
}","@Inject UserLanguageImpl(final Locale locale,final Http.Context httpContext,final ProjectContext projectContext){
  this.locale=locale;
  this.locales=acceptedLocales(locale,httpContext.request(),projectContext);
  LOGGER.debug(""String_Node_Str"",locale,locales);
}",0.5137254901960784
81693,"@Inject public SliderRangeFacetViewModelFactory(final I18nIdentifierResolver i18nIdentifierResolver,final Http.Request httpRequest,final SliderRangeEndpointViewModelFactory sliderRangeEndpointViewModelFactory){
  super(i18nIdentifierResolver);
  this.httpRequest=httpRequest;
  this.sliderRangeEndpointViewModelFactory=sliderRangeEndpointViewModelFactory;
}","@Inject public SliderRangeFacetViewModelFactory(final I18nIdentifierResolver i18nIdentifierResolver,final Http.Context httpContext,final SliderRangeEndpointViewModelFactory sliderRangeEndpointViewModelFactory){
  super(i18nIdentifierResolver);
  this.httpRequest=httpContext.request();
  this.sliderRangeEndpointViewModelFactory=sliderRangeEndpointViewModelFactory;
}",0.9337016574585636
81694,"@Inject public CacheableObjectStoringSessionCookieStrategy(final Http.Session session,final CacheApi cacheApi,final Configuration configuration){
  super(session);
  this.cacheApi=cacheApi;
  this.sessionIdKey=configuration.getString(""String_Node_Str"",DEFAULT_SESSION_ID_KEY);
}","@Inject public CacheableObjectStoringSessionCookieStrategy(final Http.Context httpContext,final CacheApi cacheApi,final Configuration configuration){
  super(httpContext);
  this.cacheApi=cacheApi;
  this.sessionIdKey=configuration.getString(""String_Node_Str"",DEFAULT_SESSION_ID_KEY);
}",0.9078014184397164
81695,"@Inject public SerializableObjectStoringSessionCookieStrategy(final Http.Session session){
  super(session);
}","@Inject public SerializableObjectStoringSessionCookieStrategy(final Http.Context httpContext){
  super(httpContext);
}",0.8333333333333334
81696,"@Inject public SessionCookieStrategy(final Http.Session session){
  this.session=session;
}","@Inject public SessionCookieStrategy(final Http.Context httpContext){
  this.session=httpContext.session();
}",0.81
81697,"@Inject public CategoryTreeFacetOptionViewModelFactory(final UserLanguage userLanguage,final Http.Request httpRequest,final CategoryTree categoryTree,final ProductReverseRouter productReverseRouter){
  this.locales=userLanguage.locales();
  this.httpRequest=httpRequest;
  this.categoryTree=categoryTree;
  this.productReverseRouter=productReverseRouter;
}","@Inject public CategoryTreeFacetOptionViewModelFactory(final UserLanguage userLanguage,final Http.Context httpContext,final CategoryTree categoryTree,final ProductReverseRouter productReverseRouter){
  this.locales=userLanguage.locales();
  this.httpRequest=httpContext.request();
  this.categoryTree=categoryTree;
  this.productReverseRouter=productReverseRouter;
}",0.9335180055401662
81698,"@Inject public ProductOverviewPageContentFactory(final Locale locale,final Http.Request httpRequest,final CategoryBreadcrumbViewModelFactory categoryBreadcrumbViewModelFactory,final ProductListViewModelFactory productListViewModelFactory,final BannerViewModelFactory bannerViewModelFactory,final JumbotronViewModelFactory jumbotronViewModelFactory,final SeoViewModelFactory seoViewModelFactory){
  this.locale=locale;
  this.httpRequest=httpRequest;
  this.categoryBreadcrumbViewModelFactory=categoryBreadcrumbViewModelFactory;
  this.productListViewModelFactory=productListViewModelFactory;
  this.bannerViewModelFactory=bannerViewModelFactory;
  this.jumbotronViewModelFactory=jumbotronViewModelFactory;
  this.seoViewModelFactory=seoViewModelFactory;
}","@Inject public ProductOverviewPageContentFactory(final Locale locale,final Http.Context httpContext,final CategoryBreadcrumbViewModelFactory categoryBreadcrumbViewModelFactory,final ProductListViewModelFactory productListViewModelFactory,final BannerViewModelFactory bannerViewModelFactory,final JumbotronViewModelFactory jumbotronViewModelFactory,final SeoViewModelFactory seoViewModelFactory){
  this.locale=locale;
  this.httpRequest=httpContext.request();
  this.categoryBreadcrumbViewModelFactory=categoryBreadcrumbViewModelFactory;
  this.productListViewModelFactory=productListViewModelFactory;
  this.bannerViewModelFactory=bannerViewModelFactory;
  this.jumbotronViewModelFactory=jumbotronViewModelFactory;
  this.seoViewModelFactory=seoViewModelFactory;
}",0.9763157894736842
81699,"/** 
 * Gets products from the same categories as the given product, excluding the product itself, up to   {@code numProducts}. Most expensive products first.
 * @param product the product to get suggestions for
 * @param numProducts the number of products the returned set should contain
 * @return the products related to this product
 */
@Override public CompletionStage<Set<ProductProjection>> relatedToProduct(final ProductProjection product,final int numProducts){
  final Set<String> categoryIds=product.getCategories().stream().map(Reference::getId).collect(toSet());
  return productsFromCategoryIds(categoryIds,numProducts + 1).thenApply(products -> products.stream().filter(p -> !p.getId().equals(product.getId())).limit(numProducts).collect(toSet()));
}","/** 
 * Gets products from the same categories as the given product, excluding the product itself, up to   {@code numProducts}. Most expensive products first.
 * @param product the product to get suggestions for
 * @param numProducts the number of products the returned set should contain
 * @return the products related to this product
 */
@Override public CompletionStage<Set<ProductProjection>> relatedToProduct(final ProductProjection product,final int numProducts){
  final Set<String> categoryIds=product.getCategories().stream().map(Reference::getId).collect(toSet());
  if (categoryIds.isEmpty()) {
    return CompletableFuture.completedFuture(emptySet());
  }
 else {
    return productsFromCategoryIds(categoryIds,numProducts + 1).thenApply(products -> products.stream().filter(p -> !p.getId().equals(product.getId())).limit(numProducts).collect(toSet()));
  }
}",0.9077580940745266
81700,"@Inject public ReflectionWebJarAssetsReverseRouter(final ParsedRoutes parsedRoutes){
  final boolean routeIsPresent=parsedRoutes.getRoutes().stream().filter(p -> ""String_Node_Str"".equals(p.getRouteDocumentation().getControllerMethodInvocation())).findFirst().map(p -> p).isPresent();
  if (routeIsPresent) {
    try {
      final Class<?> routesClass=Class.forName(""String_Node_Str"");
      final Class<?> reverseControllerClass=Class.forName(""String_Node_Str"");
      final Field field=routesClass.getField(""String_Node_Str"");
      final Object o=field.get(null);
      final Method reverseRouteMethod=reverseControllerClass.getMethod(""String_Node_Str"",new Class<?>[]{String.class});
      reverseCaller=new ReflectionReverseCaller(reverseRouteMethod,o);
    }
 catch (    ClassNotFoundException|NoSuchFieldException|IllegalAccessException|NoSuchMethodException e) {
      throw new CompletionException(e);
    }
  }
 else {
    throw new CompletionException(new RuntimeException(""String_Node_Str""));
  }
}","@Inject public ReflectionWebJarAssetsReverseRouter(final ParsedRoutes parsedRoutes){
  final boolean routeIsPresent=parsedRoutes.getRoutes().stream().filter(p -> ""String_Node_Str"".equals(p.getRouteDocumentation().getControllerMethodInvocation())).findFirst().map(p -> p).isPresent();
  if (routeIsPresent) {
    try {
      final Class<?> routesClass=getClassByName(""String_Node_Str"");
      final Class<?> reverseControllerClass=getClassByName(""String_Node_Str"");
      final Field field=routesClass.getField(""String_Node_Str"");
      final Object o=field.get(null);
      final Method reverseRouteMethod=reverseControllerClass.getMethod(""String_Node_Str"",new Class<?>[]{String.class});
      reverseCaller=new ReflectionReverseCaller(reverseRouteMethod,o);
    }
 catch (    ClassNotFoundException|NoSuchFieldException|IllegalAccessException|NoSuchMethodException e) {
      throw new CompletionException(e);
    }
  }
 else {
    throw new CompletionException(new RuntimeException(""String_Node_Str""));
  }
}",0.981169474727453
81701,"private ParsedRoute parse(final Router.RouteDocumentation rd){
  final ParsedRoute parsedRoute=new ParsedRoute();
  parsedRoute.setRouteDocumentation(rd);
  if (countMatches(rd.getControllerMethodInvocation(),'@') == 2) {
    final String s=StringUtils.removeStart(rd.getControllerMethodInvocation(),""String_Node_Str"");
    final String controllerClassName=s.substring(0,s.indexOf(""String_Node_Str""));
    try {
      final Class<?> clazz=Class.forName(controllerClassName);
      parsedRoute.setControllerClass(clazz);
    }
 catch (    ClassNotFoundException e) {
      throw new CompletionException(e);
    }
  }
  return parsedRoute;
}","private ParsedRoute parse(final Router.RouteDocumentation rd){
  final ParsedRoute parsedRoute=new ParsedRoute();
  parsedRoute.setRouteDocumentation(rd);
  if (countMatches(rd.getControllerMethodInvocation(),'@') == 2) {
    final String s=StringUtils.removeStart(rd.getControllerMethodInvocation(),""String_Node_Str"");
    final String controllerClassName=s.substring(0,s.indexOf(""String_Node_Str""));
    try {
      final Class<?> clazz=getClassByName(controllerClassName);
      parsedRoute.setControllerClass(clazz);
    }
 catch (    ClassNotFoundException e) {
      throw new CompletionException(e);
    }
  }
  return parsedRoute;
}",0.9851446442533228
81702,"private Optional<Pair<Object,Method>> createPair(final Method controllerMethod,final Class<?> controllerClass){
  try {
    final String packageName=controllerClass.getPackage().getName();
    final Class<?> reverseRouter=Class.forName(packageName + ""String_Node_Str"");
    final Field field=reverseRouter.getField(controllerClass.getSimpleName());
    final Object o=field.get(null);
    final Method reverseRouteMethod=o.getClass().getMethod(controllerMethod.getName(),controllerMethod.getParameterTypes());
    return Optional.ofNullable(ImmutablePair.of(o,reverseRouteMethod));
  }
 catch (  final NoSuchMethodException e) {
    return Optional.empty();
  }
catch (  final Exception e) {
    throw new CompletionException(e);
  }
}","private Optional<Pair<Object,Method>> createPair(final Method controllerMethod,final Class<?> controllerClass){
  try {
    final String packageName=controllerClass.getPackage().getName();
    final Class<?> reverseRouter=getClassByName(packageName + ""String_Node_Str"");
    final Field field=reverseRouter.getField(controllerClass.getSimpleName());
    final Object o=field.get(null);
    final Method reverseRouteMethod=o.getClass().getMethod(controllerMethod.getName(),controllerMethod.getParameterTypes());
    return Optional.ofNullable(ImmutablePair.of(o,reverseRouteMethod));
  }
 catch (  final NoSuchMethodException e) {
    return Optional.empty();
  }
catch (  final Exception e) {
    throw new CompletionException(e);
  }
}",0.9938817131203264
81703,"@Override public SphereClient get(){
  final MetricHttpClient metricHttpClient=MetricHttpClient.of(httpClient,context);
  logger.info(""String_Node_Str"");
  final SphereClient sphereClient=SphereClient.of(sphereClientConfig,metricHttpClient,sphereAccessTokenSupplier);
  applicationLifecycle.addStopHook(() -> {
    sphereClient.close();
    return completedFuture(null);
  }
);
  return sphereClient;
}","@Override public SphereClient get(){
  final MetricHttpClient metricHttpClient=MetricHttpClient.of(httpClient,context);
  logger.info(""String_Node_Str"");
  return SphereClient.of(sphereClientConfig,metricHttpClient,sphereAccessTokenSupplier);
}",0.7337461300309598
81704,"protected CompletionStage<Cart> withPaymentsToRemove(final Cart cart,final List<PaymentMethodInfo> selectedPaymentMethods,final Function<List<Payment>,CompletionStage<Cart>> setPaymentAction){
  final List<Reference<Payment>> paymentRefs=Optional.ofNullable(cart.getPaymentInfo()).map(PaymentInfo::getPayments).orElseGet(() -> {
    Logger.error(""String_Node_Str"");
    return emptyList();
  }
);
  final List<CompletionStage<Payment>> paymentStages=paymentRefs.stream().map(paymentRef -> sphere().execute(PaymentByIdGet.of(paymentRef))).collect(toList());
  return CompletableFutureUtils.listOfFuturesToFutureOfList(paymentStages).thenComposeAsync(payments -> {
    payments.removeIf(Objects::isNull);
    final CompletionStage<Cart> updatedCartStage=setPaymentAction.apply(payments);
    updatedCartStage.thenAccept(updatedCart -> payments.forEach(payment -> sphere().execute(PaymentDeleteCommand.of(payment))));
    return updatedCartStage;
  }
);
}","protected CompletionStage<Cart> withPaymentsToRemove(final Cart cart,final List<PaymentMethodInfo> selectedPaymentMethods,final Function<List<Payment>,CompletionStage<Cart>> setPaymentAction){
  final List<Reference<Payment>> paymentRefs=Optional.ofNullable(cart.getPaymentInfo()).map(PaymentInfo::getPayments).orElseGet(() -> {
    logger.error(""String_Node_Str"");
    return emptyList();
  }
);
  final List<CompletionStage<Payment>> paymentStages=paymentRefs.stream().map(paymentRef -> sphere().execute(PaymentByIdGet.of(paymentRef))).collect(toList());
  return CompletableFutureUtils.listOfFuturesToFutureOfList(paymentStages).thenComposeAsync(payments -> {
    payments.removeIf(Objects::isNull);
    final CompletionStage<Cart> updatedCartStage=setPaymentAction.apply(payments);
    updatedCartStage.thenAccept(updatedCart -> payments.forEach(payment -> sphere().execute(PaymentDeleteCommand.of(payment))));
    return updatedCartStage;
  }
);
}",0.9989495798319328
81705,"@Inject private void setMultiControllerComponents(@Named(""String_Node_Str"") final MultiControllerComponentResolver controllersMultiComponent,final MultiControllerComponentResolver multiComponent,final Injector injector){
  addMultiComponents(controllersMultiComponent,injector);
  addMultiComponents(multiComponent,injector);
}","@Inject(optional=true) private void setMultiControllerComponents(@Nullable @Named(""String_Node_Str"") final MultiControllerComponentResolver controllersMultiComponent,final MultiControllerComponentResolver multiComponent,final Injector injector){
  if (controllersMultiComponent != null) {
    addMultiComponents(controllersMultiComponent,injector);
  }
  if (multiComponent != null) {
    addMultiComponents(multiComponent,injector);
  }
}",0.8537859007832899
81706,"protected void addMultiComponents(final MultiControllerComponentResolver multiComponent,final Injector injector){
  final List<Class<? extends ControllerComponent>> components=multiComponent.findMatchingComponents(this);
  components.forEach(clazz -> {
    final ControllerComponent instance=injector.getInstance(clazz);
    hooks().add(instance);
  }
);
}","private void addMultiComponents(final MultiControllerComponentResolver multiComponent,final Injector injector){
  final List<Class<? extends ControllerComponent>> components=multiComponent.findMatchingComponents(this);
  components.forEach(clazz -> {
    final ControllerComponent instance=injector.getInstance(clazz);
    hooks().add(instance);
  }
);
}",0.9830985915492958
81707,"private CartQuery createQueryForPrimaryCart(final Http.Session session){
  final String nullableCustomerId=CustomerSessionUtils.getCustomerId(session).orElse(null);
  final String nullableCartId=CartSessionUtils.getCartId(session).orElse(null);
  CartQuery query=CartQuery.of();
  if (nullableCustomerId != null) {
    query=query.plusPredicates(cart -> cart.customerId().is(nullableCustomerId));
  }
 else   if (nullableCartId != null) {
    query.plusPredicates(cart -> cart.id().is(nullableCartId));
  }
  query=query.plusPredicates(cart -> cart.cartState().is(CartState.ACTIVE)).plusExpansionPaths(c -> c.shippingInfo().shippingMethod()).plusExpansionPaths(c -> c.paymentInfo().payments()).withSort(cart -> cart.lastModifiedAt().sort().desc()).withLimit(1);
  query=hooks().runFilterHook(CartQueryFilterHook.class,(hook,q) -> hook.filterCartQuery(q),query);
  return query;
}","private CartQuery createQueryForPrimaryCart(final Http.Session session){
  final String nullableCustomerId=CustomerSessionUtils.getCustomerId(session).orElse(null);
  final String nullableCartId=CartSessionUtils.getCartId(session).orElse(null);
  CartQuery query=CartQuery.of();
  if (nullableCustomerId != null) {
    query=query.plusPredicates(cart -> cart.customerId().is(nullableCustomerId));
  }
 else   if (nullableCartId != null) {
    query=query.plusPredicates(cart -> cart.id().is(nullableCartId));
  }
  query=query.plusPredicates(cart -> cart.cartState().is(CartState.ACTIVE)).plusExpansionPaths(c -> c.shippingInfo().shippingMethod()).plusExpansionPaths(c -> c.paymentInfo().payments()).withSort(cart -> cart.lastModifiedAt().sort().desc()).withLimit(1);
  query=hooks().runFilterHook(CartQueryFilterHook.class,(hook,q) -> hook.filterCartQuery(q),query);
  return query;
}",0.9965986394557824
81708,"private PageMeta getPageMeta(final UserContext userContext,final Http.Context ctx){
  final PageMeta pageMeta=new PageMeta();
  pageMeta.setUser(CustomerSessionUtils.getUserBean(ctx.session()));
  pageMeta.setAssetsPath(reverseRouter.themeAssets(""String_Node_Str"").url());
  pageMeta.setBagQuantityOptions(IntStream.rangeClosed(1,9).boxed().collect(toList()));
  pageMeta.setCsrfToken(getCsrfToken(ctx.session()));
  final String language=userContext.locale().getLanguage();
  pageMeta.addHalLink(homeReverseRouter.homePageCall(language),""String_Node_Str"",""String_Node_Str"").addHalLink(reverseRouter.processSearchProductsForm(language),""String_Node_Str"").addHalLink(reverseRouter.processChangeLanguageForm(),""String_Node_Str"").addHalLink(reverseRouter.processChangeCountryForm(language),""String_Node_Str"").addHalLink(reverseRouter.showCart(language),""String_Node_Str"").addHalLink(reverseRouter.processAddProductToCartForm(language),""String_Node_Str"").addHalLink(reverseRouter.processChangeLineItemQuantityForm(language),""String_Node_Str"").addHalLink(reverseRouter.processDeleteLineItemForm(language),""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutAddressesPageCall(language),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutAddressesProcessFormCall(language),""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutShippingPageCall(language),""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutShippingProcessFormCall(language),""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutPaymentPageCall(language),""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutPaymentProcessFormCall(language),""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutConfirmationProcessFormCall(language),""String_Node_Str"").addHalLink(reverseRouter.showLogInForm(language),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").addHalLink(reverseRouter.processLogInForm(language),""String_Node_Str"").addHalLink(reverseRouter.processSignUpForm(language),""String_Node_Str"").addHalLink(reverseRouter.processLogOut(language),""String_Node_Str"").addHalLink(myPersonalDetailsReverseRouter.myPersonalDetailsPageCall(language),""String_Node_Str"",""String_Node_Str"").addHalLink(myPersonalDetailsReverseRouter.myPersonalDetailsProcessFormCall(language),""String_Node_Str"").addHalLink(addressBookReverseRouter.addressBookCall(language),""String_Node_Str"").addHalLink(addressBookReverseRouter.addAddressToAddressBookCall(language),""String_Node_Str"").addHalLink(addressBookReverseRouter.addAddressToAddressBookProcessFormCall(language),""String_Node_Str"").addHalLink(reverseRouter.showMyOrders(language),""String_Node_Str"").addHalLinkOfHrefAndRel(ctx.request().uri(),""String_Node_Str"");
  return pageMeta;
}","private PageMeta getPageMeta(final UserContext userContext,final Http.Context ctx){
  final PageMeta pageMeta=new PageMeta();
  pageMeta.setUser(CustomerSessionUtils.getUserBean(ctx.session()));
  pageMeta.setAssetsPath(reverseRouter.themeAssets(""String_Node_Str"").url());
  pageMeta.setBagQuantityOptions(IntStream.rangeClosed(1,9).boxed().collect(toList()));
  pageMeta.setCsrfToken(getCsrfToken(ctx.session()));
  final String language=userContext.locale().getLanguage();
  pageMeta.addHalLink(homeReverseRouter.homePageCall(language),""String_Node_Str"",""String_Node_Str"").addHalLink(reverseRouter.processSearchProductsForm(language),""String_Node_Str"").addHalLink(reverseRouter.processChangeLanguageForm(),""String_Node_Str"").addHalLink(reverseRouter.processChangeCountryForm(language),""String_Node_Str"").addHalLink(reverseRouter.showCart(language),""String_Node_Str"").addHalLink(reverseRouter.processAddProductToCartForm(language),""String_Node_Str"").addHalLink(reverseRouter.processChangeLineItemQuantityForm(language),""String_Node_Str"").addHalLink(reverseRouter.processDeleteLineItemForm(language),""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutAddressesPageCall(language),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutAddressesProcessFormCall(language),""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutShippingPageCall(language),""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutShippingProcessFormCall(language),""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutPaymentPageCall(language),""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutPaymentProcessFormCall(language),""String_Node_Str"").addHalLink(checkoutReverseRouter.checkoutConfirmationProcessFormCall(language),""String_Node_Str"").addHalLink(reverseRouter.showLogInForm(language),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").addHalLink(reverseRouter.processLogInForm(language),""String_Node_Str"").addHalLink(reverseRouter.processSignUpForm(language),""String_Node_Str"").addHalLink(reverseRouter.processLogOut(language),""String_Node_Str"").addHalLink(myPersonalDetailsReverseRouter.myPersonalDetailsPageCall(language),""String_Node_Str"",""String_Node_Str"").addHalLink(myPersonalDetailsReverseRouter.myPersonalDetailsProcessFormCall(language),""String_Node_Str"").addHalLink(addressBookReverseRouter.addressBookCall(language),""String_Node_Str"").addHalLink(addressBookReverseRouter.addAddressToAddressBookCall(language),""String_Node_Str"").addHalLink(addressBookReverseRouter.addAddressToAddressBookProcessFormCall(language),""String_Node_Str"").addHalLink(myOrdersReverseRouter.myOrderListPageCall(language),""String_Node_Str"").addHalLinkOfHrefAndRel(ctx.request().uri(),""String_Node_Str"");
  return pageMeta;
}",0.9904176459952992
81709,"protected CompletionStage<Result> handleInvalidForm(final Form<? extends AddProductToCartFormDataLike> form){
  flash(UserFeedback.ERROR,""String_Node_Str"");
  return successfulResult();
}","protected CompletionStage<Result> handleInvalidForm(final Form<? extends AddProductToCartFormDataLike> form){
  injector.getInstance(UserFeedback.class).addErrors(form);
  return successfulResult();
}",0.8268733850129198
81710,"protected CompletionStage<Result> handleInvalidForm(final Form<ChangeLineItemQuantityFormData> form){
  flash(UserFeedback.ERROR,""String_Node_Str"");
  return completedFuture(redirect(reverseRouter.showCart(userContext().languageTag())));
}","protected CompletionStage<Result> handleInvalidForm(final Form<ChangeLineItemQuantityFormData> form){
  injector.getInstance(UserFeedback.class).addErrors(form);
  return completedFuture(redirect(reverseRouter.showCart(userContext().languageTag())));
}",0.8065173116089613
81711,"protected CompletionStage<Result> handleRemoveLineItemError(final Throwable throwable,final Form<RemoveLineItemFormData> removeLineItemForm,final Cart cart){
  flash(UserFeedback.ERROR,""String_Node_Str"");
  return completedFuture(redirect(reverseRouter.showCart(userContext().languageTag())));
}","protected CompletionStage<Result> handleRemoveLineItemError(final Throwable throwable,final Form<RemoveLineItemFormData> removeLineItemForm,final Cart cart){
  injector.getInstance(UserFeedback.class).addErrors(""String_Node_Str"");
  return completedFuture(redirect(reverseRouter.showCart(userContext().languageTag())));
}",0.9253246753246752
81712,"protected CompletionStage<Result> handleRemoveLineItemFormErrors(final Form<RemoveLineItemFormData> removeLineItemForm,final Cart cart){
  flash(UserFeedback.ERROR,""String_Node_Str"");
  return completedFuture(redirect(reverseRouter.showCart(userContext().languageTag())));
}","protected CompletionStage<Result> handleRemoveLineItemFormErrors(final Form<RemoveLineItemFormData> removeLineItemForm,final Cart cart){
  injector.getInstance(UserFeedback.class).addErrors(removeLineItemForm);
  return completedFuture(redirect(reverseRouter.showCart(userContext().languageTag())));
}",0.8591304347826086
81713,"protected Html renderPage(final ProductOverviewPageContent pageContent){
  final SunrisePageData pageData=pageData(userContext,pageContent,ctx(),session());
  return templateEngine().renderToHtml(""String_Node_Str"",pageData,userContext.locales());
}","protected Html renderPage(final ProductOverviewPageContent pageContent){
  final SunrisePageData pageData=pageData(pageContent);
  return templateEngine().renderToHtml(""String_Node_Str"",pageData,userContext.locales());
}",0.8931623931623932
81714,"protected final <T>CompletionStage<?> runAsyncHook(final Class<T> hookClass,final Function<T,CompletionStage<Object>> f){
  final List<? extends CompletionStage<Object>> collect=controllerComponents.stream().filter(x -> hookClass.isAssignableFrom(x.getClass())).map(hook -> f.apply((T)hook)).collect(Collectors.toList());
  return FutureUtils.listOfFuturesToFutureOfList(collect);
}","protected final <T>CompletionStage<Object> runAsyncHook(final Class<T> hookClass,final Function<T,CompletionStage<?>> f){
  final List<CompletionStage<Void>> collect=controllerComponents.stream().filter(x -> hookClass.isAssignableFrom(x.getClass())).map(hook -> f.apply((T)hook)).map(stage -> (CompletionStage<Void>)stage).collect(Collectors.toList());
  final CompletionStage<?> listCompletionStage=FutureUtils.listOfFuturesToFutureOfList(collect);
  return listCompletionStage.thenApply(z -> null);
}",0.334841628959276
81715,"@AddCSRFToken public CompletionStage<Result> show(final String languageTag){
  final CompletionStage<Cart> loadedCart=getOrCreateCart();
  final CompletionStage<?> stage=loadedCart.thenComposeAsync(cart -> runAsyncHook(CartLoadedHook.class,hook -> hook.cartLoaded(cart)),HttpExecution.defaultContext());
  return loadedCart.thenCombineAsync(stage,(cart,loadedCartHooksResult) -> showCheckoutAddressPage(cart),HttpExecution.defaultContext());
}","@AddCSRFToken public CompletionStage<Result> show(final String languageTag){
  final CompletionStage<Cart> loadedCart=getOrCreateCart();
  final CompletionStage<Object> completionStage=loadedCart.thenComposeAsync(cart -> runAsyncHook(CartLoadedHook.class,hook -> hook.cartLoaded(cart)),HttpExecution.defaultContext());
  return loadedCart.thenCombineAsync(completionStage,(cart,loadedCartHooksResult) -> showCheckoutAddressPage(cart),HttpExecution.defaultContext());
}",0.9615806805708014
81716,"private static Map<String,ProductVariantReferenceBean> createVariantsMap(final ProductProjection product,final ProductDataConfig productDataConfig,final UserContext userContext,final ReverseRouter reverseRouter){
  final Map<String,ProductVariantReferenceBean> variantsMap=new HashMap<>();
  product.getAllVariants().forEach(variant -> {
    final String attrCombination=productDataConfig.getSelectableAttributes().stream().map(variant::getAttribute).filter(enabledAttr -> enabledAttr != null).map(enabledAttr -> {
      final String enabledAttrValue=attributeValue(enabledAttr,productDataConfig.getMetaProductType(),userContext);
      return attributeValueAsKey(enabledAttrValue);
    }
).collect(joining(""String_Node_Str""));
    variantsMap.put(attrCombination,new ProductVariantReferenceBean(variant,product,userContext,reverseRouter));
  }
);
  return variantsMap;
}","private static Map<String,ProductVariantReferenceBean> createVariantsMap(final ProductProjection product,final ProductDataConfig productDataConfig,final UserContext userContext,final ReverseRouter reverseRouter){
  final Map<String,ProductVariantReferenceBean> variantsMap=new HashMap<>();
  product.getAllVariants().forEach(variant -> {
    final String attrCombination=productDataConfig.getSelectableAttributes().stream().map(selectableAttr -> {
      final Attribute attr=variant.getAttribute(selectableAttr);
      if (attr != null) {
        final String enabledAttrValue=attributeValue(attr,productDataConfig.getMetaProductType(),userContext);
        return attributeValueAsKey(enabledAttrValue);
      }
 else {
        return ""String_Node_Str"";
      }
    }
).collect(joining(""String_Node_Str""));
    variantsMap.put(attrCombination,new ProductVariantReferenceBean(variant,product,userContext,reverseRouter));
  }
);
  return variantsMap;
}",0.8325096101043383
81717,"private static Map<String,List<String>> allowedAttributeCombinations(final Attribute fixedAttribute,final ProductProjection product,final ProductDataConfig productDataConfig,final UserContext userContext){
  final MetaProductType metaProductType=productDataConfig.getMetaProductType();
  final Map<String,List<String>> attrCombination=new HashMap<>();
  productDataConfig.getSelectableAttributes().stream().filter(enabledAttrKey -> !fixedAttribute.getName().equals(enabledAttrKey)).forEach(enabledAttrKey -> {
    final List<String> allowedAttrValues=attributeCombination(enabledAttrKey,fixedAttribute,product,metaProductType,userContext);
    attrCombination.put(enabledAttrKey,allowedAttrValues);
  }
);
  return attrCombination;
}","private static Map<String,List<String>> allowedAttributeCombinations(final Attribute fixedAttribute,final ProductProjection product,final ProductDataConfig productDataConfig,final UserContext userContext){
  final MetaProductType metaProductType=productDataConfig.getMetaProductType();
  final Map<String,List<String>> attrCombination=new HashMap<>();
  productDataConfig.getSelectableAttributes().stream().filter(enabledAttrKey -> !fixedAttribute.getName().equals(enabledAttrKey)).forEach(enabledAttrKey -> {
    final List<String> allowedAttrValues=attributeCombination(enabledAttrKey,fixedAttribute,product,metaProductType,userContext);
    if (!allowedAttrValues.isEmpty()) {
      attrCombination.put(enabledAttrKey,allowedAttrValues);
    }
  }
);
  return attrCombination;
}",0.9682959048877148
81718,"public CompletionStage<Result> show(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  final LogInPageContent pageContent=new LogInPageContent();
  return completedFuture(ok(renderLogInPage(pageContent,userContext)));
}","@AddCSRFToken public CompletionStage<Result> show(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  final LogInPageContent pageContent=new LogInPageContent();
  return completedFuture(ok(renderLogInPage(pageContent,userContext)));
}",0.9732824427480916
81719,"@AddCSRFToken @RequireCSRFCheck public CompletionStage<Result> processSignUp(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  final Form<SignUpFormData> form=signUpForm.bindFromRequest();
  final LogInPageContent pageContent=new LogInPageContent(form,userContext,i18nResolver(),configuration());
  if (form.hasErrors()) {
    return completedFuture(handleSignUpFormErrors(form,pageContent,userContext));
  }
 else {
    return signUp(form.get()).thenApplyAsync(signInResult -> handleSuccessfulSignIn(signInResult,userContext),HttpExecution.defaultContext()).exceptionally(throwable -> handleExistingCustomerError(throwable,pageContent,userContext));
  }
}","@RequireCSRFCheck public CompletionStage<Result> processSignUp(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  final Form<SignUpFormData> form=signUpForm.bindFromRequest();
  final LogInPageContent pageContent=new LogInPageContent(form,userContext,i18nResolver(),configuration());
  if (form.hasErrors()) {
    return completedFuture(handleSignUpFormErrors(form,pageContent,userContext));
  }
 else {
    return signUp(form.get()).thenApplyAsync(signInResult -> handleSuccessfulSignIn(signInResult,userContext),HttpExecution.defaultContext()).exceptionally(throwable -> handleExistingCustomerError(throwable,pageContent,userContext));
  }
}",0.979591836734694
81720,"private Html renderLogInPage(final LogInPageContent pageContent,final UserContext userContext){
  if (pageContent.getSignUpForm() == null) {
    final SignUpFormBean signUpFormBean=new SignUpFormBean(null,userContext,i18nResolver(),configuration());
    pageContent.setSignUpForm(signUpFormBean);
  }
  final SunrisePageData pageData=pageData(userContext,pageContent,ctx());
  return templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales());
}","private Html renderLogInPage(final LogInPageContent pageContent,final UserContext userContext){
  if (pageContent.getSignUpForm() == null) {
    final SignUpFormBean signUpFormBean=new SignUpFormBean(null,userContext,i18nResolver(),configuration());
    pageContent.setSignUpForm(signUpFormBean);
  }
  final SunrisePageData pageData=pageData(userContext,pageContent,ctx(),session());
  return templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales());
}",0.989406779661017
81721,"@AddCSRFToken @RequireCSRFCheck public CompletionStage<Result> processLogIn(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  final Form<LogInFormData> form=logInForm.bindFromRequest();
  final LogInPageContent pageContent=new LogInPageContent(form);
  if (form.hasErrors()) {
    return completedFuture(handleLogInFormErrors(form,pageContent,userContext));
  }
 else {
    return logIn(form.get()).thenApplyAsync(signInResult -> handleSuccessfulSignIn(signInResult,userContext),HttpExecution.defaultContext()).exceptionally(throwable -> handleInvalidCredentialsError(throwable,pageContent,userContext));
  }
}","@RequireCSRFCheck public CompletionStage<Result> processLogIn(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  final Form<LogInFormData> form=logInForm.bindFromRequest();
  final LogInPageContent pageContent=new LogInPageContent(form);
  if (form.hasErrors()) {
    return completedFuture(handleLogInFormErrors(form,pageContent,userContext));
  }
 else {
    return logIn(form.get()).thenApplyAsync(signInResult -> handleSuccessfulSignIn(signInResult,userContext),HttpExecution.defaultContext()).exceptionally(throwable -> handleInvalidCredentialsError(throwable,pageContent,userContext));
  }
}",0.978125
81722,"private Html renderHome(final UserContext userContext,final List<ProductProjection> suggestions){
  final HomePageContent pageContent=createPageContent(userContext,suggestions);
  return templateService().renderToHtml(""String_Node_Str"",pageData(userContext,pageContent,ctx()),userContext.locales());
}","private Html renderHome(final UserContext userContext,final List<ProductProjection> suggestions){
  final HomePageContent pageContent=createPageContent(userContext,suggestions);
  return templateService().renderToHtml(""String_Node_Str"",pageData(userContext,pageContent,ctx(),session()),userContext.locales());
}",0.9836601307189542
81723,"private Html renderProductPage(final ProductProjection product,final UserContext userContext,final ProductVariant variant,final List<ProductProjection> suggestions){
  final ProductDetailPageContent pageContent=createPageContent(userContext,product,variant,suggestions);
  final SunrisePageData pageData=pageData(userContext,pageContent,ctx());
  return templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales());
}","private Html renderProductPage(final ProductProjection product,final UserContext userContext,final ProductVariant variant,final List<ProductProjection> suggestions){
  final ProductDetailPageContent pageContent=createPageContent(userContext,product,variant,suggestions);
  final SunrisePageData pageData=pageData(userContext,pageContent,ctx(),session());
  return templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales());
}",0.98868778280543
81724,"private ProductOverviewPageContent createPageContent(final int page,final SearchCriteria searchCriteria,final PagedSearchResult<ProductProjection> searchResult,final UserContext userContext){
  final ProductOverviewPageContent content=new ProductOverviewPageContent();
  content.setFilterProductsUrl(request().path());
  content.setProducts(new ProductListData(searchResult.getResults(),productDataConfig(),userContext,reverseRouter(),categoryTreeInNew()));
  content.setPagination(new PaginationData(requestContext(),searchResult,page,searchCriteria.selectedDisplay(),paginationDisplayedPages));
  content.setSortSelector(searchCriteria.boundSortSelector());
  content.setDisplaySelector(searchCriteria.boundDisplaySelector());
  content.setFacets(new FacetListData(searchResult,searchCriteria.boundFacets()));
  return content;
}","private ProductOverviewPageContent createPageContent(final int page,final SearchCriteria searchCriteria,final PagedSearchResult<ProductProjection> searchResult,final UserContext userContext){
  final ProductOverviewPageContent content=new ProductOverviewPageContent();
  content.setFilterProductsUrl(request().path());
  content.setProducts(new ProductListData(searchResult.getResults(),productDataConfig(),userContext,reverseRouter(),categoryTreeInNew()));
  content.setPagination(new PaginationData(requestContext(request()),searchResult,page,searchCriteria.selectedDisplay(),paginationDisplayedPages));
  content.setSortSelector(searchCriteria.boundSortSelector());
  content.setDisplaySelector(searchCriteria.boundDisplaySelector());
  content.setFacets(new FacetListData(searchResult,searchCriteria.boundFacets()));
  return content;
}",0.9946140035906644
81725,"private Html renderPage(final UserContext userContext,final ProductOverviewPageContent content){
  final SunrisePageData pageData=pageData(userContext,content,ctx());
  return templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales());
}","private Html renderPage(final UserContext userContext,final ProductOverviewPageContent content){
  final SunrisePageData pageData=pageData(userContext,content,ctx(),session());
  return templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales());
}",0.981060606060606
81726,"public CompletionStage<Result> show(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  return getOrCreateCart(userContext,session()).thenApplyAsync(cart -> ok(renderCartPage(cart,userContext)),HttpExecution.defaultContext());
}","@AddCSRFToken public CompletionStage<Result> show(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  return getOrCreateCart(userContext,session()).thenApplyAsync(cart -> ok(renderCartPage(cart,userContext)),HttpExecution.defaultContext());
}",0.974074074074074
81727,"private Html renderCartPage(final Cart cart,final UserContext userContext){
  final CartDetailPageContent content=new CartDetailPageContent(cart,userContext,productDataConfig,i18nResolver(),reverseRouter());
  final SunrisePageData pageData=pageData(userContext,content,ctx());
  return templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales());
}","private Html renderCartPage(final Cart cart,final UserContext userContext){
  final CartDetailPageContent content=new CartDetailPageContent(cart,userContext,productDataConfig,i18nResolver(),reverseRouter());
  final SunrisePageData pageData=pageData(userContext,content,ctx(),session());
  return templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales());
}",0.9866666666666668
81728,"@AddCSRFToken @RequireCSRFCheck public CompletionStage<Result> process(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  return getOrCreateCart(userContext,session()).thenComposeAsync(cart -> {
    final CheckoutAddressFormData checkoutAddressFormData=extractBean(request(),CheckoutAddressFormData.class);
    final Form<CheckoutAddressFormData> filledForm=obtainFilledForm(checkoutAddressFormData);
    final CheckoutAddressPageContent content=new CheckoutAddressPageContent(checkoutAddressFormData,cart,i18nResolver(),configuration(),userContext,projectContext(),productDataConfig,reverseRouter());
    if (filledForm.hasErrors()) {
      return CompletableFuture.completedFuture(badRequest(userContext,filledForm,content));
    }
 else {
      return updateCart(cart,content).thenApplyAsync(updatedCart -> redirect(reverseRouter().showCheckoutShippingForm(languageTag)),HttpExecution.defaultContext());
    }
  }
);
}","@RequireCSRFCheck public CompletionStage<Result> process(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  final Http.Request request=request();
  return getOrCreateCart(userContext,session()).thenComposeAsync(cart -> {
    final CheckoutAddressFormData checkoutAddressFormData=extractBean(request,CheckoutAddressFormData.class);
    final Form<CheckoutAddressFormData> filledForm=obtainFilledForm(checkoutAddressFormData,request);
    final CheckoutAddressPageContent content=new CheckoutAddressPageContent(checkoutAddressFormData,cart,i18nResolver(),configuration(),userContext,projectContext(),productDataConfig,reverseRouter());
    if (filledForm.hasErrors()) {
      return CompletableFuture.completedFuture(badRequest(userContext,filledForm,content));
    }
 else {
      return updateCart(cart,content).thenApplyAsync(updatedCart -> redirect(reverseRouter().showCheckoutShippingForm(languageTag)),HttpExecution.defaultContext());
    }
  }
,HttpExecution.defaultContext());
}",0.9448659585230148
81729,"private Result badRequest(final UserContext userContext,final Form<CheckoutAddressFormData> filledForm,final CheckoutAddressPageContent content){
  Logger.info(""String_Node_Str"");
  content.getAddressForm().setErrors(new ErrorsBean(filledForm));
  final SunrisePageData pageData=pageData(userContext,content,ctx());
  return badRequest(templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales()));
}","private Result badRequest(final UserContext userContext,final Form<CheckoutAddressFormData> filledForm,final CheckoutAddressPageContent content){
  Logger.info(""String_Node_Str"");
  content.getAddressForm().setErrors(new ErrorsBean(filledForm));
  final SunrisePageData pageData=pageData(userContext,content,ctx(),session());
  return badRequest(templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales()));
}",0.9882352941176472
81730,"private Result renderCheckoutAddressPage(final UserContext userContext,final Cart cart){
  final CheckoutAddressPageContent content=new CheckoutAddressPageContent(cart,i18nResolver(),configuration(),userContext,projectContext(),productDataConfig,reverseRouter());
  final SunrisePageData pageData=pageData(userContext,content,ctx());
  return ok(templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales()));
}","private Result renderCheckoutAddressPage(final UserContext userContext,final Cart cart){
  final CheckoutAddressPageContent content=new CheckoutAddressPageContent(cart,i18nResolver(),configuration(),userContext,projectContext(),productDataConfig,reverseRouter());
  final SunrisePageData pageData=pageData(userContext,content,ctx(),session());
  return ok(templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales()));
}",0.9885057471264368
81731,"public CompletionStage<Result> show(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  return getOrCreateCart(userContext,session()).thenApplyAsync(cart -> renderCheckoutAddressPage(userContext,cart),HttpExecution.defaultContext());
}","@AddCSRFToken public CompletionStage<Result> show(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  return getOrCreateCart(userContext,session()).thenApplyAsync(cart -> renderCheckoutAddressPage(userContext,cart),HttpExecution.defaultContext());
}",0.9747292418772564
81732,"private Form<CheckoutAddressFormData> obtainFilledForm(final CheckoutAddressFormData checkoutAddressFormData){
  final Form<CheckoutAddressFormData> filledForm=formFactory.form(CheckoutAddressFormData.class,CheckoutAddressFormData.Validation.class).bindFromRequest(request());
  additionalValidations(filledForm,checkoutAddressFormData);
  return filledForm;
}","private Form<CheckoutAddressFormData> obtainFilledForm(final CheckoutAddressFormData checkoutAddressFormData,final Http.Request request){
  final Form<CheckoutAddressFormData> filledForm=formFactory.form(CheckoutAddressFormData.class,CheckoutAddressFormData.Validation.class).bindFromRequest(request);
  additionalValidations(filledForm,checkoutAddressFormData);
  return filledForm;
}",0.9610738255033556
81733,"@RequireCSRFCheck public CompletionStage<Result> process(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  final CompletionStage<Cart> cartStage=getOrCreateCart(userContext,session());
  final Form<CheckoutConfirmationFormData> filledForm=Form.form(CheckoutConfirmationFormData.class).bindFromRequest(request());
  final CheckoutConfirmationFormData data=filledForm.get();
  if (filledForm.hasErrors()) {
    return cartStage.thenComposeAsync(cart -> renderErrorResponse(cart,filledForm,ctx(),userContext),HttpExecution.defaultContext());
  }
 else {
    return cartStage.thenComposeAsync(cart -> createOrder(cart,languageTag),HttpExecution.defaultContext());
  }
}","@RequireCSRFCheck public CompletionStage<Result> process(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  final CompletionStage<Cart> cartStage=getOrCreateCart(userContext,session());
  final Form<CheckoutConfirmationFormData> filledForm=Form.form(CheckoutConfirmationFormData.class).bindFromRequest(request());
  final CheckoutConfirmationFormData data=filledForm.get();
  if (filledForm.hasErrors()) {
    return cartStage.thenComposeAsync(cart -> renderErrorResponse(cart,filledForm,userContext),HttpExecution.defaultContext());
  }
 else {
    return cartStage.thenComposeAsync(cart -> createOrder(cart,languageTag),HttpExecution.defaultContext());
  }
}",0.9957081545064378
81734,"private CompletionStage<Result> renderErrorResponse(final Cart cart,final Form<CheckoutConfirmationFormData> filledForm,final Http.Context ctx,final UserContext userContext){
  final CheckoutConfirmationPageContent content=new CheckoutConfirmationPageContent(cart,userContext,productDataConfig,i18nResolver(),reverseRouter());
  content.getCheckoutForm().setErrors(new ErrorsBean(filledForm));
  final SunrisePageData pageData=pageData(userContext,content,ctx);
  return CompletableFuture.completedFuture(badRequest(templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales())));
}","private CompletionStage<Result> renderErrorResponse(final Cart cart,final Form<CheckoutConfirmationFormData> filledForm,final UserContext userContext){
  final CheckoutConfirmationPageContent content=new CheckoutConfirmationPageContent(cart,userContext,productDataConfig,i18nResolver(),reverseRouter());
  content.getCheckoutForm().setErrors(new ErrorsBean(filledForm));
  final SunrisePageData pageData=pageData(userContext,content,ctx(),session());
  return CompletableFuture.completedFuture(badRequest(templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales())));
}",0.9706129303106632
81735,"private Result renderCheckoutConfirmationPage(final UserContext userContext,final Http.Context ctx,final Cart cart){
  final CheckoutConfirmationPageContent content=new CheckoutConfirmationPageContent(cart,userContext,productDataConfig,i18nResolver(),reverseRouter());
  final SunrisePageData pageData=pageData(userContext,content,ctx);
  return ok(templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales()));
}","private Result renderCheckoutConfirmationPage(final Cart cart,final UserContext userContext){
  final CheckoutConfirmationPageContent content=new CheckoutConfirmationPageContent(cart,userContext,productDataConfig,i18nResolver(),reverseRouter());
  final SunrisePageData pageData=pageData(userContext,content,ctx(),session());
  return ok(templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales()));
}",0.9216374269005848
81736,"public CompletionStage<Result> show(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  final Http.Context ctx=ctx();
  return getOrCreateCart(userContext,session()).thenApplyAsync(cart -> renderCheckoutConfirmationPage(userContext,ctx,cart),HttpExecution.defaultContext());
}","@AddCSRFToken public CompletionStage<Result> show(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  return getOrCreateCart(userContext,session()).thenApplyAsync(cart -> renderCheckoutConfirmationPage(cart,userContext),HttpExecution.defaultContext());
}",0.8733333333333333
81737,"public CompletionStage<Result> show(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  return getOrCreateCart(userContext,session()).thenApplyAsync(cart -> renderCheckoutPaymentPage(userContext,cart),HttpExecution.defaultContext());
}","@AddCSRFToken public CompletionStage<Result> show(final String languageTag){
  final UserContext userContext=userContext(languageTag);
  return getOrCreateCart(userContext,session()).thenApplyAsync(cart -> renderCheckoutPaymentPage(userContext,cart),HttpExecution.defaultContext());
}",0.9747292418772564
81738,"private Result renderCheckoutPaymentPage(final UserContext userContext,final Cart cart){
  final CheckoutPaymentPageContent content=new CheckoutPaymentPageContent(cart,userContext,productDataConfig,i18nResolver(),reverseRouter());
  final SunrisePageData pageData=pageData(userContext,content,ctx());
  return ok(templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales()));
}","private Result renderCheckoutPaymentPage(final UserContext userContext,final Cart cart){
  final CheckoutPaymentPageContent content=new CheckoutPaymentPageContent(cart,userContext,productDataConfig,i18nResolver(),reverseRouter());
  final SunrisePageData pageData=pageData(userContext,content,ctx(),session());
  return ok(templateService().renderToHtml(""String_Node_Str"",pageData,userContext.locales()));
}",0.9875621890547264
81739,"@Override protected MetaModelQueryDsl<ShippingMethod,?,?,?> query(){
  return ShippingMethodQuery.of();
}","@Override protected ShippingMethodQuery query(){
  return ShippingMethodQuery.of();
}",0.8421052631578947
81740,"@Override public Call product(final String languageTag,final String productSlug,final String sku){
  return productcatalog.controllers.routes.ProductDetailPageController.show(languageTag,productSlug,sku);
}","@Override public Call product(final String languageTag,final String productSlug,final String sku){
  return ProductDetailPageController.show(languageTag,productSlug,sku);
}",0.91005291005291
81741,"@Override public Call showCheckoutPaymentForm(final String language){
  return routes.CheckoutPaymentController.show(language);
}","@Override public Call showCheckoutPaymentForm(final String language){
  return CheckoutPaymentController.show(language);
}",0.9721115537848606
81742,"@Override public Call showCheckoutConfirmationForm(final String language){
  return routes.CheckoutPaymentController.show(language);
}","@Override public Call showCheckoutConfirmationForm(final String language){
  return CheckoutPaymentController.show(language);
}",0.9731800766283524
81743,"@Override public Call processCheckoutShippingForm(final String language){
  return routes.CheckoutShippingController.process(language);
}","@Override public Call processCheckoutShippingForm(final String language){
  return CheckoutShippingController.process(language);
}",0.9737827715355806
81744,"@Override public Call showCheckoutShippingForm(final String language){
  return routes.CheckoutShippingController.show(language);
}","@Override public Call showCheckoutShippingForm(final String language){
  return CheckoutShippingController.show(language);
}",0.9725490196078432
81745,"@Override public Call processCheckoutPaymentForm(final String language){
  return routes.CheckoutPaymentController.process(language);
}","@Override public Call processCheckoutPaymentForm(final String language){
  return CheckoutPaymentController.process(language);
}",0.973384030418251
81746,"private void fill(final Messages messages,final Configuration configuration,@Nullable final String title){
  final List<SelectableData> selectableDataList=configuration.getObjectList(ALLOWED_TITLES_CONFIG_KEY).stream().map(map -> {
    final SelectableData selectableData=new SelectableData();
    final String shownTitle=messages.at(map.get(MESSAGE_CONFIG_KEY).toString());
    selectableData.setLabel(shownTitle);
    selectableData.setValue(shownTitle);
    selectableData.setSelected(selectableData.getValue().equals(title));
    return selectableData;
  }
).collect(toList());
  setList(selectableDataList);
}","private void fill(final Messages messages,final Configuration configuration,@Nullable final String title){
  final List<SelectableData> selectableDataList=configuration.getObjectList(ALLOWED_TITLES_CONFIG_KEY).stream().map(map -> {
    final String shownTitle=messages.at(map.get(MESSAGE_CONFIG_KEY).toString());
    final SelectableData selectableData=new SelectableData(shownTitle,shownTitle);
    selectableData.setSelected(selectableData.getValue().equals(title));
    return selectableData;
  }
).collect(toList());
  setList(selectableDataList);
}",0.6426735218508998
81747,"private void fill(final ShippingMethods shippingMethods,final String nullableSelectedShippingMethodId){
  final List<SelectableShippingMethodBean> shippingMethodBeanList=shippingMethods.shippingMethods.stream().map(shippingMethod -> {
    final SelectableShippingMethodBean bean=new SelectableShippingMethodBean();
    bean.setLabel(shippingMethod.getName());
    bean.setName(shippingMethod.getName());
    bean.setValue(shippingMethod.getId());
    final Boolean selected=shippingMethod.getId().equals(nullableSelectedShippingMethodId);
    bean.setSelected(selected);
    return bean;
  }
).collect(toList());
  setList(shippingMethodBeanList);
}","private void fill(final ShippingMethods shippingMethods,final String nullableSelectedShippingMethodId){
  final List<SelectableShippingMethodBean> shippingMethodBeanList=shippingMethods.shippingMethods.stream().map(shippingMethod -> {
    final SelectableShippingMethodBean bean=new SelectableShippingMethodBean();
    bean.setLabel(shippingMethod.getName());
    bean.setValue(shippingMethod.getId());
    final Boolean selected=shippingMethod.getId().equals(nullableSelectedShippingMethodId);
    bean.setSelected(selected);
    return bean;
  }
).collect(toList());
  setList(shippingMethodBeanList);
}",0.9649122807017544
81748,"private boolean containsPlural(final Options options){
  return options.hash.entrySet().stream().anyMatch(entry -> entry.getValue() instanceof Integer && !((entry.getValue().equals(1))));
}","private boolean containsPlural(final Options options){
  return options.hash.entrySet().stream().anyMatch(entry -> entry.getValue() instanceof Integer || entry.getValue() instanceof Long && ((((Number)entry.getValue()).longValue() != 1L)));
}",0.7517401392111369
81749,"public HandlebarsTranslationHelper(final List<String> languages,final List<String> bundles){
  this.languages=requireNonNull(languages);
  this.bundles=requireNonNull(bundles);
  for (  final String language : languages) {
    final List<String> foundBundles=new LinkedList<>();
    final List<String> notFoundBundles=new LinkedList<>();
    for (    final String bundle : bundles) {
      try {
        final Map<String,Object> yamlContent=loadYamlForTranslationAndBundle(language,bundle);
        languageBundleToYamlMap.put(language + ""String_Node_Str"" + bundle,yamlContent);
        foundBundles.add(bundle);
      }
 catch (      final IOException e) {
        notFoundBundles.add(bundle);
      }
    }
    Logger.info(""String_Node_Str"",language,foundBundles,notFoundBundles);
  }
}","public HandlebarsTranslationHelper(final List<String> languages,final List<String> bundles){
  requireNonNull(languages);
  requireNonNull(bundles);
  for (  final String language : languages) {
    final List<String> foundBundles=new LinkedList<>();
    final List<String> notFoundBundles=new LinkedList<>();
    for (    final String bundle : bundles) {
      try {
        final Map<String,Object> yamlContent=loadYamlForTranslationAndBundle(language,bundle);
        languageBundleToYamlMap.put(language + ""String_Node_Str"" + bundle,yamlContent);
        foundBundles.add(bundle);
      }
 catch (      final IOException e) {
        notFoundBundles.add(bundle);
      }
    }
    Logger.info(""String_Node_Str"",language,foundBundles,notFoundBundles);
  }
}",0.9819121447028424
81750,"@Override public void onStart(final Application app){
  this.app=app;
  client=new PlayJavaClientImpl(app.configuration());
  final PagedQueryResult<Category> queryResult=client.execute(Categories.query()).get(2000,TimeUnit.MILLISECONDS);
  categoryTree=CategoryTreeFactory.create(queryResult.getResults());
  super.onStart(app);
}","@Override public void onStart(final Application app){
  this.app=app;
  client=createPlayJavaClient(app);
  final PagedQueryResult<Category> queryResult=client.execute(Categories.query()).get(2000,TimeUnit.MILLISECONDS);
  categoryTree=CategoryTreeFactory.create(queryResult.getResults());
  super.onStart(app);
}",0.9409937888198758
81751,"@Override protected FakeApplication provideFakeApplication(){
  return fakeApplication(new Global(){
  }
);
}","@Override protected FakeApplication provideFakeApplication(){
  return fakeApplication(new Global(){
    @Override protected PlayJavaClientImpl createPlayJavaClient(    Application app){
      return new PlayJavaClientImpl(getConfiguration(app),getSphereRequestExecutor());
    }
  }
);
}",0.5491183879093199
81752,"/** 
 * Set recover file from the DB.
 * @return String
 * @see
 * @since 1.0
 */
public String setRecoverdFile(){
  String status=""String_Node_Str"";
  String code=""String_Node_Str"";
  HttpSession session=ServletActionContext.getRequest().getSession();
  Connection connection=null;
  try {
    connection=new DBConnectionManager().getConnection();
    Statement statement;
    statement=connection.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + selectedPendingFile + ""String_Node_Str"");
    if (rs.next()) {
      File fileCreated=new File(rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
      FileWork recoveredFile=new FileWork();
      recoveredFile.setFilename(fileCreated.getName());
      recoveredFile.setFile(fileCreated);
      recoveredFile.setProfile(rs.getInt(""String_Node_Str""));
      if (rs.getString(""String_Node_Str"") != null) {
        recoveredFile.setTemplate((rs.getInt(""String_Node_Str"")));
      }
      if (rs.getString(""String_Node_Str"") != null) {
        code=String.valueOf(rs.getInt(""String_Node_Str""));
      }
      recoveredFile.setDataset(getDatasetDesc(code));
      recoveredFile.setGraph(getGraphUri(code));
      status=rs.getString(""String_Node_Str"");
      recoveredFile.setStatus(status);
      recoveredFile.setJobId(rs.getInt(""String_Node_Str""));
      recoveredFile.setLdJobId(rs.getInt(""String_Node_Str""));
      recoveredFile.setLdsJobId(rs.getInt(""String_Node_Str""));
      pendingFiles=(List<FileWork>)session.getAttribute(""String_Node_Str"");
      if (pendingFiles != null) {
        for (int i=0; i < pendingFiles.size(); i++) {
          if (pendingFiles.get(i).getFilename().equals(recoveredFile.getFilename())) {
            pendingFiles.remove(i);
          }
        }
        pendingFiles.add(recoveredFile);
        session.setAttribute(""String_Node_Str"",pendingFiles);
      }
 else {
        pendingFiles=new ArrayList<FileWork>();
        pendingFiles.add(recoveredFile);
        session.setAttribute(""String_Node_Str"",pendingFiles);
      }
      session.setAttribute(""String_Node_Str"",recoveredFile);
      if (status.equals(""String_Node_Str"")) {
        session.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (status.equals(""String_Node_Str"")) {
        session.setAttribute(""String_Node_Str"",""String_Node_Str"");
        session.setAttribute(""String_Node_Str"",recoveredFile.getJobId());
      }
 else       if (status.equals(""String_Node_Str"")) {
        session.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (status.equals(""String_Node_Str"")) {
        session.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (status.equals(""String_Node_Str"")) {
        session.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
    }
    rs.close();
    statement.close();
    connection.close();
  }
 catch (  SQLException e) {
    logger.error(MessageCatalog._00011_SQL_EXCEPTION,e);
    status=""String_Node_Str"";
  }
  return status;
}","/** 
 * Set recover file from the DB.
 * @return String
 * @see
 * @since 1.0
 */
public String setRecoverdFile(){
  String status=""String_Node_Str"";
  String code=""String_Node_Str"";
  HttpSession session=ServletActionContext.getRequest().getSession();
  Connection connection=null;
  try {
    connection=new DBConnectionManager().getConnection();
    Statement statement;
    statement=connection.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + selectedPendingFile + ""String_Node_Str"");
    if (rs.next()) {
      File fileCreated=new File(rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
      FileWork recoveredFile=new FileWork();
      recoveredFile.setFilename(fileCreated.getName());
      recoveredFile.setFile(fileCreated);
      recoveredFile.setProfile(rs.getInt(""String_Node_Str""));
      if (rs.getString(""String_Node_Str"") != null) {
        recoveredFile.setTemplate((rs.getInt(""String_Node_Str"")));
      }
      if (rs.getString(""String_Node_Str"") != null) {
        code=String.valueOf(rs.getInt(""String_Node_Str""));
      }
      recoveredFile.setDataset(code);
      recoveredFile.setGraph(code);
      status=rs.getString(""String_Node_Str"");
      recoveredFile.setStatus(status);
      recoveredFile.setJobId(rs.getInt(""String_Node_Str""));
      recoveredFile.setLdJobId(rs.getInt(""String_Node_Str""));
      recoveredFile.setLdsJobId(rs.getInt(""String_Node_Str""));
      pendingFiles=(List<FileWork>)session.getAttribute(""String_Node_Str"");
      if (pendingFiles != null) {
        for (int i=0; i < pendingFiles.size(); i++) {
          if (pendingFiles.get(i).getFilename().equals(recoveredFile.getFilename())) {
            pendingFiles.remove(i);
          }
        }
        pendingFiles.add(recoveredFile);
        session.setAttribute(""String_Node_Str"",pendingFiles);
      }
 else {
        pendingFiles=new ArrayList<FileWork>();
        pendingFiles.add(recoveredFile);
        session.setAttribute(""String_Node_Str"",pendingFiles);
      }
      session.setAttribute(""String_Node_Str"",recoveredFile);
      if (status.equals(""String_Node_Str"")) {
        session.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (status.equals(""String_Node_Str"")) {
        session.setAttribute(""String_Node_Str"",""String_Node_Str"");
        session.setAttribute(""String_Node_Str"",recoveredFile.getJobId());
      }
 else       if (status.equals(""String_Node_Str"")) {
        session.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (status.equals(""String_Node_Str"")) {
        session.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (status.equals(""String_Node_Str"")) {
        session.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
    }
    rs.close();
    statement.close();
    connection.close();
  }
 catch (  SQLException e) {
    logger.error(MessageCatalog._00011_SQL_EXCEPTION,e);
    status=""String_Node_Str"";
  }
  return status;
}",0.9926265770932328
81753,"/** 
 * Get the works triples selected in the UI.
 * @return String
 * @see
 * @since 1.0
 */
public String getWor(){
  execute();
  setWorks(true);
  calls=numWorks / limit;
  rest=numWorks % limit;
  if (rest != 0) {
    calls++;
  }
  RetrievedWork[] wor=null;
  w=new ArrayList<RetrievedWork>();
  RetrievedWork resource;
  for (int i=1; i <= calls; i++) {
    offset=(i * limit) - limit;
    wor=rdfstoreDAO.getWorks(sparqlEndpointURI,graphName,user,password,offset,limit);
    for (int a=0; a < wor.length; a++) {
      resource=new RetrievedWork();
      resource.setWorkURI(wor[i].getWorkURI());
      resource.setExprURI(wor[i].getExprURI());
      resource.setManifURI(wor[i].getManifURI());
      resource.setTitle(wor[i].getTitle());
      resource.setDimensions(wor[i].getDimensions());
      resource.setExtension(wor[i].getExtension());
      resource.setAuthor(wor[i].getAuthor());
      resource.setPublicPlace(wor[i].getPublicPlace());
      resource.setPublicDate(wor[i].getPublicDate());
      resource.setEdition(wor[i].getEdition());
      w.add(resource);
    }
  }
  return SUCCESS;
}","/** 
 * Get the works triples selected in the UI.
 * @return String
 * @see
 * @since 1.0
 */
public String getWor(){
  execute();
  setWorks(true);
  calls=numWorks / limit;
  rest=numWorks % limit;
  if (rest != 0) {
    calls++;
  }
  RetrievedWork[] wor=null;
  w=new ArrayList<RetrievedWork>();
  RetrievedWork resource;
  for (int i=1; i <= calls; i++) {
    offset=(i * limit) - limit;
    wor=rdfstoreDAO.getWorks(sparqlEndpointURI,graphName,user,password,offset,limit);
    for (int a=0; a < wor.length; a++) {
      resource=new RetrievedWork();
      resource.setWorkURI(wor[a].getWorkURI());
      resource.setExprURI(wor[a].getExprURI());
      resource.setManifURI(wor[a].getManifURI());
      resource.setTitle(wor[a].getTitle());
      resource.setDimensions(wor[a].getDimensions());
      resource.setExtension(wor[a].getExtension());
      resource.setAuthor(wor[a].getAuthor());
      resource.setPublicPlace(wor[a].getPublicPlace());
      resource.setPublicDate(wor[a].getPublicDate());
      resource.setEdition(wor[a].getEdition());
      w.add(resource);
    }
  }
  return SUCCESS;
}",0.9909747292418772
81754,"@Override public final void process(final Exchange exchange) throws Exception {
  final long begin=System.currentTimeMillis();
  final Message in=exchange.getIn();
  final String format=in.getHeader(Constants.FORMAT_ATTRIBUTE_NAME,String.class);
  final Integer jobId=in.getHeader(Constants.JOB_ID_ATTRIBUTE_NAME,Integer.class);
  final JobInstance configuration=cache.getJobInstance(jobId);
  if (configuration == null) {
    log.error(MessageCatalog._00038_UNKNOWN_JOB_ID,jobId);
    throw new IllegalArgumentException(String.valueOf(jobId));
  }
  if (in.getBody() instanceof NullObject) {
    incrementJobStatsAndElapsed(jobId,null,0);
    return;
  }
  VelocityContext velocityContext=null;
  String triples=null;
  long elapsed=0;
  try {
    final Template template=velocityEngine.getTemplate(templateName(format));
    if (template == null) {
      log.error(MessageCatalog._00040_TEMPLATE_NOT_FOUND,format);
      return;
    }
    velocityContext=contexts.get();
    velocityContext.put(Constants.JOB_CONFIGURATION_ATTRIBUTE_NAME,configuration);
    populateVelocityContext(velocityContext,in,configuration);
    final Writer sw=new StringWriter();
    final Writer w=new BufferedWriter(sw);
    template.merge(velocityContext,w);
    w.flush();
    elapsed=System.currentTimeMillis() - begin;
    triples=sw.toString();
    in.setBody(triples);
    in.setHeader(Constants.GRAPH_ATTRIBUTE_NAME,graphName(configuration));
  }
 catch (  final ResourceNotFoundException exception) {
    log.error(MessageCatalog._00040_TEMPLATE_NOT_FOUND,exception,format);
  }
 finally {
    incrementJobStatsAndElapsed(jobId,triples,elapsed);
    if (velocityContext != null) {
      velocityContext.remove(Constants.MAIN_SUBJECT_ATTRIBUTE_NAME);
      velocityContext.remove(Constants.ROOT_ELEMENT_ATTRIBUTE_NAME);
      velocityContext.remove(Constants.JOB_CONFIGURATION_ATTRIBUTE_NAME);
    }
    checkForCompleteness(jobId);
  }
}","@Override public final void process(final Exchange exchange) throws Exception {
  final long begin=System.currentTimeMillis();
  final Message in=exchange.getIn();
  final String format=in.getHeader(Constants.FORMAT_ATTRIBUTE_NAME,String.class);
  final Integer jobId=in.getHeader(Constants.JOB_ID_ATTRIBUTE_NAME,Integer.class);
  final JobInstance configuration=cache.getJobInstance(jobId);
  if (configuration == null) {
    log.error(MessageCatalog._00038_UNKNOWN_JOB_ID,jobId);
    throw new IllegalArgumentException(String.valueOf(jobId));
  }
  if (in.getBody() instanceof NullObject) {
    incrementJobStatsAndElapsed(jobId,null,0);
    checkForCompleteness(jobId);
    return;
  }
  VelocityContext velocityContext=null;
  String triples=null;
  long elapsed=0;
  try {
    final Template template=velocityEngine.getTemplate(templateName(format));
    if (template == null) {
      log.error(MessageCatalog._00040_TEMPLATE_NOT_FOUND,format);
      return;
    }
    velocityContext=contexts.get();
    velocityContext.put(Constants.JOB_CONFIGURATION_ATTRIBUTE_NAME,configuration);
    populateVelocityContext(velocityContext,in,configuration);
    final Writer sw=new StringWriter();
    final Writer w=new BufferedWriter(sw);
    template.merge(velocityContext,w);
    w.flush();
    elapsed=System.currentTimeMillis() - begin;
    triples=sw.toString();
    in.setBody(triples);
    in.setHeader(Constants.GRAPH_ATTRIBUTE_NAME,graphName(configuration));
  }
 catch (  final ResourceNotFoundException exception) {
    log.error(MessageCatalog._00040_TEMPLATE_NOT_FOUND,exception,format);
  }
 finally {
    incrementJobStatsAndElapsed(jobId,triples,elapsed);
    if (velocityContext != null) {
      velocityContext.remove(Constants.MAIN_SUBJECT_ATTRIBUTE_NAME);
      velocityContext.remove(Constants.ROOT_ELEMENT_ATTRIBUTE_NAME);
      velocityContext.remove(Constants.JOB_CONFIGURATION_ATTRIBUTE_NAME);
    }
    checkForCompleteness(jobId);
  }
}",0.9915057915057915
81755,"/** 
 * Gets the information of the linked data server process
 * @return String
 * @throws IOException
 * @see
 * @since 1.0
 */
public String getInfoLDS() throws IOException {
  HttpSession session=ServletActionContext.getRequest().getSession();
  Integer rdfizerJob=(Integer)session.getAttribute(""String_Node_Str"");
  setState((int)session.getAttribute(""String_Node_Str""));
  logger.debug(""String_Node_Str"" + state);
  if (rdfizerJob != null) {
    getFile(rdfizerJob);
  }
  if (session.getAttribute(""String_Node_Str"") != null) {
    setLdsStarted(true);
    int ldsJobId=(int)session.getAttribute(""String_Node_Str"");
    URL url=new URL(""String_Node_Str"" + ldsJobId);
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    if (conn.getResponseCode() != 202) {
      logger.error(MessageCatalog._00015_HTTP_ERROR_CODE + conn.getResponseCode());
    }
    try {
      Locale locale=(Locale)session.getAttribute(""String_Node_Str"");
      if (locale == null) {
        locale=Locale.ROOT;
      }
      SimpleDateFormat dateFormatIn=new SimpleDateFormat(""String_Node_Str"");
      SimpleDateFormat dateFormatOut=new SimpleDateFormat(""String_Node_Str"",locale);
      BufferedReader reader=new BufferedReader(new InputStreamReader(conn.getInputStream()));
      JSONParser parser=new JSONParser();
      JSONObject jsonObject=(JSONObject)parser.parse(reader);
      String startDate=(String)jsonObject.get(""String_Node_Str"");
      if (startDate != null) {
        setStartDate(dateFormatOut.format(dateFormatIn.parse(startDate)));
      }
      String endDate=(String)jsonObject.get(""String_Node_Str"");
      if (endDate != null) {
        setEndDate(dateFormatOut.format(dateFormatIn.parse(endDate)));
      }
      String status=(String)jsonObject.get(""String_Node_Str"");
      if (status.equals(""String_Node_Str"")) {
        setStatus(getText(""String_Node_Str""));
      }
 else       if (status.equals(""String_Node_Str"")) {
        setStatus(getText(""String_Node_Str""));
      }
 else       if (status.equals(""String_Node_Str"")) {
        logger.debug(""String_Node_Str"" + state);
        if (state == 3) {
          session.setAttribute(""String_Node_Str"",5);
        }
 else {
          session.setAttribute(""String_Node_Str"",4);
        }
        logger.debug(""String_Node_Str"" + state);
        setStatus(getText(""String_Node_Str""));
      }
      conn.disconnect();
      setState((int)session.getAttribute(""String_Node_Str""));
      return SUCCESS;
    }
 catch (    Exception e) {
      logger.error(MessageCatalog._00016_ERROR_READING_XML,e);
      conn.disconnect();
      return ERROR;
    }
  }
 else {
    setLdsStarted(false);
    setStatus(getText(""String_Node_Str""));
    return SUCCESS;
  }
}","/** 
 * Gets the information of the linked data server process
 * @return String
 * @throws IOException
 * @see
 * @since 1.0
 */
public String getInfoLDS() throws IOException {
  HttpSession session=ServletActionContext.getRequest().getSession();
  Integer rdfizerJob=(Integer)session.getAttribute(""String_Node_Str"");
  setState((int)session.getAttribute(""String_Node_Str""));
  if (rdfizerJob != null) {
    getFile(rdfizerJob);
  }
  if (session.getAttribute(""String_Node_Str"") != null) {
    setLdsStarted(true);
    int ldsJobId=(int)session.getAttribute(""String_Node_Str"");
    URL url=new URL(""String_Node_Str"" + ldsJobId);
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    if (conn.getResponseCode() != 202) {
      logger.error(MessageCatalog._00015_HTTP_ERROR_CODE + conn.getResponseCode());
    }
    try {
      Locale locale=(Locale)session.getAttribute(""String_Node_Str"");
      if (locale == null) {
        locale=Locale.ROOT;
      }
      SimpleDateFormat dateFormatIn=new SimpleDateFormat(""String_Node_Str"");
      SimpleDateFormat dateFormatOut=new SimpleDateFormat(""String_Node_Str"",locale);
      BufferedReader reader=new BufferedReader(new InputStreamReader(conn.getInputStream()));
      JSONParser parser=new JSONParser();
      JSONObject jsonObject=(JSONObject)parser.parse(reader);
      String startDate=(String)jsonObject.get(""String_Node_Str"");
      if (startDate != null) {
        setStartDate(dateFormatOut.format(dateFormatIn.parse(startDate)));
      }
      String endDate=(String)jsonObject.get(""String_Node_Str"");
      if (endDate != null) {
        setEndDate(dateFormatOut.format(dateFormatIn.parse(endDate)));
      }
      String status=(String)jsonObject.get(""String_Node_Str"");
      if (status.equals(""String_Node_Str"")) {
        setStatus(getText(""String_Node_Str""));
      }
 else       if (status.equals(""String_Node_Str"")) {
        setStatus(getText(""String_Node_Str""));
      }
 else       if (status.equals(""String_Node_Str"")) {
        if (state == 3) {
          session.setAttribute(""String_Node_Str"",5);
        }
 else         if (state != 5) {
          session.setAttribute(""String_Node_Str"",4);
        }
        setStatus(getText(""String_Node_Str""));
      }
      conn.disconnect();
      setState((int)session.getAttribute(""String_Node_Str""));
      return SUCCESS;
    }
 catch (    Exception e) {
      logger.error(MessageCatalog._00016_ERROR_READING_XML,e);
      conn.disconnect();
      return ERROR;
    }
  }
 else {
    setLdsStarted(false);
    setStatus(getText(""String_Node_Str""));
    return SUCCESS;
  }
}",0.970307719992802
81756,"/** 
 * Creates a job for the linked data server
 * @see
 * @since 1.0
 */
private void createJobLDS(){
  HttpSession session=ServletActionContext.getRequest().getSession();
  int addedId=0;
  Connection connection=null;
  connection=new DBConnectionManager().getConnection();
  Statement statement;
  try {
    statement=connection.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"");
    if (rs.next()) {
      PreparedStatement preparedStatement=connection.prepareStatement(""String_Node_Str"",PreparedStatement.RETURN_GENERATED_KEYS);
      preparedStatement.setString(1,rs.getString(""String_Node_Str""));
      preparedStatement.setInt(2,rs.getInt(""String_Node_Str""));
      preparedStatement.setString(3,rs.getString(""String_Node_Str""));
      preparedStatement.setString(4,rs.getString(""String_Node_Str""));
      preparedStatement.setString(5,rs.getString(""String_Node_Str""));
      preparedStatement.setString(6,rs.getString(""String_Node_Str""));
      preparedStatement.setString(7,rs.getString(""String_Node_Str""));
      preparedStatement.setString(8,rs.getString(""String_Node_Str""));
      preparedStatement.setString(9,rs.getString(""String_Node_Str""));
      preparedStatement.executeUpdate();
      ResultSet rs2=preparedStatement.getGeneratedKeys();
      if (rs2.next()) {
        addedId=(int)rs2.getInt(1);
      }
      rs2.close();
      preparedStatement.close();
      URL url;
      HttpURLConnection conn=null;
      try {
        url=new URL(""String_Node_Str"");
        conn=(HttpURLConnection)url.openConnection();
        conn.setDoOutput(true);
        conn.setRequestMethod(""String_Node_Str"");
        conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
        String param=""String_Node_Str"" + addedId;
        conn.setDoOutput(true);
        DataOutputStream wr=new DataOutputStream(conn.getOutputStream());
        wr.writeBytes(param);
        wr.flush();
        wr.close();
        if (conn.getResponseCode() != HttpURLConnection.HTTP_CREATED) {
          throw new RuntimeException(""String_Node_Str"" + conn.getResponseCode());
        }
 else {
          session.setAttribute(""String_Node_Str"",addedId);
        }
        conn.disconnect();
        session.setAttribute(""String_Node_Str"",true);
        setLdsStarted(true);
        getInfoLDS();
      }
 catch (      MalformedURLException e) {
        logger.error(MessageCatalog._00014_MALFORMED_URL_EXCEPTION,e);
      }
catch (      IOException e) {
        logger.error(MessageCatalog._00012_IO_EXCEPTION,e);
      }
    }
    rs.close();
    statement.close();
    connection.close();
  }
 catch (  SQLException e) {
    logger.error(MessageCatalog._00011_SQL_EXCEPTION,e);
  }
}","/** 
 * Creates a job for the linked data server
 * @see
 * @since 1.0
 */
private void createJobLDS(){
  HttpSession session=ServletActionContext.getRequest().getSession();
  int addedId=0;
  Connection connection=null;
  connection=new DBConnectionManager().getConnection();
  Statement statement;
  try {
    statement=connection.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"");
    if (rs.next()) {
      PreparedStatement preparedStatement=connection.prepareStatement(""String_Node_Str"",PreparedStatement.RETURN_GENERATED_KEYS);
      preparedStatement.setString(1,rs.getString(""String_Node_Str""));
      preparedStatement.setInt(2,rs.getInt(""String_Node_Str""));
      preparedStatement.setString(3,rs.getString(""String_Node_Str""));
      preparedStatement.setString(4,rs.getString(""String_Node_Str""));
      preparedStatement.setString(5,rs.getString(""String_Node_Str""));
      preparedStatement.setString(6,rs.getString(""String_Node_Str""));
      preparedStatement.setString(7,rs.getString(""String_Node_Str""));
      preparedStatement.setString(8,rs.getString(""String_Node_Str""));
      preparedStatement.setString(9,rs.getString(""String_Node_Str""));
      preparedStatement.executeUpdate();
      ResultSet rs2=preparedStatement.getGeneratedKeys();
      if (rs2.next()) {
        addedId=(int)rs2.getInt(1);
      }
      rs2.close();
      preparedStatement.close();
      URL url;
      HttpURLConnection conn=null;
      try {
        url=new URL(""String_Node_Str"");
        conn=(HttpURLConnection)url.openConnection();
        conn.setDoOutput(true);
        conn.setRequestMethod(""String_Node_Str"");
        conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
        String param=""String_Node_Str"" + addedId;
        conn.setDoOutput(true);
        DataOutputStream wr=new DataOutputStream(conn.getOutputStream());
        wr.writeBytes(param);
        wr.flush();
        wr.close();
        if (conn.getResponseCode() != HttpURLConnection.HTTP_CREATED) {
          throw new RuntimeException(""String_Node_Str"" + conn.getResponseCode());
        }
 else {
          session.setAttribute(""String_Node_Str"",addedId);
        }
        conn.disconnect();
        session.setAttribute(""String_Node_Str"",true);
        setLdsStarted(true);
      }
 catch (      MalformedURLException e) {
        logger.error(MessageCatalog._00014_MALFORMED_URL_EXCEPTION,e);
      }
catch (      IOException e) {
        logger.error(MessageCatalog._00012_IO_EXCEPTION,e);
      }
    }
    rs.close();
    statement.close();
    connection.close();
  }
 catch (  SQLException e) {
    logger.error(MessageCatalog._00011_SQL_EXCEPTION,e);
  }
}",0.9959123002601264
81757,"/** 
 * Get the information from the REST service of linking
 * @throws IOException
 * @see
 * @since 1.0
 */
private void getInfo() throws IOException {
  HttpSession session=ServletActionContext.getRequest().getSession();
  setState((int)session.getAttribute(""String_Node_Str""));
  Locale locale=(Locale)session.getAttribute(""String_Node_Str"");
  if (locale == null) {
    locale=Locale.ROOT;
  }
  SimpleDateFormat dateFormatIn=new SimpleDateFormat(""String_Node_Str"");
  SimpleDateFormat dateFormatOut=new SimpleDateFormat(""String_Node_Str"",locale);
  int linkingJobId=(int)session.getAttribute(""String_Node_Str"");
  URL url=new URL(""String_Node_Str"" + linkingJobId);
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.setRequestMethod(""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  if (conn.getResponseCode() != 202) {
    logger.error(MessageCatalog._00015_HTTP_ERROR_CODE + conn.getResponseCode());
  }
  try {
    BufferedReader reader=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    JSONParser parser=new JSONParser();
    JSONObject jsonObject=(JSONObject)parser.parse(reader);
    JSONArray subjobs=(JSONArray)jsonObject.get(""String_Node_Str"");
    Iterator i=subjobs.iterator();
    HashMap<String,String> datasets=new HashMap<String,String>();
    while (i.hasNext()) {
      JSONObject innerObj=(JSONObject)i.next();
      String name=(String)innerObj.get(""String_Node_Str"");
      Long numLinksDataset=(Long)innerObj.get(""String_Node_Str"");
      datasets.put(name,numLinksDataset.toString());
    }
    this.setDatasets(datasets);
    Long numLinks=(Long)jsonObject.get(""String_Node_Str"");
    setNumLinks(numLinks.toString());
    String startDate=(String)jsonObject.get(""String_Node_Str"");
    if (startDate != null) {
      this.setStartDate(dateFormatOut.format(dateFormatIn.parse(startDate)));
    }
    String endDate=(String)jsonObject.get(""String_Node_Str"");
    if (endDate != null) {
      this.setEndDate(dateFormatOut.format(dateFormatIn.parse(endDate)));
    }
    String status=(String)jsonObject.get(""String_Node_Str"");
    if (status.equals(""String_Node_Str"")) {
      setStatus(getText(""String_Node_Str""));
    }
 else     if (status.equals(""String_Node_Str"")) {
      setStatus(getText(""String_Node_Str""));
    }
 else     if (status.equals(""String_Node_Str"")) {
      if (state == 4) {
        session.setAttribute(""String_Node_Str"",5);
      }
 else {
        session.setAttribute(""String_Node_Str"",3);
      }
      setStatus(getText(""String_Node_Str""));
      setState((int)session.getAttribute(""String_Node_Str""));
    }
  }
 catch (  Exception e) {
    logger.error(MessageCatalog._00016_ERROR_READING_XML,e);
    conn.disconnect();
  }
  conn.disconnect();
}","/** 
 * Get the information from the REST service of linking
 * @throws IOException
 * @see
 * @since 1.0
 */
private void getInfo() throws IOException {
  HttpSession session=ServletActionContext.getRequest().getSession();
  setState((int)session.getAttribute(""String_Node_Str""));
  Locale locale=(Locale)session.getAttribute(""String_Node_Str"");
  if (locale == null) {
    locale=Locale.ROOT;
  }
  SimpleDateFormat dateFormatIn=new SimpleDateFormat(""String_Node_Str"");
  SimpleDateFormat dateFormatOut=new SimpleDateFormat(""String_Node_Str"",locale);
  int linkingJobId=(int)session.getAttribute(""String_Node_Str"");
  URL url=new URL(""String_Node_Str"" + linkingJobId);
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.setRequestMethod(""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  if (conn.getResponseCode() != 202) {
    logger.error(MessageCatalog._00015_HTTP_ERROR_CODE + conn.getResponseCode());
  }
  try {
    BufferedReader reader=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    JSONParser parser=new JSONParser();
    JSONObject jsonObject=(JSONObject)parser.parse(reader);
    JSONArray subjobs=(JSONArray)jsonObject.get(""String_Node_Str"");
    Iterator i=subjobs.iterator();
    HashMap<String,String> datasets=new HashMap<String,String>();
    while (i.hasNext()) {
      JSONObject innerObj=(JSONObject)i.next();
      String name=(String)innerObj.get(""String_Node_Str"");
      Long numLinksDataset=(Long)innerObj.get(""String_Node_Str"");
      datasets.put(name,numLinksDataset.toString());
    }
    this.setDatasets(datasets);
    Long numLinks=(Long)jsonObject.get(""String_Node_Str"");
    setNumLinks(numLinks.toString());
    String startDate=(String)jsonObject.get(""String_Node_Str"");
    if (startDate != null) {
      this.setStartDate(dateFormatOut.format(dateFormatIn.parse(startDate)));
    }
    String endDate=(String)jsonObject.get(""String_Node_Str"");
    if (endDate != null) {
      this.setEndDate(dateFormatOut.format(dateFormatIn.parse(endDate)));
    }
    String status=(String)jsonObject.get(""String_Node_Str"");
    if (status.equals(""String_Node_Str"")) {
      setStatus(getText(""String_Node_Str""));
    }
 else     if (status.equals(""String_Node_Str"")) {
      setStatus(getText(""String_Node_Str""));
    }
 else     if (status.equals(""String_Node_Str"")) {
      if (state == 4) {
        session.setAttribute(""String_Node_Str"",5);
      }
 else       if (state != 5) {
        session.setAttribute(""String_Node_Str"",3);
      }
      setStatus(getText(""String_Node_Str""));
      setState((int)session.getAttribute(""String_Node_Str""));
    }
  }
 catch (  Exception e) {
    logger.error(MessageCatalog._00016_ERROR_READING_XML,e);
    conn.disconnect();
  }
  conn.disconnect();
}",0.9960601719197708
81758,"/** 
 * Get the information from the REST service of linking
 * @throws IOException
 * @see
 * @since 1.0
 */
private void getInfo() throws IOException {
  HttpSession session=ServletActionContext.getRequest().getSession();
  Locale locale=(Locale)session.getAttribute(""String_Node_Str"");
  if (locale == null) {
    locale=Locale.ROOT;
  }
  SimpleDateFormat dateFormatIn=new SimpleDateFormat(""String_Node_Str"");
  SimpleDateFormat dateFormatOut=new SimpleDateFormat(""String_Node_Str"",locale);
  int fileToLinkId=(int)session.getAttribute(""String_Node_Str"");
  URL url=new URL(""String_Node_Str"" + fileToLinkId);
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.setRequestMethod(""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  if (conn.getResponseCode() != 202) {
    logger.error(MessageCatalog._00015_HTTP_ERROR_CODE + conn.getResponseCode());
  }
  try {
    BufferedReader reader=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    JSONParser parser=new JSONParser();
    JSONObject jsonObject=(JSONObject)parser.parse(reader);
    JSONArray subjobs=(JSONArray)jsonObject.get(""String_Node_Str"");
    Iterator i=subjobs.iterator();
    HashMap<String,String> datasets=new HashMap<String,String>();
    while (i.hasNext()) {
      JSONObject innerObj=(JSONObject)i.next();
      String name=(String)innerObj.get(""String_Node_Str"");
      Long numLinksDataset=(Long)innerObj.get(""String_Node_Str"");
      datasets.put(name,numLinksDataset.toString());
    }
    this.setDatasets(datasets);
    Long numLinks=(Long)jsonObject.get(""String_Node_Str"");
    setNumLinks(numLinks.toString());
    String startDate=(String)jsonObject.get(""String_Node_Str"");
    if (startDate != null) {
      startDate=(dateFormatOut.format(dateFormatIn.parse(startDate)));
      this.setStartDate(dateFormatOut.format(dateFormatIn.parse(startDate)));
    }
    String endDate=(String)jsonObject.get(""String_Node_Str"");
    if (endDate != null) {
      endDate=(dateFormatOut.format(dateFormatIn.parse(endDate)));
      this.setEndDate(dateFormatOut.format(dateFormatIn.parse(endDate)));
    }
    String status=(String)jsonObject.get(""String_Node_Str"");
    if (status.equals(""String_Node_Str"")) {
      setStatus(getText(""String_Node_Str""));
    }
 else     if (status.equals(""String_Node_Str"")) {
      setStatus(getText(""String_Node_Str""));
    }
 else     if (status.equals(""String_Node_Str"")) {
      setStatus(getText(""String_Node_Str""));
    }
  }
 catch (  Exception e) {
    logger.error(MessageCatalog._00016_ERROR_READING_XML,e);
    conn.disconnect();
  }
  conn.disconnect();
}","/** 
 * Get the information from the REST service of linking
 * @throws IOException
 * @see
 * @since 1.0
 */
private void getInfo() throws IOException {
  HttpSession session=ServletActionContext.getRequest().getSession();
  Locale locale=(Locale)session.getAttribute(""String_Node_Str"");
  if (locale == null) {
    locale=Locale.ROOT;
  }
  SimpleDateFormat dateFormatIn=new SimpleDateFormat(""String_Node_Str"");
  SimpleDateFormat dateFormatOut=new SimpleDateFormat(""String_Node_Str"",locale);
  int fileToLinkId=(int)session.getAttribute(""String_Node_Str"");
  URL url=new URL(""String_Node_Str"" + fileToLinkId);
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.setRequestMethod(""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  if (conn.getResponseCode() != 202) {
    logger.error(MessageCatalog._00015_HTTP_ERROR_CODE + conn.getResponseCode());
  }
  try {
    BufferedReader reader=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    JSONParser parser=new JSONParser();
    JSONObject jsonObject=(JSONObject)parser.parse(reader);
    JSONArray subjobs=(JSONArray)jsonObject.get(""String_Node_Str"");
    Iterator i=subjobs.iterator();
    HashMap<String,String> datasets=new HashMap<String,String>();
    while (i.hasNext()) {
      JSONObject innerObj=(JSONObject)i.next();
      String name=(String)innerObj.get(""String_Node_Str"");
      Long numLinksDataset=(Long)innerObj.get(""String_Node_Str"");
      datasets.put(name,numLinksDataset.toString());
    }
    this.setDatasets(datasets);
    Long numLinks=(Long)jsonObject.get(""String_Node_Str"");
    setNumLinks(numLinks.toString());
    String startDate=(String)jsonObject.get(""String_Node_Str"");
    if (startDate != null) {
      this.setStartDate(dateFormatOut.format(dateFormatIn.parse(startDate)));
    }
    String endDate=(String)jsonObject.get(""String_Node_Str"");
    if (endDate != null) {
      this.setEndDate(dateFormatOut.format(dateFormatIn.parse(endDate)));
    }
    String status=(String)jsonObject.get(""String_Node_Str"");
    if (status.equals(""String_Node_Str"")) {
      setStatus(getText(""String_Node_Str""));
    }
 else     if (status.equals(""String_Node_Str"")) {
      setStatus(getText(""String_Node_Str""));
    }
 else     if (status.equals(""String_Node_Str"")) {
      setStatus(getText(""String_Node_Str""));
    }
  }
 catch (  Exception e) {
    logger.error(MessageCatalog._00016_ERROR_READING_XML,e);
    conn.disconnect();
  }
  conn.disconnect();
}",0.9732558139534884
81759,"/** 
 * Creates a new job on the RDF-izer.
 * @param id the job identifier associated with this instance.
 * @return a response which includes the URI of the new job.
 */
@PUT @Path(""String_Node_Str"") public Response newJob(@PathParam(""String_Node_Str"") final Integer id){
  if (!enabled) {
    return Response.status(Status.NOT_ACCEPTABLE).build();
  }
  LOGGER.debug(MessageCatalog._00029_NEW_JOB_REQUEST);
  if (id == null) {
    LOGGER.error(MessageCatalog._00028_MISSING_INPUT_PARAM,""String_Node_Str"");
    return Response.status(Status.BAD_REQUEST).build();
  }
  String path=null;
  try {
    final JobInstance configuration=cache.getJobInstance(id);
    if (configuration == null) {
      LOGGER.error(MessageCatalog._00032_JOB_CONFIGURATION_NOT_FOUND,id);
      return Response.status(Status.NOT_FOUND).build();
    }
    final File datafile=new File(configuration.getDatafile());
    if (!datafile.canWrite()) {
      LOGGER.error(MessageCatalog._00020_WRONG_FILE_PERMISSIONS,datafile.getAbsolutePath());
      return Response.status(Status.BAD_REQUEST).build();
    }
    path=datafile.getAbsolutePath();
    LOGGER.debug(MessageCatalog._00030_NEW_JOB_REQUEST_DEBUG,id,path);
    final String listenPath=listenPath(configuration.getFormat());
    if (listenPath == null) {
      LOGGER.error(MessageCatalog._00033_UNSUPPORTED_FORMAT,configuration.getFormat(),id);
      return Response.status(Status.BAD_REQUEST).build();
    }
    final java.nio.file.Path source=Paths.get(path);
    final java.nio.file.Path target=Paths.get(listenPath + ""String_Node_Str"" + rdfizerDataFilename(datafile,id));
    try {
      final JobResource newJobResource=new JobResource(configuration);
      newJobResource.setRunning(true);
      ManagementRegistrar.registerJob(newJobResource);
      jobRegistry.addJobResource(newJobResource);
    }
 catch (    JMException exception) {
      LOGGER.error(MessageCatalog._00045_MX_JOB_RESOURCE_REGISTRATION_FAILED,configuration.getId());
    }
    Files.move(source,target,REPLACE_EXISTING);
    configuration.setStartDate(new Timestamp(System.currentTimeMillis()));
    jobInstanceRepository.save(configuration);
    runningJobCount.incrementAndGet();
    return Response.created(uriInfo.getAbsolutePathBuilder().build()).build();
  }
 catch (  final IOException exception) {
    LOGGER.error(MessageCatalog._00030_NEW_JOB_REQUEST_DEBUG,id,path);
    return Response.serverError().build();
  }
catch (  final DataAccessException exception) {
    LOGGER.error(MessageCatalog._00031_DATA_ACCESS_FAILURE,exception);
    return Response.serverError().build();
  }
}","/** 
 * Creates a new job on the RDF-izer.
 * @param id the job identifier associated with this instance.
 * @return a response which includes the URI of the new job.
 */
@PUT @Path(""String_Node_Str"") public Response newJob(@PathParam(""String_Node_Str"") final Integer id){
  if (!enabled) {
    return Response.status(Status.NOT_ACCEPTABLE).build();
  }
  LOGGER.debug(MessageCatalog._00029_NEW_JOB_REQUEST);
  if (id == null) {
    LOGGER.error(MessageCatalog._00028_MISSING_INPUT_PARAM,""String_Node_Str"");
    return Response.status(Status.BAD_REQUEST).build();
  }
  String path=null;
  try {
    final JobInstance configuration=cache.getJobInstance(id);
    if (configuration == null) {
      LOGGER.error(MessageCatalog._00032_JOB_INSTANCE_NOT_FOUND,id);
      return Response.status(Status.NOT_FOUND).build();
    }
    final File datafile=new File(configuration.getDatafile());
    if (!datafile.canWrite()) {
      LOGGER.error(MessageCatalog._00020_WRONG_FILE_PERMISSIONS,datafile.getAbsolutePath());
      return Response.status(Status.BAD_REQUEST).build();
    }
    path=datafile.getAbsolutePath();
    LOGGER.debug(MessageCatalog._00030_NEW_JOB_REQUEST_DEBUG,id,path);
    final String listenPath=listenPath(configuration.getFormat());
    if (listenPath == null) {
      LOGGER.error(MessageCatalog._00033_UNSUPPORTED_FORMAT,configuration.getFormat(),id);
      return Response.status(Status.BAD_REQUEST).build();
    }
    final java.nio.file.Path source=Paths.get(path);
    final java.nio.file.Path target=Paths.get(listenPath + ""String_Node_Str"" + rdfizerDataFilename(datafile,id));
    try {
      final JobResource newJobResource=new JobResource(configuration);
      newJobResource.setRunning(true);
      ManagementRegistrar.registerJob(newJobResource);
      jobRegistry.addJobResource(newJobResource);
    }
 catch (    JMException exception) {
      LOGGER.error(MessageCatalog._00045_MX_JOB_RESOURCE_REGISTRATION_FAILED,configuration.getId());
    }
    Files.move(source,target,REPLACE_EXISTING);
    configuration.setStartDate(new Timestamp(System.currentTimeMillis()));
    jobInstanceRepository.save(configuration);
    runningJobCount.incrementAndGet();
    return Response.created(uriInfo.getAbsolutePathBuilder().build()).build();
  }
 catch (  final IOException exception) {
    LOGGER.error(MessageCatalog._00030_NEW_JOB_REQUEST_DEBUG,id,path);
    return Response.serverError().build();
  }
catch (  final DataAccessException exception) {
    LOGGER.error(MessageCatalog._00031_DATA_ACCESS_FAILURE,exception);
    return Response.serverError().build();
  }
}",0.9963412285769304
81760,"/** 
 * Returns a detailed summary of the job associated with the given identifier.
 * @param id the job identifier.
 * @return a detailed summary of the job associated with the given identifier.
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.TEXT_XML,MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response getJob(@PathParam(""String_Node_Str"") final Integer id){
  final JobInstance configuration=cache.getJobInstance(id);
  if (configuration == null) {
    LOGGER.error(MessageCatalog._00032_JOB_CONFIGURATION_NOT_FOUND,id);
    return Response.status(Status.NOT_FOUND).build();
  }
  final ObjectName objectName=ManagementRegistrar.createJobObjectName(configuration.getFormat(),id);
  if (ManagementRegistrar.isAlreadyRegistered(objectName)) {
    final JobResource resource=jobRegistry.getJobResource(id);
    return Response.ok().entity(resource).build();
  }
 else {
    final JobResource resource=new JobResource(configuration);
    return Response.ok().entity(resource).build();
  }
}","/** 
 * Returns a detailed summary of the job associated with the given identifier.
 * @param id the job identifier.
 * @return a detailed summary of the job associated with the given identifier.
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.TEXT_XML,MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response getJob(@PathParam(""String_Node_Str"") final Integer id){
  final JobInstance instance=cache.getJobInstance(id);
  if (instance == null) {
    LOGGER.error(MessageCatalog._00032_JOB_INSTANCE_NOT_FOUND,id);
    return Response.status(Status.NOT_FOUND).build();
  }
  final ObjectName objectName=ManagementRegistrar.createJobObjectName(instance.getFormat(),id);
  if (ManagementRegistrar.isAlreadyRegistered(objectName)) {
    final JobResource resource=jobRegistry.getJobResource(id);
    return Response.ok().entity(resource).build();
  }
 else {
    final JobStats stats=jobStatsRepository.findOne(id);
    if (stats == null) {
      return Response.status(Status.NOT_FOUND).build();
    }
    stats.setInstance(instance);
    return Response.ok().entity(stats).build();
  }
}",0.858085808580858
81761,"@Override public final void process(final Exchange exchange) throws Exception {
  final long begin=System.currentTimeMillis();
  final Message in=exchange.getIn();
  if (in.getBody() == null) {
    return;
  }
  final String format=in.getHeader(Constants.FORMAT_ATTRIBUTE_NAME,String.class);
  final Integer jobId=in.getHeader(Constants.JOB_ID_ATTRIBUTE_NAME,Integer.class);
  final JobInstance configuration=cache.getJobInstance(jobId);
  if (configuration == null) {
    log.error(MessageCatalog._00038_UNKNOWN_JOB_ID,jobId);
    throw new IllegalArgumentException(String.valueOf(jobId));
  }
  VelocityContext velocityContext=null;
  String triples=null;
  long elapsed=0;
  try {
    final Template template=velocityEngine.getTemplate(templateName(format));
    if (template == null) {
      log.error(MessageCatalog._00040_TEMPLATE_NOT_FOUND,format);
      return;
    }
    velocityContext=contexts.get();
    velocityContext.put(Constants.JOB_CONFIGURATION_ATTRIBUTE_NAME,configuration);
    populateVelocityContext(velocityContext,in,configuration);
    final Writer sw=new StringWriter();
    final Writer w=new BufferedWriter(sw);
    template.merge(velocityContext,w);
    w.flush();
    elapsed=begin - System.currentTimeMillis();
    triples=sw.toString();
    in.setBody(triples);
  }
 catch (  final ResourceNotFoundException exception) {
    log.error(MessageCatalog._00040_TEMPLATE_NOT_FOUND,exception,format);
  }
 finally {
    incrementProcessedRecordsCount(jobId);
    if (triples != null) {
      incrementTriplesStatsAndElapsed(jobId,triples,elapsed);
    }
    if (velocityContext != null) {
      velocityContext.remove(Constants.MAIN_SUBJECT_ATTRIBUTE_NAME);
      velocityContext.remove(Constants.ROOT_ELEMENT_ATTRIBUTE_NAME);
      velocityContext.remove(Constants.JOB_CONFIGURATION_ATTRIBUTE_NAME);
    }
  }
}","@Override public final void process(final Exchange exchange) throws Exception {
  final long begin=System.currentTimeMillis();
  final Message in=exchange.getIn();
  if (in.getBody() == null) {
    return;
  }
  final String format=in.getHeader(Constants.FORMAT_ATTRIBUTE_NAME,String.class);
  final Integer jobId=in.getHeader(Constants.JOB_ID_ATTRIBUTE_NAME,Integer.class);
  final JobInstance configuration=cache.getJobInstance(jobId);
  if (configuration == null) {
    log.error(MessageCatalog._00038_UNKNOWN_JOB_ID,jobId);
    throw new IllegalArgumentException(String.valueOf(jobId));
  }
  VelocityContext velocityContext=null;
  String triples=null;
  long elapsed=0;
  try {
    final Template template=velocityEngine.getTemplate(templateName(format));
    if (template == null) {
      log.error(MessageCatalog._00040_TEMPLATE_NOT_FOUND,format);
      return;
    }
    velocityContext=contexts.get();
    velocityContext.put(Constants.JOB_CONFIGURATION_ATTRIBUTE_NAME,configuration);
    populateVelocityContext(velocityContext,in,configuration);
    final Writer sw=new StringWriter();
    final Writer w=new BufferedWriter(sw);
    template.merge(velocityContext,w);
    w.flush();
    elapsed=System.currentTimeMillis() - begin;
    triples=sw.toString();
    in.setBody(triples);
  }
 catch (  final ResourceNotFoundException exception) {
    log.error(MessageCatalog._00040_TEMPLATE_NOT_FOUND,exception,format);
  }
 finally {
    incrementJobStatsAndElapsed(jobId,triples,elapsed);
    if (velocityContext != null) {
      velocityContext.remove(Constants.MAIN_SUBJECT_ATTRIBUTE_NAME);
      velocityContext.remove(Constants.ROOT_ELEMENT_ATTRIBUTE_NAME);
      velocityContext.remove(Constants.JOB_CONFIGURATION_ATTRIBUTE_NAME);
    }
    checkForCompleteness(jobId);
  }
}",0.9539818131716726
81762,"/** 
 * Marks a given job as completed.
 * @param job the job.
 */
void markJobAsCompleted(final JobResource job){
  final JobInstance instance=cache.getJobInstance(job.getID());
  instance.setEndDate(new Timestamp(System.currentTimeMillis()));
  jobInstanceRepository.save(instance);
}","/** 
 * Marks a given job as completed.
 * @param job the job.
 */
void markJobAsCompleted(final JobResource job){
  final JobInstance instance=cache.getJobInstance(job.getID());
  instance.setEndDate(new Timestamp(System.currentTimeMillis()));
  jobInstanceRepository.save(instance);
  log.info(MessageCatalog._00048_JOB_COMPLETED,job.getID());
}",0.9036334913112164
81763,"@XmlElement(name=""String_Node_Str"") @Override public double getRecordsThroughput(){
  return totalProcessedRecordsCount.doubleValue() / (elapsed.get() / 1000);
}","@XmlElement(name=""String_Node_Str"") @Override public double getRecordsThroughput(){
  return elapsed.get() != 0 ? totalProcessedRecordsCount.doubleValue() / ((elapsed.get() / 1000)) : 0;
}",0.9226361031518624
81764,"@XmlElement(name=""String_Node_Str"") @Override public double getStatementsThroughput(){
  return totalOutputStatementsCount.doubleValue() / (elapsed.get() / 1000);
}","@XmlElement(name=""String_Node_Str"") @Override public double getStatementsThroughput(){
  return elapsed.get() != 0 ? totalOutputStatementsCount.doubleValue() / ((elapsed.get() / 1000)) : 0;
}",0.923943661971831
81765,"@XmlElement(name=""String_Node_Str"") @Override public boolean isCompleted(){
  return totalRecordsCount != totalProcessedRecordsCount.get();
}","@XmlElement(name=""String_Node_Str"") @Override public boolean isCompleted(){
  return totalRecordsCount == totalProcessedRecordsCount.get();
}",0.9929078014184396
81766,"/** 
 * Returns the total records count of the owning job.
 * @return the total records count of the owning job.
 */
public int getTotalRecordsCount(){
  return totalRecordsCount;
}","/** 
 * Returns the total records count of the owning job.
 * @return the total records count of the owning job.
 */
@XmlElement(name=""String_Node_Str"") public int getTotalRecordsCount(){
  return totalRecordsCount;
}",0.9095477386934674
81767,"/** 
 * Returns the identifier of this job configuration.
 * @return the identifier of this job configuration.
 */
public Integer getId(){
  return id;
}","/** 
 * Returns the identifier of this job configuration.
 * @return the identifier of this job configuration.
 */
@XmlElement(name=""String_Node_Str"") public Integer getId(){
  return id;
}",0.8947368421052632
81768,"/** 
 * Returns the average triples production throughput in terms of triples / sec.
 * @return the average triples production throughput in terms of triples / sec.
 */
public BigDecimal getTriplesThroughput(){
  return triplesThroughput;
}","/** 
 * Returns the average triples production throughput in terms of triples / sec.
 * @return the average triples production throughput in terms of triples / sec.
 */
@XmlElement(name=""String_Node_Str"") public BigDecimal getTriplesThroughput(){
  return triplesThroughput;
}",0.9302325581395348
81769,"/** 
 * Returns the record processing throughput in terms of rec / sec.
 * @return the record processing throughput in terms of rec / sec.
 */
public BigDecimal getRecordsThroughput(){
  return recordsThroughput;
}","/** 
 * Returns the record processing throughput in terms of rec / sec.
 * @return the record processing throughput in terms of rec / sec.
 */
@XmlElement(name=""String_Node_Str"") public BigDecimal getRecordsThroughput(){
  return recordsThroughput;
}",0.9224137931034484
81770,"@XmlElement(name=""String_Node_Str"") public boolean isRunning(){
  return true;
}","/** 
 * Returns true if the job is running.
 * @see JobResource#isRunning()
 * @return true if the job is running.
 */
@XmlElement(name=""String_Node_Str"") public boolean isRunning(){
  return true;
}",0.5734767025089605
81771,"@XmlElement(name=""String_Node_Str"") public String getFormat(){
  return instance != null ? instance.getFormat() : ""String_Node_Str"";
}","/** 
 * Returns the format that has been associated with this job.
 * @see JobResource#getFormat()
 * @return the format that has been associated with this job.
 */
@XmlElement(name=""String_Node_Str"") public String getFormat(){
  return instance != null ? instance.getFormat() : ""String_Node_Str"";
}",0.6189376443418014
81772,"/** 
 * Returns the total number of triples produced by the owning job.
 * @return the total number of triples produced by the owning job.
 */
public int getTotalTriplesProduced(){
  return totalTriplesProduced;
}","/** 
 * Returns the total number of triples produced by the owning job.
 * @return the total number of triples produced by the owning job.
 */
@XmlElement(name=""String_Node_Str"") public int getTotalTriplesProduced(){
  return totalTriplesProduced;
}",0.922077922077922
81773,"@XmlElement(name=""String_Node_Str"") public boolean isCompleted(){
  return true;
}","/** 
 * Returns true if the job has been completed.
 * @see JobResource#isCompleted()
 * @return true if the job has been completed.
 */
@XmlElement(name=""String_Node_Str"") public boolean isCompleted(){
  return true;
}",0.5448504983388704
81774,"@SubscribeEvent public void tickClient(ClientTickEvent event){
  if (event.phase == Phase.START) {
    try {
      ClientProxy.clientTickHandler.onTickInGame();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@SubscribeEvent public void tickClient(ClientTickEvent event){
  if (event.phase == Phase.START) {
    try {
      ClientProxy.clientTickHandler.onTickInGame();
      if (extraGrassLast != ConfigFoliage.extraGrass) {
        extraGrassLast=ConfigFoliage.extraGrass;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.804159445407279
81775,"@Mod.EventHandler public void postInit(FMLPostInitializationEvent event){
  proxy.postInit();
}","@Mod.EventHandler public void postInit(FMLPostInitializationEvent event){
  proxy.postInit();
  EventHandlerFML.extraGrassLast=ConfigFoliage.extraGrass;
}",0.7630522088353414
81776,"public static boolean profileForFoliageShader(int radialRange,boolean trimRange){
  World world=Minecraft.getMinecraft().world;
  Entity entityIn=Minecraft.getMinecraft().player;
  BlockPos pos=entityIn.getPosition();
  boolean add=true;
  boolean trim=true;
  int xzRange=radialRange;
  int yRange=radialRange;
  Random rand=new Random();
  double centerX=entityIn.posX;
  double centerY=entityIn.posY;
  double centerZ=entityIn.posZ;
  for (  TextureAtlasSprite sprite : ExtendedRenderer.foliageRenderer.foliage.keySet()) {
    InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(sprite);
    mesh.lastAdditionCount=0;
    mesh.lastRemovalCount=0;
  }
  if (trim) {
    Iterator<Map.Entry<BlockPos,FoliageLocationData>> it=lookupPosToFoliage.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<BlockPos,FoliageLocationData> entry=it.next();
      if (!entry.getValue().foliageReplacer.validFoliageSpot(world,entry.getKey().down())) {
        it.remove();
        for (        Foliage entry2 : entry.getValue().listFoliage) {
          entry.getValue().foliageReplacer.markMeshesDirty();
          ExtendedRenderer.foliageRenderer.getFoliageForSprite(entry2.particleTexture).remove(entry2);
          MeshBufferManagerFoliage.getMesh(entry2.particleTexture).lastRemovalCount++;
        }
      }
 else       if (trimRange && entry.getKey().distanceSq(centerX,centerY,centerZ) > radialRange * radialRange) {
        it.remove();
        for (        Foliage entry2 : entry.getValue().listFoliage) {
          entry.getValue().foliageReplacer.markMeshesDirty();
          ExtendedRenderer.foliageRenderer.getFoliageForSprite(entry2.particleTexture).remove(entry2);
          MeshBufferManagerFoliage.getMesh(entry2.particleTexture).lastRemovalCount++;
        }
      }
    }
  }
  if (add) {
    for (int x=-xzRange; x <= xzRange; x++) {
      for (int z=-xzRange; z <= xzRange; z++) {
        for (int y=-yRange; y <= yRange; y++) {
          BlockPos posScan=pos.add(x,y,z);
          if (!lookupPosToFoliage.containsKey(posScan)) {
            if (posScan.distanceSq(centerX,centerY,centerZ) <= radialRange * radialRange) {
              boolean tryAll=true;
              if (tryAll) {
                for (                FoliageReplacerBase replacer : listFoliageReplacers) {
                  if (replacer.validFoliageSpot(entityIn.world,posScan.down())) {
                    replacer.addForPos(entityIn.world,posScan);
                    replacer.markMeshesDirty();
                    for (                    TextureAtlasSprite sprite : replacer.sprites) {
                      MeshBufferManagerFoliage.getMesh(sprite).lastAdditionCount++;
                    }
                  }
                }
              }
 else {
                int randTry=rand.nextInt(listFoliageReplacers.size());
                FoliageReplacerBase replacer=listFoliageReplacers.get(randTry);
                if (replacer.validFoliageSpot(entityIn.world,posScan.down())) {
                  replacer.addForPos(entityIn.world,posScan);
                  replacer.markMeshesDirty();
                }
              }
            }
          }
 else {
          }
        }
      }
    }
  }
  try {
    for (    Map.Entry<TextureAtlasSprite,List<Foliage>> entry : ExtendedRenderer.foliageRenderer.foliage.entrySet()) {
      InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(entry.getKey());
      if (mesh.dirtyVBO2Flag) {
        mesh.interpPosXThread=entityIn.posX;
        mesh.interpPosYThread=entityIn.posY;
        mesh.interpPosZThread=entityIn.posZ;
        updateVBO2Threaded(entry.getKey());
      }
    }
  }
  finally {
    return true;
  }
}","public static boolean profileForFoliageShader(int radialRange,boolean trimRange){
  World world=Minecraft.getMinecraft().world;
  Entity entityIn=Minecraft.getMinecraft().player;
  BlockPos pos=entityIn.getPosition();
  boolean add=true;
  boolean trim=true;
  int xzRange=radialRange;
  int yRange=radialRange;
  Random rand=new Random();
  double centerX=entityIn.posX;
  double centerY=entityIn.posY;
  double centerZ=entityIn.posZ;
  for (  TextureAtlasSprite sprite : ExtendedRenderer.foliageRenderer.foliage.keySet()) {
    InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(sprite);
    mesh.lastAdditionCount=0;
    mesh.lastRemovalCount=0;
  }
  if (trim) {
    Iterator<Map.Entry<BlockPos,FoliageLocationData>> it=lookupPosToFoliage.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<BlockPos,FoliageLocationData> entry=it.next();
      if (!entry.getValue().foliageReplacer.isActive() || !entry.getValue().foliageReplacer.validFoliageSpot(world,entry.getKey().down())) {
        it.remove();
        for (        Foliage entry2 : entry.getValue().listFoliage) {
          entry.getValue().foliageReplacer.markMeshesDirty();
          ExtendedRenderer.foliageRenderer.getFoliageForSprite(entry2.particleTexture).remove(entry2);
          MeshBufferManagerFoliage.getMesh(entry2.particleTexture).lastRemovalCount++;
        }
      }
 else       if (trimRange && entry.getKey().distanceSq(centerX,centerY,centerZ) > radialRange * radialRange) {
        it.remove();
        for (        Foliage entry2 : entry.getValue().listFoliage) {
          entry.getValue().foliageReplacer.markMeshesDirty();
          ExtendedRenderer.foliageRenderer.getFoliageForSprite(entry2.particleTexture).remove(entry2);
          MeshBufferManagerFoliage.getMesh(entry2.particleTexture).lastRemovalCount++;
        }
      }
    }
  }
  if (add) {
    for (int x=-xzRange; x <= xzRange; x++) {
      for (int z=-xzRange; z <= xzRange; z++) {
        for (int y=-yRange; y <= yRange; y++) {
          BlockPos posScan=pos.add(x,y,z);
          if (!lookupPosToFoliage.containsKey(posScan)) {
            if (posScan.distanceSq(centerX,centerY,centerZ) <= radialRange * radialRange) {
              boolean tryAll=true;
              if (tryAll) {
                for (                FoliageReplacerBase replacer : listFoliageReplacers) {
                  if (replacer.isActive() && replacer.validFoliageSpot(entityIn.world,posScan.down())) {
                    replacer.addForPos(entityIn.world,posScan);
                    replacer.markMeshesDirty();
                    for (                    TextureAtlasSprite sprite : replacer.sprites) {
                      MeshBufferManagerFoliage.getMesh(sprite).lastAdditionCount++;
                    }
                  }
                }
              }
 else {
                int randTry=rand.nextInt(listFoliageReplacers.size());
                FoliageReplacerBase replacer=listFoliageReplacers.get(randTry);
                if (replacer.isActive() && replacer.validFoliageSpot(entityIn.world,posScan.down())) {
                  replacer.addForPos(entityIn.world,posScan);
                  replacer.markMeshesDirty();
                }
              }
            }
          }
 else {
          }
        }
      }
    }
  }
  try {
    for (    Map.Entry<TextureAtlasSprite,List<Foliage>> entry : ExtendedRenderer.foliageRenderer.foliage.entrySet()) {
      InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(entry.getKey());
      if (mesh.dirtyVBO2Flag) {
        mesh.interpPosXThread=entityIn.posX;
        mesh.interpPosYThread=entityIn.posY;
        mesh.interpPosZThread=entityIn.posZ;
        updateVBO2Threaded(entry.getKey());
      }
    }
  }
  finally {
    return true;
  }
}",0.9873825503355704
81777,"/** 
 * Called from TextureStitchEvent.Post
 */
public static void setupReplacers(){
  CULog.log(""String_Node_Str"");
  boolean test=false;
  listFoliageReplacers.clear();
  HashMap<Comparable,String> lookup=new HashMap<>();
  lookup.clear();
  lookup.put(BlockPlanks.EnumType.OAK,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.SPRUCE,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.BIRCH,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.JUNGLE,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.ACACIA,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.DARK_OAK,""String_Node_Str"");
  for (  Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
    boolean colorize=false;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.SAPLING.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setStateSensitive(true).setBiomeColorize(colorize).addComparable(BlockSapling.TYPE,entrySet.getKey()));
  }
  lookup.clear();
  lookup.put(BlockTallGrass.EnumType.DEAD_BUSH,""String_Node_Str"");
  lookup.put(BlockTallGrass.EnumType.GRASS,""String_Node_Str"");
  lookup.put(BlockTallGrass.EnumType.FERN,""String_Node_Str"");
  for (  Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
    boolean colorize=entrySet.getKey() == BlockTallGrass.EnumType.DEAD_BUSH ? false : true;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setStateSensitive(true).setRandomizeCoord(false).setBiomeColorize(colorize).addComparable(BlockTallGrass.TYPE,entrySet.getKey()));
  }
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.YELLOW_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setRandomizeCoord(false).setBiomeColorize(false));
  lookup.clear();
  lookup.put(BlockFlower.EnumFlowerType.ALLIUM,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.BLUE_ORCHID,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.HOUSTONIA,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.ORANGE_TULIP,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.OXEYE_DAISY,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.PINK_TULIP,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.POPPY,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.RED_TULIP,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.WHITE_TULIP,""String_Node_Str"");
  for (  Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
    boolean colorize=false;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.RED_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).setBiomeColorize(colorize).addComparable(Blocks.RED_FLOWER.getTypeProperty(),entrySet.getKey()));
  }
  for (int i=0; i < 8; i++) {
    int temp=i;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.WHEAT.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + temp)).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,i));
  }
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.REEDS.getDefaultState(),-1).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBaseMaterial(Material.SAND).setBiomeColorize(true).setRandomizeCoord(false).setLooseness(0.3F));
  HashMap<Integer,Integer> lookupStateToModel=new HashMap<>();
  lookupStateToModel.put(0,0);
  lookupStateToModel.put(1,0);
  lookupStateToModel.put(2,1);
  lookupStateToModel.put(3,1);
  lookupStateToModel.put(4,2);
  lookupStateToModel.put(5,2);
  lookupStateToModel.put(6,2);
  lookupStateToModel.put(7,3);
  for (  Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.CARROTS.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,entrySet.getKey()));
  }
  for (  Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.POTATOES.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,entrySet.getKey()));
  }
  for (int i=0; i < 4; i++) {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.BEETROOTS.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + i)).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockBeetroot.BEETROOT_AGE,i));
  }
  List<TextureAtlasSprite> sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.GRASS));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.ROSE));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(true).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.FERN));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.PAEONIA));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.SYRINGA));
  if (ConfigFoliage.extraGrass) {
    listFoliageReplacers.add(new FoliageReplacerCrossGrass(Blocks.AIR.getDefaultState()).setSprite(getMeshAndSetupSprite(ExtendedRenderer.modid + ""String_Node_Str"")).setRandomizeCoord(true).setBiomeColorize(true));
  }
  boolean extraLeaves=false;
  if (extraLeaves) {
    listFoliageReplacers.add(new FoliageReplacerCrossLeaves(Blocks.LEAVES.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBiomeColorize(true));
  }
}","/** 
 * Called from TextureStitchEvent.Post
 */
public static void setupReplacers(){
  CULog.log(""String_Node_Str"");
  boolean test=false;
  listFoliageReplacers.clear();
  HashMap<Comparable,String> lookup=new HashMap<>();
  lookup.clear();
  lookup.put(BlockPlanks.EnumType.OAK,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.SPRUCE,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.BIRCH,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.JUNGLE,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.ACACIA,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.DARK_OAK,""String_Node_Str"");
  for (  Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
    boolean colorize=false;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.SAPLING.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setStateSensitive(true).setBiomeColorize(colorize).addComparable(BlockSapling.TYPE,entrySet.getKey()));
  }
  lookup.clear();
  lookup.put(BlockTallGrass.EnumType.DEAD_BUSH,""String_Node_Str"");
  lookup.put(BlockTallGrass.EnumType.GRASS,""String_Node_Str"");
  lookup.put(BlockTallGrass.EnumType.FERN,""String_Node_Str"");
  for (  Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
    boolean colorize=entrySet.getKey() == BlockTallGrass.EnumType.DEAD_BUSH ? false : true;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setStateSensitive(true).setRandomizeCoord(false).setBiomeColorize(colorize).addComparable(BlockTallGrass.TYPE,entrySet.getKey()));
  }
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.YELLOW_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setRandomizeCoord(false).setBiomeColorize(false));
  lookup.clear();
  lookup.put(BlockFlower.EnumFlowerType.ALLIUM,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.BLUE_ORCHID,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.HOUSTONIA,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.ORANGE_TULIP,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.OXEYE_DAISY,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.PINK_TULIP,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.POPPY,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.RED_TULIP,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.WHITE_TULIP,""String_Node_Str"");
  for (  Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
    boolean colorize=false;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.RED_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).setBiomeColorize(colorize).addComparable(Blocks.RED_FLOWER.getTypeProperty(),entrySet.getKey()));
  }
  for (int i=0; i < 8; i++) {
    int temp=i;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.WHEAT.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + temp)).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,i));
  }
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.REEDS.getDefaultState(),-1).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBaseMaterial(Material.SAND).setBiomeColorize(true).setRandomizeCoord(false).setLooseness(0.3F));
  HashMap<Integer,Integer> lookupStateToModel=new HashMap<>();
  lookupStateToModel.put(0,0);
  lookupStateToModel.put(1,0);
  lookupStateToModel.put(2,1);
  lookupStateToModel.put(3,1);
  lookupStateToModel.put(4,2);
  lookupStateToModel.put(5,2);
  lookupStateToModel.put(6,2);
  lookupStateToModel.put(7,3);
  for (  Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.CARROTS.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,entrySet.getKey()));
  }
  for (  Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.POTATOES.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,entrySet.getKey()));
  }
  for (int i=0; i < 4; i++) {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.BEETROOTS.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + i)).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockBeetroot.BEETROOT_AGE,i));
  }
  List<TextureAtlasSprite> sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.GRASS));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.ROSE));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(true).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.FERN));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.PAEONIA));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.SYRINGA));
  if (ConfigFoliage.extraGrass) {
    listFoliageReplacers.add(new FoliageReplacerCrossGrass(Blocks.AIR.getDefaultState()){
      @Override public boolean isActive(){
        return ConfigFoliage.extraGrass;
      }
    }
.setSprite(getMeshAndSetupSprite(ExtendedRenderer.modid + ""String_Node_Str"")).setRandomizeCoord(true).setBiomeColorize(true));
  }
  boolean extraLeaves=false;
  if (extraLeaves) {
    listFoliageReplacers.add(new FoliageReplacerCrossLeaves(Blocks.LEAVES.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBiomeColorize(true));
  }
}",0.9930709534368072
81778,"@Override public void hookUpdatedValues(){
  if (extraGrassLast != extraGrass) {
    extraGrassLast=extraGrass;
    EventHandler.flagFoliageUpdate=true;
  }
}","@Override public void hookUpdatedValues(){
}",0.4356435643564356
81779,"public static float getWeight(Object entity1,boolean forTornado){
  World world=CoroUtilEntOrParticle.getWorld(entity1);
  if (entity1 instanceof IWindHandler) {
    return ((IWindHandler)entity1).getWindWeight();
  }
  if (entity1 instanceof EntityMovingBlock) {
    return 1F + ((float)((EntityMovingBlock)entity1).age / 200);
  }
  if (entity1 instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)entity1;
    if (player.onGround || player.handleWaterMovement()) {
      playerInAirTime=0;
    }
 else {
      playerInAirTime++;
    }
    if (((EntityPlayer)entity1).capabilities.isCreativeMode)     return 99999999F;
    int extraWeight=0;
    if (((EntityPlayer)entity1).inventory != null && !(((EntityPlayer)entity1).inventory.armorInventory.get(2).isEmpty()) && ((EntityPlayer)entity1).inventory.armorInventory.get(2).getItem() == Items.IRON_CHESTPLATE) {
      extraWeight=2;
    }
    if (((EntityPlayer)entity1).inventory != null && !(((EntityPlayer)entity1).inventory.armorInventory.get(2).isEmpty()) && ((EntityPlayer)entity1).inventory.armorInventory.get(2).getItem() == Items.DIAMOND_CHESTPLATE) {
      extraWeight=4;
    }
    if (forTornado) {
      return 4.5F + extraWeight + ((float)(playerInAirTime / 400));
    }
 else {
      return 5.0F + extraWeight + ((float)(playerInAirTime / 400));
    }
  }
  if (isParticleRotServerSafe(world,entity1)) {
    float var=WeatherUtilParticle.getParticleWeight((EntityRotFX)entity1);
    if (var != -1) {
      return var;
    }
  }
  if (entity1 instanceof EntitySquid) {
    return 400F;
  }
  if (entity1 instanceof EntityLivingBase) {
    EntityLivingBase livingEnt=(EntityLivingBase)entity1;
    int airTime=livingEnt.getEntityData().getInteger(""String_Node_Str"");
    if (livingEnt.onGround || livingEnt.handleWaterMovement()) {
      airTime=0;
    }
 else {
      airTime++;
    }
    livingEnt.getEntityData().setInteger(""String_Node_Str"",airTime);
  }
  if (entity1 instanceof Entity) {
    Entity ent=(Entity)entity1;
    if (WeatherUtilData.isWindWeightSet(ent) && (forTornado || WeatherUtilData.isWindAffected(ent))) {
      return WeatherUtilData.getWindWeight(ent);
    }
  }
  if (entity1 instanceof EntityLivingBase) {
    EntityLivingBase livingEnt=(EntityLivingBase)entity1;
    int airTime=livingEnt.getEntityData().getInteger(""String_Node_Str"");
    if (forTornado) {
      return 0.5F + (((float)airTime) / 800F);
    }
 else {
      return 500.0F + (livingEnt.onGround ? 2.0F : 0.0F) + ((airTime) / 400);
    }
  }
  if (entity1 instanceof EntityBoat || entity1 instanceof EntityItem || entity1 instanceof EntityFishHook) {
    return 4000F;
  }
  if (entity1 instanceof EntityMinecart) {
    return 80F;
  }
  return 1F;
}","public static float getWeight(Object entity1,boolean forTornado){
  World world=CoroUtilEntOrParticle.getWorld(entity1);
  if (world == null) {
    return 1F;
  }
  if (entity1 instanceof IWindHandler) {
    return ((IWindHandler)entity1).getWindWeight();
  }
  if (entity1 instanceof EntityMovingBlock) {
    return 1F + ((float)((EntityMovingBlock)entity1).age / 200);
  }
  if (entity1 instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)entity1;
    if (player.onGround || player.handleWaterMovement()) {
      playerInAirTime=0;
    }
 else {
      playerInAirTime++;
    }
    if (((EntityPlayer)entity1).capabilities.isCreativeMode)     return 99999999F;
    int extraWeight=0;
    if (((EntityPlayer)entity1).inventory != null && !(((EntityPlayer)entity1).inventory.armorInventory.get(2).isEmpty()) && ((EntityPlayer)entity1).inventory.armorInventory.get(2).getItem() == Items.IRON_CHESTPLATE) {
      extraWeight=2;
    }
    if (((EntityPlayer)entity1).inventory != null && !(((EntityPlayer)entity1).inventory.armorInventory.get(2).isEmpty()) && ((EntityPlayer)entity1).inventory.armorInventory.get(2).getItem() == Items.DIAMOND_CHESTPLATE) {
      extraWeight=4;
    }
    if (forTornado) {
      return 4.5F + extraWeight + ((float)(playerInAirTime / 400));
    }
 else {
      return 5.0F + extraWeight + ((float)(playerInAirTime / 400));
    }
  }
  if (isParticleRotServerSafe(world,entity1)) {
    float var=WeatherUtilParticle.getParticleWeight((EntityRotFX)entity1);
    if (var != -1) {
      return var;
    }
  }
  if (entity1 instanceof EntitySquid) {
    return 400F;
  }
  if (entity1 instanceof EntityLivingBase) {
    EntityLivingBase livingEnt=(EntityLivingBase)entity1;
    int airTime=livingEnt.getEntityData().getInteger(""String_Node_Str"");
    if (livingEnt.onGround || livingEnt.handleWaterMovement()) {
      airTime=0;
    }
 else {
      airTime++;
    }
    livingEnt.getEntityData().setInteger(""String_Node_Str"",airTime);
  }
  if (entity1 instanceof Entity) {
    Entity ent=(Entity)entity1;
    if (WeatherUtilData.isWindWeightSet(ent) && (forTornado || WeatherUtilData.isWindAffected(ent))) {
      return WeatherUtilData.getWindWeight(ent);
    }
  }
  if (entity1 instanceof EntityLivingBase) {
    EntityLivingBase livingEnt=(EntityLivingBase)entity1;
    int airTime=livingEnt.getEntityData().getInteger(""String_Node_Str"");
    if (forTornado) {
      return 0.5F + (((float)airTime) / 800F);
    }
 else {
      return 500.0F + (livingEnt.onGround ? 2.0F : 0.0F) + ((airTime) / 400);
    }
  }
  if (entity1 instanceof EntityBoat || entity1 instanceof EntityItem || entity1 instanceof EntityFishHook) {
    return 4000F;
  }
  if (entity1 instanceof EntityMinecart) {
    return 80F;
  }
  return 1F;
}",0.9923329682365828
81780,"public EntityMovingBlock(World var1,int var2,int var3,int var4,Block var5,StormObject parOwner){
  super(var1);
  this.mode=1;
  this.age=0;
  this.type=0;
  this.noCollision=false;
  this.gravityDelay=60;
  this.noCollision=true;
  this.tile=var5;
  this.setSize(0.9F,0.9F);
  this.setPosition((double)var2 + 0.5D,(double)var3 + 0.5D,(double)var4 + 0.5D);
  this.motionX=0.0D;
  this.motionY=0.0D;
  this.motionZ=0.0D;
  this.prevPosX=(double)((float)var2 + 0.5F);
  this.prevPosY=(double)((float)var3 + 0.5F);
  this.prevPosZ=(double)((float)var4 + 0.5F);
  this.material=tile.getMaterial(tile.getDefaultState());
  this.tileentity=var1.getTileEntity(new BlockPos(var2,var3,var4));
  IBlockState state=var1.getBlockState(new BlockPos(var2,var3,var4));
  this.metadata=state.getBlock().getMetaFromState(state);
  owner=parOwner;
  if (this.tileentity != null) {
  }
}","public EntityMovingBlock(World var1,int var2,int var3,int var4,IBlockState state,StormObject parOwner){
  super(var1);
  this.mode=1;
  this.age=0;
  this.type=0;
  this.noCollision=false;
  this.gravityDelay=60;
  this.noCollision=true;
  this.setSize(0.9F,0.9F);
  this.setPosition(var2 + 0.5D,var3 + 0.5D,var4 + 0.5D);
  this.motionX=0.0D;
  this.motionY=0.0D;
  this.motionZ=0.0D;
  this.prevPosX=(var2 + 0.5F);
  this.prevPosY=(var3 + 0.5F);
  this.prevPosZ=(double)(var4 + 0.5F);
  this.tile=state.getBlock();
  this.metadata=state.getBlock().getMetaFromState(state);
  this.material=tile.getMaterial(tile.getDefaultState());
  owner=parOwner;
  if (this.tileentity != null) {
  }
}",0.4897172236503856
81781,"@Override public boolean isInRangeToRenderDist(double var1){
  return var1 < 128D * 128D;
}","@Override public boolean isInRangeToRenderDist(double var1){
  return var1 < 256D * 256D;
}",0.956043956043956
81782,"private void blockify(int var1,int var2,int var3,EnumFacing var4){
  if (this.world.isRemote)   return;
  this.setDead();
  Block var5=this.world.getBlockState(new BlockPos(var1,var2,var3)).getBlock();
  if (this.tileentity != null || this.type != 0 || ConfigTornado.Storm_Tornado_rarityOfBreakOnFall > 0 && this.rand.nextInt(ConfigTornado.Storm_Tornado_rarityOfBreakOnFall + 1) != 0) {
    if (!WeatherUtil.shouldRemoveBlock(var5) && !WeatherUtil.isOceanBlock(var5) && var2 < 255) {
      this.world.setBlockState(new BlockPos(var1,var2 + 1,var3),this.tile.getStateFromMeta(this.metadata),3);
    }
    boolean var6=false;
    if (!WeatherUtil.isOceanBlock(var5)) {
      if (this.world.setBlockState(new BlockPos(var1,var2,var3),this.tile.getStateFromMeta(this.metadata),3)) {
        var6=true;
      }
    }
    if (var6) {
      if (this.tileentity != null) {
        this.world.setTileEntity(new BlockPos(var1,var2,var3),this.tileentity);
      }
    }
  }
}","private void blockify(int var1,int var2,int var3,EnumFacing var4){
  if (this.world.isRemote)   return;
  this.setDead();
  Block var5=this.world.getBlockState(new BlockPos(var1,var2,var3)).getBlock();
  if (this.tileentity != null || this.type != 0 || ConfigTornado.Storm_Tornado_rarityOfBreakOnFall > 0 && this.rand.nextInt(ConfigTornado.Storm_Tornado_rarityOfBreakOnFall + 1) != 0) {
    if (!WeatherUtil.shouldRemoveBlock(var5) && !WeatherUtil.isOceanBlock(var5) && var2 < 255) {
      this.world.setBlockState(new BlockPos(var1,var2 + 1,var3),this.tile.getStateFromMeta(this.metadata),3);
    }
    boolean var6=false;
    if (!WeatherUtil.isOceanBlock(var5)) {
      if (this.world.setBlockState(new BlockPos(var1,var2,var3),this.tile.getStateFromMeta(this.metadata),3)) {
        var6=true;
      }
    }
    if (var6) {
    }
  }
}",0.9306711037160288
81783,"public void tick(World parWorld){
  if (!parWorld.isRemote) {
    if (parWorld.getTotalWorldTime() % queueProcessRate == 0) {
      Iterator<BlockUpdateSnapshot> it=listBlockUpdateQueue.values().iterator();
      int count=0;
      int entityCreateStaggerRate=3;
      Random rand=new Random();
      while (it.hasNext()) {
        BlockUpdateSnapshot snapshot=it.next();
        World world=DimensionManager.getWorld(snapshot.getDimID());
        if (world != null) {
          if (ConfigTornado.Storm_Tornado_grabbedBlocksRepairOverTime && UtilMining.canConvertToRepairingBlock(world,snapshot.statePrev)) {
            TileEntityRepairingBlock.replaceBlockAndBackup(world,snapshot.getPos());
          }
 else {
            CULog.dbg(""String_Node_Str"" + snapshot.statePrev);
            world.setBlockState(snapshot.getPos(),snapshot.getState(),3);
          }
          if (snapshot.getState().getBlock() == Blocks.AIR) {
            if (snapshot.isCreateEntityForBlockRemoval()) {
              EntityMovingBlock mBlock=new EntityMovingBlock(parWorld,snapshot.getPos().getX(),snapshot.getPos().getY(),snapshot.getPos().getZ(),snapshot.statePrev.getBlock(),storm);
              double speed=1D;
              mBlock.motionX+=(rand.nextDouble() - rand.nextDouble()) * speed;
              mBlock.motionZ+=(rand.nextDouble() - rand.nextDouble()) * speed;
              mBlock.motionY=1D;
              parWorld.spawnEntity(mBlock);
            }
          }
        }
        count++;
      }
      listBlockUpdateQueue.clear();
    }
  }
  if (storm == null)   return;
  boolean seesLight=false;
  tickGrabCount=0;
  removeCount=0;
  tryRipCount=0;
  int tryRipMax=300;
  int firesPerTickMax=1;
  if (storm.isFirenado) {
  }
  tornadoBaseSize=getTornadoBaseSize();
  if (storm.stormType == storm.TYPE_WATER) {
    tornadoBaseSize*=3;
  }
  forceRotate(parWorld);
  Random rand=new Random();
  int spawnYOffset=(int)storm.posBaseFormationPos.yCoord;
  if (!parWorld.isRemote && (ConfigTornado.Storm_Tornado_grabBlocks || storm.isFirenado)) {
    int yStart=00;
    int yEnd=(int)storm.pos.yCoord;
    int yInc=1;
    Biome bgb=parWorld.getBiome(new BlockPos(MathHelper.floor(storm.pos.xCoord),0,MathHelper.floor(storm.pos.zCoord)));
    if (bgb != null && (bgb.getBaseHeight() <= 0.7 || storm.isFirenado)) {
      for (int i=yStart; i < yEnd; i+=yInc) {
        int YRand=i;
        int ii=YRand / 4;
        if (i > 20 && rand.nextInt(2) != 0) {
          continue;
        }
        if (tryRipCount > tryRipMax) {
          break;
        }
        int extraTry=(int)((storm.levelCurIntensityStage + 1 - storm.levelStormIntensityFormingStartVal) * 5);
        int loopAmount=5 + ii + extraTry;
        if (storm.stormType == StormObject.TYPE_WATER) {
          loopAmount=1 + ii / 2;
        }
        for (int k=0; k < loopAmount; k++) {
          if (tryRipCount > tryRipMax) {
            break;
          }
          int tryY=(int)(spawnYOffset + YRand - 1.5D);
          if (tryY > 255) {
            tryY=255;
          }
          int tryX=(int)storm.pos.xCoord + rand.nextInt(tornadoBaseSize + (ii)) - ((tornadoBaseSize / 2) + (ii / 2));
          int tryZ=(int)storm.pos.zCoord + rand.nextInt(tornadoBaseSize + (ii)) - ((tornadoBaseSize / 2) + (ii / 2));
          double d0=storm.pos.xCoord - tryX;
          double d2=storm.pos.zCoord - tryZ;
          double dist=(double)MathHelper.sqrt(d0 * d0 + d2 * d2);
          BlockPos pos=new BlockPos(tryX,tryY,tryZ);
          if (dist < tornadoBaseSize / 2 + ii / 2 && tryRipCount < tryRipMax) {
            IBlockState state=parWorld.getBlockState(pos);
            Block blockID=state.getBlock();
            boolean performed=false;
            if (canGrab(parWorld,state,pos)) {
              tryRipCount++;
              seesLight=tryRip(parWorld,tryX,tryY,tryZ);
              performed=seesLight;
            }
            if (!performed && ConfigTornado.Storm_Tornado_RefinedGrabRules) {
              if (blockID == Blocks.GRASS && canGrab(parWorld,state,pos)) {
                if (!listBlockUpdateQueue.containsKey(pos)) {
                  listBlockUpdateQueue.put(pos,new BlockUpdateSnapshot(parWorld.provider.getDimension(),Blocks.DIRT.getDefaultState(),state,pos,false));
                }
              }
            }
          }
        }
      }
      for (int k=0; k < 10; k++) {
        int randSize=40;
        randSize=10;
        int tryX=(int)storm.pos.xCoord + rand.nextInt(randSize) - randSize / 2;
        int tryY=(int)spawnYOffset - 2 + rand.nextInt(8);
        int tryZ=(int)storm.pos.zCoord + rand.nextInt(randSize) - randSize / 2;
        double d0=storm.pos.xCoord - tryX;
        double d2=storm.pos.zCoord - tryZ;
        double dist=(double)MathHelper.sqrt(d0 * d0 + d2 * d2);
        if (dist < tornadoBaseSize / 2 + randSize / 2 && tryRipCount < tryRipMax) {
          BlockPos pos=new BlockPos(tryX,tryY,tryZ);
          IBlockState state=parWorld.getBlockState(pos);
          Block blockID=state.getBlock();
          if (canGrab(parWorld,state,pos)) {
            tryRipCount++;
            tryRip(parWorld,tryX,tryY,tryZ);
          }
        }
      }
    }
  }
 else {
    seesLight=true;
  }
  if (Math.abs((spawnYOffset - storm.pos.yCoord)) > 5) {
    seesLight=true;
  }
  if (!parWorld.isRemote && storm.isFirenado) {
    if (storm.levelCurIntensityStage >= storm.STATE_STAGE1)     for (int i=0; i < firesPerTickMax; i++) {
      BlockPos posUp=new BlockPos(storm.posGround.xCoord,storm.posGround.yCoord + rand.nextInt(30),storm.posGround.zCoord);
      IBlockState state=parWorld.getBlockState(posUp);
      if (CoroUtilBlock.isAir(state.getBlock())) {
        EntityMovingBlock mBlock=new EntityMovingBlock(parWorld,posUp.getX(),posUp.getY(),posUp.getZ(),Blocks.FIRE,storm);
        mBlock.metadata=15;
        double speed=2D;
        mBlock.motionX+=(rand.nextDouble() - rand.nextDouble()) * speed;
        mBlock.motionZ+=(rand.nextDouble() - rand.nextDouble()) * speed;
        mBlock.motionY=1D;
        mBlock.mode=0;
        parWorld.spawnEntity(mBlock);
      }
    }
    int randSize=10;
    int tryX=(int)storm.pos.xCoord + rand.nextInt(randSize) - randSize / 2;
    int tryZ=(int)storm.pos.zCoord + rand.nextInt(randSize) - randSize / 2;
    int tryY=parWorld.getHeight(tryX,tryZ) - 1;
    double d0=storm.pos.xCoord - tryX;
    double d2=storm.pos.zCoord - tryZ;
    double dist=(double)MathHelper.sqrt(d0 * d0 + d2 * d2);
    if (dist < tornadoBaseSize / 2 + randSize / 2 && tryRipCount < tryRipMax) {
      BlockPos pos=new BlockPos(tryX,tryY,tryZ);
      Block block=parWorld.getBlockState(pos).getBlock();
      BlockPos posUp=new BlockPos(tryX,tryY + 1,tryZ);
      Block blockUp=parWorld.getBlockState(posUp).getBlock();
      if (!CoroUtilBlock.isAir(block) && CoroUtilBlock.isAir(blockUp)) {
        parWorld.setBlockState(posUp,Blocks.FIRE.getDefaultState());
      }
    }
  }
}","public void tick(World parWorld){
  if (!parWorld.isRemote) {
    if (parWorld.getTotalWorldTime() % queueProcessRate == 0) {
      Iterator<BlockUpdateSnapshot> it=listBlockUpdateQueue.values().iterator();
      int count=0;
      int entityCreateStaggerRate=3;
      Random rand=new Random();
      while (it.hasNext()) {
        BlockUpdateSnapshot snapshot=it.next();
        World world=DimensionManager.getWorld(snapshot.getDimID());
        if (world != null) {
          if (ConfigTornado.Storm_Tornado_grabbedBlocksRepairOverTime && UtilMining.canConvertToRepairingBlock(world,snapshot.statePrev)) {
            TileEntityRepairingBlock.replaceBlockAndBackup(world,snapshot.getPos(),ConfigTornado.Storm_Tornado_TicksToRepairBlock);
          }
 else {
            CULog.dbg(""String_Node_Str"" + snapshot.statePrev);
            world.setBlockState(snapshot.getPos(),snapshot.getState(),3);
          }
          if (snapshot.getState().getBlock() == Blocks.AIR) {
            if (snapshot.isCreateEntityForBlockRemoval()) {
              EntityMovingBlock mBlock=new EntityMovingBlock(parWorld,snapshot.getPos().getX(),snapshot.getPos().getY(),snapshot.getPos().getZ(),snapshot.statePrev,storm);
              double speed=1D;
              mBlock.motionX+=(rand.nextDouble() - rand.nextDouble()) * speed;
              mBlock.motionZ+=(rand.nextDouble() - rand.nextDouble()) * speed;
              mBlock.motionY=1D;
              parWorld.spawnEntity(mBlock);
            }
          }
        }
        count++;
      }
      listBlockUpdateQueue.clear();
    }
  }
  if (storm == null)   return;
  boolean seesLight=false;
  tickGrabCount=0;
  removeCount=0;
  tryRipCount=0;
  int tryRipMax=300;
  int firesPerTickMax=1;
  if (storm.isFirenado) {
  }
  tornadoBaseSize=getTornadoBaseSize();
  if (storm.stormType == storm.TYPE_WATER) {
    tornadoBaseSize*=3;
  }
  forceRotate(parWorld);
  Random rand=new Random();
  int spawnYOffset=(int)storm.posBaseFormationPos.yCoord;
  if (!parWorld.isRemote && (ConfigTornado.Storm_Tornado_grabBlocks || storm.isFirenado)) {
    int yStart=00;
    int yEnd=(int)storm.pos.yCoord;
    int yInc=1;
    Biome bgb=parWorld.getBiome(new BlockPos(MathHelper.floor(storm.pos.xCoord),0,MathHelper.floor(storm.pos.zCoord)));
    if (bgb != null && (bgb.getBaseHeight() <= 0.7 || storm.isFirenado)) {
      for (int i=yStart; i < yEnd; i+=yInc) {
        int YRand=i;
        int ii=YRand / 4;
        if (i > 20 && rand.nextInt(2) != 0) {
          continue;
        }
        if (tryRipCount > tryRipMax) {
          break;
        }
        int extraTry=(int)((storm.levelCurIntensityStage + 1 - storm.levelStormIntensityFormingStartVal) * 5);
        int loopAmount=5 + ii + extraTry;
        if (storm.stormType == StormObject.TYPE_WATER) {
          loopAmount=1 + ii / 2;
        }
        for (int k=0; k < loopAmount; k++) {
          if (tryRipCount > tryRipMax) {
            break;
          }
          int tryY=(int)(spawnYOffset + YRand - 1.5D);
          if (tryY > 255) {
            tryY=255;
          }
          int tryX=(int)storm.pos.xCoord + rand.nextInt(tornadoBaseSize + (ii)) - ((tornadoBaseSize / 2) + (ii / 2));
          int tryZ=(int)storm.pos.zCoord + rand.nextInt(tornadoBaseSize + (ii)) - ((tornadoBaseSize / 2) + (ii / 2));
          double d0=storm.pos.xCoord - tryX;
          double d2=storm.pos.zCoord - tryZ;
          double dist=(double)MathHelper.sqrt(d0 * d0 + d2 * d2);
          BlockPos pos=new BlockPos(tryX,tryY,tryZ);
          if (dist < tornadoBaseSize / 2 + ii / 2 && tryRipCount < tryRipMax) {
            IBlockState state=parWorld.getBlockState(pos);
            Block blockID=state.getBlock();
            boolean performed=false;
            if (canGrab(parWorld,state,pos)) {
              tryRipCount++;
              seesLight=tryRip(parWorld,tryX,tryY,tryZ);
              performed=seesLight;
            }
            if (!performed && ConfigTornado.Storm_Tornado_RefinedGrabRules) {
              if (blockID == Blocks.GRASS && canGrab(parWorld,state,pos)) {
                if (!listBlockUpdateQueue.containsKey(pos)) {
                  listBlockUpdateQueue.put(pos,new BlockUpdateSnapshot(parWorld.provider.getDimension(),Blocks.DIRT.getDefaultState(),state,pos,false));
                }
              }
            }
          }
        }
      }
      for (int k=0; k < 10; k++) {
        int randSize=40;
        randSize=10;
        int tryX=(int)storm.pos.xCoord + rand.nextInt(randSize) - randSize / 2;
        int tryY=(int)spawnYOffset - 2 + rand.nextInt(8);
        int tryZ=(int)storm.pos.zCoord + rand.nextInt(randSize) - randSize / 2;
        double d0=storm.pos.xCoord - tryX;
        double d2=storm.pos.zCoord - tryZ;
        double dist=(double)MathHelper.sqrt(d0 * d0 + d2 * d2);
        if (dist < tornadoBaseSize / 2 + randSize / 2 && tryRipCount < tryRipMax) {
          BlockPos pos=new BlockPos(tryX,tryY,tryZ);
          IBlockState state=parWorld.getBlockState(pos);
          Block blockID=state.getBlock();
          if (canGrab(parWorld,state,pos)) {
            tryRipCount++;
            tryRip(parWorld,tryX,tryY,tryZ);
          }
        }
      }
    }
  }
 else {
    seesLight=true;
  }
  if (Math.abs((spawnYOffset - storm.pos.yCoord)) > 5) {
    seesLight=true;
  }
  if (!parWorld.isRemote && storm.isFirenado) {
    if (storm.levelCurIntensityStage >= storm.STATE_STAGE1)     for (int i=0; i < firesPerTickMax; i++) {
      BlockPos posUp=new BlockPos(storm.posGround.xCoord,storm.posGround.yCoord + rand.nextInt(30),storm.posGround.zCoord);
      IBlockState state=parWorld.getBlockState(posUp);
      if (CoroUtilBlock.isAir(state.getBlock())) {
        EntityMovingBlock mBlock=new EntityMovingBlock(parWorld,posUp.getX(),posUp.getY(),posUp.getZ(),Blocks.FIRE.getDefaultState(),storm);
        mBlock.metadata=15;
        double speed=2D;
        mBlock.motionX+=(rand.nextDouble() - rand.nextDouble()) * speed;
        mBlock.motionZ+=(rand.nextDouble() - rand.nextDouble()) * speed;
        mBlock.motionY=1D;
        mBlock.mode=0;
        parWorld.spawnEntity(mBlock);
      }
    }
    int randSize=10;
    int tryX=(int)storm.pos.xCoord + rand.nextInt(randSize) - randSize / 2;
    int tryZ=(int)storm.pos.zCoord + rand.nextInt(randSize) - randSize / 2;
    int tryY=parWorld.getHeight(tryX,tryZ) - 1;
    double d0=storm.pos.xCoord - tryX;
    double d2=storm.pos.zCoord - tryZ;
    double dist=(double)MathHelper.sqrt(d0 * d0 + d2 * d2);
    if (dist < tornadoBaseSize / 2 + randSize / 2 && tryRipCount < tryRipMax) {
      BlockPos pos=new BlockPos(tryX,tryY,tryZ);
      Block block=parWorld.getBlockState(pos).getBlock();
      BlockPos posUp=new BlockPos(tryX,tryY + 1,tryZ);
      Block blockUp=parWorld.getBlockState(posUp).getBlock();
      if (!CoroUtilBlock.isAir(block) && CoroUtilBlock.isAir(blockUp)) {
        parWorld.setBlockState(posUp,Blocks.FIRE.getDefaultState());
      }
    }
  }
}",0.9945244956772334
81784,"public boolean tryRip(World parWorld,int tryX,int tryY,int tryZ){
  boolean tryRip=true;
  BlockPos pos=new BlockPos(tryX,tryY,tryZ);
  if (listBlockUpdateQueue.containsKey(pos)) {
    return true;
  }
  if (!tryRip)   return true;
  if (!ConfigTornado.Storm_Tornado_grabBlocks)   return true;
  if (isNoDigCoord(tryX,tryY,tryZ))   return true;
  boolean seesLight=false;
  IBlockState state=parWorld.getBlockState(pos);
  Block blockID=state.getBlock();
  CULog.dbg(""String_Node_Str"" + blockID);
  if ((((WeatherUtilBlock.getPrecipitationHeightSafe(parWorld,new BlockPos(tryX,0,tryZ)).getY() - 1 == tryY) || WeatherUtilBlock.getPrecipitationHeightSafe(parWorld,new BlockPos(tryX + 1,0,tryZ)).getY() - 1 < tryY || WeatherUtilBlock.getPrecipitationHeightSafe(parWorld,new BlockPos(tryX,0,tryZ + 1)).getY() - 1 < tryY || WeatherUtilBlock.getPrecipitationHeightSafe(parWorld,new BlockPos(tryX - 1,0,tryZ)).getY() - 1 < tryY || WeatherUtilBlock.getPrecipitationHeightSafe(parWorld,new BlockPos(tryX,0,tryZ - 1)).getY() - 1 < tryY))) {
    int blockCount=getBlockCountForDim(parWorld);
    if (parWorld.isBlockLoaded(new BlockPos(storm.pos.xCoord,128,storm.pos.zCoord)) && lastGrabTime < System.currentTimeMillis() && tickGrabCount < ConfigTornado.Storm_Tornado_maxBlocksGrabbedPerTick) {
      lastGrabTime=System.currentTimeMillis() - 5;
      if (blockID != Blocks.SNOW) {
        boolean playerClose=parWorld.getClosestPlayer(storm.posBaseFormationPos.xCoord,storm.posBaseFormationPos.yCoord,storm.posBaseFormationPos.zCoord,140,false) != null;
        if (playerClose) {
          tickGrabCount++;
          ripCount++;
          if (ripCount % 10 == 0) {
          }
 else {
          }
          seesLight=true;
        }
        if (WeatherUtil.shouldRemoveBlock(blockID)) {
          removeCount++;
          boolean shouldEntityify=blockCount <= ConfigTornado.Storm_Tornado_maxFlyingEntityBlocks;
          listBlockUpdateQueue.put(pos,new BlockUpdateSnapshot(parWorld.provider.getDimension(),Blocks.AIR.getDefaultState(),state,pos,playerClose && shouldEntityify));
        }
      }
      if (blockID == Blocks.GLASS) {
        parWorld.playSound(null,new BlockPos(tryX,tryY,tryZ),SoundEvents.BLOCK_GLASS_BREAK,SoundCategory.AMBIENT,5.0F,1.0F);
      }
    }
  }
  return seesLight;
}","public boolean tryRip(World parWorld,int tryX,int tryY,int tryZ){
  boolean tryRip=true;
  BlockPos pos=new BlockPos(tryX,tryY,tryZ);
  if (listBlockUpdateQueue.containsKey(pos)) {
    return true;
  }
  if (!tryRip)   return true;
  if (!ConfigTornado.Storm_Tornado_grabBlocks)   return true;
  if (isNoDigCoord(tryX,tryY,tryZ))   return true;
  boolean seesLight=false;
  IBlockState state=parWorld.getBlockState(pos);
  Block blockID=state.getBlock();
  if ((((WeatherUtilBlock.getPrecipitationHeightSafe(parWorld,new BlockPos(tryX,0,tryZ)).getY() - 1 == tryY) || WeatherUtilBlock.getPrecipitationHeightSafe(parWorld,new BlockPos(tryX + 1,0,tryZ)).getY() - 1 < tryY || WeatherUtilBlock.getPrecipitationHeightSafe(parWorld,new BlockPos(tryX,0,tryZ + 1)).getY() - 1 < tryY || WeatherUtilBlock.getPrecipitationHeightSafe(parWorld,new BlockPos(tryX - 1,0,tryZ)).getY() - 1 < tryY || WeatherUtilBlock.getPrecipitationHeightSafe(parWorld,new BlockPos(tryX,0,tryZ - 1)).getY() - 1 < tryY))) {
    int blockCount=getBlockCountForDim(parWorld);
    if (parWorld.isBlockLoaded(new BlockPos(storm.pos.xCoord,128,storm.pos.zCoord)) && lastGrabTime < System.currentTimeMillis() && tickGrabCount < ConfigTornado.Storm_Tornado_maxBlocksGrabbedPerTick) {
      lastGrabTime=System.currentTimeMillis() - 5;
      if (blockID != Blocks.SNOW) {
        boolean playerClose=parWorld.getClosestPlayer(storm.posBaseFormationPos.xCoord,storm.posBaseFormationPos.yCoord,storm.posBaseFormationPos.zCoord,140,false) != null;
        if (playerClose) {
          tickGrabCount++;
          ripCount++;
          if (ripCount % 10 == 0) {
          }
 else {
          }
          seesLight=true;
        }
        if (WeatherUtil.shouldRemoveBlock(blockID)) {
          removeCount++;
          boolean shouldEntityify=blockCount <= ConfigTornado.Storm_Tornado_maxFlyingEntityBlocks;
          listBlockUpdateQueue.put(pos,new BlockUpdateSnapshot(parWorld.provider.getDimension(),Blocks.AIR.getDefaultState(),state,pos,playerClose && shouldEntityify));
        }
      }
      if (blockID == Blocks.GLASS) {
        parWorld.playSound(null,new BlockPos(tryX,tryY,tryZ),SoundEvents.BLOCK_GLASS_BREAK,SoundCategory.AMBIENT,5.0F,1.0F);
      }
    }
  }
  return seesLight;
}",0.990744821507272
81785,"public void onTickInGame(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  World world=mc.world;
  if (ConfigMisc.Misc_proxyRenderOverrideEnabled) {
    if (!(mc.entityRenderer instanceof EntityRendererProxyWeather2Mini)) {
      oldRenderer=mc.entityRenderer;
      EntityRendererProxyWeather2Mini temp=new EntityRendererProxyWeather2Mini(mc,mc.getResourceManager());
      mc.entityRenderer=temp;
    }
  }
 else {
    if ((mc.entityRenderer instanceof EntityRendererProxyWeather2Mini)) {
      if (oldRenderer != null) {
        mc.entityRenderer=oldRenderer;
      }
 else {
        mc.entityRenderer=new EntityRenderer(mc,mc.getResourceManager());
      }
    }
  }
  if (world != null) {
    checkClientWeather();
    weatherManager.tick();
    if (ConfigMisc.Misc_ForceVanillaCloudsOff && world.provider.getDimension() == 0) {
      mc.gameSettings.clouds=0;
    }
    if (WeatherUtilConfig.listDimensionsWindEffects.contains(world.provider.getDimension())) {
      sceneEnhancer.tickClient();
    }
    if (mc.ingameGUI.getChatGUI().getSentMessages().size() > 0) {
      String msg=(String)mc.ingameGUI.getChatGUI().getSentMessages().get(mc.ingameGUI.getChatGUI().getSentMessages().size() - 1);
      if (msg.equals(""String_Node_Str"")) {
        mc.ingameGUI.getChatGUI().getSentMessages().remove(mc.ingameGUI.getChatGUI().getSentMessages().size() - 1);
        mc.displayGuiScreen(new GuiEZConfig());
      }
    }
    float windDir=WindReader.getWindAngle(world,null);
    float windSpeed=WindReader.getWindSpeed(world,null);
    float give=30;
    float diff=Math.abs(windDir - smoothAngle);
    if (true && diff > 10) {
      if (smoothAngle > 180)       smoothAngle-=360;
      if (smoothAngle < -180)       smoothAngle+=360;
      float bestMove=MathHelper.wrapDegrees(windDir - smoothAngle);
      smoothAngleAdj=windSpeed;
      if (Math.abs(bestMove) < 180) {
        float realAdj=smoothAngleAdj;
        if (realAdj * 2 > windSpeed) {
          if (bestMove > 0) {
            smoothAngleRotationalVelAccel-=realAdj;
            if (prevDir < 0) {
              smoothAngleRotationalVelAccel=0;
            }
            prevDir=1;
          }
 else           if (bestMove < 0) {
            smoothAngleRotationalVelAccel+=realAdj;
            if (prevDir > 0) {
              smoothAngleRotationalVelAccel=0;
            }
            prevDir=-1;
          }
        }
        if (smoothAngleRotationalVelAccel > 0.3 || smoothAngleRotationalVelAccel < -0.3) {
          smoothAngle+=smoothAngleRotationalVelAccel * 0.3F;
        }
 else {
        }
        smoothAngleRotationalVelAccel*=0.80F;
      }
    }
    if (!Minecraft.getMinecraft().isGamePaused()) {
      ExtendedRenderer.foliageRenderer.windDir=smoothAngle;
      float rate=0.005F;
      if (ExtendedRenderer.foliageRenderer.windSpeedSmooth != windSpeed) {
        if (ExtendedRenderer.foliageRenderer.windSpeedSmooth < windSpeed) {
          if (ExtendedRenderer.foliageRenderer.windSpeedSmooth + rate > windSpeed) {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth=windSpeed;
          }
 else {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth+=rate;
          }
        }
 else {
          if (ExtendedRenderer.foliageRenderer.windSpeedSmooth - rate < windSpeed) {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth=windSpeed;
          }
 else {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth-=rate;
          }
        }
      }
      float baseTimeChangeRate=60F;
      ExtendedRenderer.foliageRenderer.windTime+=0 + (baseTimeChangeRate * ExtendedRenderer.foliageRenderer.windSpeedSmooth);
    }
  }
 else {
    resetClientWeather();
  }
}","public void onTickInGame(){
  if (ConfigMisc.Client_PotatoPC_Mode)   return;
  Minecraft mc=FMLClientHandler.instance().getClient();
  World world=mc.world;
  if (ConfigMisc.Misc_proxyRenderOverrideEnabled) {
    if (!(mc.entityRenderer instanceof EntityRendererProxyWeather2Mini)) {
      oldRenderer=mc.entityRenderer;
      EntityRendererProxyWeather2Mini temp=new EntityRendererProxyWeather2Mini(mc,mc.getResourceManager());
      mc.entityRenderer=temp;
    }
  }
 else {
    if ((mc.entityRenderer instanceof EntityRendererProxyWeather2Mini)) {
      if (oldRenderer != null) {
        mc.entityRenderer=oldRenderer;
      }
 else {
        mc.entityRenderer=new EntityRenderer(mc,mc.getResourceManager());
      }
    }
  }
  if (world != null) {
    checkClientWeather();
    weatherManager.tick();
    if (ConfigMisc.Misc_ForceVanillaCloudsOff && world.provider.getDimension() == 0) {
      mc.gameSettings.clouds=0;
    }
    if (WeatherUtilConfig.listDimensionsWindEffects.contains(world.provider.getDimension())) {
      sceneEnhancer.tickClient();
    }
    if (mc.ingameGUI.getChatGUI().getSentMessages().size() > 0) {
      String msg=(String)mc.ingameGUI.getChatGUI().getSentMessages().get(mc.ingameGUI.getChatGUI().getSentMessages().size() - 1);
      if (msg.equals(""String_Node_Str"")) {
        mc.ingameGUI.getChatGUI().getSentMessages().remove(mc.ingameGUI.getChatGUI().getSentMessages().size() - 1);
        mc.displayGuiScreen(new GuiEZConfig());
      }
    }
    float windDir=WindReader.getWindAngle(world,null);
    float windSpeed=WindReader.getWindSpeed(world,null);
    float give=30;
    float diff=Math.abs(windDir - smoothAngle);
    if (true && diff > 10) {
      if (smoothAngle > 180)       smoothAngle-=360;
      if (smoothAngle < -180)       smoothAngle+=360;
      float bestMove=MathHelper.wrapDegrees(windDir - smoothAngle);
      smoothAngleAdj=windSpeed;
      if (Math.abs(bestMove) < 180) {
        float realAdj=smoothAngleAdj;
        if (realAdj * 2 > windSpeed) {
          if (bestMove > 0) {
            smoothAngleRotationalVelAccel-=realAdj;
            if (prevDir < 0) {
              smoothAngleRotationalVelAccel=0;
            }
            prevDir=1;
          }
 else           if (bestMove < 0) {
            smoothAngleRotationalVelAccel+=realAdj;
            if (prevDir > 0) {
              smoothAngleRotationalVelAccel=0;
            }
            prevDir=-1;
          }
        }
        if (smoothAngleRotationalVelAccel > 0.3 || smoothAngleRotationalVelAccel < -0.3) {
          smoothAngle+=smoothAngleRotationalVelAccel * 0.3F;
        }
 else {
        }
        smoothAngleRotationalVelAccel*=0.80F;
      }
    }
    if (!Minecraft.getMinecraft().isGamePaused()) {
      ExtendedRenderer.foliageRenderer.windDir=smoothAngle;
      float rate=0.005F;
      if (ExtendedRenderer.foliageRenderer.windSpeedSmooth != windSpeed) {
        if (ExtendedRenderer.foliageRenderer.windSpeedSmooth < windSpeed) {
          if (ExtendedRenderer.foliageRenderer.windSpeedSmooth + rate > windSpeed) {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth=windSpeed;
          }
 else {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth+=rate;
          }
        }
 else {
          if (ExtendedRenderer.foliageRenderer.windSpeedSmooth - rate < windSpeed) {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth=windSpeed;
          }
 else {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth-=rate;
          }
        }
      }
      float baseTimeChangeRate=60F;
      ExtendedRenderer.foliageRenderer.windTime+=0 + (baseTimeChangeRate * ExtendedRenderer.foliageRenderer.windSpeedSmooth);
    }
  }
 else {
    resetClientWeather();
  }
}",0.9934024505183788
81786,"@SubscribeEvent @SideOnly(Side.CLIENT) public void onFogDensity(FogDensity event){
  float fogDensity=0;
  int delay=5000;
  long time=System.currentTimeMillis() % delay;
  fogDensity=(float)time / (float)delay;
  boolean test=false;
  if (test) {
    event.setCanceled(true);
    GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
    GlStateManager.setFogStart(0F);
    GlStateManager.setFogEnd(400F);
    event.setDensity(fogDensity);
    event.setDensity(0.5F);
  }
  boolean test2=false;
  if (test2) {
    GlStateManager.setFogStart(0F);
    GlStateManager.setFogEnd(7F);
    GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
    event.setDensity(1F);
    event.setCanceled(true);
  }
}","@SubscribeEvent @SideOnly(Side.CLIENT) public void onFogDensity(FogDensity event){
  if (ConfigMisc.Client_PotatoPC_Mode)   return;
  float fogDensity=0;
  int delay=5000;
  long time=System.currentTimeMillis() % delay;
  fogDensity=(float)time / (float)delay;
  boolean test=false;
  if (test) {
    event.setCanceled(true);
    GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
    GlStateManager.setFogStart(0F);
    GlStateManager.setFogEnd(400F);
    event.setDensity(fogDensity);
    event.setDensity(0.5F);
  }
  boolean test2=false;
  if (test2) {
    GlStateManager.setFogStart(0F);
    GlStateManager.setFogEnd(7F);
    GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
    event.setDensity(1F);
    event.setCanceled(true);
  }
}",0.966136834830684
81787,"@SubscribeEvent @SideOnly(Side.CLIENT) public void worldRender(RenderWorldLastEvent event){
  ClientTickHandler.checkClientWeather();
  ClientTickHandler.weatherManager.tickRender(event.getPartialTicks());
  SceneEnhancer.renderWorldLast(event);
  FoliageRenderer.radialRange=ConfigFoliage.foliageShaderRange;
}","@SubscribeEvent @SideOnly(Side.CLIENT) public void worldRender(RenderWorldLastEvent event){
  if (ConfigMisc.Client_PotatoPC_Mode)   return;
  ClientTickHandler.checkClientWeather();
  ClientTickHandler.weatherManager.tickRender(event.getPartialTicks());
  SceneEnhancer.renderWorldLast(event);
  FoliageRenderer.radialRange=ConfigFoliage.foliageShaderRange;
}",0.9269746646795828
81788,"@SubscribeEvent @SideOnly(Side.CLIENT) public void onFogRender(RenderFogEvent event){
  if (SceneEnhancer.isFogOverridding()) {
    GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
    if (event.getFogMode() == -1) {
      GlStateManager.setFogStart(SceneEnhancer.stormFogStartClouds);
      GlStateManager.setFogEnd(SceneEnhancer.stormFogEndClouds);
    }
 else {
      GlStateManager.setFogStart(SceneEnhancer.stormFogStart);
      GlStateManager.setFogEnd(SceneEnhancer.stormFogEnd);
    }
  }
}","@SubscribeEvent @SideOnly(Side.CLIENT) public void onFogRender(RenderFogEvent event){
  if (ConfigMisc.Client_PotatoPC_Mode)   return;
  if (SceneEnhancer.isFogOverridding()) {
    GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
    if (event.getFogMode() == -1) {
      GlStateManager.setFogStart(SceneEnhancer.stormFogStartClouds);
      GlStateManager.setFogEnd(SceneEnhancer.stormFogEndClouds);
    }
 else {
      GlStateManager.setFogStart(SceneEnhancer.stormFogStart);
      GlStateManager.setFogEnd(SceneEnhancer.stormFogEnd);
    }
  }
}",0.9535545023696682
81789,"@SubscribeEvent @SideOnly(Side.CLIENT) public void onFogColors(FogColors event){
  if (SceneEnhancer.isFogOverridding()) {
    SceneEnhancer.stormFogRedOrig=event.getRed();
    SceneEnhancer.stormFogGreenOrig=event.getGreen();
    SceneEnhancer.stormFogBlueOrig=event.getBlue();
    event.setRed(SceneEnhancer.stormFogRed);
    event.setGreen(SceneEnhancer.stormFogGreen);
    event.setBlue(SceneEnhancer.stormFogBlue);
    GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
  }
}","@SubscribeEvent @SideOnly(Side.CLIENT) public void onFogColors(FogColors event){
  if (ConfigMisc.Client_PotatoPC_Mode)   return;
  if (SceneEnhancer.isFogOverridding()) {
    SceneEnhancer.stormFogRedOrig=event.getRed();
    SceneEnhancer.stormFogGreenOrig=event.getGreen();
    SceneEnhancer.stormFogBlueOrig=event.getBlue();
    event.setRed(SceneEnhancer.stormFogRed);
    event.setGreen(SceneEnhancer.stormFogGreen);
    event.setBlue(SceneEnhancer.stormFogBlue);
    GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
  }
}",0.9517241379310344
81790,"public void tickClient(){
  if (!WeatherUtil.isPaused()) {
    tryParticleSpawning();
    tickRainRates();
    tickParticlePrecipitation();
    trySoundPlaying();
    Minecraft mc=FMLClientHandler.instance().getClient();
    if (mc.world != null && lastWorldDetected != mc.world) {
      lastWorldDetected=mc.world;
      reset();
    }
    tryWind(mc.world);
    tickSandstorm();
    if (particleBehavior == null) {
      particleBehavior=new ParticleBehaviorSandstorm(null);
    }
    particleBehavior.tickUpdateList();
    if (ConfigCoroUtil.foliageShaders && EventHandler.queryUseOfShaders()) {
      if (!FoliageEnhancerShader.useThread) {
        if (mc.world.getTotalWorldTime() % 40 == 0) {
          FoliageEnhancerShader.tickClientThreaded();
        }
      }
      if (mc.world.getTotalWorldTime() % 5 == 0) {
        FoliageEnhancerShader.tickClientCloseToPlayer();
      }
    }
  }
}","public void tickClient(){
  if (!WeatherUtil.isPaused() && !ConfigMisc.Client_PotatoPC_Mode) {
    tryParticleSpawning();
    tickRainRates();
    tickParticlePrecipitation();
    trySoundPlaying();
    Minecraft mc=FMLClientHandler.instance().getClient();
    if (mc.world != null && lastWorldDetected != mc.world) {
      lastWorldDetected=mc.world;
      reset();
    }
    tryWind(mc.world);
    tickSandstorm();
    if (particleBehavior == null) {
      particleBehavior=new ParticleBehaviorSandstorm(null);
    }
    particleBehavior.tickUpdateList();
    if (ConfigCoroUtil.foliageShaders && EventHandler.queryUseOfShaders()) {
      if (!FoliageEnhancerShader.useThread) {
        if (mc.world.getTotalWorldTime() % 40 == 0) {
          FoliageEnhancerShader.tickClientThreaded();
        }
      }
      if (mc.world.getTotalWorldTime() % 5 == 0) {
        FoliageEnhancerShader.tickClientCloseToPlayer();
      }
    }
  }
}",0.980349344978166
81791,"public static void renderTick(TickEvent.RenderTickEvent event){
  if (event.phase == TickEvent.Phase.START) {
    Minecraft mc=FMLClientHandler.instance().getClient();
    EntityPlayer entP=mc.player;
    if (entP != null) {
      float curRainStr=SceneEnhancer.getRainStrengthAndControlVisuals(entP,true);
      curRainStr=Math.abs(curRainStr);
      mc.world.setRainStrength(curRainStr);
    }
  }
}","public static void renderTick(TickEvent.RenderTickEvent event){
  if (ConfigMisc.Client_PotatoPC_Mode)   return;
  if (event.phase == TickEvent.Phase.START) {
    Minecraft mc=FMLClientHandler.instance().getClient();
    EntityPlayer entP=mc.player;
    if (entP != null) {
      float curRainStr=SceneEnhancer.getRainStrengthAndControlVisuals(entP,true);
      curRainStr=Math.abs(curRainStr);
      mc.world.setRainStrength(curRainStr);
    }
  }
}",0.9424206815511164
81792,"@Override public void run(){
  if (useThread) {
    while (true) {
      try {
        if (ConfigCoroUtil.foliageShaders && RotatingParticleManager.useShaders) {
          boolean gotLock=tickClientThreaded();
          if (gotLock) {
            Thread.sleep(ConfigFoliage.Thread_Foliage_Process_Delay);
          }
 else {
            Thread.sleep(20);
          }
        }
 else {
          Thread.sleep(5000);
        }
      }
 catch (      Throwable throwable) {
        throwable.printStackTrace();
      }
    }
  }
}","@Override public void run(){
  if (useThread) {
    while (true) {
      try {
        if (ConfigCoroUtil.foliageShaders && RotatingParticleManager.useShaders && !ConfigMisc.Client_PotatoPC_Mode) {
          boolean gotLock=tickClientThreaded();
          if (gotLock) {
            Thread.sleep(ConfigFoliage.Thread_Foliage_Process_Delay);
          }
 else {
            Thread.sleep(20);
          }
        }
 else {
          Thread.sleep(5000);
        }
      }
 catch (      Throwable throwable) {
        throwable.printStackTrace();
      }
    }
  }
}",0.9669117647058824
81793,"public static void modelBakeEvent(ModelBakeEvent event){
  boolean replaceVanillaModels=ConfigCoroUtil.foliageShaders && EventHandler.queryUseOfShaders();
  boolean textureFix=false;
  if (replaceVanillaModels) {
    FoliageData.backupBakedModelStore.clear();
    String str=""String_Node_Str"";
    CULog.log(str);
    ProgressManager.ProgressBar prog=ProgressManager.push(str,event.getModelRegistry().getKeys().size(),true);
    Map<ModelResourceLocation,IModel> stateModels=ReflectionHelper.getPrivateValue(ModelLoader.class,event.getModelLoader(),""String_Node_Str"");
    IBakedModel blank=event.getModelRegistry().getObject(new ModelResourceLocation(""String_Node_Str"",""String_Node_Str""));
    event.getModelLoader().blockModelShapes.reloadModels();
    CULog.dbg(""String_Node_Str"" + event.getModelLoader().blockModelShapes.bakedModelStore.size());
    for (    Map.Entry<IBlockState,IBakedModel> entry : event.getModelLoader().blockModelShapes.bakedModelStore.entrySet()) {
      IBlockState state=entry.getKey();
      if (state instanceof IExtendedBlockState) {
        state=((IExtendedBlockState)state).getClean();
      }
      FoliageData.backupBakedModelStore.put(state,entry.getValue());
    }
    for (    ModelResourceLocation res : event.getModelRegistry().getKeys()) {
      prog.step(res.toString());
      IBakedModel bakedModel=event.getModelRegistry().getObject(res);
      IModel model=stateModels.get(res);
      if (model != null) {
        try {
          Set<ResourceLocation> textures=Sets.newHashSet(model.getTextures());
          escape:           if (!res.getVariant().equals(""String_Node_Str"")) {
            for (            FoliageReplacerBase replacer : listFoliageReplacers) {
              for (              TextureAtlasSprite sprite : replacer.sprites) {
                for (                ResourceLocation res2 : textures) {
                  if (res2.toString().equals(sprite.getIconName())) {
                    if (!res.toString().contains(""String_Node_Str"")) {
                      if (textureFix) {
                        if (blank.getOverrides() instanceof AnimationItemOverrideList) {
                          AnimationItemOverrideList obj1=(AnimationItemOverrideList)blank.getOverrides();
                          IModel model1=ReflectionHelper.getPrivateValue(AnimationItemOverrideList.class,obj1,""String_Node_Str"");
                          if (vanillaModelWrapperClass.isAssignableFrom(model1.getClass())) {
                            ModelBlock model2=(ModelBlock)ReflectionHelper.getPrivateValue(vanillaModelWrapperClass,model1,""String_Node_Str"");
                            String tex=res2.toString().split(""String_Node_Str"")[1];
                            model2.textures.put(""String_Node_Str"",tex);
                          }
                        }
                      }
                      event.getModelRegistry().putObject(res,blank);
                      break escape;
                    }
                  }
                }
              }
            }
          }
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
    ProgressManager.pop(prog);
  }
}","public static void modelBakeEvent(ModelBakeEvent event){
  boolean replaceVanillaModels=ConfigCoroUtil.foliageShaders && EventHandler.queryUseOfShaders() && !ConfigMisc.Client_PotatoPC_Mode;
  boolean textureFix=false;
  if (replaceVanillaModels) {
    FoliageData.backupBakedModelStore.clear();
    String str=""String_Node_Str"";
    CULog.log(str);
    ProgressManager.ProgressBar prog=ProgressManager.push(str,event.getModelRegistry().getKeys().size(),true);
    Map<ModelResourceLocation,IModel> stateModels=ReflectionHelper.getPrivateValue(ModelLoader.class,event.getModelLoader(),""String_Node_Str"");
    IBakedModel blank=event.getModelRegistry().getObject(new ModelResourceLocation(""String_Node_Str"",""String_Node_Str""));
    event.getModelLoader().blockModelShapes.reloadModels();
    CULog.dbg(""String_Node_Str"" + event.getModelLoader().blockModelShapes.bakedModelStore.size());
    for (    Map.Entry<IBlockState,IBakedModel> entry : event.getModelLoader().blockModelShapes.bakedModelStore.entrySet()) {
      IBlockState state=entry.getKey();
      if (state instanceof IExtendedBlockState) {
        state=((IExtendedBlockState)state).getClean();
      }
      FoliageData.backupBakedModelStore.put(state,entry.getValue());
    }
    for (    ModelResourceLocation res : event.getModelRegistry().getKeys()) {
      prog.step(res.toString());
      IBakedModel bakedModel=event.getModelRegistry().getObject(res);
      IModel model=stateModels.get(res);
      if (model != null) {
        try {
          Set<ResourceLocation> textures=Sets.newHashSet(model.getTextures());
          escape:           if (!res.getVariant().equals(""String_Node_Str"")) {
            for (            FoliageReplacerBase replacer : listFoliageReplacers) {
              for (              TextureAtlasSprite sprite : replacer.sprites) {
                for (                ResourceLocation res2 : textures) {
                  if (res2.toString().equals(sprite.getIconName())) {
                    if (!res.toString().contains(""String_Node_Str"")) {
                      if (textureFix) {
                        if (blank.getOverrides() instanceof AnimationItemOverrideList) {
                          AnimationItemOverrideList obj1=(AnimationItemOverrideList)blank.getOverrides();
                          IModel model1=ReflectionHelper.getPrivateValue(AnimationItemOverrideList.class,obj1,""String_Node_Str"");
                          if (vanillaModelWrapperClass.isAssignableFrom(model1.getClass())) {
                            ModelBlock model2=(ModelBlock)ReflectionHelper.getPrivateValue(vanillaModelWrapperClass,model1,""String_Node_Str"");
                            String tex=res2.toString().split(""String_Node_Str"")[1];
                            model2.textures.put(""String_Node_Str"",tex);
                          }
                        }
                      }
                      event.getModelRegistry().putObject(res,blank);
                      break escape;
                    }
                  }
                }
              }
            }
          }
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
    ProgressManager.pop(prog);
  }
}",0.994375
81794,"public static void modelBakeEvent(ModelBakeEvent event){
  boolean replaceVanillaModels=ConfigCoroAI.foliageShaders && EventHandler.queryUseOfShaders();
  boolean textureFix=false;
  if (replaceVanillaModels) {
    Map<ModelResourceLocation,IModel> stateModels=ReflectionHelper.getPrivateValue(ModelLoader.class,event.getModelLoader(),""String_Node_Str"");
    IBakedModel blank=event.getModelRegistry().getObject(new ModelResourceLocation(""String_Node_Str"",""String_Node_Str""));
    for (    ModelResourceLocation res : event.getModelRegistry().getKeys()) {
      IBakedModel bakedModel=event.getModelRegistry().getObject(res);
      IModel model=stateModels.get(res);
      Set<ResourceLocation> textures=Sets.newHashSet(model.getTextures());
      escape:       if (!res.getVariant().equals(""String_Node_Str"")) {
        for (        FoliageReplacerBase replacer : listFoliageReplacers) {
          for (          TextureAtlasSprite sprite : replacer.sprites) {
            for (            ResourceLocation res2 : textures) {
              if (res2.toString().equals(sprite.getIconName())) {
                if (!res.toString().contains(""String_Node_Str"")) {
                  if (textureFix) {
                    if (blank.getOverrides() instanceof AnimationItemOverrideList) {
                      AnimationItemOverrideList obj1=(AnimationItemOverrideList)blank.getOverrides();
                      IModel model1=ReflectionHelper.getPrivateValue(AnimationItemOverrideList.class,obj1,""String_Node_Str"");
                      if (vanillaModelWrapperClass.isAssignableFrom(model1.getClass())) {
                        ModelBlock model2=(ModelBlock)ReflectionHelper.getPrivateValue(vanillaModelWrapperClass,model1,""String_Node_Str"");
                        String tex=res2.toString().split(""String_Node_Str"")[1];
                        model2.textures.put(""String_Node_Str"",tex);
                      }
                    }
                  }
                  event.getModelRegistry().putObject(res,blank);
                  break escape;
                }
              }
            }
          }
        }
      }
    }
  }
}","public static void modelBakeEvent(ModelBakeEvent event){
  boolean replaceVanillaModels=ConfigCoroAI.foliageShaders && EventHandler.queryUseOfShaders();
  boolean textureFix=false;
  if (replaceVanillaModels) {
    Map<ModelResourceLocation,IModel> stateModels=ReflectionHelper.getPrivateValue(ModelLoader.class,event.getModelLoader(),""String_Node_Str"");
    IBakedModel blank=event.getModelRegistry().getObject(new ModelResourceLocation(""String_Node_Str"",""String_Node_Str""));
    for (    ModelResourceLocation res : event.getModelRegistry().getKeys()) {
      IBakedModel bakedModel=event.getModelRegistry().getObject(res);
      IModel model=stateModels.get(res);
      if (model != null) {
        Set<ResourceLocation> textures=Sets.newHashSet(model.getTextures());
        escape:         if (!res.getVariant().equals(""String_Node_Str"")) {
          for (          FoliageReplacerBase replacer : listFoliageReplacers) {
            for (            TextureAtlasSprite sprite : replacer.sprites) {
              for (              ResourceLocation res2 : textures) {
                if (res2.toString().equals(sprite.getIconName())) {
                  if (!res.toString().contains(""String_Node_Str"")) {
                    if (textureFix) {
                      if (blank.getOverrides() instanceof AnimationItemOverrideList) {
                        AnimationItemOverrideList obj1=(AnimationItemOverrideList)blank.getOverrides();
                        IModel model1=ReflectionHelper.getPrivateValue(AnimationItemOverrideList.class,obj1,""String_Node_Str"");
                        if (vanillaModelWrapperClass.isAssignableFrom(model1.getClass())) {
                          ModelBlock model2=(ModelBlock)ReflectionHelper.getPrivateValue(vanillaModelWrapperClass,model1,""String_Node_Str"");
                          String tex=res2.toString().split(""String_Node_Str"")[1];
                          model2.textures.put(""String_Node_Str"",tex);
                        }
                      }
                    }
                    event.getModelRegistry().putObject(res,blank);
                    break escape;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}",0.9782658430565088
81795,"public ClientTickHandler(){
  if (sceneEnhancer == null) {
    sceneEnhancer=new SceneEnhancer();
    (new Thread(sceneEnhancer,""String_Node_Str"")).start();
  }
  if (foliageEnhancer == null) {
    foliageEnhancer=new FoliageEnhancerShader();
    (new Thread(foliageEnhancer,""String_Node_Str"")).start();
  }
}","public ClientTickHandler(){
  if (sceneEnhancer == null) {
    sceneEnhancer=new SceneEnhancer();
    (new Thread(sceneEnhancer,""String_Node_Str"")).start();
  }
  if (foliageEnhancer == null) {
    foliageEnhancer=new FoliageEnhancerShader();
    (new Thread(foliageEnhancer,""String_Node_Str"")).start();
  }
  clientConfigData=new ClientConfigData();
}",0.9349470499243572
81796,"@Override public void execute(MinecraftServer server,ICommandSender var1,String[] var2){
  String helpMsgStorm=""String_Node_Str"";
  EntityPlayer player=null;
  if (var1 instanceof EntityPlayer) {
    player=(EntityPlayer)var1;
  }
  World world=var1.getEntityWorld();
  int dimension=world.provider.getDimension();
  BlockPos posBlock=var1.getPosition();
  Vec3d posVec=var1.getPositionVector();
  try {
    if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equals(""String_Node_Str"") && posVec != Vec3d.ZERO) {
        if (dimension == 0) {
          WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(0);
          VolcanoObject vo=new VolcanoObject(wm);
          vo.pos=new Vec3(posVec);
          vo.initFirstTime();
          wm.addVolcanoObject(vo);
          vo.initPost();
          wm.syncVolcanoNew(vo);
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else {
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
    }
 else     if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equalsIgnoreCase(""String_Node_Str"")) {
        WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(dimension);
        sendCommandSenderMsg(var1,""String_Node_Str"");
        List<WeatherObject> listStorms=wm.getStormObjects();
        for (int i=0; i < listStorms.size(); i++) {
          WeatherObject wo=listStorms.get(i);
          if (wo instanceof WeatherObject) {
            WeatherObject so=(WeatherObject)wo;
            Weather.dbg(""String_Node_Str"" + so.ID);
            so.setDead();
          }
        }
      }
 else       if (var2[1].equals(""String_Node_Str"") || var2[1].equals(""String_Node_Str"")) {
        if (var2.length > 2 && posVec != Vec3d.ZERO) {
          boolean spawnCloudStorm=true;
          WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(dimension);
          StormObject so=new StormObject(wm);
          so.layer=0;
          so.userSpawnedFor=CoroUtilEntity.getName(player);
          so.naturallySpawned=false;
          so.levelTemperature=0.1F;
          so.pos=new Vec3(posVec.x,StormObject.layers.get(so.layer),posVec.z);
          so.levelWater=so.levelWaterStartRaining * 2;
          so.attrib_precipitation=true;
          if (!var2[2].equals(""String_Node_Str"")) {
            so.initRealStorm(null,null);
          }
          if (var2[2].equals(""String_Node_Str"")) {
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"") || var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
            so.attrib_waterSpout=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HAIL;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE4;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE3;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE2;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
            so.isFirenado=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_FORMING;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_FORMING;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE2;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE3;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE4;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"") || var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
            so.alwaysProgresses=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            WeatherObjectSandstorm sandstorm=new WeatherObjectSandstorm(wm);
            Vec3 pos=new Vec3(posVec.x,world.getHeight(new BlockPos(posVec.x,0,posVec.z)).getY() + 1,posVec.z);
            float angle=wm.getWindManager().getWindAngleForClouds();
            double vecX=-Math.sin(Math.toRadians(angle));
            double vecZ=Math.cos(Math.toRadians(angle));
            double speed=150D;
            pos.xCoord-=vecX * speed;
            pos.zCoord-=vecZ * speed;
            sandstorm.initFirstTime();
            sandstorm.initSandstormSpawn(pos);
            wm.addStormObject(sandstorm);
            wm.syncStormNew(sandstorm);
            spawnCloudStorm=false;
            wm.windMan.startHighWindEvent();
            wm.windMan.lowWindTimer=0;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            boolean spawned=wm.trySpawnSandstormNearPos(world,new Vec3(posVec));
            spawnCloudStorm=false;
            if (!spawned) {
              sendCommandSenderMsg(var1,""String_Node_Str"");
              return;
            }
 else {
              wm.windMan.startHighWindEvent();
              wm.windMan.lowWindTimer=0;
            }
          }
          if (var2.length > 3) {
            if (var2[3].contains(""String_Node_Str"") || var2[3].contains(""String_Node_Str"")) {
              so.alwaysProgresses=true;
            }
          }
          if (spawnCloudStorm) {
            so.initFirstTime();
            wm.addStormObject(so);
            wm.syncStormNew(so);
          }
          sendCommandSenderMsg(var1,""String_Node_Str"" + var2[2] + ""String_Node_Str""+ (so.alwaysProgresses ? ""String_Node_Str"" : ""String_Node_Str""));
        }
 else {
          sendCommandSenderMsg(var1,helpMsgStorm);
        }
      }
 else       if (var2[1].equals(""String_Node_Str"")) {
        sendCommandSenderMsg(var1,helpMsgStorm);
      }
 else {
        sendCommandSenderMsg(var1,helpMsgStorm);
      }
    }
 else     if (var2[0].equals(""String_Node_Str"") && player != null) {
      WeatherUtilBlock.floodAreaWithLayerableBlock(player.world,new Vec3(player.posX,player.posY,player.posZ),player.rotationYawHead,1,1,CommonProxy.blockSandLayer,30);
    }
 else     if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equals(""String_Node_Str"")) {
        boolean doHighOn=false;
        boolean doHighOff=false;
        if (var2.length > 2) {
          if (var2[2].equals(""String_Node_Str"")) {
            doHighOn=true;
          }
 else           if (var2[2].equals(""String_Node_Str"")) {
            doHighOff=true;
          }
        }
 else {
          doHighOn=true;
        }
        WeatherManagerServer wm=ServerTickHandler.getWeatherSystemForDim(dimension);
        if (doHighOn) {
          wm.windMan.startHighWindEvent();
          wm.windMan.lowWindTimer=0;
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else         if (doHighOff) {
          wm.windMan.stopHighWindEvent();
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
 else       if (var2[1].equals(""String_Node_Str"")) {
        boolean doLowOn=false;
        boolean doLowOff=false;
        if (var2.length > 2) {
          if (var2[2].equals(""String_Node_Str"")) {
            doLowOn=true;
          }
 else           if (var2[2].equals(""String_Node_Str"")) {
            doLowOff=true;
          }
        }
 else {
          doLowOn=true;
        }
        WeatherManagerServer wm=ServerTickHandler.getWeatherSystemForDim(dimension);
        if (doLowOn) {
          wm.windMan.startLowWindEvent();
          wm.windMan.highWindTimer=0;
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else         if (doLowOff) {
          wm.windMan.stopLowWindEvent();
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
    }
 else {
      sendCommandSenderMsg(var1,helpMsgStorm);
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"");
    sendCommandSenderMsg(var1,helpMsgStorm);
    ex.printStackTrace();
  }
}","@Override public void execute(MinecraftServer server,ICommandSender var1,String[] var2){
  String helpMsgStorm=""String_Node_Str"";
  EntityPlayer player=null;
  if (var1 instanceof EntityPlayer) {
    player=(EntityPlayer)var1;
  }
  World world=var1.getEntityWorld();
  int dimension=world.provider.getDimension();
  BlockPos posBlock=var1.getPosition();
  Vec3d posVec=var1.getPositionVector();
  try {
    if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equals(""String_Node_Str"") && posVec != Vec3d.ZERO) {
        if (dimension == 0) {
          WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(0);
          VolcanoObject vo=new VolcanoObject(wm);
          vo.pos=new Vec3(posVec);
          vo.initFirstTime();
          wm.addVolcanoObject(vo);
          vo.initPost();
          wm.syncVolcanoNew(vo);
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else {
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
    }
 else     if (var2[0].equals(""String_Node_Str"")) {
      EntityLightningBolt ent=new EntityLightningBolt(world,posBlock.getX(),posBlock.getY(),posBlock.getZ());
      WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(dimension);
      wm.getWorld().weatherEffects.add(ent);
      wm.syncLightningNew(ent,false);
      sendCommandSenderMsg(var1,""String_Node_Str"");
    }
 else     if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equalsIgnoreCase(""String_Node_Str"")) {
        WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(dimension);
        sendCommandSenderMsg(var1,""String_Node_Str"");
        List<WeatherObject> listStorms=wm.getStormObjects();
        for (int i=0; i < listStorms.size(); i++) {
          WeatherObject wo=listStorms.get(i);
          if (wo instanceof WeatherObject) {
            WeatherObject so=(WeatherObject)wo;
            Weather.dbg(""String_Node_Str"" + so.ID);
            so.setDead();
          }
        }
      }
 else       if (var2[1].equals(""String_Node_Str"") || var2[1].equals(""String_Node_Str"")) {
        if (var2.length > 2 && posVec != Vec3d.ZERO) {
          boolean spawnCloudStorm=true;
          WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(dimension);
          StormObject so=new StormObject(wm);
          so.layer=0;
          so.userSpawnedFor=CoroUtilEntity.getName(player);
          so.naturallySpawned=false;
          so.levelTemperature=0.1F;
          so.pos=new Vec3(posVec.x,StormObject.layers.get(so.layer),posVec.z);
          so.levelWater=so.levelWaterStartRaining * 2;
          so.attrib_precipitation=true;
          if (!var2[2].equals(""String_Node_Str"")) {
            so.initRealStorm(null,null);
          }
          if (var2[2].equals(""String_Node_Str"")) {
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"") || var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
            so.attrib_waterSpout=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HAIL;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE4;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE3;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE2;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
            so.isFirenado=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_FORMING;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_FORMING;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE2;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE3;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE4;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"") || var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
            so.alwaysProgresses=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            WeatherObjectSandstorm sandstorm=new WeatherObjectSandstorm(wm);
            Vec3 pos=new Vec3(posVec.x,world.getHeight(new BlockPos(posVec.x,0,posVec.z)).getY() + 1,posVec.z);
            float angle=wm.getWindManager().getWindAngleForClouds();
            double vecX=-Math.sin(Math.toRadians(angle));
            double vecZ=Math.cos(Math.toRadians(angle));
            double speed=150D;
            pos.xCoord-=vecX * speed;
            pos.zCoord-=vecZ * speed;
            sandstorm.initFirstTime();
            sandstorm.initSandstormSpawn(pos);
            wm.addStormObject(sandstorm);
            wm.syncStormNew(sandstorm);
            spawnCloudStorm=false;
            wm.windMan.startHighWindEvent();
            wm.windMan.lowWindTimer=0;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            boolean spawned=wm.trySpawnSandstormNearPos(world,new Vec3(posVec));
            spawnCloudStorm=false;
            if (!spawned) {
              sendCommandSenderMsg(var1,""String_Node_Str"");
              return;
            }
 else {
              wm.windMan.startHighWindEvent();
              wm.windMan.lowWindTimer=0;
            }
          }
          if (var2.length > 3) {
            if (var2[3].contains(""String_Node_Str"") || var2[3].contains(""String_Node_Str"")) {
              so.alwaysProgresses=true;
            }
          }
          if (spawnCloudStorm) {
            so.initFirstTime();
            wm.addStormObject(so);
            wm.syncStormNew(so);
          }
          sendCommandSenderMsg(var1,""String_Node_Str"" + var2[2] + ""String_Node_Str""+ (so.alwaysProgresses ? ""String_Node_Str"" : ""String_Node_Str""));
        }
 else {
          sendCommandSenderMsg(var1,helpMsgStorm);
        }
      }
 else       if (var2[1].equals(""String_Node_Str"")) {
        sendCommandSenderMsg(var1,helpMsgStorm);
      }
 else {
        sendCommandSenderMsg(var1,helpMsgStorm);
      }
    }
 else     if (var2[0].equals(""String_Node_Str"") && player != null) {
      WeatherUtilBlock.floodAreaWithLayerableBlock(player.world,new Vec3(player.posX,player.posY,player.posZ),player.rotationYawHead,1,1,CommonProxy.blockSandLayer,30);
    }
 else     if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equals(""String_Node_Str"")) {
        boolean doHighOn=false;
        boolean doHighOff=false;
        if (var2.length > 2) {
          if (var2[2].equals(""String_Node_Str"")) {
            doHighOn=true;
          }
 else           if (var2[2].equals(""String_Node_Str"")) {
            doHighOff=true;
          }
        }
 else {
          doHighOn=true;
        }
        WeatherManagerServer wm=ServerTickHandler.getWeatherSystemForDim(dimension);
        if (doHighOn) {
          wm.windMan.startHighWindEvent();
          wm.windMan.lowWindTimer=0;
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else         if (doHighOff) {
          wm.windMan.stopHighWindEvent();
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
 else       if (var2[1].equals(""String_Node_Str"")) {
        boolean doLowOn=false;
        boolean doLowOff=false;
        if (var2.length > 2) {
          if (var2[2].equals(""String_Node_Str"")) {
            doLowOn=true;
          }
 else           if (var2[2].equals(""String_Node_Str"")) {
            doLowOff=true;
          }
        }
 else {
          doLowOn=true;
        }
        WeatherManagerServer wm=ServerTickHandler.getWeatherSystemForDim(dimension);
        if (doLowOn) {
          wm.windMan.startLowWindEvent();
          wm.windMan.highWindTimer=0;
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else         if (doLowOff) {
          wm.windMan.stopLowWindEvent();
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
    }
 else {
      sendCommandSenderMsg(var1,helpMsgStorm);
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"");
    sendCommandSenderMsg(var1,helpMsgStorm);
    ex.printStackTrace();
  }
}",0.9808640757545868
81797,"@SubscribeEvent public void onPacketFromServer(FMLNetworkEvent.ClientCustomPacketEvent event){
  try {
    final NBTTagCompound nbt=PacketHelper.readNBTTagCompound(event.getPacket().payload());
    final String packetCommand=nbt.getString(""String_Node_Str"");
    final String command=nbt.getString(""String_Node_Str"");
    Minecraft.getMinecraft().addScheduledTask(() -> {
      if (packetCommand.equals(""String_Node_Str"")) {
        ClientTickHandler.checkClientWeather();
        ClientTickHandler.weatherManager.nbtSyncFromServer(nbt);
      }
 else       if (packetCommand.equals(""String_Node_Str"")) {
        Weather.dbg(""String_Node_Str"" + command);
        if (command.equals(""String_Node_Str"")) {
          WeatherUtilConfig.nbtReceiveServerDataForCache(nbt);
        }
      }
 else       if (packetCommand.equals(""String_Node_Str"")) {
        if (command.equals(""String_Node_Str"")) {
          ItemPocketSand.particulateFromServer(nbt.getString(""String_Node_Str""));
        }
      }
    }
);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","@SubscribeEvent public void onPacketFromServer(FMLNetworkEvent.ClientCustomPacketEvent event){
  try {
    final NBTTagCompound nbt=PacketHelper.readNBTTagCompound(event.getPacket().payload());
    final String packetCommand=nbt.getString(""String_Node_Str"");
    final String command=nbt.getString(""String_Node_Str"");
    Minecraft.getMinecraft().addScheduledTask(() -> {
      if (packetCommand.equals(""String_Node_Str"")) {
        ClientTickHandler.checkClientWeather();
        ClientTickHandler.weatherManager.nbtSyncFromServer(nbt);
      }
 else       if (packetCommand.equals(""String_Node_Str"")) {
        Weather.dbg(""String_Node_Str"" + command);
        if (command.equals(""String_Node_Str"")) {
          WeatherUtilConfig.nbtReceiveServerDataForCache(nbt);
        }
      }
 else       if (packetCommand.equals(""String_Node_Str"")) {
        if (command.equals(""String_Node_Str"")) {
          ItemPocketSand.particulateFromServer(nbt.getString(""String_Node_Str""));
        }
      }
 else       if (packetCommand.equals(""String_Node_Str"")) {
        if (command.equals(""String_Node_Str"")) {
          ClientTickHandler.clientConfigData.readNBT(nbt);
        }
      }
    }
);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.9199480744266552
81798,"public static void onTickInGame(){
  if (FMLCommonHandler.instance() == null || FMLCommonHandler.instance().getMinecraftServerInstance() == null) {
    return;
  }
  World world=FMLCommonHandler.instance().getMinecraftServerInstance().getWorld(0);
  if (world != null && lastWorld != world) {
    lastWorld=world;
  }
  if (world != null) {
    if (world.getTotalWorldTime() % ConfigMisc.Misc_AutoDataSaveIntervalInTicks == 0) {
      Weather.writeOutData(false);
    }
  }
  World worlds[]=DimensionManager.getWorlds();
  for (int i=0; i < worlds.length; i++) {
    if (!lookupDimToWeatherMan.containsKey(worlds[i].provider.getDimension())) {
      if (WeatherUtilConfig.listDimensionsWeather.contains(worlds[i].provider.getDimension())) {
        addWorldToWeather(worlds[i].provider.getDimension());
      }
    }
    WeatherManagerServer wms=lookupDimToWeatherMan.get(worlds[i].provider.getDimension());
    if (wms != null) {
      lookupDimToWeatherMan.get(worlds[i].provider.getDimension()).tick();
    }
  }
  boolean testRainRequest=false;
  if (testRainRequest) {
    List<IMCMessage> listMsgs=new ArrayList<IMCMessage>();
    listMsgs=FMLInterModComms.fetchRuntimeMessages(Weather.modID);
    for (int i=0; i < listMsgs.size(); i++) {
      if (listMsgs.get(i).key.equals(""String_Node_Str"")) {
        NBTTagCompound nbt=listMsgs.get(i).getNBTValue();
        String replyMod=nbt.getString(""String_Node_Str"");
        nbt.setBoolean(""String_Node_Str"",true);
        FMLInterModComms.sendRuntimeMessage(replyMod,replyMod,""String_Node_Str"",nbt);
      }
    }
  }
  boolean debugIMC=false;
  if (debugIMC) {
    try {
      List<IMCMessage> listMsgs=new ArrayList<IMCMessage>();
      listMsgs=FMLInterModComms.fetchRuntimeMessages(Weather.modID);
      for (int i=0; i < listMsgs.size(); i++) {
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  boolean testCustomLightning=false;
  if (testCustomLightning) {
    if (world.getTotalWorldTime() % 20 == 0) {
      EntityPlayer player=world.getClosestPlayer(0,0,0,-1,false);
      if (player != null) {
        EntityLightningBoltCustom lightning=new EntityLightningBoltCustom(world,player.posX,player.posY,player.posZ);
        world.addWeatherEffect(lightning);
        lookupDimToWeatherMan.get(0).syncLightningNew(lightning,true);
      }
    }
  }
  boolean derp=false;
  if (derp) {
    if (world.getTotalWorldTime() % 2 == 0) {
      EntityPlayer player=world.getClosestPlayer(0,0,0,-1,false);
      if (player != null) {
        ItemStack is=player.getItemStackFromSlot(EntityEquipmentSlot.MAINHAND);
        if (is != null && is.getItem() instanceof ItemSpade) {
          int y=world.getHeight(new BlockPos(player.posX,0,player.posZ)).getY();
          System.out.println(""String_Node_Str"" + y);
          WeatherUtilBlock.fillAgainstWallSmoothly(player.world,new Vec3(player.posX,y + 0.5D,player.posZ),player.rotationYawHead,15,2,CommonProxy.blockSandLayer);
        }
      }
    }
  }
}","public static void onTickInGame(){
  if (FMLCommonHandler.instance() == null || FMLCommonHandler.instance().getMinecraftServerInstance() == null) {
    return;
  }
  World world=FMLCommonHandler.instance().getMinecraftServerInstance().getWorld(0);
  if (world != null && lastWorld != world) {
    lastWorld=world;
  }
  if (world != null) {
    if (world.getTotalWorldTime() % ConfigMisc.Misc_AutoDataSaveIntervalInTicks == 0) {
      Weather.writeOutData(false);
    }
  }
  World worlds[]=DimensionManager.getWorlds();
  for (int i=0; i < worlds.length; i++) {
    if (!lookupDimToWeatherMan.containsKey(worlds[i].provider.getDimension())) {
      if (WeatherUtilConfig.listDimensionsWeather.contains(worlds[i].provider.getDimension())) {
        addWorldToWeather(worlds[i].provider.getDimension());
      }
    }
    WeatherManagerServer wms=lookupDimToWeatherMan.get(worlds[i].provider.getDimension());
    if (wms != null) {
      lookupDimToWeatherMan.get(worlds[i].provider.getDimension()).tick();
    }
  }
  if (world.getTotalWorldTime() % 60 == 0) {
    syncServerConfigToClient();
  }
  boolean testRainRequest=false;
  if (testRainRequest) {
    List<IMCMessage> listMsgs=new ArrayList<IMCMessage>();
    listMsgs=FMLInterModComms.fetchRuntimeMessages(Weather.modID);
    for (int i=0; i < listMsgs.size(); i++) {
      if (listMsgs.get(i).key.equals(""String_Node_Str"")) {
        NBTTagCompound nbt=listMsgs.get(i).getNBTValue();
        String replyMod=nbt.getString(""String_Node_Str"");
        nbt.setBoolean(""String_Node_Str"",true);
        FMLInterModComms.sendRuntimeMessage(replyMod,replyMod,""String_Node_Str"",nbt);
      }
    }
  }
  boolean debugIMC=false;
  if (debugIMC) {
    try {
      List<IMCMessage> listMsgs=new ArrayList<IMCMessage>();
      listMsgs=FMLInterModComms.fetchRuntimeMessages(Weather.modID);
      for (int i=0; i < listMsgs.size(); i++) {
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  boolean testCustomLightning=false;
  if (testCustomLightning) {
    if (world.getTotalWorldTime() % 20 == 0) {
      EntityPlayer player=world.getClosestPlayer(0,0,0,-1,false);
      if (player != null) {
        EntityLightningBoltCustom lightning=new EntityLightningBoltCustom(world,player.posX,player.posY,player.posZ);
        world.addWeatherEffect(lightning);
        lookupDimToWeatherMan.get(0).syncLightningNew(lightning,true);
      }
    }
  }
  boolean derp=false;
  if (derp) {
    if (world.getTotalWorldTime() % 2 == 0) {
      EntityPlayer player=world.getClosestPlayer(0,0,0,-1,false);
      if (player != null) {
        ItemStack is=player.getItemStackFromSlot(EntityEquipmentSlot.MAINHAND);
        if (is != null && is.getItem() instanceof ItemSpade) {
          int y=world.getHeight(new BlockPos(player.posX,0,player.posZ)).getY();
          System.out.println(""String_Node_Str"" + y);
          WeatherUtilBlock.fillAgainstWallSmoothly(player.world,new Vec3(player.posX,y + 0.5D,player.posZ),player.rotationYawHead,15,2,CommonProxy.blockSandLayer);
        }
      }
    }
  }
}",0.986627043090639
81799,"/** 
 * Returns value between -1 to 1 -1 is full on snow 1 is full on rain 0 is no precipitation also controls the client side raining and thundering values for vanilla
 * @param entP
 * @param forOvercast
 * @return
 */
public static float getRainStrengthAndControlVisuals(EntityPlayer entP,boolean forOvercast){
  Minecraft mc=FMLClientHandler.instance().getClient();
  double maxStormDist=512 / 4 * 3;
  Vec3 plPos=new Vec3(entP.posX,StormObject.static_YPos_layer0,entP.posZ);
  StormObject storm=null;
  ClientTickHandler.checkClientWeather();
  storm=ClientTickHandler.weatherManager.getClosestStorm(plPos,maxStormDist,StormObject.STATE_FORMING,true);
  if (forOvercast) {
  }
 else {
  }
  boolean closeEnough=false;
  double stormDist=9999;
  float tempAdj=1F;
  float sizeToUse=0;
  float overcastModeMinPrecip=0.2F;
  if (storm != null) {
    sizeToUse=storm.size;
    if (forOvercast) {
      sizeToUse*=1F;
    }
    stormDist=storm.pos.distanceTo(plPos);
    if (sizeToUse > stormDist) {
      closeEnough=true;
    }
  }
  if (closeEnough) {
    double stormIntensity=(sizeToUse - stormDist) / sizeToUse;
    tempAdj=storm.levelTemperature > 0 ? 1F : -1F;
    if (storm.levelCurIntensityStage == StormObject.STATE_NORMAL) {
      if (stormIntensity > 0.3)       stormIntensity=0.3;
    }
    if (ConfigStorm.Storm_NoRainVisual) {
      stormIntensity=0;
    }
    mc.world.getWorldInfo().setRaining(true);
    mc.world.getWorldInfo().setThundering(true);
    if (forOvercast) {
      curOvercastStrTarget=(float)stormIntensity;
    }
 else {
      curPrecipStrTarget=(float)stormIntensity;
    }
  }
 else {
    if (!ConfigMisc.overcastMode) {
      mc.world.getWorldInfo().setRaining(false);
      mc.world.getWorldInfo().setThundering(false);
      if (forOvercast) {
        curOvercastStrTarget=0;
      }
 else {
        curPrecipStrTarget=0;
      }
    }
 else {
      if (ClientTickHandler.weatherManager.isVanillaRainActiveOnServer) {
        mc.world.getWorldInfo().setRaining(true);
        mc.world.getWorldInfo().setThundering(true);
        if (forOvercast) {
          curOvercastStrTarget=overcastModeMinPrecip;
        }
 else {
          curPrecipStrTarget=overcastModeMinPrecip;
        }
      }
 else {
        if (forOvercast) {
          curOvercastStrTarget=0;
        }
 else {
          curPrecipStrTarget=0;
        }
      }
    }
  }
  if (forOvercast) {
    if (curOvercastStr > curOvercastStrTarget) {
      curOvercastStr-=0.001F;
    }
 else     if (curOvercastStr < curOvercastStrTarget) {
      curOvercastStr+=0.001F;
    }
    if (curOvercastStr < 0.0001 && curOvercastStr > -0.0001F) {
      curOvercastStr=0;
    }
    return curOvercastStr * tempAdj;
  }
 else {
    if (curPrecipStr > curPrecipStrTarget) {
      curPrecipStr-=0.001F;
    }
 else     if (curPrecipStr < curPrecipStrTarget) {
      curPrecipStr+=0.001F;
    }
    if (curPrecipStr < 0.0001 && curPrecipStr > -0.0001F) {
      curPrecipStr=0;
    }
    return curPrecipStr * tempAdj;
  }
}","/** 
 * Returns value between -1 to 1 -1 is full on snow 1 is full on rain 0 is no precipitation also controls the client side raining and thundering values for vanilla
 * @param entP
 * @param forOvercast
 * @return
 */
public static float getRainStrengthAndControlVisuals(EntityPlayer entP,boolean forOvercast){
  Minecraft mc=FMLClientHandler.instance().getClient();
  double maxStormDist=512 / 4 * 3;
  Vec3 plPos=new Vec3(entP.posX,StormObject.static_YPos_layer0,entP.posZ);
  StormObject storm=null;
  ClientTickHandler.checkClientWeather();
  storm=ClientTickHandler.weatherManager.getClosestStorm(plPos,maxStormDist,StormObject.STATE_FORMING,true);
  if (forOvercast) {
  }
 else {
  }
  boolean closeEnough=false;
  double stormDist=9999;
  float tempAdj=1F;
  float sizeToUse=0;
  float overcastModeMinPrecip=0.23F;
  if (storm != null) {
    sizeToUse=storm.size;
    if (forOvercast) {
      sizeToUse*=1F;
    }
    stormDist=storm.pos.distanceTo(plPos);
    if (sizeToUse > stormDist) {
      closeEnough=true;
    }
  }
  if (closeEnough) {
    double stormIntensity=(sizeToUse - stormDist) / sizeToUse;
    tempAdj=storm.levelTemperature > 0 ? 1F : -1F;
    if (storm.levelCurIntensityStage == StormObject.STATE_NORMAL) {
      if (stormIntensity > 0.3)       stormIntensity=0.3;
    }
    if (ConfigStorm.Storm_NoRainVisual) {
      stormIntensity=0;
    }
    mc.world.getWorldInfo().setRaining(true);
    mc.world.getWorldInfo().setThundering(true);
    if (forOvercast) {
      curOvercastStrTarget=(float)stormIntensity;
    }
 else {
      curPrecipStrTarget=(float)stormIntensity;
    }
  }
 else {
    if (!ClientTickHandler.clientConfigData.overcastMode) {
      mc.world.getWorldInfo().setRaining(false);
      mc.world.getWorldInfo().setThundering(false);
      if (forOvercast) {
        curOvercastStrTarget=0;
      }
 else {
        curPrecipStrTarget=0;
      }
    }
 else {
      if (ClientTickHandler.weatherManager.isVanillaRainActiveOnServer) {
        mc.world.getWorldInfo().setRaining(true);
        mc.world.getWorldInfo().setThundering(true);
        if (forOvercast) {
          curOvercastStrTarget=overcastModeMinPrecip;
        }
 else {
          curPrecipStrTarget=overcastModeMinPrecip;
        }
      }
 else {
        if (forOvercast) {
          curOvercastStrTarget=0;
        }
 else {
          curPrecipStrTarget=0;
        }
      }
    }
  }
  if (forOvercast) {
    if (curOvercastStr > curOvercastStrTarget) {
      curOvercastStr-=0.001F;
    }
 else     if (curOvercastStr < curOvercastStrTarget) {
      curOvercastStr+=0.001F;
    }
    if (curOvercastStr < 0.0001 && curOvercastStr > -0.0001F) {
      curOvercastStr=0;
    }
    return curOvercastStr * tempAdj;
  }
 else {
    if (curPrecipStr > curPrecipStrTarget) {
      curPrecipStr-=0.001F;
    }
 else     if (curPrecipStr < curPrecipStrTarget) {
      curPrecipStr+=0.001F;
    }
    if (curPrecipStr < 0.0001 && curPrecipStr > -0.0001F) {
      curPrecipStr=0;
    }
    return curPrecipStr * tempAdj;
  }
}",0.9928819731832478
81800,"@Override public void render(TileEntity var1,double x,double y,double z,float var8,int destroyStage,float alpha){
  TileEntityWeatherForecast tEnt=(TileEntityWeatherForecast)var1;
  String particleCount=ExtendedRenderer.rotEffRenderer.getStatistics();
  StormObject so=tEnt.lastTickStormObject;
  Vec3 pos=new Vec3(tEnt.getPos().getX(),tEnt.getPos().getY(),tEnt.getPos().getZ());
  String descSeverity=""String_Node_Str"";
  String descDist=""String_Node_Str"";
  String descWindAngleCloud=""String_Node_Str"" + (int)WindReader.getWindAngle(var1.getWorld(),pos,WindReader.WindType.CLOUD);
  String descWindAngle=""String_Node_Str"" + (int)WindReader.getWindAngle(var1.getWorld(),pos,WindReader.WindType.PRIORITY);
  String descWindSpeed=""String_Node_Str"" + (((int)(WindReader.getWindSpeed(var1.getWorld(),pos,WindReader.WindType.PRIORITY) * 100F)) / 100F);
  String progression=""String_Node_Str"";
  float levelWater=0;
  if (so != null) {
    progression=""String_Node_Str"";
    if (so.hasStormPeaked) {
      progression=""String_Node_Str"";
    }
    if (so.levelCurIntensityStage >= StormObject.STATE_STAGE5 + 1) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE5) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE4) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE3) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE2) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE1) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_FORMING) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_HAIL) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_HIGHWIND) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_THUNDER) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.attrib_precipitation) {
      descSeverity=""String_Node_Str"";
      progression=""String_Node_Str"";
    }
    Vec3 posXZ=new Vec3(tEnt.getPos().getX(),so.pos.yCoord,tEnt.getPos().getZ());
    descDist=""String_Node_Str"" + (int)posXZ.distanceTo(so.pos);
    levelWater=so.levelWater;
  }
  int index=1;
  boolean oldMode=false;
  float yOffset=2.5F;
  float sizeSimBoxDiameter=2048;
  float sizeRenderBoxDiameter=3;
  GlStateManager.pushMatrix();
  GlStateManager.translate((float)x + 0.5F,(float)y + 1.1F,(float)z + 0.5F);
  GL11.glNormal3f(0.0F,1.0F,0.0F);
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.tryBlendFuncSeparate(770,771,1,0);
  GlStateManager.depthMask(false);
  Tessellator tessellator=Tessellator.getInstance();
  BufferBuilder worldrenderer=tessellator.getBuffer();
  GlStateManager.disableTexture2D();
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_COLOR);
  worldrenderer.pos((double)-(sizeRenderBoxDiameter / 2),0,-(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)-(sizeRenderBoxDiameter / 2),0,(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)(sizeRenderBoxDiameter / 2),0,(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)(sizeRenderBoxDiameter / 2),0,-(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  tessellator.draw();
  GlStateManager.enableTexture2D();
  GlStateManager.enableLighting();
  GlStateManager.disableBlend();
  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  GlStateManager.popMatrix();
  renderLivingLabel(""String_Node_Str"" + '6' + ""String_Node_Str"",x,y + 1.2F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
  if (ConfigMisc.radarCloudDebug) {
    EntityPlayer entP=Minecraft.getMinecraft().player;
    if (entP != null) {
      String rainThunder=entP.world.rainingStrength + ""String_Node_Str"" + entP.world.thunderingStrength;
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + SceneEnhancer.getRainStrengthAndControlVisuals(entP),x,y + 2.2F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + levelWater,x,y + 2.3F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + descDist,x,y + 2.4F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + rainThunder,x,y + 2.5F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
    }
  }
  for (int i=0; i < tEnt.storms.size(); i++) {
    WeatherObject wo=tEnt.storms.get(i);
    GL11.glPushMatrix();
    Vec3 posRenderOffset=new Vec3(wo.pos.xCoord - tEnt.getPos().getX(),0,wo.pos.zCoord - tEnt.getPos().getZ());
    posRenderOffset.xCoord/=sizeSimBoxDiameter;
    posRenderOffset.zCoord/=sizeSimBoxDiameter;
    posRenderOffset.xCoord*=sizeRenderBoxDiameter;
    posRenderOffset.zCoord*=sizeRenderBoxDiameter;
    GL11.glTranslated(posRenderOffset.xCoord,0,posRenderOffset.zCoord);
    if (wo instanceof StormObject) {
      StormObject storm=(StormObject)wo;
      if (storm.levelCurIntensityStage >= StormObject.STATE_FORMING) {
        if (storm.stormType == StormObject.TYPE_WATER) {
          renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconCyclone);
          renderLivingLabel(""String_Node_Str"" + (int)(storm.levelCurIntensityStage - StormObject.levelStormIntensityFormingStartVal),x,y + 1.5F,z,1,15,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
 else {
          renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconTornado);
          renderLivingLabel(""String_Node_Str"" + (int)(storm.levelCurIntensityStage - StormObject.levelStormIntensityFormingStartVal),x,y + 1.5F,z,1,12,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_HAIL) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconHail);
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconWind);
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_HIGHWIND) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconLightning);
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconWind);
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_THUNDER) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconLightning);
      }
 else       if (storm.isPrecipitating()) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconRain);
      }
      if (storm.hasStormPeaked && (storm.levelCurIntensityStage > storm.STATE_NORMAL)) {
        renderLivingLabel(""String_Node_Str"" + '4' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
 else {
        if (ConfigMisc.radarCloudDebug) {
          if (storm.isCloudlessStorm()) {
            renderLivingLabel(""String_Node_Str"" + '0' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
          }
 else {
            renderLivingLabel(""String_Node_Str"" + 'f' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
          }
        }
 else {
          renderLivingLabel(""String_Node_Str"" + '2' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
      }
    }
 else     if (wo instanceof WeatherObjectSandstorm) {
      renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconSandstorm);
      if (((WeatherObjectSandstorm)wo).isFrontGrowing) {
        renderLivingLabel(""String_Node_Str"" + '2' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
 else {
        renderLivingLabel(""String_Node_Str"" + '4' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
    }
    GL11.glTranslated(-posRenderOffset.xCoord,0,-posRenderOffset.zCoord);
    GL11.glPopMatrix();
  }
}","@Override public void render(TileEntity var1,double x,double y,double z,float var8,int destroyStage,float alpha){
  TileEntityWeatherForecast tEnt=(TileEntityWeatherForecast)var1;
  String particleCount=ExtendedRenderer.rotEffRenderer.getStatistics();
  StormObject so=tEnt.lastTickStormObject;
  Vec3 pos=new Vec3(tEnt.getPos().getX(),tEnt.getPos().getY(),tEnt.getPos().getZ());
  String descSeverity=""String_Node_Str"";
  String descDist=""String_Node_Str"";
  String descWindAngleCloud=""String_Node_Str"" + (int)WindReader.getWindAngle(var1.getWorld(),pos,WindReader.WindType.CLOUD);
  String descWindAngle=""String_Node_Str"" + (int)WindReader.getWindAngle(var1.getWorld(),pos,WindReader.WindType.PRIORITY);
  String descWindSpeed=""String_Node_Str"" + (((int)(WindReader.getWindSpeed(var1.getWorld(),pos,WindReader.WindType.PRIORITY) * 100F)) / 100F);
  String progression=""String_Node_Str"";
  float levelWater=0;
  if (so != null) {
    progression=""String_Node_Str"";
    if (so.hasStormPeaked) {
      progression=""String_Node_Str"";
    }
    if (so.levelCurIntensityStage >= StormObject.STATE_STAGE5 + 1) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE5) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE4) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE3) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE2) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE1) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_FORMING) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_HAIL) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_HIGHWIND) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_THUNDER) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.attrib_precipitation) {
      descSeverity=""String_Node_Str"";
      progression=""String_Node_Str"";
    }
    Vec3 posXZ=new Vec3(tEnt.getPos().getX(),so.pos.yCoord,tEnt.getPos().getZ());
    descDist=""String_Node_Str"" + (int)posXZ.distanceTo(so.pos);
    levelWater=so.levelWater;
  }
  int index=1;
  boolean oldMode=false;
  float yOffset=2.5F;
  float sizeSimBoxDiameter=2048;
  float sizeRenderBoxDiameter=3;
  GlStateManager.pushMatrix();
  GlStateManager.translate((float)x + 0.5F,(float)y + 1.1F,(float)z + 0.5F);
  GL11.glNormal3f(0.0F,1.0F,0.0F);
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.tryBlendFuncSeparate(770,771,1,0);
  GlStateManager.depthMask(false);
  Tessellator tessellator=Tessellator.getInstance();
  BufferBuilder worldrenderer=tessellator.getBuffer();
  GlStateManager.disableTexture2D();
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_COLOR);
  worldrenderer.pos((double)-(sizeRenderBoxDiameter / 2),0,-(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)-(sizeRenderBoxDiameter / 2),0,(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)(sizeRenderBoxDiameter / 2),0,(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)(sizeRenderBoxDiameter / 2),0,-(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  tessellator.draw();
  GlStateManager.enableTexture2D();
  GlStateManager.enableLighting();
  GlStateManager.disableBlend();
  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  GlStateManager.popMatrix();
  renderLivingLabel(""String_Node_Str"" + '6' + ""String_Node_Str"",x,y + 1.2F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
  if (ConfigMisc.radarCloudDebug) {
    EntityPlayer entP=Minecraft.getMinecraft().player;
    if (entP != null) {
      WeatherManagerClient wm=ClientTickHandler.weatherManager;
      String rainThunder=entP.world.rainingStrength + ""String_Node_Str"" + entP.world.thunderingStrength;
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + (entP.world.isRaining() ? ""String_Node_Str"" : ""String_Node_Str"") + (entP.world.isThundering() ? ""String_Node_Str"" : ""String_Node_Str""),x,y + 2.0F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + (wm.isVanillaRainActiveOnServer ? ""String_Node_Str"" : ""String_Node_Str"") + (wm.isVanillaThunderActiveOnServer ? ""String_Node_Str"" : ""String_Node_Str""),x,y + 2.1F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + SceneEnhancer.getRainStrengthAndControlVisuals(entP),x,y + 2.2F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + levelWater,x,y + 2.3F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + descDist,x,y + 2.4F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + rainThunder,x,y + 2.5F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
    }
  }
  for (int i=0; i < tEnt.storms.size(); i++) {
    WeatherObject wo=tEnt.storms.get(i);
    GL11.glPushMatrix();
    Vec3 posRenderOffset=new Vec3(wo.pos.xCoord - tEnt.getPos().getX(),0,wo.pos.zCoord - tEnt.getPos().getZ());
    posRenderOffset.xCoord/=sizeSimBoxDiameter;
    posRenderOffset.zCoord/=sizeSimBoxDiameter;
    posRenderOffset.xCoord*=sizeRenderBoxDiameter;
    posRenderOffset.zCoord*=sizeRenderBoxDiameter;
    GL11.glTranslated(posRenderOffset.xCoord,0,posRenderOffset.zCoord);
    if (wo instanceof StormObject) {
      StormObject storm=(StormObject)wo;
      if (storm.levelCurIntensityStage >= StormObject.STATE_FORMING) {
        if (storm.stormType == StormObject.TYPE_WATER) {
          renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconCyclone);
          renderLivingLabel(""String_Node_Str"" + (int)(storm.levelCurIntensityStage - StormObject.levelStormIntensityFormingStartVal),x,y + 1.5F,z,1,15,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
 else {
          renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconTornado);
          renderLivingLabel(""String_Node_Str"" + (int)(storm.levelCurIntensityStage - StormObject.levelStormIntensityFormingStartVal),x,y + 1.5F,z,1,12,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_HAIL) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconHail);
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconWind);
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_HIGHWIND) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconLightning);
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconWind);
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_THUNDER) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconLightning);
      }
 else       if (storm.isPrecipitating()) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconRain);
      }
      if (storm.hasStormPeaked && (storm.levelCurIntensityStage > storm.STATE_NORMAL)) {
        renderLivingLabel(""String_Node_Str"" + '4' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
 else {
        if (ConfigMisc.radarCloudDebug) {
          if (storm.isCloudlessStorm()) {
            renderLivingLabel(""String_Node_Str"" + '0' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
          }
 else {
            renderLivingLabel(""String_Node_Str"" + 'f' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
          }
        }
 else {
          renderLivingLabel(""String_Node_Str"" + '2' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
      }
    }
 else     if (wo instanceof WeatherObjectSandstorm) {
      renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconSandstorm);
      if (((WeatherObjectSandstorm)wo).isFrontGrowing) {
        renderLivingLabel(""String_Node_Str"" + '2' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
 else {
        renderLivingLabel(""String_Node_Str"" + '4' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
    }
    GL11.glTranslated(-posRenderOffset.xCoord,0,-posRenderOffset.zCoord);
    GL11.glPopMatrix();
  }
}",0.9674113547858167
81801,"/** 
 * Called to update the entity's position/logic.
 */
public void onUpdate(){
  super.onUpdate();
  if (world.isRemote) {
    if (this.lightningState == 2) {
      updateSoundEffect();
    }
  }
  --this.lightningState;
  if (this.lightningState < 0) {
    if (this.boltLivingTime == 0) {
      this.setDead();
    }
 else     if (this.lightningState < -this.rand.nextInt(10)) {
      --this.boltLivingTime;
      this.lightningState=1;
      this.boltVertex=this.rand.nextLong();
      if (!this.world.isRemote && rand.nextInt(fireChance) == 0 && this.world.getGameRules().getBoolean(""String_Node_Str"") && this.world.isAreaLoaded(new BlockPos(MathHelper.floor(this.posX),MathHelper.floor(this.posY),MathHelper.floor(this.posZ)),10)) {
        int i=MathHelper.floor(this.posX);
        int j=MathHelper.floor(this.posY);
        int k=MathHelper.floor(this.posZ);
        if (ConfigStorm.Lightning_StartsFires) {
          if (CoroUtilBlock.isAir(world.getBlockState(new BlockPos(i,j,k)).getBlock()) && Blocks.FIRE.canPlaceBlockAt(world,new BlockPos(i,j,k))) {
            world.setBlockState(new BlockPos(i,j,k),Blocks.FIRE.getDefaultState().withProperty(BlockFire.AGE,fireLifeTime),3);
          }
        }
      }
    }
  }
  if (this.lightningState >= 0) {
    if (this.world.isRemote) {
      updateFlashEffect();
    }
 else {
      double d0=3.0D;
      List list=this.world.getEntitiesWithinAABBExcludingEntity(this,new AxisAlignedBB(this.posX - d0,this.posY - d0,this.posZ - d0,this.posX + d0,this.posY + 6.0D + d0,this.posZ + d0));
      for (int l=0; l < list.size(); ++l) {
        Entity entity=(Entity)list.get(l);
      }
    }
  }
}","/** 
 * Called to update the entity's position/logic.
 */
public void onUpdate(){
  super.onUpdate();
  if (world.isRemote) {
    if (this.lightningState == 2) {
      updateSoundEffect();
    }
  }
  --this.lightningState;
  if (this.lightningState < 0) {
    if (this.boltLivingTime == 0) {
      this.setDead();
    }
 else     if (this.lightningState < -this.rand.nextInt(10)) {
      --this.boltLivingTime;
      this.lightningState=1;
      this.boltVertex=this.rand.nextLong();
      if (!this.world.isRemote && rand.nextInt(fireChance) == 0 && this.world.getGameRules().getBoolean(""String_Node_Str"") && this.world.isAreaLoaded(new BlockPos(MathHelper.floor(this.posX),MathHelper.floor(this.posY),MathHelper.floor(this.posZ)),10)) {
        int i=MathHelper.floor(this.posX);
        int j=MathHelper.floor(this.posY);
        int k=MathHelper.floor(this.posZ);
        if (ConfigStorm.Lightning_StartsFires) {
          if (CoroUtilBlock.isAir(world.getBlockState(new BlockPos(i,j,k)).getBlock()) && Blocks.FIRE.canPlaceBlockAt(world,new BlockPos(i,j,k))) {
            world.setBlockState(new BlockPos(i,j,k),Blocks.FIRE.getDefaultState().withProperty(BlockFire.AGE,fireLifeTime),3);
          }
        }
      }
    }
  }
  if (this.lightningState >= 0) {
    if (this.world.isRemote) {
      updateFlashEffect();
    }
 else {
      net.minecraft.entity.effect.EntityLightningBolt vanillaBolt=new net.minecraft.entity.effect.EntityLightningBolt(world,this.posX,this.posY,this.posZ,true);
      double d0=3.0D;
      List list=this.world.getEntitiesWithinAABBExcludingEntity(this,new AxisAlignedBB(this.posX - d0,this.posY - d0,this.posZ - d0,this.posX + d0,this.posY + 6.0D + d0,this.posZ + d0));
      for (int l=0; l < list.size(); ++l) {
        Entity entity=(Entity)list.get(l);
        entity.onStruckByLightning(vanillaBolt);
      }
    }
  }
}",0.9403069926094372
81802,"public static void processNBTToModConfigServer(){
  nbtSaveDataServer();
  Weather.dbg(""String_Node_Str"");
  Weather.dbg(""String_Node_Str"" + nbtServerData);
  try {
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_STORM)) {
      ConfigMisc.overcastMode=LIST_STORMSWHEN.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_STORM)).equalsIgnoreCase(""String_Node_Str"");
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_LOCK)) {
      int val=nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_LOCK);
      if (val == 1) {
        ConfigMisc.lockServerWeatherMode=1;
      }
 else       if (val == 0) {
        ConfigMisc.lockServerWeatherMode=0;
      }
 else {
        ConfigMisc.lockServerWeatherMode=-1;
      }
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_SNOWFALLBLOCKS)) {
      boolean val=nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_SNOWFALLBLOCKS) == 1;
      ConfigSnow.Snow_PerformSnowfall=val;
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_RATEOFSTORM)) {
      int numDays=nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_RATEOFSTORM);
      if (numDays == 0) {
        ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks=12000;
        ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks=12000;
      }
 else       if (numDays == 11) {
        ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks=-1;
        ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks=-1;
      }
 else {
        ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks=24000 * numDays;
        ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks=24000 * numDays;
      }
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFSTORM)) {
      if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFSTORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Deadly_OddsTo1=30;
        ConfigStorm.Server_Storm_Deadly_OddsTo1=30;
      }
 else       if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFSTORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Deadly_OddsTo1=45;
        ConfigStorm.Server_Storm_Deadly_OddsTo1=45;
      }
 else       if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFSTORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Deadly_OddsTo1=60;
        ConfigStorm.Server_Storm_Deadly_OddsTo1=60;
      }
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFRAIN)) {
      if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFRAIN)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Rain_OddsTo1=150;
      }
 else       if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFRAIN)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Rain_OddsTo1=300;
      }
 else       if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFRAIN)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Rain_OddsTo1=450;
      }
 else       if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFRAIN)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Rain_OddsTo1=-1;
      }
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_BLOCKDESTRUCTION)) {
      ConfigTornado.Storm_Tornado_grabBlocks=LIST_TOGGLE.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_BLOCKDESTRUCTION)).equalsIgnoreCase(""String_Node_Str"");
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_TORNADOANDCYCLONES)) {
      ConfigTornado.Storm_NoTornadosOrCyclones=LIST_TOGGLE.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_TORNADOANDCYCLONES)).equalsIgnoreCase(""String_Node_Str"");
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_SANDSTORMS)) {
      ConfigSand.Storm_NoSandstorms=LIST_TOGGLE.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_SANDSTORMS)).equalsIgnoreCase(""String_Node_Str"");
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_GLOBALRATE)) {
      ConfigStorm.Server_Storm_Deadly_UseGlobalRate=nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_GLOBALRATE) == 0;
      ConfigSand.Sandstorm_UseGlobalServerRate=nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_GLOBALRATE) == 0;
    }
    NBTTagCompound nbtDims=nbtServerData.getCompoundTag(""String_Node_Str"");
    Weather.dbg(""String_Node_Str"" + listDimensionsWeather);
    Iterator it=nbtDims.getKeySet().iterator();
    while (it.hasNext()) {
      String tagName=(String)it.next();
      NBTTagInt entry=(NBTTagInt)nbtDims.getTag(tagName);
      String[] vals=tagName.split(""String_Node_Str"");
      if (vals[2].equals(""String_Node_Str"")) {
        int dimID=Integer.parseInt(vals[1]);
        if (entry.getInt() == 0) {
          if (listDimensionsWeather.contains(dimID)) {
            listDimensionsWeather.remove(dimID);
          }
        }
 else {
          if (!listDimensionsWeather.contains(dimID)) {
            listDimensionsWeather.add(dimID);
          }
        }
      }
 else       if (vals[2].equals(""String_Node_Str"")) {
        int dimID=Integer.parseInt(vals[1]);
        if (entry.getInt() == 0) {
          if (listDimensionsClouds.contains(dimID)) {
            listDimensionsClouds.remove(dimID);
          }
        }
 else {
          if (!listDimensionsClouds.contains(dimID)) {
            listDimensionsClouds.add(dimID);
          }
        }
      }
 else       if (vals[2].equals(""String_Node_Str"")) {
        int dimID=Integer.parseInt(vals[1]);
        if (entry.getInt() == 0) {
          if (listDimensionsStorms.contains(dimID)) {
            listDimensionsStorms.remove(dimID);
          }
        }
 else {
          if (!listDimensionsStorms.contains(dimID)) {
            listDimensionsStorms.add(dimID);
          }
        }
      }
      Weather.dbg(""String_Node_Str"" + vals[1] + ""String_Node_Str""+ vals[2]+ ""String_Node_Str""+ entry.getInt());
    }
    Weather.dbg(""String_Node_Str"" + listDimensionsWeather);
    processListsReverse();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  for (  IConfigCategory config : Weather.listConfigs) {
    ConfigMod.configLookup.get(config.getRegistryName()).writeConfigFile(true);
  }
}","public static void processNBTToModConfigServer(){
  nbtSaveDataServer();
  Weather.dbg(""String_Node_Str"");
  Weather.dbg(""String_Node_Str"" + nbtServerData);
  try {
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_STORM)) {
      ConfigMisc.overcastMode=LIST_STORMSWHEN.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_STORM)).equalsIgnoreCase(""String_Node_Str"");
      ServerTickHandler.syncServerConfigToClient();
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_LOCK)) {
      int val=nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_LOCK);
      if (val == 1) {
        ConfigMisc.lockServerWeatherMode=1;
      }
 else       if (val == 0) {
        ConfigMisc.lockServerWeatherMode=0;
      }
 else {
        ConfigMisc.lockServerWeatherMode=-1;
      }
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_SNOWFALLBLOCKS)) {
      boolean val=nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_SNOWFALLBLOCKS) == 1;
      ConfigSnow.Snow_PerformSnowfall=val;
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_RATEOFSTORM)) {
      int numDays=nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_RATEOFSTORM);
      if (numDays == 0) {
        ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks=12000;
        ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks=12000;
      }
 else       if (numDays == 11) {
        ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks=-1;
        ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks=-1;
      }
 else {
        ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks=24000 * numDays;
        ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks=24000 * numDays;
      }
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFSTORM)) {
      if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFSTORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Deadly_OddsTo1=30;
        ConfigStorm.Server_Storm_Deadly_OddsTo1=30;
      }
 else       if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFSTORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Deadly_OddsTo1=45;
        ConfigStorm.Server_Storm_Deadly_OddsTo1=45;
      }
 else       if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFSTORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Deadly_OddsTo1=60;
        ConfigStorm.Server_Storm_Deadly_OddsTo1=60;
      }
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFRAIN)) {
      if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFRAIN)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Rain_OddsTo1=150;
      }
 else       if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFRAIN)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Rain_OddsTo1=300;
      }
 else       if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFRAIN)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Rain_OddsTo1=450;
      }
 else       if (LIST_RATES2.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_CHANCEOFRAIN)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigStorm.Player_Storm_Rain_OddsTo1=-1;
      }
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_BLOCKDESTRUCTION)) {
      ConfigTornado.Storm_Tornado_grabBlocks=LIST_TOGGLE.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_BLOCKDESTRUCTION)).equalsIgnoreCase(""String_Node_Str"");
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_TORNADOANDCYCLONES)) {
      ConfigTornado.Storm_NoTornadosOrCyclones=LIST_TOGGLE.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_TORNADOANDCYCLONES)).equalsIgnoreCase(""String_Node_Str"");
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_SANDSTORMS)) {
      ConfigSand.Storm_NoSandstorms=LIST_TOGGLE.get(nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_SANDSTORMS)).equalsIgnoreCase(""String_Node_Str"");
    }
    if (nbtServerData.hasKey(""String_Node_Str"" + CMD_BTN_PREF_GLOBALRATE)) {
      ConfigStorm.Server_Storm_Deadly_UseGlobalRate=nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_GLOBALRATE) == 0;
      ConfigSand.Sandstorm_UseGlobalServerRate=nbtServerData.getInteger(""String_Node_Str"" + CMD_BTN_PREF_GLOBALRATE) == 0;
    }
    NBTTagCompound nbtDims=nbtServerData.getCompoundTag(""String_Node_Str"");
    Weather.dbg(""String_Node_Str"" + listDimensionsWeather);
    Iterator it=nbtDims.getKeySet().iterator();
    while (it.hasNext()) {
      String tagName=(String)it.next();
      NBTTagInt entry=(NBTTagInt)nbtDims.getTag(tagName);
      String[] vals=tagName.split(""String_Node_Str"");
      if (vals[2].equals(""String_Node_Str"")) {
        int dimID=Integer.parseInt(vals[1]);
        if (entry.getInt() == 0) {
          if (listDimensionsWeather.contains(dimID)) {
            listDimensionsWeather.remove(dimID);
          }
        }
 else {
          if (!listDimensionsWeather.contains(dimID)) {
            listDimensionsWeather.add(dimID);
          }
        }
      }
 else       if (vals[2].equals(""String_Node_Str"")) {
        int dimID=Integer.parseInt(vals[1]);
        if (entry.getInt() == 0) {
          if (listDimensionsClouds.contains(dimID)) {
            listDimensionsClouds.remove(dimID);
          }
        }
 else {
          if (!listDimensionsClouds.contains(dimID)) {
            listDimensionsClouds.add(dimID);
          }
        }
      }
 else       if (vals[2].equals(""String_Node_Str"")) {
        int dimID=Integer.parseInt(vals[1]);
        if (entry.getInt() == 0) {
          if (listDimensionsStorms.contains(dimID)) {
            listDimensionsStorms.remove(dimID);
          }
        }
 else {
          if (!listDimensionsStorms.contains(dimID)) {
            listDimensionsStorms.add(dimID);
          }
        }
      }
      Weather.dbg(""String_Node_Str"" + vals[1] + ""String_Node_Str""+ vals[2]+ ""String_Node_Str""+ entry.getInt());
    }
    Weather.dbg(""String_Node_Str"" + listDimensionsWeather);
    processListsReverse();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  for (  IConfigCategory config : Weather.listConfigs) {
    ConfigMod.configLookup.get(config.getRegistryName()).writeConfigFile(true);
  }
}",0.9960006152899554
81803,"public void nbtSyncFromServer(NBTTagCompound parNBT){
  String command=parNBT.getString(""String_Node_Str"");
  if (command.equals(""String_Node_Str"")) {
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    Weather.dbg(""String_Node_Str"" + ID);
    EnumWeatherObjectType weatherObjectType=EnumWeatherObjectType.get(stormNBT.getInteger(""String_Node_Str""));
    WeatherObject wo=null;
    if (weatherObjectType == EnumWeatherObjectType.CLOUD) {
      wo=new StormObject(ClientTickHandler.weatherManager);
    }
 else     if (weatherObjectType == EnumWeatherObjectType.SAND) {
      wo=new WeatherObjectSandstorm(ClientTickHandler.weatherManager);
    }
    wo.getNbtCache().setNewNBT(stormNBT);
    wo.nbtSyncFromServer();
    wo.getNbtCache().updateCacheFromNew();
    addStormObject(wo);
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    WeatherObject so=lookupStormObjectsByID.get(ID);
    if (so != null) {
      removeStormObject(ID);
    }
 else {
      Weather.dbg(""String_Node_Str"" + ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    WeatherObject so=lookupStormObjectsByID.get(ID);
    if (so != null) {
      so.getNbtCache().setNewNBT(stormNBT);
      so.nbtSyncFromServer();
      so.getNbtCache().updateCacheFromNew();
    }
 else {
      Weather.dbg(""String_Node_Str"" + ID + ""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    Weather.dbg(""String_Node_Str"");
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    VolcanoObject so=new VolcanoObject(ClientTickHandler.weatherManager);
    so.nbtSyncFromServer(stormNBT);
    addVolcanoObject(so);
  }
 else   if (command.equals(""String_Node_Str"")) {
    Weather.dbg(""String_Node_Str"");
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    VolcanoObject so=lookupVolcanoes.get(ID);
    if (so != null) {
      removeVolcanoObject(ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    Weather.dbg(""String_Node_Str"");
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    VolcanoObject so=lookupVolcanoes.get(ID);
    if (so != null) {
      so.nbtSyncFromServer(stormNBT);
    }
 else {
      Weather.dbg(""String_Node_Str"" + ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound nbt=parNBT.getCompoundTag(""String_Node_Str"");
    windMan.nbtSyncFromServer(nbt);
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound nbt=parNBT.getCompoundTag(""String_Node_Str"");
    int posXS=nbt.getInteger(""String_Node_Str"");
    int posYS=nbt.getInteger(""String_Node_Str"");
    int posZS=nbt.getInteger(""String_Node_Str"");
    boolean custom=nbt.getBoolean(""String_Node_Str"");
    double posX=(double)posXS;
    double posY=(double)posYS;
    double posZ=(double)posZS;
    Entity ent=null;
    if (!custom) {
      ent=new EntityLightningBolt(getWorld(),posX,posY,posZ);
    }
 else {
      ent=new EntityLightningBoltCustom(getWorld(),posX,posY,posZ);
    }
    ent.serverPosX=posXS;
    ent.serverPosY=posYS;
    ent.serverPosZ=posZS;
    ent.rotationYaw=0.0F;
    ent.rotationPitch=0.0F;
    ent.setEntityId(nbt.getInteger(""String_Node_Str""));
    getWorld().addWeatherEffect(ent);
  }
 else   if (command.equals(""String_Node_Str"")) {
    isVanillaRainActiveOnServer=parNBT.getBoolean(""String_Node_Str"");
  }
}","public void nbtSyncFromServer(NBTTagCompound parNBT){
  String command=parNBT.getString(""String_Node_Str"");
  if (command.equals(""String_Node_Str"")) {
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    Weather.dbg(""String_Node_Str"" + ID);
    EnumWeatherObjectType weatherObjectType=EnumWeatherObjectType.get(stormNBT.getInteger(""String_Node_Str""));
    WeatherObject wo=null;
    if (weatherObjectType == EnumWeatherObjectType.CLOUD) {
      wo=new StormObject(ClientTickHandler.weatherManager);
    }
 else     if (weatherObjectType == EnumWeatherObjectType.SAND) {
      wo=new WeatherObjectSandstorm(ClientTickHandler.weatherManager);
    }
    wo.getNbtCache().setNewNBT(stormNBT);
    wo.nbtSyncFromServer();
    wo.getNbtCache().updateCacheFromNew();
    addStormObject(wo);
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    WeatherObject so=lookupStormObjectsByID.get(ID);
    if (so != null) {
      removeStormObject(ID);
    }
 else {
      Weather.dbg(""String_Node_Str"" + ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    WeatherObject so=lookupStormObjectsByID.get(ID);
    if (so != null) {
      so.getNbtCache().setNewNBT(stormNBT);
      so.nbtSyncFromServer();
      so.getNbtCache().updateCacheFromNew();
    }
 else {
      Weather.dbg(""String_Node_Str"" + ID + ""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    Weather.dbg(""String_Node_Str"");
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    VolcanoObject so=new VolcanoObject(ClientTickHandler.weatherManager);
    so.nbtSyncFromServer(stormNBT);
    addVolcanoObject(so);
  }
 else   if (command.equals(""String_Node_Str"")) {
    Weather.dbg(""String_Node_Str"");
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    VolcanoObject so=lookupVolcanoes.get(ID);
    if (so != null) {
      removeVolcanoObject(ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    Weather.dbg(""String_Node_Str"");
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    VolcanoObject so=lookupVolcanoes.get(ID);
    if (so != null) {
      so.nbtSyncFromServer(stormNBT);
    }
 else {
      Weather.dbg(""String_Node_Str"" + ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound nbt=parNBT.getCompoundTag(""String_Node_Str"");
    windMan.nbtSyncFromServer(nbt);
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound nbt=parNBT.getCompoundTag(""String_Node_Str"");
    int posXS=nbt.getInteger(""String_Node_Str"");
    int posYS=nbt.getInteger(""String_Node_Str"");
    int posZS=nbt.getInteger(""String_Node_Str"");
    boolean custom=nbt.getBoolean(""String_Node_Str"");
    double posX=(double)posXS;
    double posY=(double)posYS;
    double posZ=(double)posZS;
    Entity ent=null;
    if (!custom) {
      ent=new EntityLightningBolt(getWorld(),posX,posY,posZ);
    }
 else {
      ent=new EntityLightningBoltCustom(getWorld(),posX,posY,posZ);
    }
    ent.serverPosX=posXS;
    ent.serverPosY=posYS;
    ent.serverPosZ=posZS;
    ent.rotationYaw=0.0F;
    ent.rotationPitch=0.0F;
    ent.setEntityId(nbt.getInteger(""String_Node_Str""));
    getWorld().addWeatherEffect(ent);
  }
 else   if (command.equals(""String_Node_Str"")) {
    isVanillaRainActiveOnServer=parNBT.getBoolean(""String_Node_Str"");
    isVanillaThunderActiveOnServer=parNBT.getBoolean(""String_Node_Str"");
  }
}",0.9903272823638531
81804,"@Mod.EventHandler public void preInit(FMLPreInitializationEvent event){
  eventChannel.register(new EventHandlerPacket());
  MinecraftForge.EVENT_BUS.register(new EventHandlerFML());
  MinecraftForge.EVENT_BUS.register(new EventHandlerForge());
  ConfigMod.addConfigFile(event,addConfig(new ConfigMisc()));
  ConfigMod.addConfigFile(event,addConfig(new ConfigWind()));
  ConfigMod.addConfigFile(event,addConfig(new ConfigSand()));
  ConfigMod.addConfigFile(event,addConfig(new ConfigSnow()));
  ConfigMod.addConfigFile(event,addConfig(new ConfigStorm()));
  ConfigMod.addConfigFile(event,addConfig(new ConfigTornado()));
  ConfigMod.addConfigFile(event,addConfig(new ConfigParticle()));
  ConfigMod.addConfigFile(event,addConfig(new ConfigFoliage()));
  WeatherUtilConfig.nbtLoadDataAll();
  proxy.preInit();
}","@Mod.EventHandler public void preInit(FMLPreInitializationEvent event){
  eventChannel.register(new EventHandlerPacket());
  MinecraftForge.EVENT_BUS.register(new EventHandlerFML());
  MinecraftForge.EVENT_BUS.register(new EventHandlerForge());
  configMisc=new ConfigMisc();
  ConfigMod.addConfigFile(event,addConfig(configMisc));
  ConfigMod.addConfigFile(event,addConfig(new ConfigWind()));
  ConfigMod.addConfigFile(event,addConfig(new ConfigSand()));
  ConfigMod.addConfigFile(event,addConfig(new ConfigSnow()));
  ConfigMod.addConfigFile(event,addConfig(new ConfigStorm()));
  ConfigMod.addConfigFile(event,addConfig(new ConfigTornado()));
  ConfigMod.addConfigFile(event,addConfig(new ConfigParticle()));
  ConfigMod.addConfigFile(event,addConfig(new ConfigFoliage()));
  WeatherUtilConfig.nbtLoadDataAll();
  proxy.preInit();
}",0.97629179331307
81805,"public static void modelBakeEvent(ModelBakeEvent event){
  boolean replaceVanillaModels=ConfigCoroUtil.foliageShaders && EventHandler.queryUseOfShaders();
  boolean textureFix=false;
  if (replaceVanillaModels) {
    String str=""String_Node_Str"";
    CULog.log(str);
    ProgressManager.ProgressBar prog=ProgressManager.push(str,event.getModelRegistry().getKeys().size());
    Map<ModelResourceLocation,IModel> stateModels=ReflectionHelper.getPrivateValue(ModelLoader.class,event.getModelLoader(),""String_Node_Str"");
    IBakedModel blank=event.getModelRegistry().getObject(new ModelResourceLocation(""String_Node_Str"",""String_Node_Str""));
    for (    ModelResourceLocation res : event.getModelRegistry().getKeys()) {
      prog.step(res.toString());
      IBakedModel bakedModel=event.getModelRegistry().getObject(res);
      IModel model=stateModels.get(res);
      if (model != null) {
        try {
          Set<ResourceLocation> textures=Sets.newHashSet(model.getTextures());
          escape:           if (!res.getVariant().equals(""String_Node_Str"")) {
            for (            FoliageReplacerBase replacer : listFoliageReplacers) {
              for (              TextureAtlasSprite sprite : replacer.sprites) {
                for (                ResourceLocation res2 : textures) {
                  if (res2.toString().equals(sprite.getIconName())) {
                    if (!res.toString().contains(""String_Node_Str"")) {
                      if (textureFix) {
                        if (blank.getOverrides() instanceof AnimationItemOverrideList) {
                          AnimationItemOverrideList obj1=(AnimationItemOverrideList)blank.getOverrides();
                          IModel model1=ReflectionHelper.getPrivateValue(AnimationItemOverrideList.class,obj1,""String_Node_Str"");
                          if (vanillaModelWrapperClass.isAssignableFrom(model1.getClass())) {
                            ModelBlock model2=(ModelBlock)ReflectionHelper.getPrivateValue(vanillaModelWrapperClass,model1,""String_Node_Str"");
                            String tex=res2.toString().split(""String_Node_Str"")[1];
                            model2.textures.put(""String_Node_Str"",tex);
                          }
                        }
                      }
                      event.getModelRegistry().putObject(res,blank);
                      break escape;
                    }
                  }
                }
              }
            }
          }
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
    ProgressManager.pop(prog);
  }
}","public static void modelBakeEvent(ModelBakeEvent event){
  boolean replaceVanillaModels=ConfigCoroUtil.foliageShaders && EventHandler.queryUseOfShaders();
  boolean textureFix=false;
  if (replaceVanillaModels) {
    String str=""String_Node_Str"";
    CULog.log(str);
    ProgressManager.ProgressBar prog=ProgressManager.push(str,event.getModelRegistry().getKeys().size(),true);
    Map<ModelResourceLocation,IModel> stateModels=ReflectionHelper.getPrivateValue(ModelLoader.class,event.getModelLoader(),""String_Node_Str"");
    IBakedModel blank=event.getModelRegistry().getObject(new ModelResourceLocation(""String_Node_Str"",""String_Node_Str""));
    for (    ModelResourceLocation res : event.getModelRegistry().getKeys()) {
      prog.step(res.toString());
      IBakedModel bakedModel=event.getModelRegistry().getObject(res);
      IModel model=stateModels.get(res);
      if (model != null) {
        try {
          Set<ResourceLocation> textures=Sets.newHashSet(model.getTextures());
          escape:           if (!res.getVariant().equals(""String_Node_Str"")) {
            for (            FoliageReplacerBase replacer : listFoliageReplacers) {
              for (              TextureAtlasSprite sprite : replacer.sprites) {
                for (                ResourceLocation res2 : textures) {
                  if (res2.toString().equals(sprite.getIconName())) {
                    if (!res.toString().contains(""String_Node_Str"")) {
                      if (textureFix) {
                        if (blank.getOverrides() instanceof AnimationItemOverrideList) {
                          AnimationItemOverrideList obj1=(AnimationItemOverrideList)blank.getOverrides();
                          IModel model1=ReflectionHelper.getPrivateValue(AnimationItemOverrideList.class,obj1,""String_Node_Str"");
                          if (vanillaModelWrapperClass.isAssignableFrom(model1.getClass())) {
                            ModelBlock model2=(ModelBlock)ReflectionHelper.getPrivateValue(vanillaModelWrapperClass,model1,""String_Node_Str"");
                            String tex=res2.toString().split(""String_Node_Str"")[1];
                            model2.textures.put(""String_Node_Str"",tex);
                          }
                        }
                      }
                      event.getModelRegistry().putObject(res,blank);
                      break escape;
                    }
                  }
                }
              }
            }
          }
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
    ProgressManager.pop(prog);
  }
}",0.999045619393014
81806,"public static void processNBTToModConfigClient(){
  nbtSaveDataClient();
  Weather.dbg(""String_Node_Str"");
  Weather.dbg(""String_Node_Str"" + nbtClientData);
  String modID=""String_Node_Str"";
  try {
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_PARTICLEPRECIP)) {
      ConfigParticle.Particle_RainSnow=LIST_TOGGLE.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_PARTICLEPRECIP)).equalsIgnoreCase(""String_Node_Str"");
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_STORM)) {
      if (LIST_RATES.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_STORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigMisc.Cloud_ParticleSpawnDelay=0;
        ConfigStorm.Storm_ParticleSpawnDelay=1;
        ConfigParticle.Sandstorm_Particle_Debris_effect_rate=1;
        ConfigParticle.Sandstorm_Particle_Dust_effect_rate=1;
      }
 else       if (LIST_RATES.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_STORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigMisc.Cloud_ParticleSpawnDelay=2;
        ConfigStorm.Storm_ParticleSpawnDelay=3;
        ConfigParticle.Sandstorm_Particle_Debris_effect_rate=0.6D;
        ConfigParticle.Sandstorm_Particle_Dust_effect_rate=0.6D;
      }
 else       if (LIST_RATES.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_STORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigMisc.Cloud_ParticleSpawnDelay=5;
        ConfigStorm.Storm_ParticleSpawnDelay=5;
        ConfigParticle.Sandstorm_Particle_Debris_effect_rate=0.3D;
        ConfigParticle.Sandstorm_Particle_Dust_effect_rate=0.3D;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_NATURE)) {
      if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=1F;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=0.7F;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=0.3F;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=0.0F;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)) {
      if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=1D;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=0.7D;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=0.3D;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=0D;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_PARTICLESNOMODS)) {
      ConfigParticle.Particle_VanillaAndWeatherOnly=LIST_TOGGLE.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_PARTICLESNOMODS)).equalsIgnoreCase(""String_Node_Str"");
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_SHADERS_PARTICLE)) {
      int val=nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_SHADERS_PARTICLE);
      if (val == 0) {
        ConfigCoroUtil.particleShaders=false;
      }
 else       if (val == 1) {
        ConfigCoroUtil.particleShaders=true;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_SHADERS_FOLIAGE)) {
      int val=nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_SHADERS_FOLIAGE);
      if (val == 0) {
        ConfigCoroUtil.foliageShaders=false;
      }
 else       if (val == 1) {
        ConfigCoroUtil.foliageShaders=true;
      }
    }
    NBTTagCompound nbtDims=nbtClientData.getCompoundTag(""String_Node_Str"");
    Weather.dbg(""String_Node_Str"" + listDimensionsWindEffects);
    Iterator it=nbtDims.getKeySet().iterator();
    while (it.hasNext()) {
      String tagName=(String)it.next();
      NBTTagInt entry=(NBTTagInt)nbtDims.getTag(tagName);
      String[] vals=tagName.split(""String_Node_Str"");
      if (vals[2].equals(""String_Node_Str"")) {
        int dimID=Integer.parseInt(vals[1]);
        if (entry.getInt() == 0) {
          if (listDimensionsWindEffects.contains(dimID)) {
            listDimensionsWindEffects.remove((Object)dimID);
          }
        }
 else {
          if (!listDimensionsWindEffects.contains(dimID)) {
            listDimensionsWindEffects.add(dimID);
          }
        }
      }
    }
    Weather.dbg(""String_Node_Str"" + listDimensionsWindEffects);
    processListsReverse();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  ConfigMod.configLookup.get(modID).writeConfigFile(true);
}","public static void processNBTToModConfigClient(){
  nbtSaveDataClient();
  Weather.dbg(""String_Node_Str"");
  Weather.dbg(""String_Node_Str"" + nbtClientData);
  String modIDWeather=Weather.configMisc.getRegistryName();
  String modIDCoroUtil=CoroUtil.configCoroUtil.getRegistryName();
  try {
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_PARTICLEPRECIP)) {
      ConfigParticle.Particle_RainSnow=LIST_TOGGLE.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_PARTICLEPRECIP)).equalsIgnoreCase(""String_Node_Str"");
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_STORM)) {
      if (LIST_RATES.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_STORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigMisc.Cloud_ParticleSpawnDelay=0;
        ConfigStorm.Storm_ParticleSpawnDelay=1;
        ConfigParticle.Sandstorm_Particle_Debris_effect_rate=1;
        ConfigParticle.Sandstorm_Particle_Dust_effect_rate=1;
      }
 else       if (LIST_RATES.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_STORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigMisc.Cloud_ParticleSpawnDelay=2;
        ConfigStorm.Storm_ParticleSpawnDelay=3;
        ConfigParticle.Sandstorm_Particle_Debris_effect_rate=0.6D;
        ConfigParticle.Sandstorm_Particle_Dust_effect_rate=0.6D;
      }
 else       if (LIST_RATES.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_STORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigMisc.Cloud_ParticleSpawnDelay=5;
        ConfigStorm.Storm_ParticleSpawnDelay=5;
        ConfigParticle.Sandstorm_Particle_Debris_effect_rate=0.3D;
        ConfigParticle.Sandstorm_Particle_Dust_effect_rate=0.3D;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_NATURE)) {
      if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=1F;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=0.7F;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=0.3F;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=0.0F;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)) {
      if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=1D;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=0.7D;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=0.3D;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=0D;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_PARTICLESNOMODS)) {
      ConfigParticle.Particle_VanillaAndWeatherOnly=LIST_TOGGLE.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_PARTICLESNOMODS)).equalsIgnoreCase(""String_Node_Str"");
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_SHADERS_PARTICLE)) {
      int val=nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_SHADERS_PARTICLE);
      if (val == 0) {
        ConfigCoroUtil.particleShaders=false;
      }
 else       if (val == 1) {
        ConfigCoroUtil.particleShaders=true;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_SHADERS_FOLIAGE)) {
      int val=nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_SHADERS_FOLIAGE);
      if (val == 0) {
        ConfigCoroUtil.foliageShaders=false;
      }
 else       if (val == 1) {
        ConfigCoroUtil.foliageShaders=true;
      }
    }
    NBTTagCompound nbtDims=nbtClientData.getCompoundTag(""String_Node_Str"");
    Weather.dbg(""String_Node_Str"" + listDimensionsWindEffects);
    Iterator it=nbtDims.getKeySet().iterator();
    while (it.hasNext()) {
      String tagName=(String)it.next();
      NBTTagInt entry=(NBTTagInt)nbtDims.getTag(tagName);
      String[] vals=tagName.split(""String_Node_Str"");
      if (vals[2].equals(""String_Node_Str"")) {
        int dimID=Integer.parseInt(vals[1]);
        if (entry.getInt() == 0) {
          if (listDimensionsWindEffects.contains(dimID)) {
            listDimensionsWindEffects.remove((Object)dimID);
          }
        }
 else {
          if (!listDimensionsWindEffects.contains(dimID)) {
            listDimensionsWindEffects.add(dimID);
          }
        }
      }
    }
    Weather.dbg(""String_Node_Str"" + listDimensionsWindEffects);
    processListsReverse();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  ConfigMod.forceSaveAllFilesFromRuntimeSettings();
}",0.9812678785641784
81807,"public void tickProgression(){
  World world=manager.getWorld();
  if (world.getTotalWorldTime() % 3 == 0) {
    if (isGrowing) {
      if (size < maxSize) {
        size++;
      }
 else {
      }
    }
 else {
    }
  }
  float tempAdjustRate=(float)ConfigStorm.Storm_TemperatureAdjustRate;
  int levelWaterBuildRate=ConfigStorm.Storm_Rain_WaterBuildUpRate;
  int levelWaterSpendRate=ConfigStorm.Storm_Rain_WaterSpendRate;
  int randomChanceOfWaterBuildFromWater=ConfigStorm.Storm_Rain_WaterBuildUpOddsTo1FromSource;
  int randomChanceOfWaterBuildFromNothing=ConfigStorm.Storm_Rain_WaterBuildUpOddsTo1FromNothing;
  boolean isInOcean=false;
  boolean isOverWater=false;
  if (world.getTotalWorldTime() % ConfigStorm.Storm_AllTypes_TickRateDelay == 0) {
    NBTTagCompound playerNBT=PlayerData.getPlayerNBT(userSpawnedFor);
    long lastStormDeadlyTime=playerNBT.getLong(""String_Node_Str"");
    Biome bgb=world.getBiome(new BlockPos(MathHelper.floor(pos.xCoord),0,MathHelper.floor(pos.zCoord)));
    if (bgb != null) {
      isInOcean=bgb.biomeName.contains(""String_Node_Str"") || bgb.biomeName.contains(""String_Node_Str"");
      float biomeTempAdj=getTemperatureMCToWeatherSys(CoroUtilCompatibility.getAdjustedTemperature(manager.getWorld(),bgb,new BlockPos(MathHelper.floor(pos.xCoord),MathHelper.floor(pos.yCoord),MathHelper.floor(pos.zCoord))));
      if (levelTemperature > biomeTempAdj) {
        levelTemperature-=tempAdjustRate;
      }
 else {
        levelTemperature+=tempAdjustRate;
      }
    }
    boolean performBuildup=false;
    Random rand=new Random();
    if (!isPrecipitating() && rand.nextInt(randomChanceOfWaterBuildFromNothing) == 0) {
      performBuildup=true;
    }
    Block blockID=world.getBlockState(new BlockPos(MathHelper.floor(pos.xCoord),currentTopYBlock - 1,MathHelper.floor(pos.zCoord))).getBlock();
    if (!CoroUtilBlock.isAir(blockID)) {
      if (blockID.getMaterial(blockID.getDefaultState()) instanceof MaterialLiquid) {
        isOverWater=true;
      }
    }
    if (!performBuildup && !isPrecipitating() && rand.nextInt(randomChanceOfWaterBuildFromWater) == 0) {
      if (isOverWater) {
        performBuildup=true;
      }
      if (!performBuildup && bgb != null && (isInOcean || bgb.biomeName.contains(""String_Node_Str"") || bgb.biomeName.contains(""String_Node_Str"")|| bgb.biomeName.contains(""String_Node_Str""))) {
        performBuildup=true;
      }
    }
    if (performBuildup) {
      levelWater+=levelWaterBuildRate;
    }
    if (isPrecipitating()) {
      levelWater-=levelWaterSpendRate;
      if (levelWater < 0)       levelWater=0;
      if (levelWater <= 0) {
        setPrecipitating(false);
        Weather.dbg(""String_Node_Str"" + ID);
      }
    }
 else {
      if (!ConfigMisc.overcastMode || manager.getWorld().isRaining()) {
        if (levelWater >= levelWaterStartRaining) {
          if (ConfigStorm.Player_Storm_Rain_OddsTo1 != -1 && rand.nextInt(ConfigStorm.Player_Storm_Rain_OddsTo1) == 0) {
            setPrecipitating(true);
            Weather.dbg(""String_Node_Str"" + ID);
          }
        }
      }
    }
    WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(world.provider.getDimension());
    boolean tryFormStorm=false;
    if (this.canBeDeadly) {
      if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
        if (ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks != -1) {
          if (wm.lastStormFormed == 0 || wm.lastStormFormed + ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks < world.getTotalWorldTime()) {
            tryFormStorm=true;
          }
        }
      }
 else {
        if (ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks != -1) {
          if (lastStormDeadlyTime == 0 || lastStormDeadlyTime + ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks < world.getTotalWorldTime()) {
            tryFormStorm=true;
          }
        }
      }
    }
    if (weatherMachineControlled) {
      return;
    }
    if (((ConfigMisc.overcastMode && manager.getWorld().isRaining()) || !ConfigMisc.overcastMode) && WeatherUtilConfig.listDimensionsStorms.contains(manager.getWorld().provider.getDimension()) && tryFormStorm) {
      int stormFrontCollideDist=ConfigStorm.Storm_Deadly_CollideDistance;
      int randomChanceOfCollide=ConfigStorm.Player_Storm_Deadly_OddsTo1;
      if (isInOcean && (ConfigStorm.Storm_OddsTo1OfOceanBasedStorm > 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfOceanBasedStorm) == 0)) {
        EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
        if (entP != null) {
          initRealStorm(entP,null);
        }
 else {
          initRealStorm(null,null);
        }
        if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
          wm.lastStormFormed=world.getTotalWorldTime();
        }
 else {
          playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
        }
      }
 else       if (!isInOcean && ConfigStorm.Storm_OddsTo1OfLandBasedStorm > 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfLandBasedStorm) == 0) {
        EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
        if (entP != null) {
          initRealStorm(entP,null);
        }
 else {
          initRealStorm(null,null);
        }
        if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
          wm.lastStormFormed=world.getTotalWorldTime();
        }
 else {
          playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
        }
      }
 else       if (rand.nextInt(randomChanceOfCollide) == 0) {
        for (int i=0; i < manager.getStormObjects().size(); i++) {
          WeatherObject wo=manager.getStormObjects().get(i);
          if (wo instanceof StormObject) {
            StormObject so=(StormObject)wo;
            boolean startStorm=false;
            if (so.ID != this.ID && so.levelCurIntensityStage <= 0 && !so.isCloudlessStorm() && !so.weatherMachineControlled) {
              if (so.pos.distanceTo(pos) < stormFrontCollideDist) {
                if (this.levelTemperature < 0) {
                  if (so.levelTemperature > 0) {
                    startStorm=true;
                  }
                }
 else                 if (this.levelTemperature > 0) {
                  if (so.levelTemperature < 0) {
                    startStorm=true;
                  }
                }
              }
            }
            if (startStorm) {
              playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
              EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
              if (entP != null) {
                initRealStorm(entP,so);
              }
 else {
                initRealStorm(null,so);
              }
              break;
            }
          }
        }
      }
    }
    if (isRealStorm()) {
      if (ConfigMisc.overcastMode) {
        if (!manager.getWorld().isRaining()) {
          hasStormPeaked=true;
        }
      }
      if (!hasStormPeaked) {
        levelWater=levelWaterStartRaining;
        setPrecipitating(true);
      }
      if ((levelCurIntensityStage == STATE_HIGHWIND || levelCurIntensityStage == STATE_HAIL) && isOverWater) {
        if (ConfigStorm.Storm_OddsTo1OfHighWindWaterSpout != 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfHighWindWaterSpout) == 0) {
          attrib_waterSpout=true;
        }
      }
 else {
        attrib_waterSpout=false;
      }
      float levelStormIntensityRate=0.02F;
      float minIntensityToProgress=0.6F;
      int oddsTo1OfIntensityProgressionBase=ConfigStorm.Storm_OddsTo1OfProgressionBase;
      if (levelCurIntensityStage >= levelStormIntensityFormingStartVal) {
        levelStormIntensityRate*=3;
        oddsTo1OfIntensityProgressionBase/=3;
      }
      int oddsTo1OfIntensityProgression=oddsTo1OfIntensityProgressionBase + (levelCurIntensityStage * ConfigStorm.Storm_OddsTo1OfProgressionStageMultiplier);
      if (!hasStormPeaked) {
        levelCurStagesIntensity+=levelStormIntensityRate;
        if (levelCurIntensityStage < maxIntensityStage && (!ConfigTornado.Storm_NoTornadosOrCyclones || levelCurIntensityStage < STATE_FORMING - 1)) {
          if (levelCurStagesIntensity >= minIntensityToProgress) {
            if (alwaysProgresses || rand.nextInt(oddsTo1OfIntensityProgression) == 0) {
              stageNext();
              Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str""+ levelCurIntensityStage);
              if (isInOcean) {
                if (levelCurIntensityStage == STATE_FORMING) {
                  Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str"");
                  stormType=TYPE_WATER;
                }
              }
            }
          }
        }
        if (levelCurStagesIntensity >= 1F) {
          Weather.dbg(""String_Node_Str"" + levelCurIntensityStage);
          hasStormPeaked=true;
        }
      }
 else {
        if (ConfigMisc.overcastMode && manager.getWorld().isRaining()) {
          levelCurStagesIntensity-=levelStormIntensityRate * 0.9F;
        }
 else {
          levelCurStagesIntensity-=levelStormIntensityRate * 0.3F;
        }
        if (levelCurStagesIntensity <= 0) {
          stagePrev();
          Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str""+ levelCurIntensityStage);
          if (levelCurIntensityStage <= 0) {
            setNoStorm();
          }
        }
      }
    }
 else {
      if (ConfigMisc.overcastMode) {
        if (!manager.getWorld().isRaining()) {
          if (attrib_precipitation) {
            setPrecipitating(false);
          }
        }
      }
    }
  }
}","public void tickProgression(){
  World world=manager.getWorld();
  if (world.getTotalWorldTime() % 3 == 0) {
    if (isGrowing) {
      if (size < maxSize) {
        size++;
      }
 else {
      }
    }
 else {
    }
  }
  float tempAdjustRate=(float)ConfigStorm.Storm_TemperatureAdjustRate;
  int levelWaterBuildRate=ConfigStorm.Storm_Rain_WaterBuildUpRate;
  int levelWaterSpendRate=ConfigStorm.Storm_Rain_WaterSpendRate;
  int randomChanceOfWaterBuildFromWater=ConfigStorm.Storm_Rain_WaterBuildUpOddsTo1FromSource;
  int randomChanceOfWaterBuildFromNothing=ConfigStorm.Storm_Rain_WaterBuildUpOddsTo1FromNothing;
  boolean isInOcean=false;
  boolean isOverWater=false;
  if (world.getTotalWorldTime() % ConfigStorm.Storm_AllTypes_TickRateDelay == 0) {
    NBTTagCompound playerNBT=PlayerData.getPlayerNBT(userSpawnedFor);
    long lastStormDeadlyTime=playerNBT.getLong(""String_Node_Str"");
    Biome bgb=world.getBiome(new BlockPos(MathHelper.floor(pos.xCoord),0,MathHelper.floor(pos.zCoord)));
    if (bgb != null) {
      isInOcean=bgb.biomeName.contains(""String_Node_Str"") || bgb.biomeName.contains(""String_Node_Str"");
      float biomeTempAdj=getTemperatureMCToWeatherSys(CoroUtilCompatibility.getAdjustedTemperature(manager.getWorld(),bgb,new BlockPos(MathHelper.floor(pos.xCoord),MathHelper.floor(pos.yCoord),MathHelper.floor(pos.zCoord))));
      if (levelTemperature > biomeTempAdj) {
        levelTemperature-=tempAdjustRate;
      }
 else {
        levelTemperature+=tempAdjustRate;
      }
    }
    boolean performBuildup=false;
    Random rand=new Random();
    if (!isPrecipitating() && rand.nextInt(randomChanceOfWaterBuildFromNothing) == 0) {
      performBuildup=true;
    }
    Block blockID=world.getBlockState(new BlockPos(MathHelper.floor(pos.xCoord),currentTopYBlock - 1,MathHelper.floor(pos.zCoord))).getBlock();
    if (!CoroUtilBlock.isAir(blockID)) {
      if (blockID.getMaterial(blockID.getDefaultState()) instanceof MaterialLiquid) {
        isOverWater=true;
      }
    }
    if (!performBuildup && !isPrecipitating() && rand.nextInt(randomChanceOfWaterBuildFromWater) == 0) {
      if (isOverWater) {
        performBuildup=true;
      }
      if (!performBuildup && bgb != null && (isInOcean || bgb.biomeName.contains(""String_Node_Str"") || bgb.biomeName.contains(""String_Node_Str"")|| bgb.biomeName.contains(""String_Node_Str""))) {
        performBuildup=true;
      }
    }
    if (performBuildup) {
      levelWater+=levelWaterBuildRate;
    }
    if (isPrecipitating()) {
      levelWater-=levelWaterSpendRate;
      if (levelWater < 0)       levelWater=0;
      if (levelWater <= 0) {
        setPrecipitating(false);
        Weather.dbg(""String_Node_Str"" + ID);
      }
    }
 else {
      if (!ConfigMisc.overcastMode || manager.getWorld().isRaining()) {
        if (levelWater >= levelWaterStartRaining) {
          if (ConfigStorm.Player_Storm_Rain_OddsTo1 != -1 && rand.nextInt(ConfigStorm.Player_Storm_Rain_OddsTo1) == 0) {
            setPrecipitating(true);
            Weather.dbg(""String_Node_Str"" + ID);
          }
        }
      }
    }
    WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(world.provider.getDimension());
    boolean tryFormStorm=false;
    if (this.canBeDeadly && this.levelCurIntensityStage == STATE_NORMAL) {
      if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
        if (ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks != -1) {
          if (wm.lastStormFormed == 0 || wm.lastStormFormed + ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks < world.getTotalWorldTime()) {
            tryFormStorm=true;
          }
        }
      }
 else {
        if (ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks != -1) {
          if (lastStormDeadlyTime == 0 || lastStormDeadlyTime + ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks < world.getTotalWorldTime()) {
            tryFormStorm=true;
          }
        }
      }
    }
    if (weatherMachineControlled) {
      return;
    }
    if (((ConfigMisc.overcastMode && manager.getWorld().isRaining()) || !ConfigMisc.overcastMode) && WeatherUtilConfig.listDimensionsStorms.contains(manager.getWorld().provider.getDimension()) && tryFormStorm) {
      int stormFrontCollideDist=ConfigStorm.Storm_Deadly_CollideDistance;
      int randomChanceOfCollide=ConfigStorm.Player_Storm_Deadly_OddsTo1;
      if (isInOcean && (ConfigStorm.Storm_OddsTo1OfOceanBasedStorm > 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfOceanBasedStorm) == 0)) {
        EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
        if (entP != null) {
          initRealStorm(entP,null);
        }
 else {
          initRealStorm(null,null);
        }
        if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
          wm.lastStormFormed=world.getTotalWorldTime();
        }
 else {
          playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
        }
      }
 else       if (!isInOcean && ConfigStorm.Storm_OddsTo1OfLandBasedStorm > 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfLandBasedStorm) == 0) {
        EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
        if (entP != null) {
          initRealStorm(entP,null);
        }
 else {
          initRealStorm(null,null);
        }
        if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
          wm.lastStormFormed=world.getTotalWorldTime();
        }
 else {
          playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
        }
      }
 else       if (rand.nextInt(randomChanceOfCollide) == 0) {
        for (int i=0; i < manager.getStormObjects().size(); i++) {
          WeatherObject wo=manager.getStormObjects().get(i);
          if (wo instanceof StormObject) {
            StormObject so=(StormObject)wo;
            boolean startStorm=false;
            if (so.ID != this.ID && so.levelCurIntensityStage <= 0 && !so.isCloudlessStorm() && !so.weatherMachineControlled) {
              if (so.pos.distanceTo(pos) < stormFrontCollideDist) {
                if (this.levelTemperature < 0) {
                  if (so.levelTemperature > 0) {
                    startStorm=true;
                  }
                }
 else                 if (this.levelTemperature > 0) {
                  if (so.levelTemperature < 0) {
                    startStorm=true;
                  }
                }
              }
            }
            if (startStorm) {
              playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
              EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
              if (entP != null) {
                initRealStorm(entP,so);
              }
 else {
                initRealStorm(null,so);
              }
              break;
            }
          }
        }
      }
    }
    if (isRealStorm()) {
      if (ConfigMisc.overcastMode) {
        if (!manager.getWorld().isRaining()) {
          hasStormPeaked=true;
        }
      }
      if (!hasStormPeaked) {
        levelWater=levelWaterStartRaining;
        setPrecipitating(true);
      }
      if ((levelCurIntensityStage == STATE_HIGHWIND || levelCurIntensityStage == STATE_HAIL) && isOverWater) {
        if (ConfigStorm.Storm_OddsTo1OfHighWindWaterSpout != 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfHighWindWaterSpout) == 0) {
          attrib_waterSpout=true;
        }
      }
 else {
        attrib_waterSpout=false;
      }
      float levelStormIntensityRate=0.02F;
      float minIntensityToProgress=0.6F;
      int oddsTo1OfIntensityProgressionBase=ConfigStorm.Storm_OddsTo1OfProgressionBase;
      if (levelCurIntensityStage >= levelStormIntensityFormingStartVal) {
        levelStormIntensityRate*=3;
        oddsTo1OfIntensityProgressionBase/=3;
      }
      int oddsTo1OfIntensityProgression=oddsTo1OfIntensityProgressionBase + (levelCurIntensityStage * ConfigStorm.Storm_OddsTo1OfProgressionStageMultiplier);
      if (!hasStormPeaked) {
        levelCurStagesIntensity+=levelStormIntensityRate;
        if (levelCurIntensityStage < maxIntensityStage && (!ConfigTornado.Storm_NoTornadosOrCyclones || levelCurIntensityStage < STATE_FORMING - 1)) {
          if (levelCurStagesIntensity >= minIntensityToProgress) {
            if (alwaysProgresses || rand.nextInt(oddsTo1OfIntensityProgression) == 0) {
              stageNext();
              Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str""+ levelCurIntensityStage);
              if (isInOcean) {
                if (levelCurIntensityStage == STATE_FORMING) {
                  Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str"");
                  stormType=TYPE_WATER;
                }
              }
            }
          }
        }
        if (levelCurStagesIntensity >= 1F) {
          Weather.dbg(""String_Node_Str"" + levelCurIntensityStage);
          hasStormPeaked=true;
        }
      }
 else {
        if (ConfigMisc.overcastMode && manager.getWorld().isRaining()) {
          levelCurStagesIntensity-=levelStormIntensityRate * 0.9F;
        }
 else {
          levelCurStagesIntensity-=levelStormIntensityRate * 0.3F;
        }
        if (levelCurStagesIntensity <= 0) {
          stagePrev();
          Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str""+ levelCurIntensityStage);
          if (levelCurIntensityStage <= 0) {
            setNoStorm();
          }
        }
      }
    }
 else {
      if (ConfigMisc.overcastMode) {
        if (!manager.getWorld().isRaining()) {
          if (attrib_precipitation) {
            setPrecipitating(false);
          }
        }
      }
    }
  }
}",0.997539653457572
81808,"public void tickParticlePrecipitation(){
  if (ConfigParticle.Particle_RainSnow) {
    EntityPlayer entP=FMLClientHandler.instance().getClient().player;
    if (entP.posY >= StormObject.static_YPos_layer0)     return;
    WeatherManagerClient weatherMan=ClientTickHandler.weatherManager;
    if (weatherMan == null)     return;
    WindManager windMan=weatherMan.getWindManager();
    if (windMan == null)     return;
    float curPrecipVal=getRainStrengthAndControlVisuals(entP);
    float maxPrecip=0.5F;
    int precipitationHeight=entP.world.getPrecipitationHeight(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ))).getY();
    Biome biomegenbase=entP.world.getBiome(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ)));
    World world=entP.world;
    Random rand=entP.world.rand;
    double particleAmp=1F;
    if (RotatingParticleManager.useShaders && ConfigCoroAI.particleShaders) {
      particleAmp=ConfigMisc.shaderParticleRateAmplifier;
    }
 else {
    }
    boolean particleTest=false;
    if (particleTest) {
      if (testParticle == null || testParticle.isExpired) {
        BlockPos pos=new BlockPos(entP);
        if (canPrecipitateAt(world,pos)) {
          ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,15608.5F,70.5F,235.5F,0D,0D,0D,ParticleRegistry.test_texture);
          rain.setSlantParticleToWind(false);
          rain.setExtraParticlesBaseAmount(1);
          rain.setSeverityOfRainRate(0);
          rain.setDontRenderUnderTopmostBlock(false);
          boolean upward=rand.nextBoolean();
          rain.windWeight=999999F;
          rain.setFacePlayer(false);
          rain.setScale(90F + (rand.nextFloat() * 3F));
          rain.setScale(5F);
          rain.setMaxAge(60);
          rain.setGravity(0.0F);
          rain.setTicksFadeInMax(20);
          rain.setAlphaF(0);
          rain.setTicksFadeOutMax(20);
          rain.rotationYaw=0;
          rain.rotationPitch=90;
          rain.setMotionY(-0D);
          rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
          rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
          rain.spawnAsWeatherEffect();
          rain.weatherEffect=false;
          testParticle=rain;
        }
      }
      if (testParticle != null) {
        testParticle.rotationPitch=0;
        testParticle.rotationYaw=45;
        testParticle.posX=15608.2F;
        testParticle.posY=70.5F;
        testParticle.posZ=235.8F;
      }
    }
    boolean doFish=false;
    if (doFish) {
      int spawnTryCur=0;
      int spawnTryMax=200;
      int range=60;
      for (; spawnTryCur < spawnTryMax; spawnTryCur++) {
        BlockPos pos=new BlockPos(entP.getPosition().add(rand.nextInt(range) - rand.nextInt(range),rand.nextInt(range) - rand.nextInt(range),rand.nextInt(range) - rand.nextInt(range)));
        IBlockState state=world.getBlockState(pos);
        if (state.getMaterial() == Material.WATER) {
          ParticleFish fish=new ParticleFish(entP.world,pos.getX() + 0.5F,pos.getY() + 0.5F,pos.getZ() + 0.5F,0D,0D,0D,ParticleRegistry.listFish.get(rand.nextInt(8) + 1));
          fish.setTicksFadeInMax(20);
          fish.setAlphaF(0);
          fish.setTicksFadeOutMax(20);
          fish.setMaxAge(20 * 10);
          fish.setScale(6F);
          fish.setDontRenderUnderTopmostBlock(false);
          fish.setGravity(0);
          fish.isTransparent=false;
          fish.motionY=0;
          fish.rotationYaw=rand.nextInt(360);
          fish.rotationPitch=rand.nextInt(45);
          fish.setRBGColorF(0.6F,0.6F,1F);
          ExtendedRenderer.rotEffRenderer.addEffect(fish);
        }
      }
    }
    if (biomegenbase != null && (biomegenbase.canRain() || biomegenbase.getEnableSnow())) {
      float temperature=biomegenbase.getFloatTemperature(new BlockPos(MathHelper.floor(entP.posX),MathHelper.floor(entP.posY),MathHelper.floor(entP.posZ)));
      double d3;
      float f10;
      curPrecipVal=Math.min(maxPrecip,Math.abs(curPrecipVal));
      curPrecipVal*=1F;
      if (curPrecipVal > 0) {
        int spawnCount;
        int spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate* particleAmp);
        int safetyCutout=100;
        if (entP.world.getBiomeProvider().getTemperatureAtHeight(temperature,precipitationHeight) >= 0.15F) {
          spawnCount=0;
          int spawnAreaSize=20;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.rain_white);
                rain.setKillWhenUnderTopmostBlock(true);
                rain.setCanCollide(false);
                rain.killWhenUnderCameraAtLeast=5;
                rain.setTicksFadeOutMaxOnDeath(5);
                rain.setDontRenderUnderTopmostBlock(true);
                rain.setExtraParticlesBaseAmount(15);
                rain.fastLight=true;
                rain.setSlantParticleToWind(true);
                rain.windWeight=1F;
                if (!RotatingParticleManager.useShaders || !ConfigCoroAI.particleShaders) {
                  rain.setFacePlayer(true);
                  rain.setSlantParticleToWind(true);
                }
 else {
                  rain.setFacePlayer(false);
                  rain.extraYRotation=rain.getWorld().rand.nextInt(360) - 180F;
                }
                rain.setScale(2F);
                rain.isTransparent=true;
                rain.setGravity(2.5F);
                rain.setMaxAge(50);
                rain.setTicksFadeInMax(5);
                rain.setAlphaF(0);
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.setMotionY(-0.5D);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
          if (world.getTotalWorldTime() % 60 == 0) {
            System.out.println(curPrecipVal);
          }
          boolean groundSplash=true;
          boolean downfall=true;
          spawnAreaSize=40;
          if (curPrecipVal > 0.15) {
            for (int i=0; groundSplash == true && i < 30F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate* particleAmp* 4F; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(15),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              pos=world.getPrecipitationHeight(pos).add(0,1,0);
              if (pos.getDistance(MathHelper.floor(entP.posX),MathHelper.floor(entP.posY),MathHelper.floor(entP.posZ)) > spawnAreaSize / 2)               continue;
              if (canPrecipitateAt(world,pos)) {
                ParticleTexFX rain=new ParticleTexFX(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.cloud256_6);
                rain.setKillWhenUnderTopmostBlock(true);
                rain.setCanCollide(false);
                rain.killWhenUnderCameraAtLeast=5;
                boolean upward=rand.nextBoolean();
                rain.windWeight=20F;
                rain.setFacePlayer(upward);
                rain.setScale(3F + (rand.nextFloat() * 3F));
                rain.setMaxAge(15);
                rain.setGravity(-0.0F);
                rain.setTicksFadeInMax(0);
                rain.setAlphaF(0);
                rain.setTicksFadeOutMax(4);
                rain.renderOrder=2;
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.rotationPitch=90;
                rain.setMotionY(0D);
                rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
                rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
              }
            }
          }
          spawnAreaSize=20;
          if (curPrecipVal > 0.3) {
            for (int i=0; downfall == true && i < 2F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (entP.getDistanceSq(pos) < 10D * 10D)               continue;
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.downfall3);
                rain.setCanCollide(false);
                rain.killWhenUnderCameraAtLeast=5;
                rain.setKillWhenUnderTopmostBlock(true);
                rain.setTicksFadeOutMaxOnDeath(5);
                rain.noExtraParticles=true;
                boolean upward=rand.nextBoolean();
                rain.windWeight=8F;
                rain.setFacePlayer(true);
                rain.setFacePlayer(false);
                rain.facePlayerYaw=true;
                rain.setScale(90F + (rand.nextFloat() * 3F));
                rain.setMaxAge(60);
                rain.setGravity(0.35F);
                rain.setTicksFadeInMax(20);
                rain.setAlphaF(0);
                rain.setTicksFadeOutMax(20);
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.rotationPitch=90;
                rain.rotationPitch=0;
                rain.setMotionY(-0.3D);
                rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
                rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
              }
            }
          }
        }
 else {
          spawnCount=0;
          spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate* particleAmp);
          int spawnAreaSize=50;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender snow=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.snow);
                snow.setCanCollide(false);
                snow.setKillWhenUnderTopmostBlock(true);
                snow.setTicksFadeOutMaxOnDeath(5);
                snow.setDontRenderUnderTopmostBlock(true);
                snow.setExtraParticlesBaseAmount(10);
                snow.killWhenFarFromCameraAtLeast=20;
                snow.setMotionY(-0.1D);
                snow.setScale(1.3F);
                snow.setGravity(0.1F);
                snow.windWeight=0.2F;
                snow.setMaxAge(40);
                snow.setFacePlayer(false);
                snow.setTicksFadeInMax(5);
                snow.setAlphaF(0);
                snow.setTicksFadeOutMax(5);
                snow.rotationYaw=snow.getWorld().rand.nextInt(360) - 180F;
                snow.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(snow);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
}","public void tickParticlePrecipitation(){
  if (ConfigParticle.Particle_RainSnow) {
    EntityPlayer entP=FMLClientHandler.instance().getClient().player;
    if (entP.posY >= StormObject.static_YPos_layer0)     return;
    WeatherManagerClient weatherMan=ClientTickHandler.weatherManager;
    if (weatherMan == null)     return;
    WindManager windMan=weatherMan.getWindManager();
    if (windMan == null)     return;
    float curPrecipVal=getRainStrengthAndControlVisuals(entP);
    float maxPrecip=0.5F;
    int precipitationHeight=entP.world.getPrecipitationHeight(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ))).getY();
    Biome biomegenbase=entP.world.getBiome(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ)));
    World world=entP.world;
    Random rand=entP.world.rand;
    double particleAmp=1F;
    if (RotatingParticleManager.useShaders && ConfigCoroAI.particleShaders) {
      particleAmp=ConfigMisc.shaderParticleRateAmplifier;
    }
 else {
    }
    boolean particleTest=false;
    if (particleTest) {
      if (testParticle == null || testParticle.isExpired) {
        BlockPos pos=new BlockPos(entP);
        if (canPrecipitateAt(world,pos)) {
          ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,15608.5F,70.5F,235.5F,0D,0D,0D,ParticleRegistry.test_texture);
          rain.setSlantParticleToWind(false);
          rain.setExtraParticlesBaseAmount(1);
          rain.setSeverityOfRainRate(0);
          rain.setDontRenderUnderTopmostBlock(false);
          boolean upward=rand.nextBoolean();
          rain.windWeight=999999F;
          rain.setFacePlayer(false);
          rain.setScale(90F + (rand.nextFloat() * 3F));
          rain.setScale(5F);
          rain.setMaxAge(60);
          rain.setGravity(0.0F);
          rain.setTicksFadeInMax(20);
          rain.setAlphaF(0);
          rain.setTicksFadeOutMax(20);
          rain.rotationYaw=0;
          rain.rotationPitch=90;
          rain.setMotionY(-0D);
          rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
          rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
          rain.spawnAsWeatherEffect();
          rain.weatherEffect=false;
          testParticle=rain;
        }
      }
      if (testParticle != null) {
        testParticle.rotationPitch=0;
        testParticle.rotationYaw=45;
        testParticle.posX=15608.2F;
        testParticle.posY=70.5F;
        testParticle.posZ=235.8F;
      }
    }
    boolean doFish=false;
    if (doFish) {
      int spawnTryCur=0;
      int spawnTryMax=200;
      int range=60;
      for (; spawnTryCur < spawnTryMax; spawnTryCur++) {
        BlockPos pos=new BlockPos(entP.getPosition().add(rand.nextInt(range) - rand.nextInt(range),rand.nextInt(range) - rand.nextInt(range),rand.nextInt(range) - rand.nextInt(range)));
        IBlockState state=world.getBlockState(pos);
        if (state.getMaterial() == Material.WATER) {
          ParticleFish fish=new ParticleFish(entP.world,pos.getX() + 0.5F,pos.getY() + 0.5F,pos.getZ() + 0.5F,0D,0D,0D,ParticleRegistry.listFish.get(rand.nextInt(8) + 1));
          fish.setTicksFadeInMax(20);
          fish.setAlphaF(0);
          fish.setTicksFadeOutMax(20);
          fish.setMaxAge(20 * 10);
          fish.setScale(6F);
          fish.setDontRenderUnderTopmostBlock(false);
          fish.setGravity(0);
          fish.isTransparent=false;
          fish.motionY=0;
          fish.rotationYaw=rand.nextInt(360);
          fish.rotationPitch=rand.nextInt(45);
          fish.setRBGColorF(0.6F,0.6F,1F);
          ExtendedRenderer.rotEffRenderer.addEffect(fish);
        }
      }
    }
    if (biomegenbase != null && (biomegenbase.canRain() || biomegenbase.getEnableSnow())) {
      float temperature=CoroUtilCompatibility.getAdjustedTemperature(world,biomegenbase,entP.getPosition());
      double d3;
      float f10;
      curPrecipVal=Math.min(maxPrecip,Math.abs(curPrecipVal));
      curPrecipVal*=1F;
      if (curPrecipVal > 0) {
        int spawnCount;
        int spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate* particleAmp);
        int safetyCutout=100;
        if (entP.world.getBiomeProvider().getTemperatureAtHeight(temperature,precipitationHeight) >= 0.15F) {
          spawnCount=0;
          int spawnAreaSize=20;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.rain_white);
                rain.setKillWhenUnderTopmostBlock(true);
                rain.setCanCollide(false);
                rain.killWhenUnderCameraAtLeast=5;
                rain.setTicksFadeOutMaxOnDeath(5);
                rain.setDontRenderUnderTopmostBlock(true);
                rain.setExtraParticlesBaseAmount(15);
                rain.fastLight=true;
                rain.setSlantParticleToWind(true);
                rain.windWeight=1F;
                if (!RotatingParticleManager.useShaders || !ConfigCoroAI.particleShaders) {
                  rain.setFacePlayer(true);
                  rain.setSlantParticleToWind(true);
                }
 else {
                  rain.setFacePlayer(false);
                  rain.extraYRotation=rain.getWorld().rand.nextInt(360) - 180F;
                }
                rain.setScale(2F);
                rain.isTransparent=true;
                rain.setGravity(2.5F);
                rain.setMaxAge(50);
                rain.setTicksFadeInMax(5);
                rain.setAlphaF(0);
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.setMotionY(-0.5D);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
          if (world.getTotalWorldTime() % 60 == 0) {
            System.out.println(curPrecipVal);
          }
          boolean groundSplash=true;
          boolean downfall=true;
          spawnAreaSize=40;
          if (curPrecipVal > 0.15) {
            for (int i=0; groundSplash == true && i < 30F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate* particleAmp* 4F; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(15),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              pos=world.getPrecipitationHeight(pos).add(0,1,0);
              if (pos.getDistance(MathHelper.floor(entP.posX),MathHelper.floor(entP.posY),MathHelper.floor(entP.posZ)) > spawnAreaSize / 2)               continue;
              if (canPrecipitateAt(world,pos)) {
                ParticleTexFX rain=new ParticleTexFX(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.cloud256_6);
                rain.setKillWhenUnderTopmostBlock(true);
                rain.setCanCollide(false);
                rain.killWhenUnderCameraAtLeast=5;
                boolean upward=rand.nextBoolean();
                rain.windWeight=20F;
                rain.setFacePlayer(upward);
                rain.setScale(3F + (rand.nextFloat() * 3F));
                rain.setMaxAge(15);
                rain.setGravity(-0.0F);
                rain.setTicksFadeInMax(0);
                rain.setAlphaF(0);
                rain.setTicksFadeOutMax(4);
                rain.renderOrder=2;
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.rotationPitch=90;
                rain.setMotionY(0D);
                rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
                rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
              }
            }
          }
          spawnAreaSize=20;
          if (curPrecipVal > 0.3) {
            for (int i=0; downfall == true && i < 2F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (entP.getDistanceSq(pos) < 10D * 10D)               continue;
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.downfall3);
                rain.setCanCollide(false);
                rain.killWhenUnderCameraAtLeast=5;
                rain.setKillWhenUnderTopmostBlock(true);
                rain.setTicksFadeOutMaxOnDeath(5);
                rain.noExtraParticles=true;
                boolean upward=rand.nextBoolean();
                rain.windWeight=8F;
                rain.setFacePlayer(true);
                rain.setFacePlayer(false);
                rain.facePlayerYaw=true;
                rain.setScale(90F + (rand.nextFloat() * 3F));
                rain.setMaxAge(60);
                rain.setGravity(0.35F);
                rain.setTicksFadeInMax(20);
                rain.setAlphaF(0);
                rain.setTicksFadeOutMax(20);
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.rotationPitch=90;
                rain.rotationPitch=0;
                rain.setMotionY(-0.3D);
                rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
                rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
              }
            }
          }
        }
 else {
          spawnCount=0;
          spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate* particleAmp);
          int spawnAreaSize=50;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender snow=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.snow);
                snow.setCanCollide(false);
                snow.setKillWhenUnderTopmostBlock(true);
                snow.setTicksFadeOutMaxOnDeath(5);
                snow.setDontRenderUnderTopmostBlock(true);
                snow.setExtraParticlesBaseAmount(10);
                snow.killWhenFarFromCameraAtLeast=20;
                snow.setMotionY(-0.1D);
                snow.setScale(1.3F);
                snow.setGravity(0.1F);
                snow.windWeight=0.2F;
                snow.setMaxAge(40);
                snow.setFacePlayer(false);
                snow.setTicksFadeInMax(5);
                snow.setAlphaF(0);
                snow.setTicksFadeOutMax(5);
                snow.rotationYaw=snow.getWorld().rand.nextInt(360) - 180F;
                snow.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(snow);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
}",0.992508116207442
81809,"public void profileSurroundings(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  World worldRef=lastWorldDetected;
  EntityPlayer player=FMLClientHandler.instance().getClient().player;
  WeatherManagerClient manager=ClientTickHandler.weatherManager;
  if (worldRef == null || player == null || manager == null || manager.windMan == null) {
    try {
      Thread.sleep(1000L);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    return;
  }
  if (threadLastWorldTickTime == worldRef.getTotalWorldTime()) {
    return;
  }
  threadLastWorldTickTime=worldRef.getTotalWorldTime();
  Random rand=new Random();
  int size=40;
  int hsize=size / 2;
  int curX=(int)player.posX;
  int curY=(int)player.posY;
  int curZ=(int)player.posZ;
  float windStr=manager.windMan.getWindSpeedForPriority();
  if ((!ConfigParticle.Wind_Particle_leafs && !ConfigParticle.Wind_Particle_air && !ConfigParticle.Wind_Particle_sand&& !ConfigParticle.Wind_Particle_waterfall)) {
    return;
  }
  int spawnRate=(int)(30 / (windStr + 0.001));
  float lastBlockCount=lastTickFoundBlocks;
  float particleCreationRate=(float)ConfigParticle.Wind_Particle_effect_rate;
  float maxScaleSample=15000;
  if (lastBlockCount > maxScaleSample)   lastBlockCount=maxScaleSample - 1;
  float scaleRate=(maxScaleSample - lastBlockCount) / maxScaleSample;
  spawnRate=(int)((spawnRate / (scaleRate + 0.001F)) / (particleCreationRate + 0.001F));
  int BlockCountRate=(int)(((300 / scaleRate + 0.001F)) / (particleCreationRate + 0.001F));
  spawnRate*=(mc.gameSettings.particleSetting + 1);
  BlockCountRate*=(mc.gameSettings.particleSetting + 1);
  spawnRate/=2;
  if (spawnRate < 40) {
    spawnRate=40;
  }
  if (BlockCountRate < 80)   BlockCountRate=80;
  if (BlockCountRate > 5000)   BlockCountRate=5000;
  lastTickFoundBlocks=0;
  double particleAmp=1F;
  if (RotatingParticleManager.useShaders && ConfigCoroAI.particleShaders) {
    particleAmp=ConfigMisc.shaderParticleRateAmplifier * 2D;
  }
 else {
  }
  spawnRate=(int)((double)spawnRate / particleAmp);
  for (int xx=curX - hsize; xx < curX + hsize; xx++) {
    for (int yy=curY - (hsize / 2); yy < curY + hsize; yy++) {
      for (int zz=curZ - hsize; zz < curZ + hsize; zz++) {
        Block block=getBlock(worldRef,xx,yy,zz);
        if (block != null && (block.getMaterial(block.getDefaultState()) == Material.LEAVES || block.getMaterial(block.getDefaultState()) == Material.VINE)) {
          lastTickFoundBlocks++;
          if (worldRef.rand.nextInt(spawnRate) == 0) {
            if (ConfigParticle.Wind_Particle_leafs && (CoroUtilBlock.isAir(getBlock(worldRef,xx,yy - 1,zz)))) {
              EntityRotFX var31=new ParticleTexLeafColor(worldRef,(double)xx,(double)yy,(double)zz,0D,0D,0D,ParticleRegistry.leaf);
              var31.setGravity(0.05F);
              var31.setCanCollide(true);
              var31.killWhenUnderCameraAtLeast=20;
              var31.killWhenFarFromCameraAtLeast=20;
              var31.rotationYaw=rand.nextInt(360);
              var31.rotationPitch=rand.nextInt(360);
              spawnQueue.add(var31);
            }
 else {
            }
          }
        }
 else         if (ConfigParticle.Wind_Particle_waterfall && player.getDistance(xx,yy,zz) < 16 && (block != null && block.getMaterial(block.getDefaultState()) == Material.WATER)) {
          int meta=getBlockMetadata(worldRef,xx,yy,zz);
          if ((meta & 8) != 0) {
            lastTickFoundBlocks+=70;
            int chance=(int)(1 + (((float)BlockCountRate) / 120F));
            Block block2=getBlock(worldRef,xx,yy - 1,zz);
            int meta2=getBlockMetadata(worldRef,xx,yy - 1,zz);
            Block block3=getBlock(worldRef,xx,yy + 10,zz);
            if ((((block2 == null || block2.getMaterial(block2.getDefaultState()) != Material.WATER) || (meta2 & 8) == 0) && (block3 != null && block3.getMaterial(block3.getDefaultState()) == Material.WATER)) || worldRef.rand.nextInt(chance) == 0) {
              float range=0.5F;
              EntityRotFX waterP;
              waterP=new EntityWaterfallFX(worldRef,(double)xx + 0.5F + ((rand.nextFloat() * range) - (range / 2)),(double)yy + 0.5F + ((rand.nextFloat() * range) - (range / 2)),(double)zz + 0.5F + ((rand.nextFloat() * range) - (range / 2)),0D,0D,0D,6D,2);
              if (((block2 == null || block2.getMaterial(block2.getDefaultState()) != Material.WATER) || (meta2 & 8) == 0) && (block3 != null && block3.getMaterial(block3.getDefaultState()) == Material.WATER)) {
                range=2F;
                float speed=0.2F;
                for (int i=0; i < 10; i++) {
                  if (worldRef.rand.nextInt(chance / 2) == 0) {
                    waterP=new EntityWaterfallFX(worldRef,(double)xx + 0.5F + ((rand.nextFloat() * range) - (range / 2)),(double)yy + 0.7F + ((rand.nextFloat() * range) - (range / 2)),(double)zz + 0.5F + ((rand.nextFloat() * range) - (range / 2)),((rand.nextFloat() * speed) - (speed / 2)),((rand.nextFloat() * speed) - (speed / 2)),((rand.nextFloat() * speed) - (speed / 2)),2D,3);
                    waterP.setMotionY(4.5F);
                    spawnQueueNormal.add(waterP);
                  }
                }
              }
 else {
                waterP=new EntityWaterfallFX(worldRef,(double)xx + 0.5F + ((rand.nextFloat() * range) - (range / 2)),(double)yy + 0.5F + ((rand.nextFloat() * range) - (range / 2)),(double)zz + 0.5F + ((rand.nextFloat() * range) - (range / 2)),0D,0D,0D,6D,2);
                waterP.setMotionY(0.5F);
                spawnQueueNormal.add(waterP);
              }
            }
          }
        }
 else         if (ConfigParticle.Wind_Particle_fire && (block != null && block == Blocks.FIRE)) {
          lastTickFoundBlocks++;
          if (worldRef.rand.nextInt(Math.max(1,(spawnRate / 100))) == 0) {
            double speed=0.15D;
            EntityRotFX entityfx=pm.spawnNewParticleIconFX(worldRef,ParticleRegistry.smoke,xx + rand.nextDouble(),yy + 0.2D + rand.nextDouble() * 0.2D,zz + rand.nextDouble(),(rand.nextDouble() - rand.nextDouble()) * speed,0.03D,(rand.nextDouble() - rand.nextDouble()) * speed);
            ParticleBehaviors.setParticleRandoms(entityfx,true,true);
            ParticleBehaviors.setParticleFire(entityfx);
            entityfx.setMaxAge(100 + rand.nextInt(300));
            spawnQueueNormal.add(entityfx);
          }
        }
 else         if (false && CoroUtilBlock.isAir(block)) {
          float temp=worldRef.getBiome(new BlockPos(xx,0,zz)).getFloatTemperature(new BlockPos(xx,yy,zz));
        }
      }
    }
  }
}","public void profileSurroundings(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  World worldRef=lastWorldDetected;
  EntityPlayer player=FMLClientHandler.instance().getClient().player;
  WeatherManagerClient manager=ClientTickHandler.weatherManager;
  if (worldRef == null || player == null || manager == null || manager.windMan == null) {
    try {
      Thread.sleep(1000L);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    return;
  }
  if (threadLastWorldTickTime == worldRef.getTotalWorldTime()) {
    return;
  }
  threadLastWorldTickTime=worldRef.getTotalWorldTime();
  Random rand=new Random();
  int size=40;
  int hsize=size / 2;
  int curX=(int)player.posX;
  int curY=(int)player.posY;
  int curZ=(int)player.posZ;
  float windStr=manager.windMan.getWindSpeedForPriority();
  if ((!ConfigParticle.Wind_Particle_leafs && !ConfigParticle.Wind_Particle_air && !ConfigParticle.Wind_Particle_sand&& !ConfigParticle.Wind_Particle_waterfall)) {
    return;
  }
  int spawnRate=(int)(30 / (windStr + 0.001));
  float lastBlockCount=lastTickFoundBlocks;
  float particleCreationRate=(float)ConfigParticle.Wind_Particle_effect_rate;
  float maxScaleSample=15000;
  if (lastBlockCount > maxScaleSample)   lastBlockCount=maxScaleSample - 1;
  float scaleRate=(maxScaleSample - lastBlockCount) / maxScaleSample;
  spawnRate=(int)((spawnRate / (scaleRate + 0.001F)) / (particleCreationRate + 0.001F));
  int BlockCountRate=(int)(((300 / scaleRate + 0.001F)) / (particleCreationRate + 0.001F));
  spawnRate*=(mc.gameSettings.particleSetting + 1);
  BlockCountRate*=(mc.gameSettings.particleSetting + 1);
  spawnRate/=2;
  if (spawnRate < 40) {
    spawnRate=40;
  }
  if (BlockCountRate < 80)   BlockCountRate=80;
  if (BlockCountRate > 5000)   BlockCountRate=5000;
  lastTickFoundBlocks=0;
  double particleAmp=1F;
  if (RotatingParticleManager.useShaders && ConfigCoroAI.particleShaders) {
    particleAmp=ConfigMisc.shaderParticleRateAmplifier * 2D;
  }
 else {
  }
  spawnRate=(int)((double)spawnRate / particleAmp);
  for (int xx=curX - hsize; xx < curX + hsize; xx++) {
    for (int yy=curY - (hsize / 2); yy < curY + hsize; yy++) {
      for (int zz=curZ - hsize; zz < curZ + hsize; zz++) {
        Block block=getBlock(worldRef,xx,yy,zz);
        if (block != null && (block.getMaterial(block.getDefaultState()) == Material.LEAVES || block.getMaterial(block.getDefaultState()) == Material.VINE)) {
          lastTickFoundBlocks++;
          if (worldRef.rand.nextInt(spawnRate) == 0) {
            if (ConfigParticle.Wind_Particle_leafs && (CoroUtilBlock.isAir(getBlock(worldRef,xx,yy - 1,zz)))) {
              EntityRotFX var31=new ParticleTexLeafColor(worldRef,(double)xx,(double)yy,(double)zz,0D,0D,0D,ParticleRegistry.leaf);
              var31.setGravity(0.05F);
              var31.setCanCollide(true);
              var31.killWhenUnderCameraAtLeast=20;
              var31.killWhenFarFromCameraAtLeast=20;
              var31.rotationYaw=rand.nextInt(360);
              var31.rotationPitch=rand.nextInt(360);
              spawnQueue.add(var31);
            }
 else {
            }
          }
        }
 else         if (ConfigParticle.Wind_Particle_waterfall && player.getDistance(xx,yy,zz) < 16 && (block != null && block.getMaterial(block.getDefaultState()) == Material.WATER)) {
          int meta=getBlockMetadata(worldRef,xx,yy,zz);
          if ((meta & 8) != 0) {
            lastTickFoundBlocks+=70;
            int chance=(int)(1 + (((float)BlockCountRate) / 120F));
            Block block2=getBlock(worldRef,xx,yy - 1,zz);
            int meta2=getBlockMetadata(worldRef,xx,yy - 1,zz);
            Block block3=getBlock(worldRef,xx,yy + 10,zz);
            if ((((block2 == null || block2.getMaterial(block2.getDefaultState()) != Material.WATER) || (meta2 & 8) == 0) && (block3 != null && block3.getMaterial(block3.getDefaultState()) == Material.WATER)) || worldRef.rand.nextInt(chance) == 0) {
              float range=0.5F;
              EntityRotFX waterP;
              waterP=new EntityWaterfallFX(worldRef,(double)xx + 0.5F + ((rand.nextFloat() * range) - (range / 2)),(double)yy + 0.5F + ((rand.nextFloat() * range) - (range / 2)),(double)zz + 0.5F + ((rand.nextFloat() * range) - (range / 2)),0D,0D,0D,6D,2);
              if (((block2 == null || block2.getMaterial(block2.getDefaultState()) != Material.WATER) || (meta2 & 8) == 0) && (block3 != null && block3.getMaterial(block3.getDefaultState()) == Material.WATER)) {
                range=2F;
                float speed=0.2F;
                for (int i=0; i < 10; i++) {
                  if (worldRef.rand.nextInt(chance / 2) == 0) {
                    waterP=new EntityWaterfallFX(worldRef,(double)xx + 0.5F + ((rand.nextFloat() * range) - (range / 2)),(double)yy + 0.7F + ((rand.nextFloat() * range) - (range / 2)),(double)zz + 0.5F + ((rand.nextFloat() * range) - (range / 2)),((rand.nextFloat() * speed) - (speed / 2)),((rand.nextFloat() * speed) - (speed / 2)),((rand.nextFloat() * speed) - (speed / 2)),2D,3);
                    waterP.setMotionY(4.5F);
                    spawnQueueNormal.add(waterP);
                  }
                }
              }
 else {
                waterP=new EntityWaterfallFX(worldRef,(double)xx + 0.5F + ((rand.nextFloat() * range) - (range / 2)),(double)yy + 0.5F + ((rand.nextFloat() * range) - (range / 2)),(double)zz + 0.5F + ((rand.nextFloat() * range) - (range / 2)),0D,0D,0D,6D,2);
                waterP.setMotionY(0.5F);
                spawnQueueNormal.add(waterP);
              }
            }
          }
        }
 else         if (ConfigParticle.Wind_Particle_fire && (block != null && block == Blocks.FIRE)) {
          lastTickFoundBlocks++;
          if (worldRef.rand.nextInt(Math.max(1,(spawnRate / 100))) == 0) {
            double speed=0.15D;
            EntityRotFX entityfx=pm.spawnNewParticleIconFX(worldRef,ParticleRegistry.smoke,xx + rand.nextDouble(),yy + 0.2D + rand.nextDouble() * 0.2D,zz + rand.nextDouble(),(rand.nextDouble() - rand.nextDouble()) * speed,0.03D,(rand.nextDouble() - rand.nextDouble()) * speed);
            ParticleBehaviors.setParticleRandoms(entityfx,true,true);
            ParticleBehaviors.setParticleFire(entityfx);
            entityfx.setMaxAge(100 + rand.nextInt(300));
            spawnQueueNormal.add(entityfx);
          }
        }
 else         if (false && CoroUtilBlock.isAir(block)) {
        }
      }
    }
  }
}",0.9917749250518872
81810,"public boolean canSnowAtBody(int par1,int par2,int par3){
  World world=manager.getWorld();
  Biome biomegenbase=world.getBiome(new BlockPos(par1,0,par3));
  BlockPos pos=new BlockPos(par1,par2,par3);
  if (biomegenbase == null)   return false;
  float f=biomegenbase.getFloatTemperature(new BlockPos(par1,par2,par3));
  if ((canSnowFromCloudTemperature && levelTemperature > 0) || (!canSnowFromCloudTemperature && biomegenbase.getFloatTemperature(new BlockPos(par1,par2,par3)) > 0.15F)) {
    return false;
  }
 else {
    if (par2 >= 0 && par2 < 256 && world.getLightFor(EnumSkyBlock.BLOCK,new BlockPos(par1,par2,par3)) < 10) {
      IBlockState iblockstate1=world.getBlockState(pos);
      if ((iblockstate1.getBlock().isAir(iblockstate1,world,pos) || iblockstate1.getBlock() == Blocks.SNOW_LAYER) && Blocks.SNOW_LAYER.canPlaceBlockAt(world,pos)) {
        return true;
      }
    }
    return false;
  }
}","public boolean canSnowAtBody(int par1,int par2,int par3){
  World world=manager.getWorld();
  Biome biomegenbase=world.getBiome(new BlockPos(par1,0,par3));
  BlockPos pos=new BlockPos(par1,par2,par3);
  if (biomegenbase == null)   return false;
  float temperature=CoroUtilCompatibility.getAdjustedTemperature(world,biomegenbase,pos);
  if ((canSnowFromCloudTemperature && levelTemperature > 0) || (!canSnowFromCloudTemperature && temperature > 0.15F)) {
    return false;
  }
 else {
    if (par2 >= 0 && par2 < 256 && world.getLightFor(EnumSkyBlock.BLOCK,pos) < 10) {
      IBlockState iblockstate1=world.getBlockState(pos);
      if ((iblockstate1.getBlock().isAir(iblockstate1,world,pos) || iblockstate1.getBlock() == Blocks.SNOW_LAYER) && Blocks.SNOW_LAYER.canPlaceBlockAt(world,pos)) {
        return true;
      }
    }
    return false;
  }
}",0.8738636363636364
81811,"public void tickSnowFall(){
  if (!ConfigSnow.Snow_PerformSnowfall)   return;
  if (!isPrecipitating())   return;
  World world=manager.getWorld();
  final long startTime=System.nanoTime();
  int xx=0;
  int zz=0;
  for (xx=(int)(pos.xCoord - size / 2); xx < pos.xCoord + size / 2; xx+=16) {
    for (zz=(int)(pos.zCoord - size / 2); zz < pos.zCoord + size / 2; zz+=16) {
      int chunkX=xx / 16;
      int chunkZ=zz / 16;
      int x=chunkX * 16;
      int z=chunkZ * 16;
      if (!world.isBlockLoaded(new BlockPos(x,128,z))) {
        continue;
      }
      Chunk chunk=world.getChunkFromChunkCoords(chunkX,chunkZ);
      int i1;
      int xxx;
      int zzz;
      int setBlockHeight;
      int i2;
      if (world.provider.canDoRainSnowIce(chunk) && (ConfigSnow.Snow_RarityOfBuildup == 0 || world.rand.nextInt(ConfigSnow.Snow_RarityOfBuildup) == 0)) {
        updateLCG=updateLCG * 3 + 1013904223;
        i1=updateLCG >> 2;
        xxx=i1 & 15;
        zzz=i1 >> 8 & 15;
        double d0=pos.xCoord - (xx + xxx);
        double d2=pos.zCoord - (zz + zzz);
        if ((double)MathHelper.sqrt(d0 * d0 + d2 * d2) > size)         continue;
        int snowMetaMax=7;
        setBlockHeight=world.getPrecipitationHeight(new BlockPos(xxx + x,0,zzz + z)).getY();
        if (canSnowAtBody(xxx + x,setBlockHeight,zzz + z) && Blocks.SNOW.canPlaceBlockAt(world,new BlockPos(xxx + x,setBlockHeight,zzz + z))) {
          boolean betterBuildup=true;
          if (betterBuildup) {
            WindManager windMan=manager.getWindManager();
            float angle=windMan.getWindAngleForClouds();
            Vec3 vecPos=new Vec3(xxx + x,setBlockHeight,zzz + z);
            if (!world.isBlockLoaded(vecPos.toBlockPos()))             continue;
            WeatherUtilBlock.fillAgainstWallSmoothly(world,vecPos,angle,15,2,Blocks.SNOW_LAYER);
          }
 else {
          }
        }
      }
    }
  }
}","public void tickSnowFall(){
  if (!ConfigSnow.Snow_PerformSnowfall)   return;
  if (!isPrecipitating())   return;
  World world=manager.getWorld();
  final long startTime=System.nanoTime();
  int xx=0;
  int zz=0;
  for (xx=(int)(pos.xCoord - size / 2); xx < pos.xCoord + size / 2; xx+=16) {
    for (zz=(int)(pos.zCoord - size / 2); zz < pos.zCoord + size / 2; zz+=16) {
      int chunkX=xx / 16;
      int chunkZ=zz / 16;
      int x=chunkX * 16;
      int z=chunkZ * 16;
      if (!world.isBlockLoaded(new BlockPos(x,128,z))) {
        continue;
      }
      Chunk chunk=world.getChunkFromChunkCoords(chunkX,chunkZ);
      int i1;
      int xxx;
      int zzz;
      int setBlockHeight;
      int i2;
      if (world.provider.canDoRainSnowIce(chunk) && (ConfigSnow.Snow_RarityOfBuildup == 0 || world.rand.nextInt(ConfigSnow.Snow_RarityOfBuildup) == 0)) {
        updateLCG=updateLCG * 3 + 1013904223;
        i1=updateLCG >> 2;
        xxx=i1 & 15;
        zzz=i1 >> 8 & 15;
        double d0=pos.xCoord - (xx + xxx);
        double d2=pos.zCoord - (zz + zzz);
        if ((double)MathHelper.sqrt(d0 * d0 + d2 * d2) > size)         continue;
        int snowMetaMax=7;
        setBlockHeight=world.getPrecipitationHeight(new BlockPos(xxx + x,0,zzz + z)).getY();
        if (canSnowAtBody(xxx + x,setBlockHeight,zzz + z) && Blocks.SNOW.canPlaceBlockAt(world,new BlockPos(xxx + x,setBlockHeight,zzz + z))) {
          boolean betterBuildup=true;
          if (betterBuildup) {
            WindManager windMan=manager.getWindManager();
            float angle=windMan.getWindAngleForClouds();
            Vec3 vecPos=new Vec3(xxx + x,setBlockHeight,zzz + z);
            if (!world.isBlockLoaded(vecPos.toBlockPos()))             continue;
            if (!ConfigMisc.overcastMode) {
              if (world.isAirBlock(vecPos.toBlockPos())) {
                world.setBlockState(vecPos.toBlockPos(),Blocks.SNOW_LAYER.getDefaultState());
              }
            }
            WeatherUtilBlock.fillAgainstWallSmoothly(world,vecPos,angle,15,2,Blocks.SNOW_LAYER);
          }
 else {
          }
        }
      }
    }
  }
}",0.9142857142857144
81812,"public void initFirstTime(){
  super.initFirstTime();
  Biome bgb=manager.getWorld().getBiome(new BlockPos(MathHelper.floor(pos.xCoord),0,MathHelper.floor(pos.zCoord)));
  float temp=1;
  if (bgb != null) {
    temp=bgb.getFloatTemperature(new BlockPos(MathHelper.floor(pos.xCoord),MathHelper.floor(pos.yCoord),MathHelper.floor(pos.zCoord)));
  }
  if (naturallySpawned) {
    levelTemperature=getTemperatureMCToWeatherSys(temp);
  }
  levelWindMomentum=0;
}","public void initFirstTime(){
  super.initFirstTime();
  Biome bgb=manager.getWorld().getBiome(new BlockPos(MathHelper.floor(pos.xCoord),0,MathHelper.floor(pos.zCoord)));
  float temp=1;
  if (bgb != null) {
    temp=CoroUtilCompatibility.getAdjustedTemperature(manager.getWorld(),bgb,new BlockPos(MathHelper.floor(pos.xCoord),MathHelper.floor(pos.yCoord),MathHelper.floor(pos.zCoord)));
  }
  if (naturallySpawned) {
    levelTemperature=getTemperatureMCToWeatherSys(temp);
  }
  levelWindMomentum=0;
}",0.9291666666666668
81813,"public void tickProgression(){
  World world=manager.getWorld();
  if (world.getTotalWorldTime() % 3 == 0) {
    if (isGrowing) {
      if (size < maxSize) {
        size++;
      }
 else {
      }
    }
 else {
    }
  }
  float tempAdjustRate=(float)ConfigStorm.Storm_TemperatureAdjustRate;
  int levelWaterBuildRate=ConfigStorm.Storm_Rain_WaterBuildUpRate;
  int levelWaterSpendRate=ConfigStorm.Storm_Rain_WaterSpendRate;
  int randomChanceOfWaterBuildFromWater=ConfigStorm.Storm_Rain_WaterBuildUpOddsTo1FromSource;
  int randomChanceOfWaterBuildFromNothing=ConfigStorm.Storm_Rain_WaterBuildUpOddsTo1FromNothing;
  boolean isInOcean=false;
  boolean isOverWater=false;
  if (world.getTotalWorldTime() % ConfigStorm.Storm_AllTypes_TickRateDelay == 0) {
    NBTTagCompound playerNBT=PlayerData.getPlayerNBT(userSpawnedFor);
    long lastStormDeadlyTime=playerNBT.getLong(""String_Node_Str"");
    Biome bgb=world.getBiome(new BlockPos(MathHelper.floor(pos.xCoord),0,MathHelper.floor(pos.zCoord)));
    if (bgb != null) {
      isInOcean=bgb.biomeName.contains(""String_Node_Str"") || bgb.biomeName.contains(""String_Node_Str"");
      float biomeTempAdj=getTemperatureMCToWeatherSys(bgb.getFloatTemperature(new BlockPos(MathHelper.floor(pos.xCoord),MathHelper.floor(pos.yCoord),MathHelper.floor(pos.zCoord))));
      if (levelTemperature > biomeTempAdj) {
        levelTemperature-=tempAdjustRate;
      }
 else {
        levelTemperature+=tempAdjustRate;
      }
    }
    boolean performBuildup=false;
    Random rand=new Random();
    if (!isPrecipitating() && rand.nextInt(randomChanceOfWaterBuildFromNothing) == 0) {
      performBuildup=true;
    }
    Block blockID=world.getBlockState(new BlockPos(MathHelper.floor(pos.xCoord),currentTopYBlock - 1,MathHelper.floor(pos.zCoord))).getBlock();
    if (!CoroUtilBlock.isAir(blockID)) {
      if (blockID.getMaterial(blockID.getDefaultState()) instanceof MaterialLiquid) {
        isOverWater=true;
      }
    }
    if (!performBuildup && !isPrecipitating() && rand.nextInt(randomChanceOfWaterBuildFromWater) == 0) {
      if (isOverWater) {
        performBuildup=true;
      }
      if (!performBuildup && bgb != null && (isInOcean || bgb.biomeName.contains(""String_Node_Str"") || bgb.biomeName.contains(""String_Node_Str"")|| bgb.biomeName.contains(""String_Node_Str""))) {
        performBuildup=true;
      }
    }
    if (performBuildup) {
      levelWater+=levelWaterBuildRate;
    }
    if (isPrecipitating()) {
      levelWater-=levelWaterSpendRate;
      if (levelWater < 0)       levelWater=0;
      if (levelWater <= 0) {
        setPrecipitating(false);
        Weather.dbg(""String_Node_Str"" + ID);
      }
    }
 else {
      if (!ConfigMisc.overcastMode || manager.getWorld().isRaining()) {
        if (levelWater >= levelWaterStartRaining) {
          if (ConfigStorm.Player_Storm_Rain_OddsTo1 != -1 && rand.nextInt(ConfigStorm.Player_Storm_Rain_OddsTo1) == 0) {
            setPrecipitating(true);
            Weather.dbg(""String_Node_Str"" + ID);
          }
        }
      }
    }
    WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(world.provider.getDimension());
    boolean tryFormStorm=false;
    if (this.canBeDeadly) {
      if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
        if (ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks != -1) {
          if (wm.lastStormFormed == 0 || wm.lastStormFormed + ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks < world.getTotalWorldTime()) {
            tryFormStorm=true;
          }
        }
      }
 else {
        if (ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks != -1) {
          if (lastStormDeadlyTime == 0 || lastStormDeadlyTime + ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks < world.getTotalWorldTime()) {
            tryFormStorm=true;
          }
        }
      }
    }
    if (weatherMachineControlled) {
      return;
    }
    if (((ConfigMisc.overcastMode && manager.getWorld().isRaining()) || !ConfigMisc.overcastMode) && WeatherUtilConfig.listDimensionsStorms.contains(manager.getWorld().provider.getDimension()) && tryFormStorm) {
      int stormFrontCollideDist=ConfigStorm.Storm_Deadly_CollideDistance;
      int randomChanceOfCollide=ConfigStorm.Player_Storm_Deadly_OddsTo1;
      if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
        randomChanceOfCollide=ConfigStorm.Server_Storm_Deadly_OddsTo1;
      }
      if (isInOcean && (ConfigStorm.Storm_OddsTo1OfOceanBasedStorm > 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfOceanBasedStorm) == 0)) {
        EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
        if (entP != null) {
          initRealStorm(entP,null);
        }
 else {
          initRealStorm(null,null);
        }
        if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
          wm.lastStormFormed=world.getTotalWorldTime();
        }
 else {
          playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
        }
      }
 else       if (!isInOcean && ConfigStorm.Storm_OddsTo1OfLandBasedStorm > 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfLandBasedStorm) == 0) {
        EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
        if (entP != null) {
          initRealStorm(entP,null);
        }
 else {
          initRealStorm(null,null);
        }
        if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
          wm.lastStormFormed=world.getTotalWorldTime();
        }
 else {
          playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
        }
      }
 else       if (rand.nextInt(randomChanceOfCollide) == 0) {
        for (int i=0; i < manager.getStormObjects().size(); i++) {
          WeatherObject wo=manager.getStormObjects().get(i);
          if (wo instanceof StormObject) {
            StormObject so=(StormObject)wo;
            boolean startStorm=false;
            if (so.ID != this.ID && so.levelCurIntensityStage <= 0 && !so.isCloudlessStorm() && !so.weatherMachineControlled) {
              if (so.pos.distanceTo(pos) < stormFrontCollideDist) {
                if (this.levelTemperature < 0) {
                  if (so.levelTemperature > 0) {
                    startStorm=true;
                  }
                }
 else                 if (this.levelTemperature > 0) {
                  if (so.levelTemperature < 0) {
                    startStorm=true;
                  }
                }
              }
            }
            if (startStorm) {
              playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
              EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
              if (entP != null) {
                initRealStorm(entP,so);
              }
 else {
                initRealStorm(null,so);
              }
              break;
            }
          }
        }
      }
    }
    if (isRealStorm()) {
      if (ConfigMisc.overcastMode) {
        if (!manager.getWorld().isRaining()) {
          hasStormPeaked=true;
        }
      }
      if (!hasStormPeaked) {
        levelWater=levelWaterStartRaining;
        setPrecipitating(true);
      }
      if ((levelCurIntensityStage == STATE_HIGHWIND || levelCurIntensityStage == STATE_HAIL) && isOverWater) {
        if (ConfigStorm.Storm_OddsTo1OfHighWindWaterSpout != 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfHighWindWaterSpout) == 0) {
          attrib_waterSpout=true;
        }
      }
 else {
        attrib_waterSpout=false;
      }
      float levelStormIntensityRate=0.02F;
      float minIntensityToProgress=0.6F;
      int oddsTo1OfIntensityProgressionBase=ConfigStorm.Storm_OddsTo1OfProgressionBase;
      if (levelCurIntensityStage >= levelStormIntensityFormingStartVal) {
        levelStormIntensityRate*=3;
        oddsTo1OfIntensityProgressionBase/=3;
      }
      int oddsTo1OfIntensityProgression=oddsTo1OfIntensityProgressionBase + (levelCurIntensityStage * ConfigStorm.Storm_OddsTo1OfProgressionStageMultiplier);
      if (!hasStormPeaked) {
        levelCurStagesIntensity+=levelStormIntensityRate;
        if (levelCurIntensityStage < maxIntensityStage && (!ConfigTornado.Storm_NoTornadosOrCyclones || levelCurIntensityStage < STATE_FORMING - 1)) {
          if (levelCurStagesIntensity >= minIntensityToProgress) {
            if (alwaysProgresses || rand.nextInt(oddsTo1OfIntensityProgression) == 0) {
              stageNext();
              Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str""+ levelCurIntensityStage);
              if (isInOcean) {
                if (levelCurIntensityStage == STATE_FORMING) {
                  Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str"");
                  stormType=TYPE_WATER;
                }
              }
            }
          }
        }
        if (levelCurStagesIntensity >= 1F) {
          Weather.dbg(""String_Node_Str"" + levelCurIntensityStage);
          hasStormPeaked=true;
        }
      }
 else {
        if (ConfigMisc.overcastMode && manager.getWorld().isRaining()) {
          levelCurStagesIntensity-=levelStormIntensityRate * 0.9F;
        }
 else {
          levelCurStagesIntensity-=levelStormIntensityRate * 0.3F;
        }
        if (levelCurStagesIntensity <= 0) {
          stagePrev();
          Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str""+ levelCurIntensityStage);
          if (levelCurIntensityStage <= 0) {
            setNoStorm();
          }
        }
      }
    }
 else {
      if (ConfigMisc.overcastMode) {
        if (!manager.getWorld().isRaining()) {
          if (attrib_precipitation) {
            setPrecipitating(false);
          }
        }
      }
    }
  }
}","public void tickProgression(){
  World world=manager.getWorld();
  if (world.getTotalWorldTime() % 3 == 0) {
    if (isGrowing) {
      if (size < maxSize) {
        size++;
      }
 else {
      }
    }
 else {
    }
  }
  float tempAdjustRate=(float)ConfigStorm.Storm_TemperatureAdjustRate;
  int levelWaterBuildRate=ConfigStorm.Storm_Rain_WaterBuildUpRate;
  int levelWaterSpendRate=ConfigStorm.Storm_Rain_WaterSpendRate;
  int randomChanceOfWaterBuildFromWater=ConfigStorm.Storm_Rain_WaterBuildUpOddsTo1FromSource;
  int randomChanceOfWaterBuildFromNothing=ConfigStorm.Storm_Rain_WaterBuildUpOddsTo1FromNothing;
  boolean isInOcean=false;
  boolean isOverWater=false;
  if (world.getTotalWorldTime() % ConfigStorm.Storm_AllTypes_TickRateDelay == 0) {
    NBTTagCompound playerNBT=PlayerData.getPlayerNBT(userSpawnedFor);
    long lastStormDeadlyTime=playerNBT.getLong(""String_Node_Str"");
    Biome bgb=world.getBiome(new BlockPos(MathHelper.floor(pos.xCoord),0,MathHelper.floor(pos.zCoord)));
    if (bgb != null) {
      isInOcean=bgb.biomeName.contains(""String_Node_Str"") || bgb.biomeName.contains(""String_Node_Str"");
      float biomeTempAdj=getTemperatureMCToWeatherSys(CoroUtilCompatibility.getAdjustedTemperature(manager.getWorld(),bgb,new BlockPos(MathHelper.floor(pos.xCoord),MathHelper.floor(pos.yCoord),MathHelper.floor(pos.zCoord))));
      if (levelTemperature > biomeTempAdj) {
        levelTemperature-=tempAdjustRate;
      }
 else {
        levelTemperature+=tempAdjustRate;
      }
    }
    boolean performBuildup=false;
    Random rand=new Random();
    if (!isPrecipitating() && rand.nextInt(randomChanceOfWaterBuildFromNothing) == 0) {
      performBuildup=true;
    }
    Block blockID=world.getBlockState(new BlockPos(MathHelper.floor(pos.xCoord),currentTopYBlock - 1,MathHelper.floor(pos.zCoord))).getBlock();
    if (!CoroUtilBlock.isAir(blockID)) {
      if (blockID.getMaterial(blockID.getDefaultState()) instanceof MaterialLiquid) {
        isOverWater=true;
      }
    }
    if (!performBuildup && !isPrecipitating() && rand.nextInt(randomChanceOfWaterBuildFromWater) == 0) {
      if (isOverWater) {
        performBuildup=true;
      }
      if (!performBuildup && bgb != null && (isInOcean || bgb.biomeName.contains(""String_Node_Str"") || bgb.biomeName.contains(""String_Node_Str"")|| bgb.biomeName.contains(""String_Node_Str""))) {
        performBuildup=true;
      }
    }
    if (performBuildup) {
      levelWater+=levelWaterBuildRate;
    }
    if (isPrecipitating()) {
      levelWater-=levelWaterSpendRate;
      if (levelWater < 0)       levelWater=0;
      if (levelWater <= 0) {
        setPrecipitating(false);
        Weather.dbg(""String_Node_Str"" + ID);
      }
    }
 else {
      if (!ConfigMisc.overcastMode || manager.getWorld().isRaining()) {
        if (levelWater >= levelWaterStartRaining) {
          if (ConfigStorm.Player_Storm_Rain_OddsTo1 != -1 && rand.nextInt(ConfigStorm.Player_Storm_Rain_OddsTo1) == 0) {
            setPrecipitating(true);
            Weather.dbg(""String_Node_Str"" + ID);
          }
        }
      }
    }
    WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(world.provider.getDimension());
    boolean tryFormStorm=false;
    if (this.canBeDeadly) {
      if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
        if (ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks != -1) {
          if (wm.lastStormFormed == 0 || wm.lastStormFormed + ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks < world.getTotalWorldTime()) {
            tryFormStorm=true;
          }
        }
      }
 else {
        if (ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks != -1) {
          if (lastStormDeadlyTime == 0 || lastStormDeadlyTime + ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks < world.getTotalWorldTime()) {
            tryFormStorm=true;
          }
        }
      }
    }
    if (weatherMachineControlled) {
      return;
    }
    if (((ConfigMisc.overcastMode && manager.getWorld().isRaining()) || !ConfigMisc.overcastMode) && WeatherUtilConfig.listDimensionsStorms.contains(manager.getWorld().provider.getDimension()) && tryFormStorm) {
      int stormFrontCollideDist=ConfigStorm.Storm_Deadly_CollideDistance;
      int randomChanceOfCollide=ConfigStorm.Player_Storm_Deadly_OddsTo1;
      if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
        randomChanceOfCollide=ConfigStorm.Server_Storm_Deadly_OddsTo1;
      }
      if (isInOcean && (ConfigStorm.Storm_OddsTo1OfOceanBasedStorm > 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfOceanBasedStorm) == 0)) {
        EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
        if (entP != null) {
          initRealStorm(entP,null);
        }
 else {
          initRealStorm(null,null);
        }
        if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
          wm.lastStormFormed=world.getTotalWorldTime();
        }
 else {
          playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
        }
      }
 else       if (!isInOcean && ConfigStorm.Storm_OddsTo1OfLandBasedStorm > 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfLandBasedStorm) == 0) {
        EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
        if (entP != null) {
          initRealStorm(entP,null);
        }
 else {
          initRealStorm(null,null);
        }
        if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
          wm.lastStormFormed=world.getTotalWorldTime();
        }
 else {
          playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
        }
      }
 else       if (rand.nextInt(randomChanceOfCollide) == 0) {
        for (int i=0; i < manager.getStormObjects().size(); i++) {
          WeatherObject wo=manager.getStormObjects().get(i);
          if (wo instanceof StormObject) {
            StormObject so=(StormObject)wo;
            boolean startStorm=false;
            if (so.ID != this.ID && so.levelCurIntensityStage <= 0 && !so.isCloudlessStorm() && !so.weatherMachineControlled) {
              if (so.pos.distanceTo(pos) < stormFrontCollideDist) {
                if (this.levelTemperature < 0) {
                  if (so.levelTemperature > 0) {
                    startStorm=true;
                  }
                }
 else                 if (this.levelTemperature > 0) {
                  if (so.levelTemperature < 0) {
                    startStorm=true;
                  }
                }
              }
            }
            if (startStorm) {
              playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
              EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
              if (entP != null) {
                initRealStorm(entP,so);
              }
 else {
                initRealStorm(null,so);
              }
              break;
            }
          }
        }
      }
    }
    if (isRealStorm()) {
      if (ConfigMisc.overcastMode) {
        if (!manager.getWorld().isRaining()) {
          hasStormPeaked=true;
        }
      }
      if (!hasStormPeaked) {
        levelWater=levelWaterStartRaining;
        setPrecipitating(true);
      }
      if ((levelCurIntensityStage == STATE_HIGHWIND || levelCurIntensityStage == STATE_HAIL) && isOverWater) {
        if (ConfigStorm.Storm_OddsTo1OfHighWindWaterSpout != 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfHighWindWaterSpout) == 0) {
          attrib_waterSpout=true;
        }
      }
 else {
        attrib_waterSpout=false;
      }
      float levelStormIntensityRate=0.02F;
      float minIntensityToProgress=0.6F;
      int oddsTo1OfIntensityProgressionBase=ConfigStorm.Storm_OddsTo1OfProgressionBase;
      if (levelCurIntensityStage >= levelStormIntensityFormingStartVal) {
        levelStormIntensityRate*=3;
        oddsTo1OfIntensityProgressionBase/=3;
      }
      int oddsTo1OfIntensityProgression=oddsTo1OfIntensityProgressionBase + (levelCurIntensityStage * ConfigStorm.Storm_OddsTo1OfProgressionStageMultiplier);
      if (!hasStormPeaked) {
        levelCurStagesIntensity+=levelStormIntensityRate;
        if (levelCurIntensityStage < maxIntensityStage && (!ConfigTornado.Storm_NoTornadosOrCyclones || levelCurIntensityStage < STATE_FORMING - 1)) {
          if (levelCurStagesIntensity >= minIntensityToProgress) {
            if (alwaysProgresses || rand.nextInt(oddsTo1OfIntensityProgression) == 0) {
              stageNext();
              Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str""+ levelCurIntensityStage);
              if (isInOcean) {
                if (levelCurIntensityStage == STATE_FORMING) {
                  Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str"");
                  stormType=TYPE_WATER;
                }
              }
            }
          }
        }
        if (levelCurStagesIntensity >= 1F) {
          Weather.dbg(""String_Node_Str"" + levelCurIntensityStage);
          hasStormPeaked=true;
        }
      }
 else {
        if (ConfigMisc.overcastMode && manager.getWorld().isRaining()) {
          levelCurStagesIntensity-=levelStormIntensityRate * 0.9F;
        }
 else {
          levelCurStagesIntensity-=levelStormIntensityRate * 0.3F;
        }
        if (levelCurStagesIntensity <= 0) {
          stagePrev();
          Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str""+ levelCurIntensityStage);
          if (levelCurIntensityStage <= 0) {
            setNoStorm();
          }
        }
      }
    }
 else {
      if (ConfigMisc.overcastMode) {
        if (!manager.getWorld().isRaining()) {
          if (attrib_precipitation) {
            setPrecipitating(false);
          }
        }
      }
    }
  }
}",0.9954375777685608
81814,"/** 
 * Called from shaders listener
 */
public static void shadersInit(){
  FoliageEnhancerShader.setupReplacers();
  for (  FoliageReplacerBase replacer : listFoliageReplacers) {
    for (    TextureAtlasSprite sprite : replacer.sprites) {
      MeshBufferManagerFoliage.setupMeshIfMissing(sprite);
    }
  }
}","/** 
 * Called from shaders listener
 */
public static void shadersInit(){
  FoliageEnhancerShader.setupReplacers();
  CULog.log(""String_Node_Str"");
  for (  FoliageReplacerBase replacer : listFoliageReplacers) {
    for (    TextureAtlasSprite sprite : replacer.sprites) {
      MeshBufferManagerFoliage.setupMeshIfMissing(sprite);
    }
  }
}",0.951219512195122
81815,"/** 
 * Called from TextureStitchEvent.Post
 */
public static void setupReplacers(){
  boolean test=false;
  listFoliageReplacers.clear();
  HashMap<Comparable,String> lookup=new HashMap<>();
  lookup.clear();
  lookup.put(BlockPlanks.EnumType.OAK,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.SPRUCE,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.BIRCH,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.JUNGLE,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.ACACIA,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.DARK_OAK,""String_Node_Str"");
  for (  Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
    boolean colorize=false;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.SAPLING.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setStateSensitive(true).setBiomeColorize(colorize).addComparable(BlockSapling.TYPE,entrySet.getKey()));
  }
  lookup.clear();
  lookup.put(BlockTallGrass.EnumType.DEAD_BUSH,""String_Node_Str"");
  lookup.put(BlockTallGrass.EnumType.GRASS,""String_Node_Str"");
  lookup.put(BlockTallGrass.EnumType.FERN,""String_Node_Str"");
  for (  Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
    boolean colorize=entrySet.getKey() == BlockTallGrass.EnumType.DEAD_BUSH ? false : true;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setStateSensitive(true).setRandomizeCoord(false).setBiomeColorize(colorize).addComparable(BlockTallGrass.TYPE,entrySet.getKey()));
  }
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.YELLOW_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setRandomizeCoord(false).setBiomeColorize(false));
  lookup.clear();
  lookup.put(BlockFlower.EnumFlowerType.ALLIUM,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.BLUE_ORCHID,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.HOUSTONIA,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.ORANGE_TULIP,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.OXEYE_DAISY,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.PINK_TULIP,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.POPPY,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.RED_TULIP,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.WHITE_TULIP,""String_Node_Str"");
  for (  Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
    boolean colorize=false;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.RED_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).setBiomeColorize(colorize).addComparable(Blocks.RED_FLOWER.getTypeProperty(),entrySet.getKey()));
  }
  for (int i=0; i < 8; i++) {
    int temp=i;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.WHEAT.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + temp)).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,i));
  }
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.REEDS.getDefaultState(),-1).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBaseMaterial(Material.SAND).setBiomeColorize(true).setRandomizeCoord(false).setLooseness(0.3F));
  HashMap<Integer,Integer> lookupStateToModel=new HashMap<>();
  lookupStateToModel.put(0,0);
  lookupStateToModel.put(1,0);
  lookupStateToModel.put(2,1);
  lookupStateToModel.put(3,1);
  lookupStateToModel.put(4,2);
  lookupStateToModel.put(5,2);
  lookupStateToModel.put(6,2);
  lookupStateToModel.put(7,3);
  for (  Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.CARROTS.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,entrySet.getKey()));
  }
  for (  Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.POTATOES.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,entrySet.getKey()));
  }
  for (int i=0; i < 4; i++) {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.BEETROOTS.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + i)).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockBeetroot.BEETROOT_AGE,i));
  }
  List<TextureAtlasSprite> sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.GRASS));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.ROSE));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(true).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.FERN));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.PAEONIA));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.SYRINGA));
  if (ConfigFoliage.extraGrass) {
    listFoliageReplacers.add(new FoliageReplacerCrossGrass(Blocks.AIR.getDefaultState()).setSprite(getMeshAndSetupSprite(ExtendedRenderer.modid + ""String_Node_Str"")).setRandomizeCoord(true).setBiomeColorize(true));
  }
  boolean extraLeaves=false;
  if (extraLeaves) {
    listFoliageReplacers.add(new FoliageReplacerCrossLeaves(Blocks.LEAVES.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBiomeColorize(true));
  }
}","/** 
 * Called from TextureStitchEvent.Post
 */
public static void setupReplacers(){
  CULog.log(""String_Node_Str"");
  boolean test=false;
  listFoliageReplacers.clear();
  HashMap<Comparable,String> lookup=new HashMap<>();
  lookup.clear();
  lookup.put(BlockPlanks.EnumType.OAK,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.SPRUCE,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.BIRCH,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.JUNGLE,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.ACACIA,""String_Node_Str"");
  lookup.put(BlockPlanks.EnumType.DARK_OAK,""String_Node_Str"");
  for (  Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
    boolean colorize=false;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.SAPLING.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setStateSensitive(true).setBiomeColorize(colorize).addComparable(BlockSapling.TYPE,entrySet.getKey()));
  }
  lookup.clear();
  lookup.put(BlockTallGrass.EnumType.DEAD_BUSH,""String_Node_Str"");
  lookup.put(BlockTallGrass.EnumType.GRASS,""String_Node_Str"");
  lookup.put(BlockTallGrass.EnumType.FERN,""String_Node_Str"");
  for (  Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
    boolean colorize=entrySet.getKey() == BlockTallGrass.EnumType.DEAD_BUSH ? false : true;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setStateSensitive(true).setRandomizeCoord(false).setBiomeColorize(colorize).addComparable(BlockTallGrass.TYPE,entrySet.getKey()));
  }
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.YELLOW_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setRandomizeCoord(false).setBiomeColorize(false));
  lookup.clear();
  lookup.put(BlockFlower.EnumFlowerType.ALLIUM,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.BLUE_ORCHID,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.HOUSTONIA,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.ORANGE_TULIP,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.OXEYE_DAISY,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.PINK_TULIP,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.POPPY,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.RED_TULIP,""String_Node_Str"");
  lookup.put(BlockFlower.EnumFlowerType.WHITE_TULIP,""String_Node_Str"");
  for (  Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
    boolean colorize=false;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.RED_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).setBiomeColorize(colorize).addComparable(Blocks.RED_FLOWER.getTypeProperty(),entrySet.getKey()));
  }
  for (int i=0; i < 8; i++) {
    int temp=i;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.WHEAT.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + temp)).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,i));
  }
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.REEDS.getDefaultState(),-1).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBaseMaterial(Material.SAND).setBiomeColorize(true).setRandomizeCoord(false).setLooseness(0.3F));
  HashMap<Integer,Integer> lookupStateToModel=new HashMap<>();
  lookupStateToModel.put(0,0);
  lookupStateToModel.put(1,0);
  lookupStateToModel.put(2,1);
  lookupStateToModel.put(3,1);
  lookupStateToModel.put(4,2);
  lookupStateToModel.put(5,2);
  lookupStateToModel.put(6,2);
  lookupStateToModel.put(7,3);
  for (  Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.CARROTS.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,entrySet.getKey()));
  }
  for (  Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.POTATOES.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,entrySet.getKey()));
  }
  for (int i=0; i < 4; i++) {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.BEETROOTS.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + i)).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockBeetroot.BEETROOT_AGE,i));
  }
  List<TextureAtlasSprite> sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.GRASS));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.ROSE));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(true).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.FERN));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.PAEONIA));
  sprites=new ArrayList<>();
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
  listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.SYRINGA));
  if (ConfigFoliage.extraGrass) {
    listFoliageReplacers.add(new FoliageReplacerCrossGrass(Blocks.AIR.getDefaultState()).setSprite(getMeshAndSetupSprite(ExtendedRenderer.modid + ""String_Node_Str"")).setRandomizeCoord(true).setBiomeColorize(true));
  }
  boolean extraLeaves=false;
  if (extraLeaves) {
    listFoliageReplacers.add(new FoliageReplacerCrossLeaves(Blocks.LEAVES.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBiomeColorize(true));
  }
}",0.9977622377622376
81816,"public static void modelBakeEvent(ModelBakeEvent event){
  boolean replaceVanillaModels=ConfigCoroAI.foliageShaders && EventHandler.queryUseOfShaders();
  boolean textureFix=false;
  if (replaceVanillaModels) {
    Map<ModelResourceLocation,IModel> stateModels=ReflectionHelper.getPrivateValue(ModelLoader.class,event.getModelLoader(),""String_Node_Str"");
    IBakedModel blank=event.getModelRegistry().getObject(new ModelResourceLocation(""String_Node_Str"",""String_Node_Str""));
    for (    ModelResourceLocation res : event.getModelRegistry().getKeys()) {
      IBakedModel bakedModel=event.getModelRegistry().getObject(res);
      IModel model=stateModels.get(res);
      if (model != null) {
        try {
          Set<ResourceLocation> textures=Sets.newHashSet(model.getTextures());
          escape:           if (!res.getVariant().equals(""String_Node_Str"")) {
            for (            FoliageReplacerBase replacer : listFoliageReplacers) {
              for (              TextureAtlasSprite sprite : replacer.sprites) {
                for (                ResourceLocation res2 : textures) {
                  if (res2.toString().equals(sprite.getIconName())) {
                    if (!res.toString().contains(""String_Node_Str"")) {
                      if (textureFix) {
                        if (blank.getOverrides() instanceof AnimationItemOverrideList) {
                          AnimationItemOverrideList obj1=(AnimationItemOverrideList)blank.getOverrides();
                          IModel model1=ReflectionHelper.getPrivateValue(AnimationItemOverrideList.class,obj1,""String_Node_Str"");
                          if (vanillaModelWrapperClass.isAssignableFrom(model1.getClass())) {
                            ModelBlock model2=(ModelBlock)ReflectionHelper.getPrivateValue(vanillaModelWrapperClass,model1,""String_Node_Str"");
                            String tex=res2.toString().split(""String_Node_Str"")[1];
                            model2.textures.put(""String_Node_Str"",tex);
                          }
                        }
                      }
                      event.getModelRegistry().putObject(res,blank);
                      break escape;
                    }
                  }
                }
              }
            }
          }
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
}","public static void modelBakeEvent(ModelBakeEvent event){
  boolean replaceVanillaModels=ConfigCoroAI.foliageShaders && EventHandler.queryUseOfShaders();
  boolean textureFix=false;
  if (replaceVanillaModels) {
    String str=""String_Node_Str"";
    CULog.log(str);
    ProgressManager.ProgressBar prog=ProgressManager.push(str,event.getModelRegistry().getKeys().size());
    Map<ModelResourceLocation,IModel> stateModels=ReflectionHelper.getPrivateValue(ModelLoader.class,event.getModelLoader(),""String_Node_Str"");
    IBakedModel blank=event.getModelRegistry().getObject(new ModelResourceLocation(""String_Node_Str"",""String_Node_Str""));
    for (    ModelResourceLocation res : event.getModelRegistry().getKeys()) {
      prog.step(res.toString());
      IBakedModel bakedModel=event.getModelRegistry().getObject(res);
      IModel model=stateModels.get(res);
      if (model != null) {
        try {
          Set<ResourceLocation> textures=Sets.newHashSet(model.getTextures());
          escape:           if (!res.getVariant().equals(""String_Node_Str"")) {
            for (            FoliageReplacerBase replacer : listFoliageReplacers) {
              for (              TextureAtlasSprite sprite : replacer.sprites) {
                for (                ResourceLocation res2 : textures) {
                  if (res2.toString().equals(sprite.getIconName())) {
                    if (!res.toString().contains(""String_Node_Str"")) {
                      if (textureFix) {
                        if (blank.getOverrides() instanceof AnimationItemOverrideList) {
                          AnimationItemOverrideList obj1=(AnimationItemOverrideList)blank.getOverrides();
                          IModel model1=ReflectionHelper.getPrivateValue(AnimationItemOverrideList.class,obj1,""String_Node_Str"");
                          if (vanillaModelWrapperClass.isAssignableFrom(model1.getClass())) {
                            ModelBlock model2=(ModelBlock)ReflectionHelper.getPrivateValue(vanillaModelWrapperClass,model1,""String_Node_Str"");
                            String tex=res2.toString().split(""String_Node_Str"")[1];
                            model2.textures.put(""String_Node_Str"",tex);
                          }
                        }
                      }
                      event.getModelRegistry().putObject(res,blank);
                      break escape;
                    }
                  }
                }
              }
            }
          }
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
    ProgressManager.pop(prog);
  }
}",0.9552536955653216
81817,"public void tickWeatherCoverage(){
  World world=this.getWorld();
  if (world != null) {
    if (!ConfigMisc.overcastMode) {
      if (ConfigMisc.lockServerWeatherMode != -1) {
        world.getWorldInfo().setRaining(ConfigMisc.lockServerWeatherMode == 1);
        world.getWorldInfo().setThundering(ConfigMisc.lockServerWeatherMode == 1);
      }
    }
    if (ConfigStorm.preventServerThunderstorms) {
      world.getWorldInfo().setThundering(false);
    }
    if (world.getTotalWorldTime() % 400 == 0) {
      isVanillaRainActiveOnServer=getWorld().isRaining();
      syncWeatherVanilla();
    }
    if (world.getTotalWorldTime() % 400 == 0) {
    }
    if (world.getTotalWorldTime() % 200 == 0) {
      Random rand=new Random();
      cloudIntensity+=(float)((rand.nextDouble() * ConfigMisc.Cloud_Coverage_Random_Change_Amount) - (rand.nextDouble() * ConfigMisc.Cloud_Coverage_Random_Change_Amount));
      if (cloudIntensity < ConfigMisc.Cloud_Coverage_Min_Percent / 100F) {
        cloudIntensity=(float)ConfigMisc.Cloud_Coverage_Min_Percent / 100F;
      }
 else       if (cloudIntensity > ConfigMisc.Cloud_Coverage_Max_Percent / 100F) {
        cloudIntensity=(float)ConfigMisc.Cloud_Coverage_Max_Percent / 100F;
      }
      if (world.getTotalWorldTime() % 2000 == 0) {
      }
    }
  }
}","public void tickWeatherCoverage(){
  World world=this.getWorld();
  if (world != null) {
    if (!ConfigMisc.overcastMode) {
      if (ConfigMisc.lockServerWeatherMode != -1) {
        world.getWorldInfo().setRaining(ConfigMisc.lockServerWeatherMode == 1);
        world.getWorldInfo().setThundering(ConfigMisc.lockServerWeatherMode == 1);
      }
    }
    boolean test=world.getWorldInfo().isRaining();
    if (ConfigStorm.preventServerThunderstorms) {
      world.getWorldInfo().setThundering(false);
    }
    if (world.getTotalWorldTime() % 400 == 0) {
      isVanillaRainActiveOnServer=getWorld().isRaining();
      syncWeatherVanilla();
    }
    if (world.getTotalWorldTime() % 400 == 0) {
    }
    if (world.getTotalWorldTime() % 200 == 0) {
      Random rand=new Random();
      cloudIntensity+=(float)((rand.nextDouble() * ConfigMisc.Cloud_Coverage_Random_Change_Amount) - (rand.nextDouble() * ConfigMisc.Cloud_Coverage_Random_Change_Amount));
      if (cloudIntensity < ConfigMisc.Cloud_Coverage_Min_Percent / 100F) {
        cloudIntensity=(float)ConfigMisc.Cloud_Coverage_Min_Percent / 100F;
      }
 else       if (cloudIntensity > ConfigMisc.Cloud_Coverage_Max_Percent / 100F) {
        cloudIntensity=(float)ConfigMisc.Cloud_Coverage_Max_Percent / 100F;
      }
      if (world.getTotalWorldTime() % 2000 == 0) {
      }
    }
  }
}",0.9807474518686295
81818,"public void tickProgression(){
  World world=manager.getWorld();
  if (world.getTotalWorldTime() % 3 == 0) {
    if (isGrowing) {
      if (size < maxSize) {
        size++;
      }
 else {
      }
    }
 else {
    }
  }
  float tempAdjustRate=(float)ConfigStorm.Storm_TemperatureAdjustRate;
  int levelWaterBuildRate=ConfigStorm.Storm_Rain_WaterBuildUpRate;
  int levelWaterSpendRate=ConfigStorm.Storm_Rain_WaterSpendRate;
  int randomChanceOfWaterBuildFromWater=ConfigStorm.Storm_Rain_WaterBuildUpOddsTo1FromSource;
  int randomChanceOfWaterBuildFromNothing=ConfigStorm.Storm_Rain_WaterBuildUpOddsTo1FromNothing;
  boolean isInOcean=false;
  boolean isOverWater=false;
  if (world.getTotalWorldTime() % ConfigStorm.Storm_AllTypes_TickRateDelay == 0) {
    NBTTagCompound playerNBT=PlayerData.getPlayerNBT(userSpawnedFor);
    long lastStormDeadlyTime=playerNBT.getLong(""String_Node_Str"");
    Biome bgb=world.getBiome(new BlockPos(MathHelper.floor(pos.xCoord),0,MathHelper.floor(pos.zCoord)));
    if (bgb != null) {
      isInOcean=bgb.biomeName.contains(""String_Node_Str"") || bgb.biomeName.contains(""String_Node_Str"");
      float biomeTempAdj=getTemperatureMCToWeatherSys(CoroUtilCompatibility.getAdjustedTemperature(manager.getWorld(),bgb,new BlockPos(MathHelper.floor(pos.xCoord),MathHelper.floor(pos.yCoord),MathHelper.floor(pos.zCoord))));
      if (levelTemperature > biomeTempAdj) {
        levelTemperature-=tempAdjustRate;
      }
 else {
        levelTemperature+=tempAdjustRate;
      }
    }
    boolean performBuildup=false;
    Random rand=new Random();
    if (!isPrecipitating() && rand.nextInt(randomChanceOfWaterBuildFromNothing) == 0) {
      performBuildup=true;
    }
    Block blockID=world.getBlockState(new BlockPos(MathHelper.floor(pos.xCoord),currentTopYBlock - 1,MathHelper.floor(pos.zCoord))).getBlock();
    if (!CoroUtilBlock.isAir(blockID)) {
      if (blockID.getMaterial(blockID.getDefaultState()) instanceof MaterialLiquid) {
        isOverWater=true;
      }
    }
    if (!performBuildup && !isPrecipitating() && rand.nextInt(randomChanceOfWaterBuildFromWater) == 0) {
      if (isOverWater) {
        performBuildup=true;
      }
      if (!performBuildup && bgb != null && (isInOcean || bgb.biomeName.contains(""String_Node_Str"") || bgb.biomeName.contains(""String_Node_Str"")|| bgb.biomeName.contains(""String_Node_Str""))) {
        performBuildup=true;
      }
    }
    if (performBuildup) {
      levelWater+=levelWaterBuildRate;
    }
    if (isPrecipitating()) {
      levelWater-=levelWaterSpendRate;
      if (levelWater < 0)       levelWater=0;
      if (levelWater <= 0) {
        setPrecipitating(false);
        Weather.dbg(""String_Node_Str"" + ID);
      }
    }
 else {
      if (!ConfigMisc.overcastMode || manager.getWorld().isRaining()) {
        if (levelWater >= levelWaterStartRaining) {
          if (ConfigStorm.Player_Storm_Rain_OddsTo1 != -1 && rand.nextInt(ConfigStorm.Player_Storm_Rain_OddsTo1) == 0) {
            setPrecipitating(true);
            Weather.dbg(""String_Node_Str"" + ID);
          }
        }
      }
    }
    WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(world.provider.getDimension());
    boolean tryFormStorm=false;
    if (this.canBeDeadly) {
      if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
        if (ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks != -1) {
          if (wm.lastStormFormed == 0 || wm.lastStormFormed + ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks < world.getTotalWorldTime()) {
            tryFormStorm=true;
          }
        }
      }
 else {
        if (ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks != -1) {
          if (lastStormDeadlyTime == 0 || lastStormDeadlyTime + ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks < world.getTotalWorldTime()) {
            tryFormStorm=true;
          }
        }
      }
    }
    if (weatherMachineControlled) {
      return;
    }
    if (((ConfigMisc.overcastMode && manager.getWorld().isRaining()) || !ConfigMisc.overcastMode) && WeatherUtilConfig.listDimensionsStorms.contains(manager.getWorld().provider.getDimension()) && tryFormStorm) {
      int stormFrontCollideDist=ConfigStorm.Storm_Deadly_CollideDistance;
      int randomChanceOfCollide=ConfigStorm.Player_Storm_Deadly_OddsTo1;
      if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
        randomChanceOfCollide=ConfigStorm.Server_Storm_Deadly_OddsTo1;
      }
      if (isInOcean && (ConfigStorm.Storm_OddsTo1OfOceanBasedStorm > 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfOceanBasedStorm) == 0)) {
        EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
        if (entP != null) {
          initRealStorm(entP,null);
        }
 else {
          initRealStorm(null,null);
        }
        if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
          wm.lastStormFormed=world.getTotalWorldTime();
        }
 else {
          playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
        }
      }
 else       if (!isInOcean && ConfigStorm.Storm_OddsTo1OfLandBasedStorm > 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfLandBasedStorm) == 0) {
        EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
        if (entP != null) {
          initRealStorm(entP,null);
        }
 else {
          initRealStorm(null,null);
        }
        if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
          wm.lastStormFormed=world.getTotalWorldTime();
        }
 else {
          playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
        }
      }
 else       if (rand.nextInt(randomChanceOfCollide) == 0) {
        for (int i=0; i < manager.getStormObjects().size(); i++) {
          WeatherObject wo=manager.getStormObjects().get(i);
          if (wo instanceof StormObject) {
            StormObject so=(StormObject)wo;
            boolean startStorm=false;
            if (so.ID != this.ID && so.levelCurIntensityStage <= 0 && !so.isCloudlessStorm() && !so.weatherMachineControlled) {
              if (so.pos.distanceTo(pos) < stormFrontCollideDist) {
                if (this.levelTemperature < 0) {
                  if (so.levelTemperature > 0) {
                    startStorm=true;
                  }
                }
 else                 if (this.levelTemperature > 0) {
                  if (so.levelTemperature < 0) {
                    startStorm=true;
                  }
                }
              }
            }
            if (startStorm) {
              playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
              EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
              if (entP != null) {
                initRealStorm(entP,so);
              }
 else {
                initRealStorm(null,so);
              }
              break;
            }
          }
        }
      }
    }
    if (isRealStorm()) {
      if (ConfigMisc.overcastMode) {
        if (!manager.getWorld().isRaining()) {
          hasStormPeaked=true;
        }
      }
      if (!hasStormPeaked) {
        levelWater=levelWaterStartRaining;
        setPrecipitating(true);
      }
      if ((levelCurIntensityStage == STATE_HIGHWIND || levelCurIntensityStage == STATE_HAIL) && isOverWater) {
        if (ConfigStorm.Storm_OddsTo1OfHighWindWaterSpout != 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfHighWindWaterSpout) == 0) {
          attrib_waterSpout=true;
        }
      }
 else {
        attrib_waterSpout=false;
      }
      float levelStormIntensityRate=0.02F;
      float minIntensityToProgress=0.6F;
      int oddsTo1OfIntensityProgressionBase=ConfigStorm.Storm_OddsTo1OfProgressionBase;
      if (levelCurIntensityStage >= levelStormIntensityFormingStartVal) {
        levelStormIntensityRate*=3;
        oddsTo1OfIntensityProgressionBase/=3;
      }
      int oddsTo1OfIntensityProgression=oddsTo1OfIntensityProgressionBase + (levelCurIntensityStage * ConfigStorm.Storm_OddsTo1OfProgressionStageMultiplier);
      if (!hasStormPeaked) {
        levelCurStagesIntensity+=levelStormIntensityRate;
        if (levelCurIntensityStage < maxIntensityStage && (!ConfigTornado.Storm_NoTornadosOrCyclones || levelCurIntensityStage < STATE_FORMING - 1)) {
          if (levelCurStagesIntensity >= minIntensityToProgress) {
            if (alwaysProgresses || rand.nextInt(oddsTo1OfIntensityProgression) == 0) {
              stageNext();
              Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str""+ levelCurIntensityStage);
              if (isInOcean) {
                if (levelCurIntensityStage == STATE_FORMING) {
                  Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str"");
                  stormType=TYPE_WATER;
                }
              }
            }
          }
        }
        if (levelCurStagesIntensity >= 1F) {
          Weather.dbg(""String_Node_Str"" + levelCurIntensityStage);
          hasStormPeaked=true;
        }
      }
 else {
        if (ConfigMisc.overcastMode && manager.getWorld().isRaining()) {
          levelCurStagesIntensity-=levelStormIntensityRate * 0.9F;
        }
 else {
          levelCurStagesIntensity-=levelStormIntensityRate * 0.3F;
        }
        if (levelCurStagesIntensity <= 0) {
          stagePrev();
          Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str""+ levelCurIntensityStage);
          if (levelCurIntensityStage <= 0) {
            setNoStorm();
          }
        }
      }
    }
 else {
      if (ConfigMisc.overcastMode) {
        if (!manager.getWorld().isRaining()) {
          if (attrib_precipitation) {
            setPrecipitating(false);
          }
        }
      }
    }
  }
}","public void tickProgression(){
  World world=manager.getWorld();
  if (world.getTotalWorldTime() % 3 == 0) {
    if (isGrowing) {
      if (size < maxSize) {
        size++;
      }
 else {
      }
    }
 else {
    }
  }
  float tempAdjustRate=(float)ConfigStorm.Storm_TemperatureAdjustRate;
  int levelWaterBuildRate=ConfigStorm.Storm_Rain_WaterBuildUpRate;
  int levelWaterSpendRate=ConfigStorm.Storm_Rain_WaterSpendRate;
  int randomChanceOfWaterBuildFromWater=ConfigStorm.Storm_Rain_WaterBuildUpOddsTo1FromSource;
  int randomChanceOfWaterBuildFromNothing=ConfigStorm.Storm_Rain_WaterBuildUpOddsTo1FromNothing;
  boolean isInOcean=false;
  boolean isOverWater=false;
  if (world.getTotalWorldTime() % ConfigStorm.Storm_AllTypes_TickRateDelay == 0) {
    NBTTagCompound playerNBT=PlayerData.getPlayerNBT(userSpawnedFor);
    long lastStormDeadlyTime=playerNBT.getLong(""String_Node_Str"");
    Biome bgb=world.getBiome(new BlockPos(MathHelper.floor(pos.xCoord),0,MathHelper.floor(pos.zCoord)));
    if (bgb != null) {
      isInOcean=bgb.biomeName.contains(""String_Node_Str"") || bgb.biomeName.contains(""String_Node_Str"");
      float biomeTempAdj=getTemperatureMCToWeatherSys(CoroUtilCompatibility.getAdjustedTemperature(manager.getWorld(),bgb,new BlockPos(MathHelper.floor(pos.xCoord),MathHelper.floor(pos.yCoord),MathHelper.floor(pos.zCoord))));
      if (levelTemperature > biomeTempAdj) {
        levelTemperature-=tempAdjustRate;
      }
 else {
        levelTemperature+=tempAdjustRate;
      }
    }
    boolean performBuildup=false;
    Random rand=new Random();
    if (!isPrecipitating() && rand.nextInt(randomChanceOfWaterBuildFromNothing) == 0) {
      performBuildup=true;
    }
    Block blockID=world.getBlockState(new BlockPos(MathHelper.floor(pos.xCoord),currentTopYBlock - 1,MathHelper.floor(pos.zCoord))).getBlock();
    if (!CoroUtilBlock.isAir(blockID)) {
      if (blockID.getMaterial(blockID.getDefaultState()) instanceof MaterialLiquid) {
        isOverWater=true;
      }
    }
    if (!performBuildup && !isPrecipitating() && rand.nextInt(randomChanceOfWaterBuildFromWater) == 0) {
      if (isOverWater) {
        performBuildup=true;
      }
      if (!performBuildup && bgb != null && (isInOcean || bgb.biomeName.contains(""String_Node_Str"") || bgb.biomeName.contains(""String_Node_Str"")|| bgb.biomeName.contains(""String_Node_Str""))) {
        performBuildup=true;
      }
    }
    if (performBuildup) {
      levelWater+=levelWaterBuildRate;
    }
    if (isPrecipitating()) {
      levelWater-=levelWaterSpendRate;
      if (levelWater < 0)       levelWater=0;
      if (levelWater <= 0) {
        setPrecipitating(false);
        Weather.dbg(""String_Node_Str"" + ID);
      }
    }
 else {
      if (!ConfigMisc.overcastMode || manager.getWorld().isRaining()) {
        if (levelWater >= levelWaterStartRaining) {
          if (ConfigStorm.Player_Storm_Rain_OddsTo1 != -1 && rand.nextInt(ConfigStorm.Player_Storm_Rain_OddsTo1) == 0) {
            setPrecipitating(true);
            Weather.dbg(""String_Node_Str"" + ID);
          }
        }
      }
    }
    WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(world.provider.getDimension());
    boolean tryFormStorm=false;
    if (this.canBeDeadly && this.levelCurIntensityStage == STATE_NORMAL) {
      if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
        if (ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks != -1) {
          if (wm.lastStormFormed == 0 || wm.lastStormFormed + ConfigStorm.Server_Storm_Deadly_TimeBetweenInTicks < world.getTotalWorldTime()) {
            tryFormStorm=true;
          }
        }
      }
 else {
        if (ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks != -1) {
          if (lastStormDeadlyTime == 0 || lastStormDeadlyTime + ConfigStorm.Player_Storm_Deadly_TimeBetweenInTicks < world.getTotalWorldTime()) {
            tryFormStorm=true;
          }
        }
      }
    }
    if (weatherMachineControlled) {
      return;
    }
    if (((ConfigMisc.overcastMode && manager.getWorld().isRaining()) || !ConfigMisc.overcastMode) && WeatherUtilConfig.listDimensionsStorms.contains(manager.getWorld().provider.getDimension()) && tryFormStorm) {
      int stormFrontCollideDist=ConfigStorm.Storm_Deadly_CollideDistance;
      int randomChanceOfCollide=ConfigStorm.Player_Storm_Deadly_OddsTo1;
      if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
        randomChanceOfCollide=ConfigStorm.Server_Storm_Deadly_OddsTo1;
      }
      if (isInOcean && (ConfigStorm.Storm_OddsTo1OfOceanBasedStorm > 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfOceanBasedStorm) == 0)) {
        EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
        if (entP != null) {
          initRealStorm(entP,null);
        }
 else {
          initRealStorm(null,null);
        }
        if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
          wm.lastStormFormed=world.getTotalWorldTime();
        }
 else {
          playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
        }
      }
 else       if (!isInOcean && ConfigStorm.Storm_OddsTo1OfLandBasedStorm > 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfLandBasedStorm) == 0) {
        EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
        if (entP != null) {
          initRealStorm(entP,null);
        }
 else {
          initRealStorm(null,null);
        }
        if (ConfigStorm.Server_Storm_Deadly_UseGlobalRate) {
          wm.lastStormFormed=world.getTotalWorldTime();
        }
 else {
          playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
        }
      }
 else       if (rand.nextInt(randomChanceOfCollide) == 0) {
        for (int i=0; i < manager.getStormObjects().size(); i++) {
          WeatherObject wo=manager.getStormObjects().get(i);
          if (wo instanceof StormObject) {
            StormObject so=(StormObject)wo;
            boolean startStorm=false;
            if (so.ID != this.ID && so.levelCurIntensityStage <= 0 && !so.isCloudlessStorm() && !so.weatherMachineControlled) {
              if (so.pos.distanceTo(pos) < stormFrontCollideDist) {
                if (this.levelTemperature < 0) {
                  if (so.levelTemperature > 0) {
                    startStorm=true;
                  }
                }
 else                 if (this.levelTemperature > 0) {
                  if (so.levelTemperature < 0) {
                    startStorm=true;
                  }
                }
              }
            }
            if (startStorm) {
              playerNBT.setLong(""String_Node_Str"",world.getTotalWorldTime());
              EntityPlayer entP=world.getPlayerEntityByName(userSpawnedFor);
              if (entP != null) {
                initRealStorm(entP,so);
              }
 else {
                initRealStorm(null,so);
              }
              break;
            }
          }
        }
      }
    }
    if (isRealStorm()) {
      if (ConfigMisc.overcastMode) {
        if (!manager.getWorld().isRaining()) {
          hasStormPeaked=true;
        }
      }
      if (!hasStormPeaked) {
        levelWater=levelWaterStartRaining;
        setPrecipitating(true);
      }
      if ((levelCurIntensityStage == STATE_HIGHWIND || levelCurIntensityStage == STATE_HAIL) && isOverWater) {
        if (ConfigStorm.Storm_OddsTo1OfHighWindWaterSpout != 0 && rand.nextInt(ConfigStorm.Storm_OddsTo1OfHighWindWaterSpout) == 0) {
          attrib_waterSpout=true;
        }
      }
 else {
        attrib_waterSpout=false;
      }
      float levelStormIntensityRate=0.02F;
      float minIntensityToProgress=0.6F;
      int oddsTo1OfIntensityProgressionBase=ConfigStorm.Storm_OddsTo1OfProgressionBase;
      if (levelCurIntensityStage >= levelStormIntensityFormingStartVal) {
        levelStormIntensityRate*=3;
        oddsTo1OfIntensityProgressionBase/=3;
      }
      int oddsTo1OfIntensityProgression=oddsTo1OfIntensityProgressionBase + (levelCurIntensityStage * ConfigStorm.Storm_OddsTo1OfProgressionStageMultiplier);
      if (!hasStormPeaked) {
        levelCurStagesIntensity+=levelStormIntensityRate;
        if (levelCurIntensityStage < maxIntensityStage && (!ConfigTornado.Storm_NoTornadosOrCyclones || levelCurIntensityStage < STATE_FORMING - 1)) {
          if (levelCurStagesIntensity >= minIntensityToProgress) {
            if (alwaysProgresses || rand.nextInt(oddsTo1OfIntensityProgression) == 0) {
              stageNext();
              Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str""+ levelCurIntensityStage);
              if (isInOcean) {
                if (levelCurIntensityStage == STATE_FORMING) {
                  Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str"");
                  stormType=TYPE_WATER;
                }
              }
            }
          }
        }
        if (levelCurStagesIntensity >= 1F) {
          Weather.dbg(""String_Node_Str"" + levelCurIntensityStage);
          hasStormPeaked=true;
        }
      }
 else {
        if (ConfigMisc.overcastMode && manager.getWorld().isRaining()) {
          levelCurStagesIntensity-=levelStormIntensityRate * 0.9F;
        }
 else {
          levelCurStagesIntensity-=levelStormIntensityRate * 0.3F;
        }
        if (levelCurStagesIntensity <= 0) {
          stagePrev();
          Weather.dbg(""String_Node_Str"" + this.ID + ""String_Node_Str""+ levelCurIntensityStage);
          if (levelCurIntensityStage <= 0) {
            setNoStorm();
          }
        }
      }
    }
 else {
      if (ConfigMisc.overcastMode) {
        if (!manager.getWorld().isRaining()) {
          if (attrib_precipitation) {
            setPrecipitating(false);
          }
        }
      }
    }
  }
}",0.9975746942566696
81819,"@Override public void execute(MinecraftServer server,ICommandSender var1,String[] var2){
  String helpMsgStorm=""String_Node_Str"";
  EntityPlayer player=null;
  if (var1 instanceof EntityPlayer) {
    player=(EntityPlayer)var1;
  }
  World world=var1.getEntityWorld();
  int dimension=world.provider.getDimension();
  BlockPos posBlock=var1.getPosition();
  Vec3d posVec=var1.getPositionVector();
  try {
    if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equals(""String_Node_Str"") && posVec != Vec3d.ZERO) {
        if (dimension == 0) {
          WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(0);
          VolcanoObject vo=new VolcanoObject(wm);
          vo.pos=new Vec3(posVec);
          vo.initFirstTime();
          wm.addVolcanoObject(vo);
          vo.initPost();
          wm.syncVolcanoNew(vo);
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else {
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
    }
 else     if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equalsIgnoreCase(""String_Node_Str"")) {
        WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(dimension);
        sendCommandSenderMsg(var1,""String_Node_Str"");
        List<WeatherObject> listStorms=wm.getStormObjects();
        for (int i=0; i < listStorms.size(); i++) {
          WeatherObject wo=listStorms.get(i);
          if (wo instanceof WeatherObject) {
            WeatherObject so=(WeatherObject)wo;
            Weather.dbg(""String_Node_Str"" + so.ID);
            so.setDead();
          }
        }
      }
 else       if (var2[1].equals(""String_Node_Str"") || var2[1].equals(""String_Node_Str"")) {
        if (var2.length > 2 && posVec != Vec3d.ZERO) {
          boolean spawnCloudStorm=true;
          WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(dimension);
          StormObject so=new StormObject(wm);
          so.layer=0;
          so.userSpawnedFor=CoroUtilEntity.getName(player);
          so.naturallySpawned=false;
          so.levelTemperature=0.1F;
          so.pos=new Vec3(posVec.x,StormObject.layers.get(so.layer),posVec.z);
          so.levelWater=so.levelWaterStartRaining * 2;
          so.attrib_precipitation=true;
          if (!var2[2].equals(""String_Node_Str"")) {
            so.initRealStorm(null,null);
          }
          if (var2[2].equals(""String_Node_Str"")) {
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"") || var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
            so.attrib_waterSpout=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HAIL;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE4;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE3;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE2;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
            so.isFirenado=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_FORMING;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_FORMING;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE2;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE3;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE4;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"") || var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
            so.alwaysProgresses=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            WeatherObjectSandstorm sandstorm=new WeatherObjectSandstorm(wm);
            Vec3 pos=new Vec3(posVec.x,world.getHeight(new BlockPos(posVec.x,0,posVec.z)).getY() + 1,posVec.z);
            float angle=wm.getWindManager().getWindAngleForClouds();
            double vecX=-Math.sin(Math.toRadians(angle));
            double vecZ=Math.cos(Math.toRadians(angle));
            double speed=150D;
            pos.xCoord-=vecX * speed;
            pos.zCoord-=vecZ * speed;
            sandstorm.initFirstTime();
            sandstorm.initSandstormSpawn(pos);
            wm.addStormObject(sandstorm);
            wm.syncStormNew(sandstorm);
            spawnCloudStorm=false;
            wm.windMan.startHighWindEvent();
            wm.windMan.lowWindTimer=0;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            boolean spawned=wm.trySpawnSandstormNearPos(world,new Vec3(posVec));
            spawnCloudStorm=false;
            if (!spawned) {
              sendCommandSenderMsg(var1,""String_Node_Str"");
              return;
            }
 else {
              wm.windMan.startHighWindEvent();
              wm.windMan.lowWindTimer=0;
            }
          }
          if (var2.length > 3) {
            if (var2[3].contains(""String_Node_Str"") || var2[3].contains(""String_Node_Str"")) {
              so.alwaysProgresses=true;
            }
          }
          if (spawnCloudStorm) {
            so.initFirstTime();
            wm.addStormObject(so);
            wm.syncStormNew(so);
          }
          sendCommandSenderMsg(var1,""String_Node_Str"" + var2[2] + ""String_Node_Str""+ (so.alwaysProgresses ? ""String_Node_Str"" : ""String_Node_Str""));
        }
 else {
          sendCommandSenderMsg(var1,helpMsgStorm);
        }
      }
 else       if (var2[1].equals(""String_Node_Str"")) {
        sendCommandSenderMsg(var1,helpMsgStorm);
      }
 else {
        sendCommandSenderMsg(var1,helpMsgStorm);
      }
    }
 else     if (var2[0].equals(""String_Node_Str"") && player != null) {
      WeatherUtilBlock.floodAreaWithLayerableBlock(player.world,new Vec3(player.posX,player.posY,player.posZ),player.rotationYawHead,1,1,CommonProxy.blockSandLayer,30);
    }
 else     if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equals(""String_Node_Str"")) {
        boolean doHighOn=false;
        boolean doHighOff=false;
        if (var2.length > 2) {
          if (var2[2].equals(""String_Node_Str"")) {
            doHighOn=true;
          }
 else           if (var2[2].equals(""String_Node_Str"")) {
            doHighOff=true;
          }
        }
 else {
          doHighOn=true;
        }
        WeatherManagerServer wm=ServerTickHandler.getWeatherSystemForDim(dimension);
        if (doHighOn) {
          wm.windMan.startHighWindEvent();
          wm.windMan.lowWindTimer=0;
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else         if (doHighOff) {
          wm.windMan.stopHighWindEvent();
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
 else       if (var2[1].equals(""String_Node_Str"")) {
        boolean doLowOn=false;
        boolean doLowOff=false;
        if (var2.length > 2) {
          if (var2[2].equals(""String_Node_Str"")) {
            doLowOn=true;
          }
 else           if (var2[2].equals(""String_Node_Str"")) {
            doLowOff=true;
          }
        }
 else {
          doLowOn=true;
        }
        WeatherManagerServer wm=ServerTickHandler.getWeatherSystemForDim(dimension);
        if (doLowOn) {
          wm.windMan.startLowWindEvent();
          wm.windMan.lowWindTimer=0;
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else         if (doLowOff) {
          wm.windMan.stopLowWindEvent();
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
    }
 else {
      sendCommandSenderMsg(var1,helpMsgStorm);
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"");
    sendCommandSenderMsg(var1,helpMsgStorm);
    ex.printStackTrace();
  }
}","@Override public void execute(MinecraftServer server,ICommandSender var1,String[] var2){
  String helpMsgStorm=""String_Node_Str"";
  EntityPlayer player=null;
  if (var1 instanceof EntityPlayer) {
    player=(EntityPlayer)var1;
  }
  World world=var1.getEntityWorld();
  int dimension=world.provider.getDimension();
  BlockPos posBlock=var1.getPosition();
  Vec3d posVec=var1.getPositionVector();
  try {
    if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equals(""String_Node_Str"") && posVec != Vec3d.ZERO) {
        if (dimension == 0) {
          WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(0);
          VolcanoObject vo=new VolcanoObject(wm);
          vo.pos=new Vec3(posVec);
          vo.initFirstTime();
          wm.addVolcanoObject(vo);
          vo.initPost();
          wm.syncVolcanoNew(vo);
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else {
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
    }
 else     if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equalsIgnoreCase(""String_Node_Str"")) {
        WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(dimension);
        sendCommandSenderMsg(var1,""String_Node_Str"");
        List<WeatherObject> listStorms=wm.getStormObjects();
        for (int i=0; i < listStorms.size(); i++) {
          WeatherObject wo=listStorms.get(i);
          if (wo instanceof WeatherObject) {
            WeatherObject so=(WeatherObject)wo;
            Weather.dbg(""String_Node_Str"" + so.ID);
            so.setDead();
          }
        }
      }
 else       if (var2[1].equals(""String_Node_Str"") || var2[1].equals(""String_Node_Str"")) {
        if (var2.length > 2 && posVec != Vec3d.ZERO) {
          boolean spawnCloudStorm=true;
          WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(dimension);
          StormObject so=new StormObject(wm);
          so.layer=0;
          so.userSpawnedFor=CoroUtilEntity.getName(player);
          so.naturallySpawned=false;
          so.levelTemperature=0.1F;
          so.pos=new Vec3(posVec.x,StormObject.layers.get(so.layer),posVec.z);
          so.levelWater=so.levelWaterStartRaining * 2;
          so.attrib_precipitation=true;
          if (!var2[2].equals(""String_Node_Str"")) {
            so.initRealStorm(null,null);
          }
          if (var2[2].equals(""String_Node_Str"")) {
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"") || var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
            so.attrib_waterSpout=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HAIL;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE4;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE3;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE2;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
            so.isFirenado=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_FORMING;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_FORMING;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE2;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE3;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE4;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"") || var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
            so.alwaysProgresses=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            WeatherObjectSandstorm sandstorm=new WeatherObjectSandstorm(wm);
            Vec3 pos=new Vec3(posVec.x,world.getHeight(new BlockPos(posVec.x,0,posVec.z)).getY() + 1,posVec.z);
            float angle=wm.getWindManager().getWindAngleForClouds();
            double vecX=-Math.sin(Math.toRadians(angle));
            double vecZ=Math.cos(Math.toRadians(angle));
            double speed=150D;
            pos.xCoord-=vecX * speed;
            pos.zCoord-=vecZ * speed;
            sandstorm.initFirstTime();
            sandstorm.initSandstormSpawn(pos);
            wm.addStormObject(sandstorm);
            wm.syncStormNew(sandstorm);
            spawnCloudStorm=false;
            wm.windMan.startHighWindEvent();
            wm.windMan.lowWindTimer=0;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            boolean spawned=wm.trySpawnSandstormNearPos(world,new Vec3(posVec));
            spawnCloudStorm=false;
            if (!spawned) {
              sendCommandSenderMsg(var1,""String_Node_Str"");
              return;
            }
 else {
              wm.windMan.startHighWindEvent();
              wm.windMan.lowWindTimer=0;
            }
          }
          if (var2.length > 3) {
            if (var2[3].contains(""String_Node_Str"") || var2[3].contains(""String_Node_Str"")) {
              so.alwaysProgresses=true;
            }
          }
          if (spawnCloudStorm) {
            so.initFirstTime();
            wm.addStormObject(so);
            wm.syncStormNew(so);
          }
          sendCommandSenderMsg(var1,""String_Node_Str"" + var2[2] + ""String_Node_Str""+ (so.alwaysProgresses ? ""String_Node_Str"" : ""String_Node_Str""));
        }
 else {
          sendCommandSenderMsg(var1,helpMsgStorm);
        }
      }
 else       if (var2[1].equals(""String_Node_Str"")) {
        sendCommandSenderMsg(var1,helpMsgStorm);
      }
 else {
        sendCommandSenderMsg(var1,helpMsgStorm);
      }
    }
 else     if (var2[0].equals(""String_Node_Str"") && player != null) {
      WeatherUtilBlock.floodAreaWithLayerableBlock(player.world,new Vec3(player.posX,player.posY,player.posZ),player.rotationYawHead,1,1,CommonProxy.blockSandLayer,30);
    }
 else     if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equals(""String_Node_Str"")) {
        boolean doHighOn=false;
        boolean doHighOff=false;
        if (var2.length > 2) {
          if (var2[2].equals(""String_Node_Str"")) {
            doHighOn=true;
          }
 else           if (var2[2].equals(""String_Node_Str"")) {
            doHighOff=true;
          }
        }
 else {
          doHighOn=true;
        }
        WeatherManagerServer wm=ServerTickHandler.getWeatherSystemForDim(dimension);
        if (doHighOn) {
          wm.windMan.startHighWindEvent();
          wm.windMan.lowWindTimer=0;
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else         if (doHighOff) {
          wm.windMan.stopHighWindEvent();
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
 else       if (var2[1].equals(""String_Node_Str"")) {
        boolean doLowOn=false;
        boolean doLowOff=false;
        if (var2.length > 2) {
          if (var2[2].equals(""String_Node_Str"")) {
            doLowOn=true;
          }
 else           if (var2[2].equals(""String_Node_Str"")) {
            doLowOff=true;
          }
        }
 else {
          doLowOn=true;
        }
        WeatherManagerServer wm=ServerTickHandler.getWeatherSystemForDim(dimension);
        if (doLowOn) {
          wm.windMan.startLowWindEvent();
          wm.windMan.highWindTimer=0;
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else         if (doLowOff) {
          wm.windMan.stopLowWindEvent();
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
    }
 else {
      sendCommandSenderMsg(var1,helpMsgStorm);
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"");
    sendCommandSenderMsg(var1,helpMsgStorm);
    ex.printStackTrace();
  }
}",0.9996480112636396
81820,"public void tick(){
  Random rand=new Random();
  if (!ConfigWind.Misc_windOn) {
    windSpeedGlobal=0;
    windSpeedGust=0;
    windTimeGust=0;
  }
 else {
    if (!manager.getWorld().isRemote) {
      if (!ConfigWind.Wind_LowWindEvents) {
        lowWindTimer=0;
      }
      if (lowWindTimer <= 0) {
        if (windSpeedGlobalRandChangeTimer-- <= 0) {
          if (highWindTimer <= 0) {
            windSpeedGlobal+=(rand.nextDouble() * windSpeedGlobalChangeRate) - (windSpeedGlobalChangeRate / 2);
          }
 else {
            windSpeedGlobal+=(rand.nextDouble() * windSpeedGlobalChangeRate);
          }
          windSpeedGlobalRandChangeTimer=windSpeedGlobalRandChangeDelay;
        }
        if (highWindTimer <= 0) {
          if (ConfigWind.Wind_LowWindEvents) {
            if (rand.nextInt(ConfigWind.lowWindOddsTo1) == 0) {
              startLowWindEvent();
              Weather.dbg(""String_Node_Str"" + lowWindTimer);
            }
          }
        }
 else {
          stopLowWindEvent();
        }
        if (ConfigWind.Wind_HighWindEvents && highWindTimer <= 0) {
          if (rand.nextInt(ConfigWind.highWindOddsTo1) == 0) {
            startHighWindEvent();
            Weather.dbg(""String_Node_Str"" + highWindTimer);
          }
        }
      }
 else {
        lowWindTimer--;
        if (lowWindTimer <= 0) {
          Weather.dbg(""String_Node_Str"");
        }
        windSpeedGlobal-=0.01F;
      }
      if (highWindTimer > 0) {
        highWindTimer--;
        if (highWindTimer <= 0) {
          Weather.dbg(""String_Node_Str"");
        }
      }
      if (windSpeedGlobal < windSpeedMin) {
        windSpeedGlobal=windSpeedMin;
      }
      if (windSpeedGlobal > windSpeedMax) {
        windSpeedGlobal=windSpeedMax;
      }
      if (windTimeGust > 0) {
        windTimeGust--;
        if (windTimeGust == 0) {
          syncData();
        }
      }
      float randGustWindFactor=1F;
      if (false && this.windTimeGust == 0 && lowWindTimer <= 0) {
        if (chanceOfWindGustEvent > 0F) {
          if (rand.nextInt((int)((100 - chanceOfWindGustEvent) * randGustWindFactor)) == 0) {
            windSpeedGust=windSpeedGlobal + rand.nextFloat() * 0.6F;
            boolean randomDirectionGust=false;
            if (randomDirectionGust) {
              windAngleGust=rand.nextInt(360) - 180;
            }
 else {
              windAngleGust=windAngleGlobal + rand.nextInt(120) - 60;
            }
            setWindTimeGust(rand.nextInt(windGustEventTimeRand));
          }
        }
      }
      windAngleGlobal+=(rand.nextFloat() * ConfigWind.globalWindChangeAmountRate) - (rand.nextFloat() * ConfigWind.globalWindChangeAmountRate);
      if (windAngleGlobal < -180) {
        windAngleGlobal+=360;
      }
      if (windAngleGlobal > 180) {
        windAngleGlobal-=360;
      }
    }
 else {
      tickClient();
    }
  }
}","public void tick(){
  Random rand=new Random();
  if (!ConfigWind.Misc_windOn) {
    windSpeedGlobal=0;
    windSpeedGust=0;
    windTimeGust=0;
  }
 else {
    if (!manager.getWorld().isRemote) {
      if (!ConfigWind.Wind_LowWindEvents) {
        lowWindTimer=0;
      }
      if (lowWindTimer <= 0) {
        if (windSpeedGlobalRandChangeTimer-- <= 0) {
          if (highWindTimer <= 0) {
            windSpeedGlobal+=(rand.nextDouble() * windSpeedGlobalChangeRate) - (windSpeedGlobalChangeRate / 2);
          }
 else {
            windSpeedGlobal+=(rand.nextDouble() * windSpeedGlobalChangeRate);
          }
          windSpeedGlobalRandChangeTimer=windSpeedGlobalRandChangeDelay;
        }
        if (highWindTimer <= 0) {
          if (ConfigWind.Wind_LowWindEvents) {
            if (rand.nextInt(ConfigWind.lowWindOddsTo1) == 0) {
              startLowWindEvent();
              Weather.dbg(""String_Node_Str"" + lowWindTimer);
            }
          }
        }
 else {
          stopLowWindEvent();
        }
        if (ConfigWind.Wind_HighWindEvents && highWindTimer <= 0) {
          if (rand.nextInt(ConfigWind.highWindOddsTo1) == 0) {
            startHighWindEvent();
            Weather.dbg(""String_Node_Str"" + highWindTimer);
          }
        }
      }
 else {
        lowWindTimer--;
        if (lowWindTimer <= 0) {
          Weather.dbg(""String_Node_Str"");
        }
        windSpeedGlobal-=0.01F;
      }
      if (highWindTimer > 0) {
        highWindTimer--;
        if (highWindTimer <= 0) {
          Weather.dbg(""String_Node_Str"");
        }
      }
      if (windSpeedGlobal < windSpeedMin) {
        windSpeedGlobal=windSpeedMin;
      }
      if (windSpeedGlobal > windSpeedMax) {
        windSpeedGlobal=windSpeedMax;
      }
      if (windTimeGust > 0) {
        windTimeGust--;
        if (windTimeGust == 0) {
          syncData();
        }
      }
      float randGustWindFactor=1F;
      if (this.windTimeGust == 0 && lowWindTimer <= 0) {
        if (chanceOfWindGustEvent > 0F) {
          if (rand.nextInt((int)((100 - chanceOfWindGustEvent) * randGustWindFactor)) == 0) {
            windSpeedGust=windSpeedGlobal + rand.nextFloat() * 0.6F;
            boolean randomDirectionGust=false;
            if (randomDirectionGust) {
              windAngleGust=rand.nextInt(360) - 180;
            }
 else {
              windAngleGust=windAngleGlobal + rand.nextInt(120) - 60;
            }
            setWindTimeGust(rand.nextInt(windGustEventTimeRand));
          }
        }
      }
      windAngleGlobal+=(rand.nextFloat() * ConfigWind.globalWindChangeAmountRate) - (rand.nextFloat() * ConfigWind.globalWindChangeAmountRate);
      if (windAngleGlobal < -180) {
        windAngleGlobal+=360;
      }
      if (windAngleGlobal > 180) {
        windAngleGlobal-=360;
      }
    }
 else {
      tickClient();
    }
  }
}",0.9984323288625676
81821,"public void onTickInGame(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  World world=mc.world;
  if (ConfigMisc.Misc_proxyRenderOverrideEnabled) {
    if (!(mc.entityRenderer instanceof EntityRendererProxyWeather2Mini)) {
      oldRenderer=mc.entityRenderer;
      EntityRendererProxyWeather2Mini temp=new EntityRendererProxyWeather2Mini(mc,mc.getResourceManager());
      mc.entityRenderer=temp;
    }
  }
 else {
    if ((mc.entityRenderer instanceof EntityRendererProxyWeather2Mini)) {
      if (oldRenderer != null) {
        mc.entityRenderer=oldRenderer;
      }
 else {
        mc.entityRenderer=new EntityRenderer(mc,mc.getResourceManager());
      }
    }
  }
  if (world != null) {
    checkClientWeather();
    weatherManager.tick();
    if (ConfigMisc.Misc_ForceVanillaCloudsOff && world.provider.getDimension() == 0) {
      mc.gameSettings.clouds=0;
    }
    if (WeatherUtilConfig.listDimensionsWindEffects.contains(world.provider.getDimension())) {
      sceneEnhancer.tickClient();
    }
    if (mc.ingameGUI.getChatGUI().getSentMessages().size() > 0) {
      String msg=(String)mc.ingameGUI.getChatGUI().getSentMessages().get(mc.ingameGUI.getChatGUI().getSentMessages().size() - 1);
      if (msg.equals(""String_Node_Str"")) {
        mc.ingameGUI.getChatGUI().getSentMessages().remove(mc.ingameGUI.getChatGUI().getSentMessages().size() - 1);
        mc.displayGuiScreen(new GuiEZConfig());
      }
    }
    float windDir=WindReader.getWindAngle(world,null);
    float windSpeed=WindReader.getWindSpeed(world,null);
    windDir=0;
    float give=30;
    float diff=Math.abs(windDir - smoothAngle);
    if (true && diff > 10) {
      if (smoothAngle > 180)       smoothAngle-=360;
      if (smoothAngle < -180)       smoothAngle+=360;
      float bestMove=MathHelper.wrapDegrees(windDir - smoothAngle);
      smoothAngleAdj=windSpeed;
      if (Math.abs(bestMove) < 180) {
        float realAdj=smoothAngleAdj;
        if (realAdj * 2 > windSpeed) {
          if (bestMove > 0) {
            smoothAngleRotationalVelAccel-=realAdj;
            if (prevDir < 0) {
              smoothAngleRotationalVelAccel=0;
            }
            prevDir=1;
          }
 else           if (bestMove < 0) {
            smoothAngleRotationalVelAccel+=realAdj;
            if (prevDir > 0) {
              smoothAngleRotationalVelAccel=0;
            }
            prevDir=-1;
          }
        }
        if (smoothAngleRotationalVelAccel > 0.3 || smoothAngleRotationalVelAccel < -0.3) {
          smoothAngle+=smoothAngleRotationalVelAccel * 0.1F;
        }
 else {
        }
        smoothAngleRotationalVelAccel*=0.80F;
      }
    }
    if (!Minecraft.getMinecraft().isGamePaused()) {
      ExtendedRenderer.foliageRenderer.windDir-=2;
      windSpeed=1.3F;
      float rate=0.005F;
      if (ExtendedRenderer.foliageRenderer.windSpeedSmooth != windSpeed) {
        if (ExtendedRenderer.foliageRenderer.windSpeedSmooth < windSpeed) {
          if (ExtendedRenderer.foliageRenderer.windSpeedSmooth + rate > windSpeed) {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth=windSpeed;
          }
 else {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth+=rate;
          }
        }
 else {
          if (ExtendedRenderer.foliageRenderer.windSpeedSmooth - rate < windSpeed) {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth=windSpeed;
          }
 else {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth-=rate;
          }
        }
      }
      float baseTimeChangeRate=60F;
      ExtendedRenderer.foliageRenderer.windTime+=0 + (baseTimeChangeRate * ExtendedRenderer.foliageRenderer.windSpeedSmooth);
    }
  }
 else {
    resetClientWeather();
  }
}","public void onTickInGame(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  World world=mc.world;
  if (ConfigMisc.Misc_proxyRenderOverrideEnabled) {
    if (!(mc.entityRenderer instanceof EntityRendererProxyWeather2Mini)) {
      oldRenderer=mc.entityRenderer;
      EntityRendererProxyWeather2Mini temp=new EntityRendererProxyWeather2Mini(mc,mc.getResourceManager());
      mc.entityRenderer=temp;
    }
  }
 else {
    if ((mc.entityRenderer instanceof EntityRendererProxyWeather2Mini)) {
      if (oldRenderer != null) {
        mc.entityRenderer=oldRenderer;
      }
 else {
        mc.entityRenderer=new EntityRenderer(mc,mc.getResourceManager());
      }
    }
  }
  if (world != null) {
    checkClientWeather();
    weatherManager.tick();
    if (ConfigMisc.Misc_ForceVanillaCloudsOff && world.provider.getDimension() == 0) {
      mc.gameSettings.clouds=0;
    }
    if (WeatherUtilConfig.listDimensionsWindEffects.contains(world.provider.getDimension())) {
      sceneEnhancer.tickClient();
    }
    if (mc.ingameGUI.getChatGUI().getSentMessages().size() > 0) {
      String msg=(String)mc.ingameGUI.getChatGUI().getSentMessages().get(mc.ingameGUI.getChatGUI().getSentMessages().size() - 1);
      if (msg.equals(""String_Node_Str"")) {
        mc.ingameGUI.getChatGUI().getSentMessages().remove(mc.ingameGUI.getChatGUI().getSentMessages().size() - 1);
        mc.displayGuiScreen(new GuiEZConfig());
      }
    }
    float windDir=WindReader.getWindAngle(world,null);
    float windSpeed=WindReader.getWindSpeed(world,null);
    windDir=0;
    float give=30;
    float diff=Math.abs(windDir - smoothAngle);
    if (true && diff > 10) {
      if (smoothAngle > 180)       smoothAngle-=360;
      if (smoothAngle < -180)       smoothAngle+=360;
      float bestMove=MathHelper.wrapDegrees(windDir - smoothAngle);
      smoothAngleAdj=windSpeed;
      if (Math.abs(bestMove) < 180) {
        float realAdj=smoothAngleAdj;
        if (realAdj * 2 > windSpeed) {
          if (bestMove > 0) {
            smoothAngleRotationalVelAccel-=realAdj;
            if (prevDir < 0) {
              smoothAngleRotationalVelAccel=0;
            }
            prevDir=1;
          }
 else           if (bestMove < 0) {
            smoothAngleRotationalVelAccel+=realAdj;
            if (prevDir > 0) {
              smoothAngleRotationalVelAccel=0;
            }
            prevDir=-1;
          }
        }
        if (smoothAngleRotationalVelAccel > 0.3 || smoothAngleRotationalVelAccel < -0.3) {
          smoothAngle+=smoothAngleRotationalVelAccel * 0.1F;
        }
 else {
        }
        smoothAngleRotationalVelAccel*=0.80F;
      }
    }
    if (!Minecraft.getMinecraft().isGamePaused()) {
      ExtendedRenderer.foliageRenderer.windDir=smoothAngle;
      windSpeed=1.3F;
      float rate=0.005F;
      if (ExtendedRenderer.foliageRenderer.windSpeedSmooth != windSpeed) {
        if (ExtendedRenderer.foliageRenderer.windSpeedSmooth < windSpeed) {
          if (ExtendedRenderer.foliageRenderer.windSpeedSmooth + rate > windSpeed) {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth=windSpeed;
          }
 else {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth+=rate;
          }
        }
 else {
          if (ExtendedRenderer.foliageRenderer.windSpeedSmooth - rate < windSpeed) {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth=windSpeed;
          }
 else {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth-=rate;
          }
        }
      }
      float baseTimeChangeRate=60F;
      ExtendedRenderer.foliageRenderer.windTime+=0 + (baseTimeChangeRate * ExtendedRenderer.foliageRenderer.windSpeedSmooth);
    }
  }
 else {
    resetClientWeather();
  }
}",0.9979846835953244
81822,"@Override public void render(TileEntity var1,double x,double y,double z,float var8,int destroyStage,float alpha){
  TileEntityWeatherForecast tEnt=(TileEntityWeatherForecast)var1;
  String particleCount=ExtendedRenderer.rotEffRenderer.getStatistics();
  StormObject so=tEnt.lastTickStormObject;
  Vec3 pos=new Vec3(tEnt.getPos().getX(),tEnt.getPos().getY(),tEnt.getPos().getZ());
  String descSeverity=""String_Node_Str"";
  String descDist=""String_Node_Str"";
  String descWindAngleCloud=""String_Node_Str"" + (int)WindReader.getWindAngle(var1.getWorld(),pos,WindReader.WindType.CLOUD);
  String descWindAngle=""String_Node_Str"" + (int)WindReader.getWindAngle(var1.getWorld(),pos,WindReader.WindType.DOMINANT);
  String descWindSpeed=""String_Node_Str"" + (((int)(WindReader.getWindSpeed(var1.getWorld(),pos,WindReader.WindType.DOMINANT) * 100F)) / 100F);
  String progression=""String_Node_Str"";
  float levelWater=0;
  if (so != null) {
    progression=""String_Node_Str"";
    if (so.hasStormPeaked) {
      progression=""String_Node_Str"";
    }
    if (so.levelCurIntensityStage >= StormObject.STATE_STAGE5 + 1) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE5) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE4) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE3) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE2) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE1) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_FORMING) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_HAIL) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_HIGHWIND) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_THUNDER) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.attrib_precipitation) {
      descSeverity=""String_Node_Str"";
      progression=""String_Node_Str"";
    }
    Vec3 posXZ=new Vec3(tEnt.getPos().getX(),so.pos.yCoord,tEnt.getPos().getZ());
    descDist=""String_Node_Str"" + (int)posXZ.distanceTo(so.pos);
    levelWater=so.levelWater;
  }
  int index=1;
  boolean oldMode=false;
  float yOffset=2.5F;
  float sizeSimBoxDiameter=2048;
  float sizeRenderBoxDiameter=3;
  GlStateManager.pushMatrix();
  GlStateManager.translate((float)x + 0.5F,(float)y + 1.1F,(float)z + 0.5F);
  GL11.glNormal3f(0.0F,1.0F,0.0F);
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.tryBlendFuncSeparate(770,771,1,0);
  GlStateManager.depthMask(false);
  Tessellator tessellator=Tessellator.getInstance();
  BufferBuilder worldrenderer=tessellator.getBuffer();
  GlStateManager.disableTexture2D();
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_COLOR);
  worldrenderer.pos((double)-(sizeRenderBoxDiameter / 2),0,-(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)-(sizeRenderBoxDiameter / 2),0,(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)(sizeRenderBoxDiameter / 2),0,(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)(sizeRenderBoxDiameter / 2),0,-(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  tessellator.draw();
  GlStateManager.enableTexture2D();
  GlStateManager.enableLighting();
  GlStateManager.disableBlend();
  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  GlStateManager.popMatrix();
  renderLivingLabel(""String_Node_Str"" + '6' + ""String_Node_Str"",x,y + 1.2F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
  if (ConfigMisc.radarCloudDebug) {
    EntityPlayer entP=Minecraft.getMinecraft().player;
    if (entP != null) {
      String rainThunder=entP.world.rainingStrength + ""String_Node_Str"" + entP.world.thunderingStrength;
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + SceneEnhancer.getRainStrengthAndControlVisuals(entP),x,y + 2.2F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + levelWater,x,y + 2.3F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + descDist,x,y + 2.4F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + rainThunder,x,y + 2.5F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
    }
  }
  for (int i=0; i < tEnt.storms.size(); i++) {
    WeatherObject wo=tEnt.storms.get(i);
    GL11.glPushMatrix();
    Vec3 posRenderOffset=new Vec3(wo.pos.xCoord - tEnt.getPos().getX(),0,wo.pos.zCoord - tEnt.getPos().getZ());
    posRenderOffset.xCoord/=sizeSimBoxDiameter;
    posRenderOffset.zCoord/=sizeSimBoxDiameter;
    posRenderOffset.xCoord*=sizeRenderBoxDiameter;
    posRenderOffset.zCoord*=sizeRenderBoxDiameter;
    GL11.glTranslated(posRenderOffset.xCoord,0,posRenderOffset.zCoord);
    if (wo instanceof StormObject) {
      StormObject storm=(StormObject)wo;
      if (storm.levelCurIntensityStage >= StormObject.STATE_FORMING) {
        if (storm.stormType == StormObject.TYPE_WATER) {
          renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconCyclone);
          renderLivingLabel(""String_Node_Str"" + (int)(storm.levelCurIntensityStage - StormObject.levelStormIntensityFormingStartVal),x,y + 1.5F,z,1,15,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
 else {
          renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconTornado);
          renderLivingLabel(""String_Node_Str"" + (int)(storm.levelCurIntensityStage - StormObject.levelStormIntensityFormingStartVal),x,y + 1.5F,z,1,12,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_HAIL) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconHail);
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconWind);
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_HIGHWIND) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconLightning);
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconWind);
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_THUNDER) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconLightning);
      }
 else       if (storm.isPrecipitating()) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconRain);
      }
      if (storm.hasStormPeaked && (storm.levelCurIntensityStage > storm.STATE_NORMAL)) {
        renderLivingLabel(""String_Node_Str"" + '4' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
 else {
        if (ConfigMisc.radarCloudDebug) {
          if (storm.isCloudlessStorm()) {
            renderLivingLabel(""String_Node_Str"" + '0' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
          }
 else {
            renderLivingLabel(""String_Node_Str"" + 'f' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
          }
        }
 else {
          renderLivingLabel(""String_Node_Str"" + '2' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
      }
    }
 else     if (wo instanceof WeatherObjectSandstorm) {
      renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconSandstorm);
      if (((WeatherObjectSandstorm)wo).isFrontGrowing) {
        renderLivingLabel(""String_Node_Str"" + '2' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
 else {
        renderLivingLabel(""String_Node_Str"" + '4' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
    }
    GL11.glTranslated(-posRenderOffset.xCoord,0,-posRenderOffset.zCoord);
    GL11.glPopMatrix();
  }
}","@Override public void render(TileEntity var1,double x,double y,double z,float var8,int destroyStage,float alpha){
  TileEntityWeatherForecast tEnt=(TileEntityWeatherForecast)var1;
  String particleCount=ExtendedRenderer.rotEffRenderer.getStatistics();
  StormObject so=tEnt.lastTickStormObject;
  Vec3 pos=new Vec3(tEnt.getPos().getX(),tEnt.getPos().getY(),tEnt.getPos().getZ());
  String descSeverity=""String_Node_Str"";
  String descDist=""String_Node_Str"";
  String descWindAngleCloud=""String_Node_Str"" + (int)WindReader.getWindAngle(var1.getWorld(),pos,WindReader.WindType.CLOUD);
  String descWindAngle=""String_Node_Str"" + (int)WindReader.getWindAngle(var1.getWorld(),pos,WindReader.WindType.PRIORITY);
  String descWindSpeed=""String_Node_Str"" + (((int)(WindReader.getWindSpeed(var1.getWorld(),pos,WindReader.WindType.PRIORITY) * 100F)) / 100F);
  String progression=""String_Node_Str"";
  float levelWater=0;
  if (so != null) {
    progression=""String_Node_Str"";
    if (so.hasStormPeaked) {
      progression=""String_Node_Str"";
    }
    if (so.levelCurIntensityStage >= StormObject.STATE_STAGE5 + 1) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE5) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE4) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE3) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE2) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE1) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_FORMING) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_HAIL) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_HIGHWIND) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_THUNDER) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.attrib_precipitation) {
      descSeverity=""String_Node_Str"";
      progression=""String_Node_Str"";
    }
    Vec3 posXZ=new Vec3(tEnt.getPos().getX(),so.pos.yCoord,tEnt.getPos().getZ());
    descDist=""String_Node_Str"" + (int)posXZ.distanceTo(so.pos);
    levelWater=so.levelWater;
  }
  int index=1;
  boolean oldMode=false;
  float yOffset=2.5F;
  float sizeSimBoxDiameter=2048;
  float sizeRenderBoxDiameter=3;
  GlStateManager.pushMatrix();
  GlStateManager.translate((float)x + 0.5F,(float)y + 1.1F,(float)z + 0.5F);
  GL11.glNormal3f(0.0F,1.0F,0.0F);
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.tryBlendFuncSeparate(770,771,1,0);
  GlStateManager.depthMask(false);
  Tessellator tessellator=Tessellator.getInstance();
  BufferBuilder worldrenderer=tessellator.getBuffer();
  GlStateManager.disableTexture2D();
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_COLOR);
  worldrenderer.pos((double)-(sizeRenderBoxDiameter / 2),0,-(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)-(sizeRenderBoxDiameter / 2),0,(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)(sizeRenderBoxDiameter / 2),0,(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)(sizeRenderBoxDiameter / 2),0,-(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  tessellator.draw();
  GlStateManager.enableTexture2D();
  GlStateManager.enableLighting();
  GlStateManager.disableBlend();
  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  GlStateManager.popMatrix();
  renderLivingLabel(""String_Node_Str"" + '6' + ""String_Node_Str"",x,y + 1.2F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
  if (ConfigMisc.radarCloudDebug) {
    EntityPlayer entP=Minecraft.getMinecraft().player;
    if (entP != null) {
      String rainThunder=entP.world.rainingStrength + ""String_Node_Str"" + entP.world.thunderingStrength;
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + SceneEnhancer.getRainStrengthAndControlVisuals(entP),x,y + 2.2F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + levelWater,x,y + 2.3F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + descDist,x,y + 2.4F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + rainThunder,x,y + 2.5F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
    }
  }
  for (int i=0; i < tEnt.storms.size(); i++) {
    WeatherObject wo=tEnt.storms.get(i);
    GL11.glPushMatrix();
    Vec3 posRenderOffset=new Vec3(wo.pos.xCoord - tEnt.getPos().getX(),0,wo.pos.zCoord - tEnt.getPos().getZ());
    posRenderOffset.xCoord/=sizeSimBoxDiameter;
    posRenderOffset.zCoord/=sizeSimBoxDiameter;
    posRenderOffset.xCoord*=sizeRenderBoxDiameter;
    posRenderOffset.zCoord*=sizeRenderBoxDiameter;
    GL11.glTranslated(posRenderOffset.xCoord,0,posRenderOffset.zCoord);
    if (wo instanceof StormObject) {
      StormObject storm=(StormObject)wo;
      if (storm.levelCurIntensityStage >= StormObject.STATE_FORMING) {
        if (storm.stormType == StormObject.TYPE_WATER) {
          renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconCyclone);
          renderLivingLabel(""String_Node_Str"" + (int)(storm.levelCurIntensityStage - StormObject.levelStormIntensityFormingStartVal),x,y + 1.5F,z,1,15,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
 else {
          renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconTornado);
          renderLivingLabel(""String_Node_Str"" + (int)(storm.levelCurIntensityStage - StormObject.levelStormIntensityFormingStartVal),x,y + 1.5F,z,1,12,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_HAIL) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconHail);
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconWind);
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_HIGHWIND) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconLightning);
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconWind);
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_THUNDER) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconLightning);
      }
 else       if (storm.isPrecipitating()) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconRain);
      }
      if (storm.hasStormPeaked && (storm.levelCurIntensityStage > storm.STATE_NORMAL)) {
        renderLivingLabel(""String_Node_Str"" + '4' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
 else {
        if (ConfigMisc.radarCloudDebug) {
          if (storm.isCloudlessStorm()) {
            renderLivingLabel(""String_Node_Str"" + '0' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
          }
 else {
            renderLivingLabel(""String_Node_Str"" + 'f' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
          }
        }
 else {
          renderLivingLabel(""String_Node_Str"" + '2' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
      }
    }
 else     if (wo instanceof WeatherObjectSandstorm) {
      renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconSandstorm);
      if (((WeatherObjectSandstorm)wo).isFrontGrowing) {
        renderLivingLabel(""String_Node_Str"" + '2' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
 else {
        renderLivingLabel(""String_Node_Str"" + '4' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
    }
    GL11.glTranslated(-posRenderOffset.xCoord,0,-posRenderOffset.zCoord);
    GL11.glPopMatrix();
  }
}",0.9867584745762712
81823,"public static void modelBakeEvent(ModelBakeEvent event){
  Map<ModelResourceLocation,IModel> stateModels=ReflectionHelper.getPrivateValue(ModelLoader.class,event.getModelLoader(),""String_Node_Str"");
  IBakedModel blank=event.getModelRegistry().getObject(new ModelResourceLocation(""String_Node_Str"",""String_Node_Str""));
  for (  ModelResourceLocation res : event.getModelRegistry().getKeys()) {
    IBakedModel bakedModel=event.getModelRegistry().getObject(res);
    IModel model=stateModels.get(res);
    Set<ResourceLocation> textures=Sets.newHashSet(model.getTextures());
    escape:     if (!res.getVariant().equals(""String_Node_Str"")) {
      for (      FoliageReplacerBase replacer : listFoliageReplacers) {
        for (        TextureAtlasSprite sprite : replacer.sprites) {
          for (          ResourceLocation res2 : textures) {
            if (res2.toString().equals(sprite.getIconName())) {
              if (!res.toString().contains(""String_Node_Str"")) {
                System.out.println(""String_Node_Str"" + res + ""String_Node_Str"");
                event.getModelRegistry().putObject(res,blank);
                break escape;
              }
            }
          }
        }
      }
    }
  }
}","public static void modelBakeEvent(ModelBakeEvent event){
  boolean replaceVanillaModels=true;
  if (replaceVanillaModels) {
    Map<ModelResourceLocation,IModel> stateModels=ReflectionHelper.getPrivateValue(ModelLoader.class,event.getModelLoader(),""String_Node_Str"");
    IBakedModel blank=event.getModelRegistry().getObject(new ModelResourceLocation(""String_Node_Str"",""String_Node_Str""));
    for (    ModelResourceLocation res : event.getModelRegistry().getKeys()) {
      IBakedModel bakedModel=event.getModelRegistry().getObject(res);
      IModel model=stateModels.get(res);
      Set<ResourceLocation> textures=Sets.newHashSet(model.getTextures());
      escape:       if (!res.getVariant().equals(""String_Node_Str"")) {
        for (        FoliageReplacerBase replacer : listFoliageReplacers) {
          for (          TextureAtlasSprite sprite : replacer.sprites) {
            for (            ResourceLocation res2 : textures) {
              if (res2.toString().equals(sprite.getIconName())) {
                if (!res.toString().contains(""String_Node_Str"")) {
                  System.out.println(""String_Node_Str"" + res + ""String_Node_Str"");
                  event.getModelRegistry().putObject(res,blank);
                  break escape;
                }
              }
            }
          }
        }
      }
    }
  }
}",0.9511527940601796
81824,"public void onTickInGame(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  World world=mc.world;
  if (ConfigMisc.Misc_proxyRenderOverrideEnabled) {
    if (!(mc.entityRenderer instanceof EntityRendererProxyWeather2Mini)) {
      oldRenderer=mc.entityRenderer;
      EntityRendererProxyWeather2Mini temp=new EntityRendererProxyWeather2Mini(mc,mc.getResourceManager());
      mc.entityRenderer=temp;
    }
  }
 else {
    if ((mc.entityRenderer instanceof EntityRendererProxyWeather2Mini)) {
      if (oldRenderer != null) {
        mc.entityRenderer=oldRenderer;
      }
 else {
        mc.entityRenderer=new EntityRenderer(mc,mc.getResourceManager());
      }
    }
  }
  if (world != null) {
    checkClientWeather();
    weatherManager.tick();
    if (ConfigMisc.Misc_ForceVanillaCloudsOff && world.provider.getDimension() == 0) {
      mc.gameSettings.clouds=0;
    }
    if (WeatherUtilConfig.listDimensionsWindEffects.contains(world.provider.getDimension())) {
      sceneEnhancer.tickClient();
    }
    if (mc.ingameGUI.getChatGUI().getSentMessages().size() > 0) {
      String msg=(String)mc.ingameGUI.getChatGUI().getSentMessages().get(mc.ingameGUI.getChatGUI().getSentMessages().size() - 1);
      if (msg.equals(""String_Node_Str"")) {
        mc.ingameGUI.getChatGUI().getSentMessages().remove(mc.ingameGUI.getChatGUI().getSentMessages().size() - 1);
        mc.displayGuiScreen(new GuiEZConfig());
      }
    }
    float windDir=WindReader.getWindAngle(world,null);
    float windSpeed=WindReader.getWindSpeed(world,null);
    float give=30;
    float diff=Math.abs(windDir - smoothAngle);
    if (true && diff > 10) {
      if (smoothAngle > 180)       smoothAngle-=360;
      if (smoothAngle < -180)       smoothAngle+=360;
      float bestMove=MathHelper.wrapDegrees(windDir - smoothAngle);
      smoothAngleAdj=windSpeed;
      if (Math.abs(bestMove) < 180) {
        float realAdj=smoothAngleAdj;
        if (realAdj * 2 > windSpeed) {
          if (bestMove > 0) {
            smoothAngleRotationalVelAccel-=realAdj;
            if (prevDir < 0) {
              smoothAngleRotationalVelAccel=0;
            }
            prevDir=1;
          }
 else           if (bestMove < 0) {
            smoothAngleRotationalVelAccel+=realAdj;
            if (prevDir > 0) {
              smoothAngleRotationalVelAccel=0;
            }
            prevDir=-1;
          }
        }
        if (smoothAngleRotationalVelAccel > 0.3 || smoothAngleRotationalVelAccel < -0.3) {
          smoothAngle+=smoothAngleRotationalVelAccel * 0.1F;
        }
 else {
        }
        smoothAngleRotationalVelAccel*=0.80F;
      }
    }
    if (!Minecraft.getMinecraft().isGamePaused()) {
      ExtendedRenderer.foliageRenderer.windDir=smoothAngle;
      float rate=0.005F;
      if (ExtendedRenderer.foliageRenderer.windSpeedSmooth != windSpeed) {
        if (ExtendedRenderer.foliageRenderer.windSpeedSmooth < windSpeed) {
          if (ExtendedRenderer.foliageRenderer.windSpeedSmooth + rate > windSpeed) {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth=windSpeed;
          }
 else {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth+=rate;
          }
        }
 else {
          if (ExtendedRenderer.foliageRenderer.windSpeedSmooth - rate < windSpeed) {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth=windSpeed;
          }
 else {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth-=rate;
          }
        }
      }
      float baseTimeChangeRate=60F;
      ExtendedRenderer.foliageRenderer.windTime+=0 + (baseTimeChangeRate * ExtendedRenderer.foliageRenderer.windSpeedSmooth);
    }
  }
 else {
    resetClientWeather();
  }
}","public void onTickInGame(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  World world=mc.world;
  if (ConfigMisc.Misc_proxyRenderOverrideEnabled) {
    if (!(mc.entityRenderer instanceof EntityRendererProxyWeather2Mini)) {
      oldRenderer=mc.entityRenderer;
      EntityRendererProxyWeather2Mini temp=new EntityRendererProxyWeather2Mini(mc,mc.getResourceManager());
      mc.entityRenderer=temp;
    }
  }
 else {
    if ((mc.entityRenderer instanceof EntityRendererProxyWeather2Mini)) {
      if (oldRenderer != null) {
        mc.entityRenderer=oldRenderer;
      }
 else {
        mc.entityRenderer=new EntityRenderer(mc,mc.getResourceManager());
      }
    }
  }
  if (world != null) {
    checkClientWeather();
    weatherManager.tick();
    if (ConfigMisc.Misc_ForceVanillaCloudsOff && world.provider.getDimension() == 0) {
      mc.gameSettings.clouds=0;
    }
    if (WeatherUtilConfig.listDimensionsWindEffects.contains(world.provider.getDimension())) {
      sceneEnhancer.tickClient();
    }
    if (mc.ingameGUI.getChatGUI().getSentMessages().size() > 0) {
      String msg=(String)mc.ingameGUI.getChatGUI().getSentMessages().get(mc.ingameGUI.getChatGUI().getSentMessages().size() - 1);
      if (msg.equals(""String_Node_Str"")) {
        mc.ingameGUI.getChatGUI().getSentMessages().remove(mc.ingameGUI.getChatGUI().getSentMessages().size() - 1);
        mc.displayGuiScreen(new GuiEZConfig());
      }
    }
    float windDir=WindReader.getWindAngle(world,null);
    float windSpeed=WindReader.getWindSpeed(world,null);
    float give=30;
    float diff=Math.abs(windDir - smoothAngle);
    if (true && diff > 10) {
      if (smoothAngle > 180)       smoothAngle-=360;
      if (smoothAngle < -180)       smoothAngle+=360;
      float bestMove=MathHelper.wrapDegrees(windDir - smoothAngle);
      smoothAngleAdj=windSpeed;
      if (Math.abs(bestMove) < 180) {
        float realAdj=smoothAngleAdj;
        if (realAdj * 2 > windSpeed) {
          if (bestMove > 0) {
            smoothAngleRotationalVelAccel-=realAdj;
            if (prevDir < 0) {
              smoothAngleRotationalVelAccel=0;
            }
            prevDir=1;
          }
 else           if (bestMove < 0) {
            smoothAngleRotationalVelAccel+=realAdj;
            if (prevDir > 0) {
              smoothAngleRotationalVelAccel=0;
            }
            prevDir=-1;
          }
        }
        if (smoothAngleRotationalVelAccel > 0.3 || smoothAngleRotationalVelAccel < -0.3) {
          smoothAngle+=smoothAngleRotationalVelAccel * 0.3F;
        }
 else {
        }
        smoothAngleRotationalVelAccel*=0.80F;
      }
    }
    if (!Minecraft.getMinecraft().isGamePaused()) {
      ExtendedRenderer.foliageRenderer.windDir=smoothAngle;
      float rate=0.005F;
      if (ExtendedRenderer.foliageRenderer.windSpeedSmooth != windSpeed) {
        if (ExtendedRenderer.foliageRenderer.windSpeedSmooth < windSpeed) {
          if (ExtendedRenderer.foliageRenderer.windSpeedSmooth + rate > windSpeed) {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth=windSpeed;
          }
 else {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth+=rate;
          }
        }
 else {
          if (ExtendedRenderer.foliageRenderer.windSpeedSmooth - rate < windSpeed) {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth=windSpeed;
          }
 else {
            ExtendedRenderer.foliageRenderer.windSpeedSmooth-=rate;
          }
        }
      }
      float baseTimeChangeRate=60F;
      ExtendedRenderer.foliageRenderer.windTime+=0 + (baseTimeChangeRate * ExtendedRenderer.foliageRenderer.windSpeedSmooth);
    }
  }
 else {
    resetClientWeather();
  }
}",0.9997289238275956
81825,"/** 
 * Called from TextureStitchEvent.Post
 */
public static void setupReplacers(){
  boolean test=false;
  listFoliageReplacers.clear();
  if (!test) {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setStateSensitive(true).addComparable(BlockTallGrass.TYPE,BlockTallGrass.EnumType.GRASS));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.YELLOW_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBiomeColorize(false));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.RED_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBiomeColorize(false).setStateSensitive(true).addComparable(Blocks.RED_FLOWER.getTypeProperty(),BlockFlower.EnumFlowerType.ALLIUM));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.RED_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBiomeColorize(false).setStateSensitive(true).addComparable(Blocks.RED_FLOWER.getTypeProperty(),BlockFlower.EnumFlowerType.BLUE_ORCHID));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.RED_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBiomeColorize(false).setStateSensitive(true).addComparable(Blocks.RED_FLOWER.getTypeProperty(),BlockFlower.EnumFlowerType.POPPY));
    List<TextureAtlasSprite> sprites=new ArrayList<>();
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.GRASS));
    sprites=new ArrayList<>();
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.ROSE));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.REEDS.getDefaultState(),-1).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBaseMaterial(Material.SAND).setBiomeColorize(true).setRandomizeCoord(false).setLooseness(0.3F));
    for (int i=0; i < 8; i++) {
      int temp=i;
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.WHEAT.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + temp)).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,i));
    }
    HashMap<Integer,Integer> lookupStateToModel=new HashMap<>();
    lookupStateToModel.put(0,0);
    lookupStateToModel.put(1,0);
    lookupStateToModel.put(2,1);
    lookupStateToModel.put(3,1);
    lookupStateToModel.put(4,2);
    lookupStateToModel.put(5,2);
    lookupStateToModel.put(6,2);
    lookupStateToModel.put(7,3);
    for (    Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.CARROTS.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,entrySet.getKey()));
    }
    for (    Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.POTATOES.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,entrySet.getKey()));
    }
  }
 else {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")));
    if (true)     return;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.YELLOW_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBiomeColorize(false));
    List<TextureAtlasSprite> sprites=new ArrayList<>();
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.REEDS.getDefaultState(),-1).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBaseMaterial(Material.SAND).setBiomeColorize(true).setRandomizeCoord(false));
    for (int i=0; i < 8; i++) {
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + i)).setRandomizeCoord(false));
    }
    for (int i=0; i < 4; i++) {
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + i)).setRandomizeCoord(false));
    }
    HashMap<Integer,Integer> lookupStateToModel=new HashMap<>();
    lookupStateToModel.put(0,0);
    lookupStateToModel.put(1,0);
    lookupStateToModel.put(2,1);
    lookupStateToModel.put(3,1);
    lookupStateToModel.put(4,2);
    lookupStateToModel.put(5,2);
    lookupStateToModel.put(6,2);
    lookupStateToModel.put(7,3);
    for (    Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())));
    }
    for (    Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())));
    }
  }
}","/** 
 * Called from TextureStitchEvent.Post
 */
public static void setupReplacers(){
  boolean test=false;
  listFoliageReplacers.clear();
  if (!test) {
    HashMap<Comparable,String> lookup=new HashMap<>();
    lookup.clear();
    lookup.put(BlockPlanks.EnumType.OAK,""String_Node_Str"");
    lookup.put(BlockPlanks.EnumType.SPRUCE,""String_Node_Str"");
    lookup.put(BlockPlanks.EnumType.BIRCH,""String_Node_Str"");
    lookup.put(BlockPlanks.EnumType.JUNGLE,""String_Node_Str"");
    lookup.put(BlockPlanks.EnumType.ACACIA,""String_Node_Str"");
    lookup.put(BlockPlanks.EnumType.DARK_OAK,""String_Node_Str"");
    for (    Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
      boolean colorize=false;
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.SAPLING.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setStateSensitive(true).setBiomeColorize(colorize).addComparable(BlockSapling.TYPE,entrySet.getKey()));
    }
    lookup.clear();
    lookup.put(BlockTallGrass.EnumType.DEAD_BUSH,""String_Node_Str"");
    lookup.put(BlockTallGrass.EnumType.GRASS,""String_Node_Str"");
    lookup.put(BlockTallGrass.EnumType.FERN,""String_Node_Str"");
    for (    Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
      boolean colorize=entrySet.getKey() == BlockTallGrass.EnumType.DEAD_BUSH ? false : true;
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setStateSensitive(true).setBiomeColorize(colorize).addComparable(BlockTallGrass.TYPE,entrySet.getKey()));
    }
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.YELLOW_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBiomeColorize(false));
    lookup.clear();
    lookup.put(BlockFlower.EnumFlowerType.ALLIUM,""String_Node_Str"");
    lookup.put(BlockFlower.EnumFlowerType.BLUE_ORCHID,""String_Node_Str"");
    lookup.put(BlockFlower.EnumFlowerType.HOUSTONIA,""String_Node_Str"");
    lookup.put(BlockFlower.EnumFlowerType.ORANGE_TULIP,""String_Node_Str"");
    lookup.put(BlockFlower.EnumFlowerType.OXEYE_DAISY,""String_Node_Str"");
    lookup.put(BlockFlower.EnumFlowerType.PINK_TULIP,""String_Node_Str"");
    lookup.put(BlockFlower.EnumFlowerType.POPPY,""String_Node_Str"");
    lookup.put(BlockFlower.EnumFlowerType.RED_TULIP,""String_Node_Str"");
    lookup.put(BlockFlower.EnumFlowerType.WHITE_TULIP,""String_Node_Str"");
    for (    Map.Entry<Comparable,String> entrySet : lookup.entrySet()) {
      boolean colorize=false;
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.RED_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(entrySet.getValue())).setStateSensitive(true).setBiomeColorize(colorize).addComparable(Blocks.RED_FLOWER.getTypeProperty(),entrySet.getKey()));
    }
    for (int i=0; i < 8; i++) {
      int temp=i;
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.WHEAT.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + temp)).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,i));
    }
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.REEDS.getDefaultState(),-1).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBaseMaterial(Material.SAND).setBiomeColorize(true).setRandomizeCoord(false).setLooseness(0.3F));
    HashMap<Integer,Integer> lookupStateToModel=new HashMap<>();
    lookupStateToModel.put(0,0);
    lookupStateToModel.put(1,0);
    lookupStateToModel.put(2,1);
    lookupStateToModel.put(3,1);
    lookupStateToModel.put(4,2);
    lookupStateToModel.put(5,2);
    lookupStateToModel.put(6,2);
    lookupStateToModel.put(7,3);
    for (    Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.CARROTS.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,entrySet.getKey()));
    }
    for (    Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.POTATOES.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockCrops.AGE,entrySet.getKey()));
    }
    for (int i=0; i < 4; i++) {
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.BEETROOTS.getDefaultState()).setBaseMaterial(Material.GROUND).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + i)).setRandomizeCoord(false).setStateSensitive(true).addComparable(BlockBeetroot.BEETROOT_AGE,i));
    }
    List<TextureAtlasSprite> sprites=new ArrayList<>();
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.GRASS));
    sprites=new ArrayList<>();
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.ROSE));
    sprites=new ArrayList<>();
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(true).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.FERN));
    sprites=new ArrayList<>();
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.PAEONIA));
    sprites=new ArrayList<>();
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites).setBiomeColorize(false).setStateSensitive(true).addComparable(BlockDoublePlant.VARIANT,BlockDoublePlant.EnumPlantType.SYRINGA));
  }
 else {
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")));
    if (true)     return;
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.YELLOW_FLOWER.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBiomeColorize(false));
    List<TextureAtlasSprite> sprites=new ArrayList<>();
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    sprites.add(getMeshAndSetupSprite(""String_Node_Str""));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.DOUBLE_PLANT.getDefaultState(),2).setSprites(sprites));
    listFoliageReplacers.add(new FoliageReplacerCross(Blocks.REEDS.getDefaultState(),-1).setSprite(getMeshAndSetupSprite(""String_Node_Str"")).setBaseMaterial(Material.SAND).setBiomeColorize(true).setRandomizeCoord(false));
    for (int i=0; i < 8; i++) {
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + i)).setRandomizeCoord(false));
    }
    for (int i=0; i < 4; i++) {
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + i)).setRandomizeCoord(false));
    }
    HashMap<Integer,Integer> lookupStateToModel=new HashMap<>();
    lookupStateToModel.put(0,0);
    lookupStateToModel.put(1,0);
    lookupStateToModel.put(2,1);
    lookupStateToModel.put(3,1);
    lookupStateToModel.put(4,2);
    lookupStateToModel.put(5,2);
    lookupStateToModel.put(6,2);
    lookupStateToModel.put(7,3);
    for (    Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())));
    }
    for (    Map.Entry<Integer,Integer> entrySet : lookupStateToModel.entrySet()) {
      listFoliageReplacers.add(new FoliageReplacerCross(Blocks.TALLGRASS.getDefaultState()).setSprite(getMeshAndSetupSprite(""String_Node_Str"" + entrySet.getValue())));
    }
  }
}",0.5045335482571025
81826,"public static void modelBakeEvent(ModelBakeEvent event){
  boolean replaceVanillaModels=ConfigCoroAI.foliageShaders;
  boolean textureFix=false;
  if (replaceVanillaModels) {
    Map<ModelResourceLocation,IModel> stateModels=ReflectionHelper.getPrivateValue(ModelLoader.class,event.getModelLoader(),""String_Node_Str"");
    IBakedModel blank=event.getModelRegistry().getObject(new ModelResourceLocation(""String_Node_Str"",""String_Node_Str""));
    for (    ModelResourceLocation res : event.getModelRegistry().getKeys()) {
      IBakedModel bakedModel=event.getModelRegistry().getObject(res);
      IModel model=stateModels.get(res);
      Set<ResourceLocation> textures=Sets.newHashSet(model.getTextures());
      escape:       if (!res.getVariant().equals(""String_Node_Str"")) {
        for (        FoliageReplacerBase replacer : listFoliageReplacers) {
          for (          TextureAtlasSprite sprite : replacer.sprites) {
            for (            ResourceLocation res2 : textures) {
              if (res2.toString().equals(sprite.getIconName())) {
                if (!res.toString().contains(""String_Node_Str"")) {
                  System.out.println(""String_Node_Str"" + res + ""String_Node_Str"");
                  if (textureFix) {
                    if (blank.getOverrides() instanceof AnimationItemOverrideList) {
                      AnimationItemOverrideList obj1=(AnimationItemOverrideList)blank.getOverrides();
                      IModel model1=ReflectionHelper.getPrivateValue(AnimationItemOverrideList.class,obj1,""String_Node_Str"");
                      if (vanillaModelWrapperClass.isAssignableFrom(model1.getClass())) {
                        ModelBlock model2=(ModelBlock)ReflectionHelper.getPrivateValue(vanillaModelWrapperClass,model1,""String_Node_Str"");
                        String tex=res2.toString().split(""String_Node_Str"")[1];
                        model2.textures.put(""String_Node_Str"",tex);
                      }
                      if (multipartModelClass.isAssignableFrom(bakedModel.getClass())) {
                      }
                    }
                  }
                  event.getModelRegistry().putObject(res,blank);
                  break escape;
                }
              }
            }
          }
        }
      }
    }
  }
}","public static void modelBakeEvent(ModelBakeEvent event){
  boolean replaceVanillaModels=ConfigCoroAI.foliageShaders;
  boolean textureFix=false;
  if (replaceVanillaModels) {
    Map<ModelResourceLocation,IModel> stateModels=ReflectionHelper.getPrivateValue(ModelLoader.class,event.getModelLoader(),""String_Node_Str"");
    IBakedModel blank=event.getModelRegistry().getObject(new ModelResourceLocation(""String_Node_Str"",""String_Node_Str""));
    for (    ModelResourceLocation res : event.getModelRegistry().getKeys()) {
      IBakedModel bakedModel=event.getModelRegistry().getObject(res);
      IModel model=stateModels.get(res);
      Set<ResourceLocation> textures=Sets.newHashSet(model.getTextures());
      escape:       if (!res.getVariant().equals(""String_Node_Str"")) {
        for (        FoliageReplacerBase replacer : listFoliageReplacers) {
          for (          TextureAtlasSprite sprite : replacer.sprites) {
            for (            ResourceLocation res2 : textures) {
              if (res2.toString().equals(sprite.getIconName())) {
                if (!res.toString().contains(""String_Node_Str"")) {
                  System.out.println(""String_Node_Str"" + res + ""String_Node_Str"");
                  if (textureFix) {
                    if (blank.getOverrides() instanceof AnimationItemOverrideList) {
                      AnimationItemOverrideList obj1=(AnimationItemOverrideList)blank.getOverrides();
                      IModel model1=ReflectionHelper.getPrivateValue(AnimationItemOverrideList.class,obj1,""String_Node_Str"");
                      if (vanillaModelWrapperClass.isAssignableFrom(model1.getClass())) {
                        ModelBlock model2=(ModelBlock)ReflectionHelper.getPrivateValue(vanillaModelWrapperClass,model1,""String_Node_Str"");
                        String tex=res2.toString().split(""String_Node_Str"")[1];
                        model2.textures.put(""String_Node_Str"",tex);
                      }
                    }
                  }
                  event.getModelRegistry().putObject(res,blank);
                  break escape;
                }
              }
            }
          }
        }
      }
    }
  }
}",0.9747936649565024
81827,"@Override public boolean validFoliageSpot(World world,BlockPos pos){
  if (world.getBlockState(pos).getMaterial() == baseMaterial) {
    if (stateSensitive) {
      IBlockState stateScan=world.getBlockState(pos.up());
      if (stateScan.getBlock() == state.getBlock()) {
        boolean fail=false;
        for (        Map.Entry<IProperty,Comparable> entrySet : lookupPropertiesToComparable.entrySet()) {
          if (stateScan.getValue(entrySet.getKey()) != entrySet.getValue()) {
            fail=true;
            break;
          }
        }
        if (fail) {
          return false;
        }
        return true;
      }
 else {
        return false;
      }
    }
 else {
      return world.getBlockState(pos.up()).getBlock() == state.getBlock();
    }
  }
 else {
    return false;
  }
}","@Override public boolean validFoliageSpot(World world,BlockPos pos){
  if (baseMaterial == null || world.getBlockState(pos).getMaterial() == baseMaterial) {
    if (stateSensitive) {
      IBlockState stateScan=world.getBlockState(pos.up());
      if (stateScan.getBlock() == state.getBlock()) {
        boolean fail=false;
        for (        Map.Entry<IProperty,Comparable> entrySet : lookupPropertiesToComparable.entrySet()) {
          if (stateScan.getValue(entrySet.getKey()) != entrySet.getValue()) {
            fail=true;
            break;
          }
        }
        if (fail) {
          return false;
        }
        return true;
      }
 else {
        return false;
      }
    }
 else {
      return world.getBlockState(pos.up()).getBlock() == state.getBlock();
    }
  }
 else {
    return false;
  }
}",0.9852216748768472
81828,"@Override public void addForPos(World world,BlockPos pos){
  int height=expectedHeight;
  if (height == -1) {
    Block block=state.getBlock();
    height=0;
    while (block == state.getBlock()) {
      height++;
      block=world.getBlockState(pos.up(height + 1)).getBlock();
    }
  }
  FoliageEnhancerShader.addForPos(this,height,pos,randomizeCoord,biomeColorize);
}","@Override public void addForPos(World world,BlockPos pos){
  int height=expectedHeight;
  if (height == -1) {
    Block block=state.getBlock();
    height=0;
    while (block == state.getBlock()) {
      height++;
      block=world.getBlockState(pos.up(height + 1)).getBlock();
    }
    height++;
  }
  FoliageEnhancerShader.addForPos(this,height,pos,randomizeCoord,biomeColorize);
}",0.9814323607427056
81829,"public static void init(){
  listFoliageReplacers.add(new FoliageReplacer1TallPlant(Blocks.TALLGRASS.getDefaultState(),ParticleRegistry.tallgrass));
}","public static void init(){
  listFoliageReplacers.add(new FoliageReplacer1TallPlant(Blocks.TALLGRASS.getDefaultState(),ParticleRegistry.tallgrass));
  listFoliageReplacers.add(new FoliageReplacerMultiTallPlant(Blocks.DOUBLE_PLANT.getDefaultState(),ParticleRegistry.double_plant_bottom));
}",0.683371298405467
81830,"public static void profileForFoliageShader(){
  World world=Minecraft.getMinecraft().world;
  Entity entityIn=Minecraft.getMinecraft().player;
  BlockPos pos=entityIn.getPosition();
  boolean add=true;
  boolean trim=true;
  int radialRange=FoliageRenderer.radialRange;
  int xzRange=radialRange;
  int yRange=radialRange;
  Random rand=new Random();
  if (trim) {
    Iterator<Map.Entry<BlockPos,FoliageLocationData>> it=ExtendedRenderer.foliageRenderer.lookupPosToFoliage.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<BlockPos,FoliageLocationData> entry=it.next();
      if (!entry.getValue().foliageReplacer.validFoliageSpot(world,entry.getKey().down())) {
        it.remove();
        for (        Foliage entry2 : entry.getValue().listFoliage) {
          markMeshDirty(entry2.particleTexture,true);
          ExtendedRenderer.foliageRenderer.getFoliageForSprite(entry2.particleTexture).remove(entry2);
        }
      }
 else       if (entityIn.getDistanceSq(entry.getKey()) > radialRange * radialRange) {
        it.remove();
        for (        Foliage entry2 : entry.getValue().listFoliage) {
          markMeshDirty(entry2.particleTexture,true);
          ExtendedRenderer.foliageRenderer.getFoliageForSprite(entry2.particleTexture).remove(entry2);
        }
      }
    }
  }
  if (add) {
    for (int x=-xzRange; x <= xzRange; x++) {
      for (int z=-xzRange; z <= xzRange; z++) {
        for (int y=-yRange; y <= yRange; y++) {
          BlockPos posScan=pos.add(x,y,z);
          if (!ExtendedRenderer.foliageRenderer.lookupPosToFoliage.containsKey(posScan)) {
            if (entityIn.getDistanceSq(posScan) <= radialRange * radialRange) {
              for (              FoliageReplacerBase replacer : listFoliageReplacers) {
                if (replacer.validFoliageSpot(entityIn.world,posScan.down())) {
                  replacer.addForPos(entityIn.world,posScan);
                  break;
                }
              }
            }
          }
 else {
          }
        }
      }
    }
  }
  Foliage.interpPosXThread=entityIn.posX;
  Foliage.interpPosYThread=entityIn.posY;
  Foliage.interpPosZThread=entityIn.posZ;
  for (  Map.Entry<TextureAtlasSprite,List<Foliage>> entry : ExtendedRenderer.foliageRenderer.foliage.entrySet()) {
    InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(entry.getKey());
    if (mesh.dirtyVBO2Flag) {
      updateVBO2Threaded(entry.getKey());
    }
  }
}","public static void profileForFoliageShader(){
  World world=Minecraft.getMinecraft().world;
  Entity entityIn=Minecraft.getMinecraft().player;
  BlockPos pos=entityIn.getPosition();
  boolean add=true;
  boolean trim=true;
  int radialRange=FoliageRenderer.radialRange;
  int xzRange=radialRange;
  int yRange=radialRange;
  Random rand=new Random();
  if (trim) {
    Iterator<Map.Entry<BlockPos,FoliageLocationData>> it=ExtendedRenderer.foliageRenderer.lookupPosToFoliage.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<BlockPos,FoliageLocationData> entry=it.next();
      if (!entry.getValue().foliageReplacer.validFoliageSpot(world,entry.getKey().down())) {
        it.remove();
        for (        Foliage entry2 : entry.getValue().listFoliage) {
          markMeshDirty(entry2.particleTexture,true);
          ExtendedRenderer.foliageRenderer.getFoliageForSprite(entry2.particleTexture).remove(entry2);
        }
      }
 else       if (entityIn.getDistanceSq(entry.getKey()) > radialRange * radialRange) {
        it.remove();
        for (        Foliage entry2 : entry.getValue().listFoliage) {
          markMeshDirty(entry2.particleTexture,true);
          ExtendedRenderer.foliageRenderer.getFoliageForSprite(entry2.particleTexture).remove(entry2);
        }
      }
    }
  }
  if (add) {
    for (int x=-xzRange; x <= xzRange; x++) {
      for (int z=-xzRange; z <= xzRange; z++) {
        for (int y=-yRange; y <= yRange; y++) {
          BlockPos posScan=pos.add(x,y,z);
          if (!ExtendedRenderer.foliageRenderer.lookupPosToFoliage.containsKey(posScan)) {
            if (entityIn.getDistanceSq(posScan) <= radialRange * radialRange) {
              for (              FoliageReplacerBase replacer : listFoliageReplacers) {
                if (replacer.validFoliageSpot(entityIn.world,posScan.down())) {
                  replacer.addForPos(entityIn.world,posScan);
                  break;
                }
              }
            }
          }
 else {
          }
        }
      }
    }
  }
  for (  Map.Entry<TextureAtlasSprite,List<Foliage>> entry : ExtendedRenderer.foliageRenderer.foliage.entrySet()) {
    InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(entry.getKey());
    mesh.interpPosXThread=entityIn.posX;
    mesh.interpPosYThread=entityIn.posY;
    mesh.interpPosZThread=entityIn.posZ;
    if (mesh.dirtyVBO2Flag) {
      updateVBO2Threaded(entry.getKey());
    }
  }
}",0.9146715776550032
81831,"public FoliageReplacerMultiTallPlant(IBlockState state){
  this.state=state;
}","public FoliageReplacerMultiTallPlant(IBlockState state,TextureAtlasSprite sprite){
  this.state=state;
  this.sprite=sprite;
}",0.7647058823529411
81832,"@Override public void addForPos(World world,BlockPos pos){
}","@Override public void addForPos(World world,BlockPos pos){
  ExtendedRenderer.foliageRenderer.addForPos(this,sprite,pos);
}",0.6557377049180327
81833,"public void tickParticlePrecipitation(){
  if (ConfigParticle.Particle_RainSnow) {
    EntityPlayer entP=FMLClientHandler.instance().getClient().player;
    if (entP.posY >= StormObject.static_YPos_layer0)     return;
    WeatherManagerClient weatherMan=ClientTickHandler.weatherManager;
    if (weatherMan == null)     return;
    WindManager windMan=weatherMan.getWindManager();
    if (windMan == null)     return;
    float curPrecipVal=getRainStrengthAndControlVisuals(entP);
    float maxPrecip=0.5F;
    int precipitationHeight=entP.world.getPrecipitationHeight(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ))).getY();
    Biome biomegenbase=entP.world.getBiome(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ)));
    World world=entP.world;
    Random rand=entP.world.rand;
    double particleAmp=1F;
    if (RotatingParticleManager.useShaders) {
      particleAmp=ConfigMisc.shaderParticleRateAmplifier;
    }
 else {
    }
    boolean particleTest=true;
    if (particleTest) {
      if (testParticle == null || testParticle.isExpired) {
        BlockPos pos=new BlockPos(entP);
        if (canPrecipitateAt(world,pos)) {
          ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,0,5,0,0D,0D,0D,ParticleRegistry.test_texture);
          rain.setSlantParticleToWind(false);
          rain.setExtraParticlesBaseAmount(1);
          rain.setSeverityOfRainRate(0);
          rain.setDontRenderUnderTopmostBlock(false);
          boolean upward=rand.nextBoolean();
          rain.windWeight=999999F;
          rain.setFacePlayer(false);
          rain.setScale(90F + (rand.nextFloat() * 3F));
          rain.setScale(5F);
          rain.setMaxAge(60);
          rain.setGravity(0.0F);
          rain.setTicksFadeInMax(20);
          rain.setAlphaF(0);
          rain.setTicksFadeOutMax(20);
          rain.rotationYaw=0;
          rain.rotationPitch=90;
          rain.setMotionY(-0D);
          rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
          rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
          rain.spawnAsWeatherEffect();
          rain.weatherEffect=false;
          testParticle=rain;
        }
      }
      if (testParticle != null) {
      }
    }
    boolean doFish=true;
    if (doFish) {
      int spawnTryCur=0;
      int spawnTryMax=200;
      int range=60;
      for (; spawnTryCur < spawnTryMax; spawnTryCur++) {
        BlockPos pos=new BlockPos(entP.getPosition().add(rand.nextInt(range) - rand.nextInt(range),rand.nextInt(range) - rand.nextInt(range),rand.nextInt(range) - rand.nextInt(range)));
        IBlockState state=world.getBlockState(pos);
        if (state.getMaterial() == Material.WATER) {
          ParticleFish fish=new ParticleFish(entP.world,pos.getX() + 0.5F,pos.getY() + 0.5F,pos.getZ() + 0.5F,0D,0D,0D,ParticleRegistry.listFish.get(rand.nextInt(8) + 1));
          fish.setTicksFadeInMax(20);
          fish.setAlphaF(0);
          fish.setTicksFadeOutMax(20);
          fish.setMaxAge(20 * 10);
          fish.setScale(6F);
          fish.setDontRenderUnderTopmostBlock(false);
          fish.setGravity(0);
          fish.isTransparent=false;
          fish.motionY=0;
          fish.rotationYaw=rand.nextInt(360);
          fish.rotationPitch=rand.nextInt(45);
          fish.setRBGColorF(0.6F,0.6F,1F);
          ExtendedRenderer.rotEffRenderer.addEffect(fish);
        }
      }
    }
    boolean doGrass=false;
    if (doGrass) {
      int spawnAreaSize=80;
      int spawnAmount=1;
      for (int i=0; i < spawnAmount; i++) {
        BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY,entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
        pos=world.getPrecipitationHeight(pos);
        IBlockState state=world.getBlockState(pos.add(0,-1,0));
        if (state.getMaterial() == Material.GRASS) {
          for (int ii=0; ii < 8; ii++) {
            ParticleTallGrass rain=new ParticleTallGrass(entP.world,pos.getX(),pos.getY() + 0.5D - 0.2D + ii,pos.getZ(),0D,0D,0D,ParticleRegistry.tallgrass);
            rain.setCanCollide(true);
            int color=8763015;
            color=9551193;
            rain.particleRed=(float)(color >> 16 & 255) / 255.0F;
            rain.particleGreen=(float)(color >> 8 & 255) / 255.0F;
            rain.particleBlue=(float)(color & 255) / 255.0F;
            rain.isTransparent=false;
            rain.windWeight=99999F;
            rain.setFacePlayer(false);
            rain.setScale(3F + (rand.nextFloat() * 3F));
            rain.setScale(10F);
            rain.setMaxAge(240);
            rain.setGravity(0.0F);
            rain.setTicksFadeInMax(4);
            rain.setAlphaF(0);
            rain.setTicksFadeOutMax(4);
            rain.renderOrder=2;
            rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
            rain.rotationPitch=0;
            rain.setMotionY(0D);
            rain.setMotionX(0);
            rain.setMotionZ(0);
            ExtendedRenderer.rotEffRenderer.addEffect(rain);
            ClientTickHandler.weatherManager.addWeatheredParticle(rain);
          }
        }
      }
    }
    if (biomegenbase != null && (biomegenbase.canRain() || biomegenbase.getEnableSnow())) {
      float temperature=biomegenbase.getFloatTemperature(new BlockPos(MathHelper.floor(entP.posX),MathHelper.floor(entP.posY),MathHelper.floor(entP.posZ)));
      double d3;
      float f10;
      curPrecipVal=Math.min(maxPrecip,Math.abs(curPrecipVal));
      curPrecipVal*=1F;
      if (curPrecipVal > 0) {
        int spawnCount;
        int spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate* particleAmp);
        int safetyCutout=100;
        if (entP.world.getBiomeProvider().getTemperatureAtHeight(temperature,precipitationHeight) >= 0.15F) {
          spawnCount=0;
          int spawnAreaSize=20;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.rain_white);
                rain.setKillWhenUnderTopmostBlock(true);
                rain.setCanCollide(false);
                rain.killWhenUnderCameraAtLeast=5;
                rain.setTicksFadeOutMaxOnDeath(5);
                rain.setDontRenderUnderTopmostBlock(true);
                rain.setExtraParticlesBaseAmount(15);
                rain.fastLight=true;
                rain.setSlantParticleToWind(true);
                rain.windWeight=1F;
                if (!RotatingParticleManager.useShaders) {
                  rain.setFacePlayer(true);
                  rain.setSlantParticleToWind(true);
                }
 else {
                  rain.setFacePlayer(false);
                  rain.extraYRotation=rain.getWorld().rand.nextInt(360) - 180F;
                }
                rain.setScale(2F);
                rain.isTransparent=true;
                rain.setGravity(2.5F);
                rain.setMaxAge(50);
                rain.setTicksFadeInMax(5);
                rain.setAlphaF(0);
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.setMotionY(-0.5D);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
          if (world.getTotalWorldTime() % 60 == 0) {
            System.out.println(curPrecipVal);
          }
          boolean groundSplash=true;
          boolean downfall=true;
          spawnAreaSize=40;
          if (curPrecipVal > 0.15) {
            for (int i=0; groundSplash == true && i < 30F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate* particleAmp* 4F; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(15),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              pos=world.getPrecipitationHeight(pos).add(0,1,0);
              if (pos.getDistance(MathHelper.floor(entP.posX),MathHelper.floor(entP.posY),MathHelper.floor(entP.posZ)) > spawnAreaSize / 2)               continue;
              if (canPrecipitateAt(world,pos)) {
                ParticleTexFX rain=new ParticleTexFX(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.cloud256_6);
                rain.setKillWhenUnderTopmostBlock(true);
                rain.setCanCollide(false);
                rain.killWhenUnderCameraAtLeast=5;
                boolean upward=rand.nextBoolean();
                rain.windWeight=20F;
                rain.setFacePlayer(upward);
                rain.setScale(3F + (rand.nextFloat() * 3F));
                rain.setMaxAge(15);
                rain.setGravity(-0.0F);
                rain.setTicksFadeInMax(0);
                rain.setAlphaF(0);
                rain.setTicksFadeOutMax(4);
                rain.renderOrder=2;
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.rotationPitch=90;
                rain.setMotionY(0D);
                rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
                rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
              }
            }
          }
          spawnAreaSize=20;
          if (curPrecipVal > 0.3) {
            for (int i=0; downfall == true && i < 2F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (entP.getDistanceSq(pos) < 10D * 10D)               continue;
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.downfall3);
                rain.setCanCollide(false);
                rain.killWhenUnderCameraAtLeast=5;
                rain.setKillWhenUnderTopmostBlock(true);
                rain.setTicksFadeOutMaxOnDeath(5);
                rain.noExtraParticles=true;
                boolean upward=rand.nextBoolean();
                rain.windWeight=8F;
                rain.setFacePlayer(true);
                rain.setFacePlayer(false);
                rain.facePlayerYaw=true;
                rain.setScale(90F + (rand.nextFloat() * 3F));
                rain.setMaxAge(60);
                rain.setGravity(0.35F);
                rain.setTicksFadeInMax(20);
                rain.setAlphaF(0);
                rain.setTicksFadeOutMax(20);
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.rotationPitch=90;
                rain.rotationPitch=0;
                rain.setMotionY(-0.3D);
                rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
                rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
              }
            }
          }
        }
 else {
          spawnCount=0;
          spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate* particleAmp);
          int spawnAreaSize=50;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender snow=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.snow);
                snow.setCanCollide(false);
                snow.setKillWhenUnderTopmostBlock(true);
                snow.setTicksFadeOutMaxOnDeath(5);
                snow.setDontRenderUnderTopmostBlock(true);
                snow.setExtraParticlesBaseAmount(10);
                snow.setMotionY(-0.1D);
                snow.setScale(1.3F);
                snow.setGravity(0.1F);
                snow.windWeight=0.2F;
                snow.setMaxAge(40);
                snow.setFacePlayer(false);
                snow.setTicksFadeInMax(5);
                snow.setAlphaF(0);
                snow.setTicksFadeOutMax(5);
                snow.rotationYaw=snow.getWorld().rand.nextInt(360) - 180F;
                snow.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(snow);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
}","public void tickParticlePrecipitation(){
  if (ConfigParticle.Particle_RainSnow) {
    EntityPlayer entP=FMLClientHandler.instance().getClient().player;
    if (entP.posY >= StormObject.static_YPos_layer0)     return;
    WeatherManagerClient weatherMan=ClientTickHandler.weatherManager;
    if (weatherMan == null)     return;
    WindManager windMan=weatherMan.getWindManager();
    if (windMan == null)     return;
    float curPrecipVal=getRainStrengthAndControlVisuals(entP);
    float maxPrecip=0.5F;
    int precipitationHeight=entP.world.getPrecipitationHeight(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ))).getY();
    Biome biomegenbase=entP.world.getBiome(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ)));
    World world=entP.world;
    Random rand=entP.world.rand;
    double particleAmp=1F;
    if (RotatingParticleManager.useShaders) {
      particleAmp=ConfigMisc.shaderParticleRateAmplifier;
    }
 else {
    }
    boolean particleTest=true;
    if (particleTest) {
      if (testParticle == null || testParticle.isExpired) {
        BlockPos pos=new BlockPos(entP);
        if (canPrecipitateAt(world,pos)) {
          ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,15608.5F,70.5F,235.5F,0D,0D,0D,ParticleRegistry.test_texture);
          rain.setSlantParticleToWind(false);
          rain.setExtraParticlesBaseAmount(1);
          rain.setSeverityOfRainRate(0);
          rain.setDontRenderUnderTopmostBlock(false);
          boolean upward=rand.nextBoolean();
          rain.windWeight=999999F;
          rain.setFacePlayer(false);
          rain.setScale(90F + (rand.nextFloat() * 3F));
          rain.setScale(5F);
          rain.setMaxAge(60);
          rain.setGravity(0.0F);
          rain.setTicksFadeInMax(20);
          rain.setAlphaF(0);
          rain.setTicksFadeOutMax(20);
          rain.rotationYaw=0;
          rain.rotationPitch=90;
          rain.setMotionY(-0D);
          rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
          rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
          rain.spawnAsWeatherEffect();
          rain.weatherEffect=false;
          testParticle=rain;
        }
      }
      if (testParticle != null) {
        testParticle.rotationPitch=0;
        testParticle.rotationYaw=45;
        testParticle.posX=15608.2F;
        testParticle.posY=70.5F;
        testParticle.posZ=235.8F;
      }
    }
    boolean doFish=true;
    if (doFish) {
      int spawnTryCur=0;
      int spawnTryMax=200;
      int range=60;
      for (; spawnTryCur < spawnTryMax; spawnTryCur++) {
        BlockPos pos=new BlockPos(entP.getPosition().add(rand.nextInt(range) - rand.nextInt(range),rand.nextInt(range) - rand.nextInt(range),rand.nextInt(range) - rand.nextInt(range)));
        IBlockState state=world.getBlockState(pos);
        if (state.getMaterial() == Material.WATER) {
          ParticleFish fish=new ParticleFish(entP.world,pos.getX() + 0.5F,pos.getY() + 0.5F,pos.getZ() + 0.5F,0D,0D,0D,ParticleRegistry.listFish.get(rand.nextInt(8) + 1));
          fish.setTicksFadeInMax(20);
          fish.setAlphaF(0);
          fish.setTicksFadeOutMax(20);
          fish.setMaxAge(20 * 10);
          fish.setScale(6F);
          fish.setDontRenderUnderTopmostBlock(false);
          fish.setGravity(0);
          fish.isTransparent=false;
          fish.motionY=0;
          fish.rotationYaw=rand.nextInt(360);
          fish.rotationPitch=rand.nextInt(45);
          fish.setRBGColorF(0.6F,0.6F,1F);
          ExtendedRenderer.rotEffRenderer.addEffect(fish);
        }
      }
    }
    boolean doGrass=false;
    if (doGrass) {
      int spawnAreaSize=80;
      int spawnAmount=1;
      for (int i=0; i < spawnAmount; i++) {
        BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY,entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
        pos=world.getPrecipitationHeight(pos);
        IBlockState state=world.getBlockState(pos.add(0,-1,0));
        if (state.getMaterial() == Material.GRASS) {
          for (int ii=0; ii < 8; ii++) {
            ParticleTallGrass rain=new ParticleTallGrass(entP.world,pos.getX(),pos.getY() + 0.5D - 0.2D + ii,pos.getZ(),0D,0D,0D,ParticleRegistry.tallgrass);
            rain.setCanCollide(true);
            int color=8763015;
            color=9551193;
            rain.particleRed=(float)(color >> 16 & 255) / 255.0F;
            rain.particleGreen=(float)(color >> 8 & 255) / 255.0F;
            rain.particleBlue=(float)(color & 255) / 255.0F;
            rain.isTransparent=false;
            rain.windWeight=99999F;
            rain.setFacePlayer(false);
            rain.setScale(3F + (rand.nextFloat() * 3F));
            rain.setScale(10F);
            rain.setMaxAge(240);
            rain.setGravity(0.0F);
            rain.setTicksFadeInMax(4);
            rain.setAlphaF(0);
            rain.setTicksFadeOutMax(4);
            rain.renderOrder=2;
            rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
            rain.rotationPitch=0;
            rain.setMotionY(0D);
            rain.setMotionX(0);
            rain.setMotionZ(0);
            ExtendedRenderer.rotEffRenderer.addEffect(rain);
            ClientTickHandler.weatherManager.addWeatheredParticle(rain);
          }
        }
      }
    }
    if (biomegenbase != null && (biomegenbase.canRain() || biomegenbase.getEnableSnow())) {
      float temperature=biomegenbase.getFloatTemperature(new BlockPos(MathHelper.floor(entP.posX),MathHelper.floor(entP.posY),MathHelper.floor(entP.posZ)));
      double d3;
      float f10;
      curPrecipVal=Math.min(maxPrecip,Math.abs(curPrecipVal));
      curPrecipVal*=1F;
      if (curPrecipVal > 0) {
        int spawnCount;
        int spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate* particleAmp);
        int safetyCutout=100;
        if (entP.world.getBiomeProvider().getTemperatureAtHeight(temperature,precipitationHeight) >= 0.15F) {
          spawnCount=0;
          int spawnAreaSize=20;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.rain_white);
                rain.setKillWhenUnderTopmostBlock(true);
                rain.setCanCollide(false);
                rain.killWhenUnderCameraAtLeast=5;
                rain.setTicksFadeOutMaxOnDeath(5);
                rain.setDontRenderUnderTopmostBlock(true);
                rain.setExtraParticlesBaseAmount(15);
                rain.fastLight=true;
                rain.setSlantParticleToWind(true);
                rain.windWeight=1F;
                if (!RotatingParticleManager.useShaders) {
                  rain.setFacePlayer(true);
                  rain.setSlantParticleToWind(true);
                }
 else {
                  rain.setFacePlayer(false);
                  rain.extraYRotation=rain.getWorld().rand.nextInt(360) - 180F;
                }
                rain.setScale(2F);
                rain.isTransparent=true;
                rain.setGravity(2.5F);
                rain.setMaxAge(50);
                rain.setTicksFadeInMax(5);
                rain.setAlphaF(0);
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.setMotionY(-0.5D);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
          if (world.getTotalWorldTime() % 60 == 0) {
            System.out.println(curPrecipVal);
          }
          boolean groundSplash=true;
          boolean downfall=true;
          spawnAreaSize=40;
          if (curPrecipVal > 0.15) {
            for (int i=0; groundSplash == true && i < 30F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate* particleAmp* 4F; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(15),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              pos=world.getPrecipitationHeight(pos).add(0,1,0);
              if (pos.getDistance(MathHelper.floor(entP.posX),MathHelper.floor(entP.posY),MathHelper.floor(entP.posZ)) > spawnAreaSize / 2)               continue;
              if (canPrecipitateAt(world,pos)) {
                ParticleTexFX rain=new ParticleTexFX(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.cloud256_6);
                rain.setKillWhenUnderTopmostBlock(true);
                rain.setCanCollide(false);
                rain.killWhenUnderCameraAtLeast=5;
                boolean upward=rand.nextBoolean();
                rain.windWeight=20F;
                rain.setFacePlayer(upward);
                rain.setScale(3F + (rand.nextFloat() * 3F));
                rain.setMaxAge(15);
                rain.setGravity(-0.0F);
                rain.setTicksFadeInMax(0);
                rain.setAlphaF(0);
                rain.setTicksFadeOutMax(4);
                rain.renderOrder=2;
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.rotationPitch=90;
                rain.setMotionY(0D);
                rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
                rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
              }
            }
          }
          spawnAreaSize=20;
          if (curPrecipVal > 0.3) {
            for (int i=0; downfall == true && i < 2F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (entP.getDistanceSq(pos) < 10D * 10D)               continue;
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.downfall3);
                rain.setCanCollide(false);
                rain.killWhenUnderCameraAtLeast=5;
                rain.setKillWhenUnderTopmostBlock(true);
                rain.setTicksFadeOutMaxOnDeath(5);
                rain.noExtraParticles=true;
                boolean upward=rand.nextBoolean();
                rain.windWeight=8F;
                rain.setFacePlayer(true);
                rain.setFacePlayer(false);
                rain.facePlayerYaw=true;
                rain.setScale(90F + (rand.nextFloat() * 3F));
                rain.setMaxAge(60);
                rain.setGravity(0.35F);
                rain.setTicksFadeInMax(20);
                rain.setAlphaF(0);
                rain.setTicksFadeOutMax(20);
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.rotationPitch=90;
                rain.rotationPitch=0;
                rain.setMotionY(-0.3D);
                rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
                rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
              }
            }
          }
        }
 else {
          spawnCount=0;
          spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate* particleAmp);
          int spawnAreaSize=50;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender snow=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.snow);
                snow.setCanCollide(false);
                snow.setKillWhenUnderTopmostBlock(true);
                snow.setTicksFadeOutMaxOnDeath(5);
                snow.setDontRenderUnderTopmostBlock(true);
                snow.setExtraParticlesBaseAmount(10);
                snow.setMotionY(-0.1D);
                snow.setScale(1.3F);
                snow.setGravity(0.1F);
                snow.windWeight=0.2F;
                snow.setMaxAge(40);
                snow.setFacePlayer(false);
                snow.setTicksFadeInMax(5);
                snow.setAlphaF(0);
                snow.setTicksFadeOutMax(5);
                snow.rotationYaw=snow.getWorld().rand.nextInt(360) - 180F;
                snow.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(snow);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
}",0.9927039575502984
81834,"public static void updateVBO2Threaded(){
  Minecraft mc=Minecraft.getMinecraft();
  Entity entityIn=mc.getRenderViewEntity();
  float partialTicks=1F;
  Foliage.interpPosXThread=entityIn.posX;
  Foliage.interpPosYThread=entityIn.posY;
  Foliage.interpPosZThread=entityIn.posZ;
  MeshBufferManagerFoliage.setupMeshIfMissing(ParticleRegistry.tallgrass);
  InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(ParticleRegistry.tallgrass);
  mesh.curBufferPosVBO2=0;
  mesh.instanceDataBufferVBO2.clear();
  for (  List<Foliage> listFoliage : ExtendedRenderer.foliageRenderer.lookupPosToFoliage.values()) {
    for (    Foliage foliage : listFoliage) {
      foliage.updateQuaternion(entityIn);
      foliage.renderForShaderVBO2(mesh,ExtendedRenderer.foliageRenderer.transformation,null,entityIn,partialTicks);
    }
  }
  mesh.instanceDataBufferVBO2.limit(mesh.curBufferPosVBO2 * mesh.INSTANCE_SIZE_FLOATS_SELDOM);
}","public static void updateVBO2Threaded(){
  Minecraft mc=Minecraft.getMinecraft();
  Entity entityIn=mc.getRenderViewEntity();
  float partialTicks=1F;
  Foliage.interpPosXThread=entityIn.posX;
  Foliage.interpPosYThread=entityIn.posY;
  Foliage.interpPosZThread=entityIn.posZ;
  InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(ParticleRegistry.tallgrass);
  if (mesh == null)   return;
  mesh.curBufferPosVBO2=0;
  mesh.instanceDataBufferVBO2.clear();
  for (  List<Foliage> listFoliage : ExtendedRenderer.foliageRenderer.lookupPosToFoliage.values()) {
    for (    Foliage foliage : listFoliage) {
      foliage.updateQuaternion(entityIn);
      foliage.renderForShaderVBO2(mesh,ExtendedRenderer.foliageRenderer.transformation,null,entityIn,partialTicks);
    }
  }
  mesh.instanceDataBufferVBO2.limit(mesh.curBufferPosVBO2 * mesh.INSTANCE_SIZE_FLOATS_SELDOM);
}",0.8890128276631344
81835,"/** 
 * Manages transitioning fog densities and color from current vanilla settings to our desired settings, and vice versa
 */
public static void tickSandstorm(){
  if (adjustAmountTargetPocketSandOverride > 0) {
    adjustAmountTargetPocketSandOverride-=0.01F;
  }
  Minecraft mc=Minecraft.getMinecraft();
  EntityPlayer player=mc.player;
  World world=mc.world;
  Vec3 posPlayer=new Vec3(mc.player.posX,0,mc.player.posZ);
  WeatherObjectSandstorm sandstorm=ClientTickHandler.weatherManager.getClosestSandstormByIntensity(posPlayer);
  WindManager windMan=ClientTickHandler.weatherManager.getWindManager();
  float scaleIntensityTarget=0F;
  if (sandstorm != null) {
    if (mc.world.getTotalWorldTime() % 40 == 0) {
      isPlayerOutside=WeatherUtilEntity.isEntityOutside(mc.player);
    }
    scaleIntensityTarget=sandstorm.getSandstormScale();
    List<Vec3> points=sandstorm.getSandstormAsShape();
    boolean inStorm=CoroUtilPhysics.isInConvexShape(posPlayer,points);
    if (inStorm) {
      distToStorm=0;
    }
 else {
      distToStorm=CoroUtilPhysics.getDistanceToShape(posPlayer,points);
    }
  }
 else {
    distToStorm=distToStormThreshold + 10;
  }
  scaleIntensitySmooth=adjVal(scaleIntensitySmooth,scaleIntensityTarget,0.01F);
  float fogColorChangeRate=0.01F;
  float fogDistChangeRate=2F;
  float fogDensityChangeRate=0.01F;
  adjustAmountTarget=1F - (float)((distToStorm) / distToStormThreshold);
  adjustAmountTarget*=2F * scaleIntensitySmooth * (isPlayerOutside ? 1F : 0.5F);
  boolean pocketSandOverride=false;
  if (adjustAmountTarget < adjustAmountTargetPocketSandOverride) {
    adjustAmountTarget=adjustAmountTargetPocketSandOverride;
    pocketSandOverride=true;
  }
  if (adjustAmountTarget < 0F)   adjustAmountTarget=0F;
  if (adjustAmountTarget > 1F)   adjustAmountTarget=1F;
  float sunBrightness=mc.world.getSunBrightness(1F) * 1F;
  if (!pocketSandOverride) {
    if (adjustAmountSmooth < adjustAmountTarget) {
      adjustAmountSmooth=CoroUtilMisc.adjVal(adjustAmountSmooth,adjustAmountTarget,0.003F);
    }
 else {
      adjustAmountSmooth=CoroUtilMisc.adjVal(adjustAmountSmooth,adjustAmountTarget,0.002F);
    }
  }
 else {
    adjustAmountSmooth=CoroUtilMisc.adjVal(adjustAmountSmooth,adjustAmountTarget,0.02F);
  }
  RotatingParticleManager.sandstormFogAmount=adjustAmountSmooth;
  if (mc.world.getTotalWorldTime() % 20 == 0) {
    if (adjustAmountSmooth > 0) {
    }
  }
  if (adjustAmountSmooth > 0) {
    if (needFogState) {
      try {
        Object fogState=ObfuscationReflectionHelper.getPrivateValue(GlStateManager.class,null,""String_Node_Str"");
        Class<?> innerClass=Class.forName(""String_Node_Str"");
        Field fieldDensity=null;
        Field fieldStart=null;
        Field fieldEnd=null;
        try {
          fieldDensity=innerClass.getField(""String_Node_Str"");
          fieldDensity.setAccessible(true);
          fieldStart=innerClass.getField(""String_Node_Str"");
          fieldStart.setAccessible(true);
          fieldEnd=innerClass.getField(""String_Node_Str"");
          fieldEnd.setAccessible(true);
        }
 catch (        Exception e) {
          fieldDensity=innerClass.getField(""String_Node_Str"");
          fieldDensity.setAccessible(true);
          fieldStart=innerClass.getField(""String_Node_Str"");
          fieldStart.setAccessible(true);
          fieldEnd=innerClass.getField(""String_Node_Str"");
          fieldEnd.setAccessible(true);
        }
        stormFogDensity=fieldDensity.getFloat(fogState);
        stormFogStart=fieldStart.getFloat(fogState);
        stormFogEnd=fieldEnd.getFloat(fogState);
        stormFogStartClouds=0;
        stormFogEndClouds=192;
        stormFogStartOrig=stormFogStart;
        stormFogEndOrig=stormFogEnd;
        stormFogStartCloudsOrig=stormFogStartClouds;
        stormFogEndCloudsOrig=stormFogEndClouds;
        stormFogDensityOrig=stormFogDensity;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      needFogState=false;
    }
    stormFogRed=stormFogRedOrig + (-(stormFogRedOrig - (0.7F * sunBrightness)) * adjustAmountSmooth);
    stormFogGreen=stormFogGreenOrig + (-(stormFogGreenOrig - (0.5F * sunBrightness)) * adjustAmountSmooth);
    stormFogBlue=stormFogBlueOrig + (-(stormFogBlueOrig - (0.25F * sunBrightness)) * adjustAmountSmooth);
    stormFogDensity=stormFogDensityOrig + (-(stormFogDensityOrig - 0.02F) * adjustAmountSmooth);
    stormFogStart=stormFogStartOrig + (-(stormFogStartOrig - 0F) * adjustAmountSmooth);
    stormFogEnd=stormFogEndOrig + (-(stormFogEndOrig - 7F) * adjustAmountSmooth);
    stormFogStartClouds=stormFogStartCloudsOrig + (-(stormFogStartCloudsOrig - 0F) * adjustAmountSmooth);
    stormFogEndClouds=stormFogEndCloudsOrig + (-(stormFogEndCloudsOrig - 20F) * adjustAmountSmooth);
  }
 else {
    if (!needFogState) {
    }
    needFogState=true;
  }
  if (adjustAmountSmooth > 0.75F && sandstorm != null) {
    Vec3 windForce=windMan.getWindForce();
    Random rand=mc.world.rand;
    int spawnAreaSize=80;
    double sandstormParticleRateDebris=ConfigParticle.Sandstorm_Particle_Debris_effect_rate;
    double sandstormParticleRateDust=ConfigParticle.Sandstorm_Particle_Dust_effect_rate;
    float adjustAmountSmooth75=(adjustAmountSmooth * 8F) - 7F;
    for (int i=0; i < ((float)30 * adjustAmountSmooth75 * sandstormParticleRateDust); i++) {
      BlockPos pos=new BlockPos(player.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),player.posY - 2 + rand.nextInt(10),player.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
      if (canPrecipitateAt(world,pos)) {
        TextureAtlasSprite sprite=ParticleRegistry.cloud256;
        ParticleSandstorm part=new ParticleSandstorm(world,pos.getX(),pos.getY(),pos.getZ(),0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.setMotionX(windForce.xCoord);
        part.setMotionZ(windForce.zCoord);
        part.setFacePlayer(false);
        part.isTransparent=true;
        part.rotationYaw=(float)rand.nextInt(360);
        part.rotationPitch=(float)rand.nextInt(360);
        part.setMaxAge(40);
        part.setGravity(0.09F);
        part.setAlphaF(0F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.5F);
        part.setRBGColorF(0.65F * brightnessMulti,0.6F * brightnessMulti,0.3F * brightnessMulti);
        part.setScale(40);
        part.aboveGroundHeight=0.2D;
        part.setKillOnCollide(true);
        part.windWeight=1F;
        particleBehavior.particles.add(part);
        ClientTickHandler.weatherManager.addWeatheredParticle(part);
        part.spawnAsWeatherEffect();
      }
    }
    for (int i=0; i < ((float)1 * adjustAmountSmooth75 * sandstormParticleRateDebris); i++) {
      BlockPos pos=new BlockPos(player.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),player.posY - 2 + rand.nextInt(10),player.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
      if (canPrecipitateAt(world,pos)) {
        TextureAtlasSprite sprite=ParticleRegistry.tumbleweed;
        ParticleSandstorm part=new ParticleSandstorm(world,pos.getX(),pos.getY(),pos.getZ(),0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.setMotionX(windForce.xCoord);
        part.setMotionZ(windForce.zCoord);
        part.setFacePlayer(true);
        part.isTransparent=true;
        part.rotationYaw=(float)rand.nextInt(360);
        part.rotationPitch=(float)rand.nextInt(360);
        part.setMaxAge(80);
        part.setGravity(0.3F);
        part.setAlphaF(0F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.2F);
        part.setRBGColorF(1F * brightnessMulti,1F * brightnessMulti,1F * brightnessMulti);
        part.setScale(8);
        part.aboveGroundHeight=0.5D;
        part.collisionSpeedDampen=false;
        part.bounceSpeed=0.03D;
        part.bounceSpeedAhead=0.03D;
        part.setKillOnCollide(false);
        part.windWeight=1F;
        particleBehavior.particles.add(part);
        ClientTickHandler.weatherManager.addWeatheredParticle(part);
        part.spawnAsWeatherEffect();
      }
    }
    for (int i=0; i < ((float)8 * adjustAmountSmooth75 * sandstormParticleRateDebris); i++) {
      BlockPos pos=new BlockPos(player.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),player.posY - 2 + rand.nextInt(10),player.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
      if (canPrecipitateAt(world,pos)) {
        TextureAtlasSprite sprite=null;
        int tex=rand.nextInt(3);
        if (tex == 0) {
          sprite=ParticleRegistry.debris_1;
        }
 else         if (tex == 1) {
          sprite=ParticleRegistry.debris_2;
        }
 else         if (tex == 2) {
          sprite=ParticleRegistry.debris_3;
        }
        ParticleSandstorm part=new ParticleSandstorm(world,pos.getX(),pos.getY(),pos.getZ(),0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.setMotionX(windForce.xCoord);
        part.setMotionZ(windForce.zCoord);
        part.setFacePlayer(false);
        part.spinFast=true;
        part.isTransparent=true;
        part.rotationYaw=(float)rand.nextInt(360);
        part.rotationPitch=(float)rand.nextInt(360);
        part.setMaxAge(80);
        part.setGravity(0.3F);
        part.setAlphaF(0F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.5F);
        part.setRBGColorF(1F * brightnessMulti,1F * brightnessMulti,1F * brightnessMulti);
        part.setScale(8);
        part.aboveGroundHeight=0.5D;
        part.collisionSpeedDampen=false;
        part.bounceSpeed=0.03D;
        part.bounceSpeedAhead=0.03D;
        part.setKillOnCollide(false);
        part.windWeight=1F;
        particleBehavior.particles.add(part);
        ClientTickHandler.weatherManager.addWeatheredParticle(part);
        part.spawnAsWeatherEffect();
      }
    }
  }
  tickSandstormSound();
}","/** 
 * Manages transitioning fog densities and color from current vanilla settings to our desired settings, and vice versa
 */
public static void tickSandstorm(){
  if (adjustAmountTargetPocketSandOverride > 0) {
    adjustAmountTargetPocketSandOverride-=0.01F;
  }
  Minecraft mc=Minecraft.getMinecraft();
  EntityPlayer player=mc.player;
  World world=mc.world;
  Vec3 posPlayer=new Vec3(mc.player.posX,0,mc.player.posZ);
  WeatherObjectSandstorm sandstorm=ClientTickHandler.weatherManager.getClosestSandstormByIntensity(posPlayer);
  WindManager windMan=ClientTickHandler.weatherManager.getWindManager();
  float scaleIntensityTarget=0F;
  if (sandstorm != null) {
    if (mc.world.getTotalWorldTime() % 40 == 0) {
      isPlayerOutside=WeatherUtilEntity.isEntityOutside(mc.player);
    }
    scaleIntensityTarget=sandstorm.getSandstormScale();
    List<Vec3> points=sandstorm.getSandstormAsShape();
    boolean inStorm=CoroUtilPhysics.isInConvexShape(posPlayer,points);
    if (inStorm) {
      distToStorm=0;
    }
 else {
      distToStorm=CoroUtilPhysics.getDistanceToShape(posPlayer,points);
    }
  }
 else {
    distToStorm=distToStormThreshold + 10;
  }
  scaleIntensitySmooth=adjVal(scaleIntensitySmooth,scaleIntensityTarget,0.01F);
  float fogColorChangeRate=0.01F;
  float fogDistChangeRate=2F;
  float fogDensityChangeRate=0.01F;
  adjustAmountTarget=1F - (float)((distToStorm) / distToStormThreshold);
  adjustAmountTarget*=2F * scaleIntensitySmooth * (isPlayerOutside ? 1F : 0.5F);
  boolean pocketSandOverride=false;
  if (adjustAmountTarget < adjustAmountTargetPocketSandOverride) {
    adjustAmountTarget=adjustAmountTargetPocketSandOverride;
    pocketSandOverride=true;
  }
  if (adjustAmountTarget < 0F)   adjustAmountTarget=0F;
  if (adjustAmountTarget > 1F)   adjustAmountTarget=1F;
  float sunBrightness=mc.world.getSunBrightness(1F) * 1F;
  if (!pocketSandOverride) {
    if (adjustAmountSmooth < adjustAmountTarget) {
      adjustAmountSmooth=CoroUtilMisc.adjVal(adjustAmountSmooth,adjustAmountTarget,0.003F);
    }
 else {
      adjustAmountSmooth=CoroUtilMisc.adjVal(adjustAmountSmooth,adjustAmountTarget,0.002F);
    }
  }
 else {
    adjustAmountSmooth=CoroUtilMisc.adjVal(adjustAmountSmooth,adjustAmountTarget,0.02F);
  }
  EventHandler.sandstormFogAmount=adjustAmountSmooth;
  if (mc.world.getTotalWorldTime() % 20 == 0) {
    if (adjustAmountSmooth > 0) {
    }
  }
  if (adjustAmountSmooth > 0) {
    if (needFogState) {
      try {
        Object fogState=ObfuscationReflectionHelper.getPrivateValue(GlStateManager.class,null,""String_Node_Str"");
        Class<?> innerClass=Class.forName(""String_Node_Str"");
        Field fieldDensity=null;
        Field fieldStart=null;
        Field fieldEnd=null;
        try {
          fieldDensity=innerClass.getField(""String_Node_Str"");
          fieldDensity.setAccessible(true);
          fieldStart=innerClass.getField(""String_Node_Str"");
          fieldStart.setAccessible(true);
          fieldEnd=innerClass.getField(""String_Node_Str"");
          fieldEnd.setAccessible(true);
        }
 catch (        Exception e) {
          fieldDensity=innerClass.getField(""String_Node_Str"");
          fieldDensity.setAccessible(true);
          fieldStart=innerClass.getField(""String_Node_Str"");
          fieldStart.setAccessible(true);
          fieldEnd=innerClass.getField(""String_Node_Str"");
          fieldEnd.setAccessible(true);
        }
        stormFogDensity=fieldDensity.getFloat(fogState);
        stormFogStart=fieldStart.getFloat(fogState);
        stormFogEnd=fieldEnd.getFloat(fogState);
        stormFogStartClouds=0;
        stormFogEndClouds=192;
        stormFogStartOrig=stormFogStart;
        stormFogEndOrig=stormFogEnd;
        stormFogStartCloudsOrig=stormFogStartClouds;
        stormFogEndCloudsOrig=stormFogEndClouds;
        stormFogDensityOrig=stormFogDensity;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      needFogState=false;
    }
    stormFogRed=stormFogRedOrig + (-(stormFogRedOrig - (0.7F * sunBrightness)) * adjustAmountSmooth);
    stormFogGreen=stormFogGreenOrig + (-(stormFogGreenOrig - (0.5F * sunBrightness)) * adjustAmountSmooth);
    stormFogBlue=stormFogBlueOrig + (-(stormFogBlueOrig - (0.25F * sunBrightness)) * adjustAmountSmooth);
    stormFogDensity=stormFogDensityOrig + (-(stormFogDensityOrig - 0.02F) * adjustAmountSmooth);
    stormFogStart=stormFogStartOrig + (-(stormFogStartOrig - 0F) * adjustAmountSmooth);
    stormFogEnd=stormFogEndOrig + (-(stormFogEndOrig - 7F) * adjustAmountSmooth);
    stormFogStartClouds=stormFogStartCloudsOrig + (-(stormFogStartCloudsOrig - 0F) * adjustAmountSmooth);
    stormFogEndClouds=stormFogEndCloudsOrig + (-(stormFogEndCloudsOrig - 20F) * adjustAmountSmooth);
  }
 else {
    if (!needFogState) {
    }
    needFogState=true;
  }
  if (adjustAmountSmooth > 0.75F && sandstorm != null) {
    Vec3 windForce=windMan.getWindForce();
    Random rand=mc.world.rand;
    int spawnAreaSize=80;
    double sandstormParticleRateDebris=ConfigParticle.Sandstorm_Particle_Debris_effect_rate;
    double sandstormParticleRateDust=ConfigParticle.Sandstorm_Particle_Dust_effect_rate;
    float adjustAmountSmooth75=(adjustAmountSmooth * 8F) - 7F;
    for (int i=0; i < ((float)30 * adjustAmountSmooth75 * sandstormParticleRateDust); i++) {
      BlockPos pos=new BlockPos(player.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),player.posY - 2 + rand.nextInt(10),player.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
      if (canPrecipitateAt(world,pos)) {
        TextureAtlasSprite sprite=ParticleRegistry.cloud256;
        ParticleSandstorm part=new ParticleSandstorm(world,pos.getX(),pos.getY(),pos.getZ(),0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.setMotionX(windForce.xCoord);
        part.setMotionZ(windForce.zCoord);
        part.setFacePlayer(false);
        part.isTransparent=true;
        part.rotationYaw=(float)rand.nextInt(360);
        part.rotationPitch=(float)rand.nextInt(360);
        part.setMaxAge(40);
        part.setGravity(0.09F);
        part.setAlphaF(0F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.5F);
        part.setRBGColorF(0.65F * brightnessMulti,0.6F * brightnessMulti,0.3F * brightnessMulti);
        part.setScale(40);
        part.aboveGroundHeight=0.2D;
        part.setKillOnCollide(true);
        part.windWeight=1F;
        particleBehavior.particles.add(part);
        ClientTickHandler.weatherManager.addWeatheredParticle(part);
        part.spawnAsWeatherEffect();
      }
    }
    for (int i=0; i < ((float)1 * adjustAmountSmooth75 * sandstormParticleRateDebris); i++) {
      BlockPos pos=new BlockPos(player.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),player.posY - 2 + rand.nextInt(10),player.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
      if (canPrecipitateAt(world,pos)) {
        TextureAtlasSprite sprite=ParticleRegistry.tumbleweed;
        ParticleSandstorm part=new ParticleSandstorm(world,pos.getX(),pos.getY(),pos.getZ(),0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.setMotionX(windForce.xCoord);
        part.setMotionZ(windForce.zCoord);
        part.setFacePlayer(true);
        part.isTransparent=true;
        part.rotationYaw=(float)rand.nextInt(360);
        part.rotationPitch=(float)rand.nextInt(360);
        part.setMaxAge(80);
        part.setGravity(0.3F);
        part.setAlphaF(0F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.2F);
        part.setRBGColorF(1F * brightnessMulti,1F * brightnessMulti,1F * brightnessMulti);
        part.setScale(8);
        part.aboveGroundHeight=0.5D;
        part.collisionSpeedDampen=false;
        part.bounceSpeed=0.03D;
        part.bounceSpeedAhead=0.03D;
        part.setKillOnCollide(false);
        part.windWeight=1F;
        particleBehavior.particles.add(part);
        ClientTickHandler.weatherManager.addWeatheredParticle(part);
        part.spawnAsWeatherEffect();
      }
    }
    for (int i=0; i < ((float)8 * adjustAmountSmooth75 * sandstormParticleRateDebris); i++) {
      BlockPos pos=new BlockPos(player.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),player.posY - 2 + rand.nextInt(10),player.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
      if (canPrecipitateAt(world,pos)) {
        TextureAtlasSprite sprite=null;
        int tex=rand.nextInt(3);
        if (tex == 0) {
          sprite=ParticleRegistry.debris_1;
        }
 else         if (tex == 1) {
          sprite=ParticleRegistry.debris_2;
        }
 else         if (tex == 2) {
          sprite=ParticleRegistry.debris_3;
        }
        ParticleSandstorm part=new ParticleSandstorm(world,pos.getX(),pos.getY(),pos.getZ(),0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.setMotionX(windForce.xCoord);
        part.setMotionZ(windForce.zCoord);
        part.setFacePlayer(false);
        part.spinFast=true;
        part.isTransparent=true;
        part.rotationYaw=(float)rand.nextInt(360);
        part.rotationPitch=(float)rand.nextInt(360);
        part.setMaxAge(80);
        part.setGravity(0.3F);
        part.setAlphaF(0F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.5F);
        part.setRBGColorF(1F * brightnessMulti,1F * brightnessMulti,1F * brightnessMulti);
        part.setScale(8);
        part.aboveGroundHeight=0.5D;
        part.collisionSpeedDampen=false;
        part.bounceSpeed=0.03D;
        part.bounceSpeedAhead=0.03D;
        part.setKillOnCollide(false);
        part.windWeight=1F;
        particleBehavior.particles.add(part);
        ClientTickHandler.weatherManager.addWeatheredParticle(part);
        part.spawnAsWeatherEffect();
      }
    }
  }
  tickSandstormSound();
}",0.9984181252232484
81836,"@Override protected void renderRainSnow(float par1){
  boolean overrideOn=ConfigMisc.Misc_proxyRenderOverrideEnabled;
  if (!overrideOn) {
    super.renderRainSnow(par1);
    return;
  }
 else {
    if (!ConfigParticle.Particle_RainSnow) {
      super.renderRainSnow(par1);
    }
  }
}","@Override protected void renderRainSnow(float par1){
  boolean overrideOn=ConfigMisc.Misc_proxyRenderOverrideEnabled;
  EventHandler.hookRenderShaders(par1);
  if (!overrideOn) {
    super.renderRainSnow(par1);
    return;
  }
 else {
    if (!ConfigParticle.Particle_RainSnow) {
      super.renderRainSnow(par1);
    }
  }
}",0.9344262295081968
81837,"public void tickParticlePrecipitation(){
  if (ConfigParticle.Particle_RainSnow) {
    EntityPlayer entP=FMLClientHandler.instance().getClient().player;
    if (entP.posY >= StormObject.static_YPos_layer0)     return;
    WeatherManagerClient weatherMan=ClientTickHandler.weatherManager;
    if (weatherMan == null)     return;
    WindManager windMan=weatherMan.getWindManager();
    if (windMan == null)     return;
    float curPrecipVal=getRainStrengthAndControlVisuals(entP);
    float maxPrecip=0.5F;
    int precipitationHeight=entP.world.getPrecipitationHeight(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ))).getY();
    Biome biomegenbase=entP.world.getBiome(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ)));
    World world=entP.world;
    Random rand=entP.world.rand;
    boolean particleTest=false;
    if (particleTest) {
      if (testParticle == null) {
        BlockPos pos=new BlockPos(entP);
        if (canPrecipitateAt(world,pos)) {
          ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.test_texture);
          rain.setSlantParticleToWind(false);
          rain.setExtraParticlesBaseAmount(2);
          rain.setSeverityOfRainRate(0);
          rain.setDontRenderUnderTopmostBlock(true);
          boolean upward=rand.nextBoolean();
          rain.windWeight=8F;
          rain.setFacePlayer(false);
          rain.setScale(90F + (rand.nextFloat() * 3F));
          rain.setScale(5F);
          rain.setMaxAge(60);
          rain.setGravity(0.0F);
          rain.setTicksFadeInMax(20);
          rain.setAlphaF(0);
          rain.setTicksFadeOutMax(20);
          rain.rotationYaw=0;
          rain.rotationPitch=90;
          rain.setMotionY(-0D);
          rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
          rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
          rain.spawnAsWeatherEffect();
          testParticle=rain;
        }
      }
      if (testParticle != null) {
        testParticle.setPosition(entP.posX + 1,entP.posY,entP.posZ - 4);
        testParticle.rotationPitch=45;
        testParticle.rotationYaw=45;
      }
    }
    if (biomegenbase != null && (biomegenbase.canRain() || biomegenbase.getEnableSnow())) {
      float temperature=biomegenbase.getFloatTemperature(new BlockPos(MathHelper.floor(entP.posX),MathHelper.floor(entP.posY),MathHelper.floor(entP.posZ)));
      double d3;
      float f10;
      curPrecipVal=Math.min(maxPrecip,Math.abs(curPrecipVal));
      curPrecipVal*=1F;
      if (curPrecipVal > 0) {
        int spawnCount;
        int spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate);
        int safetyCutout=100;
        if (entP.world.getBiomeProvider().getTemperatureAtHeight(temperature,precipitationHeight) >= 0.15F) {
          spawnCount=0;
          int spawnAreaSize=20;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.rain_white);
                rain.setKillWhenUnderTopmostBlock(true);
                rain.killWhenUnderCameraAtLeast=5;
                rain.setTicksFadeOutMaxOnDeath(5);
                rain.setDontRenderUnderTopmostBlock(true);
                rain.setExtraParticlesBaseAmount(15);
                rain.fastLight=true;
                rain.setSlantParticleToWind(true);
                rain.windWeight=1F;
                if (!RotatingParticleManager.useShaders) {
                  rain.setFacePlayer(true);
                  rain.setSlantParticleToWind(true);
                }
 else {
                  rain.setFacePlayer(false);
                  rain.extraYRotation=rain.getWorld().rand.nextInt(360) - 180F;
                }
                rain.setScale(2F);
                rain.isTransparent=true;
                rain.setGravity(2.5F);
                rain.setMaxAge(50);
                rain.setTicksFadeInMax(5);
                rain.setAlphaF(0);
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.setMotionY(-0.5D);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
          if (world.getTotalWorldTime() % 60 == 0) {
          }
          boolean groundSplash=true;
          boolean downfall=true;
          spawnAreaSize=20;
          for (int i=0; groundSplash == true && i < 30F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(15),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            pos=world.getPrecipitationHeight(pos).add(0,1,0);
            if (canPrecipitateAt(world,pos)) {
              ParticleTexFX rain=new ParticleTexFX(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.cloud256_6);
              rain.setCanCollide(true);
              boolean upward=rand.nextBoolean();
              rain.windWeight=20F;
              rain.setFacePlayer(upward);
              rain.setScale(3F + (rand.nextFloat() * 3F));
              rain.setMaxAge(15);
              rain.setGravity(-0.0F);
              rain.setTicksFadeInMax(0);
              rain.setAlphaF(0);
              rain.setTicksFadeOutMax(4);
              rain.renderOrder=2;
              rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
              rain.rotationPitch=90;
              rain.setMotionY(0D);
              rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
              rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
              rain.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(rain);
            }
          }
          spawnAreaSize=20;
          for (int i=0; downfall == true && i < 2F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            if (entP.getDistanceSq(pos) < 10D * 10D)             continue;
            if (canPrecipitateAt(world,pos)) {
              ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.downfall3);
              rain.setKillWhenUnderTopmostBlock(true);
              rain.setTicksFadeOutMaxOnDeath(5);
              rain.noExtraParticles=true;
              boolean upward=rand.nextBoolean();
              rain.windWeight=8F;
              rain.setFacePlayer(true);
              rain.setFacePlayer(false);
              rain.facePlayerYaw=true;
              rain.setScale(90F + (rand.nextFloat() * 3F));
              rain.setMaxAge(60);
              rain.setGravity(0.35F);
              rain.setTicksFadeInMax(20);
              rain.setAlphaF(0);
              rain.setTicksFadeOutMax(20);
              rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
              rain.rotationPitch=90;
              rain.rotationPitch=0;
              rain.setMotionY(-0.3D);
              rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
              rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
              rain.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(rain);
            }
          }
        }
 else {
          spawnCount=0;
          spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate);
          int spawnAreaSize=50;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender snow=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.snow);
                snow.setKillWhenUnderTopmostBlock(true);
                snow.setTicksFadeOutMaxOnDeath(5);
                snow.setDontRenderUnderTopmostBlock(true);
                snow.setExtraParticlesBaseAmount(10);
                snow.setMotionY(-0.1D);
                snow.setScale(1.3F);
                snow.setGravity(0.1F);
                snow.windWeight=0.2F;
                snow.setMaxAge(40);
                snow.setFacePlayer(false);
                snow.setTicksFadeInMax(5);
                snow.setAlphaF(0);
                snow.setTicksFadeOutMax(5);
                snow.rotationYaw=snow.getWorld().rand.nextInt(360) - 180F;
                snow.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(snow);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
}","public void tickParticlePrecipitation(){
  if (ConfigParticle.Particle_RainSnow) {
    EntityPlayer entP=FMLClientHandler.instance().getClient().player;
    if (entP.posY >= StormObject.static_YPos_layer0)     return;
    WeatherManagerClient weatherMan=ClientTickHandler.weatherManager;
    if (weatherMan == null)     return;
    WindManager windMan=weatherMan.getWindManager();
    if (windMan == null)     return;
    float curPrecipVal=getRainStrengthAndControlVisuals(entP);
    float maxPrecip=0.5F;
    int precipitationHeight=entP.world.getPrecipitationHeight(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ))).getY();
    Biome biomegenbase=entP.world.getBiome(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ)));
    World world=entP.world;
    Random rand=entP.world.rand;
    boolean particleTest=false;
    if (particleTest) {
      if (testParticle == null) {
        BlockPos pos=new BlockPos(entP);
        if (canPrecipitateAt(world,pos)) {
          ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.test_texture);
          rain.setSlantParticleToWind(false);
          rain.setExtraParticlesBaseAmount(2);
          rain.setSeverityOfRainRate(0);
          rain.setDontRenderUnderTopmostBlock(true);
          boolean upward=rand.nextBoolean();
          rain.windWeight=8F;
          rain.setFacePlayer(false);
          rain.setScale(90F + (rand.nextFloat() * 3F));
          rain.setScale(5F);
          rain.setMaxAge(60);
          rain.setGravity(0.0F);
          rain.setTicksFadeInMax(20);
          rain.setAlphaF(0);
          rain.setTicksFadeOutMax(20);
          rain.rotationYaw=0;
          rain.rotationPitch=90;
          rain.setMotionY(-0D);
          rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
          rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
          rain.spawnAsWeatherEffect();
          testParticle=rain;
        }
      }
      if (testParticle != null) {
        testParticle.setPosition(entP.posX + 1,entP.posY,entP.posZ - 4);
        testParticle.rotationPitch=45;
        testParticle.rotationYaw=45;
      }
    }
    boolean doFish=false;
    if (doFish) {
      int spawnTryCur=0;
      int spawnTryMax=200;
      int range=60;
      for (; spawnTryCur < spawnTryMax; spawnTryCur++) {
        BlockPos pos=new BlockPos(entP.getPosition().add(rand.nextInt(range) - rand.nextInt(range),rand.nextInt(range) - rand.nextInt(range),rand.nextInt(range) - rand.nextInt(range)));
        IBlockState state=world.getBlockState(pos);
        if (state.getMaterial() == Material.WATER) {
          ParticleFish fish=new ParticleFish(entP.world,pos.getX() + 0.5F,pos.getY() + 0.5F,pos.getZ() + 0.5F,0D,0D,0D,ParticleRegistry.listFish.get(rand.nextInt(8) + 1));
          fish.setTicksFadeInMax(20);
          fish.setAlphaF(0);
          fish.setTicksFadeOutMax(20);
          fish.setMaxAge(20 * 10);
          fish.setScale(6F);
          fish.setDontRenderUnderTopmostBlock(false);
          fish.setGravity(0);
          fish.isTransparent=false;
          fish.motionY=0;
          fish.rotationYaw=rand.nextInt(360);
          fish.rotationPitch=rand.nextInt(45);
          fish.setRBGColorF(0.6F,0.6F,1F);
          ExtendedRenderer.rotEffRenderer.addEffect(fish);
        }
      }
    }
    boolean doGrass=true;
    if (doGrass) {
      int spawnAreaSize=80;
      int spawnAmount=1;
      for (int i=0; i < spawnAmount; i++) {
        BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY,entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
        pos=world.getPrecipitationHeight(pos);
        IBlockState state=world.getBlockState(pos.add(0,-1,0));
        if (state.getMaterial() == Material.GRASS) {
          for (int ii=0; ii < 8; ii++) {
            ParticleTallGrass rain=new ParticleTallGrass(entP.world,pos.getX(),pos.getY() + 0.5D - 0.2D + ii,pos.getZ(),0D,0D,0D,ParticleRegistry.tallgrass);
            rain.setCanCollide(true);
            int color=8763015;
            color=9551193;
            rain.particleRed=(float)(color >> 16 & 255) / 255.0F;
            rain.particleGreen=(float)(color >> 8 & 255) / 255.0F;
            rain.particleBlue=(float)(color & 255) / 255.0F;
            rain.isTransparent=false;
            rain.windWeight=99999F;
            rain.setFacePlayer(false);
            rain.setScale(3F + (rand.nextFloat() * 3F));
            rain.setScale(10F);
            rain.setMaxAge(240);
            rain.setGravity(0.0F);
            rain.setTicksFadeInMax(4);
            rain.setAlphaF(0);
            rain.setTicksFadeOutMax(4);
            rain.renderOrder=2;
            rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
            rain.rotationPitch=0;
            rain.setMotionY(0D);
            rain.setMotionX(0);
            rain.setMotionZ(0);
            ExtendedRenderer.rotEffRenderer.addEffect(rain);
            ClientTickHandler.weatherManager.addWeatheredParticle(rain);
          }
        }
      }
    }
    if (biomegenbase != null && (biomegenbase.canRain() || biomegenbase.getEnableSnow())) {
      float temperature=biomegenbase.getFloatTemperature(new BlockPos(MathHelper.floor(entP.posX),MathHelper.floor(entP.posY),MathHelper.floor(entP.posZ)));
      double d3;
      float f10;
      curPrecipVal=Math.min(maxPrecip,Math.abs(curPrecipVal));
      curPrecipVal*=1F;
      if (curPrecipVal > 0) {
        int spawnCount;
        int spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate);
        int safetyCutout=100;
        if (entP.world.getBiomeProvider().getTemperatureAtHeight(temperature,precipitationHeight) >= 0.15F) {
          spawnCount=0;
          int spawnAreaSize=20;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.rain_white);
                rain.setKillWhenUnderTopmostBlock(true);
                rain.killWhenUnderCameraAtLeast=5;
                rain.setTicksFadeOutMaxOnDeath(5);
                rain.setDontRenderUnderTopmostBlock(true);
                rain.setExtraParticlesBaseAmount(15);
                rain.fastLight=true;
                rain.setSlantParticleToWind(true);
                rain.windWeight=1F;
                if (!RotatingParticleManager.useShaders) {
                  rain.setFacePlayer(true);
                  rain.setSlantParticleToWind(true);
                }
 else {
                  rain.setFacePlayer(false);
                  rain.extraYRotation=rain.getWorld().rand.nextInt(360) - 180F;
                }
                rain.setScale(2F);
                rain.isTransparent=true;
                rain.setGravity(2.5F);
                rain.setMaxAge(50);
                rain.setTicksFadeInMax(5);
                rain.setAlphaF(0);
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.setMotionY(-0.5D);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
          if (world.getTotalWorldTime() % 60 == 0) {
          }
          boolean groundSplash=true;
          boolean downfall=true;
          spawnAreaSize=20;
          for (int i=0; groundSplash == true && i < 30F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(15),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            pos=world.getPrecipitationHeight(pos).add(0,1,0);
            if (canPrecipitateAt(world,pos)) {
              ParticleTexFX rain=new ParticleTexFX(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.cloud256_6);
              rain.setCanCollide(true);
              boolean upward=rand.nextBoolean();
              rain.windWeight=20F;
              rain.setFacePlayer(upward);
              rain.setScale(3F + (rand.nextFloat() * 3F));
              rain.setMaxAge(15);
              rain.setGravity(-0.0F);
              rain.setTicksFadeInMax(0);
              rain.setAlphaF(0);
              rain.setTicksFadeOutMax(4);
              rain.renderOrder=2;
              rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
              rain.rotationPitch=90;
              rain.setMotionY(0D);
              rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
              rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
              rain.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(rain);
            }
          }
          spawnAreaSize=20;
          for (int i=0; downfall == true && i < 2F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            if (entP.getDistanceSq(pos) < 10D * 10D)             continue;
            if (canPrecipitateAt(world,pos)) {
              ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.downfall3);
              rain.setKillWhenUnderTopmostBlock(true);
              rain.setTicksFadeOutMaxOnDeath(5);
              rain.noExtraParticles=true;
              boolean upward=rand.nextBoolean();
              rain.windWeight=8F;
              rain.setFacePlayer(true);
              rain.setFacePlayer(false);
              rain.facePlayerYaw=true;
              rain.setScale(90F + (rand.nextFloat() * 3F));
              rain.setMaxAge(60);
              rain.setGravity(0.35F);
              rain.setTicksFadeInMax(20);
              rain.setAlphaF(0);
              rain.setTicksFadeOutMax(20);
              rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
              rain.rotationPitch=90;
              rain.rotationPitch=0;
              rain.setMotionY(-0.3D);
              rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
              rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
              rain.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(rain);
            }
          }
        }
 else {
          spawnCount=0;
          spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate);
          int spawnAreaSize=50;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender snow=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.snow);
                snow.setKillWhenUnderTopmostBlock(true);
                snow.setTicksFadeOutMaxOnDeath(5);
                snow.setDontRenderUnderTopmostBlock(true);
                snow.setExtraParticlesBaseAmount(10);
                snow.setMotionY(-0.1D);
                snow.setScale(1.3F);
                snow.setGravity(0.1F);
                snow.windWeight=0.2F;
                snow.setMaxAge(40);
                snow.setFacePlayer(false);
                snow.setTicksFadeInMax(5);
                snow.setAlphaF(0);
                snow.setTicksFadeOutMax(5);
                snow.rotationYaw=snow.getWorld().rand.nextInt(360) - 180F;
                snow.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(snow);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
}",0.8704640227131577
81838,"public static void profileForFoliageShader(){
  World world=Minecraft.getMinecraft().world;
  Entity entityIn=Minecraft.getMinecraft().player;
  BlockPos pos=entityIn.getPosition();
  boolean add=true;
  boolean trim=true;
  int radialRange=FoliageRenderer.radialRange;
  int xzRange=radialRange;
  int yRange=radialRange;
  Random rand=new Random();
  if (trim) {
    Iterator<Map.Entry<BlockPos,List<Foliage>>> it=ExtendedRenderer.foliageRenderer.lookupPosToFoliage.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<BlockPos,List<Foliage>> entry=it.next();
      if (!validFoliageSpot(world,entry.getKey().down())) {
        it.remove();
        for (        Foliage entry2 : entry.getValue()) {
          markMeshDirty(entry2.particleTexture,true);
          ExtendedRenderer.foliageRenderer.getFoliageForSprite(entry2.particleTexture).remove(entry2);
        }
      }
 else       if (entityIn.getDistanceSq(entry.getKey()) > radialRange * radialRange) {
        it.remove();
        for (        Foliage entry2 : entry.getValue()) {
          markMeshDirty(entry2.particleTexture,true);
          ExtendedRenderer.foliageRenderer.getFoliageForSprite(entry2.particleTexture).remove(entry2);
        }
      }
    }
  }
  if (add) {
    for (int x=-xzRange; x <= xzRange; x++) {
      for (int z=-xzRange; z <= xzRange; z++) {
        for (int y=-yRange; y <= yRange; y++) {
          BlockPos posScan=pos.add(x,y,z);
          if (!ExtendedRenderer.foliageRenderer.lookupPosToFoliage.containsKey(posScan)) {
            if (validFoliageSpot(entityIn.world,posScan.down())) {
              if (entityIn.getDistanceSq(posScan) <= radialRange * radialRange) {
                TextureAtlasSprite sprite=ParticleRegistry.tallgrass;
                ExtendedRenderer.foliageRenderer.addForPos(sprite,posScan);
                markMeshDirty(sprite,true);
              }
            }
          }
 else {
          }
        }
      }
    }
  }
  for (  Map.Entry<TextureAtlasSprite,List<Foliage>> entry : ExtendedRenderer.foliageRenderer.foliage.entrySet()) {
    InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(entry.getKey());
    if (mesh.dirtyVBO2Flag) {
      updateVBO2Threaded(entry.getKey());
    }
  }
}","public static void profileForFoliageShader(){
  World world=Minecraft.getMinecraft().world;
  Entity entityIn=Minecraft.getMinecraft().player;
  BlockPos pos=entityIn.getPosition();
  boolean add=true;
  boolean trim=true;
  int radialRange=FoliageRenderer.radialRange;
  int xzRange=radialRange;
  int yRange=radialRange;
  Random rand=new Random();
  if (trim) {
    Iterator<Map.Entry<BlockPos,List<Foliage>>> it=ExtendedRenderer.foliageRenderer.lookupPosToFoliage.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<BlockPos,List<Foliage>> entry=it.next();
      if (!validFoliageSpot(world,entry.getKey().down())) {
        it.remove();
        for (        Foliage entry2 : entry.getValue()) {
          markMeshDirty(entry2.particleTexture,true);
          ExtendedRenderer.foliageRenderer.getFoliageForSprite(entry2.particleTexture).remove(entry2);
        }
      }
 else       if (entityIn.getDistanceSq(entry.getKey()) > radialRange * radialRange) {
        it.remove();
        for (        Foliage entry2 : entry.getValue()) {
          markMeshDirty(entry2.particleTexture,true);
          ExtendedRenderer.foliageRenderer.getFoliageForSprite(entry2.particleTexture).remove(entry2);
        }
      }
    }
  }
  if (add) {
    for (int x=-xzRange; x <= xzRange; x++) {
      for (int z=-xzRange; z <= xzRange; z++) {
        for (int y=-yRange; y <= yRange; y++) {
          BlockPos posScan=pos.add(x,y,z);
          if (!ExtendedRenderer.foliageRenderer.lookupPosToFoliage.containsKey(posScan)) {
            if (validFoliageSpot(entityIn.world,posScan.down())) {
              if (entityIn.getDistanceSq(posScan) <= radialRange * radialRange) {
                ExtendedRenderer.foliageRenderer.addForPosSeaweed(posScan);
                for (                TextureAtlasSprite sprite : ParticleRegistry.listSeaweed) {
                  markMeshDirty(sprite,true);
                }
              }
            }
          }
 else {
          }
        }
      }
    }
  }
  Foliage.interpPosXThread=entityIn.posX;
  Foliage.interpPosYThread=entityIn.posY;
  Foliage.interpPosZThread=entityIn.posZ;
  for (  Map.Entry<TextureAtlasSprite,List<Foliage>> entry : ExtendedRenderer.foliageRenderer.foliage.entrySet()) {
    InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(entry.getKey());
    if (mesh.dirtyVBO2Flag) {
      updateVBO2Threaded(entry.getKey());
    }
  }
}",0.9291711517761032
81839,"public static boolean validFoliageSpot(World world,BlockPos pos){
  return world.getBlockState(pos).getMaterial() == Material.GRASS;
}","public static boolean validFoliageSpot(World world,BlockPos pos){
  return world.getBlockState(pos).getMaterial() != Material.WATER && world.getBlockState(pos.up()).getMaterial() == Material.WATER;
}",0.7807807807807807
81840,"public static void updateVBO2Threaded(TextureAtlasSprite sprite){
  Minecraft mc=Minecraft.getMinecraft();
  Entity entityIn=mc.getRenderViewEntity();
  float partialTicks=1F;
  Foliage.interpPosXThread=entityIn.posX;
  Foliage.interpPosYThread=entityIn.posY;
  Foliage.interpPosZThread=entityIn.posZ;
  InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(sprite);
  if (mesh == null)   return;
  mesh.curBufferPosVBO2=0;
  mesh.instanceDataBufferVBO2.clear();
  for (  Foliage foliage : ExtendedRenderer.foliageRenderer.getFoliageForSprite(sprite)) {
    foliage.updateQuaternion(entityIn);
    foliage.renderForShaderVBO2(mesh,ExtendedRenderer.foliageRenderer.transformation,null,entityIn,partialTicks);
  }
  mesh.instanceDataBufferVBO2.limit(mesh.curBufferPosVBO2 * mesh.INSTANCE_SIZE_FLOATS_SELDOM);
}","public static void updateVBO2Threaded(TextureAtlasSprite sprite){
  Minecraft mc=Minecraft.getMinecraft();
  Entity entityIn=mc.getRenderViewEntity();
  float partialTicks=1F;
  InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(sprite);
  if (mesh == null)   return;
  mesh.curBufferPosVBO2=0;
  mesh.instanceDataBufferVBO2.clear();
  for (  Foliage foliage : ExtendedRenderer.foliageRenderer.getFoliageForSprite(sprite)) {
    foliage.updateQuaternion(entityIn);
    foliage.renderForShaderVBO2(mesh,ExtendedRenderer.foliageRenderer.transformation,null,entityIn,partialTicks);
  }
  mesh.instanceDataBufferVBO2.limit(mesh.curBufferPosVBO2 * mesh.INSTANCE_SIZE_FLOATS_SELDOM);
}",0.916
81841,"public static void profileForFoliageShader(){
  World world=Minecraft.getMinecraft().world;
  Entity entityIn=Minecraft.getMinecraft().player;
  BlockPos pos=entityIn.getPosition();
  boolean add=true;
  boolean trim=true;
  int radialRange=40;
  int xzRange=radialRange;
  int yRange=15;
  boolean dirtyVBO2=false;
  if (add) {
    for (int x=-xzRange; x <= xzRange; x++) {
      for (int z=-xzRange; z <= xzRange; z++) {
        for (int y=-yRange; y <= yRange; y++) {
          BlockPos posScan=pos.add(x,y,z);
          if (!ExtendedRenderer.foliageRenderer.lookupPosToFoliage.containsKey(posScan) && !FoliageRenderer.foliageQueueAdd.contains(posScan)) {
            if (validFoliageSpot(entityIn.world,posScan.down())) {
              if (entityIn.getDistanceSq(posScan) <= radialRange * radialRange) {
                FoliageRenderer.foliageQueueAdd.add(posScan);
                dirtyVBO2=true;
              }
            }
          }
 else {
          }
        }
      }
    }
  }
  if (trim) {
    Iterator<Map.Entry<BlockPos,List<Foliage>>> it=ExtendedRenderer.foliageRenderer.lookupPosToFoliage.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<BlockPos,List<Foliage>> entry=it.next();
      if (!validFoliageSpot(world,entry.getKey().down())) {
        FoliageRenderer.foliageQueueRemove.add(entry.getKey());
        dirtyVBO2=true;
      }
 else       if (entityIn.getDistanceSq(entry.getKey()) > radialRange * radialRange) {
        FoliageRenderer.foliageQueueRemove.add(entry.getKey());
        dirtyVBO2=true;
      }
    }
  }
  if (dirtyVBO2) {
    updateVBO2Threaded();
  }
  FoliageRenderer.dirtyVBO2Flag=dirtyVBO2;
}","public static void profileForFoliageShader(){
  World world=Minecraft.getMinecraft().world;
  Entity entityIn=Minecraft.getMinecraft().player;
  BlockPos pos=entityIn.getPosition();
  boolean add=true;
  boolean trim=true;
  int radialRange=40;
  int xzRange=radialRange;
  int yRange=15;
  boolean dirtyVBO2=false;
  FoliageClutter.clutterSize=6;
  if (add) {
    for (int x=-xzRange; x <= xzRange; x++) {
      for (int z=-xzRange; z <= xzRange; z++) {
        for (int y=-yRange; y <= yRange; y++) {
          BlockPos posScan=pos.add(x,y,z);
          if (!ExtendedRenderer.foliageRenderer.lookupPosToFoliage.containsKey(posScan) && !FoliageRenderer.foliageQueueAdd.contains(posScan)) {
            if (validFoliageSpot(entityIn.world,posScan.down())) {
              if (entityIn.getDistanceSq(posScan) <= radialRange * radialRange) {
                FoliageRenderer.foliageQueueAdd.add(posScan);
                dirtyVBO2=true;
              }
            }
          }
 else {
          }
        }
      }
    }
  }
  if (trim) {
    Iterator<Map.Entry<BlockPos,List<Foliage>>> it=ExtendedRenderer.foliageRenderer.lookupPosToFoliage.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<BlockPos,List<Foliage>> entry=it.next();
      if (!validFoliageSpot(world,entry.getKey().down())) {
        FoliageRenderer.foliageQueueRemove.add(entry.getKey());
        dirtyVBO2=true;
      }
 else       if (entityIn.getDistanceSq(entry.getKey()) > radialRange * radialRange) {
        FoliageRenderer.foliageQueueRemove.add(entry.getKey());
        dirtyVBO2=true;
      }
    }
  }
  if (dirtyVBO2) {
    updateVBO2Threaded();
  }
  FoliageRenderer.dirtyVBO2Flag=dirtyVBO2;
}",0.990436341900777
81842,"public static void updateVBO2Threaded(){
  Minecraft mc=Minecraft.getMinecraft();
  Entity entityIn=mc.getRenderViewEntity();
  ExtendedRenderer.foliageRenderer.processQueue();
  float partialTicks=1F;
  Foliage.interpPosXThread=entityIn.posX;
  Foliage.interpPosYThread=entityIn.posY;
  Foliage.interpPosZThread=entityIn.posZ;
  MeshBufferManagerFoliage.setupMeshIfMissing(ParticleRegistry.tallgrass);
  InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(ParticleRegistry.tallgrass);
  mesh.curBufferPosVBO2=0;
  mesh.instanceDataBufferVBO2.clear();
  for (  List<Foliage> listFoliage : ExtendedRenderer.foliageRenderer.lookupPosToFoliage.values()) {
    for (    Foliage foliage : listFoliage) {
      foliage.updateQuaternion(entityIn);
      foliage.renderForShaderVBO2(mesh,ExtendedRenderer.foliageRenderer.transformation,null,entityIn,partialTicks);
    }
  }
  mesh.instanceDataBufferVBO2.limit(mesh.curBufferPosVBO2 * mesh.INSTANCE_SIZE_FLOATS_SELDOM);
  FoliageRenderer.vbo2BufferPos=mesh.curBufferPosVBO2;
}","public static void updateVBO2Threaded(){
  Minecraft mc=Minecraft.getMinecraft();
  Entity entityIn=mc.getRenderViewEntity();
  ExtendedRenderer.foliageRenderer.processQueue();
  float partialTicks=1F;
  Foliage.interpPosXThread=entityIn.posX;
  Foliage.interpPosYThread=entityIn.posY;
  Foliage.interpPosZThread=entityIn.posZ;
  MeshBufferManagerFoliage.setupMeshIfMissing(ParticleRegistry.tallgrass);
  InstancedMeshFoliage mesh=MeshBufferManagerFoliage.getMesh(ParticleRegistry.tallgrass);
  mesh.curBufferPosVBO2=0;
  mesh.instanceDataBufferVBO2.clear();
  for (  List<Foliage> listFoliage : ExtendedRenderer.foliageRenderer.lookupPosToFoliage.values()) {
    for (    Foliage foliage : listFoliage) {
      foliage.updateQuaternion(entityIn);
      foliage.renderForShaderVBO2(mesh,ExtendedRenderer.foliageRenderer.transformation,null,entityIn,partialTicks);
    }
  }
  mesh.instanceDataBufferVBO2.limit(mesh.curBufferPosVBO2 * mesh.INSTANCE_SIZE_FLOATS_SELDOM);
}",0.9724310776942356
81843,"public void addItemModel(Item item,int meta,ModelResourceLocation location){
  Minecraft.getMinecraft().getRenderItem().getItemModelMesher().register(item,meta,location);
}","public void addItemModel(Item item,int meta,ModelResourceLocation location){
  ModelLoader.setCustomModelResourceLocation(item,meta,location);
}",0.7721518987341772
81844,"public void onRenderScreenTick(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  if (mc.currentScreen instanceof GuiIngameMenu) {
    ScaledResolution scaledresolution=new ScaledResolution(mc);
    int i=scaledresolution.getScaledWidth();
    int j=scaledresolution.getScaledHeight();
    int k=Mouse.getX() * i / mc.displayWidth;
    int l=j - Mouse.getY() * j / mc.displayHeight - 1;
    configButton=new GuiButton(0,(i / 2) - 100,0,200,20,""String_Node_Str"");
    configButton.drawButton(mc,k,l);
    if (k >= configButton.xPosition && l >= configButton.yPosition && k < configButton.xPosition + 200 && l < configButton.yPosition + 20) {
      if (Mouse.isButtonDown(0)) {
        mc.displayGuiScreen(new GuiEZConfig());
      }
    }
  }
}","public void onRenderScreenTick(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  if (mc.currentScreen instanceof GuiIngameMenu) {
    ScaledResolution scaledresolution=new ScaledResolution(mc);
    int i=scaledresolution.getScaledWidth();
    int j=scaledresolution.getScaledHeight();
    int k=Mouse.getX() * i / mc.displayWidth;
    int l=j - Mouse.getY() * j / mc.displayHeight - 1;
    configButton=new GuiButton(0,(i / 2) - 100,0,200,20,""String_Node_Str"");
    configButton.drawButton(mc,k,l,1F);
    if (k >= configButton.x && l >= configButton.y && k < configButton.x + 200 && l < configButton.y + 20) {
      if (Mouse.isButtonDown(0)) {
        mc.displayGuiScreen(new GuiEZConfig());
      }
    }
  }
}",0.976303317535545
81845,"@Override public void execute(MinecraftServer server,ICommandSender var1,String[] var2){
  String helpMsgStorm=""String_Node_Str"";
  EntityPlayer player=null;
  if (var1 instanceof EntityPlayer) {
    player=(EntityPlayer)var1;
  }
  World world=var1.getEntityWorld();
  int dimension=world.provider.getDimension();
  BlockPos posBlock=var1.getPosition();
  Vec3d posVec=var1.getPositionVector();
  try {
    if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equals(""String_Node_Str"") && posVec != Vec3d.ZERO) {
        if (dimension == 0) {
          WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(0);
          VolcanoObject vo=new VolcanoObject(wm);
          vo.pos=new Vec3(posVec);
          vo.initFirstTime();
          wm.addVolcanoObject(vo);
          vo.initPost();
          wm.syncVolcanoNew(vo);
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else {
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
    }
 else     if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equalsIgnoreCase(""String_Node_Str"")) {
        WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(dimension);
        sendCommandSenderMsg(var1,""String_Node_Str"");
        List<WeatherObject> listStorms=wm.getStormObjects();
        for (int i=0; i < listStorms.size(); i++) {
          WeatherObject wo=listStorms.get(i);
          if (wo instanceof WeatherObject) {
            WeatherObject so=(WeatherObject)wo;
            Weather.dbg(""String_Node_Str"" + so.ID);
            so.setDead();
          }
        }
      }
 else       if (var2[1].equals(""String_Node_Str"") || var2[1].equals(""String_Node_Str"")) {
        if (var2.length > 2 && posVec != Vec3d.ZERO) {
          boolean spawnCloudStorm=true;
          WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(dimension);
          StormObject so=new StormObject(wm);
          so.layer=0;
          so.userSpawnedFor=CoroUtilEntity.getName(player);
          so.naturallySpawned=false;
          so.levelTemperature=0.1F;
          so.pos=new Vec3(posVec.xCoord,StormObject.layers.get(so.layer),posVec.zCoord);
          so.levelWater=so.levelWaterStartRaining * 2;
          so.attrib_precipitation=true;
          if (!var2[2].equals(""String_Node_Str"")) {
            so.initRealStorm(null,null);
          }
          if (var2[2].equals(""String_Node_Str"")) {
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"") || var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
            so.attrib_waterSpout=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HAIL;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE4;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE3;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE2;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_FORMING;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_FORMING;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE2;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE3;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE4;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"") || var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
            so.alwaysProgresses=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            WeatherObjectSandstorm sandstorm=new WeatherObjectSandstorm(wm);
            Vec3 pos=new Vec3(posVec.xCoord,world.getHeight(new BlockPos(posVec.xCoord,0,posVec.zCoord)).getY() + 1,posVec.zCoord);
            float angle=wm.getWindManager().getWindAngleForClouds();
            double vecX=-Math.sin(Math.toRadians(angle));
            double vecZ=Math.cos(Math.toRadians(angle));
            double speed=150D;
            pos.xCoord-=vecX * speed;
            pos.zCoord-=vecZ * speed;
            sandstorm.initFirstTime();
            sandstorm.initSandstormSpawn(pos);
            wm.addStormObject(sandstorm);
            wm.syncStormNew(sandstorm);
            spawnCloudStorm=false;
            wm.windMan.startHighWindEvent();
            wm.windMan.lowWindTimer=0;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            boolean spawned=wm.trySpawnSandstormNearPos(world,new Vec3(posVec));
            spawnCloudStorm=false;
            if (!spawned) {
              sendCommandSenderMsg(var1,""String_Node_Str"");
              return;
            }
 else {
              wm.windMan.startHighWindEvent();
              wm.windMan.lowWindTimer=0;
            }
          }
          if (var2.length > 3) {
            if (var2[3].contains(""String_Node_Str"") || var2[3].contains(""String_Node_Str"")) {
              so.alwaysProgresses=true;
            }
          }
          if (spawnCloudStorm) {
            so.initFirstTime();
            wm.addStormObject(so);
            wm.syncStormNew(so);
          }
          sendCommandSenderMsg(var1,""String_Node_Str"" + var2[2] + ""String_Node_Str""+ (so.alwaysProgresses ? ""String_Node_Str"" : ""String_Node_Str""));
        }
 else {
          sendCommandSenderMsg(var1,helpMsgStorm);
        }
      }
 else       if (var2[1].equals(""String_Node_Str"")) {
        sendCommandSenderMsg(var1,helpMsgStorm);
      }
 else {
        sendCommandSenderMsg(var1,helpMsgStorm);
      }
    }
 else     if (var2[0].equals(""String_Node_Str"") && player != null) {
      WeatherUtilBlock.floodAreaWithLayerableBlock(player.world,new Vec3(player.posX,player.posY,player.posZ),player.rotationYawHead,1,1,CommonProxy.blockSandLayer,30);
    }
 else     if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equals(""String_Node_Str"")) {
        boolean doHighOn=false;
        boolean doHighOff=false;
        if (var2.length > 2) {
          if (var2[2].equals(""String_Node_Str"")) {
            doHighOn=true;
          }
 else           if (var2[2].equals(""String_Node_Str"")) {
            doHighOff=true;
          }
        }
 else {
          doHighOn=true;
        }
        WeatherManagerServer wm=ServerTickHandler.getWeatherSystemForDim(dimension);
        if (doHighOn) {
          wm.windMan.startHighWindEvent();
          wm.windMan.lowWindTimer=0;
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else         if (doHighOff) {
          wm.windMan.stopHighWindEvent();
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
 else       if (var2[1].equals(""String_Node_Str"")) {
        boolean doLowOn=false;
        boolean doLowOff=false;
        if (var2.length > 2) {
          if (var2[2].equals(""String_Node_Str"")) {
            doLowOn=true;
          }
 else           if (var2[2].equals(""String_Node_Str"")) {
            doLowOff=true;
          }
        }
 else {
          doLowOn=true;
        }
        WeatherManagerServer wm=ServerTickHandler.getWeatherSystemForDim(dimension);
        if (doLowOn) {
          wm.windMan.startLowWindEvent();
          wm.windMan.lowWindTimer=0;
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else         if (doLowOff) {
          wm.windMan.stopLowWindEvent();
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
    }
 else {
      sendCommandSenderMsg(var1,helpMsgStorm);
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"");
    sendCommandSenderMsg(var1,helpMsgStorm);
    ex.printStackTrace();
  }
}","@Override public void execute(MinecraftServer server,ICommandSender var1,String[] var2){
  String helpMsgStorm=""String_Node_Str"";
  EntityPlayer player=null;
  if (var1 instanceof EntityPlayer) {
    player=(EntityPlayer)var1;
  }
  World world=var1.getEntityWorld();
  int dimension=world.provider.getDimension();
  BlockPos posBlock=var1.getPosition();
  Vec3d posVec=var1.getPositionVector();
  try {
    if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equals(""String_Node_Str"") && posVec != Vec3d.ZERO) {
        if (dimension == 0) {
          WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(0);
          VolcanoObject vo=new VolcanoObject(wm);
          vo.pos=new Vec3(posVec);
          vo.initFirstTime();
          wm.addVolcanoObject(vo);
          vo.initPost();
          wm.syncVolcanoNew(vo);
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else {
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
    }
 else     if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equalsIgnoreCase(""String_Node_Str"")) {
        WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(dimension);
        sendCommandSenderMsg(var1,""String_Node_Str"");
        List<WeatherObject> listStorms=wm.getStormObjects();
        for (int i=0; i < listStorms.size(); i++) {
          WeatherObject wo=listStorms.get(i);
          if (wo instanceof WeatherObject) {
            WeatherObject so=(WeatherObject)wo;
            Weather.dbg(""String_Node_Str"" + so.ID);
            so.setDead();
          }
        }
      }
 else       if (var2[1].equals(""String_Node_Str"") || var2[1].equals(""String_Node_Str"")) {
        if (var2.length > 2 && posVec != Vec3d.ZERO) {
          boolean spawnCloudStorm=true;
          WeatherManagerServer wm=ServerTickHandler.lookupDimToWeatherMan.get(dimension);
          StormObject so=new StormObject(wm);
          so.layer=0;
          so.userSpawnedFor=CoroUtilEntity.getName(player);
          so.naturallySpawned=false;
          so.levelTemperature=0.1F;
          so.pos=new Vec3(posVec.x,StormObject.layers.get(so.layer),posVec.z);
          so.levelWater=so.levelWaterStartRaining * 2;
          so.attrib_precipitation=true;
          if (!var2[2].equals(""String_Node_Str"")) {
            so.initRealStorm(null,null);
          }
          if (var2[2].equals(""String_Node_Str"")) {
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"") || var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
            so.attrib_waterSpout=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_HAIL;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE4;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE3;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE2;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_FORMING;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_FORMING;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE1;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE2;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE3;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE4;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"") || var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.stormType=StormObject.TYPE_WATER;
            so.levelCurIntensityStage=StormObject.STATE_STAGE5;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
            so.alwaysProgresses=true;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            so.levelCurIntensityStage=StormObject.STATE_THUNDER;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            WeatherObjectSandstorm sandstorm=new WeatherObjectSandstorm(wm);
            Vec3 pos=new Vec3(posVec.x,world.getHeight(new BlockPos(posVec.x,0,posVec.z)).getY() + 1,posVec.z);
            float angle=wm.getWindManager().getWindAngleForClouds();
            double vecX=-Math.sin(Math.toRadians(angle));
            double vecZ=Math.cos(Math.toRadians(angle));
            double speed=150D;
            pos.xCoord-=vecX * speed;
            pos.zCoord-=vecZ * speed;
            sandstorm.initFirstTime();
            sandstorm.initSandstormSpawn(pos);
            wm.addStormObject(sandstorm);
            wm.syncStormNew(sandstorm);
            spawnCloudStorm=false;
            wm.windMan.startHighWindEvent();
            wm.windMan.lowWindTimer=0;
          }
 else           if (var2[2].equalsIgnoreCase(""String_Node_Str"")) {
            boolean spawned=wm.trySpawnSandstormNearPos(world,new Vec3(posVec));
            spawnCloudStorm=false;
            if (!spawned) {
              sendCommandSenderMsg(var1,""String_Node_Str"");
              return;
            }
 else {
              wm.windMan.startHighWindEvent();
              wm.windMan.lowWindTimer=0;
            }
          }
          if (var2.length > 3) {
            if (var2[3].contains(""String_Node_Str"") || var2[3].contains(""String_Node_Str"")) {
              so.alwaysProgresses=true;
            }
          }
          if (spawnCloudStorm) {
            so.initFirstTime();
            wm.addStormObject(so);
            wm.syncStormNew(so);
          }
          sendCommandSenderMsg(var1,""String_Node_Str"" + var2[2] + ""String_Node_Str""+ (so.alwaysProgresses ? ""String_Node_Str"" : ""String_Node_Str""));
        }
 else {
          sendCommandSenderMsg(var1,helpMsgStorm);
        }
      }
 else       if (var2[1].equals(""String_Node_Str"")) {
        sendCommandSenderMsg(var1,helpMsgStorm);
      }
 else {
        sendCommandSenderMsg(var1,helpMsgStorm);
      }
    }
 else     if (var2[0].equals(""String_Node_Str"") && player != null) {
      WeatherUtilBlock.floodAreaWithLayerableBlock(player.world,new Vec3(player.posX,player.posY,player.posZ),player.rotationYawHead,1,1,CommonProxy.blockSandLayer,30);
    }
 else     if (var2[0].equals(""String_Node_Str"")) {
      if (var2[1].equals(""String_Node_Str"")) {
        boolean doHighOn=false;
        boolean doHighOff=false;
        if (var2.length > 2) {
          if (var2[2].equals(""String_Node_Str"")) {
            doHighOn=true;
          }
 else           if (var2[2].equals(""String_Node_Str"")) {
            doHighOff=true;
          }
        }
 else {
          doHighOn=true;
        }
        WeatherManagerServer wm=ServerTickHandler.getWeatherSystemForDim(dimension);
        if (doHighOn) {
          wm.windMan.startHighWindEvent();
          wm.windMan.lowWindTimer=0;
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else         if (doHighOff) {
          wm.windMan.stopHighWindEvent();
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
 else       if (var2[1].equals(""String_Node_Str"")) {
        boolean doLowOn=false;
        boolean doLowOff=false;
        if (var2.length > 2) {
          if (var2[2].equals(""String_Node_Str"")) {
            doLowOn=true;
          }
 else           if (var2[2].equals(""String_Node_Str"")) {
            doLowOff=true;
          }
        }
 else {
          doLowOn=true;
        }
        WeatherManagerServer wm=ServerTickHandler.getWeatherSystemForDim(dimension);
        if (doLowOn) {
          wm.windMan.startLowWindEvent();
          wm.windMan.lowWindTimer=0;
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
 else         if (doLowOff) {
          wm.windMan.stopLowWindEvent();
          sendCommandSenderMsg(var1,""String_Node_Str"");
        }
      }
    }
 else {
      sendCommandSenderMsg(var1,helpMsgStorm);
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"");
    sendCommandSenderMsg(var1,helpMsgStorm);
    ex.printStackTrace();
  }
}",0.9984667279975468
81846,"public void init(){
  tab=new CreativeTabWeather(""String_Node_Str"");
  WeatherUtil.doBlockList();
  WeatherUtilConfig.processLists();
  SoundRegistry.init();
  addMapping(EntityIceBall.class,""String_Node_Str"",0,128,5,true);
  addMapping(EntityMovingBlock.class,""String_Node_Str"",1,128,5,true);
  addMapping(EntityLightningBolt.class,""String_Node_Str"",2,512,5,true);
  addMapping(EntityLightningBoltCustom.class,""String_Node_Str"",2,512,5,true);
  registerBlocks(null);
  registerItems(null);
  if (!ConfigMisc.Item_WeatherItemNoRecipe)   GameRegistry.addRecipe(new ItemStack(itemWeatherRecipe,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.REDSTONE,'I',Items.GOLD_INGOT,'X',Items.IRON_INGOT});
  if (!ConfigMisc.Block_SensorNoRecipe)   GameRegistry.addRecipe(new ItemStack(blockTSensor,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.REDSTONE,'I',itemWeatherRecipe,'X',Items.IRON_INGOT});
  if (!ConfigMisc.Block_SirenNoRecipe)   GameRegistry.addRecipe(new ItemStack(blockTSiren,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.REDSTONE,'I',blockTSensor,'X',Items.IRON_INGOT});
  if (!ConfigMisc.Block_WindVaneNoRecipe)   GameRegistry.addRecipe(new ItemStack(blockWindVane,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.REDSTONE,'X',itemWeatherRecipe});
  if (!ConfigMisc.Block_AnemometerNoRecipe)   GameRegistry.addRecipe(new ItemStack(blockAnemometer,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.REDSTONE,'X',itemWeatherRecipe});
  if (!ConfigMisc.Block_WeatherForecastNoRecipe)   GameRegistry.addRecipe(new ItemStack(blockWeatherForecast,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.REDSTONE,'I',Items.COMPASS,'X',itemWeatherRecipe});
  if (!ConfigMisc.Block_WeatherMachineNoRecipe)   GameRegistry.addRecipe(new ItemStack(blockWeatherMachine,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.REDSTONE,'I',Items.DIAMOND,'X',itemWeatherRecipe});
  if (!ConfigMisc.Block_WeatherDeflectorNoRecipe)   GameRegistry.addRecipe(new ItemStack(blockWeatherDeflector,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.REDSTONE,'I',itemWeatherRecipe,'X',Items.IRON_INGOT});
  if (!ConfigMisc.Block_SandLayerNoRecipe)   GameRegistry.addRecipe(new ItemStack(itemSandLayer,64),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Blocks.SAND,'I',itemWeatherRecipe});
  if (!ConfigMisc.Block_SandNoRecipe)   GameRegistry.addRecipe(new ItemStack(Blocks.SAND,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',itemSandLayer});
  if (!ConfigMisc.Item_PocketSandNoRecipe)   GameRegistry.addRecipe(new ItemStack(itemPocketSand,8),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',itemSandLayer,'I',itemWeatherRecipe});
}","public void init(){
  tab=new CreativeTabWeather(""String_Node_Str"");
  WeatherUtil.doBlockList();
  WeatherUtilConfig.processLists();
  SoundRegistry.init();
  addMapping(EntityIceBall.class,""String_Node_Str"",0,128,5,true);
  addMapping(EntityMovingBlock.class,""String_Node_Str"",1,128,5,true);
  addMapping(EntityLightningBolt.class,""String_Node_Str"",2,512,5,true);
  addMapping(EntityLightningBoltCustom.class,""String_Node_Str"",2,512,5,true);
}",0.2644873699851411
81847,"public void addItem(RegistryEvent.Register<Item> event,Item item,String name){
  item.setUnlocalizedName(Weather.modID + ""String_Node_Str"" + name);
  item.setRegistryName(name);
  item.setCreativeTab(tab);
  if (event != null) {
    event.getRegistry().register(item);
  }
 else {
    GameRegistry.register(item);
  }
}","public void addItem(RegistryEvent.Register<Item> event,Item item,String name){
  item.setUnlocalizedName(Weather.modID + ""String_Node_Str"" + name);
  item.setRegistryName(name);
  item.setCreativeTab(tab);
  if (event != null) {
    event.getRegistry().register(item);
  }
 else {
  }
}",0.9454545454545454
81848,"@SubscribeEvent public void registerBlocks(RegistryEvent.Register<Block> event){
  addBlock(event,blockTSensor=(new BlockTSensor()),tornado_sensor);
  addBlock(event,blockTSiren=(new BlockTSiren()),TileEntityTSiren.class,tornado_siren);
  addBlock(event,blockWindVane=(new BlockWindVane()),TileEntityWindVane.class,wind_vane);
  addBlock(event,blockWeatherForecast=(new BlockWeatherForecast()),TileEntityWeatherForecast.class,weather_forecast);
  addBlock(event,blockWeatherMachine=(new BlockWeatherMachine()),TileEntityWeatherMachine.class,weather_machine);
  addBlock(event,blockWeatherDeflector=(new BlockWeatherDeflector()),TileEntityWeatherDeflector.class,weather_deflector);
  addBlock(event,blockAnemometer=(new BlockAnemometer()),TileEntityAnemometer.class,anemometer);
  addBlock(event,blockSandLayer=(new BlockSandLayer()),sand_layer,false);
}","@SubscribeEvent public static void registerBlocks(RegistryEvent.Register<Block> event){
  Weather.proxy.addBlock(event,blockTSensor=(new BlockTSensor()),tornado_sensor);
  Weather.proxy.addBlock(event,blockTSiren=(new BlockTSiren()),TileEntityTSiren.class,tornado_siren);
  Weather.proxy.addBlock(event,blockWindVane=(new BlockWindVane()),TileEntityWindVane.class,wind_vane);
  Weather.proxy.addBlock(event,blockWeatherForecast=(new BlockWeatherForecast()),TileEntityWeatherForecast.class,weather_forecast);
  Weather.proxy.addBlock(event,blockWeatherMachine=(new BlockWeatherMachine()),TileEntityWeatherMachine.class,weather_machine);
  Weather.proxy.addBlock(event,blockWeatherDeflector=(new BlockWeatherDeflector()),TileEntityWeatherDeflector.class,weather_deflector);
  Weather.proxy.addBlock(event,blockAnemometer=(new BlockAnemometer()),TileEntityAnemometer.class,anemometer);
  Weather.proxy.addBlock(event,blockSandLayer=(new BlockSandLayer()),sand_layer,false);
}",0.9347945205479452
81849,"public void addBlock(RegistryEvent.Register<Block> event,Block parBlock,String unlocalizedName,boolean creativeTab){
  parBlock.setUnlocalizedName(Weather.modID + ""String_Node_Str"" + unlocalizedName);
  parBlock.setRegistryName(unlocalizedName);
  if (creativeTab) {
    parBlock.setCreativeTab(tab);
  }
 else {
    parBlock.setCreativeTab(null);
  }
  if (event != null) {
    event.getRegistry().register(parBlock);
  }
 else {
    GameRegistry.register(parBlock);
  }
  GameRegistry.register(new ItemBlock(parBlock),parBlock.getRegistryName());
}","public void addBlock(RegistryEvent.Register<Block> event,Block parBlock,String unlocalizedName,boolean creativeTab){
  parBlock.setUnlocalizedName(Weather.modID + ""String_Node_Str"" + unlocalizedName);
  parBlock.setRegistryName(unlocalizedName);
  if (creativeTab) {
    parBlock.setCreativeTab(tab);
  }
 else {
    parBlock.setCreativeTab(null);
  }
  if (event != null) {
    event.getRegistry().register(parBlock);
  }
 else {
  }
}",0.8843813387423936
81850,"@SubscribeEvent public void registerItems(RegistryEvent.Register<Item> event){
  addItem(event,itemSandLayer=new ItemSandLayer(blockSandLayer),sand_layer_placeable);
  addItem(event,itemWeatherRecipe=new ItemWeatherRecipe(),weather_item);
  addItem(event,itemPocketSand=new ItemPocketSand(),pocket_sand);
}","@SubscribeEvent public static void registerItems(RegistryEvent.Register<Item> event){
  Weather.proxy.addItem(event,itemSandLayer=new ItemSandLayer(blockSandLayer),sand_layer_placeable);
  Weather.proxy.addItem(event,itemWeatherRecipe=new ItemWeatherRecipe(),weather_item);
  Weather.proxy.addItem(event,itemPocketSand=new ItemPocketSand(),pocket_sand);
  event.getRegistry().register(new ItemBlock(blockTSensor).setRegistryName(blockTSensor.getRegistryName()));
  event.getRegistry().register(new ItemBlock(blockTSiren).setRegistryName(blockTSiren.getRegistryName()));
  event.getRegistry().register(new ItemBlock(blockWindVane).setRegistryName(blockWindVane.getRegistryName()));
  event.getRegistry().register(new ItemBlock(blockWeatherForecast).setRegistryName(blockWeatherForecast.getRegistryName()));
  event.getRegistry().register(new ItemBlock(blockWeatherMachine).setRegistryName(blockWeatherMachine.getRegistryName()));
  event.getRegistry().register(new ItemBlock(blockWeatherDeflector).setRegistryName(blockWeatherDeflector.getRegistryName()));
  event.getRegistry().register(new ItemBlock(blockAnemometer).setRegistryName(blockAnemometer.getRegistryName()));
}",0.4140730717185386
81851,"@SubscribeEvent @SideOnly(Side.CLIENT) public void onScreenEvent(RenderGameOverlayEvent.Pre event){
  if (false && event.getType() == RenderGameOverlayEvent.ElementType.ALL) {
    Minecraft mc=Minecraft.getMinecraft();
    float lightLevel=0.4F;
    lightLevel=MathHelper.clamp(lightLevel,0.0F,1.0F);
    WorldBorder worldborder=mc.world.getWorldBorder();
    float f=(float)worldborder.getClosestDistance(mc.player);
    double d0=Math.min(worldborder.getResizeSpeed() * (double)worldborder.getWarningTime() * 1000.0D,Math.abs(worldborder.getTargetSize() - worldborder.getDiameter()));
    double d1=Math.max((double)worldborder.getWarningDistance(),d0);
    if ((double)f < d1) {
      f=1.0F - (float)((double)f / d1);
    }
 else {
      f=0.0F;
    }
    float prevVignetteBrightness=lightLevel;
    GlStateManager.disableDepth();
    GlStateManager.depthMask(false);
    GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.ZERO,GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR,GlStateManager.SourceFactor.ONE,GlStateManager.DestFactor.ZERO);
    if (f > 0.0F) {
      GlStateManager.color(0.0F,f,f,1.0F);
    }
 else {
      GlStateManager.color(prevVignetteBrightness,prevVignetteBrightness,prevVignetteBrightness,1.0F);
    }
    ScaledResolution scaledRes=new ScaledResolution(mc);
    GlStateManager.enableBlend();
    mc.getTextureManager().bindTexture(new ResourceLocation(""String_Node_Str""));
    Tessellator tessellator=Tessellator.getInstance();
    VertexBuffer vertexbuffer=tessellator.getBuffer();
    vertexbuffer.begin(7,DefaultVertexFormats.POSITION_TEX);
    vertexbuffer.pos(0.0D,(double)scaledRes.getScaledHeight() * scaledRes.getScaleFactor() * 1D,-90.0D).tex(0.0D,1.0D).endVertex();
    vertexbuffer.pos((double)scaledRes.getScaledWidth() * scaledRes.getScaleFactor(),(double)scaledRes.getScaledHeight() * scaledRes.getScaleFactor(),-90.0D).tex(1.0D,1.0D).endVertex();
    vertexbuffer.pos((double)scaledRes.getScaledWidth() * scaledRes.getScaleFactor(),0.0D,-90.0D).tex(1.0D,0.0D).endVertex();
    vertexbuffer.pos(0.0D,0.0D,-90.0D).tex(0.0D,0.0D).endVertex();
    tessellator.draw();
    GlStateManager.depthMask(true);
    GlStateManager.enableDepth();
    GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
    GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA,GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA,GlStateManager.SourceFactor.ONE,GlStateManager.DestFactor.ZERO);
  }
}","@SubscribeEvent @SideOnly(Side.CLIENT) public void onScreenEvent(RenderGameOverlayEvent.Pre event){
  if (false && event.getType() == RenderGameOverlayEvent.ElementType.ALL) {
    Minecraft mc=Minecraft.getMinecraft();
    float lightLevel=0.4F;
    lightLevel=MathHelper.clamp(lightLevel,0.0F,1.0F);
    WorldBorder worldborder=mc.world.getWorldBorder();
    float f=(float)worldborder.getClosestDistance(mc.player);
    double d0=Math.min(worldborder.getResizeSpeed() * (double)worldborder.getWarningTime() * 1000.0D,Math.abs(worldborder.getTargetSize() - worldborder.getDiameter()));
    double d1=Math.max((double)worldborder.getWarningDistance(),d0);
    if ((double)f < d1) {
      f=1.0F - (float)((double)f / d1);
    }
 else {
      f=0.0F;
    }
    float prevVignetteBrightness=lightLevel;
    GlStateManager.disableDepth();
    GlStateManager.depthMask(false);
    GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.ZERO,GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR,GlStateManager.SourceFactor.ONE,GlStateManager.DestFactor.ZERO);
    if (f > 0.0F) {
      GlStateManager.color(0.0F,f,f,1.0F);
    }
 else {
      GlStateManager.color(prevVignetteBrightness,prevVignetteBrightness,prevVignetteBrightness,1.0F);
    }
    ScaledResolution scaledRes=new ScaledResolution(mc);
    GlStateManager.enableBlend();
    mc.getTextureManager().bindTexture(new ResourceLocation(""String_Node_Str""));
    Tessellator tessellator=Tessellator.getInstance();
    BufferBuilder vertexbuffer=tessellator.getBuffer();
    vertexbuffer.begin(7,DefaultVertexFormats.POSITION_TEX);
    vertexbuffer.pos(0.0D,(double)scaledRes.getScaledHeight() * scaledRes.getScaleFactor() * 1D,-90.0D).tex(0.0D,1.0D).endVertex();
    vertexbuffer.pos((double)scaledRes.getScaledWidth() * scaledRes.getScaleFactor(),(double)scaledRes.getScaledHeight() * scaledRes.getScaleFactor(),-90.0D).tex(1.0D,1.0D).endVertex();
    vertexbuffer.pos((double)scaledRes.getScaledWidth() * scaledRes.getScaleFactor(),0.0D,-90.0D).tex(1.0D,0.0D).endVertex();
    vertexbuffer.pos(0.0D,0.0D,-90.0D).tex(0.0D,0.0D).endVertex();
    tessellator.draw();
    GlStateManager.depthMask(true);
    GlStateManager.enableDepth();
    GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
    GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA,GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA,GlStateManager.SourceFactor.ONE,GlStateManager.DestFactor.ZERO);
  }
}",0.997327852004111
81852,"@SubscribeEvent public void onPacketFromClient(FMLNetworkEvent.ServerCustomPacketEvent event){
  final EntityPlayerMP entP=((NetHandlerPlayServer)event.getHandler()).playerEntity;
  try {
    final NBTTagCompound nbt=PacketHelper.readNBTTagCompound(event.getPacket().payload());
    final String packetCommand=nbt.getString(""String_Node_Str"");
    final String command=nbt.getString(""String_Node_Str"");
    Weather.dbg(""String_Node_Str"" + packetCommand + ""String_Node_Str""+ command);
    entP.mcServer.addScheduledTask(new Runnable(){
      @Override public void run(){
        if (packetCommand.equals(""String_Node_Str"")) {
          if (command.equals(""String_Node_Str"")) {
            ServerTickHandler.playerClientRequestsFullSync(entP);
          }
        }
 else         if (packetCommand.equals(""String_Node_Str"")) {
          Weather.dbg(""String_Node_Str"" + command);
          if (command.equals(""String_Node_Str"")) {
            Weather.dbg(""String_Node_Str"");
            NBTTagCompound sendNBT=new NBTTagCompound();
            sendNBT.setString(""String_Node_Str"",""String_Node_Str"");
            sendNBT.setString(""String_Node_Str"",""String_Node_Str"");
            sendNBT.setBoolean(""String_Node_Str"",true);
            sendNBT.setBoolean(""String_Node_Str"",FMLCommonHandler.instance().getMinecraftServerInstance().isSinglePlayer() || FMLCommonHandler.instance().getMinecraftServerInstance().getPlayerList().canSendCommands(entP.getGameProfile()));
            sendNBT.setTag(""String_Node_Str"",WeatherUtilConfig.nbtServerData);
            sendNBT.setTag(""String_Node_Str"",WeatherUtilConfig.createNBTDimensionListing());
            Weather.eventChannel.sendTo(PacketHelper.getNBTPacket(sendNBT,Weather.eventChannelName),entP);
          }
 else           if (command.equals(""String_Node_Str"")) {
            if (FMLCommonHandler.instance().getMinecraftServerInstance().isSinglePlayer() || FMLCommonHandler.instance().getMinecraftServerInstance().getPlayerList().canSendCommands(entP.getGameProfile())) {
              WeatherUtilConfig.nbtReceiveClientData(nbt.getCompoundTag(""String_Node_Str""));
            }
          }
        }
      }
    }
);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","@SubscribeEvent public void onPacketFromClient(FMLNetworkEvent.ServerCustomPacketEvent event){
  final EntityPlayerMP entP=((NetHandlerPlayServer)event.getHandler()).player;
  try {
    final NBTTagCompound nbt=PacketHelper.readNBTTagCompound(event.getPacket().payload());
    final String packetCommand=nbt.getString(""String_Node_Str"");
    final String command=nbt.getString(""String_Node_Str"");
    Weather.dbg(""String_Node_Str"" + packetCommand + ""String_Node_Str""+ command);
    entP.mcServer.addScheduledTask(new Runnable(){
      @Override public void run(){
        if (packetCommand.equals(""String_Node_Str"")) {
          if (command.equals(""String_Node_Str"")) {
            ServerTickHandler.playerClientRequestsFullSync(entP);
          }
        }
 else         if (packetCommand.equals(""String_Node_Str"")) {
          Weather.dbg(""String_Node_Str"" + command);
          if (command.equals(""String_Node_Str"")) {
            Weather.dbg(""String_Node_Str"");
            NBTTagCompound sendNBT=new NBTTagCompound();
            sendNBT.setString(""String_Node_Str"",""String_Node_Str"");
            sendNBT.setString(""String_Node_Str"",""String_Node_Str"");
            sendNBT.setBoolean(""String_Node_Str"",true);
            sendNBT.setBoolean(""String_Node_Str"",FMLCommonHandler.instance().getMinecraftServerInstance().isSinglePlayer() || FMLCommonHandler.instance().getMinecraftServerInstance().getPlayerList().canSendCommands(entP.getGameProfile()));
            sendNBT.setTag(""String_Node_Str"",WeatherUtilConfig.nbtServerData);
            sendNBT.setTag(""String_Node_Str"",WeatherUtilConfig.createNBTDimensionListing());
            Weather.eventChannel.sendTo(PacketHelper.getNBTPacket(sendNBT,Weather.eventChannelName),entP);
          }
 else           if (command.equals(""String_Node_Str"")) {
            if (FMLCommonHandler.instance().getMinecraftServerInstance().isSinglePlayer() || FMLCommonHandler.instance().getMinecraftServerInstance().getPlayerList().canSendCommands(entP.getGameProfile())) {
              WeatherUtilConfig.nbtReceiveClientData(nbt.getCompoundTag(""String_Node_Str""));
            }
          }
        }
      }
    }
);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.9986492570914004
81853,"public static void onTickInGame(){
  if (FMLCommonHandler.instance() == null || FMLCommonHandler.instance().getMinecraftServerInstance() == null) {
    return;
  }
  World world=FMLCommonHandler.instance().getMinecraftServerInstance().worldServerForDimension(0);
  if (world != null && lastWorld != world) {
    lastWorld=world;
  }
  if (world != null) {
    if (world.getTotalWorldTime() % ConfigMisc.Misc_AutoDataSaveIntervalInTicks == 0) {
      Weather.writeOutData(false);
    }
  }
  World worlds[]=DimensionManager.getWorlds();
  for (int i=0; i < worlds.length; i++) {
    if (!lookupDimToWeatherMan.containsKey(worlds[i].provider.getDimension())) {
      if (WeatherUtilConfig.listDimensionsWeather.contains(worlds[i].provider.getDimension())) {
        addWorldToWeather(worlds[i].provider.getDimension());
      }
    }
    WeatherManagerServer wms=lookupDimToWeatherMan.get(worlds[i].provider.getDimension());
    if (wms != null) {
      lookupDimToWeatherMan.get(worlds[i].provider.getDimension()).tick();
    }
  }
  boolean testRainRequest=false;
  if (testRainRequest) {
    List<IMCMessage> listMsgs=new ArrayList<IMCMessage>();
    listMsgs=FMLInterModComms.fetchRuntimeMessages(Weather.modID);
    for (int i=0; i < listMsgs.size(); i++) {
      if (listMsgs.get(i).key.equals(""String_Node_Str"")) {
        NBTTagCompound nbt=listMsgs.get(i).getNBTValue();
        String replyMod=nbt.getString(""String_Node_Str"");
        nbt.setBoolean(""String_Node_Str"",true);
        FMLInterModComms.sendRuntimeMessage(replyMod,replyMod,""String_Node_Str"",nbt);
      }
    }
  }
  boolean debugIMC=false;
  if (debugIMC) {
    try {
      List<IMCMessage> listMsgs=new ArrayList<IMCMessage>();
      listMsgs=FMLInterModComms.fetchRuntimeMessages(Weather.modID);
      for (int i=0; i < listMsgs.size(); i++) {
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  boolean testCustomLightning=false;
  if (testCustomLightning) {
    if (world.getTotalWorldTime() % 20 == 0) {
      EntityPlayer player=world.getClosestPlayer(0,0,0,-1,false);
      if (player != null) {
        EntityLightningBoltCustom lightning=new EntityLightningBoltCustom(world,player.posX,player.posY,player.posZ);
        world.addWeatherEffect(lightning);
        lookupDimToWeatherMan.get(0).syncLightningNew(lightning,true);
      }
    }
  }
  boolean derp=false;
  if (derp) {
    if (world.getTotalWorldTime() % 2 == 0) {
      EntityPlayer player=world.getClosestPlayer(0,0,0,-1,false);
      if (player != null) {
        ItemStack is=player.getItemStackFromSlot(EntityEquipmentSlot.MAINHAND);
        if (is != null && is.getItem() instanceof ItemSpade) {
          int y=world.getHeight(new BlockPos(player.posX,0,player.posZ)).getY();
          System.out.println(""String_Node_Str"" + y);
          WeatherUtilBlock.fillAgainstWallSmoothly(player.world,new Vec3(player.posX,y + 0.5D,player.posZ),player.rotationYawHead,15,2,CommonProxy.blockSandLayer);
        }
      }
    }
  }
}","public static void onTickInGame(){
  if (FMLCommonHandler.instance() == null || FMLCommonHandler.instance().getMinecraftServerInstance() == null) {
    return;
  }
  World world=FMLCommonHandler.instance().getMinecraftServerInstance().getWorld(0);
  if (world != null && lastWorld != world) {
    lastWorld=world;
  }
  if (world != null) {
    if (world.getTotalWorldTime() % ConfigMisc.Misc_AutoDataSaveIntervalInTicks == 0) {
      Weather.writeOutData(false);
    }
  }
  World worlds[]=DimensionManager.getWorlds();
  for (int i=0; i < worlds.length; i++) {
    if (!lookupDimToWeatherMan.containsKey(worlds[i].provider.getDimension())) {
      if (WeatherUtilConfig.listDimensionsWeather.contains(worlds[i].provider.getDimension())) {
        addWorldToWeather(worlds[i].provider.getDimension());
      }
    }
    WeatherManagerServer wms=lookupDimToWeatherMan.get(worlds[i].provider.getDimension());
    if (wms != null) {
      lookupDimToWeatherMan.get(worlds[i].provider.getDimension()).tick();
    }
  }
  boolean testRainRequest=false;
  if (testRainRequest) {
    List<IMCMessage> listMsgs=new ArrayList<IMCMessage>();
    listMsgs=FMLInterModComms.fetchRuntimeMessages(Weather.modID);
    for (int i=0; i < listMsgs.size(); i++) {
      if (listMsgs.get(i).key.equals(""String_Node_Str"")) {
        NBTTagCompound nbt=listMsgs.get(i).getNBTValue();
        String replyMod=nbt.getString(""String_Node_Str"");
        nbt.setBoolean(""String_Node_Str"",true);
        FMLInterModComms.sendRuntimeMessage(replyMod,replyMod,""String_Node_Str"",nbt);
      }
    }
  }
  boolean debugIMC=false;
  if (debugIMC) {
    try {
      List<IMCMessage> listMsgs=new ArrayList<IMCMessage>();
      listMsgs=FMLInterModComms.fetchRuntimeMessages(Weather.modID);
      for (int i=0; i < listMsgs.size(); i++) {
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  boolean testCustomLightning=false;
  if (testCustomLightning) {
    if (world.getTotalWorldTime() % 20 == 0) {
      EntityPlayer player=world.getClosestPlayer(0,0,0,-1,false);
      if (player != null) {
        EntityLightningBoltCustom lightning=new EntityLightningBoltCustom(world,player.posX,player.posY,player.posZ);
        world.addWeatherEffect(lightning);
        lookupDimToWeatherMan.get(0).syncLightningNew(lightning,true);
      }
    }
  }
  boolean derp=false;
  if (derp) {
    if (world.getTotalWorldTime() % 2 == 0) {
      EntityPlayer player=world.getClosestPlayer(0,0,0,-1,false);
      if (player != null) {
        ItemStack is=player.getItemStackFromSlot(EntityEquipmentSlot.MAINHAND);
        if (is != null && is.getItem() instanceof ItemSpade) {
          int y=world.getHeight(new BlockPos(player.posX,0,player.posZ)).getY();
          System.out.println(""String_Node_Str"" + y);
          WeatherUtilBlock.fillAgainstWallSmoothly(player.world,new Vec3(player.posX,y + 0.5D,player.posZ),player.rotationYawHead,15,2,CommonProxy.blockSandLayer);
        }
      }
    }
  }
}",0.9948255716908696
81854,"public static void register(String soundPath){
  ResourceLocation resLoc=new ResourceLocation(Weather.modID,soundPath);
  SoundEvent event=new SoundEvent(resLoc);
  GameRegistry.register(event,resLoc);
  if (lookupStringToEvent.containsKey(soundPath)) {
    System.out.println(""String_Node_Str"" + soundPath);
  }
  lookupStringToEvent.put(soundPath,event);
}","public static void register(String soundPath){
  ResourceLocation resLoc=new ResourceLocation(Weather.modID,soundPath);
  SoundEvent event=new SoundEvent(resLoc).setRegistryName(resLoc);
  ForgeRegistries.SOUND_EVENTS.register(event);
  if (lookupStringToEvent.containsKey(soundPath)) {
    System.out.println(""String_Node_Str"" + soundPath);
  }
  lookupStringToEvent.put(soundPath,event);
}",0.8811748998664887
81855,"public static void tickTestSandstormParticles(){
  Minecraft mc=Minecraft.getMinecraft();
  if (vecWOP == null) {
    particleBehaviorFog=new ParticleBehaviorFogGround(new Vec3(mc.player.posX,mc.player.posY,mc.player.posZ));
    vecWOP=new Vec3d(mc.player.posX,mc.player.posY,mc.player.posZ);
  }
  for (int i=0; i < 0; i++) {
    ParticleTexFX part=new ParticleTexFX(mc.world,vecWOP.xCoord,vecWOP.yCoord,vecWOP.zCoord,0,0,0,ParticleRegistry.cloud256);
    particleBehaviorFog.initParticle(part);
    part.setFacePlayer(false);
    part.spawnAsWeatherEffect();
  }
  boolean derp=false;
  if (derp) {
    IBlockState state=mc.world.getBlockState(new BlockPos(mc.player.posX,mc.player.getEntityBoundingBox().minY - 1,mc.player.posZ));
    int id=Block.getStateId(state);
    id=12520;
    double speed=0.2D;
    Random rand=mc.world.rand;
    mc.world.spawnParticle(EnumParticleTypes.BLOCK_DUST,mc.player.posX,mc.player.posY,mc.player.posZ,(rand.nextDouble() - rand.nextDouble()) * speed,(rand.nextDouble()) * speed * 2D,(rand.nextDouble() - rand.nextDouble()) * speed,id);
  }
}","public static void tickTestSandstormParticles(){
  Minecraft mc=Minecraft.getMinecraft();
  if (vecWOP == null) {
    particleBehaviorFog=new ParticleBehaviorFogGround(new Vec3(mc.player.posX,mc.player.posY,mc.player.posZ));
    vecWOP=new Vec3d(mc.player.posX,mc.player.posY,mc.player.posZ);
  }
  for (int i=0; i < 0; i++) {
    ParticleTexFX part=new ParticleTexFX(mc.world,vecWOP.x,vecWOP.y,vecWOP.z,0,0,0,ParticleRegistry.cloud256);
    particleBehaviorFog.initParticle(part);
    part.setFacePlayer(false);
    part.spawnAsWeatherEffect();
  }
  boolean derp=false;
  if (derp) {
    IBlockState state=mc.world.getBlockState(new BlockPos(mc.player.posX,mc.player.getEntityBoundingBox().minY - 1,mc.player.posZ));
    int id=Block.getStateId(state);
    id=12520;
    double speed=0.2D;
    Random rand=mc.world.rand;
    mc.world.spawnParticle(EnumParticleTypes.BLOCK_DUST,mc.player.posX,mc.player.posY,mc.player.posZ,(rand.nextDouble() - rand.nextDouble()) * speed,(rand.nextDouble()) * speed * 2D,(rand.nextDouble() - rand.nextDouble()) * speed,id);
  }
}",0.9929939280709948
81856,"@Override public void addBlock(RegistryEvent.Register<Block> event,Block parBlock,String name,boolean creativeTab){
  super.addBlock(event,parBlock,name,creativeTab);
  addItemModel(Item.getItemFromBlock(parBlock),0,new ModelResourceLocation(Weather.modID + ""String_Node_Str"" + name,""String_Node_Str""));
}","@Override public void addBlock(RegistryEvent.Register<Block> event,Block parBlock,String name,boolean creativeTab){
  super.addBlock(event,parBlock,name,creativeTab);
}",0.7103594080338267
81857,"@SubscribeEvent public static void registerItems(RegistryEvent.Register<Item> event){
  Weather.proxy.addItem(event,itemSandLayer=new ItemSandLayer(blockSandLayer),sand_layer_placeable);
  Weather.proxy.addItem(event,itemWeatherRecipe=new ItemWeatherRecipe(),weather_item);
  Weather.proxy.addItem(event,itemPocketSand=new ItemPocketSand(),pocket_sand);
  event.getRegistry().register(new ItemBlock(blockTSensor).setRegistryName(blockTSensor.getRegistryName()));
  event.getRegistry().register(new ItemBlock(blockTSiren).setRegistryName(blockTSiren.getRegistryName()));
  event.getRegistry().register(new ItemBlock(blockWindVane).setRegistryName(blockWindVane.getRegistryName()));
  event.getRegistry().register(new ItemBlock(blockWeatherForecast).setRegistryName(blockWeatherForecast.getRegistryName()));
  event.getRegistry().register(new ItemBlock(blockWeatherMachine).setRegistryName(blockWeatherMachine.getRegistryName()));
  event.getRegistry().register(new ItemBlock(blockWeatherDeflector).setRegistryName(blockWeatherDeflector.getRegistryName()));
  event.getRegistry().register(new ItemBlock(blockAnemometer).setRegistryName(blockAnemometer.getRegistryName()));
}","@SubscribeEvent public static void registerItems(RegistryEvent.Register<Item> event){
  Weather.proxy.addItem(event,itemSandLayer=new ItemSandLayer(blockSandLayer),sand_layer_placeable);
  Weather.proxy.addItem(event,itemWeatherRecipe=new ItemWeatherRecipe(),weather_item);
  Weather.proxy.addItem(event,itemPocketSand=new ItemPocketSand(),pocket_sand);
  Weather.proxy.addItemBlock(event,new ItemBlock(blockTSensor).setRegistryName(blockTSensor.getRegistryName()));
  Weather.proxy.addItemBlock(event,new ItemBlock(blockTSiren).setRegistryName(blockTSiren.getRegistryName()));
  Weather.proxy.addItemBlock(event,new ItemBlock(blockWindVane).setRegistryName(blockWindVane.getRegistryName()));
  Weather.proxy.addItemBlock(event,new ItemBlock(blockWeatherForecast).setRegistryName(blockWeatherForecast.getRegistryName()));
  Weather.proxy.addItemBlock(event,new ItemBlock(blockWeatherMachine).setRegistryName(blockWeatherMachine.getRegistryName()));
  Weather.proxy.addItemBlock(event,new ItemBlock(blockWeatherDeflector).setRegistryName(blockWeatherDeflector.getRegistryName()));
  Weather.proxy.addItemBlock(event,new ItemBlock(blockAnemometer).setRegistryName(blockAnemometer.getRegistryName()));
}",0.8170320404721754
81858,"public void tickParticlePrecipitation(){
  if (ConfigParticle.Particle_RainSnow) {
    EntityPlayer entP=FMLClientHandler.instance().getClient().player;
    if (entP.posY >= StormObject.static_YPos_layer0)     return;
    WeatherManagerClient weatherMan=ClientTickHandler.weatherManager;
    if (weatherMan == null)     return;
    WindManager windMan=weatherMan.getWindManager();
    if (windMan == null)     return;
    float curPrecipVal=getRainStrengthAndControlVisuals(entP);
    float maxPrecip=0.5F;
    int precipitationHeight=entP.world.getPrecipitationHeight(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ))).getY();
    Biome biomegenbase=entP.world.getBiome(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ)));
    World world=entP.world;
    Random rand=entP.world.rand;
    boolean particleTest=false;
    if (particleTest) {
      if (testParticle == null) {
        BlockPos pos=new BlockPos(entP);
        if (canPrecipitateAt(world,pos)) {
          ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.test_texture);
          rain.setSlantParticleToWind(false);
          rain.noExtraParticles=true;
          boolean upward=rand.nextBoolean();
          rain.windWeight=8F;
          rain.setFacePlayer(false);
          rain.setScale(90F + (rand.nextFloat() * 3F));
          rain.setScale(5F);
          rain.setMaxAge(60);
          rain.setGravity(0.0F);
          rain.setTicksFadeInMax(20);
          rain.setAlphaF(0);
          rain.setTicksFadeOutMax(20);
          rain.rotationYaw=0;
          rain.rotationPitch=90;
          rain.setMotionY(-0D);
          rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
          rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
          rain.spawnAsWeatherEffect();
          testParticle=rain;
        }
      }
      if (testParticle != null) {
        testParticle.setPosition(entP.posX + 1,entP.posY,entP.posZ - 4);
        testParticle.rotationPitch=world.getTotalWorldTime() % 360;
        testParticle.rotationYaw=(world.getTotalWorldTime() % 360) * 6;
      }
    }
    if (biomegenbase != null && (biomegenbase.canRain() || biomegenbase.getEnableSnow())) {
      float temperature=biomegenbase.getFloatTemperature(new BlockPos(MathHelper.floor(entP.posX),MathHelper.floor(entP.posY),MathHelper.floor(entP.posZ)));
      double d3;
      float f10;
      curPrecipVal=Math.min(maxPrecip,Math.abs(curPrecipVal));
      curPrecipVal*=1F;
      if (curPrecipVal > 0) {
        int spawnCount;
        int spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate);
        int safetyCutout=100;
        if (entP.world.getBiomeProvider().getTemperatureAtHeight(temperature,precipitationHeight) >= 0.15F) {
          spawnCount=0;
          int spawnAreaSize=20;
          for (int i=0; i < safetyCutout; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            if (canPrecipitateAt(world,pos)) {
              ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.rain_white);
              rain.setKillWhenUnderTopmostBlock(true);
              rain.setTicksFadeOutMaxOnDeath(5);
              rain.setDontRenderUnderTopmostBlock(true);
              rain.setExtraParticlesBaseAmount(15);
              rain.setSlantParticleToWind(true);
              rain.windWeight=1F;
              rain.setFacePlayer(true);
              rain.setScale(2F);
              rain.isTransparent=true;
              rain.setGravity(2.5F);
              rain.setMaxAge(50);
              rain.setTicksFadeInMax(5);
              rain.setAlphaF(0);
              rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
              rain.setMotionY(-0.5D);
              rain.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(rain);
              spawnCount++;
              if (spawnCount >= spawnNeed) {
                break;
              }
            }
          }
          if (world.getTotalWorldTime() % 60 == 0) {
          }
          boolean groundSplash=false;
          boolean downfall=false;
          spawnAreaSize=20;
          for (int i=0; groundSplash == true && i < 30F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(15),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            pos=world.getPrecipitationHeight(pos).add(0,1,0);
            if (canPrecipitateAt(world,pos)) {
              ParticleTexFX rain=new ParticleTexFX(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.cloud256_6);
              rain.setCanCollide(true);
              boolean upward=rand.nextBoolean();
              rain.windWeight=20F;
              rain.setFacePlayer(upward);
              rain.setFacePlayer(false);
              rain.setScale(3F + (rand.nextFloat() * 3F));
              rain.setMaxAge(15);
              rain.setGravity(-0.0F);
              rain.setTicksFadeInMax(0);
              rain.setAlphaF(0);
              rain.setTicksFadeOutMax(4);
              rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
              rain.rotationPitch=90;
              rain.setMotionY(0D);
              rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
              rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
              rain.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(rain);
            }
          }
          spawnAreaSize=20;
          for (int i=0; downfall == true && i < 2F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            if (entP.getDistanceSq(pos) < 10D * 10D)             continue;
            if (canPrecipitateAt(world,pos)) {
              ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.downfall3);
              rain.setKillWhenUnderTopmostBlock(true);
              rain.setTicksFadeOutMaxOnDeath(5);
              rain.setSlantParticleToWind(true);
              rain.noExtraParticles=true;
              boolean upward=rand.nextBoolean();
              rain.windWeight=8F;
              rain.setFacePlayer(true);
              rain.setFacePlayer(false);
              rain.setScale(90F + (rand.nextFloat() * 3F));
              rain.setMaxAge(60);
              rain.setGravity(0.35F);
              rain.setTicksFadeInMax(20);
              rain.setAlphaF(0);
              rain.setTicksFadeOutMax(20);
              rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
              rain.rotationPitch=90;
              rain.rotationPitch=0;
              rain.setMotionY(-0.3D);
              rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
              rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
              rain.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(rain);
            }
          }
        }
 else {
          spawnCount=0;
          spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate);
          int spawnAreaSize=50;
          for (int i=0; i < safetyCutout; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            if (canPrecipitateAt(world,pos)) {
              ParticleTexExtraRender snow=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.snow);
              snow.setKillWhenUnderTopmostBlock(true);
              snow.setTicksFadeOutMaxOnDeath(5);
              snow.setDontRenderUnderTopmostBlock(true);
              snow.setExtraParticlesBaseAmount(10);
              snow.setMotionY(-0.1D);
              snow.setScale(1.3F);
              snow.setGravity(0.1F);
              snow.windWeight=0.2F;
              snow.setMaxAge(40);
              snow.setFacePlayer(false);
              snow.setTicksFadeInMax(5);
              snow.setAlphaF(0);
              snow.setTicksFadeOutMax(5);
              snow.rotationYaw=snow.getWorld().rand.nextInt(360) - 180F;
              snow.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(snow);
              spawnCount++;
              if (spawnCount >= spawnNeed) {
                break;
              }
            }
          }
        }
      }
    }
  }
}","public void tickParticlePrecipitation(){
  if (ConfigParticle.Particle_RainSnow) {
    EntityPlayer entP=FMLClientHandler.instance().getClient().player;
    if (entP.posY >= StormObject.static_YPos_layer0)     return;
    WeatherManagerClient weatherMan=ClientTickHandler.weatherManager;
    if (weatherMan == null)     return;
    WindManager windMan=weatherMan.getWindManager();
    if (windMan == null)     return;
    float curPrecipVal=getRainStrengthAndControlVisuals(entP);
    float maxPrecip=0.5F;
    int precipitationHeight=entP.world.getPrecipitationHeight(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ))).getY();
    Biome biomegenbase=entP.world.getBiome(new BlockPos(MathHelper.floor(entP.posX),0,MathHelper.floor(entP.posZ)));
    World world=entP.world;
    Random rand=entP.world.rand;
    boolean particleTest=false;
    if (particleTest) {
      if (testParticle == null) {
        BlockPos pos=new BlockPos(entP);
        if (canPrecipitateAt(world,pos)) {
          ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.test_texture);
          rain.setSlantParticleToWind(false);
          rain.noExtraParticles=true;
          boolean upward=rand.nextBoolean();
          rain.windWeight=8F;
          rain.setFacePlayer(false);
          rain.setScale(90F + (rand.nextFloat() * 3F));
          rain.setScale(5F);
          rain.setMaxAge(60);
          rain.setGravity(0.0F);
          rain.setTicksFadeInMax(20);
          rain.setAlphaF(0);
          rain.setTicksFadeOutMax(20);
          rain.rotationYaw=0;
          rain.rotationPitch=90;
          rain.setMotionY(-0D);
          rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
          rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
          rain.spawnAsWeatherEffect();
          testParticle=rain;
        }
      }
      if (testParticle != null) {
        testParticle.setPosition(entP.posX + 1,entP.posY,entP.posZ - 4);
        testParticle.rotationPitch=world.getTotalWorldTime() % 360;
        testParticle.rotationYaw=(world.getTotalWorldTime() % 360) * 6;
      }
    }
    if (biomegenbase != null && (biomegenbase.canRain() || biomegenbase.getEnableSnow())) {
      float temperature=biomegenbase.getFloatTemperature(new BlockPos(MathHelper.floor(entP.posX),MathHelper.floor(entP.posY),MathHelper.floor(entP.posZ)));
      double d3;
      float f10;
      curPrecipVal=Math.min(maxPrecip,Math.abs(curPrecipVal));
      curPrecipVal*=1F;
      if (curPrecipVal > 0) {
        int spawnCount;
        int spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate);
        int safetyCutout=100;
        if (entP.world.getBiomeProvider().getTemperatureAtHeight(temperature,precipitationHeight) >= 0.15F) {
          spawnCount=0;
          int spawnAreaSize=20;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.rain_white);
                rain.setKillWhenUnderTopmostBlock(true);
                rain.setTicksFadeOutMaxOnDeath(5);
                rain.setDontRenderUnderTopmostBlock(true);
                rain.setExtraParticlesBaseAmount(15);
                rain.setSlantParticleToWind(true);
                rain.windWeight=1F;
                rain.setFacePlayer(true);
                rain.setScale(2F);
                rain.isTransparent=true;
                rain.setGravity(2.5F);
                rain.setMaxAge(50);
                rain.setTicksFadeInMax(5);
                rain.setAlphaF(0);
                rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
                rain.setMotionY(-0.5D);
                rain.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(rain);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
          if (world.getTotalWorldTime() % 60 == 0) {
          }
          boolean groundSplash=false;
          boolean downfall=false;
          spawnAreaSize=20;
          for (int i=0; groundSplash == true && i < 30F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(15),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            pos=world.getPrecipitationHeight(pos).add(0,1,0);
            if (canPrecipitateAt(world,pos)) {
              ParticleTexFX rain=new ParticleTexFX(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.cloud256_6);
              rain.setCanCollide(true);
              boolean upward=rand.nextBoolean();
              rain.windWeight=20F;
              rain.setFacePlayer(upward);
              rain.setFacePlayer(false);
              rain.setScale(3F + (rand.nextFloat() * 3F));
              rain.setMaxAge(15);
              rain.setGravity(-0.0F);
              rain.setTicksFadeInMax(0);
              rain.setAlphaF(0);
              rain.setTicksFadeOutMax(4);
              rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
              rain.rotationPitch=90;
              rain.setMotionY(0D);
              rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
              rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
              rain.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(rain);
            }
          }
          spawnAreaSize=20;
          for (int i=0; downfall == true && i < 2F * curPrecipVal * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            if (entP.getDistanceSq(pos) < 10D * 10D)             continue;
            if (canPrecipitateAt(world,pos)) {
              ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.world,pos.getX() + rand.nextFloat(),pos.getY() - 1 + 0.01D,pos.getZ() + rand.nextFloat(),0D,0D,0D,ParticleRegistry.downfall3);
              rain.setKillWhenUnderTopmostBlock(true);
              rain.setTicksFadeOutMaxOnDeath(5);
              rain.setSlantParticleToWind(true);
              rain.noExtraParticles=true;
              boolean upward=rand.nextBoolean();
              rain.windWeight=8F;
              rain.setFacePlayer(true);
              rain.setFacePlayer(false);
              rain.setScale(90F + (rand.nextFloat() * 3F));
              rain.setMaxAge(60);
              rain.setGravity(0.35F);
              rain.setTicksFadeInMax(20);
              rain.setAlphaF(0);
              rain.setTicksFadeOutMax(20);
              rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
              rain.rotationPitch=90;
              rain.rotationPitch=0;
              rain.setMotionY(-0.3D);
              rain.setMotionX((rand.nextFloat() - 0.5F) * 0.01F);
              rain.setMotionZ((rand.nextFloat() - 0.5F) * 0.01F);
              rain.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(rain);
            }
          }
        }
 else {
          spawnCount=0;
          spawnNeed=(int)(curPrecipVal * 40F * ConfigParticle.Precipitation_Particle_effect_rate);
          int spawnAreaSize=50;
          if (spawnNeed > 0) {
            for (int i=0; i < safetyCutout; i++) {
              BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(25),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
              if (canPrecipitateAt(world,pos)) {
                ParticleTexExtraRender snow=new ParticleTexExtraRender(entP.world,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.snow);
                snow.setKillWhenUnderTopmostBlock(true);
                snow.setTicksFadeOutMaxOnDeath(5);
                snow.setDontRenderUnderTopmostBlock(true);
                snow.setExtraParticlesBaseAmount(10);
                snow.setMotionY(-0.1D);
                snow.setScale(1.3F);
                snow.setGravity(0.1F);
                snow.windWeight=0.2F;
                snow.setMaxAge(40);
                snow.setFacePlayer(false);
                snow.setTicksFadeInMax(5);
                snow.setAlphaF(0);
                snow.setTicksFadeOutMax(5);
                snow.rotationYaw=snow.getWorld().rand.nextInt(360) - 180F;
                snow.spawnAsWeatherEffect();
                ClientTickHandler.weatherManager.addWeatheredParticle(snow);
                spawnCount++;
                if (spawnCount >= spawnNeed) {
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
}",0.9897039897039897
81859,"public void drawTexturedModalRect(int x,int y,int textureX,int textureY,int width,int height){
  float f=0.00390625F / 2F;
  float f1=0.00390625F / 2F;
  Tessellator tessellator=Tessellator.getInstance();
  BufferBuilder worldrenderer=tessellator.getBuffer();
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_TEX);
  worldrenderer.pos((double)(x + 0),(double)(y + height),(double)this.zLevel).tex((double)((float)(textureX + 0) * f),(double)((float)(textureY + height) * f1)).endVertex();
  worldrenderer.pos((double)(x + width),(double)(y + height),(double)this.zLevel).tex((double)((float)(textureX + width) * f),(double)((float)(textureY + height) * f1)).endVertex();
  worldrenderer.pos((double)(x + width),(double)(y + 0),(double)this.zLevel).tex((double)((float)(textureX + width) * f),(double)((float)(textureY + 0) * f1)).endVertex();
  worldrenderer.pos((double)(x + 0),(double)(y + 0),(double)this.zLevel).tex((double)((float)(textureX + 0) * f),(double)((float)(textureY + 0) * f1)).endVertex();
  tessellator.draw();
}","@Override public void drawTexturedModalRect(int x,int y,int textureX,int textureY,int width,int height){
  float f=0.00390625F / 2F;
  float f1=0.00390625F / 2F;
  Tessellator tessellator=Tessellator.getInstance();
  BufferBuilder worldrenderer=tessellator.getBuffer();
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_TEX);
  worldrenderer.pos((double)(x + 0),(double)(y + height),(double)this.zLevel).tex((double)((float)(textureX + 0) * f),(double)((float)(textureY + height) * f1)).endVertex();
  worldrenderer.pos((double)(x + width),(double)(y + height),(double)this.zLevel).tex((double)((float)(textureX + width) * f),(double)((float)(textureY + height) * f1)).endVertex();
  worldrenderer.pos((double)(x + width),(double)(y + 0),(double)this.zLevel).tex((double)((float)(textureX + width) * f),(double)((float)(textureY + 0) * f1)).endVertex();
  worldrenderer.pos((double)(x + 0),(double)(y + 0),(double)this.zLevel).tex((double)((float)(textureX + 0) * f),(double)((float)(textureY + 0) * f1)).endVertex();
  tessellator.draw();
}",0.9951923076923076
81860,"@Override public boolean doesGuiPauseGame(){
  return false;
}","@Override public boolean doesGuiPauseGame(){
  return true;
}",0.943089430894309
81861,"public <T extends GuiButton>T addButton(T p_189646_1_){
  buttonsLookup.put(p_189646_1_.id,p_189646_1_);
  this.buttonList.add(p_189646_1_);
  return p_189646_1_;
}","@Override public <T extends GuiButton>T addButton(T p_189646_1_){
  buttonsLookup.put(p_189646_1_.id,p_189646_1_);
  this.buttonList.add(p_189646_1_);
  return p_189646_1_;
}",0.970414201183432
81862,"@Override public void initGui(){
  super.initGui();
  resetGuiElements();
  xSize=372;
  ySize=250;
  ScaledResolution var8=new ScaledResolution(mc);
  int scaledWidth=var8.getScaledWidth();
  int scaledHeight=var8.getScaledHeight();
  xCenter=scaledWidth / 2;
  yCenter=scaledHeight / 2;
  xStart=xCenter - xSize / 2;
  yStart=yCenter - ySize / 2;
  int guiPadding=8;
  int xStartPadded=xStart + guiPadding - 1;
  int yStartPadded=yStart + guiPadding - 1;
  int btnWidth=80;
  int btnWidthAndPadding=84;
  int btnWidthBool=50;
  int btnHeight=20;
  int btnHeightAndPadding=24;
  int padding=1;
  int btnSpacing=22;
  int yEleSize2=44;
  int xStartPadded2=xStartPadded + 168;
  int yStartPadded2=yStartPadded + 30;
  int yStartPadded3=yStartPadded2 + 20;
  int btnDimIndex=btnDimIndexStart;
  addButton(new GuiButton(CMD_CLOSE,xStart + xSize - guiPadding - btnWidth,yStart + ySize - guiPadding - btnHeight,btnWidth,btnHeight,""String_Node_Str""));
  addButton(new GuiButton(CMD_ADVANCED,xStart + xSize - guiPadding - btnWidth - btnWidthAndPadding,yStart + ySize - guiPadding - btnHeight,btnWidth,btnHeight,""String_Node_Str""));
  addButton(new GuiButton(CMD_SUBGUI_PERFORMANCE,xStartPadded + btnWidthAndPadding * 0,yStartPadded,btnWidth,btnHeight,(guiCur.equals(GUI_SUBGUI_PERFORMANCE) ? ""String_Node_Str"" + '2' : ""String_Node_Str"") + GUI_SUBGUI_PERFORMANCE));
  addButton(new GuiButton(CMD_SUBGUI_COMPATIBILITY,xStartPadded + btnWidthAndPadding * 1,yStartPadded,btnWidth,btnHeight,(guiCur.equals(GUI_SUBGUI_COMPATIBILITY) ? ""String_Node_Str"" + '2' : ""String_Node_Str"") + GUI_SUBGUI_COMPATIBILITY));
  addButton(new GuiButton(CMD_SUBGUI_PREFERENCE,xStartPadded + btnWidthAndPadding * 2,yStartPadded,btnWidth,btnHeight,(guiCur.equals(GUI_SUBGUI_PREFERENCE) ? ""String_Node_Str"" + '2' : ""String_Node_Str"") + GUI_SUBGUI_PREFERENCE));
  addButton(new GuiButton(CMD_SUBGUI_DIMENSIONS,xStartPadded + btnWidthAndPadding * 3,yStartPadded,btnWidth,btnHeight,(guiCur.equals(GUI_SUBGUI_DIMENSIONS) ? ""String_Node_Str"" + '2' : ""String_Node_Str"") + GUI_SUBGUI_DIMENSIONS));
  if (guiCur.equals(GUI_SUBGUI_PERFORMANCE)) {
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PERF_STORM,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2,btnWidth,btnHeight,WeatherUtilConfig.LIST_RATES,0));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PERF_NATURE,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 1,btnWidth,btnHeight,WeatherUtilConfig.LIST_RATES2,0));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PERF_PRECIPRATE,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 2,btnWidth,btnHeight,WeatherUtilConfig.LIST_RATES2,0));
  }
 else   if (guiCur.equals(GUI_SUBGUI_COMPATIBILITY)) {
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_COMP_STORM,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2,btnWidth,btnHeight,WeatherUtilConfig.LIST_STORMSWHEN,0));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_COMP_LOCK,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 1,btnWidth,btnHeight,WeatherUtilConfig.LIST_LOCK,0));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_COMP_PARTICLEPRECIP,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 2,btnWidth,btnHeight,WeatherUtilConfig.LIST_TOGGLE,1));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_COMP_SNOWFALLBLOCKS,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 3,btnWidth,btnHeight,WeatherUtilConfig.LIST_TOGGLE,0));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_COMP_PARTICLESNOMODS,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 4,btnWidth,btnHeight,WeatherUtilConfig.LIST_TOGGLE,0));
  }
 else   if (guiCur.equals(GUI_SUBGUI_PREFERENCE)) {
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_RATEOFSTORM,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2,btnWidth,btnHeight,WeatherUtilConfig.LIST_CHANCE,1));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_CHANCEOFSTORM,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 1,btnWidth,btnHeight,WeatherUtilConfig.LIST_RATES,0));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_CHANCEOFRAIN,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 2,btnWidth,btnHeight,WeatherUtilConfig.LIST_RATES2,0));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_BLOCKDESTRUCTION,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 3,btnWidth,btnHeight,WeatherUtilConfig.LIST_TOGGLE,1));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_TORNADOANDCYCLONES,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 4,btnWidth,btnHeight,WeatherUtilConfig.LIST_TOGGLE,1));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_SANDSTORMS,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 5,btnWidth,btnHeight,WeatherUtilConfig.LIST_TOGGLE,1));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_GLOBALRATE,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 6,btnWidth,btnHeight,WeatherUtilConfig.LIST_GLOBALRATE,1));
  }
 else   if (guiCur.equals(GUI_SUBGUI_DIMENSIONS)) {
    addButton(new GuiButton(CMD_BUTTON_DIMENSIONS_PREV,xStartPadded,yStart + ySize - guiPadding - btnHeight,60,20,""String_Node_Str""));
    addButton(new GuiButton(CMD_BUTTON_DIMENSIONS_NEXT,xStartPadded + 20 + btnWidthAndPadding * 1,yStart + ySize - guiPadding - btnHeight,60,20,""String_Node_Str""));
    for (int i=0; i < curDimListCountPerPage; i++) {
      addButton(new GuiButtonCycle(btnDimIndex++,xStartPadded + 46,yStartPadded3 + yEleSize2 * i,40,20,WeatherUtilConfig.LIST_TOGGLE,1));
      addButton(new GuiButtonCycle(btnDimIndex++,xStartPadded + 132,yStartPadded3 + yEleSize2 * i,40,20,WeatherUtilConfig.LIST_TOGGLE,1));
      addButton(new GuiButtonCycle(btnDimIndex++,xStartPadded + 218,yStartPadded3 + yEleSize2 * i,40,20,WeatherUtilConfig.LIST_TOGGLE,1));
      addButton(new GuiButtonCycle(btnDimIndex++,xStartPadded + 306,yStartPadded3 + yEleSize2 * i,40,20,WeatherUtilConfig.LIST_TOGGLE,1));
    }
  }
  if (guiCur.equals(""String_Node_Str"")) {
  }
  updateGuiElements();
}","@Override public void initGui(){
  super.initGui();
  resetGuiElements();
  xSize=372;
  ySize=250;
  ScaledResolution var8=new ScaledResolution(mc);
  int scaledWidth=var8.getScaledWidth();
  int scaledHeight=var8.getScaledHeight();
  xCenter=scaledWidth / 2;
  yCenter=scaledHeight / 2;
  xStart=xCenter - xSize / 2;
  yStart=yCenter - ySize / 2;
  int guiPadding=8;
  int xStartPadded=xStart + guiPadding - 1;
  int yStartPadded=yStart + guiPadding - 1;
  int btnWidth=80;
  int btnWidthAndPadding=84;
  int btnWidthBool=50;
  int btnHeight=20;
  int btnHeightAndPadding=24;
  int padding=1;
  int btnSpacing=22;
  int yEleSize2=44;
  int xStartPadded2=xStartPadded + 168;
  int yStartPadded2=yStartPadded + 30;
  int yStartPadded3=yStartPadded2 + 20;
  int btnDimIndex=btnDimIndexStart;
  addButton(new GuiButton(CMD_CLOSE,xStart + xSize - guiPadding - btnWidth,yStart + ySize - guiPadding - btnHeight,btnWidth,btnHeight,""String_Node_Str""));
  addButton(new GuiButton(CMD_ADVANCED,xStart + xSize - guiPadding - btnWidth - btnWidthAndPadding,yStart + ySize - guiPadding - btnHeight,btnWidth,btnHeight,""String_Node_Str""));
  addButton(new GuiButton(CMD_SUBGUI_PERFORMANCE,xStartPadded + btnWidthAndPadding * 0,yStartPadded,btnWidth,btnHeight,(guiCur.equals(GUI_SUBGUI_PERFORMANCE) ? ""String_Node_Str"" + '2' : ""String_Node_Str"") + GUI_SUBGUI_PERFORMANCE));
  addButton(new GuiButton(CMD_SUBGUI_COMPATIBILITY,xStartPadded + btnWidthAndPadding * 1,yStartPadded,btnWidth,btnHeight,(guiCur.equals(GUI_SUBGUI_COMPATIBILITY) ? ""String_Node_Str"" + '2' : ""String_Node_Str"") + GUI_SUBGUI_COMPATIBILITY));
  addButton(new GuiButton(CMD_SUBGUI_PREFERENCE,xStartPadded + btnWidthAndPadding * 2,yStartPadded,btnWidth,btnHeight,(guiCur.equals(GUI_SUBGUI_PREFERENCE) ? ""String_Node_Str"" + '2' : ""String_Node_Str"") + GUI_SUBGUI_PREFERENCE));
  addButton(new GuiButton(CMD_SUBGUI_DIMENSIONS,xStartPadded + btnWidthAndPadding * 3,yStartPadded,btnWidth,btnHeight,(guiCur.equals(GUI_SUBGUI_DIMENSIONS) ? ""String_Node_Str"" + '2' : ""String_Node_Str"") + GUI_SUBGUI_DIMENSIONS));
  if (guiCur.equals(GUI_SUBGUI_PERFORMANCE)) {
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PERF_STORM,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2,btnWidth,btnHeight,WeatherUtilConfig.LIST_RATES,1));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PERF_NATURE,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 1,btnWidth,btnHeight,WeatherUtilConfig.LIST_RATES2,1));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PERF_PRECIPRATE,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 2,btnWidth,btnHeight,WeatherUtilConfig.LIST_RATES2,1));
  }
 else   if (guiCur.equals(GUI_SUBGUI_COMPATIBILITY)) {
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_COMP_STORM,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2,btnWidth,btnHeight,WeatherUtilConfig.LIST_STORMSWHEN,0));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_COMP_LOCK,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 1,btnWidth,btnHeight,WeatherUtilConfig.LIST_LOCK,0));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_COMP_PARTICLEPRECIP,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 2,btnWidth,btnHeight,WeatherUtilConfig.LIST_TOGGLE,1));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_COMP_SNOWFALLBLOCKS,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 3,btnWidth,btnHeight,WeatherUtilConfig.LIST_TOGGLE,0));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_COMP_PARTICLESNOMODS,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 4,btnWidth,btnHeight,WeatherUtilConfig.LIST_TOGGLE,0));
  }
 else   if (guiCur.equals(GUI_SUBGUI_PREFERENCE)) {
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_RATEOFSTORM,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2,btnWidth,btnHeight,WeatherUtilConfig.LIST_CHANCE,1));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_CHANCEOFSTORM,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 1,btnWidth,btnHeight,WeatherUtilConfig.LIST_RATES,0));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_CHANCEOFRAIN,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 2,btnWidth,btnHeight,WeatherUtilConfig.LIST_RATES2,0));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_BLOCKDESTRUCTION,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 3,btnWidth,btnHeight,WeatherUtilConfig.LIST_TOGGLE,1));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_TORNADOANDCYCLONES,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 4,btnWidth,btnHeight,WeatherUtilConfig.LIST_TOGGLE,1));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_SANDSTORMS,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 5,btnWidth,btnHeight,WeatherUtilConfig.LIST_TOGGLE,1));
    addButton(new GuiButtonCycle(WeatherUtilConfig.CMD_BTN_PREF_GLOBALRATE,xStartPadded2 + btnWidthAndPadding * 0,yStartPadded2 + btnHeightAndPadding * 6,btnWidth,btnHeight,WeatherUtilConfig.LIST_GLOBALRATE,1));
  }
 else   if (guiCur.equals(GUI_SUBGUI_DIMENSIONS)) {
    addButton(new GuiButton(CMD_BUTTON_DIMENSIONS_PREV,xStartPadded,yStart + ySize - guiPadding - btnHeight,60,20,""String_Node_Str""));
    addButton(new GuiButton(CMD_BUTTON_DIMENSIONS_NEXT,xStartPadded + 20 + btnWidthAndPadding * 1,yStart + ySize - guiPadding - btnHeight,60,20,""String_Node_Str""));
    for (int i=0; i < curDimListCountPerPage; i++) {
      addButton(new GuiButtonCycle(btnDimIndex++,xStartPadded + 46,yStartPadded3 + yEleSize2 * i,40,20,WeatherUtilConfig.LIST_TOGGLE,1));
      addButton(new GuiButtonCycle(btnDimIndex++,xStartPadded + 132,yStartPadded3 + yEleSize2 * i,40,20,WeatherUtilConfig.LIST_TOGGLE,1));
      addButton(new GuiButtonCycle(btnDimIndex++,xStartPadded + 218,yStartPadded3 + yEleSize2 * i,40,20,WeatherUtilConfig.LIST_TOGGLE,1));
      addButton(new GuiButtonCycle(btnDimIndex++,xStartPadded + 306,yStartPadded3 + yEleSize2 * i,40,20,WeatherUtilConfig.LIST_TOGGLE,1));
    }
  }
  if (guiCur.equals(""String_Node_Str"")) {
  }
  updateGuiElements();
}",0.999525466624486
81863,"@Override public void drawBackground(int par1){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  mc.getTextureManager().bindTexture(resGUI);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  this.drawTexturedModalRect(x,y,0,0,512,512);
  int yEleSize=24;
  int yEleSize2=44;
  this.drawString(this.fontRenderer,""String_Node_Str"" + (guiCur.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + guiCur),xStart + 7,yStart - 9,16777215);
  int yStart2=yStart + 34;
  int xOP=260;
  String op=""String_Node_Str"";
  this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 - 3 - 4,16777215);
  if (guiCur.equals(GUI_SUBGUI_PERFORMANCE)) {
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 2,16777215);
  }
 else   if (guiCur.equals(GUI_SUBGUI_COMPATIBILITY)) {
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 2,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 3,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 4,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 3,16777215);
  }
 else   if (guiCur.equals(GUI_SUBGUI_PREFERENCE)) {
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 2,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 3,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 4,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 5,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 4 + yEleSize * 6,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 - 6 + yEleSize * 7,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 2,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 3,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 4,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 5,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 6,16777215);
  }
 else   if (guiCur.equals(GUI_SUBGUI_DIMENSIONS)) {
    try {
      for (int i=0; i < curDimListCountPerPage; i++) {
        if (curDimListPage * curDimListCountPerPage + i < listDimIDs.size()) {
          this.drawString(this.fontRenderer,""String_Node_Str"" + '6' + listDimNames.get(curDimListPage * curDimListCountPerPage + i),xStart + 7,yStart2 + 8 + yEleSize2 * i,16777215);
          this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 28 + yEleSize2 * i,16777215);
          this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 100,yStart2 + 28 + yEleSize2 * i,16777215);
          this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 186,yStart2 + 28 + yEleSize2 * i,16777215);
          this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 270,yStart2 + 28 + yEleSize2 * i,16777215);
        }
      }
      this.drawString(this.fontRenderer,""String_Node_Str"" + (curDimListPage + 1) + ""String_Node_Str""+ (listDimNames.size() / curDimListCountPerPage + 1),xStart + 80,yStart2 + 194,16777215);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}","@Override public void drawBackground(int par1){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  mc.getTextureManager().bindTexture(resGUI);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  this.drawTexturedModalRect(x,y,0,0,512,512);
  int yEleSize=24;
  int yEleSize2=44;
  this.drawString(this.fontRenderer,""String_Node_Str"" + (guiCur.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + guiCur),xStart + 7,yStart - 9,16777215);
  if (!guiCur.equals(GUI_SUBGUI_DIMENSIONS)) {
    this.fontRenderer.drawString(""String_Node_Str"",xStart + 7,yStart + 228,0xFF0000);
  }
  int yStart2=yStart + 34;
  int xOP=260;
  String op=""String_Node_Str"";
  this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 - 3 - 4,16777215);
  if (guiCur.equals(GUI_SUBGUI_PERFORMANCE)) {
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 2,16777215);
  }
 else   if (guiCur.equals(GUI_SUBGUI_COMPATIBILITY)) {
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 2,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 3,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 4,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 3,16777215);
  }
 else   if (guiCur.equals(GUI_SUBGUI_PREFERENCE)) {
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 2,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 3,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 4,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 5,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 4 + yEleSize * 6,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 - 6 + yEleSize * 7,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 2,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 3,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 4,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 5,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 6,16777215);
  }
 else   if (guiCur.equals(GUI_SUBGUI_DIMENSIONS)) {
    try {
      for (int i=0; i < curDimListCountPerPage; i++) {
        if (curDimListPage * curDimListCountPerPage + i < listDimIDs.size()) {
          this.drawString(this.fontRenderer,""String_Node_Str"" + '6' + listDimNames.get(curDimListPage * curDimListCountPerPage + i),xStart + 7,yStart2 + 8 + yEleSize2 * i,16777215);
          this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 28 + yEleSize2 * i,16777215);
          this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 100,yStart2 + 28 + yEleSize2 * i,16777215);
          this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 186,yStart2 + 28 + yEleSize2 * i,16777215);
          this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 270,yStart2 + 28 + yEleSize2 * i,16777215);
        }
      }
      this.drawString(this.fontRenderer,""String_Node_Str"" + (curDimListPage + 1) + ""String_Node_Str""+ (listDimNames.size() / curDimListCountPerPage + 1),xStart + 80,yStart2 + 194,16777215);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}",0.984752365052866
81864,"/** 
 * Fired when the mouse button is released. Equivalent of MouseListener.mouseReleased(MouseEvent e).
 */
public void mouseReleased(int par1,int par2){
}","/** 
 * Fired when the mouse button is released. Equivalent of MouseListener.mouseReleased(MouseEvent e).
 */
@Override public void mouseReleased(int par1,int par2){
}",0.9691358024691358
81865,"/** 
 * Fired when the mouse button is dragged. Equivalent of MouseListener.mouseDragged(MouseEvent e).
 */
protected void mouseDragged(Minecraft par1Minecraft,int par2,int par3){
}","/** 
 * Fired when the mouse button is dragged. Equivalent of MouseListener.mouseDragged(MouseEvent e).
 */
@Override protected void mouseDragged(Minecraft par1Minecraft,int par2,int par3){
}",0.9731182795698924
81866,"/** 
 * Returns 0 if the button is disabled, 1 if the mouse is NOT hovering over this button and 2 if it IS hovering over this button.
 */
public int getHoverState(boolean par1){
  byte var2=1;
  if (par1) {
    var2=2;
  }
 else   if (!this.enabled) {
    var2=0;
  }
  return var2;
}","/** 
 * Returns 0 if the button is disabled, 1 if the mouse is NOT hovering over this button and 2 if it IS hovering over this button.
 */
@Override public int getHoverState(boolean par1){
  byte var2=1;
  if (par1) {
    var2=2;
  }
 else   if (!this.enabled) {
    var2=0;
  }
  return var2;
}",0.9827586206896552
81867,"/** 
 * Draws this button to the screen.
 */
public void drawButton(Minecraft par1Minecraft,int par2,int par3){
  if (this.visible) {
    FontRenderer fontrenderer=par1Minecraft.fontRenderer;
    par1Minecraft.getTextureManager().bindTexture(BUTTON_TEXTURES);
    GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
    this.hovered=par2 >= this.x && par3 >= this.y && par2 < this.x + this.width && par3 < this.y + this.height;
    int k=this.getHoverState(this.hovered);
    this.drawTexturedModalRect(this.x,this.y,0,46 + k * 20,this.width / 2,this.height);
    this.drawTexturedModalRect(this.x + this.width / 2,this.y,200 - this.width / 2,46 + k * 20,this.width / 2,this.height);
    this.mouseDragged(par1Minecraft,par2,par3);
    int l=14737632;
    if (!this.enabled) {
      l=-6250336;
    }
 else     if (this.hovered) {
      l=16777120;
    }
    String str=""String_Node_Str"";
    if (boolState) {
      str=""String_Node_Str"" + '2' + strEnabled;
    }
 else {
      str=""String_Node_Str"" + 'c' + strDisabled;
    }
    this.drawCenteredString(fontrenderer,str,this.x + this.width / 2,this.y + (this.height - 8) / 2,l);
  }
}","/** 
 * Draws this button to the screen.
 */
@Override public void drawButton(Minecraft par1Minecraft,int par2,int par3,float partialTicks){
  if (this.visible) {
    FontRenderer fontrenderer=par1Minecraft.fontRenderer;
    par1Minecraft.getTextureManager().bindTexture(BUTTON_TEXTURES);
    GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
    this.hovered=par2 >= this.x && par3 >= this.y && par2 < this.x + this.width && par3 < this.y + this.height;
    int k=this.getHoverState(this.hovered);
    this.drawTexturedModalRect(this.x,this.y,0,46 + k * 20,this.width / 2,this.height);
    this.drawTexturedModalRect(this.x + this.width / 2,this.y,200 - this.width / 2,46 + k * 20,this.width / 2,this.height);
    this.mouseDragged(par1Minecraft,par2,par3);
    int l=14737632;
    if (!this.enabled) {
      l=-6250336;
    }
 else     if (this.hovered) {
      l=16777120;
    }
    String str=""String_Node_Str"";
    if (boolState) {
      str=""String_Node_Str"" + '2' + strEnabled;
    }
 else {
      str=""String_Node_Str"" + 'c' + strDisabled;
    }
    this.drawCenteredString(fontrenderer,str,this.x + this.width / 2,this.y + (this.height - 8) / 2,l);
  }
}",0.9872302950242184
81868,"/** 
 * Returns true if the mouse has been pressed on this control. Equivalent of MouseListener.mousePressed(MouseEvent e).
 */
public boolean mousePressed(Minecraft par1Minecraft,int par2,int par3){
  return this.visible && par2 >= this.x && par3 >= this.y && par2 < this.x + this.width && par3 < this.y + this.height;
}","/** 
 * Returns true if the mouse has been pressed on this control. Equivalent of MouseListener.mousePressed(MouseEvent e).
 */
@Override public boolean mousePressed(Minecraft par1Minecraft,int par2,int par3){
  return this.visible && par2 >= this.x && par3 >= this.y && par2 < this.x + this.width && par3 < this.y + this.height;
}",0.9846625766871164
81869,"/** 
 * Fired when the mouse button is released. Equivalent of MouseListener.mouseReleased(MouseEvent e).
 */
public void mouseReleased(int par1,int par2){
}","/** 
 * Fired when the mouse button is released. Equivalent of MouseListener.mouseReleased(MouseEvent e).
 */
@Override public void mouseReleased(int par1,int par2){
}",0.9691358024691358
81870,"/** 
 * Fired when the mouse button is dragged. Equivalent of MouseListener.mouseDragged(MouseEvent e).
 */
protected void mouseDragged(Minecraft par1Minecraft,int par2,int par3){
}","/** 
 * Fired when the mouse button is dragged. Equivalent of MouseListener.mouseDragged(MouseEvent e).
 */
@Override protected void mouseDragged(Minecraft par1Minecraft,int par2,int par3){
}",0.9731182795698924
81871,"/** 
 * Returns 0 if the button is disabled, 1 if the mouse is NOT hovering over this button and 2 if it IS hovering over this button.
 */
public int getHoverState(boolean par1){
  byte var2=1;
  if (par1) {
    var2=2;
  }
 else   if (!this.enabled) {
    var2=0;
  }
  return var2;
}","/** 
 * Returns 0 if the button is disabled, 1 if the mouse is NOT hovering over this button and 2 if it IS hovering over this button.
 */
@Override public int getHoverState(boolean par1){
  byte var2=1;
  if (par1) {
    var2=2;
  }
 else   if (!this.enabled) {
    var2=0;
  }
  return var2;
}",0.9827586206896552
81872,"/** 
 * Draws this button to the screen.
 */
public void drawButton(Minecraft par1Minecraft,int par2,int par3){
  if (this.visible) {
    FontRenderer fontrenderer=par1Minecraft.fontRenderer;
    par1Minecraft.getTextureManager().bindTexture(BUTTON_TEXTURES);
    GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
    this.hovered=par2 >= this.x && par3 >= this.y && par2 < this.x + this.width && par3 < this.y + this.height;
    int k=this.getHoverState(this.hovered);
    this.drawTexturedModalRect(this.x,this.y,0,46 + k * 20,this.width / 2,this.height);
    this.drawTexturedModalRect(this.x + this.width / 2,this.y,200 - this.width / 2,46 + k * 20,this.width / 2,this.height);
    this.mouseDragged(par1Minecraft,par2,par3);
    int l=14737632;
    if (!this.enabled) {
      l=-6250336;
    }
 else     if (this.hovered) {
      l=16777120;
    }
    String str=""String_Node_Str"";
    str=getDisplayString();
    this.drawCenteredString(fontrenderer,str,this.x + this.width / 2,this.y + (this.height - 8) / 2,l);
  }
}","/** 
 * Draws this button to the screen.
 */
@Override public void drawButton(Minecraft par1Minecraft,int par2,int par3,float partialTicks){
  if (this.visible) {
    FontRenderer fontrenderer=par1Minecraft.fontRenderer;
    par1Minecraft.getTextureManager().bindTexture(BUTTON_TEXTURES);
    GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
    this.hovered=par2 >= this.x && par3 >= this.y && par2 < this.x + this.width && par3 < this.y + this.height;
    int k=this.getHoverState(this.hovered);
    this.drawTexturedModalRect(this.x,this.y,0,46 + k * 20,this.width / 2,this.height);
    this.drawTexturedModalRect(this.x + this.width / 2,this.y,200 - this.width / 2,46 + k * 20,this.width / 2,this.height);
    this.mouseDragged(par1Minecraft,par2,par3);
    int l=14737632;
    if (!this.enabled) {
      l=-6250336;
    }
 else     if (this.hovered) {
      l=16777120;
    }
    String str=""String_Node_Str"";
    str=getDisplayString();
    this.drawCenteredString(fontrenderer,str,this.x + this.width / 2,this.y + (this.height - 8) / 2,l);
  }
}",0.9858605558264262
81873,"/** 
 * Returns true if the mouse has been pressed on this control. Equivalent of MouseListener.mousePressed(MouseEvent e).
 */
public boolean mousePressed(Minecraft par1Minecraft,int par2,int par3){
  return this.visible && par2 >= this.x && par3 >= this.y && par2 < this.x + this.width && par3 < this.y + this.height;
}","/** 
 * Returns true if the mouse has been pressed on this control. Equivalent of MouseListener.mousePressed(MouseEvent e).
 */
@Override public boolean mousePressed(Minecraft par1Minecraft,int par2,int par3){
  return this.visible && par2 >= this.x && par3 >= this.y && par2 < this.x + this.width && par3 < this.y + this.height;
}",0.9846625766871164
81874,"public static void processNBTToModConfigClient(){
  nbtSaveDataClient();
  Weather.dbg(""String_Node_Str"");
  Weather.dbg(""String_Node_Str"" + nbtClientData);
  String modID=""String_Node_Str"";
  try {
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_PARTICLEPRECIP)) {
      ConfigParticle.Particle_RainSnow=LIST_TOGGLE.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_PARTICLEPRECIP)).equalsIgnoreCase(""String_Node_Str"");
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_STORM)) {
      if (LIST_RATES.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_STORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigMisc.Cloud_ParticleSpawnDelay=0;
        ConfigParticle.Sandstorm_Particle_Debris_effect_rate=1;
        ConfigParticle.Sandstorm_Particle_Dust_effect_rate=1;
      }
 else       if (LIST_RATES.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_STORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigMisc.Cloud_ParticleSpawnDelay=2;
        ConfigParticle.Sandstorm_Particle_Debris_effect_rate=0.6D;
        ConfigParticle.Sandstorm_Particle_Dust_effect_rate=0.6D;
      }
 else       if (LIST_RATES.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_STORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigMisc.Cloud_ParticleSpawnDelay=5;
        ConfigParticle.Sandstorm_Particle_Debris_effect_rate=0.3D;
        ConfigParticle.Sandstorm_Particle_Dust_effect_rate=0.3D;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_NATURE)) {
      if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=1F;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=0.7F;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=0.3F;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=0.0F;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)) {
      if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=1D;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=0.7D;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=0.3D;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=0D;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_PARTICLESNOMODS)) {
      ConfigParticle.Particle_VanillaAndWeatherOnly=LIST_TOGGLE.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_PARTICLESNOMODS)).equalsIgnoreCase(""String_Node_Str"");
    }
    NBTTagCompound nbtDims=nbtClientData.getCompoundTag(""String_Node_Str"");
    Weather.dbg(""String_Node_Str"" + listDimensionsWindEffects);
    Iterator it=nbtDims.getKeySet().iterator();
    while (it.hasNext()) {
      String tagName=(String)it.next();
      NBTTagInt entry=(NBTTagInt)nbtDims.getTag(tagName);
      String[] vals=tagName.split(""String_Node_Str"");
      if (vals[2].equals(""String_Node_Str"")) {
        int dimID=Integer.parseInt(vals[1]);
        if (entry.getInt() == 0) {
          if (listDimensionsWindEffects.contains(dimID)) {
            listDimensionsWindEffects.remove((Object)dimID);
          }
        }
 else {
          if (!listDimensionsWindEffects.contains(dimID)) {
            listDimensionsWindEffects.add(dimID);
          }
        }
      }
    }
    Weather.dbg(""String_Node_Str"" + listDimensionsWindEffects);
    processListsReverse();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  ConfigMod.configLookup.get(modID).writeConfigFile(true);
}","public static void processNBTToModConfigClient(){
  nbtSaveDataClient();
  Weather.dbg(""String_Node_Str"");
  Weather.dbg(""String_Node_Str"" + nbtClientData);
  String modID=""String_Node_Str"";
  try {
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_PARTICLEPRECIP)) {
      ConfigParticle.Particle_RainSnow=LIST_TOGGLE.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_PARTICLEPRECIP)).equalsIgnoreCase(""String_Node_Str"");
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_STORM)) {
      if (LIST_RATES.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_STORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigMisc.Cloud_ParticleSpawnDelay=0;
        ConfigStorm.Storm_ParticleSpawnDelay=1;
        ConfigParticle.Sandstorm_Particle_Debris_effect_rate=1;
        ConfigParticle.Sandstorm_Particle_Dust_effect_rate=1;
      }
 else       if (LIST_RATES.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_STORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigMisc.Cloud_ParticleSpawnDelay=2;
        ConfigStorm.Storm_ParticleSpawnDelay=3;
        ConfigParticle.Sandstorm_Particle_Debris_effect_rate=0.6D;
        ConfigParticle.Sandstorm_Particle_Dust_effect_rate=0.6D;
      }
 else       if (LIST_RATES.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_STORM)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigMisc.Cloud_ParticleSpawnDelay=5;
        ConfigStorm.Storm_ParticleSpawnDelay=5;
        ConfigParticle.Sandstorm_Particle_Debris_effect_rate=0.3D;
        ConfigParticle.Sandstorm_Particle_Dust_effect_rate=0.3D;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_NATURE)) {
      if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=1F;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=0.7F;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=0.3F;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_NATURE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Wind_Particle_effect_rate=0.0F;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)) {
      if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=1D;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=0.7D;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=0.3D;
      }
 else       if (LIST_RATES2.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_PERF_PRECIPRATE)).equalsIgnoreCase(""String_Node_Str"")) {
        ConfigParticle.Precipitation_Particle_effect_rate=0D;
      }
    }
    if (nbtClientData.hasKey(""String_Node_Str"" + CMD_BTN_COMP_PARTICLESNOMODS)) {
      ConfigParticle.Particle_VanillaAndWeatherOnly=LIST_TOGGLE.get(nbtClientData.getInteger(""String_Node_Str"" + CMD_BTN_COMP_PARTICLESNOMODS)).equalsIgnoreCase(""String_Node_Str"");
    }
    NBTTagCompound nbtDims=nbtClientData.getCompoundTag(""String_Node_Str"");
    Weather.dbg(""String_Node_Str"" + listDimensionsWindEffects);
    Iterator it=nbtDims.getKeySet().iterator();
    while (it.hasNext()) {
      String tagName=(String)it.next();
      NBTTagInt entry=(NBTTagInt)nbtDims.getTag(tagName);
      String[] vals=tagName.split(""String_Node_Str"");
      if (vals[2].equals(""String_Node_Str"")) {
        int dimID=Integer.parseInt(vals[1]);
        if (entry.getInt() == 0) {
          if (listDimensionsWindEffects.contains(dimID)) {
            listDimensionsWindEffects.remove((Object)dimID);
          }
        }
 else {
          if (!listDimensionsWindEffects.contains(dimID)) {
            listDimensionsWindEffects.add(dimID);
          }
        }
      }
    }
    Weather.dbg(""String_Node_Str"" + listDimensionsWindEffects);
    processListsReverse();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  ConfigMod.configLookup.get(modID).writeConfigFile(true);
}",0.9844626672421234
81875,"public Block getBlock(){
  return this.block;
}","/** 
 * returns a list of items with the same ID, but different meta (eg: dye returns 16 items)
 */
public Block getBlock(){
  return this.block;
}",0.4845360824742268
81876,"public ItemSandLayer(Block block){
  super(block);
  this.setMaxDamage(0);
  this.setHasSubtypes(true);
}","public ItemSandLayer(Block block){
  super(block);
  this.setMaxDamage(0);
}",0.8397790055248618
81877,"@SideOnly(Side.CLIENT) public EntityRotFX spawnFogParticle(double x,double y,double z,int parRenderOrder,TextureAtlasSprite tex){
  double speed=0D;
  Random rand=new Random();
  EntityRotFX entityfx=particleBehaviorFog.spawnNewParticleIconFX(Minecraft.getMinecraft().world,tex,x,y,z,(rand.nextDouble() - rand.nextDouble()) * speed,0.0D,(rand.nextDouble() - rand.nextDouble()) * speed,parRenderOrder);
  particleBehaviorFog.initParticle(entityfx);
  entityfx.setCanCollide(false);
  entityfx.callUpdatePB=false;
  boolean debug=false;
  if (debug) {
  }
 else {
  }
  if (levelCurIntensityStage == STATE_NORMAL) {
    entityfx.setMaxAge(300 + rand.nextInt(100));
  }
 else {
    entityfx.setMaxAge((size / 2) + rand.nextInt(100));
  }
  if (entityfx.getEntityId() % 20 < 5 && isSpinning()) {
    entityfx.renderOrder=1;
    entityfx.setMaxAge((size) + rand.nextInt(100));
  }
  float randFloat=(rand.nextFloat() * 0.6F);
  float baseBright=0.7F;
  if (levelCurIntensityStage > STATE_NORMAL) {
    baseBright=0.2F;
  }
 else   if (attrib_precipitation) {
    baseBright=0.2F;
  }
 else   if (manager.isVanillaRainActiveOnServer) {
    baseBright=0.2F;
  }
 else {
    float adj=Math.min(1F,levelWater / levelWaterStartRaining) * 0.6F;
    baseBright-=adj;
  }
  float finalBright=Math.min(1F,baseBright + randFloat);
  entityfx.setRBGColorF(finalBright,finalBright,finalBright);
  if (debug) {
    if (levelTemperature < 0) {
      entityfx.setRBGColorF(0,0,finalBright);
    }
 else     if (levelTemperature > 0) {
      entityfx.setRBGColorF(finalBright,0,0);
    }
  }
  return entityfx;
}","@SideOnly(Side.CLIENT) public EntityRotFX spawnFogParticle(double x,double y,double z,int parRenderOrder,TextureAtlasSprite tex){
  double speed=0D;
  Random rand=new Random();
  EntityRotFX entityfx=particleBehaviorFog.spawnNewParticleIconFX(Minecraft.getMinecraft().world,tex,x,y,z,(rand.nextDouble() - rand.nextDouble()) * speed,0.0D,(rand.nextDouble() - rand.nextDouble()) * speed,parRenderOrder);
  particleBehaviorFog.initParticle(entityfx);
  entityfx.setCanCollide(false);
  entityfx.callUpdatePB=false;
  boolean debug=false;
  if (debug) {
  }
 else {
  }
  if (levelCurIntensityStage == STATE_NORMAL) {
    entityfx.setMaxAge(300 + rand.nextInt(100));
  }
 else {
    entityfx.setMaxAge((size / 2) + rand.nextInt(100));
  }
  if (entityfx.getEntityId() % 20 < 5 && isSpinning()) {
    entityfx.renderOrder=1;
    entityfx.setMaxAge((size) + rand.nextInt(100));
  }
  float randFloat=(rand.nextFloat() * 0.6F);
  float baseBright=0.7F;
  if (levelCurIntensityStage > STATE_NORMAL) {
    baseBright=0.2F;
  }
 else   if (attrib_precipitation) {
    baseBright=0.2F;
  }
 else   if (manager.isVanillaRainActiveOnServer) {
    baseBright=0.2F;
  }
 else {
    float adj=Math.min(1F,levelWater / levelWaterStartRaining) * 0.6F;
    baseBright-=adj;
  }
  float finalBright=Math.min(1F,baseBright + randFloat);
  entityfx.setRBGColorF(finalBright,finalBright,finalBright);
  if (debug) {
    if (levelTemperature < 0) {
      entityfx.setRBGColorF(0,0,finalBright);
    }
 else     if (levelTemperature > 0) {
      entityfx.setRBGColorF(finalBright,0,0);
    }
  }
  ExtendedRenderer.rotEffRenderer.addEffect(entityfx);
  particleBehaviorFog.particles.add(entityfx);
  return entityfx;
}",0.9689403166869672
81878,"@SideOnly(Side.CLIENT) public void tickClient(){
  if (isCloudlessStorm())   return;
  if (particleBehaviorFog == null) {
    particleBehaviorFog=new ParticleBehaviorFog(new Vec3(pos.xCoord,pos.yCoord,pos.zCoord));
  }
 else {
    if (!Minecraft.getMinecraft().isSingleplayer() || !(Minecraft.getMinecraft().currentScreen instanceof GuiIngameMenu)) {
      particleBehaviorFog.tickUpdateList();
    }
  }
  EntityPlayer entP=Minecraft.getMinecraft().player;
  spinSpeed=0.02D;
  double spinSpeedMax=0.4D;
  if (isCycloneFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.00D + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * spinSpeedMax * 0.2D);
  }
 else   if (isTornadoFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.2D;
  }
 else   if (levelCurIntensityStage >= STATE_HIGHWIND) {
    spinSpeed=spinSpeedMax * 0.05D;
  }
 else {
    spinSpeed=spinSpeedMax * 0.02D;
  }
  if (isHurricane()) {
    spinSpeed+=0.1D;
  }
  if (size == 0)   size=1;
  int delay=Math.max(1,(int)(100F / size * 1F));
  int loopSize=1;
  int extraSpawning=0;
  if (isSpinning()) {
    loopSize+=4;
    extraSpawning=300;
  }
  if (stormType == TYPE_WATER) {
    if (levelCurIntensityStage >= STATE_STAGE5) {
      loopSize=10;
      extraSpawning=800;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE4) {
      loopSize=8;
      extraSpawning=700;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE3) {
      loopSize=6;
      extraSpawning=500;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE2) {
      loopSize=4;
      extraSpawning=400;
    }
 else {
      extraSpawning=300;
    }
  }
  Random rand=new Random();
  Vec3 playerAdjPos=new Vec3(entP.posX,pos.yCoord,entP.posZ);
  double maxSpawnDistFromPlayer=512;
  if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigMisc.Cloud_ParticleSpawnDelay) == 0) {
    for (int i=0; i < loopSize; i++) {
      if (listParticlesCloud.size() < size + extraSpawning) {
        double spawnRad=size;
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),layers.get(layer),pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          if (getAvoidAngleIfTerrainAtOrAheadOfPosition(getAdjustedAngle(),tryPos) == 0) {
            EntityRotFX particle;
            if (WeatherUtil.isAprilFoolsDay()) {
              particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.chicken);
            }
 else {
              particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0);
            }
            listParticlesCloud.add(particle);
          }
        }
      }
    }
  }
  if (levelCurIntensityStage >= STATE_HIGHWIND) {
    for (int i=0; i < (stormType == TYPE_WATER ? 50 : 3); i++) {
      if (listParticlesGround.size() < (stormType == TYPE_WATER ? 600 : 150)) {
        double spawnRad=size / 4 * 3;
        if (stormType == TYPE_WATER) {
          spawnRad=size * 3;
        }
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),posGround.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          int groundY=WeatherUtilBlock.getPrecipitationHeightSafe(manager.getWorld(),new BlockPos((int)tryPos.xCoord,0,(int)tryPos.zCoord)).getY();
          EntityRotFX particle;
          if (WeatherUtil.isAprilFoolsDay()) {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0,ParticleRegistry.potato);
          }
 else {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0);
          }
          particle.setScale(100);
          particle.rotationYaw=rand.nextInt(360);
          particle.rotationPitch=rand.nextInt(360);
          listParticlesGround.add(particle);
        }
      }
    }
  }
  delay=1;
  loopSize=2;
  double spawnRad=size / 48;
  if (levelCurIntensityStage >= STATE_STAGE5) {
    spawnRad=200;
    loopSize=10;
    sizeMaxFunnelParticles=1200;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE4) {
    spawnRad=150;
    loopSize=8;
    sizeMaxFunnelParticles=1000;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE3) {
    spawnRad=100;
    loopSize=6;
    sizeMaxFunnelParticles=800;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE2) {
    spawnRad=50;
    loopSize=4;
    sizeMaxFunnelParticles=600;
  }
 else {
    sizeMaxFunnelParticles=600;
  }
  if (isTornadoFormingOrGreater() || (attrib_waterSpout)) {
    if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigStorm.Storm_ParticleSpawnDelay) == 0) {
      for (int i=0; i < loopSize; i++) {
        if (listParticlesFunnel.size() >= sizeMaxFunnelParticles) {
          listParticlesFunnel.get(0).setExpired();
          listParticlesFunnel.remove(0);
        }
        if (listParticlesFunnel.size() < sizeMaxFunnelParticles) {
          Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),pos.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
          if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
            EntityRotFX particle;
            if (WeatherUtil.isAprilFoolsDay()) {
              particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1,ParticleRegistry.potato);
            }
 else {
              if (!isFirenado && false) {
                particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1);
              }
 else {
                particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1,ParticleRegistry.cloud256_fire);
              }
            }
            particle.setMaxAge(150 + ((levelCurIntensityStage - 1) * 100) + rand.nextInt(100));
            float baseBright=0.3F;
            float randFloat=(rand.nextFloat() * 0.6F);
            particle.rotationYaw=rand.nextInt(360);
            float finalBright=Math.min(1F,baseBright + randFloat);
            if (levelCurIntensityStage == STATE_HIGHWIND) {
              particle.setScale(150);
              particle.setRBGColorF(finalBright - 0.2F,finalBright - 0.2F,finalBright);
            }
 else {
              particle.setScale(250);
              particle.setRBGColorF(finalBright,finalBright,finalBright);
            }
            if (isFirenado) {
              particle.setRBGColorF(1F,1F,1F);
            }
            listParticlesFunnel.add(particle);
          }
        }
 else {
        }
      }
    }
  }
  for (int i=0; i < listParticlesFunnel.size(); i++) {
    EntityRotFX ent=listParticlesFunnel.get(i);
    if (!ent.isAlive()) {
      listParticlesFunnel.remove(ent);
    }
 else     if (ent.getPosY() > pos.yCoord) {
      ent.setExpired();
      listParticlesFunnel.remove(ent);
    }
 else {
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
      ent.rotationYaw+=ent.getEntityId() % 90;
      ent.rotationPitch=-30F;
      if (levelCurIntensityStage == STATE_HIGHWIND) {
        int fadingDistStart=30;
        if (ent.getPosY() > posGround.yCoord + fadingDistStart) {
          float maxVal=ent.getBlueColorF();
          float fadeRate=0.002F;
          ent.setRBGColorF(Math.min(maxVal,ent.getRedColorF() + fadeRate),Math.min(maxVal,ent.getGreenColorF() + fadeRate),maxVal);
        }
      }
      spinEntity(ent);
    }
  }
  for (int i=0; i < listParticlesCloud.size(); i++) {
    EntityRotFX ent=listParticlesCloud.get(i);
    if (!ent.isAlive()) {
      listParticlesCloud.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
      float dropDownRange=15F;
      float extraDropCalc=0;
      if (curDist < 200 && ent.getEntityId() % 20 < 5) {
        extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        if (isCycloneFormingOrGreater()) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange * 5F);
        }
      }
      if (isSpinning()) {
        double speed=spinSpeed + (rand.nextDouble() * 0.01D);
        double distt=size;
        double vecX=ent.getPosX() - pos.xCoord;
        double vecZ=ent.getPosZ() - pos.zCoord;
        float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
        angle+=speed * 50D;
        angle-=(ent.getEntityId() % 10) * 3D;
        angle+=rand.nextInt(10) - rand.nextInt(10);
        if (curDist > distt) {
          angle+=40;
        }
        if (ent.getEntityId() % 20 < 5) {
          if (levelCurIntensityStage >= STATE_FORMING) {
            if (stormType == TYPE_WATER) {
              angle+=40 + ((ent.getEntityId() % 5) * 4);
              if (curDist > 150 + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * 30)) {
                angle+=10;
              }
            }
 else {
              angle+=30 + ((ent.getEntityId() % 5) * 4);
            }
          }
 else {
            if (curDist > 150) {
              angle+=50 + ((ent.getEntityId() % 5) * 4);
            }
          }
          double var16=this.pos.xCoord - ent.getPosX();
          double var18=this.pos.zCoord - ent.getPosZ();
          ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
          ent.rotationPitch=-20F - (ent.getEntityId() % 10);
        }
        if (curSpeed < speed * 20D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
 else {
        float cloudMoveAmp=0.2F * (1 + layer);
        float speed=getAdjustedSpeed() * cloudMoveAmp;
        float angle=getAdjustedAngle();
        if ((manager.getWorld().getTotalWorldTime() + this.ID) % 40 == 0) {
          ent.avoidTerrainAngle=getAvoidAngleIfTerrainAtOrAheadOfPosition(angle,ent.getPos());
        }
        angle+=ent.avoidTerrainAngle;
        if (ent.avoidTerrainAngle != 0) {
          speed*=0.5D;
        }
        dropDownRange=5;
        if (ent.getEntityId() % 20 < 5) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        }
        if (curSpeed < speed * 1D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
      if (Math.abs(ent.getPosY() - (pos.yCoord - extraDropCalc)) > 2F) {
        if (ent.getPosY() < pos.yCoord - extraDropCalc) {
          ent.setMotionY(ent.getMotionY() + 0.1D);
        }
 else {
          ent.setMotionY(ent.getMotionY() - 0.1D);
        }
      }
      float dropDownSpeedMax=0.15F;
      if (isCycloneFormingOrGreater()) {
        dropDownSpeedMax=0.9F;
      }
      if (ent.getMotionY() < -dropDownSpeedMax) {
        ent.setMotionY(-dropDownSpeedMax);
      }
      if (ent.getMotionY() > dropDownSpeedMax) {
        ent.setMotionY(dropDownSpeedMax);
      }
    }
  }
  for (int i=0; i < listParticlesGround.size(); i++) {
    EntityRotFX ent=listParticlesGround.get(i);
    double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
    if (!ent.isAlive()) {
      listParticlesGround.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double speed=Math.max(0.2F,5F * spinSpeed) + (rand.nextDouble() * 0.01D);
      double distt=size;
      double vecX=ent.getPosX() - pos.xCoord;
      double vecZ=ent.getPosZ() - pos.zCoord;
      float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
      angle+=85;
      int maxParticleSize=60;
      if (stormType == TYPE_WATER) {
        maxParticleSize=150;
        speed/=5D;
      }
      ent.setScale((float)Math.min(maxParticleSize,curDist * 2F));
      if (curDist < 20) {
        ent.setExpired();
      }
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      if (curSpeed < speed * 20D) {
        ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
        ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
      }
    }
  }
}","@SideOnly(Side.CLIENT) public void tickClient(){
  if (isCloudlessStorm())   return;
  if (particleBehaviorFog == null) {
    particleBehaviorFog=new ParticleBehaviorFog(new Vec3(pos.xCoord,pos.yCoord,pos.zCoord));
  }
 else {
    if (!Minecraft.getMinecraft().isSingleplayer() || !(Minecraft.getMinecraft().currentScreen instanceof GuiIngameMenu)) {
      particleBehaviorFog.tickUpdateList();
    }
  }
  EntityPlayer entP=Minecraft.getMinecraft().player;
  spinSpeed=0.02D;
  double spinSpeedMax=0.4D;
  if (isCycloneFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.00D + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * spinSpeedMax * 0.2D);
  }
 else   if (isTornadoFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.2D;
  }
 else   if (levelCurIntensityStage >= STATE_HIGHWIND) {
    spinSpeed=spinSpeedMax * 0.05D;
  }
 else {
    spinSpeed=spinSpeedMax * 0.02D;
  }
  if (isHurricane()) {
    spinSpeed+=0.1D;
  }
  if (size == 0)   size=1;
  int delay=Math.max(1,(int)(100F / size * 1F));
  int loopSize=1;
  int extraSpawning=0;
  if (isSpinning()) {
    loopSize+=4;
    extraSpawning=300;
  }
  if (stormType == TYPE_WATER) {
    if (levelCurIntensityStage >= STATE_STAGE5) {
      loopSize=10;
      extraSpawning=800;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE4) {
      loopSize=8;
      extraSpawning=700;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE3) {
      loopSize=6;
      extraSpawning=500;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE2) {
      loopSize=4;
      extraSpawning=400;
    }
 else {
      extraSpawning=300;
    }
  }
  Random rand=new Random();
  Vec3 playerAdjPos=new Vec3(entP.posX,pos.yCoord,entP.posZ);
  double maxSpawnDistFromPlayer=512;
  if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigMisc.Cloud_ParticleSpawnDelay) == 0) {
    for (int i=0; i < loopSize; i++) {
      if (listParticlesCloud.size() < size + extraSpawning) {
        double spawnRad=size;
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),layers.get(layer),pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          if (getAvoidAngleIfTerrainAtOrAheadOfPosition(getAdjustedAngle(),tryPos) == 0) {
            EntityRotFX particle;
            if (WeatherUtil.isAprilFoolsDay()) {
              particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.chicken);
            }
 else {
              particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0);
            }
            listParticlesCloud.add(particle);
          }
        }
      }
    }
  }
  if (levelCurIntensityStage >= STATE_HIGHWIND) {
    for (int i=0; i < (stormType == TYPE_WATER ? 50 : 3); i++) {
      if (listParticlesGround.size() < (stormType == TYPE_WATER ? 600 : 150)) {
        double spawnRad=size / 4 * 3;
        if (stormType == TYPE_WATER) {
          spawnRad=size * 3;
        }
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),posGround.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          int groundY=WeatherUtilBlock.getPrecipitationHeightSafe(manager.getWorld(),new BlockPos((int)tryPos.xCoord,0,(int)tryPos.zCoord)).getY();
          EntityRotFX particle;
          if (WeatherUtil.isAprilFoolsDay()) {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0,ParticleRegistry.potato);
          }
 else {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0);
          }
          particle.setScale(100);
          particle.rotationYaw=rand.nextInt(360);
          particle.rotationPitch=rand.nextInt(360);
          listParticlesGround.add(particle);
        }
      }
    }
  }
  delay=1;
  loopSize=2;
  double spawnRad=size / 48;
  if (levelCurIntensityStage >= STATE_STAGE5) {
    spawnRad=200;
    loopSize=10;
    sizeMaxFunnelParticles=1200;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE4) {
    spawnRad=150;
    loopSize=8;
    sizeMaxFunnelParticles=1000;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE3) {
    spawnRad=100;
    loopSize=6;
    sizeMaxFunnelParticles=800;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE2) {
    spawnRad=50;
    loopSize=4;
    sizeMaxFunnelParticles=600;
  }
 else {
    sizeMaxFunnelParticles=600;
  }
  if (isTornadoFormingOrGreater() || (attrib_waterSpout)) {
    if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigStorm.Storm_ParticleSpawnDelay) == 0) {
      for (int i=0; i < loopSize; i++) {
        if (listParticlesFunnel.size() >= sizeMaxFunnelParticles) {
          listParticlesFunnel.get(0).setExpired();
          listParticlesFunnel.remove(0);
        }
        if (listParticlesFunnel.size() < sizeMaxFunnelParticles) {
          Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),pos.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
          if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
            EntityRotFX particle;
            if (WeatherUtil.isAprilFoolsDay()) {
              particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1,ParticleRegistry.potato);
            }
 else {
              if (!isFirenado) {
                particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1);
              }
 else {
                particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1,ParticleRegistry.cloud256_fire);
              }
            }
            particle.setMaxAge(150 + ((levelCurIntensityStage - 1) * 100) + rand.nextInt(100));
            float baseBright=0.3F;
            float randFloat=(rand.nextFloat() * 0.6F);
            particle.rotationYaw=rand.nextInt(360);
            float finalBright=Math.min(1F,baseBright + randFloat);
            if (levelCurIntensityStage == STATE_HIGHWIND) {
              particle.setScale(150);
              particle.setRBGColorF(finalBright - 0.2F,finalBright - 0.2F,finalBright);
            }
 else {
              particle.setScale(250);
              particle.setRBGColorF(finalBright,finalBright,finalBright);
            }
            if (isFirenado) {
              particle.setRBGColorF(1F,1F,1F);
            }
            listParticlesFunnel.add(particle);
          }
        }
 else {
        }
      }
    }
  }
  for (int i=0; i < listParticlesFunnel.size(); i++) {
    EntityRotFX ent=listParticlesFunnel.get(i);
    if (!ent.isAlive()) {
      listParticlesFunnel.remove(ent);
    }
 else     if (ent.getPosY() > pos.yCoord) {
      ent.setExpired();
      listParticlesFunnel.remove(ent);
    }
 else {
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
      ent.rotationYaw+=ent.getEntityId() % 90;
      ent.rotationPitch=-30F;
      if (levelCurIntensityStage == STATE_HIGHWIND) {
        int fadingDistStart=30;
        if (ent.getPosY() > posGround.yCoord + fadingDistStart) {
          float maxVal=ent.getBlueColorF();
          float fadeRate=0.002F;
          ent.setRBGColorF(Math.min(maxVal,ent.getRedColorF() + fadeRate),Math.min(maxVal,ent.getGreenColorF() + fadeRate),maxVal);
        }
      }
      spinEntity(ent);
    }
  }
  for (int i=0; i < listParticlesCloud.size(); i++) {
    EntityRotFX ent=listParticlesCloud.get(i);
    if (!ent.isAlive()) {
      listParticlesCloud.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
      float dropDownRange=15F;
      float extraDropCalc=0;
      if (curDist < 200 && ent.getEntityId() % 20 < 5) {
        extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        if (isCycloneFormingOrGreater()) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange * 5F);
        }
      }
      if (isSpinning()) {
        double speed=spinSpeed + (rand.nextDouble() * 0.01D);
        double distt=size;
        double vecX=ent.getPosX() - pos.xCoord;
        double vecZ=ent.getPosZ() - pos.zCoord;
        float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
        angle+=speed * 50D;
        angle-=(ent.getEntityId() % 10) * 3D;
        angle+=rand.nextInt(10) - rand.nextInt(10);
        if (curDist > distt) {
          angle+=40;
        }
        if (ent.getEntityId() % 20 < 5) {
          if (levelCurIntensityStage >= STATE_FORMING) {
            if (stormType == TYPE_WATER) {
              angle+=40 + ((ent.getEntityId() % 5) * 4);
              if (curDist > 150 + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * 30)) {
                angle+=10;
              }
            }
 else {
              angle+=30 + ((ent.getEntityId() % 5) * 4);
            }
          }
 else {
            if (curDist > 150) {
              angle+=50 + ((ent.getEntityId() % 5) * 4);
            }
          }
          double var16=this.pos.xCoord - ent.getPosX();
          double var18=this.pos.zCoord - ent.getPosZ();
          ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
          ent.rotationPitch=-20F - (ent.getEntityId() % 10);
        }
        if (curSpeed < speed * 20D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
 else {
        float cloudMoveAmp=0.2F * (1 + layer);
        float speed=getAdjustedSpeed() * cloudMoveAmp;
        float angle=getAdjustedAngle();
        if ((manager.getWorld().getTotalWorldTime() + this.ID) % 40 == 0) {
          ent.avoidTerrainAngle=getAvoidAngleIfTerrainAtOrAheadOfPosition(angle,ent.getPos());
        }
        angle+=ent.avoidTerrainAngle;
        if (ent.avoidTerrainAngle != 0) {
          speed*=0.5D;
        }
        dropDownRange=5;
        if (ent.getEntityId() % 20 < 5) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        }
        if (curSpeed < speed * 1D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
      if (Math.abs(ent.getPosY() - (pos.yCoord - extraDropCalc)) > 2F) {
        if (ent.getPosY() < pos.yCoord - extraDropCalc) {
          ent.setMotionY(ent.getMotionY() + 0.1D);
        }
 else {
          ent.setMotionY(ent.getMotionY() - 0.1D);
        }
      }
      float dropDownSpeedMax=0.15F;
      if (isCycloneFormingOrGreater()) {
        dropDownSpeedMax=0.9F;
      }
      if (ent.getMotionY() < -dropDownSpeedMax) {
        ent.setMotionY(-dropDownSpeedMax);
      }
      if (ent.getMotionY() > dropDownSpeedMax) {
        ent.setMotionY(dropDownSpeedMax);
      }
    }
  }
  for (int i=0; i < listParticlesGround.size(); i++) {
    EntityRotFX ent=listParticlesGround.get(i);
    double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
    if (!ent.isAlive()) {
      listParticlesGround.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double speed=Math.max(0.2F,5F * spinSpeed) + (rand.nextDouble() * 0.01D);
      double distt=size;
      double vecX=ent.getPosX() - pos.xCoord;
      double vecZ=ent.getPosZ() - pos.zCoord;
      float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
      angle+=85;
      int maxParticleSize=60;
      if (stormType == TYPE_WATER) {
        maxParticleSize=150;
        speed/=5D;
      }
      ent.setScale((float)Math.min(maxParticleSize,curDist * 2F));
      if (curDist < 20) {
        ent.setExpired();
      }
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      if (curSpeed < speed * 20D) {
        ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
        ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
      }
    }
  }
}",0.9996429563216568
81879,"@SideOnly(Side.CLIENT) public void tickRender(float partialTick){
  super.tickRender(partialTick);
  if (!WeatherUtil.isPaused()) {
    int count=8 + 1;
    ParticleBehaviorFog.newCloudWay=true;
    Iterator<Map.Entry<Integer,EntityRotFX>> it=lookupParticlesCloud.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<Integer,EntityRotFX> entry=it.next();
      EntityRotFX ent=entry.getValue();
      if (!ent.isAlive()) {
        it.remove();
      }
 else {
        int i=entry.getKey();
        Vec3 tryPos=null;
        if (i == 0) {
          tryPos=new Vec3(pos.xCoord,layers.get(layer),pos.zCoord);
        }
 else {
          double spawnRad=120;
          double speed=2D / (spawnRad);
          if (isSpinning()) {
            speed=50D / (spawnRad);
          }
          double offsetRotationPrev=((ticksExisted - 1) % 360) * speed;
          double offsetRotationNext=(ticksExisted % 360) * speed;
          double offsetRotation=offsetRotationPrev + (offsetRotationNext - offsetRotationPrev) * partialTick;
          double rad=Math.toRadians(offsetRotation + ((360D / (double)(count - 1)) * ((double)(i - 1))));
          double x=-Math.sin(rad) * spawnRad;
          double z=Math.cos(rad) * spawnRad;
          tryPos=new Vec3(pos.xCoord + x,layers.get(layer),pos.zCoord + z);
          ent.setAge(100);
        }
        ent.setPosition(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord);
      }
    }
    count=16 + 1;
    it=lookupParticlesCloudLower.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<Integer,EntityRotFX> entry=it.next();
      EntityRotFX ent=entry.getValue();
      if (!ent.isAlive()) {
        it.remove();
      }
 else {
        int i=entry.getKey();
        Vec3 tryPos=null;
        if (i == 0) {
          tryPos=new Vec3(pos.xCoord,layers.get(layer),pos.zCoord);
        }
 else {
          double spawnRad=80;
          double speed=50D / (spawnRad);
          double offsetRotationPrev=((ticksExisted - 1) % 360) * speed;
          double offsetRotationNext=(ticksExisted % 360) * speed;
          double offsetRotation=offsetRotationPrev + (offsetRotationNext - offsetRotationPrev) * partialTick;
          double rad=Math.toRadians(offsetRotation + ((360D / (double)(count - 1)) * ((double)(i - 1))));
          double x=-Math.sin(rad) * spawnRad;
          double z=Math.cos(rad) * spawnRad;
          tryPos=new Vec3(pos.xCoord + x,layers.get(layer) - 20,pos.zCoord + z);
          double var16=this.pos.xCoord - ent.getPosX();
          double var18=this.pos.zCoord - ent.getPosZ();
          ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
          ent.rotationPitch=-20F;
          ent.setScale(800);
          ent.setAge(100);
        }
        ent.setPosition(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord);
      }
    }
  }
}","@SideOnly(Side.CLIENT) public void tickRender(float partialTick){
  super.tickRender(partialTick);
  if (!WeatherUtil.isPaused()) {
    int count=8 + 1;
    ParticleBehaviorFog.newCloudWay=true;
    Iterator<Map.Entry<Integer,EntityRotFX>> it=lookupParticlesCloud.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<Integer,EntityRotFX> entry=it.next();
      EntityRotFX ent=entry.getValue();
      if (!ent.isAlive()) {
        it.remove();
      }
 else {
        int i=entry.getKey();
        Vec3 tryPos=null;
        double spawnRad=120;
        double speed=2D / (spawnRad);
        if (isSpinning()) {
          speed=50D / (spawnRad);
        }
        ent.rotationSpeedAroundCenter=(float)speed;
        if (i == 0) {
          tryPos=new Vec3(pos.xCoord,layers.get(layer),pos.zCoord);
          ent.rotationYaw=ent.rotationAroundCenter;
        }
 else {
          double rad=Math.toRadians(ent.rotationAroundCenter - ent.rotationSpeedAroundCenter + (ent.rotationSpeedAroundCenter * partialTick));
          double x=-Math.sin(rad) * spawnRad;
          double z=Math.cos(rad) * spawnRad;
          tryPos=new Vec3(pos.xCoord + x,layers.get(layer),pos.zCoord + z);
          double var16=this.pos.xCoord - ent.getPosX();
          double var18=this.pos.zCoord - ent.getPosZ();
          ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
        }
        ent.setPosition(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord);
      }
    }
    count=16 * 2;
    it=lookupParticlesCloudLower.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<Integer,EntityRotFX> entry=it.next();
      EntityRotFX ent=entry.getValue();
      if (!ent.isAlive()) {
        it.remove();
      }
 else {
        int i=entry.getKey();
        Vec3 tryPos=null;
        ent.setScale(800);
        double countPerLayer=16;
        double rotPos=i % 16;
        int layerRot=i / 16;
        double spawnRad=80;
        if (layerRot == 1) {
          spawnRad=60;
          ent.setScale(600);
        }
        double speed=50D / (spawnRad * 2D);
        ent.rotationSpeedAroundCenter=(float)speed;
        double rad=Math.toRadians(ent.rotationAroundCenter - ent.rotationSpeedAroundCenter + (ent.rotationSpeedAroundCenter * partialTick));
        double x=-Math.sin(rad) * spawnRad;
        double z=Math.cos(rad) * spawnRad;
        tryPos=new Vec3(pos.xCoord + x,layers.get(layer) - 20,pos.zCoord + z);
        ent.setPosition(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord);
        double var16=this.pos.xCoord - ent.getPosX();
        double var18=this.pos.zCoord - ent.getPosZ();
        ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
        ent.rotationPitch=-20F;
      }
    }
  }
}",0.3983521404262941
81880,"@SideOnly(Side.CLIENT) public void tickClient(){
  if (isCloudlessStorm())   return;
  if (particleBehaviorFog == null) {
    particleBehaviorFog=new ParticleBehaviorFog(new Vec3(pos.xCoord,pos.yCoord,pos.zCoord));
  }
 else {
    if (!Minecraft.getMinecraft().isSingleplayer() || !(Minecraft.getMinecraft().currentScreen instanceof GuiIngameMenu)) {
      particleBehaviorFog.tickUpdateList();
    }
  }
  EntityPlayer entP=Minecraft.getMinecraft().thePlayer;
  spinSpeed=0.02D;
  double spinSpeedMax=0.4D;
  if (isCycloneFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.00D + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * spinSpeedMax * 0.2D);
  }
 else   if (isTornadoFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.2D;
  }
 else   if (levelCurIntensityStage >= STATE_HIGHWIND) {
    spinSpeed=spinSpeedMax * 0.05D;
  }
 else {
    spinSpeed=spinSpeedMax * 0.02D;
  }
  if (isHurricane()) {
    spinSpeed+=0.1D;
  }
  if (size == 0)   size=1;
  int delay=Math.max(1,(int)(100F / size * 1F));
  int loopSize=1;
  int extraSpawning=0;
  if (isSpinning()) {
    loopSize+=4;
    extraSpawning=300;
  }
  if (stormType == TYPE_WATER) {
    if (levelCurIntensityStage >= STATE_STAGE5) {
      loopSize=10;
      extraSpawning=800;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE4) {
      loopSize=8;
      extraSpawning=700;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE3) {
      loopSize=6;
      extraSpawning=500;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE2) {
      loopSize=4;
      extraSpawning=400;
    }
 else {
      extraSpawning=300;
    }
  }
  Random rand=new Random();
  Vec3 playerAdjPos=new Vec3(entP.posX,pos.yCoord,entP.posZ);
  double maxSpawnDistFromPlayer=512;
  if (ParticleBehaviorFog.newCloudWay) {
    int count=8 + 1;
    for (int i=0; i < count; i++) {
      if (!lookupParticlesCloud.containsKey(i)) {
        Vec3 tryPos=null;
        if (i == 0) {
          tryPos=new Vec3(pos.xCoord,layers.get(layer),pos.zCoord);
        }
 else {
          float spawnRad=120;
          float rad=(float)Math.toRadians((360D / (double)(count - 1)) * ((double)(i - 1)));
          float x=(float)-Math.sin(rad) * spawnRad;
          float z=(float)Math.cos(rad) * spawnRad;
          tryPos=new Vec3(pos.xCoord + x,layers.get(layer),pos.zCoord + z);
        }
        EntityRotFX particle;
        if (WeatherUtil.isAprilFoolsDay()) {
          particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.chicken);
        }
 else {
          particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.cloud256_test);
        }
        lookupParticlesCloud.put(i,particle);
      }
    }
    if (isSpinning()) {
      count=16 + 1;
      for (int i=0; i < count; i++) {
        if (!lookupParticlesCloudLower.containsKey(i)) {
          Vec3 tryPos=null;
          if (i == 0) {
            tryPos=new Vec3(pos.xCoord,layers.get(layer),pos.zCoord);
          }
 else {
            float spawnRad=120;
            float rad=(float)Math.toRadians((360D / (double)(count - 1)) * ((double)(i - 1)));
            float x=(float)-Math.sin(rad) * spawnRad;
            float z=(float)Math.cos(rad) * spawnRad;
            tryPos=new Vec3(pos.xCoord + x,layers.get(layer),pos.zCoord + z);
          }
          EntityRotFX particle;
          if (WeatherUtil.isAprilFoolsDay()) {
            particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.chicken);
          }
 else {
            particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.cloud256_test);
          }
          lookupParticlesCloudLower.put(i,particle);
        }
      }
    }
  }
  if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigMisc.Cloud_ParticleSpawnDelay) == 0) {
    for (int i=0; i < loopSize; i++) {
      if (!ParticleBehaviorFog.newCloudWay && listParticlesCloud.size() < (size + extraSpawning) / 1F) {
        double spawnRad=size;
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),layers.get(layer),pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          if (getAvoidAngleIfTerrainAtOrAheadOfPosition(getAdjustedAngle(),tryPos) == 0) {
            EntityRotFX particle;
            if (WeatherUtil.isAprilFoolsDay()) {
              particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.chicken);
            }
 else {
              particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.cloud256);
            }
            listParticlesCloud.add(particle);
          }
        }
      }
    }
  }
  if (!ParticleBehaviorFog.newCloudWay && levelCurIntensityStage >= STATE_HIGHWIND) {
    for (int i=0; i < (stormType == TYPE_WATER ? 50 : 3); i++) {
      if (listParticlesGround.size() < (stormType == TYPE_WATER ? 600 : 150)) {
        double spawnRad=size / 4 * 3;
        if (stormType == TYPE_WATER) {
          spawnRad=size * 3;
        }
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),posGround.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          int groundY=WeatherUtilBlock.getPrecipitationHeightSafe(manager.getWorld(),new BlockPos((int)tryPos.xCoord,0,(int)tryPos.zCoord)).getY();
          EntityRotFX particle;
          if (WeatherUtil.isAprilFoolsDay()) {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0,ParticleRegistry.potato);
          }
 else {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0);
          }
          particle.setScale(200);
          particle.rotationYaw=rand.nextInt(360);
          particle.rotationPitch=rand.nextInt(360);
          listParticlesGround.add(particle);
        }
      }
    }
  }
  delay=1;
  loopSize=2;
  double spawnRad=size / 48;
  if (levelCurIntensityStage >= STATE_STAGE5) {
    spawnRad=200;
    loopSize=10;
    sizeMaxFunnelParticles=1200;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE4) {
    spawnRad=150;
    loopSize=8;
    sizeMaxFunnelParticles=1000;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE3) {
    spawnRad=100;
    loopSize=6;
    sizeMaxFunnelParticles=800;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE2) {
    spawnRad=50;
    loopSize=4;
    sizeMaxFunnelParticles=600;
  }
 else {
    sizeMaxFunnelParticles=600;
  }
  if (isTornadoFormingOrGreater() || (attrib_waterSpout)) {
    if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigStorm.Storm_ParticleSpawnDelay) == 0) {
      for (int i=0; i < loopSize; i++) {
        if (listParticlesFunnel.size() >= sizeMaxFunnelParticles) {
          listParticlesFunnel.get(0).setExpired();
          listParticlesFunnel.remove(0);
        }
        if (listParticlesFunnel.size() < sizeMaxFunnelParticles) {
          Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),pos.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
          if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
            EntityRotFX particle;
            if (WeatherUtil.isAprilFoolsDay()) {
              particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1,ParticleRegistry.potato);
            }
 else {
              particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1);
            }
            particle.setMaxAge(150 + ((levelCurIntensityStage - 1) * 100) + rand.nextInt(100));
            float baseBright=0.3F;
            float randFloat=(rand.nextFloat() * 0.6F);
            particle.rotationYaw=rand.nextInt(360);
            float finalBright=Math.min(1F,baseBright + randFloat);
            if (levelCurIntensityStage == STATE_HIGHWIND) {
              particle.setScale(150);
              particle.setRBGColorF(finalBright - 0.2F,finalBright - 0.2F,finalBright);
            }
 else {
              particle.setScale(250);
              particle.setRBGColorF(finalBright,finalBright,finalBright);
            }
            listParticlesFunnel.add(particle);
          }
        }
 else {
        }
      }
    }
  }
  for (int i=0; i < listParticlesFunnel.size(); i++) {
    EntityRotFX ent=listParticlesFunnel.get(i);
    if (!ent.isAlive()) {
      listParticlesFunnel.remove(ent);
    }
 else     if (ent.getPosY() > pos.yCoord) {
      ent.setExpired();
      listParticlesFunnel.remove(ent);
    }
 else {
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
      ent.rotationYaw+=ent.getEntityId() % 90;
      ent.rotationPitch=-30F;
      if (levelCurIntensityStage == STATE_HIGHWIND) {
        int fadingDistStart=30;
        if (ent.getPosY() > posGround.yCoord + fadingDistStart) {
          float maxVal=ent.getBlueColorF();
          float fadeRate=0.002F;
          ent.setRBGColorF(Math.min(maxVal,ent.getRedColorF() + fadeRate),Math.min(maxVal,ent.getGreenColorF() + fadeRate),maxVal);
        }
      }
      spinEntity(ent);
    }
  }
  for (int i=0; i < listParticlesCloud.size(); i++) {
    EntityRotFX ent=listParticlesCloud.get(i);
    if (!ent.isAlive()) {
      listParticlesCloud.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
      float dropDownRange=15F;
      float extraDropCalc=0;
      if (curDist < 200 && ent.getEntityId() % 20 < 5) {
        extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        if (isCycloneFormingOrGreater()) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange * 5F);
        }
      }
      if (isSpinning()) {
        double speed=spinSpeed + (rand.nextDouble() * 0.01D);
        double distt=size;
        double vecX=ent.getPosX() - pos.xCoord;
        double vecZ=ent.getPosZ() - pos.zCoord;
        float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
        angle+=speed * 50D;
        angle-=(ent.getEntityId() % 10) * 3D;
        angle+=rand.nextInt(10) - rand.nextInt(10);
        if (curDist > distt) {
          angle+=40;
        }
        if (ent.getEntityId() % 20 < 5) {
          if (levelCurIntensityStage >= STATE_FORMING) {
            if (stormType == TYPE_WATER) {
              angle+=40 + ((ent.getEntityId() % 5) * 4);
              if (curDist > 150 + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * 30)) {
                angle+=10;
              }
            }
 else {
              angle+=30 + ((ent.getEntityId() % 5) * 4);
            }
          }
 else {
            if (curDist > 150) {
              angle+=50 + ((ent.getEntityId() % 5) * 4);
            }
          }
          double var16=this.pos.xCoord - ent.getPosX();
          double var18=this.pos.zCoord - ent.getPosZ();
          ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
          ent.rotationPitch=-20F - (ent.getEntityId() % 10);
        }
        if (curSpeed < speed * 20D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
 else {
        float cloudMoveAmp=0.2F * (1 + layer);
        float speed=getAdjustedSpeed() * cloudMoveAmp;
        float angle=getAdjustedAngle();
        if ((manager.getWorld().getTotalWorldTime() + this.ID) % 40 == 0) {
          ent.avoidTerrainAngle=getAvoidAngleIfTerrainAtOrAheadOfPosition(angle,ent.getPos());
        }
        angle+=ent.avoidTerrainAngle;
        if (ent.avoidTerrainAngle != 0) {
          speed*=0.5D;
        }
        dropDownRange=5;
        if (ent.getEntityId() % 20 < 5) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        }
        if (curSpeed < speed * 1D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
      if (Math.abs(ent.getPosY() - (pos.yCoord - extraDropCalc)) > 2F) {
        if (ent.getPosY() < pos.yCoord - extraDropCalc) {
          ent.setMotionY(ent.getMotionY() + 0.1D);
        }
 else {
          ent.setMotionY(ent.getMotionY() - 0.1D);
        }
      }
      float dropDownSpeedMax=0.15F;
      if (isCycloneFormingOrGreater()) {
        dropDownSpeedMax=0.9F;
      }
      if (ent.getMotionY() < -dropDownSpeedMax) {
        ent.setMotionY(-dropDownSpeedMax);
      }
      if (ent.getMotionY() > dropDownSpeedMax) {
        ent.setMotionY(dropDownSpeedMax);
      }
    }
  }
  for (int i=0; i < listParticlesGround.size(); i++) {
    EntityRotFX ent=listParticlesGround.get(i);
    double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
    if (!ent.isAlive()) {
      listParticlesGround.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double speed=Math.max(0.2F,5F * spinSpeed) + (rand.nextDouble() * 0.01D);
      double distt=size;
      double vecX=ent.getPosX() - pos.xCoord;
      double vecZ=ent.getPosZ() - pos.zCoord;
      float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
      angle+=85;
      int maxParticleSize=60;
      if (stormType == TYPE_WATER) {
        maxParticleSize=150;
        speed/=5D;
      }
      ent.setScale((float)Math.min(maxParticleSize,curDist * 2F));
      if (curDist < 20) {
        ent.setExpired();
      }
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      if (curSpeed < speed * 20D) {
        ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
        ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
      }
    }
  }
}","@SideOnly(Side.CLIENT) public void tickClient(){
  if (isCloudlessStorm())   return;
  if (particleBehaviorFog == null) {
    particleBehaviorFog=new ParticleBehaviorFog(new Vec3(pos.xCoord,pos.yCoord,pos.zCoord));
  }
 else {
    if (!Minecraft.getMinecraft().isSingleplayer() || !(Minecraft.getMinecraft().currentScreen instanceof GuiIngameMenu)) {
      particleBehaviorFog.tickUpdateList();
    }
  }
  EntityPlayer entP=Minecraft.getMinecraft().thePlayer;
  spinSpeed=0.02D;
  double spinSpeedMax=0.4D;
  if (isCycloneFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.00D + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * spinSpeedMax * 0.2D);
  }
 else   if (isTornadoFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.2D;
  }
 else   if (levelCurIntensityStage >= STATE_HIGHWIND) {
    spinSpeed=spinSpeedMax * 0.05D;
  }
 else {
    spinSpeed=spinSpeedMax * 0.02D;
  }
  if (isHurricane()) {
    spinSpeed+=0.1D;
  }
  if (size == 0)   size=1;
  int delay=Math.max(1,(int)(100F / size * 1F));
  int loopSize=1;
  int extraSpawning=0;
  if (isSpinning()) {
    loopSize+=4;
    extraSpawning=300;
  }
  if (stormType == TYPE_WATER) {
    if (levelCurIntensityStage >= STATE_STAGE5) {
      loopSize=10;
      extraSpawning=800;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE4) {
      loopSize=8;
      extraSpawning=700;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE3) {
      loopSize=6;
      extraSpawning=500;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE2) {
      loopSize=4;
      extraSpawning=400;
    }
 else {
      extraSpawning=300;
    }
  }
  Random rand=new Random();
  Vec3 playerAdjPos=new Vec3(entP.posX,pos.yCoord,entP.posZ);
  double maxSpawnDistFromPlayer=512;
  if (ParticleBehaviorFog.newCloudWay) {
    int count=8 + 1;
    for (int i=0; i < count; i++) {
      if (!lookupParticlesCloud.containsKey(i)) {
        Vec3 tryPos=new Vec3(pos.xCoord,layers.get(layer),pos.zCoord);
        EntityRotFX particle;
        if (WeatherUtil.isAprilFoolsDay()) {
          particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.chicken);
        }
 else {
          particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.cloud256_test);
        }
        if (i != 0) {
          double rotPos=(i - 1);
          float radStart=(float)((360D / 8D) * rotPos);
          particle.rotationAroundCenter=radStart;
        }
        lookupParticlesCloud.put(i,particle);
      }
    }
    if (isSpinning()) {
      count=16 * 2;
      for (int i=0; i < count; i++) {
        if (!lookupParticlesCloudLower.containsKey(i)) {
          Vec3 tryPos=new Vec3(pos.xCoord,layers.get(layer),pos.zCoord);
          EntityRotFX particle;
          if (WeatherUtil.isAprilFoolsDay()) {
            particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.chicken);
          }
 else {
            particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.cloud256_test);
          }
          double rotPos=i % 15;
          float radStart=(float)((360D / 16D) * rotPos);
          particle.rotationAroundCenter=radStart;
          lookupParticlesCloudLower.put(i,particle);
        }
      }
    }
  }
  if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigMisc.Cloud_ParticleSpawnDelay) == 0) {
    for (int i=0; i < loopSize; i++) {
      if (!ParticleBehaviorFog.newCloudWay && listParticlesCloud.size() < (size + extraSpawning) / 1F) {
        double spawnRad=size;
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),layers.get(layer),pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          if (getAvoidAngleIfTerrainAtOrAheadOfPosition(getAdjustedAngle(),tryPos) == 0) {
            EntityRotFX particle;
            if (WeatherUtil.isAprilFoolsDay()) {
              particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.chicken);
            }
 else {
              particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.cloud256);
            }
            listParticlesCloud.add(particle);
          }
        }
      }
    }
  }
  if (!ParticleBehaviorFog.newCloudWay && levelCurIntensityStage >= STATE_HIGHWIND) {
    for (int i=0; i < (stormType == TYPE_WATER ? 50 : 3); i++) {
      if (listParticlesGround.size() < (stormType == TYPE_WATER ? 600 : 150)) {
        double spawnRad=size / 4 * 3;
        if (stormType == TYPE_WATER) {
          spawnRad=size * 3;
        }
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),posGround.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          int groundY=WeatherUtilBlock.getPrecipitationHeightSafe(manager.getWorld(),new BlockPos((int)tryPos.xCoord,0,(int)tryPos.zCoord)).getY();
          EntityRotFX particle;
          if (WeatherUtil.isAprilFoolsDay()) {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0,ParticleRegistry.potato);
          }
 else {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0);
          }
          particle.setScale(200);
          particle.rotationYaw=rand.nextInt(360);
          particle.rotationPitch=rand.nextInt(360);
          listParticlesGround.add(particle);
        }
      }
    }
  }
  delay=1;
  loopSize=2;
  double spawnRad=size / 48;
  if (levelCurIntensityStage >= STATE_STAGE5) {
    spawnRad=200;
    loopSize=10;
    sizeMaxFunnelParticles=1200;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE4) {
    spawnRad=150;
    loopSize=8;
    sizeMaxFunnelParticles=1000;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE3) {
    spawnRad=100;
    loopSize=6;
    sizeMaxFunnelParticles=800;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE2) {
    spawnRad=50;
    loopSize=4;
    sizeMaxFunnelParticles=600;
  }
 else {
    sizeMaxFunnelParticles=600;
  }
  if (isTornadoFormingOrGreater() || (attrib_waterSpout)) {
    if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigStorm.Storm_ParticleSpawnDelay) == 0) {
      for (int i=0; i < loopSize; i++) {
        if (listParticlesFunnel.size() >= sizeMaxFunnelParticles) {
          listParticlesFunnel.get(0).setExpired();
          listParticlesFunnel.remove(0);
        }
        if (listParticlesFunnel.size() < sizeMaxFunnelParticles) {
          Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),pos.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
          if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
            EntityRotFX particle;
            if (WeatherUtil.isAprilFoolsDay()) {
              particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1,ParticleRegistry.potato);
            }
 else {
              particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1);
            }
            particle.setMaxAge(150 + ((levelCurIntensityStage - 1) * 100) + rand.nextInt(100));
            float baseBright=0.3F;
            float randFloat=(rand.nextFloat() * 0.6F);
            particle.rotationYaw=rand.nextInt(360);
            float finalBright=Math.min(1F,baseBright + randFloat);
            if (levelCurIntensityStage == STATE_HIGHWIND) {
              particle.setScale(150);
              particle.setRBGColorF(finalBright - 0.2F,finalBright - 0.2F,finalBright);
            }
 else {
              particle.setScale(250);
              particle.setRBGColorF(finalBright,finalBright,finalBright);
            }
            listParticlesFunnel.add(particle);
          }
        }
 else {
        }
      }
    }
  }
  for (int i=0; i < listParticlesFunnel.size(); i++) {
    EntityRotFX ent=listParticlesFunnel.get(i);
    if (!ent.isAlive()) {
      listParticlesFunnel.remove(ent);
    }
 else     if (ent.getPosY() > pos.yCoord) {
      ent.setExpired();
      listParticlesFunnel.remove(ent);
    }
 else {
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
      ent.rotationYaw+=ent.getEntityId() % 90;
      ent.rotationPitch=-30F;
      if (levelCurIntensityStage == STATE_HIGHWIND) {
        int fadingDistStart=30;
        if (ent.getPosY() > posGround.yCoord + fadingDistStart) {
          float maxVal=ent.getBlueColorF();
          float fadeRate=0.002F;
          ent.setRBGColorF(Math.min(maxVal,ent.getRedColorF() + fadeRate),Math.min(maxVal,ent.getGreenColorF() + fadeRate),maxVal);
        }
      }
      spinEntity(ent);
    }
  }
  for (int i=0; i < listParticlesCloud.size(); i++) {
    EntityRotFX ent=listParticlesCloud.get(i);
    if (!ent.isAlive()) {
      listParticlesCloud.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
      float dropDownRange=15F;
      float extraDropCalc=0;
      if (curDist < 200 && ent.getEntityId() % 20 < 5) {
        extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        if (isCycloneFormingOrGreater()) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange * 5F);
        }
      }
      if (isSpinning()) {
        double speed=spinSpeed + (rand.nextDouble() * 0.01D);
        double distt=size;
        double vecX=ent.getPosX() - pos.xCoord;
        double vecZ=ent.getPosZ() - pos.zCoord;
        float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
        angle+=speed * 50D;
        angle-=(ent.getEntityId() % 10) * 3D;
        angle+=rand.nextInt(10) - rand.nextInt(10);
        if (curDist > distt) {
          angle+=40;
        }
        if (ent.getEntityId() % 20 < 5) {
          if (levelCurIntensityStage >= STATE_FORMING) {
            if (stormType == TYPE_WATER) {
              angle+=40 + ((ent.getEntityId() % 5) * 4);
              if (curDist > 150 + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * 30)) {
                angle+=10;
              }
            }
 else {
              angle+=30 + ((ent.getEntityId() % 5) * 4);
            }
          }
 else {
            if (curDist > 150) {
              angle+=50 + ((ent.getEntityId() % 5) * 4);
            }
          }
          double var16=this.pos.xCoord - ent.getPosX();
          double var18=this.pos.zCoord - ent.getPosZ();
          ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
          ent.rotationPitch=-20F - (ent.getEntityId() % 10);
        }
        if (curSpeed < speed * 20D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
 else {
        float cloudMoveAmp=0.2F * (1 + layer);
        float speed=getAdjustedSpeed() * cloudMoveAmp;
        float angle=getAdjustedAngle();
        if ((manager.getWorld().getTotalWorldTime() + this.ID) % 40 == 0) {
          ent.avoidTerrainAngle=getAvoidAngleIfTerrainAtOrAheadOfPosition(angle,ent.getPos());
        }
        angle+=ent.avoidTerrainAngle;
        if (ent.avoidTerrainAngle != 0) {
          speed*=0.5D;
        }
        dropDownRange=5;
        if (ent.getEntityId() % 20 < 5) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        }
        if (curSpeed < speed * 1D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
      if (Math.abs(ent.getPosY() - (pos.yCoord - extraDropCalc)) > 2F) {
        if (ent.getPosY() < pos.yCoord - extraDropCalc) {
          ent.setMotionY(ent.getMotionY() + 0.1D);
        }
 else {
          ent.setMotionY(ent.getMotionY() - 0.1D);
        }
      }
      float dropDownSpeedMax=0.15F;
      if (isCycloneFormingOrGreater()) {
        dropDownSpeedMax=0.9F;
      }
      if (ent.getMotionY() < -dropDownSpeedMax) {
        ent.setMotionY(-dropDownSpeedMax);
      }
      if (ent.getMotionY() > dropDownSpeedMax) {
        ent.setMotionY(dropDownSpeedMax);
      }
    }
  }
  for (int i=0; i < listParticlesGround.size(); i++) {
    EntityRotFX ent=listParticlesGround.get(i);
    double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
    if (!ent.isAlive()) {
      listParticlesGround.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double speed=Math.max(0.2F,5F * spinSpeed) + (rand.nextDouble() * 0.01D);
      double distt=size;
      double vecX=ent.getPosX() - pos.xCoord;
      double vecZ=ent.getPosZ() - pos.zCoord;
      float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
      angle+=85;
      int maxParticleSize=60;
      if (stormType == TYPE_WATER) {
        maxParticleSize=150;
        speed/=5D;
      }
      ent.setScale((float)Math.min(maxParticleSize,curDist * 2F));
      if (curDist < 20) {
        ent.setExpired();
      }
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      if (curSpeed < speed * 20D) {
        ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
        ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
      }
    }
  }
}",0.9617717590633376
81881,"public void tick(){
  super.tick();
  ticksExisted++;
  posGround=new Vec3(pos.xCoord,pos.yCoord,pos.zCoord);
  posGround.yCoord=currentTopYBlock;
  Side side=FMLCommonHandler.instance().getEffectiveSide();
  if (side == Side.CLIENT) {
    if (!WeatherUtil.isPaused()) {
      ticksSinceLastPacketReceived++;
      tickClient();
      if (isTornadoFormingOrGreater() || isCycloneFormingOrGreater()) {
        tornadoHelper.tick(manager.getWorld());
      }
      if (levelCurIntensityStage >= STATE_HIGHWIND) {
        if (manager.getWorld().isRemote) {
          tornadoHelper.soundUpdates(true,isTornadoFormingOrGreater() || isCycloneFormingOrGreater());
        }
      }
      tickMovementClient();
    }
  }
 else {
    if (isTornadoFormingOrGreater() || isCycloneFormingOrGreater()) {
      tornadoHelper.tick(manager.getWorld());
    }
    if (levelCurIntensityStage >= STATE_HIGHWIND) {
      if (manager.getWorld().isRemote) {
        tornadoHelper.soundUpdates(true,isTornadoFormingOrGreater() || isCycloneFormingOrGreater());
      }
    }
    tickMovement();
    if (layer == 0) {
      if (!isCloudlessStorm()) {
        tickWeatherEvents();
        tickProgression();
        tickSnowFall();
      }
    }
 else {
      size=maxSize;
    }
  }
  if (layer == 0) {
    posBaseFormationPos=new Vec3(pos.xCoord,pos.yCoord,pos.zCoord);
    if (levelCurIntensityStage >= StormObject.levelStormIntensityFormingStartVal) {
      if (levelCurIntensityStage >= StormObject.levelStormIntensityFormingStartVal + 1) {
        formingStrength=1;
        posBaseFormationPos.yCoord=posGround.yCoord;
      }
 else {
        float intensityAdj=Math.min(1F,levelCurStagesIntensity * 2F);
        float val=(levelCurIntensityStage + intensityAdj) - StormObject.levelStormIntensityFormingStartVal;
        formingStrength=val;
        double yDiff=pos.yCoord - posGround.yCoord;
        posBaseFormationPos.yCoord=pos.yCoord - (yDiff * formingStrength);
      }
    }
 else {
      if (levelCurIntensityStage == STATE_HIGHWIND) {
        formingStrength=1;
        posBaseFormationPos.yCoord=posGround.yCoord;
      }
 else {
        formingStrength=0;
        posBaseFormationPos.yCoord=pos.yCoord;
      }
    }
  }
}","public void tick(){
  super.tick();
  posGround=new Vec3(pos.xCoord,pos.yCoord,pos.zCoord);
  posGround.yCoord=currentTopYBlock;
  Side side=FMLCommonHandler.instance().getEffectiveSide();
  if (side == Side.CLIENT) {
    if (!WeatherUtil.isPaused()) {
      ticksSinceLastPacketReceived++;
      tickClient();
      if (isTornadoFormingOrGreater() || isCycloneFormingOrGreater()) {
        tornadoHelper.tick(manager.getWorld());
      }
      if (levelCurIntensityStage >= STATE_HIGHWIND) {
        if (manager.getWorld().isRemote) {
          tornadoHelper.soundUpdates(true,isTornadoFormingOrGreater() || isCycloneFormingOrGreater());
        }
      }
      tickMovementClient();
    }
  }
 else {
    if (isTornadoFormingOrGreater() || isCycloneFormingOrGreater()) {
      tornadoHelper.tick(manager.getWorld());
    }
    if (levelCurIntensityStage >= STATE_HIGHWIND) {
      if (manager.getWorld().isRemote) {
        tornadoHelper.soundUpdates(true,isTornadoFormingOrGreater() || isCycloneFormingOrGreater());
      }
    }
    tickMovement();
    if (layer == 0) {
      if (!isCloudlessStorm()) {
        tickWeatherEvents();
        tickProgression();
        tickSnowFall();
      }
    }
 else {
      size=maxSize;
    }
  }
  if (layer == 0) {
    posBaseFormationPos=new Vec3(pos.xCoord,pos.yCoord,pos.zCoord);
    if (levelCurIntensityStage >= StormObject.levelStormIntensityFormingStartVal) {
      if (levelCurIntensityStage >= StormObject.levelStormIntensityFormingStartVal + 1) {
        formingStrength=1;
        posBaseFormationPos.yCoord=posGround.yCoord;
      }
 else {
        float intensityAdj=Math.min(1F,levelCurStagesIntensity * 2F);
        float val=(levelCurIntensityStage + intensityAdj) - StormObject.levelStormIntensityFormingStartVal;
        formingStrength=val;
        double yDiff=pos.yCoord - posGround.yCoord;
        posBaseFormationPos.yCoord=pos.yCoord - (yDiff * formingStrength);
      }
    }
 else {
      if (levelCurIntensityStage == STATE_HIGHWIND) {
        formingStrength=1;
        posBaseFormationPos.yCoord=posGround.yCoord;
      }
 else {
        formingStrength=0;
        posBaseFormationPos.yCoord=pos.yCoord;
      }
    }
  }
}",0.9959202175883952
81882,"public void onRenderScreenTick(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  if (mc.currentScreen instanceof GuiIngameMenu) {
    ScaledResolution scaledresolution=new ScaledResolution(mc);
    int i=scaledresolution.getScaledWidth();
    int j=scaledresolution.getScaledHeight();
    int k=Mouse.getX() * i / mc.displayWidth;
    int l=j - Mouse.getY() * j / mc.displayHeight - 1;
    configButton=new GuiButton(0,(i / 2) - 100,0,200,20,""String_Node_Str"");
    configButton.drawButton(mc,k,l);
    if (k >= configButton.xPosition && l >= configButton.yPosition && k < configButton.xPosition + 200 && l < configButton.yPosition + 20) {
      if (Mouse.isButtonDown(0)) {
        mc.displayGuiScreen(new GuiEZConfig());
      }
    }
  }
}","public void onRenderScreenTick(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  if (mc.currentScreen instanceof GuiIngameMenu) {
    ScaledResolution scaledresolution=new ScaledResolution(mc);
    int i=scaledresolution.getScaledWidth();
    int j=scaledresolution.getScaledHeight();
    int k=Mouse.getX() * i / mc.displayWidth;
    int l=j - Mouse.getY() * j / mc.displayHeight - 1;
    configButton=new GuiButton(0,(i / 2) - 100,0,200,20,""String_Node_Str"");
    configButton.drawButton(mc,k,l);
    if (k >= configButton.x && l >= configButton.y && k < configButton.x + 200 && l < configButton.y + 20) {
      if (Mouse.isButtonDown(0)) {
        mc.displayGuiScreen(new GuiEZConfig());
      }
    }
  }
}",0.9782903663500678
81883,"@SubscribeEvent @SideOnly(Side.CLIENT) public void onScreenEvent(RenderGameOverlayEvent.Pre event){
  if (false && event.getType() == RenderGameOverlayEvent.ElementType.ALL) {
    Minecraft mc=Minecraft.getMinecraft();
    float lightLevel=0.4F;
    lightLevel=MathHelper.clamp_float(lightLevel,0.0F,1.0F);
    WorldBorder worldborder=mc.theWorld.getWorldBorder();
    float f=(float)worldborder.getClosestDistance(mc.thePlayer);
    double d0=Math.min(worldborder.getResizeSpeed() * (double)worldborder.getWarningTime() * 1000.0D,Math.abs(worldborder.getTargetSize() - worldborder.getDiameter()));
    double d1=Math.max((double)worldborder.getWarningDistance(),d0);
    if ((double)f < d1) {
      f=1.0F - (float)((double)f / d1);
    }
 else {
      f=0.0F;
    }
    float prevVignetteBrightness=lightLevel;
    GlStateManager.disableDepth();
    GlStateManager.depthMask(false);
    GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.ZERO,GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR,GlStateManager.SourceFactor.ONE,GlStateManager.DestFactor.ZERO);
    if (f > 0.0F) {
      GlStateManager.color(0.0F,f,f,1.0F);
    }
 else {
      GlStateManager.color(prevVignetteBrightness,prevVignetteBrightness,prevVignetteBrightness,1.0F);
    }
    ScaledResolution scaledRes=new ScaledResolution(mc);
    GlStateManager.enableBlend();
    mc.getTextureManager().bindTexture(new ResourceLocation(""String_Node_Str""));
    Tessellator tessellator=Tessellator.getInstance();
    VertexBuffer vertexbuffer=tessellator.getBuffer();
    vertexbuffer.begin(7,DefaultVertexFormats.POSITION_TEX);
    vertexbuffer.pos(0.0D,(double)scaledRes.getScaledHeight() * scaledRes.getScaleFactor() * 1D,-90.0D).tex(0.0D,1.0D).endVertex();
    vertexbuffer.pos((double)scaledRes.getScaledWidth() * scaledRes.getScaleFactor(),(double)scaledRes.getScaledHeight() * scaledRes.getScaleFactor(),-90.0D).tex(1.0D,1.0D).endVertex();
    vertexbuffer.pos((double)scaledRes.getScaledWidth() * scaledRes.getScaleFactor(),0.0D,-90.0D).tex(1.0D,0.0D).endVertex();
    vertexbuffer.pos(0.0D,0.0D,-90.0D).tex(0.0D,0.0D).endVertex();
    tessellator.draw();
    GlStateManager.depthMask(true);
    GlStateManager.enableDepth();
    GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
    GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA,GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA,GlStateManager.SourceFactor.ONE,GlStateManager.DestFactor.ZERO);
  }
}","@SubscribeEvent @SideOnly(Side.CLIENT) public void onScreenEvent(RenderGameOverlayEvent.Pre event){
  if (false && event.getType() == RenderGameOverlayEvent.ElementType.ALL) {
    Minecraft mc=Minecraft.getMinecraft();
    float lightLevel=0.4F;
    lightLevel=MathHelper.clamp_float(lightLevel,0.0F,1.0F);
    WorldBorder worldborder=mc.theWorld.getWorldBorder();
    float f=(float)worldborder.getClosestDistance(mc.thePlayer);
    double d0=Math.min(worldborder.getResizeSpeed() * (double)worldborder.getWarningTime() * 1000.0D,Math.abs(worldborder.getTargetSize() - worldborder.getDiameter()));
    double d1=Math.max((double)worldborder.getWarningDistance(),d0);
    if ((double)f < d1) {
      f=1.0F - (float)((double)f / d1);
    }
 else {
      f=0.0F;
    }
    float prevVignetteBrightness=lightLevel;
    GlStateManager.disableDepth();
    GlStateManager.depthMask(false);
    GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.ZERO,GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR,GlStateManager.SourceFactor.ONE,GlStateManager.DestFactor.ZERO);
    if (f > 0.0F) {
      GlStateManager.color(0.0F,f,f,1.0F);
    }
 else {
      GlStateManager.color(prevVignetteBrightness,prevVignetteBrightness,prevVignetteBrightness,1.0F);
    }
    ScaledResolution scaledRes=new ScaledResolution(mc);
    GlStateManager.enableBlend();
    mc.getTextureManager().bindTexture(new ResourceLocation(""String_Node_Str""));
    Tessellator tessellator=Tessellator.getInstance();
    BufferBuilder vertexbuffer=tessellator.getBuffer();
    vertexbuffer.begin(7,DefaultVertexFormats.POSITION_TEX);
    vertexbuffer.pos(0.0D,(double)scaledRes.getScaledHeight() * scaledRes.getScaleFactor() * 1D,-90.0D).tex(0.0D,1.0D).endVertex();
    vertexbuffer.pos((double)scaledRes.getScaledWidth() * scaledRes.getScaleFactor(),(double)scaledRes.getScaledHeight() * scaledRes.getScaleFactor(),-90.0D).tex(1.0D,1.0D).endVertex();
    vertexbuffer.pos((double)scaledRes.getScaledWidth() * scaledRes.getScaleFactor(),0.0D,-90.0D).tex(1.0D,0.0D).endVertex();
    vertexbuffer.pos(0.0D,0.0D,-90.0D).tex(0.0D,0.0D).endVertex();
    tessellator.draw();
    GlStateManager.depthMask(true);
    GlStateManager.enableDepth();
    GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
    GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA,GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA,GlStateManager.SourceFactor.ONE,GlStateManager.DestFactor.ZERO);
  }
}",0.99734096952342
81884,"public void renderTileEntityAt(TileEntity var1,double x,double y,double z,float var8,int destroyStage){
  TileEntityWeatherForecast tEnt=(TileEntityWeatherForecast)var1;
  String particleCount=ExtendedRenderer.rotEffRenderer.getStatistics();
  StormObject so=tEnt.lastTickStormObject;
  Vec3 pos=new Vec3(tEnt.getPos().getX(),tEnt.getPos().getY(),tEnt.getPos().getZ());
  String descSeverity=""String_Node_Str"";
  String descDist=""String_Node_Str"";
  String descWindAngleCloud=""String_Node_Str"" + (int)WindReader.getWindAngle(var1.getWorld(),pos,WindReader.WindType.CLOUD);
  String descWindAngle=""String_Node_Str"" + (int)WindReader.getWindAngle(var1.getWorld(),pos,WindReader.WindType.DOMINANT);
  String descWindSpeed=""String_Node_Str"" + (((int)(WindReader.getWindSpeed(var1.getWorld(),pos,WindReader.WindType.DOMINANT) * 100F)) / 100F);
  String progression=""String_Node_Str"";
  float levelWater=0;
  if (so != null) {
    progression=""String_Node_Str"";
    if (so.hasStormPeaked) {
      progression=""String_Node_Str"";
    }
    if (so.levelCurIntensityStage >= StormObject.STATE_STAGE5 + 1) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE5) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE4) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE3) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE2) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE1) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_FORMING) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_HAIL) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_HIGHWIND) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_THUNDER) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.attrib_precipitation) {
      descSeverity=""String_Node_Str"";
      progression=""String_Node_Str"";
    }
    Vec3 posXZ=new Vec3(tEnt.getPos().getX(),so.pos.yCoord,tEnt.getPos().getZ());
    descDist=""String_Node_Str"" + (int)posXZ.distanceTo(so.pos);
    levelWater=so.levelWater;
  }
  int index=1;
  boolean oldMode=false;
  float yOffset=2.5F;
  float sizeSimBoxDiameter=2048;
  float sizeRenderBoxDiameter=3;
  GlStateManager.pushMatrix();
  GlStateManager.translate((float)x + 0.5F,(float)y + 1.1F,(float)z + 0.5F);
  GL11.glNormal3f(0.0F,1.0F,0.0F);
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.tryBlendFuncSeparate(770,771,1,0);
  Tessellator tessellator=Tessellator.getInstance();
  VertexBuffer worldrenderer=tessellator.getBuffer();
  GlStateManager.disableTexture2D();
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_COLOR);
  worldrenderer.pos((double)-(sizeRenderBoxDiameter / 2),0,-(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)-(sizeRenderBoxDiameter / 2),0,(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)(sizeRenderBoxDiameter / 2),0,(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)(sizeRenderBoxDiameter / 2),0,-(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  tessellator.draw();
  GlStateManager.enableTexture2D();
  GlStateManager.enableLighting();
  GlStateManager.disableBlend();
  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  GlStateManager.popMatrix();
  renderLivingLabel(""String_Node_Str"" + '6' + ""String_Node_Str"",x,y + 1.2F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
  if (ConfigMisc.radarCloudDebug) {
    EntityPlayer entP=Minecraft.getMinecraft().thePlayer;
    if (entP != null) {
      String rainThunder=entP.worldObj.rainingStrength + ""String_Node_Str"" + entP.worldObj.thunderingStrength;
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + SceneEnhancer.getRainStrengthAndControlVisuals(entP),x,y + 2.2F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + levelWater,x,y + 2.3F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + descDist,x,y + 2.4F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + rainThunder,x,y + 2.5F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
    }
  }
  for (int i=0; i < tEnt.storms.size(); i++) {
    WeatherObject wo=tEnt.storms.get(i);
    GL11.glPushMatrix();
    Vec3 posRenderOffset=new Vec3(wo.pos.xCoord - tEnt.getPos().getX(),0,wo.pos.zCoord - tEnt.getPos().getZ());
    posRenderOffset.xCoord/=sizeSimBoxDiameter;
    posRenderOffset.zCoord/=sizeSimBoxDiameter;
    posRenderOffset.xCoord*=sizeRenderBoxDiameter;
    posRenderOffset.zCoord*=sizeRenderBoxDiameter;
    GL11.glTranslated(posRenderOffset.xCoord,0,posRenderOffset.zCoord);
    if (wo instanceof StormObject) {
      StormObject storm=(StormObject)wo;
      if (storm.levelCurIntensityStage >= StormObject.STATE_FORMING) {
        if (storm.stormType == StormObject.TYPE_WATER) {
          renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconCyclone);
          renderLivingLabel(""String_Node_Str"" + (int)(storm.levelCurIntensityStage - StormObject.levelStormIntensityFormingStartVal),x,y + 1.5F,z,1,15,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
 else {
          renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconTornado);
          renderLivingLabel(""String_Node_Str"" + (int)(storm.levelCurIntensityStage - StormObject.levelStormIntensityFormingStartVal),x,y + 1.5F,z,1,12,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_HAIL) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconHail);
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconWind);
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_HIGHWIND) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconLightning);
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconWind);
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_THUNDER) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconLightning);
      }
 else       if (storm.isPrecipitating()) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconRain);
      }
      if (storm.hasStormPeaked && (storm.levelCurIntensityStage > storm.STATE_NORMAL)) {
        renderLivingLabel(""String_Node_Str"" + '4' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
 else {
        if (ConfigMisc.radarCloudDebug) {
          if (storm.isCloudlessStorm()) {
            renderLivingLabel(""String_Node_Str"" + '0' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
          }
 else {
            renderLivingLabel(""String_Node_Str"" + 'f' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
          }
        }
 else {
          renderLivingLabel(""String_Node_Str"" + '2' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
      }
    }
 else     if (wo instanceof WeatherObjectSandstorm) {
      renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconSandstorm);
      if (((WeatherObjectSandstorm)wo).isFrontGrowing) {
        renderLivingLabel(""String_Node_Str"" + '2' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
 else {
        renderLivingLabel(""String_Node_Str"" + '4' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
    }
    GL11.glTranslated(-posRenderOffset.xCoord,0,-posRenderOffset.zCoord);
    GL11.glPopMatrix();
  }
}","public void renderTileEntityAt(TileEntity var1,double x,double y,double z,float var8,int destroyStage){
  TileEntityWeatherForecast tEnt=(TileEntityWeatherForecast)var1;
  String particleCount=ExtendedRenderer.rotEffRenderer.getStatistics();
  StormObject so=tEnt.lastTickStormObject;
  Vec3 pos=new Vec3(tEnt.getPos().getX(),tEnt.getPos().getY(),tEnt.getPos().getZ());
  String descSeverity=""String_Node_Str"";
  String descDist=""String_Node_Str"";
  String descWindAngleCloud=""String_Node_Str"" + (int)WindReader.getWindAngle(var1.getWorld(),pos,WindReader.WindType.CLOUD);
  String descWindAngle=""String_Node_Str"" + (int)WindReader.getWindAngle(var1.getWorld(),pos,WindReader.WindType.DOMINANT);
  String descWindSpeed=""String_Node_Str"" + (((int)(WindReader.getWindSpeed(var1.getWorld(),pos,WindReader.WindType.DOMINANT) * 100F)) / 100F);
  String progression=""String_Node_Str"";
  float levelWater=0;
  if (so != null) {
    progression=""String_Node_Str"";
    if (so.hasStormPeaked) {
      progression=""String_Node_Str"";
    }
    if (so.levelCurIntensityStage >= StormObject.STATE_STAGE5 + 1) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE5) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE4) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE3) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE2) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_STAGE1) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_FORMING) {
      descSeverity=""String_Node_Str"";
      if (so.stormType == StormObject.TYPE_WATER)       descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_HAIL) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_HIGHWIND) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.levelCurIntensityStage >= StormObject.STATE_THUNDER) {
      descSeverity=""String_Node_Str"";
    }
 else     if (so.attrib_precipitation) {
      descSeverity=""String_Node_Str"";
      progression=""String_Node_Str"";
    }
    Vec3 posXZ=new Vec3(tEnt.getPos().getX(),so.pos.yCoord,tEnt.getPos().getZ());
    descDist=""String_Node_Str"" + (int)posXZ.distanceTo(so.pos);
    levelWater=so.levelWater;
  }
  int index=1;
  boolean oldMode=false;
  float yOffset=2.5F;
  float sizeSimBoxDiameter=2048;
  float sizeRenderBoxDiameter=3;
  GlStateManager.pushMatrix();
  GlStateManager.translate((float)x + 0.5F,(float)y + 1.1F,(float)z + 0.5F);
  GL11.glNormal3f(0.0F,1.0F,0.0F);
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.tryBlendFuncSeparate(770,771,1,0);
  Tessellator tessellator=Tessellator.getInstance();
  BufferBuilder worldrenderer=tessellator.getBuffer();
  GlStateManager.disableTexture2D();
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_COLOR);
  worldrenderer.pos((double)-(sizeRenderBoxDiameter / 2),0,-(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)-(sizeRenderBoxDiameter / 2),0,(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)(sizeRenderBoxDiameter / 2),0,(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  worldrenderer.pos((double)(sizeRenderBoxDiameter / 2),0,-(double)(sizeRenderBoxDiameter / 2)).color(0.0F,0.0F,0.0F,0.25F).endVertex();
  tessellator.draw();
  GlStateManager.enableTexture2D();
  GlStateManager.enableLighting();
  GlStateManager.disableBlend();
  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  GlStateManager.popMatrix();
  renderLivingLabel(""String_Node_Str"" + '6' + ""String_Node_Str"",x,y + 1.2F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
  if (ConfigMisc.radarCloudDebug) {
    EntityPlayer entP=Minecraft.getMinecraft().thePlayer;
    if (entP != null) {
      String rainThunder=entP.worldObj.rainingStrength + ""String_Node_Str"" + entP.worldObj.thunderingStrength;
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + SceneEnhancer.getRainStrengthAndControlVisuals(entP),x,y + 2.2F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + levelWater,x,y + 2.3F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + descDist,x,y + 2.4F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
      renderLivingLabel(""String_Node_Str"" + ""String_Node_Str"" + rainThunder,x,y + 2.5F,z,1,10,10,Minecraft.getMinecraft().getRenderManager().playerViewY);
    }
  }
  for (int i=0; i < tEnt.storms.size(); i++) {
    WeatherObject wo=tEnt.storms.get(i);
    GL11.glPushMatrix();
    Vec3 posRenderOffset=new Vec3(wo.pos.xCoord - tEnt.getPos().getX(),0,wo.pos.zCoord - tEnt.getPos().getZ());
    posRenderOffset.xCoord/=sizeSimBoxDiameter;
    posRenderOffset.zCoord/=sizeSimBoxDiameter;
    posRenderOffset.xCoord*=sizeRenderBoxDiameter;
    posRenderOffset.zCoord*=sizeRenderBoxDiameter;
    GL11.glTranslated(posRenderOffset.xCoord,0,posRenderOffset.zCoord);
    if (wo instanceof StormObject) {
      StormObject storm=(StormObject)wo;
      if (storm.levelCurIntensityStage >= StormObject.STATE_FORMING) {
        if (storm.stormType == StormObject.TYPE_WATER) {
          renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconCyclone);
          renderLivingLabel(""String_Node_Str"" + (int)(storm.levelCurIntensityStage - StormObject.levelStormIntensityFormingStartVal),x,y + 1.5F,z,1,15,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
 else {
          renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconTornado);
          renderLivingLabel(""String_Node_Str"" + (int)(storm.levelCurIntensityStage - StormObject.levelStormIntensityFormingStartVal),x,y + 1.5F,z,1,12,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_HAIL) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconHail);
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconWind);
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_HIGHWIND) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconLightning);
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconWind);
      }
 else       if (storm.levelCurIntensityStage >= StormObject.STATE_THUNDER) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconLightning);
      }
 else       if (storm.isPrecipitating()) {
        renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconRain);
      }
      if (storm.hasStormPeaked && (storm.levelCurIntensityStage > storm.STATE_NORMAL)) {
        renderLivingLabel(""String_Node_Str"" + '4' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
 else {
        if (ConfigMisc.radarCloudDebug) {
          if (storm.isCloudlessStorm()) {
            renderLivingLabel(""String_Node_Str"" + '0' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
          }
 else {
            renderLivingLabel(""String_Node_Str"" + 'f' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
          }
        }
 else {
          renderLivingLabel(""String_Node_Str"" + '2' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
        }
      }
    }
 else     if (wo instanceof WeatherObjectSandstorm) {
      renderIconNew(x,y + 1.4F,z,16,16,Minecraft.getMinecraft().getRenderManager().playerViewY,ClientProxy.radarIconSandstorm);
      if (((WeatherObjectSandstorm)wo).isFrontGrowing) {
        renderLivingLabel(""String_Node_Str"" + '2' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
 else {
        renderLivingLabel(""String_Node_Str"" + '4' + ""String_Node_Str"",x,y + 1.2F,z,1,5,5,Minecraft.getMinecraft().getRenderManager().playerViewY);
      }
    }
    GL11.glTranslated(-posRenderOffset.xCoord,0,-posRenderOffset.zCoord);
    GL11.glPopMatrix();
  }
}",0.9993087680119104
81885,"protected void renderLivingLabel(String par2Str,double par3,double par5,double par7,int par9,int width,int height,float angle){
  int borderSize=2;
  GL11.glDisable(GL11.GL_CULL_FACE);
  GL11.glDisable(GL11.GL_TEXTURE_2D);
  FontRenderer var11=Minecraft.getMinecraft().getRenderManager().getFontRenderer();
  float var12=0.6F;
  float var13=0.016666668F * var12;
  GL11.glPushMatrix();
  GL11.glTranslatef((float)par3 + 0.5F,(float)par5,(float)par7 + 0.5F);
  GL11.glNormal3f(0.0F,1.0F,0.0F);
  GL11.glRotatef(-angle,0.0F,1.0F,0.0F);
  GL11.glScalef(-var13,-var13,var13);
  GL11.glDisable(GL11.GL_LIGHTING);
  if (par9 == 0) {
    GL11.glDepthMask(false);
    GL11.glEnable(GL11.GL_BLEND);
    GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
    Tessellator var14=Tessellator.getInstance();
    VertexBuffer worldrenderer=var14.getBuffer();
    byte var15=0;
    worldrenderer.begin(7,DefaultVertexFormats.POSITION_COLOR);
    worldrenderer.color(0.0F,0.0F,0.0F,0.25F).pos((double)(-width / 2 - borderSize),(double)(-borderSize + var15),0.0D).endVertex();
    worldrenderer.color(0.0F,0.0F,0.0F,0.25F).pos((double)(-width / 2 - borderSize),(double)(height + var15),0.0D).endVertex();
    worldrenderer.color(0.0F,0.0F,0.0F,0.25F).pos((double)(width / 2 + borderSize),(double)(height + var15),0.0D).endVertex();
    worldrenderer.color(0.0F,0.0F,0.0F,0.25F).pos((double)(width / 2 + borderSize),(double)(-borderSize + var15),0.0D).endVertex();
    var14.draw();
  }
  GL11.glEnable(GL11.GL_TEXTURE_2D);
  GL11.glEnable(GL11.GL_DEPTH_TEST);
  GL11.glDepthMask(true);
  var11.drawString(par2Str,-width / 2 + borderSize,0,0xFFFFFF);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  GL11.glPopMatrix();
  GL11.glEnable(GL11.GL_CULL_FACE);
}","protected void renderLivingLabel(String par2Str,double par3,double par5,double par7,int par9,int width,int height,float angle){
  int borderSize=2;
  GL11.glDisable(GL11.GL_CULL_FACE);
  GL11.glDisable(GL11.GL_TEXTURE_2D);
  FontRenderer var11=Minecraft.getMinecraft().getRenderManager().getFontRenderer();
  float var12=0.6F;
  float var13=0.016666668F * var12;
  GL11.glPushMatrix();
  GL11.glTranslatef((float)par3 + 0.5F,(float)par5,(float)par7 + 0.5F);
  GL11.glNormal3f(0.0F,1.0F,0.0F);
  GL11.glRotatef(-angle,0.0F,1.0F,0.0F);
  GL11.glScalef(-var13,-var13,var13);
  GL11.glDisable(GL11.GL_LIGHTING);
  if (par9 == 0) {
    GL11.glDepthMask(false);
    GL11.glEnable(GL11.GL_BLEND);
    GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
    Tessellator var14=Tessellator.getInstance();
    BufferBuilder worldrenderer=var14.getBuffer();
    byte var15=0;
    worldrenderer.begin(7,DefaultVertexFormats.POSITION_COLOR);
    worldrenderer.color(0.0F,0.0F,0.0F,0.25F).pos((double)(-width / 2 - borderSize),(double)(-borderSize + var15),0.0D).endVertex();
    worldrenderer.color(0.0F,0.0F,0.0F,0.25F).pos((double)(-width / 2 - borderSize),(double)(height + var15),0.0D).endVertex();
    worldrenderer.color(0.0F,0.0F,0.0F,0.25F).pos((double)(width / 2 + borderSize),(double)(height + var15),0.0D).endVertex();
    worldrenderer.color(0.0F,0.0F,0.0F,0.25F).pos((double)(width / 2 + borderSize),(double)(-borderSize + var15),0.0D).endVertex();
    var14.draw();
  }
  GL11.glEnable(GL11.GL_TEXTURE_2D);
  GL11.glEnable(GL11.GL_DEPTH_TEST);
  GL11.glDepthMask(true);
  var11.drawString(par2Str,-width / 2 + borderSize,0,0xFFFFFF);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  GL11.glPopMatrix();
  GL11.glEnable(GL11.GL_CULL_FACE);
}",0.9964137931034482
81886,"public void renderIconNew(double x,double y,double z,int width,int height,float angle,TextureAtlasSprite parIcon){
  float f6=parIcon.getMinU();
  float f7=parIcon.getMaxU();
  float f9=parIcon.getMinV();
  float f8=parIcon.getMaxV();
  float var12=0.6F;
  float var13=0.016666668F * var12;
  GlStateManager.pushMatrix();
  GlStateManager.translate((float)x + 0.5F,(float)y,(float)z + 0.5F);
  GL11.glNormal3f(0.0F,1.0F,0.0F);
  GlStateManager.rotate(-angle,0.0F,1.0F,0.0F);
  GlStateManager.scale(-var13,-var13,var13);
  int borderSize=2;
  Tessellator tessellator=Tessellator.getInstance();
  VertexBuffer worldrenderer=tessellator.getBuffer();
  GlStateManager.disableFog();
  this.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_TEX_COLOR);
  float r=1F;
  float g=1F;
  float b=1F;
  worldrenderer.pos((double)(-width / 2 - borderSize),(double)(-borderSize),0.0D).tex(f6,f9).color(r,g,b,1.0F).endVertex();
  worldrenderer.pos((double)(-width / 2 - borderSize),(double)(height),0.0D).tex(f6,f8).color(r,g,b,1.0F).endVertex();
  worldrenderer.pos((double)(width / 2 + borderSize),(double)(height),0.0D).tex(f7,f8).color(r,g,b,1.0F).endVertex();
  worldrenderer.pos((double)(width / 2 + borderSize),(double)(-borderSize),0.0D).tex(f7,f9).color(r,g,b,1.0F).endVertex();
  tessellator.draw();
  GL11.glPopMatrix();
}","public void renderIconNew(double x,double y,double z,int width,int height,float angle,TextureAtlasSprite parIcon){
  float f6=parIcon.getMinU();
  float f7=parIcon.getMaxU();
  float f9=parIcon.getMinV();
  float f8=parIcon.getMaxV();
  float var12=0.6F;
  float var13=0.016666668F * var12;
  GlStateManager.pushMatrix();
  GlStateManager.translate((float)x + 0.5F,(float)y,(float)z + 0.5F);
  GL11.glNormal3f(0.0F,1.0F,0.0F);
  GlStateManager.rotate(-angle,0.0F,1.0F,0.0F);
  GlStateManager.scale(-var13,-var13,var13);
  int borderSize=2;
  Tessellator tessellator=Tessellator.getInstance();
  BufferBuilder worldrenderer=tessellator.getBuffer();
  GlStateManager.disableFog();
  this.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_TEX_COLOR);
  float r=1F;
  float g=1F;
  float b=1F;
  worldrenderer.pos((double)(-width / 2 - borderSize),(double)(-borderSize),0.0D).tex(f6,f9).color(r,g,b,1.0F).endVertex();
  worldrenderer.pos((double)(-width / 2 - borderSize),(double)(height),0.0D).tex(f6,f8).color(r,g,b,1.0F).endVertex();
  worldrenderer.pos((double)(width / 2 + borderSize),(double)(height),0.0D).tex(f7,f8).color(r,g,b,1.0F).endVertex();
  worldrenderer.pos((double)(width / 2 + borderSize),(double)(-borderSize),0.0D).tex(f7,f9).color(r,g,b,1.0F).endVertex();
  tessellator.draw();
  GL11.glPopMatrix();
}",0.995260663507109
81887,"@Override public void doRender(Entity entity,double x,double y,double z,float entityYaw,float partialTicks){
  GL11.glPushMatrix();
  int age=entity.ticksExisted * 5;
  float size=0.3F;
  if (size < 0)   size=0;
  if (entity instanceof EntityMovingBlock) {
    size=1;
  }
  GL11.glTranslatef((float)x,(float)y,(float)z);
  this.bindEntityTexture(entity);
  World var11=entity.worldObj;
  GL11.glScalef(size,size,size);
  IBlockState state=null;
  if (entity instanceof EntityMovingBlock) {
    state=((EntityMovingBlock)entity).tile.getDefaultState();
  }
 else {
    if (renderBlock != null) {
      state=renderBlock.getDefaultState();
    }
  }
  if (state != null) {
    this.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
    IBlockState iblockstate=state;
    Block block=iblockstate.getBlock();
    BlockPos blockpos=new BlockPos(entity);
    World world=var11;
    if (iblockstate != world.getBlockState(blockpos)) {
      if (block.getRenderType(iblockstate) == EnumBlockRenderType.MODEL) {
        if (entity instanceof EntityMovingBlock) {
          try {
            GlStateManager.pushMatrix();
            GlStateManager.translate((float)x,(float)y,(float)z);
            GlStateManager.disableLighting();
            Tessellator tessellator=Tessellator.getInstance();
            VertexBuffer worldrenderer=tessellator.getBuffer();
            worldrenderer.begin(7,DefaultVertexFormats.BLOCK);
            int i=blockpos.getX();
            int j=blockpos.getY();
            int k=blockpos.getZ();
            worldrenderer.setTranslation((double)((float)(-i) - 0.5F),(double)(-j),(double)((float)(-k) - 0.5F));
            GlStateManager.rotate((float)(age * 0.1F * 180.0D / 12.566370964050293D - 0.0D),1.0F,0.0F,0.0F);
            GlStateManager.rotate((float)(age * 0.1F * 180.0D / (Math.PI * 2D) - 0.0D),0.0F,1.0F,0.0F);
            GlStateManager.rotate((float)(age * 0.1F * 180.0D / (Math.PI * 2D) - 0.0D),0.0F,0.0F,1.0F);
            BlockRendererDispatcher blockrendererdispatcher=Minecraft.getMinecraft().getBlockRendererDispatcher();
            IBakedModel ibakedmodel=blockrendererdispatcher.getModelForState(iblockstate);
            blockrendererdispatcher.getBlockModelRenderer().renderModel(world,ibakedmodel,iblockstate,blockpos,worldrenderer,false);
            worldrenderer.setTranslation(0.0D,0.0D,0.0D);
            tessellator.draw();
            GlStateManager.enableLighting();
            GlStateManager.popMatrix();
          }
 catch (          Exception e) {
          }
        }
 else         if (entity instanceof EntityIceBall) {
          for (int ii=0; ii < Math.min(4,CoroUtilParticle.maxRainDrops); ii++) {
            GlStateManager.pushMatrix();
            GlStateManager.translate((float)CoroUtilParticle.rainPositions[ii].xCoord * 3F,(float)CoroUtilParticle.rainPositions[ii].yCoord * 3F,(float)CoroUtilParticle.rainPositions[ii].zCoord * 3F);
            GlStateManager.disableLighting();
            Tessellator tessellator=Tessellator.getInstance();
            VertexBuffer worldrenderer=tessellator.getBuffer();
            worldrenderer.begin(7,DefaultVertexFormats.BLOCK);
            int i=blockpos.getX();
            int j=blockpos.getY();
            int k=blockpos.getZ();
            worldrenderer.setTranslation((double)((float)(-i) - 0.5F),(double)(-j),(double)((float)(-k) - 0.5F));
            GlStateManager.rotate((float)(age * 0.1F * 180.0D / 12.566370964050293D - 0.0D),1.0F,0.0F,0.0F);
            GlStateManager.rotate((float)(age * 0.1F * 180.0D / (Math.PI * 2D) - 0.0D),0.0F,1.0F,0.0F);
            GlStateManager.rotate((float)(age * 0.1F * 180.0D / (Math.PI * 2D) - 0.0D),0.0F,0.0F,1.0F);
            BlockRendererDispatcher blockrendererdispatcher=Minecraft.getMinecraft().getBlockRendererDispatcher();
            IBakedModel ibakedmodel=blockrendererdispatcher.getModelForState(iblockstate);
            blockrendererdispatcher.getBlockModelRenderer().renderModel(world,ibakedmodel,iblockstate,blockpos,worldrenderer,false);
            worldrenderer.setTranslation(0.0D,0.0D,0.0D);
            tessellator.draw();
            GlStateManager.enableLighting();
            GlStateManager.popMatrix();
          }
        }
      }
    }
  }
  GL11.glPopMatrix();
  super.doRender(entity,x,y,z,entityYaw,partialTicks);
}","@Override public void doRender(Entity entity,double x,double y,double z,float entityYaw,float partialTicks){
  GL11.glPushMatrix();
  int age=entity.ticksExisted * 5;
  float size=0.3F;
  if (size < 0)   size=0;
  if (entity instanceof EntityMovingBlock) {
    size=1;
  }
  GL11.glTranslatef((float)x,(float)y,(float)z);
  this.bindEntityTexture(entity);
  World var11=entity.worldObj;
  GL11.glScalef(size,size,size);
  IBlockState state=null;
  if (entity instanceof EntityMovingBlock) {
    state=((EntityMovingBlock)entity).tile.getDefaultState();
  }
 else {
    if (renderBlock != null) {
      state=renderBlock.getDefaultState();
    }
  }
  if (state != null) {
    this.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
    IBlockState iblockstate=state;
    Block block=iblockstate.getBlock();
    BlockPos blockpos=new BlockPos(entity);
    World world=var11;
    if (iblockstate != world.getBlockState(blockpos)) {
      if (block.getRenderType(iblockstate) == EnumBlockRenderType.MODEL) {
        if (entity instanceof EntityMovingBlock) {
          try {
            GlStateManager.pushMatrix();
            GlStateManager.translate((float)x,(float)y,(float)z);
            GlStateManager.disableLighting();
            Tessellator tessellator=Tessellator.getInstance();
            BufferBuilder worldrenderer=tessellator.getBuffer();
            worldrenderer.begin(7,DefaultVertexFormats.BLOCK);
            int i=blockpos.getX();
            int j=blockpos.getY();
            int k=blockpos.getZ();
            worldrenderer.setTranslation((double)((float)(-i) - 0.5F),(double)(-j),(double)((float)(-k) - 0.5F));
            GlStateManager.rotate((float)(age * 0.1F * 180.0D / 12.566370964050293D - 0.0D),1.0F,0.0F,0.0F);
            GlStateManager.rotate((float)(age * 0.1F * 180.0D / (Math.PI * 2D) - 0.0D),0.0F,1.0F,0.0F);
            GlStateManager.rotate((float)(age * 0.1F * 180.0D / (Math.PI * 2D) - 0.0D),0.0F,0.0F,1.0F);
            BlockRendererDispatcher blockrendererdispatcher=Minecraft.getMinecraft().getBlockRendererDispatcher();
            IBakedModel ibakedmodel=blockrendererdispatcher.getModelForState(iblockstate);
            blockrendererdispatcher.getBlockModelRenderer().renderModel(world,ibakedmodel,iblockstate,blockpos,worldrenderer,false);
            worldrenderer.setTranslation(0.0D,0.0D,0.0D);
            tessellator.draw();
            GlStateManager.enableLighting();
            GlStateManager.popMatrix();
          }
 catch (          Exception e) {
          }
        }
 else         if (entity instanceof EntityIceBall) {
          for (int ii=0; ii < Math.min(4,CoroUtilParticle.maxRainDrops); ii++) {
            GlStateManager.pushMatrix();
            GlStateManager.translate((float)CoroUtilParticle.rainPositions[ii].xCoord * 3F,(float)CoroUtilParticle.rainPositions[ii].yCoord * 3F,(float)CoroUtilParticle.rainPositions[ii].zCoord * 3F);
            GlStateManager.disableLighting();
            Tessellator tessellator=Tessellator.getInstance();
            BufferBuilder worldrenderer=tessellator.getBuffer();
            worldrenderer.begin(7,DefaultVertexFormats.BLOCK);
            int i=blockpos.getX();
            int j=blockpos.getY();
            int k=blockpos.getZ();
            worldrenderer.setTranslation((double)((float)(-i) - 0.5F),(double)(-j),(double)((float)(-k) - 0.5F));
            GlStateManager.rotate((float)(age * 0.1F * 180.0D / 12.566370964050293D - 0.0D),1.0F,0.0F,0.0F);
            GlStateManager.rotate((float)(age * 0.1F * 180.0D / (Math.PI * 2D) - 0.0D),0.0F,1.0F,0.0F);
            GlStateManager.rotate((float)(age * 0.1F * 180.0D / (Math.PI * 2D) - 0.0D),0.0F,0.0F,1.0F);
            BlockRendererDispatcher blockrendererdispatcher=Minecraft.getMinecraft().getBlockRendererDispatcher();
            IBakedModel ibakedmodel=blockrendererdispatcher.getModelForState(iblockstate);
            blockrendererdispatcher.getBlockModelRenderer().renderModel(world,ibakedmodel,iblockstate,blockpos,worldrenderer,false);
            worldrenderer.setTranslation(0.0D,0.0D,0.0D);
            tessellator.draw();
            GlStateManager.enableLighting();
            GlStateManager.popMatrix();
          }
        }
      }
    }
  }
  GL11.glPopMatrix();
  super.doRender(entity,x,y,z,entityYaw,partialTicks);
}",0.996984458362329
81888,"/** 
 * Actually renders the given argument. This is a synthetic bridge method, always casting down its argument and then handing it off to a worker function which does the actual work. In all probabilty, the class Render is generic (Render<T extends Entity>) and this method has signature public void func_76986_a(T entity, double d, double d1, double d2, float f, float f1). But JAD is pre 1.5 so doe
 */
@Override public void doRender(EntityLightningBolt entity,double x,double y,double z,float entityYaw,float partialTicks){
  Tessellator tessellator=Tessellator.getInstance();
  VertexBuffer worldrenderer=tessellator.getBuffer();
  GlStateManager.disableTexture2D();
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(770,1);
  double[] adouble=new double[8];
  double[] adouble1=new double[8];
  double d0=0.0D;
  double d1=0.0D;
  Random random=new Random(entity.boltVertex);
  for (int i=7; i >= 0; --i) {
    adouble[i]=d0;
    adouble1[i]=d1;
    d0+=(double)(random.nextInt(11) - 5);
    d1+=(double)(random.nextInt(11) - 5);
  }
  for (int k1=0; k1 < 4; ++k1) {
    Random random1=new Random(entity.boltVertex);
    for (int j=0; j < 3; ++j) {
      int k=7;
      int l=0;
      if (j > 0) {
        k=7 - j;
      }
      if (j > 0) {
        l=k - 2;
      }
      double d2=adouble[k] - d0;
      double d3=adouble1[k] - d1;
      for (int i1=k; i1 >= l; --i1) {
        double d4=d2;
        double d5=d3;
        if (j == 0) {
          d2+=(double)(random1.nextInt(11) - 5);
          d3+=(double)(random1.nextInt(11) - 5);
        }
 else {
          d2+=(double)(random1.nextInt(31) - 15);
          d3+=(double)(random1.nextInt(31) - 15);
        }
        worldrenderer.begin(5,DefaultVertexFormats.POSITION_COLOR);
        float f=0.5F;
        float f1=0.45F;
        float f2=0.45F;
        float f3=0.5F;
        double d6=0.1D + (double)k1 * 0.2D;
        if (j == 0) {
          d6*=(double)i1 * 0.1D + 1.0D;
        }
        double d7=0.1D + (double)k1 * 0.2D;
        if (j == 0) {
          d7*=(double)(i1 - 1) * 0.1D + 1.0D;
        }
        for (int j1=0; j1 < 5; ++j1) {
          double d8=x + 0.5D - d6;
          double d9=z + 0.5D - d6;
          if (j1 == 1 || j1 == 2) {
            d8+=d6 * 2.0D;
          }
          if (j1 == 2 || j1 == 3) {
            d9+=d6 * 2.0D;
          }
          double d10=x + 0.5D - d7;
          double d11=z + 0.5D - d7;
          if (j1 == 1 || j1 == 2) {
            d10+=d7 * 2.0D;
          }
          if (j1 == 2 || j1 == 3) {
            d11+=d7 * 2.0D;
          }
          worldrenderer.pos(d10 + d2,y + (double)(i1 * 16),d11 + d3).color(0.45F,0.45F,0.5F,0.3F).endVertex();
          worldrenderer.pos(d8 + d4,y + (double)((i1 + 1) * 16),d9 + d5).color(0.45F,0.45F,0.5F,0.3F).endVertex();
        }
        tessellator.draw();
      }
    }
  }
  GlStateManager.disableBlend();
  GlStateManager.enableLighting();
  GlStateManager.enableTexture2D();
}","/** 
 * Actually renders the given argument. This is a synthetic bridge method, always casting down its argument and then handing it off to a worker function which does the actual work. In all probabilty, the class Render is generic (Render<T extends Entity>) and this method has signature public void func_76986_a(T entity, double d, double d1, double d2, float f, float f1). But JAD is pre 1.5 so doe
 */
@Override public void doRender(EntityLightningBolt entity,double x,double y,double z,float entityYaw,float partialTicks){
  Tessellator tessellator=Tessellator.getInstance();
  BufferBuilder worldrenderer=tessellator.getBuffer();
  GlStateManager.disableTexture2D();
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(770,1);
  double[] adouble=new double[8];
  double[] adouble1=new double[8];
  double d0=0.0D;
  double d1=0.0D;
  Random random=new Random(entity.boltVertex);
  for (int i=7; i >= 0; --i) {
    adouble[i]=d0;
    adouble1[i]=d1;
    d0+=(double)(random.nextInt(11) - 5);
    d1+=(double)(random.nextInt(11) - 5);
  }
  for (int k1=0; k1 < 4; ++k1) {
    Random random1=new Random(entity.boltVertex);
    for (int j=0; j < 3; ++j) {
      int k=7;
      int l=0;
      if (j > 0) {
        k=7 - j;
      }
      if (j > 0) {
        l=k - 2;
      }
      double d2=adouble[k] - d0;
      double d3=adouble1[k] - d1;
      for (int i1=k; i1 >= l; --i1) {
        double d4=d2;
        double d5=d3;
        if (j == 0) {
          d2+=(double)(random1.nextInt(11) - 5);
          d3+=(double)(random1.nextInt(11) - 5);
        }
 else {
          d2+=(double)(random1.nextInt(31) - 15);
          d3+=(double)(random1.nextInt(31) - 15);
        }
        worldrenderer.begin(5,DefaultVertexFormats.POSITION_COLOR);
        float f=0.5F;
        float f1=0.45F;
        float f2=0.45F;
        float f3=0.5F;
        double d6=0.1D + (double)k1 * 0.2D;
        if (j == 0) {
          d6*=(double)i1 * 0.1D + 1.0D;
        }
        double d7=0.1D + (double)k1 * 0.2D;
        if (j == 0) {
          d7*=(double)(i1 - 1) * 0.1D + 1.0D;
        }
        for (int j1=0; j1 < 5; ++j1) {
          double d8=x + 0.5D - d6;
          double d9=z + 0.5D - d6;
          if (j1 == 1 || j1 == 2) {
            d8+=d6 * 2.0D;
          }
          if (j1 == 2 || j1 == 3) {
            d9+=d6 * 2.0D;
          }
          double d10=x + 0.5D - d7;
          double d11=z + 0.5D - d7;
          if (j1 == 1 || j1 == 2) {
            d10+=d7 * 2.0D;
          }
          if (j1 == 2 || j1 == 3) {
            d11+=d7 * 2.0D;
          }
          worldrenderer.pos(d10 + d2,y + (double)(i1 * 16),d11 + d3).color(0.45F,0.45F,0.5F,0.3F).endVertex();
          worldrenderer.pos(d8 + d4,y + (double)((i1 + 1) * 16),d9 + d5).color(0.45F,0.45F,0.5F,0.3F).endVertex();
        }
        tessellator.draw();
      }
    }
  }
  GlStateManager.disableBlend();
  GlStateManager.enableLighting();
  GlStateManager.enableTexture2D();
}",0.9978228102495394
81889,"/** 
 * Actually renders the given argument. This is a synthetic bridge method, always casting down its argument and then handing it off to a worker function which does the actual work. In all probabilty, the class Render is generic (Render<T extends Entity>) and this method has signature public void func_76986_a(T entity, double d, double d1, double d2, float f, float f1). But JAD is pre 1.5 so doe
 */
@Override public void doRender(EntityLightningBoltCustom entity,double x,double y,double z,float entityYaw,float partialTicks){
  Tessellator tessellator=Tessellator.getInstance();
  VertexBuffer worldrenderer=tessellator.getBuffer();
  GlStateManager.disableTexture2D();
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(770,1);
  GlStateManager.disableCull();
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_COLOR);
  double xx=x;
  double yy=y;
  double zz=z;
  float r=1F;
  float g=1F;
  float b=1F;
  float alpha=0.4F;
  double sizeRadius=0.3D;
  Minecraft mc=Minecraft.getMinecraft();
  EntityPlayer player=mc.thePlayer;
  World world=mc.theWorld;
  Vec3 posPlayer=new Vec3(mc.thePlayer.posX,0,mc.thePlayer.posZ);
  WeatherObjectSandstorm sandstorm=ClientTickHandler.weatherManager.getClosestSandstormByIntensity(posPlayer);
  if (sandstorm != null) {
    List<Vec3> wat=sandstorm.getSandstormAsShape();
    entity.listVec.clear();
    for (    Vec3 wat2 : wat) {
      Vec3d wat3=new Vec3d(wat2.xCoord - player.posX,-10,wat2.zCoord - player.posZ);
      entity.listVec.add(wat3);
    }
  }
  if (world.getTotalWorldTime() % 20 == 0) {
  }
  for (int i=0; i < entity.listVec.size() - 1; i++) {
    Vec3d vec=entity.listVec.get(i);
    Vec3d vec2=entity.listVec.get(i + 1);
    if (world.getTotalWorldTime() % 20 == 0) {
    }
    worldrenderer.pos(vec.xCoord - sizeRadius,vec.yCoord,vec.zCoord - sizeRadius).color(r,g,b,alpha).endVertex();
    worldrenderer.pos(vec.xCoord + sizeRadius,vec.yCoord,vec.zCoord - sizeRadius).color(r,g,b,alpha).endVertex();
    worldrenderer.pos(vec2.xCoord + sizeRadius,vec2.yCoord,vec2.zCoord + sizeRadius).color(r,g,b,alpha).endVertex();
    worldrenderer.pos(vec2.xCoord - sizeRadius,vec2.yCoord,vec2.zCoord + sizeRadius).color(r,g,b,alpha).endVertex();
  }
  Vec3d vec=entity.listVec.get(0);
  Vec3d vec2=entity.listVec.get(entity.listVec.size() - 1);
  worldrenderer.pos(vec.xCoord - sizeRadius,vec.yCoord,vec.zCoord - sizeRadius).color(r,g,b,alpha).endVertex();
  worldrenderer.pos(vec.xCoord + sizeRadius,vec.yCoord,vec.zCoord - sizeRadius).color(r,g,b,alpha).endVertex();
  worldrenderer.pos(vec2.xCoord + sizeRadius,vec2.yCoord,vec2.zCoord + sizeRadius).color(r,g,b,alpha).endVertex();
  worldrenderer.pos(vec2.xCoord - sizeRadius,vec2.yCoord,vec2.zCoord + sizeRadius).color(r,g,b,alpha).endVertex();
  tessellator.draw();
  GlStateManager.enableCull();
  GlStateManager.disableBlend();
  GlStateManager.enableLighting();
  GlStateManager.enableTexture2D();
}","/** 
 * Actually renders the given argument. This is a synthetic bridge method, always casting down its argument and then handing it off to a worker function which does the actual work. In all probabilty, the class Render is generic (Render<T extends Entity>) and this method has signature public void func_76986_a(T entity, double d, double d1, double d2, float f, float f1). But JAD is pre 1.5 so doe
 */
@Override public void doRender(EntityLightningBoltCustom entity,double x,double y,double z,float entityYaw,float partialTicks){
  Tessellator tessellator=Tessellator.getInstance();
  BufferBuilder worldrenderer=tessellator.getBuffer();
  GlStateManager.disableTexture2D();
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(770,1);
  GlStateManager.disableCull();
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_COLOR);
  double xx=x;
  double yy=y;
  double zz=z;
  float r=1F;
  float g=1F;
  float b=1F;
  float alpha=0.4F;
  double sizeRadius=0.3D;
  Minecraft mc=Minecraft.getMinecraft();
  EntityPlayer player=mc.thePlayer;
  World world=mc.theWorld;
  Vec3 posPlayer=new Vec3(mc.thePlayer.posX,0,mc.thePlayer.posZ);
  WeatherObjectSandstorm sandstorm=ClientTickHandler.weatherManager.getClosestSandstormByIntensity(posPlayer);
  if (sandstorm != null) {
    List<Vec3> wat=sandstorm.getSandstormAsShape();
    entity.listVec.clear();
    for (    Vec3 wat2 : wat) {
      Vec3d wat3=new Vec3d(wat2.xCoord - player.posX,-10,wat2.zCoord - player.posZ);
      entity.listVec.add(wat3);
    }
  }
  if (world.getTotalWorldTime() % 20 == 0) {
  }
  for (int i=0; i < entity.listVec.size() - 1; i++) {
    Vec3d vec=entity.listVec.get(i);
    Vec3d vec2=entity.listVec.get(i + 1);
    if (world.getTotalWorldTime() % 20 == 0) {
    }
    worldrenderer.pos(vec.xCoord - sizeRadius,vec.yCoord,vec.zCoord - sizeRadius).color(r,g,b,alpha).endVertex();
    worldrenderer.pos(vec.xCoord + sizeRadius,vec.yCoord,vec.zCoord - sizeRadius).color(r,g,b,alpha).endVertex();
    worldrenderer.pos(vec2.xCoord + sizeRadius,vec2.yCoord,vec2.zCoord + sizeRadius).color(r,g,b,alpha).endVertex();
    worldrenderer.pos(vec2.xCoord - sizeRadius,vec2.yCoord,vec2.zCoord + sizeRadius).color(r,g,b,alpha).endVertex();
  }
  Vec3d vec=entity.listVec.get(0);
  Vec3d vec2=entity.listVec.get(entity.listVec.size() - 1);
  worldrenderer.pos(vec.xCoord - sizeRadius,vec.yCoord,vec.zCoord - sizeRadius).color(r,g,b,alpha).endVertex();
  worldrenderer.pos(vec.xCoord + sizeRadius,vec.yCoord,vec.zCoord - sizeRadius).color(r,g,b,alpha).endVertex();
  worldrenderer.pos(vec2.xCoord + sizeRadius,vec2.yCoord,vec2.zCoord + sizeRadius).color(r,g,b,alpha).endVertex();
  worldrenderer.pos(vec2.xCoord - sizeRadius,vec2.yCoord,vec2.zCoord + sizeRadius).color(r,g,b,alpha).endVertex();
  tessellator.draw();
  GlStateManager.enableCull();
  GlStateManager.disableBlend();
  GlStateManager.enableLighting();
  GlStateManager.enableTexture2D();
}",0.9978073874177772
81890,"public void drawTexturedModalRect(int x,int y,int textureX,int textureY,int width,int height){
  float f=0.00390625F / 2F;
  float f1=0.00390625F / 2F;
  Tessellator tessellator=Tessellator.getInstance();
  VertexBuffer worldrenderer=tessellator.getBuffer();
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_TEX);
  worldrenderer.pos((double)(x + 0),(double)(y + height),(double)this.zLevel).tex((double)((float)(textureX + 0) * f),(double)((float)(textureY + height) * f1)).endVertex();
  worldrenderer.pos((double)(x + width),(double)(y + height),(double)this.zLevel).tex((double)((float)(textureX + width) * f),(double)((float)(textureY + height) * f1)).endVertex();
  worldrenderer.pos((double)(x + width),(double)(y + 0),(double)this.zLevel).tex((double)((float)(textureX + width) * f),(double)((float)(textureY + 0) * f1)).endVertex();
  worldrenderer.pos((double)(x + 0),(double)(y + 0),(double)this.zLevel).tex((double)((float)(textureX + 0) * f),(double)((float)(textureY + 0) * f1)).endVertex();
  tessellator.draw();
}","public void drawTexturedModalRect(int x,int y,int textureX,int textureY,int width,int height){
  float f=0.00390625F / 2F;
  float f1=0.00390625F / 2F;
  Tessellator tessellator=Tessellator.getInstance();
  BufferBuilder worldrenderer=tessellator.getBuffer();
  worldrenderer.begin(7,DefaultVertexFormats.POSITION_TEX);
  worldrenderer.pos((double)(x + 0),(double)(y + height),(double)this.zLevel).tex((double)((float)(textureX + 0) * f),(double)((float)(textureY + height) * f1)).endVertex();
  worldrenderer.pos((double)(x + width),(double)(y + height),(double)this.zLevel).tex((double)((float)(textureX + width) * f),(double)((float)(textureY + height) * f1)).endVertex();
  worldrenderer.pos((double)(x + width),(double)(y + 0),(double)this.zLevel).tex((double)((float)(textureX + width) * f),(double)((float)(textureY + 0) * f1)).endVertex();
  worldrenderer.pos((double)(x + 0),(double)(y + 0),(double)this.zLevel).tex((double)((float)(textureX + 0) * f),(double)((float)(textureY + 0) * f1)).endVertex();
  tessellator.draw();
}",0.9937167713871436
81891,"@Override public void drawBackground(int par1){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  mc.getTextureManager().bindTexture(resGUI);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  this.drawTexturedModalRect(x,y,0,0,512,512);
  int yEleSize=24;
  int yEleSize2=44;
  this.drawString(this.fontRendererObj,""String_Node_Str"" + (guiCur.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + guiCur),xStart + 7,yStart - 9,16777215);
  int yStart2=yStart + 34;
  int xOP=260;
  String op=""String_Node_Str"";
  this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 - 3 - 4,16777215);
  if (guiCur.equals(GUI_SUBGUI_PERFORMANCE)) {
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8,16777215);
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 2,16777215);
  }
 else   if (guiCur.equals(GUI_SUBGUI_COMPATIBILITY)) {
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8,16777215);
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 2,16777215);
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 3,16777215);
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 4,16777215);
    this.drawString(this.fontRendererObj,op,xStart + xOP,yStart2 + 8,16777215);
    this.drawString(this.fontRendererObj,op,xStart + xOP,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRendererObj,op,xStart + xOP,yStart2 + 8 + yEleSize * 3,16777215);
  }
 else   if (guiCur.equals(GUI_SUBGUI_PREFERENCE)) {
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8,16777215);
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 2,16777215);
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 3,16777215);
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 4,16777215);
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 5,16777215);
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 4 + yEleSize * 6,16777215);
    this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 - 6 + yEleSize * 7,16777215);
    this.drawString(this.fontRendererObj,op,xStart + xOP,yStart2 + 8,16777215);
    this.drawString(this.fontRendererObj,op,xStart + xOP,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRendererObj,op,xStart + xOP,yStart2 + 8 + yEleSize * 2,16777215);
    this.drawString(this.fontRendererObj,op,xStart + xOP,yStart2 + 8 + yEleSize * 3,16777215);
    this.drawString(this.fontRendererObj,op,xStart + xOP,yStart2 + 8 + yEleSize * 4,16777215);
    this.drawString(this.fontRendererObj,op,xStart + xOP,yStart2 + 8 + yEleSize * 5,16777215);
    this.drawString(this.fontRendererObj,op,xStart + xOP,yStart2 + 8 + yEleSize * 6,16777215);
  }
 else   if (guiCur.equals(GUI_SUBGUI_DIMENSIONS)) {
    try {
      for (int i=0; i < curDimListCountPerPage; i++) {
        if (curDimListPage * curDimListCountPerPage + i < listDimIDs.size()) {
          this.drawString(this.fontRendererObj,""String_Node_Str"" + '6' + listDimNames.get(curDimListPage * curDimListCountPerPage + i),xStart + 7,yStart2 + 8 + yEleSize2 * i,16777215);
          this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 7,yStart2 + 28 + yEleSize2 * i,16777215);
          this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 100,yStart2 + 28 + yEleSize2 * i,16777215);
          this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 186,yStart2 + 28 + yEleSize2 * i,16777215);
          this.drawString(this.fontRendererObj,""String_Node_Str"",xStart + 270,yStart2 + 28 + yEleSize2 * i,16777215);
        }
      }
      this.drawString(this.fontRendererObj,""String_Node_Str"" + (curDimListPage + 1) + ""String_Node_Str""+ (listDimNames.size() / curDimListCountPerPage + 1),xStart + 80,yStart2 + 194,16777215);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}","@Override public void drawBackground(int par1){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  mc.getTextureManager().bindTexture(resGUI);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  this.drawTexturedModalRect(x,y,0,0,512,512);
  int yEleSize=24;
  int yEleSize2=44;
  this.drawString(this.fontRenderer,""String_Node_Str"" + (guiCur.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + guiCur),xStart + 7,yStart - 9,16777215);
  int yStart2=yStart + 34;
  int xOP=260;
  String op=""String_Node_Str"";
  this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 - 3 - 4,16777215);
  if (guiCur.equals(GUI_SUBGUI_PERFORMANCE)) {
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 2,16777215);
  }
 else   if (guiCur.equals(GUI_SUBGUI_COMPATIBILITY)) {
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 2,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 3,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 4,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 3,16777215);
  }
 else   if (guiCur.equals(GUI_SUBGUI_PREFERENCE)) {
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 2,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 3,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 4,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 8 + yEleSize * 5,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 4 + yEleSize * 6,16777215);
    this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 - 6 + yEleSize * 7,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 1,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 2,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 3,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 4,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 5,16777215);
    this.drawString(this.fontRenderer,op,xStart + xOP,yStart2 + 8 + yEleSize * 6,16777215);
  }
 else   if (guiCur.equals(GUI_SUBGUI_DIMENSIONS)) {
    try {
      for (int i=0; i < curDimListCountPerPage; i++) {
        if (curDimListPage * curDimListCountPerPage + i < listDimIDs.size()) {
          this.drawString(this.fontRenderer,""String_Node_Str"" + '6' + listDimNames.get(curDimListPage * curDimListCountPerPage + i),xStart + 7,yStart2 + 8 + yEleSize2 * i,16777215);
          this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 7,yStart2 + 28 + yEleSize2 * i,16777215);
          this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 100,yStart2 + 28 + yEleSize2 * i,16777215);
          this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 186,yStart2 + 28 + yEleSize2 * i,16777215);
          this.drawString(this.fontRenderer,""String_Node_Str"",xStart + 270,yStart2 + 28 + yEleSize2 * i,16777215);
        }
      }
      this.drawString(this.fontRenderer,""String_Node_Str"" + (curDimListPage + 1) + ""String_Node_Str""+ (listDimNames.size() / curDimListCountPerPage + 1),xStart + 80,yStart2 + 194,16777215);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}",0.9886033519553072
81892,"@Override public int quantityDropped(IBlockState state,int fortune,Random random){
  return ((Integer)state.getValue(LAYERS)) + 1;
}","@Override public int quantityDropped(IBlockState state,int fortune,Random random){
  return ((Integer)state.getValue(LAYERS));
}",0.9846153846153848
81893,"public void tickParticlePrecipitation(){
  if (ConfigParticle.Particle_RainSnow) {
    EntityPlayer entP=FMLClientHandler.instance().getClient().thePlayer;
    if (entP.posY >= StormObject.static_YPos_layer0)     return;
    float curPrecipVal=getRainStrengthAndControlVisuals(entP);
    float maxPrecip=0.5F;
    int precipitationHeight=entP.worldObj.getPrecipitationHeight(new BlockPos(MathHelper.floor_double(entP.posX),0,MathHelper.floor_double(entP.posZ))).getY();
    Biome biomegenbase=entP.worldObj.getBiomeGenForCoords(new BlockPos(MathHelper.floor_double(entP.posX),0,MathHelper.floor_double(entP.posZ)));
    if (biomegenbase != null) {
      float temperature=biomegenbase.getFloatTemperature(new BlockPos(MathHelper.floor_double(entP.posX),MathHelper.floor_double(entP.posY),MathHelper.floor_double(entP.posZ)));
      double d3;
      float f10;
      curPrecipVal=Math.min(maxPrecip,Math.abs(curPrecipVal));
      World world=entP.worldObj;
      Random rand=entP.worldObj.rand;
      if (curPrecipVal > 0) {
        if (entP.worldObj.getBiomeProvider().getTemperatureAtHeight(temperature,precipitationHeight) >= 0.15F) {
          int spawnAreaSize=15;
          for (int i=0; i < curPrecipVal * 20F * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(15),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            if (world.isRainingAt(pos)) {
              ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.worldObj,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.rain);
              rain.setCanCollide(true);
              rain.setKillOnCollide(true);
              rain.windWeight=1F;
              rain.setFacePlayer(false);
              rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
              rain.setMotionY(-0.5D);
              rain.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(rain);
            }
          }
        }
 else {
          int spawnAreaSize=50;
          for (int i=0; i < curPrecipVal * 20F * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(15),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            if (canPrecipitateAt(world,pos)) {
              ParticleTexExtraRender snow=new ParticleTexExtraRender(entP.worldObj,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.snow);
              snow.setMotionY(-0.3D);
              snow.setScale(1.3F);
              snow.setGravity(0.1F);
              snow.windWeight=0.2F;
              snow.setMaxAge(200);
              snow.setFacePlayer(false);
              snow.setCanCollide(true);
              snow.setKillOnCollide(true);
              snow.rotationYaw=snow.getWorld().rand.nextInt(360) - 180F;
              snow.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(snow);
            }
          }
        }
      }
    }
  }
}","public void tickParticlePrecipitation(){
  if (ConfigParticle.Particle_RainSnow) {
    EntityPlayer entP=FMLClientHandler.instance().getClient().thePlayer;
    if (entP.posY >= StormObject.static_YPos_layer0)     return;
    WeatherManagerClient weatherMan=ClientTickHandler.weatherManager;
    if (weatherMan == null)     return;
    WindManager windMan=weatherMan.getWindManager();
    if (windMan == null)     return;
    float curPrecipVal=getRainStrengthAndControlVisuals(entP);
    float maxPrecip=0.5F;
    int precipitationHeight=entP.worldObj.getPrecipitationHeight(new BlockPos(MathHelper.floor_double(entP.posX),0,MathHelper.floor_double(entP.posZ))).getY();
    Biome biomegenbase=entP.worldObj.getBiomeGenForCoords(new BlockPos(MathHelper.floor_double(entP.posX),0,MathHelper.floor_double(entP.posZ)));
    if (biomegenbase != null) {
      float temperature=biomegenbase.getFloatTemperature(new BlockPos(MathHelper.floor_double(entP.posX),MathHelper.floor_double(entP.posY),MathHelper.floor_double(entP.posZ)));
      double d3;
      float f10;
      curPrecipVal=Math.min(maxPrecip,Math.abs(curPrecipVal));
      World world=entP.worldObj;
      Random rand=entP.worldObj.rand;
      if (curPrecipVal > 0) {
        if (entP.worldObj.getBiomeProvider().getTemperatureAtHeight(temperature,precipitationHeight) >= 0.15F) {
          int spawnAreaSize=15;
          for (int i=0; i < curPrecipVal * 20F * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(15),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            if (world.isRainingAt(pos)) {
              ParticleTexExtraRender rain=new ParticleTexExtraRender(entP.worldObj,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.rain);
              rain.setCanCollide(true);
              rain.setKillOnCollide(true);
              rain.windWeight=1F;
              rain.setFacePlayer(false);
              rain.rotationYaw=rain.getWorld().rand.nextInt(360) - 180F;
              rain.setMotionY(-0.5D);
              rain.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(rain);
            }
          }
        }
 else {
          int spawnAreaSize=50;
          for (int i=0; i < curPrecipVal * 20F * ConfigParticle.Precipitation_Particle_effect_rate; i++) {
            BlockPos pos=new BlockPos(entP.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),entP.posY - 5 + rand.nextInt(15),entP.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
            if (canPrecipitateAt(world,pos)) {
              ParticleTexExtraRender snow=new ParticleTexExtraRender(entP.worldObj,pos.getX(),pos.getY(),pos.getZ(),0D,0D,0D,ParticleRegistry.snow);
              snow.setMotionY(-0.3D);
              snow.setScale(1.3F);
              snow.setGravity(0.1F);
              snow.windWeight=0.2F;
              snow.setMaxAge(200);
              snow.setFacePlayer(false);
              snow.setTicksFadeInMax(10);
              snow.setAlphaF(0);
              snow.setCanCollide(true);
              snow.setKillOnCollide(true);
              snow.rotationYaw=snow.getWorld().rand.nextInt(360) - 180F;
              snow.spawnAsWeatherEffect();
              ClientTickHandler.weatherManager.addWeatheredParticle(snow);
            }
          }
        }
      }
    }
  }
}",0.9585281254712712
81894,"@SideOnly(Side.CLIENT) public EntityRotFX spawnFogParticle(double x,double y,double z,int parRenderOrder){
  double speed=0D;
  Random rand=new Random();
  EntityRotFX entityfx=particleBehaviorFog.spawnNewParticleIconFX(Minecraft.getMinecraft().theWorld,ParticleRegistry.cloud256,x,y,z,(rand.nextDouble() - rand.nextDouble()) * speed,0.0D,(rand.nextDouble() - rand.nextDouble()) * speed,parRenderOrder);
  particleBehaviorFog.initParticle(entityfx);
  entityfx.setCanCollide(false);
  entityfx.callUpdatePB=false;
  boolean debug=false;
  if (debug) {
  }
 else {
  }
  if (levelCurIntensityStage == STATE_NORMAL) {
    entityfx.setMaxAge(300 + rand.nextInt(100));
  }
 else {
    entityfx.setMaxAge((size / 2) + rand.nextInt(100));
  }
  if (entityfx.getEntityId() % 20 < 5 && isSpinning()) {
    entityfx.renderOrder=1;
    entityfx.setMaxAge((size) + rand.nextInt(100));
  }
  float randFloat=(rand.nextFloat() * 0.6F);
  float baseBright=0.7F;
  if (levelCurIntensityStage > STATE_NORMAL) {
    baseBright=0.2F;
  }
 else   if (attrib_precipitation) {
    baseBright=0.2F;
  }
 else   if (manager.isVanillaRainActiveOnServer) {
    baseBright=0.2F;
  }
 else {
    float adj=Math.min(1F,levelWater / levelWaterStartRaining) * 0.6F;
    baseBright-=adj;
  }
  float finalBright=Math.min(1F,baseBright + randFloat);
  entityfx.setRBGColorF(finalBright,finalBright,finalBright);
  if (debug) {
    if (levelTemperature < 0) {
      entityfx.setRBGColorF(0,0,finalBright);
    }
 else     if (levelTemperature > 0) {
      entityfx.setRBGColorF(finalBright,0,0);
    }
  }
  ExtendedRenderer.rotEffRenderer.addEffect(entityfx);
  particleBehaviorFog.particles.add(entityfx);
  return entityfx;
}","@SideOnly(Side.CLIENT) public EntityRotFX spawnFogParticle(double x,double y,double z,int parRenderOrder,TextureAtlasSprite tex){
  double speed=0D;
  Random rand=new Random();
  EntityRotFX entityfx=particleBehaviorFog.spawnNewParticleIconFX(Minecraft.getMinecraft().theWorld,tex,x,y,z,(rand.nextDouble() - rand.nextDouble()) * speed,0.0D,(rand.nextDouble() - rand.nextDouble()) * speed,parRenderOrder);
  particleBehaviorFog.initParticle(entityfx);
  entityfx.setCanCollide(false);
  entityfx.callUpdatePB=false;
  boolean debug=false;
  if (debug) {
  }
 else {
  }
  if (levelCurIntensityStage == STATE_NORMAL) {
    entityfx.setMaxAge(300 + rand.nextInt(100));
  }
 else {
    entityfx.setMaxAge((size / 2) + rand.nextInt(100));
  }
  if (entityfx.getEntityId() % 20 < 5 && isSpinning()) {
    entityfx.renderOrder=1;
    entityfx.setMaxAge((size) + rand.nextInt(100));
  }
  float randFloat=(rand.nextFloat() * 0.6F);
  float baseBright=0.7F;
  if (levelCurIntensityStage > STATE_NORMAL) {
    baseBright=0.2F;
  }
 else   if (attrib_precipitation) {
    baseBright=0.2F;
  }
 else   if (manager.isVanillaRainActiveOnServer) {
    baseBright=0.2F;
  }
 else {
    float adj=Math.min(1F,levelWater / levelWaterStartRaining) * 0.6F;
    baseBright-=adj;
  }
  float finalBright=Math.min(1F,baseBright + randFloat);
  entityfx.setRBGColorF(finalBright,finalBright,finalBright);
  if (debug) {
    if (levelTemperature < 0) {
      entityfx.setRBGColorF(0,0,finalBright);
    }
 else     if (levelTemperature > 0) {
      entityfx.setRBGColorF(finalBright,0,0);
    }
  }
  ExtendedRenderer.rotEffRenderer.addEffect(entityfx);
  particleBehaviorFog.particles.add(entityfx);
  return entityfx;
}",0.9849601887348864
81895,"@SideOnly(Side.CLIENT) public void tickClient(){
  if (particleBehaviorFog == null) {
    particleBehaviorFog=new ParticleBehaviorFog(new Vec3(pos.xCoord,pos.yCoord,pos.zCoord));
  }
 else {
    if (!Minecraft.getMinecraft().isSingleplayer() || !(Minecraft.getMinecraft().currentScreen instanceof GuiIngameMenu)) {
      particleBehaviorFog.tickUpdateList();
    }
  }
  EntityPlayer entP=Minecraft.getMinecraft().thePlayer;
  spinSpeed=0.02D;
  double spinSpeedMax=0.4D;
  if (isCycloneFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.00D + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * spinSpeedMax * 0.2D);
  }
 else   if (isTornadoFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.2D;
  }
 else   if (levelCurIntensityStage >= STATE_HIGHWIND) {
    spinSpeed=spinSpeedMax * 0.05D;
  }
 else {
    spinSpeed=spinSpeedMax * 0.02D;
  }
  if (isHurricane()) {
    spinSpeed+=0.1D;
  }
  if (size == 0)   size=1;
  int delay=Math.max(1,(int)(100F / size * 1F));
  int loopSize=1;
  int extraSpawning=0;
  if (isSpinning()) {
    loopSize+=4;
    extraSpawning=300;
  }
  if (stormType == TYPE_WATER) {
    if (levelCurIntensityStage >= STATE_STAGE5) {
      loopSize=10;
      extraSpawning=800;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE4) {
      loopSize=8;
      extraSpawning=700;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE3) {
      loopSize=6;
      extraSpawning=500;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE2) {
      loopSize=4;
      extraSpawning=400;
    }
 else {
      extraSpawning=300;
    }
  }
  Random rand=new Random();
  Vec3 playerAdjPos=new Vec3(entP.posX,pos.yCoord,entP.posZ);
  double maxSpawnDistFromPlayer=512;
  if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigMisc.Cloud_ParticleSpawnDelay) == 0) {
    for (int i=0; i < loopSize; i++) {
      if (listParticlesCloud.size() < size + extraSpawning) {
        double spawnRad=size;
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),layers.get(layer),pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          EntityRotFX particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0);
          listParticlesCloud.add(particle);
        }
      }
    }
  }
  if (levelCurIntensityStage >= STATE_HIGHWIND) {
    for (int i=0; i < (stormType == TYPE_WATER ? 50 : 3); i++) {
      if (listParticlesGround.size() < (stormType == TYPE_WATER ? 600 : 150)) {
        double spawnRad=size / 4 * 3;
        if (stormType == TYPE_WATER) {
          spawnRad=size * 3;
        }
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),posGround.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          int groundY=WeatherUtilBlock.getPrecipitationHeightSafe(manager.getWorld(),new BlockPos((int)tryPos.xCoord,0,(int)tryPos.zCoord)).getY();
          EntityRotFX particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0);
          particle.setScale(100);
          particle.rotationYaw=rand.nextInt(360);
          particle.rotationPitch=rand.nextInt(360);
          listParticlesGround.add(particle);
        }
      }
    }
  }
  delay=1;
  loopSize=2;
  double spawnRad=size / 48;
  if (levelCurIntensityStage >= STATE_STAGE5) {
    spawnRad=200;
    loopSize=10;
    sizeMaxFunnelParticles=1200;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE4) {
    spawnRad=150;
    loopSize=8;
    sizeMaxFunnelParticles=1000;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE3) {
    spawnRad=100;
    loopSize=6;
    sizeMaxFunnelParticles=800;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE2) {
    spawnRad=50;
    loopSize=4;
    sizeMaxFunnelParticles=600;
  }
 else {
    sizeMaxFunnelParticles=600;
  }
  if (isTornadoFormingOrGreater() || (attrib_waterSpout)) {
    if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigStorm.Storm_ParticleSpawnDelay) == 0) {
      for (int i=0; i < loopSize; i++) {
        if (listParticlesFunnel.size() >= sizeMaxFunnelParticles) {
          listParticlesFunnel.get(0).setExpired();
          listParticlesFunnel.remove(0);
        }
        if (listParticlesFunnel.size() < sizeMaxFunnelParticles) {
          Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),pos.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
          if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
            EntityRotFX particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1);
            particle.setMaxAge(150 + ((levelCurIntensityStage - 1) * 100) + rand.nextInt(100));
            float baseBright=0.3F;
            float randFloat=(rand.nextFloat() * 0.6F);
            particle.rotationYaw=rand.nextInt(360);
            float finalBright=Math.min(1F,baseBright + randFloat);
            if (levelCurIntensityStage == STATE_HIGHWIND) {
              particle.setScale(150);
              particle.setRBGColorF(finalBright - 0.2F,finalBright - 0.2F,finalBright);
            }
 else {
              particle.setScale(250);
              particle.setRBGColorF(finalBright,finalBright,finalBright);
            }
            listParticlesFunnel.add(particle);
          }
        }
 else {
        }
      }
    }
  }
  for (int i=0; i < listParticlesFunnel.size(); i++) {
    EntityRotFX ent=listParticlesFunnel.get(i);
    if (!ent.isAlive()) {
      listParticlesFunnel.remove(ent);
    }
 else     if (ent.getPosY() > pos.yCoord) {
      ent.setExpired();
      listParticlesFunnel.remove(ent);
    }
 else {
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
      ent.rotationYaw+=ent.getEntityId() % 90;
      ent.rotationPitch=-30F;
      if (levelCurIntensityStage == STATE_HIGHWIND) {
        int fadingDistStart=30;
        if (ent.getPosY() > posGround.yCoord + fadingDistStart) {
          float maxVal=ent.getBlueColorF();
          float fadeRate=0.002F;
          ent.setRBGColorF(Math.min(maxVal,ent.getRedColorF() + fadeRate),Math.min(maxVal,ent.getGreenColorF() + fadeRate),maxVal);
        }
      }
      spinEntity(ent);
    }
  }
  for (int i=0; i < listParticlesCloud.size(); i++) {
    EntityRotFX ent=listParticlesCloud.get(i);
    if (!ent.isAlive()) {
      listParticlesCloud.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
      float dropDownRange=15F;
      float extraDropCalc=0;
      if (curDist < 200 && ent.getEntityId() % 20 < 5) {
        extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        if (isCycloneFormingOrGreater()) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange * 5F);
        }
      }
      if (isSpinning()) {
        double speed=spinSpeed + (rand.nextDouble() * 0.01D);
        double distt=size;
        double vecX=ent.getPosX() - pos.xCoord;
        double vecZ=ent.getPosZ() - pos.zCoord;
        float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
        angle+=speed * 50D;
        angle-=(ent.getEntityId() % 10) * 3D;
        angle+=rand.nextInt(10) - rand.nextInt(10);
        if (curDist > distt) {
          angle+=40;
        }
        if (ent.getEntityId() % 20 < 5) {
          if (levelCurIntensityStage >= STATE_FORMING) {
            if (stormType == TYPE_WATER) {
              angle+=40 + ((ent.getEntityId() % 5) * 4);
              if (curDist > 150 + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * 30)) {
                angle+=10;
              }
            }
 else {
              angle+=30 + ((ent.getEntityId() % 5) * 4);
            }
          }
 else {
            if (curDist > 150) {
              angle+=50 + ((ent.getEntityId() % 5) * 4);
            }
          }
          double var16=this.pos.xCoord - ent.getPosX();
          double var18=this.pos.zCoord - ent.getPosZ();
          ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
          ent.rotationPitch=-20F - (ent.getEntityId() % 10);
        }
        if (curSpeed < speed * 20D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
 else {
        float cloudMoveAmp=0.2F * (1 + layer);
        float speed=getAdjustedSpeed() * cloudMoveAmp;
        float angle=getAdjustedAngle();
        dropDownRange=5;
        if (ent.getEntityId() % 20 < 5) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        }
        if (curSpeed < speed * 1D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
      if (Math.abs(ent.getPosY() - (pos.yCoord - extraDropCalc)) > 2F) {
        if (ent.getPosY() < pos.yCoord - extraDropCalc) {
          ent.setMotionY(ent.getMotionY() + 0.1D);
        }
 else {
          ent.setMotionY(ent.getMotionY() + 0.1D);
        }
      }
      float dropDownSpeedMax=0.15F;
      if (isCycloneFormingOrGreater()) {
        dropDownSpeedMax=0.9F;
      }
      if (ent.getMotionY() < -dropDownSpeedMax) {
        ent.setMotionY(-dropDownSpeedMax);
      }
      if (ent.getMotionY() > dropDownSpeedMax) {
        ent.setMotionY(dropDownSpeedMax);
      }
    }
  }
  for (int i=0; i < listParticlesGround.size(); i++) {
    EntityRotFX ent=listParticlesGround.get(i);
    double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
    if (!ent.isAlive()) {
      listParticlesGround.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double speed=Math.max(0.2F,5F * spinSpeed) + (rand.nextDouble() * 0.01D);
      double distt=size;
      double vecX=ent.getPosX() - pos.xCoord;
      double vecZ=ent.getPosZ() - pos.zCoord;
      float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
      angle+=85;
      int maxParticleSize=60;
      if (stormType == TYPE_WATER) {
        maxParticleSize=150;
        speed/=5D;
      }
      ent.setScale((float)Math.min(maxParticleSize,curDist * 2F));
      if (curDist < 20) {
        ent.setExpired();
      }
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      if (curSpeed < speed * 20D) {
        ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
        ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
      }
    }
  }
}","@SideOnly(Side.CLIENT) public void tickClient(){
  if (particleBehaviorFog == null) {
    particleBehaviorFog=new ParticleBehaviorFog(new Vec3(pos.xCoord,pos.yCoord,pos.zCoord));
  }
 else {
    if (!Minecraft.getMinecraft().isSingleplayer() || !(Minecraft.getMinecraft().currentScreen instanceof GuiIngameMenu)) {
      particleBehaviorFog.tickUpdateList();
    }
  }
  EntityPlayer entP=Minecraft.getMinecraft().thePlayer;
  spinSpeed=0.02D;
  double spinSpeedMax=0.4D;
  if (isCycloneFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.00D + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * spinSpeedMax * 0.2D);
  }
 else   if (isTornadoFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.2D;
  }
 else   if (levelCurIntensityStage >= STATE_HIGHWIND) {
    spinSpeed=spinSpeedMax * 0.05D;
  }
 else {
    spinSpeed=spinSpeedMax * 0.02D;
  }
  if (isHurricane()) {
    spinSpeed+=0.1D;
  }
  if (size == 0)   size=1;
  int delay=Math.max(1,(int)(100F / size * 1F));
  int loopSize=1;
  int extraSpawning=0;
  if (isSpinning()) {
    loopSize+=4;
    extraSpawning=300;
  }
  if (stormType == TYPE_WATER) {
    if (levelCurIntensityStage >= STATE_STAGE5) {
      loopSize=10;
      extraSpawning=800;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE4) {
      loopSize=8;
      extraSpawning=700;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE3) {
      loopSize=6;
      extraSpawning=500;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE2) {
      loopSize=4;
      extraSpawning=400;
    }
 else {
      extraSpawning=300;
    }
  }
  Random rand=new Random();
  Vec3 playerAdjPos=new Vec3(entP.posX,pos.yCoord,entP.posZ);
  double maxSpawnDistFromPlayer=512;
  if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigMisc.Cloud_ParticleSpawnDelay) == 0) {
    for (int i=0; i < loopSize; i++) {
      if (listParticlesCloud.size() < size + extraSpawning) {
        double spawnRad=size;
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),layers.get(layer),pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          EntityRotFX particle;
          if (WeatherUtil.isAprilFoolsDay()) {
            particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.chicken);
          }
 else {
            particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0);
          }
          listParticlesCloud.add(particle);
        }
      }
    }
  }
  if (levelCurIntensityStage >= STATE_HIGHWIND) {
    for (int i=0; i < (stormType == TYPE_WATER ? 50 : 3); i++) {
      if (listParticlesGround.size() < (stormType == TYPE_WATER ? 600 : 150)) {
        double spawnRad=size / 4 * 3;
        if (stormType == TYPE_WATER) {
          spawnRad=size * 3;
        }
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),posGround.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          int groundY=WeatherUtilBlock.getPrecipitationHeightSafe(manager.getWorld(),new BlockPos((int)tryPos.xCoord,0,(int)tryPos.zCoord)).getY();
          EntityRotFX particle;
          if (WeatherUtil.isAprilFoolsDay()) {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0,ParticleRegistry.potato);
          }
 else {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0);
          }
          particle.setScale(100);
          particle.rotationYaw=rand.nextInt(360);
          particle.rotationPitch=rand.nextInt(360);
          listParticlesGround.add(particle);
        }
      }
    }
  }
  delay=1;
  loopSize=2;
  double spawnRad=size / 48;
  if (levelCurIntensityStage >= STATE_STAGE5) {
    spawnRad=200;
    loopSize=10;
    sizeMaxFunnelParticles=1200;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE4) {
    spawnRad=150;
    loopSize=8;
    sizeMaxFunnelParticles=1000;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE3) {
    spawnRad=100;
    loopSize=6;
    sizeMaxFunnelParticles=800;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE2) {
    spawnRad=50;
    loopSize=4;
    sizeMaxFunnelParticles=600;
  }
 else {
    sizeMaxFunnelParticles=600;
  }
  if (isTornadoFormingOrGreater() || (attrib_waterSpout)) {
    if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigStorm.Storm_ParticleSpawnDelay) == 0) {
      for (int i=0; i < loopSize; i++) {
        if (listParticlesFunnel.size() >= sizeMaxFunnelParticles) {
          listParticlesFunnel.get(0).setExpired();
          listParticlesFunnel.remove(0);
        }
        if (listParticlesFunnel.size() < sizeMaxFunnelParticles) {
          Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),pos.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
          if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
            EntityRotFX particle;
            if (WeatherUtil.isAprilFoolsDay()) {
              particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1,ParticleRegistry.potato);
            }
 else {
              particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1);
            }
            particle.setMaxAge(150 + ((levelCurIntensityStage - 1) * 100) + rand.nextInt(100));
            float baseBright=0.3F;
            float randFloat=(rand.nextFloat() * 0.6F);
            particle.rotationYaw=rand.nextInt(360);
            float finalBright=Math.min(1F,baseBright + randFloat);
            if (levelCurIntensityStage == STATE_HIGHWIND) {
              particle.setScale(150);
              particle.setRBGColorF(finalBright - 0.2F,finalBright - 0.2F,finalBright);
            }
 else {
              particle.setScale(250);
              particle.setRBGColorF(finalBright,finalBright,finalBright);
            }
            listParticlesFunnel.add(particle);
          }
        }
 else {
        }
      }
    }
  }
  for (int i=0; i < listParticlesFunnel.size(); i++) {
    EntityRotFX ent=listParticlesFunnel.get(i);
    if (!ent.isAlive()) {
      listParticlesFunnel.remove(ent);
    }
 else     if (ent.getPosY() > pos.yCoord) {
      ent.setExpired();
      listParticlesFunnel.remove(ent);
    }
 else {
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
      ent.rotationYaw+=ent.getEntityId() % 90;
      ent.rotationPitch=-30F;
      if (levelCurIntensityStage == STATE_HIGHWIND) {
        int fadingDistStart=30;
        if (ent.getPosY() > posGround.yCoord + fadingDistStart) {
          float maxVal=ent.getBlueColorF();
          float fadeRate=0.002F;
          ent.setRBGColorF(Math.min(maxVal,ent.getRedColorF() + fadeRate),Math.min(maxVal,ent.getGreenColorF() + fadeRate),maxVal);
        }
      }
      spinEntity(ent);
    }
  }
  for (int i=0; i < listParticlesCloud.size(); i++) {
    EntityRotFX ent=listParticlesCloud.get(i);
    if (!ent.isAlive()) {
      listParticlesCloud.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
      float dropDownRange=15F;
      float extraDropCalc=0;
      if (curDist < 200 && ent.getEntityId() % 20 < 5) {
        extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        if (isCycloneFormingOrGreater()) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange * 5F);
        }
      }
      if (isSpinning()) {
        double speed=spinSpeed + (rand.nextDouble() * 0.01D);
        double distt=size;
        double vecX=ent.getPosX() - pos.xCoord;
        double vecZ=ent.getPosZ() - pos.zCoord;
        float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
        angle+=speed * 50D;
        angle-=(ent.getEntityId() % 10) * 3D;
        angle+=rand.nextInt(10) - rand.nextInt(10);
        if (curDist > distt) {
          angle+=40;
        }
        if (ent.getEntityId() % 20 < 5) {
          if (levelCurIntensityStage >= STATE_FORMING) {
            if (stormType == TYPE_WATER) {
              angle+=40 + ((ent.getEntityId() % 5) * 4);
              if (curDist > 150 + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * 30)) {
                angle+=10;
              }
            }
 else {
              angle+=30 + ((ent.getEntityId() % 5) * 4);
            }
          }
 else {
            if (curDist > 150) {
              angle+=50 + ((ent.getEntityId() % 5) * 4);
            }
          }
          double var16=this.pos.xCoord - ent.getPosX();
          double var18=this.pos.zCoord - ent.getPosZ();
          ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
          ent.rotationPitch=-20F - (ent.getEntityId() % 10);
        }
        if (curSpeed < speed * 20D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
 else {
        float cloudMoveAmp=0.2F * (1 + layer);
        float speed=getAdjustedSpeed() * cloudMoveAmp;
        float angle=getAdjustedAngle();
        dropDownRange=5;
        if (ent.getEntityId() % 20 < 5) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        }
        if (curSpeed < speed * 1D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
      if (Math.abs(ent.getPosY() - (pos.yCoord - extraDropCalc)) > 2F) {
        if (ent.getPosY() < pos.yCoord - extraDropCalc) {
          ent.setMotionY(ent.getMotionY() + 0.1D);
        }
 else {
          ent.setMotionY(ent.getMotionY() + 0.1D);
        }
      }
      float dropDownSpeedMax=0.15F;
      if (isCycloneFormingOrGreater()) {
        dropDownSpeedMax=0.9F;
      }
      if (ent.getMotionY() < -dropDownSpeedMax) {
        ent.setMotionY(-dropDownSpeedMax);
      }
      if (ent.getMotionY() > dropDownSpeedMax) {
        ent.setMotionY(dropDownSpeedMax);
      }
    }
  }
  for (int i=0; i < listParticlesGround.size(); i++) {
    EntityRotFX ent=listParticlesGround.get(i);
    double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
    if (!ent.isAlive()) {
      listParticlesGround.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double speed=Math.max(0.2F,5F * spinSpeed) + (rand.nextDouble() * 0.01D);
      double distt=size;
      double vecX=ent.getPosX() - pos.xCoord;
      double vecZ=ent.getPosZ() - pos.zCoord;
      float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
      angle+=85;
      int maxParticleSize=60;
      if (stormType == TYPE_WATER) {
        maxParticleSize=150;
        speed/=5D;
      }
      ent.setScale((float)Math.min(maxParticleSize,curDist * 2F));
      if (curDist < 20) {
        ent.setExpired();
      }
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      if (curSpeed < speed * 20D) {
        ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
        ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
      }
    }
  }
}",0.97134185996098
81896,"@SideOnly(Side.CLIENT) public void tickClient(){
  Minecraft mc=Minecraft.getMinecraft();
  World world=manager.getWorld();
  WindManager windMan=manager.getWindManager();
  if (particleBehavior == null) {
    particleBehavior=new ParticleBehaviorSandstorm(pos);
  }
  double distanceToCenter=pos.distanceTo(new Vec3(mc.thePlayer.posX,mc.thePlayer.posY,mc.thePlayer.posZ));
  double distanceToFront=distanceToCenter - size;
  boolean isInside=distanceToFront < 0;
  double circ=Math.PI * size;
  double distBetweenParticles=3;
  double degRate=360D / (circ / distBetweenParticles);
  if (mc.theWorld.getTotalWorldTime() % 40 == 0) {
  }
  Random rand=mc.theWorld.rand;
  this.height=this.size / 4;
  int heightLayers=Math.max(1,this.height / (int)distBetweenParticles);
  if ((mc.theWorld.getTotalWorldTime()) % 10 == 0) {
  }
  double distFromSpawn=this.posSpawn.distanceTo(this.pos);
  double xVec=this.posSpawn.xCoord - this.pos.xCoord;
  double zVec=this.posSpawn.zCoord - this.pos.zCoord;
  double directionAngle=Math.atan2(zVec,xVec);
  double directionAngleDeg=Math.toDegrees(directionAngle);
  int spawnedThisTick=0;
  float sandstormScale=getSandstormScale();
  double sandstormParticleRateDust=ConfigParticle.Sandstorm_Particle_Dust_effect_rate;
  if (size > 0) {
    for (int heightLayer=0; heightLayer < heightLayers && spawnedThisTick < 500; heightLayer++) {
      double i=directionAngleDeg + (rand.nextDouble() * 180D);
      if ((mc.theWorld.getTotalWorldTime()) % 2 == 0) {
        if (rand.nextDouble() >= sandstormParticleRateDust)         continue;
        double sizeSub=heightLayer * 2D;
        double sizeDyn=size - sizeSub;
        double inwardsAdj=rand.nextDouble() * 5D;
        double sizeRand=(sizeDyn + -inwardsAdj);
        double x=pos.xCoord + (-Math.sin(Math.toRadians(i)) * (sizeRand));
        double z=pos.zCoord + (Math.cos(Math.toRadians(i)) * (sizeRand));
        double y=pos.yCoord + (heightLayer * distBetweenParticles * 2);
        TextureAtlasSprite sprite=ParticleRegistry.cloud256;
        ParticleSandstorm part=new ParticleSandstorm(mc.theWorld,x,y,z,0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.angleToStorm=i;
        part.distAdj=sizeRand;
        part.heightLayer=heightLayer;
        part.lockPosition=true;
        part.setFacePlayer(false);
        part.isTransparent=true;
        part.rotationYaw=(float)i + rand.nextInt(20) - 10;
        part.rotationPitch=0;
        part.setMaxAge(300);
        part.setGravity(0.09F);
        part.setAlphaF(1F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.5F);
        part.setRBGColorF(0.65F * brightnessMulti,0.6F * brightnessMulti,0.3F * brightnessMulti);
        part.setScale(100);
        part.setKillOnCollide(true);
        particleBehavior.particles.add(part);
        part.spawnAsWeatherEffect();
        spawnedThisTick++;
      }
    }
  }
  if (spawnedThisTick > 0) {
    spawnedThisTick=0;
  }
  if ((mc.theWorld.getTotalWorldTime()) % 20 == 0) {
  }
  double spawnAngle=Math.atan2((double)this.sizePeak,distFromSpawn);
  spawnAngle*=1.2D;
  double spawnDistInc=10;
  double extraDistSpawnIntoWall=sizePeak / 2D;
  if ((mc.theWorld.getTotalWorldTime()) % 3 == 0) {
    for (double spawnDistTick=0; spawnDistTick < distFromSpawn + (extraDistSpawnIntoWall) && spawnedThisTick < 500; spawnDistTick+=spawnDistInc) {
      if (rand.nextDouble() >= sandstormScale)       continue;
      if (rand.nextDouble() >= sandstormParticleRateDust)       continue;
      double randAngle=directionAngle + (Math.PI / 2D) - (spawnAngle) + (rand.nextDouble() * spawnAngle * 2D);
      double randHeight=(spawnDistTick / distFromSpawn) * height * 1.2D* rand.nextDouble();
      double x=posSpawn.xCoord + (-Math.sin(randAngle) * (spawnDistTick));
      double z=posSpawn.zCoord + (Math.cos(randAngle) * (spawnDistTick));
      x+=(rand.nextDouble() - rand.nextDouble()) * 30D;
      z+=(rand.nextDouble() - rand.nextDouble()) * 30D;
      int yy=WeatherUtilBlock.getPrecipitationHeightSafe(world,new BlockPos(x,0,z)).getY();
      double y=yy + 2 + randHeight;
      TextureAtlasSprite sprite=ParticleRegistry.cloud256;
      ParticleSandstorm part=new ParticleSandstorm(mc.theWorld,x,y,z,0,0,0,sprite);
      particleBehavior.initParticle(part);
      part.setFacePlayer(false);
      part.isTransparent=true;
      part.rotationYaw=(float)rand.nextInt(360);
      part.rotationPitch=(float)rand.nextInt(360);
      part.setMaxAge(100);
      part.setGravity(0.09F);
      part.setAlphaF(1F);
      float brightnessMulti=1F - (rand.nextFloat() * 0.5F);
      part.setRBGColorF(0.65F * brightnessMulti,0.6F * brightnessMulti,0.3F * brightnessMulti);
      part.setScale(100);
      part.setKillOnCollide(true);
      part.windWeight=1F;
      particleBehavior.particles.add(part);
      part.spawnAsWeatherEffect();
      spawnedThisTick++;
    }
  }
  if (spawnedThisTick > 0) {
  }
  float angle=windMan.getWindAngleForClouds();
  float speedWind=windMan.getWindSpeedForClouds();
  double vecX=-Math.sin(Math.toRadians(angle));
  double vecZ=Math.cos(Math.toRadians(angle));
  double speed=0.8D;
  particleBehavior.coordSource=pos;
  particleBehavior.tickUpdateList();
  for (int i=0; i < particleBehavior.particles.size(); i++) {
    ParticleSandstorm particle=(ParticleSandstorm)particleBehavior.particles.get(i);
    if (particle.lockPosition) {
      if (size > 0) {
        double x=pos.xCoord + (-Math.sin(Math.toRadians(particle.angleToStorm)) * (particle.distAdj));
        double z=pos.zCoord + (Math.cos(Math.toRadians(particle.angleToStorm)) * (particle.distAdj));
        double y=pos.yCoord + (particle.heightLayer * distBetweenParticles);
        moveToPosition(particle,x,y,z,0.01D);
      }
 else {
        particle.setMotionX((vecX * speedWind * 0.3F));
        particle.setMotionZ((vecZ * speedWind * 0.3F));
      }
    }
 else {
      particle.setMotionX((vecX * speed));
      particle.setMotionZ((vecZ * speed));
    }
  }
}","@SideOnly(Side.CLIENT) public void tickClient(){
  Minecraft mc=Minecraft.getMinecraft();
  World world=manager.getWorld();
  WindManager windMan=manager.getWindManager();
  if (particleBehavior == null) {
    particleBehavior=new ParticleBehaviorSandstorm(pos);
  }
  double distanceToCenter=pos.distanceTo(new Vec3(mc.thePlayer.posX,mc.thePlayer.posY,mc.thePlayer.posZ));
  double distanceToFront=distanceToCenter - size;
  boolean isInside=distanceToFront < 0;
  double circ=Math.PI * size;
  double distBetweenParticles=3;
  double degRate=360D / (circ / distBetweenParticles);
  if (mc.theWorld.getTotalWorldTime() % 40 == 0) {
  }
  Random rand=mc.theWorld.rand;
  this.height=this.size / 4;
  int heightLayers=Math.max(1,this.height / (int)distBetweenParticles);
  if ((mc.theWorld.getTotalWorldTime()) % 10 == 0) {
  }
  double distFromSpawn=this.posSpawn.distanceTo(this.pos);
  double xVec=this.posSpawn.xCoord - this.pos.xCoord;
  double zVec=this.posSpawn.zCoord - this.pos.zCoord;
  double directionAngle=Math.atan2(zVec,xVec);
  double directionAngleDeg=Math.toDegrees(directionAngle);
  int spawnedThisTick=0;
  float sandstormScale=getSandstormScale();
  double sandstormParticleRateDust=ConfigParticle.Sandstorm_Particle_Dust_effect_rate;
  if (size > 0) {
    for (int heightLayer=0; heightLayer < heightLayers && spawnedThisTick < 500; heightLayer++) {
      double i=directionAngleDeg + (rand.nextDouble() * 180D);
      if ((mc.theWorld.getTotalWorldTime()) % 2 == 0) {
        if (rand.nextDouble() >= sandstormParticleRateDust)         continue;
        double sizeSub=heightLayer * 2D;
        double sizeDyn=size - sizeSub;
        double inwardsAdj=rand.nextDouble() * 5D;
        double sizeRand=(sizeDyn + -inwardsAdj);
        double x=pos.xCoord + (-Math.sin(Math.toRadians(i)) * (sizeRand));
        double z=pos.zCoord + (Math.cos(Math.toRadians(i)) * (sizeRand));
        double y=pos.yCoord + (heightLayer * distBetweenParticles * 2);
        TextureAtlasSprite sprite=ParticleRegistry.cloud256;
        if (WeatherUtil.isAprilFoolsDay()) {
          sprite=ParticleRegistry.chicken;
        }
        ParticleSandstorm part=new ParticleSandstorm(mc.theWorld,x,y,z,0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.angleToStorm=i;
        part.distAdj=sizeRand;
        part.heightLayer=heightLayer;
        part.lockPosition=true;
        part.setFacePlayer(false);
        part.isTransparent=true;
        part.rotationYaw=(float)i + rand.nextInt(20) - 10;
        part.rotationPitch=0;
        part.setMaxAge(300);
        part.setGravity(0.09F);
        part.setAlphaF(1F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.5F);
        part.setRBGColorF(0.65F * brightnessMulti,0.6F * brightnessMulti,0.3F * brightnessMulti);
        part.setScale(100);
        part.setKillOnCollide(true);
        particleBehavior.particles.add(part);
        part.spawnAsWeatherEffect();
        spawnedThisTick++;
      }
    }
  }
  if (spawnedThisTick > 0) {
    spawnedThisTick=0;
  }
  if ((mc.theWorld.getTotalWorldTime()) % 20 == 0) {
  }
  double spawnAngle=Math.atan2((double)this.sizePeak,distFromSpawn);
  spawnAngle*=1.2D;
  double spawnDistInc=10;
  double extraDistSpawnIntoWall=sizePeak / 2D;
  if ((mc.theWorld.getTotalWorldTime()) % 3 == 0) {
    for (double spawnDistTick=0; spawnDistTick < distFromSpawn + (extraDistSpawnIntoWall) && spawnedThisTick < 500; spawnDistTick+=spawnDistInc) {
      if (rand.nextDouble() >= sandstormScale)       continue;
      if (rand.nextDouble() >= sandstormParticleRateDust)       continue;
      double randAngle=directionAngle + (Math.PI / 2D) - (spawnAngle) + (rand.nextDouble() * spawnAngle * 2D);
      double randHeight=(spawnDistTick / distFromSpawn) * height * 1.2D* rand.nextDouble();
      double x=posSpawn.xCoord + (-Math.sin(randAngle) * (spawnDistTick));
      double z=posSpawn.zCoord + (Math.cos(randAngle) * (spawnDistTick));
      x+=(rand.nextDouble() - rand.nextDouble()) * 30D;
      z+=(rand.nextDouble() - rand.nextDouble()) * 30D;
      int yy=WeatherUtilBlock.getPrecipitationHeightSafe(world,new BlockPos(x,0,z)).getY();
      double y=yy + 2 + randHeight;
      TextureAtlasSprite sprite=ParticleRegistry.cloud256;
      if (WeatherUtil.isAprilFoolsDay()) {
        sprite=ParticleRegistry.chicken;
      }
      ParticleSandstorm part=new ParticleSandstorm(mc.theWorld,x,y,z,0,0,0,sprite);
      particleBehavior.initParticle(part);
      part.setFacePlayer(false);
      part.isTransparent=true;
      part.rotationYaw=(float)rand.nextInt(360);
      part.rotationPitch=(float)rand.nextInt(360);
      part.setMaxAge(100);
      part.setGravity(0.09F);
      part.setAlphaF(1F);
      float brightnessMulti=1F - (rand.nextFloat() * 0.5F);
      part.setRBGColorF(0.65F * brightnessMulti,0.6F * brightnessMulti,0.3F * brightnessMulti);
      part.setScale(100);
      part.setKillOnCollide(true);
      part.windWeight=1F;
      particleBehavior.particles.add(part);
      part.spawnAsWeatherEffect();
      spawnedThisTick++;
    }
  }
  if (spawnedThisTick > 0) {
  }
  float angle=windMan.getWindAngleForClouds();
  float speedWind=windMan.getWindSpeedForClouds();
  double vecX=-Math.sin(Math.toRadians(angle));
  double vecZ=Math.cos(Math.toRadians(angle));
  double speed=0.8D;
  particleBehavior.coordSource=pos;
  particleBehavior.tickUpdateList();
  for (int i=0; i < particleBehavior.particles.size(); i++) {
    ParticleSandstorm particle=(ParticleSandstorm)particleBehavior.particles.get(i);
    if (particle.lockPosition) {
      if (size > 0) {
        double x=pos.xCoord + (-Math.sin(Math.toRadians(particle.angleToStorm)) * (particle.distAdj));
        double z=pos.zCoord + (Math.cos(Math.toRadians(particle.angleToStorm)) * (particle.distAdj));
        double y=pos.yCoord + (particle.heightLayer * distBetweenParticles);
        moveToPosition(particle,x,y,z,0.01D);
      }
 else {
        particle.setMotionX((vecX * speedWind * 0.3F));
        particle.setMotionZ((vecZ * speedWind * 0.3F));
      }
    }
 else {
      particle.setMotionX((vecX * speed));
      particle.setMotionZ((vecZ * speed));
    }
  }
}",0.9843621399176956
81897,"@SideOnly(Side.CLIENT) public void tickClient(){
  if (isCloudlessStorm())   return;
  if (particleBehaviorFog == null) {
    particleBehaviorFog=new ParticleBehaviorFog(new Vec3(pos.xCoord,pos.yCoord,pos.zCoord));
  }
 else {
    if (!Minecraft.getMinecraft().isSingleplayer() || !(Minecraft.getMinecraft().currentScreen instanceof GuiIngameMenu)) {
      particleBehaviorFog.tickUpdateList();
    }
  }
  EntityPlayer entP=Minecraft.getMinecraft().thePlayer;
  spinSpeed=0.02D;
  double spinSpeedMax=0.4D;
  if (isCycloneFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.00D + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * spinSpeedMax * 0.2D);
  }
 else   if (isTornadoFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.2D;
  }
 else   if (levelCurIntensityStage >= STATE_HIGHWIND) {
    spinSpeed=spinSpeedMax * 0.05D;
  }
 else {
    spinSpeed=spinSpeedMax * 0.02D;
  }
  if (isHurricane()) {
    spinSpeed+=0.1D;
  }
  if (size == 0)   size=1;
  int delay=Math.max(1,(int)(100F / size * 1F));
  int loopSize=1;
  int extraSpawning=0;
  if (isSpinning()) {
    loopSize+=4;
    extraSpawning=300;
  }
  if (stormType == TYPE_WATER) {
    if (levelCurIntensityStage >= STATE_STAGE5) {
      loopSize=10;
      extraSpawning=800;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE4) {
      loopSize=8;
      extraSpawning=700;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE3) {
      loopSize=6;
      extraSpawning=500;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE2) {
      loopSize=4;
      extraSpawning=400;
    }
 else {
      extraSpawning=300;
    }
  }
  Random rand=new Random();
  Vec3 playerAdjPos=new Vec3(entP.posX,pos.yCoord,entP.posZ);
  double maxSpawnDistFromPlayer=512;
  if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigMisc.Cloud_ParticleSpawnDelay) == 0) {
    for (int i=0; i < loopSize; i++) {
      if (listParticlesCloud.size() < size + extraSpawning) {
        double spawnRad=size;
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),layers.get(layer),pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          EntityRotFX particle;
          if (WeatherUtil.isAprilFoolsDay()) {
            particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.chicken);
          }
 else {
            particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0);
          }
          listParticlesCloud.add(particle);
        }
      }
    }
  }
  if (levelCurIntensityStage >= STATE_HIGHWIND) {
    for (int i=0; i < (stormType == TYPE_WATER ? 50 : 3); i++) {
      if (listParticlesGround.size() < (stormType == TYPE_WATER ? 600 : 150)) {
        double spawnRad=size / 4 * 3;
        if (stormType == TYPE_WATER) {
          spawnRad=size * 3;
        }
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),posGround.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          int groundY=WeatherUtilBlock.getPrecipitationHeightSafe(manager.getWorld(),new BlockPos((int)tryPos.xCoord,0,(int)tryPos.zCoord)).getY();
          EntityRotFX particle;
          if (WeatherUtil.isAprilFoolsDay()) {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0,ParticleRegistry.potato);
          }
 else {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0);
          }
          particle.setScale(100);
          particle.rotationYaw=rand.nextInt(360);
          particle.rotationPitch=rand.nextInt(360);
          listParticlesGround.add(particle);
        }
      }
    }
  }
  delay=1;
  loopSize=2;
  double spawnRad=size / 48;
  if (levelCurIntensityStage >= STATE_STAGE5) {
    spawnRad=200;
    loopSize=10;
    sizeMaxFunnelParticles=1200;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE4) {
    spawnRad=150;
    loopSize=8;
    sizeMaxFunnelParticles=1000;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE3) {
    spawnRad=100;
    loopSize=6;
    sizeMaxFunnelParticles=800;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE2) {
    spawnRad=50;
    loopSize=4;
    sizeMaxFunnelParticles=600;
  }
 else {
    sizeMaxFunnelParticles=600;
  }
  if (isTornadoFormingOrGreater() || (attrib_waterSpout)) {
    if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigStorm.Storm_ParticleSpawnDelay) == 0) {
      for (int i=0; i < loopSize; i++) {
        if (listParticlesFunnel.size() >= sizeMaxFunnelParticles) {
          listParticlesFunnel.get(0).setExpired();
          listParticlesFunnel.remove(0);
        }
        if (listParticlesFunnel.size() < sizeMaxFunnelParticles) {
          Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),pos.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
          if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
            EntityRotFX particle;
            if (WeatherUtil.isAprilFoolsDay()) {
              particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1,ParticleRegistry.potato);
            }
 else {
              particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1);
            }
            particle.setMaxAge(150 + ((levelCurIntensityStage - 1) * 100) + rand.nextInt(100));
            float baseBright=0.3F;
            float randFloat=(rand.nextFloat() * 0.6F);
            particle.rotationYaw=rand.nextInt(360);
            float finalBright=Math.min(1F,baseBright + randFloat);
            if (levelCurIntensityStage == STATE_HIGHWIND) {
              particle.setScale(150);
              particle.setRBGColorF(finalBright - 0.2F,finalBright - 0.2F,finalBright);
            }
 else {
              particle.setScale(250);
              particle.setRBGColorF(finalBright,finalBright,finalBright);
            }
            listParticlesFunnel.add(particle);
          }
        }
 else {
        }
      }
    }
  }
  for (int i=0; i < listParticlesFunnel.size(); i++) {
    EntityRotFX ent=listParticlesFunnel.get(i);
    if (!ent.isAlive()) {
      listParticlesFunnel.remove(ent);
    }
 else     if (ent.getPosY() > pos.yCoord) {
      ent.setExpired();
      listParticlesFunnel.remove(ent);
    }
 else {
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
      ent.rotationYaw+=ent.getEntityId() % 90;
      ent.rotationPitch=-30F;
      if (levelCurIntensityStage == STATE_HIGHWIND) {
        int fadingDistStart=30;
        if (ent.getPosY() > posGround.yCoord + fadingDistStart) {
          float maxVal=ent.getBlueColorF();
          float fadeRate=0.002F;
          ent.setRBGColorF(Math.min(maxVal,ent.getRedColorF() + fadeRate),Math.min(maxVal,ent.getGreenColorF() + fadeRate),maxVal);
        }
      }
      spinEntity(ent);
    }
  }
  for (int i=0; i < listParticlesCloud.size(); i++) {
    EntityRotFX ent=listParticlesCloud.get(i);
    if (!ent.isAlive()) {
      listParticlesCloud.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
      float dropDownRange=15F;
      float extraDropCalc=0;
      if (curDist < 200 && ent.getEntityId() % 20 < 5) {
        extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        if (isCycloneFormingOrGreater()) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange * 5F);
        }
      }
      if (isSpinning()) {
        double speed=spinSpeed + (rand.nextDouble() * 0.01D);
        double distt=size;
        double vecX=ent.getPosX() - pos.xCoord;
        double vecZ=ent.getPosZ() - pos.zCoord;
        float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
        angle+=speed * 50D;
        angle-=(ent.getEntityId() % 10) * 3D;
        angle+=rand.nextInt(10) - rand.nextInt(10);
        if (curDist > distt) {
          angle+=40;
        }
        if (ent.getEntityId() % 20 < 5) {
          if (levelCurIntensityStage >= STATE_FORMING) {
            if (stormType == TYPE_WATER) {
              angle+=40 + ((ent.getEntityId() % 5) * 4);
              if (curDist > 150 + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * 30)) {
                angle+=10;
              }
            }
 else {
              angle+=30 + ((ent.getEntityId() % 5) * 4);
            }
          }
 else {
            if (curDist > 150) {
              angle+=50 + ((ent.getEntityId() % 5) * 4);
            }
          }
          double var16=this.pos.xCoord - ent.getPosX();
          double var18=this.pos.zCoord - ent.getPosZ();
          ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
          ent.rotationPitch=-20F - (ent.getEntityId() % 10);
        }
        if (curSpeed < speed * 20D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
 else {
        float cloudMoveAmp=0.2F * (1 + layer);
        float speed=getAdjustedSpeed() * cloudMoveAmp;
        float angle=getAdjustedAngle();
        dropDownRange=5;
        if (ent.getEntityId() % 20 < 5) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        }
        if (curSpeed < speed * 1D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
      if (Math.abs(ent.getPosY() - (pos.yCoord - extraDropCalc)) > 2F) {
        if (ent.getPosY() < pos.yCoord - extraDropCalc) {
          ent.setMotionY(ent.getMotionY() + 0.1D);
        }
 else {
          ent.setMotionY(ent.getMotionY() + 0.1D);
        }
      }
      float dropDownSpeedMax=0.15F;
      if (isCycloneFormingOrGreater()) {
        dropDownSpeedMax=0.9F;
      }
      if (ent.getMotionY() < -dropDownSpeedMax) {
        ent.setMotionY(-dropDownSpeedMax);
      }
      if (ent.getMotionY() > dropDownSpeedMax) {
        ent.setMotionY(dropDownSpeedMax);
      }
    }
  }
  for (int i=0; i < listParticlesGround.size(); i++) {
    EntityRotFX ent=listParticlesGround.get(i);
    double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
    if (!ent.isAlive()) {
      listParticlesGround.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double speed=Math.max(0.2F,5F * spinSpeed) + (rand.nextDouble() * 0.01D);
      double distt=size;
      double vecX=ent.getPosX() - pos.xCoord;
      double vecZ=ent.getPosZ() - pos.zCoord;
      float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
      angle+=85;
      int maxParticleSize=60;
      if (stormType == TYPE_WATER) {
        maxParticleSize=150;
        speed/=5D;
      }
      ent.setScale((float)Math.min(maxParticleSize,curDist * 2F));
      if (curDist < 20) {
        ent.setExpired();
      }
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      if (curSpeed < speed * 20D) {
        ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
        ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
      }
    }
  }
}","@SideOnly(Side.CLIENT) public void tickClient(){
  if (isCloudlessStorm())   return;
  if (particleBehaviorFog == null) {
    particleBehaviorFog=new ParticleBehaviorFog(new Vec3(pos.xCoord,pos.yCoord,pos.zCoord));
  }
 else {
    if (!Minecraft.getMinecraft().isSingleplayer() || !(Minecraft.getMinecraft().currentScreen instanceof GuiIngameMenu)) {
      particleBehaviorFog.tickUpdateList();
    }
  }
  EntityPlayer entP=Minecraft.getMinecraft().thePlayer;
  spinSpeed=0.02D;
  double spinSpeedMax=0.4D;
  if (isCycloneFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.00D + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * spinSpeedMax * 0.2D);
  }
 else   if (isTornadoFormingOrGreater()) {
    spinSpeed=spinSpeedMax * 0.2D;
  }
 else   if (levelCurIntensityStage >= STATE_HIGHWIND) {
    spinSpeed=spinSpeedMax * 0.05D;
  }
 else {
    spinSpeed=spinSpeedMax * 0.02D;
  }
  if (isHurricane()) {
    spinSpeed+=0.1D;
  }
  if (size == 0)   size=1;
  int delay=Math.max(1,(int)(100F / size * 1F));
  int loopSize=1;
  int extraSpawning=0;
  if (isSpinning()) {
    loopSize+=4;
    extraSpawning=300;
  }
  if (stormType == TYPE_WATER) {
    if (levelCurIntensityStage >= STATE_STAGE5) {
      loopSize=10;
      extraSpawning=800;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE4) {
      loopSize=8;
      extraSpawning=700;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE3) {
      loopSize=6;
      extraSpawning=500;
    }
 else     if (levelCurIntensityStage >= STATE_STAGE2) {
      loopSize=4;
      extraSpawning=400;
    }
 else {
      extraSpawning=300;
    }
  }
  Random rand=new Random();
  Vec3 playerAdjPos=new Vec3(entP.posX,pos.yCoord,entP.posZ);
  double maxSpawnDistFromPlayer=512;
  if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigMisc.Cloud_ParticleSpawnDelay) == 0) {
    for (int i=0; i < loopSize; i++) {
      if (listParticlesCloud.size() < size + extraSpawning) {
        double spawnRad=size;
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),layers.get(layer),pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          EntityRotFX particle;
          if (WeatherUtil.isAprilFoolsDay()) {
            particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0,ParticleRegistry.chicken);
          }
 else {
            particle=spawnFogParticle(tryPos.xCoord,tryPos.yCoord,tryPos.zCoord,0);
          }
          listParticlesCloud.add(particle);
        }
      }
    }
  }
  if (levelCurIntensityStage >= STATE_HIGHWIND) {
    for (int i=0; i < (stormType == TYPE_WATER ? 50 : 3); i++) {
      if (listParticlesGround.size() < (stormType == TYPE_WATER ? 600 : 150)) {
        double spawnRad=size / 4 * 3;
        if (stormType == TYPE_WATER) {
          spawnRad=size * 3;
        }
        Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),posGround.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
        if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
          int groundY=WeatherUtilBlock.getPrecipitationHeightSafe(manager.getWorld(),new BlockPos((int)tryPos.xCoord,0,(int)tryPos.zCoord)).getY();
          EntityRotFX particle;
          if (WeatherUtil.isAprilFoolsDay()) {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0,ParticleRegistry.potato);
          }
 else {
            particle=spawnFogParticle(tryPos.xCoord,groundY + 3,tryPos.zCoord,0);
          }
          particle.setScale(100);
          particle.rotationYaw=rand.nextInt(360);
          particle.rotationPitch=rand.nextInt(360);
          listParticlesGround.add(particle);
        }
      }
    }
  }
  delay=1;
  loopSize=2;
  double spawnRad=size / 48;
  if (levelCurIntensityStage >= STATE_STAGE5) {
    spawnRad=200;
    loopSize=10;
    sizeMaxFunnelParticles=1200;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE4) {
    spawnRad=150;
    loopSize=8;
    sizeMaxFunnelParticles=1000;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE3) {
    spawnRad=100;
    loopSize=6;
    sizeMaxFunnelParticles=800;
  }
 else   if (levelCurIntensityStage >= STATE_STAGE2) {
    spawnRad=50;
    loopSize=4;
    sizeMaxFunnelParticles=600;
  }
 else {
    sizeMaxFunnelParticles=600;
  }
  if (isTornadoFormingOrGreater() || (attrib_waterSpout)) {
    if (this.manager.getWorld().getTotalWorldTime() % (delay + ConfigStorm.Storm_ParticleSpawnDelay) == 0) {
      for (int i=0; i < loopSize; i++) {
        if (listParticlesFunnel.size() >= sizeMaxFunnelParticles) {
          listParticlesFunnel.get(0).setExpired();
          listParticlesFunnel.remove(0);
        }
        if (listParticlesFunnel.size() < sizeMaxFunnelParticles) {
          Vec3 tryPos=new Vec3(pos.xCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad),pos.yCoord,pos.zCoord + (rand.nextDouble() * spawnRad) - (rand.nextDouble() * spawnRad));
          if (tryPos.distanceTo(playerAdjPos) < maxSpawnDistFromPlayer) {
            EntityRotFX particle;
            if (WeatherUtil.isAprilFoolsDay()) {
              particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1,ParticleRegistry.potato);
            }
 else {
              particle=spawnFogParticle(tryPos.xCoord,posBaseFormationPos.yCoord,tryPos.zCoord,1);
            }
            particle.setMaxAge(150 + ((levelCurIntensityStage - 1) * 100) + rand.nextInt(100));
            float baseBright=0.3F;
            float randFloat=(rand.nextFloat() * 0.6F);
            particle.rotationYaw=rand.nextInt(360);
            float finalBright=Math.min(1F,baseBright + randFloat);
            if (levelCurIntensityStage == STATE_HIGHWIND) {
              particle.setScale(150);
              particle.setRBGColorF(finalBright - 0.2F,finalBright - 0.2F,finalBright);
            }
 else {
              particle.setScale(250);
              particle.setRBGColorF(finalBright,finalBright,finalBright);
            }
            listParticlesFunnel.add(particle);
          }
        }
 else {
        }
      }
    }
  }
  for (int i=0; i < listParticlesFunnel.size(); i++) {
    EntityRotFX ent=listParticlesFunnel.get(i);
    if (!ent.isAlive()) {
      listParticlesFunnel.remove(ent);
    }
 else     if (ent.getPosY() > pos.yCoord) {
      ent.setExpired();
      listParticlesFunnel.remove(ent);
    }
 else {
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
      ent.rotationYaw+=ent.getEntityId() % 90;
      ent.rotationPitch=-30F;
      if (levelCurIntensityStage == STATE_HIGHWIND) {
        int fadingDistStart=30;
        if (ent.getPosY() > posGround.yCoord + fadingDistStart) {
          float maxVal=ent.getBlueColorF();
          float fadeRate=0.002F;
          ent.setRBGColorF(Math.min(maxVal,ent.getRedColorF() + fadeRate),Math.min(maxVal,ent.getGreenColorF() + fadeRate),maxVal);
        }
      }
      spinEntity(ent);
    }
  }
  for (int i=0; i < listParticlesCloud.size(); i++) {
    EntityRotFX ent=listParticlesCloud.get(i);
    if (!ent.isAlive()) {
      listParticlesCloud.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
      float dropDownRange=15F;
      float extraDropCalc=0;
      if (curDist < 200 && ent.getEntityId() % 20 < 5) {
        extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        if (isCycloneFormingOrGreater()) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange * 5F);
        }
      }
      if (isSpinning()) {
        double speed=spinSpeed + (rand.nextDouble() * 0.01D);
        double distt=size;
        double vecX=ent.getPosX() - pos.xCoord;
        double vecZ=ent.getPosZ() - pos.zCoord;
        float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
        angle+=speed * 50D;
        angle-=(ent.getEntityId() % 10) * 3D;
        angle+=rand.nextInt(10) - rand.nextInt(10);
        if (curDist > distt) {
          angle+=40;
        }
        if (ent.getEntityId() % 20 < 5) {
          if (levelCurIntensityStage >= STATE_FORMING) {
            if (stormType == TYPE_WATER) {
              angle+=40 + ((ent.getEntityId() % 5) * 4);
              if (curDist > 150 + ((levelCurIntensityStage - levelStormIntensityFormingStartVal + 1) * 30)) {
                angle+=10;
              }
            }
 else {
              angle+=30 + ((ent.getEntityId() % 5) * 4);
            }
          }
 else {
            if (curDist > 150) {
              angle+=50 + ((ent.getEntityId() % 5) * 4);
            }
          }
          double var16=this.pos.xCoord - ent.getPosX();
          double var18=this.pos.zCoord - ent.getPosZ();
          ent.rotationYaw=(float)(Math.atan2(var18,var16) * 180.0D / Math.PI) - 90.0F;
          ent.rotationPitch=-20F - (ent.getEntityId() % 10);
        }
        if (curSpeed < speed * 20D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
 else {
        float cloudMoveAmp=0.2F * (1 + layer);
        float speed=getAdjustedSpeed() * cloudMoveAmp;
        float angle=getAdjustedAngle();
        dropDownRange=5;
        if (ent.getEntityId() % 20 < 5) {
          extraDropCalc=((ent.getEntityId() % 20) * dropDownRange);
        }
        if (curSpeed < speed * 1D) {
          ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
          ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
        }
      }
      if (Math.abs(ent.getPosY() - (pos.yCoord - extraDropCalc)) > 2F) {
        if (ent.getPosY() < pos.yCoord - extraDropCalc) {
          ent.setMotionY(ent.getMotionY() + 0.1D);
        }
 else {
          ent.setMotionY(ent.getMotionY() - 0.1D);
        }
      }
      float dropDownSpeedMax=0.15F;
      if (isCycloneFormingOrGreater()) {
        dropDownSpeedMax=0.9F;
      }
      if (ent.getMotionY() < -dropDownSpeedMax) {
        ent.setMotionY(-dropDownSpeedMax);
      }
      if (ent.getMotionY() > dropDownSpeedMax) {
        ent.setMotionY(dropDownSpeedMax);
      }
    }
  }
  for (int i=0; i < listParticlesGround.size(); i++) {
    EntityRotFX ent=listParticlesGround.get(i);
    double curDist=ent.getDistance(pos.xCoord,ent.getPosY(),pos.zCoord);
    if (!ent.isAlive()) {
      listParticlesGround.remove(ent);
    }
 else {
      double curSpeed=Math.sqrt(ent.getMotionX() * ent.getMotionX() + ent.getMotionY() * ent.getMotionY() + ent.getMotionZ() * ent.getMotionZ());
      double speed=Math.max(0.2F,5F * spinSpeed) + (rand.nextDouble() * 0.01D);
      double distt=size;
      double vecX=ent.getPosX() - pos.xCoord;
      double vecZ=ent.getPosZ() - pos.zCoord;
      float angle=(float)(Math.atan2(vecZ,vecX) * 180.0D / Math.PI);
      angle+=85;
      int maxParticleSize=60;
      if (stormType == TYPE_WATER) {
        maxParticleSize=150;
        speed/=5D;
      }
      ent.setScale((float)Math.min(maxParticleSize,curDist * 2F));
      if (curDist < 20) {
        ent.setExpired();
      }
      double var16=this.pos.xCoord - ent.getPosX();
      double var18=this.pos.zCoord - ent.getPosZ();
      if (curSpeed < speed * 20D) {
        ent.setMotionX(ent.getMotionX() + -Math.sin(Math.toRadians(angle)) * speed);
        ent.setMotionZ(ent.getMotionZ() + Math.cos(Math.toRadians(angle)) * speed);
      }
    }
  }
}",0.9999159169259229
81898,"public void readFromFile(){
  NBTTagCompound rtsNBT=new NBTTagCompound();
  String saveFolder=CoroUtilFile.getWorldSaveFolderPath() + CoroUtilFile.getWorldFolderName() + ""String_Node_Str""+ File.separator;
  boolean readFail=false;
  try {
    if ((new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str"")).exists()) {
      rtsNBT=CompressedStreamTools.readCompressed(new FileInputStream(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str""));
    }
 else {
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    readFail=true;
  }
  if (!readFail) {
    try {
      File tmp=(new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str""));
      if (tmp.exists())       FileUtils.copyFile(tmp,(new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str"")));
      if ((new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str"").exists()))       FileUtils.copyFile((new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str"")),(new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str"")));
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    try {
      if ((new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str"")).exists()) {
        rtsNBT=CompressedStreamTools.readCompressed(new FileInputStream(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str""));
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      System.out.println(""String_Node_Str"");
    }
  }
  lastStormFormed=rtsNBT.getLong(""String_Node_Str"");
  lastSandstormFormed=rtsNBT.getLong(""String_Node_Str"");
  VolcanoObject.lastUsedID=rtsNBT.getLong(""String_Node_Str"");
  StormObject.lastUsedStormID=rtsNBT.getLong(""String_Node_Str"");
  windMan.readFromNBT(rtsNBT.getCompoundTag(""String_Node_Str""));
  NBTTagCompound nbtVolcanoes=rtsNBT.getCompoundTag(""String_Node_Str"");
  Iterator it=nbtVolcanoes.getKeySet().iterator();
  while (it.hasNext()) {
    String tagName=(String)it.next();
    NBTTagCompound teamData=nbtVolcanoes.getCompoundTag(tagName);
    VolcanoObject to=new VolcanoObject(ServerTickHandler.lookupDimToWeatherMan.get(0));
    try {
      to.readFromNBT(teamData);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    addVolcanoObject(to);
    ((WeatherManagerServer)(this)).syncVolcanoNew(to);
    to.initPost();
  }
  NBTTagCompound nbtStorms=rtsNBT.getCompoundTag(""String_Node_Str"");
  it=nbtStorms.getKeySet().iterator();
  while (it.hasNext()) {
    String tagName=(String)it.next();
    NBTTagCompound data=nbtStorms.getCompoundTag(tagName);
    if (ServerTickHandler.lookupDimToWeatherMan.get(dim) != null) {
      WeatherObject wo=null;
      if (data.getInteger(""String_Node_Str"") == EnumStormType.CLOUD.ordinal()) {
        wo=new StormObject(this);
      }
 else       if (data.getInteger(""String_Node_Str"") == EnumStormType.SAND.ordinal()) {
        wo=new WeatherObjectSandstorm(this);
      }
      try {
        wo.readFromNBT(data);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      addStormObject(wo);
      ((WeatherManagerServer)(this)).syncStormNew(wo);
    }
 else {
      System.out.println(""String_Node_Str"" + dim);
    }
  }
}","public void readFromFile(){
  NBTTagCompound rtsNBT=new NBTTagCompound();
  String saveFolder=CoroUtilFile.getWorldSaveFolderPath() + CoroUtilFile.getWorldFolderName() + ""String_Node_Str""+ File.separator;
  boolean readFail=false;
  try {
    if ((new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str"")).exists()) {
      rtsNBT=CompressedStreamTools.readCompressed(new FileInputStream(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str""));
    }
 else {
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    readFail=true;
  }
  if (!readFail) {
    try {
      File tmp=(new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str""));
      if (tmp.exists())       FileUtils.copyFile(tmp,(new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str"")));
      if ((new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str"").exists()))       FileUtils.copyFile((new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str"")),(new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str"")));
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    try {
      if ((new File(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str"")).exists()) {
        rtsNBT=CompressedStreamTools.readCompressed(new FileInputStream(saveFolder + ""String_Node_Str"" + dim+ ""String_Node_Str""));
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      System.out.println(""String_Node_Str"");
    }
  }
  lastStormFormed=rtsNBT.getLong(""String_Node_Str"");
  lastSandstormFormed=rtsNBT.getLong(""String_Node_Str"");
  VolcanoObject.lastUsedID=rtsNBT.getLong(""String_Node_Str"");
  StormObject.lastUsedStormID=rtsNBT.getLong(""String_Node_Str"");
  windMan.readFromNBT(rtsNBT.getCompoundTag(""String_Node_Str""));
  NBTTagCompound nbtVolcanoes=rtsNBT.getCompoundTag(""String_Node_Str"");
  Iterator it=nbtVolcanoes.getKeySet().iterator();
  while (it.hasNext()) {
    String tagName=(String)it.next();
    NBTTagCompound teamData=nbtVolcanoes.getCompoundTag(tagName);
    VolcanoObject to=new VolcanoObject(ServerTickHandler.lookupDimToWeatherMan.get(0));
    try {
      to.readFromNBT(teamData);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    addVolcanoObject(to);
    ((WeatherManagerServer)(this)).syncVolcanoNew(to);
    to.initPost();
  }
  NBTTagCompound nbtStorms=rtsNBT.getCompoundTag(""String_Node_Str"");
  it=nbtStorms.getKeySet().iterator();
  while (it.hasNext()) {
    String tagName=(String)it.next();
    NBTTagCompound data=nbtStorms.getCompoundTag(tagName);
    if (ServerTickHandler.lookupDimToWeatherMan.get(dim) != null) {
      WeatherObject wo=null;
      if (data.getInteger(""String_Node_Str"") == EnumWeatherObjectType.CLOUD.ordinal()) {
        wo=new StormObject(this);
      }
 else       if (data.getInteger(""String_Node_Str"") == EnumWeatherObjectType.SAND.ordinal()) {
        wo=new WeatherObjectSandstorm(this);
      }
      try {
        wo.readFromNBT(data);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      addStormObject(wo);
      ((WeatherManagerServer)(this)).syncStormNew(wo);
    }
 else {
      System.out.println(""String_Node_Str"" + dim);
    }
  }
}",0.9359903381642511
81899,"public void nbtSyncFromServer(NBTTagCompound parNBT){
  String command=parNBT.getString(""String_Node_Str"");
  if (command.equals(""String_Node_Str"")) {
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    EnumStormType stormType=EnumStormType.get(stormNBT.getInteger(""String_Node_Str""));
    WeatherObject wo=null;
    if (stormType == EnumStormType.CLOUD) {
      wo=new StormObject(ClientTickHandler.weatherManager);
    }
 else     if (stormType == EnumStormType.SAND) {
      wo=new WeatherObjectSandstorm(ClientTickHandler.weatherManager);
    }
    wo.nbtSyncFromServer(stormNBT);
    addStormObject(wo);
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    WeatherObject so=lookupStormObjectsByID.get(ID);
    if (so != null) {
      removeStormObject(ID);
    }
 else {
      Weather.dbg(""String_Node_Str"" + ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    WeatherObject so=lookupStormObjectsByID.get(ID);
    if (so != null) {
      so.nbtSyncFromServer(stormNBT);
    }
 else {
      Weather.dbg(""String_Node_Str"" + ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    Weather.dbg(""String_Node_Str"");
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    VolcanoObject so=new VolcanoObject(ClientTickHandler.weatherManager);
    so.nbtSyncFromServer(stormNBT);
    addVolcanoObject(so);
  }
 else   if (command.equals(""String_Node_Str"")) {
    Weather.dbg(""String_Node_Str"");
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    VolcanoObject so=lookupVolcanoes.get(ID);
    if (so != null) {
      removeVolcanoObject(ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    Weather.dbg(""String_Node_Str"");
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    VolcanoObject so=lookupVolcanoes.get(ID);
    if (so != null) {
      so.nbtSyncFromServer(stormNBT);
    }
 else {
      Weather.dbg(""String_Node_Str"" + ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound nbt=parNBT.getCompoundTag(""String_Node_Str"");
    windMan.nbtSyncFromServer(nbt);
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound nbt=parNBT.getCompoundTag(""String_Node_Str"");
    int posXS=nbt.getInteger(""String_Node_Str"");
    int posYS=nbt.getInteger(""String_Node_Str"");
    int posZS=nbt.getInteger(""String_Node_Str"");
    boolean custom=nbt.getBoolean(""String_Node_Str"");
    double posX=(double)posXS;
    double posY=(double)posYS;
    double posZ=(double)posZS;
    Entity ent=null;
    if (!custom) {
      ent=new EntityLightningBolt(getWorld(),posX,posY,posZ);
    }
 else {
      ent=new EntityLightningBoltCustom(getWorld(),posX,posY,posZ);
    }
    ent.serverPosX=posXS;
    ent.serverPosY=posYS;
    ent.serverPosZ=posZS;
    ent.rotationYaw=0.0F;
    ent.rotationPitch=0.0F;
    ent.setEntityId(nbt.getInteger(""String_Node_Str""));
    getWorld().addWeatherEffect(ent);
  }
 else   if (command.equals(""String_Node_Str"")) {
    isVanillaRainActiveOnServer=parNBT.getBoolean(""String_Node_Str"");
  }
}","public void nbtSyncFromServer(NBTTagCompound parNBT){
  String command=parNBT.getString(""String_Node_Str"");
  if (command.equals(""String_Node_Str"")) {
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    EnumWeatherObjectType weatherObjectType=EnumWeatherObjectType.get(stormNBT.getInteger(""String_Node_Str""));
    WeatherObject wo=null;
    if (weatherObjectType == EnumWeatherObjectType.CLOUD) {
      wo=new StormObject(ClientTickHandler.weatherManager);
    }
 else     if (weatherObjectType == EnumWeatherObjectType.SAND) {
      wo=new WeatherObjectSandstorm(ClientTickHandler.weatherManager);
    }
    wo.nbtSyncFromServer(stormNBT);
    addStormObject(wo);
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    WeatherObject so=lookupStormObjectsByID.get(ID);
    if (so != null) {
      removeStormObject(ID);
    }
 else {
      Weather.dbg(""String_Node_Str"" + ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    WeatherObject so=lookupStormObjectsByID.get(ID);
    if (so != null) {
      so.nbtSyncFromServer(stormNBT);
    }
 else {
      Weather.dbg(""String_Node_Str"" + ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    Weather.dbg(""String_Node_Str"");
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    VolcanoObject so=new VolcanoObject(ClientTickHandler.weatherManager);
    so.nbtSyncFromServer(stormNBT);
    addVolcanoObject(so);
  }
 else   if (command.equals(""String_Node_Str"")) {
    Weather.dbg(""String_Node_Str"");
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    VolcanoObject so=lookupVolcanoes.get(ID);
    if (so != null) {
      removeVolcanoObject(ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    Weather.dbg(""String_Node_Str"");
    NBTTagCompound stormNBT=parNBT.getCompoundTag(""String_Node_Str"");
    long ID=stormNBT.getLong(""String_Node_Str"");
    VolcanoObject so=lookupVolcanoes.get(ID);
    if (so != null) {
      so.nbtSyncFromServer(stormNBT);
    }
 else {
      Weather.dbg(""String_Node_Str"" + ID);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound nbt=parNBT.getCompoundTag(""String_Node_Str"");
    windMan.nbtSyncFromServer(nbt);
  }
 else   if (command.equals(""String_Node_Str"")) {
    NBTTagCompound nbt=parNBT.getCompoundTag(""String_Node_Str"");
    int posXS=nbt.getInteger(""String_Node_Str"");
    int posYS=nbt.getInteger(""String_Node_Str"");
    int posZS=nbt.getInteger(""String_Node_Str"");
    boolean custom=nbt.getBoolean(""String_Node_Str"");
    double posX=(double)posXS;
    double posY=(double)posYS;
    double posZ=(double)posZS;
    Entity ent=null;
    if (!custom) {
      ent=new EntityLightningBolt(getWorld(),posX,posY,posZ);
    }
 else {
      ent=new EntityLightningBoltCustom(getWorld(),posX,posY,posZ);
    }
    ent.serverPosX=posXS;
    ent.serverPosY=posYS;
    ent.serverPosZ=posZS;
    ent.rotationYaw=0.0F;
    ent.rotationPitch=0.0F;
    ent.setEntityId(nbt.getInteger(""String_Node_Str""));
    getWorld().addWeatherEffect(ent);
  }
 else   if (command.equals(""String_Node_Str"")) {
    isVanillaRainActiveOnServer=parNBT.getBoolean(""String_Node_Str"");
  }
}",0.981691368788143
81900,"public void nbtSyncFromServer(NBTTagCompound parNBT){
  ID=parNBT.getLong(""String_Node_Str"");
  pos=new Vec3(parNBT.getDouble(""String_Node_Str""),parNBT.getDouble(""String_Node_Str""),parNBT.getDouble(""String_Node_Str""));
  size=parNBT.getInteger(""String_Node_Str"");
  maxSize=parNBT.getInteger(""String_Node_Str"");
  this.stormType=EnumStormType.get(parNBT.getInteger(""String_Node_Str""));
}","public void nbtSyncFromServer(NBTTagCompound parNBT){
  ID=parNBT.getLong(""String_Node_Str"");
  pos=new Vec3(parNBT.getDouble(""String_Node_Str""),parNBT.getDouble(""String_Node_Str""),parNBT.getDouble(""String_Node_Str""));
  size=parNBT.getInteger(""String_Node_Str"");
  maxSize=parNBT.getInteger(""String_Node_Str"");
  this.weatherObjectType=EnumWeatherObjectType.get(parNBT.getInteger(""String_Node_Str""));
}",0.9544303797468354
81901,"public NBTTagCompound nbtSyncForClient(NBTTagCompound nbt){
  nbt.setDouble(""String_Node_Str"",pos.xCoord);
  nbt.setDouble(""String_Node_Str"",pos.yCoord);
  nbt.setDouble(""String_Node_Str"",pos.zCoord);
  nbt.setLong(""String_Node_Str"",ID);
  nbt.setInteger(""String_Node_Str"",size);
  nbt.setInteger(""String_Node_Str"",maxSize);
  nbt.setInteger(""String_Node_Str"",this.stormType.ordinal());
  return nbt;
}","public NBTTagCompound nbtSyncForClient(NBTTagCompound nbt){
  nbt.setDouble(""String_Node_Str"",pos.xCoord);
  nbt.setDouble(""String_Node_Str"",pos.yCoord);
  nbt.setDouble(""String_Node_Str"",pos.zCoord);
  nbt.setLong(""String_Node_Str"",ID);
  nbt.setInteger(""String_Node_Str"",size);
  nbt.setInteger(""String_Node_Str"",maxSize);
  nbt.setInteger(""String_Node_Str"",this.weatherObjectType.ordinal());
  return nbt;
}",0.9778325123152708
81902,"public WeatherObjectSandstorm(WeatherManagerBase parManager){
  super(parManager);
  this.stormType=EnumStormType.SAND;
  if (parManager.getWorld().isRemote) {
    listParticlesCloud=new ArrayList<EntityRotFX>();
  }
}","public WeatherObjectSandstorm(WeatherManagerBase parManager){
  super(parManager);
  this.weatherObjectType=EnumWeatherObjectType.SAND;
  if (parManager.getWorld().isRemote) {
    listParticlesCloud=new ArrayList<EntityRotFX>();
  }
}",0.9203539823008848
81903,"public static void onTickInGame(){
  if (FMLCommonHandler.instance() == null || FMLCommonHandler.instance().getMinecraftServerInstance() == null) {
    return;
  }
  World world=FMLCommonHandler.instance().getMinecraftServerInstance().worldServerForDimension(0);
  if (world != null && lastWorld != world) {
    lastWorld=world;
  }
  if (world != null) {
    if (world.getTotalWorldTime() % ConfigMisc.Misc_AutoDataSaveIntervalInTicks == 0) {
      Weather.writeOutData(false);
    }
  }
  World worlds[]=DimensionManager.getWorlds();
  for (int i=0; i < worlds.length; i++) {
    if (!lookupDimToWeatherMan.containsKey(worlds[i].provider.getDimension())) {
      if (WeatherUtilConfig.listDimensionsWeather.contains(worlds[i].provider.getDimension())) {
        addWorldToWeather(worlds[i].provider.getDimension());
      }
    }
    WeatherManagerServer wms=lookupDimToWeatherMan.get(worlds[i].provider.getDimension());
    if (wms != null) {
      lookupDimToWeatherMan.get(worlds[i].provider.getDimension()).tick();
    }
  }
  boolean testRainRequest=false;
  if (testRainRequest) {
    List<IMCMessage> listMsgs=new ArrayList<IMCMessage>();
    listMsgs=FMLInterModComms.fetchRuntimeMessages(Weather.modID);
    for (int i=0; i < listMsgs.size(); i++) {
      if (listMsgs.get(i).key.equals(""String_Node_Str"")) {
        NBTTagCompound nbt=listMsgs.get(i).getNBTValue();
        String replyMod=nbt.getString(""String_Node_Str"");
        nbt.setBoolean(""String_Node_Str"",true);
        FMLInterModComms.sendRuntimeMessage(replyMod,replyMod,""String_Node_Str"",nbt);
      }
    }
  }
  boolean debugIMC=false;
  if (debugIMC) {
    try {
      List<IMCMessage> listMsgs=new ArrayList<IMCMessage>();
      listMsgs=FMLInterModComms.fetchRuntimeMessages(Weather.modID);
      for (int i=0; i < listMsgs.size(); i++) {
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  boolean testCustomLightning=false;
  if (testCustomLightning) {
    if (world.getTotalWorldTime() % 20 == 0) {
      EntityPlayer player=world.getClosestPlayer(0,0,0,-1,false);
      if (player != null) {
        EntityLightningBoltCustom lightning=new EntityLightningBoltCustom(world,player.posX,player.posY,player.posZ);
        world.addWeatherEffect(lightning);
        lookupDimToWeatherMan.get(0).syncLightningNew(lightning,true);
      }
    }
  }
  boolean derp=true;
  if (derp) {
    if (world.getTotalWorldTime() % 2 == 0) {
      EntityPlayer player=world.getClosestPlayer(0,0,0,-1,false);
      if (player != null) {
        ItemStack is=player.getItemStackFromSlot(EntityEquipmentSlot.MAINHAND);
        if (is != null && is.getItem() instanceof ItemSpade) {
          int y=world.getHeight(new BlockPos(player.posX,0,player.posZ)).getY();
          System.out.println(""String_Node_Str"" + y);
          WeatherUtilBlock.fillAgainstWallSmoothly(player.worldObj,new Vec3(player.posX,y + 0.5D,player.posZ),player.rotationYawHead,15,2,CommonProxy.blockSandLayer);
        }
      }
    }
  }
}","public static void onTickInGame(){
  if (FMLCommonHandler.instance() == null || FMLCommonHandler.instance().getMinecraftServerInstance() == null) {
    return;
  }
  World world=FMLCommonHandler.instance().getMinecraftServerInstance().worldServerForDimension(0);
  if (world != null && lastWorld != world) {
    lastWorld=world;
  }
  if (world != null) {
    if (world.getTotalWorldTime() % ConfigMisc.Misc_AutoDataSaveIntervalInTicks == 0) {
      Weather.writeOutData(false);
    }
  }
  World worlds[]=DimensionManager.getWorlds();
  for (int i=0; i < worlds.length; i++) {
    if (!lookupDimToWeatherMan.containsKey(worlds[i].provider.getDimension())) {
      if (WeatherUtilConfig.listDimensionsWeather.contains(worlds[i].provider.getDimension())) {
        addWorldToWeather(worlds[i].provider.getDimension());
      }
    }
    WeatherManagerServer wms=lookupDimToWeatherMan.get(worlds[i].provider.getDimension());
    if (wms != null) {
      lookupDimToWeatherMan.get(worlds[i].provider.getDimension()).tick();
    }
  }
  boolean testRainRequest=false;
  if (testRainRequest) {
    List<IMCMessage> listMsgs=new ArrayList<IMCMessage>();
    listMsgs=FMLInterModComms.fetchRuntimeMessages(Weather.modID);
    for (int i=0; i < listMsgs.size(); i++) {
      if (listMsgs.get(i).key.equals(""String_Node_Str"")) {
        NBTTagCompound nbt=listMsgs.get(i).getNBTValue();
        String replyMod=nbt.getString(""String_Node_Str"");
        nbt.setBoolean(""String_Node_Str"",true);
        FMLInterModComms.sendRuntimeMessage(replyMod,replyMod,""String_Node_Str"",nbt);
      }
    }
  }
  boolean debugIMC=false;
  if (debugIMC) {
    try {
      List<IMCMessage> listMsgs=new ArrayList<IMCMessage>();
      listMsgs=FMLInterModComms.fetchRuntimeMessages(Weather.modID);
      for (int i=0; i < listMsgs.size(); i++) {
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  boolean testCustomLightning=false;
  if (testCustomLightning) {
    if (world.getTotalWorldTime() % 20 == 0) {
      EntityPlayer player=world.getClosestPlayer(0,0,0,-1,false);
      if (player != null) {
        EntityLightningBoltCustom lightning=new EntityLightningBoltCustom(world,player.posX,player.posY,player.posZ);
        world.addWeatherEffect(lightning);
        lookupDimToWeatherMan.get(0).syncLightningNew(lightning,true);
      }
    }
  }
  boolean derp=false;
  if (derp) {
    if (world.getTotalWorldTime() % 2 == 0) {
      EntityPlayer player=world.getClosestPlayer(0,0,0,-1,false);
      if (player != null) {
        ItemStack is=player.getItemStackFromSlot(EntityEquipmentSlot.MAINHAND);
        if (is != null && is.getItem() instanceof ItemSpade) {
          int y=world.getHeight(new BlockPos(player.posX,0,player.posZ)).getY();
          System.out.println(""String_Node_Str"" + y);
          WeatherUtilBlock.fillAgainstWallSmoothly(player.worldObj,new Vec3(player.posX,y + 0.5D,player.posZ),player.rotationYawHead,15,2,CommonProxy.blockSandLayer);
        }
      }
    }
  }
}",0.9988354683081018
81904,"@SideOnly(Side.CLIENT) public void tickClient(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  if (this.lastPlayTime < System.currentTimeMillis()) {
    Vec3 pos=new Vec3(getPos().getX(),getPos().getY(),getPos().getZ());
    StormObject so=ClientTickHandler.weatherManager.getClosestStorm(pos,ConfigMisc.sirenActivateDistance,StormObject.STATE_FORMING);
    if (so != null) {
      this.lastPlayTime=System.currentTimeMillis() + 13000L;
      WeatherUtilSound.playNonMovingSound(pos,""String_Node_Str"",1.0F,1.0F,120);
    }
 else {
      WeatherObjectSandstorm sandstorm=ClientTickHandler.weatherManager.getClosestSandstormByIntensity(pos);
      if (sandstorm != null) {
        List<Vec3> points=sandstorm.getSandstormAsShape();
        float distMax=75F;
        boolean inStorm=CoroUtilPhysics.isInConvexShape(pos,points);
        double dist=Math.min(distMax,CoroUtilPhysics.getDistanceToShape(pos,points));
        if (inStorm || dist < distMax) {
          String soundToPlay=""String_Node_Str"";
          if (getWorld().rand.nextBoolean()) {
            soundToPlay=""String_Node_Str"";
          }
          float distScale=Math.max(0.1F,1F - (float)((dist) / distMax));
          if (inStorm)           distScale=1F;
          this.lastPlayTime=System.currentTimeMillis() + 15000L;
          WeatherUtilSound.playNonMovingSound(pos,""String_Node_Str"" + soundToPlay,1F,distScale,distMax);
        }
      }
    }
  }
}","@SideOnly(Side.CLIENT) public void tickClient(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  if (this.lastPlayTime < System.currentTimeMillis()) {
    Vec3 pos=new Vec3(getPos().getX(),getPos().getY(),getPos().getZ());
    StormObject so=ClientTickHandler.weatherManager.getClosestStorm(pos,ConfigMisc.sirenActivateDistance,StormObject.STATE_FORMING);
    if (so != null) {
      this.lastPlayTime=System.currentTimeMillis() + 13000L;
      WeatherUtilSound.playNonMovingSound(pos,""String_Node_Str"",1.0F,1.0F,120);
    }
 else {
      if (!ConfigSand.Sandstorm_Siren_PleaseNoDarude) {
        WeatherObjectSandstorm sandstorm=ClientTickHandler.weatherManager.getClosestSandstormByIntensity(pos);
        if (sandstorm != null) {
          List<Vec3> points=sandstorm.getSandstormAsShape();
          float distMax=75F;
          boolean inStorm=CoroUtilPhysics.isInConvexShape(pos,points);
          double dist=Math.min(distMax,CoroUtilPhysics.getDistanceToShape(pos,points));
          if (inStorm || dist < distMax) {
            String soundToPlay=""String_Node_Str"";
            if (getWorld().rand.nextBoolean()) {
              soundToPlay=""String_Node_Str"";
            }
            float distScale=Math.max(0.1F,1F - (float)((dist) / distMax));
            if (inStorm)             distScale=1F;
            this.lastPlayTime=System.currentTimeMillis() + 15000L;
            WeatherUtilSound.playNonMovingSound(pos,""String_Node_Str"" + soundToPlay,1F,distScale,distMax);
          }
        }
      }
    }
  }
}",0.9663072776280324
81905,"@Override public void readFromNBT(NBTTagCompound var1){
  super.readFromNBT(var1);
  weatherType=var1.getInteger(""String_Node_Str"");
}","@Override public void readFromNBT(NBTTagCompound var1){
  super.readFromNBT(var1);
  weatherType=var1.getInteger(""String_Node_Str"");
  if (var1.hasKey(""String_Node_Str"")) {
    lastTickStormObjectID=var1.getLong(""String_Node_Str"");
  }
}",0.7223719676549866
81906,"@Override public void update(){
  if (!worldObj.isRemote) {
    weatherSize=100;
    if (worldObj.getTotalWorldTime() % 40 == 0) {
      if (lastTickStormObject != null && lastTickStormObject.isDead) {
        lastTickStormObject=null;
      }
      if (lastTickStormObject == null) {
        WeatherManagerServer manager=ServerTickHandler.lookupDimToWeatherMan.get(worldObj.provider.getDimension());
        if (manager != null) {
          StormObject so=new StormObject(manager);
          so.initFirstTime();
          so.pos=new Vec3(getPos().getX(),StormObject.layers.get(0),getPos().getZ());
          so.layer=0;
          so.userSpawnedFor=""String_Node_Str"" + getPos().getX() + getPos().getY()+ getPos().getZ();
          so.naturallySpawned=false;
          manager.addStormObject(so);
          manager.syncStormNew(so);
          lastTickStormObject=so;
        }
      }
    }
    if (lastTickStormObject != null && !lastTickStormObject.isDead) {
      Random rand=new Random();
      if (lockStormHere) {
        lastTickStormObject.pos=new Vec3(getPos().getX(),StormObject.layers.get(0),getPos().getZ());
      }
      lastTickStormObject.size=weatherSize;
      lastTickStormObject.levelWater=1000;
      lastTickStormObject.attrib_precipitation=true;
      lastTickStormObject.hasStormPeaked=false;
      lastTickStormObject.levelCurStagesIntensity=0.9F;
      lastTickStormObject.levelCurIntensityStage=StormObject.STATE_NORMAL;
      lastTickStormObject.stormType=StormObject.TYPE_LAND;
      lastTickStormObject.levelTemperature=40;
      if (weatherType == 0) {
        lastTickStormObject.levelTemperature=-40;
      }
 else       if (weatherType == 1) {
      }
 else       if (weatherType == 2) {
        lastTickStormObject.stormType=StormObject.TYPE_LAND;
        lastTickStormObject.levelCurIntensityStage=StormObject.STATE_THUNDER;
      }
 else       if (weatherType == 3) {
        lastTickStormObject.stormType=StormObject.TYPE_LAND;
        lastTickStormObject.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
      }
 else       if (weatherType == 4) {
        lastTickStormObject.stormType=StormObject.TYPE_LAND;
        lastTickStormObject.levelCurIntensityStage=StormObject.STATE_HAIL;
      }
 else       if (weatherType == 5) {
        lastTickStormObject.stormType=StormObject.TYPE_LAND;
        lastTickStormObject.levelCurIntensityStage=StormObject.STATE_STAGE1;
      }
 else       if (weatherType == 6) {
        lastTickStormObject.stormType=StormObject.TYPE_WATER;
        lastTickStormObject.levelCurIntensityStage=StormObject.STATE_STAGE1;
      }
    }
  }
}","@Override public void update(){
  if (!worldObj.isRemote) {
    weatherSize=100;
    if (worldObj.getTotalWorldTime() % 40 == 0) {
      if (lastTickStormObject != null && lastTickStormObject.isDead) {
        lastTickStormObject=null;
      }
      if (lastTickStormObject == null && lastTickStormObjectID != -1) {
        WeatherManagerServer manager=ServerTickHandler.lookupDimToWeatherMan.get(worldObj.provider.getDimension());
        if (manager != null) {
          StormObject obj=manager.getStormObjectByID(lastTickStormObjectID);
          if (obj != null) {
            lastTickStormObject=obj;
            Weather.dbg(""String_Node_Str"" + obj.ID + ""String_Node_Str"");
          }
        }
      }
      if (lastTickStormObject == null) {
        WeatherManagerServer manager=ServerTickHandler.lookupDimToWeatherMan.get(worldObj.provider.getDimension());
        if (manager != null) {
          StormObject so=new StormObject(manager);
          so.initFirstTime();
          so.pos=new Vec3(getPos().getX(),StormObject.layers.get(0),getPos().getZ());
          so.layer=0;
          so.userSpawnedFor=""String_Node_Str"" + getPos().getX() + getPos().getY()+ getPos().getZ();
          so.naturallySpawned=false;
          manager.addStormObject(so);
          manager.syncStormNew(so);
          lastTickStormObject=so;
          lastTickStormObjectID=so.ID;
        }
      }
    }
    if (lastTickStormObject != null && !lastTickStormObject.isDead) {
      Random rand=new Random();
      if (lockStormHere) {
        lastTickStormObject.pos=new Vec3(getPos().getX(),StormObject.layers.get(0),getPos().getZ());
      }
      lastTickStormObject.size=weatherSize;
      lastTickStormObject.levelWater=1000;
      lastTickStormObject.attrib_precipitation=true;
      lastTickStormObject.hasStormPeaked=false;
      lastTickStormObject.levelCurStagesIntensity=0.9F;
      lastTickStormObject.levelCurIntensityStage=StormObject.STATE_NORMAL;
      lastTickStormObject.stormType=StormObject.TYPE_LAND;
      lastTickStormObject.levelTemperature=40;
      if (weatherType == 0) {
        lastTickStormObject.levelTemperature=-40;
      }
 else       if (weatherType == 1) {
      }
 else       if (weatherType == 2) {
        lastTickStormObject.stormType=StormObject.TYPE_LAND;
        lastTickStormObject.levelCurIntensityStage=StormObject.STATE_THUNDER;
      }
 else       if (weatherType == 3) {
        lastTickStormObject.stormType=StormObject.TYPE_LAND;
        lastTickStormObject.levelCurIntensityStage=StormObject.STATE_HIGHWIND;
      }
 else       if (weatherType == 4) {
        lastTickStormObject.stormType=StormObject.TYPE_LAND;
        lastTickStormObject.levelCurIntensityStage=StormObject.STATE_HAIL;
      }
 else       if (weatherType == 5) {
        lastTickStormObject.stormType=StormObject.TYPE_LAND;
        lastTickStormObject.levelCurIntensityStage=StormObject.STATE_STAGE1;
      }
 else       if (weatherType == 6) {
        lastTickStormObject.stormType=StormObject.TYPE_WATER;
        lastTickStormObject.levelCurIntensityStage=StormObject.STATE_STAGE1;
      }
    }
  }
}",0.911888111888112
81907,"@Override public NBTTagCompound writeToNBT(NBTTagCompound var1){
  var1.setInteger(""String_Node_Str"",weatherType);
  return super.writeToNBT(var1);
}","@Override public NBTTagCompound writeToNBT(NBTTagCompound var1){
  var1.setInteger(""String_Node_Str"",weatherType);
  var1.setLong(""String_Node_Str"",lastTickStormObjectID);
  return super.writeToNBT(var1);
}",0.8394366197183099
81908,"/** 
 * Manages transitioning fog densities and color from current vanilla settings to our desired settings, and vice versa
 */
public static void tickSandstorm(){
  Minecraft mc=Minecraft.getMinecraft();
  EntityPlayer player=mc.thePlayer;
  World world=mc.theWorld;
  Vec3 posPlayer=new Vec3(mc.thePlayer.posX,0,mc.thePlayer.posZ);
  WeatherObjectSandstorm sandstorm=ClientTickHandler.weatherManager.getClosestSandstormByIntensity(posPlayer);
  WindManager windMan=ClientTickHandler.weatherManager.getWindManager();
  float scaleIntensityTarget=0F;
  if (sandstorm != null) {
    if (mc.theWorld.getTotalWorldTime() % 40 == 0) {
      isPlayerOutside=WeatherUtilEntity.isEntityOutside(mc.thePlayer);
    }
    scaleIntensityTarget=sandstorm.getSandstormScale();
    List<Vec3> points=sandstorm.getSandstormAsShape();
    boolean inStorm=CoroUtilPhysics.isInConvexShape(posPlayer,points);
    if (inStorm) {
      distToStorm=0;
    }
 else {
      distToStorm=CoroUtilPhysics.getDistanceToShape(posPlayer,points);
    }
  }
 else {
    distToStorm=distToStormThreshold + 10;
  }
  scaleIntensitySmooth=adjVal(scaleIntensitySmooth,scaleIntensityTarget,0.01F);
  float fogColorChangeRate=0.01F;
  float fogDistChangeRate=2F;
  float fogDensityChangeRate=0.01F;
  adjustAmountTarget=1F - (float)((distToStorm) / distToStormThreshold);
  adjustAmountTarget*=2F * scaleIntensitySmooth * (isPlayerOutside ? 1F : 0.5F);
  if (adjustAmountTarget < 0F)   adjustAmountTarget=0F;
  if (adjustAmountTarget > 1F)   adjustAmountTarget=1F;
  adjustAmountTarget=1F;
  float sunBrightness=mc.theWorld.getSunBrightness(1F);
  if (adjustAmountSmooth < adjustAmountTarget) {
    adjustAmountSmooth=CoroUtilMisc.adjVal(adjustAmountSmooth,adjustAmountTarget,0.003F);
  }
 else {
    adjustAmountSmooth=CoroUtilMisc.adjVal(adjustAmountSmooth,adjustAmountTarget,0.002F);
  }
  RotatingParticleManager.sandstormFogAmount=adjustAmountSmooth;
  if (mc.theWorld.getTotalWorldTime() % 20 == 0) {
    if (adjustAmountSmooth > 0) {
      System.out.println(""String_Node_Str"" + adjustAmountTarget);
      System.out.println(""String_Node_Str"" + adjustAmountSmooth);
    }
  }
  if (adjustAmountSmooth > 0) {
    if (needFogState) {
      stormFogRed=ObfuscationReflectionHelper.getPrivateValue(EntityRenderer.class,Minecraft.getMinecraft().entityRenderer,""String_Node_Str"");
      stormFogGreen=ObfuscationReflectionHelper.getPrivateValue(EntityRenderer.class,Minecraft.getMinecraft().entityRenderer,""String_Node_Str"");
      stormFogBlue=ObfuscationReflectionHelper.getPrivateValue(EntityRenderer.class,Minecraft.getMinecraft().entityRenderer,""String_Node_Str"");
      if (stormFogRed == 0 && stormFogGreen == 0 && stormFogBlue == 0) {
        stormFogRed=0.7225088F;
        stormFogGreen=0.8253213F;
        stormFogBlue=1F;
      }
      try {
        Object fogState=ObfuscationReflectionHelper.getPrivateValue(GlStateManager.class,null,""String_Node_Str"");
        Class<?> innerClass=Class.forName(""String_Node_Str"");
        Field fieldDensity=null;
        Field fieldStart=null;
        Field fieldEnd=null;
        try {
          fieldDensity=innerClass.getField(""String_Node_Str"");
          fieldDensity.setAccessible(true);
          fieldStart=innerClass.getField(""String_Node_Str"");
          fieldStart.setAccessible(true);
          fieldEnd=innerClass.getField(""String_Node_Str"");
          fieldEnd.setAccessible(true);
        }
 catch (        Exception e) {
          fieldDensity=innerClass.getField(""String_Node_Str"");
          fieldDensity.setAccessible(true);
          fieldStart=innerClass.getField(""String_Node_Str"");
          fieldStart.setAccessible(true);
          fieldEnd=innerClass.getField(""String_Node_Str"");
          fieldEnd.setAccessible(true);
        }
        stormFogDensity=fieldDensity.getFloat(fogState);
        stormFogStart=fieldStart.getFloat(fogState);
        stormFogEnd=fieldEnd.getFloat(fogState);
        stormFogStartClouds=0;
        stormFogEndClouds=192;
        stormFogStartOrig=stormFogStart;
        stormFogEndOrig=stormFogEnd;
        stormFogStartCloudsOrig=stormFogStartClouds;
        stormFogEndCloudsOrig=stormFogEndClouds;
        stormFogDensityOrig=stormFogDensity;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      needFogState=false;
    }
    stormFogRed=stormFogRedOrig + (-(stormFogRedOrig - (0.7F * sunBrightness)) * adjustAmountSmooth);
    stormFogGreen=stormFogGreenOrig + (-(stormFogGreenOrig - (0.6F * sunBrightness)) * adjustAmountSmooth);
    stormFogBlue=stormFogBlueOrig + (-(stormFogBlueOrig - (0.3F * sunBrightness)) * adjustAmountSmooth);
    stormFogDensity=stormFogDensityOrig + (-(stormFogDensityOrig - 0.5F) * adjustAmountSmooth);
    stormFogStart=stormFogStartOrig + (-(stormFogStartOrig - 0F) * adjustAmountSmooth);
    stormFogEnd=stormFogEndOrig + (-(stormFogEndOrig - 7F) * adjustAmountSmooth);
    stormFogStartClouds=stormFogStartCloudsOrig + (-(stormFogStartCloudsOrig - 0F) * adjustAmountSmooth);
    stormFogEndClouds=stormFogEndCloudsOrig + (-(stormFogEndCloudsOrig - 20F) * adjustAmountSmooth);
  }
 else {
    if (!needFogState) {
    }
    needFogState=true;
  }
  if (adjustAmountSmooth > 0.75F) {
    Vec3 windForce=windMan.getWindForce();
    Random rand=mc.theWorld.rand;
    int spawnAreaSize=80;
    float adjustAmountSmooth75=(adjustAmountSmooth * 8F) - 7F;
    for (int i=0; i < ((float)30 * adjustAmountSmooth75); i++) {
      BlockPos pos=new BlockPos(player.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),player.posY - 2 + rand.nextInt(10),player.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
      if (isSnowingAt(world,pos)) {
        TextureAtlasSprite sprite=ParticleRegistry.cloud256;
        ParticleSandstorm part=new ParticleSandstorm(world,pos.getX(),pos.getY(),pos.getZ(),0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.setMotionX(windForce.xCoord);
        part.setMotionZ(windForce.zCoord);
        part.setFacePlayer(false);
        part.isTransparent=true;
        part.rotationYaw=(float)rand.nextInt(360);
        part.rotationPitch=(float)rand.nextInt(360);
        part.setMaxAge(40);
        part.setGravity(0.09F);
        part.setAlphaF(0F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.5F);
        part.setRBGColorF(0.65F * brightnessMulti,0.6F * brightnessMulti,0.3F * brightnessMulti);
        part.setScale(40);
        part.aboveGroundHeight=0.2D;
        part.setKillOnCollide(true);
        part.windWeight=1F;
        particleBehavior.particles.add(part);
        ClientTickHandler.weatherManager.addWeatheredParticle(part);
        part.spawnAsWeatherEffect();
      }
    }
    for (int i=0; i < ((float)1 * adjustAmountSmooth75); i++) {
      BlockPos pos=new BlockPos(player.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),player.posY - 2 + rand.nextInt(10),player.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
      if (isSnowingAt(world,pos)) {
        TextureAtlasSprite sprite=ParticleRegistry.tumbleweed;
        ParticleSandstorm part=new ParticleSandstorm(world,pos.getX(),pos.getY(),pos.getZ(),0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.setMotionX(windForce.xCoord);
        part.setMotionZ(windForce.zCoord);
        part.setFacePlayer(true);
        part.isTransparent=true;
        part.rotationYaw=(float)rand.nextInt(360);
        part.rotationPitch=(float)rand.nextInt(360);
        part.setMaxAge(80);
        part.setGravity(0.3F);
        part.setAlphaF(0F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.2F);
        part.setRBGColorF(1F * brightnessMulti,1F * brightnessMulti,1F * brightnessMulti);
        part.setScale(8);
        part.aboveGroundHeight=0.5D;
        part.collisionSpeedDampen=false;
        part.bounceSpeed=0.03D;
        part.bounceSpeedAhead=0.03D;
        part.setKillOnCollide(false);
        part.windWeight=1F;
        particleBehavior.particles.add(part);
        ClientTickHandler.weatherManager.addWeatheredParticle(part);
        part.spawnAsWeatherEffect();
      }
    }
    for (int i=0; i < ((float)12 * adjustAmountSmooth75); i++) {
      BlockPos pos=new BlockPos(player.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),player.posY - 2 + rand.nextInt(10),player.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
      if (isSnowingAt(world,pos)) {
        TextureAtlasSprite sprite=null;
        int tex=rand.nextInt(3);
        if (tex == 0) {
          sprite=ParticleRegistry.debris_1;
        }
 else         if (tex == 1) {
          sprite=ParticleRegistry.debris_2;
        }
 else         if (tex == 2) {
          sprite=ParticleRegistry.debris_3;
        }
        ParticleSandstorm part=new ParticleSandstorm(world,pos.getX(),pos.getY(),pos.getZ(),0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.setMotionX(windForce.xCoord);
        part.setMotionZ(windForce.zCoord);
        part.setFacePlayer(false);
        part.spinFast=true;
        part.isTransparent=true;
        part.rotationYaw=(float)rand.nextInt(360);
        part.rotationPitch=(float)rand.nextInt(360);
        part.setMaxAge(80);
        part.setGravity(0.3F);
        part.setAlphaF(0F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.5F);
        part.setRBGColorF(1F * brightnessMulti,1F * brightnessMulti,1F * brightnessMulti);
        part.setScale(8);
        part.aboveGroundHeight=0.5D;
        part.collisionSpeedDampen=false;
        part.bounceSpeed=0.03D;
        part.bounceSpeedAhead=0.03D;
        part.setKillOnCollide(false);
        part.windWeight=1F;
        particleBehavior.particles.add(part);
        ClientTickHandler.weatherManager.addWeatheredParticle(part);
        part.spawnAsWeatherEffect();
      }
    }
  }
  tickSandstormSound();
}","/** 
 * Manages transitioning fog densities and color from current vanilla settings to our desired settings, and vice versa
 */
public static void tickSandstorm(){
  Minecraft mc=Minecraft.getMinecraft();
  EntityPlayer player=mc.thePlayer;
  World world=mc.theWorld;
  Vec3 posPlayer=new Vec3(mc.thePlayer.posX,0,mc.thePlayer.posZ);
  WeatherObjectSandstorm sandstorm=ClientTickHandler.weatherManager.getClosestSandstormByIntensity(posPlayer);
  WindManager windMan=ClientTickHandler.weatherManager.getWindManager();
  float scaleIntensityTarget=0F;
  if (sandstorm != null) {
    if (mc.theWorld.getTotalWorldTime() % 40 == 0) {
      isPlayerOutside=WeatherUtilEntity.isEntityOutside(mc.thePlayer);
    }
    scaleIntensityTarget=sandstorm.getSandstormScale();
    List<Vec3> points=sandstorm.getSandstormAsShape();
    boolean inStorm=CoroUtilPhysics.isInConvexShape(posPlayer,points);
    if (inStorm) {
      distToStorm=0;
    }
 else {
      distToStorm=CoroUtilPhysics.getDistanceToShape(posPlayer,points);
    }
  }
 else {
    distToStorm=distToStormThreshold + 10;
  }
  scaleIntensitySmooth=adjVal(scaleIntensitySmooth,scaleIntensityTarget,0.01F);
  float fogColorChangeRate=0.01F;
  float fogDistChangeRate=2F;
  float fogDensityChangeRate=0.01F;
  adjustAmountTarget=1F - (float)((distToStorm) / distToStormThreshold);
  adjustAmountTarget*=2F * scaleIntensitySmooth * (isPlayerOutside ? 1F : 0.5F);
  if (adjustAmountTarget < 0F)   adjustAmountTarget=0F;
  if (adjustAmountTarget > 1F)   adjustAmountTarget=1F;
  float sunBrightness=mc.theWorld.getSunBrightness(1F);
  if (adjustAmountSmooth < adjustAmountTarget) {
    adjustAmountSmooth=CoroUtilMisc.adjVal(adjustAmountSmooth,adjustAmountTarget,0.003F);
  }
 else {
    adjustAmountSmooth=CoroUtilMisc.adjVal(adjustAmountSmooth,adjustAmountTarget,0.002F);
  }
  RotatingParticleManager.sandstormFogAmount=adjustAmountSmooth;
  if (mc.theWorld.getTotalWorldTime() % 20 == 0) {
    if (adjustAmountSmooth > 0) {
      System.out.println(""String_Node_Str"" + adjustAmountTarget);
      System.out.println(""String_Node_Str"" + adjustAmountSmooth);
    }
  }
  if (adjustAmountSmooth > 0) {
    if (needFogState) {
      stormFogRed=ObfuscationReflectionHelper.getPrivateValue(EntityRenderer.class,Minecraft.getMinecraft().entityRenderer,""String_Node_Str"");
      stormFogGreen=ObfuscationReflectionHelper.getPrivateValue(EntityRenderer.class,Minecraft.getMinecraft().entityRenderer,""String_Node_Str"");
      stormFogBlue=ObfuscationReflectionHelper.getPrivateValue(EntityRenderer.class,Minecraft.getMinecraft().entityRenderer,""String_Node_Str"");
      if (stormFogRed == 0 && stormFogGreen == 0 && stormFogBlue == 0) {
        stormFogRed=0.7225088F;
        stormFogGreen=0.8253213F;
        stormFogBlue=1F;
      }
      try {
        Object fogState=ObfuscationReflectionHelper.getPrivateValue(GlStateManager.class,null,""String_Node_Str"");
        Class<?> innerClass=Class.forName(""String_Node_Str"");
        Field fieldDensity=null;
        Field fieldStart=null;
        Field fieldEnd=null;
        try {
          fieldDensity=innerClass.getField(""String_Node_Str"");
          fieldDensity.setAccessible(true);
          fieldStart=innerClass.getField(""String_Node_Str"");
          fieldStart.setAccessible(true);
          fieldEnd=innerClass.getField(""String_Node_Str"");
          fieldEnd.setAccessible(true);
        }
 catch (        Exception e) {
          fieldDensity=innerClass.getField(""String_Node_Str"");
          fieldDensity.setAccessible(true);
          fieldStart=innerClass.getField(""String_Node_Str"");
          fieldStart.setAccessible(true);
          fieldEnd=innerClass.getField(""String_Node_Str"");
          fieldEnd.setAccessible(true);
        }
        stormFogDensity=fieldDensity.getFloat(fogState);
        stormFogStart=fieldStart.getFloat(fogState);
        stormFogEnd=fieldEnd.getFloat(fogState);
        stormFogStartClouds=0;
        stormFogEndClouds=192;
        stormFogStartOrig=stormFogStart;
        stormFogEndOrig=stormFogEnd;
        stormFogStartCloudsOrig=stormFogStartClouds;
        stormFogEndCloudsOrig=stormFogEndClouds;
        stormFogDensityOrig=stormFogDensity;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      needFogState=false;
    }
    stormFogRed=stormFogRedOrig + (-(stormFogRedOrig - (0.7F * sunBrightness)) * adjustAmountSmooth);
    stormFogGreen=stormFogGreenOrig + (-(stormFogGreenOrig - (0.6F * sunBrightness)) * adjustAmountSmooth);
    stormFogBlue=stormFogBlueOrig + (-(stormFogBlueOrig - (0.3F * sunBrightness)) * adjustAmountSmooth);
    stormFogDensity=stormFogDensityOrig + (-(stormFogDensityOrig - 0.5F) * adjustAmountSmooth);
    stormFogStart=stormFogStartOrig + (-(stormFogStartOrig - 0F) * adjustAmountSmooth);
    stormFogEnd=stormFogEndOrig + (-(stormFogEndOrig - 7F) * adjustAmountSmooth);
    stormFogStartClouds=stormFogStartCloudsOrig + (-(stormFogStartCloudsOrig - 0F) * adjustAmountSmooth);
    stormFogEndClouds=stormFogEndCloudsOrig + (-(stormFogEndCloudsOrig - 20F) * adjustAmountSmooth);
  }
 else {
    if (!needFogState) {
    }
    needFogState=true;
  }
  if (adjustAmountSmooth > 0.75F) {
    Vec3 windForce=windMan.getWindForce();
    Random rand=mc.theWorld.rand;
    int spawnAreaSize=80;
    float adjustAmountSmooth75=(adjustAmountSmooth * 8F) - 7F;
    for (int i=0; i < ((float)30 * adjustAmountSmooth75); i++) {
      BlockPos pos=new BlockPos(player.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),player.posY - 2 + rand.nextInt(10),player.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
      if (isSnowingAt(world,pos)) {
        TextureAtlasSprite sprite=ParticleRegistry.cloud256;
        ParticleSandstorm part=new ParticleSandstorm(world,pos.getX(),pos.getY(),pos.getZ(),0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.setMotionX(windForce.xCoord);
        part.setMotionZ(windForce.zCoord);
        part.setFacePlayer(false);
        part.isTransparent=true;
        part.rotationYaw=(float)rand.nextInt(360);
        part.rotationPitch=(float)rand.nextInt(360);
        part.setMaxAge(40);
        part.setGravity(0.09F);
        part.setAlphaF(0F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.5F);
        part.setRBGColorF(0.65F * brightnessMulti,0.6F * brightnessMulti,0.3F * brightnessMulti);
        part.setScale(40);
        part.aboveGroundHeight=0.2D;
        part.setKillOnCollide(true);
        part.windWeight=1F;
        particleBehavior.particles.add(part);
        ClientTickHandler.weatherManager.addWeatheredParticle(part);
        part.spawnAsWeatherEffect();
      }
    }
    for (int i=0; i < ((float)1 * adjustAmountSmooth75); i++) {
      BlockPos pos=new BlockPos(player.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),player.posY - 2 + rand.nextInt(10),player.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
      if (isSnowingAt(world,pos)) {
        TextureAtlasSprite sprite=ParticleRegistry.tumbleweed;
        ParticleSandstorm part=new ParticleSandstorm(world,pos.getX(),pos.getY(),pos.getZ(),0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.setMotionX(windForce.xCoord);
        part.setMotionZ(windForce.zCoord);
        part.setFacePlayer(true);
        part.isTransparent=true;
        part.rotationYaw=(float)rand.nextInt(360);
        part.rotationPitch=(float)rand.nextInt(360);
        part.setMaxAge(80);
        part.setGravity(0.3F);
        part.setAlphaF(0F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.2F);
        part.setRBGColorF(1F * brightnessMulti,1F * brightnessMulti,1F * brightnessMulti);
        part.setScale(8);
        part.aboveGroundHeight=0.5D;
        part.collisionSpeedDampen=false;
        part.bounceSpeed=0.03D;
        part.bounceSpeedAhead=0.03D;
        part.setKillOnCollide(false);
        part.windWeight=1F;
        particleBehavior.particles.add(part);
        ClientTickHandler.weatherManager.addWeatheredParticle(part);
        part.spawnAsWeatherEffect();
      }
    }
    for (int i=0; i < ((float)12 * adjustAmountSmooth75); i++) {
      BlockPos pos=new BlockPos(player.posX + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2),player.posY - 2 + rand.nextInt(10),player.posZ + rand.nextInt(spawnAreaSize) - (spawnAreaSize / 2));
      if (isSnowingAt(world,pos)) {
        TextureAtlasSprite sprite=null;
        int tex=rand.nextInt(3);
        if (tex == 0) {
          sprite=ParticleRegistry.debris_1;
        }
 else         if (tex == 1) {
          sprite=ParticleRegistry.debris_2;
        }
 else         if (tex == 2) {
          sprite=ParticleRegistry.debris_3;
        }
        ParticleSandstorm part=new ParticleSandstorm(world,pos.getX(),pos.getY(),pos.getZ(),0,0,0,sprite);
        particleBehavior.initParticle(part);
        part.setMotionX(windForce.xCoord);
        part.setMotionZ(windForce.zCoord);
        part.setFacePlayer(false);
        part.spinFast=true;
        part.isTransparent=true;
        part.rotationYaw=(float)rand.nextInt(360);
        part.rotationPitch=(float)rand.nextInt(360);
        part.setMaxAge(80);
        part.setGravity(0.3F);
        part.setAlphaF(0F);
        float brightnessMulti=1F - (rand.nextFloat() * 0.5F);
        part.setRBGColorF(1F * brightnessMulti,1F * brightnessMulti,1F * brightnessMulti);
        part.setScale(8);
        part.aboveGroundHeight=0.5D;
        part.collisionSpeedDampen=false;
        part.bounceSpeed=0.03D;
        part.bounceSpeedAhead=0.03D;
        part.setKillOnCollide(false);
        part.windWeight=1F;
        particleBehavior.particles.add(part);
        ClientTickHandler.weatherManager.addWeatheredParticle(part);
        part.spawnAsWeatherEffect();
      }
    }
  }
  tickSandstormSound();
}",0.9987275411004224
81909,"/** 
 * - size of storm determined by how long it was in desert - front of storm dies down once it exits desert - stops moving once fully dies down - storm continues for minutes even after front has exited desert
 */
public void tickProgressionAndMovement(){
  World world=manager.getWorld();
  WindManager windMan=manager.getWindManager();
  float angle=windMan.getWindAngleForClouds();
  float speedWind=windMan.getWindSpeedForClouds();
  if (!world.isRemote) {
    age++;
    BlockPos posBlock=pos.toBlockPos();
    if (isFrontGrowing && world.isBlockLoaded(posBlock)) {
      Biome biomeIn=world.getBiomeForCoordsBody(posBlock);
      if (isDesert(biomeIn)) {
        isFrontGrowing=true;
      }
 else {
        System.out.println(""String_Node_Str"");
        isFrontGrowing=false;
      }
    }
 else {
      isFrontGrowing=false;
    }
    int sizeAdjRate=10;
    if (isFrontGrowing) {
      if (world.getTotalWorldTime() % sizeAdjRate == 0) {
        if (size < maxSize) {
          size++;
        }
      }
    }
 else {
      if (world.getTotalWorldTime() % sizeAdjRate == 0) {
        if (size > 0) {
          size--;
        }
      }
      if (ageFadeout < ageFadeoutMax) {
        ageFadeout++;
      }
 else {
        System.out.println(""String_Node_Str"");
        this.setDead();
      }
    }
    if (size > sizePeak) {
      sizePeak=size;
    }
    if (!windMan.isHighWindEventActive()) {
      windMan.highWindTimer=100;
    }
  }
  double vecX=-Math.sin(Math.toRadians(angle));
  double vecZ=Math.cos(Math.toRadians(angle));
  double speed=speedWind * 0.3D;
  if (size > 0) {
    this.pos.xCoord+=vecX * speed;
    this.pos.zCoord+=vecZ * speed;
  }
  int yy=world.getHeight(new BlockPos(pos.xCoord,0,pos.zCoord)).getY();
  this.pos.yCoord=yy + 1;
}","/** 
 * - size of storm determined by how long it was in desert - front of storm dies down once it exits desert - stops moving once fully dies down - storm continues for minutes even after front has exited desert
 */
public void tickProgressionAndMovement(){
  World world=manager.getWorld();
  WindManager windMan=manager.getWindManager();
  float angle=windMan.getWindAngleForClouds();
  float speedWind=windMan.getWindSpeedForClouds();
  if (!world.isRemote) {
    age++;
    BlockPos posBlock=pos.toBlockPos();
    if (isFrontGrowing && world.isBlockLoaded(posBlock)) {
      Biome biomeIn=world.getBiomeForCoordsBody(posBlock);
      if (isDesert(biomeIn)) {
        isFrontGrowing=true;
      }
 else {
        System.out.println(""String_Node_Str"");
        isFrontGrowing=false;
      }
    }
 else {
      isFrontGrowing=false;
    }
    int sizeAdjRate=10;
    if (isFrontGrowing) {
      if (world.getTotalWorldTime() % sizeAdjRate == 0) {
        if (size < maxSize) {
          size++;
        }
      }
    }
 else {
      if (world.getTotalWorldTime() % sizeAdjRate == 0) {
        if (size > 0) {
          size--;
        }
      }
      if (ageFadeout < ageFadeoutMax) {
        ageFadeout++;
      }
 else {
        System.out.println(""String_Node_Str"");
        this.setDead();
      }
    }
    if (size > sizePeak) {
      sizePeak=size;
    }
    if (windMan.highWindTimer < 100) {
      windMan.highWindTimer=100;
    }
  }
  double vecX=-Math.sin(Math.toRadians(angle));
  double vecZ=Math.cos(Math.toRadians(angle));
  double speed=speedWind * 0.3D;
  if (size > 0) {
    this.pos.xCoord+=vecX * speed;
    this.pos.zCoord+=vecZ * speed;
  }
  int yy=world.getHeight(new BlockPos(pos.xCoord,0,pos.zCoord)).getY();
  this.pos.yCoord=yy + 1;
}",0.976533785694091
81910,"public void tick(){
  Random rand=new Random();
  if (!ConfigWind.Misc_windOn) {
    windSpeedGlobal=0;
    windSpeedGust=0;
    windTimeGust=0;
  }
 else {
    if (!manager.getWorld().isRemote) {
      if (!ConfigWind.Wind_LowWindEvents) {
        lowWindTimer=0;
      }
      if (lowWindTimer <= 0) {
        if (windSpeedGlobalRandChangeTimer-- <= 0) {
          if (highWindTimer <= 0) {
            windSpeedGlobal+=(rand.nextDouble() * windSpeedGlobalChangeRate) - (windSpeedGlobalChangeRate / 2);
          }
 else {
            windSpeedGlobal+=(rand.nextDouble() * windSpeedGlobalChangeRate);
          }
          windSpeedGlobalRandChangeTimer=windSpeedGlobalRandChangeDelay;
        }
        if (highWindTimer <= 0) {
          if (ConfigWind.Wind_LowWindEvents) {
            if (rand.nextInt(ConfigWind.lowWindOddsTo1) == 0) {
              startLowWindEvent();
              Weather.dbg(""String_Node_Str"" + lowWindTimer);
            }
          }
        }
        if (ConfigWind.Wind_HighWindEvents) {
          if (rand.nextInt(ConfigWind.highWindOddsTo1) == 0) {
            startHighWindEvent();
            Weather.dbg(""String_Node_Str"" + highWindTimer);
          }
        }
      }
 else {
        lowWindTimer--;
        windSpeedGlobal-=0.01F;
      }
      if (highWindTimer > 0) {
        highWindTimer--;
      }
      if (windSpeedGlobal < windSpeedMin) {
        windSpeedGlobal=windSpeedMin;
      }
      if (windSpeedGlobal > windSpeedMax) {
        windSpeedGlobal=windSpeedMax;
      }
      if (windTimeGust > 0) {
        windTimeGust--;
        if (windTimeGust == 0) {
          syncData();
        }
      }
      float randGustWindFactor=1F;
      if (this.windTimeGust == 0 && lowWindTimer <= 0 && highWindTimer <= 0) {
        if (chanceOfWindGustEvent > 0F) {
          if (rand.nextInt((int)((100 - chanceOfWindGustEvent) * randGustWindFactor)) == 0) {
            windSpeedGust=windSpeedGlobal + rand.nextFloat() * 0.6F;
            windAngleGust=rand.nextInt(360) - 180;
            setWindTimeGust(rand.nextInt(windGustEventTimeRand));
          }
        }
      }
      windAngleGlobal+=((new Random()).nextInt(5) - 2) * 0.2F;
      if (windAngleGlobal < -180) {
        windAngleGlobal+=360;
      }
      if (windAngleGlobal > 180) {
        windAngleGlobal-=360;
      }
    }
 else {
      tickClient();
    }
  }
}","public void tick(){
  Random rand=new Random();
  if (!ConfigWind.Misc_windOn) {
    windSpeedGlobal=0;
    windSpeedGust=0;
    windTimeGust=0;
  }
 else {
    if (!manager.getWorld().isRemote) {
      if (!ConfigWind.Wind_LowWindEvents) {
        lowWindTimer=0;
      }
      if (lowWindTimer <= 0) {
        if (windSpeedGlobalRandChangeTimer-- <= 0) {
          if (highWindTimer <= 0) {
            windSpeedGlobal+=(rand.nextDouble() * windSpeedGlobalChangeRate) - (windSpeedGlobalChangeRate / 2);
          }
 else {
            windSpeedGlobal+=(rand.nextDouble() * windSpeedGlobalChangeRate);
          }
          windSpeedGlobalRandChangeTimer=windSpeedGlobalRandChangeDelay;
        }
        if (highWindTimer <= 0) {
          if (ConfigWind.Wind_LowWindEvents) {
            if (rand.nextInt(ConfigWind.lowWindOddsTo1) == 0) {
              startLowWindEvent();
              Weather.dbg(""String_Node_Str"" + lowWindTimer);
            }
          }
        }
        if (ConfigWind.Wind_HighWindEvents && highWindTimer <= 0) {
          if (rand.nextInt(ConfigWind.highWindOddsTo1) == 0) {
            startHighWindEvent();
            Weather.dbg(""String_Node_Str"" + highWindTimer);
          }
        }
      }
 else {
        lowWindTimer--;
        if (lowWindTimer <= 0) {
          Weather.dbg(""String_Node_Str"");
        }
        windSpeedGlobal-=0.01F;
      }
      if (highWindTimer > 0) {
        highWindTimer--;
        if (highWindTimer <= 0) {
          Weather.dbg(""String_Node_Str"");
        }
      }
      if (windSpeedGlobal < windSpeedMin) {
        windSpeedGlobal=windSpeedMin;
      }
      if (windSpeedGlobal > windSpeedMax) {
        windSpeedGlobal=windSpeedMax;
      }
      if (windTimeGust > 0) {
        windTimeGust--;
        if (windTimeGust == 0) {
          syncData();
        }
      }
      float randGustWindFactor=1F;
      if (this.windTimeGust == 0 && lowWindTimer <= 0 && highWindTimer <= 0) {
        if (chanceOfWindGustEvent > 0F) {
          if (rand.nextInt((int)((100 - chanceOfWindGustEvent) * randGustWindFactor)) == 0) {
            windSpeedGust=windSpeedGlobal + rand.nextFloat() * 0.6F;
            windAngleGust=rand.nextInt(360) - 180;
            setWindTimeGust(rand.nextInt(windGustEventTimeRand));
          }
        }
      }
      windAngleGlobal+=((new Random()).nextInt(5) - 2) * 0.2F;
      if (windAngleGlobal < -180) {
        windAngleGlobal+=360;
      }
      if (windAngleGlobal > 180) {
        windAngleGlobal-=360;
      }
    }
 else {
      tickClient();
    }
  }
}",0.9609074336641684
81911,"@Override public void readSpawnData(ByteBuf data){
  System.out.println(""String_Node_Str"");
  tile=(Block)Block.blockRegistry.getObject(new ResourceLocation(ByteBufUtils.readUTF8String(data)));
  metadata=data.readInt();
}","@Override public void readSpawnData(ByteBuf data){
  tile=(Block)Block.blockRegistry.getObject(new ResourceLocation(ByteBufUtils.readUTF8String(data)));
  metadata=data.readInt();
}",0.8982630272952854
81912,"@Override public void writeSpawnData(ByteBuf data){
  System.out.println(""String_Node_Str"");
  ByteBufUtils.writeUTF8String(data,Block.blockRegistry.getNameForObject(tile).toString());
  data.writeInt(metadata);
}","@Override public void writeSpawnData(ByteBuf data){
  ByteBufUtils.writeUTF8String(data,Block.blockRegistry.getNameForObject(tile).toString());
  data.writeInt(metadata);
}",0.8935064935064935
81913,"public BlockUpdateSnapshot(int dimID,IBlockState state,BlockPos pos){
  this.dimID=dimID;
  this.state=state;
  this.pos=pos;
}","public BlockUpdateSnapshot(int dimID,IBlockState state,IBlockState statePrev,BlockPos pos,boolean createEntityForBlockRemoval){
  this.dimID=dimID;
  this.state=state;
  this.statePrev=statePrev;
  this.pos=pos;
  this.createEntityForBlockRemoval=createEntityForBlockRemoval;
}",0.5346534653465347
81914,"public void tick(World parWorld){
  if (!parWorld.isRemote) {
    if (parWorld.getTotalWorldTime() % queueProcessRate == 0) {
      for (      BlockUpdateSnapshot snapshot : listBlockUpdateQueue) {
        World world=DimensionManager.getWorld(snapshot.getDimID());
        if (world != null) {
          world.setBlockState(snapshot.getPos(),snapshot.getState(),3);
        }
      }
      listBlockUpdateQueue.clear();
    }
  }
  if (storm == null)   return;
  boolean seesLight=false;
  tickGrabCount=0;
  removeCount=0;
  tryRipCount=0;
  int tryRipMax=300;
  tornadoBaseSize=getTornadoBaseSize();
  if (storm.stormType == storm.TYPE_WATER) {
    tornadoBaseSize*=3;
  }
  forceRotate(parWorld);
  Random rand=new Random();
  int spawnYOffset=(int)storm.posBaseFormationPos.yCoord;
  if (!parWorld.isRemote && ConfigMisc.Storm_Tornado_grabBlocks) {
    int yStart=00;
    int yEnd=(int)storm.pos.yCoord;
    int yInc=1;
    BiomeGenBase bgb=parWorld.getBiomeGenForCoords(new BlockPos(MathHelper.floor_double(storm.pos.xCoord),0,MathHelper.floor_double(storm.pos.zCoord)));
    if (bgb != null && bgb.minHeight + bgb.maxHeight <= 0.7) {
      for (int i=yStart; i < yEnd; i+=yInc) {
        int YRand=i;
        int ii=YRand / 4;
        if (i > 20 && rand.nextInt(2) != 0) {
          continue;
        }
        if (tryRipCount > tryRipMax) {
          break;
        }
        int extraTry=(int)((storm.levelCurIntensityStage + 1 - storm.levelStormIntensityFormingStartVal) * 5);
        int loopAmount=5 + ii + extraTry;
        if (storm.stormType == StormObject.TYPE_WATER) {
          loopAmount=1 + ii / 2;
        }
        for (int k=0; k < loopAmount; k++) {
          if (tryRipCount > tryRipMax) {
            break;
          }
          int tryY=(int)(spawnYOffset + YRand - 1.5D);
          if (tryY > 255) {
            tryY=255;
          }
          int tryX=(int)storm.pos.xCoord + rand.nextInt(tornadoBaseSize + (ii)) - ((tornadoBaseSize / 2) + (ii / 2));
          int tryZ=(int)storm.pos.zCoord + rand.nextInt(tornadoBaseSize + (ii)) - ((tornadoBaseSize / 2) + (ii / 2));
          double d0=storm.pos.xCoord - tryX;
          double d2=storm.pos.zCoord - tryZ;
          double dist=(double)MathHelper.sqrt_double(d0 * d0 + d2 * d2);
          if (dist < tornadoBaseSize / 2 + ii / 2 && tryRipCount < tryRipMax) {
            Block blockID=parWorld.getBlockState(new BlockPos(tryX,tryY,tryZ)).getBlock();
            boolean performed=false;
            if (!CoroUtilBlock.isAir(blockID) && canGrab(parWorld,blockID)) {
              tryRipCount++;
              seesLight=tryRip(parWorld,tryX,tryY,tryZ);
              performed=seesLight;
            }
            if (!performed && ConfigMisc.Storm_Tornado_RefinedGrabRules) {
              if (blockID == Blocks.grass) {
                listBlockUpdateQueue.add(new BlockUpdateSnapshot(parWorld.provider.getDimensionId(),Blocks.dirt.getDefaultState(),new BlockPos(tryX,tryY,tryZ)));
              }
            }
          }
        }
      }
      for (int k=0; k < 10; k++) {
        int randSize=40;
        int tryX=(int)storm.pos.xCoord + rand.nextInt(randSize) - 20;
        int tryY=(int)spawnYOffset - 2 + rand.nextInt(8);
        int tryZ=(int)storm.pos.zCoord + rand.nextInt(randSize) - 20;
        double d0=storm.pos.xCoord - tryX;
        double d2=storm.pos.zCoord - tryZ;
        double dist=(double)MathHelper.sqrt_double(d0 * d0 + d2 * d2);
        if (dist < tornadoBaseSize / 2 + randSize / 2 && tryRipCount < tryRipMax) {
          Block blockID=parWorld.getBlockState(new BlockPos(tryX,tryY,tryZ)).getBlock();
          if (!CoroUtilBlock.isAir(blockID) && canGrab(parWorld,blockID)) {
            tryRipCount++;
            tryRip(parWorld,tryX,tryY,tryZ);
          }
        }
      }
    }
  }
 else {
    seesLight=true;
  }
  if (Math.abs((spawnYOffset - storm.pos.yCoord)) > 5) {
    seesLight=true;
  }
}","public void tick(World parWorld){
  if (!parWorld.isRemote) {
    if (parWorld.getTotalWorldTime() % queueProcessRate == 0) {
      Iterator<BlockUpdateSnapshot> it=listBlockUpdateQueue.values().iterator();
      while (it.hasNext()) {
        BlockUpdateSnapshot snapshot=it.next();
        World world=DimensionManager.getWorld(snapshot.getDimID());
        if (world != null) {
          world.setBlockState(snapshot.getPos(),snapshot.getState(),3);
          if (snapshot.getState().getBlock() == Blocks.air) {
            EntityMovingBlock mBlock=new EntityMovingBlock(parWorld,snapshot.getPos().getX(),snapshot.getPos().getY(),snapshot.getPos().getZ(),snapshot.statePrev.getBlock(),storm);
            parWorld.spawnEntityInWorld(mBlock);
          }
        }
      }
      listBlockUpdateQueue.clear();
    }
  }
  if (storm == null)   return;
  boolean seesLight=false;
  tickGrabCount=0;
  removeCount=0;
  tryRipCount=0;
  int tryRipMax=300;
  tornadoBaseSize=getTornadoBaseSize();
  if (storm.stormType == storm.TYPE_WATER) {
    tornadoBaseSize*=3;
  }
  forceRotate(parWorld);
  Random rand=new Random();
  int spawnYOffset=(int)storm.posBaseFormationPos.yCoord;
  if (!parWorld.isRemote && ConfigMisc.Storm_Tornado_grabBlocks) {
    int yStart=00;
    int yEnd=(int)storm.pos.yCoord;
    int yInc=1;
    BiomeGenBase bgb=parWorld.getBiomeGenForCoords(new BlockPos(MathHelper.floor_double(storm.pos.xCoord),0,MathHelper.floor_double(storm.pos.zCoord)));
    if (bgb != null && bgb.minHeight + bgb.maxHeight <= 0.7) {
      for (int i=yStart; i < yEnd; i+=yInc) {
        int YRand=i;
        int ii=YRand / 4;
        if (i > 20 && rand.nextInt(2) != 0) {
          continue;
        }
        if (tryRipCount > tryRipMax) {
          break;
        }
        int extraTry=(int)((storm.levelCurIntensityStage + 1 - storm.levelStormIntensityFormingStartVal) * 5);
        int loopAmount=5 + ii + extraTry;
        if (storm.stormType == StormObject.TYPE_WATER) {
          loopAmount=1 + ii / 2;
        }
        for (int k=0; k < loopAmount; k++) {
          if (tryRipCount > tryRipMax) {
            break;
          }
          int tryY=(int)(spawnYOffset + YRand - 1.5D);
          if (tryY > 255) {
            tryY=255;
          }
          int tryX=(int)storm.pos.xCoord + rand.nextInt(tornadoBaseSize + (ii)) - ((tornadoBaseSize / 2) + (ii / 2));
          int tryZ=(int)storm.pos.zCoord + rand.nextInt(tornadoBaseSize + (ii)) - ((tornadoBaseSize / 2) + (ii / 2));
          double d0=storm.pos.xCoord - tryX;
          double d2=storm.pos.zCoord - tryZ;
          double dist=(double)MathHelper.sqrt_double(d0 * d0 + d2 * d2);
          BlockPos pos=new BlockPos(tryX,tryY,tryZ);
          if (dist < tornadoBaseSize / 2 + ii / 2 && tryRipCount < tryRipMax) {
            IBlockState state=parWorld.getBlockState(pos);
            Block blockID=state.getBlock();
            boolean performed=false;
            if (!CoroUtilBlock.isAir(blockID) && canGrab(parWorld,blockID)) {
              tryRipCount++;
              seesLight=tryRip(parWorld,tryX,tryY,tryZ);
              performed=seesLight;
            }
            if (!performed && ConfigMisc.Storm_Tornado_RefinedGrabRules) {
              if (blockID == Blocks.grass) {
                if (!listBlockUpdateQueue.containsKey(pos)) {
                  listBlockUpdateQueue.put(pos,new BlockUpdateSnapshot(parWorld.provider.getDimensionId(),Blocks.dirt.getDefaultState(),state,pos,false));
                }
              }
            }
          }
        }
      }
      for (int k=0; k < 10; k++) {
        int randSize=40;
        int tryX=(int)storm.pos.xCoord + rand.nextInt(randSize) - 20;
        int tryY=(int)spawnYOffset - 2 + rand.nextInt(8);
        int tryZ=(int)storm.pos.zCoord + rand.nextInt(randSize) - 20;
        double d0=storm.pos.xCoord - tryX;
        double d2=storm.pos.zCoord - tryZ;
        double dist=(double)MathHelper.sqrt_double(d0 * d0 + d2 * d2);
        if (dist < tornadoBaseSize / 2 + randSize / 2 && tryRipCount < tryRipMax) {
          Block blockID=parWorld.getBlockState(new BlockPos(tryX,tryY,tryZ)).getBlock();
          if (!CoroUtilBlock.isAir(blockID) && canGrab(parWorld,blockID)) {
            tryRipCount++;
            tryRip(parWorld,tryX,tryY,tryZ);
          }
        }
      }
    }
  }
 else {
    seesLight=true;
  }
  if (Math.abs((spawnYOffset - storm.pos.yCoord)) > 5) {
    seesLight=true;
  }
}",0.8164632687245753
81915,"public boolean tryRip(World parWorld,int tryX,int tryY,int tryZ){
  boolean createEntity=false;
  boolean tryRip=true;
  if (!tryRip)   return true;
  if (!ConfigMisc.Storm_Tornado_grabBlocks)   return true;
  if (isNoDigCoord(tryX,tryY,tryZ))   return true;
  if (parWorld.isRemote) {
    int what=0;
  }
  boolean seesLight=false;
  Block blockID=parWorld.getBlockState(new BlockPos(tryX,tryY,tryZ)).getBlock();
  if ((((parWorld.getHeight(new BlockPos(tryX,0,tryZ)).getY() - 1 == tryY) || parWorld.getHeight(new BlockPos(tryX + 1,0,tryZ)).getY() - 1 < tryY || parWorld.getHeight(new BlockPos(tryX,0,tryZ + 1)).getY() - 1 < tryY || parWorld.getHeight(new BlockPos(tryX - 1,0,tryZ)).getY() - 1 < tryY || parWorld.getHeight(new BlockPos(tryX,0,tryZ - 1)).getY() - 1 < tryY))) {
    if (parWorld.getChunkProvider().chunkExists((int)storm.pos.xCoord / 16,(int)storm.pos.zCoord / 16) && blockCount <= ConfigMisc.Storm_Tornado_maxBlocksPerStorm && lastGrabTime < System.currentTimeMillis() && tickGrabCount < ConfigMisc.Storm_Tornado_maxBlocksGrabbedPerTick) {
      lastGrabTime=System.currentTimeMillis() - 5;
      if (blockID != Blocks.snow && blockID != Blocks.glass) {
        EntityMovingBlock mBlock=null;
        if (parWorld.getClosestPlayer(storm.posBaseFormationPos.xCoord,storm.posBaseFormationPos.yCoord,storm.posBaseFormationPos.zCoord,140) != null) {
          if (createEntity) {
            if (blockID == Blocks.grass) {
              mBlock=new EntityMovingBlock(parWorld,tryX,tryY,tryZ,Blocks.dirt,storm);
            }
 else {
              mBlock=new EntityMovingBlock(parWorld,tryX,tryY,tryZ,blockID,storm);
            }
          }
          blockCount++;
          if (mBlock != null) {
            mBlock.setPosition(tryX,tryY,tryZ);
          }
          if (createEntity) {
            if (!parWorld.isRemote) {
              parWorld.spawnEntityInWorld(mBlock);
            }
          }
          tickGrabCount++;
          ripCount++;
          if (ripCount % 10 == 0) {
          }
 else {
          }
          if (mBlock != null) {
            mBlock.type=0;
          }
          seesLight=true;
        }
      }
 else {
        if (blockID == Blocks.glass) {
          parWorld.playSoundEffect(tryX,tryY,tryZ,""String_Node_Str"",5.0F,1.0F);
        }
      }
    }
    if (WeatherUtil.shouldRemoveBlock(blockID)) {
      removeCount++;
      listBlockUpdateQueue.add(new BlockUpdateSnapshot(parWorld.provider.getDimensionId(),Blocks.air.getDefaultState(),new BlockPos(tryX,tryY,tryZ)));
    }
  }
  return seesLight;
}","public boolean tryRip(World parWorld,int tryX,int tryY,int tryZ){
  boolean createEntity=false;
  boolean tryRip=true;
  BlockPos pos=new BlockPos(tryX,tryY,tryZ);
  if (listBlockUpdateQueue.containsKey(pos))   return true;
  if (!tryRip)   return true;
  if (!ConfigMisc.Storm_Tornado_grabBlocks)   return true;
  if (isNoDigCoord(tryX,tryY,tryZ))   return true;
  boolean seesLight=false;
  IBlockState state=parWorld.getBlockState(pos);
  Block blockID=state.getBlock();
  if ((((parWorld.getHeight(new BlockPos(tryX,0,tryZ)).getY() - 1 == tryY) || parWorld.getHeight(new BlockPos(tryX + 1,0,tryZ)).getY() - 1 < tryY || parWorld.getHeight(new BlockPos(tryX,0,tryZ + 1)).getY() - 1 < tryY || parWorld.getHeight(new BlockPos(tryX - 1,0,tryZ)).getY() - 1 < tryY || parWorld.getHeight(new BlockPos(tryX,0,tryZ - 1)).getY() - 1 < tryY))) {
    if (parWorld.getChunkProvider().chunkExists((int)storm.pos.xCoord / 16,(int)storm.pos.zCoord / 16) && blockCount <= ConfigMisc.Storm_Tornado_maxBlocksPerStorm && lastGrabTime < System.currentTimeMillis() && tickGrabCount < ConfigMisc.Storm_Tornado_maxBlocksGrabbedPerTick) {
      lastGrabTime=System.currentTimeMillis() - 5;
      if (blockID != Blocks.snow && blockID != Blocks.glass) {
        EntityMovingBlock mBlock=null;
        if (parWorld.getClosestPlayer(storm.posBaseFormationPos.xCoord,storm.posBaseFormationPos.yCoord,storm.posBaseFormationPos.zCoord,140) != null) {
          if (createEntity) {
            if (blockID == Blocks.grass) {
              mBlock=new EntityMovingBlock(parWorld,tryX,tryY,tryZ,Blocks.dirt,storm);
            }
 else {
              mBlock=new EntityMovingBlock(parWorld,tryX,tryY,tryZ,blockID,storm);
            }
          }
          blockCount++;
          if (mBlock != null) {
            mBlock.setPosition(tryX,tryY,tryZ);
          }
          if (createEntity) {
            if (!parWorld.isRemote) {
              parWorld.spawnEntityInWorld(mBlock);
            }
          }
          tickGrabCount++;
          ripCount++;
          if (ripCount % 10 == 0) {
          }
 else {
          }
          if (mBlock != null) {
            mBlock.type=0;
          }
          seesLight=true;
        }
      }
 else {
        if (blockID == Blocks.glass) {
          parWorld.playSoundEffect(tryX,tryY,tryZ,""String_Node_Str"",5.0F,1.0F);
        }
      }
    }
    if (WeatherUtil.shouldRemoveBlock(blockID)) {
      removeCount++;
      listBlockUpdateQueue.put(pos,new BlockUpdateSnapshot(parWorld.provider.getDimensionId(),Blocks.air.getDefaultState(),state,pos,true));
    }
  }
  return seesLight;
}",0.1475155279503105
81916,"public StormObject getClosestStorm(Vec3 parPos,double maxDist,int severityFlagMin,boolean orRain){
  StormObject closestStorm=null;
  double closestDist=9999999;
  for (int i=0; i < getStormObjects().size(); i++) {
    StormObject storm=getStormObjects().get(i);
    if (storm.isDead)     continue;
    double dist=storm.pos.distanceTo(parPos);
    if (dist < closestDist && dist <= maxDist) {
      if ((storm.attrib_precipitation && orRain) || (severityFlagMin == -1 || storm.levelCurIntensityStage >= severityFlagMin)) {
        closestStorm=storm;
        closestDist=dist;
      }
    }
  }
  return closestStorm;
}","public StormObject getClosestStorm(Vec3 parPos,double maxDist,int severityFlagMin,boolean orRain){
  StormObject closestStorm=null;
  double closestDist=9999999;
  List<StormObject> listStorms=getStormObjects();
  for (int i=0; i < listStorms.size(); i++) {
    StormObject storm=listStorms.get(i);
    if (storm == null || storm.isDead)     continue;
    double dist=storm.pos.distanceTo(parPos);
    if (dist < closestDist && dist <= maxDist) {
      if ((storm.attrib_precipitation && orRain) || (severityFlagMin == -1 || storm.levelCurIntensityStage >= severityFlagMin)) {
        closestStorm=storm;
        closestDist=dist;
      }
    }
  }
  return closestStorm;
}",0.9064191802010828
81917,"@Override public void onEnable(){
  enabled=true;
  modules.values().forEach((module) -> {
    if (module.isEnabled())     return;
    eventManager.fire(new ModuleEnableEvent(this,module),event -> {
      if (!event.isCancelled())       module.onEnable();
    }
);
  }
);
}","@Override public void onEnable(){
  enabled=true;
  modules.values().forEach((module) -> {
    if (module.isEnabled())     return;
    eventManager.fire(new ModuleEnableEvent(this,module),event -> {
      if (!event.isCancelled())       module.enable();
    }
);
  }
);
}",0.9926470588235294
81918,"@Override public void onDisable(){
  enabled=false;
  modules.values().forEach((module) -> {
    if (!module.isEnabled())     return;
    eventManager.fire(new ModuleDisableEvent(this,module),event -> {
      if (!event.isCancelled())       module.onDisable();
    }
);
  }
);
}","@Override public void onDisable(){
  enabled=false;
  modules.values().forEach((module) -> {
    if (!module.isEnabled())     return;
    eventManager.fire(new ModuleDisableEvent(this,module),event -> {
      if (!event.isCancelled())       module.disable();
    }
);
  }
);
}",0.9927797833935018
81919,boolean isEnabled();,public abstract boolean isEnabled();,0.7142857142857143
81920,void onEnable();,"protected void onEnable(){
}",0.6818181818181818
81921,void onDisable();,"protected void onDisable(){
}",0.6956521739130435
81922,"@Override default boolean isEnabled(){
  return instances.getOrDefault(this,false);
}","@Override public boolean isEnabled(){
  return instances.getOrDefault(this,false);
}",0.9467455621301776
81923,"@Override public Collection<ServerModule> setModules(Collection<ServerModule> currentModules,Server server){
  LoggingServerModule loggingModule=new LoggingServerModule(server);
  SchedulerServerModule schedulerModule=new SchedulerServerModule(server);
  PlayerServerModule playerModule=new PlayerServerModule(server);
  currentModules.add(loggingModule);
  currentModules.add(schedulerModule);
  currentModules.add(playerModule);
  System.out.println(""String_Node_Str"" + currentModules.size() + ""String_Node_Str"");
  return currentModules;
}","@Override public Collection<ServerModule> setModules(Collection<ServerModule> currentModules,Server server){
  LoggingModule loggingModule=new LoggingModule(server);
  SchedulerServerModule schedulerModule=new SchedulerServerModule(server);
  PlayerModule playerModule=new PlayerModule(server);
  currentModules.add(loggingModule);
  currentModules.add(schedulerModule);
  currentModules.add(playerModule);
  System.out.println(""String_Node_Str"" + currentModules.size() + ""String_Node_Str"");
  return currentModules;
}",0.9773584905660376
81924,"public static void main(String[] args){
  Server server=new Server(new CoreModuleLoader(),new JarModuleLoader());
  new EventListener<ModuleEnableEvent,ModuleEnableEvent>(){
    @Override public void onEvent(    ModuleEnableEvent event){
    }
  }
.register(ModuleEnableEvent.class,server.getEventManager());
  Runtime.getRuntime().addShutdownHook(new Thread(server::onDisable));
  server.onEnable();
  server.getModule(LoggingServerModule.class).info(""String_Node_Str"");
}","public static void main(String[] args){
  Server server=new Server(new CoreModuleLoader(),new JarModuleLoader());
  new EventListener<ModuleEnableEvent,ModuleEnableEvent>(){
    @Override public void onEvent(    ModuleEnableEvent event){
    }
  }
.register(ModuleEnableEvent.class,server.getEventManager());
  Runtime.getRuntime().addShutdownHook(new Thread(server::onDisable));
  server.onEnable();
  server.getModule(LoggingModule.class).info(""String_Node_Str"");
}",0.9936170212765958
81925,"public Player(InetSocketAddress address,String name,UUID UUID){
  this.address=address;
  this.name=name;
  this.UUID=UUID;
}","public Player(Server server,InetSocketAddress address,String name,UUID UUID){
  this.server=server;
  this.address=address;
  this.name=name;
  this.UUID=UUID;
}",0.8741258741258742
81926,"/** 
 * Opens a new session, and adds the specified   {@linkplain Player} to the list of online {@linkplain Player}s. <br> NOTE: THIS METHOD IS FOR INTERNAL USE ONLY!
 * @param address ({@linkplain InetSocketAddress}): The new   {@linkplain Player}'s   {@linkplain InetSocketAddress}.
 * @param name ({@linkplain String}): The new   {@linkplain Player}'s   {@linkplain String}.
 * @param UUID ({@linkplain UUID}): The new   {@linkplain Player}'s   {@linkplain UUID}.
 * @param provider {{@linkplain NetworkProvider}}: The   {@linkplain Player}'s   {@linkplain NetworkProvider} that is usedto communicate with the client.
 */
public void internalOpenSession(InetSocketAddress address,String name,UUID UUID,NetworkProvider provider){
  players.add(new Player(getServer(),address,name,UUID,provider));
  getServer().getModule(LoggingModule.class).debug(""String_Node_Str"" + address.getHostString() + ""String_Node_Str""+ address.getPort());
}","/** 
 * Opens a new session, and adds the specified   {@linkplain Player} to the list of online {@linkplain Player}s. <br> NOTE: THIS METHOD IS FOR INTERNAL USE ONLY!
 * @param address ({@linkplain InetSocketAddress}): The new   {@linkplain Player}'s   {@linkplain InetSocketAddress}.
 * @param name ({@linkplain String}): The new   {@linkplain Player}'s   {@linkplain String}.
 * @param UUID ({@linkplain UUID}): The new   {@linkplain Player}'s   {@linkplain UUID}.
 * @param provider {{@linkplain NetworkProvider}}: The   {@linkplain Player}'s   {@linkplain NetworkProvider} that is usedto communicate with the client.
 */
public void internalOpenSession(InetSocketAddress address,String name,UUID UUID,NetworkProvider provider){
  players.add(new Player(getServer(),address,name,UUID));
  getServer().getModule(LoggingModule.class).debug(""String_Node_Str"" + address.getHostString() + ""String_Node_Str""+ address.getPort());
}",0.9951690821256038
81927,"@Override public Collection<Module> setModules(Collection<Module> currentModules,Server server){
  LoggingModule loggingModule=new LoggingModule(server);
  SchedulerModule schedulerModule=new SchedulerModule(server);
  PlayerModule playerModule=new PlayerModule(server);
  NetworkModule networkModule=new MessageModule(server,schedulerModule);
  currentModules.add(loggingModule);
  currentModules.add(schedulerModule);
  currentModules.add(playerModule);
  currentModules.add(networkModule);
  System.out.println(""String_Node_Str"" + currentModules.size() + ""String_Node_Str"");
  return currentModules;
}","@Override public Collection<Module> setModules(Collection<Module> currentModules,Server server){
  LoggingModule loggingModule=new LoggingModule(server);
  SchedulerModule schedulerModule=new SchedulerModule(server);
  PlayerModule playerModule=new PlayerModule(server);
  currentModules.add(loggingModule);
  currentModules.add(schedulerModule);
  currentModules.add(playerModule);
  System.out.println(""String_Node_Str"" + currentModules.size() + ""String_Node_Str"");
  return currentModules;
}",0.7978142076502732
81928,"public MessageManager(Server server,NetworkConverter converter){
  super(server);
  this.converter=converter;
  listener=new ServerEventListener<MessageSendEvent>(){
    @Override public void onEvent(    MessageSendEvent event){
      if (!event.isCancelled())       queuePacket(converter.toPacket(event.getMessage()));
    }
  }
.priority(Priority.INTERNAL).post();
}","public MessageManager(Server server,NetworkConverter converter){
  super(server);
  this.converter=converter;
  listener=new ServerEventListener<MessageSendEvent>(){
    @Override public void onEvent(    MessageSendEvent event){
      if (!event.isCancelled())       provide(converter.toPacket(event.getMessage()));
    }
  }
.priority(Priority.INTERNAL).post();
}",0.9754098360655736
81929,"@Override public void dispatch(RawPacket packet){
  getServer().getExecutorService().execute(() -> getServer().getEventManager().fire(new MessageReciveEvent<>(converter.toMessage(packet))));
}","@Override public void dispatch(RawPacket packet){
  getServer().getExecutorService().execute(() -> getServer().getEventManager().fire(new MessageReceiveEvent<>(converter.toMessage(packet))));
}",0.9974025974025974
81930,"@Override public void onEvent(MessageSendEvent event){
  if (!event.isCancelled())   queuePacket(converter.toPacket(event.getMessage()));
}","@Override public void onEvent(MessageSendEvent event){
  if (!event.isCancelled())   provide(converter.toPacket(event.getMessage()));
}",0.9416058394160584
81931,"public PacketEventManager(Server server){
  super(server);
  listener=new ServerEventListener<PacketSendEvent>(){
    @Override public void onEvent(    PacketSendEvent event){
      if (!event.isCancelled())       queuePacket(event.getPacket());
    }
  }
.priority(Priority.INTERNAL).post();
}","public PacketEventManager(Server server){
  super(server);
  listener=new ServerEventListener<PacketSendEvent>(){
    @Override public void onEvent(    PacketSendEvent event){
      if (!event.isCancelled())       provide(event.getPacket());
    }
  }
.priority(Priority.INTERNAL).post();
}",0.9691780821917808
81932,"@Override public void onEvent(PacketSendEvent event){
  if (!event.isCancelled())   queuePacket(event.getPacket());
}","@Override public void onEvent(PacketSendEvent event){
  if (!event.isCancelled())   provide(event.getPacket());
}",0.9304347826086956
81933,"@Override public Collection<ServerModule> setModules(Collection<ServerModule> currentModules,Server server){
  LoggingModule loggingModule=new LoggingModule(server);
  SchedulerServerModule schedulerModule=new SchedulerServerModule(server);
  PlayerModule playerModule=new PlayerModule(server);
  currentModules.add(loggingModule);
  currentModules.add(schedulerModule);
  currentModules.add(playerModule);
  System.out.println(""String_Node_Str"" + currentModules.size() + ""String_Node_Str"");
  return currentModules;
}","@Override public Collection<ServerModule> setModules(Collection<ServerModule> currentModules,Server server){
  LoggingModule loggingModule=new LoggingModule(server);
  SchedulerModule schedulerModule=new SchedulerModule(server);
  PlayerModule playerModule=new PlayerModule(server);
  currentModules.add(loggingModule);
  currentModules.add(schedulerModule);
  currentModules.add(playerModule);
  System.out.println(""String_Node_Str"" + currentModules.size() + ""String_Node_Str"");
  return currentModules;
}",0.98828125
81934,"@Override public void setModules(Map<Class<? extends ServerModule>,ServerModule> modules,Server server){
  File moduleFolder=new File(""String_Node_Str"");
  if (moduleFolder.mkdirs())   System.err.println(""String_Node_Str"");
  File[] files=moduleFolder.listFiles();
  System.err.println(files.length);
  if (files == null || files.length <= 0)   return;
  for (  File file : files) {
    System.err.println(file.getName());
    if (file.getName().endsWith(""String_Node_Str"")) {
      try {
        JarFile jar=new JarFile(file);
        Properties jarProp=getJarProperties(jar);
        URLClassLoader loader=new URLClassLoader(new URL[]{file.toURL()});
        String className=jarProp.getProperty(""String_Node_Str"",""String_Node_Str"");
        try {
          Class clazz=loader.loadClass(className);
          try {
            ServerModule module=(ServerModule)clazz.getConstructor(Server.class).newInstance(server);
            modules.put(module.getClass(),module);
            System.out.println(""String_Node_Str"" + file.getName());
          }
 catch (          ClassCastException e) {
            System.err.println(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
          }
catch (          NoSuchMethodException|InvocationTargetException e) {
            System.err.println(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ e.getClass().getSimpleName()+ ""String_Node_Str""+ e.getMessage());
          }
        }
 catch (        ClassNotFoundException e) {
          if (className.equals(""String_Node_Str"")) {
            System.err.println(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
          }
          System.err.println(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ e.getMessage());
        }
catch (        InstantiationException|IllegalAccessException e) {
          System.err.println(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ e.getClass().getSimpleName()+ ""String_Node_Str""+ e.getMessage());
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void setModules(Map<Class<? extends ServerModule>,ServerModule> modules,Server server){
  File moduleFolder=new File(""String_Node_Str"");
  if (moduleFolder.mkdirs())   System.err.println(""String_Node_Str"");
  File[] files=moduleFolder.listFiles();
  System.err.println(files.length);
  if (files == null || files.length <= 0)   return;
  for (  File file : files) {
    System.err.println(file.getName());
    if (file.getName().endsWith(""String_Node_Str"")) {
      try {
        JarFile jar=new JarFile(file);
        Properties jarProp=getJarProperties(jar);
        URLClassLoader loader=new URLClassLoader(new URL[]{file.toURL()});
        String className=jarProp.getProperty(""String_Node_Str"",""String_Node_Str"");
        try {
          Class clazz=loader.loadClass(className);
          try {
            ServerModule module=(ServerModule)clazz.getConstructor(Server.class).newInstance(server);
            modules.put(module.getClass(),module);
            System.out.println(""String_Node_Str"" + file.getName());
          }
 catch (          ClassCastException e) {
            System.err.println(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
          }
catch (          NoSuchMethodException|InvocationTargetException e) {
            System.err.println(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ e.getClass().getSimpleName()+ ""String_Node_Str""+ e.getMessage());
          }
        }
 catch (        ClassNotFoundException e) {
          if (className.equals(""String_Node_Str"")) {
            System.err.println(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
          }
          System.err.println(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ e.getMessage());
        }
catch (        InstantiationException|IllegalAccessException e) {
          System.err.println(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ e.getClass().getSimpleName()+ ""String_Node_Str""+ e.getMessage());
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}",0.9863538424706728
81935,"public ConfigModule(Server server){
  super(server);
}","public ConfigModule(Server server,FileModule fileModule){
  super(server);
  this.fileModule=fileModule;
}",0.675
81936,"@Override public void dispatch(RawPacket packet){
  getServer().getExecutorService().execute(() -> getServer().getEventManager().fire(new MessageReceiveEvent<>(converter.toMessage(packet))));
}","@Override public void dispatch(RawPacket packet){
  executorModule.getExecutorService().execute(() -> getServer().getEventManager().fire(new MessageReceiveEvent<>(converter.toMessage(packet))));
}",0.9511568123393316
81937,"public MessageModule(Server server,NetworkPipelineHandler handler,NetworkConverter converter){
  super(server,handler);
  this.converter=converter;
  listener=new ServerEventListener<MessageSendEvent>(){
    @Override public void onEvent(    MessageSendEvent event){
      if (!event.isCancelled())       provide(converter.toPacket(event.getMessage()));
    }
  }
.priority(Priority.INTERNAL).post();
}","public MessageModule(Server server,ExecutorModule executorModule,NetworkPipelineHandler handler,NetworkConverter converter){
  super(server,handler);
  this.executorModule=executorModule;
  this.converter=converter;
  listener=new ServerEventListener<MessageSendEvent>(){
    @Override public void onEvent(    MessageSendEvent event){
      if (!event.isCancelled())       provide(converter.toPacket(event.getMessage()));
    }
  }
.priority(Priority.INTERNAL).post();
}",0.9220183486238532
81938,"public SchedulerModule(Server server){
  super(server);
}","public SchedulerModule(Server server,ExecutorModule executorModule){
  super(server);
  this.executorModule=executorModule;
}",0.6263736263736264
81939,"public static void main(String[] args){
  Server server=new Server(new CoreModuleLoader(),new JarModuleLoader());
  new EventListener<ModuleEnableEvent,ModuleEnableEvent>(){
    @Override public void onEvent(    ModuleEnableEvent event){
      System.out.println(event.getModule().getClass().getName());
    }
  }
.register(ModuleEnableEvent.class,server.getEventManager());
  Runtime.getRuntime().addShutdownHook(new Thread(server::onDisable));
  server.onEnable();
  server.getModule(LoggingModule.class).info(""String_Node_Str"");
}","public static void main(String[] args){
  Server server=new Server(new CoreModuleLoader(),new JarModuleLoader());
  new EventListener<ModuleEnableEvent,ModuleEnableEvent>(){
    @Override public void onEvent(    ModuleEnableEvent event){
      System.out.println(event.getModule().getClass().getName());
    }
  }
.register(ModuleEnableEvent.class,server.getEventManager());
  Runtime.getRuntime().addShutdownHook(new Thread(server::disable));
  server.enable();
  server.getModule(LoggingModule.class).info(""String_Node_Str"");
}",0.992467043314501
81940,"public void sendMessage(Message message){
  adapter.sendMessage(message);
}","public void sendMessage(Message message){
  adapter.sendMessage(message,address);
}",0.9493670886075948
81941,"protected void onMessage(MessageHandleEvent event){
  if (players.containsKey(event.getMessage().getAddress().toString())) {
    players.get(event.getMessage().getAddress().toString()).handleMessage(event.getMessage());
    return;
  }
  Player player=new Player(getServer(),event.getMessage().getAddress());
  players.put(player.getAddress().toString(),player);
  player.handleMessage(event.getMessage());
}","protected void onMessage(MessageHandleEvent event){
  if (players.containsKey(event.getMessage().getAddress().toString())) {
    players.get(event.getMessage().getAddress().toString()).handleMessage(event.getMessage());
    return;
  }
  Player player=new Player(getServer(),(InetSocketAddress)event.getMessage().getAddress());
  players.put(player.getAddress().toString(),player);
  player.handleMessage(event.getMessage());
}",0.9293413173652696
81942,"@Override public void run(){
  setName(""String_Node_Str"");
  udp.getServer().getLogger().info(""String_Node_Str"",addr.toString());
  try {
    socket=new DatagramSocket(null);
    socket.setBroadcast(true);
    socket.setSendBufferSize(1024 * 1024 * 8);
    socket.setReceiveBufferSize(1024 * 1024);
    try {
      socket.bind(addr);
    }
 catch (    BindException e) {
      getServer().getLogger().fatal(""String_Node_Str"",addr.toString());
      throw new RuntimeException(e);
    }
    socket.setSoTimeout(0);
    getServer().registerShutdownFunction(new Callable(this,""String_Node_Str"",boolean.class));
    while (running) {
      byte[] buffer=new byte[1024 * 1024];
      DatagramPacket pk=new DatagramPacket(buffer,buffer.length);
      socket.receive(pk);
      pk.setData(Arrays.copyOf(buffer,pk.getLength()));
synchronized (receivedPacketQueue) {
        receivedPacketQueue.add(pk);
      }
    }
    socket.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  setName(""String_Node_Str"");
  udp.getServer().getLogger().info(""String_Node_Str"",addr.toString());
  try {
    socket=new DatagramSocket(null);
    socket.setBroadcast(true);
    socket.setSendBufferSize(1024 * 1024 * 8);
    socket.setReceiveBufferSize(1024 * 1024);
    try {
      socket.bind(addr);
    }
 catch (    BindException e) {
      getServer().getLogger().fatal(""String_Node_Str"",addr.toString());
      throw new RuntimeException(e);
    }
    socket.setSoTimeout(0);
    getServer().registerShutdownFunction(new Callable(this,""String_Node_Str""));
    while (running) {
      byte[] buffer=new byte[1024 * 1024];
      DatagramPacket pk=new DatagramPacket(buffer,buffer.length);
      socket.receive(pk);
      pk.setData(Arrays.copyOf(buffer,pk.getLength()));
synchronized (receivedPacketQueue) {
        receivedPacketQueue.add(pk);
      }
    }
    socket.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
}",0.9933206106870228
81943,"public PeProtocolSession(ProtocolManager mgr,NetworkBridge bridge,SocketAddress addr,PeProtocol pocket){
  this.mgr=mgr;
  this.bridge=bridge;
  this.addr=addr;
  this.pocket=pocket;
  subprotocols=pocket.getSubprotocols();
  try {
    getServer().getTicker().addRepeatingTask(new CallableTask(this,""String_Node_Str"",long.class),10);
  }
 catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
  ACKQueue=new ArrayList<Integer>();
  NACKQueue=new ArrayList<Integer>();
  recoveryQueue=new HashMap<Integer,RaknetSentCustomPacket>();
  currentQueue=new RaknetSentCustomPacket();
  getServer().getLogger().debug(""String_Node_Str"",addr.toString());
}","public PeProtocolSession(ProtocolManager mgr,NetworkBridge bridge,SocketAddress addr,PeProtocol pocket){
  this.mgr=mgr;
  this.bridge=bridge;
  this.addr=addr;
  this.pocket=pocket;
  subprotocols=pocket.getSubprotocols();
  try {
    getServer().getTicker().addRepeatingTask(new CallableTask(this,""String_Node_Str""),10);
  }
 catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
  ACKQueue=new ArrayList<Integer>();
  NACKQueue=new ArrayList<Integer>();
  recoveryQueue=new HashMap<Integer,RaknetSentCustomPacket>();
  currentQueue=new RaknetSentCustomPacket();
  getServer().getLogger().debug(""String_Node_Str"",addr.toString());
}",0.9915449654112222
81944,"public synchronized void update(long ticks){
synchronized (ACKQueue) {
    if (ACKQueue.size() > 0) {
      int[] numbers=new int[ACKQueue.size()];
      int offset=0;
      for (      Integer i : ACKQueue) {
        numbers[offset++]=i;
      }
      ACKPacket ack=new ACKPacket(numbers);
      ack.encode();
      sendPacket(ack.getBuffer());
    }
  }
synchronized (NACKQueue) {
    if (NACKQueue.size() > 0) {
      int[] numbers=new int[NACKQueue.size()];
      int offset=0;
      for (      Integer i : NACKQueue) {
        numbers[offset++]=i;
      }
      NACKPacket nack=new NACKPacket(numbers);
      nack.encode();
      sendPacket(nack.getBuffer());
    }
  }
synchronized (currentQueue) {
    if (currentQueue.packets.size() > 0) {
      currentQueue.seqNumber=currentSequenceNum++;
      currentQueue.send(bridge,getAddress());
      recoveryQueue.put(currentQueue.seqNumber,currentQueue);
      currentQueue.packets.clear();
    }
  }
}","public synchronized void update(){
synchronized (ACKQueue) {
    if (ACKQueue.size() > 0) {
      int[] numbers=new int[ACKQueue.size()];
      int offset=0;
      for (      Integer i : ACKQueue) {
        numbers[offset++]=i;
      }
      ACKPacket ack=new ACKPacket(numbers);
      ack.encode();
      sendPacket(ack.getBuffer());
    }
  }
synchronized (NACKQueue) {
    if (NACKQueue.size() > 0) {
      int[] numbers=new int[NACKQueue.size()];
      int offset=0;
      for (      Integer i : NACKQueue) {
        numbers[offset++]=i;
      }
      NACKPacket nack=new NACKPacket(numbers);
      nack.encode();
      sendPacket(nack.getBuffer());
    }
  }
synchronized (currentQueue) {
    if (currentQueue.packets.size() > 0) {
      currentQueue.seqNumber=currentSequenceNum++;
      currentQueue.send(bridge,getAddress());
      recoveryQueue.put(currentQueue.seqNumber,currentQueue);
      currentQueue.packets.clear();
    }
  }
}",0.9947257383966244
81945,"private void handleCustomPacket(final byte pid,final ByteBuffer bb){
  AntiSpam.act(new Runnable(){
    @Override public void run(){
      byte[] buffer=new byte[bb.remaining()];
      int start=bb.position();
      int end=start + bb.remaining();
      for (int i=start; i < end; i++) {
        buffer[i - start]=bb.get(i);
      }
      StringBuilder sb=new StringBuilder(Integer.toHexString(pid));
      for (      byte b : buffer) {
        String s=Integer.toHexString(b);
        while (s.length() < 2) {
          s=""String_Node_Str"" + s;
        }
        sb.append(s);
      }
    }
  }
,""String_Node_Str"",2000);
  RaknetReceivedCustomPacket cp=new RaknetReceivedCustomPacket(bb);
  acknowledge(cp);
  if (cp.seqNumber - lastSequenceNum == 1) {
    lastSequenceNum=cp.seqNumber;
  }
 else {
synchronized (NACKQueue) {
      for (int i=lastSequenceNum; i < cp.seqNumber; ++i) {
        NACKQueue.add(i);
      }
    }
  }
  for (  RaknetReceivedCustomPacket.ReceivedEncapsulatedPacket pk : cp.packets) {
    handleDataPacket(pk);
  }
}","private void handleCustomPacket(final byte pid,final ByteBuffer bb){
  RaknetReceivedCustomPacket cp=new RaknetReceivedCustomPacket(bb);
  acknowledge(cp);
  if (cp.seqNumber - lastSequenceNum == 1) {
    lastSequenceNum=cp.seqNumber;
  }
 else {
synchronized (NACKQueue) {
      for (int i=lastSequenceNum; i < cp.seqNumber; ++i) {
        NACKQueue.add(i);
      }
    }
  }
  for (  RaknetReceivedCustomPacket.ReceivedEncapsulatedPacket pk : cp.packets) {
    handleDataPacket(pk);
  }
}",0.3000652315720808
81946,"public void start(){
  if (running) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  running=true;
  server.getLogger().info(""String_Node_Str"",Info.SOFTWARE_NAME,Info.VERSION_STRING());
  startTime=System.currentTimeMillis();
  while (running) {
    lastTickMilli=System.currentTimeMillis();
    tick++;
    tick();
    long now=System.currentTimeMillis();
    long diff=now - lastTickMilli;
    loadMeasure=diff * 100D / sleep;
    if (loadMeasure > 80D) {
      AntiSpam.act(new Runnable(){
        @Override public void run(){
          server.getLogger().warning(""String_Node_Str"",loadMeasure);
        }
      }
,ANTISPAM_LOAD_MEASURE_TOO_HIGH,5000);
      continue;
    }
    long need=sleep - diff;
    try {
      Thread.sleep(need);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  for (  RegisteredTask task : tasks) {
    task.getTask().onFinalize();
  }
  lastTickDone=true;
}","public void start(){
  if (running) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  running=true;
  server.getLogger().info(""String_Node_Str"",Info.SOFTWARE_NAME,Info.VERSION_STRING());
  startTime=System.currentTimeMillis();
  while (running) {
    lastTickMilli=System.currentTimeMillis();
    tick++;
    tick();
    long now=System.currentTimeMillis();
    long diff=now - lastTickMilli;
    loadMeasure=diff * 100D / sleep;
    if (loadMeasure > 80D) {
      AntiSpam.act(new Runnable(){
        @Override public void run(){
          server.getLogger().warning(""String_Node_Str"",loadMeasure);
        }
      }
,ANTISPAM_LOAD_MEASURE_TOO_HIGH,5000);
      continue;
    }
    long need=sleep - diff;
    try {
      Thread.sleep(need);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
synchronized (tasks) {
    for (    RegisteredTask task : tasks) {
      task.getTask().onFinalize();
    }
  }
  lastTickDone=true;
}",0.9743321110529072
81947,"private void tick(){
  for (  RegisteredTask task : tasks) {
    task.check(tick);
  }
}","private void tick(){
  RegisteredTask[] taskArray;
synchronized (tasks) {
    taskArray=new RegisteredTask[tasks.size()];
    tasks.toArray(taskArray);
  }
  for (  RegisteredTask task : taskArray) {
    task.check(tick);
  }
}",0.5523809523809524
81948,"public Callable(Object object,String method,Class<?>... types) throws NoSuchMethodException {
  this.object=object;
  this.method=object.getClass().getMethod(method,types);
  if (this.method.getExceptionTypes().length > 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public Callable(Object object,String method) throws NoSuchMethodException {
  this.object=object;
  this.method=object.getClass().getMethod(method);
  for (  Class<?> exType : this.method.getExceptionTypes()) {
    try {
      exType.asSubclass(RuntimeException.class);
    }
 catch (    ClassCastException e) {
      try {
        exType.asSubclass(Error.class);
      }
 catch (      ClassCastException e2) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
}",0.3120204603580562
81949,"public Server build(){
  validate(port != -1,""String_Node_Str"");
  validate(serverName != null,""String_Node_Str"");
  validate(out != null,""String_Node_Str"");
  validate(includePath != null,""String_Node_Str"");
  validate(playerDb != null,""String_Node_Str"");
  return new Server(address,port,serverName,out,playerDb);
}","public Server build(){
  validate(port != -1,""String_Node_Str"");
  validate(serverName != null,""String_Node_Str"");
  validate(out != null,""String_Node_Str"");
  validate(includePath != null,""String_Node_Str"");
  return new Server(address,port,serverName,out,playerDb);
}",0.7610921501706485
81950,"private void replyToRequest2(ByteBuffer bb){
  RaknetOpenConnectionRequest2 req2=new RaknetOpenConnectionRequest2(bb);
  clientId=req2.clientId;
  mtu=req2.mtu;
  RaknetOpenConnectionReply2 rep2=new RaknetOpenConnectionReply2(req2.magic,req2.serverPort,mtu);
  sendPacket(rep2.getBuffer());
}","private void replyToRequest2(ByteBuffer bb){
  getServer().getLogger().debug(""String_Node_Str"");
  RaknetOpenConnectionRequest2 req2=new RaknetOpenConnectionRequest2(bb);
  clientId=req2.clientId;
  mtu=req2.mtu;
  RaknetOpenConnectionReply2 rep2=new RaknetOpenConnectionReply2(req2.magic,req2.serverPort,mtu);
  sendPacket(rep2.getBuffer());
  getServer().getLogger().buffer(""String_Node_Str"",rep2.getBuffer(),""String_Node_Str"");
}",0.8066298342541437
81951,"@Override public void handlePacket(WrappedPacket pk){
  ByteBuffer bb=pk.bb();
  byte pid=bb.get();
  if (RAKNET_CUSTOM_PACKET_MIN <= pid && pid <= RAKNET_CUSTOM_PACKET_MAX) {
    handleCustomPacket(bb);
  }
 else {
switch (pid) {
case RAKNET_BROADCAST_PING_1:
case RAKNET_BROADCAST_PING_2:
      replyToBroadcastPing(bb);
    break;
case RAKNET_OPEN_CONNECTION_REQUEST_1:
  replyToRequest1(bb);
break;
case RAKNET_OPEN_CONNECTION_REQUEST_2:
replyToRequest2(bb);
break;
}
}
}","@Override public void handlePacket(WrappedPacket pk){
  ByteBuffer bb=pk.bb();
  byte pid=bb.get();
  getServer().getLogger().debug(""String_Node_Str"" + pid + ""String_Node_Str""+ addr.toString());
  if (RAKNET_CUSTOM_PACKET_MIN <= pid && pid <= RAKNET_CUSTOM_PACKET_MAX) {
    handleCustomPacket(bb);
  }
 else {
switch (pid) {
case RAKNET_BROADCAST_PING_1:
case RAKNET_BROADCAST_PING_2:
      replyToBroadcastPing(bb);
    break;
case RAKNET_OPEN_CONNECTION_REQUEST_1:
  replyToRequest1(bb);
break;
case RAKNET_OPEN_CONNECTION_REQUEST_2:
replyToRequest2(bb);
break;
}
}
}",0.9090909090909092
81952,"public RaknetOpenConnectionReply2(byte[] magic,short port,short mtu){
  bb=ByteBuffer.allocate(30);
  bb.put(magic);
  bb.putLong(SERVER_ID);
  bb.putShort(port);
  bb.putShort(mtu);
  bb.put((byte)0);
}","public RaknetOpenConnectionReply2(byte[] magic,short port,short mtu){
  bb=ByteBuffer.allocate(30);
  bb.put(RAKNET_OPEN_CONNECTION_REPLY_2);
  bb.put(magic);
  bb.putLong(SERVER_ID);
  bb.putShort(port);
  bb.putShort(mtu);
  bb.put((byte)0);
}",0.90625
81953,"public ReceivedEncapsulatedPacket(ByteBuffer bb){
  byte flag=bb.get();
  reliability=(byte)(flag >> 5);
  hasSplit=(flag & 0x10) == 0x10;
  int length=((bb.getShort() + 7) >> 3);
  if (Utils.inArray(reliability,RAKNET_HAS_MESSAGE_RELIABILITIES)) {
    messageIndex=Utils.readLTriad(bb);
  }
  if (Utils.inArray(reliability,RAKNET_HAS_ORDER_RELIABILITIES)) {
    orderIndex=Utils.readLTriad(bb);
    orderChannel=bb.get();
  }
  if (hasSplit) {
    splitCount=bb.getInt();
    splitId=bb.getShort();
    splitIndex=bb.getInt();
  }
  buffer=new byte[length];
  bb.get(buffer);
}","public ReceivedEncapsulatedPacket(ByteBuffer bb){
  byte flag=bb.get();
  reliability=(byte)(flag >> 5);
  hasSplit=(flag & 0x10) == 0x10;
  int length=bb.getShort() * 8;
  if (Utils.inArray(reliability,RAKNET_HAS_MESSAGE_RELIABILITIES)) {
    messageIndex=Utils.readLTriad(bb);
  }
  if (Utils.inArray(reliability,RAKNET_HAS_ORDER_RELIABILITIES)) {
    orderIndex=Utils.readLTriad(bb);
    orderChannel=bb.get();
  }
  if (hasSplit) {
    splitCount=bb.getInt();
    splitId=bb.getShort();
    splitIndex=bb.getInt();
  }
  buffer=new byte[length];
  bb.get(buffer);
}",0.986922406277245
81954,"@Override public void run(){
  setName(""String_Node_Str"");
  udp.getServer().getLogger().info(""String_Node_Str"",addr.toString());
  try {
    socket=new DatagramSocket(null);
    socket.setBroadcast(true);
    socket.setSendBufferSize(1024 * 1024 * 8);
    socket.setReceiveBufferSize(1024 * 1024);
    try {
      socket.bind(addr);
    }
 catch (    BindException e) {
      getServer().getLogger().fatal(""String_Node_Str"",addr.toString());
      throw new RuntimeException(e);
    }
    socket.setSoTimeout(0);
    getServer().registerShutdownFunction(new Callable(this,""String_Node_Str"",boolean.class));
    while (running) {
      DatagramPacket pk=new DatagramPacket(new byte[1024 * 1024],1024 * 1024);
      socket.receive(pk);
synchronized (receivedPacketQueue) {
        receivedPacketQueue.add(pk);
      }
    }
    socket.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  setName(""String_Node_Str"");
  udp.getServer().getLogger().info(""String_Node_Str"",addr.toString());
  try {
    socket=new DatagramSocket(null);
    socket.setBroadcast(true);
    socket.setSendBufferSize(1024 * 1024 * 8);
    socket.setReceiveBufferSize(1024 * 1024);
    try {
      socket.bind(addr);
    }
 catch (    BindException e) {
      getServer().getLogger().fatal(""String_Node_Str"",addr.toString());
      throw new RuntimeException(e);
    }
    socket.setSoTimeout(0);
    getServer().registerShutdownFunction(new Callable(this,""String_Node_Str"",boolean.class));
    while (running) {
      byte[] buffer=new byte[1024 * 1024];
      DatagramPacket pk=new DatagramPacket(buffer,buffer.length);
      socket.receive(pk);
      pk.setData(Arrays.copyOf(buffer,pk.getLength()));
synchronized (receivedPacketQueue) {
        receivedPacketQueue.add(pk);
      }
    }
    socket.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
}",0.9110671936758892
81955,"/** 
 * Package internal constructor used in   {@linkplain ServerBuilder#build()} internally
 * @see ServerBuilder#build()
 * @param address
 * @param port
 * @param out
 */
Server(InetAddress address,int port,String serverName,ConsoleOut out){
  Thread.currentThread().setName(""String_Node_Str"");
  this.address=address;
  this.port=port;
  this.serverName=serverName;
  logger=new Logger(out);
  ticker=new ServerTicker(this,50);
  bridges=new NetworkBridgeManager(this);
}","/** 
 * Package internal constructor used in   {@linkplain ServerBuilder#build()} internally
 * @see ServerBuilder#build()
 * @param address
 * @param port
 * @param out
 */
Server(InetAddress address,int port,String serverName,ConsoleOut out){
  Thread.currentThread().setName(""String_Node_Str"");
  this.address=address;
  this.port=port;
  this.serverName=serverName;
  logger=new Logger(out);
  ticker=new ServerTicker(this,50);
  protocols=new ProtocolManager(this);
  protocols.addProtocol(new PocketProtocol(this));
  bridges=new NetworkBridgeManager(this);
}",0.9134615384615384
81956,"@Override public WrappedPacket receive(){
  DatagramPacket dp=socket.receive();
  if (dp != null) {
    final byte[] data=dp.getData();
    AntiSpam.act(new Runnable(){
      @Override public void run(){
        mgr.getServer().getLogger().buffer(""String_Node_Str"",data,""String_Node_Str"");
      }
    }
,""String_Node_Str"",2000);
    WrappedPacket wp=new WrappedPacket(data,dp.getSocketAddress(),this);
    return wp;
  }
  return null;
}","@Override public WrappedPacket receive(){
  DatagramPacket dp=socket.receive();
  if (dp != null) {
    byte[] data=dp.getData();
    WrappedPacket wp=new WrappedPacket(data,dp.getSocketAddress(),this);
    return wp;
  }
  return null;
}",0.4408284023668639
81957,"public boolean send(byte[] buffer,SocketAddress addr){
  mgr.getServer().getLogger().info(""String_Node_Str"",Arrays.toString(buffer));
  return socket.send(buffer,addr);
}","public boolean send(byte[] buffer,SocketAddress addr){
  mgr.getServer().getLogger().buffer(""String_Node_Str"",buffer,""String_Node_Str"");
  mgr.getServer().getLogger().debug(new String(buffer));
  return socket.send(buffer,addr);
}",0.785
81958,"public void handlePacket(WrappedPacket pk){
  if (sessions.containsKey(pk.getAddress())) {
    sessions.get(pk.getAddress()).handlePacket(pk);
  }
 else {
    for (    Protocol ptc : protocols) {
      ProtocolSession ps=ptc.openSession(pk);
      if (ps != null) {
        sessions.put(pk.getAddress(),ps);
        break;
      }
    }
  }
}","public void handlePacket(WrappedPacket pk){
  System.out.println(""String_Node_Str"" + pk.getAddress().toString());
  if (sessions.containsKey(pk.getAddress())) {
    getServer().getLogger().debug(""String_Node_Str"",pk.getAddress());
    sessions.get(pk.getAddress()).handlePacket(pk);
  }
 else {
    for (    Protocol ptc : protocols) {
      ProtocolSession ps=ptc.openSession(pk);
      if (ps != null) {
        getServer().getLogger().debug(""String_Node_Str"",pk.getAddress());
        sessions.put(pk.getAddress(),ps);
        break;
      }
    }
  }
}",0.734966592427617
81959,"@Override public ProtocolSession openSession(WrappedPacket pk){
  if (pk.getBridge() instanceof UDPBridge) {
    byte pid=pk.bb().get(0);
    if (pid == RAKNET_BROADCAST_PING_1 || pid == RAKNET_BROADCAST_PING_2) {
      advertize(pk);
      return null;
    }
 else     if (pid == RAKNET_OPEN_CONNECTION_REQUEST_1) {
      PocketProtocolSession session=new PocketProtocolSession(protocols,pk.getBridge(),pk.getAddress());
      session.handlePacket(pk);
      return session;
    }
  }
  return null;
}","@Override public ProtocolSession openSession(WrappedPacket pk){
  System.out.println(""String_Node_Str"" + pk.getAddress().toString());
  if (pk.getBridge() instanceof UDPBridge) {
    byte pid=pk.bb().get(0);
    if (pid == RAKNET_BROADCAST_PING_1 || pid == RAKNET_BROADCAST_PING_2) {
      advertize(pk);
      return null;
    }
 else     if (pid == RAKNET_OPEN_CONNECTION_REQUEST_1) {
      PocketProtocolSession session=new PocketProtocolSession(protocols,pk.getBridge(),pk.getAddress());
      session.handlePacket(pk);
      return session;
    }
  }
  return null;
}",0.9348230912476724
81960,"private void advertize(WrappedPacket pk){
}","private void advertize(WrappedPacket pk){
  System.out.println(""String_Node_Str"" + pk.getAddress().toString());
  RaknetUnconnectedPing ping=new RaknetUnconnectedPing(pk.bb());
  RaknetUnconnectedPong pong=new RaknetUnconnectedPong(ping.pingId,SERVER_ID,ping.magic,server.getServerName());
  pk.getBridge().send(pong.getBuffer(),pk.getAddress());
}",0.2199488491048593
81961,"public RaknetUnconnectedPong(long ping,long server,byte[] magic,String name){
  name=""String_Node_Str"" + name;
  bb=ByteBuffer.allocate(30);
  bb.putLong(ping);
  bb.putLong(server);
  bb.put(magic);
  bb.putShort((short)name.length());
  bb.put(name.getBytes());
}","public RaknetUnconnectedPong(long ping,long server,byte[] magic,String name){
  name=""String_Node_Str"" + name;
  byte[] nameBytes=name.getBytes();
  bb=ByteBuffer.allocate(35 + nameBytes.length);
  bb.put(RAKNET_BROADCAST_PONG_1);
  bb.putLong(ping);
  bb.putLong(server);
  bb.put(magic);
  bb.putShort((short)nameBytes.length);
  bb.put(nameBytes);
}",0.7617504051863857
81962,"public int getPort(){
  return port;
}","int getPort(){
  return port;
}",0.8985507246376812
81963,"public void testDoctypeEnabled() throws Exception {
  TinyServer server=new TinyServer();
  server.start();
  Thread.sleep(500);
  try {
    StringBuffer xml=new StringBuffer(512);
    xml.append(""String_Node_Str"");
    xml.append(""String_Node_Str"" + server.getPort() + ""String_Node_Str"");
    xml.append(""String_Node_Str"");
    XMLUtil.stringToDocument(xml.toString(),true,true,false);
    Assert.assertTrue(server.connected);
  }
  finally {
    server.kill();
  }
}","public void testDoctypeEnabled() throws Exception {
  TinyServer server=new TinyServer();
  server.start();
  while (server.port == 0) {
    Thread.sleep(100);
  }
  try {
    String xml=""String_Node_Str"" + ""String_Node_Str"" + server.getPort() + ""String_Node_Str""+ ""String_Node_Str"";
    XMLUtil.stringToDocument(xml,true,true,false);
    Assert.assertTrue(server.connected);
  }
  finally {
    server.kill();
  }
}",0.8484162895927602
81964,"@Override public void run(){
  try {
    serverSocket=new ServerSocket(0);
    port=serverSocket.getLocalPort();
    clientSocket=serverSocket.accept();
    connected=true;
    BufferedReader reader=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
    while (reader.ready()) {
      String line=reader.readLine();
      System.out.println(line);
    }
    OutputStream out=clientSocket.getOutputStream();
    out.write(""String_Node_Str"".getBytes());
    out.write(""String_Node_Str"".getBytes());
    out.write(""String_Node_Str"".getBytes());
    out.write((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").getBytes());
    out.flush();
  }
 catch (  Exception e) {
  }
 finally {
    try {
      clientSocket.getOutputStream().close();
    }
 catch (    Exception e) {
    }
    try {
      clientSocket.getOutputStream().close();
    }
 catch (    Exception e) {
    }
  }
}","@Override public void run(){
  try {
    serverSocket=new ServerSocket(0);
    port=serverSocket.getLocalPort();
    clientSocket=serverSocket.accept();
    connected=true;
    BufferedReader reader=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
    while (reader.ready()) {
      String line=reader.readLine();
      System.out.println(line);
    }
    OutputStream out=clientSocket.getOutputStream();
    out.write(""String_Node_Str"".getBytes());
    out.write(""String_Node_Str"".getBytes());
    out.write(""String_Node_Str"".getBytes());
    out.write((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").getBytes());
    out.flush();
    Thread.sleep(100);
  }
 catch (  Exception e) {
  }
 finally {
    try {
      clientSocket.getOutputStream().close();
    }
 catch (    Exception e) {
    }
    try {
      clientSocket.getOutputStream().close();
    }
 catch (    Exception e) {
    }
  }
}",0.9874932028276238
81965,"public void kill(){
  try {
    serverSocket.close();
  }
 catch (  IOException e) {
  }
}","void kill(){
  try {
    serverSocket.close();
  }
 catch (  IOException e) {
  }
}",0.9595375722543352
81966,"public void testDoctypeDisabled() throws Exception {
  TinyServer server=new TinyServer();
  server.start();
  Thread.sleep(500);
  try {
    StringBuffer xml=new StringBuffer(512);
    xml.append(""String_Node_Str"");
    xml.append(""String_Node_Str"" + server.getPort() + ""String_Node_Str"");
    xml.append(""String_Node_Str"");
    try {
      XMLUtil.stringToDocument(xml.toString(),true,false,false);
      Assert.fail(""String_Node_Str"");
    }
 catch (    MessageException me) {
      Assert.assertTrue(me.getMessage().contains(""String_Node_Str""));
    }
    Assert.assertFalse(server.connected);
  }
  finally {
    server.kill();
  }
}","public void testDoctypeDisabled() throws Exception {
  TinyServer server=new TinyServer();
  server.start();
  while (server.port == 0) {
    Thread.sleep(100);
  }
  try {
    StringBuilder xml=new StringBuilder(512);
    xml.append(""String_Node_Str"");
    xml.append(""String_Node_Str"");
    xml.append(server.getPort()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"");
    try {
      XMLUtil.stringToDocument(xml.toString(),true,false,false);
      Assert.fail(""String_Node_Str"");
    }
 catch (    MessageException me) {
      Assert.assertTrue(me.getMessage().contains(""String_Node_Str""));
    }
    Assert.assertFalse(server.connected);
  }
  finally {
    server.kill();
  }
}",0.9400299850074962
81967,"/** 
 * Removes all messages in the queue targeted to this specific MessageClient subscription(s) and returns them to be sent to the client. Overrides should be careful to only return messages for the specified MessageClient.
 * @param messageClient The specific MessageClient to return messages for.
 * @param outboundQueue The queue of outbound messages.
 * @return A FlushResult containing the messages that have been removed from the outbound queueto be written to the network for this MessageClient.
 */
public FlushResult flush(MessageClient messageClient,List<Message> outboundQueue){
  FlushResult flushResult=new FlushResult();
  List<Message> messagesToFlush=null;
  for (Iterator<Message> iter=outboundQueue.iterator(); iter.hasNext(); ) {
    Message message=iter.next();
    if (messageClient == null || (message.getClientId().equals(messageClient.getClientId()))) {
      if (isMessageExpired(message)) {
        iter.remove();
        continue;
      }
      messageClient=messageClient == null ? getMessageClient(message) : messageClient;
      ThrottleResult throttleResult=throttleOutgoingDestinationLevel(messageClient,message,false);
      Result result=throttleResult.getResult();
      if (Result.OK == result) {
        throttleResult=throttleOutgoingClientLevel(messageClient,message,false);
        result=throttleResult.getResult();
        if (Result.OK == result) {
          updateMessageFrequencyOutgoing(messageClient,message);
          if (messagesToFlush == null)           messagesToFlush=new ArrayList<Message>();
          messagesToFlush.add(message);
        }
      }
      iter.remove();
    }
  }
  flushResult.setMessages(messagesToFlush);
  return flushResult;
}","/** 
 * Removes all messages in the queue targeted to this specific MessageClient subscription(s) and returns them to be sent to the client. Overrides should be careful to only return messages for the specified MessageClient.
 * @param messageClient The specific MessageClient to return messages for.
 * @param outboundQueue The queue of outbound messages.
 * @return A FlushResult containing the messages that have been removed from the outbound queueto be written to the network for this MessageClient.
 */
public FlushResult flush(MessageClient messageClient,List<Message> outboundQueue){
  FlushResult flushResult=new FlushResult();
  List<Message> messagesToFlush=null;
  for (Iterator<Message> iter=outboundQueue.iterator(); iter.hasNext(); ) {
    Message message=iter.next();
    if (messageClient == null || (message.getClientId().equals(messageClient.getClientId()))) {
      if (isMessageExpired(message)) {
        iter.remove();
        continue;
      }
      MessageClient messageClientForCurrentMessage=messageClient == null ? getMessageClient(message) : messageClient;
      ThrottleResult throttleResult=throttleOutgoingDestinationLevel(messageClientForCurrentMessage,message,false);
      Result result=throttleResult.getResult();
      if (Result.OK == result) {
        throttleResult=throttleOutgoingClientLevel(messageClientForCurrentMessage,message,false);
        result=throttleResult.getResult();
        if (Result.OK == result) {
          updateMessageFrequencyOutgoing(messageClientForCurrentMessage,message);
          if (messagesToFlush == null)           messagesToFlush=new ArrayList<Message>();
          messagesToFlush.add(message);
        }
      }
      iter.remove();
    }
  }
  flushResult.setMessages(messagesToFlush);
  return flushResult;
}",0.9690898683457356
81968,"/** 
 * Uses the current DocumentBuilderFactory to converts a String representation of XML into a Document.
 * @param xml XML serialized as a String
 * @param nameSpaceAware determines whether the constructed Documentis name-space aware
 * @return Document
 */
public static Document stringToDocument(String xml,boolean nameSpaceAware){
  ClassUtil.validateCreation(Document.class);
  Document document=null;
  try {
    if (xml != null) {
      StringReader reader=new StringReader(xml);
      InputSource input=new InputSource(reader);
      DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
      factory.setNamespaceAware(nameSpaceAware);
      factory.setValidating(false);
      DocumentBuilder builder=factory.newDocumentBuilder();
      document=builder.parse(input);
    }
  }
 catch (  Exception ex) {
    throw new MessageException(""String_Node_Str"" + ex.getMessage());
  }
  return document;
}","/** 
 * Uses the current DocumentBuilderFactory to converts a String representation of XML into a Document.
 * @param xml XML serialized as a String
 * @param nameSpaceAware determines whether the constructed Documentis name-space aware
 * @return Document
 */
public static Document stringToDocument(String xml,boolean nameSpaceAware){
  ClassUtil.validateCreation(Document.class);
  Document document=null;
  try {
    if (xml != null) {
      StringReader reader=new StringReader(xml);
      InputSource input=new InputSource(reader);
      DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
      factory.setFeature(""String_Node_Str"",false);
      factory.setFeature(""String_Node_Str"",false);
      factory.setXIncludeAware(false);
      factory.setExpandEntityReferences(false);
      factory.setNamespaceAware(nameSpaceAware);
      factory.setValidating(false);
      DocumentBuilder builder=factory.newDocumentBuilder();
      document=builder.parse(input);
    }
  }
 catch (  Exception ex) {
    throw new MessageException(""String_Node_Str"" + ex.getMessage());
  }
  return document;
}",0.9072164948453608
81969,"@Test public void testIsRecognizedForKnownCommandWithInvalidArguments(){
  boolean recognized=interpreter.isRecognized(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertThat(recognized).isTrue();
}","@Test public void testIsRecognizedForKnownCommandWithInvalidArguments(){
  GitCommandInterpreter interpreter=createInterpreter();
  boolean recognized=interpreter.isRecognized(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertThat(recognized).isTrue();
}",0.8810020876826722
81970,"@Test @RunInThread public void testExecuteFromBackgroundThread(){
  String executionResult=interpreter.execute(""String_Node_Str"");
  assertThat(executionResult).isNull();
}","@Test @RunInThread public void testExecuteFromBackgroundThread(){
  GitCommandInterpreter interpreter=createInterpreter();
  String executionResult=interpreter.execute(""String_Node_Str"");
  assertThat(executionResult).isNull();
}",0.85785536159601
81971,"@Test public void testIsRecognizedForUnknownCommand(){
  boolean recognized=interpreter.isRecognized(""String_Node_Str"");
  assertThat(recognized).isFalse();
}","@Test public void testIsRecognizedForUnknownCommand(){
  GitCommandInterpreter interpreter=createInterpreter();
  boolean recognized=interpreter.isRecognized(""String_Node_Str"");
  assertThat(recognized).isFalse();
}",0.8471849865951743
81972,"@Test @RunInThread public void testIsRecognizedFromBackgroundThread(){
  boolean recognized=interpreter.isRecognized(""String_Node_Str"");
  assertThat(recognized).isTrue();
}","@Test @RunInThread public void testIsRecognizedFromBackgroundThread(){
  GitCommandInterpreter interpreter=createInterpreter();
  boolean recognized=interpreter.isRecognized(""String_Node_Str"");
  assertThat(recognized).isTrue();
}",0.858560794044665
81973,"@Test public void testExecuteForKnownCommand(){
  String executionResult=interpreter.execute(""String_Node_Str"");
  assertThat(executionResult).isNull();
}","@Test public void testExecuteForKnownCommand(){
  GitCommandInterpreter interpreter=createInterpreter();
  String executionResult=interpreter.execute(""String_Node_Str"");
  assertThat(executionResult).isNull();
}",0.8438356164383561
81974,"@Test public void testIsRecognizedForKnownCommand(){
  boolean recognized=interpreter.isRecognized(""String_Node_Str"");
  assertThat(recognized).isTrue();
}","@Test public void testIsRecognizedForKnownCommand(){
  GitCommandInterpreter interpreter=createInterpreter();
  boolean recognized=interpreter.isRecognized(""String_Node_Str"");
  assertThat(recognized).isTrue();
}",0.8446866485013624
81975,"@Before public void setUp(){
  File gitDirectory=configurer.createRepositories(""String_Node_Str"")[0];
  CompositeRepositoryProvider repositoryProvider=createWithSingleChildProvider(gitDirectory);
  interpreter=new GitCommandInterpreter(mock(ConsoleOutput.class),repositoryProvider);
}","@Before public void setUp(){
  File gitDirectory=configurer.createRepositories(""String_Node_Str"")[0];
  repositoryProvider=createWithSingleChildProvider(gitDirectory);
}",0.7461368653421634
81976,"@Test public void testExecuteForKnownCommandWithInvalidArguments(){
  String executionResult=interpreter.execute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertThat(executionResult).isNull();
}","@Test public void testExecuteForKnownCommandWithInvalidArguments(){
  GitCommandInterpreter interpreter=createInterpreter();
  String executionResult=interpreter.execute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertThat(executionResult).isNull();
}",0.8805031446540881
81977,"private String[] resolveAlias(String[] commandLine){
  String[] result=commandLine.clone();
  if (result.length >= 1) {
    AliasConfig aliasConfig=new AliasConfig(commandExecutor.getRepositoryLocation());
    String command=aliasConfig.getCommand(commandLine[0]);
    if (command != null) {
      result[0]=command;
    }
  }
  return result;
}","private String[] resolveAlias(String[] commandLine){
  String[] result=commandLine.clone();
  if (result.length >= 1 && commandExecutor.getRepositoryLocation() != null) {
    AliasConfig aliasConfig=new AliasConfig(commandExecutor.getRepositoryLocation());
    String command=aliasConfig.getCommand(commandLine[0]);
    if (command != null) {
      result[0]=command;
    }
  }
  return result;
}",0.8016194331983806
81978,"public InputObserver(ConsoleIoProvider consoleIoProvider,ConsoleComponentFactory consoleComponentFactory){
  this.consoleComponentFactory=consoleComponentFactory;
  this.consolePromptOutput=createConsoleOutput(consoleIoProvider.getPromptStream(),consoleIoProvider);
  this.consoleStandardOutput=createConsoleOutput(consoleIoProvider.getOutputStream(),consoleIoProvider);
  this.consoleErrorOutput=createConsoleOutput(consoleIoProvider.getErrorStream(),consoleIoProvider);
  this.consoleInput=new Input(consoleIoProvider);
  this.executorService=Executors.newSingleThreadExecutor();
}","public InputObserver(ConsoleIoProvider consoleIoProvider,ConsoleComponentFactory consoleComponentFactory){
  this.consoleComponentFactory=consoleComponentFactory;
  this.consolePromptOutput=Output.create(consoleIoProvider.getPromptStream(),consoleIoProvider);
  this.consoleStandardOutput=Output.create(consoleIoProvider.getOutputStream(),consoleIoProvider);
  this.consoleErrorOutput=Output.create(consoleIoProvider.getErrorStream(),consoleIoProvider);
  this.consoleInput=new Input(consoleIoProvider);
  this.executorService=Executors.newSingleThreadExecutor();
}",0.9163763066202092
81979,"public Output(OutputStream outputStream,Charset encoding,String lineDelimiter){
  this.outputStream=outputStream;
  this.encoding=encoding;
  this.lineDelimiter=lineDelimiter;
}","Output(OutputStream outputStream,Charset encoding,String lineDelimiter){
  this.outputStream=outputStream;
  this.encoding=encoding;
  this.lineDelimiter=lineDelimiter;
}",0.9798270893371758
81980,"private static File createRepository(File file) throws GitAPIException {
  Git git=Git.init().setDirectory(file).call();
  File result=git.getRepository().getDirectory();
  git.getRepository().close();
  return result;
}","private static File createRepository(File file) throws GitAPIException, IOException {
  Git git=Git.init().setDirectory(file).call();
  File result=git.getRepository().getDirectory();
  git.getRepository().close();
  return result.getCanonicalFile();
}",0.9322033898305084
81981,"@Test public void testGetRepositoryLocations() throws GitAPIException {
  File repositoryDir=createRepository(tempFolder.getRoot());
  repositoryUtil.addConfiguredRepository(repositoryDir);
  File[] repositoryLocations=new EGitRepositoryProvider().getRepositoryLocations();
  assertThat(repositoryLocations).contains(repositoryDir);
}","@Test public void testGetRepositoryLocations() throws Exception {
  File repositoryDir=createRepository(tempFolder.getRoot());
  repositoryUtil.addConfiguredRepository(repositoryDir);
  File[] repositoryLocations=new EGitRepositoryProvider().getRepositoryLocations();
  assertThat(repositoryLocations).contains(repositoryDir);
}",0.9909365558912386
81982,"/** 
 * Make the <tt>JireconRecorderImpl</tt> ready to start recording media streams.
 * @throws Exception if some operation failed and thepreparation is aborted.
 */
private void prepareRecorders() throws Exception {
  logger.debug(""String_Node_Str"");
  for (  Entry<MediaType,RTPTranslator> e : rtpTranslators.entrySet()) {
    Recorder recorder=mediaService.createRecorder(e.getValue());
    recorders.put(e.getKey(),recorder);
  }
}","/** 
 * Make the <tt>JireconRecorderImpl</tt> ready to start recording media streams.
 * @throws Exception if some operation failed and thepreparation is aborted.
 */
private void prepareRecorders() throws Exception {
  logger.debug(""String_Node_Str"");
  for (  Entry<MediaType,RTPTranslator> e : rtpTranslators.entrySet()) {
    Recorder recorder=mediaService.createRecorder(e.getValue());
    recorders.put(e.getKey(),recorder);
  }
  updateSynchronizers();
}",0.9721293199554067
81983,"/** 
 * {@inheritDoc}
 */
public void setEndpoints(List<EndpointInfo> newEndpoints){
synchronized (endpoints) {
    endpoints=newEndpoints;
    for (    EndpointInfo endpoint : endpoints) {
      final String endpointId=endpoint.getId();
      for (      Entry<MediaType,Long> ssrc : endpoint.getSsrcs().entrySet()) {
        Recorder recorder=recorders.get(ssrc.getKey());
        Synchronizer synchronizer=recorder.getSynchronizer();
        synchronizer.setEndpoint(ssrc.getValue(),endpointId);
        logger.info(""String_Node_Str"" + endpointId + ""String_Node_Str""+ ssrc.getKey()+ ""String_Node_Str""+ ssrc.getValue());
      }
    }
  }
}","/** 
 * {@inheritDoc}
 */
public void setEndpoints(List<EndpointInfo> newEndpoints){
synchronized (endpoints) {
    endpoints=newEndpoints;
    updateSynchronizers();
  }
}",0.4157441574415744
81984,"/** 
 * {@inheritDoc}
 */
@Override public PacketExtension parseExtension(XmlPullParser parser) throws Exception {
  MediaExtension result=new MediaExtension();
  boolean done=false;
  while (!done) {
switch (parser.next()) {
case XmlPullParser.END_TAG:
{
        String name=parser.getName();
        if (MediaExtension.ELEMENT_NAME.equals(name)) {
          done=true;
        }
        break;
      }
case XmlPullParser.START_TAG:
{
      int count=parser.getAttributeCount();
      if (count > 0) {
        String type=parser.getAttributeValue(0);
        String ssrc=parser.getAttributeValue(1);
        String direction=parser.getAttributeValue(2);
        if (type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"")) {
          result.setSsrc(type,ssrc);
          result.setDirection(type,direction);
        }
      }
      break;
    }
case XmlPullParser.TEXT:
  break;
}
}
return result;
}","/** 
 * {@inheritDoc}
 */
@Override public PacketExtension parseExtension(XmlPullParser parser) throws Exception {
  MediaExtension result=new MediaExtension();
  boolean done=false;
  while (!done) {
switch (parser.next()) {
case XmlPullParser.END_TAG:
{
        String name=parser.getName();
        if (MediaExtension.ELEMENT_NAME.equals(name)) {
          done=true;
        }
        break;
      }
case XmlPullParser.START_TAG:
{
      int count=parser.getAttributeCount();
      if (count > 0) {
        String type=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
        String ssrc=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
        String direction=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
        if (type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"")) {
          result.setSsrc(type,ssrc);
          result.setDirection(type,direction);
        }
      }
      break;
    }
case XmlPullParser.TEXT:
  break;
}
}
return result;
}",0.944954128440367
81985,"/** 
 * Find the specified <tt>MediaType<tt> ssrc which belongs to some endpont. <strong>Warning:</strong> An endpoint means a media stream source, each media stream source generally contains two ssrc, one for audio stream and one for video stream.
 * @param endpointId indicates an endpoint
 * @param mediaType is the <tt>MediaType</tt> which indicates which ssrc youwant to get.
 * @return ssrc or -1 if not found
 */
private long getEndpointSsrc(String endpointId,MediaType mediaType){
synchronized (endpoints) {
    for (    EndpointInfo endpoint : endpoints) {
      if (0 == endpoint.getId().compareTo(endpointId) || 0 == endpoint.getBareId().compareTo(endpointId)) {
        return endpoint.getSsrc(mediaType);
      }
    }
    return -1;
  }
}","/** 
 * Find the specified <tt>MediaType<tt> ssrc which belongs to some endpont. <strong>Warning:</strong> An endpoint means a media stream source, each media stream source generally contains two ssrc, one for audio stream and one for video stream.
 * @param endpointId indicates an endpoint
 * @param mediaType is the <tt>MediaType</tt> which indicates which ssrc youwant to get.
 * @return ssrc or -1 if not found
 */
private long getEndpointSsrc(String endpointId,MediaType mediaType){
synchronized (endpointsSyncRoot) {
    for (    EndpointInfo endpoint : endpoints) {
      if (0 == endpoint.getId().compareTo(endpointId) || 0 == endpoint.getBareId().compareTo(endpointId)) {
        return endpoint.getSsrc(mediaType);
      }
    }
    return -1;
  }
}",0.9947089947089948
81986,"/** 
 * {@inheritDoc}
 */
public void setEndpoints(List<EndpointInfo> newEndpoints){
synchronized (endpoints) {
    endpoints=newEndpoints;
    updateSynchronizers();
  }
}","/** 
 * {@inheritDoc}
 */
public void setEndpoints(List<EndpointInfo> newEndpoints){
synchronized (endpointsSyncRoot) {
    endpoints=newEndpoints;
    updateSynchronizers();
  }
}",0.9772727272727272
81987,"void updateSynchronizers(){
synchronized (endpoints) {
    for (    EndpointInfo endpoint : endpoints) {
      final String endpointId=endpoint.getId();
      for (      Entry<MediaType,Long> ssrc : endpoint.getSsrcs().entrySet()) {
        Recorder recorder=recorders.get(ssrc.getKey());
        if (recorder != null) {
          Synchronizer synchronizer=recorder.getSynchronizer();
          synchronizer.setEndpoint(ssrc.getValue(),endpointId);
        }
        logger.info(""String_Node_Str"" + endpointId + ""String_Node_Str""+ ssrc.getKey()+ ""String_Node_Str""+ ssrc.getValue());
      }
    }
  }
}","void updateSynchronizers(){
synchronized (endpointsSyncRoot) {
    for (    EndpointInfo endpoint : endpoints) {
      final String endpointId=endpoint.getId();
      for (      Entry<MediaType,Long> ssrc : endpoint.getSsrcs().entrySet()) {
        Recorder recorder=recorders.get(ssrc.getKey());
        if (recorder != null) {
          Synchronizer synchronizer=recorder.getSynchronizer();
          synchronizer.setEndpoint(ssrc.getValue(),endpointId);
        }
        logger.info(""String_Node_Str"" + endpointId + ""String_Node_Str""+ ssrc.getKey()+ ""String_Node_Str""+ ssrc.getValue());
      }
    }
  }
}",0.9933993399339934
81988,"/** 
 * Find and get the <tt>MediaType</tt> ssrc which belongs to some endpoint. <strong>Warning:</strong> An endpoint means a media stream source, each media stream source generally contains two ssrc, one for audio stream and one for video stream.
 * @param ssrc indicates an endpoint.
 * @param mediaType is the <tt>MediaType</tt> which indicates which ssrc youwant to get.
 * @return ssrc or -1 if not found
 */
private long getAssociatedSsrc(long ssrc,MediaType mediaType){
synchronized (endpoints) {
    for (    EndpointInfo endpoint : endpoints) {
      Map<MediaType,Long> ssrcs=endpoint.getSsrcs();
      if (ssrcs.size() < 2)       continue;
      if (ssrcs.containsValue(ssrc)) {
        return ssrcs.get(mediaType);
      }
    }
  }
  return -1;
}","/** 
 * Find and get the <tt>MediaType</tt> ssrc which belongs to some endpoint. <strong>Warning:</strong> An endpoint means a media stream source, each media stream source generally contains two ssrc, one for audio stream and one for video stream.
 * @param ssrc indicates an endpoint.
 * @param mediaType is the <tt>MediaType</tt> which indicates which ssrc youwant to get.
 * @return ssrc or -1 if not found
 */
private long getAssociatedSsrc(long ssrc,MediaType mediaType){
synchronized (endpointsSyncRoot) {
    for (    EndpointInfo endpoint : endpoints) {
      Map<MediaType,Long> ssrcs=endpoint.getSsrcs();
      if (ssrcs.size() < 2)       continue;
      if (ssrcs.containsValue(ssrc)) {
        return ssrcs.get(mediaType);
      }
    }
  }
  return -1;
}",0.9947643979057592
81989,"private void removeEndpoint(String jid){
  logger.debug(""String_Node_Str"" + jid);
synchronized (endpoints) {
    Iterator<EndpointInfo> iter=endpoints.iterator();
    while (iter.hasNext()) {
      if (0 == iter.next().getId().compareTo(jid)) {
        iter.remove();
      }
    }
  }
}","/** 
 * Remove a specified endpoint.
 * @param jid Indicate which endpoint do you want to remove.
 */
private void removeEndpoint(String jid){
  logger.debug(""String_Node_Str"" + jid);
synchronized (endpoints) {
    Iterator<EndpointInfo> iter=endpoints.iterator();
    while (iter.hasNext()) {
      if (0 == iter.next().getId().compareTo(jid)) {
        iter.remove();
      }
    }
  }
}",0.849112426035503
81990,"/** 
 * Fire a <tt>JireconTaskEvent</tt>, notify listeners we've made new progress which they may interest in.
 * @param event
 */
private void fireEvent(TaskEvent event){
synchronized (listeners) {
    for (    TaskEventListener l : listeners)     l.handleTaskEvent(event);
  }
}","/** 
 * Fire a <tt>TaskEvent</tt>, notify listeners we've made new progress which they may interest in.
 * @param event
 */
private void fireEvent(TaskEvent event){
synchronized (listeners) {
    for (    TaskEventListener l : listeners)     l.handleTaskEvent(event);
  }
}",0.9873417721518988
81991,"/** 
 * Remove <tt>JireconTaskEvent</tt> listener.
 * @param listener
 */
public void removeTaskEventListener(TaskEventListener listener){
synchronized (listeners) {
    listeners.remove(listener);
  }
}","public void removeTaskEventListener(TaskEventListener listener){
synchronized (listeners) {
    listeners.remove(listener);
  }
}",0.7771084337349398
81992,"public void connect(String mucJid,String nickname) throws Exception {
  joinMUC(mucJid,nickname);
}","/** 
 * Join a Multi-User-Chat of specified MUC jid.
 * @param mucJid The specified MUC jid.
 * @param nickname The name in MUC.
 * @throws Exception if failed to join MUC.
 */
public void connect(String mucJid,String nickname) throws Exception {
  joinMUC(mucJid,nickname);
}",0.528
81993,"/** 
 * Initialize <tt>JireconSession</tt>. <p> <strong>Warning:</strong> LibJitsi must be started before calling this method.
 * @param connection is used for send/receive XMPP packet.
 */
public void init(XMPPConnection connection){
  this.connection=connection;
  addPacketSendingListener();
  addPacketReceivingListener();
  JireconSessionPacketListener packetListener=new JireconSessionPacketListener(){
    @Override public void handlePacket(    Packet packet){
      if (Presence.class == packet.getClass())       handlePresencePacket((Presence)packet);
    }
  }
;
  addPacketListener(packetListener);
}","/** 
 * Initialize <tt>JireconSession</tt>.
 * @param connection is used for send/receive XMPP packet.
 */
public void init(XMPPConnection connection){
  LibJitsi.start();
  this.connection=connection;
  addPacketSendingListener();
  addPacketReceivingListener();
  JireconSessionPacketListener packetListener=new JireconSessionPacketListener(){
    @Override public void handlePacket(    Packet packet){
      if (Presence.class == packet.getClass())       handlePresencePacket((Presence)packet);
    }
  }
;
  addPacketListener(packetListener);
}",0.7437446074201898
81994,"private void addEndpoint(String jid,Map<MediaType,Long> ssrcs){
synchronized (endpoints) {
    EndpointInfo endpoint=new EndpointInfo();
    endpoint.setId(jid);
    for (    MediaType mediaType : new MediaType[]{MediaType.AUDIO,MediaType.VIDEO}) {
      endpoint.setSsrc(mediaType,ssrcs.get(mediaType));
    }
    Iterator<EndpointInfo> iter=endpoints.iterator();
    while (iter.hasNext()) {
      if (0 == iter.next().getId().compareTo(jid)) {
        iter.remove();
      }
    }
    endpoints.remove(jid);
    endpoints.add(endpoint);
  }
}","/** 
 * Record a newly found endpoint. <p> If there is an existed endpoint with same id, then we will override the old enpoint.
 * @param jid The endpoint id.
 * @param ssrcs The endpoint ssrcs.
 */
private void addEndpoint(String jid,Map<MediaType,Long> ssrcs){
synchronized (endpoints) {
    EndpointInfo endpoint=new EndpointInfo();
    endpoint.setId(jid);
    for (    MediaType mediaType : new MediaType[]{MediaType.AUDIO,MediaType.VIDEO}) {
      endpoint.setSsrc(mediaType,ssrcs.get(mediaType));
    }
    Iterator<EndpointInfo> iter=endpoints.iterator();
    while (iter.hasNext()) {
      if (0 == iter.next().getId().compareTo(jid)) {
        iter.remove();
      }
    }
    endpoints.remove(jid);
    endpoints.add(endpoint);
  }
}",0.8456167571761055
81995,"private RtpDescriptionPacketExtension createDescriptionPacketExt(MediaType mediaType,Map<MediaFormat,Byte> formatAndPayloadTypes,Long localSsrc){
  RtpDescriptionPacketExtension description=new RtpDescriptionPacketExtension();
  description.setMedia(mediaType.toString());
  description.setSsrc(localSsrc.toString());
  for (  Map.Entry<MediaFormat,Byte> e : formatAndPayloadTypes.entrySet()) {
    PayloadTypePacketExtension payloadType=new PayloadTypePacketExtension();
    payloadType.setId(e.getValue());
    payloadType.setName(e.getKey().getEncoding());
    if (e.getKey() instanceof AudioMediaFormat) {
      payloadType.setChannels(((AudioMediaFormat)e.getKey()).getChannels());
    }
    payloadType.setClockrate((int)e.getKey().getClockRate());
    for (    Map.Entry<String,String> en : e.getKey().getFormatParameters().entrySet()) {
      ParameterPacketExtension parameter=new ParameterPacketExtension();
      parameter.setName(en.getKey());
      parameter.setValue(en.getValue());
      payloadType.addParameter(parameter);
    }
    description.addPayloadType(payloadType);
  }
  final MediaService mediaService=LibJitsi.getMediaService();
  SourcePacketExtension sourcePacketExtension=new SourcePacketExtension();
  final String label=UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"");
  final String msLabel=UUID.randomUUID().toString();
  sourcePacketExtension.setSSRC(localSsrc);
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",mediaService.getRtpCname()));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",msLabel + ""String_Node_Str"" + label));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",msLabel));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",label));
  description.addChildExtension(sourcePacketExtension);
  return description;
}","/** 
 * Create <tt>RtpDescriptionPacketExtension</tt> with specified mediatype, media formats, payload type ids and ssrcs.
 * @param mediaType
 * @param formatAndPayloadTypes
 * @param localSsrc
 * @return
 */
private RtpDescriptionPacketExtension createDescriptionPacketExt(MediaType mediaType,Map<MediaFormat,Byte> formatAndPayloadTypes,Long localSsrc){
  RtpDescriptionPacketExtension description=new RtpDescriptionPacketExtension();
  description.setMedia(mediaType.toString());
  description.setSsrc(localSsrc.toString());
  for (  Map.Entry<MediaFormat,Byte> e : formatAndPayloadTypes.entrySet()) {
    PayloadTypePacketExtension payloadType=new PayloadTypePacketExtension();
    payloadType.setId(e.getValue());
    payloadType.setName(e.getKey().getEncoding());
    if (e.getKey() instanceof AudioMediaFormat) {
      payloadType.setChannels(((AudioMediaFormat)e.getKey()).getChannels());
    }
    payloadType.setClockrate((int)e.getKey().getClockRate());
    for (    Map.Entry<String,String> en : e.getKey().getFormatParameters().entrySet()) {
      ParameterPacketExtension parameter=new ParameterPacketExtension();
      parameter.setName(en.getKey());
      parameter.setValue(en.getValue());
      payloadType.addParameter(parameter);
    }
    description.addPayloadType(payloadType);
  }
  final MediaService mediaService=LibJitsi.getMediaService();
  SourcePacketExtension sourcePacketExtension=new SourcePacketExtension();
  final String label=UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"");
  final String msLabel=UUID.randomUUID().toString();
  sourcePacketExtension.setSSRC(localSsrc);
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",mediaService.getRtpCname()));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",msLabel + ""String_Node_Str"" + label));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",msLabel));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",label));
  description.addChildExtension(sourcePacketExtension);
  return description;
}",0.9488802336903602
81996,"/** 
 * Add <tt>JireconTaskEvent</tt> listener.
 * @param listener
 */
public void addTaskEventListener(TaskEventListener listener){
synchronized (listeners) {
    listeners.add(listener);
  }
}","public void addTaskEventListener(TaskEventListener listener){
synchronized (listeners) {
    listeners.add(listener);
  }
}",0.7760252365930599
81997,"/** 
 * Send Jingle session-accept packet to the remote peer.
 * @param formatAndPTs
 * @param localSsrcs
 * @param transportPEs
 * @param fingerprintPEs
 */
public void sendAcceptPacket(Map<MediaType,Map<MediaFormat,Byte>> formatAndPTs,Map<MediaType,Long> localSsrcs,Map<MediaType,AbstractPacketExtension> transportPEs,Map<MediaType,AbstractPacketExtension> fingerprintPEs){
  logger.debug(""String_Node_Str"");
  JingleIQ acceptIq=createAcceptPacket(formatAndPTs,localSsrcs,transportPEs,fingerprintPEs);
  connection.sendPacket(acceptIq);
}","/** 
 * Send Jingle session-accept packet to the remote peer.
 * @param formatAndPTs Map between <tt>MediaFormat</tt> and payload type id.
 * @param localSsrcs Local sscrs of audio and video.
 * @param transportPEs DtlsTransport packet extensions.
 * @param fingerprintPEs Fingerprint packet extensions.
 */
public void sendAcceptPacket(Map<MediaType,Map<MediaFormat,Byte>> formatAndPTs,Map<MediaType,Long> localSsrcs,Map<MediaType,AbstractPacketExtension> transportPEs,Map<MediaType,AbstractPacketExtension> fingerprintPEs){
  logger.debug(""String_Node_Str"");
  JingleIQ acceptIq=createAcceptPacket(formatAndPTs,localSsrcs,transportPEs,fingerprintPEs);
  connection.sendPacket(acceptIq);
}",0.8780487804878049
81998,"/** 
 * Handles control packet.
 * @param data raw packet data that arrived on control PPID.
 * @param sid SCTP stream id on which the data has arrived.
 */
private void onCtrlPacket(byte[] data,int sid) throws IOException {
  System.out.print(""String_Node_Str"");
  for (  byte b : data) {
    System.out.printf(""String_Node_Str"",b);
  }
  System.out.println();
  ByteBuffer buffer=ByteBuffer.wrap(data);
  int messageType=0xFF & buffer.get();
  if (messageType == MSG_OPEN_CHANNEL) {
    int channelType=0xFF & buffer.get();
    int priority=0xFFFF & buffer.getShort();
    long reliability=0xFFFFFFFFL & buffer.getInt();
    int labelLength=0xFFFF & buffer.getShort();
    int protocolLength=0xFFFF & buffer.getShort();
    String label;
    String protocol;
    if (labelLength == 0) {
      label=""String_Node_Str"";
    }
 else {
      byte[] labelBytes=new byte[labelLength];
      buffer.get(labelBytes);
      label=new String(labelBytes,""String_Node_Str"");
    }
    if (protocolLength == 0) {
      protocol=""String_Node_Str"";
    }
 else {
      byte[] protocolBytes=new byte[protocolLength];
      buffer.get(protocolBytes);
      protocol=new String(protocolBytes,""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + sid + ""String_Node_Str""+ channelType+ ""String_Node_Str""+ priority+ ""String_Node_Str""+ reliability+ ""String_Node_Str""+ label+ ""String_Node_Str""+ protocol);
    sendOpenChannelAck(sid);
  }
}","/** 
 * Handles control packet.
 * @param data raw packet data that arrived on control PPID.
 * @param sid SCTP stream id on which the data has arrived.
 */
private void onCtrlPacket(byte[] data,int sid) throws IOException {
  ByteBuffer buffer=ByteBuffer.wrap(data);
  int messageType=0xFF & buffer.get();
  if (messageType == MSG_OPEN_CHANNEL) {
    int channelType=0xFF & buffer.get();
    int priority=0xFFFF & buffer.getShort();
    long reliability=0xFFFFFFFFL & buffer.getInt();
    int labelLength=0xFFFF & buffer.getShort();
    int protocolLength=0xFFFF & buffer.getShort();
    String label;
    String protocol;
    if (labelLength == 0) {
      label=""String_Node_Str"";
    }
 else {
      byte[] labelBytes=new byte[labelLength];
      buffer.get(labelBytes);
      label=new String(labelBytes,""String_Node_Str"");
    }
    if (protocolLength == 0) {
      protocol=""String_Node_Str"";
    }
 else {
      byte[] protocolBytes=new byte[protocolLength];
      buffer.get(protocolBytes);
      protocol=new String(protocolBytes,""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + sid + ""String_Node_Str""+ channelType+ ""String_Node_Str""+ priority+ ""String_Node_Str""+ reliability+ ""String_Node_Str""+ label+ ""String_Node_Str""+ protocol);
    sendOpenChannelAck(sid);
  }
}",0.9505593648502346
81999,"/** 
 * {@inheritDoc} Receive the SCTP packets and parse into event string,then record them.
 */
@Override public void onSctpPacket(byte[] data,int sid,int ssn,int tsn,long ppid,int context,int flags){
  System.out.println(""String_Node_Str"" + ppid);
  for (  byte b : data) {
    System.out.printf(""String_Node_Str"",b);
  }
  System.out.println();
  if (ppid == WEB_RTC_PPID_CTRL) {
    try {
      onCtrlPacket(data,sid);
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else   if (ppid == WEB_RTC_PPID_STRING || ppid == WEB_RTC_PPID_BIN) {
    ByteBuffer buffer=ByteBuffer.wrap(data);
    int messageType=0xFF & buffer.get();
    System.out.println(messageType);
    try {
      String dataStr=new String(data,""String_Node_Str"");
      JSONParser parser=new JSONParser();
      JSONObject json=(JSONObject)parser.parse(dataStr);
      String endpointId=json.get(""String_Node_Str"").toString();
      logger.debug(""String_Node_Str"" + endpointId);
      System.out.println(""String_Node_Str"" + endpointId);
      RecorderEvent event=new RecorderEvent();
      event.setMediaType(MediaType.AUDIO);
      event.setType(RecorderEvent.Type.SPEAKER_CHANGED);
      event.setEndpointId(endpointId);
      event.setAudioSsrc(getEndpointSsrc(endpointId,MediaType.AUDIO));
      eventHandler.handleEvent(event);
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * {@inheritDoc} Receive the SCTP packets and parse into event string,then record them.
 */
@Override public void onSctpPacket(byte[] data,int sid,int ssn,int tsn,long ppid,int context,int flags){
  if (ppid == WEB_RTC_PPID_CTRL) {
    try {
      onCtrlPacket(data,sid);
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else   if (ppid == WEB_RTC_PPID_STRING || ppid == WEB_RTC_PPID_BIN) {
    ByteBuffer buffer=ByteBuffer.wrap(data);
    int messageType=0xFF & buffer.get();
    System.out.println(messageType);
    try {
      String dataStr=new String(data,""String_Node_Str"");
      JSONParser parser=new JSONParser();
      JSONObject json=(JSONObject)parser.parse(dataStr);
      String endpointId=json.get(""String_Node_Str"").toString();
      logger.debug(""String_Node_Str"" + endpointId);
      System.out.println(""String_Node_Str"" + dataStr);
      System.out.println(""String_Node_Str"" + endpointId);
      RecorderEvent event=new RecorderEvent();
      event.setMediaType(MediaType.AUDIO);
      event.setType(RecorderEvent.Type.SPEAKER_CHANGED);
      event.setEndpointId(endpointId);
      event.setAudioSsrc(getEndpointSsrc(endpointId,MediaType.AUDIO));
      event.setInstant(System.currentTimeMillis());
      eventHandler.handleEvent(event);
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
  }
}",0.9141499830335936
82000,"/** 
 * Stop the RTP translators. <p> Actually we don't stop <tt>RTPTranslator</tt> manually, because it will be closed in recorder.
 */
private void stopTranslators(){
  for (  Entry<MediaType,RTPTranslator> e : rtpTranslators.entrySet()) {
    e.getValue().dispose();
  }
  rtpTranslators.clear();
}","/** 
 * Stop the RTP translators. <p> Actually we don't stop <tt>RTPTranslator</tt>s manually, because it will be closed automatically by recorders.
 */
private void stopTranslators(){
  for (  Entry<MediaType,RTPTranslator> e : rtpTranslators.entrySet()) {
    e.getValue().dispose();
  }
  rtpTranslators.clear();
}",0.9385113268608414
