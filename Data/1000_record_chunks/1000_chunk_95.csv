record_number,buggy_code,fixed_code,code_similarity
94001,"public void popGUI(Player player){
  ContribPlayer contribPlayer=(ContribPlayer)player;
  if (contribPlayer.isBukkitContribEnabled()) {
    PopupScreen popup=new GenericPopup();
    contribPlayer.getMainScreen().attachPopupScreen(popup);
    contribPlayer.getMainScreen().attachWidget((new GenericTexture(""String_Node_Str"")).setX(250).setY(75).setHeight(128).setWidth(64));
    popup.attachWidget((new GenericButton()).setText(""String_Node_Str"").setWidth(200).setHeight(20).setX(100).setY(100));
  }
}","public void popGUI(Player player){
  if (Config.hasBukkitContrib) {
    ContribPlayer contribPlayer=(ContribPlayer)player;
    if (contribPlayer.isBukkitContribEnabled()) {
      PopupScreen popup=new GenericPopup();
      contribPlayer.getMainScreen().attachPopupScreen(popup);
      popup.attachWidget((new ChatTextBox()).setWidth(300).setHeight(20).setX(100).setY(30));
      Button button=new GenericButton();
      button.setText(""String_Node_Str"");
      button.setCentered(true);
      button.setWidth(200).setHeight(20).setX(100).setY(100);
      button.setHoverText(""String_Node_Str"");
      popup.attachWidget(button);
    }
  }
}",0.4802804557405784
94002,"public static String hash(String action,String player,String password,String thesalt) throws SQLException {
  if (action.equals(""String_Node_Str"")) {
    try {
      EBean eBeanClass=EBean.checkPlayer(player);
      String StoredSalt=eBeanClass.getSalt();
      return passwordHash(password,StoredSalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
 else   if (action.equals(""String_Node_Str"")) {
    try {
      return passwordHash(password,thesalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  return ""String_Node_Str"";
}","public static String hash(String action,String player,String password,String thesalt) throws SQLException {
  if (action.equals(""String_Node_Str"")) {
    try {
      EBean eBeanClass=EBean.checkPlayer(player,true);
      String StoredSalt=eBeanClass.getSalt();
      return passwordHash(password,StoredSalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
 else   if (action.equals(""String_Node_Str"")) {
    try {
      return passwordHash(password,thesalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  return ""String_Node_Str"";
}",0.998589562764457
94003,"public static String hash(String action,String player,String password,String thesalt) throws SQLException {
  if (action.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      EBean eBeanClass=EBean.checkPlayer(player);
      String StoredSalt=eBeanClass.getSalt();
      return passwordHash(password,StoredSalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
 else   if (action.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      return passwordHash(password,thesalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  return ""String_Node_Str"";
}","public static String hash(String action,String player,String password,String thesalt) throws SQLException {
  if (action.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      EBean eBeanClass=EBean.checkPlayer(player,true);
      String StoredSalt=eBeanClass.getSalt();
      return passwordHash(password,StoredSalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
 else   if (action.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      return passwordHash(password,thesalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  return ""String_Node_Str"";
}",0.99860529986053
94004,"public static void adduser(int checkid,String player,String email,String password,String ipAddress) throws SQLException {
  if (checkid == 1) {
    String hash=phpbb_hash(password);
    long timestamp=System.currentTimeMillis() / 1000;
    int userid;
    PreparedStatement ps;
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
    ps.setString(1,player);
    ps.setString(2,player.toLowerCase());
    ps.setString(3,hash);
    ps.setString(4,email);
    ps.setString(5,""String_Node_Str"");
    ps.setString(6,""String_Node_Str"");
    ps.setString(7,""String_Node_Str"");
    ps.setString(8,""String_Node_Str"");
    ps.setString(9,""String_Node_Str"");
    ps.setLong(10,timestamp);
    ps.setString(11,""String_Node_Str"");
    ps.setLong(12,timestamp);
    ps.setString(13,""String_Node_Str"");
    ps.setString(14,""String_Node_Str"");
    ps.setString(15,""String_Node_Str"");
    ps.setString(16,""String_Node_Str"");
    ps.setString(17,ipAddress);
    ps.executeUpdate();
    ps.close();
    userid=MySQL.countitall(Config.script_tableprefix + ""String_Node_Str"");
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
    ps.setInt(1,2);
    ps.setInt(2,userid);
    ps.setInt(3,0);
    ps.setInt(4,0);
    ps.executeUpdate();
    ps.close();
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
    ps.setInt(1,7);
    ps.setInt(2,userid);
    ps.setInt(3,0);
    ps.setInt(4,0);
    ps.executeUpdate();
    ps.close();
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str""+ userid+ ""String_Node_Str"");
    ps.executeUpdate();
    ps.close();
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str""+ player+ ""String_Node_Str"");
    ps.executeUpdate();
    ps.close();
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"");
    ps.executeUpdate();
    ps.close();
  }
 else   if (checkid == 2) {
    String hash=Encryption.md5(password);
    long timestamp=System.currentTimeMillis() / 1000;
    PreparedStatement ps;
    int userid=0;
    String query=""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"";
    Statement stmt=MySQL.mysql.createStatement();
    ResultSet rs=stmt.executeQuery(query);
    if (rs.next()) {
      userid=rs.getInt(1);
    }
 else {
      Util.logging.Warning(""String_Node_Str"");
    }
    rs.close();
    stmt.close();
    userid+=1;
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
    ps.setInt(1,1);
    ps.setString(2,player.toLowerCase());
    ps.setString(3,hash);
    ps.setLong(4,timestamp);
    ps.setLong(5,timestamp);
    ps.setString(6,email);
    ps.setInt(7,userid);
    ps.executeUpdate();
    ps.close();
    userid=MySQL.countitall(Config.script_tableprefix + ""String_Node_Str"");
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
    ps.setInt(1,3);
    ps.setInt(2,userid);
    ps.setInt(3,0);
    ps.executeUpdate();
    ps.close();
    stmt.close();
  }
}","public static void adduser(int checkid,String player,String email,String password,String ipAddress) throws SQLException {
  if (checkid == 1) {
    String hash=phpbb_hash(password);
    long timestamp=System.currentTimeMillis() / 1000;
    int userid;
    PreparedStatement ps;
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
    ps.setString(1,player);
    ps.setString(2,player.toLowerCase());
    ps.setString(3,hash);
    ps.setString(4,email);
    ps.setString(5,""String_Node_Str"");
    ps.setString(6,""String_Node_Str"");
    ps.setString(7,""String_Node_Str"");
    ps.setString(8,""String_Node_Str"");
    ps.setString(9,""String_Node_Str"");
    ps.setLong(10,timestamp);
    ps.setString(11,""String_Node_Str"");
    ps.setLong(12,timestamp);
    ps.setString(13,""String_Node_Str"");
    ps.setString(14,""String_Node_Str"");
    ps.setString(15,""String_Node_Str"");
    ps.setString(16,""String_Node_Str"");
    ps.setString(17,ipAddress);
    ps.executeUpdate();
    ps.close();
    userid=MySQL.countitall(Config.script_tableprefix + ""String_Node_Str"");
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
    ps.setInt(1,2);
    ps.setInt(2,userid);
    ps.setInt(3,0);
    ps.setInt(4,0);
    ps.executeUpdate();
    ps.close();
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
    ps.setInt(1,7);
    ps.setInt(2,userid);
    ps.setInt(3,0);
    ps.setInt(4,0);
    ps.executeUpdate();
    ps.close();
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str""+ userid+ ""String_Node_Str"");
    ps.executeUpdate();
    ps.close();
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str""+ player+ ""String_Node_Str"");
    ps.executeUpdate();
    ps.close();
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"");
    ps.executeUpdate();
    ps.close();
  }
 else   if (checkid == 2) {
    String hash=Encryption.md5(password);
    long timestamp=System.currentTimeMillis() / 1000;
    PreparedStatement ps;
    int userid=0;
    String query=""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"";
    Statement stmt=MySQL.mysql.createStatement();
    ResultSet rs=stmt.executeQuery(query);
    if (rs.next()) {
      userid=rs.getInt(1);
    }
 else {
      Util.logging.error(""String_Node_Str"");
    }
    rs.close();
    stmt.close();
    userid+=1;
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
    ps.setInt(1,1);
    ps.setString(2,player.toLowerCase());
    ps.setString(3,hash);
    ps.setLong(4,timestamp);
    ps.setLong(5,timestamp);
    ps.setString(6,email);
    ps.setInt(7,userid);
    ps.executeUpdate();
    ps.close();
    userid=MySQL.countitall(Config.script_tableprefix + ""String_Node_Str"");
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
    ps.setInt(1,3);
    ps.setInt(2,userid);
    ps.setInt(3,0);
    ps.executeUpdate();
    ps.close();
    stmt.close();
  }
}",0.9982326951399116
94005,"public static String hash(String action,String player,String password,String thesalt) throws SQLException {
  if (action.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      EBean eBeanClass=EBean.checkPlayer(player);
      String StoredSalt=eBeanClass.getSalt();
      return passwordHash(password,StoredSalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
 else   if (action.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      return passwordHash(password,thesalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  return ""String_Node_Str"";
}","public static String hash(String action,String player,String password,String thesalt) throws SQLException {
  if (action.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      EBean eBeanClass=EBean.checkPlayer(player,true);
      String StoredSalt=eBeanClass.getSalt();
      return passwordHash(password,StoredSalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
 else   if (action.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      return passwordHash(password,thesalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  return ""String_Node_Str"";
}",0.99860529986053
94006,"public static String hash(String action,String player,String password,String thesalt) throws SQLException {
  if (action.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      EBean eBeanClass=EBean.checkPlayer(player);
      String StoredSalt=eBeanClass.getSalt();
      return passwordHash(password,StoredSalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
 else   if (action.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      return passwordHash(password,thesalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  return ""String_Node_Str"";
}","public static String hash(String action,String player,String password,String thesalt) throws SQLException {
  if (action.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      EBean eBeanClass=EBean.checkPlayer(player,true);
      String StoredSalt=eBeanClass.getSalt();
      return passwordHash(password,StoredSalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
 else   if (action.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      return passwordHash(password,thesalt);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  return ""String_Node_Str"";
}",0.99860529986053
94007,"public static ItemStack[] getInventory(Player player){
  EBean eBeanClass=EBean.find(player);
  if (eBeanClass != null) {
    String data=eBeanClass.getInventory();
    if (data != ""String_Node_Str"" && data != null) {
      String[] inv=Util.split(data,""String_Node_Str"");
      ItemStack[] inventory=new ItemStack[36];
      for (int i=0; i < inv.length; i++) {
        String line=inv[i];
        String[] split=line.split(""String_Node_Str"");
        if (split.length == 4) {
          int type=Integer.valueOf(split[0]).intValue();
          inventory[i]=new ItemStack(type,Integer.valueOf(split[1]).intValue());
          short dur=Short.valueOf(split[3]).shortValue();
          if (dur > 0) {
            inventory[i].setDurability(dur);
          }
          byte dd;
          if (split[2].length() == 0) {
            dd=0;
          }
 else {
            dd=Byte.valueOf(split[2]).byteValue();
          }
          Material mat=Material.getMaterial(type);
          if (mat == null) {
            inventory[i].setData(new MaterialData(type,dd));
          }
 else {
            inventory[i].setData(mat.getNewData(dd));
          }
        }
      }
      eBeanClass.setInventory(null);
      AuthDB.database.save(eBeanClass);
      return inventory;
    }
  }
  return null;
}","public static ItemStack[] getInventory(Player player){
  EBean eBeanClass=EBean.find(player);
  if (eBeanClass != null) {
    String data=eBeanClass.getInventory();
    if (data != ""String_Node_Str"" && data != null) {
      String[] inv=Util.split(data,""String_Node_Str"");
      ItemStack[] inventory;
      if (Config.hasBackpack) {
        inventory=new ItemStack[252];
      }
 else {
        inventory=new ItemStack[36];
      }
      for (int i=0; i < inv.length; i++) {
        String line=inv[i];
        String[] split=line.split(""String_Node_Str"");
        if (split.length == 4) {
          int type=Integer.valueOf(split[0]).intValue();
          inventory[i]=new ItemStack(type,Integer.valueOf(split[1]).intValue());
          short dur=Short.valueOf(split[3]).shortValue();
          if (dur > 0) {
            inventory[i].setDurability(dur);
          }
          byte dd;
          if (split[2].length() == 0) {
            dd=0;
          }
 else {
            dd=Byte.valueOf(split[2]).byteValue();
          }
          Material mat=Material.getMaterial(type);
          if (mat == null) {
            inventory[i].setData(new MaterialData(type,dd));
          }
 else {
            inventory[i].setData(mat.getNewData(dd));
          }
        }
      }
      eBeanClass.setInventory(null);
      AuthDB.database.save(eBeanClass);
      return inventory;
    }
  }
  return null;
}",0.9497954629973968
94008,"public boolean register(Player theplayer,String password,String email,String ipAddress) throws IOException, SQLException {
  if (password.length() < Integer.parseInt(Config.password_minimum)) {
    Messages.sendMessage(Message.password_minimum,theplayer,null);
    return false;
  }
 else   if (password.length() > Integer.parseInt(Config.password_maximum)) {
    Messages.sendMessage(Message.password_maximum,theplayer,null);
    return false;
  }
  if (!Config.database_keepalive) {
    Util.databaseManager.connect();
  }
  String player=theplayer.getName();
  if (!Util.checkFilter(""String_Node_Str"",password)) {
    Messages.sendMessage(Message.filter_password,theplayer,null);
  }
 else {
    Util.checkScript(""String_Node_Str"",Config.script_name,player,password,email,ipAddress);
  }
  if (!Config.database_keepalive) {
    Util.databaseManager.close();
  }
  return true;
}","public boolean register(Player theplayer,String password,String email,String ipAddress) throws IOException, SQLException {
  if (password.length() < Integer.parseInt(Config.password_minimum)) {
    Messages.sendMessage(Message.password_minimum,theplayer,null);
    return false;
  }
 else   if (password.length() > Integer.parseInt(Config.password_maximum)) {
    Messages.sendMessage(Message.password_maximum,theplayer,null);
    return false;
  }
  if (!Config.database_keepalive) {
    Util.databaseManager.connect();
  }
  String player=theplayer.getName();
  if (!Util.checkFilter(""String_Node_Str"",password)) {
    Messages.sendMessage(Message.filter_password,theplayer,null);
  }
 else {
    if (Util.checkScript(""String_Node_Str"",Config.script_name,player,password,email,ipAddress)) {
      Util.logging.Debug(""String_Node_Str"" + theplayer.getName());
    }
 else {
      Util.logging.Debug(""String_Node_Str"" + theplayer.getName());
    }
  }
  if (!Config.database_keepalive) {
    Util.databaseManager.close();
  }
  return true;
}",0.9167533818938606
94009,"public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  Util.logging.Info(""String_Node_Str"" + event.getMessage());
  long start=Util.timeMS();
  String noPermission=""String_Node_Str"";
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_login) || split[0].equalsIgnoreCase(Config.aliases_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          Messages.sendMessage(Message.login_failure,player,null);
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        player.sendMessage(noPermission);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_link) || split[0].equalsIgnoreCase(Config.aliases_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equals(split[1])) {
              if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                EBean eBeanClass=EBean.checkPlayer(split[1],true);
                String linkedname=eBeanClass.getLinkedname();
                if (linkedname != null) {
                  Messages.sendMessage(Message.link_duplicate,player,null);
                }
 else                 if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Link(player,split[1]);
                  Messages.sendMessage(Message.link_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.link_failure,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_exists,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.link_invaliduser,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_link + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          player.sendMessage(noPermission);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_unlink) || split[0].equalsIgnoreCase(Config.aliases_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              EBean eBeanClass=EBean.checkPlayer(player,true);
              String linkedname=eBeanClass.getLinkedname();
              if (linkedname.equals(split[1])) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Unlink(player,split[1]);
                  Messages.sendMessage(Message.unlink_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.unlink_invalidpass,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.unlink_invaliduser,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          player.sendMessage(noPermission);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_register) || split[0].equalsIgnoreCase(Config.aliases_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_exists,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Util.logging.Debug(""String_Node_Str"" + split[2]);
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                ItemStack[] inv=this.plugin.getInventory(player);
                if (inv != null) {
                  player.getInventory().setContents(inv);
                }
                inv=AuthDB.getArmorInventory(player);
                if (inv != null) {
                  player.getInventory().setArmorContents(inv);
                }
                long timestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_Authed.put(Encryption.md5(player.getName()),""String_Node_Str"");
                if (Config.session_enabled) {
                  this.plugin.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),timestamp);
                  EBean eBeanClass=EBean.checkPlayer(player,true);
                  eBeanClass.setSessiontime(timestamp);
                  AuthDB.database.save(eBeanClass);
                  Util.logging.Debug(""String_Node_Str"" + player.getName());
                }
                Processes.Login(player);
                long thetimestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
                Location temploc=event.getPlayer().getLocation();
                while (temploc.getBlock().getTypeId() == 0) {
                  temploc.setY(temploc.getY() - 1);
                }
                temploc.setY(temploc.getY() + 1);
                event.getPlayer().teleport(temploc);
                Messages.sendMessage(Message.register_success,player,null);
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        player.sendMessage(noPermission);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}","public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  Util.logging.Info(""String_Node_Str"" + event.getMessage());
  long start=Util.timeMS();
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_login) || split[0].equalsIgnoreCase(Config.aliases_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          Messages.sendMessage(Message.login_failure,player,null);
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_link) || split[0].equalsIgnoreCase(Config.aliases_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equals(split[1])) {
              if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                EBean eBeanClass=EBean.checkPlayer(split[1],true);
                String linkedname=eBeanClass.getLinkedname();
                if (linkedname != null) {
                  Messages.sendMessage(Message.link_duplicate,player,null);
                }
 else                 if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Link(player,split[1]);
                  Messages.sendMessage(Message.link_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.link_failure,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_exists,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.link_invaliduser,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_link + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_unlink) || split[0].equalsIgnoreCase(Config.aliases_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              EBean eBeanClass=EBean.checkPlayer(player,true);
              String linkedname=eBeanClass.getLinkedname();
              if (linkedname.equals(split[1])) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Unlink(player,split[1]);
                  Messages.sendMessage(Message.unlink_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.unlink_invalidpass,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.unlink_invaliduser,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_register) || split[0].equalsIgnoreCase(Config.aliases_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_exists,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Util.logging.Debug(""String_Node_Str"" + split[2]);
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                ItemStack[] inv=this.plugin.getInventory(player);
                if (inv != null) {
                  player.getInventory().setContents(inv);
                }
                inv=AuthDB.getArmorInventory(player);
                if (inv != null) {
                  player.getInventory().setArmorContents(inv);
                }
                long timestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_Authed.put(Encryption.md5(player.getName()),""String_Node_Str"");
                if (Config.session_enabled) {
                  this.plugin.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),timestamp);
                  EBean eBeanClass=EBean.checkPlayer(player,true);
                  eBeanClass.setSessiontime(timestamp);
                  AuthDB.database.save(eBeanClass);
                  Util.logging.Debug(""String_Node_Str"" + player.getName());
                }
                Processes.Login(player);
                long thetimestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
                Location temploc=event.getPlayer().getLocation();
                while (temploc.getBlock().getTypeId() == 0) {
                  temploc.setY(temploc.getY() - 1);
                }
                temploc.setY(temploc.getY() + 1);
                event.getPlayer().teleport(temploc);
                Messages.sendMessage(Message.register_success,player,null);
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.9810562883352332
94010,"public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  EBean.checkIP(player.getName(),Util.craftFirePlayer.getIP(player));
  player.teleport(Util.landLocation(player.getLocation()));
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
  if (Config.session_enabled && Config.session_length != 0) {
    long timestamp=System.currentTimeMillis() / 1000;
    if (Util.authDBplayer.sessionTime(player) != 0) {
      long storedtime=Util.authDBplayer.sessionTime(player);
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
      long timedifference=timestamp - storedtime;
      Util.logging.Debug(""String_Node_Str"" + timedifference);
      Util.logging.Debug(""String_Node_Str"" + Config.session_length);
      if (timedifference > Config.session_length) {
        sessionallow=false;
      }
 else {
        sessionallow=true;
      }
    }
 else {
      sessionallow=false;
    }
  }
  try {
    if (sessionallow == false) {
      int time=0;
      if (Config.login_timeout > 0 && plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.login_timeout + ""String_Node_Str"");
        time=Config.login_timeout;
      }
 else       if (Config.register_timeout > 0 && !plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.register_timeout + ""String_Node_Str"");
        time=Config.register_timeout;
      }
      if (time > 0) {
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            checkTimeout(player);
          }
        }
,time);
        EBean eBeanClass=EBean.checkPlayer(player,true);
        Util.logging.Debug(""String_Node_Str"" + Schedule);
        eBeanClass.setTimeoutid(Schedule);
        AuthDB.database.save(eBeanClass);
        if (AuthDB.AuthDB_Timeouts.put(player.getName(),Schedule) != null) {
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
        }
      }
    }
    if (Config.custom_enabled && (Config.custom_encryption.equals(""String_Node_Str"") || Config.custom_encryption == null)) {
      player.sendMessage(""String_Node_Str"");
    }
    if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
      player.setHealth(20);
      player.teleport(player.getWorld().getSpawnLocation());
    }
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if ((eBeanClass.getReloadtime() + 30) >= Util.timeStamp()) {
      sessionallow=true;
    }
    if (Config.onlineMode && this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      sessionallow=true;
    }
    if (sessionallow) {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(event.getPlayer());
      Messages.sendMessage(Message.session_valid,player,null);
    }
 else     if (this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        @Override public void run(){
          if (!plugin.isAuthorized(player)) {
            if (player.getInventory() != null) {
              player.getInventory().clear();
            }
            Util.craftFirePlayer.clearArmorinventory(player);
          }
        }
      }
,20);
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
        if (!Config.hasSpout) {
          Messages.sendMessage(Message.login_prompt,player,null);
        }
      }
 else {
        Messages.sendMessage(Message.login_normal,player,null);
      }
    }
 else     if (Config.register_force) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      Util.craftFirePlayer.clearArmorinventory(player);
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else     if (!Config.register_force) {
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(player);
    }
  }
 catch (  IOException e) {
    Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    player.sendMessage(Color.red + ""String_Node_Str"");
  }
}","public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  EBean.checkIP(player.getName(),Util.craftFirePlayer.getIP(player));
  player.teleport(Util.landLocation(player.getLocation()));
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
  if (Config.session_enabled && Config.session_length != 0) {
    long timestamp=System.currentTimeMillis() / 1000;
    if (Util.authDBplayer.sessionTime(player) != 0) {
      long storedtime=Util.authDBplayer.sessionTime(player);
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
      long timedifference=timestamp - storedtime;
      Util.logging.Debug(""String_Node_Str"" + timedifference);
      Util.logging.Debug(""String_Node_Str"" + Config.session_length);
      if (timedifference > Config.session_length) {
        sessionallow=false;
      }
 else {
        sessionallow=true;
      }
    }
 else {
      sessionallow=false;
    }
  }
  try {
    if (sessionallow == false) {
      int time=0;
      if (Config.login_timeout > 0 && plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.login_timeout + ""String_Node_Str"");
        time=Config.login_timeout;
      }
 else       if (Config.register_timeout > 0 && !plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.register_timeout + ""String_Node_Str"");
        time=Config.register_timeout;
      }
      if (time > 0) {
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            checkTimeout(player);
          }
        }
,time);
        EBean eBeanClass=EBean.checkPlayer(player,true);
        Util.logging.Debug(""String_Node_Str"" + Schedule);
        eBeanClass.setTimeoutid(Schedule);
        AuthDB.database.save(eBeanClass);
        if (AuthDB.AuthDB_Timeouts.put(player.getName(),Schedule) != null) {
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
        }
      }
    }
    if (Config.custom_enabled && (Config.custom_encryption.equals(""String_Node_Str"") || Config.custom_encryption == null)) {
      player.sendMessage(""String_Node_Str"");
    }
    if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
      player.setHealth(20);
      player.teleport(player.getWorld().getSpawnLocation());
    }
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if (Config.session_enabled && ((eBeanClass.getReloadtime() + 30) >= Util.timeStamp())) {
      sessionallow=true;
    }
    if (Config.onlineMode && this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      sessionallow=true;
    }
    if (sessionallow) {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(event.getPlayer());
      Messages.sendMessage(Message.session_valid,player,null);
    }
 else     if (this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        @Override public void run(){
          if (!plugin.isAuthorized(player)) {
            if (player.getInventory() != null) {
              player.getInventory().clear();
            }
            Util.craftFirePlayer.clearArmorinventory(player);
          }
        }
      }
,20);
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
        if (!Config.hasSpout) {
          Messages.sendMessage(Message.login_prompt,player,null);
        }
      }
 else {
        Messages.sendMessage(Message.login_normal,player,null);
      }
    }
 else     if (Config.register_force) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      Util.craftFirePlayer.clearArmorinventory(player);
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else     if (!Config.register_force) {
      if (Config.register_enabled) {
        Messages.sendMessage(Message.welcome_guest,player,null);
      }
    }
 else {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(player);
    }
  }
 catch (  IOException e) {
    Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    player.sendMessage(Color.red + ""String_Node_Str"");
  }
}",0.993671420133322
94011,"public void onScreenClose(ScreenCloseEvent event){
  Util.logging.Debug(""String_Node_Str"");
  if (!AuthDB.isAuthorized(event.getPlayer())) {
    Util.logging.Debug(""String_Node_Str"");
    if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
      Util.logging.Debug(""String_Node_Str"");
      event.setCancelled(true);
    }
  }
}","public void onScreenClose(ScreenCloseEvent event){
  if (!AuthDB.isAuthorized(event.getPlayer())) {
    if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
      event.setCancelled(true);
    }
  }
}",0.3056027164685908
94012,"public static boolean checkScript(String type,String script,String player,String password,String email,String ipAddress) throws SQLException {
  if (Util.databaseManager.getDatabaseType().equalsIgnoreCase(""String_Node_Str"")) {
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if (type.equalsIgnoreCase(""String_Node_Str"")) {
      if (eBeanClass.getRegistred().equalsIgnoreCase(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      String storedPassword=eBeanClass.getPassword();
      if (Encryption.SHA512(password).equals(storedPassword)) {
        return true;
      }
      return false;
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      Custom.adduser(player,email,password,ipAddress);
      eBeanClass.setEmail(email);
      eBeanClass.setPassword(Encryption.SHA512(password));
      eBeanClass.setRegistred(""String_Node_Str"");
      eBeanClass.setIp(ipAddress);
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      int amount=EBean.getUsers();
      logging.Info(amount + ""String_Node_Str"");
    }
  }
 else   if (Config.database_ison) {
    String usertable=null, usernamefield=null, passwordfield=null, saltfield=""String_Node_Str"";
    boolean bans=false;
    PreparedStatement ps=null;
    int number=0;
    if (Config.custom_enabled) {
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String check=MySQL.getfromtable(Config.custom_table,""String_Node_Str"",Config.custom_userfield,player);
        if (check != ""String_Node_Str"") {
          Config.hasForumBoard=true;
          return true;
        }
        return false;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        EBean eBeanClass=EBean.find(player);
        String storedPassword=eBeanClass.getPassword();
        if (Custom.check_hash(password,storedPassword)) {
          return true;
        }
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        EBean.checkPassword(player,hash);
        if (Custom.check_hash(password,hash)) {
          return true;
        }
        return false;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        EBean.checkPassword(player,hash);
        return true;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Custom.adduser(player,email,password,ipAddress);
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
    }
 else     if (script.equalsIgnoreCase(PhpBB.Name) || script.equalsIgnoreCase(PhpBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(PhpBB.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PhpBB.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PhpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(PhpBB.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PhpBB.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PhpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        PhpBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(SMF.Name) || script.equalsIgnoreCase(SMF.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(SMF.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        saltfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && SMF.check_hash(SMF.hash(1,player,password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (SMF.check_hash(SMF.hash(1,player,password),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(SMF.VersionRange2) || checkVersionInRange(""String_Node_Str"") || checkVersionInRange(""String_Node_Str"")|| checkVersionInRange(""String_Node_Str"")) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && SMF.check_hash(SMF.hash(2,player,password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (SMF.check_hash(SMF.hash(2,player,password),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        SMF.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(MyBB.Name) || script.equalsIgnoreCase(MyBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(MyBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        MyBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(VBulletin.Name) || script.equalsIgnoreCase(VBulletin.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(VBulletin.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(VBulletin.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        VBulletin.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Drupal.Name) || script.equalsIgnoreCase(Drupal.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(Drupal.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Encryption.md5(password).equals(storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Encryption.md5(password).equals(hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(Drupal.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && storedPassword.equals(Drupal.user_check_password(password,storedPassword))) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (hash.equals(Drupal.user_check_password(password,hash))) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Drupal.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Joomla.Name) || script.equalsIgnoreCase(Joomla.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(Joomla.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Joomla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(Joomla.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Joomla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Joomla.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Vanilla.Name) || script.equalsIgnoreCase(Vanilla.ShortName)) {
      if (checkVersionInRange(Vanilla.VersionRange)) {
        usertable=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        if (Vanilla.check() == 2) {
          usertable=usertable.toLowerCase();
        }
        Config.hasForumBoard=true;
        number=Vanilla.check();
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Vanilla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Vanilla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String emailcheck=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",email);
        if (emailcheck.equalsIgnoreCase(""String_Node_Str"")) {
          Vanilla.adduser(number,player,email,password,ipAddress);
          return true;
        }
        return false;
      }
    }
 else     if (script.equalsIgnoreCase(PunBB.Name) || script.equalsIgnoreCase(PunBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(PunBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        PunBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(XenForo.Name) || script.equalsIgnoreCase(XenForo.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(XenForo.VersionRange)) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
          int offset=-1;
          int chunkSize=1024;
          long blobLength=hash.length();
          if (chunkSize > blobLength) {
            chunkSize=(int)blobLength;
          }
          char buffer[]=new char[chunkSize];
          StringBuilder stringBuffer=new StringBuilder();
          Reader reader=new InputStreamReader(hash.getBinaryStream());
          try {
            while ((offset=reader.read(buffer)) != -1) {
              stringBuffer.append(buffer,0,offset);
            }
          }
 catch (          IOException e) {
            logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
          String cache=stringBuffer.toString();
          String thehash=forumCacheValue(cache,""String_Node_Str"");
          String thesalt=forumCacheValue(cache,""String_Node_Str"");
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          String storedSalt=eBeanClass.getSalt();
          if (storedPassword != null && storedSalt != null && XenForo.check_hash(XenForo.hash(1,storedSalt,password),storedPassword)) {
            return true;
          }
          EBean.checkSalt(player,thesalt);
          EBean.checkPassword(player,thehash);
          if (XenForo.check_hash(XenForo.hash(1,thesalt,password),thehash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        XenForo.adduser(number,player,email,password,ipAddress);
        return true;
      }
 else       if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
        int offset=-1;
        int chunkSize=1024;
        long blobLength=hash.length();
        if (chunkSize > blobLength) {
          chunkSize=(int)blobLength;
        }
        char buffer[]=new char[chunkSize];
        StringBuilder stringBuffer=new StringBuilder();
        Reader reader=new InputStreamReader(hash.getBinaryStream());
        try {
          while ((offset=reader.read(buffer)) != -1) {
            stringBuffer.append(buffer,0,offset);
          }
        }
 catch (        IOException e) {
          logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
        String cache=stringBuffer.toString();
        String thehash=forumCacheValue(cache,""String_Node_Str"");
        EBean.checkPassword(player,thehash);
        return true;
      }
 else       if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
        int offset=-1;
        int chunkSize=1024;
        long blobLength=hash.length();
        if (chunkSize > blobLength) {
          chunkSize=(int)blobLength;
        }
        char buffer[]=new char[chunkSize];
        StringBuilder stringBuffer=new StringBuilder();
        Reader reader=new InputStreamReader(hash.getBinaryStream());
        try {
          while ((offset=reader.read(buffer)) != -1) {
            stringBuffer.append(buffer,0,offset);
          }
        }
 catch (        IOException e) {
          logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
        String cache=stringBuffer.toString();
        String thesalt=forumCacheValue(cache,""String_Node_Str"");
        EBean.checkSalt(player,thesalt);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(BBPress.Name) || script.equalsIgnoreCase(BBPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(BBPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && BBPress.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (BBPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        BBPress.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(DLE.Name) || script.equalsIgnoreCase(DLE.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(DLE.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && DLE.check_hash(DLE.hash(password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (DLE.check_hash(DLE.hash(password),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        DLE.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(IPB.Name) || script.equalsIgnoreCase(IPB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(IPB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          player=player.toLowerCase();
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        player=player.toLowerCase();
        IPB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(WordPress.Name) || script.equalsIgnoreCase(WordPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(WordPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && WordPress.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          Util.logging.Info(""String_Node_Str"" + hash);
          if (WordPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        WordPress.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
    if (!Config.hasForumBoard) {
      if (!Config.custom_enabled) {
        String tempVers=Config.script_version;
        Config.script_version=scriptVersion();
        logging.Info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Config.script_name + ""String_Node_Str""+ tempVers+ ""String_Node_Str""+ Config.script_version+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      String check=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",usernamefield,player);
      if (check != ""String_Node_Str"") {
        return true;
      }
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      if (script.equalsIgnoreCase(PhpBB.Name) || script.equalsIgnoreCase(PhpBB.ShortName)) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
 else {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
      ResultSet rs=ps.executeQuery();
      if (rs.next()) {
        logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
      }
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      String hash=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + passwordfield + ""String_Node_Str"",usernamefield,player);
      EBean.checkPassword(player,hash);
      return true;
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
      String salt=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + saltfield + ""String_Node_Str"",usernamefield,player);
      EBean.checkSalt(player,salt);
      return true;
    }
  }
  return false;
}","public static boolean checkScript(String type,String script,String player,String password,String email,String ipAddress) throws SQLException {
  if (Util.databaseManager.getDatabaseType().equalsIgnoreCase(""String_Node_Str"")) {
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if (type.equalsIgnoreCase(""String_Node_Str"")) {
      if (eBeanClass.getRegistred().equalsIgnoreCase(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      String storedPassword=eBeanClass.getPassword();
      if (Encryption.SHA512(password).equals(storedPassword)) {
        return true;
      }
      return false;
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      Custom.adduser(player,email,password,ipAddress);
      eBeanClass.setEmail(email);
      eBeanClass.setPassword(Encryption.SHA512(password));
      eBeanClass.setRegistred(""String_Node_Str"");
      eBeanClass.setIp(ipAddress);
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      int amount=EBean.getUsers();
      logging.Info(amount + ""String_Node_Str"");
    }
  }
 else   if (Config.database_ison) {
    String usertable=null, usernamefield=null, passwordfield=null, saltfield=""String_Node_Str"";
    boolean bans=false;
    PreparedStatement ps=null;
    int number=0;
    if (Config.custom_enabled) {
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String check=MySQL.getfromtable(Config.custom_table,""String_Node_Str"",Config.custom_userfield,player);
        if (check != ""String_Node_Str"") {
          Config.hasForumBoard=true;
          return true;
        }
        return false;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        EBean eBeanClass=EBean.find(player);
        String storedPassword=eBeanClass.getPassword();
        if (Custom.check_hash(password,storedPassword)) {
          return true;
        }
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        EBean.checkPassword(player,hash);
        if (Custom.check_hash(password,hash)) {
          return true;
        }
        return false;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        EBean.checkPassword(player,hash);
        return true;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Custom.adduser(player,email,password,ipAddress);
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
    }
 else     if (script.equalsIgnoreCase(PhpBB.Name) || script.equalsIgnoreCase(PhpBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(PhpBB.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PhpBB.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PhpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(PhpBB.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PhpBB.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PhpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        PhpBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(SMF.Name) || script.equalsIgnoreCase(SMF.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(SMF.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        saltfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && SMF.check_hash(SMF.hash(1,player,password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (SMF.check_hash(SMF.hash(1,player,password),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(SMF.VersionRange2) || checkVersionInRange(""String_Node_Str"") || checkVersionInRange(""String_Node_Str"")|| checkVersionInRange(""String_Node_Str"")) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && SMF.check_hash(SMF.hash(2,player,password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (SMF.check_hash(SMF.hash(2,player,password),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        SMF.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(MyBB.Name) || script.equalsIgnoreCase(MyBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(MyBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        MyBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(VBulletin.Name) || script.equalsIgnoreCase(VBulletin.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(VBulletin.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(VBulletin.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        VBulletin.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Drupal.Name) || script.equalsIgnoreCase(Drupal.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(Drupal.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Encryption.md5(password).equals(storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Encryption.md5(password).equals(hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(Drupal.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && storedPassword.equals(Drupal.user_check_password(password,storedPassword))) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (hash.equals(Drupal.user_check_password(password,hash))) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Drupal.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Joomla.Name) || script.equalsIgnoreCase(Joomla.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(Joomla.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Joomla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(Joomla.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Joomla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Joomla.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Vanilla.Name) || script.equalsIgnoreCase(Vanilla.ShortName)) {
      if (checkVersionInRange(Vanilla.VersionRange)) {
        usertable=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        if (Vanilla.check() == 2) {
          usertable=usertable.toLowerCase();
        }
        Config.hasForumBoard=true;
        number=Vanilla.check();
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Vanilla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Vanilla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String emailcheck=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",email);
        if (emailcheck.equalsIgnoreCase(""String_Node_Str"")) {
          Vanilla.adduser(number,player,email,password,ipAddress);
          return true;
        }
        return false;
      }
    }
 else     if (script.equalsIgnoreCase(PunBB.Name) || script.equalsIgnoreCase(PunBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(PunBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        PunBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(XenForo.Name) || script.equalsIgnoreCase(XenForo.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(XenForo.VersionRange)) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
          int offset=-1;
          int chunkSize=1024;
          long blobLength=hash.length();
          if (chunkSize > blobLength) {
            chunkSize=(int)blobLength;
          }
          char buffer[]=new char[chunkSize];
          StringBuilder stringBuffer=new StringBuilder();
          Reader reader=new InputStreamReader(hash.getBinaryStream());
          try {
            while ((offset=reader.read(buffer)) != -1) {
              stringBuffer.append(buffer,0,offset);
            }
          }
 catch (          IOException e) {
            logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
          String cache=stringBuffer.toString();
          String thehash=forumCacheValue(cache,""String_Node_Str"");
          String thesalt=forumCacheValue(cache,""String_Node_Str"");
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          String storedSalt=eBeanClass.getSalt();
          if (storedPassword != null && storedSalt != null && XenForo.check_hash(XenForo.hash(1,storedSalt,password),storedPassword)) {
            return true;
          }
          EBean.checkSalt(player,thesalt);
          EBean.checkPassword(player,thehash);
          if (XenForo.check_hash(XenForo.hash(1,thesalt,password),thehash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        XenForo.adduser(number,player,email,password,ipAddress);
        return true;
      }
 else       if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
        int offset=-1;
        int chunkSize=1024;
        long blobLength=hash.length();
        if (chunkSize > blobLength) {
          chunkSize=(int)blobLength;
        }
        char buffer[]=new char[chunkSize];
        StringBuilder stringBuffer=new StringBuilder();
        Reader reader=new InputStreamReader(hash.getBinaryStream());
        try {
          while ((offset=reader.read(buffer)) != -1) {
            stringBuffer.append(buffer,0,offset);
          }
        }
 catch (        IOException e) {
          logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
        String cache=stringBuffer.toString();
        String thehash=forumCacheValue(cache,""String_Node_Str"");
        EBean.checkPassword(player,thehash);
        return true;
      }
 else       if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
        int offset=-1;
        int chunkSize=1024;
        long blobLength=hash.length();
        if (chunkSize > blobLength) {
          chunkSize=(int)blobLength;
        }
        char buffer[]=new char[chunkSize];
        StringBuilder stringBuffer=new StringBuilder();
        Reader reader=new InputStreamReader(hash.getBinaryStream());
        try {
          while ((offset=reader.read(buffer)) != -1) {
            stringBuffer.append(buffer,0,offset);
          }
        }
 catch (        IOException e) {
          logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
        String cache=stringBuffer.toString();
        String thesalt=forumCacheValue(cache,""String_Node_Str"");
        EBean.checkSalt(player,thesalt);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(BBPress.Name) || script.equalsIgnoreCase(BBPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(BBPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && BBPress.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (BBPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        BBPress.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(DLE.Name) || script.equalsIgnoreCase(DLE.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(DLE.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && DLE.check_hash(DLE.hash(password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (DLE.check_hash(DLE.hash(password),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        DLE.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(IPB.Name) || script.equalsIgnoreCase(IPB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(IPB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          player=player.toLowerCase();
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        player=player.toLowerCase();
        IPB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(WordPress.Name) || script.equalsIgnoreCase(WordPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(WordPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && WordPress.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          Util.logging.Info(""String_Node_Str"" + hash);
          if (WordPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        WordPress.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
    if (!Config.hasForumBoard) {
      if (!Config.custom_enabled) {
        String tempVers=Config.script_version;
        Config.script_version=scriptVersion();
        logging.Info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Config.script_name + ""String_Node_Str""+ tempVers+ ""String_Node_Str""+ Config.script_version+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      String check=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",usernamefield,player);
      if (check != ""String_Node_Str"") {
        return true;
      }
      return false;
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      if (script.equalsIgnoreCase(PhpBB.Name) || script.equalsIgnoreCase(PhpBB.ShortName)) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
 else {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
      ResultSet rs=ps.executeQuery();
      if (rs.next()) {
        logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
      }
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      String hash=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + passwordfield + ""String_Node_Str"",usernamefield,player);
      EBean.checkPassword(player,hash);
      return true;
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
      String salt=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + saltfield + ""String_Node_Str"",usernamefield,player);
      EBean.checkSalt(player,salt);
      return true;
    }
  }
  return false;
}",0.9996662104876664
94013,"public static void sync(Player player){
  try {
    if (!Config.database_keepalive) {
      Util.databaseManager.connect();
    }
    EBean eBeanClass=checkPlayer(player.getName(),true);
    String registred=eBeanClass.getRegistred();
    if (!Util.checkScript(""String_Node_Str"",Config.script_name,player.getName(),null,null,null)) {
      if (registred != null && registred.equalsIgnoreCase(""String_Node_Str"")) {
        Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
        eBeanClass.setRegistred(""String_Node_Str"");
        save(eBeanClass);
        registred=""String_Node_Str"";
      }
    }
    if (registred != null && registred.equalsIgnoreCase(""String_Node_Str"")) {
      Util.checkScript(""String_Node_Str"",Config.script_name,player.getName(),null,null,null);
      Util.checkScript(""String_Node_Str"",Config.script_name,player.getName(),null,null,null);
    }
    if (!Config.database_keepalive) {
      Util.databaseManager.close();
    }
  }
 catch (  SQLException e) {
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
  }
}","public static void sync(Player player){
  try {
    if (!Config.database_keepalive) {
      Util.databaseManager.connect();
    }
    EBean eBeanClass=checkPlayer(player.getName(),true);
    String registred=eBeanClass.getRegistred();
    if (Util.checkScript(""String_Node_Str"",Config.script_name,player.getName(),null,null,null)) {
      eBeanClass.setRegistred(""String_Node_Str"");
      save(eBeanClass);
      registred=""String_Node_Str"";
    }
 else {
      if (registred != null && registred.equalsIgnoreCase(""String_Node_Str"")) {
        Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
        eBeanClass.setRegistred(""String_Node_Str"");
        save(eBeanClass);
        registred=""String_Node_Str"";
      }
    }
    if (registred != null && registred.equalsIgnoreCase(""String_Node_Str"")) {
      Util.checkScript(""String_Node_Str"",Config.script_name,player.getName(),null,null,null);
      Util.checkScript(""String_Node_Str"",Config.script_name,player.getName(),null,null,null);
    }
    if (!Config.database_keepalive) {
      Util.databaseManager.close();
    }
  }
 catch (  SQLException e) {
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
  }
}",0.9542772861356932
94014,"public static void adduser(int checkid,String player,String email,String password,String ipAddress) throws SQLException {
  if (checkid == 1) {
    long timestamp=System.currentTimeMillis() / 1000;
    PreparedStatement ps;
    String passwordhashed=hash(password);
    String realdate=new java.text.SimpleDateFormat(""String_Node_Str"").format(new java.util.Date(timestamp * 1000));
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
    ps.setString(1,player);
    ps.setString(2,passwordhashed);
    ps.setString(3,player);
    ps.setString(4,email);
    ps.setString(5,realdate);
    ps.setString(6,player);
    ps.executeUpdate();
    ps.close();
    int userid=MySQL.countitall(Config.script_tableprefix + ""String_Node_Str"");
    String[] fields={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] values={""String_Node_Str"",""String_Node_Str"",player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    for (int i=0; i < fields.length; i++) {
      ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
      ps.setInt(1,userid);
      ps.setString(2,fields[i]);
      ps.setString(3,values[i]);
      ps.executeUpdate();
      ps.close();
    }
  }
}","public static void adduser(int checkid,String player,String email,String password,String ipAddress) throws SQLException {
  if (checkid == 1) {
    long timestamp=System.currentTimeMillis() / 1000;
    PreparedStatement ps;
    String passwordhashed=hash(password);
    String realdate=new java.text.SimpleDateFormat(""String_Node_Str"").format(new java.util.Date(timestamp * 1000));
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
    ps.setString(1,player);
    ps.setString(2,passwordhashed);
    ps.setString(3,player);
    ps.setString(4,email);
    ps.setString(5,realdate);
    ps.setString(6,player);
    ps.executeUpdate();
    ps.close();
    int userid=MySQL.countitall(Config.script_tableprefix + ""String_Node_Str"");
    String[] fields={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Config.script_tableprefix + ""String_Node_Str"",Config.script_tableprefix + ""String_Node_Str""};
    String[] values={""String_Node_Str"",""String_Node_Str"",player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    for (int i=0; i < fields.length; i++) {
      ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + ""String_Node_Str""+ ""String_Node_Str"",1);
      ps.setInt(1,userid);
      ps.setString(2,fields[i]);
      ps.setString(3,values[i]);
      ps.executeUpdate();
      ps.close();
    }
  }
}",0.9733487833140207
94015,"public boolean checkGuest(Player player,boolean what){
  if (what && (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false)) {
    return true;
  }
 else   if (Config.protection_notify && this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
    if (!this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.put(player.getName(),Util.timeStamp() + Config.protection_delay);
      Messages.sendMessage(Message.guest_notauthorized,player,null);
    }
 else {
      if (this.plugin.AuthDB_RemindLogin.get(player.getName()) < Util.timeStamp()) {
        Messages.sendMessage(Message.guest_notauthorized,player,null);
        this.plugin.AuthDB_RemindLogin.put(player.getName(),Util.timeStamp() + Config.protection_delay);
      }
    }
  }
 else {
    if (Config.protection_notify && this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.remove(player.getName());
    }
  }
  return false;
}","boolean checkGuest(Player player,boolean what){
  if (what) {
    if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
      return true;
    }
  }
 else   if (Config.protection_notify && !AuthDB.isAuthorized(player)) {
    if (!this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.put(player.getName(),Util.timeStamp() + Config.protection_delay);
      Messages.sendMessage(Message.guest_notauthorized,player,null);
    }
 else {
      if (this.plugin.AuthDB_RemindLogin.get(player.getName()) < Util.timeStamp()) {
        Messages.sendMessage(Message.guest_notauthorized,player,null);
        this.plugin.AuthDB_RemindLogin.put(player.getName(),Util.timeStamp() + Config.protection_delay);
      }
    }
  }
 else {
    if (Config.protection_notify && this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.remove(player.getName());
    }
  }
  return false;
}",0.5448154657293497
94016,"public boolean checkGuest(Player player,boolean what){
  if (what == true && this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false) {
    return true;
  }
 else   if (Config.protection_notify && this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
    if (!this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.put(player.getName(),Util.timeStamp() + Config.protection_delay);
      Messages.sendMessage(Message.guest_notauthorized,player,null);
    }
 else {
      if (this.plugin.AuthDB_RemindLogin.get(player.getName()) < Util.timeStamp()) {
        Messages.sendMessage(Message.guest_notauthorized,player,null);
        this.plugin.AuthDB_RemindLogin.put(player.getName(),Util.timeStamp() + Config.protection_delay);
      }
    }
  }
 else   if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == true && plugin.isAuthorized(player) == true) {
    if (Config.protection_notify && this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.remove(player.getName());
    }
    return true;
  }
 else {
    if (Config.protection_notify && this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.remove(player.getName());
    }
  }
  return false;
}","boolean checkGuest(Player player,boolean what){
  if (what) {
    if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
      return true;
    }
  }
 else   if (Config.protection_notify && !AuthDB.isAuthorized(player)) {
    if (!this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.put(player.getName(),Util.timeStamp() + Config.protection_delay);
      Messages.sendMessage(Message.guest_notauthorized,player,null);
    }
 else {
      if (this.plugin.AuthDB_RemindLogin.get(player.getName()) < Util.timeStamp()) {
        Messages.sendMessage(Message.guest_notauthorized,player,null);
        this.plugin.AuthDB_RemindLogin.put(player.getName(),Util.timeStamp() + Config.protection_delay);
      }
    }
  }
 else   if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == true && plugin.isAuthorized(player) == true) {
    if (Config.protection_notify && this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.remove(player.getName());
    }
    return true;
  }
 else {
    if (Config.protection_notify && this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.remove(player.getName());
    }
  }
  return false;
}",0.8692253020611229
94017,"public void onPlayerChat(PlayerChatEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!plugin.isAuthorized(event.getPlayer())) {
    Player player=event.getPlayer();
    if (ZPermissions.isAllowed(player,Permission.command_login)) {
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"") && (this.plugin.isRegistered(""String_Node_Str"",event.getPlayer().getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(event.getPlayer().getName())))) {
        String[] split=event.getMessage().split(""String_Node_Str"");
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          if (plugin.isAuthorized(player)) {
            Messages.sendMessage(Message.login_authorized,player,null);
          }
 else           if (split.length > 1) {
            player.sendMessage(""String_Node_Str"" + Util.checkOtherName(player.getName()));
          }
 else           if (this.plugin.checkPassword(player.getName(),split[0]) || this.plugin.checkPassword(Util.checkOtherName(player.getName()),split[0])) {
            Processes.Login(player);
            Messages.sendMessage(Message.login_success,player,null);
          }
 else {
            Messages.sendMessage(Message.login_failure,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(""String_Node_Str"");
          event.setCancelled(true);
        }
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
 else     if (!checkGuest(event.getPlayer(),Config.guests_chat)) {
      event.setCancelled(true);
    }
  }
}","public void onPlayerChat(PlayerChatEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!AuthDB.isAuthorized(event.getPlayer())) {
    Player player=event.getPlayer();
    if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
      if (this.plugin.isRegistered(""String_Node_Str"",event.getPlayer().getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(event.getPlayer().getName()))) {
        String[] split=event.getMessage().split(""String_Node_Str"");
        if (ZPermissions.isAllowed(player,Permission.command_login)) {
          if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
            if (AuthDB.isAuthorized(player)) {
              Messages.sendMessage(Message.login_authorized,player,null);
            }
 else             if (split.length > 1) {
              Messages.sendMessage(Message.login_prompt,player,null);
            }
 else             if (this.plugin.checkPassword(player.getName(),split[0]) || this.plugin.checkPassword(Util.checkOtherName(player.getName()),split[0])) {
              Processes.Login(player);
              Messages.sendMessage(Message.login_success,player,null);
            }
 else {
              Messages.sendMessage(Message.login_failure,player,null);
            }
            Util.logging.Debug(player.getName() + ""String_Node_Str"");
            event.setMessage(""String_Node_Str"");
            event.setCancelled(true);
          }
          event.setMessage(""String_Node_Str"");
          event.setCancelled(true);
        }
      }
 else       if (!checkGuest(event.getPlayer(),Config.guests_chat)) {
        event.setCancelled(true);
      }
    }
 else     if (!checkGuest(event.getPlayer(),Config.guests_chat)) {
      event.setCancelled(true);
    }
  }
}",0.8716104039845047
94018,"boolean checkGuest(Player player,boolean what){
  if (what) {
    if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
      return true;
    }
  }
 else   if (Config.protection_notify && this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
    if (!this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.put(player.getName(),Util.timeStamp() + Config.protection_delay);
      Messages.sendMessage(Message.guest_notauthorized,player,null);
    }
 else {
      if (this.plugin.AuthDB_RemindLogin.get(player.getName()) < Util.timeStamp()) {
        Messages.sendMessage(Message.guest_notauthorized,player,null);
        this.plugin.AuthDB_RemindLogin.put(player.getName(),Util.timeStamp() + Config.protection_delay);
      }
    }
  }
 else {
    if (Config.protection_notify && this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.remove(player.getName());
    }
  }
  return false;
}","boolean checkGuest(Player player,boolean what){
  if (what) {
    if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
      return true;
    }
  }
 else   if (Config.protection_notify && !AuthDB.isAuthorized(player)) {
    if (!this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.put(player.getName(),Util.timeStamp() + Config.protection_delay);
      Messages.sendMessage(Message.guest_notauthorized,player,null);
    }
 else {
      if (this.plugin.AuthDB_RemindLogin.get(player.getName()) < Util.timeStamp()) {
        Messages.sendMessage(Message.guest_notauthorized,player,null);
        this.plugin.AuthDB_RemindLogin.put(player.getName(),Util.timeStamp() + Config.protection_delay);
      }
    }
  }
 else {
    if (Config.protection_notify && this.plugin.AuthDB_RemindLogin.containsKey(player.getName())) {
      this.plugin.AuthDB_RemindLogin.remove(player.getName());
    }
  }
  return false;
}",0.5589137100306614
94019,"public void storeInventory(Player player,ItemStack[] inventory,ItemStack[] armorinventory) throws IOException {
  StringBuffer inv=new StringBuffer();
  StringBuffer armorinv=new StringBuffer();
  for (short i=0; i < inventory.length; i=(short)(i + 1)) {
    if (inventory[i] != null) {
      inv.append(inventory[i].getTypeId() + ""String_Node_Str"" + inventory[i].getAmount()+ ""String_Node_Str""+ (inventory[i].getData() == null ? ""String_Node_Str"" : Byte.valueOf(inventory[i].getData().getData()))+ ""String_Node_Str""+ inventory[i].getDurability()+ ""String_Node_Str"");
    }
 else {
      inv.append(""String_Node_Str"");
    }
  }
  for (short i=0; i < armorinventory.length; i=(short)(i + 1)) {
    if (armorinventory[i] != null) {
      armorinv.append(armorinventory[i].getTypeId() + ""String_Node_Str"" + armorinventory[i].getAmount()+ ""String_Node_Str""+ (armorinventory[i].getData() == null ? ""String_Node_Str"" : Byte.valueOf(armorinventory[i].getData().getData()))+ ""String_Node_Str""+ armorinventory[i].getDurability()+ ""String_Node_Str"");
    }
 else {
      armorinv.append(""String_Node_Str"");
    }
  }
  EBean eBeanClass=EBean.find(player);
  eBeanClass.setInventory(inv.toString());
  eBeanClass.setArmorinventory(armorinv.toString());
  pluginManager.plugin.database.save(eBeanClass);
}","public void storeInventory(Player player,ItemStack[] inventory,ItemStack[] armorinventory) throws IOException {
  StringBuffer inv=new StringBuffer();
  StringBuffer armorinv=new StringBuffer();
  for (short i=0; i < inventory.length; i=(short)(i + 1)) {
    if (inventory[i] != null) {
      inv.append(inventory[i].getTypeId() + ""String_Node_Str"" + inventory[i].getAmount()+ ""String_Node_Str""+ (inventory[i].getData() == null ? ""String_Node_Str"" : Byte.valueOf(inventory[i].getData().getData()))+ ""String_Node_Str""+ inventory[i].getDurability()+ ""String_Node_Str"");
    }
 else {
      inv.append(""String_Node_Str"");
    }
  }
  loggingManager.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ inv);
  for (short i=0; i < armorinventory.length; i=(short)(i + 1)) {
    if (armorinventory[i] != null) {
      armorinv.append(armorinventory[i].getTypeId() + ""String_Node_Str"" + armorinventory[i].getAmount()+ ""String_Node_Str""+ (armorinventory[i].getData() == null ? ""String_Node_Str"" : Byte.valueOf(armorinventory[i].getData().getData()))+ ""String_Node_Str""+ armorinventory[i].getDurability()+ ""String_Node_Str"");
    }
 else {
      armorinv.append(""String_Node_Str"");
    }
  }
  loggingManager.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ armorinv);
  EBean eBeanClass=EBean.find(player);
  eBeanClass.setInventory(inv.toString());
  eBeanClass.setArmorinventory(armorinv.toString());
  pluginManager.plugin.database.save(eBeanClass);
}",0.9353089989157932
94020,"public void onEnable(){
  plugin=this;
  setupPluginInformation();
  server=getServer();
  database=getDatabase();
  Plugin[] plugins=server.getPluginManager().getPlugins();
  int counter=0;
  StringBuffer Plugins=new StringBuffer();
  while (plugins.length > counter) {
    Plugins.append(plugins[counter].getDescription().getName() + ""String_Node_Str"" + plugins[counter].getDescription().getVersion());
    if (plugins.length != (counter + 1)) {
      Plugins.append(""String_Node_Str"");
    }
    counter++;
  }
  File f=new File(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(getDataFolder() + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  LoadYml(""String_Node_Str"",getClass().getProtectionDomain().getCodeSource());
  LoadYml(""String_Node_Str"",getClass().getProtectionDomain().getCodeSource());
  setupDatabase();
  checkOldFiles();
  final Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  CheckPermissions();
  if ((checkCraftIRC != null) && (Config.CraftIRC_enabled == true)) {
    craftircHandle=((CraftIRC)checkCraftIRC);
    Util.logging.Info(""String_Node_Str"" + checkCraftIRC.getDescription().getName());
    this.getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
      @Override public void run(){
        if (checkCraftIRC.isEnabled()) {
          ZCraftIRC.sendMessage(Message.OnEnable,null);
        }
      }
    }
,100);
  }
  PluginManager pm=getServer().getPluginManager();
  final Plugin Backpack=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Backpack != null) {
    Config.hasBackpack=true;
  }
  final Plugin Check=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Check != null) {
    Config.hasBukkitContrib=true;
  }
  final Plugin CheckBuildr=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (CheckBuildr != null) {
    Config.hasBuildr=true;
  }
  final Plugin CheckSpout=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (CheckSpout != null) {
    spoutListener=new AuthDBSpoutListener(this);
    screenListener=new AuthDBScreenListener(this);
    inputListener=new AuthDBInputListener(this);
    pm.registerEvent(Event.Type.CUSTOM_EVENT,this.spoutListener,Priority.Low,this);
    pm.registerEvent(Event.Type.CUSTOM_EVENT,this.screenListener,Priority.Low,this);
    pm.registerEvent(Event.Type.CUSTOM_EVENT,this.inputListener,Priority.Low,this);
    Config.hasSpout=true;
  }
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,this.playerListener,Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.entityListener,Event.Priority.Normal,this);
  Config.onlineMode=getServer().getOnlineMode();
  Util.logging.Debug(""String_Node_Str"" + Config.onlineMode);
  updateLinkedNames();
  Util.databaseManager.connect();
  try {
    Util.checkScript(""String_Node_Str"",Config.script_name,null,null,null,null);
  }
 catch (  SQLException e) {
    if (Config.custom_enabled && Config.custom_autocreate) {
      String enter=""String_Node_Str"";
      Util.logging.Info(""String_Node_Str"" + Config.custom_table);
      StringBuilder query=new StringBuilder();
      String NL=System.getProperty(""String_Node_Str"");
      try {
        Scanner scanner=new Scanner(new FileInputStream(getDataFolder() + ""String_Node_Str""));
        while (scanner != null && scanner.hasNextLine()) {
          String line=scanner.nextLine();
          if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
            query.append(""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ NL);
          }
 else {
            query.append(line + NL);
          }
        }
        scanner.close();
      }
 catch (      FileNotFoundException e2) {
        Util.logging.StackTrace(e2.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      Util.logging.Debug(enter + query);
      try {
        MySQL.query(""String_Node_Str"" + query);
        Util.logging.Info(""String_Node_Str"" + Config.custom_table);
        PreparedStatement ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          Util.logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
        ps.close();
      }
 catch (      SQLException e1) {
        Util.logging.Info(""String_Node_Str"" + Config.custom_table);
        Util.logging.StackTrace(e1.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
    }
 else {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  Util.logging.Info(pluginName + ""String_Node_Str"" + pluginVersion+ ""String_Node_Str"");
  Util.logging.Debug(""String_Node_Str"");
  if (Config.custom_enabled) {
    if (Config.custom_encryption == null) {
      Util.logging.Info(""String_Node_Str"");
    }
  }
  Util.logging.Info(pluginName + ""String_Node_Str"");
  String thescript=""String_Node_Str"", theversion=""String_Node_Str"";
  if (Config.custom_enabled) {
    thescript=""String_Node_Str"";
  }
 else {
    thescript=Config.script_name;
    theversion=Config.script_version;
  }
  String online=""String_Node_Str"" + getServer().getOnlinePlayers().length;
  String max=""String_Node_Str"" + getServer().getMaxPlayers();
  if (Config.usagestats_enabled) {
    try {
      Util.craftFire.postInfo(getServer().getServerName(),getServer().getVersion(),pluginVersion,System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),thescript,theversion,Plugins.toString(),online,max,server.getPort());
    }
 catch (    IOException e1) {
      Util.logging.Debug(""String_Node_Str"");
    }
  }
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p,true);
    if (eBeanClass.getReloadtime() + 30 > Util.timeStamp()) {
      Processes.Login(p);
    }
  }
}","public void onEnable(){
  plugin=this;
  setupPluginInformation();
  server=getServer();
  database=getDatabase();
  Plugin[] plugins=server.getPluginManager().getPlugins();
  int counter=0;
  StringBuffer Plugins=new StringBuffer();
  while (plugins.length > counter) {
    Plugins.append(plugins[counter].getDescription().getName() + ""String_Node_Str"" + plugins[counter].getDescription().getVersion());
    if (plugins.length != (counter + 1)) {
      Plugins.append(""String_Node_Str"");
    }
    counter++;
  }
  File f=new File(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(getDataFolder() + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  LoadYml(""String_Node_Str"",getClass().getProtectionDomain().getCodeSource());
  LoadYml(""String_Node_Str"",getClass().getProtectionDomain().getCodeSource());
  setupDatabase();
  checkOldFiles();
  final Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  CheckPermissions();
  if ((checkCraftIRC != null) && (Config.CraftIRC_enabled == true)) {
    craftircHandle=((CraftIRC)checkCraftIRC);
    Util.logging.Info(""String_Node_Str"" + checkCraftIRC.getDescription().getName());
    this.getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
      @Override public void run(){
        if (checkCraftIRC.isEnabled()) {
          ZCraftIRC.sendMessage(Message.OnEnable,null);
        }
      }
    }
,100);
  }
 else {
    Util.logging.Debug(""String_Node_Str"");
  }
  PluginManager pm=getServer().getPluginManager();
  Plugin check=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (check != null) {
    Config.hasBackpack=true;
    Util.logging.Info(""String_Node_Str"" + check.getDescription().getName() + ""String_Node_Str""+ check.getDescription().getVersion());
  }
 else {
    Util.logging.Debug(""String_Node_Str"");
  }
  check=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (check != null) {
    Config.hasBukkitContrib=true;
    Util.logging.Info(""String_Node_Str"" + check.getDescription().getName() + ""String_Node_Str""+ check.getDescription().getVersion());
  }
 else {
    Util.logging.Debug(""String_Node_Str"");
  }
  check=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (check != null) {
    Config.hasBuildr=true;
    Util.logging.Info(""String_Node_Str"" + check.getDescription().getName() + ""String_Node_Str""+ check.getDescription().getVersion());
  }
 else {
    Util.logging.Debug(""String_Node_Str"");
  }
  check=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (check != null) {
    spoutListener=new AuthDBSpoutListener(this);
    screenListener=new AuthDBScreenListener(this);
    inputListener=new AuthDBInputListener(this);
    pm.registerEvent(Event.Type.CUSTOM_EVENT,this.spoutListener,Priority.Low,this);
    pm.registerEvent(Event.Type.CUSTOM_EVENT,this.screenListener,Priority.Low,this);
    pm.registerEvent(Event.Type.CUSTOM_EVENT,this.inputListener,Priority.Low,this);
    Config.hasSpout=true;
    Util.logging.Info(""String_Node_Str"" + check.getDescription().getName() + ""String_Node_Str""+ check.getDescription().getVersion());
  }
 else {
    Util.logging.Debug(""String_Node_Str"");
  }
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,this.playerListener,Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.entityListener,Event.Priority.Normal,this);
  Config.onlineMode=getServer().getOnlineMode();
  Util.logging.Debug(""String_Node_Str"" + Config.onlineMode);
  updateLinkedNames();
  Util.databaseManager.connect();
  try {
    Util.checkScript(""String_Node_Str"",Config.script_name,null,null,null,null);
  }
 catch (  SQLException e) {
    if (Config.custom_enabled && Config.custom_autocreate) {
      String enter=""String_Node_Str"";
      Util.logging.Info(""String_Node_Str"" + Config.custom_table);
      StringBuilder query=new StringBuilder();
      String NL=System.getProperty(""String_Node_Str"");
      try {
        Scanner scanner=new Scanner(new FileInputStream(getDataFolder() + ""String_Node_Str""));
        while (scanner != null && scanner.hasNextLine()) {
          String line=scanner.nextLine();
          if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
            query.append(""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ NL);
          }
 else {
            query.append(line + NL);
          }
        }
        scanner.close();
      }
 catch (      FileNotFoundException e2) {
        Util.logging.StackTrace(e2.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      Util.logging.Debug(enter + query);
      try {
        MySQL.query(""String_Node_Str"" + query);
        Util.logging.Info(""String_Node_Str"" + Config.custom_table);
        PreparedStatement ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          Util.logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
        ps.close();
      }
 catch (      SQLException e1) {
        Util.logging.error(""String_Node_Str"" + Config.custom_table);
        Config.authdb_enabled=false;
        Util.logging.StackTrace(e1.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
    }
 else {
      Util.logging.error(""String_Node_Str"" + Config.database_database + ""String_Node_Str"");
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      Config.authdb_enabled=false;
    }
  }
  Util.logging.Info(pluginName + ""String_Node_Str"" + pluginVersion+ ""String_Node_Str"");
  Util.logging.Debug(""String_Node_Str"");
  if (Config.custom_enabled) {
    if (Config.custom_encryption == null) {
      Util.logging.Info(""String_Node_Str"");
    }
  }
  Util.logging.Info(pluginName + ""String_Node_Str"");
  String thescript=""String_Node_Str"", theversion=""String_Node_Str"";
  if (Config.custom_enabled) {
    thescript=""String_Node_Str"";
  }
 else {
    thescript=Config.script_name;
    theversion=Config.script_version;
  }
  String online=""String_Node_Str"" + getServer().getOnlinePlayers().length;
  String max=""String_Node_Str"" + getServer().getMaxPlayers();
  if (Config.usagestats_enabled) {
    try {
      Util.craftFire.postInfo(getServer().getServerName(),getServer().getVersion(),pluginVersion,System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),thescript,theversion,Plugins.toString(),online,max,server.getPort());
    }
 catch (    IOException e1) {
      Util.logging.Debug(""String_Node_Str"");
    }
  }
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p,true);
    if (eBeanClass.getReloadtime() + 30 > Util.timeStamp()) {
      Processes.Login(p);
    }
  }
}",0.9219099590723056
94021,"public void onDisable(){
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p,true);
    if (eBeanClass.getAuthorized() != null && eBeanClass.getAuthorized().equalsIgnoreCase(""String_Node_Str"")) {
      eBeanClass.setReloadtime(Util.timeStamp());
      AuthDB.database.save(eBeanClass);
    }
    Processes.Logout(p);
  }
  Util.logging.Info(pluginName + ""String_Node_Str"" + pluginVersion+ ""String_Node_Str"");
  Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if ((checkCraftIRC != null) && (checkCraftIRC.isEnabled()) && (Config.CraftIRC_enabled == true)) {
    ZCraftIRC.sendMessage(Message.OnDisable,null);
  }
  authorizedNames.clear();
  AuthDB_AuthTime.clear();
  AuthDB_RemindLogin.clear();
  AuthDB_SpamMessage.clear();
  AuthDB_SpamMessageTime.clear();
  AuthDB_GUI_PasswordFieldIDs.clear();
  AuthDB_GUI_ErrorFieldIDs.clear();
  AuthDB_JoinTime.clear();
  AuthDB_LinkedNames.clear();
  AuthDB_LinkedNameCheck.clear();
  AuthDB_PasswordTries.clear();
  AuthDB_GUI_TempPasswords.clear();
  AuthDB_Timeouts.clear();
  AuthDB_Sessions.clear();
  AuthDB_Authed.clear();
  Util.databaseManager.close();
}","public void onDisable(){
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p,true);
    if (eBeanClass.getAuthorized() != null && eBeanClass.getAuthorized().equalsIgnoreCase(""String_Node_Str"")) {
      eBeanClass.setReloadtime(Util.timeStamp());
      AuthDB.database.save(eBeanClass);
    }
    Processes.Logout(p);
  }
  Util.logging.Info(pluginName + ""String_Node_Str"" + pluginVersion+ ""String_Node_Str"");
  Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if ((checkCraftIRC != null) && (checkCraftIRC.isEnabled()) && (Config.CraftIRC_enabled == true)) {
    ZCraftIRC.sendMessage(Message.OnDisable,null);
  }
  authorizedNames.clear();
  AuthDB_AuthTime.clear();
  AuthDB_GUI_ScreenIDs.clear();
  AuthDB_RemindLogin.clear();
  AuthDB_SpamMessage.clear();
  AuthDB_SpamMessageTime.clear();
  AuthDB_GUI_PasswordFieldIDs.clear();
  AuthDB_GUI_ErrorFieldIDs.clear();
  AuthDB_JoinTime.clear();
  AuthDB_LinkedNames.clear();
  AuthDB_LinkedNameCheck.clear();
  AuthDB_PasswordTries.clear();
  AuthDB_GUI_TempPasswords.clear();
  AuthDB_Timeouts.clear();
  AuthDB_Sessions.clear();
  AuthDB_Authed.clear();
  Util.databaseManager.close();
}",0.7886855241264559
94022,"public void onPlayerQuit(PlayerQuitEvent event){
  Player player=event.getPlayer();
  Messages.sendMessage(Message.left_server,player,null);
  if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
    player.setHealth(20);
    player.teleport(player.getWorld().getSpawnLocation());
  }
  long thetimestamp=System.currentTimeMillis() / 1000;
  if (Config.session_enabled && Config.session_start.equalsIgnoreCase(""String_Node_Str"")) {
    this.plugin.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),thetimestamp);
    EBean EBeanClass=EBean.checkPlayer(player,true);
    EBeanClass.setSessiontime(thetimestamp);
    this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
  }
  if (checkGuest(player,Config.guests_inventory) == false && this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false && this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
    ItemStack[] theinv;
    if (Config.hasBackpack) {
      theinv=new ItemStack[252];
    }
 else {
      theinv=new ItemStack[36];
    }
    player.getInventory().setContents(theinv);
  }
  Processes.Logout(player);
}","public void onPlayerQuit(PlayerQuitEvent event){
  Player player=event.getPlayer();
  Messages.sendMessage(Message.left_server,player,null);
  if (this.plugin.AuthDB_GUI_PasswordFieldIDs.containsKey(player.getName())) {
    this.plugin.AuthDB_GUI_PasswordFieldIDs.remove(player.getName());
  }
  if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
    player.setHealth(20);
    player.teleport(player.getWorld().getSpawnLocation());
  }
  long thetimestamp=System.currentTimeMillis() / 1000;
  if (Config.session_enabled && Config.session_start.equalsIgnoreCase(""String_Node_Str"")) {
    this.plugin.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),thetimestamp);
    EBean EBeanClass=EBean.checkPlayer(player,true);
    EBeanClass.setSessiontime(thetimestamp);
    this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
  }
  if (checkGuest(player,Config.guests_inventory) == false && this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false && this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
    ItemStack[] theinv;
    if (Config.hasBackpack) {
      theinv=new ItemStack[252];
    }
 else {
      theinv=new ItemStack[36];
    }
    player.getInventory().setContents(theinv);
  }
  Processes.Quit(player);
}",0.9367883784844916
94023,"public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  long start=Util.timeMS();
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_login) || split[0].equalsIgnoreCase(Config.aliases_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          Messages.sendMessage(Message.login_failure,player,null);
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_link) || split[0].equalsIgnoreCase(Config.aliases_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equals(split[1])) {
              if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                EBean eBeanClass=EBean.checkPlayer(split[1],true);
                String linkedname=eBeanClass.getLinkedname();
                if (linkedname != null) {
                  Messages.sendMessage(Message.link_duplicate,player,null);
                }
 else                 if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Link(player,split[1]);
                  Messages.sendMessage(Message.link_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.link_failure,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_exists,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.link_invaliduser,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_link + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_unlink) || split[0].equalsIgnoreCase(Config.aliases_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              EBean eBeanClass=EBean.checkPlayer(player,true);
              String linkedname=eBeanClass.getLinkedname();
              if (linkedname.equals(split[1])) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Unlink(player,split[1]);
                  Messages.sendMessage(Message.unlink_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.unlink_invalidpass,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.unlink_invaliduser,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_register) || split[0].equalsIgnoreCase(Config.aliases_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_enabled) {
          email=Config.custom_emailrequired;
        }
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_exists,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                if (Processes.Login(player)) {
                  Messages.sendMessage(Message.register_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.register_failure,player,null);
                  Util.logging.Debug(""String_Node_Str"");
                }
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}","public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  long start=Util.timeMS();
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_login) || split[0].equalsIgnoreCase(Config.aliases_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          if (Config.authdb_enabled) {
            Messages.sendMessage(Message.login_failure,player,null);
          }
 else {
            Messages.sendMessage(Message.login_offline,player,null);
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_link) || split[0].equalsIgnoreCase(Config.aliases_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equals(split[1])) {
              if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                EBean eBeanClass=EBean.checkPlayer(split[1],true);
                String linkedname=eBeanClass.getLinkedname();
                if (linkedname != null) {
                  Messages.sendMessage(Message.link_duplicate,player,null);
                }
 else                 if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Link(player,split[1]);
                  Messages.sendMessage(Message.link_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.link_failure,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_exists,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.link_invaliduser,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_link + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_unlink) || split[0].equalsIgnoreCase(Config.aliases_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              EBean eBeanClass=EBean.checkPlayer(player,true);
              String linkedname=eBeanClass.getLinkedname();
              if (linkedname.equals(split[1])) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Unlink(player,split[1]);
                  Messages.sendMessage(Message.unlink_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.unlink_invalidpass,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.unlink_invaliduser,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_register) || split[0].equalsIgnoreCase(Config.aliases_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_enabled) {
          email=Config.custom_emailrequired;
        }
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_exists,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                if (Processes.Login(player)) {
                  Messages.sendMessage(Message.register_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.register_failure,player,null);
                  Util.logging.Debug(""String_Node_Str"");
                }
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.9868567885926844
94024,"public void onScreenClose(ScreenCloseEvent event){
  if (!AuthDB.isAuthorized(event.getPlayer())) {
    if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
      event.setCancelled(true);
    }
  }
}","public void onScreenClose(ScreenCloseEvent event){
  Util.logging.Debug(""String_Node_Str"");
  if (!AuthDB.isAuthorized(event.getPlayer())) {
    Util.logging.Debug(""String_Node_Str"");
    if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"") && this.plugin.AuthDB_GUI_ScreenIDs.containsKey(event.getPlayer().getName())) {
      if (event.getScreen().getId().equals(this.plugin.AuthDB_GUI_ScreenIDs.get(event.getPlayer().getName()))) {
        Util.logging.Debug(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
  Util.logging.Debug(""String_Node_Str"");
}",0.5528846153846154
94025,"public void popGUI(SpoutPlayer spoutPlayer){
  PopupScreen popup=new GenericPopup();
  InGameHUD screen=spoutPlayer.getMainScreen();
  screen.attachPopupScreen(popup);
  showGUI(screen,false);
  Label pleaseLogin=new GenericLabel();
  pleaseLogin.setText(""String_Node_Str"");
  int offset=20;
  pleaseLogin.setHeight(height).setWidth(width).setX((screen.getWidth() - width) / 2 + offset + 3).setY((screen.getHeight() - height) / 2 - (offset * 2));
  popup.attachWidget(AuthDB.plugin,pleaseLogin);
  Button button=new GenericButton(""String_Node_Str"");
  button.setHeight(height).setWidth(width).setX((screen.getWidth() - width) / 2).setY((screen.getHeight() - height) / 2 + (offset / 2));
  popup.attachWidget(AuthDB.plugin,button);
  TextField textField=new GenericTextField();
  textField.setHeight(height).setWidth(width).setX((screen.getWidth() - width) / 2).setY((screen.getHeight() - height) / 2 - offset);
  AuthDB.AuthDB_GUI_PasswordFieldIDs.put(spoutPlayer.getName(),textField.getId());
  popup.attachWidget(AuthDB.plugin,textField);
}","public void popGUI(SpoutPlayer spoutPlayer){
  PopupScreen popup=new GenericPopup();
  InGameHUD screen=spoutPlayer.getMainScreen();
  screen.attachPopupScreen(popup);
  showGUI(screen,false);
  Label pleaseLogin=new GenericLabel();
  pleaseLogin.setText(""String_Node_Str"");
  int offset=20;
  pleaseLogin.setHeight(height).setWidth(width).setX((screen.getWidth() - width) / 2 + offset + 3).setY((screen.getHeight() - height) / 2 - (offset * 2));
  popup.attachWidget(AuthDB.plugin,pleaseLogin);
  Button button=new GenericButton(""String_Node_Str"");
  button.setHeight(height).setWidth(width).setX((screen.getWidth() - width) / 2).setY((screen.getHeight() - height) / 2 + (offset / 2));
  popup.attachWidget(AuthDB.plugin,button);
  TextField textField=new GenericTextField();
  textField.setHeight(height).setWidth(width).setX((screen.getWidth() - width) / 2).setY((screen.getHeight() - height) / 2 - offset);
  AuthDB.AuthDB_GUI_PasswordFieldIDs.put(spoutPlayer.getName(),textField.getId());
  AuthDB.AuthDB_GUI_ScreenIDs.put(spoutPlayer.getName(),screen.getId());
  popup.attachWidget(AuthDB.plugin,textField);
}",0.9429763560500696
94026,"public boolean checkGUI(Player player){
  if (Config.hasSpout) {
    SpoutPlayer spoutPlayer=(SpoutPlayer)player;
    if (!AuthDB.AuthDB_GUI_PasswordFieldIDs.containsKey(player.getName()) && spoutPlayer.isSpoutCraftEnabled() && spoutPlayer.getVersion() >= 18) {
      popGUI(spoutPlayer);
      return true;
    }
  }
  return false;
}","public boolean checkGUI(Player player){
  if (Config.hasSpout) {
    SpoutPlayer spoutPlayer=(SpoutPlayer)player;
    if (spoutPlayer.isSpoutCraftEnabled()) {
      popGUI(spoutPlayer);
      return true;
    }
  }
  return false;
}",0.6596119929453262
94027,"public Config(String config,String directory,String filename){
  template=new Configuration(new File(directory,filename));
  template.load();
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    language=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database;
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_emailrequired=getConfigBoolean(""String_Node_Str"",false);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_delay=Util.toSeconds(protection_delay_time,protection_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    CraftIRC_enabled=getConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=getConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    commands_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}","public Config(String config,String directory,String filename){
  template=new Configuration(new File(directory,filename));
  template.load();
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    language=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database;
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_emailrequired=getConfigBoolean(""String_Node_Str"",false);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_delay=Util.toSeconds(protection_delay_time,protection_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    CraftIRC_enabled=getConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=getConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    commands_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9632707233330448
94028,"public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  long start=Util.timeMS();
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.register_welcome)) {
      if (Config.register_force) {
        Util.spamText(player,Message.register_welcome.text,Config.register_delay,Config.register_show);
      }
 else {
        if (Config.link_enabled) {
          player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome + ""String_Node_Str"" + AuthDB_message_link_welcome,player,null));
        }
 else {
          player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome,player,null));
        }
      }
    }
 else     if (type.equals(Message.reload_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_reload_success,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_exists,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_register_timeout,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_login_timeout,player,null));
    }
 else     if (type.equals(Message.login_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_admin,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.logout_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_success,player,null));
    }
 else     if (type.equals(Message.logout_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_failure,player,null));
    }
 else     if (type.equals(Message.logout_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_admin,player,null));
    }
 else     if (type.equals(Message.logout_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_usage,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.link_duplicate)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_duplicate,player,null));
    }
 else     if (type.equals(Message.link_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_invaliduser,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.unlink_invalidpass)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invalidpass,player,null));
    }
 else     if (type.equals(Message.unlink_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invaliduser,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.email_badcharacters)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_badcharacters,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      if (Config.hasBukkitContrib || Config.hasSpout) {
        player.sendMessage(""String_Node_Str"");
      }
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,""String_Node_Str""));
    }
 else     if (type.equals(Message.protection_denied)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_denied,player,null));
    }
 else     if (type.equals(Message.protection_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_notauthorized,player,null));
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}","public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  long start=Util.timeMS();
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.register_welcome)) {
      if (Config.authdb_enabled) {
        if (Config.register_force) {
          Util.spamText(player,Message.register_welcome.text,Config.register_delay,Config.register_show);
        }
 else {
          if (Config.link_enabled) {
            player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome + ""String_Node_Str"" + AuthDB_message_link_welcome,player,null));
          }
 else {
            player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome,player,null));
          }
        }
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
      }
    }
 else     if (type.equals(Message.reload_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_reload_success,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
    }
 else     if (type.equals(Message.register_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_exists,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_register_timeout,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_offline,player,null));
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_login_timeout,player,null));
    }
 else     if (type.equals(Message.login_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_admin,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.logout_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_success,player,null));
    }
 else     if (type.equals(Message.logout_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_failure,player,null));
    }
 else     if (type.equals(Message.logout_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_admin,player,null));
    }
 else     if (type.equals(Message.logout_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_usage,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.link_duplicate)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_duplicate,player,null));
    }
 else     if (type.equals(Message.link_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_invaliduser,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.unlink_invalidpass)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invalidpass,player,null));
    }
 else     if (type.equals(Message.unlink_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invaliduser,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.email_badcharacters)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_badcharacters,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      if (Config.hasBukkitContrib || Config.hasSpout) {
        player.sendMessage(""String_Node_Str"");
      }
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,""String_Node_Str""));
    }
 else     if (type.equals(Message.protection_denied)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_denied,player,null));
    }
 else     if (type.equals(Message.protection_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_notauthorized,player,null));
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.8699441645104181
94029,"public static String replaceStrings(String string,Player player,String additional){
  long start=Util.timeMS();
  logging.Debug((""String_Node_Str""));
  if (!Config.has_badcharacters && Config.database_ison && player != null && player.getName().length() > Integer.parseInt(Config.username_minimum) && player.getName().length() < Integer.parseInt(Config.username_maximum)) {
    string=string.replaceAll(""String_Node_Str"",craftFirePlayer.getIP(player));
    string=string.replaceAll(""String_Node_Str"",player.getName());
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (!Util.checkOtherName(player.getName()).equals(player.getName())) {
      string=string.replaceAll(""String_Node_Str"",checkOtherName(player.getName()));
    }
  }
 else {
    string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(""String_Node_Str""));
  }
  string=string.replaceAll(""String_Node_Str"",Config.username_minimum);
  string=string.replaceAll(""String_Node_Str"",Config.username_maximum);
  string=string.replaceAll(""String_Node_Str"",Config.password_minimum);
  string=string.replaceAll(""String_Node_Str"",Config.password_maximum);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginName);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginVersion);
  string=string.replaceAll(""String_Node_Str"",Config.login_timeout_length + ""String_Node_Str"" + replaceTime(Config.login_timeout_length,Config.login_timeout_time));
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"" + Config.register_timeout_length + ""String_Node_Str""+ replaceTime(Config.register_timeout_length,Config.register_timeout_time));
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.filter_username));
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.filter_password));
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_register + ""String_Node_Str"" + Config.aliases_register+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_link + ""String_Node_Str"" + Config.aliases_link+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_unlink + ""String_Node_Str"" + Config.aliases_unlink+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_login + ""String_Node_Str"" + Config.aliases_login+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  long stop=Util.timeMS();
  Util.logging.Debug(""String_Node_Str"" + ((stop - start) / 1000) + ""String_Node_Str""+ (stop - start)+ ""String_Node_Str"");
  return string;
}","public static String replaceStrings(String string,Player player,String additional){
  long start=Util.timeMS();
  logging.Debug((""String_Node_Str""));
  if (!Config.has_badcharacters && Config.database_ison && player != null && player.getName().length() > Integer.parseInt(Config.username_minimum) && player.getName().length() < Integer.parseInt(Config.username_maximum)) {
    string=string.replaceAll(""String_Node_Str"",craftFirePlayer.getIP(player));
    string=string.replaceAll(""String_Node_Str"",player.getName());
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (!Util.checkOtherName(player.getName()).equals(player.getName())) {
      string=string.replaceAll(""String_Node_Str"",checkOtherName(player.getName()));
    }
  }
 else {
    string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(""String_Node_Str""));
  }
  String email=""String_Node_Str"";
  if (Config.custom_emailrequired) {
    email=""String_Node_Str"";
  }
  string=string.replaceAll(""String_Node_Str"",Config.username_minimum);
  string=string.replaceAll(""String_Node_Str"",Config.username_maximum);
  string=string.replaceAll(""String_Node_Str"",Config.password_minimum);
  string=string.replaceAll(""String_Node_Str"",Config.password_maximum);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginName);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginVersion);
  string=string.replaceAll(""String_Node_Str"",Config.login_timeout_length + ""String_Node_Str"" + replaceTime(Config.login_timeout_length,Config.login_timeout_time));
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"" + Config.register_timeout_length + ""String_Node_Str""+ replaceTime(Config.register_timeout_length,Config.register_timeout_time));
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.filter_username));
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.filter_password));
  string=string.replaceAll(""String_Node_Str"",email);
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_register + ""String_Node_Str"" + Config.aliases_register+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_link + ""String_Node_Str"" + Config.aliases_link+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_unlink + ""String_Node_Str"" + Config.aliases_unlink+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_login + ""String_Node_Str"" + Config.aliases_login+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  long stop=Util.timeMS();
  Util.logging.Debug(""String_Node_Str"" + ((stop - start) / 1000) + ""String_Node_Str""+ (stop - start)+ ""String_Node_Str"");
  return string;
}",0.9889225993085444
94030,"public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  Util.logging.Info(""String_Node_Str"" + event.getMessage());
  long start=Util.timeMS();
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_login) || split[0].equalsIgnoreCase(Config.aliases_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          Messages.sendMessage(Message.login_failure,player,null);
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_link) || split[0].equalsIgnoreCase(Config.aliases_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equals(split[1])) {
              if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                EBean eBeanClass=EBean.checkPlayer(split[1],true);
                String linkedname=eBeanClass.getLinkedname();
                if (linkedname != null) {
                  Messages.sendMessage(Message.link_duplicate,player,null);
                }
 else                 if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Link(player,split[1]);
                  Messages.sendMessage(Message.link_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.link_failure,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_exists,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.link_invaliduser,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_link + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_unlink) || split[0].equalsIgnoreCase(Config.aliases_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              EBean eBeanClass=EBean.checkPlayer(player,true);
              String linkedname=eBeanClass.getLinkedname();
              if (linkedname.equals(split[1])) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Unlink(player,split[1]);
                  Messages.sendMessage(Message.unlink_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.unlink_invalidpass,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.unlink_invaliduser,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_register) || split[0].equalsIgnoreCase(Config.aliases_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_exists,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Util.logging.Debug(""String_Node_Str"" + split[2]);
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                ItemStack[] inv=this.plugin.getInventory(player);
                if (inv != null) {
                  player.getInventory().setContents(inv);
                }
                inv=AuthDB.getArmorInventory(player);
                if (inv != null) {
                  player.getInventory().setArmorContents(inv);
                }
                long timestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_Authed.put(Encryption.md5(player.getName()),""String_Node_Str"");
                if (Config.session_enabled) {
                  this.plugin.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),timestamp);
                  EBean eBeanClass=EBean.checkPlayer(player,true);
                  eBeanClass.setSessiontime(timestamp);
                  AuthDB.database.save(eBeanClass);
                  Util.logging.Debug(""String_Node_Str"" + player.getName());
                }
                Processes.Login(player);
                long thetimestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
                Location temploc=event.getPlayer().getLocation();
                while (temploc.getBlock().getTypeId() == 0) {
                  temploc.setY(temploc.getY() - 1);
                }
                temploc.setY(temploc.getY() + 1);
                event.getPlayer().teleport(temploc);
                Messages.sendMessage(Message.register_success,player,null);
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}","public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  long start=Util.timeMS();
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_login) || split[0].equalsIgnoreCase(Config.aliases_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          Messages.sendMessage(Message.login_failure,player,null);
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_link) || split[0].equalsIgnoreCase(Config.aliases_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equals(split[1])) {
              if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                EBean eBeanClass=EBean.checkPlayer(split[1],true);
                String linkedname=eBeanClass.getLinkedname();
                if (linkedname != null) {
                  Messages.sendMessage(Message.link_duplicate,player,null);
                }
 else                 if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Link(player,split[1]);
                  Messages.sendMessage(Message.link_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.link_failure,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_exists,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.link_invaliduser,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_link + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_unlink) || split[0].equalsIgnoreCase(Config.aliases_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              EBean eBeanClass=EBean.checkPlayer(player,true);
              String linkedname=eBeanClass.getLinkedname();
              if (linkedname.equals(split[1])) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Unlink(player,split[1]);
                  Messages.sendMessage(Message.unlink_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.unlink_invalidpass,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.unlink_invaliduser,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_register) || split[0].equalsIgnoreCase(Config.aliases_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_enabled) {
          email=Config.custom_emailrequired;
        }
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_exists,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                if (Processes.Login(player)) {
                  Messages.sendMessage(Message.register_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.register_failure,player,null);
                  Util.logging.Debug(""String_Node_Str"");
                }
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.8939033586634956
94031,"public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  EBean.checkIP(player.getName(),Util.craftFirePlayer.getIP(player));
  player.teleport(Util.landLocation(player.getLocation()));
  this.plugin.AuthDB_JoinTime.put(player.getName(),Util.timeStamp());
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
  if (Config.session_enabled && Config.session_length != 0) {
    long timestamp=System.currentTimeMillis() / 1000;
    if (Util.authDBplayer.sessionTime(player) != 0) {
      long storedtime=Util.authDBplayer.sessionTime(player);
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
      long timedifference=timestamp - storedtime;
      Util.logging.Debug(""String_Node_Str"" + timedifference);
      Util.logging.Debug(""String_Node_Str"" + Config.session_length);
      if (timedifference > Config.session_length) {
        sessionallow=false;
      }
 else {
        sessionallow=true;
      }
    }
 else {
      sessionallow=false;
    }
  }
  try {
    if (sessionallow == false) {
      int time=0;
      if (Config.login_timeout > 0 && plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.login_timeout + ""String_Node_Str"");
        time=Config.login_timeout;
      }
 else       if (Config.register_timeout > 0 && !plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.register_timeout + ""String_Node_Str"");
        time=Config.register_timeout;
      }
      if (time > 0) {
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            checkTimeout(player);
          }
        }
,time);
        EBean eBeanClass=EBean.checkPlayer(player,true);
        Util.logging.Debug(""String_Node_Str"" + Schedule);
        eBeanClass.setTimeoutid(Schedule);
        AuthDB.database.save(eBeanClass);
        if (AuthDB.AuthDB_Timeouts.put(player.getName(),Schedule) != null) {
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
        }
      }
    }
    if (Config.custom_enabled && (Config.custom_encryption.equals(""String_Node_Str"") || Config.custom_encryption == null)) {
      player.sendMessage(""String_Node_Str"");
    }
    if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
      player.setHealth(20);
      player.teleport(player.getWorld().getSpawnLocation());
    }
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if (Config.session_enabled && ((eBeanClass.getReloadtime() + 30) >= Util.timeStamp())) {
      sessionallow=true;
    }
    if (Config.onlineMode && this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      sessionallow=true;
    }
    if (sessionallow) {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(event.getPlayer());
      Messages.sendMessage(Message.session_valid,player,null);
    }
 else     if (this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        @Override public void run(){
          if (!plugin.isAuthorized(player)) {
            if (player.getInventory() != null) {
              player.getInventory().clear();
            }
            Util.craftFirePlayer.clearArmorinventory(player);
          }
        }
      }
,20);
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
        if (!Config.hasSpout) {
          Messages.sendMessage(Message.login_prompt,player,null);
        }
      }
 else {
        Messages.sendMessage(Message.login_normal,player,null);
      }
    }
 else     if (Config.register_force) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      Util.craftFirePlayer.clearArmorinventory(player);
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else     if (!Config.register_force) {
      if (Config.register_enabled) {
        Messages.sendMessage(Message.welcome_guest,player,null);
      }
    }
 else {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(player);
    }
  }
 catch (  IOException e) {
    Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    player.sendMessage(Color.red + ""String_Node_Str"");
  }
}","public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  EBean.checkIP(player.getName(),Util.craftFirePlayer.getIP(player));
  player.teleport(Util.landLocation(player.getLocation()));
  this.plugin.AuthDB_JoinTime.put(player.getName(),Util.timeStamp());
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
  if (Config.session_enabled && Config.session_length != 0) {
    long timestamp=System.currentTimeMillis() / 1000;
    if (Util.authDBplayer.sessionTime(player) != 0) {
      long storedtime=Util.authDBplayer.sessionTime(player);
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
      long timedifference=timestamp - storedtime;
      Util.logging.Debug(""String_Node_Str"" + timedifference);
      Util.logging.Debug(""String_Node_Str"" + Config.session_length);
      if (timedifference > Config.session_length) {
        sessionallow=false;
      }
 else {
        sessionallow=true;
      }
    }
 else {
      sessionallow=false;
    }
  }
  try {
    if (sessionallow == false) {
      int time=0;
      if (Config.login_timeout > 0 && plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.login_timeout + ""String_Node_Str"");
        time=Config.login_timeout;
      }
 else       if (Config.register_timeout > 0 && !plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.register_timeout + ""String_Node_Str"");
        time=Config.register_timeout;
      }
      if (time > 0) {
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            checkTimeout(player);
          }
        }
,time);
        EBean eBeanClass=EBean.checkPlayer(player,true);
        Util.logging.Debug(""String_Node_Str"" + Schedule);
        eBeanClass.setTimeoutid(Schedule);
        AuthDB.database.save(eBeanClass);
        if (AuthDB.AuthDB_Timeouts.put(player.getName(),Schedule) != null) {
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
        }
      }
    }
    if (Config.custom_enabled && (Config.custom_encryption.equals(""String_Node_Str"") || Config.custom_encryption == null)) {
      player.sendMessage(""String_Node_Str"");
    }
    if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
      player.setHealth(20);
      player.teleport(player.getWorld().getSpawnLocation());
    }
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if (Config.session_enabled && ((eBeanClass.getReloadtime() + 30) >= Util.timeStamp())) {
      sessionallow=true;
    }
    if (Config.onlineMode && this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      sessionallow=true;
    }
    if (sessionallow) {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(event.getPlayer());
      Messages.sendMessage(Message.session_valid,player,null);
    }
 else     if (this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        @Override public void run(){
          if (!plugin.isAuthorized(player)) {
            if (player.getInventory() != null) {
              player.getInventory().clear();
            }
            Util.craftFirePlayer.clearArmorinventory(player);
          }
        }
      }
,20);
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
        if (!Config.hasSpout) {
          Messages.sendMessage(Message.login_prompt,player,null);
        }
      }
 else {
        Messages.sendMessage(Message.login_normal,player,null);
      }
    }
 else     if (Config.register_force) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      Util.craftFirePlayer.clearArmorinventory(player);
      Messages.sendMessage(Message.register_welcome,player,null);
    }
 else     if (!Config.register_force) {
      if (Config.register_enabled) {
        Messages.sendMessage(Message.register_welcome,player,null);
      }
    }
 else {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(player);
    }
  }
 catch (  IOException e) {
    Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    player.sendMessage(Color.red + ""String_Node_Str"");
  }
}",0.9975149105367792
94032,"public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!plugin.isAuthorized(event.getPlayer())) {
    if (!checkGuest(event.getPlayer(),Config.guests_movement)) {
      if (this.plugin.AuthDB_JoinTime.containsKey(event.getPlayer().getName())) {
        long jointime=this.plugin.AuthDB_JoinTime.get(event.getPlayer().getName());
        if (jointime + 1 < Util.timeStamp()) {
          this.plugin.AuthDB_JoinTime.remove(event.getPlayer().getName());
        }
      }
 else {
        event.getPlayer().teleport(event.getFrom());
      }
    }
  }
}","public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!plugin.isAuthorized(event.getPlayer())) {
    if (!checkGuest(event.getPlayer(),Config.guests_movement)) {
      if (this.plugin.AuthDB_JoinTime.containsKey(event.getPlayer().getName())) {
        long jointime=this.plugin.AuthDB_JoinTime.get(event.getPlayer().getName());
        if (jointime + 3 < Util.timeStamp()) {
          this.plugin.AuthDB_JoinTime.remove(event.getPlayer().getName());
        }
      }
 else {
        event.getPlayer().teleport(event.getFrom());
      }
    }
  }
}",0.9983164983164984
94033,"public static void sendMessage(Message type,Player player){
  if (AuthDB.craftircHandle != null && Config.CraftIRC_enabled == true) {
    if (type.equals(Message.database_failure)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.AuthDB_message_database_failure,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
    if (type.equals(Message.welcome_guest) || type.equals(Message.login_prompt) || type.equals(Message.login_normal)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_status_join,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.left_server)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_status_quit,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.register_success)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_register_success,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.register_failure)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_register_failure,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.register_exists)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_register_registered,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.password_success)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_password_success,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.password_failure)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_password_failure,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.filter_renamed)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_filter_renamed,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.filter_username)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_filter_kicked,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.filter_whitelist)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_filter_whitelist,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.OnEnable)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str""+ AuthDB.pluginName+ ""String_Node_Str""+ AuthDB.pluginVersion+ ""String_Node_Str"",Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.OnDisable)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str""+ AuthDB.pluginName+ ""String_Node_Str""+ AuthDB.pluginVersion+ ""String_Node_Str"",Config.CraftIRC_tag);
    }
  }
}","public static void sendMessage(Message type,Player player){
  if (AuthDB.craftircHandle != null && Config.CraftIRC_enabled == true) {
    if (type.equals(Message.database_failure)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.AuthDB_message_database_failure,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
    if (type.equals(Message.register_welcome) || type.equals(Message.login_prompt) || type.equals(Message.login_normal)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_status_join,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.left_server)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_status_quit,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.register_success)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_register_success,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.register_failure)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_register_failure,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.register_exists)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_register_registered,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.password_success)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_password_success,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.password_failure)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_password_failure,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.filter_renamed)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_filter_renamed,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.filter_username)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_filter_kicked,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.filter_whitelist)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + Util.replaceStrings(Messages.CraftIRC_message_filter_whitelist,player,""String_Node_Str""),Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.OnEnable)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str""+ AuthDB.pluginName+ ""String_Node_Str""+ AuthDB.pluginVersion+ ""String_Node_Str"",Config.CraftIRC_tag);
    }
 else     if (type.equals(Message.OnDisable)) {
      AuthDB.craftircHandle.sendMessageToTag(Util.replaceStrings(Config.CraftIRC_prefix,null,""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str""+ AuthDB.pluginName+ ""String_Node_Str""+ AuthDB.pluginVersion+ ""String_Node_Str"",Config.CraftIRC_tag);
    }
  }
}",0.998195163036939
94034,"public static void adduser(String player,String email,String password,String ipAddress) throws SQLException {
  PreparedStatement ps;
  if (Config.custom_encryption != null) {
    try {
      password=Encryption.encrypt(Config.custom_encryption,password);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ Config.custom_userfield+ ""String_Node_Str""+ Config.custom_passfield+ ""String_Node_Str"",1);
    ps.setString(1,player);
    ps.setString(2,password);
    ps.executeUpdate();
    ps.close();
  }
 else   if (Config.custom_emailfield != null && Config.custom_emailfield != ""String_Node_Str"") {
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ Config.custom_userfield+ ""String_Node_Str""+ Config.custom_passfield+ ""String_Node_Str""+ Config.custom_emailfield+ ""String_Node_Str"",1);
    ps.setString(1,player);
    ps.setString(2,password);
    ps.setString(3,email);
    ps.executeUpdate();
    ps.close();
  }
}","public static void adduser(String player,String email,String password,String ipAddress) throws SQLException {
  if (!Config.database_keepalive) {
    Util.databaseManager.connect();
  }
  PreparedStatement ps;
  if (Config.custom_encryption != null) {
    try {
      password=Encryption.encrypt(Config.custom_encryption,password);
    }
 catch (    NoSuchAlgorithmException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
catch (    UnsupportedEncodingException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  String query;
  if (Config.custom_emailrequired) {
    query=""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ Config.custom_userfield+ ""String_Node_Str""+ Config.custom_passfield+ ""String_Node_Str""+ Config.custom_emailfield+ ""String_Node_Str""+ player+ ""String_Node_Str""+ password+ ""String_Node_Str""+ email+ ""String_Node_Str"";
    Util.logging.mySQL(query);
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ Config.custom_userfield+ ""String_Node_Str""+ Config.custom_passfield+ ""String_Node_Str""+ Config.custom_emailfield+ ""String_Node_Str"",1);
    ps.setString(1,player);
    ps.setString(2,password);
    ps.setString(3,email);
    ps.executeUpdate();
    ps.close();
  }
 else {
    query=""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ Config.custom_userfield+ ""String_Node_Str""+ Config.custom_passfield+ ""String_Node_Str""+ player+ ""String_Node_Str""+ password+ ""String_Node_Str"";
    Util.logging.mySQL(query);
    ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ Config.custom_userfield+ ""String_Node_Str""+ Config.custom_passfield+ ""String_Node_Str"",1);
    ps.setString(1,player);
    ps.setString(2,password);
    ps.executeUpdate();
    ps.close();
  }
  if (!Config.database_keepalive) {
    Util.databaseManager.close();
  }
}",0.7608167233835683
94035,"public Config(String config,String directory,String filename){
  template=new Configuration(new File(directory,filename));
  template.load();
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    language=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database;
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_delay=Util.toSeconds(protection_delay_time,protection_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    CraftIRC_enabled=getConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=getConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_welcome_guest=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    commands_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}","public Config(String config,String directory,String filename){
  template=new Configuration(new File(directory,filename));
  template.load();
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    language=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database;
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_emailrequired=getConfigBoolean(""String_Node_Str"",false);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_delay=Util.toSeconds(protection_delay_time,protection_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    CraftIRC_enabled=getConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=getConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    commands_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}",0.97960255624617
94036,"public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  long start=Util.timeMS();
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.welcome_guest)) {
      if (Config.register_force) {
        Util.spamText(player,Message.welcome_guest.text,Config.register_delay,Config.register_show);
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_welcome_guest,player,null));
      }
    }
 else     if (type.equals(Message.reload_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_reload_success,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_exists,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_register_timeout,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_login_timeout,player,null));
    }
 else     if (type.equals(Message.login_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_admin,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.logout_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_success,player,null));
    }
 else     if (type.equals(Message.logout_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_failure,player,null));
    }
 else     if (type.equals(Message.logout_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_admin,player,null));
    }
 else     if (type.equals(Message.logout_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_usage,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.link_duplicate)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_duplicate,player,null));
    }
 else     if (type.equals(Message.link_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_invaliduser,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.unlink_invalidpass)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invalidpass,player,null));
    }
 else     if (type.equals(Message.unlink_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invaliduser,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.email_badcharacters)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_badcharacters,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      if (Config.hasBukkitContrib || Config.hasSpout) {
        player.sendMessage(""String_Node_Str"");
      }
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,null));
    }
 else     if (type.equals(Message.protection_denied)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_denied,player,null));
    }
 else     if (type.equals(Message.protection_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_notauthorized,player,null));
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}","public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  long start=Util.timeMS();
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.register_welcome)) {
      if (Config.register_force) {
        Util.spamText(player,Message.register_welcome.text,Config.register_delay,Config.register_show);
      }
 else {
        if (Config.link_enabled) {
          player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome + ""String_Node_Str"" + AuthDB_message_link_welcome,player,null));
        }
 else {
          player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome,player,null));
        }
      }
    }
 else     if (type.equals(Message.reload_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_reload_success,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_exists,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_register_timeout,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_login_timeout,player,null));
    }
 else     if (type.equals(Message.login_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_admin,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.logout_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_success,player,null));
    }
 else     if (type.equals(Message.logout_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_failure,player,null));
    }
 else     if (type.equals(Message.logout_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_admin,player,null));
    }
 else     if (type.equals(Message.logout_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_usage,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.link_duplicate)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_duplicate,player,null));
    }
 else     if (type.equals(Message.link_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_invaliduser,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.unlink_invalidpass)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invalidpass,player,null));
    }
 else     if (type.equals(Message.unlink_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invaliduser,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.email_badcharacters)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_badcharacters,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      if (Config.hasBukkitContrib || Config.hasSpout) {
        player.sendMessage(""String_Node_Str"");
      }
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,null));
    }
 else     if (type.equals(Message.protection_denied)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_denied,player,null));
    }
 else     if (type.equals(Message.protection_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_notauthorized,player,null));
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.987987987987988
94037,"public static boolean Login(Player player){
  if (!AuthDB.isAuthorized(player)) {
    long timestamp=Util.timeStamp();
    if (!AuthDB.AuthDB_AuthTime.containsKey(player.getName())) {
      AuthDB.AuthDB_AuthTime.put(player.getName(),timestamp);
    }
    AuthDB.authorizedNames.add(player.getName());
    AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
    EBean eBeanClass=EBean.checkPlayer(player,true);
    eBeanClass.setAuthorized(""String_Node_Str"");
    eBeanClass.setRegistred(""String_Node_Str"");
    if (!AuthDB.AuthDB_Authed.containsKey(Encryption.md5(player.getName()))) {
      AuthDB.AuthDB_Authed.put(Encryption.md5(player.getName()),""String_Node_Str"");
    }
    if (Config.session_enabled) {
      if (!AuthDB.AuthDB_Sessions.containsKey(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)))) {
        AuthDB.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),timestamp);
      }
      eBeanClass.setSessiontime(timestamp);
    }
    AuthDB.database.save(eBeanClass);
    ItemStack[] inv=AuthDB.getInventory(player);
    if (inv != null) {
      player.getInventory().setContents(inv);
    }
    inv=AuthDB.getArmorInventory(player);
    if (inv != null) {
      player.getInventory().setArmorContents(inv);
    }
    return true;
  }
  return false;
}","public static boolean Login(Player player){
  if (!AuthDB.isAuthorized(player)) {
    long timestamp=Util.timeStamp();
    if (!AuthDB.AuthDB_AuthTime.containsKey(player.getName())) {
      AuthDB.AuthDB_AuthTime.put(player.getName(),timestamp);
    }
    AuthDB.authorizedNames.add(player.getName());
    AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
    EBean eBeanClass=EBean.checkPlayer(player,true);
    eBeanClass.setAuthorized(""String_Node_Str"");
    eBeanClass.setRegistred(""String_Node_Str"");
    if (!AuthDB.AuthDB_Authed.containsKey(Encryption.md5(player.getName()))) {
      AuthDB.AuthDB_Authed.put(Encryption.md5(player.getName()),""String_Node_Str"");
    }
    if (Config.session_enabled) {
      if (!AuthDB.AuthDB_Sessions.containsKey(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)))) {
        AuthDB.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),timestamp);
        Util.logging.Debug(""String_Node_Str"" + player.getName());
      }
      eBeanClass.setSessiontime(timestamp);
    }
    AuthDB.database.save(eBeanClass);
    ItemStack[] inv=AuthDB.getInventory(player);
    if (inv != null) {
      player.getInventory().setContents(inv);
    }
    inv=AuthDB.getArmorInventory(player);
    if (inv != null) {
      player.getInventory().setArmorContents(inv);
    }
    return true;
  }
  return false;
}",0.9760522496371552
94038,"public static boolean checkScript(String type,String script,String player,String password,String email,String ipAddress) throws SQLException {
  if (Util.databaseManager.getDatabaseType().equalsIgnoreCase(""String_Node_Str"")) {
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if (type.equalsIgnoreCase(""String_Node_Str"")) {
      if (eBeanClass.getRegistred().equalsIgnoreCase(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      String storedPassword=eBeanClass.getPassword();
      if (Encryption.SHA512(password).equals(storedPassword)) {
        return true;
      }
      return false;
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      Custom.adduser(player,email,password,ipAddress);
      eBeanClass.setEmail(email);
      eBeanClass.setPassword(Encryption.SHA512(password));
      eBeanClass.setRegistred(""String_Node_Str"");
      eBeanClass.setIp(ipAddress);
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      int amount=EBean.getUsers();
      logging.Info(amount + ""String_Node_Str"");
    }
  }
 else   if (Config.database_ison) {
    String usertable=null, usernamefield=null, passwordfield=null, saltfield=""String_Node_Str"";
    boolean bans=false;
    PreparedStatement ps=null;
    int number=0;
    if (Config.custom_enabled) {
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String check=MySQL.getfromtable(Config.custom_table,""String_Node_Str"",Config.custom_userfield,player);
        if (check != ""String_Node_Str"") {
          Config.hasForumBoard=true;
          return true;
        }
        return false;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        EBean eBeanClass=EBean.find(player);
        String storedPassword=eBeanClass.getPassword();
        if (Custom.check_hash(password,storedPassword)) {
          return true;
        }
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        EBean.checkPassword(player,hash);
        if (Custom.check_hash(password,hash)) {
          return true;
        }
        return false;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        EBean.checkPassword(player,hash);
        return true;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Custom.adduser(player,email,password,ipAddress);
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
    }
 else     if (script.equalsIgnoreCase(PhpBB.Name) || script.equalsIgnoreCase(PhpBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(PhpBB.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PhpBB.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PhpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(PhpBB.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PhpBB.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PhpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        PhpBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(SMF.Name) || script.equalsIgnoreCase(SMF.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(SMF.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        saltfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && SMF.check_hash(SMF.hash(1,player,password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (SMF.check_hash(SMF.hash(1,player,password),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(SMF.VersionRange2) || checkVersionInRange(""String_Node_Str"") || checkVersionInRange(""String_Node_Str"")|| checkVersionInRange(""String_Node_Str"")) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && SMF.check_hash(SMF.hash(2,player,password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (SMF.check_hash(SMF.hash(2,player,password),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        SMF.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(MyBB.Name) || script.equalsIgnoreCase(MyBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(MyBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        MyBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(VBulletin.Name) || script.equalsIgnoreCase(VBulletin.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(VBulletin.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(VBulletin.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        VBulletin.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Drupal.Name) || script.equalsIgnoreCase(Drupal.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(Drupal.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Encryption.md5(password).equals(storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Encryption.md5(password).equals(hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(Drupal.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && storedPassword.equals(Drupal.user_check_password(password,storedPassword))) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (hash.equals(Drupal.user_check_password(password,hash))) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Drupal.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Joomla.Name) || script.equalsIgnoreCase(Joomla.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(Joomla.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Joomla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(Joomla.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Joomla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Joomla.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Vanilla.Name) || script.equalsIgnoreCase(Vanilla.ShortName)) {
      if (checkVersionInRange(Vanilla.VersionRange)) {
        usertable=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        if (Vanilla.check() == 2) {
          usertable=usertable.toLowerCase();
        }
        Config.hasForumBoard=true;
        number=Vanilla.check();
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Vanilla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Vanilla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String emailcheck=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",email);
        if (emailcheck.equalsIgnoreCase(""String_Node_Str"")) {
          Vanilla.adduser(number,player,email,password,ipAddress);
          return true;
        }
        return false;
      }
    }
 else     if (script.equalsIgnoreCase(PunBB.Name) || script.equalsIgnoreCase(PunBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(PunBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        PunBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(XenForo.Name) || script.equalsIgnoreCase(XenForo.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(XenForo.VersionRange)) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
          int offset=-1;
          int chunkSize=1024;
          long blobLength=hash.length();
          if (chunkSize > blobLength) {
            chunkSize=(int)blobLength;
          }
          char buffer[]=new char[chunkSize];
          StringBuilder stringBuffer=new StringBuilder();
          Reader reader=new InputStreamReader(hash.getBinaryStream());
          try {
            while ((offset=reader.read(buffer)) != -1) {
              stringBuffer.append(buffer,0,offset);
            }
          }
 catch (          IOException e) {
            logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
          String cache=stringBuffer.toString();
          String thehash=forumCacheValue(cache,""String_Node_Str"");
          String thesalt=forumCacheValue(cache,""String_Node_Str"");
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          String storedSalt=eBeanClass.getSalt();
          if (storedPassword != null && storedSalt != null && XenForo.check_hash(XenForo.hash(1,storedSalt,password),storedPassword)) {
            return true;
          }
          EBean.checkSalt(player,thesalt);
          EBean.checkPassword(player,thehash);
          if (XenForo.check_hash(XenForo.hash(1,thesalt,password),thehash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        XenForo.adduser(number,player,email,password,ipAddress);
        return true;
      }
 else       if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
        int offset=-1;
        int chunkSize=1024;
        long blobLength=hash.length();
        if (chunkSize > blobLength) {
          chunkSize=(int)blobLength;
        }
        char buffer[]=new char[chunkSize];
        StringBuilder stringBuffer=new StringBuilder();
        Reader reader=new InputStreamReader(hash.getBinaryStream());
        try {
          while ((offset=reader.read(buffer)) != -1) {
            stringBuffer.append(buffer,0,offset);
          }
        }
 catch (        IOException e) {
          logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
        String cache=stringBuffer.toString();
        String thehash=forumCacheValue(cache,""String_Node_Str"");
        EBean.checkPassword(player,thehash);
        return true;
      }
 else       if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
        int offset=-1;
        int chunkSize=1024;
        long blobLength=hash.length();
        if (chunkSize > blobLength) {
          chunkSize=(int)blobLength;
        }
        char buffer[]=new char[chunkSize];
        StringBuilder stringBuffer=new StringBuilder();
        Reader reader=new InputStreamReader(hash.getBinaryStream());
        try {
          while ((offset=reader.read(buffer)) != -1) {
            stringBuffer.append(buffer,0,offset);
          }
        }
 catch (        IOException e) {
          logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
        String cache=stringBuffer.toString();
        String thesalt=forumCacheValue(cache,""String_Node_Str"");
        EBean.checkSalt(player,thesalt);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(BBPress.Name) || script.equalsIgnoreCase(BBPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(BBPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && BBPress.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (BBPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        BBPress.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(DLE.Name) || script.equalsIgnoreCase(DLE.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(DLE.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && DLE.check_hash(DLE.hash(password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (DLE.check_hash(DLE.hash(password),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        DLE.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(IPB.Name) || script.equalsIgnoreCase(IPB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(IPB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          player=player.toLowerCase();
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        player=player.toLowerCase();
        IPB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(WordPress.Name) || script.equalsIgnoreCase(WordPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(WordPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && WordPress.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          Util.logging.Info(""String_Node_Str"" + hash);
          if (WordPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        WordPress.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
    if (!Config.hasForumBoard) {
      if (!Config.custom_enabled) {
        String tempVers=Config.script_version;
        Config.script_version=scriptVersion();
        logging.Info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Config.script_name + ""String_Node_Str""+ tempVers+ ""String_Node_Str""+ Config.script_version+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      String check=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",usernamefield,player);
      if (check != ""String_Node_Str"") {
        return true;
      }
      return false;
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      if (script.equalsIgnoreCase(PhpBB.Name) || script.equalsIgnoreCase(PhpBB.ShortName)) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
 else {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
      ResultSet rs=ps.executeQuery();
      if (rs.next()) {
        logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
      }
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      String hash=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + passwordfield + ""String_Node_Str"",usernamefield,player);
      EBean.checkPassword(player,hash);
      return true;
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
      String salt=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + saltfield + ""String_Node_Str"",usernamefield,player);
      EBean.checkSalt(player,salt);
      return true;
    }
  }
  return false;
}","public static boolean checkScript(String type,String script,String player,String password,String email,String ipAddress) throws SQLException {
  if (Util.databaseManager.getDatabaseType().equalsIgnoreCase(""String_Node_Str"")) {
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if (type.equalsIgnoreCase(""String_Node_Str"")) {
      if (eBeanClass.getRegistred().equalsIgnoreCase(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      String storedPassword=eBeanClass.getPassword();
      if (Encryption.SHA512(password).equals(storedPassword)) {
        return true;
      }
      return false;
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      Custom.adduser(player,email,password,ipAddress);
      eBeanClass.setEmail(email);
      eBeanClass.setPassword(Encryption.SHA512(password));
      eBeanClass.setRegistred(""String_Node_Str"");
      eBeanClass.setIp(ipAddress);
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      int amount=EBean.getUsers();
      logging.Info(amount + ""String_Node_Str"");
    }
  }
 else   if (Config.database_ison) {
    String usertable=null, usernamefield=null, passwordfield=null, saltfield=""String_Node_Str"";
    boolean bans=false;
    PreparedStatement ps=null;
    int number=0;
    if (Config.custom_enabled) {
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String check=MySQL.getfromtable(Config.custom_table,""String_Node_Str"",Config.custom_userfield,player);
        if (check != ""String_Node_Str"") {
          Config.hasForumBoard=true;
          return true;
        }
        return false;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        EBean eBeanClass=EBean.find(player);
        String storedPassword=eBeanClass.getPassword();
        if (Custom.check_hash(password,storedPassword)) {
          return true;
        }
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        EBean.checkPassword(player,hash);
        if (Custom.check_hash(password,hash)) {
          return true;
        }
        return false;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        EBean.checkPassword(player,hash);
        return true;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Custom.adduser(player,email,password,ipAddress);
        return true;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
    }
 else     if (script.equalsIgnoreCase(PhpBB.Name) || script.equalsIgnoreCase(PhpBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(PhpBB.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PhpBB.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PhpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(PhpBB.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PhpBB.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PhpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        PhpBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(SMF.Name) || script.equalsIgnoreCase(SMF.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(SMF.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        saltfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && SMF.check_hash(SMF.hash(1,player,password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (SMF.check_hash(SMF.hash(1,player,password),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(SMF.VersionRange2) || checkVersionInRange(""String_Node_Str"") || checkVersionInRange(""String_Node_Str"")|| checkVersionInRange(""String_Node_Str"")) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && SMF.check_hash(SMF.hash(2,player,password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (SMF.check_hash(SMF.hash(2,player,password),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        SMF.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(MyBB.Name) || script.equalsIgnoreCase(MyBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(MyBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        MyBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(VBulletin.Name) || script.equalsIgnoreCase(VBulletin.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(VBulletin.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(VBulletin.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        VBulletin.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Drupal.Name) || script.equalsIgnoreCase(Drupal.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(Drupal.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Encryption.md5(password).equals(storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Encryption.md5(password).equals(hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(Drupal.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && storedPassword.equals(Drupal.user_check_password(password,storedPassword))) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (hash.equals(Drupal.user_check_password(password,hash))) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Drupal.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Joomla.Name) || script.equalsIgnoreCase(Joomla.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(Joomla.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Joomla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(Joomla.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Joomla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Joomla.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Vanilla.Name) || script.equalsIgnoreCase(Vanilla.ShortName)) {
      if (checkVersionInRange(Vanilla.VersionRange)) {
        usertable=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        if (Vanilla.check() == 2) {
          usertable=usertable.toLowerCase();
        }
        Config.hasForumBoard=true;
        number=Vanilla.check();
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Vanilla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Vanilla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String emailcheck=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",email);
        if (emailcheck.equalsIgnoreCase(""String_Node_Str"")) {
          Vanilla.adduser(number,player,email,password,ipAddress);
          return true;
        }
        return false;
      }
    }
 else     if (script.equalsIgnoreCase(PunBB.Name) || script.equalsIgnoreCase(PunBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(PunBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        PunBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(XenForo.Name) || script.equalsIgnoreCase(XenForo.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(XenForo.VersionRange)) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
          int offset=-1;
          int chunkSize=1024;
          long blobLength=hash.length();
          if (chunkSize > blobLength) {
            chunkSize=(int)blobLength;
          }
          char buffer[]=new char[chunkSize];
          StringBuilder stringBuffer=new StringBuilder();
          Reader reader=new InputStreamReader(hash.getBinaryStream());
          try {
            while ((offset=reader.read(buffer)) != -1) {
              stringBuffer.append(buffer,0,offset);
            }
          }
 catch (          IOException e) {
            logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
          String cache=stringBuffer.toString();
          String thehash=forumCacheValue(cache,""String_Node_Str"");
          String thesalt=forumCacheValue(cache,""String_Node_Str"");
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          String storedSalt=eBeanClass.getSalt();
          if (storedPassword != null && storedSalt != null && XenForo.check_hash(XenForo.hash(1,storedSalt,password),storedPassword)) {
            return true;
          }
          EBean.checkSalt(player,thesalt);
          EBean.checkPassword(player,thehash);
          if (XenForo.check_hash(XenForo.hash(1,thesalt,password),thehash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        XenForo.adduser(number,player,email,password,ipAddress);
        return true;
      }
 else       if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
        int offset=-1;
        int chunkSize=1024;
        long blobLength=hash.length();
        if (chunkSize > blobLength) {
          chunkSize=(int)blobLength;
        }
        char buffer[]=new char[chunkSize];
        StringBuilder stringBuffer=new StringBuilder();
        Reader reader=new InputStreamReader(hash.getBinaryStream());
        try {
          while ((offset=reader.read(buffer)) != -1) {
            stringBuffer.append(buffer,0,offset);
          }
        }
 catch (        IOException e) {
          logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
        String cache=stringBuffer.toString();
        String thehash=forumCacheValue(cache,""String_Node_Str"");
        EBean.checkPassword(player,thehash);
        return true;
      }
 else       if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
        int offset=-1;
        int chunkSize=1024;
        long blobLength=hash.length();
        if (chunkSize > blobLength) {
          chunkSize=(int)blobLength;
        }
        char buffer[]=new char[chunkSize];
        StringBuilder stringBuffer=new StringBuilder();
        Reader reader=new InputStreamReader(hash.getBinaryStream());
        try {
          while ((offset=reader.read(buffer)) != -1) {
            stringBuffer.append(buffer,0,offset);
          }
        }
 catch (        IOException e) {
          logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
        String cache=stringBuffer.toString();
        String thesalt=forumCacheValue(cache,""String_Node_Str"");
        EBean.checkSalt(player,thesalt);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(BBPress.Name) || script.equalsIgnoreCase(BBPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(BBPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && BBPress.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (BBPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        BBPress.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(DLE.Name) || script.equalsIgnoreCase(DLE.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(DLE.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && DLE.check_hash(DLE.hash(password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (DLE.check_hash(DLE.hash(password),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        DLE.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(IPB.Name) || script.equalsIgnoreCase(IPB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(IPB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          player=player.toLowerCase();
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        player=player.toLowerCase();
        IPB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(WordPress.Name) || script.equalsIgnoreCase(WordPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(WordPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && WordPress.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          Util.logging.Info(""String_Node_Str"" + hash);
          if (WordPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        WordPress.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
    if (!Config.hasForumBoard) {
      if (!Config.custom_enabled) {
        String tempVers=Config.script_version;
        Config.script_version=scriptVersion();
        logging.Info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Config.script_name + ""String_Node_Str""+ tempVers+ ""String_Node_Str""+ Config.script_version+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      String check=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",usernamefield,player);
      if (check != ""String_Node_Str"") {
        return true;
      }
      return false;
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      if (script.equalsIgnoreCase(PhpBB.Name) || script.equalsIgnoreCase(PhpBB.ShortName)) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
 else {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
      ResultSet rs=ps.executeQuery();
      if (rs.next()) {
        logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
      }
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      String hash=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + passwordfield + ""String_Node_Str"",usernamefield,player);
      EBean.checkPassword(player,hash);
      return true;
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
      String salt=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + saltfield + ""String_Node_Str"",usernamefield,player);
      EBean.checkSalt(player,salt);
      return true;
    }
  }
  return false;
}",0.999649760669791
94039,"void CheckPermissions(){
  Plugin Check1=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Check1 != null) {
    ZPermissions.hasPlugin=true;
  }
  Plugin Check2=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Check2 != null) {
    if (ZPermissions.hasPlugin) {
      Util.logging.Info(""String_Node_Str"" + Check1.getDescription().getName() + ""String_Node_Str""+ Check1.getDescription().getVersion()+ ""String_Node_Str""+ Check2.getDescription().getName()+ ""String_Node_Str""+ Check2.getDescription().getVersion());
      Util.logging.Info(""String_Node_Str"" + Check2.getDescription().getName() + ""String_Node_Str""+ Check2.getDescription().getVersion());
    }
 else {
      Util.logging.Info(""String_Node_Str"" + Check2.getDescription().getName() + ""String_Node_Str""+ Check2.getDescription().getVersion());
    }
    ZPermissions.hasPermissionsBukkit=true;
  }
 else {
    if (ZPermissions.hasPlugin) {
      Util.logging.Info(""String_Node_Str"" + Check1.getDescription().getName() + ""String_Node_Str""+ Check1.getDescription().getVersion());
    }
 else {
      Util.logging.Info(""String_Node_Str"");
    }
  }
}","void CheckPermissions(){
  Plugin Check1=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Check1 != null) {
    ZPermissions.hasPlugin=true;
  }
  Plugin Check2=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Check2 != null) {
    if (ZPermissions.hasPlugin) {
      Util.logging.Info(""String_Node_Str"" + Check1.getDescription().getName() + ""String_Node_Str""+ Check1.getDescription().getVersion()+ ""String_Node_Str""+ Check2.getDescription().getName()+ ""String_Node_Str""+ Check2.getDescription().getVersion());
      Util.logging.Info(""String_Node_Str"" + Check2.getDescription().getName() + ""String_Node_Str""+ Check2.getDescription().getVersion());
    }
 else {
      Util.logging.Info(""String_Node_Str"" + Check2.getDescription().getName() + ""String_Node_Str""+ Check2.getDescription().getVersion());
    }
    ZPermissions.hasPermissionsBukkit=true;
  }
 else {
    if (ZPermissions.hasPlugin) {
      ZPermissions.permissionsHandler=((Permissions)Check1).getHandler();
      Util.logging.Info(""String_Node_Str"" + Check1.getDescription().getName() + ""String_Node_Str""+ Check1.getDescription().getVersion());
    }
 else {
      Util.logging.Info(""String_Node_Str"");
    }
  }
}",0.9685641461342396
94040,"public void onPlayerQuit(PlayerQuitEvent event){
  Player player=event.getPlayer();
  Messages.sendMessage(Message.left_server,player,null);
  if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
    player.setHealth(20);
    player.teleport(player.getWorld().getSpawnLocation());
  }
  long thetimestamp=System.currentTimeMillis() / 1000;
  if (Config.session_enabled && Config.session_start.equalsIgnoreCase(""String_Node_Str"")) {
    this.plugin.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),thetimestamp);
    EBean EBeanClass=EBean.checkPlayer(player,true);
    EBeanClass.setSessiontime(thetimestamp);
    this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
  }
  if (checkGuest(player,Config.guests_inventory) == false && this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false && this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
    ItemStack[] theinv=new ItemStack[36];
    player.getInventory().setContents(theinv);
  }
  Processes.Logout(player);
}","public void onPlayerQuit(PlayerQuitEvent event){
  Player player=event.getPlayer();
  Messages.sendMessage(Message.left_server,player,null);
  if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
    player.setHealth(20);
    player.teleport(player.getWorld().getSpawnLocation());
  }
  long thetimestamp=System.currentTimeMillis() / 1000;
  if (Config.session_enabled && Config.session_start.equalsIgnoreCase(""String_Node_Str"")) {
    this.plugin.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),thetimestamp);
    EBean EBeanClass=EBean.checkPlayer(player,true);
    EBeanClass.setSessiontime(thetimestamp);
    this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
  }
  if (checkGuest(player,Config.guests_inventory) == false && this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false && this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
    ItemStack[] theinv;
    if (Config.hasBackpack) {
      theinv=new ItemStack[252];
    }
 else {
      theinv=new ItemStack[36];
    }
    player.getInventory().setContents(theinv);
  }
  Processes.Logout(player);
}",0.9578077424967376
94041,"public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  long start=Util.timeMS();
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_login) || split[0].equalsIgnoreCase(Config.aliases_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          if (Config.authdb_enabled) {
            Messages.sendMessage(Message.login_failure,player,null);
          }
 else {
            Messages.sendMessage(Message.login_offline,player,null);
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_link) || split[0].equalsIgnoreCase(Config.aliases_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equals(split[1])) {
              if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                EBean eBeanClass=EBean.checkPlayer(split[1],true);
                String linkedname=eBeanClass.getLinkedname();
                if (linkedname != null) {
                  Messages.sendMessage(Message.link_duplicate,player,null);
                }
 else                 if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Link(player,split[1]);
                  Messages.sendMessage(Message.link_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.link_failure,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_exists,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.link_invaliduser,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_link + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_unlink) || split[0].equalsIgnoreCase(Config.aliases_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              EBean eBeanClass=EBean.checkPlayer(player,true);
              String linkedname=eBeanClass.getLinkedname();
              if (linkedname.equals(split[1])) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Unlink(player,split[1]);
                  Messages.sendMessage(Message.unlink_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.unlink_invalidpass,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.unlink_invaliduser,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_register) || split[0].equalsIgnoreCase(Config.aliases_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_enabled) {
          email=Config.custom_emailrequired;
        }
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_exists,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                if (Processes.Login(player)) {
                  Messages.sendMessage(Message.register_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.register_failure,player,null);
                  Util.logging.Debug(""String_Node_Str"");
                }
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}","public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  long start=Util.timeMS();
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_login) || split[0].equalsIgnoreCase(Config.aliases_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          if (Config.authdb_enabled) {
            Messages.sendMessage(Message.login_failure,player,null);
          }
 else {
            Messages.sendMessage(Message.login_offline,player,null);
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_link) || split[0].equalsIgnoreCase(Config.aliases_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equals(split[1])) {
              if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false) {
                if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                  EBean eBeanClass=EBean.checkPlayer(split[1],true);
                  String linkedname=eBeanClass.getLinkedname();
                  if (linkedname != null) {
                    Messages.sendMessage(Message.link_duplicate,player,null);
                  }
 else                   if (this.plugin.checkPassword(split[1],split[2])) {
                    Processes.Link(player,split[1]);
                    Messages.sendMessage(Message.link_success,player,null);
                  }
 else {
                    Messages.sendMessage(Message.link_failure,player,null);
                  }
                }
 else {
                  Messages.sendMessage(Message.link_exists,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_registred,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.link_invaliduser,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_link + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_unlink) || split[0].equalsIgnoreCase(Config.aliases_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              EBean eBeanClass=EBean.checkPlayer(player,true);
              String linkedname=eBeanClass.getLinkedname();
              if (linkedname.equals(split[1])) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Unlink(player,split[1]);
                  Messages.sendMessage(Message.unlink_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.unlink_invalidpass,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.unlink_invaliduser,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_register) || split[0].equalsIgnoreCase(Config.aliases_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_enabled) {
          email=Config.custom_emailrequired;
        }
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_exists,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                if (Processes.Login(player)) {
                  Messages.sendMessage(Message.register_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.register_failure,player,null);
                  Util.logging.Debug(""String_Node_Str"");
                }
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.9857636154358757
94042,"public Config(String config,String directory,String filename){
  template=new Configuration(new File(directory,filename));
  template.load();
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    language=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database;
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_emailrequired=getConfigBoolean(""String_Node_Str"",false);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_delay=Util.toSeconds(protection_delay_time,protection_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    CraftIRC_enabled=getConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=getConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    commands_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}","public Config(String config,String directory,String filename){
  template=new Configuration(new File(directory,filename));
  template.load();
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    language=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database;
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_emailrequired=getConfigBoolean(""String_Node_Str"",false);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_delay=Util.toSeconds(protection_delay_time,protection_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    CraftIRC_enabled=getConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=getConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_registred=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    commands_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9842159441839186
94043,"public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  long start=Util.timeMS();
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.register_welcome)) {
      if (Config.authdb_enabled) {
        if (Config.register_force) {
          Util.spamText(player,Message.register_welcome.text,Config.register_delay,Config.register_show);
        }
 else {
          if (Config.link_enabled) {
            player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome + ""String_Node_Str"" + AuthDB_message_link_welcome,player,null));
          }
 else {
            player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome,player,null));
          }
        }
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
      }
    }
 else     if (type.equals(Message.reload_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_reload_success,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
    }
 else     if (type.equals(Message.register_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_exists,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_register_timeout,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_offline,player,null));
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_login_timeout,player,null));
    }
 else     if (type.equals(Message.login_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_admin,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.logout_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_success,player,null));
    }
 else     if (type.equals(Message.logout_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_failure,player,null));
    }
 else     if (type.equals(Message.logout_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_admin,player,null));
    }
 else     if (type.equals(Message.logout_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_usage,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.link_duplicate)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_duplicate,player,null));
    }
 else     if (type.equals(Message.link_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_invaliduser,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.unlink_invalidpass)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invalidpass,player,null));
    }
 else     if (type.equals(Message.unlink_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invaliduser,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.email_badcharacters)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_badcharacters,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      if (Config.hasBukkitContrib || Config.hasSpout) {
        player.sendMessage(""String_Node_Str"");
      }
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,""String_Node_Str""));
    }
 else     if (type.equals(Message.protection_denied)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_denied,player,null));
    }
 else     if (type.equals(Message.protection_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_notauthorized,player,null));
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}","public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  long start=Util.timeMS();
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.register_welcome)) {
      if (Config.authdb_enabled) {
        if (Config.register_force) {
          Util.spamText(player,Message.register_welcome.text,Config.register_delay,Config.register_show);
        }
 else {
          if (Config.link_enabled) {
            player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome + ""String_Node_Str"" + AuthDB_message_link_welcome,player,null));
          }
 else {
            player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome,player,null));
          }
        }
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
      }
    }
 else     if (type.equals(Message.reload_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_reload_success,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
    }
 else     if (type.equals(Message.register_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_exists,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_register_timeout,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_offline,player,null));
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_login_timeout,player,null));
    }
 else     if (type.equals(Message.login_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_admin,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.logout_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_success,player,null));
    }
 else     if (type.equals(Message.logout_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_failure,player,null));
    }
 else     if (type.equals(Message.logout_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_admin,player,null));
    }
 else     if (type.equals(Message.logout_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_usage,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.link_duplicate)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_duplicate,player,null));
    }
 else     if (type.equals(Message.link_registred)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_registred,player,null));
    }
 else     if (type.equals(Message.link_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_invaliduser,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.unlink_invalidpass)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invalidpass,player,null));
    }
 else     if (type.equals(Message.unlink_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invaliduser,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.email_badcharacters)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_badcharacters,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      if (Config.hasBukkitContrib || Config.hasSpout) {
        player.sendMessage(""String_Node_Str"");
      }
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,""String_Node_Str""));
    }
 else     if (type.equals(Message.protection_denied)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_denied,player,null));
    }
 else     if (type.equals(Message.protection_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_notauthorized,player,null));
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.993421343105656
94044,"public boolean checkPassword(String player,String password){
  try {
    if (!Config.database_keepalive) {
      MySQL.connect();
    }
    password=Matcher.quoteReplacement(password);
    if (!Util.checkOtherName(player).equals(player)) {
      player=Util.checkOtherName(player);
    }
    if (Util.checkScript(""String_Node_Str"",Config.script_name,player,password,null,null)) {
      return true;
    }
    if (!Config.database_keepalive) {
      MySQL.close();
    }
  }
 catch (  SQLException e) {
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    Stop(""String_Node_Str"");
  }
  return false;
}","public boolean checkPassword(String player,String password){
  long start=Util.timeMS();
  try {
    if (!Config.database_keepalive) {
      MySQL.connect();
    }
    password=Matcher.quoteReplacement(password);
    if (!Util.checkOtherName(player).equals(player)) {
      player=Util.checkOtherName(player);
    }
    if (Util.checkScript(""String_Node_Str"",Config.script_name,player,password,null,null)) {
      long stop=Util.timeMS();
      Util.logging.timeUsage(stop - start,""String_Node_Str"");
      return true;
    }
    if (!Config.database_keepalive) {
      MySQL.close();
    }
  }
 catch (  SQLException e) {
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    Stop(""String_Node_Str"");
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
  return false;
}",0.8894849785407726
94045,"public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  String noPermission=""String_Node_Str"";
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_login) || split[0].equalsIgnoreCase(Config.aliases_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          Messages.sendMessage(Message.login_failure,player,null);
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        player.sendMessage(noPermission);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_link) || split[0].equalsIgnoreCase(Config.aliases_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equalsIgnoreCase(split[1])) {
              if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Link(player,split[1]);
                  Messages.sendMessage(Message.link_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.link_failure,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_exists,player,null);
              }
            }
            player.sendMessage(""String_Node_Str"");
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          player.sendMessage(noPermission);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_unlink) || split[0].equalsIgnoreCase(Config.aliases_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              if (this.plugin.checkPassword(split[1],split[2])) {
                Processes.Unlink(player,split[1]);
                Messages.sendMessage(Message.unlink_success,player,null);
              }
 else {
                Messages.sendMessage(Message.unlink_failure,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          player.sendMessage(noPermission);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_register) || split[0].equalsIgnoreCase(Config.aliases_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_registered,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                ItemStack[] inv=this.plugin.getInventory(player);
                if (inv != null) {
                  player.getInventory().setContents(inv);
                }
                inv=AuthDB.getArmorInventory(player);
                if (inv != null) {
                  player.getInventory().setArmorContents(inv);
                }
                long timestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_Authed.put(Encryption.md5(player.getName()),""String_Node_Str"");
                this.plugin.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),timestamp);
                Util.logging.Debug(""String_Node_Str"" + player.getName());
                Processes.Login(player);
                long thetimestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
                Location temploc=event.getPlayer().getLocation();
                while (temploc.getBlock().getTypeId() == 0) {
                  temploc.setY(temploc.getY() - 1);
                }
                temploc.setY(temploc.getY() + 1);
                event.getPlayer().teleport(temploc);
                Messages.sendMessage(Message.register_success,player,null);
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        player.sendMessage(noPermission);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
 else {
      player.sendMessage(noPermission);
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
}","public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  long start=Util.timeMS();
  String noPermission=""String_Node_Str"";
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_login) || split[0].equalsIgnoreCase(Config.aliases_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          Messages.sendMessage(Message.login_failure,player,null);
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        player.sendMessage(noPermission);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_link) || split[0].equalsIgnoreCase(Config.aliases_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equalsIgnoreCase(split[1])) {
              if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Link(player,split[1]);
                  Messages.sendMessage(Message.link_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.link_failure,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_exists,player,null);
              }
            }
            player.sendMessage(""String_Node_Str"");
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          player.sendMessage(noPermission);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_unlink) || split[0].equalsIgnoreCase(Config.aliases_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              if (this.plugin.checkPassword(split[1],split[2])) {
                Processes.Unlink(player,split[1]);
                Messages.sendMessage(Message.unlink_success,player,null);
              }
 else {
                Messages.sendMessage(Message.unlink_failure,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          player.sendMessage(noPermission);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_register) || split[0].equalsIgnoreCase(Config.aliases_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_registered,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                ItemStack[] inv=this.plugin.getInventory(player);
                if (inv != null) {
                  player.getInventory().setContents(inv);
                }
                inv=AuthDB.getArmorInventory(player);
                if (inv != null) {
                  player.getInventory().setArmorContents(inv);
                }
                long timestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_Authed.put(Encryption.md5(player.getName()),""String_Node_Str"");
                this.plugin.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),timestamp);
                Util.logging.Debug(""String_Node_Str"" + player.getName());
                Processes.Login(player);
                long thetimestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
                Location temploc=event.getPlayer().getLocation();
                while (temploc.getBlock().getTypeId() == 0) {
                  temploc.setY(temploc.getY() - 1);
                }
                temploc.setY(temploc.getY() + 1);
                event.getPlayer().teleport(temploc);
                Messages.sendMessage(Message.register_success,player,null);
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        player.sendMessage(noPermission);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
 else {
      player.sendMessage(noPermission);
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.9931143745049053
94046,"public void onPlayerMove(PlayerMoveEvent event){
  if (!plugin.isAuthorized(event.getPlayer())) {
    if (!checkGuest(event.getPlayer(),Config.guests_movement)) {
      event.setCancelled(true);
      event.getPlayer().teleport(event.getFrom());
    }
  }
}","public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!plugin.isAuthorized(event.getPlayer())) {
    if (!checkGuest(event.getPlayer(),Config.guests_movement)) {
      event.getPlayer().teleport(event.getFrom());
    }
  }
}",0.6907020872865275
94047,"public void onPlayerChat(PlayerChatEvent event){
  if (!plugin.isAuthorized(event.getPlayer())) {
    Player player=event.getPlayer();
    if (ZPermissions.isAllowed(player,Permission.command_login)) {
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"") && (this.plugin.isRegistered(""String_Node_Str"",event.getPlayer().getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(event.getPlayer().getName())))) {
        String[] split=event.getMessage().split(""String_Node_Str"");
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          if (plugin.isAuthorized(player)) {
            Messages.sendMessage(Message.login_authorized,player,null);
          }
 else           if (split.length > 1) {
            player.sendMessage(""String_Node_Str"" + Util.checkOtherName(player.getName()));
          }
 else           if (this.plugin.checkPassword(player.getName(),split[0]) || this.plugin.checkPassword(Util.checkOtherName(player.getName()),split[0])) {
            Processes.Login(player);
            Messages.sendMessage(Message.login_success,player,null);
          }
 else {
            Messages.sendMessage(Message.login_failure,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(""String_Node_Str"");
          event.setCancelled(true);
        }
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
 else     if (!checkGuest(event.getPlayer(),Config.guests_chat)) {
      event.setCancelled(true);
    }
  }
}","public void onPlayerChat(PlayerChatEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!plugin.isAuthorized(event.getPlayer())) {
    Player player=event.getPlayer();
    if (ZPermissions.isAllowed(player,Permission.command_login)) {
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"") && (this.plugin.isRegistered(""String_Node_Str"",event.getPlayer().getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(event.getPlayer().getName())))) {
        String[] split=event.getMessage().split(""String_Node_Str"");
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          if (plugin.isAuthorized(player)) {
            Messages.sendMessage(Message.login_authorized,player,null);
          }
 else           if (split.length > 1) {
            player.sendMessage(""String_Node_Str"" + Util.checkOtherName(player.getName()));
          }
 else           if (this.plugin.checkPassword(player.getName(),split[0]) || this.plugin.checkPassword(Util.checkOtherName(player.getName()),split[0])) {
            Processes.Login(player);
            Messages.sendMessage(Message.login_success,player,null);
          }
 else {
            Messages.sendMessage(Message.login_failure,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(""String_Node_Str"");
          event.setCancelled(true);
        }
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
 else     if (!checkGuest(event.getPlayer(),Config.guests_chat)) {
      event.setCancelled(true);
    }
  }
}",0.9868536371603857
94048,"public static boolean check_hash(String password,String hash){
  if (hash.length() == 34) {
    Util.logging.Info(""String_Node_Str"" + _hash_crypt_private(password,hash));
    return _hash_crypt_private(password,hash).equals(hash);
  }
 else {
    Util.logging.Info(""String_Node_Str"" + Encryption.md5(password));
    return Encryption.md5(password).equals(hash);
  }
}","public static boolean check_hash(String password,String hash){
  long start=Util.timeMS();
  boolean check;
  if (hash.length() == 34) {
    check=_hash_crypt_private(password,hash).equals(hash);
  }
 else {
    check=Encryption.md5(password).equals(hash);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
  return check;
}",0.5616438356164384
94049,"static String _hash_crypt_private(String password,String setting){
  String output=""String_Node_Str"";
  if (!setting.substring(0,3).equals(""String_Node_Str"")) {
    Util.logging.Info(""String_Node_Str"");
    return output;
  }
  int count_log2=itoa64.indexOf(setting.charAt(3));
  if (count_log2 < 7 || count_log2 > 30) {
    Util.logging.Info(""String_Node_Str"");
    return output;
  }
  int count=1 << count_log2;
  String salt=setting.substring(4,12);
  if (salt.length() != 8) {
    Util.logging.Info(""String_Node_Str"");
    return output;
  }
  String m1=Encryption.md5(salt + password);
  String hash=Encryption.pack(m1);
  do {
    Util.logging.Info(""String_Node_Str"");
    hash=Encryption.pack(Encryption.md5(hash + password));
  }
 while (--count > 0);
  Util.logging.Info(""String_Node_Str"");
  output=setting.substring(0,12) + _hash_encode64(hash,16);
  return output;
}","static String _hash_crypt_private(String password,String setting){
  String output=""String_Node_Str"";
  if (!setting.substring(0,3).equals(""String_Node_Str"")) {
    return output;
  }
  int count_log2=itoa64.indexOf(setting.charAt(3));
  if (count_log2 < 7 || count_log2 > 30) {
    return output;
  }
  int count=1 << count_log2;
  String salt=setting.substring(4,12);
  if (salt.length() != 8) {
    return output;
  }
  String m1=Encryption.md5(salt + password);
  String hash=Encryption.pack(m1);
  int counter=0;
  do {
    counter++;
    hash=Encryption.pack(Encryption.md5(hash + password));
  }
 while (--count > 0);
  Util.logging.Info(""String_Node_Str"" + counter + ""String_Node_Str"");
  output=setting.substring(0,12) + _hash_encode64(hash,16);
  return output;
}",0.8680387409200968
94050,"public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.welcome_guest)) {
      if (Config.register_force) {
        Util.spamText(player,Message.welcome_guest.text,Config.register_delay,Config.register_show);
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_welcome_guest,player,null));
      }
    }
 else     if (type.equals(Message.guest_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_guest_notauthorized,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_registered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_registered,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,null));
    }
 else     if (type.equals(Message.idle_kick)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_idle_kick,player,null));
    }
 else     if (type.equals(Message.idle_whitelist)) {
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
}","public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  long start=Util.timeMS();
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.welcome_guest)) {
      if (Config.register_force) {
        Util.spamText(player,Message.welcome_guest.text,Config.register_delay,Config.register_show);
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_welcome_guest,player,null));
      }
    }
 else     if (type.equals(Message.guest_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_guest_notauthorized,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_registered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_registered,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,null));
    }
 else     if (type.equals(Message.idle_kick)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_idle_kick,player,null));
    }
 else     if (type.equals(Message.idle_whitelist)) {
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.9928276737543636
94051,"public static String removeColors(String toremove){
  logging.Debug(""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  return toremove;
}","public static String removeColors(String toremove){
  long start=Util.timeMS();
  logging.Debug(""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  toremove=toremove.replace(""String_Node_Str"",""String_Node_Str"");
  long stop=Util.timeMS();
  Util.logging.Debug(""String_Node_Str"" + ((stop - start) / 1000) + ""String_Node_Str""+ (stop - start)+ ""String_Node_Str"");
  return toremove;
}",0.922882427307206
94052,"public static String replaceStrings(String string,Player player,String additional){
  logging.Debug((""String_Node_Str""));
  if (!Config.has_badcharacters && Config.database_ison && player != null && player.getName().length() > Integer.parseInt(Config.username_minimum) && player.getName().length() < Integer.parseInt(Config.username_maximum)) {
    string=string.replaceAll(""String_Node_Str"",craftFirePlayer.getIP(player));
    string=string.replaceAll(""String_Node_Str"",player.getName());
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (!Util.checkOtherName(player.getName()).equals(player.getName())) {
      string=string.replaceAll(""String_Node_Str"",checkOtherName(player.getName()));
    }
  }
 else {
    string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(""String_Node_Str""));
  }
  string=string.replaceAll(""String_Node_Str"",Config.username_minimum);
  string=string.replaceAll(""String_Node_Str"",Config.username_maximum);
  string=string.replaceAll(""String_Node_Str"",Config.password_minimum);
  string=string.replaceAll(""String_Node_Str"",Config.password_maximum);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginName);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginVersion);
  string=string.replaceAll(""String_Node_Str"",Config.login_timeout_length + ""String_Node_Str"" + Config.login_timeout_time);
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"" + Config.register_timeout_length + ""String_Node_Str""+ Config.register_timeout_time);
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.filter_username));
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.filter_password));
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return string;
}","public static String replaceStrings(String string,Player player,String additional){
  long start=Util.timeMS();
  logging.Debug((""String_Node_Str""));
  if (!Config.has_badcharacters && Config.database_ison && player != null && player.getName().length() > Integer.parseInt(Config.username_minimum) && player.getName().length() < Integer.parseInt(Config.username_maximum)) {
    string=string.replaceAll(""String_Node_Str"",craftFirePlayer.getIP(player));
    string=string.replaceAll(""String_Node_Str"",player.getName());
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (!Util.checkOtherName(player.getName()).equals(player.getName())) {
      string=string.replaceAll(""String_Node_Str"",checkOtherName(player.getName()));
    }
  }
 else {
    string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(""String_Node_Str""));
  }
  string=string.replaceAll(""String_Node_Str"",Config.username_minimum);
  string=string.replaceAll(""String_Node_Str"",Config.username_maximum);
  string=string.replaceAll(""String_Node_Str"",Config.password_minimum);
  string=string.replaceAll(""String_Node_Str"",Config.password_maximum);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginName);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginVersion);
  string=string.replaceAll(""String_Node_Str"",Config.login_timeout_length + ""String_Node_Str"" + Config.login_timeout_time);
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"" + Config.register_timeout_length + ""String_Node_Str""+ Config.register_timeout_time);
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.filter_username));
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.filter_password));
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  long stop=Util.timeMS();
  Util.logging.Debug(""String_Node_Str"" + ((stop - start) / 1000) + ""String_Node_Str""+ (stop - start)+ ""String_Node_Str"");
  return string;
}",0.9854865572210326
94053,"public boolean checkTimeout(Player player) throws IOException {
  Util.logging.Debug(""String_Node_Str"");
  if (plugin.isAuthorized(player) == false && AuthDB.AuthDB_Timeouts.containsKey(player.getName())) {
    Messages.sendMessage(Message.idle_kick,player,null);
    return true;
  }
  return false;
}","public void checkTimeout(Player player){
  Util.logging.Debug(""String_Node_Str"");
  if (plugin.isAuthorized(player) == false && AuthDB.AuthDB_Timeouts.containsKey(player.getName())) {
    if (plugin.isRegistered(""String_Node_Str"",player.getName())) {
      Messages.sendMessage(Message.login_timeout,player,null);
    }
 else {
      Messages.sendMessage(Message.register_timeout,player,null);
    }
  }
}",0.5997171145685997
94054,"public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  EBean.checkIP(player.getName(),Util.craftFirePlayer.getIP(player));
  player.teleport(Util.landLocation(player.getLocation()));
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
  if (Config.session_length != 0) {
    long timestamp=System.currentTimeMillis() / 1000;
    if (Util.authDBplayer.sessionTime(player) != 0) {
      long storedtime=Util.authDBplayer.sessionTime(player);
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
      long timedifference=timestamp - storedtime;
      Util.logging.Debug(""String_Node_Str"" + timedifference);
      Util.logging.Debug(""String_Node_Str"" + Config.session_length);
      if (timedifference > Config.session_length) {
        sessionallow=false;
      }
 else {
        sessionallow=true;
      }
    }
 else {
      sessionallow=false;
    }
  }
  try {
    if (Config.login_timeout > 0 && sessionallow == false) {
      Util.logging.Debug(""String_Node_Str"" + Config.login_timeout);
      Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        @Override public void run(){
          try {
            checkTimeout(player);
          }
 catch (          IOException e) {
            Util.logging.Warning(""String_Node_Str"");
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
      }
,Config.login_timeout);
      if (AuthDB.AuthDB_Timeouts.put(player.getName(),Schedule) != null) {
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
      }
    }
    if (Config.custom_enabled)     if (Config.custom_encryption == null) {
      player.sendMessage(""String_Node_Str"");
    }
    if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
      player.setHealth(20);
      player.teleport(player.getWorld().getSpawnLocation());
    }
    EBean eBeanClass=EBean.checkPlayer(player);
    if ((eBeanClass.getReloadtime() + 30) >= Util.timeStamp()) {
      sessionallow=true;
    }
    if (sessionallow) {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(event.getPlayer());
      Messages.sendMessage(Message.session_valid,player,null);
    }
 else     if (this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        @Override public void run(){
          if (!plugin.isAuthorized(player)) {
            if (player.getInventory() != null) {
              player.getInventory().clear();
            }
            Util.craftFirePlayer.clearArmorinventory(player);
          }
        }
      }
,20);
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
        Messages.sendMessage(Message.login_prompt,player,null);
      }
 else {
        Messages.sendMessage(Message.login_normal,player,null);
      }
    }
 else     if (Config.register_force) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      Util.craftFirePlayer.clearArmorinventory(player);
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else     if (!Config.register_force) {
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(player);
    }
  }
 catch (  IOException e) {
    Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    player.sendMessage(Color.red + ""String_Node_Str"");
  }
}","public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  EBean.checkIP(player.getName(),Util.craftFirePlayer.getIP(player));
  player.teleport(Util.landLocation(player.getLocation()));
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
  if (Config.session_length != 0) {
    long timestamp=System.currentTimeMillis() / 1000;
    if (Util.authDBplayer.sessionTime(player) != 0) {
      long storedtime=Util.authDBplayer.sessionTime(player);
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
      long timedifference=timestamp - storedtime;
      Util.logging.Debug(""String_Node_Str"" + timedifference);
      Util.logging.Debug(""String_Node_Str"" + Config.session_length);
      if (timedifference > Config.session_length) {
        sessionallow=false;
      }
 else {
        sessionallow=true;
      }
    }
 else {
      sessionallow=false;
    }
  }
  try {
    if (sessionallow == false) {
      int time=0;
      if (Config.login_timeout > 0 && plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.login_timeout);
        time=Config.login_timeout;
      }
 else       if (Config.register_timeout > 0 && !plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.register_timeout);
        time=Config.register_timeout;
      }
      if (time > 0) {
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            checkTimeout(player);
          }
        }
,time);
        if (AuthDB.AuthDB_Timeouts.put(player.getName(),Schedule) != null) {
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
        }
      }
    }
    if (Config.custom_enabled)     if (Config.custom_encryption == null) {
      player.sendMessage(""String_Node_Str"");
    }
    if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
      player.setHealth(20);
      player.teleport(player.getWorld().getSpawnLocation());
    }
    EBean eBeanClass=EBean.checkPlayer(player);
    if ((eBeanClass.getReloadtime() + 30) >= Util.timeStamp()) {
      sessionallow=true;
    }
    if (sessionallow) {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(event.getPlayer());
      Messages.sendMessage(Message.session_valid,player,null);
    }
 else     if (this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        @Override public void run(){
          if (!plugin.isAuthorized(player)) {
            if (player.getInventory() != null) {
              player.getInventory().clear();
            }
            Util.craftFirePlayer.clearArmorinventory(player);
          }
        }
      }
,20);
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
        Messages.sendMessage(Message.login_prompt,player,null);
      }
 else {
        Messages.sendMessage(Message.login_normal,player,null);
      }
    }
 else     if (Config.register_force) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      Util.craftFirePlayer.clearArmorinventory(player);
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else     if (!Config.register_force) {
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(player);
    }
  }
 catch (  IOException e) {
    Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    player.sendMessage(Color.red + ""String_Node_Str"");
  }
}",0.3113163972286374
94055,"public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  long start=Util.timeMS();
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.welcome_guest)) {
      if (Config.register_force) {
        Util.spamText(player,Message.welcome_guest.text,Config.register_delay,Config.register_show);
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_welcome_guest,player,null));
      }
    }
 else     if (type.equals(Message.reload_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_reload_success,player,null));
    }
 else     if (type.equals(Message.guest_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_guest_notauthorized,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_exists,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_timeout)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_timeout,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_timeout)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_timeout,player,null));
    }
 else     if (type.equals(Message.login_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_admin,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.logout_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_success,player,null));
    }
 else     if (type.equals(Message.logout_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_failure,player,null));
    }
 else     if (type.equals(Message.logout_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_admin,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.email_badcharacters)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_badcharacters,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      if (Config.hasBukkitContrib) {
        player.sendMessage(""String_Node_Str"");
      }
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,null));
    }
 else     if (type.equals(Message.idle_kick)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_idle_kick,player,null));
    }
 else     if (type.equals(Message.idle_whitelist)) {
    }
 else     if (type.equals(Message.protection_denied)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_denied,player,null));
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}","public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  long start=Util.timeMS();
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.welcome_guest)) {
      if (Config.register_force) {
        Util.spamText(player,Message.welcome_guest.text,Config.register_delay,Config.register_show);
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_welcome_guest,player,null));
      }
    }
 else     if (type.equals(Message.reload_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_reload_success,player,null));
    }
 else     if (type.equals(Message.guest_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_guest_notauthorized,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_exists,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_register_timeout,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_login_timeout,player,null));
    }
 else     if (type.equals(Message.login_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_admin,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.logout_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_success,player,null));
    }
 else     if (type.equals(Message.logout_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_failure,player,null));
    }
 else     if (type.equals(Message.logout_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_admin,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.email_badcharacters)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_badcharacters,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      if (Config.hasBukkitContrib) {
        player.sendMessage(""String_Node_Str"");
      }
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,null));
    }
 else     if (type.equals(Message.idle_kick)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_idle_kick,player,null));
    }
 else     if (type.equals(Message.idle_whitelist)) {
    }
 else     if (type.equals(Message.protection_denied)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_denied,player,null));
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.9978902953586498
94056,"public void onEnable(){
  plugin=this;
  SetupPluginInformation();
  CheckOldFiles();
  Server=getServer();
  Database=getDatabase();
  Plugin[] plugins=Server.getPluginManager().getPlugins();
  int counter=0;
  String Plugins=""String_Node_Str"";
  while (plugins.length > counter) {
    Plugins+=plugins[counter].getDescription().getName() + ""String_Node_Str"" + plugins[counter].getDescription().getVersion();
    if (plugins.length != (counter + 1))     Plugins+=""String_Node_Str"";
    counter++;
  }
  File f=new File(""String_Node_Str"" + PluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.Log(""String_Node_Str"",""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(""String_Node_Str"",""String_Node_Str"" + PluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(getDataFolder() + ""String_Node_Str"");
  if (!f.exists()) {
    Util.Log(""String_Node_Str"",""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  LoadYml(""String_Node_Str"");
  LoadYml(""String_Node_Str"");
  final Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  CheckPermissions();
  if ((checkCraftIRC != null) && (Config.CraftIRC_enabled == true)) {
    craftircHandle=((CraftIRC)checkCraftIRC);
    Util.Log(""String_Node_Str"",""String_Node_Str"" + checkCraftIRC.getDescription().getName());
    this.getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
      @Override public void run(){
        if (checkCraftIRC.isEnabled()) {
          zCraftIRC.SendMessage(Message.OnEnable,null);
        }
      }
    }
,100);
  }
  final Plugin Backpack=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Backpack != null) {
    Config.HasBackpack=true;
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,this.playerListener,Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.entityListener,Event.Priority.Normal,this);
  PropertyManager TheSettings=new PropertyManager(new File(""String_Node_Str""));
  if (TheSettings.getBoolean(""String_Node_Str"",true)) {
    Config.OnlineMode=true;
  }
  UpdateLinkedNames();
  setupDatabase();
  MySQL.connect();
  try {
    Util.CheckScript(""String_Node_Str"",Config.script_name,null,null,null,null);
  }
 catch (  SQLException e) {
    if (Config.custom_enabled && Config.custom_autocreate) {
      String enter=""String_Node_Str"";
      Util.Log(""String_Node_Str"",""String_Node_Str"" + Config.custom_table);
      StringBuilder query=new StringBuilder();
      String NL=System.getProperty(""String_Node_Str"");
      Scanner scanner=null;
      try {
        scanner=new Scanner(new FileInputStream(getDataFolder() + ""String_Node_Str""));
      }
 catch (      FileNotFoundException e2) {
        e2.printStackTrace();
      }
      try {
        while (scanner.hasNextLine()) {
          String line=scanner.nextLine();
          if (line.contains(""String_Node_Str"")) {
            query.append(""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ NL);
          }
 else {
            query.append(line + NL);
          }
        }
      }
  finally {
        scanner.close();
      }
      Util.Debug(enter + query);
      try {
        MySQL.query(""String_Node_Str"" + query);
        Util.Log(""String_Node_Str"",""String_Node_Str"" + Config.custom_table);
        PreparedStatement ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          Util.Log(""String_Node_Str"",rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
 catch (      SQLException e1) {
        Util.Log(""String_Node_Str"",""String_Node_Str"" + Config.custom_table);
        e1.printStackTrace();
      }
    }
 else {
      e.printStackTrace();
    }
  }
  Util.AddOtherNamesToDB();
  Util.Log(""String_Node_Str"",PluginName + ""String_Node_Str"" + PluginVersion+ ""String_Node_Str"");
  if (Config.debug_enable)   Util.Log(""String_Node_Str"",""String_Node_Str"");
  if (Config.custom_enabled)   if (Config.custom_encryption == null)   Util.Log(""String_Node_Str"",""String_Node_Str"");
  Util.Log(""String_Node_Str"",PluginName + ""String_Node_Str"");
  String thescript=""String_Node_Str"", theversion=""String_Node_Str"";
  if (Config.custom_enabled) {
    thescript=""String_Node_Str"";
  }
 else {
    thescript=Config.script_name;
    theversion=Config.script_version;
  }
  String online=""String_Node_Str"" + getServer().getOnlinePlayers().length;
  String max=""String_Node_Str"" + getServer().getMaxPlayers();
  if (Config.usagestats_enabled) {
    try {
      Util.PostInfo(getServer().getServerName(),getServer().getVersion(),PluginVersion,System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),thescript,theversion,Plugins,online,max,Server.getPort());
    }
 catch (    IOException e1) {
      if (Config.debug_enable)       Util.Debug(""String_Node_Str"");
    }
  }
}","public void onEnable(){
  plugin=this;
  SetupPluginInformation();
  CheckOldFiles();
  Server=getServer();
  Database=getDatabase();
  Plugin[] plugins=Server.getPluginManager().getPlugins();
  int counter=0;
  String Plugins=""String_Node_Str"";
  while (plugins.length > counter) {
    Plugins+=plugins[counter].getDescription().getName() + ""String_Node_Str"" + plugins[counter].getDescription().getVersion();
    if (plugins.length != (counter + 1))     Plugins+=""String_Node_Str"";
    counter++;
  }
  File f=new File(""String_Node_Str"" + PluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.Log(""String_Node_Str"",""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(""String_Node_Str"",""String_Node_Str"" + PluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(getDataFolder() + ""String_Node_Str"");
  if (!f.exists()) {
    Util.Log(""String_Node_Str"",""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  LoadYml(""String_Node_Str"");
  LoadYml(""String_Node_Str"");
  final Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  CheckPermissions();
  if ((checkCraftIRC != null) && (Config.CraftIRC_enabled == true)) {
    craftircHandle=((CraftIRC)checkCraftIRC);
    Util.Log(""String_Node_Str"",""String_Node_Str"" + checkCraftIRC.getDescription().getName());
    this.getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
      @Override public void run(){
        if (checkCraftIRC.isEnabled()) {
          zCraftIRC.SendMessage(Message.OnEnable,null);
        }
      }
    }
,100);
  }
  final Plugin Backpack=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Backpack != null) {
    Config.HasBackpack=true;
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,this.playerListener,Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.entityListener,Event.Priority.Normal,this);
  PropertyManager TheSettings=new PropertyManager(new File(""String_Node_Str""));
  if (TheSettings.getBoolean(""String_Node_Str"",true)) {
    Config.OnlineMode=true;
  }
  UpdateLinkedNames();
  setupDatabase();
  MySQL.connect();
  try {
    Util.CheckScript(""String_Node_Str"",Config.script_name,null,null,null,null);
  }
 catch (  SQLException e) {
    if (Config.custom_enabled && Config.custom_autocreate) {
      String enter=""String_Node_Str"";
      Util.Log(""String_Node_Str"",""String_Node_Str"" + Config.custom_table);
      StringBuilder query=new StringBuilder();
      String NL=System.getProperty(""String_Node_Str"");
      Scanner scanner=null;
      try {
        scanner=new Scanner(new FileInputStream(getDataFolder() + ""String_Node_Str""));
      }
 catch (      FileNotFoundException e2) {
        e2.printStackTrace();
      }
      try {
        while (scanner.hasNextLine()) {
          String line=scanner.nextLine();
          if (line.contains(""String_Node_Str"")) {
            query.append(""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ NL);
          }
 else {
            query.append(line + NL);
          }
        }
      }
  finally {
        scanner.close();
      }
      Util.Debug(enter + query);
      try {
        MySQL.query(""String_Node_Str"" + query);
        Util.Log(""String_Node_Str"",""String_Node_Str"" + Config.custom_table);
        PreparedStatement ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          Util.Log(""String_Node_Str"",rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
 catch (      SQLException e1) {
        Util.Log(""String_Node_Str"",""String_Node_Str"" + Config.custom_table);
        e1.printStackTrace();
      }
    }
 else {
      e.printStackTrace();
    }
  }
  Util.AddOtherNamesToDB();
  Util.Log(""String_Node_Str"",PluginName + ""String_Node_Str"" + PluginVersion+ ""String_Node_Str"");
  if (Config.debug_enable)   Util.Log(""String_Node_Str"",""String_Node_Str"");
  if (Config.custom_enabled)   if (Config.custom_encryption == null)   Util.Log(""String_Node_Str"",""String_Node_Str"");
  Util.Log(""String_Node_Str"",PluginName + ""String_Node_Str"");
  String thescript=""String_Node_Str"", theversion=""String_Node_Str"";
  if (Config.custom_enabled) {
    thescript=""String_Node_Str"";
  }
 else {
    thescript=Config.script_name;
    theversion=Config.script_version;
  }
  String online=""String_Node_Str"" + getServer().getOnlinePlayers().length;
  String max=""String_Node_Str"" + getServer().getMaxPlayers();
  if (Config.usagestats_enabled) {
    try {
      Util.PostInfo(getServer().getServerName(),getServer().getVersion(),PluginVersion,System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),thescript,theversion,Plugins,online,max,Server.getPort());
    }
 catch (    IOException e1) {
      if (Config.debug_enable)       Util.Debug(""String_Node_Str"");
    }
  }
  for (  Player p : getServer().getOnlinePlayers()) {
    eBean eBeanClass=eBean.CheckPlayer(p);
    if (eBeanClass.getReloadtime() + 20 > Util.TimeStamp()) {
      Processes.Login(p);
    }
  }
}",0.9849129593810444
94057,"public void onDisable(){
  for (  Player p : getServer().getOnlinePlayers()) {
    eBean eBeanClass=eBean.find(p);
    eBeanClass.setReloadtime(Util.TimeStamp());
    eBean.save(eBeanClass);
    Processes.Logout(p);
  }
  Util.Log(""String_Node_Str"",PluginName + ""String_Node_Str"" + PluginVersion+ ""String_Node_Str"");
  Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if ((checkCraftIRC != null) && (checkCraftIRC.isEnabled()) && (Config.CraftIRC_enabled == true))   zCraftIRC.SendMessage(Message.OnDisable,null);
  disableInventory();
  authorizedNames.clear();
  AuthTimeDB.clear();
  AuthDBRemindLogin.clear();
  AuthDBSpamMessage.clear();
  AuthDBSpamMessageTime.clear();
  AuthOtherNamesDB.clear();
  AuthPasswordTriesDB.clear();
  db.clear();
  db2.clear();
  db3.clear();
  MySQL.close();
}","public void onDisable(){
  for (  Player p : getServer().getOnlinePlayers()) {
    eBean eBeanClass=eBean.CheckPlayer(p);
    if (eBeanClass.getAuthorized().equalsIgnoreCase(""String_Node_Str"")) {
      eBeanClass.setReloadtime(Util.TimeStamp());
      eBean.save(eBeanClass);
    }
    Processes.Logout(p);
  }
  Util.Log(""String_Node_Str"",PluginName + ""String_Node_Str"" + PluginVersion+ ""String_Node_Str"");
  Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if ((checkCraftIRC != null) && (checkCraftIRC.isEnabled()) && (Config.CraftIRC_enabled == true))   zCraftIRC.SendMessage(Message.OnDisable,null);
  disableInventory();
  authorizedNames.clear();
  AuthTimeDB.clear();
  AuthDBRemindLogin.clear();
  AuthDBSpamMessage.clear();
  AuthDBSpamMessageTime.clear();
  AuthOtherNamesDB.clear();
  AuthPasswordTriesDB.clear();
  db.clear();
  db2.clear();
  db3.clear();
  MySQL.close();
}",0.8854700854700854
94058,"public static ItemStack[] getInventory(Player player){
  eBean eBeanClass=eBean.find(player);
  if (eBeanClass != null) {
    String data=eBeanClass.getInventory();
    if (data != ""String_Node_Str"" && data != null) {
      String[] inv=Util.split(data,""String_Node_Str"");
      ItemStack[] inventory=null;
      for (int i=0; i < inv.length - 1; i++) {
        String line=inv[i];
        String[] split=line.split(""String_Node_Str"");
        if (split.length == 4) {
          int type=Integer.valueOf(split[0]).intValue();
          inventory[i]=new ItemStack(type,Integer.valueOf(split[1]).intValue());
          short dur=Short.valueOf(split[3]).shortValue();
          if (dur > 0)           inventory[i].setDurability(dur);
          byte dd;
          if (split[2].length() == 0)           dd=0;
 else           dd=Byte.valueOf(split[2]).byteValue();
          Material mat=Material.getMaterial(type);
          if (mat == null)           inventory[i].setData(new MaterialData(type,dd));
 else           inventory[i].setData(mat.getNewData(dd));
          i=(short)(i + 1);
        }
      }
      eBeanClass.setInventory(null);
      AuthDB.Database.save(eBeanClass);
      return inventory;
    }
  }
  return null;
}","public static ItemStack[] getInventory(Player player){
  eBean eBeanClass=eBean.find(player);
  if (eBeanClass != null) {
    String data=eBeanClass.getInventory();
    if (data != ""String_Node_Str"" && data != null) {
      String[] inv=Util.split(data,""String_Node_Str"");
      ItemStack[] inventory=new ItemStack[36];
      for (int i=0; i < inv.length - 1; i++) {
        String line=inv[i];
        String[] split=line.split(""String_Node_Str"");
        if (split.length == 4) {
          int type=Integer.valueOf(split[0]).intValue();
          inventory[i]=new ItemStack(type,Integer.valueOf(split[1]).intValue());
          short dur=Short.valueOf(split[3]).shortValue();
          if (dur > 0)           inventory[i].setDurability(dur);
          byte dd;
          if (split[2].length() == 0)           dd=0;
 else           dd=Byte.valueOf(split[2]).byteValue();
          Material mat=Material.getMaterial(type);
          if (mat == null)           inventory[i].setData(new MaterialData(type,dd));
 else           inventory[i].setData(mat.getNewData(dd));
          i=(short)(i + 1);
        }
      }
      eBeanClass.setInventory(null);
      AuthDB.Database.save(eBeanClass);
      return inventory;
    }
  }
  return null;
}",0.992298338062424
94059,"public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  player.teleport(Util.LandLocation(player.getLocation()));
  if (Config.link_rename && Util.CheckOtherName(player.getName()) != player.getName()) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthPasswordTriesDB.put(player.getName(),""String_Node_Str"");
  try {
    if (Config.session_length != 0) {
      long timestamp=System.currentTimeMillis() / 1000;
      if (this.plugin.TimeoutTask(""String_Node_Str"",player,""String_Node_Str"") == true) {
        long storedtime=Long.parseLong(this.plugin.db2.get(Encryption.md5(player.getName() + Util.GetIP(player))));
        Util.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
        long timedifference=timestamp - storedtime;
        Util.Debug(""String_Node_Str"" + timedifference);
        if (timedifference > Config.session_length) {
          sessionallow=false;
        }
 else {
          sessionallow=true;
        }
      }
 else {
        sessionallow=false;
      }
    }
    try {
      if (Config.login_timeout > 0 && sessionallow == false) {
        Util.Debug(""String_Node_Str"" + Config.login_timeout);
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            try {
              CheckTimeout(player);
            }
 catch (            IOException e) {
              Util.Log(""String_Node_Str"",""String_Node_Str"");
              e.printStackTrace();
            }
          }
        }
,Config.login_timeout);
        if (this.plugin.TimeoutTask(""String_Node_Str"",player,""String_Node_Str"" + Schedule))         Util.Debug(player.getName() + ""String_Node_Str"");
        this.plugin.updateDb();
      }
      if (Config.custom_enabled)       if (Config.custom_encryption == null) {
        player.sendMessage(""String_Node_Str"");
      }
      if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
        player.setHealth(20);
        player.teleport(player.getWorld().getSpawnLocation());
      }
      if (sessionallow) {
        Messages.SendMessage(Message.session_valid,player,null);
        long thetimestamp=System.currentTimeMillis() / 1000;
        this.plugin.AuthTimeDB.put(player.getName(),""String_Node_Str"" + thetimestamp);
        Processes.Login(event.getPlayer());
      }
 else       if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.CheckOtherName(player.getName()))) {
        if (Config.HasBackpack) {
          BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
          BackpackPlayer.createBackpack();
          this.plugin.storeInventory(player,BackpackPlayer.getContents());
        }
 else {
          this.plugin.storeInventory(player,player.getInventory().getContents());
        }
        player.getInventory().clear();
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            if (!plugin.isAuthorized(player)) {
              if (player.getInventory() != null) {
                player.getInventory().clear();
              }
            }
          }
        }
,20);
        if (Util.ToLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
          Messages.SendMessage(Message.login_prompt,player,null);
        }
 else {
          Messages.SendMessage(Message.login_normal,player,null);
        }
      }
 else       if (Config.register_force) {
        if (Config.HasBackpack) {
          BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
          BackpackPlayer.createBackpack();
          this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents());
        }
 else {
          this.plugin.storeInventory(player,player.getInventory().getContents());
        }
        player.getInventory().clear();
        Messages.SendMessage(Message.welcome_guest,player,null);
      }
 else       if (!Config.register_force) {
        Messages.SendMessage(Message.welcome_guest,player,null);
      }
 else {
        long thetimestamp=System.currentTimeMillis() / 1000;
        this.plugin.AuthTimeDB.put(player.getName(),""String_Node_Str"" + thetimestamp);
        Processes.Login(player);
      }
    }
 catch (    IOException e) {
      Util.Log(""String_Node_Str"",""String_Node_Str"" + AuthDB.PluginName + ""String_Node_Str"");
      player.kickPlayer(""String_Node_Str"");
      e.printStackTrace();
      player.sendMessage(Color.red + ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  eBean.CheckIP(player.getName(),Util.GetIP(player));
  player.teleport(Util.LandLocation(player.getLocation()));
  if (Config.link_rename && Util.CheckOtherName(player.getName()) != player.getName()) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthPasswordTriesDB.put(player.getName(),""String_Node_Str"");
  try {
    if (Config.session_length != 0) {
      long timestamp=System.currentTimeMillis() / 1000;
      if (this.plugin.TimeoutTask(""String_Node_Str"",player,""String_Node_Str"") == true) {
        long storedtime=Long.parseLong(this.plugin.db2.get(Encryption.md5(player.getName() + Util.GetIP(player))));
        Util.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
        long timedifference=timestamp - storedtime;
        Util.Debug(""String_Node_Str"" + timedifference);
        if (timedifference > Config.session_length) {
          sessionallow=false;
        }
 else {
          sessionallow=true;
        }
      }
 else {
        sessionallow=false;
      }
    }
    try {
      if (Config.login_timeout > 0 && sessionallow == false) {
        Util.Debug(""String_Node_Str"" + Config.login_timeout);
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            try {
              CheckTimeout(player);
            }
 catch (            IOException e) {
              Util.Log(""String_Node_Str"",""String_Node_Str"");
              e.printStackTrace();
            }
          }
        }
,Config.login_timeout);
        if (this.plugin.TimeoutTask(""String_Node_Str"",player,""String_Node_Str"" + Schedule))         Util.Debug(player.getName() + ""String_Node_Str"");
        this.plugin.updateDb();
      }
      if (Config.custom_enabled)       if (Config.custom_encryption == null) {
        player.sendMessage(""String_Node_Str"");
      }
      if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
        player.setHealth(20);
        player.teleport(player.getWorld().getSpawnLocation());
      }
      if (sessionallow) {
        Messages.SendMessage(Message.session_valid,player,null);
        long thetimestamp=System.currentTimeMillis() / 1000;
        this.plugin.AuthTimeDB.put(player.getName(),""String_Node_Str"" + thetimestamp);
        Processes.Login(event.getPlayer());
      }
 else       if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.CheckOtherName(player.getName()))) {
        if (Config.HasBackpack) {
          BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
          BackpackPlayer.createBackpack();
          this.plugin.storeInventory(player,BackpackPlayer.getContents());
        }
 else {
          this.plugin.storeInventory(player,player.getInventory().getContents());
        }
        player.getInventory().clear();
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            if (!plugin.isAuthorized(player)) {
              if (player.getInventory() != null) {
                player.getInventory().clear();
              }
            }
          }
        }
,20);
        if (Util.ToLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
          Messages.SendMessage(Message.login_prompt,player,null);
        }
 else {
          Messages.SendMessage(Message.login_normal,player,null);
        }
      }
 else       if (Config.register_force) {
        if (Config.HasBackpack) {
          BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
          BackpackPlayer.createBackpack();
          this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents());
        }
 else {
          this.plugin.storeInventory(player,player.getInventory().getContents());
        }
        player.getInventory().clear();
        Messages.SendMessage(Message.welcome_guest,player,null);
      }
 else       if (!Config.register_force) {
        Messages.SendMessage(Message.welcome_guest,player,null);
      }
 else {
        long thetimestamp=System.currentTimeMillis() / 1000;
        this.plugin.AuthTimeDB.put(player.getName(),""String_Node_Str"" + thetimestamp);
        Processes.Login(player);
      }
    }
 catch (    IOException e) {
      Util.Log(""String_Node_Str"",""String_Node_Str"" + AuthDB.PluginName + ""String_Node_Str"");
      player.kickPlayer(""String_Node_Str"");
      e.printStackTrace();
      player.sendMessage(Color.red + ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9944226399504236
94060,"public void onPlayerLogin(PlayerLoginEvent event){
  Player player=event.getPlayer();
  try {
    Util.CheckScript(""String_Node_Str"",Config.script_name,player.getName(),null,null,null);
    Util.CheckScript(""String_Node_Str"",Config.script_name,player.getName(),null,null,null);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  if (Config.session_protect && Util.CheckIfLoggedIn(player)) {
    Messages.SendMessage(Message.session_protected,player,event);
  }
  if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"") || Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
    String name=player.getName();
    if (Util.CheckFilter(""String_Node_Str"",name) == false && Util.CheckWhitelist(""String_Node_Str"",player) == false) {
      Util.Debug(""String_Node_Str"");
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str""))       Messages.SendMessage(Message.filter_username,player,event);
    }
  }
  if (player.getName().length() < Integer.parseInt(Config.username_minimum)) {
    Messages.SendMessage(Message.username_minimum,player,event);
  }
 else   if (player.getName().length() > Integer.parseInt(Config.username_maximum)) {
    Messages.SendMessage(Message.username_maximum,player,event);
  }
  if (Config.link_rename && Util.CheckOtherName(player.getName()) != player.getName()) {
    Util.RenamePlayer(player,Util.CheckOtherName(player.getName()));
  }
}","public void onPlayerLogin(PlayerLoginEvent event){
  Player player=event.getPlayer();
  eBean.sync(player);
  if (Config.session_protect && Util.CheckIfLoggedIn(player)) {
    Messages.SendMessage(Message.session_protected,player,event);
  }
  if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"") || Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
    String name=player.getName();
    if (Util.CheckFilter(""String_Node_Str"",name) == false && Util.CheckWhitelist(""String_Node_Str"",player) == false) {
      Util.Debug(""String_Node_Str"");
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str""))       Messages.SendMessage(Message.filter_username,player,event);
    }
  }
  if (player.getName().length() < Integer.parseInt(Config.username_minimum)) {
    Messages.SendMessage(Message.username_minimum,player,event);
  }
 else   if (player.getName().length() > Integer.parseInt(Config.username_maximum)) {
    Messages.SendMessage(Message.username_maximum,player,event);
  }
  if (Config.link_rename && Util.CheckOtherName(player.getName()) != player.getName()) {
    Util.RenamePlayer(player,Util.CheckOtherName(player.getName()));
  }
}",0.8974658869395712
94061,"public static boolean Login(Player player){
  if (!AuthDB.isAuthorized(player)) {
    long timestamp=Util.TimeStamp();
    if (!AuthDB.AuthTimeDB.containsKey(player.getName())) {
      AuthDB.AuthTimeDB.put(player.getName(),""String_Node_Str"" + timestamp);
    }
    AuthDB.authorizedNames.add(player.getName());
    eBean eBeanClass=eBean.CheckPlayer(player);
    eBeanClass.setAuthorized(""String_Node_Str"");
    AuthDB.Database.save(eBeanClass);
    if (!AuthDB.db3.containsKey(Encryption.md5(player.getName()))) {
      AuthDB.db3.put(Encryption.md5(player.getName()),""String_Node_Str"");
    }
    if (AuthDB.db2.containsKey(Encryption.md5(player.getName() + Util.GetIP(player)))) {
      AuthDB.db2.put(Encryption.md5(player.getName() + Util.GetIP(player)),""String_Node_Str"" + timestamp);
    }
    ItemStack[] inv=AuthDB.getInventory(player);
    if (inv != null) {
      player.getInventory().setContents(inv);
    }
    return true;
  }
  return false;
}","public static boolean Login(Player player){
  if (!AuthDB.isAuthorized(player)) {
    long timestamp=Util.TimeStamp();
    if (!AuthDB.AuthTimeDB.containsKey(player.getName())) {
      AuthDB.AuthTimeDB.put(player.getName(),""String_Node_Str"" + timestamp);
    }
    AuthDB.authorizedNames.add(player.getName());
    eBean eBeanClass=eBean.CheckPlayer(player);
    eBeanClass.setAuthorized(""String_Node_Str"");
    eBeanClass.setRegistred(""String_Node_Str"");
    AuthDB.Database.save(eBeanClass);
    if (!AuthDB.db3.containsKey(Encryption.md5(player.getName()))) {
      AuthDB.db3.put(Encryption.md5(player.getName()),""String_Node_Str"");
    }
    if (AuthDB.db2.containsKey(Encryption.md5(player.getName() + Util.GetIP(player)))) {
      AuthDB.db2.put(Encryption.md5(player.getName() + Util.GetIP(player)),""String_Node_Str"" + timestamp);
    }
    ItemStack[] inv=AuthDB.getInventory(player);
    if (inv != null) {
      player.getInventory().setContents(inv);
    }
    return true;
  }
  return false;
}",0.975609756097561
94062,"public static boolean CheckScript(String type,String script,String player,String password,String email,String ipAddress) throws SQLException {
  if (Config.database_ison) {
    String usertable=null, usernamefield=null, passwordfield=null, saltfield=""String_Node_Str"";
    boolean bans=false;
    PreparedStatement ps=null;
    int number=0;
    if (Config.custom_enabled) {
      if (type.equals(""String_Node_Str"")) {
        String check=MySQL.getfromtable(Config.custom_table,""String_Node_Str"",Config.custom_userfield,player);
        if (check != ""String_Node_Str"") {
          Config.HasForumBoard=true;
          return true;
        }
        return false;
      }
 else       if (type.equals(""String_Node_Str"")) {
        eBean eBeanClass=eBean.find(player);
        String StoredPassword=eBeanClass.getPassword();
        if (Custom.check_hash(password,StoredPassword)) {
          return true;
        }
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        eBean.CheckPassword(player,hash);
        if (Custom.check_hash(password,hash)) {
          return true;
        }
        return false;
      }
 else       if (type.equals(""String_Node_Str"")) {
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        eBean.CheckPassword(player,hash);
        return true;
      }
 else       if (type.equals(""String_Node_Str"")) {
        Custom.adduser(player,email,password,ipAddress);
      }
 else       if (type.equals(""String_Node_Str"")) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          Util.Log(""String_Node_Str"",rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
    }
 else     if (script.equals(phpBB.Name) || script.equals(phpBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(phpBB.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (phpBB.check_hash(password,StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (phpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (CheckVersionInRange(phpBB.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        bans=true;
        number=2;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (phpBB.check_hash(password,StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (phpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        phpBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(SMF.Name) || script.equals(SMF.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(SMF.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        saltfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        bans=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (SMF.check_hash(SMF.hash(1,player,password),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (SMF.check_hash(SMF.hash(1,player,password),hash)) {
            return true;
          }
        }
      }
 else       if (CheckVersionInRange(SMF.VersionRange2) || CheckVersionInRange(""String_Node_Str"") || CheckVersionInRange(""String_Node_Str"")|| CheckVersionInRange(""String_Node_Str"")) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        bans=true;
        number=2;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (SMF.check_hash(SMF.hash(2,player,password),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (SMF.check_hash(SMF.hash(2,player,password),hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        SMF.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(MyBB.Name) || script.equals(MyBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(MyBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        bans=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        MyBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(vBulletin.Name) || script.equals(vBulletin.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(vBulletin.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        bans=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (vBulletin.check_hash(vBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (vBulletin.check_hash(vBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
 else       if (CheckVersionInRange(vBulletin.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        bans=true;
        number=2;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (vBulletin.check_hash(vBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (vBulletin.check_hash(vBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        vBulletin.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(Drupal.Name) || script.equals(Drupal.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(Drupal.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (Encryption.md5(password).equals(StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (Encryption.md5(password).equals(hash)) {
            return true;
          }
        }
      }
 else       if (CheckVersionInRange(Drupal.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=2;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword.equals(Drupal.user_check_password(password,StoredPassword))) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (hash.equals(Drupal.user_check_password(password,hash))) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        Drupal.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(Joomla.Name) || script.equals(Joomla.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(Joomla.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (Joomla.check_hash(password,StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (CheckVersionInRange(Joomla.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=2;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (Joomla.check_hash(password,StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        Joomla.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(Vanilla.Name) || script.equals(Vanilla.ShortName)) {
      if (CheckVersionInRange(Vanilla.VersionRange)) {
        usertable=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (Vanilla.check_hash(password,StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (Vanilla.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (CheckVersionInRange(Vanilla.VersionRange2)) {
        usertable=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          if (Vanilla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        String emailcheck=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",email);
        if (emailcheck.equals(""String_Node_Str"")) {
          Vanilla.adduser(number,player,email,password,ipAddress);
          return true;
        }
        return false;
      }
    }
 else     if (script.equals(PunBB.Name) || script.equals(PunBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(PunBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        PunBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(XenForo.Name) || script.equals(XenForo.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(XenForo.VersionRange)) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
          int offset=-1;
          int chunkSize=1024;
          long blobLength=hash.length();
          if (chunkSize > blobLength) {
            chunkSize=(int)blobLength;
          }
          char buffer[]=new char[chunkSize];
          StringBuilder stringBuffer=new StringBuilder();
          Reader reader=new InputStreamReader(hash.getBinaryStream());
          try {
            while ((offset=reader.read(buffer)) != -1) {
              stringBuffer.append(buffer,0,offset);
            }
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
          String cache=stringBuffer.toString();
          String thehash=ForumCacheValue(cache,""String_Node_Str"");
          String thesalt=ForumCacheValue(cache,""String_Node_Str"");
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          String StoredSalt=eBeanClass.getSalt();
          if (XenForo.check_hash(XenForo.hash(1,StoredSalt,password),StoredPassword)) {
            return true;
          }
          eBean.CheckSalt(player,thesalt);
          eBean.CheckPassword(player,thehash);
          if (XenForo.check_hash(XenForo.hash(1,thesalt,password),thehash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        XenForo.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(bbPress.Name) || script.equals(bbPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(bbPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (bbPress.check_hash(password,StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (bbPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        bbPress.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(DLE.Name) || script.equals(DLE.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(DLE.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (DLE.check_hash(DLE.hash(password),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (DLE.check_hash(DLE.hash(password),hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        DLE.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(IPB.Name) || script.equals(IPB.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(IPB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          player=player.toLowerCase();
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        player=player.toLowerCase();
        IPB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
    if (!Config.HasForumBoard) {
      if (!Config.custom_enabled) {
        String TempVers=Config.script_version;
        Config.script_version=ScriptVersion();
        Log(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Config.script_name + ""String_Node_Str""+ TempVers+ ""String_Node_Str""+ Config.script_version+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    if (Config.HasForumBoard && type.equals(""String_Node_Str"") && !Config.custom_enabled) {
      String check=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",usernamefield,player);
      if (check != ""String_Node_Str"") {
        return true;
      }
    }
 else     if (Config.HasForumBoard && type.equals(""String_Node_Str"") && !Config.custom_enabled) {
      if (script.equals(phpBB.Name) || script.equals(phpBB.ShortName)) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
 else {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
      ResultSet rs=ps.executeQuery();
      if (rs.next()) {
        Util.Log(""String_Node_Str"",rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
      }
    }
 else     if (Config.HasForumBoard && type.equals(""String_Node_Str"") && !Config.custom_enabled) {
      String hash=MySQL.getfromtable(Config.script_tableprefix,""String_Node_Str"" + passwordfield + ""String_Node_Str"",usernamefield,player);
      eBean.CheckPassword(player,hash);
      return true;
    }
 else     if (Config.HasForumBoard && type.equals(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
      String salt=MySQL.getfromtable(Config.script_tableprefix,""String_Node_Str"" + saltfield + ""String_Node_Str"",usernamefield,player);
      eBean.CheckSalt(player,salt);
      return true;
    }
  }
  return false;
}","public static boolean CheckScript(String type,String script,String player,String password,String email,String ipAddress) throws SQLException {
  if (Config.database_ison) {
    String usertable=null, usernamefield=null, passwordfield=null, saltfield=""String_Node_Str"";
    boolean bans=false;
    PreparedStatement ps=null;
    int number=0;
    if (Config.custom_enabled) {
      if (type.equals(""String_Node_Str"")) {
        String check=MySQL.getfromtable(Config.custom_table,""String_Node_Str"",Config.custom_userfield,player);
        if (check != ""String_Node_Str"") {
          Config.HasForumBoard=true;
          return true;
        }
        return false;
      }
 else       if (type.equals(""String_Node_Str"")) {
        eBean eBeanClass=eBean.find(player);
        String StoredPassword=eBeanClass.getPassword();
        if (Custom.check_hash(password,StoredPassword)) {
          return true;
        }
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        eBean.CheckPassword(player,hash);
        if (Custom.check_hash(password,hash)) {
          return true;
        }
        return false;
      }
 else       if (type.equals(""String_Node_Str"")) {
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        eBean.CheckPassword(player,hash);
        return true;
      }
 else       if (type.equals(""String_Node_Str"")) {
        Custom.adduser(player,email,password,ipAddress);
      }
 else       if (type.equals(""String_Node_Str"")) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          Util.Log(""String_Node_Str"",rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
    }
 else     if (script.equals(phpBB.Name) || script.equals(phpBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(phpBB.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && phpBB.check_hash(password,StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (phpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (CheckVersionInRange(phpBB.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        bans=true;
        number=2;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && phpBB.check_hash(password,StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (phpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        phpBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(SMF.Name) || script.equals(SMF.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(SMF.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        saltfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        bans=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && SMF.check_hash(SMF.hash(1,player,password),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (SMF.check_hash(SMF.hash(1,player,password),hash)) {
            return true;
          }
        }
      }
 else       if (CheckVersionInRange(SMF.VersionRange2) || CheckVersionInRange(""String_Node_Str"") || CheckVersionInRange(""String_Node_Str"")|| CheckVersionInRange(""String_Node_Str"")) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        bans=true;
        number=2;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && SMF.check_hash(SMF.hash(2,player,password),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (SMF.check_hash(SMF.hash(2,player,password),hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        SMF.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(MyBB.Name) || script.equals(MyBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(MyBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        bans=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        MyBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(vBulletin.Name) || script.equals(vBulletin.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(vBulletin.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        bans=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && vBulletin.check_hash(vBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (vBulletin.check_hash(vBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
 else       if (CheckVersionInRange(vBulletin.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        bans=true;
        number=2;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && vBulletin.check_hash(vBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (vBulletin.check_hash(vBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        vBulletin.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(Drupal.Name) || script.equals(Drupal.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(Drupal.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && Encryption.md5(password).equals(StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (Encryption.md5(password).equals(hash)) {
            return true;
          }
        }
      }
 else       if (CheckVersionInRange(Drupal.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=2;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && StoredPassword.equals(Drupal.user_check_password(password,StoredPassword))) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (hash.equals(Drupal.user_check_password(password,hash))) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        Drupal.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(Joomla.Name) || script.equals(Joomla.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(Joomla.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && Joomla.check_hash(password,StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (CheckVersionInRange(Joomla.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=2;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && Joomla.check_hash(password,StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        Joomla.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(Vanilla.Name) || script.equals(Vanilla.ShortName)) {
      if (CheckVersionInRange(Vanilla.VersionRange)) {
        usertable=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && Vanilla.check_hash(password,StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (Vanilla.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (CheckVersionInRange(Vanilla.VersionRange2)) {
        usertable=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          if (Vanilla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        String emailcheck=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",email);
        if (emailcheck.equals(""String_Node_Str"")) {
          Vanilla.adduser(number,player,email,password,ipAddress);
          return true;
        }
        return false;
      }
    }
 else     if (script.equals(PunBB.Name) || script.equals(PunBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(PunBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        PunBB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(XenForo.Name) || script.equals(XenForo.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(XenForo.VersionRange)) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
          int offset=-1;
          int chunkSize=1024;
          long blobLength=hash.length();
          if (chunkSize > blobLength) {
            chunkSize=(int)blobLength;
          }
          char buffer[]=new char[chunkSize];
          StringBuilder stringBuffer=new StringBuilder();
          Reader reader=new InputStreamReader(hash.getBinaryStream());
          try {
            while ((offset=reader.read(buffer)) != -1) {
              stringBuffer.append(buffer,0,offset);
            }
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
          String cache=stringBuffer.toString();
          String thehash=ForumCacheValue(cache,""String_Node_Str"");
          String thesalt=ForumCacheValue(cache,""String_Node_Str"");
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          String StoredSalt=eBeanClass.getSalt();
          if (StoredPassword != null && StoredSalt != null && XenForo.check_hash(XenForo.hash(1,StoredSalt,password),StoredPassword)) {
            return true;
          }
          eBean.CheckSalt(player,thesalt);
          eBean.CheckPassword(player,thehash);
          if (XenForo.check_hash(XenForo.hash(1,thesalt,password),thehash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        XenForo.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(bbPress.Name) || script.equals(bbPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(bbPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && bbPress.check_hash(password,StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (bbPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        bbPress.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(DLE.Name) || script.equals(DLE.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(DLE.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && DLE.check_hash(DLE.hash(password),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (DLE.check_hash(DLE.hash(password),hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        DLE.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
 else     if (script.equals(IPB.Name) || script.equals(IPB.ShortName)) {
      usertable=""String_Node_Str"";
      if (CheckVersionInRange(IPB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.HasForumBoard=true;
        number=1;
        if (type.equals(""String_Node_Str"")) {
          player=player.toLowerCase();
          eBean eBeanClass=eBean.find(player);
          String StoredPassword=eBeanClass.getPassword();
          if (StoredPassword != null && IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),StoredPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          eBean.CheckPassword(player,hash);
          if (IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),hash)) {
            return true;
          }
        }
      }
      if (type.equals(""String_Node_Str"")) {
        player=player.toLowerCase();
        IPB.adduser(number,player,email,password,ipAddress);
        return true;
      }
    }
    if (!Config.HasForumBoard) {
      if (!Config.custom_enabled) {
        String TempVers=Config.script_version;
        Config.script_version=ScriptVersion();
        Log(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Config.script_name + ""String_Node_Str""+ TempVers+ ""String_Node_Str""+ Config.script_version+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    if (Config.HasForumBoard && type.equals(""String_Node_Str"") && !Config.custom_enabled) {
      String check=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",usernamefield,player);
      if (check != ""String_Node_Str"") {
        return true;
      }
    }
 else     if (Config.HasForumBoard && type.equals(""String_Node_Str"") && !Config.custom_enabled) {
      if (script.equals(phpBB.Name) || script.equals(phpBB.ShortName)) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
 else {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
      ResultSet rs=ps.executeQuery();
      if (rs.next()) {
        Util.Log(""String_Node_Str"",rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
      }
    }
 else     if (Config.HasForumBoard && type.equals(""String_Node_Str"") && !Config.custom_enabled) {
      String hash=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + passwordfield + ""String_Node_Str"",usernamefield,player);
      eBean.CheckPassword(player,hash);
      return true;
    }
 else     if (Config.HasForumBoard && type.equals(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
      String salt=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + saltfield + ""String_Node_Str"",usernamefield,player);
      eBean.CheckSalt(player,salt);
      return true;
    }
  }
  return false;
}",0.9899991802606772
94063,"public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Player) {
    if (event.getCause().name().equals(""String_Node_Str"")) {
      Player p=(Player)event.getEntity();
      if (!CheckGuest(p,Config.guests_health)) {
        event.setCancelled(true);
      }
    }
 else     if (event.getCause().name().equals(""String_Node_Str"")) {
      Player p=(Player)event.getEntity();
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
      if ((e.getEntity() instanceof Player)) {
        Player t=(Player)e.getDamager();
        if (!CheckGuest(t,Config.guests_pvp)) {
          if (!CheckGuest(p,Config.guests_health)) {
            event.setCancelled(true);
          }
        }
      }
    }
  }
 else   if ((event.getEntity() instanceof Animals) || (event.getEntity() instanceof Monster)) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    Player t=(Player)e.getDamager();
    if ((e.getEntity() instanceof Player) && CheckGuest(t,Config.guests_mobdamage) == false) {
      event.setCancelled(true);
    }
  }
}","public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Player) {
    if (event.getCause().name().equals(""String_Node_Str"")) {
      Player p=(Player)event.getEntity();
      if (!CheckGuest(p,Config.guests_health)) {
        event.setCancelled(true);
      }
    }
 else     if (event.getCause().name().equals(""String_Node_Str"")) {
      Player p=(Player)event.getEntity();
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
      if ((e.getEntity() instanceof Player)) {
        Player t=(Player)e.getDamager();
        if (!CheckGuest(t,Config.guests_pvp)) {
          if (!CheckGuest(p,Config.guests_health)) {
            event.setCancelled(true);
          }
        }
      }
    }
  }
 else   if ((event.getEntity() instanceof Animals) || (event.getEntity() instanceof Monster)) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    Player t=(Player)e.getDamager();
    if ((e.getDamager() instanceof Player) && CheckGuest(t,Config.guests_mobdamage) == false) {
      event.setCancelled(true);
    }
  }
}",0.9943795936013836
94064,"public void onEnable(){
  if (Config.usagestats_enabled) {
    try {
      Util.PostInfo(getServer().getName(),getServer().getVersion(),pluginversion);
    }
 catch (    IOException e1) {
      if (Config.debug_enable)       Util.Debug(""String_Node_Str"");
    }
  }
  Config TheMessages=new Config(""String_Node_Str"",""String_Node_Str"" + pluginname + ""String_Node_Str"",""String_Node_Str"");
  Config TheConfig=new Config(""String_Node_Str"",""String_Node_Str"" + pluginname + ""String_Node_Str"",""String_Node_Str"");
  if (null == getConfiguration().getKeys(""String_Node_Str"")) {
    Util.Log(""String_Node_Str"",""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(((Plugin)(this)));
    return;
  }
  Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (checkCraftIRC != null && Config.CraftIRC_enabled == true) {
    try {
      Util.Log(""String_Node_Str"",""String_Node_Str"");
      craftircHandle=(CraftIRC)checkCraftIRC;
      zCraftIRC.SendMessage(""String_Node_Str"",null);
    }
 catch (    ClassCastException ex) {
      ex.printStackTrace();
      Stop(""String_Node_Str"");
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_ITEM,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,this.blockListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,this.blockListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_INTERACT,this.blockListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGED,this.entityListener,Event.Priority.Lowest,this);
  try {
    MySQL.connect();
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    Stop(""String_Node_Str"");
  }
catch (  SQLException e) {
    e.printStackTrace();
    Stop(""String_Node_Str"");
  }
  Util.Log(""String_Node_Str"",pluginname + ""String_Node_Str"" + pluginversion+ ""String_Node_Str"");
  if (Config.debug_enable)   Util.Log(""String_Node_Str"",""String_Node_Str"");
  Util.Log(""String_Node_Str"",pluginname + ""String_Node_Str"");
}","public void onEnable(){
  if (Config.usagestats_enabled) {
    try {
      Util.PostInfo(getServer().getName(),getServer().getVersion(),pluginversion);
    }
 catch (    IOException e1) {
      if (Config.debug_enable)       Util.Debug(""String_Node_Str"");
    }
  }
  Config TheMessages=new Config(""String_Node_Str"",""String_Node_Str"" + pluginname + ""String_Node_Str"",""String_Node_Str"");
  if (null == TheMessages.GetConfigString(""String_Node_Str"",""String_Node_Str"")) {
    Util.Log(""String_Node_Str"",""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(((Plugin)(this)));
    return;
  }
  Config TheConfig=new Config(""String_Node_Str"",""String_Node_Str"" + pluginname + ""String_Node_Str"",""String_Node_Str"");
  if (null == getConfiguration().getKeys(""String_Node_Str"")) {
    Util.Log(""String_Node_Str"",""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(((Plugin)(this)));
    return;
  }
  Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (checkCraftIRC != null && Config.CraftIRC_enabled == true) {
    try {
      Util.Log(""String_Node_Str"",""String_Node_Str"");
      craftircHandle=(CraftIRC)checkCraftIRC;
      zCraftIRC.SendMessage(""String_Node_Str"",null);
    }
 catch (    ClassCastException ex) {
      ex.printStackTrace();
      Stop(""String_Node_Str"");
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_ITEM,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,this.blockListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,this.blockListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_INTERACT,this.blockListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGED,this.entityListener,Event.Priority.Lowest,this);
  try {
    MySQL.connect();
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    Stop(""String_Node_Str"");
  }
catch (  SQLException e) {
    e.printStackTrace();
    Stop(""String_Node_Str"");
  }
  Util.Log(""String_Node_Str"",pluginname + ""String_Node_Str"" + pluginversion+ ""String_Node_Str"");
  if (Config.debug_enable)   Util.Log(""String_Node_Str"",""String_Node_Str"");
  Util.Log(""String_Node_Str"",pluginname + ""String_Node_Str"");
}",0.9642209398186314
94065,"public boolean checkPassword(String player,String password){
  try {
    if (Config.script_name.equals(Config.script_name1)) {
      if (phpBB3.checkpassword(player.toLowerCase(),password))       return true;
    }
 else     if (Config.script_name.equals(Config.script_name2)) {
      if (SMF1.checkpassword(player.toLowerCase(),password))       return true;
    }
 else     if (Config.script_name.equals(Config.script_name3)) {
      if (SMF2.checkpassword(player.toLowerCase(),password))       return true;
    }
 else     if (Config.script_name.equals(Config.script_name4)) {
      if (myBB1_6.checkpassword(player.toLowerCase(),password))       return true;
    }
 else     if (Config.script_name.equals(Config.script_name5)) {
      if (vB4_1.checkpassword(player.toLowerCase(),password))       return true;
    }
 else {
      Stop(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
    Stop(""String_Node_Str"");
  }
  return false;
}","public boolean checkPassword(String player,String password){
  try {
    try {
      MySQL.connect();
    }
 catch (    ClassNotFoundException e) {
      Util.Debug(""String_Node_Str"");
      e.printStackTrace();
    }
    if (Config.script_name.equals(Config.script_name1)) {
      if (phpBB3.checkpassword(player.toLowerCase(),password))       return true;
    }
 else     if (Config.script_name.equals(Config.script_name2)) {
      if (SMF1.checkpassword(player.toLowerCase(),password))       return true;
    }
 else     if (Config.script_name.equals(Config.script_name3)) {
      if (SMF2.checkpassword(player.toLowerCase(),password))       return true;
    }
 else     if (Config.script_name.equals(Config.script_name4)) {
      if (myBB1_6.checkpassword(player.toLowerCase(),password))       return true;
    }
 else     if (Config.script_name.equals(Config.script_name5)) {
      if (vB4_1.checkpassword(player.toLowerCase(),password))       return true;
    }
 else {
      Stop(""String_Node_Str"");
    }
    MySQL.close();
  }
 catch (  SQLException e) {
    e.printStackTrace();
    Stop(""String_Node_Str"");
  }
  return false;
}",0.9203791469194312
94066,"public boolean isRegistered(String player){
  try {
    Util.Debug(""String_Node_Str"");
    if (Config.script_name.equals(Config.script_name1)) {
      if (phpBB3.checkuser(player.toLowerCase())) {
        return true;
      }
    }
 else     if (Config.script_name.equals(Config.script_name2)) {
      if (SMF1.checkuser(player.toLowerCase())) {
        return true;
      }
    }
 else     if (Config.script_name.equals(Config.script_name3)) {
      if (SMF2.checkuser(player.toLowerCase())) {
        return true;
      }
    }
 else     if (Config.script_name.equals(Config.script_name4)) {
      if (myBB1_6.checkuser(player.toLowerCase())) {
        return true;
      }
    }
 else     if (Config.script_name.equals(Config.script_name5)) {
      if (vB4_1.checkuser(player.toLowerCase())) {
        return true;
      }
    }
 else {
      Stop(""String_Node_Str"");
    }
    Util.Debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    e.printStackTrace();
    Stop(""String_Node_Str"");
  }
  return false;
}","public boolean isRegistered(String player){
  try {
    Util.Debug(""String_Node_Str"");
    boolean dupe=false;
    try {
      MySQL.connect();
    }
 catch (    ClassNotFoundException e) {
      Util.Debug(""String_Node_Str"");
      e.printStackTrace();
    }
    if (Config.script_name.equals(Config.script_name1)) {
      if (phpBB3.checkuser(player.toLowerCase())) {
        dupe=true;
      }
    }
 else     if (Config.script_name.equals(Config.script_name2)) {
      if (SMF1.checkuser(player.toLowerCase())) {
        dupe=true;
      }
    }
 else     if (Config.script_name.equals(Config.script_name3)) {
      if (SMF2.checkuser(player.toLowerCase())) {
        dupe=true;
      }
    }
 else     if (Config.script_name.equals(Config.script_name4)) {
      if (myBB1_6.checkuser(player.toLowerCase())) {
        dupe=true;
      }
    }
 else     if (Config.script_name.equals(Config.script_name5)) {
      if (vB4_1.checkuser(player.toLowerCase())) {
        dupe=true;
      }
    }
 else {
      Stop(""String_Node_Str"");
    }
    Util.Debug(""String_Node_Str"");
    MySQL.close();
    return dupe;
  }
 catch (  SQLException e) {
    e.printStackTrace();
    Stop(""String_Node_Str"");
  }
  return false;
}",0.8797496647295485
94067,"public void register(String player,String password,String email,String ipAddress) throws IOException, SQLException {
  if (Config.script_name.equals(Config.script_name1)) {
    phpBB3.adduser(player,email,password,ipAddress);
  }
 else   if (Config.script_name.equals(Config.script_name2)) {
    SMF1.adduser(player,email,password,ipAddress);
  }
 else   if (Config.script_name.equals(Config.script_name3)) {
    SMF2.adduser(player,email,password,ipAddress);
  }
 else   if (Config.script_name.equals(Config.script_name4)) {
    myBB1_6.adduser(player,email,password,ipAddress);
  }
 else   if (Config.script_name.equals(Config.script_name5)) {
    vB4_1.adduser(player,email,password,ipAddress);
  }
 else {
    Stop(""String_Node_Str"");
  }
}","public void register(String player,String password,String email,String ipAddress) throws IOException, SQLException {
  try {
    MySQL.connect();
  }
 catch (  ClassNotFoundException e) {
    Util.Debug(""String_Node_Str"");
    e.printStackTrace();
  }
  if (Config.script_name.equals(Config.script_name1)) {
    phpBB3.adduser(player,email,password,ipAddress);
  }
 else   if (Config.script_name.equals(Config.script_name2)) {
    SMF1.adduser(player,email,password,ipAddress);
  }
 else   if (Config.script_name.equals(Config.script_name3)) {
    SMF2.adduser(player,email,password,ipAddress);
  }
 else   if (Config.script_name.equals(Config.script_name4)) {
    myBB1_6.adduser(player,email,password,ipAddress);
  }
 else   if (Config.script_name.equals(Config.script_name5)) {
    vB4_1.adduser(player,email,password,ipAddress);
  }
 else {
    Stop(""String_Node_Str"");
  }
  MySQL.close();
}",0.9073170731707316
94068,"public static void adduser(String player,String email,String password,String ipAddress) throws SQLException {
  long timestamp=System.currentTimeMillis() / 1000;
  String hash=phpbb_hash(password);
  int userid;
  PreparedStatement ps;
  ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str"",1);
  ps.setString(1,player);
  ps.setString(2,player.toLowerCase());
  ps.setString(3,hash);
  ps.setString(4,email);
  ps.setString(5,""String_Node_Str"");
  ps.setString(6,""String_Node_Str"");
  ps.setString(7,""String_Node_Str"");
  ps.setString(8,""String_Node_Str"");
  ps.setString(9,""String_Node_Str"");
  ps.setLong(10,timestamp);
  ps.setString(11,""String_Node_Str"");
  ps.setLong(12,timestamp);
  ps.setString(13,""String_Node_Str"");
  ps.setString(14,""String_Node_Str"");
  ps.setString(15,""String_Node_Str"");
  ps.setString(16,""String_Node_Str"");
  ps.setString(17,ipAddress);
  ps.executeUpdate();
  userid=MySQL.countitall(Config.database_prefix + ""String_Node_Str"");
  ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str"",1);
  ps.setInt(1,2);
  ps.setInt(2,userid);
  ps.setInt(3,0);
  ps.setInt(4,0);
  ps.executeUpdate();
  ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str"",1);
  ps.setInt(1,7);
  ps.setInt(2,userid);
  ps.setInt(3,0);
  ps.setInt(4,0);
  ps.executeUpdate();
  ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str""+ userid+ ""String_Node_Str"");
  ps.executeUpdate();
  ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str""+ player+ ""String_Node_Str"");
  ps.executeUpdate();
  ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str"");
  ps.executeUpdate();
}","public static void adduser(String player,String email,String password,String ipAddress) throws SQLException {
  long timestamp=System.currentTimeMillis() / 1000;
  String hash=phpbb_hash(password);
  int userid;
  PreparedStatement ps;
  try {
    MySQL.connect();
  }
 catch (  ClassNotFoundException e) {
    Util.Debug(""String_Node_Str"");
    e.printStackTrace();
  }
  ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str"",1);
  ps.setString(1,player);
  ps.setString(2,player.toLowerCase());
  ps.setString(3,hash);
  ps.setString(4,email);
  ps.setString(5,""String_Node_Str"");
  ps.setString(6,""String_Node_Str"");
  ps.setString(7,""String_Node_Str"");
  ps.setString(8,""String_Node_Str"");
  ps.setString(9,""String_Node_Str"");
  ps.setLong(10,timestamp);
  ps.setString(11,""String_Node_Str"");
  ps.setLong(12,timestamp);
  ps.setString(13,""String_Node_Str"");
  ps.setString(14,""String_Node_Str"");
  ps.setString(15,""String_Node_Str"");
  ps.setString(16,""String_Node_Str"");
  ps.setString(17,ipAddress);
  ps.executeUpdate();
  userid=MySQL.countitall(Config.database_prefix + ""String_Node_Str"");
  ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str"",1);
  ps.setInt(1,2);
  ps.setInt(2,userid);
  ps.setInt(3,0);
  ps.setInt(4,0);
  ps.executeUpdate();
  ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str"",1);
  ps.setInt(1,7);
  ps.setInt(2,userid);
  ps.setInt(3,0);
  ps.setInt(4,0);
  ps.executeUpdate();
  ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str""+ userid+ ""String_Node_Str"");
  ps.executeUpdate();
  ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str""+ player+ ""String_Node_Str"");
  ps.executeUpdate();
  ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str"");
  ps.executeUpdate();
  MySQL.close();
}",0.9622641509433962
94069,"public Config(String config,String directory,String filename){
  template=new Configuration(new File(directory,filename));
  template.load();
  if (config.equals(""String_Node_Str"")) {
    autoupdate_enable=GetConfigBoolean(""String_Node_Str"",false);
    debug_enable=GetConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=GetConfigBoolean(""String_Node_Str"",true);
    script_name=GetConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_updatestatus=GetConfigBoolean(""String_Node_Str"",true);
    database_driver=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    database_prefix=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database;
    register_enabled=GetConfigBoolean(""String_Node_Str"",true);
    register_force=GetConfigBoolean(""String_Node_Str"",true);
    password_tries=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    password_kick=GetConfigBoolean(""String_Node_Str"",true);
    password_ban=GetConfigBoolean(""String_Node_Str"",false);
    session_time=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    session_length=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    idle_time=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    idle_length=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    idle_kick=GetConfigBoolean(""String_Node_Str"",true);
    idle_whitelist=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    idle_ticks=Util.ToTicks(Config.idle_time,Config.idle_length);
    guests_commands=GetConfigBoolean(""String_Node_Str"",true);
    guests_movement=GetConfigBoolean(""String_Node_Str"",true);
    guests_inventory=GetConfigBoolean(""String_Node_Str"",true);
    guests_drops=GetConfigBoolean(""String_Node_Str"",true);
    guests_health=GetConfigBoolean(""String_Node_Str"",true);
    guests_damage=GetConfigBoolean(""String_Node_Str"",true);
    guests_interact=GetConfigBoolean(""String_Node_Str"",true);
    guests_build=GetConfigBoolean(""String_Node_Str"",true);
    guests_chat=GetConfigBoolean(""String_Node_Str"",true);
    badcharacters_kick=GetConfigBoolean(""String_Node_Str"",true);
    badcharacters_remove=GetConfigBoolean(""String_Node_Str"",false);
    badcharacters_characters=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    geoip_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_messages_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_welcome_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_register_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_unregister_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_login_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_email_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_username_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_password_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_idle_enabled=GetConfigBoolean(""String_Node_Str"",true);
  }
 else   if (config.equals(""String_Node_Str"")) {
    Messages.AuthDB_message_welcome_guest=(String)Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_welcome_user=(String)Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_registered=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_session=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_badcharacters_renamed=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_badcharacters_kicked=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_badcharacters_whitelist=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_idle_kick=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_badcharacters_renamed=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_badcharacters_kicked=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_badcharacters_whitelist=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}","public Config(String config,String directory,String filename){
  template=new Configuration(new File(directory,filename));
  template.load();
  if (config.equals(""String_Node_Str"")) {
    autoupdate_enable=GetConfigBoolean(""String_Node_Str"",false);
    debug_enable=GetConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=GetConfigBoolean(""String_Node_Str"",true);
    script_name=GetConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=GetConfigBoolean(""String_Node_Str"",true);
    database_driver=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    database_prefix=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database;
    register_enabled=GetConfigBoolean(""String_Node_Str"",true);
    register_force=GetConfigBoolean(""String_Node_Str"",true);
    password_tries=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    password_kick=GetConfigBoolean(""String_Node_Str"",true);
    password_ban=GetConfigBoolean(""String_Node_Str"",false);
    session_time=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    session_length=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    idle_time=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    idle_length=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    idle_kick=GetConfigBoolean(""String_Node_Str"",true);
    idle_whitelist=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    idle_ticks=Util.ToTicks(Config.idle_time,Config.idle_length);
    guests_commands=GetConfigBoolean(""String_Node_Str"",true);
    guests_movement=GetConfigBoolean(""String_Node_Str"",true);
    guests_inventory=GetConfigBoolean(""String_Node_Str"",true);
    guests_drops=GetConfigBoolean(""String_Node_Str"",true);
    guests_health=GetConfigBoolean(""String_Node_Str"",true);
    guests_damage=GetConfigBoolean(""String_Node_Str"",true);
    guests_interact=GetConfigBoolean(""String_Node_Str"",true);
    guests_build=GetConfigBoolean(""String_Node_Str"",true);
    guests_chat=GetConfigBoolean(""String_Node_Str"",true);
    badcharacters_kick=GetConfigBoolean(""String_Node_Str"",true);
    badcharacters_remove=GetConfigBoolean(""String_Node_Str"",false);
    badcharacters_characters=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    geoip_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=GetConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_messages_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_welcome_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_register_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_unregister_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_login_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_email_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_username_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_password_enabled=GetConfigBoolean(""String_Node_Str"",true);
    CraftIRC_messages_idle_enabled=GetConfigBoolean(""String_Node_Str"",true);
  }
 else   if (config.equals(""String_Node_Str"")) {
    Messages.AuthDB_message_welcome_guest=(String)Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_welcome_user=(String)Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_registered=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_session=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_badcharacters_renamed=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_badcharacters_kicked=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_badcharacters_whitelist=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_idle_kick=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_badcharacters_renamed=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_badcharacters_kicked=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_badcharacters_whitelist=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.GetConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9951607557176004
94070,"public static void PostInfo(String b407f35cb00b96936a585c4191fc267a,String f13a437cb9b1ac68b49d597ed7c4bfde,String cafd6e81e3a478a7fe0b40e7502bf1f) throws IOException {
  String e5544ab05d8c25c1a5da5cd59144fb=Util.md5(b407f35cb00b96936a585c4191fc267a + f13a437cb9b1ac68b49d597ed7c4bfde + cafd6e81e3a478a7fe0b40e7502bf1f);
  String data=URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + URLEncoder.encode(b407f35cb00b96936a585c4191fc267a,""String_Node_Str"");
  data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(f13a437cb9b1ac68b49d597ed7c4bfde,""String_Node_Str"");
  data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(cafd6e81e3a478a7fe0b40e7502bf1f,""String_Node_Str"");
  data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(e5544ab05d8c25c1a5da5cd59144fb,""String_Node_Str"");
  URL url=new URL(""String_Node_Str"");
  URLConnection conn=url.openConnection();
  conn.setRequestProperty(""String_Node_Str"",e5544ab05d8c25c1a5da5cd59144fb);
  conn.setDoOutput(true);
  OutputStreamWriter wr=new OutputStreamWriter(conn.getOutputStream());
  wr.write(data);
  wr.flush();
  BufferedReader rd=new BufferedReader(new InputStreamReader(conn.getInputStream()));
  String line;
  while ((line=rd.readLine()) != null) {
    System.out.println(line);
  }
}","public static void PostInfo(String b407f35cb00b96936a585c4191fc267a,String f13a437cb9b1ac68b49d597ed7c4bfde,String cafd6e81e3a478a7fe0b40e7502bf1f) throws IOException {
  String e5544ab05d8c25c1a5da5cd59144fb=Util.md5(b407f35cb00b96936a585c4191fc267a + f13a437cb9b1ac68b49d597ed7c4bfde + cafd6e81e3a478a7fe0b40e7502bf1f);
  String data=URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + URLEncoder.encode(b407f35cb00b96936a585c4191fc267a,""String_Node_Str"");
  data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(f13a437cb9b1ac68b49d597ed7c4bfde,""String_Node_Str"");
  data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(cafd6e81e3a478a7fe0b40e7502bf1f,""String_Node_Str"");
  data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(e5544ab05d8c25c1a5da5cd59144fb,""String_Node_Str"");
  URL url=new URL(""String_Node_Str"");
  URLConnection conn=url.openConnection();
  conn.setRequestProperty(""String_Node_Str"",e5544ab05d8c25c1a5da5cd59144fb);
  conn.setDoOutput(true);
  OutputStreamWriter wr=new OutputStreamWriter(conn.getOutputStream());
  wr.write(data);
  wr.flush();
}",0.9363702096890816
94071,"public static String getfromtable(String table,String column1,String column2,String value) throws SQLException {
  String query=""String_Node_Str"" + column1 + ""String_Node_Str""+ table+ ""String_Node_Str""+ column2+ ""String_Node_Str""+ value+ ""String_Node_Str"";
  Statement stmt=mysql.createStatement();
  ResultSet rs=stmt.executeQuery(query);
  if (rs.next()) {
    return rs.getString(1);
  }
 else {
    return ""String_Node_Str"";
  }
}","public static String getfromtable(String table,String column1,String column2,String value) throws SQLException {
  try {
    MySQL.connect();
  }
 catch (  ClassNotFoundException e) {
    Util.Debug(""String_Node_Str"");
    e.printStackTrace();
  }
  String query=""String_Node_Str"" + column1 + ""String_Node_Str""+ table+ ""String_Node_Str""+ column2+ ""String_Node_Str""+ value+ ""String_Node_Str"";
  Statement stmt=mysql.createStatement();
  ResultSet rs=stmt.executeQuery(query);
  String dupe=""String_Node_Str"";
  if (rs.next()) {
    dupe=rs.getString(1);
  }
  close();
  return dupe;
}",0.7583497053045186
94072,"public static void connect() throws ClassNotFoundException, SQLException {
  Class.forName(Util.ToDriver(Config.database_driver));
  if (Config.debug_enable) {
    Util.Debug(""String_Node_Str"");
    Util.Debug(""String_Node_Str"" + Config.dbDb);
    Util.Debug(""String_Node_Str"" + Config.database_driver);
    Util.Debug(""String_Node_Str"" + Config.database_username);
    Util.Debug(""String_Node_Str"" + Config.database_password);
    Util.Debug(""String_Node_Str"" + Config.database_host);
    Util.Debug(""String_Node_Str"" + Config.database_port);
    Util.Debug(""String_Node_Str"" + Config.database_database);
    Util.Debug(""String_Node_Str"" + Config.database_prefix);
  }
  if (Config.debug_enable)   Util.Debug(""String_Node_Str"" + Config.dbDb + ""String_Node_Str""+ Config.database_username+ ""String_Node_Str""+ Config.database_password);
  mysql=DriverManager.getConnection(Config.dbDb,Config.database_username,Config.database_password);
  mysql.setAutoCommit(true);
  PreparedStatement ps=null;
  if (Config.script_name.equals(Config.script_name1)) {
    ps=(PreparedStatement)mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (Config.script_name.equals(Config.script_name2)) {
    ps=(PreparedStatement)mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (Config.script_name.equals(Config.script_name3)) {
    ps=(PreparedStatement)mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (Config.script_name.equals(Config.script_name4)) {
    ps=(PreparedStatement)mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (Config.script_name.equals(Config.script_name5)) {
    ps=(PreparedStatement)mysql.prepareStatement(""String_Node_Str"" + Config.database_prefix + ""String_Node_Str""+ ""String_Node_Str"");
  }
  ResultSet rs=ps.executeQuery();
  if (rs.next()) {
    Util.Log(""String_Node_Str"",rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
  }
}","public static void connect() throws SQLException, ClassNotFoundException {
  Class.forName(Util.ToDriver(Config.database_driver));
  if (Config.debug_enable) {
    Util.Debug(""String_Node_Str"");
    Util.Debug(""String_Node_Str"" + Config.dbDb);
    Util.Debug(""String_Node_Str"" + Config.database_driver);
    Util.Debug(""String_Node_Str"" + Config.database_username);
    Util.Debug(""String_Node_Str"" + Config.database_password);
    Util.Debug(""String_Node_Str"" + Config.database_host);
    Util.Debug(""String_Node_Str"" + Config.database_port);
    Util.Debug(""String_Node_Str"" + Config.database_database);
    Util.Debug(""String_Node_Str"" + Config.database_prefix);
  }
  if (Config.debug_enable)   Util.Debug(""String_Node_Str"" + Config.dbDb + ""String_Node_Str""+ Config.database_username+ ""String_Node_Str""+ Config.database_password);
  mysql=DriverManager.getConnection(Config.dbDb + ""String_Node_Str"" + Config.database_username+ ""String_Node_Str""+ Config.database_password);
}",0.5870967741935483
94073,"public static int countitall(String table) throws SQLException {
  String query=""String_Node_Str"" + table + ""String_Node_Str"";
  Statement stmt=mysql.createStatement();
  ResultSet rs=stmt.executeQuery(query);
  if (rs.next()) {
    return rs.getInt(1);
  }
 else {
    return 0;
  }
}","public static int countitall(String table) throws SQLException {
  String query=""String_Node_Str"" + table + ""String_Node_Str"";
  Statement stmt=mysql.createStatement();
  ResultSet rs=stmt.executeQuery(query);
  int dupe=0;
  if (rs.next()) {
    dupe=rs.getInt(1);
  }
  return dupe;
}",0.8861646234676007
94074,"public void storeInventory(String player,ItemStack[] inventory) throws IOException {
  File inv=new File(getDataFolder(),player + ""String_Node_Str"");
  if (inv.exists())   return;
  inv.createNewFile();
  BufferedWriter bw=new BufferedWriter(new FileWriter(inv));
  for (short i=0; i < inventory.length; i=(short)(i + 1)) {
    bw.write(inventory[i].getTypeId() + ""String_Node_Str"" + inventory[i].getAmount()+ ""String_Node_Str""+ (inventory[i].getData() == null ? ""String_Node_Str"" : Byte.valueOf(inventory[i].getData().getData()))+ ""String_Node_Str""+ inventory[i].getDurability());
    bw.newLine();
  }
  bw.close();
  this.inventories.put(player.toLowerCase(),inventory);
}","public void storeInventory(String player,ItemStack[] inventory) throws IOException {
  File inv=new File(getDataFolder(),player + ""String_Node_Str"");
  if (inv.exists())   return;
  inv.createNewFile();
  BufferedWriter bw=new BufferedWriter(new FileWriter(inv));
  for (short i=0; i < inventory.length; i=(short)(i + 1)) {
    bw.write(inventory[i].getTypeId() + ""String_Node_Str"" + inventory[i].getAmount()+ ""String_Node_Str""+ (inventory[i].getData() == null ? ""String_Node_Str"" : Byte.valueOf(inventory[i].getData().getData()))+ ""String_Node_Str""+ inventory[i].getDurability());
    bw.newLine();
  }
  bw.close();
}",0.9567233384853168
94075,"public ItemStack[] getInventory(String player){
  File f=new File(getDataFolder(),player + ""String_Node_Str"");
  if (inventories.containsKey(player.toLowerCase())) {
    if ((f.exists()) && (!f.delete()))     Util.Log(""String_Node_Str"",""String_Node_Str"" + player + ""String_Node_Str"");
    return (ItemStack[])inventories.remove(player.toLowerCase());
  }
  if (f.exists()) {
    ItemStack[] inv=new ItemStack[36];
    try {
      Scanner s=new Scanner(f);
      short i=0;
      while (s.hasNextLine()) {
        String line=s.nextLine();
        String[] split=line.split(""String_Node_Str"");
        if (split.length == 4) {
          inv[i]=new ItemStack(Integer.valueOf(split[0]).intValue(),Integer.valueOf(split[1]).intValue(),Short.valueOf(split[3]).shortValue(),split[2].length() == 0 ? null : Byte.valueOf(split[2]));
          i=(short)(i + 1);
        }
      }
      s.close();
      if (!f.delete())       Util.Log(""String_Node_Str"",""String_Node_Str"" + player + ""String_Node_Str"");
    }
 catch (    IOException e) {
      e.printStackTrace();
      Stop(""String_Node_Str"");
    }
    return inv;
  }
  return null;
}","public ItemStack[] getInventory(String player){
  File f=new File(getDataFolder(),player + ""String_Node_Str"");
  if (f.exists()) {
    ItemStack[] inv=new ItemStack[36];
    try {
      Scanner s=new Scanner(f);
      short i=0;
      while (s.hasNextLine()) {
        String line=s.nextLine();
        String[] split=line.split(""String_Node_Str"");
        if (split.length == 4) {
          int type=Integer.valueOf(split[0]).intValue();
          inv[i]=new ItemStack(type,Integer.valueOf(split[1]).intValue());
          short dur=Short.valueOf(split[3]).shortValue();
          if (dur > 0)           inv[i].setDurability(dur);
          byte dd;
          if (split[2].length() == 0)           dd=0;
 else           dd=Byte.valueOf(split[2]).byteValue();
          Material mat=Material.getMaterial(type);
          if (mat == null)           inv[i].setData(new MaterialData(type,dd));
 else           inv[i].setData(mat.getNewData(dd));
          i=(short)(i + 1);
        }
      }
      s.close();
      if (!f.delete())       Util.Log(""String_Node_Str"",""String_Node_Str"" + player + ""String_Node_Str"");
    }
 catch (    IOException e) {
      Util.Log(""String_Node_Str"",""String_Node_Str"");
      e.printStackTrace();
    }
    return inv;
  }
  return null;
}",0.6861435726210351
94076,"public void onPlayerQuit(PlayerEvent event){
  Player player=event.getPlayer();
  Messages.SendMessage(""String_Node_Str"",player,null);
  try {
    if (this.plugin.IdleTask(""String_Node_Str"",player,""String_Node_Str"")) {
      int TaskID=Integer.parseInt(this.plugin.IdleGetTaskID(player));
      if (Config.debug_enable)       Util.Debug(player.getName() + ""String_Node_Str"" + TaskID);
      if (this.plugin.IdleTask(""String_Node_Str"",player,""String_Node_Str"")) {
        if (Config.debug_enable)         Util.Debug(player.getName() + ""String_Node_Str"");
        plugin.getServer().getScheduler().cancelTask(TaskID);
      }
 else {
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      }
    }
 else {
      if (Config.debug_enable)       Util.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
    this.plugin.updateDb();
  }
 catch (  IOException e) {
    if (Config.debug_enable)     Util.Debug(""String_Node_Str"");
    e.printStackTrace();
  }
  ItemStack[] inv=this.plugin.getInventory(player.getName());
  if ((inv != null) && (!AuthDB.isAuthorized(player.getEntityId()))) {
  }
}","public void onPlayerQuit(PlayerEvent event){
  Player player=event.getPlayer();
  Messages.SendMessage(""String_Node_Str"",player,null);
  try {
    if (this.plugin.IdleTask(""String_Node_Str"",player,""String_Node_Str"")) {
      int TaskID=Integer.parseInt(this.plugin.IdleGetTaskID(player));
      if (Config.debug_enable)       Util.Debug(player.getName() + ""String_Node_Str"" + TaskID);
      if (this.plugin.IdleTask(""String_Node_Str"",player,""String_Node_Str"")) {
        if (Config.debug_enable)         Util.Debug(player.getName() + ""String_Node_Str"");
        plugin.getServer().getScheduler().cancelTask(TaskID);
      }
 else {
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      }
    }
 else {
      if (Config.debug_enable)       Util.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
    this.plugin.updateDb();
  }
 catch (  IOException e) {
    if (Config.debug_enable)     Util.Debug(""String_Node_Str"");
    e.printStackTrace();
  }
  this.plugin.unauthorize(player.getEntityId());
}",0.9199288256227758
94077,"public void onPlayerJoin(PlayerEvent event){
  final Player player=event.getPlayer();
  try {
    if (Config.session_length != ""String_Node_Str"" || Config.session_length != null) {
      long timestamp=System.currentTimeMillis() / 1000;
      if (this.plugin.IdleTask(""String_Node_Str"",player,""String_Node_Str"") == true) {
        long storedtime=Long.parseLong(this.plugin.db2.get(Encryption.md5(player.getName() + Util.GetIP(player))));
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
        long timedifference=timestamp - storedtime;
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + timedifference);
        if (timedifference > Config.session_seconds) {
          sessionallow=false;
        }
 else {
          sessionallow=true;
        }
      }
 else {
        sessionallow=false;
      }
    }
    try {
      if (Config.idle_kick == true && Util.CheckWhitelist(""String_Node_Str"",player) == false && sessionallow == false) {
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + Config.idle_ticks);
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            try {
              CheckIdle(player);
            }
 catch (            IOException e) {
              Util.Log(""String_Node_Str"",""String_Node_Str"");
              e.printStackTrace();
            }
          }
        }
,Config.idle_ticks);
        if (this.plugin.IdleTask(""String_Node_Str"",player,""String_Node_Str"" + Schedule))         if (Config.debug_enable)         Util.Debug(player.getName() + ""String_Node_Str"");
        this.plugin.updateDb();
      }
      if (Config.custom_enabled)       if (Config.custom_encryption == null) {
        player.sendMessage(""String_Node_Str"");
      }
      if (sessionallow) {
        Messages.SendMessage(""String_Node_Str"",player,null);
        this.plugin.authorize(event.getPlayer().getEntityId());
      }
 else       if (this.plugin.isRegistered(player.getName())) {
        this.plugin.storeInventory(player.getName(),player.getInventory().getContents());
        player.getInventory().clear();
        if (Util.ToLoginMethod(Config.login_method).equals(""String_Node_Str""))         player.sendMessage(""String_Node_Str"" + player.getName());
 else         Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else       if (Config.register_force) {
        this.plugin.storeInventory(player.getName(),player.getInventory().getContents());
        player.getInventory().clear();
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else       if (!Config.register_force) {
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else {
        this.plugin.authorize(event.getPlayer().getEntityId());
      }
    }
 catch (    IOException e) {
      Util.Log(""String_Node_Str"",""String_Node_Str"" + AuthDB.pluginname + ""String_Node_Str"");
      player.kickPlayer(""String_Node_Str"");
      e.printStackTrace();
      player.sendMessage(Color.red + ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void onPlayerJoin(PlayerEvent event){
  final Player player=event.getPlayer();
  try {
    if (Config.session_length != ""String_Node_Str"" || Config.session_length != null) {
      long timestamp=System.currentTimeMillis() / 1000;
      if (this.plugin.IdleTask(""String_Node_Str"",player,""String_Node_Str"") == true) {
        long storedtime=Long.parseLong(this.plugin.db2.get(Encryption.md5(player.getName() + Util.GetIP(player))));
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
        long timedifference=timestamp - storedtime;
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + timedifference);
        if (timedifference > Config.session_seconds) {
          sessionallow=false;
        }
 else {
          sessionallow=true;
        }
      }
 else {
        sessionallow=false;
      }
    }
    try {
      if (Config.idle_kick == true && Util.CheckWhitelist(""String_Node_Str"",player) == false && sessionallow == false) {
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + Config.idle_ticks);
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            try {
              CheckIdle(player);
            }
 catch (            IOException e) {
              Util.Log(""String_Node_Str"",""String_Node_Str"");
              e.printStackTrace();
            }
          }
        }
,Config.idle_ticks);
        if (this.plugin.IdleTask(""String_Node_Str"",player,""String_Node_Str"" + Schedule))         if (Config.debug_enable)         Util.Debug(player.getName() + ""String_Node_Str"");
        this.plugin.updateDb();
      }
      if (Config.custom_enabled)       if (Config.custom_encryption == null) {
        player.sendMessage(""String_Node_Str"");
      }
      if (sessionallow) {
        Messages.SendMessage(""String_Node_Str"",player,null);
        this.plugin.authorize(event.getPlayer().getEntityId());
      }
 else       if (this.plugin.isRegistered(player.getName())) {
        this.plugin.storeInventory(player.getName(),player.getInventory().getContents());
        player.getInventory().clear();
        if (Util.ToLoginMethod(Config.login_method).equals(""String_Node_Str""))         player.sendMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
 else {
          Messages.SendMessage(""String_Node_Str"",player,null);
        }
      }
 else       if (Config.register_force) {
        this.plugin.storeInventory(player.getName(),player.getInventory().getContents());
        player.getInventory().clear();
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else       if (!Config.register_force) {
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else {
        this.plugin.authorize(event.getPlayer().getEntityId());
      }
    }
 catch (    IOException e) {
      Util.Log(""String_Node_Str"",""String_Node_Str"" + AuthDB.pluginname + ""String_Node_Str"");
      player.kickPlayer(""String_Node_Str"");
      e.printStackTrace();
      player.sendMessage(Color.red + ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9947073474470736
94078,"public void onPlayerChat(PlayerChatEvent event){
  if (!AuthDB.isAuthorized(event.getPlayer().getEntityId())) {
    if (Util.ToLoginMethod(Config.login_method).equals(""String_Node_Str"")) {
      String[] split=event.getMessage().split(""String_Node_Str"");
      Player player=event.getPlayer();
      if (!this.plugin.isRegistered(player.getName()))       Messages.SendMessage(""String_Node_Str"",player,null);
 else       if (AuthDB.isAuthorized(player.getEntityId())) {
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else       if (split.length > 1) {
        player.sendMessage(""String_Node_Str"" + player.getName());
      }
 else       if (this.plugin.checkPassword(player.getName(),split[0])) {
        ItemStack[] inv=this.plugin.getInventory(player.getName());
        if (inv != null) {
          player.getInventory().setContents(inv);
        }
        this.plugin.authorize(player.getEntityId());
        long timestamp=System.currentTimeMillis() / 1000;
        this.plugin.db3.put(Encryption.md5(player.getName()),""String_Node_Str"");
        this.plugin.db2.put(Encryption.md5(player.getName() + Util.GetIP(player)),""String_Node_Str"" + timestamp);
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + player.getName());
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else       if (Config.password_kick) {
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
      if (Config.debug_enable)       Util.Debug(player.getName() + ""String_Node_Str"");
      event.setMessage(""String_Node_Str"");
      event.setCancelled(true);
    }
 else     if (!CheckGuest(event.getPlayer(),Config.guests_chat)) {
      event.setCancelled(true);
    }
  }
}","public void onPlayerChat(PlayerChatEvent event){
  if (!AuthDB.isAuthorized(event.getPlayer().getEntityId())) {
    if (Util.ToLoginMethod(Config.login_method).equals(""String_Node_Str"")) {
      String[] split=event.getMessage().split(""String_Node_Str"");
      Player player=event.getPlayer();
      if (this.plugin.isRegistered(player.getName())) {
        if (this.plugin.isRegistered(player.getName())) {
          if (AuthDB.isAuthorized(player.getEntityId())) {
            Messages.SendMessage(""String_Node_Str"",player,null);
          }
 else           if (split.length > 1) {
            player.sendMessage(""String_Node_Str"" + player.getName());
          }
 else           if (this.plugin.checkPassword(player.getName(),split[0])) {
            ItemStack[] inv=this.plugin.getInventory(player.getName());
            if (inv != null) {
              player.getInventory().setContents(inv);
            }
            this.plugin.authorize(player.getEntityId());
            long timestamp=System.currentTimeMillis() / 1000;
            this.plugin.db3.put(Encryption.md5(player.getName()),""String_Node_Str"");
            this.plugin.db2.put(Encryption.md5(player.getName() + Util.GetIP(player)),""String_Node_Str"" + timestamp);
            if (Config.debug_enable)             Util.Debug(""String_Node_Str"" + player.getName());
            Messages.SendMessage(""String_Node_Str"",player,null);
          }
 else           if (Config.password_kick) {
            Messages.SendMessage(""String_Node_Str"",player,null);
          }
          if (Config.debug_enable)           Util.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(""String_Node_Str"");
          event.setCancelled(true);
        }
      }
    }
 else     if (!CheckGuest(event.getPlayer(),Config.guests_chat)) {
      event.setCancelled(true);
    }
  }
}",0.931131019036954
94079,"public void onEnable(){
  Server=getServer();
  Plugin[] plugins=Server.getPluginManager().getPlugins();
  int counter=0;
  String Plugins=""String_Node_Str"";
  while (plugins.length > counter) {
    Plugins+=plugins[counter].getDescription().getName() + ""String_Node_Str"" + plugins[counter].getDescription().getVersion();
    if (plugins.length != (counter + 1))     Plugins+=""String_Node_Str"";
    counter++;
  }
  Config TheMessages=new Config(""String_Node_Str"",""String_Node_Str"" + pluginname + ""String_Node_Str"",""String_Node_Str"");
  if (null == TheMessages.GetConfigString(""String_Node_Str"",""String_Node_Str"")) {
    Util.Log(""String_Node_Str"",""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(((Plugin)(this)));
    return;
  }
  Config TheConfig=new Config(""String_Node_Str"",""String_Node_Str"" + pluginname + ""String_Node_Str"",""String_Node_Str"");
  if (null == getConfiguration().getKeys(""String_Node_Str"")) {
    Util.Log(""String_Node_Str"",""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(((Plugin)(this)));
    return;
  }
  final Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if ((checkCraftIRC != null) && (Config.CraftIRC_enabled == true)) {
    craftircHandle=((CraftIRC)checkCraftIRC);
    Util.Log(""String_Node_Str"",""String_Node_Str"" + checkCraftIRC.getDescription().getName());
    this.getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
      @Override public void run(){
        if (checkCraftIRC.isEnabled()) {
          zCraftIRC.SendMessage(""String_Node_Str"",null);
        }
      }
    }
,100);
  }
  String thescript=""String_Node_Str"", theversion=""String_Node_Str"";
  if (Config.custom_enabled) {
    thescript=""String_Node_Str"";
  }
 else {
    thescript=Config.script_name;
    theversion=Config.script_version;
  }
  String online=""String_Node_Str"" + getServer().getOnlinePlayers().length;
  String max=""String_Node_Str"" + getServer().getMaxPlayers();
  if (Config.usagestats_enabled) {
    try {
      Util.PostInfo(getServer().getName(),getServer().getVersion(),pluginversion,System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),thescript,theversion,Plugins,online,max,Server.getPort());
    }
 catch (    IOException e1) {
      if (Config.debug_enable)       Util.Debug(""String_Node_Str"");
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,this.playerListener,Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_INTERACT,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGED,this.entityListener,Event.Priority.Normal,this);
  MySQL.connect();
  try {
    Util.CheckScript(""String_Node_Str"",Config.script_name,null,null,null,null);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  Util.Log(""String_Node_Str"",pluginname + ""String_Node_Str"" + pluginversion+ ""String_Node_Str"");
  if (Config.debug_enable)   Util.Log(""String_Node_Str"",""String_Node_Str"");
  if (Config.custom_enabled)   if (Config.custom_encryption == null)   Util.Log(""String_Node_Str"",""String_Node_Str"");
  Util.Log(""String_Node_Str"",pluginname + ""String_Node_Str"");
}","public void onEnable(){
  Server=getServer();
  Plugin[] plugins=Server.getPluginManager().getPlugins();
  int counter=0;
  String Plugins=""String_Node_Str"";
  while (plugins.length > counter) {
    Plugins+=plugins[counter].getDescription().getName() + ""String_Node_Str"" + plugins[counter].getDescription().getVersion();
    if (plugins.length != (counter + 1))     Plugins+=""String_Node_Str"";
    counter++;
  }
  Config TheMessages=new Config(""String_Node_Str"",""String_Node_Str"" + pluginname + ""String_Node_Str"",""String_Node_Str"");
  if (null == TheMessages.GetConfigString(""String_Node_Str"",""String_Node_Str"")) {
    Util.Log(""String_Node_Str"",""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(((Plugin)(this)));
    return;
  }
  Config TheConfig=new Config(""String_Node_Str"",""String_Node_Str"" + pluginname + ""String_Node_Str"",""String_Node_Str"");
  if (null == getConfiguration().getKeys(""String_Node_Str"")) {
    Util.Log(""String_Node_Str"",""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(((Plugin)(this)));
    return;
  }
  final Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if ((checkCraftIRC != null) && (Config.CraftIRC_enabled == true)) {
    craftircHandle=((CraftIRC)checkCraftIRC);
    Util.Log(""String_Node_Str"",""String_Node_Str"" + checkCraftIRC.getDescription().getName());
    this.getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
      @Override public void run(){
        if (checkCraftIRC.isEnabled()) {
          zCraftIRC.SendMessage(""String_Node_Str"",null);
        }
      }
    }
,100);
  }
  String thescript=""String_Node_Str"", theversion=""String_Node_Str"";
  if (Config.custom_enabled) {
    thescript=""String_Node_Str"";
  }
 else {
    thescript=Config.script_name;
    theversion=Config.script_version;
  }
  String online=""String_Node_Str"" + getServer().getOnlinePlayers().length;
  String max=""String_Node_Str"" + getServer().getMaxPlayers();
  if (Config.usagestats_enabled) {
    try {
      Util.PostInfo(getServer().getName(),getServer().getVersion(),pluginversion,System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),thescript,theversion,Plugins,online,max,Server.getPort());
    }
 catch (    IOException e1) {
      if (Config.debug_enable)       Util.Debug(""String_Node_Str"");
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,this.playerListener,Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_INTERACT,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGED,this.entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.entityListener,Event.Priority.Normal,this);
  MySQL.connect();
  try {
    Util.CheckScript(""String_Node_Str"",Config.script_name,null,null,null,null);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  Util.Log(""String_Node_Str"",pluginname + ""String_Node_Str"" + pluginversion+ ""String_Node_Str"");
  if (Config.debug_enable)   Util.Log(""String_Node_Str"",""String_Node_Str"");
  if (Config.custom_enabled)   if (Config.custom_encryption == null)   Util.Log(""String_Node_Str"",""String_Node_Str"");
  Util.Log(""String_Node_Str"",pluginname + ""String_Node_Str"");
}",0.9892968120612268
94080,"public void onEntityTarget(EntityTargetEvent event){
  if (((event.getEntity() instanceof Player)) && AuthDB.isAuthorized(event.getEntity().getEntityId()) == false)   event.setCancelled(true);
}","public void onEntityTarget(EntityTargetEvent event){
  if (((event.getEntity() instanceof Player)) && AuthDB.isAuthorized(event.getEntity().getEntityId()) == false)   event.setCancelled(true);
 else   if (((event.getEntity() instanceof Monster)) && (event.getTarget() instanceof Player) && AuthDB.isAuthorized(event.getTarget().getEntityId()) == false)   event.setCancelled(true);
}",0.6736111111111112
94081,"public void onPlayerCommandPreprocess(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equals(""String_Node_Str"")) {
    if (!this.plugin.isRegistered(player.getName()))     Messages.SendMessage(""String_Node_Str"",player,null);
 else     if (AuthDB.isAuthorized(player.getEntityId())) {
      Messages.SendMessage(""String_Node_Str"",player,null);
    }
 else     if (split.length == 3) {
      if (this.plugin.checkPassword(split[1],split[2])) {
        ItemStack[] inv=this.plugin.getInventory(player.getName());
        if (inv != null) {
          player.getInventory().setContents(inv);
        }
        this.plugin.authorize(player.getEntityId());
        long timestamp=System.currentTimeMillis() / 1000;
        this.plugin.db2.put(Encryption.md5(player.getName() + Util.GetIP(player)),""String_Node_Str"" + timestamp);
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + player.getName());
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else       if (Config.password_kick) {
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
    }
 else     if (split.length < 2) {
      Messages.SendMessage(""String_Node_Str"",player,null);
    }
 else     if (this.plugin.checkPassword(player.getName(),split[1])) {
      ItemStack[] inv=this.plugin.getInventory(player.getName());
      if (inv != null) {
        player.getInventory().setContents(inv);
      }
      this.plugin.authorize(player.getEntityId());
      long timestamp=System.currentTimeMillis() / 1000;
      this.plugin.db2.put(Encryption.md5(player.getName() + Util.GetIP(player)),""String_Node_Str"" + timestamp);
      if (Config.debug_enable)       Util.Debug(""String_Node_Str"" + player.getName());
      Messages.SendMessage(""String_Node_Str"",player,null);
    }
 else     if (Config.password_kick) {
      Messages.SendMessage(""String_Node_Str"",player,null);
    }
    if (Config.debug_enable)     Util.Debug(player.getName() + ""String_Node_Str"");
    event.setMessage(""String_Node_Str"");
    event.setCancelled(true);
  }
 else   if (split[0].equals(""String_Node_Str"")) {
    if (!Config.register_enabled)     Messages.SendMessage(""String_Node_Str"",player,null);
 else     if (this.plugin.isRegistered(player.getName()))     Messages.SendMessage(""String_Node_Str"",player,null);
 else     if (split.length < 2) {
      Messages.SendMessage(""String_Node_Str"",player,null);
    }
 else     if (split.length < 3)     Messages.SendMessage(""String_Node_Str"",player,null);
 else     if ((split.length >= 3) && (!this.plugin.checkEmail(split[2])))     Messages.SendMessage(""String_Node_Str"",player,null);
 else {
      try {
        if (split.length >= 3)         this.plugin.register(player.getName(),split[1],split[2],Util.GetIP(player));
 else         this.plugin.register(player.getName(),split[1],Util.GetIP(player));
        ItemStack[] inv=this.plugin.getInventory(player.getName());
        if (inv != null)         player.getInventory().setContents(inv);
        Messages.SendMessage(""String_Node_Str"",player,null);
        this.plugin.authorize(player.getEntityId());
      }
 catch (      IOException e) {
        Messages.SendMessage(""String_Node_Str"",player,null);
        e.printStackTrace();
      }
catch (      SQLException e) {
        Messages.SendMessage(""String_Node_Str"",player,null);
        e.printStackTrace();
      }
    }
    if (Config.debug_enable)     Util.Debug(player.getName() + ""String_Node_Str"");
    event.setMessage(""String_Node_Str"");
    event.setCancelled(true);
  }
 else   if (!AuthDB.isAuthorized(player.getEntityId())) {
    event.setMessage(""String_Node_Str"");
    event.setCancelled(true);
  }
}","public void onPlayerCommandPreprocess(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equals(""String_Node_Str"")) {
    if (!this.plugin.isRegistered(player.getName()))     Messages.SendMessage(""String_Node_Str"",player,null);
 else     if (AuthDB.isAuthorized(player.getEntityId())) {
      Messages.SendMessage(""String_Node_Str"",player,null);
    }
 else     if (split.length == 3) {
      if (this.plugin.checkPassword(split[1],split[2])) {
        ItemStack[] inv=this.plugin.getInventory(player.getName());
        if (inv != null) {
          player.getInventory().setContents(inv);
        }
        this.plugin.authorize(player.getEntityId());
        long timestamp=System.currentTimeMillis() / 1000;
        this.plugin.db2.put(Encryption.md5(player.getName() + Util.GetIP(player)),""String_Node_Str"" + timestamp);
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + player.getName());
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else       if (Config.password_kick) {
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
    }
 else     if (split.length < 2) {
      Messages.SendMessage(""String_Node_Str"",player,null);
    }
 else     if (this.plugin.checkPassword(player.getName(),split[1])) {
      ItemStack[] inv=this.plugin.getInventory(player.getName());
      if (inv != null) {
        player.getInventory().setContents(inv);
      }
      this.plugin.authorize(player.getEntityId());
      long timestamp=System.currentTimeMillis() / 1000;
      this.plugin.db2.put(Encryption.md5(player.getName() + Util.GetIP(player)),""String_Node_Str"" + timestamp);
      if (Config.debug_enable)       Util.Debug(""String_Node_Str"" + player.getName());
      Messages.SendMessage(""String_Node_Str"",player,null);
    }
 else     if (Config.password_kick) {
      Messages.SendMessage(""String_Node_Str"",player,null);
    }
    if (Config.debug_enable)     Util.Debug(player.getName() + ""String_Node_Str"");
    event.setMessage(""String_Node_Str"");
    event.setCancelled(true);
  }
 else   if (split[0].equals(""String_Node_Str"")) {
    if (!Config.register_enabled)     Messages.SendMessage(""String_Node_Str"",player,null);
 else     if (this.plugin.isRegistered(player.getName()))     Messages.SendMessage(""String_Node_Str"",player,null);
 else     if (split.length < 2) {
      Messages.SendMessage(""String_Node_Str"",player,null);
    }
 else     if (split.length < 3)     Messages.SendMessage(""String_Node_Str"",player,null);
 else     if ((split.length >= 3) && (!this.plugin.checkEmail(split[2])))     Messages.SendMessage(""String_Node_Str"",player,null);
 else {
      try {
        if (split.length >= 3)         this.plugin.register(player.getName(),split[1],split[2],Util.GetIP(player));
 else         this.plugin.register(player.getName(),split[1],Util.GetIP(player));
        ItemStack[] inv=this.plugin.getInventory(player.getName());
        if (inv != null)         player.getInventory().setContents(inv);
        long timestamp=System.currentTimeMillis() / 1000;
        this.plugin.db2.put(Encryption.md5(player.getName() + Util.GetIP(player)),""String_Node_Str"" + timestamp);
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + player.getName());
        Messages.SendMessage(""String_Node_Str"",player,null);
        this.plugin.authorize(player.getEntityId());
      }
 catch (      IOException e) {
        Messages.SendMessage(""String_Node_Str"",player,null);
        e.printStackTrace();
      }
catch (      SQLException e) {
        Messages.SendMessage(""String_Node_Str"",player,null);
        e.printStackTrace();
      }
    }
    if (Config.debug_enable)     Util.Debug(player.getName() + ""String_Node_Str"");
    event.setMessage(""String_Node_Str"");
    event.setCancelled(true);
  }
 else   if (!AuthDB.isAuthorized(player.getEntityId())) {
    event.setMessage(""String_Node_Str"");
    event.setCancelled(true);
  }
}",0.9660776473623114
94082,"public void onPlayerJoin(PlayerEvent event){
  final Player player=event.getPlayer();
  try {
    if (Config.session_length != ""String_Node_Str"" || Config.session_length != null) {
      long timestamp=System.currentTimeMillis() / 1000;
      if (this.plugin.IdleTask(""String_Node_Str"",player,""String_Node_Str"") == true) {
        long storedtime=Long.parseLong(this.plugin.db2.get(Encryption.md5(player.getName() + Util.GetIP(player))));
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
        long timedifference=timestamp - storedtime;
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + timedifference);
        if (timedifference > Config.session_seconds) {
          sessionallow=false;
        }
 else {
          sessionallow=true;
        }
      }
    }
    try {
      if (Config.idle_kick == true && Util.CheckWhitelist(""String_Node_Str"",player) == false && sessionallow == false) {
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + Config.idle_ticks);
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            try {
              CheckIdle(player);
            }
 catch (            IOException e) {
              Util.Log(""String_Node_Str"",""String_Node_Str"");
              e.printStackTrace();
            }
          }
        }
,Config.idle_ticks);
        if (this.plugin.IdleTask(""String_Node_Str"",player,""String_Node_Str"" + Schedule))         if (Config.debug_enable)         Util.Debug(player.getName() + ""String_Node_Str"");
        this.plugin.updateDb();
      }
      if (Config.custom_enabled)       if (Config.custom_encryption == null) {
        player.sendMessage(""String_Node_Str"");
      }
      if (sessionallow) {
        Messages.SendMessage(""String_Node_Str"",player,null);
        this.plugin.authorize(event.getPlayer().getEntityId());
      }
 else       if (this.plugin.isRegistered(player.getName())) {
        this.plugin.storeInventory(player.getName(),player.getInventory().getContents());
        player.getInventory().clear();
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else       if (Config.register_force) {
        this.plugin.storeInventory(player.getName(),player.getInventory().getContents());
        player.getInventory().clear();
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else       if (!Config.register_force) {
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else {
        this.plugin.authorize(event.getPlayer().getEntityId());
      }
    }
 catch (    IOException e) {
      Util.Log(""String_Node_Str"",""String_Node_Str"" + AuthDB.pluginname + ""String_Node_Str"");
      player.kickPlayer(""String_Node_Str"");
      e.printStackTrace();
      player.sendMessage(Color.red + ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void onPlayerJoin(PlayerEvent event){
  final Player player=event.getPlayer();
  try {
    if (Config.session_length != ""String_Node_Str"" || Config.session_length != null) {
      long timestamp=System.currentTimeMillis() / 1000;
      if (this.plugin.IdleTask(""String_Node_Str"",player,""String_Node_Str"") == true) {
        long storedtime=Long.parseLong(this.plugin.db2.get(Encryption.md5(player.getName() + Util.GetIP(player))));
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
        long timedifference=timestamp - storedtime;
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + timedifference);
        if (timedifference > Config.session_seconds) {
          sessionallow=false;
        }
 else {
          sessionallow=true;
        }
      }
 else {
        sessionallow=false;
      }
    }
    try {
      if (Config.idle_kick == true && Util.CheckWhitelist(""String_Node_Str"",player) == false && sessionallow == false) {
        if (Config.debug_enable)         Util.Debug(""String_Node_Str"" + Config.idle_ticks);
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            try {
              CheckIdle(player);
            }
 catch (            IOException e) {
              Util.Log(""String_Node_Str"",""String_Node_Str"");
              e.printStackTrace();
            }
          }
        }
,Config.idle_ticks);
        if (this.plugin.IdleTask(""String_Node_Str"",player,""String_Node_Str"" + Schedule))         if (Config.debug_enable)         Util.Debug(player.getName() + ""String_Node_Str"");
        this.plugin.updateDb();
      }
      if (Config.custom_enabled)       if (Config.custom_encryption == null) {
        player.sendMessage(""String_Node_Str"");
      }
      if (sessionallow) {
        Messages.SendMessage(""String_Node_Str"",player,null);
        this.plugin.authorize(event.getPlayer().getEntityId());
      }
 else       if (this.plugin.isRegistered(player.getName())) {
        this.plugin.storeInventory(player.getName(),player.getInventory().getContents());
        player.getInventory().clear();
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else       if (Config.register_force) {
        this.plugin.storeInventory(player.getName(),player.getInventory().getContents());
        player.getInventory().clear();
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else       if (!Config.register_force) {
        Messages.SendMessage(""String_Node_Str"",player,null);
      }
 else {
        this.plugin.authorize(event.getPlayer().getEntityId());
      }
    }
 catch (    IOException e) {
      Util.Log(""String_Node_Str"",""String_Node_Str"" + AuthDB.pluginname + ""String_Node_Str"");
      player.kickPlayer(""String_Node_Str"");
      e.printStackTrace();
      player.sendMessage(Color.red + ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9927200529450696
94083,"public static String replaceStrings(String string,Player player,String additional){
  if (Config.debug_enable)   Debug(""String_Node_Str"");
  if (!Config.has_badcharacters) {
    string=string.replaceAll(""String_Node_Str"",GetIP(player));
    string=string.replaceAll(""String_Node_Str"",player.getName());
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginname);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginversion);
  string=string.replaceAll(""String_Node_Str"",Config.idle_length);
  string=string.replaceAll(""String_Node_Str"",Config.idle_time);
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.badcharacters_characters));
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return string;
}","public static String replaceStrings(String string,Player player,String additional){
  if (Config.debug_enable)   Debug(""String_Node_Str"");
  if (!Config.has_badcharacters) {
    string=string.replaceAll(""String_Node_Str"",GetIP(player));
    string=string.replaceAll(""String_Node_Str"",player.getName());
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginname);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginversion);
  string=string.replaceAll(""String_Node_Str"",Config.idle_length);
  string=string.replaceAll(""String_Node_Str"",Config.idle_time);
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.badcharacters_characters));
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return string;
}",0.9791535060012634
94084,"public void onEnable(){
  Config Messages=new Config(""String_Node_Str"",""String_Node_Str"" + pluginname + ""String_Node_Str"",""String_Node_Str"");
  Config Config=new Config(""String_Node_Str"",""String_Node_Str"" + pluginname + ""String_Node_Str"",""String_Node_Str"");
  if (null == getConfiguration().getKeys(""String_Node_Str"")) {
    Utils.Log(""String_Node_Str"",""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(((Plugin)(this)));
    return;
  }
  Plugin checkCraftIRC=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (checkCraftIRC != null) {
    try {
      Utils.Log(""String_Node_Str"",""String_Node_Str"");
      craftircHandle=(CraftIRC)checkCraftIRC;
      zCraftIRC.SendMessage(""String_Node_Str"",null);
    }
 catch (    ClassCastException ex) {
      ex.printStackTrace();
      Stop(""String_Node_Str"");
    }
  }
  try {
    MySQL.connect();
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    Stop(""String_Node_Str"");
  }
catch (  SQLException e) {
    e.printStackTrace();
    Stop(""String_Node_Str"");
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,playerListener,Priority.High,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_ITEM,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,this.blockListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,this.blockListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGED,this.entityListener,Event.Priority.Lowest,this);
  Utils.Log(""String_Node_Str"",pluginname + ""String_Node_Str"" + pluginversion+ ""String_Node_Str"");
  Utils.Log(""String_Node_Str"",pluginname + ""String_Node_Str"");
}","public void onEnable(){
  Config Messages=new Config(""String_Node_Str"",""String_Node_Str"" + pluginname + ""String_Node_Str"",""String_Node_Str"");
  Config Config=new Config(""String_Node_Str"",""String_Node_Str"" + pluginname + ""String_Node_Str"",""String_Node_Str"");
  if (null == getConfiguration().getKeys(""String_Node_Str"")) {
    Utils.Log(""String_Node_Str"",""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(((Plugin)(this)));
    return;
  }
  Plugin checkCraftIRC=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (checkCraftIRC != null && CraftIRC_enabled) {
    try {
      Utils.Log(""String_Node_Str"",""String_Node_Str"");
      craftircHandle=(CraftIRC)checkCraftIRC;
      zCraftIRC.SendMessage(""String_Node_Str"",null);
    }
 catch (    ClassCastException ex) {
      ex.printStackTrace();
      Stop(""String_Node_Str"");
    }
  }
  try {
    MySQL.connect();
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    Stop(""String_Node_Str"");
  }
catch (  SQLException e) {
    e.printStackTrace();
    Stop(""String_Node_Str"");
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,playerListener,Priority.High,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_ITEM,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,this.blockListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,this.blockListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGED,this.entityListener,Event.Priority.Lowest,this);
  Utils.Log(""String_Node_Str"",pluginname + ""String_Node_Str"" + pluginversion+ ""String_Node_Str"");
  Utils.Log(""String_Node_Str"",pluginname + ""String_Node_Str"");
}",0.9954648526077098
94085,"ExportEndpoint(ServiceReference serviceReference,EndpointDescription endpointDescription,IRemoteServiceRegistration reg,IRemoteServiceContainerAdapter containerAdapter,Map<String,Object> originalProperties){
  Assert.isNotNull(serviceReference);
  this.serviceReference=serviceReference;
  Assert.isNotNull(endpointDescription);
  this.endpointDescription=endpointDescription;
  Assert.isNotNull(reg);
  this.rsRegistration=reg;
  Assert.isNotNull(containerAdapter);
  this.containerAdapter=containerAdapter;
  this.remoteServiceListener=new IRemoteServiceListener(){
    public void handleServiceEvent(    IRemoteServiceEvent event){
      Collection<ExportRegistration> regs=null;
synchronized (this) {
        regs=new ArrayList(activeExportRegistrations);
      }
      for (      ExportRegistration r : regs)       r.close();
    }
  }
;
  Assert.isNotNull(originalProperties);
  this.originalProperties=originalProperties;
  this.containerAdapter.addRemoteServiceListener(this.remoteServiceListener);
}","ExportEndpoint(ServiceReference serviceReference,EndpointDescription endpointDescription,IRemoteServiceRegistration reg,IRemoteServiceContainerAdapter containerAdapter,Map<String,Object> originalProperties){
  Assert.isNotNull(serviceReference);
  this.serviceReference=serviceReference;
  Assert.isNotNull(endpointDescription);
  this.endpointDescription=endpointDescription;
  Assert.isNotNull(reg);
  this.rsRegistration=reg;
  Assert.isNotNull(containerAdapter);
  this.containerAdapter=containerAdapter;
  this.remoteServiceListener=new IRemoteServiceListener(){
    public void handleServiceEvent(    IRemoteServiceEvent event){
      if (event instanceof IRemoteServiceUnregisteredEvent) {
        IRemoteServiceReference ref=((IRemoteServiceUnregisteredEvent)event).getReference();
        Collection<ExportRegistration> regs=null;
synchronized (ExportEndpoint.this) {
          regs=new ArrayList(activeExportRegistrations);
        }
        for (        ExportRegistration r : regs) {
          IRemoteServiceRegistration rsReg=r.getRemoteServiceRegistration();
          if (rsReg != null) {
            IRemoteServiceReference rsRef=rsReg.getReference();
            if (rsRef != null && rsRef.equals(ref))             r.close();
          }
        }
      }
    }
  }
;
  Assert.isNotNull(originalProperties);
  this.originalProperties=originalProperties;
  this.containerAdapter.addRemoteServiceListener(this.remoteServiceListener);
}",0.8030919446704637
94086,"public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  Activator.instance=this;
  this.exportedRegistrations=new ArrayList<ExportRegistration>();
  this.importedRegistrations=new ArrayList<ImportRegistration>();
  initializeDependents();
  initializeProxyServiceFactoryBundle();
  initializeProviders(context.getBundle(),DistributionNamespace.DISTRIBUTION_NAMESPACE,""String_Node_Str"");
  initializeProviders(context.getBundle(),DiscoveryNamespace.DISCOVERY_NAMESPACE,""String_Node_Str"");
  rsaProps=new Properties();
  rsaProps.put(RemoteServiceAdmin.SERVICE_PROP,new Boolean(true));
  remoteServiceAdminRegistration=context.registerService(org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.class.getName(),new ServiceFactory(){
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      RemoteServiceAdmin result=null;
synchronized (remoteServiceAdmins) {
        result=remoteServiceAdmins.get(bundle);
        if (result == null) {
          result=new RemoteServiceAdmin(bundle,exportedRegistrations,importedRegistrations);
          remoteServiceAdmins.put(bundle,result);
        }
      }
      return result;
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.remove(bundle);
        if (rsa != null)         rsa.close();
      }
    }
  }
,(Dictionary)rsaProps);
  ctdTracker=new ServiceTracker<ContainerTypeDescription,ContainerTypeDescription>(context,ContainerTypeDescription.class,new ServiceTrackerCustomizer<ContainerTypeDescription,ContainerTypeDescription>(){
    public ContainerTypeDescription addingService(    ServiceReference<ContainerTypeDescription> reference){
      ContainerTypeDescription ctd=null;
      if (reference != null && context != null) {
        ctd=context.getService(reference);
        if (ctd != null) {
          addSupportedConfigsAndIntents(ctd);
          if (remoteServiceAdminRegistration != null)           remoteServiceAdminRegistration.setProperties(rsaProps);
        }
      }
      return ctd;
    }
    public void modifiedService(    ServiceReference<ContainerTypeDescription> reference,    ContainerTypeDescription service){
    }
    public void removedService(    ServiceReference<ContainerTypeDescription> reference,    ContainerTypeDescription service){
      if (remoteServiceAdminRegistration != null && service != null) {
        removeSupportedConfigsAndIntents(service);
        remoteServiceAdminRegistration.setProperties(rsaProps);
      }
    }
  }
);
  ctdTracker.open();
  endpointDescriptionLocator=new EndpointDescriptionLocator(context);
  final Properties properties=new Properties();
  properties.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  iServiceInfoFactoryRegistration=context.registerService(IServiceInfoFactory.class.getName(),new ServiceInfoFactory(),(Dictionary)properties);
  endpointDescriptionLocator.start();
}","public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  Activator.instance=this;
  this.exportedRegistrations=new ArrayList<ExportRegistration>();
  this.importedRegistrations=new ArrayList<ImportRegistration>();
  initializeDependents();
  initializeProxyServiceFactoryBundle();
  rsaProps=new Properties();
  rsaProps.put(RemoteServiceAdmin.SERVICE_PROP,new Boolean(true));
  remoteServiceAdminRegistration=context.registerService(org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.class.getName(),new ServiceFactory(){
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      RemoteServiceAdmin result=null;
synchronized (remoteServiceAdmins) {
        result=remoteServiceAdmins.get(bundle);
        if (result == null) {
          result=new RemoteServiceAdmin(bundle,exportedRegistrations,importedRegistrations);
          remoteServiceAdmins.put(bundle,result);
        }
      }
      return result;
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.remove(bundle);
        if (rsa != null)         rsa.close();
      }
    }
  }
,(Dictionary)rsaProps);
  ctdTracker=new ServiceTracker<ContainerTypeDescription,ContainerTypeDescription>(context,ContainerTypeDescription.class,new ServiceTrackerCustomizer<ContainerTypeDescription,ContainerTypeDescription>(){
    public ContainerTypeDescription addingService(    ServiceReference<ContainerTypeDescription> reference){
      ContainerTypeDescription ctd=null;
      if (reference != null && context != null) {
        ctd=context.getService(reference);
        if (ctd != null) {
          addSupportedConfigsAndIntents(ctd);
          if (remoteServiceAdminRegistration != null)           remoteServiceAdminRegistration.setProperties(rsaProps);
        }
      }
      return ctd;
    }
    public void modifiedService(    ServiceReference<ContainerTypeDescription> reference,    ContainerTypeDescription service){
    }
    public void removedService(    ServiceReference<ContainerTypeDescription> reference,    ContainerTypeDescription service){
      if (remoteServiceAdminRegistration != null && service != null) {
        removeSupportedConfigsAndIntents(service);
        remoteServiceAdminRegistration.setProperties(rsaProps);
      }
    }
  }
);
  ctdTracker.open();
  initializeProviders(context.getBundle(),DistributionNamespace.DISTRIBUTION_NAMESPACE,""String_Node_Str"");
  endpointDescriptionLocator=new EndpointDescriptionLocator(context);
  final Properties properties=new Properties();
  properties.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  iServiceInfoFactoryRegistration=context.registerService(IServiceInfoFactory.class.getName(),new ServiceInfoFactory(),(Dictionary)properties);
  endpointDescriptionLocator.start();
  initializeProviders(context.getBundle(),DiscoveryNamespace.DISCOVERY_NAMESPACE,""String_Node_Str"");
}",0.2655533726260641
94087,"public boolean triggerDiscovery(){
  return false;
}","public boolean triggerDiscovery(){
  return true;
}",0.9320388349514565
94088,"@Override public void callAsync(IRemoteCall call,IRemoteCallListener listener){
  if (call instanceof RSARemoteCall) {
    Callable<IRemoteCallCompleteEvent> c=createAsyncCallable((RSARemoteCall)call);
    if (c != null)     callAsyncWithTimeout(call,c,listener);
  }
 else   super.callAsync(call,listener);
}","@Override public void callAsync(IRemoteCall call,IRemoteCallListener listener){
  if (call instanceof RSARemoteCall)   callAsyncWithTimeout(call,createAsyncCallable((RSARemoteCall)call),listener);
 else   super.callAsync(call,listener);
}",0.7276051188299817
94089,"/** 
 * @since 8.13
 */
protected Object invokeReturnAsync(Object proxy,Method method,Object[] args) throws Throwable {
  final String invokeMethodName=method.getName();
  final AsyncArgs asyncArgs=new AsyncArgs(args,method.getReturnType());
  RemoteCall remoteCall=getAsyncRemoteCall(invokeMethodName,asyncArgs.getArgs());
  return callFuture(remoteCall,asyncArgs.getReturnType());
}","/** 
 * @since 8.13
 */
protected Object invokeReturnAsync(Object proxy,Method method,Object[] args) throws Throwable {
  return callFuture(getAsyncRemoteCall(method.getName(),args),method.getReturnType());
}",0.4729729729729729
94090,"@Override protected void callAsync(IRemoteCall call,IRemoteCallable callable,IRemoteCallListener listener){
  if (call.getClass().isAssignableFrom(RSARemoteCall.class)) {
    Callable<IRemoteCallCompleteEvent> c=createAsyncCallable((RSARemoteCall)call);
    if (c == null)     throw new NullPointerException(""String_Node_Str"");
    callAsyncWithTimeout(call,c,listener);
  }
  super.callAsync(call,callable,listener);
}","@Override public void callAsync(IRemoteCall call,IRemoteCallListener listener){
  if (call instanceof RSARemoteCall) {
    Callable<IRemoteCallCompleteEvent> c=createAsyncCallable((RSARemoteCall)call);
    if (c == null)     throw new NullPointerException(""String_Node_Str"");
    callAsyncWithTimeout(call,c,listener);
  }
 else   super.callAsync(call,listener);
}",0.8710089399744572
94091,"/** 
 * @since 4.4
 */
@SuppressWarnings(""String_Node_Str"") protected Object invokeLocal(RemoteServiceRegistrationImpl reg,RemoteCallImpl call) throws InvocationTargetException, Exception, NoClassDefFoundError {
  Object[] callArgs=call.getParameters();
  Object[] args=(callArgs == null) ? SharedObjectMsg.nullArgs : callArgs;
  Object service=reg.getService();
  final Method method=ClassUtil.getMethod(service.getClass(),call.getMethod(),SharedObjectMsg.getTypesForParameters(args));
  AccessController.doPrivileged(new PrivilegedExceptionAction(){
    public Object run() throws Exception {
      if (!method.isAccessible())       method.setAccessible(true);
      return null;
    }
  }
);
  Object result=method.invoke(service,args);
  if (result != null) {
    Class returnType=method.getReturnType();
    if (reg.getProperty(Constants.OSGI_ASYNC_INTENT) != null && AsyncReturnUtil.isAsyncType(returnType))     return AsyncReturnUtil.convertAsyncToReturn(result,returnType,call.getTimeout());
  }
  return result;
}","/** 
 * @since 4.4
 */
protected Object invokeLocal(RemoteServiceRegistrationImpl reg,RemoteCallImpl call) throws InvocationTargetException, Exception, NoClassDefFoundError {
  Object[] callArgs=call.getParameters();
  Object[] args=(callArgs == null) ? SharedObjectMsg.nullArgs : callArgs;
  Object service=reg.getService();
  final Method method=ClassUtil.getMethod(service.getClass(),call.getMethod(),SharedObjectMsg.getTypesForParameters(args));
  Object result=method.invoke(service,args);
  if (result != null) {
    Class returnType=method.getReturnType();
    if (reg.getProperty(Constants.OSGI_ASYNC_INTENT) != null && AsyncReturnUtil.isAsyncType(returnType))     return AsyncReturnUtil.convertAsyncToReturn(result,returnType,call.getTimeout());
  }
  return result;
}",0.8638132295719845
94092,"protected boolean namespaceEquals(BaseID o){
  if (this == o)   return true;
  if (!this.getClass().equals(o.getClass()))   return false;
  return this.uri.equals(((URIID)o).uri);
}","protected boolean namespaceEquals(BaseID o){
  if (this == o)   return true;
  if (!this.getClass().equals(o.getClass()))   return false;
  return this.uri.toString().equals((((URIID)o).uri).toString());
}",0.9378238341968912
94093,"protected int namespaceHashCode(){
  return uri.hashCode();
}","protected int namespaceHashCode(){
  return uri.toString().hashCode() ^ getClass().hashCode();
}",0.7770700636942676
94094,"/** 
 * Called by   {@link Namespace#toExternalForm(BaseID)}.
 * @return String that represents this ID. Default implementation is toreturn <pre> namespace.getScheme() + Namespace.SCHEME_SEPARATOR + namespaceGetName(); </pre>
 */
protected String namespaceToExternalForm(){
  return namespace.getScheme() + Namespace.SCHEME_SEPARATOR + namespaceGetName();
}","/** 
 * Called by   {@link Namespace#toExternalForm(BaseID)}.
 * @return String that represents this ID. Default implementation is to return<pre> namespace.getScheme() + Namespace.SCHEME_SEPARATOR + namespaceGetName(); </pre>
 */
protected String namespaceToExternalForm(){
  return namespace.getScheme() + Namespace.SCHEME_SEPARATOR + namespaceGetName();
}",0.9971988795518208
94095,"/** 
 * Called by   {@link Namespace#getHashCodeForID(BaseID)}.
 * @return int hashCode for this ID. Returned value must be unique withinthis process.
 */
protected abstract int namespaceHashCode();","/** 
 * Called by   {@link Namespace#getHashCodeForID(BaseID)}.
 * @return int hashCode for this ID. Returned value must be unique within thisprocess.
 */
protected abstract int namespaceHashCode();",0.9949494949494948
94096,"/** 
 * Get the name of this namespace. Must not return <code>null</code>.
 * @return String name of Namespace instance. Must not return<code>null</code>, and the returned value should be a globally unique name for this Namespace subclass.
 */
public String getName(){
  return name;
}","/** 
 * Get the name of this namespace. Must not return <code>null</code>.
 * @return String name of Namespace instance. Must not return <code>null</code>,and the returned value should be a globally unique name for this Namespace subclass.
 */
public String getName(){
  return name;
}",0.9964912280701754
94097,"/** 
 * The default implementation of this method is to call id.namespaceHashCode(). Subclasses may override.
 * @param id the id in this Namespace to get the hashcode for. Must not be <code>null</code>.
 * @return the hashcode for the given id. Returned value must be uniquewithin this process.
 */
protected int getHashCodeForID(BaseID id){
  return id.namespaceHashCode();
}","/** 
 * The default implementation of this method is to call id.namespaceHashCode(). Subclasses may override.
 * @param id the id in this Namespace to get the hashcode for. Must not be <code>null</code>.
 * @return the hashcode for the given id. Returned value must be unique withinthis process.
 */
protected int getHashCodeForID(BaseID id){
  return id.namespaceHashCode();
}",0.9973474801061007
94098,"/** 
 * The default implementation of this method is to call id.namespaceToExternalForm(). Subclasses may override.
 * @param id the id in this Namespace to convert to external form.
 * @return String that represents the given id in an external form. Notethat this external form may at some later time be passed to {@link #createInstance(Object[])} as a single String parameter,and should result in a valid ID instance of the appropriate Namespace.
 */
protected String toExternalForm(BaseID id){
  return id.namespaceToExternalForm();
}","/** 
 * The default implementation of this method is to call id.namespaceToExternalForm(). Subclasses may override.
 * @param id the id in this Namespace to convert to external form.
 * @return String that represents the given id in an external form. Note thatthis external form may at some later time be passed to {@link #createInstance(Object[])} as a single String parameter, andshould result in a valid ID instance of the appropriate Namespace.
 */
protected String toExternalForm(BaseID id){
  return id.namespaceToExternalForm();
}",0.9832402234636872
94099,"/** 
 * @since 8.13
 */
public static String[] removeSupportedIntent(String intent,String[] currentSupportedIntents){
  if (intent == null)   return currentSupportedIntents;
  List<String> results=(currentSupportedIntents == null) ? new ArrayList<String>() : new ArrayList<String>(Arrays.asList(currentSupportedIntents));
  results.remove(intent);
  return results.toArray(new String[results.size()]);
}","/** 
 * @since 8.13
 */
protected static String[] removeSupportedIntent(String intent,String[] currentSupportedIntents){
  if (intent == null)   return currentSupportedIntents;
  List<String> results=(currentSupportedIntents == null) ? new ArrayList<String>() : new ArrayList<String>(Arrays.asList(currentSupportedIntents));
  results.remove(intent);
  return results.toArray(new String[results.size()]);
}",0.9839307787391842
94100,"/** 
 * @since 8.13
 */
public boolean checkPrivateIntent(ContainerTypeDescription description,String hostname,Map<String,?> properties) throws ContainerIntentException {
  List<String> serviceIntents=getServiceIntents(description,properties);
  if (serviceIntents != null && serviceIntents.contains(Constants.OSGI_PRIVATE_INTENT)) {
    checkPrivateHostname(description,hostname);
    return true;
  }
  return false;
}","/** 
 * @since 8.13
 */
protected boolean checkPrivateIntent(ContainerTypeDescription description,String hostname,Map<String,?> properties) throws ContainerIntentException {
  List<String> serviceIntents=getServiceIntents(properties);
  if (serviceIntents.contains(Constants.OSGI_PRIVATE_INTENT)) {
    if (!checkIntentSupported(description,Constants.OSGI_PRIVATE_INTENT))     throw new ContainerIntentException(Constants.OSGI_PRIVATE_INTENT,""String_Node_Str"" + description.getName());
    checkPrivate(description,hostname);
  }
  return false;
}",0.6866597724922441
94101,"/** 
 * @since 8.13
 */
public static String[] addSupportedIntent(String intent,String[] currentSupportedIntents){
  if (intent == null)   return currentSupportedIntents;
  List<String> results=(currentSupportedIntents == null) ? new ArrayList<String>() : new ArrayList<String>(Arrays.asList(currentSupportedIntents));
  results.add(intent);
  return results.toArray(new String[results.size()]);
}","/** 
 * @since 8.13
 */
protected static String[] addSupportedIntent(String intent,String[] currentSupportedIntents){
  if (intent == null)   return currentSupportedIntents;
  List<String> results=(currentSupportedIntents == null) ? new ArrayList<String>() : new ArrayList<String>(Arrays.asList(currentSupportedIntents));
  results.add(intent);
  return results.toArray(new String[results.size()]);
}",0.9836888331242158
94102,"/** 
 * @since 8.13
 */
@SuppressWarnings(""String_Node_Str"") public boolean checkAsyncIntent(ContainerTypeDescription description,String hostname,Map<String,?> properties) throws ContainerIntentException {
  List<String> serviceIntents=getServiceIntents(description,properties);
  if (serviceIntents != null && serviceIntents.contains(Constants.OSGI_PRIVATE_INTENT))   return true;
  return false;
}","/** 
 * @since 8.13
 */
protected boolean checkAsyncIntent(ContainerTypeDescription description,Map<String,?> properties) throws ContainerIntentException {
  List<String> serviceIntents=getServiceIntents(properties);
  if (serviceIntents.contains(Constants.OSGI_ASYNC_INTENT)) {
    if (!checkIntentSupported(description,Constants.OSGI_ASYNC_INTENT))     throw new ContainerIntentException(Constants.OSGI_ASYNC_INTENT,""String_Node_Str"" + description.getName());
    return true;
  }
  return false;
}",0.6651835372636262
94103,"/** 
 * @since 8.13
 */
protected List<String> getServiceIntents(ContainerTypeDescription description,Map<String,?> properties){
  if (description != null) {
    String[] supportedIntents=getSupportedIntents(description);
    if (supportedIntents != null && properties != null)     return EndpointDescriptionPropertiesUtil.getStringPlusProperty(properties,Constants.OSGI_SERVICE_INTENTS);
  }
  return null;
}","/** 
 * @since 8.13
 */
protected List<String> getServiceIntents(Map<String,?> properties){
  return EndpointDescriptionPropertiesUtil.getStringPlusProperty(properties,Constants.OSGI_SERVICE_INTENTS);
}",0.6612111292962357
94104,"/** 
 * @since 8.13
 */
public boolean checkConfidentialIntent(ContainerTypeDescription description,String uri,Map<String,?> properties) throws ContainerIntentException {
  List<String> serviceIntents=getServiceIntents(description,properties);
  if (serviceIntents != null && serviceIntents.contains(Constants.OSGI_CONFIDENTIAL_INTENT)) {
    checkConfidentialURI(description,uri);
    return true;
  }
  return false;
}","/** 
 * @since 8.13
 */
protected boolean checkConfidentialIntent(ContainerTypeDescription description,String uri,Map<String,?> properties) throws ContainerIntentException {
  List<String> serviceIntents=getServiceIntents(properties);
  if (serviceIntents.contains(Constants.OSGI_CONFIDENTIAL_INTENT)) {
    if (!checkIntentSupported(description,Constants.OSGI_CONFIDENTIAL_INTENT))     throw new ContainerIntentException(Constants.OSGI_CONFIDENTIAL_INTENT,""String_Node_Str"" + description.getName());
    checkConfidential(description,uri);
  }
  return false;
}",0.714867617107943
94105,"/** 
 * Invoke a remote call synchronously.  This method should block until a value may be returned, or the remote call has failed or timed out.
 * @param remoteCall the RSARemoteCall to synchronously invoke.  Will not be <code>null</code>.
 * @return the result (of appropriate type)
 * @throws ECFException if some exception occurred during invocation
 */
protected Object invokeSync(RSARemoteCall remoteCall) throws ECFException {
  if (remoteCall.getClass().isAssignableFrom(RSARemoteCall.class)) {
    Callable<Object> c=createSyncCallable(remoteCall);
    if (c == null)     throw new ECFException(""String_Node_Str"" + remoteCall.getMethod(),new NullPointerException(""String_Node_Str""));
    try {
      return callSync(remoteCall,c);
    }
 catch (    InterruptedException e) {
      throw new ECFException(""String_Node_Str"" + remoteCall.getMethod(),e);
    }
catch (    ExecutionException e) {
      throw new ECFException(""String_Node_Str"" + remoteCall.getMethod(),e.getCause());
    }
catch (    TimeoutException e) {
      throw new ECFException(""String_Node_Str"" + remoteCall.getMethod(),e);
    }
  }
  return super.invokeSync(remoteCall);
}","/** 
 * Invoke a remote call synchronously.  This method should block until a value may be returned, or the remote call has failed or timed out.
 * @param remoteCall the RSARemoteCall to synchronously invoke.  Will not be <code>null</code>.
 * @return the result (of appropriate type)
 * @throws ECFException if some exception occurred during invocation
 */
protected Object invokeSync(RSARemoteCall remoteCall) throws ECFException {
  if (remoteCall.getClass().isAssignableFrom(RSARemoteCall.class)) {
    Callable<Object> c=getSyncCallable(remoteCall);
    if (c == null)     throw new ECFException(""String_Node_Str"" + remoteCall.getMethod(),new NullPointerException(""String_Node_Str""));
    try {
      return callSync(remoteCall,c);
    }
 catch (    InterruptedException e) {
      throw new ECFException(""String_Node_Str"" + remoteCall.getMethod(),e);
    }
catch (    ExecutionException e) {
      throw new ECFException(""String_Node_Str"" + remoteCall.getMethod(),e.getCause());
    }
catch (    TimeoutException e) {
      throw new ECFException(""String_Node_Str"" + remoteCall.getMethod(),e);
    }
  }
  return super.invokeSync(remoteCall);
}",0.9960920538428136
94106,"@Override public void callAsync(IRemoteCall call,IRemoteCallListener listener){
  if (call instanceof RSARemoteCall)   callAsyncWithTimeout(call,createAsyncCallable((RSARemoteCall)call),listener);
 else   super.callAsync(call,listener);
}","@Override public void callAsync(IRemoteCall call,IRemoteCallListener listener){
  if (call instanceof RSARemoteCall)   callAsyncWithTimeout(call,getAsyncCallable((RSARemoteCall)call),listener);
 else   super.callAsync(call,listener);
}",0.9809725158562368
94107,"@Override public Object callSync(IRemoteCall call) throws ECFException {
  if (call instanceof RSARemoteCall) {
    Callable<Object> c=createSyncCallable((RSARemoteCall)call);
    try {
      return c.call();
    }
 catch (    Exception e) {
      throw new ECFException(""String_Node_Str"" + call.getMethod(),e);
    }
  }
  return super.callSync(call);
}","@Override public Object callSync(IRemoteCall call) throws ECFException {
  if (call instanceof RSARemoteCall)   try {
    return getSyncCallable((RSARemoteCall)call).call();
  }
 catch (  Exception e) {
    throw new ECFException(""String_Node_Str"" + call.getMethod(),e);
  }
  return super.callSync(call);
}",0.7745839636913767
94108,"@Override public void callAsync(IRemoteCall call,IRemoteCallListener listener){
  if (call instanceof RSARemoteCall) {
    Callable<IRemoteCallCompleteEvent> c=createAsyncCallable((RSARemoteCall)call);
    if (c == null)     throw new NullPointerException(""String_Node_Str"");
    callAsyncWithTimeout(call,c,listener);
  }
 else   super.callAsync(call,listener);
}","@Override public void callAsync(IRemoteCall call,IRemoteCallListener listener){
  if (call instanceof RSARemoteCall) {
    Callable<IRemoteCallCompleteEvent> c=createAsyncCallable((RSARemoteCall)call);
    if (c != null)     callAsyncWithTimeout(call,c,listener);
  }
 else   super.callAsync(call,listener);
}",0.9153046062407132
94109,"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  try {
    Object resultObject=invokeObject(proxy,method,args);
    if (resultObject != null)     return resultObject;
    try {
      if (isReturnAsync(proxy,method,args)) {
        if (isInterfaceAsync(method.getDeclaringClass()) && isMethodAsync(method.getName()))         return invokeAsync(createRemoteCall(proxy,method,getAsyncInvokeMethodName(method),args,getDefaultTimeout()));
        if (isOSGIAsync())         return invokeReturnAsync(proxy,method,args);
      }
    }
 catch (    Throwable t) {
      handleProxyException(""String_Node_Str"" + getRemoteServiceID(),t);
    }
    final String callMethod=getCallMethodNameForProxyInvoke(method,args);
    final Object[] callParameters=getCallParametersForProxyInvoke(callMethod,method,args);
    final long callTimeout=getCallTimeoutForProxyInvoke(callMethod,method,args);
    return invokeSync(createRemoteCall(proxy,method,callMethod,callParameters,callTimeout));
  }
 catch (  Throwable t) {
    if (t instanceof ServiceException)     throw t;
    throw new ServiceException(""String_Node_Str"" + getRemoteServiceID(),ServiceException.REMOTE,t);
  }
}","@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  try {
    Object resultObject=invokeObject(proxy,method,args);
    if (resultObject != null)     return resultObject;
    try {
      if (isReturnAsync(proxy,method,args)) {
        if (isInterfaceAsync(method.getDeclaringClass()) && isMethodAsync(method.getName()))         return invokeAsync(createRemoteCall(proxy,method,getAsyncInvokeMethodName(method),args,getDefaultTimeout()));
        if (isOSGIAsync())         return invokeAsync(createRemoteCall(proxy,method,method.getName(),args,getDefaultTimeout()));
      }
    }
 catch (    Throwable t) {
      handleProxyException(""String_Node_Str"" + getRemoteServiceID(),t);
    }
    final String callMethod=getCallMethodNameForProxyInvoke(method,args);
    final Object[] callParameters=getCallParametersForProxyInvoke(callMethod,method,args);
    final long callTimeout=getCallTimeoutForProxyInvoke(callMethod,method,args);
    return invokeSync(createRemoteCall(proxy,method,callMethod,callParameters,callTimeout));
  }
 catch (  Throwable t) {
    if (t instanceof ServiceException)     throw t;
    throw new ServiceException(""String_Node_Str"" + getRemoteServiceID(),ServiceException.REMOTE,t);
  }
}",0.9694501018329938
94110,"/** 
 * @since 8.13
 */
protected Callable<IRemoteCallCompleteEvent> createAsyncCallable(final RSARemoteCall call){
  return null;
}","/** 
 * @since 8.13
 */
protected Callable<IRemoteCallCompleteEvent> createAsyncCallable(final RSARemoteCall call){
  throw new UnsupportedOperationException(""String_Node_Str"" + call.getMethod() + ""String_Node_Str""+ call.getReflectMethod().getDeclaringClass());
}",0.6177215189873417
94111,"/** 
 * @since 8.13
 */
protected Callable<Object> createSyncCallable(final RSARemoteCall call){
  return null;
}","/** 
 * @since 8.13
 */
protected Callable<Object> createSyncCallable(final RSARemoteCall call){
  throw new UnsupportedOperationException(""String_Node_Str"" + call.getMethod() + ""String_Node_Str""+ call.getReflectMethod().getDeclaringClass());
}",0.5770308123249299
94112,"@Reference void bindTimeService(ITimeService timeService){
  System.out.println(""String_Node_Str"" + timeService);
  System.out.println(""String_Node_Str"" + timeService.getCurrentTime());
}","@Reference void bindTimeService(ITimeService timeService){
  System.out.println(""String_Node_Str"" + timeService.getCurrentTime());
}",0.8275862068965517
94113,"/** 
 * @param args arguments
 * @return GenericContainerArgs the server args created
 * @throws IDCreateException if the server args cannot be retrieved from given args
 * @since 3.0
 */
protected GenericContainerArgs getServerArgs(Object[] args) throws IDCreateException {
  ID newID=null;
  Integer ka=null;
  InetAddress bindAddress=null;
  if (args != null && args.length > 0) {
    if (args[0] instanceof Map) {
      Map map=(Map)args[0];
      Object idVal=map.get(ID_PROP);
      if (idVal != null) {
        newID=getIDFromArg(idVal);
      }
 else {
        String hostname=TCPServerSOContainer.DEFAULT_HOST;
        Object hostVal=map.get(HOSTNAME_PROP);
        if (hostVal != null) {
          if (!(hostVal instanceof String))           throw new IllegalArgumentException(""String_Node_Str"");
          hostname=(String)hostVal;
        }
        int port=-1;
        Object portVal=map.get(PORT_PROP);
        if (portVal != null)         port=getIntegerFromArg(portVal).intValue();
        if (port < 0)         port=getTCPServerPort(port);
        String path=TCPServerSOContainer.DEFAULT_NAME;
        Object pathVal=map.get(PATH_PROP);
        if (pathVal != null) {
          if (!(pathVal instanceof String))           throw new IllegalArgumentException(""String_Node_Str"");
          path=(String)pathVal;
        }
        newID=createTCPServerID(hostname,port,path);
      }
      Object bindAddressVal=map.get(BINDADDRESS_PROP);
      if (bindAddressVal != null) {
        if (bindAddressVal instanceof InetAddress) {
          bindAddress=(InetAddress)bindAddressVal;
        }
 else         throw new IllegalArgumentException(""String_Node_Str"");
      }
      Object o=map.get(KEEPALIVE_PROP);
      if (o == null)       o=map.get(KEEPALIVE_PROP.toLowerCase());
      ka=getIntegerFromArg(o);
    }
 else     if (args.length > 1) {
      if (args[0] instanceof String || args[0] instanceof ID)       newID=getIDFromArg(args[0]);
      if (args[1] instanceof String || args[1] instanceof Integer)       ka=getIntegerFromArg(args[1]);
    }
 else     newID=getIDFromArg(args[0]);
  }
  if (newID == null) {
    int port=getTCPServerPort(-1);
    newID=createTCPServerID(TCPServerSOContainer.DEFAULT_HOST,port,TCPServerSOContainer.DEFAULT_NAME);
  }
  if (ka == null)   ka=new Integer(TCPServerSOContainer.DEFAULT_KEEPALIVE);
  return new GenericContainerArgs(newID,ka,bindAddress);
}","/** 
 * @param args arguments
 * @return GenericContainerArgs the server args created
 * @throws IDCreateException if the server args cannot be retrieved from given args
 * @throws ContainerIntentException 
 * @since 3.0
 */
protected GenericContainerArgs getServerArgs(Object[] args) throws IDCreateException, ContainerIntentException {
  ID newID=null;
  Integer ka=null;
  InetAddress bindAddress=null;
  boolean privateIntent=false;
  if (args != null && args.length > 0) {
    if (args[0] instanceof Map) {
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> map=(Map<String,Object>)args[0];
      Object idVal=map.get(ID_PROP);
      if (idVal != null) {
        newID=getIDFromArg(idVal);
      }
 else {
        String hostname=TCPServerSOContainer.DEFAULT_HOST;
        Object hostVal=map.get(HOSTNAME_PROP);
        if (hostVal != null) {
          if (!(hostVal instanceof String))           throw new IllegalArgumentException(""String_Node_Str"");
          hostname=(String)hostVal;
        }
        int port=-1;
        Object portVal=map.get(PORT_PROP);
        if (portVal != null)         port=getIntegerFromArg(portVal).intValue();
        if (port < 0)         port=getTCPServerPort(port);
        String path=TCPServerSOContainer.DEFAULT_NAME;
        Object pathVal=map.get(PATH_PROP);
        if (pathVal != null) {
          if (!(pathVal instanceof String))           throw new IllegalArgumentException(""String_Node_Str"");
          path=(String)pathVal;
        }
        newID=createTCPServerID(hostname,port,path);
      }
      Object bindAddressVal=map.get(BINDADDRESS_PROP);
      if (bindAddressVal != null) {
        if (bindAddressVal instanceof InetAddress) {
          bindAddress=(InetAddress)bindAddressVal;
        }
 else         throw new IllegalArgumentException(""String_Node_Str"");
      }
      Object o=map.get(KEEPALIVE_PROP);
      if (o == null)       o=map.get(KEEPALIVE_PROP.toLowerCase());
      ka=getIntegerFromArg(o);
      privateIntent=ContainerInstantiatorUtils.containsPrivateIntent(map);
    }
 else     if (args.length > 1) {
      if (args[0] instanceof String || args[0] instanceof ID)       newID=getIDFromArg(args[0]);
      if (args[1] instanceof String || args[1] instanceof Integer)       ka=getIntegerFromArg(args[1]);
    }
 else     newID=getIDFromArg(args[0]);
  }
  if (newID == null) {
    int port=getTCPServerPort(-1);
    newID=createTCPServerID(TCPServerSOContainer.DEFAULT_HOST,port,TCPServerSOContainer.DEFAULT_NAME);
  }
  if (ka == null)   ka=new Integer(TCPServerSOContainer.DEFAULT_KEEPALIVE);
  if (privateIntent)   ContainerInstantiatorUtils.checkPrivate(newID);
  return new GenericContainerArgs(newID,ka,bindAddress);
}",0.9400507713337238
94114,"/** 
 * @param args arguments
 * @return GenericContainerArgs the client args created
 * @throws IDCreateException if the client args cannot be retrieved from given args
 * @since 3.0
 */
protected GenericContainerArgs getServerArgs(Object[] args) throws IDCreateException {
  ID newID=null;
  Integer ka=null;
  InetAddress bindAddress=null;
  boolean wantClientAuth=false;
  boolean needClientAuth=false;
  if (args != null && args.length > 0) {
    if (args[0] instanceof Map) {
      Map map=(Map)args[0];
      Object idVal=map.get(ID_PROP);
      if (idVal != null) {
        newID=getIDFromArg(idVal);
      }
 else {
        String hostname=SSLServerSOContainer.DEFAULT_HOST;
        Object hostVal=map.get(HOSTNAME_PROP);
        if (hostVal != null) {
          if (!(hostVal instanceof String))           throw new IllegalArgumentException(""String_Node_Str"");
          hostname=(String)hostVal;
        }
        int port=-1;
        Object portVal=map.get(PORT_PROP);
        if (portVal != null)         port=getIntegerFromArg(portVal).intValue();
        if (port < 0)         port=getSSLServerPort(port);
        String path=SSLServerSOContainer.DEFAULT_NAME;
        Object pathVal=map.get(PATH_PROP);
        if (pathVal != null) {
          if (!(pathVal instanceof String))           throw new IllegalArgumentException(""String_Node_Str"");
          path=(String)pathVal;
        }
        newID=createSSLServerID(hostname,port,path);
      }
      Object bindAddressVal=map.get(BINDADDRESS_PROP);
      if (bindAddressVal != null) {
        if (bindAddressVal instanceof InetAddress) {
          bindAddress=(InetAddress)bindAddressVal;
        }
 else         throw new IllegalArgumentException(""String_Node_Str"");
      }
      Object o=map.get(KEEPALIVE_PROP);
      if (o == null)       o=map.get(KEEPALIVE_PROP.toLowerCase());
      ka=getIntegerFromArg(o);
      Object needClientAuthVal=map.get(NEEDCLIENTAUTH_PROP);
      if (needClientAuthVal instanceof Boolean)       needClientAuth=((Boolean)needClientAuthVal).booleanValue();
      Object wantClientAuthVal=map.get(WANTCLIENTAUTH_PROP);
      if (wantClientAuthVal instanceof Boolean)       wantClientAuth=((Boolean)wantClientAuthVal).booleanValue();
    }
 else     if (args.length > 1) {
      if (args[0] instanceof String || args[0] instanceof ID)       newID=getIDFromArg(args[0]);
      if (args[1] instanceof String || args[1] instanceof Integer)       ka=getIntegerFromArg(args[1]);
    }
 else     newID=getIDFromArg(args[0]);
  }
  if (newID == null) {
    int port=-1;
    if (SSLServerSOContainer.DEFAULT_FALLBACK_PORT) {
      port=getFreePort();
    }
 else     if (portIsFree(SSLServerSOContainer.DEFAULT_PORT)) {
      port=SSLServerSOContainer.DEFAULT_PORT;
    }
    if (port < 0)     throw new IDCreateException(""String_Node_Str"" + SSLServerSOContainer.DEFAULT_FALLBACK_PORT + ""String_Node_Str""+ SSLServerSOContainer.DEFAULT_PORT);
    newID=IDFactory.getDefault().createStringID(SSLServerSOContainer.DEFAULT_PROTOCOL + ""String_Node_Str"" + SSLServerSOContainer.DEFAULT_HOST+ ""String_Node_Str""+ port+ SSLServerSOContainer.DEFAULT_NAME);
  }
  if (ka == null)   ka=new Integer(SSLServerSOContainer.DEFAULT_KEEPALIVE);
  return new GenericContainerArgs(newID,ka,bindAddress,wantClientAuth,needClientAuth);
}","/** 
 * @param args arguments
 * @return GenericContainerArgs the client args created
 * @throws IDCreateException if the client args cannot be retrieved from given args
 * @throws ContainerIntentException 
 * @since 3.0
 */
protected GenericContainerArgs getServerArgs(Object[] args) throws IDCreateException, ContainerIntentException {
  ID newID=null;
  Integer ka=null;
  InetAddress bindAddress=null;
  boolean wantClientAuth=false;
  boolean needClientAuth=false;
  boolean privateIntent=false;
  if (args != null && args.length > 0) {
    if (args[0] instanceof Map) {
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> map=(Map<String,Object>)args[0];
      Object idVal=map.get(ID_PROP);
      if (idVal != null) {
        newID=getIDFromArg(idVal);
      }
 else {
        String hostname=SSLServerSOContainer.DEFAULT_HOST;
        Object hostVal=map.get(HOSTNAME_PROP);
        if (hostVal != null) {
          if (!(hostVal instanceof String))           throw new IllegalArgumentException(""String_Node_Str"");
          hostname=(String)hostVal;
        }
        int port=-1;
        Object portVal=map.get(PORT_PROP);
        if (portVal != null)         port=getIntegerFromArg(portVal).intValue();
        if (port < 0)         port=getSSLServerPort(port);
        String path=SSLServerSOContainer.DEFAULT_NAME;
        Object pathVal=map.get(PATH_PROP);
        if (pathVal != null) {
          if (!(pathVal instanceof String))           throw new IllegalArgumentException(""String_Node_Str"");
          path=(String)pathVal;
        }
        newID=createSSLServerID(hostname,port,path);
      }
      Object bindAddressVal=map.get(BINDADDRESS_PROP);
      if (bindAddressVal != null) {
        if (bindAddressVal instanceof InetAddress) {
          bindAddress=(InetAddress)bindAddressVal;
        }
 else         throw new IllegalArgumentException(""String_Node_Str"");
      }
      Object o=map.get(KEEPALIVE_PROP);
      if (o == null)       o=map.get(KEEPALIVE_PROP.toLowerCase());
      ka=getIntegerFromArg(o);
      Object needClientAuthVal=map.get(NEEDCLIENTAUTH_PROP);
      if (needClientAuthVal instanceof Boolean)       needClientAuth=((Boolean)needClientAuthVal).booleanValue();
      Object wantClientAuthVal=map.get(WANTCLIENTAUTH_PROP);
      if (wantClientAuthVal instanceof Boolean)       wantClientAuth=((Boolean)wantClientAuthVal).booleanValue();
      privateIntent=ContainerInstantiatorUtils.containsPrivateIntent(map);
    }
 else     if (args.length > 1) {
      if (args[0] instanceof String || args[0] instanceof ID)       newID=getIDFromArg(args[0]);
      if (args[1] instanceof String || args[1] instanceof Integer)       ka=getIntegerFromArg(args[1]);
    }
 else     newID=getIDFromArg(args[0]);
  }
  if (newID == null) {
    int port=-1;
    if (SSLServerSOContainer.DEFAULT_FALLBACK_PORT) {
      port=getFreePort();
    }
 else     if (portIsFree(SSLServerSOContainer.DEFAULT_PORT)) {
      port=SSLServerSOContainer.DEFAULT_PORT;
    }
    if (port < 0)     throw new IDCreateException(""String_Node_Str"" + SSLServerSOContainer.DEFAULT_FALLBACK_PORT + ""String_Node_Str""+ SSLServerSOContainer.DEFAULT_PORT);
    newID=IDFactory.getDefault().createStringID(SSLServerSOContainer.DEFAULT_PROTOCOL + ""String_Node_Str"" + SSLServerSOContainer.DEFAULT_HOST+ ""String_Node_Str""+ port+ SSLServerSOContainer.DEFAULT_NAME);
  }
  if (ka == null)   ka=new Integer(SSLServerSOContainer.DEFAULT_KEEPALIVE);
  if (privateIntent)   ContainerInstantiatorUtils.checkPrivate(newID);
  return new GenericContainerArgs(newID,ka,bindAddress,wantClientAuth,needClientAuth);
}",0.955616596790516
94115,"protected long getDefaultTimeout(){
synchronized (this) {
    if (defaultTimeout == null) {
      Object o=getRemoteServiceReference().getProperty(Constants.OSGI_BASIC_TIMEOUT_INTENT);
      if (o != null) {
        if (o instanceof Long)         defaultTimeout=(Long)o;
 else         if (o instanceof Integer)         defaultTimeout=((Integer)o).longValue();
 else         if (o instanceof String)         defaultTimeout=Long.valueOf((String)o);
      }
 else       defaultTimeout=IRemoteCall.DEFAULT_TIMEOUT;
    }
  }
  return defaultTimeout;
}","protected long getDefaultTimeout(){
synchronized (this) {
    if (defaultTimeout == null) {
      Object o=getRemoteServiceReference().getProperty(Constants.OSGI_BASIC_TIMEOUT_INTENT);
      if (o != null) {
        if (o instanceof Number)         defaultTimeout=((Number)o).longValue();
 else         if (o instanceof String)         defaultTimeout=Long.valueOf((String)o);
      }
 else       defaultTimeout=IRemoteCall.DEFAULT_TIMEOUT;
    }
  }
  return defaultTimeout;
}",0.8582600195503421
94116,"long getOSGiTimeout(){
  long timeout=30000;
  Object timeoutval=reference.getProperty(OSGI_BASIC_TIMEOUT);
  if (timeoutval != null) {
    if (timeoutval instanceof Long) {
      timeout=((Long)timeoutval).longValue();
    }
 else     if (timeoutval instanceof Integer) {
      timeout=((Integer)timeoutval).longValue();
    }
 else     if (timeoutval instanceof String) {
      timeout=Long.valueOf((String)timeoutval).longValue();
    }
  }
  return timeout;
}","long getOSGiTimeout(){
  long timeout=DEFAULT_TIMEOUT;
  Object timeoutval=reference.getProperty(OSGI_BASIC_TIMEOUT);
  if (timeoutval != null) {
    if (timeoutval instanceof Number)     timeout=((Number)timeoutval).longValue();
 else     if (timeoutval instanceof String)     timeout=Long.valueOf((String)timeoutval).longValue();
  }
  return timeout;
}",0.452322738386308
94117,"@Descriptor(""String_Node_Str"") public RemoteServiceAdmin.ExportReference exportservice(CommandSession cs,@Descriptor(""String_Node_Str"") long serviceid,@Parameter(names={""String_Node_Str""},absentValue=""String_Node_Str"") @Descriptor(""String_Node_Str"") Map<String,?> map){
  ServiceReference<?> ref=null;
  try {
    ServiceReference<?>[] refs=context.getAllServiceReferences(null,""String_Node_Str"" + Constants.SERVICE_ID + ""String_Node_Str""+ String.valueOf(serviceid)+ ""String_Node_Str"");
    if (refs == null || refs.length < 1)     cs.getConsole().println(""String_Node_Str"" + String.valueOf(serviceid));
    ref=refs[0];
  }
 catch (  InvalidSyntaxException e) {
    e.printStackTrace(cs.getConsole());
    return null;
  }
  Map<String,Object> op=(map == null) ? new HashMap<String,Object>() : new HashMap<String,Object>(map);
  if (!op.containsKey(RemoteConstants.SERVICE_EXPORTED_INTERFACES))   op.put(RemoteConstants.SERVICE_EXPORTED_INTERFACES,""String_Node_Str"");
  if (!op.containsKey(RemoteConstants.SERVICE_EXPORTED_CONFIGS))   op.put(RemoteConstants.SERVICE_EXPORTED_CONFIGS,DEFAULT_EXPORT_CONFIG);
  Collection<org.osgi.service.remoteserviceadmin.ExportRegistration> regs=getRSA().exportService(ref,op);
  if (regs != null)   for (  org.osgi.service.remoteserviceadmin.ExportRegistration reg : regs) {
    Throwable t=reg.getException();
    if (t != null)     t.printStackTrace(cs.getConsole());
 else {
      RemoteServiceAdmin.ExportReference er=(RemoteServiceAdmin.ExportReference)reg.getExportReference();
      if (er != null) {
        cs.getConsole().println(""String_Node_Str"" + String.valueOf(serviceid) + ""String_Node_Str"");
        return er;
      }
    }
  }
  return null;
}","@Descriptor(""String_Node_Str"") public RemoteServiceAdmin.ExportReference exportservice(CommandSession cs,@Descriptor(""String_Node_Str"") long serviceid){
  return exportservice(cs,serviceid,null);
}",0.183641160949868
94118,"@Descriptor(""String_Node_Str"") public String rsadebug(@Descriptor(""String_Node_Str"") boolean on){
  String msg=null;
synchronized (this) {
    if (debugReg == null) {
      if (on) {
        debugOn();
        msg=""String_Node_Str"";
      }
 else       msg=""String_Node_Str"";
    }
 else {
      if (debugReg != null) {
        debugOff();
        msg=""String_Node_Str"";
      }
 else       msg=""String_Node_Str"";
    }
  }
  return msg;
}","@Descriptor(""String_Node_Str"") public String rsadebug(@Descriptor(""String_Node_Str"") boolean on){
synchronized (this) {
    if (debugReg == null) {
      if (on) {
        debugOn();
        return ""String_Node_Str"";
      }
 else       return ""String_Node_Str"";
    }
 else {
      if (on) {
        return ""String_Node_Str"";
      }
 else {
        debugOff();
        return ""String_Node_Str"";
      }
    }
  }
}",0.6198830409356725
94119,"@Descriptor(""String_Node_Str"") public RemoteServiceAdmin.ExportReference updateservice(CommandSession cs,@Descriptor(""String_Node_Str"") String endpointid,@Descriptor(""String_Node_Str"") Map<String,?> map){
  RemoteServiceAdmin.ExportRegistration ereg=getExportRegistrationForId(endpointid);
  if (ereg == null) {
    cs.getConsole().println(""String_Node_Str"" + endpointid);
    return null;
  }
  RemoteServiceAdmin.ExportReference eref=(RemoteServiceAdmin.ExportReference)ereg.getExportReference();
  if (eref == null) {
    cs.getConsole().println(""String_Node_Str"" + endpointid + ""String_Node_Str"");
    return null;
  }
  ereg.update(map);
  return eref;
}","@Descriptor(""String_Node_Str"") public RemoteServiceAdmin.ExportReference updateservice(CommandSession cs,@Descriptor(""String_Node_Str"") String endpointid,@Descriptor(""String_Node_Str"") Map<String,?> map){
  RemoteServiceAdmin.ExportRegistration ereg=getExportRegistrationForId(endpointid);
  if (ereg == null) {
    cs.getConsole().println(""String_Node_Str"" + endpointid);
    return null;
  }
  RemoteServiceAdmin.ExportReference eref=(RemoteServiceAdmin.ExportReference)ereg.getExportReference();
  if (eref == null) {
    cs.getConsole().println(""String_Node_Str"" + endpointid + ""String_Node_Str"");
    return null;
  }
  ereg.update(map);
  cs.getConsole().println(""String_Node_Str"" + endpointid + ""String_Node_Str"");
  return eref;
}",0.9434502505368648
94120,"@Descriptor(""String_Node_Str"") public String rsadebug(@Descriptor(""String_Node_Str"") boolean on){
synchronized (this) {
    if (debugReg == null) {
      if (on) {
        debugOn();
        return ""String_Node_Str"";
      }
 else       return ""String_Node_Str"";
    }
 else {
      if (on) {
        return ""String_Node_Str"";
      }
 else {
        debugOff();
        return ""String_Node_Str"";
      }
    }
  }
}","@Descriptor(""String_Node_Str"") public String rsadebug(@Descriptor(""String_Node_Str"") boolean on){
synchronized (this) {
    if (debugReg == null) {
      if (on) {
        debugOn();
        return ""String_Node_Str"";
      }
 else       return ""String_Node_Str"";
    }
 else {
      if (on)       return ""String_Node_Str"";
 else {
        debugOff();
        return ""String_Node_Str"";
      }
    }
  }
}",0.9097560975609756
94121,"protected void runRequest() throws Exception {
  int code=-1;
  try {
    setupProxies();
    setupAuthentication();
    setupTimeouts();
    URLConnection urlConnection=directoryOrFile.openConnection();
    if (directoryOrFile.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
      urlConnection.setUseCaches(false);
    }
    urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    IURLConnectionModifier connectionModifier=Activator.getDefault().getURLConnectionModifier();
    if (connectionModifier != null) {
      connectionModifier.setSocketFactoryForConnection(urlConnection);
    }
    if (urlConnection instanceof HttpURLConnection) {
      HttpURLConnection httpConnection=(HttpURLConnection)urlConnection;
      httpConnection.setRequestMethod(""String_Node_Str"");
      httpConnection.connect();
    }
 else {
      InputStream ins=urlConnection.getInputStream();
      ins.close();
    }
    code=getResponseCode(urlConnection);
    if (isHTTP()) {
      if (code == HttpURLConnection.HTTP_OK) {
      }
 else       if (code == HttpURLConnection.HTTP_NOT_FOUND) {
        throw new BrowseFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile.toString()),code);
      }
 else       if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else       if (code == HttpURLConnection.HTTP_FORBIDDEN) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else       if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else {
        throw new BrowseFileTransferException(NLS.bind(""String_Node_Str"",new Integer(code)),code);
      }
    }
    remoteFiles=new IRemoteFile[1];
    remoteFiles[0]=new URLRemoteFile(urlConnection.getLastModified(),urlConnection.getContentLength(),fileID);
  }
 catch (  final FileNotFoundException e) {
    throw new IncomingFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile.toString()),404);
  }
catch (  Exception e) {
    Exception except=(e instanceof BrowseFileTransferException) ? e : new BrowseFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile),e,code);
    throw except;
  }
}","protected void runRequest() throws Exception {
  int code=-1;
  try {
    setupProxies();
    setupAuthentication();
    setupTimeouts();
    URLConnection urlConnection=directoryOrFile.openConnection();
    if (directoryOrFile.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
      urlConnection.setUseCaches(false);
    }
    urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    IURLConnectionModifier connectionModifier=Activator.getDefault().getURLConnectionModifier();
    if (connectionModifier != null) {
      connectionModifier.setSocketFactoryForConnection(urlConnection);
    }
    if (urlConnection instanceof HttpURLConnection) {
      HttpURLConnection httpConnection=(HttpURLConnection)urlConnection;
      httpConnection.setRequestMethod(""String_Node_Str"");
      httpConnection.connect();
    }
 else {
      InputStream ins=urlConnection.getInputStream();
      ins.close();
    }
    code=getResponseCode(urlConnection);
    if (isHTTP()) {
      if (code == HttpURLConnection.HTTP_OK) {
      }
 else       if (code == HttpURLConnection.HTTP_NOT_FOUND) {
        throw new BrowseFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile.toString()),code);
      }
 else       if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else       if (code == HttpURLConnection.HTTP_FORBIDDEN) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else       if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else {
        throw new BrowseFileTransferException(NLS.bind(""String_Node_Str"",new Integer(code),urlConnection.getHeaderField(0)),code);
      }
    }
    remoteFiles=new IRemoteFile[1];
    remoteFiles[0]=new URLRemoteFile(urlConnection.getLastModified(),urlConnection.getContentLength(),fileID);
  }
 catch (  final FileNotFoundException e) {
    throw new IncomingFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile.toString()),404);
  }
catch (  Exception e) {
    Exception except=(e instanceof BrowseFileTransferException) ? e : new BrowseFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile),e,code);
    throw except;
  }
}",0.9929824561403509
94122,"public synchronized long getRemoteServiceId(){
  EndpointDescription ed=getEndpointDescription();
  return (ed == null) ? 0 : ed.getRemoteServiceId();
}","public synchronized long getRemoteServiceId(){
  if (importEndpoint == null)   return 0;
  IRemoteServiceReference ref=importEndpoint.rsReference;
  if (ref == null)   return 0;
  return ref.getID().getContainerRelativeID();
}",0.3386243386243386
94123,"public boolean triggerDiscovery(){
  return false;
}","/** 
 * @return A DiscoveryLocator (Container)
 */
public boolean triggerDiscovery(){
  return false;
}",0.6709677419354839
94124,"/** 
 * called when the bundle is started.
 * @param context the bundle context.
 * @throws Exception not thrown.
 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)
 */
public void start(final BundleContext context) throws Exception {
  instance=this;
  this.context=context;
  final ServiceReference logRef=context.getServiceReference(""String_Node_Str"");
  if (logRef != null) {
    RemoteOSGiServiceImpl.log=(LogService)context.getService(logRef);
  }
  if (remoting == null) {
    remoting=new RemoteOSGiServiceImpl();
  }
  context.registerService(new String[]{RemoteOSGiService.class.getName(),Remoting.class.getName()},remoting,null);
  if (!""String_Node_Str"".equals(context.getProperty(RemoteOSGiServiceImpl.REGISTER_DEFAULT_TCP_CHANNEL))) {
    final Dictionary properties=new Hashtable();
    properties.put(NetworkChannelFactory.PROTOCOL_PROPERTY,TCPChannelFactory.PROTOCOL);
    context.registerService(NetworkChannelFactory.class.getName(),new TCPChannelFactory(),properties);
  }
}","/** 
 * called when the bundle is started.
 * @param context the bundle context.
 * @throws Exception not thrown.
 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)
 */
public void start(final BundleContext context) throws Exception {
  instance=this;
  this.context=context;
  final ServiceReference logRef=context.getServiceReference(""String_Node_Str"");
  if (logRef != null) {
    RemoteOSGiServiceImpl.log=(LogService)context.getService(logRef);
  }
  if (DELETE_PROXY_BUNDLES_ON_INIT)   deleteProxyBundles(context);
  if (remoting == null) {
    remoting=new RemoteOSGiServiceImpl();
  }
  context.registerService(new String[]{RemoteOSGiService.class.getName(),Remoting.class.getName()},remoting,null);
  if (!""String_Node_Str"".equals(context.getProperty(RemoteOSGiServiceImpl.REGISTER_DEFAULT_TCP_CHANNEL))) {
    final Dictionary properties=new Hashtable();
    properties.put(NetworkChannelFactory.PROTOCOL_PROPERTY,TCPChannelFactory.PROTOCOL);
    context.registerService(NetworkChannelFactory.class.getName(),new TCPChannelFactory(),properties);
  }
}",0.9683813119395942
94125,"public void open(){
  final IChatRoomManager manager=(IChatRoomManager)view.getRootChatRoomContainer();
  view.joinRoom(manager.getChatRoomInfo(channel),""String_Node_Str"");
}","public void open(){
  IChatRoomContainer container=view.getRootChatRoomContainer();
  final IChatRoomManager manager=(IChatRoomManager)container.getAdapter(IChatRoomManager.class);
  view.joinRoom(manager.getChatRoomInfo(channel),""String_Node_Str"");
}",0.6776470588235294
94126,"/** 
 * @param event the service event
 * @param listeners map of listeners
 * @since 3.0
 */
protected void handleEvent(ServiceEvent event,Map listeners){
switch (event.getType()) {
case ServiceEvent.MODIFIED:
    handleServiceModifying(event.getServiceReference());
  break;
case ServiceEvent.REGISTERED:
handleServiceRegistering(event.getServiceReference());
break;
default :
break;
}
}","/** 
 * @param event the service event
 * @param listeners map of listeners
 * @since 3.0
 */
protected void handleEvent(ServiceEvent event,Map listeners){
switch (event.getType()) {
case ServiceEvent.MODIFIED:
    handleServiceModifying(event.getServiceReference());
  break;
case ServiceEvent.REGISTERED:
handleServiceRegistering(event.getServiceReference());
break;
case ServiceEvent.UNREGISTERING:
handleServiceUnregistering(event.getServiceReference());
break;
default :
break;
}
}",0.8891428571428571
94127,"private void stopProxyServiceFactoryBundle(){
  if (proxyServiceFactoryBundleContext != null) {
    try {
      proxyServiceFactoryBundleContext.getBundle().stop();
    }
 catch (    Exception e) {
    }
    proxyServiceFactoryBundleContext=null;
  }
  uninstallProxyBundles();
}","private void stopProxyServiceFactoryBundle(){
  if (proxyServiceFactoryBundleContext != null) {
    try {
      proxyServiceFactoryBundleContext.getBundle().stop();
    }
 catch (    Exception e) {
    }
    proxyServiceFactoryBundleContext=null;
  }
}",0.9453860640301318
94128,"public BundleContext getProxyServiceFactoryBundleContext(EndpointDescription endpointDescription){
  String edId=endpointDescription.getId();
  Bundle proxyBundle=null;
  final BundleContext bc=getContext();
  if (bc != null)   for (  Bundle b : bc.getBundles())   if (b.getSymbolicName().equals(edId)) {
    proxyBundle=b;
    break;
  }
  if (proxyBundle == null) {
    final Manifest mf=new Manifest();
    final Attributes attr=mf.getMainAttributes();
    attr.putValue(""String_Node_Str"",""String_Node_Str"");
    attr.putValue(""String_Node_Str"",""String_Node_Str"");
    attr.putValue(""String_Node_Str"",new StringBuffer(RSA_PROXY_PREFIX).append(edId).toString());
    attr.putValue(""String_Node_Str"",""String_Node_Str"");
    attr.putValue(""String_Node_Str"",""String_Node_Str"");
    final ByteArrayOutputStream bout=new ByteArrayOutputStream();
    try {
      final JarOutputStream out=new JarOutputStream(bout,mf);
      out.flush();
      out.finish();
      out.close();
      proxyBundle=bc.installBundle(edId,new ByteArrayInputStream(bout.toByteArray()));
    }
 catch (    Throwable t) {
      LogUtility.logError(""String_Node_Str"",DebugOptions.REMOTE_SERVICE_ADMIN,Activator.class,""String_Node_Str"",t);
    }
  }
  if (proxyBundle != null && proxyBundle.getState() != Bundle.ACTIVE) {
    try {
      proxyBundle.start();
    }
 catch (    BundleException e) {
      LogUtility.logError(""String_Node_Str"",DebugOptions.REMOTE_SERVICE_ADMIN,Activator.class,""String_Node_Str"" + proxyBundle.getSymbolicName(),e);
    }
  }
  return (proxyBundle != null) ? proxyBundle.getBundleContext() : proxyServiceFactoryBundleContext;
}","public BundleContext getProxyServiceFactoryBundleContext(EndpointDescription endpointDescription){
  return proxyServiceFactoryBundleContext;
}",0.1616732617297908
94129,"private void initializeProxyServiceFactoryBundle() throws Exception {
  for (  Bundle b : context.getBundles()) {
    if (RSA_PROXY_BUNDLE_SYMBOLIC_ID.equals(b.getSymbolicName())) {
      b.start();
      proxyServiceFactoryBundleContext=b.getBundleContext();
    }
  }
  if (proxyServiceFactoryBundleContext == null)   throw new IllegalStateException(""String_Node_Str"" + RSA_PROXY_BUNDLE_SYMBOLIC_ID + ""String_Node_Str"");
  uninstallProxyBundles();
}","private void initializeProxyServiceFactoryBundle() throws Exception {
  for (  Bundle b : context.getBundles()) {
    if (RSA_PROXY_BUNDLE_SYMBOLIC_ID.equals(b.getSymbolicName())) {
      b.start();
      proxyServiceFactoryBundleContext=b.getBundleContext();
    }
  }
  if (proxyServiceFactoryBundleContext == null)   throw new IllegalStateException(""String_Node_Str"" + RSA_PROXY_BUNDLE_SYMBOLIC_ID + ""String_Node_Str"");
}",0.9691428571428572
94130,"private void stopProxyServiceFactoryBundle(){
  if (proxyServiceFactoryBundleContext != null) {
    try {
      proxyServiceFactoryBundleContext.getBundle().stop();
    }
 catch (    Exception e) {
    }
    proxyServiceFactoryBundleContext=null;
  }
}","private void stopProxyServiceFactoryBundle(){
  if (proxyServiceFactoryBundleContext != null) {
    try {
      proxyServiceFactoryBundleContext.getBundle().stop();
    }
 catch (    Exception e) {
    }
    proxyServiceFactoryBundleContext=null;
  }
  uninstallProxyBundles();
}",0.9453860640301318
94131,"public BundleContext getProxyServiceFactoryBundleContext(){
  return proxyServiceFactoryBundleContext;
}","public BundleContext getProxyServiceFactoryBundleContext(EndpointDescription endpointDescription){
  Bundle b=generateProxyBundle(endpointDescription);
  if (b != null)   return b.getBundleContext();
  return proxyServiceFactoryBundleContext;
}",0.5977011494252874
94132,"private void initializeProxyServiceFactoryBundle() throws Exception {
  for (  Bundle b : context.getBundles()) {
    if (RSA_PROXY_BUNDLE_SYMBOLIC_ID.equals(b.getSymbolicName())) {
      b.start();
      proxyServiceFactoryBundleContext=b.getBundleContext();
    }
  }
  if (proxyServiceFactoryBundleContext == null)   throw new IllegalStateException(""String_Node_Str"" + RSA_PROXY_BUNDLE_SYMBOLIC_ID + ""String_Node_Str"");
}","private void initializeProxyServiceFactoryBundle() throws Exception {
  for (  Bundle b : context.getBundles()) {
    if (RSA_PROXY_BUNDLE_SYMBOLIC_ID.equals(b.getSymbolicName())) {
      b.start();
      proxyServiceFactoryBundleContext=b.getBundleContext();
    }
  }
  if (proxyServiceFactoryBundleContext == null)   throw new IllegalStateException(""String_Node_Str"" + RSA_PROXY_BUNDLE_SYMBOLIC_ID + ""String_Node_Str"");
  uninstallProxyBundles();
}",0.9691428571428572
94133,"public BundleContext getProxyServiceFactoryBundleContext(EndpointDescription endpointDescription){
  Bundle b=generateProxyBundle(endpointDescription);
  if (b != null)   return b.getBundleContext();
  return proxyServiceFactoryBundleContext;
}","public BundleContext getProxyServiceFactoryBundleContext(EndpointDescription endpointDescription){
  String edId=endpointDescription.getId();
  Bundle proxyBundle=null;
  final BundleContext bc=getContext();
  if (bc != null)   for (  Bundle b : bc.getBundles())   if (b.getSymbolicName().equals(edId)) {
    proxyBundle=b;
    break;
  }
  if (proxyBundle == null) {
    final Manifest mf=new Manifest();
    final Attributes attr=mf.getMainAttributes();
    attr.putValue(""String_Node_Str"",""String_Node_Str"");
    attr.putValue(""String_Node_Str"",""String_Node_Str"");
    attr.putValue(""String_Node_Str"",new StringBuffer(RSA_PROXY_PREFIX).append(edId).toString());
    attr.putValue(""String_Node_Str"",""String_Node_Str"");
    attr.putValue(""String_Node_Str"",""String_Node_Str"");
    final ByteArrayOutputStream bout=new ByteArrayOutputStream();
    try {
      final JarOutputStream out=new JarOutputStream(bout,mf);
      out.flush();
      out.finish();
      out.close();
      proxyBundle=bc.installBundle(edId,new ByteArrayInputStream(bout.toByteArray()));
    }
 catch (    Throwable t) {
      LogUtility.logError(""String_Node_Str"",DebugOptions.REMOTE_SERVICE_ADMIN,Activator.class,""String_Node_Str"",t);
    }
  }
  if (proxyBundle != null && proxyBundle.getState() != Bundle.ACTIVE) {
    try {
      proxyBundle.start();
    }
 catch (    BundleException e) {
      LogUtility.logError(""String_Node_Str"",DebugOptions.REMOTE_SERVICE_ADMIN,Activator.class,""String_Node_Str"" + proxyBundle.getSymbolicName(),e);
    }
  }
  return (proxyBundle != null) ? proxyBundle.getBundleContext() : proxyServiceFactoryBundleContext;
}",0.1721925133689839
94134,"ImportEndpoint(ID importContainerID,IRemoteServiceContainerAdapter rsContainerAdapter,IRemoteServiceReference rsReference,IRemoteService rs,IRemoteServiceListener rsListener,ServiceRegistration proxyRegistration,EndpointDescription endpointDescription){
  this.importContainerID=importContainerID;
  this.rsContainerAdapter=rsContainerAdapter;
  this.endpointDescription=endpointDescription;
  this.rsReference=rsReference;
  this.rs=rs;
  this.rsListener=rsListener;
  this.proxyRegistration=proxyRegistration;
  this.rsContainerAdapter.addRemoteServiceListener(this.rsListener);
}","ImportEndpoint(IRemoteServiceContainer rsContainer,IRemoteServiceReference rsReference,IRemoteService rs,ServiceRegistration proxyRegistration,EndpointDescription endpointDescription){
  this.rsContainer=rsContainer;
  this.rsReference=rsReference;
  this.endpointDescription=endpointDescription;
  this.rs=rs;
  this.proxyRegistration=proxyRegistration;
  this.rsListener=new RemoteServiceListener();
  this.rsContainer.getContainerAdapter().addRemoteServiceListener(this.rsListener);
}",0.4714686623012161
94135,"private ImportEndpoint createAndRegisterProxy(final EndpointDescription endpointDescription,final IRemoteServiceContainer rsContainer,final IRemoteServiceReference selectedRsReference) throws Exception {
  final BundleContext proxyServiceFactoryContext=getProxyServiceFactoryContext(endpointDescription);
  if (proxyServiceFactoryContext == null)   throw new NullPointerException(""String_Node_Str"");
  final IRemoteServiceContainerAdapter containerAdapter=rsContainer.getContainerAdapter();
  ID rsContainerID=rsContainer.getContainer().getID();
  final IRemoteService rs=containerAdapter.getRemoteService(selectedRsReference);
  if (rs == null)   throw new NullPointerException(""String_Node_Str"" + selectedRsReference + ""String_Node_Str""+ rsContainerID);
  final Map proxyProperties=createProxyProperties(rsContainerID,endpointDescription,selectedRsReference,rs);
  endpointDescription.setPropertiesOverrides(proxyProperties);
  final List<String> originalTypes=endpointDescription.getInterfaces();
  final List<String> asyncServiceTypes=endpointDescription.getAsyncInterfaces();
  final List<String> serviceTypes=new ArrayList<String>(originalTypes);
  if (asyncServiceTypes != null)   for (  String ast : asyncServiceTypes)   if (ast != null && !serviceTypes.contains(ast))   serviceTypes.add(ast);
  ServiceRegistration proxyRegistration=AccessController.doPrivileged(new PrivilegedAction<ServiceRegistration>(){
    public ServiceRegistration run(){
      return proxyServiceFactoryContext.registerService((String[])serviceTypes.toArray(new String[serviceTypes.size()]),createProxyServiceFactory(endpointDescription,containerAdapter,selectedRsReference,rs),(Dictionary)PropertiesUtil.createDictionaryFromMap(proxyProperties));
    }
  }
);
  return new ImportEndpoint(rsContainerID,containerAdapter,selectedRsReference,rs,new RemoteServiceListener(),proxyRegistration,endpointDescription);
}","private ImportEndpoint createAndRegisterProxy(final EndpointDescription endpointDescription,final IRemoteServiceContainer rsContainer,final IRemoteServiceReference selectedRsReference) throws Exception {
  final BundleContext proxyServiceFactoryContext=getProxyServiceFactoryContext(endpointDescription);
  if (proxyServiceFactoryContext == null)   throw new NullPointerException(""String_Node_Str"");
  final IRemoteServiceContainerAdapter containerAdapter=rsContainer.getContainerAdapter();
  ID rsContainerID=rsContainer.getContainer().getID();
  final IRemoteService rs=containerAdapter.getRemoteService(selectedRsReference);
  if (rs == null)   throw new NullPointerException(""String_Node_Str"" + selectedRsReference + ""String_Node_Str""+ rsContainerID);
  final Map proxyProperties=createProxyProperties(rsContainerID,endpointDescription,selectedRsReference,rs);
  endpointDescription.setPropertiesOverrides(proxyProperties);
  final List<String> originalTypes=endpointDescription.getInterfaces();
  final List<String> asyncServiceTypes=endpointDescription.getAsyncInterfaces();
  final List<String> serviceTypes=new ArrayList<String>(originalTypes);
  if (asyncServiceTypes != null)   for (  String ast : asyncServiceTypes)   if (ast != null && !serviceTypes.contains(ast))   serviceTypes.add(ast);
  ServiceRegistration proxyRegistration=AccessController.doPrivileged(new PrivilegedAction<ServiceRegistration>(){
    public ServiceRegistration run(){
      return proxyServiceFactoryContext.registerService((String[])serviceTypes.toArray(new String[serviceTypes.size()]),createProxyServiceFactory(endpointDescription,containerAdapter,selectedRsReference,rs),(Dictionary)PropertiesUtil.createDictionaryFromMap(proxyProperties));
    }
  }
);
  return new ImportEndpoint(rsContainer,selectedRsReference,rs,proxyRegistration,endpointDescription);
}",0.9607476635514018
94136,"public void start(final BundleContext context) throws Exception {
}","public void start(final BundleContext context) throws Exception {
  if (ENABLED) {
    context.registerService(Namespace.class,new CompositeNamespace(),null);
    context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(""String_Node_Str"",new CompositeDiscoveryContainerInstantiator(),""String_Node_Str"",true,false),null);
    context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(""String_Node_Str"",new SingletonDiscoveryContainerInstantiator(),""String_Node_Str"",true,false),null);
    context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(""String_Node_Str"",new CompositeDiscoveryContainerInstantiator(),""String_Node_Str""),null);
    context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(""String_Node_Str"",new CompositeDiscoveryContainerInstantiator(),""String_Node_Str""),null);
    final Hashtable<String,Object> props=new Hashtable<String,Object>();
    props.put(IDiscoveryLocator.CONTAINER_NAME,CompositeDiscoveryContainer.NAME);
    props.put(Constants.SERVICE_RANKING,new Integer(1000));
    String[] clazzes=new String[]{IDiscoveryService.class.getName(),IDiscoveryLocator.class.getName(),IDiscoveryAdvertiser.class.getName()};
    context.registerService(clazzes,new ServiceFactory(){
      public Object getService(      final Bundle bundle,      final ServiceRegistration registration){
        final CompositeDiscoveryContainer cdc;
        cdc=new CompositeDiscoveryContainer(new HashSet());
        try {
          cdc.connect(null,null);
        }
 catch (        final ContainerConnectException e) {
          Trace.catching(Activator.PLUGIN_ID,Activator.PLUGIN_ID + ""String_Node_Str"",this.getClass(),""String_Node_Str"",e);
          return null;
        }
        Filter filter=null;
        try {
          final String filter2=""String_Node_Str"" + Constants.OBJECTCLASS + ""String_Node_Str""+ IDiscoveryAdvertiser.class.getName()+ ""String_Node_Str""+ IDiscoveryLocator.CONTAINER_NAME+ ""String_Node_Str""+ CompositeDiscoveryContainer.NAME+ ""String_Node_Str"";
          filter=context.createFilter(filter2);
          context.addServiceListener(new ServiceListener(){
            public void serviceChanged(            final ServiceEvent arg0){
              final Object anIDS=context.getService(arg0.getServiceReference());
switch (arg0.getType()) {
case ServiceEvent.REGISTERED:
                cdc.addContainer(anIDS);
              break;
case ServiceEvent.UNREGISTERING:
            cdc.removeContainer(anIDS);
          break;
default :
        break;
    }
  }
}
,filter2);
}
 catch (final InvalidSyntaxException e) {
}
final ServiceTracker tracker=new ServiceTracker(context,filter,null);
tracker.open();
final Object[] services=tracker.getServices();
tracker.close();
if (services != null) {
for (int i=0; i < services.length; i++) {
  final Object obj=services[i];
  if (obj != cdc)   cdc.addContainer(obj);
}
}
return cdc;
}
public void ungetService(final Bundle bundle,final ServiceRegistration registration,final Object service){
((CompositeDiscoveryContainer)service).dispose();
}
}
,props);
}
}",0.0418619181505779
94137,"public static Map<String,Object> copySerializableProperties(Map<String,?> source,Map<String,Object> target){
  for (  String key : source.keySet()) {
    Object value=source.get(key);
    try {
      testSerializable(value);
      target.put(key,value);
    }
 catch (    Exception e) {
      LogUtility.logWarning(""String_Node_Str"",DebugOptions.EXCEPTIONS_CATCHING,PropertiesUtil.class,""String_Node_Str"" + key + ""String_Node_Str"",e);
    }
  }
  return target;
}","public static Map<String,Object> copySerializableProperties(Map<String,?> source,Map<String,Object> target){
  if (source == null)   return target;
  for (  String key : source.keySet()) {
    Object value=source.get(key);
    try {
      testSerializable(value);
      target.put(key,value);
    }
 catch (    Exception e) {
      LogUtility.logWarning(""String_Node_Str"",DebugOptions.EXCEPTIONS_CATCHING,PropertiesUtil.class,""String_Node_Str"" + key + ""String_Node_Str"",e);
    }
  }
  return target;
}",0.9595854922279792
94138,"public static ObjectInputStream create(BundleContext ctxt,InputStream ins) throws IOException {
  if (ctxt == null)   return new ObjectInputStream(ins);
  try {
    return new ClassResolverObjectInputStream(ctxt,ins,""String_Node_Str"" + IClassResolver.BUNDLE_PROP_NAME + ""String_Node_Str""+ ctxt.getBundle().getSymbolicName()+ ""String_Node_Str"");
  }
 catch (  SecurityException e) {
    throw new IOException(""String_Node_Str"",e);
  }
catch (  InvalidSyntaxException e) {
    throw new IOException(""String_Node_Str"",e);
  }
}","public static ObjectInputStream create(BundleContext ctxt,InputStream ins) throws IOException {
  return create(ctxt,ins,null);
}",0.3920367534456355
94139,"public EndpointDescriptionRSANode(EndpointDescription ed,ImportRegistration ir){
  this.endpointNode=(ir == null) ? new EndpointNode(ed) : new EndpointNode(ed,new org.eclipse.ecf.remoteserviceadmin.ui.endpoint.model.ImportRegistrationNode(ir));
  EndpointInterfacesNode ein=new EndpointInterfacesNode();
  for (  String intf : ed.getInterfaces())   ein.addChild(new EndpointPackageVersionNode(PropertyUtils.getPackageName(intf)));
  this.endpointNode.addChild(ein);
  List<String> aintfs=ed.getAsyncInterfaces();
  if (aintfs.size() > 0) {
    EndpointAsyncInterfacesNode ain=new EndpointAsyncInterfacesNode();
    for (    String intf : ed.getAsyncInterfaces())     ain.addChild(new EndpointPackageVersionNode(PropertyUtils.getPackageName(intf)));
    this.endpointNode.addChild(ain);
  }
  this.endpointNode.addChild(new EndpointIDNode());
  EndpointHostGroupNode idp=new EndpointHostGroupNode(Messages.EndpointDiscoveryView_REMOTE_HOST_NAME);
  idp.addChild(new EndpointNamespaceNode());
  idp.addChild(new EndpointRemoteServiceIDNode());
  org.eclipse.ecf.core.identity.ID connectTarget=ed.getConnectTargetID();
  if (connectTarget != null)   idp.addChild(new EndpointConnectTargetIDNode());
  idp.addChild(new EndpointServiceIDNode());
  idp.addChild(new EndpointIntentsNode());
  idp.addChild(new EndpointConfigTypesNode());
  idp.addChild(new EndpointFrameworkIDNode());
  idp.addChild(new EndpointTimestampNode());
  String filter=ed.getRemoteServiceFilter();
  if (filter != null)   idp.addChild(new EndpointRemoteServiceFilterNode());
  this.endpointNode.addChild(idp);
}","public EndpointDescriptionRSANode(EndpointDescription ed,ImportRegistration ir){
  this.endpointNode=(ir == null) ? new EndpointNode(ed) : new EndpointNode(ed,(ImportReference)ir.getImportReference());
  EndpointInterfacesNode ein=new EndpointInterfacesNode();
  for (  String intf : ed.getInterfaces())   ein.addChild(new EndpointPackageVersionNode(PropertyUtils.getPackageName(intf)));
  this.endpointNode.addChild(ein);
  List<String> aintfs=ed.getAsyncInterfaces();
  if (aintfs.size() > 0) {
    EndpointAsyncInterfacesNode ain=new EndpointAsyncInterfacesNode();
    for (    String intf : ed.getAsyncInterfaces())     ain.addChild(new EndpointPackageVersionNode(PropertyUtils.getPackageName(intf)));
    this.endpointNode.addChild(ain);
  }
  this.endpointNode.addChild(new EndpointIDNode());
  EndpointHostGroupNode idp=new EndpointHostGroupNode(Messages.EndpointDiscoveryView_REMOTE_HOST_NAME);
  idp.addChild(new EndpointNamespaceNode());
  idp.addChild(new EndpointRemoteServiceIDNode());
  org.eclipse.ecf.core.identity.ID connectTarget=ed.getConnectTargetID();
  if (connectTarget != null)   idp.addChild(new EndpointConnectTargetIDNode());
  idp.addChild(new EndpointServiceIDNode());
  idp.addChild(new EndpointIntentsNode());
  idp.addChild(new EndpointConfigTypesNode());
  idp.addChild(new EndpointFrameworkIDNode());
  idp.addChild(new EndpointTimestampNode());
  String filter=ed.getRemoteServiceFilter();
  if (filter != null)   idp.addChild(new EndpointRemoteServiceFilterNode());
  this.endpointNode.addChild(idp);
}",0.9663353638986856
94140,"/** 
 * @since 3.0
 */
protected void handleECFEndpointRemoved(org.osgi.service.remoteserviceadmin.EndpointDescription endpointDescription){
  trace(""String_Node_Str"",""String_Node_Str"" + endpointDescription);
  RemoteServiceAdmin rsa=(RemoteServiceAdmin)getRemoteServiceAdmin();
  List<RemoteServiceAdmin.ImportRegistration> importedRegistrations=rsa.getImportedRegistrations();
  org.eclipse.ecf.osgi.services.remoteserviceadmin.EndpointDescription ed=(org.eclipse.ecf.osgi.services.remoteserviceadmin.EndpointDescription)endpointDescription;
  for (  RemoteServiceAdmin.ImportRegistration importedRegistration : importedRegistrations) {
    if (importedRegistration.match(ed)) {
      trace(""String_Node_Str"",""String_Node_Str"" + importedRegistration);
      importedRegistration.close();
    }
  }
}","/** 
 * @since 3.0
 */
protected void handleECFEndpointRemoved(org.osgi.service.remoteserviceadmin.EndpointDescription endpointDescription){
  trace(""String_Node_Str"",""String_Node_Str"" + endpointDescription);
  RemoteServiceAdmin rsa=(RemoteServiceAdmin)getRemoteServiceAdmin();
  if (rsa != null) {
    List<RemoteServiceAdmin.ImportRegistration> importedRegistrations=rsa.getImportedRegistrations();
    org.eclipse.ecf.osgi.services.remoteserviceadmin.EndpointDescription ed=(org.eclipse.ecf.osgi.services.remoteserviceadmin.EndpointDescription)endpointDescription;
    for (    RemoteServiceAdmin.ImportRegistration importedRegistration : importedRegistrations) {
      if (importedRegistration.match(ed)) {
        trace(""String_Node_Str"",""String_Node_Str"" + importedRegistration);
        importedRegistration.close();
      }
    }
  }
}",0.9738601823708206
94141,"protected void handleServiceUnregistering(ServiceReference serviceReference){
  List<RemoteServiceAdmin.ExportRegistration> exportedRegistrations=((RemoteServiceAdmin)getRemoteServiceAdmin()).getExportedRegistrations();
  for (  RemoteServiceAdmin.ExportRegistration exportedRegistration : exportedRegistrations) {
    if (exportedRegistration.match(serviceReference)) {
      trace(""String_Node_Str"",""String_Node_Str"" + serviceReference);
      exportedRegistration.close();
    }
  }
}","protected void handleServiceUnregistering(ServiceReference serviceReference){
  RemoteServiceAdmin rsa=(RemoteServiceAdmin)getRemoteServiceAdmin();
  if (rsa != null) {
    List<RemoteServiceAdmin.ExportRegistration> exportedRegistrations=((RemoteServiceAdmin)getRemoteServiceAdmin()).getExportedRegistrations();
    for (    RemoteServiceAdmin.ExportRegistration exportedRegistration : exportedRegistrations) {
      if (exportedRegistration.match(serviceReference)) {
        trace(""String_Node_Str"",""String_Node_Str"" + serviceReference);
        exportedRegistration.close();
      }
    }
  }
}",0.8884792626728111
94142,"/** 
 * @since 3.0
 */
protected void handleECFEndpointAdded(EndpointDescription endpointDescription){
  trace(""String_Node_Str"",""String_Node_Str"" + endpointDescription);
  getRemoteServiceAdmin().importService(endpointDescription);
}","/** 
 * @since 3.0
 */
protected void handleECFEndpointAdded(EndpointDescription endpointDescription){
  trace(""String_Node_Str"",""String_Node_Str"" + endpointDescription);
  RemoteServiceAdmin rsa=(RemoteServiceAdmin)getRemoteServiceAdmin();
  if (rsa != null)   rsa.importService(endpointDescription);
}",0.8715083798882681
94143,"/** 
 * @since 4.1
 */
protected void handleECFEndpointModified(EndpointDescription endpoint){
  trace(""String_Node_Str"",""String_Node_Str"" + endpoint);
  RemoteServiceAdmin rsa=(RemoteServiceAdmin)getRemoteServiceAdmin();
  List<RemoteServiceAdmin.ImportRegistration> importedRegistrations=rsa.getImportedRegistrations();
  org.eclipse.ecf.osgi.services.remoteserviceadmin.EndpointDescription ed=(org.eclipse.ecf.osgi.services.remoteserviceadmin.EndpointDescription)endpoint;
  for (  RemoteServiceAdmin.ImportRegistration importedRegistration : importedRegistrations) {
    if (importedRegistration.match(ed)) {
      trace(""String_Node_Str"",""String_Node_Str"" + importedRegistration);
      importedRegistration.update(endpoint);
    }
  }
}","/** 
 * @since 4.1
 */
protected void handleECFEndpointModified(EndpointDescription endpoint){
  trace(""String_Node_Str"",""String_Node_Str"" + endpoint);
  RemoteServiceAdmin rsa=(RemoteServiceAdmin)getRemoteServiceAdmin();
  if (rsa != null) {
    List<RemoteServiceAdmin.ImportRegistration> importedRegistrations=rsa.getImportedRegistrations();
    org.eclipse.ecf.osgi.services.remoteserviceadmin.EndpointDescription ed=(org.eclipse.ecf.osgi.services.remoteserviceadmin.EndpointDescription)endpoint;
    for (    RemoteServiceAdmin.ImportRegistration importedRegistration : importedRegistrations) {
      if (importedRegistration.match(ed)) {
        trace(""String_Node_Str"",""String_Node_Str"" + importedRegistration);
        importedRegistration.update(endpoint);
      }
    }
  }
}",0.9718402095612312
94144,"protected void handleServiceModifying(ServiceReference serviceReference){
  List<RemoteServiceAdmin.ExportRegistration> exportedRegistrations=((RemoteServiceAdmin)getRemoteServiceAdmin()).getExportedRegistrations();
  for (  RemoteServiceAdmin.ExportRegistration exportedRegistration : exportedRegistrations) {
    if (exportedRegistration.match(serviceReference)) {
      trace(""String_Node_Str"",""String_Node_Str"" + serviceReference);
      EndpointDescription updatedED=(EndpointDescription)exportedRegistration.update(null);
      if (updatedED == null)       logWarning(""String_Node_Str"",""String_Node_Str"" + exportedRegistration.getException());
    }
  }
}","protected void handleServiceModifying(ServiceReference serviceReference){
  RemoteServiceAdmin rsa=(RemoteServiceAdmin)getRemoteServiceAdmin();
  if (rsa != null) {
    List<RemoteServiceAdmin.ExportRegistration> exportedRegistrations=rsa.getExportedRegistrations();
    for (    RemoteServiceAdmin.ExportRegistration exportedRegistration : exportedRegistrations) {
      if (exportedRegistration.match(serviceReference)) {
        trace(""String_Node_Str"",""String_Node_Str"" + serviceReference);
        EndpointDescription updatedED=(EndpointDescription)exportedRegistration.update(null);
        if (updatedED == null)         logWarning(""String_Node_Str"",""String_Node_Str"" + exportedRegistration.getException());
      }
    }
  }
}",0.8759856630824373
94145,"protected void handleServiceRegistering(ServiceReference serviceReference){
  String[] exportedInterfaces=PropertiesUtil.getExportedInterfaces(serviceReference);
  if (exportedInterfaces == null)   return;
  String[] serviceExportedConfigs=PropertiesUtil.getStringArrayFromPropertyValue(serviceReference.getProperty(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_CONFIGS));
  if (requireServiceExportedConfigs && (serviceExportedConfigs == null || Arrays.asList(serviceExportedConfigs).size() == 0))   return;
  Map<String,Object> exportProperties=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);
  exportProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_INTERFACES,exportedInterfaces);
  trace(""String_Node_Str"",""String_Node_Str"" + serviceReference + ""String_Node_Str""+ exportProperties);
  getRemoteServiceAdmin().exportService(serviceReference,exportProperties);
}","protected void handleServiceRegistering(ServiceReference serviceReference){
  String[] exportedInterfaces=PropertiesUtil.getExportedInterfaces(serviceReference);
  if (exportedInterfaces == null)   return;
  String[] serviceExportedConfigs=PropertiesUtil.getStringArrayFromPropertyValue(serviceReference.getProperty(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_CONFIGS));
  if (requireServiceExportedConfigs && (serviceExportedConfigs == null || Arrays.asList(serviceExportedConfigs).size() == 0))   return;
  Map<String,Object> exportProperties=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);
  exportProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_INTERFACES,exportedInterfaces);
  trace(""String_Node_Str"",""String_Node_Str"" + serviceReference + ""String_Node_Str""+ exportProperties);
  org.osgi.service.remoteserviceadmin.RemoteServiceAdmin rsa=getRemoteServiceAdmin();
  if (rsa != null)   rsa.exportService(serviceReference,exportProperties);
}",0.9513070220399796
94146,"private void makeActions(){
  startRSAAction=new Action(){
    public void run(){
      if (discovery != null)       try {
        discovery.startRSA();
        startRSAAction.setEnabled(false);
      }
 catch (      BundleException e) {
        logError(Messages.EndpointDiscoveryView_ERROR_RSA_START_FAILED,e);
        showMessage(Messages.EndpointDiscoveryView_ERROR_MSG_RSA_START_PREFIX + e.getMessage() + Messages.EndpointDiscoveryView_ERROR_MSG_SUFFIX);
      }
    }
  }
;
  startRSAAction.setText(Messages.EndpointDiscoveryView_START_RSA);
  startRSAAction.setToolTipText(Messages.EndpointDiscoveryView_START_RSA_SERVICE);
  startRSAAction.setEnabled(discovery.getRSA() == null);
  copyValueAction=new Action(){
    public void run(){
      Object o=((ITreeSelection)viewer.getSelection()).getFirstElement();
      String data=((EndpointPropertyNode)o).getPropertyValue().toString();
      if (data != null && data.length() > 0) {
        clipboard.setContents(new Object[]{data},new Transfer[]{TextTransfer.getInstance()});
      }
    }
  }
;
  copyValueAction.setText(Messages.EndpointDiscoveryView_COPY_PROPERTY_VALUE);
  copyValueAction.setToolTipText(Messages.EndpointDiscoveryView_COPY_PROPERTY_VALUE);
  copyValueAction.setImageDescriptor(RSAImageRegistry.DESC_PROPERTY_OBJ);
  copyNameAction=new Action(){
    public void run(){
      Object o=((ITreeSelection)viewer.getSelection()).getFirstElement();
      String data=((EndpointPropertyNode)o).getPropertyName();
      if (data != null && data.length() > 0) {
        clipboard.setContents(new Object[]{data},new Transfer[]{TextTransfer.getInstance()});
      }
    }
  }
;
  copyNameAction.setText(Messages.EndpointDiscoveryView_COPY_PROPERTY_NAME);
  copyNameAction.setToolTipText(Messages.EndpointDiscoveryView_COPY_PROPERTY_NAME);
  copyNameAction.setImageDescriptor(RSAImageRegistry.DESC_PROPERTY_OBJ);
  importAction=new Action(){
    public void run(){
      EndpointNode edNode=getEDNodeSelected();
      if (edNode != null) {
        RemoteServiceAdmin rsa=discovery.getRSA();
        if (rsa == null)         showMessage(Messages.EndpointDiscoveryView_ERROR_MSG_RSA_IS_NULL);
 else {
          EndpointDescription ed=edNode.getEndpointDescription();
          ImportRegistration reg=(ImportRegistration)rsa.importService(ed);
          Throwable exception=reg.getException();
          if (exception != null) {
            logError(Messages.EndpointDiscoveryView_ERROR_MSG_RSA_IMPORTSERVICE_FAILED,exception);
            showMessage(Messages.EndpointDiscoveryView_ERROR_MSG_RSA_IMPORTSERVICE_FAILED_PREFIX + exception.getMessage() + Messages.EndpointDiscoveryView_ERROR_MSG_SUFFIX);
          }
 else {
            edNode.setImportReg(new ImportRegistrationNode(reg));
            viewer.refresh();
          }
        }
      }
    }
  }
;
  importAction.setText(Messages.EndpointDiscoveryView_IMPORT_REMOTE_SERVICE);
  importAction.setToolTipText(Messages.EndpointDiscoveryView_IMPORT_REMOTE_SERVICE_TT);
  importAction.setImageDescriptor(RSAImageRegistry.DESC_RSPROXY_CO);
  unimportAction=new Action(){
    public void run(){
      EndpointNode edNode=getEDNodeSelected();
      if (edNode != null) {
        ImportRegistration ir=edNode.getImportRegistration();
        if (ir == null)         return;
        try {
          ir.close();
          edNode.setImportReg(null);
          viewer.refresh();
        }
 catch (        Exception e) {
          logError(Messages.EndpointDiscoveryView_ERROR_MSG_CANNOT_CLOSE_IR,e);
          showMessage(Messages.EndpointDiscoveryView_ERROR_MSG_CANNOT_CLOSE_IR_PREFIX + e.getMessage() + Messages.EndpointDiscoveryView_ERROR_MSG_SUFFIX);
        }
      }
    }
  }
;
  unimportAction.setText(Messages.EndpointDiscoveryView_CLOSE_IMPORTED_REMOTE_SERVICE);
  unimportAction.setToolTipText(Messages.EndpointDiscoveryView_CLOSE_IMPORTED_REMOTE_SERVICE_TT);
  edefDiscoverAction=new Action(){
    public void run(){
      IEndpointDescriptionLocator locator=discovery.getEndpointDescriptionLocator();
      if (locator != null) {
        FileDialog dialog=new FileDialog(viewer.getControl().getShell(),SWT.OPEN);
        dialog.setFilterExtensions(new String[]{""String_Node_Str""});
        dialog.setText(Messages.EndpointDiscoveryView_OPEN_EDEF_FILE);
        dialog.setFilterPath(null);
        String result=dialog.open();
        if (result != null)         try {
          EndpointDescription[] eds=(EndpointDescription[])new EndpointDescriptionReader().readEndpointDescriptions(new FileInputStream(result));
          if (eds != null) {
            for (int i=0; i < eds.length; i++)             locator.discoverEndpoint(eds[i]);
          }
        }
 catch (        IOException e) {
          logError(Messages.EndpointDiscoveryView_ERROR_MSG_ENDPOINT_PARSING_FAILED,e);
          showMessage(Messages.EndpointDiscoveryView_ERROR_MSG_ENDPOINT_PARSING_FAILED_PREFIX + e.getMessage() + Messages.EndpointDiscoveryView_ERROR_MSG_SUFFIX);
        }
      }
    }
  }
;
  edefDiscoverAction.setText(Messages.EndpointDiscoveryView_OPEN_EDEF_FILE_DIALOG);
  edefDiscoverAction.setToolTipText(Messages.EndpointDiscoveryView_OPEN_EDEF_FILE_DIALOG_TT);
  edefDiscoverAction.setEnabled(discovery.getRSA() != null);
  edefDiscoverAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJ_FILE));
  undiscoverAction=new Action(){
    public void run(){
      EndpointNode endpoint=getEDNodeSelected();
      if (endpoint != null && endpoint.getImportRegistration() == null) {
        IEndpointDescriptionLocator l=discovery.getEndpointDescriptionLocator();
        if (l != null && MessageDialog.openQuestion(viewer.getControl().getShell(),Messages.EndpointDiscoveryView_REMOVE_ENDPOINT_QUESTION_TITLE,Messages.EndpointDiscoveryView_REMOVE_ENDPOINT_QUESTION))         l.undiscoverEndpoint(endpoint.getEndpointDescription());
      }
    }
  }
;
  undiscoverAction.setText(Messages.EndpointDiscoveryView_REMOVE_ENDPOINT);
  undiscoverAction.setToolTipText(Messages.EndpointDiscoveryView_REMOVE_ENDPOINT_TT);
}","private void makeActions(){
  startRSAAction=new Action(){
    public void run(){
      if (discovery != null)       try {
        discovery.startRSA();
        startRSAAction.setEnabled(false);
      }
 catch (      BundleException e) {
        logError(Messages.EndpointDiscoveryView_ERROR_RSA_START_FAILED,e);
        showMessage(Messages.EndpointDiscoveryView_ERROR_MSG_RSA_START_PREFIX + e.getMessage() + Messages.EndpointDiscoveryView_ERROR_MSG_SUFFIX);
      }
    }
  }
;
  startRSAAction.setText(Messages.EndpointDiscoveryView_START_RSA);
  startRSAAction.setToolTipText(Messages.EndpointDiscoveryView_START_RSA_SERVICE);
  startRSAAction.setEnabled(discovery.getRSA() == null);
  copyValueAction=new Action(){
    public void run(){
      Object o=((ITreeSelection)viewer.getSelection()).getFirstElement();
      String data=((EndpointPropertyNode)o).getPropertyValue().toString();
      if (data != null && data.length() > 0) {
        clipboard.setContents(new Object[]{data},new Transfer[]{TextTransfer.getInstance()});
      }
    }
  }
;
  copyValueAction.setText(Messages.EndpointDiscoveryView_COPY_PROPERTY_VALUE);
  copyValueAction.setToolTipText(Messages.EndpointDiscoveryView_COPY_PROPERTY_VALUE);
  copyValueAction.setImageDescriptor(RSAImageRegistry.DESC_PROPERTY_OBJ);
  copyNameAction=new Action(){
    public void run(){
      Object o=((ITreeSelection)viewer.getSelection()).getFirstElement();
      String data=((EndpointPropertyNode)o).getPropertyName();
      if (data != null && data.length() > 0) {
        clipboard.setContents(new Object[]{data},new Transfer[]{TextTransfer.getInstance()});
      }
    }
  }
;
  copyNameAction.setText(Messages.EndpointDiscoveryView_COPY_PROPERTY_NAME);
  copyNameAction.setToolTipText(Messages.EndpointDiscoveryView_COPY_PROPERTY_NAME);
  copyNameAction.setImageDescriptor(RSAImageRegistry.DESC_PROPERTY_OBJ);
  importAction=new Action(){
    public void run(){
      EndpointNode edNode=getEDNodeSelected();
      if (edNode != null) {
        RemoteServiceAdmin rsa=discovery.getRSA();
        if (rsa == null)         showMessage(Messages.EndpointDiscoveryView_ERROR_MSG_RSA_IS_NULL);
 else {
          EndpointDescription ed=edNode.getEndpointDescription();
          ImportRegistration reg=(ImportRegistration)rsa.importService(ed);
          if (reg == null) {
            logError(Messages.EndpointDiscoveryView_ERROR_MSG_RSA_IMPORTSERVICE_FAILED,new Exception(""String_Node_Str""));
            showMessage(Messages.EndpointDiscoveryView_ERROR_MSG_RSA_IMPORTSERVICE_FAILED_PREFIX + ""String_Node_Str"" + Messages.EndpointDiscoveryView_ERROR_MSG_SUFFIX);
            return;
          }
          Throwable exception=reg.getException();
          if (exception != null) {
            logError(Messages.EndpointDiscoveryView_ERROR_MSG_RSA_IMPORTSERVICE_FAILED,exception);
            showMessage(Messages.EndpointDiscoveryView_ERROR_MSG_RSA_IMPORTSERVICE_FAILED_PREFIX + exception.getMessage() + Messages.EndpointDiscoveryView_ERROR_MSG_SUFFIX);
          }
 else {
            edNode.setImportReg(new ImportRegistrationNode(reg));
            viewer.refresh();
          }
        }
      }
    }
  }
;
  importAction.setText(Messages.EndpointDiscoveryView_IMPORT_REMOTE_SERVICE);
  importAction.setToolTipText(Messages.EndpointDiscoveryView_IMPORT_REMOTE_SERVICE_TT);
  importAction.setImageDescriptor(RSAImageRegistry.DESC_RSPROXY_CO);
  unimportAction=new Action(){
    public void run(){
      EndpointNode edNode=getEDNodeSelected();
      if (edNode != null) {
        ImportRegistration ir=edNode.getImportRegistration();
        if (ir == null)         return;
        try {
          ir.close();
          edNode.setImportReg(null);
          viewer.refresh();
        }
 catch (        Exception e) {
          logError(Messages.EndpointDiscoveryView_ERROR_MSG_CANNOT_CLOSE_IR,e);
          showMessage(Messages.EndpointDiscoveryView_ERROR_MSG_CANNOT_CLOSE_IR_PREFIX + e.getMessage() + Messages.EndpointDiscoveryView_ERROR_MSG_SUFFIX);
        }
      }
    }
  }
;
  unimportAction.setText(Messages.EndpointDiscoveryView_CLOSE_IMPORTED_REMOTE_SERVICE);
  unimportAction.setToolTipText(Messages.EndpointDiscoveryView_CLOSE_IMPORTED_REMOTE_SERVICE_TT);
  edefDiscoverAction=new Action(){
    public void run(){
      IEndpointDescriptionLocator locator=discovery.getEndpointDescriptionLocator();
      if (locator != null) {
        FileDialog dialog=new FileDialog(viewer.getControl().getShell(),SWT.OPEN);
        dialog.setFilterExtensions(new String[]{""String_Node_Str""});
        dialog.setText(Messages.EndpointDiscoveryView_OPEN_EDEF_FILE);
        dialog.setFilterPath(null);
        String result=dialog.open();
        if (result != null)         try {
          EndpointDescription[] eds=(EndpointDescription[])new EndpointDescriptionReader().readEndpointDescriptions(new FileInputStream(result));
          if (eds != null) {
            for (int i=0; i < eds.length; i++)             locator.discoverEndpoint(eds[i]);
          }
        }
 catch (        IOException e) {
          logError(Messages.EndpointDiscoveryView_ERROR_MSG_ENDPOINT_PARSING_FAILED,e);
          showMessage(Messages.EndpointDiscoveryView_ERROR_MSG_ENDPOINT_PARSING_FAILED_PREFIX + e.getMessage() + Messages.EndpointDiscoveryView_ERROR_MSG_SUFFIX);
        }
      }
    }
  }
;
  edefDiscoverAction.setText(Messages.EndpointDiscoveryView_OPEN_EDEF_FILE_DIALOG);
  edefDiscoverAction.setToolTipText(Messages.EndpointDiscoveryView_OPEN_EDEF_FILE_DIALOG_TT);
  edefDiscoverAction.setEnabled(discovery.getRSA() != null);
  edefDiscoverAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJ_FILE));
  undiscoverAction=new Action(){
    public void run(){
      EndpointNode endpoint=getEDNodeSelected();
      if (endpoint != null && endpoint.getImportRegistration() == null) {
        IEndpointDescriptionLocator l=discovery.getEndpointDescriptionLocator();
        if (l != null && MessageDialog.openQuestion(viewer.getControl().getShell(),Messages.EndpointDiscoveryView_REMOVE_ENDPOINT_QUESTION_TITLE,Messages.EndpointDiscoveryView_REMOVE_ENDPOINT_QUESTION))         l.undiscoverEndpoint(endpoint.getEndpointDescription());
      }
    }
  }
;
  undiscoverAction.setText(Messages.EndpointDiscoveryView_REMOVE_ENDPOINT);
  undiscoverAction.setToolTipText(Messages.EndpointDiscoveryView_REMOVE_ENDPOINT_TT);
}",0.9718580108730412
94147,"protected boolean namespaceEquals(BaseID o){
  if (!(o instanceof XMPPID)) {
    return false;
  }
  final XMPPID other=(XMPPID)o;
  String thisResourceName=getResourceName();
  String otherResourceName=other.getResourceName();
  boolean resourceEquals=false;
  if (thisResourceName == null)   resourceEquals=(otherResourceName == null) ? true : false;
 else   resourceEquals=thisResourceName.equals(otherResourceName);
  return resourceEquals && getUsernameAtHost().equals(other.getUsernameAtHost());
}","protected boolean namespaceEquals(BaseID o){
  if (!(o instanceof XMPPID)) {
    return false;
  }
  final XMPPID other=(XMPPID)o;
  String thisResourceName=getResourceName();
  String otherResourceName=other.getResourceName();
  boolean resourceEquals=false;
  if (thisResourceName == null)   resourceEquals=(otherResourceName == null) ? true : false;
 else   if (otherResourceName == null)   resourceEquals=(thisResourceName == null) ? true : false;
 else   resourceEquals=thisResourceName.equals(otherResourceName) || thisResourceName.endsWith(otherResourceName) || otherResourceName.endsWith(thisResourceName);
  return resourceEquals && getUsernameAtHost().equals(other.getUsernameAtHost());
}",0.8376353039134055
94148,"void removeEndpoint(EndpointDescription ed){
  contentProvider.getRootNode().removeChild(new EndpointNode(ed));
}","void removeEndpoint(EndpointDescription ed){
  if (discoveredEndpointIds.remove(ed.getId()))   contentProvider.getRootNode().removeChild(new EndpointNode(ed));
}",0.8248175182481752
94149,"void addEndpoint(EndpointDescription ed){
  if (EndpointDiscoveryView.this.previousRegistryBrowserGroupBy != RegistryBrowser.SERVICES)   showServicesInRegistryBrowser();
  contentProvider.getRootNode().addChild(createEndpointDescriptionNode(ed));
}","void addEndpoint(EndpointDescription ed){
  if (EndpointDiscoveryView.this.previousRegistryBrowserGroupBy != RegistryBrowser.SERVICES)   showServicesInRegistryBrowser();
  String edId=ed.getId();
  if (!discoveredEndpointIds.contains(edId)) {
    discoveredEndpointIds.add(edId);
    contentProvider.getRootNode().addChild(createEndpointDescriptionNode(ed));
  }
}",0.8104575163398693
94150,"@Override public void dispose(){
  showInRegistryBrowser(previousRegistryBrowserGroupBy);
  super.dispose();
  viewer=null;
  contentProvider=null;
  if (discovery != null) {
    discovery.setView(null);
    discovery=null;
  }
}","@Override public void dispose(){
  showInRegistryBrowser(previousRegistryBrowserGroupBy);
  super.dispose();
  viewer=null;
  contentProvider=null;
  if (discovery != null) {
    discovery.setView(null);
    discovery=null;
  }
  discoveredEndpointIds.clear();
}",0.9327902240325866
94151,"public synchronized void selectTab(IChatMessageSender messageSender,ITypingMessageSender typingSender,ID localID,ID userID){
  throw new RuntimeException(""String_Node_Str"");
}","public synchronized void selectTab(IChatMessageSender messageSender,ITypingMessageSender typingSender,ID localID,ID userID){
  selectTab(messageSender,typingSender,localID,userID,getLocalName(userID));
}",0.708994708994709
94152,"/** 
 * @since 2.3
 */
public synchronized void openTab(IChatMessageSender messageSender,ITypingMessageSender typingSender,ID localID,ID remoteID){
  throw new RuntimeException(""String_Node_Str"");
}","/** 
 * @since 2.3
 */
public synchronized void openTab(IChatMessageSender messageSender,ITypingMessageSender typingSender,ID localID,ID remoteID){
  openTab(messageSender,typingSender,localID,remoteID,getLocalName(remoteID));
}",0.7323943661971831
94153,"private SSLServerSocketFactory getServerSocketFactory(){
  return ProviderPlugin.getDefault().getSSLServerSocketFactory();
}","/** 
 * @since 4.6
 */
private SSLServerSocketFactory getServerSocketFactory(){
  return ProviderPlugin.getDefault().getSSLServerSocketFactory();
}",0.915129151291513
94154,"/** 
 * @since 3.0
 */
protected GenericContainerArgs getServerArgs(Object[] args) throws IDCreateException {
  ID newID=null;
  Integer ka=null;
  InetAddress bindAddress=null;
  if (args != null && args.length > 0) {
    if (args[0] instanceof Map) {
      Map map=(Map)args[0];
      Object idVal=map.get(ID_PROP);
      if (idVal != null) {
        newID=getIDFromArg(idVal);
      }
 else {
        String hostname=SSLServerSOContainer.DEFAULT_HOST;
        Object hostVal=map.get(HOSTNAME_PROP);
        if (hostVal != null) {
          if (!(hostVal instanceof String))           throw new IllegalArgumentException(""String_Node_Str"");
          hostname=(String)hostVal;
        }
        int port=-1;
        Object portVal=map.get(PORT_PROP);
        if (portVal != null)         port=getIntegerFromArg(portVal).intValue();
        if (port < 0)         port=getSSLServerPort(port);
        String path=SSLServerSOContainer.DEFAULT_NAME;
        Object pathVal=map.get(PATH_PROP);
        if (pathVal != null) {
          if (!(pathVal instanceof String))           throw new IllegalArgumentException(""String_Node_Str"");
          path=(String)pathVal;
        }
        newID=createSSLServerID(hostname,port,path);
      }
      Object bindAddressVal=map.get(BINDADDRESS_PROP);
      if (bindAddressVal != null) {
        if (bindAddressVal instanceof InetAddress) {
          bindAddress=(InetAddress)bindAddressVal;
        }
 else         throw new IllegalArgumentException(""String_Node_Str"");
      }
      Object o=map.get(KEEPALIVE_PROP);
      if (o == null)       o=map.get(KEEPALIVE_PROP.toLowerCase());
      ka=getIntegerFromArg(o);
    }
 else     if (args.length > 1) {
      if (args[0] instanceof String || args[0] instanceof ID)       newID=getIDFromArg(args[0]);
      if (args[1] instanceof String || args[1] instanceof Integer)       ka=getIntegerFromArg(args[1]);
    }
 else     newID=getIDFromArg(args[0]);
  }
  if (newID == null) {
    int port=-1;
    if (SSLServerSOContainer.DEFAULT_FALLBACK_PORT) {
      port=getFreePort();
    }
 else     if (portIsFree(SSLServerSOContainer.DEFAULT_PORT)) {
      port=SSLServerSOContainer.DEFAULT_PORT;
    }
    if (port < 0)     throw new IDCreateException(""String_Node_Str"" + SSLServerSOContainer.DEFAULT_FALLBACK_PORT + ""String_Node_Str""+ SSLServerSOContainer.DEFAULT_PORT);
    newID=IDFactory.getDefault().createStringID(SSLServerSOContainer.DEFAULT_PROTOCOL + ""String_Node_Str"" + SSLServerSOContainer.DEFAULT_HOST+ ""String_Node_Str""+ port+ SSLServerSOContainer.DEFAULT_NAME);
  }
  if (ka == null)   ka=new Integer(SSLServerSOContainer.DEFAULT_KEEPALIVE);
  return new GenericContainerArgs(newID,ka,bindAddress);
}","/** 
 * @since 3.0
 */
protected GenericContainerArgs getServerArgs(Object[] args) throws IDCreateException {
  ID newID=null;
  Integer ka=null;
  InetAddress bindAddress=null;
  boolean wantClientAuth=false;
  boolean needClientAuth=false;
  if (args != null && args.length > 0) {
    if (args[0] instanceof Map) {
      Map map=(Map)args[0];
      Object idVal=map.get(ID_PROP);
      if (idVal != null) {
        newID=getIDFromArg(idVal);
      }
 else {
        String hostname=SSLServerSOContainer.DEFAULT_HOST;
        Object hostVal=map.get(HOSTNAME_PROP);
        if (hostVal != null) {
          if (!(hostVal instanceof String))           throw new IllegalArgumentException(""String_Node_Str"");
          hostname=(String)hostVal;
        }
        int port=-1;
        Object portVal=map.get(PORT_PROP);
        if (portVal != null)         port=getIntegerFromArg(portVal).intValue();
        if (port < 0)         port=getSSLServerPort(port);
        String path=SSLServerSOContainer.DEFAULT_NAME;
        Object pathVal=map.get(PATH_PROP);
        if (pathVal != null) {
          if (!(pathVal instanceof String))           throw new IllegalArgumentException(""String_Node_Str"");
          path=(String)pathVal;
        }
        newID=createSSLServerID(hostname,port,path);
      }
      Object bindAddressVal=map.get(BINDADDRESS_PROP);
      if (bindAddressVal != null) {
        if (bindAddressVal instanceof InetAddress) {
          bindAddress=(InetAddress)bindAddressVal;
        }
 else         throw new IllegalArgumentException(""String_Node_Str"");
      }
      Object o=map.get(KEEPALIVE_PROP);
      if (o == null)       o=map.get(KEEPALIVE_PROP.toLowerCase());
      ka=getIntegerFromArg(o);
      Object needClientAuthVal=map.get(NEEDCLIENTAUTH_PROP);
      if (needClientAuthVal instanceof Boolean)       needClientAuth=((Boolean)needClientAuthVal).booleanValue();
      Object wantClientAuthVal=map.get(WANTCLIENTAUTH_PROP);
      if (wantClientAuthVal instanceof Boolean)       wantClientAuth=((Boolean)wantClientAuthVal).booleanValue();
    }
 else     if (args.length > 1) {
      if (args[0] instanceof String || args[0] instanceof ID)       newID=getIDFromArg(args[0]);
      if (args[1] instanceof String || args[1] instanceof Integer)       ka=getIntegerFromArg(args[1]);
    }
 else     newID=getIDFromArg(args[0]);
  }
  if (newID == null) {
    int port=-1;
    if (SSLServerSOContainer.DEFAULT_FALLBACK_PORT) {
      port=getFreePort();
    }
 else     if (portIsFree(SSLServerSOContainer.DEFAULT_PORT)) {
      port=SSLServerSOContainer.DEFAULT_PORT;
    }
    if (port < 0)     throw new IDCreateException(""String_Node_Str"" + SSLServerSOContainer.DEFAULT_FALLBACK_PORT + ""String_Node_Str""+ SSLServerSOContainer.DEFAULT_PORT);
    newID=IDFactory.getDefault().createStringID(SSLServerSOContainer.DEFAULT_PROTOCOL + ""String_Node_Str"" + SSLServerSOContainer.DEFAULT_HOST+ ""String_Node_Str""+ port+ SSLServerSOContainer.DEFAULT_NAME);
  }
  if (ka == null)   ka=new Integer(SSLServerSOContainer.DEFAULT_KEEPALIVE);
  return new GenericContainerArgs(newID,ka,bindAddress,wantClientAuth,needClientAuth);
}",0.9239204934886908
94155,"/** 
 * @since 4.5
 */
protected IContainer createServerContainer(GenericContainerArgs gcargs) throws Exception {
  return new SSLServerSOContainer(new SOContainerConfig(gcargs.getID()),gcargs.getBindAddress(),gcargs.getKeepAlive().intValue());
}","/** 
 * @since 4.5
 */
protected IContainer createServerContainer(GenericContainerArgs gcargs) throws Exception {
  SOContainerConfig config=new SOContainerConfig(gcargs.getID());
  ID id=gcargs.getID();
  URI uri=URI.create(id.getName());
  SSLServerSocket serverSocket=createSSLServerSocket(uri.getPort(),gcargs.getBindAddress());
  if (gcargs.getClientAuth()) {
    if (gcargs.getNeedClientAuth())     serverSocket.setNeedClientAuth(true);
 else     if (gcargs.getWantClientAuth())     serverSocket.setWantClientAuth(true);
  }
  return new SSLServerSOContainer(config,serverSocket,gcargs.getKeepAlive().intValue());
}",0.5190311418685121
94156,"public GenericContainerArgs(ID id,Integer keepAlive,InetAddress bindAddress){
  this.id=id;
  this.keepAlive=keepAlive;
  this.bindAddress=bindAddress;
}","public GenericContainerArgs(ID id,Integer keepAlive,InetAddress bindAddress,boolean wantClientAuth,boolean needClientAuth){
  this.id=id;
  this.keepAlive=keepAlive;
  this.bindAddress=bindAddress;
  this.wantClientAuth=wantClientAuth;
  this.needClientAuth=needClientAuth;
}",0.7149532710280374
94157,"/** 
 * @since 4.6
 */
public SSLServerSOContainerGroup(String name,ThreadGroup group,SSLServerSocket sslServerSocket){
  super(name);
  this.threadGroup=group;
  this.serverSocket=sslServerSocket;
}","/** 
 * @since 4.6
 */
public SSLServerSOContainerGroup(String name,ThreadGroup group,SSLServerSocket sslServerSocket){
  super(name);
  this.threadGroup=group;
  this.serverSocket=sslServerSocket;
  this.port=serverSocket.getLocalPort();
  this.listenerThread=setupListener();
}",0.8326359832635983
94158,"private static synchronized Integer createNextRequestId(){
  uniqueRequestId=(uniqueRequestId == Integer.MAX_VALUE) ? 0 : uniqueRequestId + 1;
  return new Integer(uniqueRequestId++);
}","private static synchronized Integer createNextRequestId(){
  uniqueRequestId=(uniqueRequestId == Integer.MAX_VALUE) ? 0 : uniqueRequestId + 1;
  return new Integer(uniqueRequestId);
}",0.9945652173913044
94159,"protected void runWithoutRegistry() throws Exception {
  IAdapterManager am=getAdapterManager();
  if (am != null) {
    IAdapterFactory af=new DatashareContainerAdapterFactory();
    am.registerAdapters(af,org.eclipse.ecf.provider.generic.SSLServerSOContainer.class);
    rscAdapterFactories.add(af);
    af=new DatashareContainerAdapterFactory();
    am.registerAdapters(af,org.eclipse.ecf.provider.generic.TCPServerSOContainer.class);
    rscAdapterFactories.add(af);
    af=new DatashareContainerAdapterFactory();
    am.registerAdapters(af,org.eclipse.ecf.provider.generic.SSLClientSOContainer.class);
    rscAdapterFactories.add(af);
    af=new DatashareContainerAdapterFactory();
    am.registerAdapters(af,org.eclipse.ecf.provider.generic.TCPClientSOContainer.class);
    rscAdapterFactories.add(af);
  }
}","protected void runWithoutRegistry() throws Exception {
  IAdapterManager am=getAdapterManager();
  if (am != null) {
    IAdapterFactory af=new DatashareContainerAdapterFactory();
    am.registerAdapters(af,org.eclipse.ecf.provider.generic.SSLServerSOContainer.class);
    af=new DatashareContainerAdapterFactory();
    am.registerAdapters(af,org.eclipse.ecf.provider.generic.TCPServerSOContainer.class);
    af=new DatashareContainerAdapterFactory();
    am.registerAdapters(af,org.eclipse.ecf.provider.generic.SSLClientSOContainer.class);
    af=new DatashareContainerAdapterFactory();
    am.registerAdapters(af,org.eclipse.ecf.provider.generic.TCPClientSOContainer.class);
  }
}",0.5668449197860963
94160,"/** 
 * This method is called upon plug-in activation
 */
public void start(final BundleContext ctxt) throws Exception {
  this.context=ctxt;
  SafeRunner.run(new ExtensionRegistryRunnable(ctxt){
    protected void runWithoutRegistry() throws Exception {
      IAdapterManager am=getAdapterManager();
      if (am != null) {
        IAdapterFactory af=new DatashareContainerAdapterFactory();
        am.registerAdapters(af,org.eclipse.ecf.provider.generic.SSLServerSOContainer.class);
        rscAdapterFactories.add(af);
        af=new DatashareContainerAdapterFactory();
        am.registerAdapters(af,org.eclipse.ecf.provider.generic.TCPServerSOContainer.class);
        rscAdapterFactories.add(af);
        af=new DatashareContainerAdapterFactory();
        am.registerAdapters(af,org.eclipse.ecf.provider.generic.SSLClientSOContainer.class);
        rscAdapterFactories.add(af);
        af=new DatashareContainerAdapterFactory();
        am.registerAdapters(af,org.eclipse.ecf.provider.generic.TCPClientSOContainer.class);
        rscAdapterFactories.add(af);
      }
    }
  }
);
}","/** 
 * This method is called upon plug-in activation
 */
public void start(final BundleContext ctxt) throws Exception {
  this.context=ctxt;
  SafeRunner.run(new ExtensionRegistryRunnable(ctxt){
    protected void runWithoutRegistry() throws Exception {
      IAdapterManager am=getAdapterManager();
      if (am != null) {
        IAdapterFactory af=new DatashareContainerAdapterFactory();
        am.registerAdapters(af,org.eclipse.ecf.provider.generic.SSLServerSOContainer.class);
        af=new DatashareContainerAdapterFactory();
        am.registerAdapters(af,org.eclipse.ecf.provider.generic.TCPServerSOContainer.class);
        af=new DatashareContainerAdapterFactory();
        am.registerAdapters(af,org.eclipse.ecf.provider.generic.SSLClientSOContainer.class);
        af=new DatashareContainerAdapterFactory();
        am.registerAdapters(af,org.eclipse.ecf.provider.generic.TCPClientSOContainer.class);
      }
    }
  }
);
}",0.6604146100691016
94161,"void handleService(IServiceInfo serviceInfo,boolean discovered){
  if (locator == null)   return;
  trace(""String_Node_Str"",""String_Node_Str"" + getFrameworkUUID() + ""String_Node_Str""+ serviceInfo+ ""String_Node_Str""+ discovered);
  IServiceID serviceID=serviceInfo.getServiceID();
  if (matchServiceID(serviceID)) {
synchronized (edServiceIDMap) {
      org.osgi.service.remoteserviceadmin.EndpointDescription ed=findEDFromServiceID(serviceID);
      if (discovered) {
        if (ed == null) {
          DiscoveredEndpointDescription discoveredEndpointDescription=getDiscoveredEndpointDescription(serviceID,serviceInfo,true);
          if (discoveredEndpointDescription != null) {
            ed=discoveredEndpointDescription.getEndpointDescription();
            if (ed != null) {
              EndpointDescription prevEd=isEndpointDescriptionUpdate(ed,serviceID);
              if (prevEd == null) {
                if (!contains(ed)) {
                  addEDServiceID(ed,serviceID);
                  handleEndpointDescription(ed,true);
                }
 else                 trace(""String_Node_Str"",""String_Node_Str"");
              }
 else {
                trace(""String_Node_Str"",""String_Node_Str"" + prevEd + ""String_Node_Str""+ ed);
                queueEndpointEvent(ed,EndpointEvent.MODIFIED);
              }
            }
 else             trace(""String_Node_Str"",""String_Node_Str"" + serviceID);
          }
 else           trace(""String_Node_Str"",""String_Node_Str"" + serviceID);
        }
 else         trace(""String_Node_Str"",""String_Node_Str"" + serviceID + ""String_Node_Str"");
      }
 else {
        if (ed != null) {
          removeEDServiceID(ed,serviceID);
          handleEndpointDescription(ed,false);
        }
 else         trace(""String_Node_Str"",""String_Node_Str"" + serviceID + ""String_Node_Str"");
      }
    }
  }
}","void handleService(IServiceInfo serviceInfo,boolean discovered){
  if (locator == null)   return;
  trace(""String_Node_Str"",""String_Node_Str"" + getFrameworkUUID() + ""String_Node_Str""+ serviceInfo+ ""String_Node_Str""+ discovered+ ""String_Node_Str""+ locator);
  IServiceID serviceID=serviceInfo.getServiceID();
  if (Arrays.asList(serviceID.getServiceTypeID().getServices()).contains(RemoteConstants.DISCOVERY_SERVICE_TYPE)) {
synchronized (edServiceIDMap) {
      org.osgi.service.remoteserviceadmin.EndpointDescription ed=findEDFromServiceID(serviceID);
      if (discovered) {
        if (ed == null) {
          DiscoveredEndpointDescription discoveredEndpointDescription=getDiscoveredEndpointDescription(serviceID,serviceInfo,true);
          if (discoveredEndpointDescription != null) {
            ed=discoveredEndpointDescription.getEndpointDescription();
            if (ed != null) {
              EndpointDescription prevEd=isEndpointDescriptionUpdate(ed,serviceID);
              if (prevEd == null) {
                if (!containsED(ed)) {
                  addEDServiceID(ed,serviceID);
                  handleEndpointDescription(ed,true);
                }
 else                 trace(""String_Node_Str"",""String_Node_Str"");
              }
 else {
                trace(""String_Node_Str"",""String_Node_Str"" + prevEd + ""String_Node_Str""+ ed);
                queueEndpointEvent(ed,EndpointEvent.MODIFIED);
              }
            }
 else             trace(""String_Node_Str"",""String_Node_Str"" + serviceID);
          }
 else           trace(""String_Node_Str"",""String_Node_Str"" + serviceID);
        }
 else         trace(""String_Node_Str"",""String_Node_Str"" + serviceID + ""String_Node_Str"");
      }
 else {
        if (ed != null) {
          removeEDServiceID(ed,serviceID);
          handleEndpointDescription(ed,false);
        }
 else         trace(""String_Node_Str"",""String_Node_Str"" + serviceID + ""String_Node_Str"");
      }
    }
  }
}",0.9586733350881812
94162,"public synchronized void close(){
  if (locator != null) {
    locator.removeServiceListener(this);
    locator=null;
  }
  edServiceIDMap.clear();
}","public synchronized void close(){
  if (locator != null) {
    locator.removeServiceListener(this);
    locator=null;
  }
}",0.9044117647058824
94163,"private void handleEndpointDescriptionPath(Bundle bundle,String remoteServicesHeaderValue){
  if (""String_Node_Str"".equals(remoteServicesHeaderValue))   return;
  Enumeration<URL> e=null;
  if (remoteServicesHeaderValue.endsWith(""String_Node_Str"")) {
    e=bundle.findEntries(remoteServicesHeaderValue,XML_FILE_PATTERN,false);
  }
 else {
    int lastSlashIndex=remoteServicesHeaderValue.lastIndexOf('/');
    if (lastSlashIndex == -1) {
      e=bundle.findEntries(""String_Node_Str"",remoteServicesHeaderValue,false);
    }
 else {
      String path=remoteServicesHeaderValue.substring(0,lastSlashIndex);
      if (""String_Node_Str"".equals(path)) {
        path=""String_Node_Str"";
      }
      String filePattern=remoteServicesHeaderValue.substring(lastSlashIndex + 1);
      e=bundle.findEntries(path,filePattern,false);
    }
  }
  Collection<org.osgi.service.remoteserviceadmin.EndpointDescription> endpointDescriptions=new ArrayList<org.osgi.service.remoteserviceadmin.EndpointDescription>();
  if (e != null) {
    while (e.hasMoreElements()) {
      org.osgi.service.remoteserviceadmin.EndpointDescription[] eps=handleEndpointDescriptionFile(bundle,e.nextElement());
      if (eps != null)       for (int i=0; i < eps.length; i++)       endpointDescriptions.add(eps[i]);
    }
  }
  if (endpointDescriptions.size() > 0) {
    bundleDescriptionMap.put(new Long(bundle.getBundleId()),endpointDescriptions);
    for (    org.osgi.service.remoteserviceadmin.EndpointDescription ed : endpointDescriptions)     localLocatorServiceListener.handleEndpointDescription(ed,true);
  }
}","private void handleEndpointDescriptionPath(Bundle bundle,String remoteServicesHeaderValue){
  if (""String_Node_Str"".equals(remoteServicesHeaderValue))   return;
  Enumeration<URL> e=null;
  if (remoteServicesHeaderValue.endsWith(""String_Node_Str"")) {
    e=bundle.findEntries(remoteServicesHeaderValue,XML_FILE_PATTERN,false);
  }
 else {
    int lastSlashIndex=remoteServicesHeaderValue.lastIndexOf('/');
    if (lastSlashIndex == -1) {
      e=bundle.findEntries(""String_Node_Str"",remoteServicesHeaderValue,false);
    }
 else {
      String path=remoteServicesHeaderValue.substring(0,lastSlashIndex);
      if (""String_Node_Str"".equals(path)) {
        path=""String_Node_Str"";
      }
      String filePattern=remoteServicesHeaderValue.substring(lastSlashIndex + 1);
      e=bundle.findEntries(path,filePattern,false);
    }
  }
  Collection<org.osgi.service.remoteserviceadmin.EndpointDescription> endpointDescriptions=new ArrayList<org.osgi.service.remoteserviceadmin.EndpointDescription>();
  if (e != null) {
    while (e.hasMoreElements()) {
      org.osgi.service.remoteserviceadmin.EndpointDescription[] eps=handleEndpointDescriptionFile(bundle,e.nextElement());
      if (eps != null)       for (int i=0; i < eps.length; i++)       endpointDescriptions.add(eps[i]);
    }
  }
 else {
    logError(""String_Node_Str"",""String_Node_Str"" + remoteServicesHeaderValue + ""String_Node_Str""+ bundle.getSymbolicName()+ ""String_Node_Str"",new FileNotFoundException(""String_Node_Str"" + remoteServicesHeaderValue));
  }
  if (endpointDescriptions.size() > 0) {
    bundleDescriptionMap.put(new Long(bundle.getBundleId()),endpointDescriptions);
    for (    org.osgi.service.remoteserviceadmin.EndpointDescription ed : endpointDescriptions)     localLocatorServiceListener.handleEndpointDescription(ed,true);
  }
}",0.9324284449690174
94164,"/** 
 * creates a new container instance.
 * @param description the container type description.
 * @param parameters the parameter passed to the container constructor.
 * @return the factored container instance.
 * @see org.eclipse.ecf.core.provider.IContainerInstantiator#createInstance(org.eclipse.ecf.core.ContainerTypeDescription,java.lang.Object[])
 */
public IContainer createInstance(final ContainerTypeDescription description,final Object[] parameters) throws ContainerCreateException {
  try {
    final RemoteOSGiService remoteOSGiService=Activator.getDefault().getRemoteOSGiService();
    String descriptionName=description.getName();
    boolean wss=descriptionName.equals(ROSGI_WEBSOCKETSS_CONFIG);
    boolean ws=(descriptionName.equals(ROSGI_WEBSOCKETS_CONFIG) || wss);
    Namespace ns=(wss ? R_OSGiWSSNamespace.getDefault() : ((ws) ? R_OSGiWSNamespace.getDefault() : R_OSGiNamespace.getDefault()));
    ID containerID=null;
    if (parameters == null) {
      String localHost=null;
      if (useHostname) {
        try {
          localHost=InetAddress.getLocalHost().getCanonicalHostName();
        }
 catch (        UnknownHostException e) {
          localHost=""String_Node_Str"";
        }
      }
      final String nsScheme=ns.getScheme();
      final String wsProtocol=(wss ? WSS_PROTOCOL : (ws ? WS_PROTOCOL : null));
      int listeningPort=remoteOSGiService.getListeningPort((wsProtocol != null) ? wsProtocol : nsScheme);
      int idPort=-1;
      if (WSS_PROTOCOL.equals(wsProtocol) && listeningPort != WSS_DEFAULT_PORT)       idPort=listeningPort;
 else       if (WS_PROTOCOL.equals(wsProtocol) && listeningPort != WS_DEFAULT_PORT)       idPort=listeningPort;
      String portStr=(idPort > 0 ? (""String_Node_Str"" + idPort) : ""String_Node_Str"");
      containerID=createR_OSGiID(ns,new String(nsScheme + ""String_Node_Str"" + localHost+ portStr));
    }
 else     if (parameters.length > 0) {
      if (parameters[0] instanceof ID)       containerID=(ID)parameters[0];
 else       if (parameters[0] instanceof String)       containerID=createR_OSGiID(ns,(String)parameters[0]);
 else       if (parameters[0] instanceof Map) {
        Map params=(Map)parameters[0];
        String idStr=(String)params.get(ID_PROP);
        if (idStr == null)         throw new NullPointerException(""String_Node_Str"");
        containerID=createR_OSGiID(ns,idStr);
      }
    }
    if (containerID == null)     throw new ContainerCreateException(""String_Node_Str"" + Arrays.asList(parameters));
    if (wss)     return new R_OSGiWSRemoteServiceContainer(remoteOSGiService,containerID,true);
 else     if (ws)     return new R_OSGiWSRemoteServiceContainer(remoteOSGiService,containerID,false);
 else     return new R_OSGiRemoteServiceContainer(remoteOSGiService,containerID);
  }
 catch (  IDCreateException e) {
    throw new ContainerCreateException(""String_Node_Str"",e);
  }
}","/** 
 * creates a new container instance.
 * @param description the container type description.
 * @param parameters the parameter passed to the container constructor.
 * @return the factored container instance.
 * @see org.eclipse.ecf.core.provider.IContainerInstantiator#createInstance(org.eclipse.ecf.core.ContainerTypeDescription,java.lang.Object[])
 */
public IContainer createInstance(final ContainerTypeDescription description,final Object[] parameters) throws ContainerCreateException {
  try {
    final RemoteOSGiService remoteOSGiService=Activator.getDefault().getRemoteOSGiService();
    String descriptionName=description.getName();
    boolean wss=descriptionName.equals(ROSGI_WEBSOCKETSS_CONFIG);
    boolean ws=(descriptionName.equals(ROSGI_WEBSOCKETS_CONFIG) || wss);
    Namespace ns=(wss ? R_OSGiWSSNamespace.getDefault() : ((ws) ? R_OSGiWSNamespace.getDefault() : R_OSGiNamespace.getDefault()));
    ID containerID=null;
    if (parameters == null) {
      String localHost=""String_Node_Str"";
      if (useHostname) {
        try {
          localHost=InetAddress.getLocalHost().getCanonicalHostName();
        }
 catch (        UnknownHostException e) {
        }
      }
      final String nsScheme=ns.getScheme();
      final String wsProtocol=(wss ? WSS_PROTOCOL : (ws ? WS_PROTOCOL : null));
      int listeningPort=remoteOSGiService.getListeningPort((wsProtocol != null) ? wsProtocol : nsScheme);
      int idPort=-1;
      if (WSS_PROTOCOL.equals(wsProtocol) && listeningPort != WSS_DEFAULT_PORT)       idPort=listeningPort;
 else       if (WS_PROTOCOL.equals(wsProtocol) && listeningPort != WS_DEFAULT_PORT)       idPort=listeningPort;
      String portStr=(idPort > 0 ? (""String_Node_Str"" + idPort) : ""String_Node_Str"");
      containerID=createR_OSGiID(ns,new String(nsScheme + ""String_Node_Str"" + localHost+ portStr));
    }
 else     if (parameters.length > 0) {
      if (parameters[0] instanceof ID)       containerID=(ID)parameters[0];
 else       if (parameters[0] instanceof String)       containerID=createR_OSGiID(ns,(String)parameters[0]);
 else       if (parameters[0] instanceof Map) {
        Map params=(Map)parameters[0];
        String idStr=(String)params.get(ID_PROP);
        if (idStr == null)         throw new NullPointerException(""String_Node_Str"");
        containerID=createR_OSGiID(ns,idStr);
      }
    }
    if (containerID == null)     throw new ContainerCreateException(""String_Node_Str"" + Arrays.asList(parameters));
    if (wss)     return new R_OSGiWSRemoteServiceContainer(remoteOSGiService,containerID,true);
 else     if (ws)     return new R_OSGiWSRemoteServiceContainer(remoteOSGiService,containerID,false);
 else     return new R_OSGiRemoteServiceContainer(remoteOSGiService,containerID);
  }
 catch (  IDCreateException e) {
    throw new ContainerCreateException(""String_Node_Str"",e);
  }
}",0.9895652173913044
94165,"private void setNodeProperties(){
  this.nodeProperties.put(NODE_PROPERTY_SERVICE_NAME,getServiceName());
  this.nodeProperties.put(NODE_SERVICE_PROPERTIES,super.properties);
  this.nodeProperties.put(NODE_PROPERTY_NAME_PROTOCOLS,getServiceID().getServiceTypeID().getProtocols());
  this.nodeProperties.put(NODE_PROPERTY_NAME_SCOPE,getServiceID().getServiceTypeID().getScopes());
  this.nodeProperties.put(NODE_PROPERTY_SERVICES,getServiceID().getServiceTypeID().getServices());
  this.nodeProperties.put(NODE_PROPERTY_NAME_NA,getServiceID().getServiceTypeID().getNamingAuthority());
  this.nodeProperties.put(LOCATION,getLocation());
  this.nodeProperties.put(WEIGHT,getWeight());
  this.nodeProperties.put(PRIORITY,getPriority());
  publishedServices.put(getServiceID().getServiceTypeID().getInternal(),this);
}","private void setNodeProperties(){
  this.nodeProperties.put(NODE_PROPERTY_SERVICE_NAME,getServiceName());
  this.nodeProperties.put(NODE_SERVICE_PROPERTIES,super.properties);
  this.nodeProperties.put(NODE_PROPERTY_NAME_PROTOCOLS,getServiceID().getServiceTypeID().getProtocols());
  this.nodeProperties.put(NODE_PROPERTY_NAME_SCOPE,getServiceID().getServiceTypeID().getScopes());
  this.nodeProperties.put(NODE_PROPERTY_SERVICES,getServiceID().getServiceTypeID().getServices());
  this.nodeProperties.put(NODE_PROPERTY_NAME_NA,getServiceID().getServiceTypeID().getNamingAuthority());
  this.nodeProperties.put(LOCATION,getLocation());
  this.nodeProperties.put(WEIGHT,getWeight());
  this.nodeProperties.put(PRIORITY,getPriority());
  publishedServices.put(getServiceID().getName(),this);
}",0.9819089207735496
94166,"public void unregisterService(IServiceInfo serviceInfo){
  Assert.isNotNull(serviceInfo);
  watchManager.unpublish(serviceInfo.getServiceID().getServiceTypeID().getInternal());
  Localizer.getSingleton().localize(new Notification(serviceInfo,Notification.UNAVAILABLE));
}","public void unregisterService(IServiceInfo serviceInfo){
  Assert.isNotNull(serviceInfo);
  watchManager.unpublish(serviceInfo.getServiceID().getName());
  Localizer.getSingleton().localize(new Notification(serviceInfo,Notification.UNAVAILABLE));
}",0.9402697495183044
94167,"public void publish(AdvertisedService published){
  Assert.isNotNull(published);
  String serviceid=published.getServiceID().getServiceTypeID().getInternal();
  if (getNodeWriters().containsKey(serviceid))   return;
  try {
    while (!writeRootLock.isOpen())     Thread.sleep(300);
  }
 catch (  InterruptedException e) {
    Logger.log(LogService.LOG_DEBUG,e.getMessage(),e);
  }
  NodeWriter nodeWriter=new NodeWriter(published,writeRoot);
  getNodeWriters().put(serviceid,nodeWriter);
  allKnownServices.put(published.getServiceID().getName(),published);
  nodeWriter.publish();
}","public void publish(AdvertisedService published){
  Assert.isNotNull(published);
  try {
    while (!writeRootLock.isOpen())     Thread.sleep(300);
  }
 catch (  InterruptedException e) {
    Logger.log(LogService.LOG_DEBUG,e.getMessage(),e);
  }
  String serviceName=published.getServiceID().getName();
  NodeWriter nodeWriter=new NodeWriter(published,writeRoot);
  getNodeWriters().put(serviceName,nodeWriter);
  allKnownServices.put(serviceName,published);
  nodeWriter.publish();
}",0.7801683816651076
94168,"void handleRemoteAdminEvent(RemoteServiceAdminEvent event){
  if (!(event instanceof RemoteServiceAdmin.RemoteServiceAdminEvent))   return;
  RemoteServiceAdmin.RemoteServiceAdminEvent rsaEvent=(RemoteServiceAdmin.RemoteServiceAdminEvent)event;
  int eventType=event.getType();
  EndpointDescription endpointDescription=rsaEvent.getEndpointDescription();
switch (eventType) {
case RemoteServiceAdminEvent.EXPORT_REGISTRATION:
    advertiseEndpointDescription(endpointDescription);
  break;
case RemoteServiceAdminEvent.EXPORT_UNREGISTRATION:
unadvertiseEndpointDescription(endpointDescription);
break;
case RemoteServiceAdminEvent.EXPORT_ERROR:
logError(""String_Node_Str"",""String_Node_Str"" + rsaEvent);
break;
case RemoteServiceAdminEvent.IMPORT_REGISTRATION:
break;
case RemoteServiceAdminEvent.IMPORT_UNREGISTRATION:
break;
case RemoteServiceAdminEvent.IMPORT_ERROR:
break;
default :
logWarning(""String_Node_Str"",""String_Node_Str"" + rsaEvent + ""String_Node_Str"");
}
}","void handleRemoteAdminEvent(RemoteServiceAdminEvent event){
  if (!(event instanceof RemoteServiceAdmin.RemoteServiceAdminEvent))   return;
  RemoteServiceAdmin.RemoteServiceAdminEvent rsaEvent=(RemoteServiceAdmin.RemoteServiceAdminEvent)event;
  int eventType=event.getType();
  EndpointDescription endpointDescription=rsaEvent.getEndpointDescription();
switch (eventType) {
case RemoteServiceAdminEvent.EXPORT_REGISTRATION:
    advertiseEndpointDescription(endpointDescription);
  break;
case RemoteServiceAdminEvent.EXPORT_UNREGISTRATION:
unadvertiseEndpointDescription(endpointDescription);
break;
case RemoteServiceAdminEvent.EXPORT_ERROR:
logError(""String_Node_Str"",""String_Node_Str"" + rsaEvent);
break;
case RemoteServiceAdminEvent.EXPORT_WARNING:
logWarning(""String_Node_Str"",""String_Node_Str"" + rsaEvent);
break;
case RemoteServiceAdminEvent.EXPORT_UPDATE:
advertiseModifyEndpointDescription(endpointDescription);
break;
case RemoteServiceAdminEvent.IMPORT_REGISTRATION:
break;
case RemoteServiceAdminEvent.IMPORT_UNREGISTRATION:
break;
case RemoteServiceAdminEvent.IMPORT_ERROR:
logError(""String_Node_Str"",""String_Node_Str"" + rsaEvent);
break;
case RemoteServiceAdminEvent.IMPORT_WARNING:
logWarning(""String_Node_Str"",""String_Node_Str"" + rsaEvent);
break;
default :
logWarning(""String_Node_Str"",""String_Node_Str"" + rsaEvent + ""String_Node_Str"");
}
}",0.8324742268041238
94169,"protected void handleServiceModifying(ServiceReference serviceReference){
  List<RemoteServiceAdmin.ExportRegistration> exportedRegistrations=((RemoteServiceAdmin)getRemoteServiceAdmin()).getExportedRegistrations();
  for (  RemoteServiceAdmin.ExportRegistration exportedRegistration : exportedRegistrations) {
    if (exportedRegistration.match(serviceReference)) {
      trace(""String_Node_Str"",""String_Node_Str"" + serviceReference);
      advertiseModifyEndpointDescription((EndpointDescription)exportedRegistration.update(PropertiesUtil.copyProperties(serviceReference,new HashMap<String,Object>())));
    }
  }
}","protected void handleServiceModifying(ServiceReference serviceReference){
  List<RemoteServiceAdmin.ExportRegistration> exportedRegistrations=((RemoteServiceAdmin)getRemoteServiceAdmin()).getExportedRegistrations();
  for (  RemoteServiceAdmin.ExportRegistration exportedRegistration : exportedRegistrations) {
    if (exportedRegistration.match(serviceReference)) {
      trace(""String_Node_Str"",""String_Node_Str"" + serviceReference);
      EndpointDescription updatedED=(EndpointDescription)exportedRegistration.update(null);
      if (updatedED == null)       logWarning(""String_Node_Str"",""String_Node_Str"" + exportedRegistration.getException());
    }
  }
}",0.8247261345852895
94170,"private void postEvent(RemoteServiceAdminEvent event,EndpointDescription endpointDescription){
  int eventType=event.getType();
  String eventTypeName=null;
  String registrationTypeName=null;
switch (eventType) {
case (RemoteServiceAdminEvent.EXPORT_REGISTRATION):
    eventTypeName=""String_Node_Str"";
  registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.EXPORT_ERROR):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.EXPORT_UNREGISTRATION):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.EXPORT_WARNING):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.IMPORT_REGISTRATION):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.IMPORT_ERROR):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.IMPORT_UNREGISTRATION):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.IMPORT_WARNING):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
}
if (eventTypeName == null) {
logError(""String_Node_Str"",""String_Node_Str"" + eventType + ""String_Node_Str""+ event+ ""String_Node_Str"");
return;
}
final String topic=""String_Node_Str"" + eventTypeName;
Bundle rsaBundle=getRSABundle();
if (rsaBundle == null) {
logError(""String_Node_Str"",""String_Node_Str"" + event);
return;
}
final Dictionary eventProperties=new Properties();
eventProperties.put(""String_Node_Str"",rsaBundle);
eventProperties.put(""String_Node_Str"",new Long(rsaBundle.getBundleId()));
eventProperties.put(""String_Node_Str"",rsaBundle.getSymbolicName());
eventProperties.put(""String_Node_Str"",rsaBundle.getVersion());
List<String> result=new ArrayList<String>();
Map signers1=clientBundle.getSignerCertificates(Bundle.SIGNERS_ALL);
for (Iterator i=signers1.keySet().iterator(); i.hasNext(); ) result.add(i.next().toString());
String[] signers=(String[])result.toArray(new String[result.size()]);
if (signers != null && signers.length > 0) eventProperties.put(""String_Node_Str"",signers);
Throwable t=event.getException();
if (t != null) {
eventProperties.put(""String_Node_Str"",t);
eventProperties.put(""String_Node_Str"",t);
eventProperties.put(""String_Node_Str"",t.getClass().getName());
String exceptionMessage=t.getMessage();
if (exceptionMessage != null) eventProperties.put(""String_Node_Str"",exceptionMessage);
}
long serviceId=endpointDescription.getServiceId();
if (serviceId != 0) eventProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_SERVICE_ID,new Long(serviceId));
String frameworkUUID=endpointDescription.getFrameworkUUID();
if (frameworkUUID != null) eventProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_FRAMEWORK_UUID,frameworkUUID);
String endpointId=endpointDescription.getId();
if (endpointId != null) eventProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_ID,endpointId);
List<String> interfaces=endpointDescription.getInterfaces();
if (interfaces != null && interfaces.size() > 0) eventProperties.put(org.osgi.framework.Constants.OBJECTCLASS,interfaces.toArray(new String[interfaces.size()]));
List<String> importedConfigs=endpointDescription.getConfigurationTypes();
if (importedConfigs != null && importedConfigs.size() > 0) eventProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_CONFIGS,importedConfigs.toArray(new String[importedConfigs.size()]));
eventProperties.put(""String_Node_Str"",new Long(new Date().getTime()));
eventProperties.put(""String_Node_Str"",event);
if (registrationTypeName != null) eventProperties.put(registrationTypeName,endpointDescription);
final EventAdmin eventAdmin=AccessController.doPrivileged(new PrivilegedAction<EventAdmin>(){
public EventAdmin run(){
synchronized (eventAdminTrackerLock) {
eventAdminTracker=new ServiceTracker(getRSABundleContext(),EventAdmin.class.getName(),null);
eventAdminTracker.open();
}
return (EventAdmin)eventAdminTracker.getService();
}
}
);
if (eventAdmin == null) {
logError(""String_Node_Str"",""String_Node_Str"" + topic + ""String_Node_Str""+ eventProperties);
return;
}
AccessController.doPrivileged(new PrivilegedAction<Object>(){
public Object run(){
eventAdmin.postEvent(new Event(topic,eventProperties));
return null;
}
}
);
}","private void postEvent(RemoteServiceAdminEvent event,EndpointDescription endpointDescription){
  int eventType=event.getType();
  String eventTypeName=null;
  String registrationTypeName=null;
switch (eventType) {
case (RemoteServiceAdminEvent.EXPORT_REGISTRATION):
    eventTypeName=""String_Node_Str"";
  registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.EXPORT_ERROR):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.EXPORT_UNREGISTRATION):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.EXPORT_WARNING):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.EXPORT_UPDATE):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.IMPORT_REGISTRATION):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.IMPORT_ERROR):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.IMPORT_UNREGISTRATION):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.IMPORT_WARNING):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
case (RemoteServiceAdminEvent.IMPORT_UPDATE):
eventTypeName=""String_Node_Str"";
registrationTypeName=""String_Node_Str"";
break;
}
if (eventTypeName == null) {
logError(""String_Node_Str"",""String_Node_Str"" + eventType + ""String_Node_Str""+ event+ ""String_Node_Str"");
return;
}
final String topic=""String_Node_Str"" + eventTypeName;
Bundle rsaBundle=getRSABundle();
if (rsaBundle == null) {
logError(""String_Node_Str"",""String_Node_Str"" + event);
return;
}
final Dictionary eventProperties=new Properties();
eventProperties.put(""String_Node_Str"",rsaBundle);
eventProperties.put(""String_Node_Str"",new Long(rsaBundle.getBundleId()));
eventProperties.put(""String_Node_Str"",rsaBundle.getSymbolicName());
eventProperties.put(""String_Node_Str"",rsaBundle.getVersion());
List<String> result=new ArrayList<String>();
Map signers1=clientBundle.getSignerCertificates(Bundle.SIGNERS_ALL);
for (Iterator i=signers1.keySet().iterator(); i.hasNext(); ) result.add(i.next().toString());
String[] signers=(String[])result.toArray(new String[result.size()]);
if (signers != null && signers.length > 0) eventProperties.put(""String_Node_Str"",signers);
Throwable t=event.getException();
if (t != null) {
eventProperties.put(""String_Node_Str"",t);
eventProperties.put(""String_Node_Str"",t);
eventProperties.put(""String_Node_Str"",t.getClass().getName());
String exceptionMessage=t.getMessage();
if (exceptionMessage != null) eventProperties.put(""String_Node_Str"",exceptionMessage);
}
long serviceId=endpointDescription.getServiceId();
if (serviceId != 0) eventProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_SERVICE_ID,new Long(serviceId));
String frameworkUUID=endpointDescription.getFrameworkUUID();
if (frameworkUUID != null) eventProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_FRAMEWORK_UUID,frameworkUUID);
String endpointId=endpointDescription.getId();
if (endpointId != null) eventProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_ID,endpointId);
List<String> interfaces=endpointDescription.getInterfaces();
if (interfaces != null && interfaces.size() > 0) eventProperties.put(org.osgi.framework.Constants.OBJECTCLASS,interfaces.toArray(new String[interfaces.size()]));
List<String> importedConfigs=endpointDescription.getConfigurationTypes();
if (importedConfigs != null && importedConfigs.size() > 0) eventProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_CONFIGS,importedConfigs.toArray(new String[importedConfigs.size()]));
eventProperties.put(""String_Node_Str"",new Long(new Date().getTime()));
eventProperties.put(""String_Node_Str"",event);
if (registrationTypeName != null) eventProperties.put(registrationTypeName,endpointDescription);
final EventAdmin eventAdmin=AccessController.doPrivileged(new PrivilegedAction<EventAdmin>(){
public EventAdmin run(){
synchronized (eventAdminTrackerLock) {
eventAdminTracker=new ServiceTracker(getRSABundleContext(),EventAdmin.class.getName(),null);
eventAdminTracker.open();
}
return (EventAdmin)eventAdminTracker.getService();
}
}
);
if (eventAdmin == null) {
logError(""String_Node_Str"",""String_Node_Str"" + topic + ""String_Node_Str""+ eventProperties);
return;
}
AccessController.doPrivileged(new PrivilegedAction<Object>(){
public Object run(){
eventAdmin.postEvent(new Event(topic,eventProperties));
return null;
}
}
);
}",0.9726918075422628
94171,"private ExportRegistration exportService(final ServiceReference serviceReference,Map<String,?> overridingProperties,String[] exportedInterfaces,IRemoteServiceContainer rsContainer,Map<String,Object> endpointDescriptionProperties) throws Exception {
  Map remoteServiceProperties=copyNonReservedProperties(serviceReference,(Map<String,Object>)overridingProperties,new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER));
  IRemoteServiceContainerAdapter containerAdapter=rsContainer.getContainerAdapter();
  IRemoteServiceRegistration remoteRegistration=null;
  if (containerAdapter instanceof IOSGiRemoteServiceContainerAdapter) {
    IOSGiRemoteServiceContainerAdapter osgiContainerAdapter=(IOSGiRemoteServiceContainerAdapter)containerAdapter;
    remoteRegistration=osgiContainerAdapter.registerRemoteService(exportedInterfaces,serviceReference,PropertiesUtil.createDictionaryFromMap(remoteServiceProperties));
  }
 else {
    Object service=AccessController.doPrivileged(new PrivilegedAction<Object>(){
      public Object run(){
        return getClientBundleContext().getService(serviceReference);
      }
    }
);
    remoteRegistration=containerAdapter.registerRemoteService(exportedInterfaces,service,PropertiesUtil.createDictionaryFromMap(remoteServiceProperties));
  }
  endpointDescriptionProperties.put(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID,remoteRegistration.getID().getContainerRelativeID());
  if (remoteRegistration instanceof IExtendedRemoteServiceRegistration) {
    IExtendedRemoteServiceRegistration iersr=(IExtendedRemoteServiceRegistration)remoteRegistration;
    Map<String,Object> extraProperties=iersr.getExtraProperties();
    if (extraProperties != null)     endpointDescriptionProperties=PropertiesUtil.mergeProperties(endpointDescriptionProperties,extraProperties);
  }
  return new ExportRegistration(new ExportEndpoint(serviceReference,new EndpointDescription(serviceReference,endpointDescriptionProperties),remoteRegistration));
}","private ExportRegistration exportService(final ServiceReference serviceReference,Map<String,?> overridingProperties,String[] exportedInterfaces,IRemoteServiceContainer rsContainer,Map<String,Object> endpointDescriptionProperties) throws Exception {
  Map remoteServiceProperties=copyNonReservedProperties(serviceReference,(Map<String,Object>)overridingProperties,new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER));
  IRemoteServiceContainerAdapter containerAdapter=rsContainer.getContainerAdapter();
  IRemoteServiceRegistration remoteRegistration=null;
  if (containerAdapter instanceof IOSGiRemoteServiceContainerAdapter) {
    IOSGiRemoteServiceContainerAdapter osgiContainerAdapter=(IOSGiRemoteServiceContainerAdapter)containerAdapter;
    remoteRegistration=osgiContainerAdapter.registerRemoteService(exportedInterfaces,serviceReference,PropertiesUtil.createDictionaryFromMap(remoteServiceProperties));
  }
 else {
    Object service=AccessController.doPrivileged(new PrivilegedAction<Object>(){
      public Object run(){
        return getClientBundleContext().getService(serviceReference);
      }
    }
);
    remoteRegistration=containerAdapter.registerRemoteService(exportedInterfaces,service,PropertiesUtil.createDictionaryFromMap(remoteServiceProperties));
  }
  endpointDescriptionProperties.put(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID,remoteRegistration.getID().getContainerRelativeID());
  if (remoteRegistration instanceof IExtendedRemoteServiceRegistration) {
    IExtendedRemoteServiceRegistration iersr=(IExtendedRemoteServiceRegistration)remoteRegistration;
    Map<String,Object> extraProperties=iersr.getExtraProperties();
    if (extraProperties != null)     endpointDescriptionProperties=PropertiesUtil.mergeProperties(endpointDescriptionProperties,extraProperties);
  }
  return new ExportRegistration(new ExportEndpoint(serviceReference,new EndpointDescription(serviceReference,endpointDescriptionProperties),remoteRegistration,endpointDescriptionProperties));
}",0.992473657802308
94172,"ExportEndpoint(ServiceReference serviceReference,EndpointDescription endpointDescription,IRemoteServiceRegistration reg){
  Assert.isNotNull(serviceReference);
  this.serviceReference=serviceReference;
  Assert.isNotNull(endpointDescription);
  this.endpointDescription=endpointDescription;
  Assert.isNotNull(reg);
  this.rsRegistration=reg;
}","ExportEndpoint(ServiceReference serviceReference,EndpointDescription endpointDescription,IRemoteServiceRegistration reg,Map<String,Object> originalProperties){
  Assert.isNotNull(serviceReference);
  this.serviceReference=serviceReference;
  Assert.isNotNull(endpointDescription);
  this.endpointDescription=endpointDescription;
  Assert.isNotNull(reg);
  this.rsRegistration=reg;
  Assert.isNotNull(originalProperties);
  this.originalProperties=originalProperties;
}",0.8472906403940886
94173,"public void start(final BundleContext ctxt) throws Exception {
  plugin=this;
  this.context=ctxt;
  if (disableBasicTopologyManager) {
    osgiTopologyManagerImpl=new OSGiTopologyManagerImpl(context);
    Properties props=new Properties();
    props.put(org.osgi.service.remoteserviceadmin.EndpointEventListener.ENDPOINT_LISTENER_SCOPE,osgiTopologyManagerImpl.getScope());
    endpointListenerReg=getContext().registerService(EndpointListener.class.getName(),osgiTopologyManagerImpl,(Dictionary)props);
    endpointEventListenerReg=getContext().registerService(EndpointEventListener.class.getName(),osgiTopologyManagerImpl,(Dictionary)props);
    osgiTopologyManagerImpl.activate();
  }
 else {
    basicTopologyManagerImpl=new BasicTopologyManagerImpl(context);
    Properties props=new Properties();
    props.put(org.osgi.service.remoteserviceadmin.EndpointEventListener.ENDPOINT_LISTENER_SCOPE,basicTopologyManagerImpl.getScope());
    endpointListenerReg=getContext().registerService(EndpointListener.class.getName(),basicTopologyManagerImpl,(Dictionary)props);
    endpointEventListenerReg=getContext().registerService(EndpointEventListener.class.getName(),new ServiceFactory(){
      public Object getService(      Bundle bundle,      ServiceRegistration registration){
        return new ProxyEndpointEventListener(bundle);
      }
      public void ungetService(      Bundle bundle,      ServiceRegistration registration,      Object service){
        ProxyEndpointEventListener peel=(service instanceof ProxyEndpointEventListener) ? (ProxyEndpointEventListener)service : null;
        if (peel == null)         return;
synchronized (bundleEndpointEventListenerMap) {
          List<EndpointEventHolder> endpointEventHolders=bundleEndpointEventListenerMap.get(bundle);
          if (endpointEventHolders != null)           for (          EndpointEventHolder eh : endpointEventHolders)           peel.deliverRemoveEventForBundle(eh);
        }
      }
    }
,(Dictionary)props);
    if (Boolean.valueOf(context.getProperty(PROP_USE_DS)).booleanValue())     return;
    String serviceName=EventListenerHook.class.getName();
    Filter serviceFilter=context.createFilter(""String_Node_Str"" + serviceName + ""String_Node_Str"");
    ServiceReference[] refs=context.getBundle().getRegisteredServices();
    if (refs != null) {
      for (int i=0; i < refs.length; i++)       if (serviceFilter.match(refs[i]))       return;
    }
    basicTopologyManagerComp=new BasicTopologyManagerComponent();
    basicTopologyManagerComp.bindEndpointEventListener(basicTopologyManagerImpl);
    eventAdminListenerRegistration=this.context.registerService(RemoteServiceAdminListener.class,basicTopologyManagerComp,null);
    eventListenerHookRegistration=this.context.registerService(EventListenerHook.class,basicTopologyManagerComp,null);
    basicTopologyManagerComp.activate();
  }
}","public void start(final BundleContext ctxt) throws Exception {
  plugin=this;
  this.context=ctxt;
  if (disableBasicTopologyManager) {
    osgiTopologyManagerImpl=new OSGiTopologyManagerImpl(context);
    Properties props=new Properties();
    props.put(org.osgi.service.remoteserviceadmin.EndpointEventListener.ENDPOINT_LISTENER_SCOPE,osgiTopologyManagerImpl.getScope());
    endpointListenerReg=getContext().registerService(EndpointListener.class.getName(),osgiTopologyManagerImpl,(Dictionary)props);
    endpointEventListenerReg=getContext().registerService(EndpointEventListener.class.getName(),osgiTopologyManagerImpl,(Dictionary)props);
    osgiTopologyManagerImpl.activate();
  }
 else {
    basicTopologyManagerImpl=new BasicTopologyManagerImpl(context);
    Properties props=new Properties();
    props.put(org.osgi.service.remoteserviceadmin.EndpointEventListener.ENDPOINT_LISTENER_SCOPE,basicTopologyManagerImpl.getScope());
    endpointEventListenerReg=getContext().registerService(EndpointEventListener.class.getName(),new ServiceFactory(){
      public Object getService(      Bundle bundle,      ServiceRegistration registration){
        return new ProxyEndpointEventListener(bundle);
      }
      public void ungetService(      Bundle bundle,      ServiceRegistration registration,      Object service){
        ProxyEndpointEventListener peel=(service instanceof ProxyEndpointEventListener) ? (ProxyEndpointEventListener)service : null;
        if (peel == null)         return;
synchronized (bundleEndpointEventListenerMap) {
          List<EndpointEventHolder> endpointEventHolders=bundleEndpointEventListenerMap.get(bundle);
          if (endpointEventHolders != null)           for (          EndpointEventHolder eh : endpointEventHolders)           peel.deliverRemoveEventForBundle(eh);
        }
      }
    }
,(Dictionary)props);
    if (Boolean.valueOf(context.getProperty(PROP_USE_DS)).booleanValue())     return;
    String serviceName=EventListenerHook.class.getName();
    Filter serviceFilter=context.createFilter(""String_Node_Str"" + serviceName + ""String_Node_Str"");
    ServiceReference[] refs=context.getBundle().getRegisteredServices();
    if (refs != null) {
      for (int i=0; i < refs.length; i++)       if (serviceFilter.match(refs[i]))       return;
    }
    basicTopologyManagerComp=new BasicTopologyManagerComponent();
    basicTopologyManagerComp.bindEndpointEventListener(basicTopologyManagerImpl);
    eventAdminListenerRegistration=this.context.registerService(RemoteServiceAdminListener.class,basicTopologyManagerComp,null);
    eventListenerHookRegistration=this.context.registerService(EventListenerHook.class,basicTopologyManagerComp,null);
    basicTopologyManagerComp.activate();
  }
}",0.9766696349065004
94174,"public void stop(BundleContext ctxt) throws Exception {
  if (eventListenerHookRegistration != null) {
    eventListenerHookRegistration.unregister();
    eventListenerHookRegistration=null;
  }
  if (basicTopologyManagerComp != null) {
    basicTopologyManagerComp.unbindEndpointEventListener(basicTopologyManagerImpl);
    basicTopologyManagerComp=null;
  }
  if (endpointEventListenerReg != null) {
    endpointEventListenerReg.unregister();
    endpointEventListenerReg=null;
  }
  if (endpointListenerReg != null) {
    endpointListenerReg.unregister();
    endpointEventListenerReg=null;
  }
  if (eventAdminListenerRegistration != null) {
    eventAdminListenerRegistration.unregister();
    eventAdminListenerRegistration=null;
  }
synchronized (bundleEndpointEventListenerMap) {
    bundleEndpointEventListenerMap.clear();
  }
  if (basicTopologyManagerImpl != null) {
    basicTopologyManagerImpl.close();
    basicTopologyManagerImpl=null;
  }
  if (logServiceTracker != null) {
    logServiceTracker.close();
    logServiceTracker=null;
    logService=null;
  }
  this.context=null;
  plugin=null;
}","public void stop(BundleContext ctxt) throws Exception {
  if (eventListenerHookRegistration != null) {
    eventListenerHookRegistration.unregister();
    eventListenerHookRegistration=null;
  }
  if (basicTopologyManagerComp != null) {
    basicTopologyManagerComp.unbindEndpointEventListener(basicTopologyManagerImpl);
    basicTopologyManagerComp=null;
  }
  if (endpointEventListenerReg != null) {
    endpointEventListenerReg.unregister();
    endpointEventListenerReg=null;
  }
  if (endpointListenerReg != null) {
    endpointListenerReg.unregister();
    endpointListenerReg=null;
  }
  if (eventAdminListenerRegistration != null) {
    eventAdminListenerRegistration.unregister();
    eventAdminListenerRegistration=null;
  }
synchronized (bundleEndpointEventListenerMap) {
    bundleEndpointEventListenerMap.clear();
  }
  if (basicTopologyManagerImpl != null) {
    basicTopologyManagerImpl.close();
    basicTopologyManagerImpl=null;
  }
  if (logServiceTracker != null) {
    logServiceTracker.close();
    logServiceTracker=null;
    logService=null;
  }
  this.context=null;
  plugin=null;
}",0.997744700045106
94175,"public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  Activator.instance=this;
  initializeProxyServiceFactoryBundle();
  rsaProps=new Properties();
  rsaProps.put(RemoteServiceAdmin.SERVICE_PROP,new Boolean(true));
  IContainerManager containerManager=getContainerManager();
  Assert.isNotNull(containerManager,""String_Node_Str"");
  ContainerTypeDescription[] remoteServiceDescriptions=containerManager.getContainerFactory().getDescriptionsForContainerAdapter(IRemoteServiceContainerAdapter.class);
  for (int i=0; i < remoteServiceDescriptions.length; i++)   addSupportedConfigsAndIntents(remoteServiceDescriptions[i]);
  remoteServiceAdminRegistration=context.registerService(org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.class.getName(),new ServiceFactory(){
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      RemoteServiceAdmin result=null;
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.get(bundle);
        if (rsa == null) {
          rsa=new RemoteServiceAdmin(bundle);
          remoteServiceAdmins.put(bundle,rsa);
        }
        result=rsa;
      }
      return result;
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.remove(bundle);
        if (rsa != null)         rsa.close();
      }
    }
  }
,(Dictionary)rsaProps);
  ctdTracker=new ServiceTracker<ContainerTypeDescription,ContainerTypeDescription>(context,ContainerTypeDescription.class,new ServiceTrackerCustomizer<ContainerTypeDescription,ContainerTypeDescription>(){
    public ContainerTypeDescription addingService(    ServiceReference<ContainerTypeDescription> reference){
      ContainerTypeDescription ctd=null;
      if (reference != null && context != null) {
        ctd=context.getService(reference);
        if (ctd != null) {
          addSupportedConfigsAndIntents(ctd);
          if (remoteServiceAdminRegistration != null)           remoteServiceAdminRegistration.setProperties(rsaProps);
        }
      }
      return ctd;
    }
    public void modifiedService(    ServiceReference<ContainerTypeDescription> reference,    ContainerTypeDescription service){
    }
    public void removedService(    ServiceReference<ContainerTypeDescription> reference,    ContainerTypeDescription service){
      if (remoteServiceAdminRegistration != null && service != null) {
        removeSupportedConfigsAndIntents(service);
        remoteServiceAdminRegistration.setProperties(rsaProps);
      }
    }
  }
);
  ctdTracker.open();
  endpointDescriptionLocator=new EndpointDescriptionLocator(context);
  final Properties properties=new Properties();
  properties.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  iServiceInfoFactoryRegistration=context.registerService(IServiceInfoFactory.class.getName(),new ServiceInfoFactory(),(Dictionary)properties);
  endpointDescriptionLocator.start();
}","public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  Activator.instance=this;
  this.exportedRegistrations=new ArrayList<ExportRegistration>();
  this.importedRegistrations=new ArrayList<ImportRegistration>();
  initializeProxyServiceFactoryBundle();
  rsaProps=new Properties();
  rsaProps.put(RemoteServiceAdmin.SERVICE_PROP,new Boolean(true));
  IContainerManager containerManager=getContainerManager();
  Assert.isNotNull(containerManager,""String_Node_Str"");
  ContainerTypeDescription[] remoteServiceDescriptions=containerManager.getContainerFactory().getDescriptionsForContainerAdapter(IRemoteServiceContainerAdapter.class);
  for (int i=0; i < remoteServiceDescriptions.length; i++)   addSupportedConfigsAndIntents(remoteServiceDescriptions[i]);
  remoteServiceAdminRegistration=context.registerService(org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.class.getName(),new ServiceFactory(){
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      RemoteServiceAdmin result=null;
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.get(bundle);
        if (rsa == null) {
          rsa=new RemoteServiceAdmin(bundle,exportedRegistrations,importedRegistrations);
          remoteServiceAdmins.put(bundle,rsa);
        }
        result=rsa;
      }
      return result;
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.remove(bundle);
        if (rsa != null)         rsa.close();
      }
    }
  }
,(Dictionary)rsaProps);
  ctdTracker=new ServiceTracker<ContainerTypeDescription,ContainerTypeDescription>(context,ContainerTypeDescription.class,new ServiceTrackerCustomizer<ContainerTypeDescription,ContainerTypeDescription>(){
    public ContainerTypeDescription addingService(    ServiceReference<ContainerTypeDescription> reference){
      ContainerTypeDescription ctd=null;
      if (reference != null && context != null) {
        ctd=context.getService(reference);
        if (ctd != null) {
          addSupportedConfigsAndIntents(ctd);
          if (remoteServiceAdminRegistration != null)           remoteServiceAdminRegistration.setProperties(rsaProps);
        }
      }
      return ctd;
    }
    public void modifiedService(    ServiceReference<ContainerTypeDescription> reference,    ContainerTypeDescription service){
    }
    public void removedService(    ServiceReference<ContainerTypeDescription> reference,    ContainerTypeDescription service){
      if (remoteServiceAdminRegistration != null && service != null) {
        removeSupportedConfigsAndIntents(service);
        remoteServiceAdminRegistration.setProperties(rsaProps);
      }
    }
  }
);
  ctdTracker.open();
  endpointDescriptionLocator=new EndpointDescriptionLocator(context);
  final Properties properties=new Properties();
  properties.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  iServiceInfoFactoryRegistration=context.registerService(IServiceInfoFactory.class.getName(),new ServiceInfoFactory(),(Dictionary)properties);
  endpointDescriptionLocator.start();
}",0.9721958925750396
94176,"public Object getService(Bundle bundle,ServiceRegistration registration){
  RemoteServiceAdmin result=null;
synchronized (remoteServiceAdmins) {
    RemoteServiceAdmin rsa=remoteServiceAdmins.get(bundle);
    if (rsa == null) {
      rsa=new RemoteServiceAdmin(bundle);
      remoteServiceAdmins.put(bundle,rsa);
    }
    result=rsa;
  }
  return result;
}","public Object getService(Bundle bundle,ServiceRegistration registration){
  RemoteServiceAdmin result=null;
synchronized (remoteServiceAdmins) {
    RemoteServiceAdmin rsa=remoteServiceAdmins.get(bundle);
    if (rsa == null) {
      rsa=new RemoteServiceAdmin(bundle,exportedRegistrations,importedRegistrations);
      remoteServiceAdmins.put(bundle,rsa);
    }
    result=rsa;
  }
  return result;
}",0.941952506596306
94177,"public void stop(BundleContext bundleContext) throws Exception {
  if (endpointDescriptionLocator != null) {
    endpointDescriptionLocator.close();
    endpointDescriptionLocator=null;
  }
  if (ctdTracker != null) {
    ctdTracker.close();
    ctdTracker=null;
  }
  if (remoteServiceAdminRegistration != null) {
    remoteServiceAdminRegistration.unregister();
    remoteServiceAdminRegistration=null;
  }
  clearRSAs();
  if (iServiceInfoFactoryRegistration != null) {
    iServiceInfoFactoryRegistration.unregister();
    iServiceInfoFactoryRegistration=null;
  }
synchronized (saxParserFactoryTrackerLock) {
    if (saxParserFactoryTracker != null) {
      saxParserFactoryTracker.close();
      saxParserFactoryTracker=null;
    }
  }
synchronized (logServiceTrackerLock) {
    if (logServiceTracker != null) {
      logServiceTracker.close();
      logServiceTracker=null;
      logService=null;
    }
  }
  stopProxyServiceFactoryBundle();
  Activator.context=null;
  Activator.instance=null;
}","public void stop(BundleContext bundleContext) throws Exception {
  if (endpointDescriptionLocator != null) {
    endpointDescriptionLocator.close();
    endpointDescriptionLocator=null;
  }
  if (ctdTracker != null) {
    ctdTracker.close();
    ctdTracker=null;
  }
  if (remoteServiceAdminRegistration != null) {
    remoteServiceAdminRegistration.unregister();
    remoteServiceAdminRegistration=null;
  }
  if (iServiceInfoFactoryRegistration != null) {
    iServiceInfoFactoryRegistration.unregister();
    iServiceInfoFactoryRegistration=null;
  }
synchronized (saxParserFactoryTrackerLock) {
    if (saxParserFactoryTracker != null) {
      saxParserFactoryTracker.close();
      saxParserFactoryTracker=null;
    }
  }
synchronized (logServiceTrackerLock) {
    if (logServiceTracker != null) {
      logServiceTracker.close();
      logServiceTracker=null;
      logService=null;
    }
  }
  stopProxyServiceFactoryBundle();
synchronized (importedRegistrations) {
    if (importedRegistrations != null) {
      importedRegistrations.clear();
      importedRegistrations=null;
    }
  }
synchronized (exportedRegistrations) {
    if (exportedRegistrations != null) {
      exportedRegistrations.clear();
      exportedRegistrations=null;
    }
  }
  Activator.context=null;
  Activator.instance=null;
}",0.8543017725897103
94178,"private ImportEndpoint findImportEndpoint(EndpointDescription ed){
  for (  ImportRegistration reg : importedRegistrations) {
    ImportEndpoint endpoint=reg.getImportEndpoint(ed);
    if (endpoint != null)     return endpoint;
  }
  return null;
}","private ImportEndpoint findImportEndpoint(EndpointDescription ed){
  for (  org.osgi.service.remoteserviceadmin.ImportRegistration reg : importedRegistrations) {
    if (reg instanceof ImportRegistration) {
      ImportEndpoint endpoint=((ImportRegistration)reg).getImportEndpoint(ed);
      if (endpoint != null)       return endpoint;
    }
  }
  return null;
}",0.8019639934533551
94179,"private boolean removeImportRegistration(ImportRegistration importRegistration){
synchronized (importedRegistrations) {
    return importedRegistrations.remove(importRegistration);
  }
}","private boolean removeImportRegistration(ImportRegistration importRegistration){
synchronized (importedRegistrations) {
    localExportedRegistrations.remove(importRegistration);
    return importedRegistrations.remove(importRegistration);
  }
}",0.8631090487238979
94180,"private Bundle getRSABundle(){
  return getRSABundleContext().getBundle();
}","private Bundle getRSABundle(){
  BundleContext bc=Activator.getContext();
  if (bc == null)   return null;
  return bc.getBundle();
}",0.6028708133971292
94181,"private void unimportService(IRemoteServiceID remoteServiceID){
  List<ImportRegistration> removedRegistrations=new ArrayList<ImportRegistration>();
synchronized (importedRegistrations) {
    for (Iterator<ImportRegistration> i=importedRegistrations.iterator(); i.hasNext(); ) {
      ImportRegistration importRegistration=i.next();
      if (importRegistration != null && importRegistration.match(remoteServiceID))       removedRegistrations.add(importRegistration);
    }
  }
  for (  ImportRegistration removedReg : removedRegistrations) {
    trace(""String_Node_Str"",""String_Node_Str"" + removedReg);
    removedReg.close();
  }
}","private void unimportService(IRemoteServiceID remoteServiceID){
  List<ImportRegistration> removedRegistrations=new ArrayList<ImportRegistration>();
synchronized (importedRegistrations) {
    for (Iterator<org.osgi.service.remoteserviceadmin.ImportRegistration> i=importedRegistrations.iterator(); i.hasNext(); ) {
      org.osgi.service.remoteserviceadmin.ImportRegistration iReg=i.next();
      if (iReg instanceof ImportRegistration) {
        ImportRegistration importRegistration=(ImportRegistration)iReg;
        if (importRegistration.match(remoteServiceID))         removedRegistrations.add(importRegistration);
      }
    }
  }
  for (  ImportRegistration removedReg : removedRegistrations) {
    trace(""String_Node_Str"",""String_Node_Str"" + removedReg);
    removedReg.close();
  }
}",0.7966339410939691
94182,"private boolean removeExportRegistration(ExportRegistration exportRegistration){
synchronized (exportedRegistrations) {
    return exportedRegistrations.remove(exportRegistration);
  }
}","private boolean removeExportRegistration(ExportRegistration exportRegistration){
synchronized (exportedRegistrations) {
    localExportedRegistrations.remove(exportRegistration);
    return exportedRegistrations.remove(exportRegistration);
  }
}",0.8631090487238979
94183,"protected IConsumerContainerSelector getConsumerContainerSelector(){
  return AccessController.doPrivileged(new PrivilegedAction<IConsumerContainerSelector>(){
    public IConsumerContainerSelector run(){
synchronized (consumerContainerSelectorTrackerLock) {
        if (consumerContainerSelectorTracker == null) {
          consumerContainerSelectorTracker=new ServiceTracker(getClientBundleContext(),IConsumerContainerSelector.class.getName(),null);
          consumerContainerSelectorTracker.open();
        }
      }
      return (IConsumerContainerSelector)consumerContainerSelectorTracker.getService();
    }
  }
);
}","protected IConsumerContainerSelector getConsumerContainerSelector(){
  return AccessController.doPrivileged(new PrivilegedAction<IConsumerContainerSelector>(){
    public IConsumerContainerSelector run(){
synchronized (consumerContainerSelectorTrackerLock) {
        if (consumerContainerSelectorTracker == null) {
          consumerContainerSelectorTracker=new ServiceTracker(getRSABundleContext(),IConsumerContainerSelector.class.getName(),null);
          consumerContainerSelectorTracker.open();
        }
      }
      return (IConsumerContainerSelector)consumerContainerSelectorTracker.getService();
    }
  }
);
}",0.992759452936444
94184,"private ExportEndpoint findExistingExportEndpoint(ServiceReference serviceReference,ID containerID){
  for (  ExportRegistration eReg : exportedRegistrations) {
    ExportEndpoint exportEndpoint=eReg.getExportEndpoint(serviceReference,containerID);
    if (exportEndpoint != null)     return exportEndpoint;
  }
  return null;
}","private ExportEndpoint findExistingExportEndpoint(ServiceReference serviceReference,ID containerID){
  for (  org.osgi.service.remoteserviceadmin.ExportRegistration eReg : exportedRegistrations) {
    if (eReg instanceof ExportRegistration) {
      ExportEndpoint exportEndpoint=((ExportRegistration)eReg).getExportEndpoint(serviceReference,containerID);
      if (exportEndpoint != null)       return exportEndpoint;
    }
  }
  return null;
}",0.8393782383419689
94185,"public Collection<org.osgi.service.remoteserviceadmin.ExportReference> getExportedServices(){
  Collection<org.osgi.service.remoteserviceadmin.ExportReference> results=new ArrayList<org.osgi.service.remoteserviceadmin.ExportReference>();
synchronized (exportedRegistrations) {
    if (exportedRegistrations.isEmpty())     checkRSAReadAccess();
    for (    ExportRegistration reg : exportedRegistrations) {
      org.osgi.service.remoteserviceadmin.ExportReference eRef=reg.getExportReference();
      if (eRef != null && checkEndpointPermissionRead(""String_Node_Str"",eRef.getExportedEndpoint()))       results.add(eRef);
    }
  }
  return results;
}","public Collection<org.osgi.service.remoteserviceadmin.ExportReference> getExportedServices(){
  Collection<org.osgi.service.remoteserviceadmin.ExportReference> results=new ArrayList<org.osgi.service.remoteserviceadmin.ExportReference>();
synchronized (exportedRegistrations) {
    if (exportedRegistrations.isEmpty())     checkRSAReadAccess();
    for (    org.osgi.service.remoteserviceadmin.ExportRegistration reg : exportedRegistrations) {
      org.osgi.service.remoteserviceadmin.ExportReference eRef=reg.getExportReference();
      if (eRef != null && checkEndpointPermissionRead(""String_Node_Str"",eRef.getExportedEndpoint()))       results.add(eRef);
    }
  }
  return results;
}",0.9730941704035876
94186,"public Collection<org.osgi.service.remoteserviceadmin.ImportReference> getImportedEndpoints(){
  Collection<org.osgi.service.remoteserviceadmin.ImportReference> results=new ArrayList<org.osgi.service.remoteserviceadmin.ImportReference>();
synchronized (importedRegistrations) {
    if (importedRegistrations.isEmpty())     checkRSAReadAccess();
    for (    ImportRegistration reg : importedRegistrations) {
      org.osgi.service.remoteserviceadmin.ImportReference iRef=reg.getImportReference();
      if (iRef != null && checkEndpointPermissionRead(""String_Node_Str"",iRef.getImportedEndpoint()))       results.add(iRef);
    }
  }
  return results;
}","public Collection<org.osgi.service.remoteserviceadmin.ImportReference> getImportedEndpoints(){
  Collection<org.osgi.service.remoteserviceadmin.ImportReference> results=new ArrayList<org.osgi.service.remoteserviceadmin.ImportReference>();
synchronized (importedRegistrations) {
    if (importedRegistrations.isEmpty())     checkRSAReadAccess();
    for (    org.osgi.service.remoteserviceadmin.ImportRegistration reg : importedRegistrations) {
      org.osgi.service.remoteserviceadmin.ImportReference iRef=reg.getImportReference();
      if (iRef != null && checkEndpointPermissionRead(""String_Node_Str"",iRef.getImportedEndpoint()))       results.add(iRef);
    }
  }
  return results;
}",0.9731343283582088
94187,"public void close(){
  trace(""String_Node_Str"",""String_Node_Str"" + importedRegistrations + ""String_Node_Str""+ exportedRegistrations);
synchronized (remoteServiceAdminListenerTrackerLock) {
    if (remoteServiceAdminListenerTracker != null) {
      remoteServiceAdminListenerTracker.close();
      remoteServiceAdminListenerTracker=null;
    }
  }
synchronized (eventAdminTrackerLock) {
    if (eventAdminTracker != null) {
      eventAdminTracker.close();
      eventAdminTracker=null;
    }
  }
synchronized (packageAdminTrackerLock) {
    if (packageAdminTracker != null) {
      packageAdminTracker.close();
      packageAdminTracker=null;
    }
  }
synchronized (proxyClassLoaders) {
    proxyClassLoaders.clear();
  }
synchronized (consumerContainerSelectorTrackerLock) {
    if (consumerContainerSelectorTracker != null) {
      consumerContainerSelectorTracker.close();
      consumerContainerSelectorTracker=null;
    }
  }
  if (defaultConsumerContainerSelector != null) {
    defaultConsumerContainerSelector.close();
    defaultConsumerContainerSelector=null;
  }
synchronized (hostContainerSelectorTrackerLock) {
    if (hostContainerSelectorTracker != null) {
      hostContainerSelectorTracker.close();
      hostContainerSelectorTracker=null;
    }
  }
  if (defaultHostContainerSelector != null) {
    defaultHostContainerSelector.close();
    defaultHostContainerSelector=null;
  }
  if (defaultHostContainerSelectorRegistration != null) {
    defaultHostContainerSelectorRegistration.unregister();
    defaultHostContainerSelectorRegistration=null;
  }
  if (defaultHostContainerSelector != null) {
    defaultHostContainerSelector.close();
    defaultHostContainerSelector=null;
  }
  if (defaultConsumerContainerSelectorRegistration != null) {
    defaultConsumerContainerSelectorRegistration.unregister();
    defaultConsumerContainerSelectorRegistration=null;
  }
  if (defaultConsumerContainerSelector != null) {
    defaultConsumerContainerSelector.close();
    defaultConsumerContainerSelector=null;
  }
  List<ImportRegistration> toClose=null;
synchronized (importedRegistrations) {
    toClose=new ArrayList<ImportRegistration>(importedRegistrations);
    importedRegistrations.clear();
  }
  for (  ImportRegistration reg : toClose)   reg.close();
  List<ExportRegistration> toClose1=null;
synchronized (exportedRegistrations) {
    toClose1=new ArrayList<ExportRegistration>(exportedRegistrations);
    exportedRegistrations.clear();
  }
  for (  ExportRegistration reg1 : toClose1)   reg1.close();
  if (eventListenerHookRegistration != null) {
    eventListenerHookRegistration.unregister();
    eventListenerHookRegistration=null;
  }
  this.clientBundle=null;
}","public void close(){
  trace(""String_Node_Str"",""String_Node_Str"" + importedRegistrations + ""String_Node_Str""+ exportedRegistrations);
  List<org.osgi.service.remoteserviceadmin.ImportRegistration> toClose=null;
synchronized (importedRegistrations) {
    toClose=new ArrayList<org.osgi.service.remoteserviceadmin.ImportRegistration>(localImportedRegistrations);
    localImportedRegistrations.clear();
  }
  for (  org.osgi.service.remoteserviceadmin.ImportRegistration reg : toClose)   reg.close();
  List<org.osgi.service.remoteserviceadmin.ExportRegistration> toClose1=null;
synchronized (localExportedRegistrations) {
    toClose1=new ArrayList<org.osgi.service.remoteserviceadmin.ExportRegistration>(localExportedRegistrations);
    localExportedRegistrations.clear();
  }
  for (  org.osgi.service.remoteserviceadmin.ExportRegistration reg1 : toClose1)   reg1.close();
synchronized (remoteServiceAdminListenerTrackerLock) {
    if (remoteServiceAdminListenerTracker != null) {
      remoteServiceAdminListenerTracker.close();
      remoteServiceAdminListenerTracker=null;
    }
  }
synchronized (eventAdminTrackerLock) {
    if (eventAdminTracker != null) {
      eventAdminTracker.close();
      eventAdminTracker=null;
    }
  }
synchronized (proxyClassLoaders) {
    proxyClassLoaders.clear();
  }
synchronized (consumerContainerSelectorTrackerLock) {
    if (consumerContainerSelectorTracker != null) {
      consumerContainerSelectorTracker.close();
      consumerContainerSelectorTracker=null;
    }
  }
  if (defaultConsumerContainerSelector != null) {
    defaultConsumerContainerSelector.close();
    defaultConsumerContainerSelector=null;
  }
synchronized (hostContainerSelectorTrackerLock) {
    if (hostContainerSelectorTracker != null) {
      hostContainerSelectorTracker.close();
      hostContainerSelectorTracker=null;
    }
  }
  if (defaultHostContainerSelector != null) {
    defaultHostContainerSelector.close();
    defaultHostContainerSelector=null;
  }
  if (defaultHostContainerSelectorRegistration != null) {
    defaultHostContainerSelectorRegistration.unregister();
    defaultHostContainerSelectorRegistration=null;
  }
  if (defaultHostContainerSelector != null) {
    defaultHostContainerSelector.close();
    defaultHostContainerSelector=null;
  }
  if (defaultConsumerContainerSelectorRegistration != null) {
    defaultConsumerContainerSelectorRegistration.unregister();
    defaultConsumerContainerSelectorRegistration=null;
  }
  if (defaultConsumerContainerSelector != null) {
    defaultConsumerContainerSelector.close();
    defaultConsumerContainerSelector=null;
  }
  if (eventListenerHookRegistration != null) {
    eventListenerHookRegistration.unregister();
    eventListenerHookRegistration=null;
  }
}",0.2387073081160484
94188,"public RemoteServiceAdmin(Bundle clientBundle){
  this.clientBundle=clientBundle;
  Assert.isNotNull(this.clientBundle);
  Properties props=new Properties();
  props.put(org.osgi.framework.Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  ServiceReference[] hostContainerSelectorRefs=null;
  BundleContext rsaBundleContext=getRSABundleContext();
  try {
    hostContainerSelectorRefs=rsaBundleContext.getServiceReferences(IHostContainerSelector.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
  }
  if (hostContainerSelectorRefs == null || hostContainerSelectorRefs.length == 0) {
    defaultHostContainerSelector=new HostContainerSelector(hostDefaultConfigTypes,hostAutoCreateContainer);
    defaultHostContainerSelectorRegistration=rsaBundleContext.registerService(IHostContainerSelector.class.getName(),defaultHostContainerSelector,(Dictionary)props);
  }
  ServiceReference[] consumerContainerSelectorRefs=null;
  try {
    consumerContainerSelectorRefs=rsaBundleContext.getServiceReferences(IConsumerContainerSelector.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
  }
  if (consumerContainerSelectorRefs == null || consumerContainerSelectorRefs.length == 0) {
    defaultConsumerContainerSelector=new ConsumerContainerSelector(consumerAutoCreateContainer);
    defaultConsumerContainerSelectorRegistration=rsaBundleContext.registerService(IConsumerContainerSelector.class.getName(),defaultConsumerContainerSelector,(Dictionary)props);
  }
  eventListenerHookRegistration=rsaBundleContext.registerService(EventListenerHook.class.getName(),new RSAEventListenerHook(),null);
}","public RemoteServiceAdmin(Bundle clientBundle,Collection<org.osgi.service.remoteserviceadmin.ExportRegistration> exportedRegistrations,Collection<org.osgi.service.remoteserviceadmin.ImportRegistration> importedRegistrations){
  this.clientBundle=clientBundle;
  Assert.isNotNull(this.clientBundle);
  this.exportedRegistrations=exportedRegistrations;
  this.importedRegistrations=importedRegistrations;
  Properties props=new Properties();
  props.put(org.osgi.framework.Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  ServiceReference[] hostContainerSelectorRefs=null;
  BundleContext rsaBundleContext=getRSABundleContext();
  try {
    hostContainerSelectorRefs=rsaBundleContext.getServiceReferences(IHostContainerSelector.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
  }
  if (hostContainerSelectorRefs == null || hostContainerSelectorRefs.length == 0) {
    defaultHostContainerSelector=new HostContainerSelector(hostDefaultConfigTypes,hostAutoCreateContainer);
    defaultHostContainerSelectorRegistration=rsaBundleContext.registerService(IHostContainerSelector.class.getName(),defaultHostContainerSelector,(Dictionary)props);
  }
  ServiceReference[] consumerContainerSelectorRefs=null;
  try {
    consumerContainerSelectorRefs=rsaBundleContext.getServiceReferences(IConsumerContainerSelector.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
  }
  if (consumerContainerSelectorRefs == null || consumerContainerSelectorRefs.length == 0) {
    defaultConsumerContainerSelector=new ConsumerContainerSelector(consumerAutoCreateContainer);
    defaultConsumerContainerSelectorRegistration=rsaBundleContext.registerService(IConsumerContainerSelector.class.getName(),defaultConsumerContainerSelector,(Dictionary)props);
  }
  eventListenerHookRegistration=rsaBundleContext.registerService(EventListenerHook.class.getName(),new RSAEventListenerHook(),null);
}",0.920158550396376
94189,"ServiceReference getServiceReference(){
  return exportReference.getExportedService();
}","ServiceReference getServiceReference(){
  return (closed) ? null : exportReference.getExportedService();
}",0.9072164948453608
94190,"ImportEndpoint getImportEndpoint(EndpointDescription ed){
  return importReference.match(ed);
}","ImportEndpoint getImportEndpoint(EndpointDescription ed){
  return (closed) ? null : importReference.match(ed);
}",0.9134615384615384
94191,"public void close(){
  trace(""String_Node_Str"",""String_Node_Str"" + importedRegistrations + ""String_Node_Str""+ exportedRegistrations);
  List<org.osgi.service.remoteserviceadmin.ImportRegistration> toClose=null;
synchronized (importedRegistrations) {
    toClose=new ArrayList<org.osgi.service.remoteserviceadmin.ImportRegistration>(localImportedRegistrations);
    localImportedRegistrations.clear();
  }
  for (  org.osgi.service.remoteserviceadmin.ImportRegistration reg : toClose)   reg.close();
  List<org.osgi.service.remoteserviceadmin.ExportRegistration> toClose1=null;
synchronized (localExportedRegistrations) {
    toClose1=new ArrayList<org.osgi.service.remoteserviceadmin.ExportRegistration>(localExportedRegistrations);
    localExportedRegistrations.clear();
  }
  for (  org.osgi.service.remoteserviceadmin.ExportRegistration reg1 : toClose1)   reg1.close();
synchronized (remoteServiceAdminListenerTrackerLock) {
    if (remoteServiceAdminListenerTracker != null) {
      remoteServiceAdminListenerTracker.close();
      remoteServiceAdminListenerTracker=null;
    }
  }
synchronized (eventAdminTrackerLock) {
    if (eventAdminTracker != null) {
      eventAdminTracker.close();
      eventAdminTracker=null;
    }
  }
synchronized (proxyClassLoaders) {
    proxyClassLoaders.clear();
  }
synchronized (consumerContainerSelectorTrackerLock) {
    if (consumerContainerSelectorTracker != null) {
      consumerContainerSelectorTracker.close();
      consumerContainerSelectorTracker=null;
    }
  }
  if (defaultConsumerContainerSelector != null) {
    defaultConsumerContainerSelector.close();
    defaultConsumerContainerSelector=null;
  }
synchronized (hostContainerSelectorTrackerLock) {
    if (hostContainerSelectorTracker != null) {
      hostContainerSelectorTracker.close();
      hostContainerSelectorTracker=null;
    }
  }
  if (defaultHostContainerSelector != null) {
    defaultHostContainerSelector.close();
    defaultHostContainerSelector=null;
  }
  if (defaultHostContainerSelectorRegistration != null) {
    defaultHostContainerSelectorRegistration.unregister();
    defaultHostContainerSelectorRegistration=null;
  }
  if (defaultHostContainerSelector != null) {
    defaultHostContainerSelector.close();
    defaultHostContainerSelector=null;
  }
  if (defaultConsumerContainerSelectorRegistration != null) {
    defaultConsumerContainerSelectorRegistration.unregister();
    defaultConsumerContainerSelectorRegistration=null;
  }
  if (defaultConsumerContainerSelector != null) {
    defaultConsumerContainerSelector.close();
    defaultConsumerContainerSelector=null;
  }
  if (eventListenerHookRegistration != null) {
    eventListenerHookRegistration.unregister();
    eventListenerHookRegistration=null;
  }
}","public void close(){
  trace(""String_Node_Str"",""String_Node_Str"" + importedRegistrations + ""String_Node_Str""+ exportedRegistrations);
  List<org.osgi.service.remoteserviceadmin.ImportRegistration> toClose=null;
synchronized (importedRegistrations) {
    toClose=new ArrayList<org.osgi.service.remoteserviceadmin.ImportRegistration>(localImportedRegistrations);
  }
  for (  org.osgi.service.remoteserviceadmin.ImportRegistration reg : toClose)   reg.close();
  List<org.osgi.service.remoteserviceadmin.ExportRegistration> toClose1=null;
synchronized (localExportedRegistrations) {
    toClose1=new ArrayList<org.osgi.service.remoteserviceadmin.ExportRegistration>(localExportedRegistrations);
  }
  for (  org.osgi.service.remoteserviceadmin.ExportRegistration reg1 : toClose1)   reg1.close();
  this.localExportedRegistrations.clear();
  this.localImportedRegistrations.clear();
synchronized (remoteServiceAdminListenerTrackerLock) {
    if (remoteServiceAdminListenerTracker != null) {
      remoteServiceAdminListenerTracker.close();
      remoteServiceAdminListenerTracker=null;
    }
  }
synchronized (eventAdminTrackerLock) {
    if (eventAdminTracker != null) {
      eventAdminTracker.close();
      eventAdminTracker=null;
    }
  }
synchronized (proxyClassLoaders) {
    proxyClassLoaders.clear();
  }
synchronized (consumerContainerSelectorTrackerLock) {
    if (consumerContainerSelectorTracker != null) {
      consumerContainerSelectorTracker.close();
      consumerContainerSelectorTracker=null;
    }
  }
  if (defaultConsumerContainerSelector != null) {
    defaultConsumerContainerSelector.close();
    defaultConsumerContainerSelector=null;
  }
synchronized (hostContainerSelectorTrackerLock) {
    if (hostContainerSelectorTracker != null) {
      hostContainerSelectorTracker.close();
      hostContainerSelectorTracker=null;
    }
  }
  if (defaultHostContainerSelector != null) {
    defaultHostContainerSelector.close();
    defaultHostContainerSelector=null;
  }
  if (defaultHostContainerSelectorRegistration != null) {
    defaultHostContainerSelectorRegistration.unregister();
    defaultHostContainerSelectorRegistration=null;
  }
  if (defaultHostContainerSelector != null) {
    defaultHostContainerSelector.close();
    defaultHostContainerSelector=null;
  }
  if (defaultConsumerContainerSelectorRegistration != null) {
    defaultConsumerContainerSelectorRegistration.unregister();
    defaultConsumerContainerSelectorRegistration=null;
  }
  if (defaultConsumerContainerSelector != null) {
    defaultConsumerContainerSelector.close();
    defaultConsumerContainerSelector=null;
  }
  if (eventListenerHookRegistration != null) {
    eventListenerHookRegistration.unregister();
    eventListenerHookRegistration=null;
  }
}",0.9484573502722324
94192,"public RemoteServiceAdmin(Bundle clientBundle,Collection<org.osgi.service.remoteserviceadmin.ExportRegistration> exportedRegistrations,Collection<org.osgi.service.remoteserviceadmin.ImportRegistration> importedRegistrations){
  this.clientBundle=clientBundle;
  Assert.isNotNull(this.clientBundle);
  this.exportedRegistrations=exportedRegistrations;
  this.importedRegistrations=importedRegistrations;
  Properties props=new Properties();
  props.put(org.osgi.framework.Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  ServiceReference[] hostContainerSelectorRefs=null;
  BundleContext rsaBundleContext=getRSABundleContext();
  try {
    hostContainerSelectorRefs=rsaBundleContext.getServiceReferences(IHostContainerSelector.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
  }
  if (hostContainerSelectorRefs == null || hostContainerSelectorRefs.length == 0) {
    defaultHostContainerSelector=new HostContainerSelector(hostDefaultConfigTypes,hostAutoCreateContainer);
    defaultHostContainerSelectorRegistration=rsaBundleContext.registerService(IHostContainerSelector.class.getName(),defaultHostContainerSelector,(Dictionary)props);
  }
  ServiceReference[] consumerContainerSelectorRefs=null;
  try {
    consumerContainerSelectorRefs=rsaBundleContext.getServiceReferences(IConsumerContainerSelector.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
  }
  if (consumerContainerSelectorRefs == null || consumerContainerSelectorRefs.length == 0) {
    defaultConsumerContainerSelector=new ConsumerContainerSelector(consumerAutoCreateContainer);
    defaultConsumerContainerSelectorRegistration=rsaBundleContext.registerService(IConsumerContainerSelector.class.getName(),defaultConsumerContainerSelector,(Dictionary)props);
  }
  eventListenerHookRegistration=rsaBundleContext.registerService(EventListenerHook.class.getName(),new RSAEventListenerHook(),null);
}","/** 
 * @since 4.1
 */
public RemoteServiceAdmin(Bundle clientBundle,Collection<org.osgi.service.remoteserviceadmin.ExportRegistration> exportedRegistrations,Collection<org.osgi.service.remoteserviceadmin.ImportRegistration> importedRegistrations){
  this.clientBundle=clientBundle;
  Assert.isNotNull(this.clientBundle);
  this.exportedRegistrations=exportedRegistrations;
  this.importedRegistrations=importedRegistrations;
  Properties props=new Properties();
  props.put(org.osgi.framework.Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  ServiceReference[] hostContainerSelectorRefs=null;
  BundleContext rsaBundleContext=getRSABundleContext();
  try {
    hostContainerSelectorRefs=rsaBundleContext.getServiceReferences(IHostContainerSelector.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
  }
  if (hostContainerSelectorRefs == null || hostContainerSelectorRefs.length == 0) {
    defaultHostContainerSelector=new HostContainerSelector(hostDefaultConfigTypes,hostAutoCreateContainer);
    defaultHostContainerSelectorRegistration=rsaBundleContext.registerService(IHostContainerSelector.class.getName(),defaultHostContainerSelector,(Dictionary)props);
  }
  ServiceReference[] consumerContainerSelectorRefs=null;
  try {
    consumerContainerSelectorRefs=rsaBundleContext.getServiceReferences(IConsumerContainerSelector.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
  }
  if (consumerContainerSelectorRefs == null || consumerContainerSelectorRefs.length == 0) {
    defaultConsumerContainerSelector=new ConsumerContainerSelector(consumerAutoCreateContainer);
    defaultConsumerContainerSelectorRegistration=rsaBundleContext.registerService(IConsumerContainerSelector.class.getName(),defaultConsumerContainerSelector,(Dictionary)props);
  }
  eventListenerHookRegistration=rsaBundleContext.registerService(EventListenerHook.class.getName(),new RSAEventListenerHook(),null);
}",0.9940057336460776
94193,"public org.osgi.service.remoteserviceadmin.ImportReference getImportReference(){
  Throwable t=getException();
  if (t != null)   return null;
  return importReference;
}","public org.osgi.service.remoteserviceadmin.ImportReference getImportReference(){
  Throwable t=getException();
  if (t != null)   return null;
  return (closed) ? null : importReference;
}",0.9497206703910616
94194,"public org.osgi.service.remoteserviceadmin.ExportReference getExportReference(){
  Throwable t=getException();
  if (t != null)   return null;
  return exportReference;
}","public org.osgi.service.remoteserviceadmin.ExportReference getExportReference(){
  Throwable t=getException();
  if (t != null)   return null;
  return (closed) ? null : exportReference;
}",0.9497206703910616
94195,"ExportRegistration(Throwable exception,EndpointDescription errorEndpointDescription){
  Assert.isNotNull(exception);
  this.exportReference=new ExportReference(exception,errorEndpointDescription);
  this.closed=true;
}","ExportRegistration(Throwable exception,EndpointDescription errorEndpointDescription){
  Assert.isNotNull(exception);
  this.exportReference=new ExportReference(exception,errorEndpointDescription);
}",0.9519230769230768
94196,"/** 
 * analyze the service.
 * @param iface the service interface class name.
 * @param smartProxy the smart proxy class name or <code>null</code>
 * @param explicitInjections the injection array or <code>null</code>
 * @param presentation the presentation class name or <code>null</code>
 * @return the <code>DeliverServiceMessage</code> that contains allinformation required to build a proxy on the client side. This message is generic, can be cached and initialized for a concrete requesting peer by calling the <code>init</code> method.
 * @throws ClassNotFoundException
 * @throws IOException
 */
DeliverServiceMessage analyze(final String[] ifaces,final String smartProxy,final String[] explicitInjections,final String presentation) throws ClassNotFoundException, IOException {
  closure.addAll(Arrays.asList(ifaces));
  if (smartProxy != null) {
    closure.add(smartProxy);
  }
  if (presentation != null) {
    closure.add(presentation);
  }
  if (explicitInjections != null) {
    closure.addAll(Arrays.asList(explicitInjections));
  }
  while (!closure.isEmpty()) {
    visit((String)closure.remove(0));
  }
  for (int i=0; i < ifaces.length; i++) {
    proxyImports.add(packageOf(ifaces[i]));
    proxyExports.add(packageOf(ifaces[i]));
  }
  proxyImports.remove(""String_Node_Str"");
  proxyImports.remove(""String_Node_Str"");
  proxyImports.remove(""String_Node_Str"");
  proxyImports.remove(""String_Node_Str"");
  final StringBuffer importDeclaration=new StringBuffer();
  final StringBuffer exportDeclaration=new StringBuffer();
  final String[] pi=(String[])proxyImports.toArray(new String[proxyImports.size()]);
  for (int i=0; i < pi.length; i++) {
    importDeclaration.append(pi[i]);
    final Object v=importsMap.get(pi[i]);
    if (v != null) {
      importDeclaration.append(""String_Node_Str"");
      importDeclaration.append(v);
    }
    if (i < pi.length - 1) {
      importDeclaration.append(""String_Node_Str"");
    }
  }
  final String[] pe=(String[])proxyExports.toArray(new String[proxyExports.size()]);
  for (int i=0; i < pe.length; i++) {
    exportDeclaration.append(pe[i]);
    final Object v=exportsMap.get(pe[i]);
    if (v != null) {
      exportDeclaration.append(""String_Node_Str"");
      exportDeclaration.append(v);
    }
    if (i < pe.length - 1) {
      exportDeclaration.append(""String_Node_Str"");
    }
  }
  System.out.println(""String_Node_Str"" + injections);
  final DeliverServiceMessage message=new DeliverServiceMessage();
  message.setInterfaceNames(ifaces);
  message.setSmartProxyName(smartProxy);
  message.setInjections((HashMap)injections.clone());
  message.setImports(importDeclaration.toString());
  message.setExports(exportDeclaration.toString());
  visited.clear();
  injections.clear();
  closure.clear();
  return message;
}","/** 
 * analyze the service.
 * @param iface the service interface class name.
 * @param smartProxy the smart proxy class name or <code>null</code>
 * @param explicitInjections the injection array or <code>null</code>
 * @param presentation the presentation class name or <code>null</code>
 * @return the <code>DeliverServiceMessage</code> that contains allinformation required to build a proxy on the client side. This message is generic, can be cached and initialized for a concrete requesting peer by calling the <code>init</code> method.
 * @throws ClassNotFoundException
 * @throws IOException
 */
DeliverServiceMessage analyze(final String[] ifaces,final String smartProxy,final String[] explicitInjections,final String presentation) throws ClassNotFoundException, IOException {
  closure.addAll(Arrays.asList(ifaces));
  if (smartProxy != null) {
    closure.add(smartProxy);
  }
  if (presentation != null) {
    closure.add(presentation);
  }
  if (explicitInjections != null) {
    closure.addAll(Arrays.asList(explicitInjections));
  }
  while (!closure.isEmpty()) {
    visit((String)closure.remove(0));
  }
  for (int i=0; i < ifaces.length; i++) {
    proxyImports.add(packageOf(ifaces[i]));
    proxyExports.add(packageOf(ifaces[i]));
  }
  proxyImports.remove(""String_Node_Str"");
  proxyImports.remove(""String_Node_Str"");
  proxyImports.remove(""String_Node_Str"");
  proxyImports.remove(""String_Node_Str"");
  final StringBuffer importDeclaration=new StringBuffer();
  final StringBuffer exportDeclaration=new StringBuffer();
  final String[] pi=(String[])proxyImports.toArray(new String[proxyImports.size()]);
  for (int i=0; i < pi.length; i++) {
    importDeclaration.append(pi[i]);
    final Object v=importsMap.get(pi[i]);
    if (v != null) {
      importDeclaration.append(""String_Node_Str"");
      importDeclaration.append(v);
    }
    if (i < pi.length - 1) {
      importDeclaration.append(""String_Node_Str"");
    }
  }
  final String[] pe=(String[])proxyExports.toArray(new String[proxyExports.size()]);
  for (int i=0; i < pe.length; i++) {
    exportDeclaration.append(pe[i]);
    final Object v=exportsMap.get(pe[i]);
    if (v != null) {
      exportDeclaration.append(""String_Node_Str"");
      exportDeclaration.append(v);
    }
    if (i < pe.length - 1) {
      exportDeclaration.append(""String_Node_Str"");
    }
  }
  final DeliverServiceMessage message=new DeliverServiceMessage();
  message.setInterfaceNames(ifaces);
  message.setSmartProxyName(smartProxy);
  message.setInjections((HashMap)injections.clone());
  message.setImports(importDeclaration.toString());
  message.setExports(exportDeclaration.toString());
  visited.clear();
  injections.clear();
  closure.clear();
  return message;
}",0.9902138455962304
94197,"/** 
 * transforms a string list into an array of Strings.
 * @param data the string list.
 * @param delim the list delimiter.
 * @return the array of strings.
 * @since 0.2
 */
public static String[] stringToArray(final String data,final String delim){
  final StringTokenizer tokenizer=new StringTokenizer(data,delim);
  final String[] tokens=new String[tokenizer.countTokens()];
  final int tokenCount=tokenizer.countTokens();
  for (int i=0; i < tokenCount; i++) {
    tokens[i]=tokenizer.nextToken().trim();
  }
  return tokens;
}","/** 
 * transforms a string list into an array of Strings.
 * @param data the string list.
 * @param delim the list delimiter.
 * @return the array of strings.
 * @since 0.2
 */
public static String[] stringToArray(final String data,final String delim){
  if (data == null) {
    return new String[0];
  }
  final List tokens=new ArrayList(data.length() / 10);
  int pointer=0;
  int quotePointer=0;
  int tokenStart=0;
  int nextDelimiter;
  while ((nextDelimiter=data.indexOf(delim,pointer)) > -1) {
    final int openingQuote=data.indexOf(""String_Node_Str"",quotePointer);
    int closingQuote=data.indexOf(""String_Node_Str"",openingQuote + 1);
    if (openingQuote > closingQuote) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (openingQuote > -1 && openingQuote < nextDelimiter && closingQuote < nextDelimiter) {
      quotePointer=++closingQuote;
      continue;
    }
    if (openingQuote < nextDelimiter && nextDelimiter < closingQuote) {
      pointer=++closingQuote;
      continue;
    }
    tokens.add(data.substring(tokenStart,nextDelimiter).trim());
    pointer=++nextDelimiter;
    quotePointer=pointer;
    tokenStart=pointer;
  }
  tokens.add(data.substring(tokenStart).trim());
  return (String[])tokens.toArray(new String[tokens.size()]);
}",0.3393739703459638
94198,"/** 
 * R \ L (comparison operation allows wildcards)
 * @param left A set of matchers (supports wildcard at end)
 * @param right A set of inputs
 * @return The subset of right with all elements removed matching left 
 * @since 1.0
 */
public static Collection rightDifference(Collection left,Collection right){
  final List result=new ArrayList(right);
  for (Iterator iterator=right.iterator(); iterator.hasNext(); ) {
    final String f1=(String)iterator.next();
    for (Iterator itr2=left.iterator(); itr2.hasNext(); ) {
      String f2=(String)itr2.next();
      if (f2.endsWith(""String_Node_Str"")) {
        f2=f2.substring(0,f2.length() - 1);
        if (f1.startsWith(f2)) {
          result.remove(f1);
        }
      }
 else {
        if (f1.equals(f2)) {
          result.remove(f1);
        }
      }
    }
  }
  return result;
}","/** 
 * R \ L (comparison operation allows wildcards)
 * @param left A set of matchers (supports wildcard at end)
 * @param right A set of inputs
 * @return The subset of right with all elements removed matching left
 * @since 1.0
 */
public static Collection rightDifference(Collection left,Collection right){
  final List result=new ArrayList(right);
  for (Iterator iterator=right.iterator(); iterator.hasNext(); ) {
    final String f1=(String)iterator.next();
    for (Iterator itr2=left.iterator(); itr2.hasNext(); ) {
      String f2=(String)itr2.next();
      if (f2.endsWith(""String_Node_Str"")) {
        f2=f2.substring(0,f2.length() - 1);
        if (f1.startsWith(f2)) {
          result.remove(f1);
        }
      }
 else {
        if (f1.equals(f2)) {
          result.remove(f1);
        }
      }
    }
  }
  return result;
}",0.9994065281899108
94199,"private void installResolveAndStartBundle(final RemoteServiceReference ref,final InputStream in,final boolean isProxy){
  try {
    final Bundle bundle=RemoteOSGiActivator.getActivator().getContext().installBundle(ref.getURI().toString(),in);
    retrieveDependencies((String)bundle.getHeaders().get(Constants.IMPORT_PACKAGE),(String)bundle.getHeaders().get(Constants.EXPORT_PACKAGE));
    if (isProxy) {
      proxyBundles.put(ref.getURI().getFragment(),bundle);
    }
    System.err.println(RemoteOSGiActivator.getActivator().getContext().getDataFile(""String_Node_Str"").getAbsolutePath());
    bundle.start();
  }
 catch (  final BundleException e) {
    final Throwable nested=e.getNestedException() == null ? e : e.getNestedException();
    nested.printStackTrace();
    throw new RemoteOSGiException(""String_Node_Str"" + ref.toString(),nested);
  }
}","private void installResolveAndStartBundle(final RemoteServiceReference ref,final InputStream in,final boolean isProxy){
  try {
    final Bundle bundle=RemoteOSGiActivator.getActivator().getContext().installBundle(ref.getURI().toString(),in);
    retrieveDependencies((String)bundle.getHeaders().get(Constants.IMPORT_PACKAGE),(String)bundle.getHeaders().get(Constants.EXPORT_PACKAGE));
    if (isProxy) {
      proxyBundles.put(ref.getURI().getFragment(),bundle);
    }
    bundle.start();
  }
 catch (  final BundleException e) {
    final Throwable nested=e.getNestedException() == null ? e : e.getNestedException();
    nested.printStackTrace();
    throw new RemoteOSGiException(""String_Node_Str"" + ref.toString(),nested);
  }
}",0.6431273644388399
94200,"protected void handleServiceRegistering(ServiceReference serviceReference){
  String[] exportedInterfaces=PropertiesUtil.getExportedInterfaces(serviceReference);
  if (exportedInterfaces == null)   return;
  Map<String,Object> exportProperties=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);
  exportProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_INTERFACES,exportedInterfaces);
  trace(""String_Node_Str"",""String_Node_Str"" + serviceReference + ""String_Node_Str""+ exportProperties);
  getRemoteServiceAdmin().exportService(serviceReference,exportProperties);
}","protected void handleServiceRegistering(ServiceReference serviceReference){
  String[] exportedInterfaces=PropertiesUtil.getExportedInterfaces(serviceReference);
  if (exportedInterfaces == null)   return;
  String[] serviceExportedConfigs=PropertiesUtil.getStringArrayFromPropertyValue(serviceReference.getProperty(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_CONFIGS));
  if (requireServiceExportedConfigs && (serviceExportedConfigs == null || Arrays.asList(serviceExportedConfigs).size() == 0))   return;
  Map<String,Object> exportProperties=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);
  exportProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_INTERFACES,exportedInterfaces);
  trace(""String_Node_Str"",""String_Node_Str"" + serviceReference + ""String_Node_Str""+ exportProperties);
  getRemoteServiceAdmin().exportService(serviceReference,exportProperties);
}",0.7883116883116883
94201,"public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  Activator.instance=this;
  initializeProxyServiceFactoryBundle();
  Properties rsaProps=new Properties();
  rsaProps.put(RemoteServiceAdmin.SERVICE_PROP,new Boolean(true));
  String[][] supportedConfigsAndIntents=getSupportedConfigsAndIntents();
  rsaProps.put(org.osgi.service.remoteserviceadmin.RemoteConstants.REMOTE_CONFIGS_SUPPORTED,supportedConfigsAndIntents[0]);
  rsaProps.put(org.osgi.service.remoteserviceadmin.RemoteConstants.REMOTE_INTENTS_SUPPORTED,supportedConfigsAndIntents[1]);
  remoteServiceAdminRegistration=context.registerService(org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.class.getName(),new ServiceFactory(){
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      RemoteServiceAdmin result=null;
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.get(bundle);
        if (rsa == null) {
          rsa=new RemoteServiceAdmin(bundle);
          remoteServiceAdmins.put(bundle,rsa);
        }
        result=rsa;
      }
      return result;
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.remove(bundle);
        if (rsa != null)         rsa.close();
      }
    }
  }
,(Dictionary)rsaProps);
  endpointDescriptionLocator=new EndpointDescriptionLocator(context);
  final Properties properties=new Properties();
  properties.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  iServiceInfoFactoryRegistration=context.registerService(IServiceInfoFactory.class.getName(),new ServiceInfoFactory(),(Dictionary)properties);
  endpointDescriptionLocator.start();
}","public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  Activator.instance=this;
  initializeProxyServiceFactoryBundle();
  rsaProps=new Properties();
  rsaProps.put(RemoteServiceAdmin.SERVICE_PROP,new Boolean(true));
  IContainerManager containerManager=getContainerManager();
  Assert.isNotNull(containerManager,""String_Node_Str"");
  ContainerTypeDescription[] remoteServiceDescriptions=containerManager.getContainerFactory().getDescriptionsForContainerAdapter(IRemoteServiceContainerAdapter.class);
  for (int i=0; i < remoteServiceDescriptions.length; i++)   addSupportedConfigsAndIntents(remoteServiceDescriptions[i]);
  remoteServiceAdminRegistration=context.registerService(org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.class.getName(),new ServiceFactory(){
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      RemoteServiceAdmin result=null;
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.get(bundle);
        if (rsa == null) {
          rsa=new RemoteServiceAdmin(bundle);
          remoteServiceAdmins.put(bundle,rsa);
        }
        result=rsa;
      }
      return result;
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.remove(bundle);
        if (rsa != null)         rsa.close();
      }
    }
  }
,(Dictionary)rsaProps);
  ctdTracker=new ServiceTracker<ContainerTypeDescription,ContainerTypeDescription>(context,ContainerTypeDescription.class,new ServiceTrackerCustomizer<ContainerTypeDescription,ContainerTypeDescription>(){
    public ContainerTypeDescription addingService(    ServiceReference<ContainerTypeDescription> reference){
      ContainerTypeDescription ctd=null;
      if (reference != null && context != null) {
        ctd=context.getService(reference);
        if (ctd != null) {
          addSupportedConfigsAndIntents(ctd);
          if (remoteServiceAdminRegistration != null)           remoteServiceAdminRegistration.setProperties(rsaProps);
        }
      }
      return ctd;
    }
    public void modifiedService(    ServiceReference<ContainerTypeDescription> reference,    ContainerTypeDescription service){
    }
    public void removedService(    ServiceReference<ContainerTypeDescription> reference,    ContainerTypeDescription service){
      if (remoteServiceAdminRegistration != null && service != null) {
        removeSupportedConfigsAndIntents(service);
        remoteServiceAdminRegistration.setProperties(rsaProps);
      }
    }
  }
);
  ctdTracker.open();
  endpointDescriptionLocator=new EndpointDescriptionLocator(context);
  final Properties properties=new Properties();
  properties.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  iServiceInfoFactoryRegistration=context.registerService(IServiceInfoFactory.class.getName(),new ServiceInfoFactory(),(Dictionary)properties);
  endpointDescriptionLocator.start();
}",0.6145069274653626
94202,"public void stop(BundleContext bundleContext) throws Exception {
  if (endpointDescriptionLocator != null) {
    endpointDescriptionLocator.close();
    endpointDescriptionLocator=null;
  }
  if (remoteServiceAdminRegistration != null) {
    remoteServiceAdminRegistration.unregister();
    remoteServiceAdminRegistration=null;
  }
  clearRSAs();
  if (iServiceInfoFactoryRegistration != null) {
    iServiceInfoFactoryRegistration.unregister();
    iServiceInfoFactoryRegistration=null;
  }
synchronized (saxParserFactoryTrackerLock) {
    if (saxParserFactoryTracker != null) {
      saxParserFactoryTracker.close();
      saxParserFactoryTracker=null;
    }
  }
synchronized (logServiceTrackerLock) {
    if (logServiceTracker != null) {
      logServiceTracker.close();
      logServiceTracker=null;
      logService=null;
    }
  }
  stopProxyServiceFactoryBundle();
  Activator.context=null;
  Activator.instance=null;
}","public void stop(BundleContext bundleContext) throws Exception {
  if (endpointDescriptionLocator != null) {
    endpointDescriptionLocator.close();
    endpointDescriptionLocator=null;
  }
  if (ctdTracker != null) {
    ctdTracker.close();
    ctdTracker=null;
  }
  if (remoteServiceAdminRegistration != null) {
    remoteServiceAdminRegistration.unregister();
    remoteServiceAdminRegistration=null;
  }
  clearRSAs();
  if (iServiceInfoFactoryRegistration != null) {
    iServiceInfoFactoryRegistration.unregister();
    iServiceInfoFactoryRegistration=null;
  }
synchronized (saxParserFactoryTrackerLock) {
    if (saxParserFactoryTracker != null) {
      saxParserFactoryTracker.close();
      saxParserFactoryTracker=null;
    }
  }
synchronized (logServiceTrackerLock) {
    if (logServiceTracker != null) {
      logServiceTracker.close();
      logServiceTracker=null;
      logService=null;
    }
  }
  stopProxyServiceFactoryBundle();
  Activator.context=null;
  Activator.instance=null;
}",0.960082944530845
94203,"public AbstractTopologyManager(BundleContext context){
  serviceInfoFactoryTracker=new ServiceTracker(Activator.getContext(),createISIFFilter(Activator.getContext()),null);
  serviceInfoFactoryTracker.open();
  this.context=context;
  this.registrationLock=new ReentrantLock(true);
}","public AbstractTopologyManager(BundleContext context){
  serviceInfoFactoryTracker=new ServiceTracker(context,createISIFFilter(context),null);
  serviceInfoFactoryTracker.open();
  this.context=context;
  this.registrationLock=new ReentrantLock(true);
}",0.4477611940298507
94204,"protected void runWithoutRegistry() throws Exception {
  context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8GenericContainerInstantiator.JAVA8_SERVER_NAME,new J8GenericContainerInstantiator(),""String_Node_Str"",true,false),null);
  context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8GenericContainerInstantiator.JAVA8_CLIENT_NAME,new J8GenericContainerInstantiator(),""String_Node_Str"",false,true),null);
  context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8SSLGenericContainerInstantiator.JAVA8_SSL_CLIENT_NAME,new J8SSLGenericContainerInstantiator(),""String_Node_Str"",true,false),null);
  context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8SSLGenericContainerInstantiator.JAVA8_SSL_SERVER_NAME,new J8SSLGenericContainerInstantiator(),""String_Node_Str"",false,true),null);
  IAdapterManager am=getAdapterManager(context);
  if (am != null) {
    rscAdapterFactories=new ArrayList<IAdapterFactory>();
    IAdapterFactory af=new J8RemoteServiceContainerAdapterFactory();
    am.registerAdapters(af,J8SSLServerSOContainer.class);
    rscAdapterFactories.add(af);
    af=new RemoteServiceContainerAdapterFactory();
    am.registerAdapters(af,J8TCPServerSOContainer.class);
    rscAdapterFactories.add(af);
    af=new RemoteServiceContainerAdapterFactory();
    am.registerAdapters(af,J8SSLClientSOContainer.class);
    rscAdapterFactories.add(af);
    af=new RemoteServiceContainerAdapterFactory();
    am.registerAdapters(af,J8TCPClientSOContainer.class);
    rscAdapterFactories.add(af);
  }
}","protected void runWithoutRegistry() throws Exception {
  context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8GenericContainerInstantiator.JAVA8_SERVER_NAME,new J8GenericContainerInstantiator(),""String_Node_Str"",true,false),null);
  context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8GenericContainerInstantiator.JAVA8_CLIENT_NAME,new J8GenericContainerInstantiator(),""String_Node_Str"",false,false),null);
  context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8SSLGenericContainerInstantiator.JAVA8_SSL_CLIENT_NAME,new J8SSLGenericContainerInstantiator(),""String_Node_Str"",false,false),null);
  context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8SSLGenericContainerInstantiator.JAVA8_SSL_SERVER_NAME,new J8SSLGenericContainerInstantiator(),""String_Node_Str"",true,false),null);
  IAdapterManager am=getAdapterManager(context);
  if (am != null) {
    rscAdapterFactories=new ArrayList<IAdapterFactory>();
    IAdapterFactory af=new J8RemoteServiceContainerAdapterFactory();
    am.registerAdapters(af,J8SSLServerSOContainer.class);
    rscAdapterFactories.add(af);
    af=new J8RemoteServiceContainerAdapterFactory();
    am.registerAdapters(af,J8TCPServerSOContainer.class);
    rscAdapterFactories.add(af);
    af=new J8RemoteServiceContainerAdapterFactory();
    am.registerAdapters(af,J8SSLClientSOContainer.class);
    rscAdapterFactories.add(af);
    af=new J8RemoteServiceContainerAdapterFactory();
    am.registerAdapters(af,J8TCPClientSOContainer.class);
    rscAdapterFactories.add(af);
  }
}",0.9902020820575628
94205,"@Override public void start(final BundleContext context) throws Exception {
  SafeRunner.run(new ExtensionRegistryRunnable(context){
    protected void runWithoutRegistry() throws Exception {
      context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8GenericContainerInstantiator.JAVA8_SERVER_NAME,new J8GenericContainerInstantiator(),""String_Node_Str"",true,false),null);
      context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8GenericContainerInstantiator.JAVA8_CLIENT_NAME,new J8GenericContainerInstantiator(),""String_Node_Str"",false,true),null);
      context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8SSLGenericContainerInstantiator.JAVA8_SSL_CLIENT_NAME,new J8SSLGenericContainerInstantiator(),""String_Node_Str"",true,false),null);
      context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8SSLGenericContainerInstantiator.JAVA8_SSL_SERVER_NAME,new J8SSLGenericContainerInstantiator(),""String_Node_Str"",false,true),null);
      IAdapterManager am=getAdapterManager(context);
      if (am != null) {
        rscAdapterFactories=new ArrayList<IAdapterFactory>();
        IAdapterFactory af=new J8RemoteServiceContainerAdapterFactory();
        am.registerAdapters(af,J8SSLServerSOContainer.class);
        rscAdapterFactories.add(af);
        af=new RemoteServiceContainerAdapterFactory();
        am.registerAdapters(af,J8TCPServerSOContainer.class);
        rscAdapterFactories.add(af);
        af=new RemoteServiceContainerAdapterFactory();
        am.registerAdapters(af,J8SSLClientSOContainer.class);
        rscAdapterFactories.add(af);
        af=new RemoteServiceContainerAdapterFactory();
        am.registerAdapters(af,J8TCPClientSOContainer.class);
        rscAdapterFactories.add(af);
      }
    }
  }
);
}","@Override public void start(final BundleContext context) throws Exception {
  SafeRunner.run(new ExtensionRegistryRunnable(context){
    protected void runWithoutRegistry() throws Exception {
      context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8GenericContainerInstantiator.JAVA8_SERVER_NAME,new J8GenericContainerInstantiator(),""String_Node_Str"",true,false),null);
      context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8GenericContainerInstantiator.JAVA8_CLIENT_NAME,new J8GenericContainerInstantiator(),""String_Node_Str"",false,false),null);
      context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8SSLGenericContainerInstantiator.JAVA8_SSL_CLIENT_NAME,new J8SSLGenericContainerInstantiator(),""String_Node_Str"",false,false),null);
      context.registerService(ContainerTypeDescription.class,new ContainerTypeDescription(J8SSLGenericContainerInstantiator.JAVA8_SSL_SERVER_NAME,new J8SSLGenericContainerInstantiator(),""String_Node_Str"",true,false),null);
      IAdapterManager am=getAdapterManager(context);
      if (am != null) {
        rscAdapterFactories=new ArrayList<IAdapterFactory>();
        IAdapterFactory af=new J8RemoteServiceContainerAdapterFactory();
        am.registerAdapters(af,J8SSLServerSOContainer.class);
        rscAdapterFactories.add(af);
        af=new J8RemoteServiceContainerAdapterFactory();
        am.registerAdapters(af,J8TCPServerSOContainer.class);
        rscAdapterFactories.add(af);
        af=new J8RemoteServiceContainerAdapterFactory();
        am.registerAdapters(af,J8SSLClientSOContainer.class);
        rscAdapterFactories.add(af);
        af=new J8RemoteServiceContainerAdapterFactory();
        am.registerAdapters(af,J8TCPClientSOContainer.class);
        rscAdapterFactories.add(af);
      }
    }
  }
);
}",0.991411701556629
94206,"/** 
 * @since 3.0
 */
protected void encodeServiceProperties(org.osgi.service.remoteserviceadmin.EndpointDescription endpointDescription,IServiceProperties result){
  encodeOSGiServiceProperties(endpointDescription,result);
  if (endpointDescription instanceof org.eclipse.ecf.osgi.services.remoteserviceadmin.EndpointDescription) {
    EndpointDescription ecfEd=(EndpointDescription)endpointDescription;
    Long rsId=(Long)endpointDescription.getProperties().get(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID);
    if (rsId != null)     encodeLong(result,org.eclipse.ecf.remoteservice.Constants.SERVICE_ID,rsId);
    String containerIDNamespace=ecfEd.getIdNamespace();
    if (containerIDNamespace != null)     encodeString(result,RemoteConstants.ENDPOINT_CONTAINER_ID_NAMESPACE,containerIDNamespace);
    ID connectTargetID=ecfEd.getConnectTargetID();
    if (connectTargetID != null)     encodeString(result,RemoteConstants.ENDPOINT_CONNECTTARGET_ID,connectTargetID.getName());
    ID[] idFilter=ecfEd.getIDFilter();
    if (idFilter != null && idFilter.length > 0) {
      List<String> idNames=new ArrayList<String>();
      for (int i=0; i < idFilter.length; i++)       idNames.add(idFilter[i].getName());
      encodeList(result,RemoteConstants.ENDPOINT_IDFILTER_IDS,idNames);
    }
    String remoteFilter=ecfEd.getRemoteServiceFilter();
    if (remoteFilter != null)     encodeString(result,RemoteConstants.ENDPOINT_REMOTESERVICE_FILTER,remoteFilter);
  }
  encodeNonStandardServiceProperties(endpointDescription.getProperties(),result);
}","/** 
 * @since 3.0
 */
protected void encodeServiceProperties(org.osgi.service.remoteserviceadmin.EndpointDescription endpointDescription,IServiceProperties result){
  encodeOSGiServiceProperties(endpointDescription,result);
  if (endpointDescription instanceof org.eclipse.ecf.osgi.services.remoteserviceadmin.EndpointDescription) {
    EndpointDescription ecfEd=(EndpointDescription)endpointDescription;
    Long rsId=(Long)endpointDescription.getProperties().get(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID);
    if (rsId != null)     encodeLong(result,org.eclipse.ecf.remoteservice.Constants.SERVICE_ID,rsId);
    String ecfEndpointId=(String)ecfEd.getProperties().get(RemoteConstants.ENDPOINT_ID);
    if (ecfEndpointId != null)     encodeString(result,RemoteConstants.ENDPOINT_ID,ecfEndpointId);
    String containerIDNamespace=ecfEd.getIdNamespace();
    if (containerIDNamespace != null)     encodeString(result,RemoteConstants.ENDPOINT_CONTAINER_ID_NAMESPACE,containerIDNamespace);
    Long timestamp=(Long)ecfEd.getProperties().get(RemoteConstants.ENDPOINT_TIMESTAMP);
    if (timestamp != null)     encodeLong(result,RemoteConstants.ENDPOINT_TIMESTAMP,timestamp);
    ID connectTargetID=ecfEd.getConnectTargetID();
    if (connectTargetID != null)     encodeString(result,RemoteConstants.ENDPOINT_CONNECTTARGET_ID,connectTargetID.getName());
    ID[] idFilter=ecfEd.getIDFilter();
    if (idFilter != null && idFilter.length > 0) {
      List<String> idNames=new ArrayList<String>();
      for (int i=0; i < idFilter.length; i++)       idNames.add(idFilter[i].getName());
      encodeList(result,RemoteConstants.ENDPOINT_IDFILTER_IDS,idNames);
    }
    String remoteFilter=ecfEd.getRemoteServiceFilter();
    if (remoteFilter != null)     encodeString(result,RemoteConstants.ENDPOINT_REMOTESERVICE_FILTER,remoteFilter);
  }
  encodeNonStandardServiceProperties(endpointDescription.getProperties(),result);
}",0.8931034482758621
94207,"/** 
 * @since 3.0
 */
protected org.osgi.service.remoteserviceadmin.EndpointDescription decodeEndpointDescription(IServiceProperties discoveredServiceProperties){
  Map<String,Object> endpointDescriptionProperties=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);
  decodeOSGiProperties(discoveredServiceProperties,endpointDescriptionProperties);
  Long remoteServiceId=decodeLong(discoveredServiceProperties,org.eclipse.ecf.remoteservice.Constants.SERVICE_ID);
  endpointDescriptionProperties.put(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID,remoteServiceId);
  String containerIDNamespace=decodeString(discoveredServiceProperties,RemoteConstants.ENDPOINT_CONTAINER_ID_NAMESPACE);
  if (containerIDNamespace != null) {
    endpointDescriptionProperties.put(RemoteConstants.ENDPOINT_CONTAINER_ID_NAMESPACE,containerIDNamespace);
    String connectTargetIDName=decodeString(discoveredServiceProperties,RemoteConstants.ENDPOINT_CONNECTTARGET_ID);
    if (connectTargetIDName != null)     endpointDescriptionProperties.put(RemoteConstants.ENDPOINT_CONNECTTARGET_ID,connectTargetIDName);
    List<String> idFilterNames=decodeList(discoveredServiceProperties,RemoteConstants.ENDPOINT_IDFILTER_IDS);
    Object idFilterNamesval=PropertiesUtil.convertToStringPlusValue(idFilterNames);
    if (idFilterNamesval != null)     endpointDescriptionProperties.put(RemoteConstants.ENDPOINT_IDFILTER_IDS,idFilterNamesval);
    String remoteServiceFilter=decodeString(discoveredServiceProperties,RemoteConstants.ENDPOINT_REMOTESERVICE_FILTER);
    if (remoteServiceFilter != null)     endpointDescriptionProperties.put(RemoteConstants.ENDPOINT_REMOTESERVICE_FILTER,remoteServiceFilter);
  }
  decodeNonStandardServiceProperties(discoveredServiceProperties,endpointDescriptionProperties);
  return (containerIDNamespace == null) ? new org.osgi.service.remoteserviceadmin.EndpointDescription(endpointDescriptionProperties) : new EndpointDescription(endpointDescriptionProperties);
}","/** 
 * @since 3.0
 */
protected org.osgi.service.remoteserviceadmin.EndpointDescription decodeEndpointDescription(IServiceProperties discoveredServiceProperties){
  Map<String,Object> endpointDescriptionProperties=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);
  decodeOSGiProperties(discoveredServiceProperties,endpointDescriptionProperties);
  String containerIDNamespace=decodeString(discoveredServiceProperties,RemoteConstants.ENDPOINT_CONTAINER_ID_NAMESPACE);
  if (containerIDNamespace != null) {
    Long remoteServiceId=decodeLong(discoveredServiceProperties,org.eclipse.ecf.remoteservice.Constants.SERVICE_ID);
    if (remoteServiceId != null)     endpointDescriptionProperties.put(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID,remoteServiceId);
    endpointDescriptionProperties.put(RemoteConstants.ENDPOINT_CONTAINER_ID_NAMESPACE,containerIDNamespace);
    String ecfEndpointId=decodeString(discoveredServiceProperties,RemoteConstants.ENDPOINT_ID);
    if (ecfEndpointId != null)     endpointDescriptionProperties.put(RemoteConstants.ENDPOINT_ID,ecfEndpointId);
    Long timestamp=decodeLong(discoveredServiceProperties,RemoteConstants.ENDPOINT_TIMESTAMP);
    if (timestamp != null)     endpointDescriptionProperties.put(RemoteConstants.ENDPOINT_TIMESTAMP,timestamp);
    String connectTargetIDName=decodeString(discoveredServiceProperties,RemoteConstants.ENDPOINT_CONNECTTARGET_ID);
    if (connectTargetIDName != null)     endpointDescriptionProperties.put(RemoteConstants.ENDPOINT_CONNECTTARGET_ID,connectTargetIDName);
    List<String> idFilterNames=decodeList(discoveredServiceProperties,RemoteConstants.ENDPOINT_IDFILTER_IDS);
    Object idFilterNamesval=PropertiesUtil.convertToStringPlusValue(idFilterNames);
    if (idFilterNamesval != null)     endpointDescriptionProperties.put(RemoteConstants.ENDPOINT_IDFILTER_IDS,idFilterNamesval);
    String remoteServiceFilter=decodeString(discoveredServiceProperties,RemoteConstants.ENDPOINT_REMOTESERVICE_FILTER);
    if (remoteServiceFilter != null)     endpointDescriptionProperties.put(RemoteConstants.ENDPOINT_REMOTESERVICE_FILTER,remoteServiceFilter);
  }
  decodeNonStandardServiceProperties(discoveredServiceProperties,endpointDescriptionProperties);
  return (containerIDNamespace == null) ? new org.osgi.service.remoteserviceadmin.EndpointDescription(endpointDescriptionProperties) : new EndpointDescription(endpointDescriptionProperties);
}",0.7680798004987531
94208,"private void verifyECFProperties(){
  this.idNamespace=verifyStringProperty(RemoteConstants.ENDPOINT_CONTAINER_ID_NAMESPACE);
  this.containerID=verifyIDProperty(idNamespace,getId());
  this.connectTargetID=verifyIDProperty(RemoteConstants.ENDPOINT_CONNECTTARGET_ID);
  this.idFilter=verifyIDFilter();
  this.rsFilter=verifyStringProperty(RemoteConstants.ENDPOINT_REMOTESERVICE_FILTER);
}","private void verifyECFProperties(){
  this.ecfid=verifyStringProperty(RemoteConstants.ENDPOINT_ID);
  if (this.ecfid == null) {
    LogUtility.logWarning(""String_Node_Str"",DebugOptions.ENDPOINT_DESCRIPTION_READER,EndpointDescription.class,""String_Node_Str"" + RemoteConstants.ENDPOINT_ID + ""String_Node_Str"");
    this.ecfid=getId();
  }
  this.timestamp=verifyLongProperty(RemoteConstants.ENDPOINT_TIMESTAMP);
  if (this.timestamp == null) {
    LogUtility.logWarning(""String_Node_Str"",DebugOptions.ENDPOINT_DESCRIPTION_READER,EndpointDescription.class,""String_Node_Str"" + RemoteConstants.ENDPOINT_TIMESTAMP + ""String_Node_Str"");
    this.timestamp=getServiceId();
  }
  this.idNamespace=verifyStringProperty(RemoteConstants.ENDPOINT_CONTAINER_ID_NAMESPACE);
  this.containerID=verifyIDProperty(idNamespace,this.ecfid);
  this.rsId=verifyLongProperty(Constants.SERVICE_ID);
  if (this.rsId == null)   this.rsId=getServiceId();
  this.connectTargetID=verifyIDProperty(RemoteConstants.ENDPOINT_CONNECTTARGET_ID);
  this.idFilter=verifyIDFilter();
  this.rsFilter=verifyStringProperty(RemoteConstants.ENDPOINT_REMOTESERVICE_FILTER);
}",0.2369980250164582
94209,"public String toString(){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(getId());
  sb.append(""String_Node_Str"").append(getServiceId());
  sb.append(""String_Node_Str"").append(getFrameworkUUID()).append(""String_Node_Str"");
  return sb.toString();
}","public String toString(){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(getProperties()).append(""String_Node_Str"");
  return sb.toString();
}",0.6929824561403509
94210,"public synchronized void takeOffTheAir(){
  trace(""String_Node_Str"" + getName() + ""String_Node_Str"");
  if (listenerThread != null) {
    listenerThread.interrupt();
    listenerThread=null;
  }
  if (threadGroup != null) {
    threadGroup.interrupt();
    threadGroup=null;
  }
  isOnTheAir=false;
}","public synchronized void takeOffTheAir(){
  trace(""String_Node_Str"" + getName() + ""String_Node_Str"");
  if (listenerThread != null) {
    listenerThread.interrupt();
    listenerThread=null;
  }
  if (threadGroup != null) {
    threadGroup.interrupt();
    threadGroup=null;
  }
  if (this.serverSocket != null) {
    try {
      this.serverSocket.close();
    }
 catch (    IOException e) {
      Trace.catching(""String_Node_Str"",ECFProviderDebugOptions.CONNECTION,SSLServerSOContainerGroup.class,""String_Node_Str"",e);
    }
    this.serverSocket=null;
  }
  isOnTheAir=false;
}",0.6825938566552902
94211,"public Client3(){
  super();
  setMessageReceiver(new IMessageReceiver(){
    public void handleMessage(    final IChatMessage chatMessage){
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          MessageDialog.openInformation(null,""String_Node_Str"" + chatMessage.getFromID().getName(),chatMessage.getBody());
        }
      }
);
    }
  }
);
}","public Client3(){
  super(new IMessageReceiver(){
    public void handleMessage(    final IChatMessage chatMessage){
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          MessageDialog.openInformation(null,""String_Node_Str"" + chatMessage.getFromID().getName(),chatMessage.getBody());
        }
      }
);
    }
  }
);
}",0.9673024523160764
94212,"public Client4(){
  super();
  setMessageReceiver(new IMessageReceiver(){
    public void handleMessage(    final IChatMessage chatMessage){
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          MessageDialog.openInformation(null,""String_Node_Str"" + chatMessage.getFromID().getName(),chatMessage.getBody());
        }
      }
);
    }
  }
);
  setPresenceListener(new IPresenceListener(){
    public void handlePresence(    ID fromID,    IPresence presence){
      System.out.println(""String_Node_Str"" + fromID + ""String_Node_Str""+ presence+ ""String_Node_Str"");
    }
    public void handleRosterEntryAdd(    IRosterEntry entry){
      System.out.println(""String_Node_Str"" + entry + ""String_Node_Str"");
    }
    public void handleRosterEntryRemove(    IRosterEntry entry){
      System.out.println(""String_Node_Str"" + entry + ""String_Node_Str"");
    }
  }
);
}","public Client4(){
  super(new IMessageReceiver(){
    public void handleMessage(    final IChatMessage chatMessage){
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          MessageDialog.openInformation(null,""String_Node_Str"" + chatMessage.getFromID().getName(),chatMessage.getBody());
        }
      }
);
    }
  }
,new IPresenceListener(){
    public void handlePresence(    ID fromID,    IPresence presence){
      System.out.println(""String_Node_Str"" + fromID + ""String_Node_Str""+ presence+ ""String_Node_Str"");
    }
  }
);
}",0.4914442162902122
94213,"public boolean processEvent(Event event){
  if (event instanceof IContainerConnectedEvent) {
    IContainerConnectedEvent ccevent=(IContainerConnectedEvent)event;
    if (!ccevent.getTargetID().equals(getGroupID()))     sendHelloMessage();
  }
  return false;
}","public boolean processEvent(Event event){
  if (event instanceof IContainerConnectedEvent) {
    IContainerConnectedEvent ccevent=(IContainerConnectedEvent)event;
    if (!ccevent.getTargetID().equals(getConnectedID()))     sendHelloMessage();
  }
  return false;
}",0.7908745247148289
94214,"protected void initialize() throws SharedObjectInitException {
  super.initialize();
  addEventProcessor(new IEventProcessor(){
    public boolean processEvent(    Event event){
      if (event instanceof IContainerConnectedEvent) {
        IContainerConnectedEvent ccevent=(IContainerConnectedEvent)event;
        if (!ccevent.getTargetID().equals(getGroupID()))         sendHelloMessage();
      }
      return false;
    }
  }
);
}","protected void initialize() throws SharedObjectInitException {
  super.initialize();
  addEventProcessor(new IEventProcessor(){
    public boolean processEvent(    Event event){
      if (event instanceof IContainerConnectedEvent) {
        IContainerConnectedEvent ccevent=(IContainerConnectedEvent)event;
        if (!ccevent.getTargetID().equals(getConnectedID()))         sendHelloMessage();
      }
      return false;
    }
  }
);
}",0.8394495412844036
94215,"public static Map<String,Object> copyNonECFProperties(ServiceReference serviceReference,Map<String,Object> target){
  String[] keys=serviceReference.getPropertyKeys();
  for (int i=0; i < keys.length; i++)   if (!isECFProperty(keys[i]))   target.put(keys[i],serviceReference.getProperty(keys[i]));
  return target;
}","public static Map<String,Object> copyNonECFProperties(IRemoteServiceRegistration serviceRegistration,Map<String,Object> target){
  String[] keys=serviceRegistration.getPropertyKeys();
  for (int i=0; i < keys.length; i++)   if (!isECFProperty(keys[i]))   target.put(keys[i],serviceRegistration.getProperty(keys[i]));
  return target;
}",0.8847926267281107
94216,"private ExportRegistration exportService(final ServiceReference serviceReference,Map<String,?> overridingProperties,String[] exportedInterfaces,IRemoteServiceContainer rsContainer,Map<String,Object> endpointDescriptionProperties) throws Exception {
  Map remoteServiceProperties=copyNonReservedProperties(serviceReference,(Map<String,Object>)overridingProperties,new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER));
  IRemoteServiceContainerAdapter containerAdapter=rsContainer.getContainerAdapter();
  IRemoteServiceRegistration remoteRegistration=null;
  if (containerAdapter instanceof IOSGiRemoteServiceContainerAdapter) {
    IOSGiRemoteServiceContainerAdapter osgiContainerAdapter=(IOSGiRemoteServiceContainerAdapter)containerAdapter;
    remoteRegistration=osgiContainerAdapter.registerRemoteService(exportedInterfaces,serviceReference,PropertiesUtil.createDictionaryFromMap(remoteServiceProperties));
  }
 else {
    Object service=AccessController.doPrivileged(new PrivilegedAction<Object>(){
      public Object run(){
        return getClientBundleContext().getService(serviceReference);
      }
    }
);
    remoteRegistration=containerAdapter.registerRemoteService(exportedInterfaces,service,PropertiesUtil.createDictionaryFromMap(remoteServiceProperties));
  }
  endpointDescriptionProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_SERVICE_ID,remoteRegistration.getProperty(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID));
  EndpointDescription endpointDescription=new EndpointDescription(serviceReference,endpointDescriptionProperties);
  return new ExportRegistration(new ExportEndpoint(serviceReference,endpointDescription,remoteRegistration));
}","private ExportRegistration exportService(final ServiceReference serviceReference,Map<String,?> overridingProperties,String[] exportedInterfaces,IRemoteServiceContainer rsContainer,Map<String,Object> endpointDescriptionProperties) throws Exception {
  Map remoteServiceProperties=copyNonReservedProperties(serviceReference,(Map<String,Object>)overridingProperties,new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER));
  IRemoteServiceContainerAdapter containerAdapter=rsContainer.getContainerAdapter();
  IRemoteServiceRegistration remoteRegistration=null;
  if (containerAdapter instanceof IOSGiRemoteServiceContainerAdapter) {
    IOSGiRemoteServiceContainerAdapter osgiContainerAdapter=(IOSGiRemoteServiceContainerAdapter)containerAdapter;
    remoteRegistration=osgiContainerAdapter.registerRemoteService(exportedInterfaces,serviceReference,PropertiesUtil.createDictionaryFromMap(remoteServiceProperties));
  }
 else {
    Object service=AccessController.doPrivileged(new PrivilegedAction<Object>(){
      public Object run(){
        return getClientBundleContext().getService(serviceReference);
      }
    }
);
    remoteRegistration=containerAdapter.registerRemoteService(exportedInterfaces,service,PropertiesUtil.createDictionaryFromMap(remoteServiceProperties));
  }
  endpointDescriptionProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_SERVICE_ID,remoteRegistration.getProperty(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID));
  endpointDescriptionProperties=PropertiesUtil.mergeProperties(remoteRegistration,endpointDescriptionProperties);
  EndpointDescription endpointDescription=new EndpointDescription(serviceReference,endpointDescriptionProperties);
  return new ExportRegistration(new ExportEndpoint(serviceReference,endpointDescription,remoteRegistration));
}",0.9675767918088736
94217,"public static Map<String,Object> copyNonECFProperties(ServiceReference serviceReference,Map<String,Object> target){
  String[] keys=serviceReference.getPropertyKeys();
  for (int i=0; i < keys.length; i++)   if (!isECFProperty(keys[i]))   target.put(keys[i],serviceReference.getProperty(keys[i]));
  return target;
}","public static Map<String,Object> copyNonECFProperties(IRemoteServiceRegistration serviceRegistration,Map<String,Object> target){
  String[] keys=serviceRegistration.getPropertyKeys();
  for (int i=0; i < keys.length; i++)   if (!isECFProperty(keys[i]))   target.put(keys[i],serviceRegistration.getProperty(keys[i]));
  return target;
}",0.8847926267281107
94218,"private ExportRegistration exportService(final ServiceReference serviceReference,Map<String,?> overridingProperties,String[] exportedInterfaces,IRemoteServiceContainer rsContainer,Map<String,Object> endpointDescriptionProperties) throws Exception {
  Map remoteServiceProperties=copyNonReservedProperties(serviceReference,(Map<String,Object>)overridingProperties,new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER));
  IRemoteServiceContainerAdapter containerAdapter=rsContainer.getContainerAdapter();
  IRemoteServiceRegistration remoteRegistration=null;
  if (containerAdapter instanceof IOSGiRemoteServiceContainerAdapter) {
    IOSGiRemoteServiceContainerAdapter osgiContainerAdapter=(IOSGiRemoteServiceContainerAdapter)containerAdapter;
    remoteRegistration=osgiContainerAdapter.registerRemoteService(exportedInterfaces,serviceReference,PropertiesUtil.createDictionaryFromMap(remoteServiceProperties));
  }
 else {
    Object service=AccessController.doPrivileged(new PrivilegedAction<Object>(){
      public Object run(){
        return getClientBundleContext().getService(serviceReference);
      }
    }
);
    remoteRegistration=containerAdapter.registerRemoteService(exportedInterfaces,service,PropertiesUtil.createDictionaryFromMap(remoteServiceProperties));
  }
  endpointDescriptionProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_SERVICE_ID,remoteRegistration.getProperty(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID));
  EndpointDescription endpointDescription=new EndpointDescription(serviceReference,endpointDescriptionProperties);
  return new ExportRegistration(new ExportEndpoint(serviceReference,endpointDescription,remoteRegistration));
}","private ExportRegistration exportService(final ServiceReference serviceReference,Map<String,?> overridingProperties,String[] exportedInterfaces,IRemoteServiceContainer rsContainer,Map<String,Object> endpointDescriptionProperties) throws Exception {
  Map remoteServiceProperties=copyNonReservedProperties(serviceReference,(Map<String,Object>)overridingProperties,new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER));
  IRemoteServiceContainerAdapter containerAdapter=rsContainer.getContainerAdapter();
  IRemoteServiceRegistration remoteRegistration=null;
  if (containerAdapter instanceof IOSGiRemoteServiceContainerAdapter) {
    IOSGiRemoteServiceContainerAdapter osgiContainerAdapter=(IOSGiRemoteServiceContainerAdapter)containerAdapter;
    remoteRegistration=osgiContainerAdapter.registerRemoteService(exportedInterfaces,serviceReference,PropertiesUtil.createDictionaryFromMap(remoteServiceProperties));
  }
 else {
    Object service=AccessController.doPrivileged(new PrivilegedAction<Object>(){
      public Object run(){
        return getClientBundleContext().getService(serviceReference);
      }
    }
);
    remoteRegistration=containerAdapter.registerRemoteService(exportedInterfaces,service,PropertiesUtil.createDictionaryFromMap(remoteServiceProperties));
  }
  endpointDescriptionProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_SERVICE_ID,remoteRegistration.getProperty(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID));
  endpointDescriptionProperties=PropertiesUtil.mergeProperties(remoteRegistration,endpointDescriptionProperties);
  EndpointDescription endpointDescription=new EndpointDescription(serviceReference,endpointDescriptionProperties);
  return new ExportRegistration(new ExportEndpoint(serviceReference,endpointDescription,remoteRegistration));
}",0.9675767918088736
94219,"public ProxyServiceFactory(Map<String,Version> interfaceVersions,IRemoteService remoteService){
  this.interfaceVersions=interfaceVersions;
  this.remoteService=remoteService;
}","public ProxyServiceFactory(Map<String,Version> interfaceVersions,IRemoteServiceContainerAdapter containerAdapter,IRemoteServiceReference rsReference,IRemoteService remoteService){
  this.containerAdapter=containerAdapter;
  this.rsReference=rsReference;
  this.interfaceVersions=interfaceVersions;
  this.remoteService=remoteService;
}",0.69140625
94220,"private ImportEndpoint createAndRegisterProxy(final EndpointDescription endpointDescription,IRemoteServiceContainer rsContainer,IRemoteServiceReference selectedRsReference) throws Exception {
  final BundleContext proxyServiceFactoryContext=getProxyServiceFactoryContext(endpointDescription);
  if (proxyServiceFactoryContext == null)   throw new NullPointerException(""String_Node_Str"");
  IRemoteServiceContainerAdapter containerAdapter=rsContainer.getContainerAdapter();
  ID rsContainerID=rsContainer.getContainer().getID();
  final IRemoteService rs=containerAdapter.getRemoteService(selectedRsReference);
  if (rs == null)   throw new NullPointerException(""String_Node_Str"" + selectedRsReference + ""String_Node_Str""+ rsContainerID);
  final Map proxyProperties=createProxyProperties(endpointDescription,rsContainer,selectedRsReference,rs);
  endpointDescription.setPropertiesOverrides(proxyProperties);
  final List<String> serviceTypes=endpointDescription.getInterfaces();
  ServiceRegistration proxyRegistration=AccessController.doPrivileged(new PrivilegedAction<ServiceRegistration>(){
    public ServiceRegistration run(){
      return proxyServiceFactoryContext.registerService((String[])serviceTypes.toArray(new String[serviceTypes.size()]),createProxyServiceFactory(endpointDescription,rs),(Dictionary)PropertiesUtil.createDictionaryFromMap(proxyProperties));
    }
  }
);
  return new ImportEndpoint(containerAdapter,selectedRsReference,new RemoteServiceListener(),proxyRegistration,endpointDescription);
}","private ImportEndpoint createAndRegisterProxy(final EndpointDescription endpointDescription,final IRemoteServiceContainer rsContainer,final IRemoteServiceReference selectedRsReference) throws Exception {
  final BundleContext proxyServiceFactoryContext=getProxyServiceFactoryContext(endpointDescription);
  if (proxyServiceFactoryContext == null)   throw new NullPointerException(""String_Node_Str"");
  final IRemoteServiceContainerAdapter containerAdapter=rsContainer.getContainerAdapter();
  ID rsContainerID=rsContainer.getContainer().getID();
  final IRemoteService rs=containerAdapter.getRemoteService(selectedRsReference);
  if (rs == null)   throw new NullPointerException(""String_Node_Str"" + selectedRsReference + ""String_Node_Str""+ rsContainerID);
  final Map proxyProperties=createProxyProperties(endpointDescription,rsContainer,selectedRsReference,rs);
  endpointDescription.setPropertiesOverrides(proxyProperties);
  final List<String> serviceTypes=endpointDescription.getInterfaces();
  ServiceRegistration proxyRegistration=AccessController.doPrivileged(new PrivilegedAction<ServiceRegistration>(){
    public ServiceRegistration run(){
      return proxyServiceFactoryContext.registerService((String[])serviceTypes.toArray(new String[serviceTypes.size()]),createProxyServiceFactory(endpointDescription,containerAdapter,selectedRsReference,rs),(Dictionary)PropertiesUtil.createDictionaryFromMap(proxyProperties));
    }
  }
);
  return new ImportEndpoint(containerAdapter,selectedRsReference,new RemoteServiceListener(),proxyRegistration,endpointDescription);
}",0.9822179114128676
94221,"public void ungetService(Bundle bundle,ServiceRegistration registration,Object service){
  ungetProxyClassLoader(bundle);
}","public void ungetService(Bundle bundle,ServiceRegistration registration,Object service){
  if (remoteProxyCount == 1L)   containerAdapter.ungetRemoteService(rsReference);
  remoteProxyCount--;
  ungetProxyClassLoader(bundle);
}",0.5885714285714285
94222,"private ServiceFactory createProxyServiceFactory(EndpointDescription endpointDescription,IRemoteService remoteService){
  return new ProxyServiceFactory(endpointDescription.getInterfaceVersions(),remoteService);
}","private ServiceFactory createProxyServiceFactory(EndpointDescription endpointDescription,IRemoteServiceContainerAdapter containerAdapter,IRemoteServiceReference selectedRsReference,IRemoteService remoteService){
  return new ProxyServiceFactory(endpointDescription.getInterfaceVersions(),containerAdapter,selectedRsReference,remoteService);
}",0.7675675675675676
94223,"public Object getService(Bundle bundle,ServiceRegistration registration){
  return createProxy(bundle,registration.getReference(),remoteService,interfaceVersions);
}","public Object getService(Bundle bundle,ServiceRegistration registration){
  Object proxy=createProxy(bundle,registration.getReference(),remoteService,interfaceVersions);
  remoteProxyCount++;
  return proxy;
}",0.8449197860962567
94224,"private Dictionary<String,Object> createRemoteServiceProperties(){
  Dictionary<String,Object> props=new Hashtable<String,Object>();
  props.put(""String_Node_Str"",""String_Node_Str"");
  String serviceExportedConfig=System.getProperty(""String_Node_Str"",GENERIC_SERVER_CONFIG);
  props.put(""String_Node_Str"",serviceExportedConfig);
  String propName=null;
  String propValue=null;
  if (GENERIC_SERVER_CONFIG.equals(serviceExportedConfig)) {
    propName=GENERIC_SERVER_PORTPROP_NAME;
    propValue=GENERIC_SERVER_PORTPROP_VALUE;
  }
 else   if (REST_SERVER_CONFIG.equals(serviceExportedConfig)) {
    propName=REST_SERVER_IDPROP_NAME;
    propValue=REST_SERVER_IDPROP_VALUE;
  }
 else   if (R_OSGI_SERVER_CONFIG.equals(serviceExportedConfig)) {
    return props;
  }
 else   throw new NullPointerException(""String_Node_Str"" + serviceExportedConfig);
  props.put(propName,propValue);
  return props;
}","private Dictionary<String,Object> createRemoteServiceProperties(){
  Dictionary<String,Object> props=new Hashtable<String,Object>();
  props.put(""String_Node_Str"",""String_Node_Str"");
  String serviceExportedConfig=System.getProperty(""String_Node_Str"",GENERIC_SERVER_CONFIG);
  props.put(""String_Node_Str"",serviceExportedConfig);
  String propName=null;
  String propValue=null;
  if (GENERIC_SERVER_CONFIG.equals(serviceExportedConfig)) {
    propName=GENERIC_SERVER_PORTPROP_NAME;
    propValue=GENERIC_SERVER_PORTPROP_VALUE;
    props.put(GENERIC_SERVER_HOSTPROP_NAME,GENERIC_SERVER_HOSTPROP_VALUE);
  }
 else   if (REST_SERVER_CONFIG.equals(serviceExportedConfig)) {
    propName=REST_SERVER_IDPROP_NAME;
    propValue=REST_SERVER_IDPROP_VALUE;
  }
 else   if (R_OSGI_SERVER_CONFIG.equals(serviceExportedConfig)) {
    return props;
  }
 else   throw new NullPointerException(""String_Node_Str"" + serviceExportedConfig);
  props.put(propName,propValue);
  return props;
}",0.814537680384821
94225,"public void testServerCreateMapParam3() throws Exception {
  String serverId=getServerIdentity();
  Map map=new HashMap();
  map.put(""String_Node_Str"",serverId);
  map.put(""String_Node_Str"",InetAddress.getLoopbackAddress());
  container=containerFactory.createContainer(getServerContainerName(),map);
  assertNotNull(container);
}","public void testServerCreateMapParam3() throws Exception {
  String serverId=getServerIdentity();
  Map map=new HashMap();
  map.put(""String_Node_Str"",serverId);
  map.put(""String_Node_Str"",new InetSocketAddress((InetAddress)null,0).getAddress());
  container=containerFactory.createContainer(getServerContainerName(),map);
  assertNotNull(container);
}",0.9370424597364568
94226,"protected Property getProperty(String propertyName){
  if (propertyName == null)   throw new NullPointerException(""String_Node_Str"");
synchronized (properties) {
    return properties.get(propertyName);
  }
}","public Property getProperty(){
  return SharedModel.Property.this;
}",0.3623188405797101
94227,"protected Property addProperty(Property property){
  if (property == null)   throw new NullPointerException(""String_Node_Str"");
synchronized (properties) {
    return properties.put(property.getName(),property);
  }
}","protected Property addProperty(final Property property){
  if (property == null)   throw new NullPointerException(""String_Node_Str"");
  Property oldProperty=null;
synchronized (properties) {
    oldProperty=properties.put(property.getName(),property);
  }
  final Property op=oldProperty;
  fireListeners(new ISharedModelPropertyAddEvent(){
    public SharedModel getSource(){
      return SharedModel.this;
    }
    public Property getAddedProperty(){
      return property;
    }
    public Property getPreAddedProperty(){
      return op;
    }
  }
);
  return op;
}",0.5336721728081322
94228,"public Object getValue(){
  return value;
}","public Object getValue(){
  return SharedModel.Property.this.getValue();
}",0.717948717948718
94229,"public Object setValue(Object newValue){
  Object oldValue=this.value;
  this.value=newValue;
  return oldValue;
}","public Object setValue(Object newValue){
  final Object previousValue=this.value;
  this.value=newValue;
  getModel().fireListeners(new ISharedModelPropertyValueChangeEvent(){
    public SharedModel getSource(){
      return getModel();
    }
    public Property getProperty(){
      return SharedModel.Property.this;
    }
    public Object getPreviousValue(){
      return previousValue;
    }
    public Object getValue(){
      return SharedModel.Property.this.getValue();
    }
  }
);
  return previousValue;
}",0.2988871224165342
94230,"protected Property removeProperty(String propertyName){
  if (propertyName == null)   throw new NullPointerException(""String_Node_Str"");
synchronized (properties) {
    return properties.remove(propertyName);
  }
}","protected Property removeProperty(String propertyName){
  if (propertyName == null)   throw new NullPointerException(""String_Node_Str"");
  Property oldProperty=null;
synchronized (properties) {
    oldProperty=properties.remove(propertyName);
  }
  final Property op=oldProperty;
  fireListeners(new ISharedModelPropertyRemoveEvent(){
    public SharedModel getSource(){
      return SharedModel.this;
    }
    public Property getRemovedProperty(){
      return op;
    }
  }
);
  return op;
}",0.5847457627118644
94231,"/** 
 * @return Map any properties associated with this shared object via the ISharedObjectConfig providedupon  {@link #init(ISharedObjectConfig)}.
 */
protected final Map getProperties(){
  return getConfig().getProperties();
}","/** 
 * @return Map any properties associated with this shared object via the ISharedObjectConfig providedupon  {@link #init(ISharedObjectConfig)}.
 */
protected final Map<String,?> getProperties(){
  return getConfig().getProperties();
}",0.9785407725321889
94232,"/** 
 * Get properties associated with with this ISharedObject
 * @return Map with properties associated with this ISharedObject instance.Will not be null.
 */
public Map getProperties();","/** 
 * Get properties associated with with this ISharedObject
 * @return Map with properties associated with this ISharedObject instance.Will not be null.
 */
public Map<String,?> getProperties();",0.9739583333333334
94233,"/** 
 * The properties associated with the owner ISharedObjectContainer
 * @return Map the properties associated with owner ISharedObjectContainer
 */
public Map getProperties();","/** 
 * The properties associated with the owner ISharedObjectContainer
 * @return Map the properties associated with owner ISharedObjectContainer
 */
public Map<String,?> getProperties();",0.9726775956284152
94234,"/** 
 * Get local container properties that it wishes to expose to shared object access
 * @return Map of properties available to calling shared object. Mapreturned must not be null.
 */
public Map getLocalContainerProperties();","/** 
 * Get local container properties that it wishes to expose to shared object access
 * @return Map of properties available to calling shared object. Mapreturned must not be null.
 */
public Map<String,?> getLocalContainerProperties();",0.9785407725321889
94235,"public SharedObjectDescription(Class clazz,ID id,Map properties){
  this.typeDescription=new SharedObjectTypeDescription(clazz.getName(),null);
  this.id=id;
  this.properties=(properties == null) ? new HashMap() : properties;
}","public SharedObjectDescription(Class clazz,ID id,Map<String,?> properties){
  this.typeDescription=new SharedObjectTypeDescription(clazz.getName(),null);
  this.id=id;
  this.properties=(properties == null) ? new HashMap<String,Object>() : properties;
}",0.948024948024948
94236,"public Map getProperties(){
  return properties;
}","public Map<String,?> getProperties(){
  return properties;
}",0.9090909090909092
94237,"/** 
 * @return Map any properties associated with this shared object via the ISharedObjectConfig providedupon  {@link #init(ISharedObjectConfig)}.
 */
protected final Map getProperties(){
  return getConfig().getProperties();
}","/** 
 * @return Map any properties associated with this shared object via the ISharedObjectConfig providedupon  {@link #init(ISharedObjectConfig)}.
 */
protected final Map<String,?> getProperties(){
  return getConfig().getProperties();
}",0.9785407725321889
94238,"/** 
 * Get properties associated with with this ISharedObject
 * @return Map with properties associated with this ISharedObject instance.Will not be null.
 */
public Map getProperties();","/** 
 * Get properties associated with with this ISharedObject
 * @return Map with properties associated with this ISharedObject instance.Will not be null.
 */
public Map<String,?> getProperties();",0.9739583333333334
94239,"/** 
 * The properties associated with the owner ISharedObjectContainer
 * @return Map the properties associated with owner ISharedObjectContainer
 */
public Map getProperties();","/** 
 * The properties associated with the owner ISharedObjectContainer
 * @return Map the properties associated with owner ISharedObjectContainer
 */
public Map<String,?> getProperties();",0.9726775956284152
94240,"/** 
 * Get local container properties that it wishes to expose to shared object access
 * @return Map of properties available to calling shared object. Mapreturned must not be null.
 */
public Map getLocalContainerProperties();","/** 
 * Get local container properties that it wishes to expose to shared object access
 * @return Map of properties available to calling shared object. Mapreturned must not be null.
 */
public Map<String,?> getLocalContainerProperties();",0.9785407725321889
94241,"public SharedObjectDescription(Class clazz,ID id,Map properties){
  this.typeDescription=new SharedObjectTypeDescription(clazz.getName(),null);
  this.id=id;
  this.properties=(properties == null) ? new HashMap() : properties;
}","public SharedObjectDescription(Class clazz,ID id,Map<String,?> properties){
  this.typeDescription=new SharedObjectTypeDescription(clazz.getName(),null);
  this.id=id;
  this.properties=(properties == null) ? new HashMap<String,Object>() : properties;
}",0.948024948024948
94242,"public Map getProperties(){
  return properties;
}","public Map<String,?> getProperties(){
  return properties;
}",0.9090909090909092
94243,"private String getInitFromExternalForm(Object[] args){
  if (args == null || args.length < 1 || args[0] == null)   return null;
  if (args[0] instanceof String) {
    final String arg=(String)args[0];
    if (arg.startsWith(getScheme() + Namespace.SCHEME_SEPARATOR)) {
      final int index=arg.indexOf(Namespace.SCHEME_SEPARATOR);
      if (index >= arg.length())       return null;
      return arg.substring(index + 1);
    }
  }
  return null;
}","/** 
 * @since 2.2.300
 */
protected String getInitFromExternalForm(Object[] args){
  if (args == null || args.length < 1 || args[0] == null)   return null;
  if (args[0] instanceof String) {
    final String arg=(String)args[0];
    if (arg.startsWith(getScheme() + Namespace.SCHEME_SEPARATOR)) {
      final int index=arg.indexOf(Namespace.SCHEME_SEPARATOR);
      if (index >= arg.length())       return null;
      return arg.substring(index + 1);
    }
  }
  return null;
}",0.9579288025889968
94244,"private Map createProxyProperties(EndpointDescription endpointDescription,IRemoteServiceContainer rsContainer,IRemoteServiceReference rsReference,IRemoteService remoteService){
  Map resultProperties=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);
  PropertiesUtil.copyNonReservedProperties(rsReference,resultProperties);
  PropertiesUtil.copyNonReservedProperties(endpointDescription.getProperties(),resultProperties);
  resultProperties.remove(org.eclipse.ecf.remoteservice.Constants.OBJECTCLASS);
  resultProperties.remove(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID);
  Object intentsValue=PropertiesUtil.convertToStringPlusValue(endpointDescription.getIntents());
  if (intentsValue != null)   resultProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_INTENTS,intentsValue);
  String serviceImportedType=(String)endpointDescription.getProperties().get(org.eclipse.ecf.osgi.services.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_VALUETYPE);
  if (serviceImportedType == null || serviceImportedType.equals(IRemoteService.class.getName()))   resultProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED,remoteService);
 else   resultProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED,new Boolean(true));
  String[] exporterSupportedConfigs=(String[])endpointDescription.getProperties().get(org.osgi.service.remoteserviceadmin.RemoteConstants.REMOTE_CONFIGS_SUPPORTED);
  String[] importedConfigs=getImportedConfigs(rsContainer.getContainer(),exporterSupportedConfigs);
  resultProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_CONFIGS,importedConfigs);
  resultProperties.put(org.eclipse.ecf.osgi.services.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_ENDPOINT_ID,endpointDescription.getProperties().get(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_ID));
  resultProperties.put(org.eclipse.ecf.osgi.services.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_ENDPOINT_SERVICE_ID,endpointDescription.getProperties().get(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_SERVICE_ID));
  return resultProperties;
}","private Map createProxyProperties(EndpointDescription endpointDescription,IRemoteServiceContainer rsContainer,IRemoteServiceReference rsReference,IRemoteService remoteService){
  Map resultProperties=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);
  PropertiesUtil.copyNonReservedProperties(rsReference,resultProperties);
  PropertiesUtil.copyNonReservedProperties(endpointDescription.getProperties(),resultProperties);
  resultProperties.remove(org.eclipse.ecf.remoteservice.Constants.OBJECTCLASS);
  resultProperties.remove(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID);
  Object intentsValue=PropertiesUtil.convertToStringPlusValue(endpointDescription.getIntents());
  if (intentsValue != null)   resultProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_INTENTS,intentsValue);
  String serviceImportedType=(String)endpointDescription.getProperties().get(org.eclipse.ecf.osgi.services.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_VALUETYPE);
  if (serviceImportedType == null || serviceImportedType.equals(IRemoteService.class.getName()))   resultProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED,remoteService);
 else   resultProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED,new Boolean(true));
  String[] exporterSupportedConfigs=(String[])endpointDescription.getProperties().get(org.osgi.service.remoteserviceadmin.RemoteConstants.REMOTE_CONFIGS_SUPPORTED);
  String[] importedConfigs=getImportedConfigs(rsContainer.getContainer(),exporterSupportedConfigs);
  resultProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_CONFIGS,importedConfigs);
  String endpointId=endpointDescription.getId();
  resultProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_ID,endpointId);
  Long endpointServiceId=new Long(endpointDescription.getServiceId());
  resultProperties.put(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_SERVICE_ID,endpointServiceId);
  return resultProperties;
}",0.8699129616560809
94245,"protected Long decodeLong(IServiceProperties props,String name){
  Object o=props.getProperty(name);
  if (o == null)   return DEFAULT_LONG;
  if (o instanceof Long)   return (Long)o;
  if (o instanceof Integer)   return new Long(((Integer)o).longValue());
  if (o instanceof String)   try {
    return new Long((String)o);
  }
 catch (  NumberFormatException e) {
    LogUtility.logError(""String_Node_Str"",DebugOptions.METADATA_FACTORY,this.getClass(),""String_Node_Str"" + name + ""String_Node_Str""+ o);
  }
  return DEFAULT_LONG;
}","protected Long decodeLong(IServiceProperties props,String name){
  Object o=props.getPropertyString(name);
  if (o == null)   return DEFAULT_LONG;
  if (o instanceof Long)   return (Long)o;
  if (o instanceof Integer)   return new Long(((Integer)o).longValue());
  if (o instanceof String)   try {
    return new Long((String)o);
  }
 catch (  NumberFormatException e) {
    LogUtility.logError(""String_Node_Str"",DebugOptions.METADATA_FACTORY,this.getClass(),""String_Node_Str"" + name + ""String_Node_Str""+ o);
  }
  return DEFAULT_LONG;
}",0.99438202247191
94246,"protected Long decodeLong(IServiceProperties props,String name){
  String longAsString=props.getPropertyString(name);
  if (longAsString == null)   return new Long(0);
  return new Long(longAsString);
}","protected Long decodeLong(IServiceProperties props,String name){
  Object o=props.getPropertyString(name);
  if (o == null)   return DEFAULT_LONG;
  if (o instanceof Long)   return (Long)o;
  if (o instanceof Integer)   return new Long(((Integer)o).longValue());
  if (o instanceof String)   try {
    return new Long((String)o);
  }
 catch (  NumberFormatException e) {
    LogUtility.logError(""String_Node_Str"",DebugOptions.METADATA_FACTORY,this.getClass(),""String_Node_Str"" + name + ""String_Node_Str""+ o);
  }
  return DEFAULT_LONG;
}",0.4140730717185386
94247,"protected Long decodeLong(IServiceProperties props,String name){
  Object o=props.getPropertyString(name);
  if (o == null)   return DEFAULT_LONG;
  if (o instanceof Long)   return (Long)o;
  if (o instanceof Integer)   return new Long(((Integer)o).longValue());
  if (o instanceof String)   try {
    return new Long((String)o);
  }
 catch (  NumberFormatException e) {
    LogUtility.logError(""String_Node_Str"",DebugOptions.METADATA_FACTORY,this.getClass(),""String_Node_Str"" + name + ""String_Node_Str""+ o);
  }
  return DEFAULT_LONG;
}","protected Long decodeLong(IServiceProperties props,String name){
  String longAsString=props.getPropertyString(name);
  if (longAsString == null)   return new Long(0);
  return new Long(longAsString);
}",0.3464140730717185
94248,"public void endpointRemoved(org.osgi.service.remoteserviceadmin.EndpointDescription endpoint,String matchedFilter){
  if (matchedFilter.equals(endpointListenerScope))   if (endpoint instanceof EndpointDescription)   handleECFEndpointRemoved((EndpointDescription)endpoint);
 else   handleNonECFEndpointRemoved(this,endpoint);
 else   if (matchedFilter.equals(ALL_SCOPE))   if (endpoint instanceof EndpointDescription)   handleECFEndpointRemoved((EndpointDescription)endpoint);
 else   unadvertiseEndpointDescription(endpoint);
}","public void endpointRemoved(org.osgi.service.remoteserviceadmin.EndpointDescription endpoint,String matchedFilter){
  if (matchedFilter.equals(endpointListenerScope))   if (endpoint instanceof EndpointDescription)   handleECFEndpointRemoved((EndpointDescription)endpoint);
 else   handleNonECFEndpointRemoved(this,endpoint);
 else   if (matchedFilter.equals(NO_ECF_SCOPE))   if (endpoint instanceof EndpointDescription)   handleECFEndpointRemoved((EndpointDescription)endpoint);
 else   unadvertiseEndpointDescription(endpoint);
}",0.9914853358561968
94249,"public void endpointAdded(org.osgi.service.remoteserviceadmin.EndpointDescription endpoint,String matchedFilter){
  if (matchedFilter.equals(endpointListenerScope))   if (endpoint instanceof EndpointDescription)   handleECFEndpointAdded((EndpointDescription)endpoint);
 else   handleNonECFEndpointAdded(this,endpoint);
 else   if (matchedFilter.equals(ALL_SCOPE))   if (endpoint instanceof EndpointDescription)   handleECFEndpointAdded((EndpointDescription)endpoint);
 else   advertiseEndpointDescription(endpoint);
}","public void endpointAdded(org.osgi.service.remoteserviceadmin.EndpointDescription endpoint,String matchedFilter){
  if (matchedFilter.equals(endpointListenerScope))   if (endpoint instanceof EndpointDescription)   handleECFEndpointAdded((EndpointDescription)endpoint);
 else   handleNonECFEndpointAdded(this,endpoint);
 else   if (matchedFilter.equals(NO_ECF_SCOPE))   if (endpoint instanceof EndpointDescription)   handleECFEndpointAdded((EndpointDescription)endpoint);
 else   advertiseEndpointDescription(endpoint);
}",0.991321118611379
94250,"BasicTopologyManagerImpl(BundleContext context){
  super(context);
  if (defaultScope != null)   this.endpointListenerScope=defaultScope;
 else   if (allowLoopbackReference)   endpointListenerScope=ALL_SCOPE;
 else {
    StringBuffer elScope=new StringBuffer(""String_Node_Str"");
    elScope.append(""String_Node_Str"");
    elScope.append(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_FRAMEWORK_UUID);
    elScope.append(""String_Node_Str"");
    elScope.append(getFrameworkUUID());
    elScope.append(""String_Node_Str"");
    elScope.append(""String_Node_Str"");
    endpointListenerScope=elScope.toString();
  }
}","BasicTopologyManagerImpl(BundleContext context){
  super(context);
  if (defaultScope != null)   this.endpointListenerScope=defaultScope;
  if (allowLoopbackReference)   endpointListenerScope=ONLY_ECF_SCOPE;
 else {
    StringBuffer elScope=new StringBuffer(""String_Node_Str"");
    elScope.append(""String_Node_Str"");
    elScope.append(""String_Node_Str"").append(org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_FRAMEWORK_UUID).append(""String_Node_Str"").append(getFrameworkUUID()).append(""String_Node_Str"");
    elScope.append(ONLY_ECF_SCOPE);
    elScope.append(""String_Node_Str"");
    endpointListenerScope=elScope.toString();
  }
}",0.7429022082018928
94251,"String[] getScope(){
  return (ALL_SCOPE.equals(endpointListenerScope)) ? new String[]{endpointListenerScope} : new String[]{endpointListenerScope,ALL_SCOPE};
}","String[] getScope(){
  return new String[]{endpointListenerScope,NO_ECF_SCOPE};
}",0.6224066390041494
94252,"protected Long decodeLong(IServiceProperties props,String name){
  Object o=props.getPropertyString(name);
  if (o == null)   return DEFAULT_LONG;
  if (o instanceof Long)   return (Long)o;
  if (o instanceof Integer)   return new Long(((Integer)o).longValue());
  if (o instanceof String)   try {
    return new Long((String)o);
  }
 catch (  NumberFormatException e) {
    LogUtility.logError(""String_Node_Str"",DebugOptions.METADATA_FACTORY,this.getClass(),""String_Node_Str"" + name + ""String_Node_Str""+ o);
  }
  return DEFAULT_LONG;
}","protected Long decodeLong(IServiceProperties props,String name){
  Object o=props.getProperty(name);
  if (o == null)   return DEFAULT_LONG;
  if (o instanceof Long)   return (Long)o;
  if (o instanceof Integer)   return new Long(((Integer)o).longValue());
  if (o instanceof String)   try {
    return new Long((String)o);
  }
 catch (  NumberFormatException e) {
    LogUtility.logError(""String_Node_Str"",DebugOptions.METADATA_FACTORY,this.getClass(),""String_Node_Str"" + name + ""String_Node_Str""+ o);
  }
  return DEFAULT_LONG;
}",0.99438202247191
94253,"public IRemoteServiceContainer selectConsumerContainer(EndpointDescription endpointDescription) throws SelectContainerException {
  trace(""String_Node_Str"",""String_Node_Str"" + endpointDescription);
  List<String> sic=PropertiesUtil.getStringPlusProperty(endpointDescription.getProperties(),org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_CONFIGS);
  String[] serviceImportedConfigs=sic.toArray(new String[sic.size()]);
  ID endpointContainerID=endpointDescription.getContainerID();
  ID connectTargetID=endpointDescription.getConnectTargetID();
  IRemoteServiceContainer rsContainer=selectExistingConsumerContainer(endpointContainerID,serviceImportedConfigs,connectTargetID);
  if (rsContainer == null && autoCreateContainer)   rsContainer=createAndConfigureConsumerContainer(serviceImportedConfigs,endpointDescription.getProperties());
  connectContainerToTarget(rsContainer,connectTargetID);
  return rsContainer;
}","public IRemoteServiceContainer selectConsumerContainer(EndpointDescription endpointDescription) throws SelectContainerException {
  trace(""String_Node_Str"",""String_Node_Str"" + endpointDescription);
  List<String> sic=PropertiesUtil.getStringPlusProperty(endpointDescription.getProperties(),org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_IMPORTED_CONFIGS);
  String[] serviceImportedConfigs=sic.toArray(new String[sic.size()]);
  ID endpointContainerID=endpointDescription.getContainerID();
  ID connectTargetID=endpointDescription.getConnectTargetID();
  IRemoteServiceContainer rsContainer=(reuseExistingContainers) ? selectExistingConsumerContainer(endpointContainerID,serviceImportedConfigs,connectTargetID) : null;
  if (rsContainer == null && autoCreateContainer)   rsContainer=createAndConfigureConsumerContainer(serviceImportedConfigs,endpointDescription.getProperties());
  connectContainerToTarget(rsContainer,connectTargetID);
  return rsContainer;
}",0.9754055468341184
94254,"/** 
 * @see org.eclipse.ecf.osgi.services.remoteserviceadmin.IHostContainerSelector#selectHostContainers(org.osgi.framework.ServiceReference,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String[])
 * @since 2.0
 */
public synchronized IRemoteServiceContainer[] selectHostContainers(ServiceReference serviceReference,Map<String,Object> overridingProperties,String[] serviceExportedInterfaces,String[] serviceExportedConfigs,String[] serviceIntents) throws SelectContainerException {
  Collection rsContainers=selectExistingHostContainers(serviceReference,overridingProperties,serviceExportedInterfaces,serviceExportedConfigs,serviceIntents);
  if (rsContainers.size() == 0 && autoCreateContainer) {
    rsContainers=createAndConfigureHostContainers(serviceReference,overridingProperties,serviceExportedInterfaces,serviceExportedConfigs,serviceIntents);
    Object target=overridingProperties.get(RemoteConstants.ENDPOINT_CONNECTTARGET_ID);
    if (target != null) {
      for (Iterator i=rsContainers.iterator(); i.hasNext(); ) {
        IContainer container=((IRemoteServiceContainer)i.next()).getContainer();
        try {
          connectHostContainer(serviceReference,overridingProperties,container,target);
        }
 catch (        Exception e) {
          logException(""String_Node_Str"" + container.getID() + ""String_Node_Str""+ target,e);
        }
      }
    }
  }
  return (IRemoteServiceContainer[])rsContainers.toArray(new IRemoteServiceContainer[]{});
}","/** 
 * @see org.eclipse.ecf.osgi.services.remoteserviceadmin.IHostContainerSelector#selectHostContainers(org.osgi.framework.ServiceReference,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String[])
 * @since 2.0
 */
public synchronized IRemoteServiceContainer[] selectHostContainers(ServiceReference serviceReference,Map<String,Object> overridingProperties,String[] serviceExportedInterfaces,String[] serviceExportedConfigs,String[] serviceIntents) throws SelectContainerException {
  Collection rsContainers=(reuseExistingContainers) ? selectExistingHostContainers(serviceReference,overridingProperties,serviceExportedInterfaces,serviceExportedConfigs,serviceIntents) : Collections.EMPTY_LIST;
  if (rsContainers.size() == 0 && autoCreateContainer) {
    rsContainers=createAndConfigureHostContainers(serviceReference,overridingProperties,serviceExportedInterfaces,serviceExportedConfigs,serviceIntents);
    Object target=overridingProperties.get(RemoteConstants.ENDPOINT_CONNECTTARGET_ID);
    if (target != null) {
      for (Iterator i=rsContainers.iterator(); i.hasNext(); ) {
        IContainer container=((IRemoteServiceContainer)i.next()).getContainer();
        try {
          connectHostContainer(serviceReference,overridingProperties,container,target);
        }
 catch (        Exception e) {
          logException(""String_Node_Str"" + container.getID() + ""String_Node_Str""+ target,e);
        }
      }
    }
  }
  return (IRemoteServiceContainer[])rsContainers.toArray(new IRemoteServiceContainer[]{});
}",0.914872474329248
94255,"private Version getPackageVersionViaRequestingBundle(String packageName,Bundle requestingBundle){
  Version result=null;
  BundleRevision requestingBundleRevision=(BundleRevision)requestingBundle.adapt(BundleRevision.class);
  if (requestingBundleRevision != null) {
    List<BundleCapability> requestingBundleCapabilities=requestingBundleRevision.getDeclaredCapabilities(BundleRevision.PACKAGE_NAMESPACE);
    for (    BundleCapability requestingBundleCapability : requestingBundleCapabilities) {
      Version version=getVersionForMatchingCapability(packageName,requestingBundleCapability);
      if (version != null)       result=version;
    }
  }
  if (result == null) {
    BundleWiring requestingBundleWiring=requestingBundle.adapt(BundleWiring.class);
    if (requestingBundleWiring != null) {
      result=getPackageVersionForMatchingWire(packageName,requestingBundleWiring.getRequiredWires(BundleRevision.PACKAGE_NAMESPACE),BundleRevision.PACKAGE_NAMESPACE);
      if (result == null)       result=getPackageVersionForMatchingWire(packageName,requestingBundleWiring.getRequiredWires(BundleRevision.BUNDLE_NAMESPACE),BundleRevision.BUNDLE_NAMESPACE);
    }
  }
  return result;
}","private Version getPackageVersionViaRequestingBundle(String packageName,Bundle requestingBundle,Version remoteVersion){
  Version result=null;
  BundleRevision requestingBundleRevision=(BundleRevision)requestingBundle.adapt(BundleRevision.class);
  if (requestingBundleRevision != null) {
    List<BundleCapability> requestingBundleCapabilities=requestingBundleRevision.getDeclaredCapabilities(BundleRevision.PACKAGE_NAMESPACE);
    for (    BundleCapability requestingBundleCapability : requestingBundleCapabilities) {
      Version candidate=getVersionForMatchingCapability(packageName,requestingBundleCapability);
      if (candidate != null) {
        if (remoteVersion != null && candidate.equals(remoteVersion))         return candidate;
        result=candidate;
      }
    }
  }
  if (result == null) {
    BundleWiring requestingBundleWiring=requestingBundle.adapt(BundleWiring.class);
    if (requestingBundleWiring != null) {
      result=getPackageVersionForMatchingWire(packageName,requestingBundleWiring.getRequiredWires(BundleRevision.PACKAGE_NAMESPACE),BundleRevision.PACKAGE_NAMESPACE);
      if (result == null)       result=getPackageVersionForMatchingWire(packageName,requestingBundleWiring.getRequiredWires(BundleRevision.BUNDLE_NAMESPACE),BundleRevision.BUNDLE_NAMESPACE);
    }
  }
  return result;
}",0.9187898089171974
94256,"private boolean verifyServiceInterfaceVersionsForProxy(Bundle bundle,Collection<Class> classes,Map<String,Version> interfaceVersions){
  boolean result=true;
  for (  Class clazz : classes) {
    String className=clazz.getName();
    String packageName=getPackageName(className);
    Version remoteVersion=interfaceVersions.get(className);
    Version localVersion=getPackageVersionViaRequestingBundle(packageName,bundle);
    if (comparePackageVersions(packageName,remoteVersion,localVersion)) {
      logError(""String_Node_Str"",""String_Node_Str"" + clientBundle + ""String_Node_Str""+ className+ ""String_Node_Str""+ remoteVersion+ ""String_Node_Str""+ localVersion);
      result=false;
    }
  }
  return result;
}","private boolean verifyServiceInterfaceVersionsForProxy(Bundle bundle,Collection<Class> classes,Map<String,Version> interfaceVersions){
  boolean result=true;
  for (  Class clazz : classes) {
    String className=clazz.getName();
    String packageName=getPackageName(className);
    Version remoteVersion=interfaceVersions.get(className);
    Version localVersion=getPackageVersionViaRequestingBundle(packageName,bundle,remoteVersion);
    if (comparePackageVersions(packageName,remoteVersion,localVersion)) {
      logError(""String_Node_Str"",""String_Node_Str"" + clientBundle + ""String_Node_Str""+ className+ ""String_Node_Str""+ remoteVersion+ ""String_Node_Str""+ localVersion);
      result=false;
    }
  }
  return result;
}",0.99025069637883
94257,"private String[][] getSupportedConfigsAndIntents(){
  IContainerManager containerManager=getContainerManager();
  Assert.isNotNull(containerManager,""String_Node_Str"");
  ContainerTypeDescription[] remoteServiceDescriptions=containerManager.getContainerFactory().getDescriptionsForContainerAdapter(IRemoteServiceContainerAdapter.class);
  List<String> supportedConfigs=new ArrayList<String>();
  List<String> supportedIntents=new ArrayList<String>();
  for (int i=0; i < remoteServiceDescriptions.length; i++) {
    String[] descSupportedConfigs=remoteServiceDescriptions[i].getSupportedConfigs();
    for (int j=0; j < descSupportedConfigs.length; j++)     supportedConfigs.add(descSupportedConfigs[j]);
    String[] descSupportedIntents=remoteServiceDescriptions[i].getSupportedIntents();
    for (int j=0; j < descSupportedIntents.length; j++)     supportedIntents.add(descSupportedIntents[j]);
  }
  String[][] result=new String[2][];
  result[0]=supportedConfigs.toArray(new String[supportedConfigs.size()]);
  result[1]=supportedIntents.toArray(new String[supportedIntents.size()]);
  return result;
}","private String[][] getSupportedConfigsAndIntents(){
  IContainerManager containerManager=getContainerManager();
  Assert.isNotNull(containerManager,""String_Node_Str"");
  ContainerTypeDescription[] remoteServiceDescriptions=containerManager.getContainerFactory().getDescriptionsForContainerAdapter(IRemoteServiceContainerAdapter.class);
  List<String> supportedConfigs=new ArrayList<String>();
  List<String> supportedIntents=new ArrayList<String>();
  for (int i=0; i < remoteServiceDescriptions.length; i++) {
    String[] descSupportedConfigs=remoteServiceDescriptions[i].getSupportedConfigs();
    if (descSupportedConfigs != null) {
      for (int j=0; j < descSupportedConfigs.length; j++)       supportedConfigs.add(descSupportedConfigs[j]);
      String[] descSupportedIntents=remoteServiceDescriptions[i].getSupportedIntents();
      for (int j=0; j < descSupportedIntents.length; j++)       supportedIntents.add(descSupportedIntents[j]);
    }
  }
  String[][] result=new String[2][];
  result[0]=supportedConfigs.toArray(new String[supportedConfigs.size()]);
  result[1]=supportedIntents.toArray(new String[supportedIntents.size()]);
  return result;
}",0.9753086419753086
94258,"public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  Activator.instance=this;
  initializeProxyServiceFactoryBundle();
  Properties rsaProps=new Properties();
  rsaProps.put(RemoteServiceAdmin.SERVICE_PROP,new Boolean(true));
  remoteServiceAdminRegistration=context.registerService(org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.class.getName(),new ServiceFactory(){
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      RemoteServiceAdmin result=null;
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.get(bundle);
        if (rsa == null) {
          rsa=new RemoteServiceAdmin(bundle);
          remoteServiceAdmins.put(bundle,rsa);
        }
        result=rsa;
      }
      return result;
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.remove(bundle);
        if (rsa != null)         rsa.close();
      }
    }
  }
,(Dictionary)rsaProps);
  endpointDescriptionLocator=new EndpointDescriptionLocator(context);
  final Properties properties=new Properties();
  properties.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  endpointDescriptionAdvertiser=new EndpointDescriptionAdvertiser(endpointDescriptionLocator);
  endpointDescriptionAdvertiserRegistration=getContext().registerService(IEndpointDescriptionAdvertiser.class.getName(),endpointDescriptionAdvertiser,(Dictionary)properties);
  endpointDescriptionLocator.start();
}","public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  Activator.instance=this;
  initializeProxyServiceFactoryBundle();
  Properties rsaProps=new Properties();
  rsaProps.put(RemoteServiceAdmin.SERVICE_PROP,new Boolean(true));
  String[][] supportedConfigsAndIntents=getSupportedConfigsAndIntents();
  rsaProps.put(org.osgi.service.remoteserviceadmin.RemoteConstants.REMOTE_CONFIGS_SUPPORTED,supportedConfigsAndIntents[0]);
  rsaProps.put(org.osgi.service.remoteserviceadmin.RemoteConstants.REMOTE_INTENTS_SUPPORTED,supportedConfigsAndIntents[1]);
  remoteServiceAdminRegistration=context.registerService(org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.class.getName(),new ServiceFactory(){
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      RemoteServiceAdmin result=null;
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.get(bundle);
        if (rsa == null) {
          rsa=new RemoteServiceAdmin(bundle);
          remoteServiceAdmins.put(bundle,rsa);
        }
        result=rsa;
      }
      return result;
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
synchronized (remoteServiceAdmins) {
        RemoteServiceAdmin rsa=remoteServiceAdmins.remove(bundle);
        if (rsa != null)         rsa.close();
      }
    }
  }
,(Dictionary)rsaProps);
  endpointDescriptionLocator=new EndpointDescriptionLocator(context);
  final Properties properties=new Properties();
  properties.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  endpointDescriptionAdvertiser=new EndpointDescriptionAdvertiser(endpointDescriptionLocator);
  endpointDescriptionAdvertiserRegistration=getContext().registerService(IEndpointDescriptionAdvertiser.class.getName(),endpointDescriptionAdvertiser,(Dictionary)properties);
  endpointDescriptionLocator.start();
}",0.910659615919844
94259,"/** 
 * @param properties The map from which to create the Endpoint Description. The keys in the map must be type <code>String</code> and, since the keys are case insensitive, there must be no duplicates with case variation.
 * @throws IllegalArgumentException When the properties are not proper for an Endpoint Description.
 * @see org.osgi.service.remoteserviceadmin.EndpointDescription#EndpointDescription(Map)
 */
public EndpointDescription(Map<String,Object> properties){
  super(properties);
  verifyECFProperties();
  computeHashCode();
}","/** 
 * @param properties The map from which to create the Endpoint Description. The keys in the map must be type <code>String</code> and, since the keys are case insensitive, there must be no duplicates with case variation.
 * @throws IllegalArgumentException When the properties are not proper for an Endpoint Description.
 * @see org.osgi.service.remoteserviceadmin.EndpointDescription#EndpointDescription(Map)
 */
public EndpointDescription(Map<String,Object> properties){
  super(properties);
  verifyECFProperties();
}",0.980355472404116
94260,"public org.osgi.service.remoteserviceadmin.ImportReference getImportReference(){
  Throwable t=getException();
  if (t != null)   throw new IllegalStateException(""String_Node_Str"",t);
  return importReference;
}","public org.osgi.service.remoteserviceadmin.ImportReference getImportReference(){
  Throwable t=getException();
  if (t != null)   return null;
  return importReference;
}",0.8661417322834646
94261,"public org.osgi.service.remoteserviceadmin.ExportReference getExportReference(){
  Throwable t=getException();
  if (t != null)   throw new IllegalStateException(""String_Node_Str"",t);
  return exportReference;
}","public org.osgi.service.remoteserviceadmin.ExportReference getExportReference(){
  Throwable t=getException();
  if (t != null)   return null;
  return exportReference;
}",0.8661417322834646
94262,"public IIncomingFileTransfer accept(OutputStream outputStream,IFileTransferListener listener) throws IncomingFileTransferException {
  if (requestAccepted)   throw new IncomingFileTransferException(""String_Node_Str"");
  if (outputStream == null)   throw new IncomingFileTransferException(""String_Node_Str"");
  incoming=request.accept();
  try {
    return new XMPPIncomingFileTransfer(IDFactory.getDefault().createStringID(request.getStreamID()),request.getFileName(),incoming.recieveFile(),outputStream,request.getFileSize(),listener);
  }
 catch (  final Exception e) {
    throw new IncomingFileTransferException(""String_Node_Str"",e);
  }
}","public IIncomingFileTransfer accept(OutputStream outputStream,IFileTransferListener listener) throws IncomingFileTransferException {
  if (requestAccepted)   throw new IncomingFileTransferException(""String_Node_Str"");
  if (outputStream == null)   throw new IncomingFileTransferException(""String_Node_Str"");
  incoming=request.accept();
  requestAccepted=true;
  try {
    return new XMPPIncomingFileTransfer(IDFactory.getDefault().createStringID(request.getStreamID()),request.getFileName(),incoming.recieveFile(),outputStream,request.getFileSize(),listener);
  }
 catch (  final Exception e) {
    throw new IncomingFileTransferException(""String_Node_Str"",e);
  }
}",0.981679389312977
94263,"public void fileTransferRequest(final FileTransferRequest request){
  requestListener.handleFileTransferRequest(new IFileTransferRequestEvent(){
    boolean requestAccepted=false;
    IFileTransferInfo fileTransferInfo=new IFileTransferInfo(){
      Map props=new HashMap();
      File f=new File(request.getFileName());
      public String getDescription(){
        return request.getDescription();
      }
      public File getFile(){
        return f;
      }
      public Map getProperties(){
        return props;
      }
      public Object getAdapter(      Class adapter){
        if (adapter == null)         return null;
        if (adapter.isInstance(this))         return this;
        final IAdapterManager adapterManager=XmppPlugin.getDefault().getAdapterManager();
        return (adapterManager == null) ? null : adapterManager.loadAdapter(this,adapter.getName());
      }
      public long getFileSize(){
        return request.getFileSize();
      }
      public String getMimeType(){
        return request.getMimeType();
      }
      public String toString(){
        final StringBuffer buf=new StringBuffer(""String_Node_Str"");
        buf.append(""String_Node_Str"").append(f);
        buf.append(""String_Node_Str"").append(getFileSize());
        buf.append(""String_Node_Str"" + getDescription());
        buf.append(""String_Node_Str"").append(getMimeType()).append(""String_Node_Str"");
        return buf.toString();
      }
    }
;
    public IIncomingFileTransfer accept(    File localFileToSave) throws IncomingFileTransferException {
      try {
        final OutputStream outs=new FileOutputStream(localFileToSave);
        return accept(outs,new IFileTransferListener(){
          public void handleTransferEvent(          IFileTransferEvent event){
            if (event instanceof IIncomingFileTransferReceiveDoneEvent) {
              try {
                outs.close();
              }
 catch (              final IOException e) {
              }
            }
          }
        }
);
      }
 catch (      final FileNotFoundException e) {
        throw new IncomingFileTransferException(""String_Node_Str"",e);
      }
    }
    public IFileTransferInfo getFileTransferInfo(){
      return fileTransferInfo;
    }
    public ID getRequesterID(){
      return createIDFromName(request.getRequestor());
    }
    public void reject(){
      request.reject();
    }
    public boolean requestAccepted(){
      return requestAccepted;
    }
    public String toString(){
      final StringBuffer buf=new StringBuffer(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(getRequesterID());
      buf.append(""String_Node_Str"").append(requestAccepted());
      buf.append(""String_Node_Str"").append(getFileTransferInfo()).append(""String_Node_Str"");
      return buf.toString();
    }
    public IIncomingFileTransfer accept(    OutputStream outputStream,    IFileTransferListener listener) throws IncomingFileTransferException {
      if (requestAccepted)       throw new IncomingFileTransferException(""String_Node_Str"");
      if (outputStream == null)       throw new IncomingFileTransferException(""String_Node_Str"");
      incoming=request.accept();
      try {
        return new XMPPIncomingFileTransfer(IDFactory.getDefault().createStringID(request.getStreamID()),request.getFileName(),incoming.recieveFile(),outputStream,request.getFileSize(),listener);
      }
 catch (      final Exception e) {
        throw new IncomingFileTransferException(""String_Node_Str"",e);
      }
    }
  }
);
}","public void fileTransferRequest(final FileTransferRequest request){
  requestListener.handleFileTransferRequest(new IFileTransferRequestEvent(){
    boolean requestAccepted=false;
    IFileTransferInfo fileTransferInfo=new IFileTransferInfo(){
      Map props=new HashMap();
      File f=new File(request.getFileName());
      public String getDescription(){
        return request.getDescription();
      }
      public File getFile(){
        return f;
      }
      public Map getProperties(){
        return props;
      }
      public Object getAdapter(      Class adapter){
        if (adapter == null)         return null;
        if (adapter.isInstance(this))         return this;
        final IAdapterManager adapterManager=XmppPlugin.getDefault().getAdapterManager();
        return (adapterManager == null) ? null : adapterManager.loadAdapter(this,adapter.getName());
      }
      public long getFileSize(){
        return request.getFileSize();
      }
      public String getMimeType(){
        return request.getMimeType();
      }
      public String toString(){
        final StringBuffer buf=new StringBuffer(""String_Node_Str"");
        buf.append(""String_Node_Str"").append(f);
        buf.append(""String_Node_Str"").append(getFileSize());
        buf.append(""String_Node_Str"" + getDescription());
        buf.append(""String_Node_Str"").append(getMimeType()).append(""String_Node_Str"");
        return buf.toString();
      }
    }
;
    public IIncomingFileTransfer accept(    File localFileToSave) throws IncomingFileTransferException {
      try {
        final OutputStream outs=new FileOutputStream(localFileToSave);
        return accept(outs,new IFileTransferListener(){
          public void handleTransferEvent(          IFileTransferEvent event){
            if (event instanceof IIncomingFileTransferReceiveDoneEvent) {
              try {
                outs.close();
              }
 catch (              final IOException e) {
              }
            }
          }
        }
);
      }
 catch (      final FileNotFoundException e) {
        throw new IncomingFileTransferException(""String_Node_Str"",e);
      }
    }
    public IFileTransferInfo getFileTransferInfo(){
      return fileTransferInfo;
    }
    public ID getRequesterID(){
      return createIDFromName(request.getRequestor());
    }
    public void reject(){
      request.reject();
    }
    public boolean requestAccepted(){
      return requestAccepted;
    }
    public String toString(){
      final StringBuffer buf=new StringBuffer(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(getRequesterID());
      buf.append(""String_Node_Str"").append(requestAccepted());
      buf.append(""String_Node_Str"").append(getFileTransferInfo()).append(""String_Node_Str"");
      return buf.toString();
    }
    public IIncomingFileTransfer accept(    OutputStream outputStream,    IFileTransferListener listener) throws IncomingFileTransferException {
      if (requestAccepted)       throw new IncomingFileTransferException(""String_Node_Str"");
      if (outputStream == null)       throw new IncomingFileTransferException(""String_Node_Str"");
      incoming=request.accept();
      requestAccepted=true;
      try {
        return new XMPPIncomingFileTransfer(IDFactory.getDefault().createStringID(request.getStreamID()),request.getFileName(),incoming.recieveFile(),outputStream,request.getFileSize(),listener);
      }
 catch (      final Exception e) {
        throw new IncomingFileTransferException(""String_Node_Str"",e);
      }
    }
  }
);
}",0.9960440802486578
94264,"public void stop(BundleContext c) throws Exception {
  dispose();
  PrettyPrinter.prompt(PrettyPrinter.DEACTIVATED,null);
}","public void stop(BundleContext c) throws Exception {
  dispose();
  Logger.log(LogService.LOG_INFO,PrettyPrinter.prompt(PrettyPrinter.DEACTIVATED,null),null);
}",0.8692579505300353
94265,"public void start(final BundleContext ctxt){
  context=ctxt;
  final Properties props=new Properties();
  props.put(IDiscoveryLocator.CONTAINER_NAME,ZooDiscoveryContainerInstantiator.NAME);
  props.put(IDiscoveryAdvertiser.CONTAINER_NAME,ZooDiscoveryContainerInstantiator.NAME);
  discoveryRegistration=ctxt.registerService(new String[]{IDiscoveryLocator.class.getName(),IDiscoveryAdvertiser.class.getName()},new ServiceFactory(){
    private volatile ZooDiscoveryContainer zdc;
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      if (zdc == null) {
        zdc=ZooDiscoveryContainer.getSingleton();
        zdc.setDiscoveryProperties(props);
      }
      return zdc;
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
    }
  }
,(Dictionary)props);
  logServiceTracker=new ServiceTracker(ctxt,org.osgi.service.log.LogService.class.getName(),null){
    public Object addingService(    ServiceReference reference){
      Logger.bindLogService((LogService)context.getService(reference));
      return super.addingService(reference);
    }
    public void removedService(    ServiceReference reference,    Object service){
      Logger.unbindLogService((LogService)service);
      super.removedService(reference,service);
    }
  }
;
  logServiceTracker.open(true);
}","public void start(final BundleContext ctxt){
  context=ctxt;
  final Properties props=new Properties();
  props.put(IDiscoveryLocator.CONTAINER_NAME,ZooDiscoveryContainerInstantiator.NAME);
  props.put(IDiscoveryAdvertiser.CONTAINER_NAME,ZooDiscoveryContainerInstantiator.NAME);
  discoveryRegistration=ctxt.registerService(new String[]{IDiscoveryLocator.class.getName(),IDiscoveryAdvertiser.class.getName()},new ServiceFactory(){
    private volatile ZooDiscoveryContainer zdc;
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      if (zdc == null) {
        zdc=ZooDiscoveryContainer.getSingleton();
        zdc.setDiscoveryProperties(props);
      }
      return zdc;
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
    }
  }
,(Dictionary)props);
  logServiceTracker=new ServiceTracker(ctxt,org.osgi.service.log.LogService.class.getName(),null){
    public Object addingService(    ServiceReference reference){
      Logger.bindLogService((LogService)context.getService(reference));
      return super.addingService(reference);
    }
    public void removedService(    ServiceReference reference,    Object service){
      Logger.unbindLogService((LogService)service);
      super.removedService(reference,service);
    }
  }
;
  logServiceTracker.open(true);
  if (ZooDiscoveryContainer.autoStart()) {
    ctxt.getService(discoveryRegistration.getReference());
  }
}",0.96262341325811
94266,"public void dispose(){
  PrettyPrinter.prompt(PrettyPrinter.REMOTE_UNAVAILABLE,this);
  Localizer.getSingleton().localize(new Notification(this,Notification.UNAVAILABLE));
}","public void dispose(){
  Logger.log(SystemLogService.LOG_DEBUG,PrettyPrinter.prompt(PrettyPrinter.REMOTE_UNAVAILABLE,this),null);
  Localizer.getSingleton().localize(new Notification(this,Notification.UNAVAILABLE));
}",0.8871794871794871
94267,"protected void disconnect(Throwable exception){
synchronized (getConnectLock()) {
    if (isConnected()) {
      final ID groupID=getConnectedID();
      if (exception == null)       fireContainerEvent(new ContainerDisconnectingEvent(this.getID(),groupID));
synchronized (connection) {
        try {
          connection.sendSynch(groupID,serialize(ContainerMessage.createLeaveGroupMessage(getID(),groupID,getNextSequenceNumber(),getLeaveData(groupID))));
        }
 catch (        final Exception e) {
          ProviderPlugin.getDefault().log(new Status(IStatus.ERROR,ProviderPlugin.PLUGIN_ID,IStatus.ERROR,""String_Node_Str"",e));
        }
synchronized (getGroupMembershipLock()) {
          handleLeave(groupID,connection);
        }
      }
      if (exception == null)       fireContainerEvent(new ContainerDisconnectedEvent(this.getID(),groupID));
 else       fireContainerEvent(new ContainerEjectedEvent(this.getID(),groupID,exception));
    }
  }
}","protected void disconnect(Throwable exception){
synchronized (getConnectLock()) {
    if (isConnected()) {
      final ID groupID=getConnectedID();
      if (exception == null)       fireContainerEvent(new ContainerDisconnectingEvent(this.getID(),groupID));
synchronized (connection) {
        try {
          connection.sendSynch(groupID,serialize(ContainerMessage.createLeaveGroupMessage(getID(),groupID,getNextSequenceNumber(),getLeaveData(groupID))));
        }
 catch (        final Exception e) {
          ProviderPlugin.getDefault().log(new Status(IStatus.WARNING,ProviderPlugin.PLUGIN_ID,IStatus.WARNING,""String_Node_Str"",e));
        }
synchronized (getGroupMembershipLock()) {
          handleLeave(groupID,connection);
        }
      }
      if (exception == null)       fireContainerEvent(new ContainerDisconnectedEvent(this.getID(),groupID));
 else       fireContainerEvent(new ContainerEjectedEvent(this.getID(),groupID,exception));
    }
  }
}",0.9895615866388308
94268,"protected void tearDown() throws Exception {
  retrieveAdapter=null;
  startConnectEvents=null;
  startEvents=null;
  dataEvents=null;
  doneEvents=null;
  super.tearDown();
}","protected void tearDown() throws Exception {
  retrieveAdapter=null;
  super.tearDown();
}",0.6792452830188679
94269,"/** 
 * Read the contents of the packet being sent from the server and handle any events accordingly.
 */
String read() throws IOException {
  String input=super.read();
  if (input == null) {
    return null;
  }
  if (input.indexOf(""String_Node_Str"") != -1) {
    String[] events=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < events.length; i++) {
      if (!events[i].trim().equals(""String_Node_Str"") && events[i].substring(1,3).equals(""String_Node_Str"")) {
        String[] sub=StringUtils.split(events[i],""String_Node_Str"",3);
        String[] split=StringUtils.splitOnSpace(sub[2]);
        changeContactInfo(split);
      }
    }
  }
 else   if (input.indexOf(""String_Node_Str"") != -1) {
    String[] events=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < events.length; i++) {
      if (events[i].startsWith(""String_Node_Str"")) {
        setContactToOffline(events[i]);
      }
    }
  }
 else   if (input.indexOf(""String_Node_Str"") != -1) {
    String[] events=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < events.length; i++) {
      if (events[i].substring(0,3).equals(""String_Node_Str"")) {
        String[] sub=StringUtils.splitOnSpace(events[i].substring(4));
        changeContactInfo(sub);
      }
 else       if (events[i].substring(1,3).equals(""String_Node_Str"")) {
        String[] sub=StringUtils.split(events[i],""String_Node_Str"",3);
        String[] split=StringUtils.splitOnSpace(sub[2]);
        changeContactInfo(split);
      }
    }
  }
 else   if (input.indexOf(""String_Node_Str"") != -1) {
    String query=Challenge.createQuery(StringUtils.splitSubstring(input,""String_Node_Str"",2));
    write(""String_Node_Str"",Challenge.PRODUCT_ID + ' ' + query.length()+ ""String_Node_Str""+ query,false);
  }
 else   if (input.indexOf(""String_Node_Str"") != -1) {
    processSwitchboardRequest(StringUtils.splitOnSpace(input));
  }
  if (input.indexOf(""String_Node_Str"") != -1) {
    String[] split=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < split.length; i++) {
      if (split[i].startsWith(""String_Node_Str"")) {
        response.process(split[i]);
      }
    }
  }
  if (input.indexOf(""String_Node_Str"") != -1) {
    String[] split=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < split.length; i++) {
      if (split[i].startsWith(""String_Node_Str"")) {
        processContactData(split,i);
      }
    }
  }
  if (input.indexOf(""String_Node_Str"") != -1) {
    String[] split=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < split.length; i++) {
      if (split[i].startsWith(""String_Node_Str"")) {
        String[] subSplit=StringUtils.splitOnSpace(split[i]);
        if (subSplit[2].equals(""String_Node_Str"")) {
          processContactAdded(subSplit[3].substring(2),subSplit[4].substring(2),subSplit[5].substring(2));
        }
 else         if (subSplit[2].equals(""String_Node_Str"")) {
          processContactAddedUser(subSplit[3].substring(2));
        }
      }
    }
  }
  if (input.indexOf(""String_Node_Str"") != -1) {
    String[] split=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < split.length; i++) {
      if (split[i].startsWith(""String_Node_Str"")) {
        String[] subSplit=StringUtils.splitOnSpace(split[i]);
        if (subSplit[2].equals(""String_Node_Str"")) {
          processContactRemoved(subSplit[3]);
        }
 else         if (subSplit[2].equals(""String_Node_Str"")) {
          processContactRemovedUser(subSplit[3]);
        }
      }
    }
  }
  if (input.indexOf(""String_Node_Str"") != -1) {
    String[] split=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < split.length; i++) {
      if (split[i].startsWith(""String_Node_Str"")) {
        close();
        break;
      }
    }
  }
  return input;
}","/** 
 * Read the contents of the packet being sent from the server and handle any events accordingly.
 */
String read() throws IOException {
  String input=super.read();
  if (input == null) {
    return null;
  }
  if (input.indexOf(""String_Node_Str"") != -1) {
    String[] events=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < events.length; i++) {
      if (!events[i].trim().equals(""String_Node_Str"") && events[i].substring(1,3).equals(""String_Node_Str"")) {
        String[] sub=StringUtils.split(events[i],""String_Node_Str"",3);
        String[] split=StringUtils.splitOnSpace(sub[2]);
        changeContactInfo(split);
      }
    }
  }
 else   if (input.indexOf(""String_Node_Str"") != -1) {
    String[] events=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < events.length; i++) {
      if (events[i].startsWith(""String_Node_Str"")) {
        setContactToOffline(events[i]);
      }
    }
  }
 else   if (input.indexOf(""String_Node_Str"") != -1) {
    String[] events=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < events.length; i++) {
      if (events[i].substring(0,3).equals(""String_Node_Str"")) {
        String[] sub=StringUtils.splitOnSpace(events[i].substring(4));
        changeContactInfo(sub);
      }
 else       if (events[i].substring(1,3).equals(""String_Node_Str"")) {
        String[] sub=StringUtils.split(events[i],""String_Node_Str"",3);
        String[] split=StringUtils.splitOnSpace(sub[2]);
        changeContactInfo(split);
      }
    }
  }
 else   if (input.indexOf(""String_Node_Str"") != -1) {
    String query=MD5HashImpl.getMD5(StringUtils.splitSubstring(input,""String_Node_Str"",2));
    write(""String_Node_Str"",Challenge.PRODUCT_ID + ' ' + query.length()+ ""String_Node_Str""+ query,false);
  }
 else   if (input.indexOf(""String_Node_Str"") != -1) {
    processSwitchboardRequest(StringUtils.splitOnSpace(input));
  }
  if (input.indexOf(""String_Node_Str"") != -1) {
    String[] split=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < split.length; i++) {
      if (split[i].startsWith(""String_Node_Str"")) {
        response.process(split[i]);
      }
    }
  }
  if (input.indexOf(""String_Node_Str"") != -1) {
    String[] split=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < split.length; i++) {
      if (split[i].startsWith(""String_Node_Str"")) {
        processContactData(split,i);
      }
    }
  }
  if (input.indexOf(""String_Node_Str"") != -1) {
    String[] split=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < split.length; i++) {
      if (split[i].startsWith(""String_Node_Str"")) {
        String[] subSplit=StringUtils.splitOnSpace(split[i]);
        if (subSplit[2].equals(""String_Node_Str"")) {
          processContactAdded(subSplit[3].substring(2),subSplit[4].substring(2),subSplit[5].substring(2));
        }
 else         if (subSplit[2].equals(""String_Node_Str"")) {
          processContactAddedUser(subSplit[3].substring(2));
        }
      }
    }
  }
  if (input.indexOf(""String_Node_Str"") != -1) {
    String[] split=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < split.length; i++) {
      if (split[i].startsWith(""String_Node_Str"")) {
        String[] subSplit=StringUtils.splitOnSpace(split[i]);
        if (subSplit[2].equals(""String_Node_Str"")) {
          processContactRemoved(subSplit[3]);
        }
 else         if (subSplit[2].equals(""String_Node_Str"")) {
          processContactRemovedUser(subSplit[3]);
        }
      }
    }
  }
  if (input.indexOf(""String_Node_Str"") != -1) {
    String[] split=StringUtils.split(input,""String_Node_Str"");
    for (int i=0; i < split.length; i++) {
      if (split[i].startsWith(""String_Node_Str"")) {
        close();
        break;
      }
    }
  }
  return input;
}",0.9951245223349584
94270,"public Client(ISynchAsynchEventHandler handler,int maxmsgs){
  if (handler == null)   throw new NullPointerException(""String_Node_Str"");
  this.handler=handler;
  containerID=handler.getEventHandlerID();
  maxMsg=maxmsgs;
  this.properties=new HashMap();
}","public Client(ISynchAsynchEventHandler handler,int keepAlive){
  if (handler == null)   throw new NullPointerException(""String_Node_Str"");
  this.handler=handler;
  this.keepAlive=keepAlive;
  containerID=handler.getEventHandlerID();
  this.properties=new HashMap();
}",0.7900763358778626
94271,"public synchronized Object connect(ID remote,Object data,int timeout) throws ECFException {
  debug(""String_Node_Str"" + remote + ""String_Node_Str""+ data+ ""String_Node_Str""+ timeout+ ""String_Node_Str"");
  if (socket != null)   throw new ECFException(""String_Node_Str"");
  URI anURI=null;
  try {
    anURI=new URI(remote.getName());
  }
 catch (  final URISyntaxException e) {
    throw new ECFException(""String_Node_Str"" + remote,e);
  }
  SocketFactory fact=SocketFactory.getSocketFactory();
  if (fact == null)   fact=SocketFactory.getDefaultSocketFactory();
  ConnectResultMessage res=null;
  try {
    keepAlive=timeout;
    final Socket s=fact.createSocket(anURI.getHost(),anURI.getPort(),keepAlive);
    setSocketOptions(s);
    setSocket(s);
    outputStream=new ObjectOutputStream(s.getOutputStream());
    outputStream.flush();
    inputStream=new ObjectInputStream(s.getInputStream());
    debug(""String_Node_Str"" + anURI);
    send(new ConnectRequestMessage(anURI,(Serializable)data));
    res=(ConnectResultMessage)readObject();
  }
 catch (  final Exception e) {
    throw new ECFException(""String_Node_Str"" + remote.getName(),e);
  }
  debug(""String_Node_Str"" + res);
  setupThreads();
  final Object ret=res.getData();
  debug(""String_Node_Str"" + ret);
  return ret;
}","public synchronized Object connect(ID remote,Object data,int timeout) throws ECFException {
  debug(""String_Node_Str"" + remote + ""String_Node_Str""+ data+ ""String_Node_Str""+ timeout+ ""String_Node_Str"");
  if (socket != null)   throw new ECFException(""String_Node_Str"");
  URI anURI=null;
  try {
    anURI=new URI(remote.getName());
  }
 catch (  final URISyntaxException e) {
    throw new ECFException(""String_Node_Str"" + remote,e);
  }
  SocketFactory fact=SocketFactory.getSocketFactory();
  if (fact == null)   fact=SocketFactory.getDefaultSocketFactory();
  ConnectResultMessage res=null;
  try {
    final Socket s=fact.createSocket(anURI.getHost(),anURI.getPort(),timeout);
    setSocketOptions(s);
    setSocket(s);
    outputStream=new ObjectOutputStream(s.getOutputStream());
    outputStream.flush();
    inputStream=new ObjectInputStream(s.getInputStream());
    debug(""String_Node_Str"" + anURI);
    send(new ConnectRequestMessage(anURI,(Serializable)data));
    res=(ConnectResultMessage)readObject();
  }
 catch (  final Exception e) {
    throw new ECFException(""String_Node_Str"" + remote.getName(),e);
  }
  debug(""String_Node_Str"" + res);
  setupThreads();
  final Object ret=res.getData();
  debug(""String_Node_Str"" + ret);
  return ret;
}",0.9846517119244392
94272,"public void addRemoteServiceListener(IRemoteServiceListener listener){
  remoteServiceListeners.add(listener);
}","public void addRemoteServiceListener(IRemoteServiceListener listener){
synchronized (remoteServiceListeners) {
    remoteServiceListeners.add(listener);
  }
}",0.8296296296296296
94273,"public void removeRemoteServiceListener(IRemoteServiceListener listener){
  remoteServiceListeners.remove(listener);
}","public void removeRemoteServiceListener(IRemoteServiceListener listener){
synchronized (remoteServiceListeners) {
    remoteServiceListeners.remove(listener);
  }
}",0.8368794326241135
94274,"public void dispose(){
  disconnect();
  remoteServiceListeners.clear();
  super.dispose();
}","public void dispose(){
  disconnect();
synchronized (remoteServiceListeners) {
    remoteServiceListeners.clear();
  }
  super.dispose();
}",0.8017241379310345
94275,"public void start() throws Exception {
  Properties props=new Properties();
  props.put(org.osgi.service.remoteserviceadmin.EndpointListener.ENDPOINT_LISTENER_SCOPE,getEndpointListenerScope());
  endpointListenerRegistration=getContext().registerService(EndpointListener.class.getName(),this,(Dictionary)props);
  eventHookRegistration=getContext().registerService(EventHook.class.getName(),this,null);
}","public void start() throws Exception {
  if (exportRegisteredSvcs)   exportRegisteredServices(exportRegisteredSvcsClassname,exportRegisteredSvcsFilter);
  Properties props=new Properties();
  props.put(org.osgi.service.remoteserviceadmin.EndpointListener.ENDPOINT_LISTENER_SCOPE,getEndpointListenerScope());
  endpointListenerRegistration=getContext().registerService(EndpointListener.class.getName(),this,(Dictionary)props);
  eventHookRegistration=getContext().registerService(EventHook.class.getName(),this,null);
}",0.8763557483731019
94276,"/** 
 * Called when the OSGi framework stops the bundle.
 * @param bc the bundle context.
 * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)
 */
public void stop(final BundleContext bc) throws Exception {
  r_osgi_tracker.close();
  r_osgi_tracker=null;
  this.context=null;
  plugin=null;
}","/** 
 * Called when the OSGi framework stops the bundle.
 * @param bc the bundle context.
 * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)
 */
public void stop(final BundleContext bc) throws Exception {
  r_osgi_tracker.close();
  r_osgi_tracker=null;
synchronized (executorServiceTrackerLock) {
    if (executorServiceTracker != null) {
      executorServiceTracker.close();
      executorServiceTracker=null;
    }
  }
  this.context=null;
  plugin=null;
}",0.7232472324723247
94277,"/** 
 * call the service asynchronously.
 * @param call the call object.
 * @return the result proxy.
 * @see org.eclipse.ecf.remoteservice.IRemoteService#callAsync(org.eclipse.ecf.remoteservice.IRemoteCall)
 */
public IFuture callAsync(final IRemoteCall call){
  final AbstractExecutor executor=new ThreadsExecutor();
  return executor.execute(new IProgressRunnable(){
    public Object run(    IProgressMonitor monitor) throws Exception {
      return callSync(call);
    }
  }
,null);
}","/** 
 * call the service asynchronously.
 * @param call the call object.
 * @return the result proxy.
 * @see org.eclipse.ecf.remoteservice.IRemoteService#callAsync(org.eclipse.ecf.remoteservice.IRemoteCall)
 */
public IFuture callAsync(final IRemoteCall call){
  return getAsyncExecutor().execute(new IProgressRunnable(){
    public Object run(    IProgressMonitor monitor) throws Exception {
      return callSync(call);
    }
  }
,null);
}",0.9151450053705692
94278,"/** 
 * call the service synchronously.
 * @param call the call object.
 * @return the result or <code>null</code>
 * @see org.eclipse.ecf.remoteservice.IRemoteService#callSync(org.eclipse.ecf.remoteservice.IRemoteCall)
 */
public Object callSync(final IRemoteCall call) throws ECFException {
  Object[] ps=call.getParameters();
  final Object[] parameters=(ps == null) ? EMPTY_ARGS : ps;
  final Class[] formalParams=new Class[parameters.length];
  for (int i=0; i < formalParams.length; i++) {
    formalParams[i]=call.getParameters()[i].getClass();
  }
  IExecutor executor=new ThreadsExecutor();
  IFuture future=executor.execute(new IProgressRunnable(){
    public Object run(    IProgressMonitor monitor) throws Exception {
      final Method method=ClassUtil.getMethod(service.getClass(),call.getMethod(),formalParams);
      return method.invoke(service,parameters);
    }
  }
,null);
  Object result=null;
  try {
    result=future.get(call.getTimeout());
  }
 catch (  OperationCanceledException e) {
    throw new ECFException(""String_Node_Str"",e);
  }
catch (  InterruptedException e) {
    return null;
  }
catch (  TimeoutException e) {
    throw new ECFException(""String_Node_Str"" + Long.toString(call.getTimeout()) + ""String_Node_Str"",new TimeoutException(call.getTimeout()));
  }
  IStatus status=future.getStatus();
  if (!status.isOK())   throw new ECFException(""String_Node_Str"",status.getException());
  return result;
}","/** 
 * call the service synchronously.
 * @param call the call object.
 * @return the result or <code>null</code>
 * @see org.eclipse.ecf.remoteservice.IRemoteService#callSync(org.eclipse.ecf.remoteservice.IRemoteCall)
 */
public Object callSync(final IRemoteCall call) throws ECFException {
  Object[] ps=call.getParameters();
  final Object[] parameters=(ps == null) ? EMPTY_ARGS : ps;
  final Class[] formalParams=new Class[parameters.length];
  for (int i=0; i < formalParams.length; i++) {
    formalParams[i]=call.getParameters()[i].getClass();
  }
  IFuture future=getSyncExecutor().execute(new IProgressRunnable(){
    public Object run(    IProgressMonitor monitor) throws Exception {
      final Method method=ClassUtil.getMethod(service.getClass(),call.getMethod(),formalParams);
      return method.invoke(service,parameters);
    }
  }
,null);
  Object result=null;
  try {
    result=future.get(call.getTimeout());
  }
 catch (  OperationCanceledException e) {
    throw new ECFException(""String_Node_Str"",e);
  }
catch (  InterruptedException e) {
    return null;
  }
catch (  TimeoutException e) {
    throw new ECFException(""String_Node_Str"" + Long.toString(call.getTimeout()) + ""String_Node_Str"",new TimeoutException(call.getTimeout()));
  }
  IStatus status=future.getStatus();
  if (!status.isOK())   throw new ECFException(""String_Node_Str"",status.getException());
  return result;
}",0.9715489989462592
94279,"/** 
 * Calls the Rest service with given URL of IRestCall. The returned value is the response body as an InputStream.
 * @param call The remote call to make.  Must not be <code>null</code>.
 * @param callable The callable with default parameters to use to make the call.
 * @return The InputStream of the response body or <code>null</code> if anerror occurs.
 */
protected Object invokeRemoteCall(final IRemoteCall call,final IRemoteCallable callable) throws ECFException {
  String uri=prepareEndpointAddress(call,callable);
  HttpMethod httpMethod=createAndPrepareHttpMethod(uri,call,callable);
  String responseBody=null;
  int responseCode=-1;
  try {
    responseCode=httpClient.executeMethod(httpMethod);
    if (responseCode == HttpStatus.SC_OK) {
      byte[] responseBytes=httpMethod.getResponseBody();
      String responseCharSet=null;
      if (httpMethod instanceof HttpMethodBase) {
        HttpMethodBase methodBase=(HttpMethodBase)httpMethod;
        responseCharSet=methodBase.getRequestCharSet();
      }
      responseBody=getResponseAsString(responseBytes,responseCharSet);
    }
 else     handleException(""String_Node_Str"" + uri + ""String_Node_Str""+ new Integer(responseCode),null,responseCode);
  }
 catch (  HttpException e) {
    handleException(""String_Node_Str"",e,responseCode);
  }
catch (  IOException e) {
    handleException(""String_Node_Str"",e,responseCode);
  }
  Object result=null;
  try {
    result=processResponse(uri,call,callable,convertResponseHeaders(httpMethod.getResponseHeaders()),responseBody);
  }
 catch (  NotSerializableException e) {
    handleException(""String_Node_Str"" + uri + ""String_Node_Str""+ new Integer(responseCode),e,responseCode);
  }
  return result;
}","/** 
 * Calls the Rest service with given URL of IRestCall. The returned value is the response body as an InputStream.
 * @param call The remote call to make.  Must not be <code>null</code>.
 * @param callable The callable with default parameters to use to make the call.
 * @return The InputStream of the response body or <code>null</code> if anerror occurs.
 */
protected Object invokeRemoteCall(final IRemoteCall call,final IRemoteCallable callable) throws ECFException {
  String uri=prepareEndpointAddress(call,callable);
  HttpMethod httpMethod=createAndPrepareHttpMethod(uri,call,callable);
  String responseBody=null;
  int responseCode=-1;
  try {
    responseCode=httpClient.executeMethod(httpMethod);
    if (isResponseOk(responseCode)) {
      byte[] responseBytes=httpMethod.getResponseBody();
      String responseCharSet=null;
      if (httpMethod instanceof HttpMethodBase) {
        HttpMethodBase methodBase=(HttpMethodBase)httpMethod;
        responseCharSet=methodBase.getRequestCharSet();
      }
      responseBody=getResponseAsString(responseBytes,responseCharSet);
    }
 else     handleException(""String_Node_Str"" + uri + ""String_Node_Str""+ new Integer(responseCode),null,responseCode);
  }
 catch (  HttpException e) {
    handleException(""String_Node_Str"",e,responseCode);
  }
catch (  IOException e) {
    handleException(""String_Node_Str"",e,responseCode);
  }
  Object result=null;
  try {
    result=processResponse(uri,call,callable,convertResponseHeaders(httpMethod.getResponseHeaders()),responseBody);
  }
 catch (  NotSerializableException e) {
    handleException(""String_Node_Str"" + uri + ""String_Node_Str""+ new Integer(responseCode),e,responseCode);
  }
  return result;
}",0.983644859813084
94280,"public static String[] getExportedInterfaces(ServiceReference serviceReference){
  Object propValue=serviceReference.getProperty(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_INTERFACES);
  if (propValue == null)   return null;
  boolean wildcard=propValue.equals(""String_Node_Str"");
  if (wildcard)   return (String[])serviceReference.getProperty(org.osgi.framework.Constants.OBJECTCLASS);
 else {
    final String[] stringValue=getStringArrayFromPropertyValue(propValue);
    if (stringValue != null && stringValue.length == 1 && stringValue[0].equals(""String_Node_Str"")) {
      LogUtility.logWarning(""String_Node_Str"",DebugOptions.TOPOLOGY_MANAGER,PropertiesUtil.class,""String_Node_Str"");
    }
    return stringValue;
  }
}","public static String[] getExportedInterfaces(ServiceReference serviceReference){
  return getExportedInterfaces(serviceReference,serviceReference.getProperty(org.osgi.service.remoteserviceadmin.RemoteConstants.SERVICE_EXPORTED_INTERFACES));
}",0.3967774420946626
94281,"public void start() throws Exception {
  Properties props=new Properties();
  props.put(org.osgi.service.remoteserviceadmin.EndpointListener.ENDPOINT_LISTENER_SCOPE,""String_Node_Str"" + org.osgi.service.remoteserviceadmin.RemoteConstants.ENDPOINT_ID + ""String_Node_Str"");
  endpointListenerRegistration=getContext().registerService(EndpointListener.class.getName(),this,(Dictionary)props);
  eventHookRegistration=getContext().registerService(EventHook.class.getName(),this,null);
}","public void start() throws Exception {
  Properties props=new Properties();
  props.put(org.osgi.service.remoteserviceadmin.EndpointListener.ENDPOINT_LISTENER_SCOPE,getEndpointListenerScope());
  endpointListenerRegistration=getContext().registerService(EndpointListener.class.getName(),this,(Dictionary)props);
  eventHookRegistration=getContext().registerService(EventHook.class.getName(),this,null);
}",0.8564971751412429
94282,"private BundleContext getProxyServiceFactoryContext(EndpointDescription endpointDescription){
  Activator a=Activator.getDefault();
  if (a == null)   return null;
  if (a.isOldEquinox()) {
    BundleContext rsaContext=Activator.getContext();
    if (rsaContext == null)     return null;
    List<String> interfaces=endpointDescription.getInterfaces();
    Collection<Class> serviceInterfaceClasses=loadServiceInterfacesViaBundle(rsaContext.getBundle(),interfaces.toArray(new String[interfaces.size()]));
    if (serviceInterfaceClasses.size() == 0)     return null;
    PackageAdmin packageAdmin=getPackageAdmin();
    if (packageAdmin == null)     return null;
    Bundle bundle=packageAdmin.getBundle(serviceInterfaceClasses.iterator().next());
    if (bundle == null)     return null;
    return bundle.getBundleContext();
  }
 else   return a.getProxyServiceFactoryBundleContext();
}","private BundleContext getProxyServiceFactoryContext(EndpointDescription endpointDescription){
  Activator a=Activator.getDefault();
  if (a == null)   return null;
  if (a.isOldEquinox()) {
    BundleContext rsaContext=Activator.getContext();
    if (rsaContext == null)     return null;
    List<String> interfaces=endpointDescription.getInterfaces();
    Collection<Class> serviceInterfaceClasses=loadServiceInterfacesViaBundle(rsaContext.getBundle(),interfaces.toArray(new String[interfaces.size()]));
    if (serviceInterfaceClasses.size() == 0)     return null;
    PackageAdmin packageAdmin=getPackageAdmin();
    if (packageAdmin == null)     return null;
    Bundle bundle=packageAdmin.getBundle(serviceInterfaceClasses.iterator().next());
    if (bundle == null)     return null;
    if (bundle.getState() == Bundle.RESOLVED) {
      try {
        bundle.start();
      }
 catch (      BundleException e) {
        logError(""String_Node_Str"",""String_Node_Str"" + bundle.getSymbolicName() + ""String_Node_Str""+ interfaces);
        return null;
      }
    }
    return bundle.getBundleContext();
  }
  return a.getProxyServiceFactoryBundleContext();
}",0.8455522971652004
94283,"/** 
 * Parse the attributes of an element, given the list of required and optional ones. Return values in same order, null for those not present. Log warnings for extra attributes or missing required attributes.
 */
protected String[] parseAttributes(Attributes attributes,String[] required,String[] optional){
  String[] result=new String[required.length + optional.length];
  for (int i=0; i < attributes.getLength(); i+=1) {
    String name=attributes.getLocalName(i);
    String value=attributes.getValue(i).trim();
    int j;
    if ((j=indexOf(required,name)) >= 0) {
      result[j]=value;
    }
 else     if ((j=indexOf(optional,name)) >= 0) {
      result[required.length + j]=value;
    }
 else {
      unexpectedAttribute(elementHandled,name,value);
    }
  }
  for (int i=0; i < required.length; i+=1) {
    checkRequiredAttribute(elementHandled,required[i],result[i]);
  }
  return result;
}","/** 
 * Parse the attributes of an element, given the list of required and optional ones. Return values in same order, null for those not present. Log warnings for extra attributes or missing required attributes.
 */
protected String[] parseAttributes(Attributes attributes,String[] required,String[] optional){
  String[] result=new String[required.length + optional.length];
  for (int i=0; i < attributes.getLength(); i+=1) {
    String name=attributes.getLocalName(i);
    String value=attributes.getValue(i).trim();
    int j;
    if ((j=indexOf(required,name)) >= 0)     result[j]=value;
 else     if ((j=indexOf(optional,name)) >= 0)     result[required.length + j]=value;
 else     unexpectedAttribute(elementHandled,name,value);
  }
  for (int i=0; i < required.length; i+=1)   checkRequiredAttribute(elementHandled,required[i],result[i]);
  return result;
}",0.9571106094808126
94284,"private boolean isValidProperty(String[] property){
  return (property.length == 2 && property[0] != null && property[1] != null);
}","private boolean isValidProperty(String name,Object value){
  return (name != null && value != null);
}",0.6837606837606838
94285,"protected Object[] createEmptyArrayOfType(){
  if (valueType.equals(""String_Node_Str"")) {
    return new String[]{};
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return new Long[]{};
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return new Double[]{};
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return new Double[]{};
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return new Integer[]{};
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return new Byte[]{};
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return new Character[]{};
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return new Boolean[]{};
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return new Short[]{};
  }
 else   return null;
}","protected Object[] createEmptyArrayOfType(){
  if (valueType.equals(""String_Node_Str""))   return new String[]{};
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str""))   return new Long[]{};
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str""))   return new Double[]{};
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str""))   return new Double[]{};
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str""))   return new Integer[]{};
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str""))   return new Byte[]{};
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str""))   return new Character[]{};
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str""))   return new Boolean[]{};
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str""))   return new Short[]{};
 else   return null;
}",0.9665116279069768
94286,"public EndpointPropertyHandler(ContentHandler parentHandler,Attributes attributes,Map<String,Object> properties) throws SAXException {
  super(parentHandler,ENDPOINT_PROPERTY);
  name=parseRequiredAttributes(attributes,new String[]{ENDPOINT_PROPERTY_NAME})[0];
  value=parseOptionalAttribute(attributes,ENDPOINT_PROPERTY_VALUE);
  String vt=parseOptionalAttribute(attributes,ENDPOINT_PROPERTY_VALUETYPE);
  if (vt != null) {
    if (!multiValueTypes.contains(vt))     throw new SAXException(""String_Node_Str"" + vt + ""String_Node_Str"");
    this.valueType=vt;
  }
  this.properties=properties;
  if (value != null) {
    String[] property=new String[]{name,value};
    if (isValidProperty(property)) {
      this.properties.put(property[0],property[1]);
    }
  }
}","public EndpointPropertyHandler(ContentHandler parentHandler,Attributes attributes,Map<String,Object> properties) throws SAXException {
  super(parentHandler,ENDPOINT_PROPERTY);
  name=parseRequiredAttributes(attributes,new String[]{ENDPOINT_PROPERTY_NAME})[0];
  String strValue=parseOptionalAttribute(attributes,ENDPOINT_PROPERTY_VALUE);
  String vt=parseOptionalAttribute(attributes,ENDPOINT_PROPERTY_VALUETYPE);
  if (vt != null) {
    if (!multiValueTypes.contains(vt))     throw new SAXException(""String_Node_Str"" + vt + ""String_Node_Str"");
    this.valueType=vt;
  }
  this.properties=properties;
  if (strValue != null) {
    value=createValue(this.valueType,strValue);
    if (isValidProperty(name,value))     this.properties.put(name,value);
  }
}",0.8302631578947368
94287,"protected void processCharacters(String data){
  if (data.length() > 0) {
    unexpectedCharacterData(this,data);
  }
}","protected void processCharacters(String data){
  if (data.length() > 0)   unexpectedCharacterData(this,data);
}",0.9652173913043478
94288,"SAXParser getParser() throws ParserConfigurationException, SAXException {
  Activator a=Activator.getDefault();
  if (a == null)   return null;
  SAXParserFactory factory=a.getSAXParserFactory();
  if (factory == null) {
    throw new SAXException(""String_Node_Str"");
  }
  factory.setNamespaceAware(true);
  factory.setValidating(false);
  try {
    factory.setFeature(""String_Node_Str"",true);
  }
 catch (  SAXException se) {
  }
  SAXParser theParser=factory.newSAXParser();
  if (theParser == null) {
    throw new SAXException(""String_Node_Str"");
  }
  xmlReader=theParser.getXMLReader();
  return theParser;
}","SAXParser getParser() throws ParserConfigurationException, SAXException {
  Activator a=Activator.getDefault();
  if (a == null)   return null;
  SAXParserFactory factory=a.getSAXParserFactory();
  if (factory == null)   throw new SAXException(""String_Node_Str"");
  factory.setNamespaceAware(true);
  factory.setValidating(false);
  try {
    factory.setFeature(""String_Node_Str"",true);
  }
 catch (  SAXException se) {
  }
  SAXParser theParser=factory.newSAXParser();
  if (theParser == null) {
    throw new SAXException(""String_Node_Str"");
  }
  xmlReader=theParser.getXMLReader();
  return theParser;
}",0.9934533551554828
94289,"protected Object createValue(String value){
  if (value == null)   return null;
  if (valueType.equals(""String_Node_Str"")) {
    return value;
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Long.valueOf(value);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Double.valueOf(value);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Float.valueOf(value);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Integer.valueOf(value);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Byte.valueOf(value);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    char[] chars=new char[1];
    value.getChars(0,1,chars,0);
    return Character.valueOf(chars[0]);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Boolean.valueOf(value);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Short.valueOf(value);
  }
  return null;
}","private Object createValue(String valueType,String value){
  if (value == null)   return null;
  if (valueType.equals(""String_Node_Str"")) {
    return value;
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Long.valueOf(value);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Double.valueOf(value);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Float.valueOf(value);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Integer.valueOf(value);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Byte.valueOf(value);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    char[] chars=new char[1];
    value.getChars(0,1,chars,0);
    return Character.valueOf(chars[0]);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Boolean.valueOf(value);
  }
 else   if (valueType.equals(""String_Node_Str"") || valueType.equals(""String_Node_Str"")) {
    return Short.valueOf(value);
  }
  return null;
}",0.9884874950377134
94290,"public static String makeSimpleName(String localName,String qualifiedName){
  if (localName != null && localName.length() > 0) {
    return localName;
  }
  int nameSpaceIndex=qualifiedName.indexOf(""String_Node_Str"");
  return (nameSpaceIndex == -1 ? qualifiedName : qualifiedName.substring(nameSpaceIndex + 1));
}","public static String makeSimpleName(String localName,String qualifiedName){
  if (localName != null && localName.length() > 0)   return localName;
  int nameSpaceIndex=qualifiedName.indexOf(""String_Node_Str"");
  return (nameSpaceIndex == -1 ? qualifiedName : qualifiedName.substring(nameSpaceIndex + 1));
}",0.9870967741935484
94291,"public void startElement(String name,Attributes attributes) throws SAXException {
  if (value != null)   throw new SAXException(""String_Node_Str"");
  if (ENDPOINT_PROPERTY_ARRAY.equals(name)) {
    if (multiValueHandler == null) {
      multiValueHandler=new ArrayMultiValueHandler(this,ENDPOINT_PROPERTY_ARRAY,valueType);
    }
 else {
      duplicateElement(this,name,attributes);
    }
  }
 else   if (ENDPOINT_PROPERTY_LIST.equals(name)) {
    if (multiValueHandler == null) {
      multiValueHandler=new ListMultiValueHandler(this,ENDPOINT_PROPERTY_LIST,valueType);
    }
 else {
      duplicateElement(this,name,attributes);
    }
  }
 else   if (ENDPOINT_PROPERTY_SET.equals(name)) {
    if (multiValueHandler == null) {
      multiValueHandler=new SetMultiValueHandler(this,ENDPOINT_PROPERTY_SET,valueType);
    }
 else {
      duplicateElement(this,name,attributes);
    }
  }
 else   if (ENDPOINT_PROPERTY_XML.equals(name)) {
    if (xmlValueHandler == null) {
      xmlValueHandler=new XMLValueHandler(this);
    }
 else {
      duplicateElement(this,name,attributes);
    }
  }
 else {
    invalidElement(name,attributes);
  }
}","public void startElement(String name,Attributes attributes) throws SAXException {
  if (value != null)   throw new SAXException(""String_Node_Str"");
  if (ENDPOINT_PROPERTY_ARRAY.equals(name)) {
    if (multiValueHandler == null)     multiValueHandler=new ArrayMultiValueHandler(this,ENDPOINT_PROPERTY_ARRAY,valueType);
 else     duplicateElement(this,name,attributes);
  }
 else   if (ENDPOINT_PROPERTY_LIST.equals(name)) {
    if (multiValueHandler == null)     multiValueHandler=new ListMultiValueHandler(this,ENDPOINT_PROPERTY_LIST,valueType);
 else     duplicateElement(this,name,attributes);
  }
 else   if (ENDPOINT_PROPERTY_SET.equals(name)) {
    if (multiValueHandler == null)     multiValueHandler=new SetMultiValueHandler(this,ENDPOINT_PROPERTY_SET,valueType);
 else     duplicateElement(this,name,attributes);
  }
 else   if (ENDPOINT_PROPERTY_XML.equals(name)) {
    if (xmlValueHandler == null)     xmlValueHandler=new XMLValueHandler(this);
 else     duplicateElement(this,name,attributes);
  }
 else   invalidElement(name,attributes);
}",0.7855839416058394
94292,"private boolean allWhiteSpace(StringBuffer sb){
  int length=sb.length();
  for (int i=0; i < length; i+=1) {
    if (!Character.isWhitespace(sb.charAt(i))) {
      return false;
    }
  }
  return true;
}","private boolean allWhiteSpace(StringBuffer sb){
  int length=sb.length();
  for (int i=0; i < length; i+=1)   if (!Character.isWhitespace(sb.charAt(i)))   return false;
  return true;
}",0.9487179487179488
94293,"/** 
 * @param properties The map from which to create the Endpoint Description. The keys in the map must be type <code>String</code> and, since the keys are case insensitive, there must be no duplicates with case variation.
 * @throws IllegalArgumentException When the properties are not proper for an Endpoint Description.
 * @see org.osgi.service.remoteserviceadmin.EndpointDescription#EndpointDescription(Map)
 */
public EndpointDescription(Map<String,Object> properties){
  super(properties);
  verifyECFProperties();
}","/** 
 * @param properties The map from which to create the Endpoint Description. The keys in the map must be type <code>String</code> and, since the keys are case insensitive, there must be no duplicates with case variation.
 * @throws IllegalArgumentException When the properties are not proper for an Endpoint Description.
 * @see org.osgi.service.remoteserviceadmin.EndpointDescription#EndpointDescription(Map)
 */
public EndpointDescription(Map<String,Object> properties){
  super(properties);
  verifyECFProperties();
  computeHashCode();
}",0.980355472404116
94294,"private String processValue(String characters){
  if (characters == null || characters.length() == 0)   return null;
  if (valueType.equals(""String_Node_Str""))   return characters;
  int startIndex=0;
  while (Character.isWhitespace(characters.charAt(startIndex)))   startIndex++;
  int endIndex=characters.length() - 1;
  while (Character.isWhitespace(characters.charAt(endIndex)))   endIndex--;
  return characters.substring(startIndex,endIndex + 1);
}","private String processValue(String characters){
  if (characters == null || characters.length() == 0)   return null;
  if (valueType.equals(""String_Node_Str""))   return characters;
  return characters.trim();
}",0.5602409638554217
94295,"private IStatus createResultStatus(List<IStatus> statuses,String errorMessage){
  List<IStatus> errorStatuses=new ArrayList<IStatus>();
  for (  IStatus status : statuses)   if (!status.isOK())   errorStatuses.add(status);
  if (errorStatuses.size() > 0)   return new MultiStatus(Activator.PLUGIN_ID,IStatus.ERROR,(IStatus[])statuses.toArray(),errorMessage,null);
 else   return Status.OK_STATUS;
}","private IStatus createResultStatus(List<IStatus> statuses,String errorMessage){
  List<IStatus> errorStatuses=new ArrayList<IStatus>();
  for (  IStatus status : statuses)   if (!status.isOK())   errorStatuses.add(status);
  if (errorStatuses.size() > 0)   return new MultiStatus(Activator.PLUGIN_ID,IStatus.ERROR,(IStatus[])statuses.toArray(new IStatus[statuses.size()]),errorMessage,null);
 else   return Status.OK_STATUS;
}",0.9660194174757282
94296,"/** 
 * @param reference
 */
private void handleServicePublication(ServiceReference reference){
  Collection svcInterfaces=ServicePropertyUtils.getCollectionProperty(reference,ServicePublication.SERVICE_INTERFACE_NAME);
  if (svcInterfaces == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  IServiceProperties discoveryServiceProperties=new ServiceProperties();
  discoveryServiceProperties.setPropertyBytes(DISCOVERY_IDENTIFIER,guid);
  discoveryServiceProperties.setPropertyString(ServicePublication.SERVICE_INTERFACE_NAME,ServicePropertyUtils.createStringFromCollection(svcInterfaces));
  Collection configTypes=ServicePropertyUtils.getCollectionProperty(reference,RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS);
  if (configTypes != null) {
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS,ServicePropertyUtils.createStringFromCollection(configTypes));
  }
  Collection serviceIntents=ServicePropertyUtils.getCollectionProperty(reference,RemoteServicePublication.ENDPOINT_SERVICE_INTENTS);
  if (serviceIntents != null) {
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_SERVICE_INTENTS,ServicePropertyUtils.createStringFromCollection(serviceIntents));
  }
  Map servicePublicationServiceProperties=ServicePropertyUtils.getMapProperty(reference,ServicePublication.SERVICE_PROPERTIES);
  if (servicePublicationServiceProperties != null)   addPropertiesToDiscoveryServiceProperties(discoveryServiceProperties,servicePublicationServiceProperties);
  ID endpointContainerID=(ID)reference.getProperty(RemoteServicePublication.ENDPOINT_CONTAINERID);
  if (endpointContainerID == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.ENDPOINT_CONTAINERID,endpointContainerID.toExternalForm().getBytes());
  String endpointNamespace=endpointContainerID.getNamespace().getName();
  discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_CONTAINERID_NAMESPACE,endpointNamespace);
  ID targetContainerID=(ID)reference.getProperty(RemoteServicePublication.TARGET_CONTAINERID);
  if (targetContainerID != null) {
    discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.TARGET_CONTAINERID,targetContainerID.toExternalForm().getBytes());
    String targetNamespace=targetContainerID.getNamespace().getName();
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.TARGET_CONTAINERID_NAMESPACE,targetNamespace);
  }
  String rsnamespace=ServicePropertyUtils.getStringProperty(reference,Constants.SERVICE_NAMESPACE);
  if (rsnamespace != null)   discoveryServiceProperties.setPropertyString(Constants.SERVICE_NAMESPACE,rsnamespace);
  final byte[] remoteServiceIDAsBytes=(byte[])reference.getProperty(Constants.SERVICE_ID);
  if (remoteServiceIDAsBytes == null) {
    logInfo(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ Constants.SERVICE_ID+ ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(Constants.SERVICE_ID,remoteServiceIDAsBytes);
  IDiscoveryAdvertiser advertiser2=getAdvertiser();
  if (advertiser2 == null) {
    logInfo(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  Namespace advertiserNamespace=advertiser2.getServicesNamespace();
  IServiceInfo svcInfo=null;
  try {
    IServiceTypeID serviceTypeID=createServiceTypeID(servicePublicationServiceProperties,advertiserNamespace);
    String defaultServiceName=createUniqueDefaultServiceName();
    String serviceName=getPropertyWithDefault(servicePublicationServiceProperties,RemoteServicePublication.SERVICE_NAME,defaultServiceName);
    URI uri=createURI(endpointContainerID,""String_Node_Str"" + serviceName);
    svcInfo=new ServiceInfo(uri,serviceName,serviceTypeID,discoveryServiceProperties);
  }
 catch (  IDCreateException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
catch (  URISyntaxException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
  fireHostPublishUnpublish(reference,svcInfo,true);
synchronized (serviceInfos) {
    try {
      trace(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ svcInfo);
      advertiser2.registerService(svcInfo);
      addServiceInfo(reference,svcInfo);
    }
 catch (    ECFRuntimeException e) {
      logError(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
}","/** 
 * @param reference
 */
private void handleServicePublication(ServiceReference reference){
  Collection svcInterfaces=ServicePropertyUtils.getCollectionProperty(reference,ServicePublication.SERVICE_INTERFACE_NAME);
  if (svcInterfaces == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  IServiceProperties discoveryServiceProperties=new ServiceProperties();
  discoveryServiceProperties.setPropertyBytes(DISCOVERY_IDENTIFIER,guid);
  discoveryServiceProperties.setPropertyString(ServicePublication.SERVICE_INTERFACE_NAME,ServicePropertyUtils.createStringFromCollection(svcInterfaces));
  Collection configTypes=ServicePropertyUtils.getCollectionProperty(reference,RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS);
  if (configTypes != null) {
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS,ServicePropertyUtils.createStringFromCollection(configTypes));
  }
  Collection serviceIntents=ServicePropertyUtils.getCollectionProperty(reference,RemoteServicePublication.ENDPOINT_SERVICE_INTENTS);
  if (serviceIntents != null) {
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_SERVICE_INTENTS,ServicePropertyUtils.createStringFromCollection(serviceIntents));
  }
  Map servicePublicationServiceProperties=ServicePropertyUtils.getMapProperty(reference,ServicePublication.SERVICE_PROPERTIES);
  if (servicePublicationServiceProperties != null)   addPropertiesToDiscoveryServiceProperties(discoveryServiceProperties,servicePublicationServiceProperties);
  ID endpointContainerID=(ID)reference.getProperty(RemoteServicePublication.ENDPOINT_CONTAINERID);
  if (endpointContainerID == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.ENDPOINT_CONTAINERID,endpointContainerID.toExternalForm().getBytes());
  String endpointNamespace=endpointContainerID.getNamespace().getName();
  discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_CONTAINERID_NAMESPACE,endpointNamespace);
  ID targetContainerID=(ID)reference.getProperty(RemoteServicePublication.TARGET_CONTAINERID);
  if (targetContainerID != null) {
    discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.TARGET_CONTAINERID,targetContainerID.toExternalForm().getBytes());
    String targetNamespace=targetContainerID.getNamespace().getName();
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.TARGET_CONTAINERID_NAMESPACE,targetNamespace);
  }
  final byte[] remoteServiceIDAsBytes=(byte[])reference.getProperty(Constants.SERVICE_ID);
  if (remoteServiceIDAsBytes == null) {
    logInfo(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ Constants.SERVICE_ID+ ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(Constants.SERVICE_ID,remoteServiceIDAsBytes);
  IDiscoveryAdvertiser advertiser2=getAdvertiser();
  if (advertiser2 == null) {
    logInfo(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  Namespace advertiserNamespace=advertiser2.getServicesNamespace();
  IServiceInfo svcInfo=null;
  try {
    IServiceTypeID serviceTypeID=createServiceTypeID(servicePublicationServiceProperties,advertiserNamespace);
    String defaultServiceName=createUniqueDefaultServiceName();
    String serviceName=getPropertyWithDefault(servicePublicationServiceProperties,RemoteServicePublication.SERVICE_NAME,defaultServiceName);
    URI uri=createURI(endpointContainerID,""String_Node_Str"" + serviceName);
    svcInfo=new ServiceInfo(uri,serviceName,serviceTypeID,discoveryServiceProperties);
  }
 catch (  IDCreateException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
catch (  URISyntaxException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
  fireHostPublishUnpublish(reference,svcInfo,true);
synchronized (serviceInfos) {
    try {
      trace(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ svcInfo);
      advertiser2.registerService(svcInfo);
      addServiceInfo(reference,svcInfo);
    }
 catch (    ECFRuntimeException e) {
      logError(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
}",0.769591426657736
94297,"private Dictionary getServicePublicationProperties(IRemoteServiceContainer rsContainer,ServiceReference ref,String[] remoteInterfaces,IRemoteServiceRegistration remoteRegistration,String[] serviceIntents,String[] supportedConfigs,Dictionary remoteProperties){
  final Dictionary result=new Properties();
  IContainer container=rsContainer.getContainer();
  result.put(RemoteServicePublication.SERVICE_INTERFACE_NAME,getAsCollection(remoteInterfaces));
  if (supportedConfigs == null)   supportedConfigs=getSupportedConfigs(rsContainer);
  result.put(RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS,getAsCollection(supportedConfigs));
  if (serviceIntents != null)   result.put(RemoteServicePublication.ENDPOINT_SERVICE_INTENTS,getAsCollection(serviceIntents));
  result.put(RemoteServicePublication.SERVICE_PROPERTIES,remoteProperties);
  ID endpointID=container.getID();
  result.put(RemoteServicePublication.ENDPOINT_CONTAINERID,endpointID);
  ID targetID=container.getConnectedID();
  if (targetID != null && !targetID.equals(endpointID)) {
    result.put(RemoteServicePublication.TARGET_CONTAINERID,targetID);
  }
  Namespace rsnamespace=rsContainer.getContainerAdapter().getRemoteServiceNamespace();
  if (rsnamespace != null)   result.put(Constants.SERVICE_NAMESPACE,rsnamespace.getName());
  Long serviceId=(Long)remoteRegistration.getProperty(Constants.SERVICE_ID);
  byte[] serviceIdAsBytes=null;
  if (serviceId != null) {
    serviceIdAsBytes=serviceId.toString().getBytes();
  }
 else {
    logError(""String_Node_Str"",""String_Node_Str"" + remoteRegistration);
    serviceIdAsBytes=""String_Node_Str"".getBytes();
  }
  result.put(Constants.SERVICE_ID,serviceIdAsBytes);
  return result;
}","private Dictionary getServicePublicationProperties(IRemoteServiceContainer rsContainer,ServiceReference ref,String[] remoteInterfaces,IRemoteServiceRegistration remoteRegistration,String[] serviceIntents,String[] supportedConfigs,Dictionary remoteProperties){
  final Dictionary result=new Properties();
  IContainer container=rsContainer.getContainer();
  result.put(RemoteServicePublication.SERVICE_INTERFACE_NAME,getAsCollection(remoteInterfaces));
  if (supportedConfigs == null)   supportedConfigs=getSupportedConfigs(rsContainer);
  result.put(RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS,getAsCollection(supportedConfigs));
  if (serviceIntents != null)   result.put(RemoteServicePublication.ENDPOINT_SERVICE_INTENTS,getAsCollection(serviceIntents));
  result.put(RemoteServicePublication.SERVICE_PROPERTIES,remoteProperties);
  ID endpointID=container.getID();
  result.put(RemoteServicePublication.ENDPOINT_CONTAINERID,endpointID);
  ID targetID=container.getConnectedID();
  if (targetID != null && !targetID.equals(endpointID)) {
    result.put(RemoteServicePublication.TARGET_CONTAINERID,targetID);
  }
  Long serviceId=(Long)remoteRegistration.getProperty(Constants.SERVICE_ID);
  byte[] serviceIdAsBytes=null;
  if (serviceId != null) {
    serviceIdAsBytes=serviceId.toString().getBytes();
  }
 else {
    logError(""String_Node_Str"",""String_Node_Str"" + remoteRegistration);
    serviceIdAsBytes=""String_Node_Str"".getBytes();
  }
  result.put(Constants.SERVICE_ID,serviceIdAsBytes);
  return result;
}",0.9444616816630468
94298,"public IRemoteServiceContainer[] findHostContainers(ServiceReference serviceReference,String[] serviceExportedInterfaces,String[] serviceExportedConfigs,String[] serviceIntents){
  Collection rsContainers=findExistingHostContainers(serviceReference,serviceExportedInterfaces,serviceExportedConfigs,serviceIntents);
  if (rsContainers.size() == 0 && autoCreateContainer) {
    rsContainers=createAndConfigureHostContainers(serviceReference,serviceExportedInterfaces,serviceExportedConfigs,serviceIntents);
    Object target=serviceReference.getProperty(IDistributionConstants.SERVICE_EXPORTED_CONTAINER_CONNECT_TARGET);
    if (target != null) {
      for (Iterator i=rsContainers.iterator(); i.hasNext(); ) {
        IContainer container=((IRemoteServiceContainer)i.next()).getContainer();
        try {
          connectHostContainer(serviceReference,container,target);
        }
 catch (        Exception e) {
          logException(""String_Node_Str"" + container.getID() + ""String_Node_Str""+ target,e);
        }
      }
    }
  }
  return (IRemoteServiceContainer[])rsContainers.toArray(new IRemoteServiceContainer[]{});
}","public synchronized IRemoteServiceContainer[] findHostContainers(ServiceReference serviceReference,String[] serviceExportedInterfaces,String[] serviceExportedConfigs,String[] serviceIntents){
  Collection rsContainers=findExistingHostContainers(serviceReference,serviceExportedInterfaces,serviceExportedConfigs,serviceIntents);
  if (rsContainers.size() == 0 && autoCreateContainer) {
    rsContainers=createAndConfigureHostContainers(serviceReference,serviceExportedInterfaces,serviceExportedConfigs,serviceIntents);
    Object target=serviceReference.getProperty(IDistributionConstants.SERVICE_EXPORTED_CONTAINER_CONNECT_TARGET);
    if (target != null) {
      for (Iterator i=rsContainers.iterator(); i.hasNext(); ) {
        IContainer container=((IRemoteServiceContainer)i.next()).getContainer();
        try {
          connectHostContainer(serviceReference,container,target);
        }
 catch (        Exception e) {
          logException(""String_Node_Str"" + container.getID() + ""String_Node_Str""+ target,e);
        }
      }
    }
  }
  return (IRemoteServiceContainer[])rsContainers.toArray(new IRemoteServiceContainer[]{});
}",0.9942554131683606
94299,"public IRemoteServiceContainer[] selectHostContainers(ServiceReference serviceReference,String[] serviceExportedInterfaces,String[] serviceExportedConfigs,String[] serviceIntents){
  Collection rsContainers=selectExistingHostContainers(serviceReference,serviceExportedInterfaces,serviceExportedConfigs,serviceIntents);
  if (rsContainers.size() == 0 && autoCreateContainer) {
    rsContainers=createAndConfigureHostContainers(serviceReference,serviceExportedInterfaces,serviceExportedConfigs,serviceIntents);
    Object target=serviceReference.getProperty(RemoteConstants.ENDPOINT_CONNECTTARGET_ID);
    if (target != null) {
      for (Iterator i=rsContainers.iterator(); i.hasNext(); ) {
        IContainer container=((IRemoteServiceContainer)i.next()).getContainer();
        try {
          connectHostContainer(serviceReference,container,target);
        }
 catch (        Exception e) {
          logException(""String_Node_Str"" + container.getID() + ""String_Node_Str""+ target,e);
        }
      }
    }
  }
  return (IRemoteServiceContainer[])rsContainers.toArray(new IRemoteServiceContainer[]{});
}","public synchronized IRemoteServiceContainer[] selectHostContainers(ServiceReference serviceReference,String[] serviceExportedInterfaces,String[] serviceExportedConfigs,String[] serviceIntents){
  Collection rsContainers=selectExistingHostContainers(serviceReference,serviceExportedInterfaces,serviceExportedConfigs,serviceIntents);
  if (rsContainers.size() == 0 && autoCreateContainer) {
    rsContainers=createAndConfigureHostContainers(serviceReference,serviceExportedInterfaces,serviceExportedConfigs,serviceIntents);
    Object target=serviceReference.getProperty(RemoteConstants.ENDPOINT_CONNECTTARGET_ID);
    if (target != null) {
      for (Iterator i=rsContainers.iterator(); i.hasNext(); ) {
        IContainer container=((IRemoteServiceContainer)i.next()).getContainer();
        try {
          connectHostContainer(serviceReference,container,target);
        }
 catch (        Exception e) {
          logException(""String_Node_Str"" + container.getID() + ""String_Node_Str""+ target,e);
        }
      }
    }
  }
  return (IRemoteServiceContainer[])rsContainers.toArray(new IRemoteServiceContainer[]{});
}",0.9941573033707866
94300,"private void startRemoteServiceAdmin(){
  Properties rsaProps=new Properties();
  rsaProps.put(RemoteServiceAdmin.SERVICE_PROP,new Boolean(true));
  remoteServiceAdminRegistration=context.registerService(org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.class.getName(),new ServiceFactory(){
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      return new RemoteServiceAdmin(bundle);
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
      if (service != null)       ((RemoteServiceAdmin)service).close();
    }
  }
,rsaProps);
}","private void startRemoteServiceAdmin(){
  Properties rsaProps=new Properties();
  rsaProps.put(RemoteServiceAdmin.SERVICE_PROP,new Boolean(true));
  remoteServiceAdminRegistration=context.registerService(org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.class.getName(),new ServiceFactory(){
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      return new RemoteServiceAdmin(bundle);
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
      if (service != null)       ((RemoteServiceAdmin)service).close();
    }
  }
,(Dictionary)rsaProps);
}",0.990625
94301,"public void start(){
  final Properties properties=new Properties();
  properties.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  serviceInfoFactory=new ServiceInfoFactory();
  defaultServiceInfoFactoryRegistration=context.registerService(IServiceInfoFactory.class.getName(),serviceInfoFactory,(Dictionary)properties);
  defaultEndpointDescriptionFactory=new DiscoveredEndpointDescriptionFactory();
  defaultEndpointDescriptionFactoryRegistration=context.registerService(IDiscoveredEndpointDescriptionFactory.class.getName(),defaultEndpointDescriptionFactory,(Dictionary)properties);
  defaultEndpointDescriptionReaderRegistration=context.registerService(IEndpointDescriptionReader.class.getName(),new EndpointDescriptionReader(),properties);
  ThreadGroup eventGroup=new ThreadGroup(""String_Node_Str"");
  eventGroup.setDaemon(true);
  eventManager=new EventManager(""String_Node_Str"",eventGroup);
  eventQueue=new ListenerQueue(eventManager);
  CopyOnWriteIdentityMap listeners=new CopyOnWriteIdentityMap();
  listeners.put(this,this);
  eventQueue.queueListeners(listeners.entrySet(),new EventDispatcher(){
    public void dispatchEvent(    Object eventListener,    Object listenerObject,    int eventAction,    Object eventObject){
      final String logMethodName=""String_Node_Str"";
      final EndpointListenerEvent event=(EndpointListenerEvent)eventObject;
      final EndpointListener endpointListener=event.getEndpointListener();
      final EndpointDescription endpointDescription=event.getEndointDescription();
      final String matchingFilter=event.getMatchingFilter();
      try {
        if (event.isDiscovered())         endpointListener.endpointAdded(endpointDescription,matchingFilter);
 else         endpointListener.endpointRemoved(endpointDescription,matchingFilter);
      }
 catch (      Exception e) {
        String message=""String_Node_Str"" + endpointListener + ""String_Node_Str""+ endpointDescription+ ""String_Node_Str""+ matchingFilter;
        logError(logMethodName,message,e);
      }
catch (      LinkageError e) {
        String message=""String_Node_Str"" + endpointListener + ""String_Node_Str""+ endpointDescription+ ""String_Node_Str""+ matchingFilter;
        logError(logMethodName,message,e);
      }
catch (      AssertionError e) {
        String message=""String_Node_Str"" + endpointListener + ""String_Node_Str""+ endpointDescription+ ""String_Node_Str""+ matchingFilter;
        logError(logMethodName,message,e);
      }
    }
  }
);
  endpointListenerTracker=new ServiceTracker(context,EndpointListener.class.getName(),new ServiceTrackerCustomizer(){
    public Object addingService(    ServiceReference reference){
      return addingEndpointListener(reference);
    }
    public void modifiedService(    ServiceReference reference,    Object service){
    }
    public void removedService(    ServiceReference reference,    Object service){
    }
  }
);
  endpointListenerTracker.open();
  locatorListeners=new HashMap();
  localLocatorServiceListener=new LocatorServiceListener(this);
  locatorServiceTracker=new ServiceTracker(context,IDiscoveryLocator.class.getName(),new LocatorTrackerCustomizer());
  locatorServiceTracker.open();
  Object[] locators=locatorServiceTracker.getServices();
  if (locators != null) {
    for (int i=0; i < locators.length; i++) {
      openLocator((IDiscoveryLocator)locators[i]);
    }
  }
  bundleTrackerCustomizer=new EndpointDescriptionBundleTrackerCustomizer(context,localLocatorServiceListener);
  bundleTracker=new BundleTracker(context,Bundle.ACTIVE | Bundle.STARTING,bundleTrackerCustomizer);
  bundleTracker.open();
}","public void start(){
  final Properties properties=new Properties();
  properties.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  serviceInfoFactory=new ServiceInfoFactory();
  defaultServiceInfoFactoryRegistration=context.registerService(IServiceInfoFactory.class.getName(),serviceInfoFactory,(Dictionary)properties);
  defaultEndpointDescriptionFactory=new DiscoveredEndpointDescriptionFactory();
  defaultEndpointDescriptionFactoryRegistration=context.registerService(IDiscoveredEndpointDescriptionFactory.class.getName(),defaultEndpointDescriptionFactory,(Dictionary)properties);
  defaultEndpointDescriptionReaderRegistration=context.registerService(IEndpointDescriptionReader.class.getName(),new EndpointDescriptionReader(),(Dictionary)properties);
  ThreadGroup eventGroup=new ThreadGroup(""String_Node_Str"");
  eventGroup.setDaemon(true);
  eventManager=new EventManager(""String_Node_Str"",eventGroup);
  eventQueue=new ListenerQueue(eventManager);
  CopyOnWriteIdentityMap listeners=new CopyOnWriteIdentityMap();
  listeners.put(this,this);
  eventQueue.queueListeners(listeners.entrySet(),new EventDispatcher(){
    public void dispatchEvent(    Object eventListener,    Object listenerObject,    int eventAction,    Object eventObject){
      final String logMethodName=""String_Node_Str"";
      final EndpointListenerEvent event=(EndpointListenerEvent)eventObject;
      final EndpointListener endpointListener=event.getEndpointListener();
      final EndpointDescription endpointDescription=event.getEndointDescription();
      final String matchingFilter=event.getMatchingFilter();
      try {
        if (event.isDiscovered())         endpointListener.endpointAdded(endpointDescription,matchingFilter);
 else         endpointListener.endpointRemoved(endpointDescription,matchingFilter);
      }
 catch (      Exception e) {
        String message=""String_Node_Str"" + endpointListener + ""String_Node_Str""+ endpointDescription+ ""String_Node_Str""+ matchingFilter;
        logError(logMethodName,message,e);
      }
catch (      LinkageError e) {
        String message=""String_Node_Str"" + endpointListener + ""String_Node_Str""+ endpointDescription+ ""String_Node_Str""+ matchingFilter;
        logError(logMethodName,message,e);
      }
catch (      AssertionError e) {
        String message=""String_Node_Str"" + endpointListener + ""String_Node_Str""+ endpointDescription+ ""String_Node_Str""+ matchingFilter;
        logError(logMethodName,message,e);
      }
    }
  }
);
  endpointListenerTracker=new ServiceTracker(context,EndpointListener.class.getName(),new ServiceTrackerCustomizer(){
    public Object addingService(    ServiceReference reference){
      return addingEndpointListener(reference);
    }
    public void modifiedService(    ServiceReference reference,    Object service){
    }
    public void removedService(    ServiceReference reference,    Object service){
    }
  }
);
  endpointListenerTracker.open();
  locatorListeners=new HashMap();
  localLocatorServiceListener=new LocatorServiceListener(this);
  locatorServiceTracker=new ServiceTracker(context,IDiscoveryLocator.class.getName(),new LocatorTrackerCustomizer());
  locatorServiceTracker.open();
  Object[] locators=locatorServiceTracker.getServices();
  if (locators != null) {
    for (int i=0; i < locators.length; i++) {
      openLocator((IDiscoveryLocator)locators[i]);
    }
  }
  bundleTrackerCustomizer=new EndpointDescriptionBundleTrackerCustomizer(context,localLocatorServiceListener);
  bundleTracker=new BundleTracker(context,Bundle.ACTIVE | Bundle.STARTING,bundleTrackerCustomizer);
  bundleTracker.open();
}",0.9983420834484664
94302,"private void setupDefaultContainerSelectors(){
  Properties props=new Properties();
  props.put(org.osgi.framework.Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  ServiceReference[] hostContainerSelectorRefs=null;
  try {
    hostContainerSelectorRefs=getContext().getServiceReferences(IHostContainerSelector.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
  }
  if (hostContainerSelectorRefs == null || hostContainerSelectorRefs.length == 0) {
    hostContainerSelector=new HostContainerSelector(hostDefaultConfigTypes,hostAutoCreateContainer);
    hostContainerSelectorRegistration=getContext().registerService(IHostContainerSelector.class.getName(),hostContainerSelector,props);
  }
  ServiceReference[] consumerContainerSelectorRefs=null;
  try {
    consumerContainerSelectorRefs=getContext().getServiceReferences(IConsumerContainerSelector.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
  }
  if (consumerContainerSelectorRefs == null || consumerContainerSelectorRefs.length == 0) {
    consumerContainerSelector=new ConsumerContainerSelector(consumerAutoCreateContainer);
    consumerContainerSelectorRegistration=getContext().registerService(IConsumerContainerSelector.class.getName(),consumerContainerSelector,props);
  }
}","private void setupDefaultContainerSelectors(){
  Properties props=new Properties();
  props.put(org.osgi.framework.Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  ServiceReference[] hostContainerSelectorRefs=null;
  try {
    hostContainerSelectorRefs=getContext().getServiceReferences(IHostContainerSelector.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
  }
  if (hostContainerSelectorRefs == null || hostContainerSelectorRefs.length == 0) {
    hostContainerSelector=new HostContainerSelector(hostDefaultConfigTypes,hostAutoCreateContainer);
    hostContainerSelectorRegistration=getContext().registerService(IHostContainerSelector.class.getName(),hostContainerSelector,(Dictionary)props);
  }
  ServiceReference[] consumerContainerSelectorRefs=null;
  try {
    consumerContainerSelectorRefs=getContext().getServiceReferences(IConsumerContainerSelector.class.getName(),null);
  }
 catch (  InvalidSyntaxException e) {
  }
  if (consumerContainerSelectorRefs == null || consumerContainerSelectorRefs.length == 0) {
    consumerContainerSelector=new ConsumerContainerSelector(consumerAutoCreateContainer);
    consumerContainerSelectorRegistration=getContext().registerService(IConsumerContainerSelector.class.getName(),consumerContainerSelector,(Dictionary)props);
  }
}",0.9907120743034056
94303,"/** 
 * @since 6.0
 */
@SuppressWarnings(""String_Node_Str"") public Object getProxy(ClassLoader cl,Class[] interfaces) throws ECFException {
  List classes=new ArrayList();
  for (int i=0; i < interfaces.length; i++) {
    classes.add(interfaces[i]);
    Class asyncClass=findAsyncRemoteServiceProxyClass(cl,interfaces[i]);
    if (asyncClass != null)     classes.add(asyncClass);
  }
  classes.add(IRemoteServiceProxy.class);
  try {
    return createProxy(cl,(Class[])classes.toArray(new Class[classes.size()]));
  }
 catch (  final Exception e) {
    ECFException except=new ECFException(""String_Node_Str"",e);
    logWarning(""String_Node_Str"",except);
    throw except;
  }
catch (  final NoClassDefFoundError e) {
    ECFException except=new ECFException(""String_Node_Str"",e);
    logWarning(""String_Node_Str"",except);
    throw except;
  }
}","/** 
 * @since 6.0
 */
@SuppressWarnings(""String_Node_Str"") public Object getProxy(ClassLoader cl,Class[] interfaces) throws ECFException {
  List classes=new ArrayList();
  for (int i=0; i < interfaces.length; i++) {
    classes.add(interfaces[i]);
    Class asyncClass=findAsyncRemoteServiceProxyClass(cl,interfaces[i]);
    if (asyncClass != null)     classes.add(asyncClass);
  }
  addRemoteServiceProxyToProxy(classes);
  try {
    return createProxy(cl,(Class[])classes.toArray(new Class[classes.size()]));
  }
 catch (  final Exception e) {
    ECFException except=new ECFException(""String_Node_Str"",e);
    logWarning(""String_Node_Str"",except);
    throw except;
  }
catch (  final NoClassDefFoundError e) {
    ECFException except=new ECFException(""String_Node_Str"",e);
    logWarning(""String_Node_Str"",except);
    throw except;
  }
}",0.9792776791000593
94304,"public void testGetService() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  assertNotNull(service);
  Thread.sleep(SLEEPTIME);
}","public void testGetService() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  assertNotNull(service);
  Thread.sleep(SLEEPTIME);
}",0.9085872576177284
94305,"public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  Activator.instance=this;
  Properties rsaProps=new Properties();
  rsaProps.put(RemoteServiceAdmin.SERVICE_PROP,new Boolean(true));
  remoteServiceAdminRegistration=context.registerService(org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.class.getName(),new ServiceFactory(){
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      return new RemoteServiceAdmin(bundle);
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
      if (service != null)       ((RemoteServiceAdmin)service).close();
    }
  }
,(Dictionary)rsaProps);
  final Properties properties=new Properties();
  properties.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  endpointDescriptionAdvertiser=new EndpointDescriptionAdvertiser(endpointDescriptionLocator);
  endpointDescriptionAdvertiserRegistration=getContext().registerService(IEndpointDescriptionAdvertiser.class.getName(),endpointDescriptionAdvertiser,(Dictionary)properties);
  endpointDescriptionLocator=new EndpointDescriptionLocator(context);
  basicTopologyManager=new BasicTopologyManager(context);
  basicTopologyManager.start();
  endpointDescriptionLocator.start();
}","public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  Activator.instance=this;
  Properties rsaProps=new Properties();
  rsaProps.put(RemoteServiceAdmin.SERVICE_PROP,new Boolean(true));
  remoteServiceAdminRegistration=context.registerService(org.osgi.service.remoteserviceadmin.RemoteServiceAdmin.class.getName(),new ServiceFactory(){
    public Object getService(    Bundle bundle,    ServiceRegistration registration){
      return new RemoteServiceAdmin(bundle);
    }
    public void ungetService(    Bundle bundle,    ServiceRegistration registration,    Object service){
      if (service != null)       ((RemoteServiceAdmin)service).close();
    }
  }
,(Dictionary)rsaProps);
  final Properties properties=new Properties();
  properties.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  endpointDescriptionLocator=new EndpointDescriptionLocator(context);
  endpointDescriptionAdvertiser=new EndpointDescriptionAdvertiser(endpointDescriptionLocator);
  endpointDescriptionAdvertiserRegistration=getContext().registerService(IEndpointDescriptionAdvertiser.class.getName(),endpointDescriptionAdvertiser,(Dictionary)properties);
  basicTopologyManager=new BasicTopologyManager(context);
  basicTopologyManager.start();
  endpointDescriptionLocator.start();
}",0.947209653092006
94306,"void handleService(IServiceInfo serviceInfo,boolean discovered){
  IServiceID serviceID=serviceInfo.getServiceID();
  if (matchServiceID(serviceID))   handleOSGiServiceEndpoint(serviceID,serviceInfo,true);
}","void handleService(IServiceInfo serviceInfo,boolean discovered){
  IServiceID serviceID=serviceInfo.getServiceID();
  if (matchServiceID(serviceID))   handleOSGiServiceEndpoint(serviceID,serviceInfo,discovered);
}",0.9666666666666668
94307,"public void unpublishService(RemoteServiceRegistrationImpl serviceReg){
  final String[] clazzes=(String[])serviceReg.getReference().getProperty(REMOTEOBJECTCLASS);
  final int size=clazzes.length;
  for (int i=0; i < size; i++) {
    final String clazz=clazzes[i];
    final ArrayList services=(ArrayList)publishedServicesByClass.get(clazz);
    services.remove(serviceReg);
  }
  allPublishedServices.remove(serviceReg);
}","public void unpublishService(RemoteServiceRegistrationImpl serviceReg){
  final String[] clazzes=(String[])serviceReg.getReference().getProperty(REMOTEOBJECTCLASS);
  final int size=clazzes.length;
  for (int i=0; i < size; i++) {
    final String clazz=clazzes[i];
    final ArrayList services=(ArrayList)publishedServicesByClass.get(clazz);
    if (services != null)     services.remove(serviceReg);
  }
  allPublishedServices.remove(serviceReg);
}",0.9702517162471396
94308,"/** 
 * Construct a properties object from the dictionary for this ServiceRegistration.
 * @param props The properties for this service.
 * @return A Properties object for this ServiceRegistration.
 */
protected Properties createProperties(Dictionary props){
  final Properties resultProps=new Properties(props);
  resultProps.setProperty(RemoteServiceRegistryImpl.REMOTEOBJECTCLASS,clazzes);
  resultProps.setProperty(RemoteServiceRegistryImpl.REMOTESERVICE_ID,new Long(getID().getContainerRelativeID()));
  final Object ranking=resultProps.getProperty(RemoteServiceRegistryImpl.REMOTESERVICE_RANKING);
  serviceranking=(ranking instanceof Integer) ? ((Integer)ranking).intValue() : 0;
  return (resultProps);
}","/** 
 * Construct a properties object from the dictionary for this ServiceRegistration.
 * @param props The properties for this service.
 * @return A Properties object for this ServiceRegistration.
 */
protected Properties createProperties(Dictionary props){
  final Properties resultProps=new Properties(props);
  resultProps.setProperty(RemoteServiceRegistryImpl.REMOTEOBJECTCLASS,clazzes);
  resultProps.setProperty(RemoteServiceRegistryImpl.REMOTESERVICE_ID,new Long(getID().getContainerRelativeID()));
  final Object ranking=props.get(RemoteServiceRegistryImpl.REMOTESERVICE_RANKING);
  serviceranking=(ranking instanceof Integer) ? ((Integer)ranking).intValue() : 0;
  return (resultProps);
}",0.9773049645390072
94309,"/** 
 * @since 3.2
 */
protected void localRegisterService(RemoteServiceRegistrationImpl registration){
  final Object localServiceRegistrationValue=registration.getProperty(org.eclipse.ecf.remoteservice.Constants.AUTOREGISTER_REMOTE_PROXY);
  if (localServiceRegistrationValue != null) {
    final BundleContext context=Activator.getDefault().getContext();
    if (context == null)     return;
    final RemoteServiceImpl remoteServiceImpl=new RemoteServiceImpl(this,registration);
    Object service;
    try {
      service=remoteServiceImpl.getProxy();
    }
 catch (    final ECFException e) {
      e.printStackTrace();
      log(""String_Node_Str"",e);
      return;
    }
    final Hashtable properties=new Hashtable();
    final String[] keys=registration.getPropertyKeys();
    for (int i=0; i < keys.length; i++) {
      final Object value=registration.getProperty(keys[i]);
      if (value != null) {
        properties.put(keys[i],value);
      }
    }
    final ID remoteContainerID=registration.getContainerID();
    properties.put(org.eclipse.ecf.remoteservice.Constants.SERVICE_CONTAINER_ID,remoteContainerID.getName());
    final ServiceRegistration serviceRegistration=context.registerService(registration.getClasses(),service,properties);
    addLocalServiceRegistration(remoteContainerID,serviceRegistration);
  }
}","/** 
 * @since 3.2
 */
protected void localRegisterService(RemoteServiceRegistrationImpl registration){
  final Object localServiceRegistrationValue=registration.getProperty(org.eclipse.ecf.remoteservice.Constants.AUTOREGISTER_REMOTE_PROXY);
  if (localServiceRegistrationValue != null) {
    final BundleContext context=Activator.getDefault().getContext();
    if (context == null)     return;
    final RemoteServiceImpl remoteServiceImpl=new RemoteServiceImpl(this,registration);
    Object service;
    try {
      service=remoteServiceImpl.getProxy();
    }
 catch (    final ECFException e) {
      e.printStackTrace();
      log(""String_Node_Str"",e);
      return;
    }
    final Hashtable properties=new Hashtable();
    final String[] keys=registration.getPropertyKeys();
    for (int i=0; i < keys.length; i++) {
      final Object value=registration.getProperty(keys[i]);
      if (value != null) {
        properties.put(keys[i],value);
      }
    }
    final ID remoteContainerID=registration.getContainerID();
    final ServiceRegistration serviceRegistration=context.registerService(registration.getClasses(),service,properties);
    addLocalServiceRegistration(remoteContainerID,serviceRegistration);
  }
}",0.8358092259577795
94310,"protected Properties createServiceDiscoveryProperties(){
  Properties props=new RemoteServiceProperties(serviceHostContainerType,serviceHostContainer);
  props.put(Constants.AUTOREGISTER_REMOTE_PROXY,""String_Node_Str"");
  return props;
}","protected Properties createServiceDiscoveryProperties(){
  Properties props=new Properties();
  props.put(Constants.SERVICE_CONTAINER_ID,serviceHostContainer.getID());
  props.put(Constants.SERVICE_CONTAINER_FACTORY_NAME,serviceHostContainerType);
  props.put(Constants.AUTOREGISTER_REMOTE_PROXY,""String_Node_Str"");
  return props;
}",0.6947368421052632
94311,"/** 
 * Construct a properties object from the dictionary for this ServiceRegistration.
 * @param props The properties for this service.
 * @return A Properties object for this ServiceRegistration.
 */
protected Properties createProperties(Dictionary props){
  final Properties resultProps=new Properties(props);
  resultProps.setProperty(RemoteServiceRegistryImpl.REMOTEOBJECTCLASS,clazzes);
  resultProps.setProperty(RemoteServiceRegistryImpl.REMOTESERVICE_ID,new Long(getID().getContainerRelativeID()));
  final Object ranking=props.get(RemoteServiceRegistryImpl.REMOTESERVICE_RANKING);
  serviceranking=(ranking instanceof Integer) ? ((Integer)ranking).intValue() : 0;
  return (resultProps);
}","/** 
 * Construct a properties object from the dictionary for this ServiceRegistration.
 * @param props The properties for this service.
 * @return A Properties object for this ServiceRegistration.
 */
protected Properties createProperties(Dictionary props){
  final Properties resultProps=new Properties(props);
  resultProps.setProperty(RemoteServiceRegistryImpl.REMOTEOBJECTCLASS,clazzes);
  resultProps.setProperty(RemoteServiceRegistryImpl.REMOTESERVICE_ID,new Long(getID().getContainerRelativeID()));
  final Object ranking=(props == null) ? null : props.get(RemoteServiceRegistryImpl.REMOTESERVICE_RANKING);
  serviceranking=(ranking instanceof Integer) ? ((Integer)ranking).intValue() : 0;
  return (resultProps);
}",0.9824067558057706
94312,"public RemoteServiceEndpointDescriptionImpl(IServiceInfo serviceInfo){
  super(((ServiceProperties)serviceInfo.getServiceProperties()).asProperties());
  this.serviceId=serviceInfo.getServiceID();
  IServiceProperties serviceProperties=serviceInfo.getServiceProperties();
  final byte[] endpointBytes=serviceProperties.getPropertyBytes(RemoteServicePublication.ENDPOINT_CONTAINERID);
  if (endpointBytes == null)   throw new IDCreateException(""String_Node_Str"");
  final String endpointStr=new String(endpointBytes);
  final String namespaceStr=serviceProperties.getPropertyString(RemoteServicePublication.ENDPOINT_CONTAINERID_NAMESPACE);
  if (namespaceStr == null) {
    throw new IDCreateException(""String_Node_Str"");
  }
  endpointId=IDFactory.getDefault().createID(namespaceStr,endpointStr);
  final byte[] targetBytes=serviceProperties.getPropertyBytes(RemoteServicePublication.TARGET_CONTAINERID);
  if (targetBytes != null) {
    final String targetStr=new String(targetBytes);
    String targetNamespaceStr=serviceProperties.getPropertyString(RemoteServicePublication.TARGET_CONTAINERID_NAMESPACE);
    if (targetNamespaceStr == null)     targetNamespaceStr=namespaceStr;
    targetId=IDFactory.getDefault().createID(targetNamespaceStr,targetStr);
  }
  URI serviceLocation=this.serviceId.getLocation();
  long rsId=this.getRemoteServiceId();
  hashCode=31 * hashCode + (int)(rsId ^ (rsId >>> 32));
  hashCode=31 * hashCode + serviceLocation.hashCode();
}","public RemoteServiceEndpointDescriptionImpl(IServiceInfo serviceInfo){
  super(((ServiceProperties)serviceInfo.getServiceProperties()).asProperties());
  this.serviceId=serviceInfo.getServiceID();
  IServiceProperties serviceProperties=serviceInfo.getServiceProperties();
  final byte[] endpointBytes=serviceProperties.getPropertyBytes(RemoteServicePublication.ENDPOINT_CONTAINERID);
  if (endpointBytes == null)   throw new IDCreateException(""String_Node_Str"");
  final String endpointStr=new String(endpointBytes);
  final String namespaceStr=serviceProperties.getPropertyString(RemoteServicePublication.ENDPOINT_CONTAINERID_NAMESPACE);
  if (namespaceStr == null) {
    throw new IDCreateException(""String_Node_Str"");
  }
  endpointId=IDFactory.getDefault().createID(namespaceStr,endpointStr);
  final byte[] targetBytes=serviceProperties.getPropertyBytes(RemoteServicePublication.TARGET_CONTAINERID);
  if (targetBytes != null) {
    final String targetStr=new String(targetBytes);
    String targetNamespaceStr=serviceProperties.getPropertyString(RemoteServicePublication.TARGET_CONTAINERID_NAMESPACE);
    if (targetNamespaceStr == null)     targetNamespaceStr=namespaceStr;
    targetId=IDFactory.getDefault().createID(targetNamespaceStr,targetStr);
  }
  URI serviceLocation=this.serviceId.getLocation();
  long rsId=this.getRemoteServiceId();
  hashCode=31 * hashCode + (int)(rsId ^ (rsId >>> 32));
  hashCode=31 * hashCode + serviceLocation.hashCode();
  hashCode=31 * hashCode + endpointId.hashCode();
}",0.9832102081934184
94313,"public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  RemoteServiceEndpointDescriptionImpl other=(RemoteServiceEndpointDescriptionImpl)obj;
  return this.serviceId.getLocation().equals(other.serviceId.getLocation()) && getRemoteServiceId() == other.getRemoteServiceId();
}","public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  RemoteServiceEndpointDescriptionImpl other=(RemoteServiceEndpointDescriptionImpl)obj;
  return this.serviceId.getLocation().equals(other.serviceId.getLocation()) && getRemoteServiceId() == other.getRemoteServiceId() && endpointId.equals(other.getEndpointAsID());
}",0.9423558897243108
94314,"protected void handleSharedObjectMessage(ContainerMessage mess) throws IOException {
  final ID fromID=mess.getFromContainerID();
  final ID toID=mess.getToContainerID();
  final ContainerMessage.SharedObjectMessage resp=(ContainerMessage.SharedObjectMessage)mess.getData();
  final ID sharedObjectID=resp.getFromSharedObjectID();
  SOWrapper sow=null;
  Serializable obj=null;
  debug(""String_Node_Str"" + fromID + ""String_Node_Str""+ toID+ ""String_Node_Str""+ sharedObjectID+ ""String_Node_Str"");
synchronized (getGroupMembershipLock()) {
    sow=getSharedObjectWrapper(sharedObjectID);
    if (sow != null) {
      try {
        obj=(Serializable)deserializeSharedObjectMessage((byte[])resp.getData());
        sow.deliverSharedObjectMessage(fromID,obj);
      }
 catch (      final ClassNotFoundException e) {
        Trace.catching(ProviderPlugin.PLUGIN_ID,ECFProviderDebugOptions.EXCEPTIONS_CATCHING,this.getClass(),""String_Node_Str"",e);
        printToSystemError(""String_Node_Str"" + sharedObjectID + ""String_Node_Str""+ fromID,e);
      }
    }
 else     handleUndeliveredSharedObjectMessage(resp);
    forward(fromID,toID,mess);
  }
  if (sow != null)   fireContainerEvent(new ContainerSharedObjectMessageReceivingEvent(getID(),fromID,sharedObjectID,obj));
}","protected void handleSharedObjectMessage(ContainerMessage mess) throws IOException {
  final ID fromID=mess.getFromContainerID();
  final ID toID=mess.getToContainerID();
  final ContainerMessage.SharedObjectMessage resp=(ContainerMessage.SharedObjectMessage)mess.getData();
  final ID sharedObjectID=resp.getFromSharedObjectID();
  SOWrapper sow=null;
  Serializable obj=null;
  debug(""String_Node_Str"" + fromID + ""String_Node_Str""+ toID+ ""String_Node_Str""+ sharedObjectID+ ""String_Node_Str"");
synchronized (getGroupMembershipLock()) {
    sow=getSharedObjectWrapper(sharedObjectID);
    if (sow != null) {
      try {
        obj=(Serializable)deserializeSharedObjectMessage((byte[])resp.getData());
        sow.deliverSharedObjectMessage(fromID,obj);
      }
 catch (      final ClassNotFoundException e) {
        String message=""String_Node_Str"" + sharedObjectID + ""String_Node_Str""+ fromID;
        ProviderPlugin.getDefault().log(new Status(IStatus.ERROR,ProviderPlugin.PLUGIN_ID,message,e));
        printToSystemError(message,e);
      }
catch (      final IOException e) {
        String message=""String_Node_Str"" + sharedObjectID + ""String_Node_Str""+ fromID;
        ProviderPlugin.getDefault().log(new Status(IStatus.ERROR,ProviderPlugin.PLUGIN_ID,message,e));
        printToSystemError(message,e);
      }
catch (      final NoClassDefFoundError e) {
        String message=""String_Node_Str"" + sharedObjectID + ""String_Node_Str""+ fromID;
        ProviderPlugin.getDefault().log(new Status(IStatus.ERROR,ProviderPlugin.PLUGIN_ID,message,e));
        printToSystemError(message,e);
      }
    }
 else     handleUndeliveredSharedObjectMessage(resp);
    forward(fromID,toID,mess);
  }
  if (sow != null)   fireContainerEvent(new ContainerSharedObjectMessageReceivingEvent(getID(),fromID,sharedObjectID,obj));
}",0.7062256809338522
94315,"Object doInvoke(final Object target) throws Exception {
  if (target == null)   throw new NoSuchMethodException(""String_Node_Str"");
  Method meth=null;
  if (clazz == null) {
    meth=findMethodRecursive(target.getClass());
  }
 else {
    meth=findMethod(getClass(target.getClass().getClassLoader(),clazz));
  }
  if (meth == null)   throw new NoSuchMethodException(getMethod());
  final Method toCall=meth;
  AccessController.doPrivileged(new PrivilegedExceptionAction(){
    public Object run() throws Exception {
      if (!toCall.isAccessible())       toCall.setAccessible(true);
      return null;
    }
  }
);
  return toCall.invoke(target,getParameters());
}","Object doInvoke(final Object target) throws Exception {
  if (target == null)   throw new NoSuchMethodException(""String_Node_Str"");
  Method meth=null;
  if (clazz == null) {
    meth=findMethodRecursive(target.getClass());
  }
 else {
    meth=findMethod(getClass(target.getClass().getClassLoader(),clazz));
  }
  if (meth == null) {
    Class[] someParameterTypes=getParameterTypes();
    throw new NoSuchMethodException(""String_Node_Str"" + getMethod() + ""String_Node_Str""+ ((someParameterTypes == null) ? ""String_Node_Str"" : Arrays.asList(someParameterTypes).toString())+ ""String_Node_Str"");
  }
  final Method toCall=meth;
  AccessController.doPrivileged(new PrivilegedExceptionAction(){
    public Object run() throws Exception {
      if (!toCall.isAccessible())       toCall.setAccessible(true);
      return null;
    }
  }
);
  return toCall.invoke(target,getParameters());
}",0.8567741935483871
94316,"/** 
 * Initialization method called by Activator.
 */
public void init(){
  log(LogService.LOG_DEBUG,""String_Node_Str"");
  discoTrackerCustomizer=new DSTTracker(context);
  discoTracker=new ServiceTracker(context,DiscoveredServiceTracker.class.getName(),discoTrackerCustomizer);
  discoTracker.open();
  spTracker=new ServiceTracker(context,ServicePublication.class.getName(),new ServicePublicationTracker(context,this));
  spTracker.open();
  bt=new BundleTracker(context,36,new BundleTrackerImpl(this));
  bt.open();
}","/** 
 * Initialization method called by Activator.
 */
public void init(){
  log(LogService.LOG_DEBUG,""String_Node_Str"");
  discoTrackerCustomizer=new DSTTracker(context);
  discoTracker=new ServiceTracker(context,DiscoveredServiceTracker.class.getName(),discoTrackerCustomizer);
  discoTracker.open();
  spTracker=new ServiceTracker(context,ServicePublication.class.getName(),new ServicePublicationTracker(context,this));
  spTracker.open();
  bt=new BundleTracker(context,Bundle.ACTIVE | Bundle.STARTING,new BundleTrackerImpl(this));
  bt.open();
}",0.969187675070028
94317,"/** 
 * @param bundle
 * @param result
 * @param tokenizer
 */
private void handleRemoteService(final Bundle bundle,Collection result,StringTokenizer tokenizer){
  String token=tokenizer.nextToken().trim();
  String path=token.substring(0,token.lastIndexOf(""String_Node_Str""));
  int start=path.indexOf(""String_Node_Str"");
  if (start >= 0) {
    int end=path.indexOf(""String_Node_Str"");
    String substring=path.substring(start + 2,end);
    String property=System.getProperty(substring);
    path=path.replaceAll(""String_Node_Str"" + substring + ""String_Node_Str"",property);
  }
  String files=token.substring(token.lastIndexOf(""String_Node_Str"") + 1,token.length());
  Enumeration enumeration=bundle.findEntries(path,files,false);
  if (enumeration == null) {
    File f=new File(path + File.separator + files);
    if (f.isFile() && f.exists()) {
      try {
        result.add(f.toURL());
      }
 catch (      MalformedURLException e) {
      }
    }
 else     if (f.isDirectory() && f.exists()) {
      addFilesToResult(result,f);
    }
 else     if (new File(path).isDirectory()) {
      File directory=new File(path);
      if (directory.exists() && files.equals(""String_Node_Str"")) {
        addFilesToResult(result,directory);
      }
    }
  }
 else {
    while (enumeration.hasMoreElements()) {
      result.add(enumeration.nextElement());
    }
  }
}","/** 
 * @param bundle
 * @param result
 * @param tokenizer
 */
private void handleRemoteService(final Bundle bundle,Collection result,StringTokenizer tokenizer){
  String token=tokenizer.nextToken().trim();
  int lastSlash=token.lastIndexOf(""String_Node_Str"");
  String path=(lastSlash <= 0) ? ""String_Node_Str"" : token.substring(0,lastSlash);
  int start=path.indexOf(""String_Node_Str"");
  if (start >= 0) {
    int end=path.indexOf(""String_Node_Str"");
    String substring=path.substring(start + 2,end);
    String property=System.getProperty(substring);
    path=path.replaceAll(""String_Node_Str"" + substring + ""String_Node_Str"",property);
  }
  String files=token.substring(lastSlash + 1,token.length());
  Enumeration enumeration=bundle.findEntries(path,files,false);
  if (enumeration == null) {
    File f=new File(path + File.separator + files);
    if (f.isFile() && f.exists()) {
      try {
        result.add(f.toURL());
      }
 catch (      MalformedURLException e) {
      }
    }
 else     if (f.isDirectory() && f.exists()) {
      addFilesToResult(result,f);
    }
 else     if (new File(path).isDirectory()) {
      File directory=new File(path);
      if (directory.exists() && files.equals(""String_Node_Str"")) {
        addFilesToResult(result,directory);
      }
    }
  }
 else {
    while (enumeration.hasMoreElements()) {
      result.add(enumeration.nextElement());
    }
  }
}",0.7668955547524394
94318,"public void stop(BundleContext ctxt) throws Exception {
  this.context=null;
  plugin=null;
}","public void stop(BundleContext ctxt) throws Exception {
  if (logServiceTracker != null) {
    logServiceTracker.close();
    logServiceTracker=null;
    logService=null;
  }
  this.context=null;
  plugin=null;
}",0.6098360655737705
94319,"public void log(IStatus status){
  LogService logService=getLogService();
  if (logService != null) {
    logService.log(LogHelper.getLogCode(status),LogHelper.getLogMessage(status),status.getException());
  }
}","public void log(IStatus status){
  LogService ls=getLogService();
  if (ls != null) {
    ls.log(LogHelper.getLogCode(status),LogHelper.getLogMessage(status),status.getException());
  }
}",0.9246231155778896
94320,"protected LogService getLogService(){
  if (logServiceTracker == null) {
    logServiceTracker=new ServiceTracker(this.context,LogService.class.getName(),null);
    logServiceTracker.open();
  }
  return (LogService)logServiceTracker.getService();
}","protected LogService getLogService(){
  if (logServiceTracker == null) {
    logServiceTracker=new ServiceTracker(this.context,LogService.class.getName(),null);
    logServiceTracker.open();
  }
  logService=(LogService)logServiceTracker.getService();
  if (logService == null)   logService=new SystemLogService(PLUGIN_ID);
  return logService;
}",0.6756302521008404
94321,"/** 
 * Add container factory extension point extensions
 * @param members to add
 */
protected void addContainerFactoryExtensions(IConfigurationElement[] members){
  final String method=""String_Node_Str"";
  Trace.entering(ECFPlugin.PLUGIN_ID,ECFDebugOptions.METHODS_ENTERING,ECFPlugin.class,method,members);
  for (int m=0; m < members.length; m++) {
    final IConfigurationElement member=members[m];
    final IExtension extension=member.getDeclaringExtension();
    Object exten=null;
    String name=null;
    try {
      exten=member.createExecutableExtension(CLASS_ATTRIBUTE);
      final String clazz=exten.getClass().getName();
      name=member.getAttribute(NAME_ATTRIBUTE);
      if (name == null) {
        name=clazz;
      }
      String description=member.getAttribute(DESCRIPTION_ATTRIBUTE);
      if (description == null) {
        description=""String_Node_Str"";
      }
      String s=member.getAttribute(SERVER_ATTRIBUTE);
      final boolean server=(s == null) ? false : Boolean.valueOf(s).booleanValue();
      s=member.getAttribute(HIDDEN_ATTRIBUTE);
      final boolean hidden=(s == null) ? false : Boolean.valueOf(s).booleanValue();
      final ContainerTypeDescription scd=new ContainerTypeDescription(name,(IContainerInstantiator)exten,description,server,hidden);
      final IContainerFactory factory=ContainerFactory.getDefault();
      if (factory.containsDescription(scd)) {
        throw new CoreException(new Status(IStatus.ERROR,getDefault().getBundle().getSymbolicName(),IStatus.ERROR,NLS.bind(Messages.ECFPlugin_Container_Name_Collision_Prefix,name,extension.getExtensionPointUniqueIdentifier()),null));
      }
      factory.addDescription(scd);
      Trace.trace(ECFPlugin.PLUGIN_ID,ECFDebugOptions.DEBUG,method + ""String_Node_Str"" + scd+ ""String_Node_Str""+ factory);
    }
 catch (    final CoreException e) {
      logException(e.getStatus(),method,e);
    }
catch (    final Exception e) {
      logException(new Status(IStatus.ERROR,getDefault().getBundle().getSymbolicName(),IStatus.ERROR,NLS.bind(Messages.ECFPlugin_Container_Name_Collision_Prefix,name,extension.getExtensionPointUniqueIdentifier()),null),method,e);
    }
  }
}","/** 
 * Add container factory extension point extensions
 * @param members to add
 */
protected void addContainerFactoryExtensions(IConfigurationElement[] members){
  final String method=""String_Node_Str"";
  Trace.entering(ECFPlugin.PLUGIN_ID,ECFDebugOptions.METHODS_ENTERING,ECFPlugin.class,method,members);
  final IContainerFactory factory=ContainerFactory.getDefault();
  for (int m=0; m < members.length; m++) {
    final IConfigurationElement member=members[m];
    final IExtension extension=member.getDeclaringExtension();
    Object exten=null;
    String name=null;
    try {
      name=member.getAttribute(NAME_ATTRIBUTE);
      if (name != null) {
        ContainerTypeDescription ctd=factory.getDescriptionByName(name);
        if (ctd != null) {
          log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,NLS.bind(""String_Node_Str"",name,member.getContributor().getName())));
          continue;
        }
      }
      exten=member.createExecutableExtension(CLASS_ATTRIBUTE);
      final String clazz=exten.getClass().getName();
      if (name == null) {
        name=clazz;
      }
      String description=member.getAttribute(DESCRIPTION_ATTRIBUTE);
      if (description == null) {
        description=""String_Node_Str"";
      }
      String s=member.getAttribute(SERVER_ATTRIBUTE);
      final boolean server=(s == null) ? false : Boolean.valueOf(s).booleanValue();
      s=member.getAttribute(HIDDEN_ATTRIBUTE);
      final boolean hidden=(s == null) ? false : Boolean.valueOf(s).booleanValue();
      final ContainerTypeDescription scd=new ContainerTypeDescription(name,(IContainerInstantiator)exten,description,server,hidden);
      if (factory.containsDescription(scd)) {
        log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,NLS.bind(""String_Node_Str"",scd,member.getContributor().getName())));
        continue;
      }
      factory.addDescription(scd);
      Trace.trace(ECFPlugin.PLUGIN_ID,ECFDebugOptions.DEBUG,method + ""String_Node_Str"" + scd+ ""String_Node_Str""+ factory);
    }
 catch (    final CoreException e) {
      logException(e.getStatus(),method,e);
    }
catch (    final Exception e) {
      logException(new Status(IStatus.ERROR,getDefault().getBundle().getSymbolicName(),IStatus.ERROR,NLS.bind(Messages.ECFPlugin_Container_Name_Collision_Prefix,name,extension.getExtensionPointUniqueIdentifier()),null),method,e);
    }
  }
}",0.6283828382838283
94322,"public void start(BundleContext ctxt) throws Exception {
  plugin=this;
  this.context=ctxt;
  this.distributionProvider=new DistributionProviderImpl();
  DiscoveredServiceTrackerImpl dstImpl=new DiscoveredServiceTrackerImpl(this.distributionProvider);
  this.discoveredServiceTrackerRegistration=this.context.registerService(DiscoveredServiceTracker.class.getName(),dstImpl,null);
  final Properties proxyContainerFinderProps=new Properties();
  proxyContainerFinderProps.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  this.proxyrsContainerFinderRegistration=this.context.registerService(IProxyContainerFinder.class.getName(),new DefaultProxyContainerFinder(autoCreateProxyContainer),proxyContainerFinderProps);
  final EventHookImpl hook=new EventHookImpl(distributionProvider);
  this.eventHookRegistration=this.context.registerService(EventHook.class.getName(),hook,null);
  final Properties hostContainerFinderProps=new Properties();
  hostContainerFinderProps.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  String[] defaultHostConfigTypes=(""String_Node_Str"".equals(defaultHostConfigType) || ""String_Node_Str"".equals(defaultHostConfigType)) ? null : new String[]{defaultHostConfigType};
  this.hostrsContainerFinderRegistration=this.context.registerService(IHostContainerFinder.class.getName(),new DefaultHostContainerFinder(autoCreateHostContainer,defaultHostConfigTypes),hostContainerFinderProps);
  try {
    final ServiceReference[] refs=this.context.getServiceReferences(null,""String_Node_Str"" + IDistributionConstants.SERVICE_EXPORTED_INTERFACES + ""String_Node_Str"");
    if (refs != null) {
      for (int i=0; i < refs.length; i++) {
        hook.handleRegisteredServiceEvent(refs[i],null);
      }
    }
  }
 catch (  InvalidSyntaxException e) {
  }
}","public void start(BundleContext ctxt) throws Exception {
  plugin=this;
  this.context=ctxt;
  this.distributionProvider=new DistributionProviderImpl();
  discoveredServiceTrackerImpl=new DiscoveredServiceTrackerImpl(this.distributionProvider);
  this.discoveredServiceTrackerRegistration=this.context.registerService(DiscoveredServiceTracker.class.getName(),discoveredServiceTrackerImpl,null);
  final Properties proxyContainerFinderProps=new Properties();
  proxyContainerFinderProps.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  this.proxyrsContainerFinderRegistration=this.context.registerService(IProxyContainerFinder.class.getName(),new DefaultProxyContainerFinder(autoCreateProxyContainer),proxyContainerFinderProps);
  final EventHookImpl hook=new EventHookImpl(distributionProvider);
  this.eventHookRegistration=this.context.registerService(EventHook.class.getName(),hook,null);
  final Properties hostContainerFinderProps=new Properties();
  hostContainerFinderProps.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  String[] defaultHostConfigTypes=(""String_Node_Str"".equals(defaultHostConfigType) || ""String_Node_Str"".equals(defaultHostConfigType)) ? null : new String[]{defaultHostConfigType};
  this.hostrsContainerFinderRegistration=this.context.registerService(IHostContainerFinder.class.getName(),new DefaultHostContainerFinder(autoCreateHostContainer,defaultHostConfigTypes),hostContainerFinderProps);
  try {
    final ServiceReference[] refs=this.context.getServiceReferences(null,""String_Node_Str"" + IDistributionConstants.SERVICE_EXPORTED_INTERFACES + ""String_Node_Str"");
    if (refs != null) {
      for (int i=0; i < refs.length; i++) {
        hook.handleRegisteredServiceEvent(refs[i],null);
      }
    }
  }
 catch (  InvalidSyntaxException e) {
  }
}",0.9062240663900416
94323,"public void stop(BundleContext ctxt) throws Exception {
  if (this.discoveredServiceTrackerRegistration != null) {
    this.discoveredServiceTrackerRegistration.unregister();
    this.discoveredServiceTrackerRegistration=null;
  }
  if (this.proxyrsContainerFinderRegistration != null) {
    this.proxyrsContainerFinderRegistration.unregister();
    this.proxyrsContainerFinderRegistration=null;
  }
  if (this.eventHookRegistration != null) {
    this.eventHookRegistration.unregister();
    this.eventHookRegistration=null;
  }
  if (this.hostrsContainerFinderRegistration != null) {
    this.hostrsContainerFinderRegistration.unregister();
    this.hostrsContainerFinderRegistration=null;
  }
  if (containerManagerTracker != null) {
    containerManagerTracker.close();
    containerManagerTracker=null;
  }
  if (logServiceTracker != null) {
    logServiceTracker.close();
    logServiceTracker=null;
    logService=null;
  }
  if (adapterManagerTracker != null) {
    adapterManagerTracker.close();
    adapterManagerTracker=null;
  }
  if (distributionProvider != null) {
    distributionProvider.dispose();
    distributionProvider=null;
  }
  if (proxyrsContainerFinder != null) {
    proxyrsContainerFinder.close();
    proxyrsContainerFinder=null;
  }
  if (hostRegistrationListenerServiceTracker != null) {
    hostRegistrationListenerServiceTracker.close();
    hostRegistrationListenerServiceTracker=null;
  }
  if (proxyDistributionListenerServiceTracker != null) {
    proxyDistributionListenerServiceTracker.close();
    proxyDistributionListenerServiceTracker=null;
  }
  if (idFactoryTracker != null) {
    idFactoryTracker.close();
    idFactoryTracker=null;
  }
synchronized (this) {
    this.context=null;
  }
  plugin=null;
}","public void stop(BundleContext ctxt) throws Exception {
  if (this.discoveredServiceTrackerRegistration != null) {
    this.discoveredServiceTrackerRegistration.unregister();
    this.discoveredServiceTrackerRegistration=null;
  }
  if (discoveredServiceTrackerImpl != null) {
    this.discoveredServiceTrackerImpl.close();
    this.discoveredServiceTrackerImpl=null;
  }
  if (this.proxyrsContainerFinderRegistration != null) {
    this.proxyrsContainerFinderRegistration.unregister();
    this.proxyrsContainerFinderRegistration=null;
  }
  if (this.eventHookRegistration != null) {
    this.eventHookRegistration.unregister();
    this.eventHookRegistration=null;
  }
  if (this.hostrsContainerFinderRegistration != null) {
    this.hostrsContainerFinderRegistration.unregister();
    this.hostrsContainerFinderRegistration=null;
  }
  if (containerManagerTracker != null) {
    containerManagerTracker.close();
    containerManagerTracker=null;
  }
  if (logServiceTracker != null) {
    logServiceTracker.close();
    logServiceTracker=null;
    logService=null;
  }
  if (adapterManagerTracker != null) {
    adapterManagerTracker.close();
    adapterManagerTracker=null;
  }
  if (distributionProvider != null) {
    distributionProvider.dispose();
    distributionProvider=null;
  }
  if (proxyrsContainerFinder != null) {
    proxyrsContainerFinder.close();
    proxyrsContainerFinder=null;
  }
  if (hostRegistrationListenerServiceTracker != null) {
    hostRegistrationListenerServiceTracker.close();
    hostRegistrationListenerServiceTracker=null;
  }
  if (proxyDistributionListenerServiceTracker != null) {
    proxyDistributionListenerServiceTracker.close();
    proxyDistributionListenerServiceTracker=null;
  }
  if (idFactoryTracker != null) {
    idFactoryTracker.close();
    idFactoryTracker=null;
  }
synchronized (this) {
    this.context=null;
  }
  plugin=null;
}",0.9612317844377234
94324,"public DiscoveredServiceTrackerImpl(DistributionProviderImpl dp){
  this.distributionProvider=dp;
  ThreadGroup eventGroup=new ThreadGroup(""String_Node_Str"");
  eventGroup.setDaemon(true);
  queue=new ListenerQueue(new EventManager(""String_Node_Str"",eventGroup));
  CopyOnWriteIdentityMap listeners=new CopyOnWriteIdentityMap();
  listeners.put(this,this);
  queue.queueListeners(listeners.entrySet(),new EventDispatcher(){
    public void dispatchEvent(    Object eventListener,    Object listenerObject,    int eventAction,    Object eventObject){
      RemoteServiceEndpointDescription rsEndpointDescription=((DiscoveredEndpointEvent)eventObject).getEndpointDescription();
      try {
        handleDiscoveredServiceAvailable(rsEndpointDescription);
      }
 catch (      Exception e) {
        logError(""String_Node_Str"",""String_Node_Str"" + rsEndpointDescription,e);
        throw new RuntimeException(""String_Node_Str"" + rsEndpointDescription,e);
      }
    }
  }
);
}","public DiscoveredServiceTrackerImpl(DistributionProviderImpl dp){
  this.distributionProvider=dp;
  ThreadGroup eventGroup=new ThreadGroup(""String_Node_Str"");
  eventGroup.setDaemon(true);
  eventManager=new EventManager(""String_Node_Str"",eventGroup);
  queue=new ListenerQueue(eventManager);
  CopyOnWriteIdentityMap listeners=new CopyOnWriteIdentityMap();
  listeners.put(this,this);
  queue.queueListeners(listeners.entrySet(),new EventDispatcher(){
    public void dispatchEvent(    Object eventListener,    Object listenerObject,    int eventAction,    Object eventObject){
      RemoteServiceEndpointDescription rsEndpointDescription=((DiscoveredEndpointEvent)eventObject).getEndpointDescription();
      try {
        handleDiscoveredServiceAvailable(rsEndpointDescription);
      }
 catch (      Exception e) {
        logError(""String_Node_Str"",""String_Node_Str"" + rsEndpointDescription,e);
        throw new RuntimeException(""String_Node_Str"" + rsEndpointDescription,e);
      }
    }
  }
);
}",0.96206373292868
94325,"protected NameValuePair[] toNameValuePairs(String uri,IRemoteCall call,IRemoteCallable callable) throws NotSerializableException {
  IRemoteCallParameter[] restParameters=prepareParameters(uri,call,callable);
  List nameValueList=new ArrayList();
  if (restParameters != null) {
    for (int i=0; i < restParameters.length; i++) {
      try {
        String parameterValue=null;
        Object o=restParameters[i].getValue();
        if (o instanceof String) {
          parameterValue=(String)o;
        }
 else         if (o != null) {
          parameterValue=o.toString();
        }
        if (parameterValue != null) {
          String parameterName=URLEncoder.encode(restParameters[i].getName(),""String_Node_Str"");
          parameterValue=URLEncoder.encode(parameterValue,""String_Node_Str"");
          nameValueList.add(new NameValuePair(parameterName,parameterValue));
        }
      }
 catch (      UnsupportedEncodingException e) {
        logException(""String_Node_Str"",e);
      }
    }
  }
  return (NameValuePair[])nameValueList.toArray(new NameValuePair[nameValueList.size()]);
}","protected NameValuePair[] toNameValuePairs(String uri,IRemoteCall call,IRemoteCallable callable) throws NotSerializableException {
  IRemoteCallParameter[] restParameters=prepareParameters(uri,call,callable);
  List nameValueList=new ArrayList();
  if (restParameters != null) {
    for (int i=0; i < restParameters.length; i++) {
      String parameterValue=null;
      Object o=restParameters[i].getValue();
      if (o instanceof String) {
        parameterValue=(String)o;
      }
 else       if (o != null) {
        parameterValue=o.toString();
      }
      if (parameterValue != null) {
        nameValueList.add(new NameValuePair(restParameters[i].getName(),parameterValue));
      }
    }
  }
  return (NameValuePair[])nameValueList.toArray(new NameValuePair[nameValueList.size()]);
}",0.7915343915343915
94326,"public void start(BundleContext context) throws Exception {
  this.context=context;
  final Properties cmProps=new Properties();
  cmProps.put(Constants.SERVICE_PID,NAME);
  context.registerService(ManagedServiceFactory.class.getName(),this,cmProps);
  final Properties props=new Properties();
  props.put(""String_Node_Str"",NAME);
  props.put(Constants.SERVICE_RANKING,new Integer(750));
  String[] clazzes=new String[]{IDiscoveryLocator.class.getName(),IDiscoveryAdvertiser.class.getName()};
  serviceRegistrations.put(null,context.registerService(clazzes,new ServiceFactory(){
    private volatile DnsSdDisocoveryLocator locator;
    public Object getService(    final Bundle bundle,    final ServiceRegistration registration){
      if (locator == null) {
        try {
          locator=new DnsSdDisocoveryLocator();
          locator.connect(null,null);
        }
 catch (        final ContainerConnectException e) {
          locator=null;
        }
      }
      return locator;
    }
    public void ungetService(    final Bundle bundle,    final ServiceRegistration registration,    final Object service){
    }
  }
,props));
}","public void start(BundleContext context) throws Exception {
  this.context=context;
  final Properties cmProps=new Properties();
  cmProps.put(Constants.SERVICE_PID,NAME);
  context.registerService(ManagedServiceFactory.class.getName(),this,cmProps);
  final Properties props=new Properties();
  props.put(""String_Node_Str"",NAME);
  props.put(Constants.SERVICE_RANKING,new Integer(750));
  String[] clazzes=new String[]{IDiscoveryLocator.class.getName(),IDiscoveryAdvertiser.class.getName()};
  serviceRegistrations.put(null,context.registerService(clazzes,new ServiceFactory(){
    private volatile DnsSdDiscoveryLocator locator;
    public Object getService(    final Bundle bundle,    final ServiceRegistration registration){
      if (locator == null) {
        try {
          locator=new DnsSdDiscoveryLocator();
          locator.connect(null,null);
        }
 catch (        final ContainerConnectException e) {
          locator=null;
        }
      }
      return locator;
    }
    public void ungetService(    final Bundle bundle,    final ServiceRegistration registration,    final Object service){
    }
  }
,props));
}",0.9991189427312775
94327,"public void updated(String pid,Dictionary properties) throws ConfigurationException {
  if (properties != null) {
    Properties props=new Properties();
    props.put(Constants.SERVICE_PID,pid);
    DnsSdDisocoveryLocator locator=new DnsSdDisocoveryLocator();
    DnsSdServiceTypeID targetID=new DnsSdServiceTypeID();
    try {
      final String[] searchPaths=(String[])properties.get(IDnsSdDiscoveryConstants.CA_SEARCH_PATH);
      if (searchPaths != null) {
        targetID.setSearchPath(searchPaths);
      }
      final String resolver=(String)properties.get(IDnsSdDiscoveryConstants.CA_RESOLVER);
      if (resolver != null) {
        locator.setResolver(resolver);
      }
      locator.connect(targetID,null);
      serviceRegistrations.put(pid,context.registerService(IDiscoveryLocator.class.getName(),locator,props));
    }
 catch (    ContainerConnectException e) {
      throw new ConfigurationException(""String_Node_Str"",""String_Node_Str"",e);
    }
catch (    ClassCastException cce) {
      throw new ConfigurationException(""String_Node_Str"",""String_Node_Str"",cce);
    }
  }
}","public void updated(String pid,Dictionary properties) throws ConfigurationException {
  if (properties != null) {
    Properties props=new Properties();
    props.put(Constants.SERVICE_PID,pid);
    DnsSdDiscoveryLocator locator=new DnsSdDiscoveryLocator();
    DnsSdServiceTypeID targetID=new DnsSdServiceTypeID();
    try {
      final String[] searchPaths=(String[])properties.get(IDnsSdDiscoveryConstants.CA_SEARCH_PATH);
      if (searchPaths != null) {
        targetID.setSearchPath(searchPaths);
      }
      final String resolver=(String)properties.get(IDnsSdDiscoveryConstants.CA_RESOLVER);
      if (resolver != null) {
        locator.setResolver(resolver);
      }
      locator.connect(targetID,null);
      serviceRegistrations.put(pid,context.registerService(IDiscoveryLocator.class.getName(),locator,props));
    }
 catch (    ContainerConnectException e) {
      throw new ConfigurationException(""String_Node_Str"",""String_Node_Str"",e);
    }
catch (    ClassCastException cce) {
      throw new ConfigurationException(""String_Node_Str"",""String_Node_Str"",cce);
    }
  }
}",0.999083409715857
94328,"public Object getService(final Bundle bundle,final ServiceRegistration registration){
  if (locator == null) {
    try {
      locator=new DnsSdDisocoveryLocator();
      locator.connect(null,null);
    }
 catch (    final ContainerConnectException e) {
      locator=null;
    }
  }
  return locator;
}","public Object getService(final Bundle bundle,final ServiceRegistration registration){
  if (locator == null) {
    try {
      locator=new DnsSdDiscoveryLocator();
      locator.connect(null,null);
    }
 catch (    final ContainerConnectException e) {
      locator=null;
    }
  }
  return locator;
}",0.9983471074380166
94329,"public IContainer createInstance(ContainerTypeDescription description,Object[] parameters) throws ContainerCreateException {
  return new DnsSdDisocoveryLocator();
}","public IContainer createInstance(ContainerTypeDescription description,Object[] parameters) throws ContainerCreateException {
  return new DnsSdDiscoveryLocator();
}",0.9969604863221884
94330,"public synchronized void disconnect(){
  disconnecting=true;
  if (isStarted()) {
    stop();
  }
  if (connection != null) {
    connection.removePacketListener(packetListener);
    connection.removeConnectionListener(connectionListener);
    connection.disconnect();
    isConnected=false;
    connection=null;
  }
}","public synchronized void disconnect(){
  disconnecting=true;
  if (isStarted()) {
    stop();
  }
  if (connection != null) {
    connection.removePacketListener(packetListener);
    connection.removeConnectionListener(connectionListener);
    connection.disconnect();
    connection=null;
synchronized (bindLock) {
      jid=null;
      isConnected=false;
    }
  }
}",0.8717201166180758
94331,"public synchronized Object connect(ID remote,Object data,int timeout) throws ECFException {
  if (connection != null)   throw new ECFException(""String_Node_Str"");
  if (timeout > 0)   SmackConfiguration.setPacketReplyTimeout(timeout);
  Roster.setDefaultSubscriptionMode(Roster.SubscriptionMode.manual);
  final XMPPID jabberURI=getXMPPID(remote);
  String username=jabberURI.getNodename();
  String hostname=jabberURI.getHostname();
  String hostnameOverride=null;
  int semiColonIdx=hostname.lastIndexOf(';');
  if (semiColonIdx != -1) {
    hostnameOverride=hostname.substring(semiColonIdx + 1);
    hostname=hostname.substring(0,semiColonIdx);
  }
  if (google && hostnameOverride == null) {
    hostnameOverride=GOOGLE_TALK_HOST;
  }
  final String serviceName=hostname;
  serverPort=jabberURI.getPort();
  serverResource=jabberURI.getResourceName();
  if (serverResource == null || serverResource.equals(XMPPID.PATH_DELIMITER)) {
    serverResource=getClientIdentifier();
    jabberURI.setResourceName(serverResource);
  }
  try {
    ConnectionConfiguration config;
    if (hostnameOverride != null) {
      config=new ConnectionConfiguration(hostnameOverride,XMPP_DEFAULT_PORT,serviceName);
    }
 else     if (serverPort == -1) {
      config=new ConnectionConfiguration(serviceName);
    }
 else {
      config=new ConnectionConfiguration(serviceName,serverPort);
    }
    config.setSendPresence(true);
    connection=new XMPPConnection(config);
    connection.connect();
    SASLAuthentication.supportSASLMechanism(""String_Node_Str"",0);
    if (google || GOOGLE_TALK_HOST.equals(hostnameOverride)) {
      username=username + ""String_Node_Str"" + serviceName;
    }
    connection.addPacketListener(packetListener,null);
    connection.addConnectionListener(connectionListener);
    connection.login(username,(String)data,serverResource);
    isConnected=true;
  }
 catch (  final XMPPException e) {
    throw new ContainerConnectException(""String_Node_Str"",e);
  }
  return null;
}","public synchronized Object connect(ID remote,Object data,int timeout) throws ECFException {
  if (connection != null)   throw new ECFException(""String_Node_Str"");
  if (timeout > 0)   SmackConfiguration.setPacketReplyTimeout(timeout);
  Roster.setDefaultSubscriptionMode(Roster.SubscriptionMode.manual);
  final XMPPID jabberURI=getXMPPID(remote);
  String username=jabberURI.getNodename();
  String hostname=jabberURI.getHostname();
  String hostnameOverride=null;
  int semiColonIdx=hostname.lastIndexOf(';');
  if (semiColonIdx != -1) {
    hostnameOverride=hostname.substring(semiColonIdx + 1);
    hostname=hostname.substring(0,semiColonIdx);
  }
  if (google && hostnameOverride == null) {
    hostnameOverride=GOOGLE_TALK_HOST;
  }
  final String serviceName=hostname;
  serverPort=jabberURI.getPort();
  serverResource=jabberURI.getResourceName();
  if (serverResource == null || serverResource.equals(XMPPID.PATH_DELIMITER)) {
    serverResource=getClientIdentifier();
    jabberURI.setResourceName(serverResource);
  }
  try {
    ConnectionConfiguration config;
    if (hostnameOverride != null) {
      config=new ConnectionConfiguration(hostnameOverride,XMPP_DEFAULT_PORT,serviceName);
    }
 else     if (serverPort == -1) {
      config=new ConnectionConfiguration(serviceName);
    }
 else {
      config=new ConnectionConfiguration(serviceName,serverPort);
    }
    config.setSendPresence(true);
    connection=new XMPPConnection(config);
    connection.connect();
    SASLAuthentication.supportSASLMechanism(""String_Node_Str"",0);
    if (google || GOOGLE_TALK_HOST.equals(hostnameOverride)) {
      username=username + ""String_Node_Str"" + serviceName;
    }
    connection.addPacketListener(packetListener,null);
    connection.addConnectionListener(connectionListener);
    connection.login(username,(String)data,serverResource);
    waitForBindResult();
  }
 catch (  final XMPPException e) {
    throw new ContainerConnectException(""String_Node_Str"",e);
  }
  return jid;
}",0.9894684052156468
94332,"protected void handlePacket(Packet arg0){
  try {
    final Object val=arg0.getProperty(OBJECT_PROPERTY_NAME);
    if (val != null) {
      handler.handleAsynchEvent(new ECFConnectionObjectPacketEvent(this,arg0,val));
    }
 else {
      handler.handleAsynchEvent(new ECFConnectionPacketEvent(this,arg0));
    }
  }
 catch (  final IOException e) {
    logException(""String_Node_Str"",e);
    try {
      disconnect();
    }
 catch (    final Exception e1) {
      logException(""String_Node_Str"",e1);
    }
  }
}","protected void handlePacket(Packet arg0){
  handleJidPacket(arg0);
  try {
    final Object val=arg0.getProperty(OBJECT_PROPERTY_NAME);
    if (val != null) {
      handler.handleAsynchEvent(new ECFConnectionObjectPacketEvent(this,arg0,val));
    }
 else {
      handler.handleAsynchEvent(new ECFConnectionPacketEvent(this,arg0));
    }
  }
 catch (  final IOException e) {
    logException(""String_Node_Str"",e);
    try {
      disconnect();
    }
 catch (    final Exception e1) {
      logException(""String_Node_Str"",e1);
    }
  }
}",0.9761222540592168
94333,"protected ID handleConnectResponse(ID originalTarget,Object serverData) throws Exception {
  if (originalTarget != null && !originalTarget.equals(getID())) {
    addNewRemoteMember(originalTarget,null);
    final ECFConnection conn=getECFConnection();
    accountManager.setConnection(conn.getXMPPConnection());
    chatRoomManager.setConnection(getConnectNamespace(),originalTarget,conn);
    searchManager.setConnection(getConnectNamespace(),originalTarget,conn);
    searchManager.setEnabled(!isGoogle(originalTarget));
    presenceHelper.setUser(new User(originalTarget));
    outgoingFileTransferContainerAdapter.setConnection(conn.getXMPPConnection());
    return originalTarget;
  }
 else   throw new ConnectException(Messages.XMPPContainer_EXCEPTION_INVALID_RESPONSE_FROM_SERVER);
}","protected ID handleConnectResponse(ID originalTarget,Object serverData) throws Exception {
  if (originalTarget != null && !originalTarget.equals(getID())) {
    resetTargetResource(originalTarget,serverData);
    addNewRemoteMember(originalTarget,null);
    final ECFConnection conn=getECFConnection();
    accountManager.setConnection(conn.getXMPPConnection());
    chatRoomManager.setConnection(getConnectNamespace(),originalTarget,conn);
    searchManager.setConnection(getConnectNamespace(),originalTarget,conn);
    searchManager.setEnabled(!isGoogle(originalTarget));
    presenceHelper.setUser(new User(originalTarget));
    outgoingFileTransferContainerAdapter.setConnection(conn.getXMPPConnection());
    return originalTarget;
  }
 else   throw new ConnectException(Messages.XMPPContainer_EXCEPTION_INVALID_RESPONSE_FROM_SERVER);
}",0.9681372549019608
94334,"public DnsSdDiscoveryServiceTest(String string,String scopes,String service,String protocol){
  super(ECF_DISCOVERY_DNSSD);
  setNamingAuthority(""String_Node_Str"");
  setScope(scopes);
  setServices(new String[]{service});
  setProtocol(protocol);
  setComparator(new DnsSdDiscoveryComparator());
  eventsToExpect=7;
}","public DnsSdDiscoveryServiceTest(String string,String scopes,String service,String protocol){
  super(ECF_DISCOVERY_DNSSD);
  setNamingAuthority(NAMING_AUTH);
  setScope(scopes);
  setServices(new String[]{service});
  setProtocol(protocol);
  setComparator(new DnsSdDiscoveryComparator());
  eventsToExpect=7;
}",0.9587301587301588
94335,"protected void setUp() throws Exception {
  super.setUp();
  final Properties props=new Properties();
  final URI uri=URI.create(""String_Node_Str"");
  Namespace namespace=discoveryLocator.getServicesNamespace();
  IServiceTypeID serviceTypeID=ServiceIDFactory.getDefault().createServiceTypeID(namespace,new String[]{""String_Node_Str""},new String[]{DOMAIN},new String[]{""String_Node_Str""},""String_Node_Str"");
  assertNotNull(serviceTypeID);
  final ServiceProperties serviceProperties=new ServiceProperties(props);
  serviceProperties.setPropertyString(""String_Node_Str"",""String_Node_Str"");
  serviceProperties.setPropertyString(""String_Node_Str"",""String_Node_Str"");
  serviceInfo=new ServiceInfo(uri,""String_Node_Str"",serviceTypeID,10,0,serviceProperties);
  assertNotNull(serviceInfo);
}","protected void setUp() throws Exception {
  super.setUp();
  final Properties props=new Properties();
  final URI uri=URI.create(SCHEME + ""String_Node_Str"" + DOMAIN_A_RECORD+ ""String_Node_Str""+ PORT+ PATH);
  Namespace namespace=discoveryLocator.getServicesNamespace();
  IServiceTypeID serviceTypeID=ServiceIDFactory.getDefault().createServiceTypeID(namespace,new String[]{SCHEME},new String[]{DOMAIN},new String[]{PROTO},NAMING_AUTH);
  assertNotNull(serviceTypeID);
  final ServiceProperties serviceProperties=new ServiceProperties(props);
  serviceProperties.setPropertyString(""String_Node_Str"",PATH);
  serviceProperties.setPropertyString(""String_Node_Str"",SCHEME);
  serviceInfo=new ServiceInfo(uri,DOMAIN_A_RECORD,serviceTypeID,10,0,serviceProperties);
  assertNotNull(serviceInfo);
}",0.8157061431285624
94336,"private List getServiceInfos(List srvQueryResult){
  List infos=new ArrayList();
  for (Iterator iterator=srvQueryResult.iterator(); iterator.hasNext(); ) {
    SRVRecord srvRecord=(SRVRecord)iterator.next();
    int priority=srvRecord.getPriority();
    int weight=srvRecord.getWeight();
    int port=srvRecord.getPort();
    Name target=srvRecord.getTarget();
    String host=target.toString();
    host=host.substring(0,host.length() - 1);
    IServiceTypeID aServiceTypeID=new DnsSdServiceTypeID(getConnectNamespace(),srvRecord.getName());
    Properties props=new Properties();
    Lookup txtQuery=new Lookup(srvRecord.getName(),Type.TXT);
    Record[] txtQueryResults=txtQuery.run();
    for (int l=0; l < txtQueryResults.length; l++) {
      TXTRecord txtResult=(TXTRecord)txtQueryResults[l];
      List strings=txtResult.getStrings();
      for (Iterator itr=strings.iterator(); itr.hasNext(); ) {
        String str=(String)itr.next();
        String[] split=str.split(""String_Node_Str"");
        props.put(split[0],split[1]);
      }
    }
    String path=props.getProperty(DNS_SD_PATH);
    String proto=props.getProperty(DNS_SD_PTCL) == null ? aServiceTypeID.getProtocols()[0] : props.getProperty(DNS_SD_PTCL);
    URI uri=URI.create(proto + ""String_Node_Str"" + host+ ""String_Node_Str""+ port+ (path == null ? ""String_Node_Str"" : path));
    IServiceInfo info=new ServiceInfo(uri,host,aServiceTypeID,priority,weight,new ServiceProperties(props));
    infos.add(info);
  }
  return infos;
}","private List getServiceInfos(List srvQueryResult){
  List infos=new ArrayList();
  for (Iterator iterator=srvQueryResult.iterator(); iterator.hasNext(); ) {
    SRVRecord srvRecord=(SRVRecord)iterator.next();
    int priority=srvRecord.getPriority();
    int weight=srvRecord.getWeight();
    int port=srvRecord.getPort();
    Name target=srvRecord.getTarget();
    String host=target.toString();
    host=host.substring(0,host.length() - 1);
    IServiceTypeID aServiceTypeID=new DnsSdServiceTypeID(getConnectNamespace(),srvRecord.getName());
    Properties props=new Properties();
    Lookup txtQuery=new Lookup(srvRecord.getName(),Type.TXT);
    txtQuery.setResolver(resolver);
    Record[] txtQueryResults=txtQuery.run();
    for (int l=0; l < txtQueryResults.length; l++) {
      TXTRecord txtResult=(TXTRecord)txtQueryResults[l];
      List strings=txtResult.getStrings();
      for (Iterator itr=strings.iterator(); itr.hasNext(); ) {
        String str=(String)itr.next();
        String[] split=str.split(""String_Node_Str"");
        props.put(split[0],split[1]);
      }
    }
    String path=props.getProperty(DNS_SD_PATH);
    String proto=props.getProperty(DNS_SD_PTCL) == null ? aServiceTypeID.getProtocols()[0] : props.getProperty(DNS_SD_PTCL);
    URI uri=URI.create(proto + ""String_Node_Str"" + host+ ""String_Node_Str""+ port+ (path == null ? ""String_Node_Str"" : path));
    IServiceInfo info=new ServiceInfo(uri,host,aServiceTypeID,priority,weight,new ServiceProperties(props));
    infos.add(info);
  }
  return infos;
}",0.9881422924901184
94337,"/** 
 * This always returns the service type found for our local domain Use org.eclipse.ecf.provider.dnssrv.DnsSrvDisocoveryLocator.getServices(IServiceTypeID) with a wildcard query instead.
 * @see org.eclipse.ecf.discovery.IDiscoveryLocator#getServiceTypes()
 */
public IServiceTypeID[] getServiceTypes(){
  List result=new ArrayList();
  DnsSdServiceTypeID serviceTypeId=(DnsSdServiceTypeID)targetID;
  Lookup[] queries=serviceTypeId.getInternalQueries();
  for (int i=0; i < queries.length; i++) {
    Lookup query=queries[i];
    Record[] queryResult=query.run();
    int length=queryResult == null ? 0 : queryResult.length;
    for (int j=0; j < length; j++) {
      Record record=queryResult[j];
      if (record instanceof PTRRecord) {
        PTRRecord ptrRecord=(PTRRecord)record;
        result.add(new DnsSdServiceTypeID(getServicesNamespace(),ptrRecord.getTarget()));
      }
 else       if (record instanceof SRVRecord) {
        SRVRecord srvRecord=(SRVRecord)record;
        result.add(new DnsSdServiceTypeID(getServicesNamespace(),srvRecord.getName()));
      }
    }
  }
  return (IServiceTypeID[])result.toArray(new IServiceTypeID[result.size()]);
}","/** 
 * This always returns the service type found for our local domain Use org.eclipse.ecf.provider.dnssrv.DnsSrvDisocoveryLocator.getServices(IServiceTypeID) with a wildcard query instead.
 * @see org.eclipse.ecf.discovery.IDiscoveryLocator#getServiceTypes()
 */
public IServiceTypeID[] getServiceTypes(){
  List result=new ArrayList();
  DnsSdServiceTypeID serviceTypeId=(DnsSdServiceTypeID)targetID;
  Lookup[] queries=serviceTypeId.getInternalQueries();
  for (int i=0; i < queries.length; i++) {
    Lookup query=queries[i];
    query.setResolver(resolver);
    Record[] queryResult=query.run();
    int length=queryResult == null ? 0 : queryResult.length;
    for (int j=0; j < length; j++) {
      Record record=queryResult[j];
      if (record instanceof PTRRecord) {
        PTRRecord ptrRecord=(PTRRecord)record;
        result.add(new DnsSdServiceTypeID(getServicesNamespace(),ptrRecord.getTarget()));
      }
 else       if (record instanceof SRVRecord) {
        SRVRecord srvRecord=(SRVRecord)record;
        result.add(new DnsSdServiceTypeID(getServicesNamespace(),srvRecord.getName()));
      }
    }
  }
  return (IServiceTypeID[])result.toArray(new IServiceTypeID[result.size()]);
}",0.9860700717602364
94338,"public void connect(ID aTargetID,IConnectContext connectContext) throws ContainerConnectException {
  if (targetID != null || getConfig() == null) {
    throw new ContainerConnectException(""String_Node_Str"");
  }
  if (aTargetID == null || !(aTargetID instanceof DnsSdServiceTypeID)) {
    ResolverConfig config=new ResolverConfig();
    Name[] searchPaths=config.searchPath();
    if (searchPaths.length >= 0) {
      targetID=new DnsSdServiceTypeID();
      targetID.setScopes(searchPaths);
    }
 else {
      throw new ContainerConnectException(""String_Node_Str"");
    }
  }
 else {
    targetID=(DnsSdServiceTypeID)aTargetID;
  }
  fireContainerEvent(new ContainerConnectingEvent(this.getID(),targetID,connectContext));
  fireContainerEvent(new ContainerConnectedEvent(this.getID(),targetID));
}","public void connect(ID aTargetID,IConnectContext connectContext) throws ContainerConnectException {
  if (targetID != null || getConfig() == null) {
    throw new ContainerConnectException(""String_Node_Str"");
  }
  if (aTargetID == null || !(aTargetID instanceof DnsSdServiceTypeID)) {
    ResolverConfig config=new ResolverConfig();
    Name[] searchPaths=config.searchPath();
    if (searchPaths.length >= 0) {
      targetID=new DnsSdServiceTypeID();
      targetID.setScopes(searchPaths);
    }
 else {
      throw new ContainerConnectException(""String_Node_Str"");
    }
  }
 else {
    targetID=(DnsSdServiceTypeID)aTargetID;
  }
  try {
    resolver=new SimpleResolver();
  }
 catch (  UnknownHostException e) {
    throw new ContainerConnectException(e);
  }
  fireContainerEvent(new ContainerConnectingEvent(this.getID(),targetID,connectContext));
  fireContainerEvent(new ContainerConnectedEvent(this.getID(),targetID));
}",0.924321201617562
94339,"private List getSRVRecords(Lookup[] queries){
  List srvRecords=new ArrayList();
  for (int i=0; i < queries.length; i++) {
    Lookup query=queries[i];
    Record[] queryResult=query.run();
    int length=queryResult == null ? 0 : queryResult.length;
    for (int j=0; j < length; j++) {
      Record[] srvQueryResult=null;
      Record record=queryResult[j];
      if (record instanceof PTRRecord) {
        PTRRecord ptrRecord=(PTRRecord)record;
        Name target=ptrRecord.getTarget();
        Lookup srvQuery=new Lookup(target,Type.SRV);
        srvQueryResult=srvQuery.run();
      }
 else       if (record instanceof SRVRecord) {
        srvQueryResult=new SRVRecord[]{(SRVRecord)record};
      }
      srvRecords.addAll(Arrays.asList(srvQueryResult));
    }
  }
  return srvRecords;
}","private List getSRVRecords(Lookup[] queries){
  List srvRecords=new ArrayList();
  for (int i=0; i < queries.length; i++) {
    Lookup query=queries[i];
    query.setResolver(resolver);
    Record[] queryResult=query.run();
    int length=queryResult == null ? 0 : queryResult.length;
    for (int j=0; j < length; j++) {
      Record[] srvQueryResult=null;
      Record record=queryResult[j];
      if (record instanceof PTRRecord) {
        PTRRecord ptrRecord=(PTRRecord)record;
        Name target=ptrRecord.getTarget();
        Lookup srvQuery=new Lookup(target,Type.SRV);
        srvQuery.setResolver(resolver);
        srvQueryResult=srvQuery.run();
      }
 else       if (record instanceof SRVRecord) {
        srvQueryResult=new SRVRecord[]{(SRVRecord)record};
      }
      srvRecords.addAll(Arrays.asList(srvQueryResult));
    }
  }
  return srvRecords;
}",0.9560505719446116
94340,"public void setScopes(Name[] searchPaths){
  String[] s=new String[searchPaths.length];
  for (int i=0; i < searchPaths.length; i++) {
    s[i]=searchPaths[i].toString();
  }
  scopes=s;
}","public void setScopes(String[] searchPaths){
  scopes=searchPaths;
}",0.4609375
94341,"protected InputStream wrapTransferReadInputStream(InputStream inputStream,IProgressMonitor monitor){
  return new PollingInputStream(remoteFileContents,getRetryAttempts(),monitor);
}","protected InputStream wrapTransferReadInputStream(InputStream inputStream,IProgressMonitor monitor){
  return new PollingInputStream(remoteFileContents,getRetryAttempts(),monitor,readTimeoutMessage,closeTimeoutMessage);
}",0.9032258064516128
94342,"private void logError(String message,IOException e){
  Activator.getDefault().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,message,e));
}","private void logError(String message,IOException e){
  Activator a=Activator.getDefault();
  if (a != null)   a.log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,message,e));
}",0.9011627906976744
94343,"/** 
 * Wraps the underlying stream's method.
 * @param buffer - the buffer into which the data is read.
 * @param off - the start offset of the data.
 * @param len - the maximum number of bytes read.
 * @return the total number of bytes read into the buffer, or -1 if there isno more data because the end of the stream has been reached.
 * @throws OperationCanceledException if the progress monitor is canceled
 * @throws InterruptedIOException if the underlying operation times out numAttempts times and no data was received, bytesTransferred will be zero
 * @throws IOException if an i/o error occurs
 */
public int read(byte[] buffer,int off,int len) throws IOException {
  int attempts=0;
  for (; ; ) {
    if (checkCancellation())     throw new OperationCanceledException();
    try {
      return in.read(buffer,off,len);
    }
 catch (    InterruptedIOException e) {
      if (e.bytesTransferred != 0)       return e.bytesTransferred;
      if (++attempts == numAttempts)       throw new InterruptedIOException(""String_Node_Str"");
    }
  }
}","/** 
 * Wraps the underlying stream's method.
 * @param buffer - the buffer into which the data is read.
 * @param off - the start offset of the data.
 * @param len - the maximum number of bytes read.
 * @return the total number of bytes read into the buffer, or -1 if there isno more data because the end of the stream has been reached.
 * @throws OperationCanceledException if the progress monitor is canceled
 * @throws InterruptedIOException if the underlying operation times out numAttempts times and no data was received, bytesTransferred will be zero
 * @throws IOException if an i/o error occurs
 */
public int read(byte[] buffer,int off,int len) throws IOException {
  int attempts=0;
  for (; ; ) {
    if (checkCancellation())     throw new OperationCanceledException();
    try {
      return in.read(buffer,off,len);
    }
 catch (    InterruptedIOException e) {
      if (e.bytesTransferred != 0)       return e.bytesTransferred;
      if (++attempts == numAttempts)       throw new InterruptedIOException(readTimeoutMessage);
    }
  }
}",0.9843081312410842
94344,"/** 
 * Creates a new polling input stream.
 * @param in the underlying input stream
 * @param numAttempts the number of attempts before issuing an InterruptedIOException, if 0, retries indefinitely until canceled
 * @param monitor the progress monitor to be polled for cancellation
 */
public PollingInputStream(InputStream in,int numAttempts,IProgressMonitor monitor){
  super(in);
  this.numAttempts=numAttempts;
  this.monitor=monitor;
  this.cancellable=true;
}","/** 
 * Creates a new polling input stream.
 * @param in the underlying input stream
 * @param numAttempts the number of attempts before issuing an InterruptedIOException, if 0, retries indefinitely until canceled
 * @param monitor the progress monitor to be polled for cancellation
 * @param readTimeoutMessage message to go with InteruptedIOException if read timeout
 * @param closeTimeoutMessage message to go with InteruptedIOException if close timeout
 * @since 3.1
 */
public PollingInputStream(InputStream in,int numAttempts,IProgressMonitor monitor,String readTimeoutMessage,String closeTimeoutMessage){
  super(in);
  this.numAttempts=numAttempts;
  this.monitor=monitor;
  this.cancellable=true;
  if (readTimeoutMessage != null)   this.readTimeoutMessage=readTimeoutMessage;
  if (closeTimeoutMessage != null)   this.closeTimeoutMessage=closeTimeoutMessage;
}",0.6976047904191617
94345,"/** 
 * Wraps the underlying stream's method.
 * @param count - the number of bytes to be skipped.
 * @return the actual number of bytes skipped.
 * @throws OperationCanceledException if the progress monitor is canceled
 * @throws InterruptedIOException if the underlying operation times out numAttempts times and no data was received, bytesTransferred will be zero
 * @throws IOException if an i/o error occurs
 */
public long skip(long count) throws IOException {
  int attempts=0;
  for (; ; ) {
    if (checkCancellation())     throw new OperationCanceledException();
    try {
      return in.skip(count);
    }
 catch (    InterruptedIOException e) {
      if (e.bytesTransferred != 0)       return e.bytesTransferred;
      if (++attempts == numAttempts)       throw new InterruptedIOException(""String_Node_Str"");
    }
  }
}","/** 
 * Wraps the underlying stream's method.
 * @param count - the number of bytes to be skipped.
 * @return the actual number of bytes skipped.
 * @throws OperationCanceledException if the progress monitor is canceled
 * @throws InterruptedIOException if the underlying operation times out numAttempts times and no data was received, bytesTransferred will be zero
 * @throws IOException if an i/o error occurs
 */
public long skip(long count) throws IOException {
  int attempts=0;
  for (; ; ) {
    if (checkCancellation())     throw new OperationCanceledException();
    try {
      return in.skip(count);
    }
 catch (    InterruptedIOException e) {
      if (e.bytesTransferred != 0)       return e.bytesTransferred;
      if (++attempts == numAttempts)       throw new InterruptedIOException(readTimeoutMessage);
    }
  }
}",0.9801801801801802
94346,"/** 
 * Wraps the underlying stream's method. It may be important to wait for an input stream to be closed because it holds an implicit lock on a system resource (such as a file) while it is open. Closing a stream may take time if the underlying stream is still servicing a previous request.
 * @throws OperationCanceledException if the progress monitor is canceled
 * @throws InterruptedIOException if the underlying operation times out numAttempts times
 */
public void close() throws InterruptedIOException {
  int attempts=0;
  try {
    readPendingInput();
  }
 catch (  IOException e) {
    logError(e.getMessage(),e);
  }
 finally {
    boolean stop=false;
    while (!stop) {
      try {
        if (in != null)         in.close();
        stop=true;
      }
 catch (      InterruptedIOException e) {
        if (checkCancellation())         throw new OperationCanceledException();
        if (++attempts == numAttempts)         throw new InterruptedIOException(""String_Node_Str"");
      }
catch (      IOException e) {
      }
    }
  }
}","/** 
 * Wraps the underlying stream's method. It may be important to wait for an input stream to be closed because it holds an implicit lock on a system resource (such as a file) while it is open. Closing a stream may take time if the underlying stream is still servicing a previous request.
 * @throws OperationCanceledException if the progress monitor is canceled
 * @throws InterruptedIOException if the underlying operation times out numAttempts times
 */
public void close() throws InterruptedIOException {
  int attempts=0;
  try {
    readPendingInput();
  }
 catch (  IOException e) {
    logError(e.getMessage(),e);
  }
 finally {
    boolean stop=false;
    while (!stop) {
      try {
        if (in != null)         in.close();
        stop=true;
      }
 catch (      InterruptedIOException e) {
        if (checkCancellation())         throw new OperationCanceledException();
        if (++attempts == numAttempts)         throw new InterruptedIOException(closeTimeoutMessage);
      }
catch (      IOException e) {
      }
    }
  }
}",0.9837786259541984
94347,"/** 
 * @since 3.3 for preventing issues like bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=304427
 */
protected void connectToRemoteServiceTarget(ID targetID) throws ContainerConnectException {
synchronized (rsConnectLock) {
    ISharedObjectContext context=getContext();
    if (context == null)     throw new ContainerConnectException(""String_Node_Str"");
    ID connectedID=context.getConnectedID();
    if (connectedID != null) {
      if (connectedID.equals(targetID))       return;
      throw new ContainerConnectException(""String_Node_Str"" + connectedID);
    }
    context.connect(targetID,connectContext);
    waitForConnectedEvent(context,targetID);
  }
}","/** 
 * @since 3.3 for preventing issues like bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=304427
 */
protected void connectToRemoteServiceTarget(ID targetID) throws ContainerConnectException {
synchronized (rsConnectLock) {
    ISharedObjectContext context=getContext();
    if (context == null)     throw new ContainerConnectException(""String_Node_Str"");
    ID connectedID=context.getConnectedID();
    if (connectedID != null)     return;
    context.connect(targetID,connectContext);
    waitForConnectedEvent(context,targetID);
  }
}",0.8962108731466227
94348,"protected void sendUnregister(RemoteServiceRegistrationImpl serviceRegistration){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",new Object[]{serviceRegistration});
synchronized (localRegistry) {
    localRegistry.unpublishService(serviceRegistration);
    final ID containerID=serviceRegistration.getContainerID();
    final Long serviceId=new Long(serviceRegistration.getServiceId());
    try {
      this.sendSharedObjectMsgTo(null,SharedObjectMsg.createMsg(UNREGISTER,new Object[]{containerID,serviceId}));
    }
 catch (    final IOException e) {
      log(UNREGISTER_ERROR_CODE,UNREGISTER_ERROR_MESSAGE,e);
    }
  }
  fireRemoteServiceListeners(createUnregisteredEvent(serviceRegistration));
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}","protected void sendUnregister(RemoteServiceRegistrationImpl serviceRegistration){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",new Object[]{serviceRegistration});
synchronized (localRegistry) {
    localRegistry.unpublishService(serviceRegistration);
    final ID containerID=serviceRegistration.getContainerID();
    final Long serviceId=new Long(serviceRegistration.getServiceId());
    ID[] targetIds=getTargetsFromProperties(serviceRegistration.properties);
    if (targetIds == null) {
      try {
        this.sendSharedObjectMsgTo(null,SharedObjectMsg.createMsg(UNREGISTER,new Object[]{containerID,serviceId}));
      }
 catch (      final IOException e) {
        log(UNREGISTER_ERROR_CODE,UNREGISTER_ERROR_MESSAGE,e);
      }
    }
 else     for (int i=0; i < targetIds.length; i++) {
      try {
        this.sendSharedObjectMsgTo(targetIds[i],SharedObjectMsg.createMsg(UNREGISTER,new Object[]{containerID,serviceId}));
      }
 catch (      final IOException e) {
        log(UNREGISTER_ERROR_CODE,UNREGISTER_ERROR_MESSAGE,e);
      }
    }
  }
  fireRemoteServiceListeners(createUnregisteredEvent(serviceRegistration));
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}",0.8051948051948052
94349,"protected ID[] getTargetsFromProperties(Dictionary properties){
  return null;
}","protected ID[] getTargetsFromProperties(Dictionary properties){
  if (properties == null)   return null;
  List results=new ArrayList();
  Object o=properties.get(Constants.SERVICE_REGISTRATION_TARGETS);
  if (o != null) {
    if (o instanceof ID)     results.add(o);
    if (o instanceof ID[]) {
      ID[] targets=(ID[])o;
      for (int i=0; i < targets.length; i++)       results.add(targets[i]);
    }
  }
  if (results.size() == 0)   return null;
  return (ID[])results.toArray(new ID[]{});
}",0.231833910034602
94350,"protected IRemoteServiceReference[] getRemoteServiceReferences(IRemoteServiceContainerAdapter adapter,String clazz,String filter){
  try {
    return adapter.getRemoteServiceReferences(new ID[]{getClient(0).getConnectedID()},clazz,filter);
  }
 catch (  final InvalidSyntaxException e) {
    fail(""String_Node_Str"");
  }
  return null;
}","protected IRemoteServiceReference[] getRemoteServiceReferences(IRemoteServiceContainerAdapter adapter,String clazz,String filter){
  try {
    return adapter.getRemoteServiceReferences((ID[])null,clazz,filter);
  }
 catch (  final InvalidSyntaxException e) {
    fail(""String_Node_Str"");
  }
  return null;
}",0.9364341085271318
94351,"protected IServiceTypeID createServiceTypeID(Map servicePublicationProperties,Namespace aNamespace) throws IDCreateException {
  String namingAuthority=getPropertyWithDefault(servicePublicationProperties,RemoteServicePublication.NAMING_AUTHORITY,IServiceTypeID.DEFAULT_NA);
  String scope=getPropertyWithDefault(servicePublicationProperties,RemoteServicePublication.SCOPE,IServiceTypeID.DEFAULT_SCOPE[0]);
  String protocol=getPropertyWithDefault(servicePublicationProperties,RemoteServicePublication.SERVICE_PROTOCOL,IServiceTypeID.DEFAULT_PROTO[0]);
  return ServiceIDFactory.getDefault().createServiceTypeID(aNamespace,new String[]{RemoteServicePublication.SERVICE_TYPE},new String[]{scope},new String[]{protocol},namingAuthority);
}","protected IServiceTypeID createServiceTypeID(Map servicePublicationProperties,Namespace aNamespace) throws IDCreateException {
  String namingAuthority=getPropertyWithDefault(servicePublicationProperties,RemoteServicePublication.NAMING_AUTHORITY,IServiceTypeID.DEFAULT_NA);
  String[] scopes=getStringArrayPropertyWithDefault(servicePublicationProperties,RemoteServicePublication.SCOPE,IServiceTypeID.DEFAULT_SCOPE[0]);
  String[] protocols=getStringArrayPropertyWithDefault(servicePublicationProperties,RemoteServicePublication.SERVICE_PROTOCOL,IServiceTypeID.DEFAULT_PROTO[0]);
  return ServiceIDFactory.getDefault().createServiceTypeID(aNamespace,new String[]{RemoteServicePublication.SERVICE_TYPE},scopes,protocols,namingAuthority);
}",0.921302578018996
94352,"/** 
 * @param reference
 */
private void handleServicePublication(ServiceReference reference){
  Collection svcInterfaces=ServicePropertyUtils.getCollectionProperty(reference,ServicePublication.SERVICE_INTERFACE_NAME);
  if (svcInterfaces == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  IServiceProperties discoveryServiceProperties=new ServiceProperties();
  discoveryServiceProperties.setPropertyString(ServicePublication.SERVICE_INTERFACE_NAME,ServicePropertyUtils.createStringFromCollection(svcInterfaces));
  Collection configTypes=ServicePropertyUtils.getCollectionProperty(reference,RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS);
  if (configTypes != null) {
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS,ServicePropertyUtils.createStringFromCollection(configTypes));
  }
  Collection serviceIntents=ServicePropertyUtils.getCollectionProperty(reference,RemoteServicePublication.ENDPOINT_SERVICE_INTENTS);
  if (serviceIntents != null) {
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_SERVICE_INTENTS,ServicePropertyUtils.createStringFromCollection(serviceIntents));
  }
  Map servicePublicationServiceProperties=ServicePropertyUtils.getMapProperty(reference,ServicePublication.SERVICE_PROPERTIES);
  if (servicePublicationServiceProperties != null)   addPropertiesToDiscoveryServiceProperties(discoveryServiceProperties,servicePublicationServiceProperties);
  ID endpointContainerID=(ID)reference.getProperty(RemoteServicePublication.ENDPOINT_CONTAINERID);
  if (endpointContainerID == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.ENDPOINT_CONTAINERID,endpointContainerID.toExternalForm().getBytes());
  String endpointNamespace=endpointContainerID.getNamespace().getName();
  discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_CONTAINERID_NAMESPACE,endpointNamespace);
  ID targetContainerID=(ID)reference.getProperty(RemoteServicePublication.TARGET_CONTAINERID);
  if (targetContainerID != null) {
    discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.TARGET_CONTAINERID,targetContainerID.toExternalForm().getBytes());
    String targetNamespace=targetContainerID.getNamespace().getName();
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.TARGET_CONTAINERID_NAMESPACE,targetNamespace);
  }
  String rsnamespace=ServicePropertyUtils.getStringProperty(reference,Constants.SERVICE_NAMESPACE);
  if (rsnamespace != null)   discoveryServiceProperties.setPropertyString(Constants.SERVICE_NAMESPACE,rsnamespace);
  final byte[] remoteServiceIDAsBytes=(byte[])reference.getProperty(Constants.SERVICE_ID);
  if (remoteServiceIDAsBytes == null) {
    logInfo(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ Constants.SERVICE_ID+ ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(Constants.SERVICE_ID,remoteServiceIDAsBytes);
  IDiscoveryAdvertiser advertiser2=getAdvertiser();
  if (advertiser2 == null) {
    logInfo(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  Namespace advertiserNamespace=advertiser2.getServicesNamespace();
  IServiceInfo svcInfo=null;
  try {
    IServiceTypeID serviceTypeID=createServiceTypeID(servicePublicationServiceProperties,advertiserNamespace);
    String serviceName=getPropertyWithDefault(servicePublicationServiceProperties,RemoteServicePublication.SERVICE_NAME,(RemoteServicePublication.DEFAULT_SERVICE_NAME_PREFIX + new String(remoteServiceIDAsBytes)));
    URI uri=createURI(endpointContainerID,""String_Node_Str"" + serviceName);
    svcInfo=new ServiceInfo(uri,serviceName,serviceTypeID,discoveryServiceProperties);
  }
 catch (  IDCreateException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
catch (  URISyntaxException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
  fireHostPublishUnpublish(reference,svcInfo,true);
synchronized (serviceInfos) {
    try {
      trace(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ svcInfo);
      advertiser2.registerService(svcInfo);
      addServiceInfo(reference,svcInfo);
    }
 catch (    ECFRuntimeException e) {
      logError(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
}","/** 
 * @param reference
 */
private void handleServicePublication(ServiceReference reference){
  Collection svcInterfaces=ServicePropertyUtils.getCollectionProperty(reference,ServicePublication.SERVICE_INTERFACE_NAME);
  if (svcInterfaces == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  IServiceProperties discoveryServiceProperties=new ServiceProperties();
  discoveryServiceProperties.setPropertyString(ServicePublication.SERVICE_INTERFACE_NAME,ServicePropertyUtils.createStringFromCollection(svcInterfaces));
  Collection configTypes=ServicePropertyUtils.getCollectionProperty(reference,RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS);
  if (configTypes != null) {
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS,ServicePropertyUtils.createStringFromCollection(configTypes));
  }
  Collection serviceIntents=ServicePropertyUtils.getCollectionProperty(reference,RemoteServicePublication.ENDPOINT_SERVICE_INTENTS);
  if (serviceIntents != null) {
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_SERVICE_INTENTS,ServicePropertyUtils.createStringFromCollection(serviceIntents));
  }
  Map servicePublicationServiceProperties=ServicePropertyUtils.getMapProperty(reference,ServicePublication.SERVICE_PROPERTIES);
  if (servicePublicationServiceProperties != null)   addPropertiesToDiscoveryServiceProperties(discoveryServiceProperties,servicePublicationServiceProperties);
  ID endpointContainerID=(ID)reference.getProperty(RemoteServicePublication.ENDPOINT_CONTAINERID);
  if (endpointContainerID == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.ENDPOINT_CONTAINERID,endpointContainerID.toExternalForm().getBytes());
  String endpointNamespace=endpointContainerID.getNamespace().getName();
  discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_CONTAINERID_NAMESPACE,endpointNamespace);
  ID targetContainerID=(ID)reference.getProperty(RemoteServicePublication.TARGET_CONTAINERID);
  if (targetContainerID != null) {
    discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.TARGET_CONTAINERID,targetContainerID.toExternalForm().getBytes());
    String targetNamespace=targetContainerID.getNamespace().getName();
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.TARGET_CONTAINERID_NAMESPACE,targetNamespace);
  }
  String rsnamespace=ServicePropertyUtils.getStringProperty(reference,Constants.SERVICE_NAMESPACE);
  if (rsnamespace != null)   discoveryServiceProperties.setPropertyString(Constants.SERVICE_NAMESPACE,rsnamespace);
  final byte[] remoteServiceIDAsBytes=(byte[])reference.getProperty(Constants.SERVICE_ID);
  if (remoteServiceIDAsBytes == null) {
    logInfo(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ Constants.SERVICE_ID+ ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(Constants.SERVICE_ID,remoteServiceIDAsBytes);
  IDiscoveryAdvertiser advertiser2=getAdvertiser();
  if (advertiser2 == null) {
    logInfo(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  Namespace advertiserNamespace=advertiser2.getServicesNamespace();
  IServiceInfo svcInfo=null;
  try {
    IServiceTypeID serviceTypeID=createServiceTypeID(servicePublicationServiceProperties,advertiserNamespace);
    String defaultServiceName=createUniqueDefaultServiceName();
    String serviceName=getPropertyWithDefault(servicePublicationServiceProperties,RemoteServicePublication.SERVICE_NAME,defaultServiceName);
    URI uri=createURI(endpointContainerID,""String_Node_Str"" + serviceName);
    svcInfo=new ServiceInfo(uri,serviceName,serviceTypeID,discoveryServiceProperties);
  }
 catch (  IDCreateException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
catch (  URISyntaxException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
  fireHostPublishUnpublish(reference,svcInfo,true);
synchronized (serviceInfos) {
    try {
      trace(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ svcInfo);
      advertiser2.registerService(svcInfo);
      addServiceInfo(reference,svcInfo);
    }
 catch (    ECFRuntimeException e) {
      logError(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
}",0.9810736026563364
94353,"protected HttpMethod createAndPrepareHttpMethod(String uri,IRemoteCall call,IRemoteCallable callable) throws RestException {
  HttpMethod httpMethod=null;
  IRemoteCallableRequestType requestType=callable.getRequestType();
  if (requestType == null)   throw new RestException(""String_Node_Str"");
  try {
    if (requestType instanceof HttpGetRequestType) {
      httpMethod=prepareGetMethod(uri,call,callable);
    }
 else     if (requestType instanceof HttpPostRequestType) {
      httpMethod=preparePostMethod(uri,call,callable);
    }
 else     if (requestType instanceof HttpPutRequestType) {
      httpMethod=preparePutMethod(uri,call,callable);
    }
 else     if (requestType instanceof HttpDeleteRequestType) {
      httpMethod=prepareDeleteMethod(uri,call,callable);
    }
 else {
      throw new RestException(NLS.bind(""String_Node_Str"",requestType));
    }
  }
 catch (  NotSerializableException e) {
    throw new RestException(""String_Node_Str"" + uri + ""String_Node_Str""+ call+ ""String_Node_Str""+ callable);
  }
  addRequestHeaders(httpMethod,call,callable);
  setupAuthenticaton(httpClient,httpMethod);
  httpClient.getParams().setParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS,new Boolean(true));
  setupTimeouts(httpClient,call,callable);
  return httpMethod;
}","protected HttpMethod createAndPrepareHttpMethod(String uri,IRemoteCall call,IRemoteCallable callable) throws RestException {
  HttpMethod httpMethod=null;
  IRemoteCallableRequestType requestType=callable.getRequestType();
  if (requestType == null)   throw new RestException(""String_Node_Str"");
  try {
    if (requestType instanceof HttpGetRequestType) {
      httpMethod=prepareGetMethod(uri,call,callable);
    }
 else     if (requestType instanceof HttpPostRequestType) {
      httpMethod=preparePostMethod(uri,call,callable);
    }
 else     if (requestType instanceof HttpPutRequestType) {
      httpMethod=preparePutMethod(uri,call,callable);
    }
 else     if (requestType instanceof HttpDeleteRequestType) {
      httpMethod=prepareDeleteMethod(uri,call,callable);
    }
 else {
      throw new RestException(NLS.bind(""String_Node_Str"",requestType));
    }
  }
 catch (  NotSerializableException e) {
    throw new RestException(""String_Node_Str"" + uri + ""String_Node_Str""+ call+ ""String_Node_Str""+ callable);
  }
  addRequestHeaders(httpMethod,call,callable);
  setupAuthenticaton(httpClient,httpMethod);
  httpClient.getParams().setParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS,new Boolean(true));
  httpClient.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET,DEFAULT_HTTP_CONTENT_CHARSET);
  setupTimeouts(httpClient,call,callable);
  return httpMethod;
}",0.9546986147510296
94354,"public void testGetServiceReferencesWithFilter() throws Exception {
  final IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  final Properties props=new Properties();
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  registerService(adapters[0],IConcatService.class.getName(),createService(),customizeProperties(props),0);
  final IRemoteServiceReference[] refs=getRemoteServiceReferences(adapters[1],(ID)null,IConcatService.class.getName(),getFilterFromServiceProperties(customizeProperties(props)));
  assertTrue(refs != null);
  assertTrue(refs.length > 0);
}","public void testGetServiceReferencesWithFilter() throws Exception {
  final IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  final Properties props=new Properties();
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  registerService(adapters[0],IConcatService.class.getName(),createService(),customizeProperties(props),0);
  final IRemoteServiceReference[] refs=getRemoteServiceReferences(adapters[1],(ID)null,IConcatService.class.getName(),getFilterFromServiceProperties(props));
  assertTrue(refs != null);
  assertTrue(refs.length > 0);
}",0.9752198241406874
94355,"/** 
 * @param reference
 */
private void handleServicePublication(ServiceReference reference){
  Collection svcInterfaces=ServicePropertyUtils.getCollectionProperty(reference,ServicePublication.SERVICE_INTERFACE_NAME);
  if (svcInterfaces == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  IServiceProperties discoveryServiceProperties=new ServiceProperties();
  discoveryServiceProperties.setPropertyString(ServicePublication.SERVICE_INTERFACE_NAME,ServicePropertyUtils.createStringFromCollection(svcInterfaces));
  Collection configTypes=ServicePropertyUtils.getCollectionProperty(reference,RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS);
  if (configTypes != null) {
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS,ServicePropertyUtils.createStringFromCollection(configTypes));
  }
  Collection serviceIntents=ServicePropertyUtils.getCollectionProperty(reference,RemoteServicePublication.ENDPOINT_SERVICE_INTENTS);
  if (serviceIntents != null) {
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_SERVICE_INTENTS,ServicePropertyUtils.createStringFromCollection(serviceIntents));
  }
  Map servicePublicationServiceProperties=ServicePropertyUtils.getMapProperty(reference,ServicePublication.SERVICE_PROPERTIES);
  if (servicePublicationServiceProperties != null)   addPropertiesToDiscoveryServiceProperties(discoveryServiceProperties,servicePublicationServiceProperties);
  ID endpointContainerID=(ID)reference.getProperty(RemoteServicePublication.ENDPOINT_CONTAINERID);
  if (endpointContainerID == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.ENDPOINT_CONTAINERID,endpointContainerID.toExternalForm().getBytes());
  String endpointNamespace=endpointContainerID.getNamespace().getName();
  discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_CONTAINERID_NAMESPACE,endpointNamespace);
  ID targetContainerID=(ID)reference.getProperty(RemoteServicePublication.TARGET_CONTAINERID);
  if (targetContainerID != null) {
    discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.TARGET_CONTAINERID,targetContainerID.toExternalForm().getBytes());
    String targetNamespace=targetContainerID.getNamespace().getName();
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.TARGET_CONTAINERID_NAMESPACE,targetNamespace);
  }
  String rsnamespace=ServicePropertyUtils.getStringProperty(reference,Constants.SERVICE_NAMESPACE);
  if (rsnamespace != null)   discoveryServiceProperties.setPropertyString(Constants.SERVICE_NAMESPACE,rsnamespace);
  final byte[] remoteServiceIDAsBytes=(byte[])reference.getProperty(Constants.SERVICE_ID);
  if (remoteServiceIDAsBytes == null) {
    logInfo(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ Constants.SERVICE_ID+ ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(Constants.SERVICE_ID,remoteServiceIDAsBytes);
  IDiscoveryAdvertiser advertiser2=getAdvertiser();
  if (advertiser2 == null) {
    logInfo(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  Namespace advertiserNamespace=advertiser2.getServicesNamespace();
  IServiceInfo svcInfo=null;
  try {
    IServiceTypeID serviceTypeID=createServiceTypeID(servicePublicationServiceProperties,advertiserNamespace);
    URI uri=createURI(endpointContainerID);
    String serviceName=getPropertyWithDefault(servicePublicationServiceProperties,RemoteServicePublication.SERVICE_NAME,(RemoteServicePublication.DEFAULT_SERVICE_NAME_PREFIX + new String(remoteServiceIDAsBytes)));
    svcInfo=new ServiceInfo(uri,serviceName,serviceTypeID,discoveryServiceProperties);
  }
 catch (  IDCreateException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
catch (  URISyntaxException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
  fireHostPublishUnpublish(reference,svcInfo,true);
synchronized (serviceInfos) {
    try {
      trace(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ svcInfo);
      advertiser2.registerService(svcInfo);
      addServiceInfo(reference,svcInfo);
    }
 catch (    ECFRuntimeException e) {
      logError(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
}","/** 
 * @param reference
 */
private void handleServicePublication(ServiceReference reference){
  Collection svcInterfaces=ServicePropertyUtils.getCollectionProperty(reference,ServicePublication.SERVICE_INTERFACE_NAME);
  if (svcInterfaces == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  IServiceProperties discoveryServiceProperties=new ServiceProperties();
  discoveryServiceProperties.setPropertyString(ServicePublication.SERVICE_INTERFACE_NAME,ServicePropertyUtils.createStringFromCollection(svcInterfaces));
  Collection configTypes=ServicePropertyUtils.getCollectionProperty(reference,RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS);
  if (configTypes != null) {
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS,ServicePropertyUtils.createStringFromCollection(configTypes));
  }
  Collection serviceIntents=ServicePropertyUtils.getCollectionProperty(reference,RemoteServicePublication.ENDPOINT_SERVICE_INTENTS);
  if (serviceIntents != null) {
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_SERVICE_INTENTS,ServicePropertyUtils.createStringFromCollection(serviceIntents));
  }
  Map servicePublicationServiceProperties=ServicePropertyUtils.getMapProperty(reference,ServicePublication.SERVICE_PROPERTIES);
  if (servicePublicationServiceProperties != null)   addPropertiesToDiscoveryServiceProperties(discoveryServiceProperties,servicePublicationServiceProperties);
  ID endpointContainerID=(ID)reference.getProperty(RemoteServicePublication.ENDPOINT_CONTAINERID);
  if (endpointContainerID == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.ENDPOINT_CONTAINERID,endpointContainerID.toExternalForm().getBytes());
  String endpointNamespace=endpointContainerID.getNamespace().getName();
  discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_CONTAINERID_NAMESPACE,endpointNamespace);
  ID targetContainerID=(ID)reference.getProperty(RemoteServicePublication.TARGET_CONTAINERID);
  if (targetContainerID != null) {
    discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.TARGET_CONTAINERID,targetContainerID.toExternalForm().getBytes());
    String targetNamespace=targetContainerID.getNamespace().getName();
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.TARGET_CONTAINERID_NAMESPACE,targetNamespace);
  }
  String rsnamespace=ServicePropertyUtils.getStringProperty(reference,Constants.SERVICE_NAMESPACE);
  if (rsnamespace != null)   discoveryServiceProperties.setPropertyString(Constants.SERVICE_NAMESPACE,rsnamespace);
  final byte[] remoteServiceIDAsBytes=(byte[])reference.getProperty(Constants.SERVICE_ID);
  if (remoteServiceIDAsBytes == null) {
    logInfo(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ Constants.SERVICE_ID+ ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(Constants.SERVICE_ID,remoteServiceIDAsBytes);
  IDiscoveryAdvertiser advertiser2=getAdvertiser();
  if (advertiser2 == null) {
    logInfo(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  Namespace advertiserNamespace=advertiser2.getServicesNamespace();
  IServiceInfo svcInfo=null;
  try {
    IServiceTypeID serviceTypeID=createServiceTypeID(servicePublicationServiceProperties,advertiserNamespace);
    String serviceName=getPropertyWithDefault(servicePublicationServiceProperties,RemoteServicePublication.SERVICE_NAME,(RemoteServicePublication.DEFAULT_SERVICE_NAME_PREFIX + new String(remoteServiceIDAsBytes)));
    URI uri=createURI(endpointContainerID,""String_Node_Str"" + serviceName);
    svcInfo=new ServiceInfo(uri,serviceName,serviceTypeID,discoveryServiceProperties);
  }
 catch (  IDCreateException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
catch (  URISyntaxException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
  fireHostPublishUnpublish(reference,svcInfo,true);
synchronized (serviceInfos) {
    try {
      trace(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ svcInfo);
      advertiser2.registerService(svcInfo);
      addServiceInfo(reference,svcInfo);
    }
 catch (    ECFRuntimeException e) {
      logError(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
}",0.9866844207723036
94356,"private URI createURI(ID endpointContainerID) throws URISyntaxException {
  boolean done=false;
  URI uri=null;
  String str=endpointContainerID.getName();
  while (!done) {
    try {
      uri=new URI(str);
      if (!uri.isOpaque()) {
        done=true;
      }
 else {
        str=uri.getRawSchemeSpecificPart();
      }
    }
 catch (    URISyntaxException e) {
      done=true;
    }
  }
  String scheme=RemoteServicePublication.SERVICE_TYPE;
  int port=32565;
  if (uri != null) {
    port=uri.getPort();
    if (port == -1)     port=32565;
  }
  String host=null;
  try {
    host=InetAddress.getLocalHost().getHostAddress();
  }
 catch (  Exception e) {
    host=""String_Node_Str"";
  }
  return new URI(scheme,null,host,port,null,null,null);
}","private URI createURI(ID endpointContainerID,String path) throws URISyntaxException {
  boolean done=false;
  URI uri=null;
  String str=endpointContainerID.getName();
  while (!done) {
    try {
      uri=new URI(str);
      if (!uri.isOpaque()) {
        done=true;
      }
 else {
        str=uri.getRawSchemeSpecificPart();
      }
    }
 catch (    URISyntaxException e) {
      done=true;
    }
  }
  String scheme=RemoteServicePublication.SERVICE_TYPE;
  int port=32565;
  if (uri != null) {
    port=uri.getPort();
    if (port == -1)     port=32565;
  }
  String host=null;
  try {
    host=InetAddress.getLocalHost().getHostAddress();
  }
 catch (  Exception e) {
    host=""String_Node_Str"";
  }
  return new URI(scheme,null,host,port,path,null,null);
}",0.9867899603698812
94357,"public long getRemoteServiceId(){
  byte[] remoteServiceIdAsBytes=(byte[])serviceProperties.get(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID);
  if (remoteServiceIdAsBytes == null)   return 0;
 else {
    Long remoteServiceId=new Long(new String(remoteServiceIdAsBytes));
    return remoteServiceId.longValue();
  }
}","public long getRemoteServiceId(){
  byte[] remoteServiceIdAsBytes=(byte[])serviceProperties.get(org.eclipse.ecf.remoteservice.Constants.SERVICE_ID);
  if (remoteServiceIdAsBytes == null)   return -1;
 else {
    Long remoteServiceId=new Long(new String(remoteServiceIdAsBytes));
    return remoteServiceId.longValue();
  }
}",0.9953632148377124
94358,"public static void logNoProxyWarning(Throwable e){
  getDefault().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.ERROR,""String_Node_Str"",e));
}","public static void logNoProxyWarning(Throwable e){
  Activator a=getDefault();
  if (a != null) {
    a.log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.ERROR,""String_Node_Str"",e));
  }
}",0.8806818181818182
94359,"protected void setupProxies(){
  if (proxy == null) {
    proxy=ProxySetupHelper.getProxy(directoryOrFile.toExternalForm());
  }
  if (proxy != null)   setupProxy(proxy);
}","protected void setupProxies(){
  if (proxy == null) {
    try {
      proxy=ProxySetupHelper.getProxy(directoryOrFile.toExternalForm());
    }
 catch (    NoClassDefFoundError e) {
      Activator.logNoProxyWarning(e);
    }
  }
  if (proxy != null)   setupProxy(proxy);
}",0.7522522522522522
94360,"/** 
 * Select a single proxy from a set of proxies available for the given host.  This implementation selects in the following manner:  1) If proxies provided is null or array of 0 length, null  is returned.  If only one proxy is available (array of length 1) then the entry is returned. If proxies provided is length > 1, then if the type of a proxy in the array matches the given protocol (e.g. http, https), then the first matching proxy is returned.  If the protocol does not match any of the proxies, then the *first* proxy (i.e. proxies[0]) is returned.  Subclasses may override if desired.
 * @param protocol the target protocol (e.g. http, https, scp, etc).  Will not be <code>null</code>.
 * @param proxies the proxies to select from.  May be <code>null</code> or array of length 0.
 * @return proxy data selected from the proxies provided.  
 */
protected IProxyData selectProxyFromProxies(String protocol,IProxyData[] proxies){
  return ProxySetupHelper.selectProxyFromProxies(protocol,proxies);
}","/** 
 * Select a single proxy from a set of proxies available for the given host.  This implementation selects in the following manner:  1) If proxies provided is null or array of 0 length, null  is returned.  If only one proxy is available (array of length 1) then the entry is returned. If proxies provided is length > 1, then if the type of a proxy in the array matches the given protocol (e.g. http, https), then the first matching proxy is returned.  If the protocol does not match any of the proxies, then the *first* proxy (i.e. proxies[0]) is returned.  Subclasses may override if desired.
 * @param protocol the target protocol (e.g. http, https, scp, etc).  Will not be <code>null</code>.
 * @param proxies the proxies to select from.  May be <code>null</code> or array of length 0.
 * @return proxy data selected from the proxies provided.  
 */
protected IProxyData selectProxyFromProxies(String protocol,IProxyData[] proxies){
  try {
    return ProxySetupHelper.selectProxyFromProxies(protocol,proxies);
  }
 catch (  NoClassDefFoundError e) {
    Activator.logNoProxyWarning(e);
    return null;
  }
}",0.9496470588235294
94361,"protected void setupProxies(){
  if (proxy == null) {
    proxy=ProxySetupHelper.getProxy(getRemoteFileURL().toExternalForm());
  }
  if (proxy != null)   setupProxy(proxy);
}","protected void setupProxies(){
  if (proxy == null) {
    try {
      proxy=ProxySetupHelper.getProxy(getRemoteFileURL().toExternalForm());
    }
 catch (    NoClassDefFoundError e) {
      Activator.logNoProxyWarning(e);
    }
  }
  if (proxy != null)   setupProxy(proxy);
}",0.7555555555555555
94362,"protected void setupProxies(){
  if (proxy == null) {
    proxy=ProxySetupHelper.getProxy(getRemoteFileURL().toExternalForm());
  }
  if (proxy != null)   setupProxy(proxy);
}","protected void setupProxies(){
  if (proxy == null) {
    try {
      proxy=ProxySetupHelper.getProxy(getRemoteFileURL().toExternalForm());
    }
 catch (    NoClassDefFoundError e) {
      Activator.logNoProxyWarning(e);
    }
  }
  if (proxy != null)   setupProxy(proxy);
}",0.7555555555555555
94363,"private String[] getExportedInterfaces(ServiceReference serviceReference){
  Object propValue=serviceReference.getProperty(IDistributionConstants.SERVICE_EXPORTED_INTERFACES);
  if (propValue == null)   return null;
  boolean wildcard=false;
  String[] exportedInterfaces=null;
  if (propValue instanceof String) {
    wildcard=propValue.equals(IDistributionConstants.SERVICE_EXPORTED_INTERFACES_WILDCARD);
    if (!wildcard)     return null;
    exportedInterfaces=new String[]{(String)propValue};
  }
  if (exportedInterfaces == null && propValue instanceof String[]) {
    exportedInterfaces=(String[])propValue;
  }
  if (exportedInterfaces == null)   return null;
  String[] serviceInterfaces=(String[])serviceReference.getProperty(org.osgi.framework.Constants.OBJECTCLASS);
  List results=new ArrayList();
  if (wildcard) {
    return serviceInterfaces;
  }
 else {
    List interfaces=Arrays.asList(serviceInterfaces);
    List rsInterfaces=Arrays.asList(exportedInterfaces);
    for (Iterator i=rsInterfaces.iterator(); i.hasNext(); ) {
      String rsIntf=(String)i.next();
      if (rsIntf.equals(IDistributionConstants.SERVICE_EXPORTED_INTERFACES_WILDCARD))       results.addAll(interfaces);
      if (interfaces.contains(rsIntf))       results.add(rsIntf);
    }
  }
  if (results.size() == 0)   return null;
  return (String[])results.toArray(new String[]{});
}","private String[] getExportedInterfaces(ServiceReference serviceReference){
  Object propValue=serviceReference.getProperty(IDistributionConstants.SERVICE_EXPORTED_INTERFACES);
  if (propValue == null)   return null;
  boolean wildcard=propValue.equals(IDistributionConstants.SERVICE_EXPORTED_INTERFACES_WILDCARD);
  if (wildcard)   return (String[])serviceReference.getProperty(org.osgi.framework.Constants.OBJECTCLASS);
 else   return getStringArrayFromPropertyValue(propValue);
}",0.4528301886792453
94364,"private void handleDiscoveredServiceAvailable(RemoteServiceEndpointDescription endpointDescription){
  IRemoteServiceContainer[] rsContainers=findProxyContainers(endpointDescription);
  if (rsContainers == null || rsContainers.length == 0) {
    logWarning(""String_Node_Str"",""String_Node_Str"" + endpointDescription);
    return;
  }
  ID endpointID=endpointDescription.getEndpointAsID();
  String remoteServiceFilter=endpointDescription.getRemoteServicesFilter();
  Collection providedInterfaces=endpointDescription.getProvidedInterfaces();
  for (int i=0; i < rsContainers.length; i++) {
    for (Iterator j=providedInterfaces.iterator(); j.hasNext(); ) {
      String providedInterface=(String)j.next();
      IRemoteServiceReference[] remoteReferences=null;
      firePreGetRemoteServiceReferences(endpointDescription,rsContainers[i]);
      try {
        remoteReferences=rsContainers[i].getContainerAdapter().getRemoteServiceReferences(endpointID,providedInterface,remoteServiceFilter);
      }
 catch (      ContainerConnectException e) {
        logError(""String_Node_Str"",""String_Node_Str"" + rsContainers[i] + ""String_Node_Str""+ endpointID+ ""String_Node_Str""+ providedInterface+ ""String_Node_Str"",e);
        continue;
      }
catch (      InvalidSyntaxException e) {
        logError(""String_Node_Str"",""String_Node_Str"" + rsContainers[i] + ""String_Node_Str""+ endpointID+ ""String_Node_Str""+ providedInterface+ ""String_Node_Str"",e);
        continue;
      }
      if (remoteReferences == null || remoteReferences.length == 0) {
        logError(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + rsContainers[i] + ""String_Node_Str""+ ((remoteReferences == null) ? ""String_Node_Str"" : Arrays.asList(remoteReferences).toString()),null);
        continue;
      }
 else       registerRemoteServiceReferences(endpointDescription,rsContainers[i],remoteReferences);
    }
  }
}","private void handleDiscoveredServiceAvailable(RemoteServiceEndpointDescription endpointDescription){
  IRemoteServiceContainer[] rsContainers=findProxyContainers(endpointDescription);
  if (rsContainers == null || rsContainers.length == 0) {
    logWarning(""String_Node_Str"",""String_Node_Str"" + endpointDescription);
    return;
  }
  ID endpointID=endpointDescription.getEndpointAsID();
  String remoteServiceFilter=getFullRemoteServicesFilter(endpointDescription.getRemoteServicesFilter(),endpointDescription.getRemoteServiceId());
  Collection providedInterfaces=endpointDescription.getProvidedInterfaces();
  for (int i=0; i < rsContainers.length; i++) {
    for (Iterator j=providedInterfaces.iterator(); j.hasNext(); ) {
      String providedInterface=(String)j.next();
      IRemoteServiceReference[] remoteReferences=null;
      firePreGetRemoteServiceReferences(endpointDescription,rsContainers[i]);
      try {
        remoteReferences=rsContainers[i].getContainerAdapter().getRemoteServiceReferences(endpointID,providedInterface,remoteServiceFilter);
      }
 catch (      ContainerConnectException e) {
        logError(""String_Node_Str"",""String_Node_Str"" + rsContainers[i] + ""String_Node_Str""+ endpointID+ ""String_Node_Str""+ providedInterface+ ""String_Node_Str"",e);
        continue;
      }
catch (      InvalidSyntaxException e) {
        logError(""String_Node_Str"",""String_Node_Str"" + rsContainers[i] + ""String_Node_Str""+ endpointID+ ""String_Node_Str""+ providedInterface+ ""String_Node_Str"",e);
        continue;
      }
      if (remoteReferences == null || remoteReferences.length == 0) {
        logError(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + rsContainers[i] + ""String_Node_Str""+ ((remoteReferences == null) ? ""String_Node_Str"" : Arrays.asList(remoteReferences).toString()),null);
        continue;
      }
 else {
        registerRemoteServiceReferences(endpointDescription,rsContainers[i],remoteReferences);
      }
    }
  }
}",0.97871235721703
94365,"private ServiceRegistration[] removeProxyServiceRegistrations(RemoteServiceEndpointDescription sed){
  List results=new ArrayList();
  for (Iterator i=discoveredRemoteServiceRegistrations.keySet().iterator(); i.hasNext(); ) {
    ID containerID=(ID)i.next();
    RemoteServiceRegistration reg=(RemoteServiceRegistration)discoveredRemoteServiceRegistrations.get(containerID);
    ServiceRegistration sr=reg.removeServiceRegistration(sed);
    if (reg != null) {
      results.add(sr);
      if (reg.isEmpty()) {
        reg.dispose();
        discoveredRemoteServiceRegistrations.remove(containerID);
      }
    }
  }
  return (ServiceRegistration[])results.toArray(new ServiceRegistration[]{});
}","private ServiceRegistration[] removeProxyServiceRegistrations(RemoteServiceEndpointDescription sed){
  List results=new ArrayList();
  for (Iterator i=discoveredRemoteServiceRegistrations.keySet().iterator(); i.hasNext(); ) {
    ID containerID=(ID)i.next();
    RemoteServiceRegistration reg=(RemoteServiceRegistration)discoveredRemoteServiceRegistrations.get(containerID);
    if (reg != null) {
      ServiceRegistration sr=reg.removeServiceRegistration(sed);
      if (sr != null)       results.add(sr);
      if (reg.isEmpty()) {
        reg.dispose();
        discoveredRemoteServiceRegistrations.remove(containerID);
      }
    }
  }
  return (ServiceRegistration[])results.toArray(new ServiceRegistration[]{});
}",0.8942172073342737
94366,"private ServiceRegistration[] removeProxyServiceRegistrations(ServiceEndpointDescription sed){
  List results=new ArrayList();
  for (Iterator i=discoveredRemoteServiceRegistrations.keySet().iterator(); i.hasNext(); ) {
    ID containerID=(ID)i.next();
    RemoteServiceRegistration reg=(RemoteServiceRegistration)discoveredRemoteServiceRegistrations.get(containerID);
    if (sed.equals(reg.getServiceEndpointDescription())) {
      i.remove();
      results.addAll(reg.removeAllServiceRegistrations());
      reg.dispose();
    }
  }
  return (ServiceRegistration[])results.toArray(new ServiceRegistration[]{});
}","private ServiceRegistration[] removeProxyServiceRegistrations(RemoteServiceEndpointDescription sed){
  List results=new ArrayList();
  for (Iterator i=discoveredRemoteServiceRegistrations.keySet().iterator(); i.hasNext(); ) {
    ID containerID=(ID)i.next();
    RemoteServiceRegistration reg=(RemoteServiceRegistration)discoveredRemoteServiceRegistrations.get(containerID);
    ServiceRegistration sr=reg.removeServiceRegistration(sed);
    if (reg != null) {
      results.add(sr);
      if (reg.isEmpty()) {
        reg.dispose();
        discoveredRemoteServiceRegistrations.remove(containerID);
      }
    }
  }
  return (ServiceRegistration[])results.toArray(new ServiceRegistration[]{});
}",0.7195121951219512
94367,"private void registerRemoteServiceReferences(RemoteServiceEndpointDescription sed,IRemoteServiceContainer remoteServiceContainer,IRemoteServiceReference[] remoteReferences){
synchronized (serviceLocations) {
    if (!containsDiscoveredServiceID(sed)) {
      logError(""String_Node_Str"",""String_Node_Str"" + sed + ""String_Node_Str"",null);
      return;
    }
    if (findProxyServiceRegistration(sed)) {
      logError(""String_Node_Str"",""String_Node_Str"" + sed + ""String_Node_Str"",null);
      return;
    }
    for (int i=0; i < remoteReferences.length; i++) {
      IRemoteService remoteService=remoteServiceContainer.getContainerAdapter().getRemoteService(remoteReferences[i]);
      if (remoteService == null) {
        logError(""String_Node_Str"",""String_Node_Str"" + remoteReferences[i],null);
        continue;
      }
      String[] clazzes=(String[])remoteReferences[i].getProperty(Constants.OBJECTCLASS);
      if (clazzes == null || clazzes.length == 0) {
        logError(""String_Node_Str"",""String_Node_Str"" + remoteReferences[i],null);
        continue;
      }
      Dictionary properties=getPropertiesForRemoteService(sed,remoteServiceContainer,remoteReferences[i],remoteService);
      Object proxy=null;
      try {
        proxy=remoteService.getProxy();
        if (proxy == null) {
          logError(""String_Node_Str"",""String_Node_Str"",null);
          continue;
        }
        firePreRegister(sed,remoteServiceContainer,remoteReferences[i]);
        trace(""String_Node_Str"",""String_Node_Str"" + remoteServiceContainer + ""String_Node_Str""+ remoteReferences[i]);
        ServiceRegistration registration=Activator.getDefault().getContext().registerService(clazzes,proxy,properties);
        ID containerID=remoteServiceContainer.getContainer().getID();
        RemoteServiceRegistration reg=(RemoteServiceRegistration)discoveredRemoteServiceRegistrations.get(containerID);
        if (reg == null) {
          reg=new RemoteServiceRegistration(sed,remoteServiceContainer,new RemoteServiceReferenceUnregisteredListener());
          discoveredRemoteServiceRegistrations.put(containerID,reg);
        }
        reg.addServiceRegistration(remoteReferences[i],registration);
        distributionProvider.addRemoteService(registration.getReference());
        trace(""String_Node_Str"",""String_Node_Str"" + remoteServiceContainer + ""String_Node_Str""+ remoteReferences[i]+ ""String_Node_Str""+ registration);
        firePostRegister(sed,remoteServiceContainer,remoteReferences[i],registration);
      }
 catch (      Exception e) {
        logError(""String_Node_Str"",""String_Node_Str"" + remoteReferences[i],e);
        continue;
      }
    }
  }
}","private void registerRemoteServiceReferences(RemoteServiceEndpointDescription sed,IRemoteServiceContainer remoteServiceContainer,IRemoteServiceReference[] remoteReferences){
synchronized (serviceLocations) {
    if (!containsDiscoveredServiceID(sed)) {
      logError(""String_Node_Str"",""String_Node_Str"" + sed + ""String_Node_Str"",null);
      return;
    }
    if (findProxyServiceRegistration(sed)) {
      logError(""String_Node_Str"",""String_Node_Str"" + sed + ""String_Node_Str"",null);
      return;
    }
    for (int i=0; i < remoteReferences.length; i++) {
      IRemoteService remoteService=remoteServiceContainer.getContainerAdapter().getRemoteService(remoteReferences[i]);
      if (remoteService == null) {
        logError(""String_Node_Str"",""String_Node_Str"" + remoteReferences[i],null);
        continue;
      }
      String[] clazzes=(String[])remoteReferences[i].getProperty(Constants.OBJECTCLASS);
      if (clazzes == null || clazzes.length == 0) {
        logError(""String_Node_Str"",""String_Node_Str"" + remoteReferences[i],null);
        continue;
      }
      Dictionary properties=getPropertiesForRemoteService(sed,remoteServiceContainer,remoteReferences[i],remoteService);
      Object proxy=null;
      try {
        proxy=remoteService.getProxy();
        if (proxy == null) {
          logError(""String_Node_Str"",""String_Node_Str"",null);
          continue;
        }
        firePreRegister(sed,remoteServiceContainer,remoteReferences[i]);
        trace(""String_Node_Str"",""String_Node_Str"" + remoteServiceContainer + ""String_Node_Str""+ remoteReferences[i]);
        ServiceRegistration registration=Activator.getDefault().getContext().registerService(clazzes,proxy,properties);
        ID localContainerID=remoteServiceContainer.getContainer().getID();
        RemoteServiceRegistration reg=(RemoteServiceRegistration)discoveredRemoteServiceRegistrations.get(localContainerID);
        if (reg == null) {
          reg=new RemoteServiceRegistration(remoteServiceContainer,new RemoteServiceReferenceUnregisteredListener());
          discoveredRemoteServiceRegistrations.put(localContainerID,reg);
        }
        reg.addServiceRegistration(remoteReferences[i],sed,registration);
        distributionProvider.addRemoteService(registration.getReference());
        trace(""String_Node_Str"",""String_Node_Str"" + remoteServiceContainer + ""String_Node_Str""+ remoteReferences[i]+ ""String_Node_Str""+ registration);
        firePostRegister(sed,remoteServiceContainer,remoteReferences[i],registration);
      }
 catch (      Exception e) {
        logError(""String_Node_Str"",""String_Node_Str"" + remoteReferences[i],e);
        continue;
      }
    }
  }
}",0.9945560352919092
94368,"private boolean findProxyServiceRegistration(RemoteServiceEndpointDescription sed){
  for (Iterator i=discoveredRemoteServiceRegistrations.keySet().iterator(); i.hasNext(); ) {
    ID containerID=(ID)i.next();
    RemoteServiceRegistration reg=(RemoteServiceRegistration)discoveredRemoteServiceRegistrations.get(containerID);
    if (sed.equals(reg.getServiceEndpointDescription()))     return true;
  }
  return false;
}","private boolean findProxyServiceRegistration(RemoteServiceEndpointDescription sed){
  for (Iterator i=discoveredRemoteServiceRegistrations.keySet().iterator(); i.hasNext(); ) {
    ID containerID=(ID)i.next();
    RemoteServiceRegistration reg=(RemoteServiceRegistration)discoveredRemoteServiceRegistrations.get(containerID);
    if (reg.hasRSED(sed))     return true;
  }
  return false;
}",0.8360049321824907
94369,"public void handleServiceEvent(IRemoteServiceEvent event){
  if (event instanceof IRemoteServiceUnregisteredEvent) {
    trace(""String_Node_Str"",""String_Node_Str"" + event.getLocalContainerID() + ""String_Node_Str""+ event.getContainerID()+ ""String_Node_Str""+ event.getReference());
    ServiceRegistration[] proxyServiceRegistrations=null;
synchronized (serviceLocations) {
      RemoteServiceRegistration rsRegs=(RemoteServiceRegistration)discoveredRemoteServiceRegistrations.get(event.getLocalContainerID());
      if (rsRegs != null) {
        proxyServiceRegistrations=rsRegs.removeServiceRegistration(event.getReference());
        if (rsRegs.isEmpty()) {
          rsRegs.dispose();
          discoveredRemoteServiceRegistrations.remove(event.getContainerID());
        }
      }
    }
    if (proxyServiceRegistrations != null) {
      for (int i=0; i < proxyServiceRegistrations.length; i++) {
        trace(""String_Node_Str"",""String_Node_Str"" + event.getLocalContainerID() + ""String_Node_Str""+ event.getContainerID()+ ""String_Node_Str""+ event.getReference()+ ""String_Node_Str""+ proxyServiceRegistrations[i]);
        unregisterProxyServiceRegistration(null,proxyServiceRegistrations[i]);
      }
    }
  }
}","public void handleServiceEvent(IRemoteServiceEvent event){
  if (event instanceof IRemoteServiceUnregisteredEvent) {
    ID containerID=event.getContainerID();
    ID localContainerID=event.getLocalContainerID();
    IRemoteServiceReference reference=event.getReference();
    trace(""String_Node_Str"",""String_Node_Str"" + localContainerID + ""String_Node_Str""+ containerID+ ""String_Node_Str""+ reference);
    RemoteServiceRegistration.RSEDAndSRAssoc[] assocs=null;
synchronized (serviceLocations) {
      RemoteServiceRegistration rsRegs=(RemoteServiceRegistration)discoveredRemoteServiceRegistrations.get(localContainerID);
      if (rsRegs != null) {
        assocs=rsRegs.removeServiceRegistration(reference);
        if (rsRegs.isEmpty()) {
          rsRegs.dispose();
          discoveredRemoteServiceRegistrations.remove(localContainerID);
        }
        if (assocs != null) {
          for (int i=0; i < assocs.length; i++) {
            removeDiscoveredServiceID(assocs[i].getRSED());
          }
        }
      }
    }
    if (assocs != null) {
      for (int i=0; i < assocs.length; i++) {
        ServiceRegistration sr=assocs[i].getSR();
        trace(""String_Node_Str"",""String_Node_Str"" + localContainerID + ""String_Node_Str""+ containerID+ ""String_Node_Str""+ reference+ ""String_Node_Str""+ sr);
        unregisterProxyServiceRegistration(assocs[i].getRSED(),sr);
      }
    }
  }
}",0.3846743295019157
94370,"public RemoteServiceRegistration(RemoteServiceEndpointDescription sed,IRemoteServiceContainer rsContainer,IRemoteServiceListener l){
  this.serviceEndpointDescription=sed;
  this.rsContainer=rsContainer;
  this.listener=l;
  getContainerAdapter().addRemoteServiceListener(this.listener);
}","public RemoteServiceRegistration(IRemoteServiceContainer rsContainer,IRemoteServiceListener l){
  Assert.isNotNull(rsContainer);
  Assert.isNotNull(l);
  this.rsContainer=rsContainer;
  this.listener=l;
  getContainerAdapter().addRemoteServiceListener(this.listener);
}",0.6523297491039427
94371,"public IRemoteServiceContainerAdapter getContainerAdapter(){
  return rsContainer.getContainerAdapter();
}","IRemoteServiceContainerAdapter getContainerAdapter(){
  return rsContainer.getContainerAdapter();
}",0.9658536585365852
94372,"public IContainer getContainer(){
  return rsContainer.getContainer();
}","IContainer getContainer(){
  return rsContainer.getContainer();
}",0.948905109489051
94373,"public boolean isEmpty(){
  return serviceRegistrations.size() == 0;
}","boolean isEmpty(){
synchronized (serviceRegistrations) {
    return serviceRegistrations.size() == 0;
  }
}",0.711864406779661
94374,"public void addServiceRegistration(IRemoteServiceReference ref,ServiceRegistration registration){
  List l=(List)serviceRegistrations.get(ref.getID());
  if (l == null) {
    l=new ArrayList();
    serviceRegistrations.put(ref.getID(),l);
  }
  l.add(registration);
}","void addServiceRegistration(IRemoteServiceReference ref,RemoteServiceEndpointDescription rsed,ServiceRegistration registration){
synchronized (serviceRegistrations) {
    List l=(List)serviceRegistrations.get(ref.getID());
    if (l == null) {
      l=new ArrayList();
      serviceRegistrations.put(ref.getID(),l);
    }
    l.add(new RSEDAndSRAssoc(rsed,registration));
  }
}",0.1024844720496894
94375,"public void dispose(){
  getContainerAdapter().removeRemoteServiceListener(this.listener);
}","void dispose(){
synchronized (serviceRegistrations) {
    if (listener != null) {
      getContainerAdapter().removeRemoteServiceListener(this.listener);
      this.listener=null;
    }
    if (rsContainer != null) {
      rsContainer=null;
    }
    serviceRegistrations.clear();
  }
}",0.0158730158730158
94376,"public ServiceRegistration[] removeServiceRegistration(IRemoteServiceReference reference){
  if (getContainerAdapter().ungetRemoteService(reference)) {
    List l=(List)serviceRegistrations.remove(reference.getID());
    if (l != null)     return (ServiceRegistration[])l.toArray(new ServiceRegistration[]{});
  }
  return null;
}","ServiceRegistration removeServiceRegistration(RemoteServiceEndpointDescription rsed){
  if (rsed == null)   return null;
  ServiceRegistration reg=null;
synchronized (serviceRegistrations) {
    IRemoteServiceID remoteServiceID=null;
    for (Iterator i=serviceRegistrations.keySet().iterator(); i.hasNext(); ) {
      remoteServiceID=(IRemoteServiceID)i.next();
      List assocs=(List)serviceRegistrations.get(remoteServiceID);
      for (Iterator j=assocs.iterator(); j.hasNext(); ) {
        RSEDAndSRAssoc assoc=(RSEDAndSRAssoc)j.next();
        if (rsed.equals(assoc.getRSED())) {
          j.remove();
          reg=assoc.getSR();
        }
      }
    }
    if (reg != null && remoteServiceID != null) {
      serviceRegistrations.remove(remoteServiceID);
    }
  }
  return reg;
}",0.0857908847184986
94377,"public boolean processEvent(Event arg0){
  if (arg0 instanceof IContainerConnectedEvent) {
    handleContainerConnectedEvent((IContainerConnectedEvent)arg0);
  }
 else   if (arg0 instanceof IContainerDisconnectedEvent) {
    handleContainerDisconnectedEvent((IContainerDisconnectedEvent)arg0);
  }
 else   if (arg0 instanceof IContainerEjectedEvent) {
    handleContainerEjectedEvent((IContainerEjectedEvent)arg0);
  }
 else   if (arg0 instanceof ISharedObjectActivatedEvent) {
    if (getSOContext().getConnectedID() != null) {
      addPendingContainers(getGroupMemberIDs());
      sendRegistryUpdateRequest();
    }
  }
  return false;
}","public boolean processEvent(Event arg0){
  if (arg0 instanceof IContainerConnectedEvent) {
    handleContainerConnectedEvent((IContainerConnectedEvent)arg0);
  }
 else   if (arg0 instanceof IContainerDisconnectedEvent) {
    handleContainerDisconnectedEvent((IContainerDisconnectedEvent)arg0);
  }
 else   if (arg0 instanceof IContainerEjectedEvent) {
    handleContainerEjectedEvent((IContainerEjectedEvent)arg0);
  }
 else   if (arg0 instanceof ISharedObjectActivatedEvent) {
    if (getSOContext().getConnectedID() != null) {
      addPendingContainers(getGroupMemberIDs());
      sendRegistryUpdateRequest();
      setRegistryConnected(true);
    }
  }
  return false;
}",0.974124809741248
94378,"/** 
 * @since 3.3 for preventing issues like bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=304427
 */
protected void connectToRemoteServiceTarget(ID targetID) throws ContainerConnectException {
synchronized (rsConnectLock) {
    ISharedObjectContext context=getContext();
    if (context == null)     throw new ContainerConnectException(""String_Node_Str"");
    ID connectedID=context.getConnectedID();
    if (connectedID != null) {
      if (connectedID.equals(targetID))       return;
      throw new ContainerConnectException(""String_Node_Str"" + connectedID);
    }
    context.connect(targetID,connectContext);
    waitForConnectEvent(context,targetID);
  }
}","/** 
 * @since 3.3 for preventing issues like bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=304427
 */
protected void connectToRemoteServiceTarget(ID targetID) throws ContainerConnectException {
synchronized (rsConnectLock) {
    ISharedObjectContext context=getContext();
    if (context == null)     throw new ContainerConnectException(""String_Node_Str"");
    ID connectedID=context.getConnectedID();
    if (connectedID != null) {
      if (connectedID.equals(targetID))       return;
      throw new ContainerConnectException(""String_Node_Str"" + connectedID);
    }
    context.connect(targetID,connectContext);
    waitForConnectedEvent(context,targetID);
  }
}",0.9985052316890882
94379,"public IRemoteServiceReference[] getRemoteServiceReferences(ID[] idFilter,String clazz,String filter) throws InvalidSyntaxException {
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",new Object[]{idFilter,clazz,filter});
  if (clazz == null)   return null;
  final IRemoteFilter remoteFilter=(filter == null) ? null : new RemoteFilterImpl(filter);
  waitForPendingUpdates(idFilter,addRegistrationRequestTimeout);
  final List references=new ArrayList();
  addReferencesFromRemoteRegistrys(idFilter,clazz,remoteFilter,references);
  ID localContainerID=getLocalContainerID();
  if (idFilter == null || Arrays.asList(idFilter).contains(localContainerID)) {
synchronized (localRegistry) {
      addReferencesFromRegistry(clazz,remoteFilter,localRegistry,references);
    }
  }
  final IRemoteServiceReference[] result=(IRemoteServiceReference[])references.toArray(new IRemoteServiceReference[references.size()]);
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",result);
  return (result.length == 0) ? null : result;
}","public IRemoteServiceReference[] getRemoteServiceReferences(ID[] idFilter,String clazz,String filter) throws InvalidSyntaxException {
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",new Object[]{idFilter,clazz,filter});
  if (clazz == null)   return null;
  final IRemoteFilter remoteFilter=(filter == null) ? null : new RemoteFilterImpl(filter);
  waitForPendingUpdates(idFilter,getAddRegistrationRequestTimeout());
  final List references=new ArrayList();
  addReferencesFromRemoteRegistrys(idFilter,clazz,remoteFilter,references);
  ID localContainerID=getLocalContainerID();
  if (idFilter == null || Arrays.asList(idFilter).contains(localContainerID)) {
synchronized (localRegistry) {
      addReferencesFromRegistry(clazz,remoteFilter,localRegistry,references);
    }
  }
  final IRemoteServiceReference[] result=(IRemoteServiceReference[])references.toArray(new IRemoteServiceReference[references.size()]);
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",result);
  return (result.length == 0) ? null : result;
}",0.9969944182052384
94380,"private void handleTargetGoneEvent(ID targetID){
  RemoteServiceRegistrationImpl registrations[]=null;
synchronized (remoteRegistrys) {
    final RemoteServiceRegistryImpl registry=getRemoteRegistry(targetID);
    if (registry != null) {
      removeRemoteRegistry(targetID);
      registrations=registry.getRegistrations();
      if (registrations != null) {
        for (int i=0; i < registrations.length; i++) {
          registry.unpublishService(registrations[i]);
          unregisterServiceRegistrationsForContainer(registrations[i].getContainerID());
        }
      }
    }
  }
  if (registrations != null) {
    for (int i=0; i < registrations.length; i++) {
      fireRemoteServiceListeners(createUnregisteredEvent(registrations[i]));
    }
  }
  removePendingContainers(targetID);
synchronized (rsConnectLock) {
    rsConnected=false;
    rsConnectLock.notify();
  }
}","private void handleTargetGoneEvent(ID targetID){
  RemoteServiceRegistrationImpl registrations[]=null;
synchronized (remoteRegistrys) {
    final RemoteServiceRegistryImpl registry=getRemoteRegistry(targetID);
    if (registry != null) {
      removeRemoteRegistry(targetID);
      registrations=registry.getRegistrations();
      if (registrations != null) {
        for (int i=0; i < registrations.length; i++) {
          registry.unpublishService(registrations[i]);
          unregisterServiceRegistrationsForContainer(registrations[i].getContainerID());
        }
      }
    }
  }
  if (registrations != null) {
    for (int i=0; i < registrations.length; i++) {
      fireRemoteServiceListeners(createUnregisteredEvent(registrations[i]));
    }
  }
  removePendingContainers(targetID);
  if (getConnectedID() == null)   setRegistryConnected(false);
}",0.9337938975244676
94381,"/** 
 * @since 3.0
 */
public IRemoteServiceReference getRemoteServiceReference(IRemoteServiceID serviceId){
  ID containerID=serviceId.getContainerID();
  RemoteServiceRegistrationImpl registration=null;
  waitForPendingUpdates(new ID[]{serviceId.getContainerID()},addRegistrationRequestTimeout);
  if (this.localRegistry.containerID.equals(containerID)) {
synchronized (localRegistry) {
      registration=localRegistry.findRegistrationForServiceId(serviceId.getContainerRelativeID());
      if (registration != null)       return registration.getReference();
    }
  }
 else {
synchronized (remoteRegistrys) {
      final ArrayList registrys=new ArrayList(remoteRegistrys.values());
      for (final Iterator i=registrys.iterator(); i.hasNext(); ) {
        final RemoteServiceRegistryImpl registry=(RemoteServiceRegistryImpl)i.next();
        registration=registry.findRegistrationForServiceId(serviceId.getContainerRelativeID());
      }
    }
  }
  return (registration == null) ? null : registration.getReference();
}","/** 
 * @since 3.0
 */
public IRemoteServiceReference getRemoteServiceReference(IRemoteServiceID serviceId){
  ID containerID=serviceId.getContainerID();
  RemoteServiceRegistrationImpl registration=null;
  waitForPendingUpdates(new ID[]{serviceId.getContainerID()},getAddRegistrationRequestTimeout());
  if (this.localRegistry.containerID.equals(containerID)) {
synchronized (localRegistry) {
      registration=localRegistry.findRegistrationForServiceId(serviceId.getContainerRelativeID());
      if (registration != null)       return registration.getReference();
    }
  }
 else {
synchronized (remoteRegistrys) {
      final ArrayList registrys=new ArrayList(remoteRegistrys.values());
      for (final Iterator i=registrys.iterator(); i.hasNext(); ) {
        final RemoteServiceRegistryImpl registry=(RemoteServiceRegistryImpl)i.next();
        registration=registry.findRegistrationForServiceId(serviceId.getContainerRelativeID());
      }
    }
  }
  return (registration == null) ? null : registration.getReference();
}",0.996590355577204
94382,"protected void handleContainerConnectedEvent(IContainerConnectedEvent event){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",event);
  ID targetID=event.getTargetID();
  addPendingContainers(new ID[]{targetID});
  sendRegistryUpdate(targetID);
synchronized (rsConnectLock) {
    rsConnected=true;
    rsConnectLock.notify();
  }
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}","protected void handleContainerConnectedEvent(IContainerConnectedEvent event){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",event);
  ID targetID=event.getTargetID();
  addPendingContainers(new ID[]{targetID});
  sendRegistryUpdate(targetID);
  ID connectedID=getConnectedID();
  if (connectedID != null && connectedID.equals(targetID))   setRegistryConnected(true);
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}",0.8204193254329991
94383,"public void initialize() throws SharedObjectInitException {
  super.initialize();
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  localRegistry=new RemoteServiceRegistryImpl(getLocalContainerID());
  super.addEventProcessor(new IEventProcessor(){
    public boolean processEvent(    Event arg0){
      if (arg0 instanceof IContainerConnectedEvent) {
        handleContainerConnectedEvent((IContainerConnectedEvent)arg0);
      }
 else       if (arg0 instanceof IContainerDisconnectedEvent) {
        handleContainerDisconnectedEvent((IContainerDisconnectedEvent)arg0);
      }
 else       if (arg0 instanceof IContainerEjectedEvent) {
        handleContainerEjectedEvent((IContainerEjectedEvent)arg0);
      }
 else       if (arg0 instanceof ISharedObjectActivatedEvent) {
        if (getSOContext().getConnectedID() != null) {
          addPendingContainers(getGroupMemberIDs());
          sendRegistryUpdateRequest();
        }
      }
      return false;
    }
  }
);
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}","public void initialize() throws SharedObjectInitException {
  super.initialize();
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  localRegistry=new RemoteServiceRegistryImpl(getLocalContainerID());
  super.addEventProcessor(new IEventProcessor(){
    public boolean processEvent(    Event arg0){
      if (arg0 instanceof IContainerConnectedEvent) {
        handleContainerConnectedEvent((IContainerConnectedEvent)arg0);
      }
 else       if (arg0 instanceof IContainerDisconnectedEvent) {
        handleContainerDisconnectedEvent((IContainerDisconnectedEvent)arg0);
      }
 else       if (arg0 instanceof IContainerEjectedEvent) {
        handleContainerEjectedEvent((IContainerEjectedEvent)arg0);
      }
 else       if (arg0 instanceof ISharedObjectActivatedEvent) {
        if (getSOContext().getConnectedID() != null) {
          addPendingContainers(getGroupMemberIDs());
          sendRegistryUpdateRequest();
          setRegistryConnected(true);
        }
      }
      return false;
    }
  }
);
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}",0.9840737636211232
94384,"protected void setupProxies(){
  if (proxy == null) {
    proxy=ProxySetupHelper.getSocksProxy(directoryOrFile);
    if (proxy == null) {
      proxy=ProxySetupHelper.getProxy(directoryOrFile.toExternalForm());
    }
  }
  if (proxy != null)   setupProxy(proxy);
}","protected void setupProxies(){
  if (proxy == null) {
    try {
      proxy=ProxySetupHelper.getSocksProxy(directoryOrFile);
      if (proxy == null) {
        proxy=ProxySetupHelper.getProxy(directoryOrFile.toExternalForm());
      }
    }
 catch (    NoClassDefFoundError e) {
      Activator.logNoProxyWarning(e);
    }
  }
  if (proxy != null)   setupProxy(proxy);
}",0.804416403785489
94385,"protected void setupProxies(){
  if (proxy == null) {
    proxy=ProxySetupHelper.getSocksProxy(getRemoteFileURL());
    if (proxy == null) {
      proxy=ProxySetupHelper.getProxy(getRemoteFileURL().toExternalForm());
    }
  }
  if (proxy != null)   setupProxy(proxy);
}","protected void setupProxies(){
  if (proxy == null) {
    try {
      proxy=ProxySetupHelper.getSocksProxy(getRemoteFileURL());
      if (proxy == null) {
        proxy=ProxySetupHelper.getProxy(getRemoteFileURL().toExternalForm());
      }
    }
 catch (    NoClassDefFoundError e) {
      Activator.logNoProxyWarning(e);
    }
  }
  if (proxy != null)   setupProxy(proxy);
}",0.8080495356037152
94386,"/** 
 * @since 3.0
 */
public AddRegistrationRequest(ID targetID,String service,String filter,AddRegistrationRequest parent){
  this.targetID=null;
  Assert.isNotNull(service);
  this.service=service;
  this.filter=filter;
  this.parent=parent;
}","/** 
 * @since 3.3
 */
public AddRegistrationRequest(String service,String filter,Vector requests){
  this.parent=null;
  this.targetID=null;
  Assert.isNotNull(service);
  this.service=service;
  this.filter=filter;
  this.requests=requests;
  if (requests != null)   requests.add(this);
}",0.5447761194029851
94387,"public void waitForResponse(long timeout){
  long startTime=System.currentTimeMillis();
  long endTime=startTime + timeout;
synchronized (this) {
    while (!done && (endTime >= System.currentTimeMillis())) {
      try {
        wait(timeout / 10);
      }
 catch (      InterruptedException e) {
        return;
      }
    }
  }
}","/** 
 * @since 3.3
 */
public void waitForResponse(long timeout){
  long startTime=System.currentTimeMillis();
  long endTime=startTime + timeout;
synchronized (this) {
    while (!done && (endTime >= System.currentTimeMillis())) {
      try {
        wait(timeout / 10);
      }
 catch (      InterruptedException e) {
        return;
      }
    }
  }
}",0.9665211062590976
94388,"public void start(BundleContext ctxt) throws Exception {
  plugin=this;
  this.context=ctxt;
  this.distributionProvider=new DistributionProviderImpl();
  DiscoveredServiceTrackerImpl dstImpl=new DiscoveredServiceTrackerImpl(this.distributionProvider);
  this.discoveredServiceTrackerRegistration=this.context.registerService(DiscoveredServiceTracker.class.getName(),dstImpl,null);
  final Properties proxyContainerFinderProps=new Properties();
  proxyContainerFinderProps.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  this.proxyrsContainerFinderRegistration=this.context.registerService(IProxyContainerFinder.class.getName(),new DefaultProxyContainerFinder(autoCreateProxyContainer),proxyContainerFinderProps);
  final EventHookImpl hook=new EventHookImpl(distributionProvider);
  this.eventHookRegistration=this.context.registerService(EventHook.class.getName(),hook,null);
  final Properties hostContainerFinderProps=new Properties();
  hostContainerFinderProps.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  this.hostrsContainerFinderRegistration=this.context.registerService(IHostContainerFinder.class.getName(),new DefaultHostContainerFinder(autoCreateHostContainer),hostContainerFinderProps);
  try {
    final ServiceReference[] refs=this.context.getServiceReferences(null,""String_Node_Str"" + IDistributionConstants.SERVICE_EXPORTED_INTERFACES + ""String_Node_Str"");
    if (refs != null) {
      for (int i=0; i < refs.length; i++) {
        hook.handleRegisteredServiceEvent(refs[i],null);
      }
    }
  }
 catch (  InvalidSyntaxException e) {
  }
}","public void start(BundleContext ctxt) throws Exception {
  plugin=this;
  this.context=ctxt;
  this.distributionProvider=new DistributionProviderImpl();
  DiscoveredServiceTrackerImpl dstImpl=new DiscoveredServiceTrackerImpl(this.distributionProvider);
  this.discoveredServiceTrackerRegistration=this.context.registerService(DiscoveredServiceTracker.class.getName(),dstImpl,null);
  final Properties proxyContainerFinderProps=new Properties();
  proxyContainerFinderProps.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  this.proxyrsContainerFinderRegistration=this.context.registerService(IProxyContainerFinder.class.getName(),new DefaultProxyContainerFinder(autoCreateProxyContainer),proxyContainerFinderProps);
  final EventHookImpl hook=new EventHookImpl(distributionProvider);
  this.eventHookRegistration=this.context.registerService(EventHook.class.getName(),hook,null);
  final Properties hostContainerFinderProps=new Properties();
  hostContainerFinderProps.put(Constants.SERVICE_RANKING,new Integer(Integer.MIN_VALUE));
  this.hostrsContainerFinderRegistration=this.context.registerService(IHostContainerFinder.class.getName(),new DefaultHostContainerFinder(autoCreateHostContainer,new String[]{defaultHostConfigType}),hostContainerFinderProps);
  try {
    final ServiceReference[] refs=this.context.getServiceReferences(null,""String_Node_Str"" + IDistributionConstants.SERVICE_EXPORTED_INTERFACES + ""String_Node_Str"");
    if (refs != null) {
      for (int i=0; i < refs.length; i++) {
        hook.handleRegisteredServiceEvent(refs[i],null);
      }
    }
  }
 catch (  InvalidSyntaxException e) {
  }
}",0.9888544891640868
94389,"private Dictionary getServicePublicationProperties(IRemoteServiceContainer rsContainer,ServiceReference ref,String[] remoteInterfaces,IRemoteServiceRegistration remoteRegistration,String[] serviceIntents,String[] supportedConfigs,Dictionary remoteProperties){
  final Dictionary result=new Properties();
  IContainer container=rsContainer.getContainer();
  result.put(RemoteServicePublication.SERVICE_INTERFACE_NAME,getAsCollection(remoteInterfaces));
  if (supportedConfigs != null)   result.put(RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS,getAsCollection(supportedConfigs));
  if (serviceIntents != null) {
    result.put(RemoteServicePublication.ENDPOINT_SERVICE_INTENTS,getAsCollection(serviceIntents));
  }
  result.put(RemoteServicePublication.SERVICE_PROPERTIES,remoteProperties);
  ID endpointID=container.getID();
  result.put(RemoteServicePublication.ENDPOINT_CONTAINERID,endpointID);
  ID targetID=container.getConnectedID();
  if (targetID != null && !targetID.equals(endpointID)) {
    result.put(RemoteServicePublication.TARGET_CONTAINERID,targetID);
  }
  Namespace rsnamespace=rsContainer.getContainerAdapter().getRemoteServiceNamespace();
  if (rsnamespace != null)   result.put(Constants.SERVICE_NAMESPACE,rsnamespace.getName());
  Long serviceId=(Long)remoteRegistration.getProperty(Constants.SERVICE_ID);
  byte[] serviceIdAsBytes=null;
  if (serviceId != null) {
    serviceIdAsBytes=serviceId.toString().getBytes();
  }
 else {
    logError(""String_Node_Str"",""String_Node_Str"" + remoteRegistration);
    serviceIdAsBytes=""String_Node_Str"".getBytes();
  }
  result.put(Constants.SERVICE_ID,serviceIdAsBytes);
  return result;
}","private Dictionary getServicePublicationProperties(IRemoteServiceContainer rsContainer,ServiceReference ref,String[] remoteInterfaces,IRemoteServiceRegistration remoteRegistration,String[] serviceIntents,String[] supportedConfigs,Dictionary remoteProperties){
  final Dictionary result=new Properties();
  IContainer container=rsContainer.getContainer();
  result.put(RemoteServicePublication.SERVICE_INTERFACE_NAME,getAsCollection(remoteInterfaces));
  if (supportedConfigs == null)   supportedConfigs=getSupportedConfigs(rsContainer);
  result.put(RemoteServicePublication.ENDPOINT_SUPPORTED_CONFIGS,getAsCollection(supportedConfigs));
  if (serviceIntents != null)   result.put(RemoteServicePublication.ENDPOINT_SERVICE_INTENTS,getAsCollection(serviceIntents));
  result.put(RemoteServicePublication.SERVICE_PROPERTIES,remoteProperties);
  ID endpointID=container.getID();
  result.put(RemoteServicePublication.ENDPOINT_CONTAINERID,endpointID);
  ID targetID=container.getConnectedID();
  if (targetID != null && !targetID.equals(endpointID)) {
    result.put(RemoteServicePublication.TARGET_CONTAINERID,targetID);
  }
  Namespace rsnamespace=rsContainer.getContainerAdapter().getRemoteServiceNamespace();
  if (rsnamespace != null)   result.put(Constants.SERVICE_NAMESPACE,rsnamespace.getName());
  Long serviceId=(Long)remoteRegistration.getProperty(Constants.SERVICE_ID);
  byte[] serviceIdAsBytes=null;
  if (serviceId != null) {
    serviceIdAsBytes=serviceId.toString().getBytes();
  }
 else {
    logError(""String_Node_Str"",""String_Node_Str"" + remoteRegistration);
    serviceIdAsBytes=""String_Node_Str"".getBytes();
  }
  result.put(Constants.SERVICE_ID,serviceIdAsBytes);
  return result;
}",0.8876973488233542
94390,"protected boolean matchHostSupportedConfigTypes(String[] serviceRequiredConfigTypes,ContainerTypeDescription containerTypeDescription){
  if (serviceRequiredConfigTypes == null)   return true;
  String[] supportedConfigTypes=getSupportedConfigTypes(containerTypeDescription);
  if (supportedConfigTypes == null)   return false;
  List supportedConfigTypeList=Arrays.asList(supportedConfigTypes);
  boolean result=true;
  for (int i=0; i < serviceRequiredConfigTypes.length; i++)   result=result && supportedConfigTypeList.contains(serviceRequiredConfigTypes[i]);
  return result;
}","protected boolean matchHostSupportedConfigTypes(String[] serviceRequiredConfigTypes,ContainerTypeDescription containerTypeDescription){
  String[] supportedConfigTypes=getSupportedConfigTypes(containerTypeDescription);
  if (supportedConfigTypes == null || supportedConfigTypes.length == 0)   return false;
  List supportedConfigTypesList=Arrays.asList(supportedConfigTypes);
  if (serviceRequiredConfigTypes == null)   return matchDefaultConfigTypes(supportedConfigTypesList);
  boolean result=true;
  List requiredConfigTypesList=Arrays.asList(serviceRequiredConfigTypes);
  for (Iterator i=requiredConfigTypesList.iterator(); i.hasNext(); )   result=result && supportedConfigTypesList.contains(i.next());
  if (!result) {
    if (!requiredConfigTypesList.contains(NODEFAULT))     return matchDefaultConfigTypes(supportedConfigTypesList);
  }
  return result;
}",0.5831024930747922
94391,"public DefaultHostContainerFinder(boolean autoCreateContainer){
  this.autoCreateContainer=autoCreateContainer;
}","public DefaultHostContainerFinder(boolean autoCreateContainer,String[] defaultConfigTypes){
  super(defaultConfigTypes);
  this.autoCreateContainer=autoCreateContainer;
}",0.7985865724381626
94392,"protected void handleCallRequest(Request request){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",request);
  final ID responseTarget=request.getRequestContainerID();
  final RemoteServiceRegistrationImpl localRegistration=getLocalRegistrationForRequest(request);
  final RemoteCallImpl call=request.getCall();
  Response response=null;
  Object result=null;
  try {
    result=localRegistration.callService(call);
    response=new Response(request.getRequestId(),result);
  }
 catch (  final Exception e) {
    response=new Response(request.getRequestId(),e);
    log(SERVICE_INVOKE_ERROR_CODE,SERVICE_INVOKE_ERROR_MESSAGE,e);
  }
  sendCallResponse(responseTarget,response);
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}","protected void handleCallRequest(Request request){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",request);
  final ID responseTarget=request.getRequestContainerID();
  final RemoteServiceRegistrationImpl localRegistration=getLocalRegistrationForRequest(request);
  final RemoteCallImpl call=request.getCall();
  Response response=null;
  Object result=null;
  try {
    result=localRegistration.callService(call);
    response=new Response(request.getRequestId(),result);
  }
 catch (  final Exception e) {
    response=new Response(request.getRequestId(),getSerializableException(e));
    log(SERVICE_INVOKE_ERROR_CODE,SERVICE_INVOKE_ERROR_MESSAGE,e);
  }
  sendCallResponse(responseTarget,response);
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}",0.9842696629213484
94393,"/** 
 * @throws CredentialsNotAvailableException  
 */
public Credentials getCredentials(AuthScheme scheme,String host,int port,boolean isProxyAuthenticating) throws CredentialsNotAvailableException {
  if (!isProxyAuthenticating) {
    return null;
  }
  Proxy proxy=getECFProxy();
  if (proxy == null) {
    return null;
  }
  if (""String_Node_Str"".equalsIgnoreCase(scheme.getSchemeName())) {
    return getNTLMCredentials(proxy);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(scheme.getSchemeName()) || ""String_Node_Str"".equalsIgnoreCase(scheme.getSchemeName())) {
    final String proxyUsername=proxy.getUsername();
    final String proxyPassword=proxy.getPassword();
    if (proxyUsername != null) {
      Credentials credentials=new UsernamePasswordCredentials(proxyUsername,proxyPassword);
      return credentials;
    }
  }
  return null;
}","/** 
 * @throws CredentialsNotAvailableException  
 */
public Credentials getCredentials(AuthScheme scheme,String host,int port,boolean isProxyAuthenticating) throws CredentialsNotAvailableException {
  if (!isProxyAuthenticating) {
    return null;
  }
  Proxy proxy=getECFProxy();
  if (proxy == null) {
    return null;
  }
  Object provideKey=makeProvidedKey(scheme,host,port,isProxyAuthenticating);
  if (provided.contains(provideKey)) {
    return null;
  }
  provided.add(provideKey);
  if (""String_Node_Str"".equalsIgnoreCase(scheme.getSchemeName())) {
    return getNTLMCredentials(proxy);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(scheme.getSchemeName()) || ""String_Node_Str"".equalsIgnoreCase(scheme.getSchemeName())) {
    final String proxyUsername=proxy.getUsername();
    final String proxyPassword=proxy.getPassword();
    if (proxyUsername != null) {
      Credentials credentials=new UsernamePasswordCredentials(proxyUsername,proxyPassword);
      return credentials;
    }
  }
  return null;
}",0.9119060331019756
94394,"protected void setupProxies(){
  if (proxy == null) {
    try {
      IProxyService proxyService=Activator.getDefault().getProxyService();
      if (proxyService != null && proxyService.isProxiesEnabled()) {
        URI target=new URI(directoryOrFile.toExternalForm());
        final IProxyData[] proxies=proxyService.select(target);
        IProxyData selectedProxy=selectProxyFromProxies(target.getScheme(),proxies);
        if (selectedProxy != null) {
          proxy=new Proxy(((selectedProxy.getType().equalsIgnoreCase(IProxyData.SOCKS_PROXY_TYPE)) ? Proxy.Type.SOCKS : Proxy.Type.HTTP),new ProxyAddress(selectedProxy.getHost(),selectedProxy.getPort()),selectedProxy.getUserId(),selectedProxy.getPassword());
        }
      }
    }
 catch (    Exception e) {
      Activator.logNoProxyWarning(e);
    }
catch (    NoClassDefFoundError e) {
      Activator.logNoProxyWarning(e);
    }
  }
  if (proxy != null)   setupProxy(proxy);
}","protected void setupProxies(){
  if (proxy == null) {
    proxy=ProxySetupHelper.getProxy(directoryOrFile.toExternalForm());
  }
  if (proxy != null)   setupProxy(proxy);
}",0.2936936936936937
94395,"/** 
 * Select a single proxy from a set of proxies available for the given host.  This implementation selects in the following manner:  1) If proxies provided is null or array of 0 length, null  is returned.  If only one proxy is available (array of length 1) then the entry is returned. If proxies provided is length > 1, then if the type of a proxy in the array matches the given protocol (e.g. http, https), then the first matching proxy is returned.  If the protocol does not match any of the proxies, then the *first* proxy (i.e. proxies[0]) is returned.  Subclasses may override if desired.
 * @param protocol the target protocol (e.g. http, https, scp, etc).  Will not be <code>null</code>.
 * @param proxies the proxies to select from.  May be <code>null</code> or array of length 0.
 * @return proxy data selected from the proxies provided.  
 */
protected IProxyData selectProxyFromProxies(String protocol,IProxyData[] proxies){
  if (proxies == null || proxies.length == 0)   return null;
  if (proxies.length == 1)   return proxies[0];
  if (protocol.equalsIgnoreCase(""String_Node_Str"")) {
    for (int i=0; i < proxies.length; i++) {
      if (proxies[i].getType().equals(IProxyData.HTTP_PROXY_TYPE))       return proxies[i];
    }
  }
 else   if (protocol.equalsIgnoreCase(""String_Node_Str"")) {
    for (int i=0; i < proxies.length; i++) {
      if (proxies[i].getType().equals(IProxyData.HTTPS_PROXY_TYPE))       return proxies[i];
    }
  }
  return proxies[0];
}","/** 
 * Select a single proxy from a set of proxies available for the given host.  This implementation selects in the following manner:  1) If proxies provided is null or array of 0 length, null  is returned.  If only one proxy is available (array of length 1) then the entry is returned. If proxies provided is length > 1, then if the type of a proxy in the array matches the given protocol (e.g. http, https), then the first matching proxy is returned.  If the protocol does not match any of the proxies, then the *first* proxy (i.e. proxies[0]) is returned.  Subclasses may override if desired.
 * @param protocol the target protocol (e.g. http, https, scp, etc).  Will not be <code>null</code>.
 * @param proxies the proxies to select from.  May be <code>null</code> or array of length 0.
 * @return proxy data selected from the proxies provided.  
 */
protected IProxyData selectProxyFromProxies(String protocol,IProxyData[] proxies){
  return ProxySetupHelper.selectProxyFromProxies(protocol,proxies);
}",0.7633587786259542
94396,"protected void setupProxies(){
  if (proxy == null) {
    try {
      IProxyService proxyService=Activator.getDefault().getProxyService();
      if (proxyService != null && proxyService.isProxiesEnabled()) {
        URI target=new URI(getRemoteFileURL().toExternalForm());
        String type=IProxyData.SOCKS_PROXY_TYPE;
        if (target.getScheme().equalsIgnoreCase(IProxyData.HTTP_PROXY_TYPE)) {
          type=IProxyData.HTTP_PROXY_TYPE;
        }
 else         if (target.getScheme().equalsIgnoreCase(IProxyData.HTTPS_PROXY_TYPE)) {
          type=IProxyData.HTTPS_PROXY_TYPE;
        }
        final IProxyData[] proxyDatas=proxyService.select(target);
        final IProxyData proxyData=selectProxyFromProxies(target.getScheme(),proxyDatas);
        if (proxyData != null) {
          proxy=new Proxy(((type.equalsIgnoreCase(IProxyData.SOCKS_PROXY_TYPE)) ? Proxy.Type.SOCKS : Proxy.Type.HTTP),new ProxyAddress(proxyData.getHost(),proxyData.getPort()),proxyData.getUserId(),proxyData.getPassword());
        }
      }
    }
 catch (    Exception e) {
      Activator.logNoProxyWarning(e);
    }
catch (    NoClassDefFoundError e) {
      Activator.logNoProxyWarning(e);
    }
  }
  if (proxy != null)   setupProxy(proxy);
}","protected void setupProxies(){
  if (proxy == null) {
    proxy=ProxySetupHelper.getProxy(getRemoteFileURL().toExternalForm());
  }
  if (proxy != null)   setupProxy(proxy);
}",0.2361308677098151
94397,"protected void setupProxies(){
  if (proxy == null) {
    try {
      IProxyService proxyService=Activator.getDefault().getProxyService();
      if (proxyService != null && proxyService.isProxiesEnabled()) {
        URI target=new URI(getRemoteFileURL().toExternalForm());
        final IProxyData[] proxies=proxyService.select(target);
        IProxyData selectedProxy=selectProxyFromProxies(target.getScheme(),proxies);
        if (selectedProxy != null) {
          proxy=new Proxy(((selectedProxy.getType().equalsIgnoreCase(IProxyData.SOCKS_PROXY_TYPE)) ? Proxy.Type.SOCKS : Proxy.Type.HTTP),new ProxyAddress(selectedProxy.getHost(),selectedProxy.getPort()),selectedProxy.getUserId(),selectedProxy.getPassword());
        }
      }
    }
 catch (    Exception e) {
      Activator.logNoProxyWarning(e);
    }
catch (    NoClassDefFoundError e) {
      Activator.logNoProxyWarning(e);
    }
  }
  if (proxy != null)   setupProxy(proxy);
}","protected void setupProxies(){
  if (proxy == null) {
    proxy=ProxySetupHelper.getProxy(getRemoteFileURL().toExternalForm());
  }
  if (proxy != null)   setupProxy(proxy);
}",0.2974910394265233
94398,"public void setupProxy(final Proxy proxy2){
  Properties systemProperties=System.getProperties();
  proxyHostProperty=(proxy2.getType().equals(Proxy.Type.HTTP)) ? HTTP_PROXY_HOST_SYSTEM_PROPERTY : SOCKS_PROXY_HOST_SYSTEM_PROPERTY;
  proxyPortProperty=(proxy2.getType().equals(Proxy.Type.HTTP)) ? HTTP_PROXY_PORT_SYSTEM_PROPERTY : SOCKS_PROXY_PORT_SYSTEM_PROPERTY;
  oldHost=systemProperties.getProperty(proxyHostProperty);
  if (oldHost != null) {
    oldPort=systemProperties.getProperty(proxyPortProperty);
  }
  systemProperties.setProperty(proxyHostProperty,proxy2.getAddress().getHostName());
  int proxyPort=proxy2.getAddress().getPort();
  if (proxyPort != -1)   systemProperties.setProperty(proxyPortProperty,proxyPort + ""String_Node_Str"");
  final String username=proxy2.getUsername();
  if (username != null && !username.equals(""String_Node_Str"")) {
    final String password=(proxy2.getPassword() == null) ? ""String_Node_Str"" : proxy2.getPassword();
    if (proxy2.hasCredentials()) {
      Authenticator.setDefault(new Authenticator(){
        protected PasswordAuthentication getPasswordAuthentication(){
          return new PasswordAuthentication(username,password.toCharArray());
        }
      }
);
    }
  }
}","public void setupProxy(final Proxy proxy2){
  Properties systemProperties=System.getProperties();
  proxyHostProperty=(proxy2.getType().equals(Proxy.Type.HTTP)) ? HTTP_PROXY_HOST_SYSTEM_PROPERTY : SOCKS_PROXY_HOST_SYSTEM_PROPERTY;
  proxyPortProperty=(proxy2.getType().equals(Proxy.Type.HTTP)) ? HTTP_PROXY_PORT_SYSTEM_PROPERTY : SOCKS_PROXY_PORT_SYSTEM_PROPERTY;
  oldHost=systemProperties.getProperty(proxyHostProperty);
  if (oldHost != null) {
    oldPort=systemProperties.getProperty(proxyPortProperty);
  }
  systemProperties.setProperty(proxyHostProperty,proxy2.getAddress().getHostName());
  int proxyPort=proxy2.getAddress().getPort();
  if (proxyPort != -1)   systemProperties.setProperty(proxyPortProperty,proxyPort + ""String_Node_Str"");
  final String username=proxy2.getUsername();
  boolean setAuthenticator=false;
  if (username != null && !username.equals(""String_Node_Str"")) {
    final String password=(proxy2.getPassword() == null) ? ""String_Node_Str"" : proxy2.getPassword();
    if (proxy2.hasCredentials()) {
      Authenticator.setDefault(new Authenticator(){
        protected PasswordAuthentication getPasswordAuthentication(){
          return new PasswordAuthentication(username,password.toCharArray());
        }
      }
);
      setAuthenticator=true;
    }
  }
  if (!setAuthenticator) {
    Authenticator.setDefault(new Authenticator(){
      protected PasswordAuthentication getPasswordAuthentication(){
        return null;
      }
    }
);
  }
}",0.9076127124907613
94399,"protected PasswordAuthentication getPasswordAuthentication(){
  return new PasswordAuthentication(username,password.toCharArray());
}","protected PasswordAuthentication getPasswordAuthentication(){
  return null;
}",0.7203791469194313
94400,"/** 
 * This method will be invoked by an arbitrary thread when an asynchronous remote service call fails.  Only this method xor   {@link #onSuccess(Object)} will be calledfor a given remote call.
 * @param t any exception associated with the failure.  Will not be <code>null</code>.
 */
public void onFailure(Throwable exception);","/** 
 * This method will be invoked by an arbitrary thread when an asynchronous remote service call fails.  Only this method xor   {@link #onSuccess(Object)} will be calledfor a given remote call.
 * @param exception any exception associated with the failure.  Will not be <code>null</code>.
 */
public void onFailure(Throwable exception);",0.9850746268656716
94401,"private synchronized List getRemoteServiceReferencesConnected(final String clazz,IRemoteFilter filter){
  List results=new ArrayList();
  final RemoteServiceReference[] refs=remoteService.getRemoteServiceReferences(connectedID.getURI(),clazz,filter);
  if (refs == null)   return results;
  for (int i=0; i < refs.length; i++)   results.add(new RemoteServiceReferenceImpl(createRemoteServiceID(refs[i]),refs[i]));
  return results;
}","private synchronized List getRemoteServiceReferencesConnected(final String clazz,IRemoteFilter filter){
  List results=new ArrayList();
  if (connectedID == null) {
    try {
      IRemoteServiceReference[] refs=getAllRemoteServiceReferences(clazz,(filter == null) ? null : filter.toString());
      if (refs == null)       return results;
      for (int i=0; i < refs.length; i++)       results.add(refs[i]);
    }
 catch (    InvalidSyntaxException e) {
    }
  }
 else {
    RemoteServiceReference[] rrefs=remoteService.getRemoteServiceReferences(connectedID.getURI(),clazz,filter);
    if (rrefs == null)     return results;
    for (int i=0; i < rrefs.length; i++)     results.add(new RemoteServiceReferenceImpl(createRemoteServiceID(rrefs[i]),rrefs[i]));
  }
  return results;
}",0.6162695152013147
94402,"public String getScheme(){
  return LongID.class.toString();
}","public String getScheme(){
  return LongID.class.getName();
}",0.8943089430894309
94403,"protected void handleAddRegistration(ID remoteContainerID,Integer requestId,final RemoteServiceRegistrationImpl registration){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),ADD_REGISTRATION,new Object[]{remoteContainerID,registration});
  if (remoteContainerID == null || getLocalContainerID().equals(remoteContainerID)) {
    return;
  }
  boolean added=false;
synchronized (remoteRegistrys) {
    RemoteServiceRegistryImpl registry=getRemoteRegistry(remoteContainerID);
    if (registry == null) {
      registry=new RemoteServiceRegistryImpl(remoteContainerID);
      addRemoteRegistry(registry);
    }
    RemoteServiceRegistrationImpl[] regs=registry.getRegistrations();
    List regList=Arrays.asList(regs);
    if (!regList.contains(registration)) {
      added=true;
      registry.publishService(registration);
      localRegisterService(registration);
    }
    notifyAddRegistrationResponse(remoteContainerID,requestId,null);
  }
  if (added)   fireRemoteServiceListeners(createRegisteredEvent(registration));
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),ADD_REGISTRATION);
}","protected void handleAddRegistration(ID remoteContainerID,Integer requestId,final RemoteServiceRegistrationImpl registration){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),ADD_REGISTRATION,new Object[]{remoteContainerID,registration});
  ID localContainerID=getLocalContainerID();
  if (remoteContainerID == null || localContainerID == null || localContainerID.equals(remoteContainerID)) {
    return;
  }
  boolean added=false;
synchronized (remoteRegistrys) {
    RemoteServiceRegistryImpl registry=getRemoteRegistry(remoteContainerID);
    if (registry == null) {
      registry=new RemoteServiceRegistryImpl(remoteContainerID);
      addRemoteRegistry(registry);
    }
    RemoteServiceRegistrationImpl[] regs=registry.getRegistrations();
    List regList=Arrays.asList(regs);
    if (!regList.contains(registration)) {
      added=true;
      registry.publishService(registration);
      localRegisterService(registration);
    }
    notifyAddRegistrationResponse(remoteContainerID,requestId,null);
  }
  if (added)   fireRemoteServiceListeners(createRegisteredEvent(registration));
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),ADD_REGISTRATION);
}",0.967663702506063
94404,"protected void handleRegistryUpdateRequest(ID remoteContainerID){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),REGISTRY_UPDATE_REQUEST);
  if (remoteContainerID == null || getLocalContainerID().equals(remoteContainerID)) {
    return;
  }
  sendRegistryUpdate(remoteContainerID);
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),REGISTRY_UPDATE_REQUEST);
}","protected void handleRegistryUpdateRequest(ID remoteContainerID){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),REGISTRY_UPDATE_REQUEST);
  ID localContainerID=getLocalContainerID();
  if (remoteContainerID == null || localContainerID == null || localContainerID.equals(remoteContainerID)) {
    return;
  }
  sendRegistryUpdate(remoteContainerID);
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),REGISTRY_UPDATE_REQUEST);
}",0.8908730158730159
94405,"protected void createAndInitializeServer(String path,int keepAlive) throws IDCreateException {
  if (path == null || path.equals(""String_Node_Str""))   throw new NullPointerException(""String_Node_Str"");
  GenericServerContainer s=new GenericServerContainer(this,createServerConfig(path),serverGroup,path,keepAlive);
  IContainerManager containerManager=Activator.getDefault().getContainerManager();
  ContainerTypeDescription ctd=containerManager.getContainerFactory().getDescriptionByName(""String_Node_Str"");
  containerManager.addContainer(s,ctd);
  IConnectHandlerPolicy policy=createConnectHandlerPolicy(s,path);
  if (policy != null)   s.setConnectPolicy(policy);
}","protected void createAndInitializeServer(String path,int keepAlive) throws IDCreateException {
  if (path == null || path.equals(""String_Node_Str""))   throw new NullPointerException(""String_Node_Str"");
  GenericServerContainer s=new GenericServerContainer(this,createServerConfig(path),serverGroup,path,keepAlive);
  IContainerManager containerManager=Activator.getDefault().getContainerManager();
  if (containerManager != null) {
    ContainerTypeDescription ctd=containerManager.getContainerFactory().getDescriptionByName(""String_Node_Str"");
    containerManager.addContainer(s,ctd);
  }
  IConnectHandlerPolicy policy=createConnectHandlerPolicy(s,path);
  if (policy != null)   s.setConnectPolicy(policy);
}",0.9695652173913044
94406,"private TCPServerSOContainer createServerContainer(String id,TCPServerSOContainerGroup group,String path,int keepAlive) throws IDCreateException {
  final ID newServerID=IDFactory.getDefault().createStringID(id);
  TCPServerSOContainer container=new TCPServerSOContainer(new SOContainerConfig(newServerID),group,path,keepAlive);
  IContainerManager containerManager=Activator.getDefault().getContainerManager();
  ContainerTypeDescription ctd=containerManager.getContainerFactory().getDescriptionByName(""String_Node_Str"");
  containerManager.addContainer(container,ctd);
  return container;
}","private TCPServerSOContainer createServerContainer(String id,TCPServerSOContainerGroup group,String path,int keepAlive) throws IDCreateException {
  final ID newServerID=IDFactory.getDefault().createStringID(id);
  TCPServerSOContainer container=new TCPServerSOContainer(new SOContainerConfig(newServerID),group,path,keepAlive);
  IContainerManager containerManager=Activator.getDefault().getContainerManager();
  if (containerManager != null) {
    ContainerTypeDescription ctd=containerManager.getContainerFactory().getDescriptionByName(""String_Node_Str"");
    containerManager.addContainer(container,ctd);
  }
  return container;
}",0.965742251223491
94407,"protected void createAndInitializeServer(String path,int keepAlive) throws IDCreateException {
  if (path == null || path.equals(""String_Node_Str""))   throw new NullPointerException(""String_Node_Str"");
  GenericServerContainer s=new GenericServerContainer(this,createServerConfig(path),serverGroup,path,keepAlive);
  Activator.getDefault().getContainerManager().addContainer(s,new ContainerTypeDescription(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  IConnectHandlerPolicy policy=createConnectHandlerPolicy(s,path);
  if (policy != null)   s.setConnectPolicy(policy);
}","protected void createAndInitializeServer(String path,int keepAlive) throws IDCreateException {
  if (path == null || path.equals(""String_Node_Str""))   throw new NullPointerException(""String_Node_Str"");
  GenericServerContainer s=new GenericServerContainer(this,createServerConfig(path),serverGroup,path,keepAlive);
  IContainerManager containerManager=Activator.getDefault().getContainerManager();
  ContainerTypeDescription ctd=containerManager.getContainerFactory().getDescriptionByName(""String_Node_Str"");
  containerManager.addContainer(s,ctd);
  IConnectHandlerPolicy policy=createConnectHandlerPolicy(s,path);
  if (policy != null)   s.setConnectPolicy(policy);
}",0.8226837060702875
94408,"private TCPServerSOContainer createServerContainer(String id,TCPServerSOContainerGroup group,String path,int keepAlive) throws IDCreateException {
  final ID newServerID=IDFactory.getDefault().createStringID(id);
  return new TCPServerSOContainer(new SOContainerConfig(newServerID),group,path,keepAlive);
}","private TCPServerSOContainer createServerContainer(String id,TCPServerSOContainerGroup group,String path,int keepAlive) throws IDCreateException {
  final ID newServerID=IDFactory.getDefault().createStringID(id);
  TCPServerSOContainer container=new TCPServerSOContainer(new SOContainerConfig(newServerID),group,path,keepAlive);
  IContainerManager containerManager=Activator.getDefault().getContainerManager();
  ContainerTypeDescription ctd=containerManager.getContainerFactory().getDescriptionByName(""String_Node_Str"");
  containerManager.addContainer(container,ctd);
  return container;
}",0.6659242761692651
94409,"RoomInfo(DiscoverInfo info){
  super();
  this.room=info.getFrom();
  this.membersOnly=info.containsFeature(""String_Node_Str"");
  this.moderated=info.containsFeature(""String_Node_Str"");
  this.nonanonymous=info.containsFeature(""String_Node_Str"");
  this.passwordProtected=info.containsFeature(""String_Node_Str"");
  this.persistent=info.containsFeature(""String_Node_Str"");
  Form form=Form.getFormFrom(info);
  if (form != null) {
    this.description=(String)form.getField(""String_Node_Str"").getValues().next();
    this.subject=(String)form.getField(""String_Node_Str"").getValues().next();
    this.occupantsCount=Integer.parseInt((String)form.getField(""String_Node_Str"").getValues().next());
  }
}","RoomInfo(DiscoverInfo info){
  super();
  this.room=info.getFrom();
  this.membersOnly=info.containsFeature(""String_Node_Str"");
  this.moderated=info.containsFeature(""String_Node_Str"");
  this.nonanonymous=info.containsFeature(""String_Node_Str"");
  this.passwordProtected=info.containsFeature(""String_Node_Str"");
  this.persistent=info.containsFeature(""String_Node_Str"");
  Form form=Form.getFormFrom(info);
  if (form != null) {
    FormField formField=form.getField(""String_Node_Str"");
    this.description=(String)((formField == null) ? null : formField.getValues().next());
    formField=form.getField(""String_Node_Str"");
    this.subject=(String)((formField == null) ? null : formField.getValues().next());
    formField=form.getField(""String_Node_Str"");
    this.occupantsCount=(formField == null) ? 0 : Integer.parseInt((String)formField.getValues().next());
  }
}",0.7355003186743149
94410,"/** 
 * call the service synchronously.
 * @param call the call object.
 * @return the result or <code>null</code>
 * @see org.eclipse.ecf.remoteservice.IRemoteService#callSync(org.eclipse.ecf.remoteservice.IRemoteCall)
 */
public Object callSync(final IRemoteCall call) throws ECFException {
  final Class[] formalParams=new Class[call.getParameters().length];
  for (int i=0; i < formalParams.length; i++) {
    formalParams[i]=call.getParameters()[i].getClass();
  }
  try {
    return service.getClass().getMethod(call.getMethod(),formalParams).invoke(service,call.getParameters());
  }
 catch (  Throwable t) {
    throw new ECFException(""String_Node_Str"",t);
  }
}","/** 
 * call the service synchronously.
 * @param call the call object.
 * @return the result or <code>null</code>
 * @see org.eclipse.ecf.remoteservice.IRemoteService#callSync(org.eclipse.ecf.remoteservice.IRemoteCall)
 */
public Object callSync(final IRemoteCall call) throws ECFException {
  final Class[] formalParams=new Class[call.getParameters().length];
  for (int i=0; i < formalParams.length; i++) {
    formalParams[i]=call.getParameters()[i].getClass();
  }
  IExecutor executor=new ThreadsExecutor();
  IFuture future=executor.execute(new IProgressRunnable(){
    public Object run(    IProgressMonitor monitor) throws Exception {
      return service.getClass().getMethod(call.getMethod(),formalParams).invoke(service,call.getParameters());
    }
  }
,null);
  Object result=null;
  try {
    result=future.get(call.getTimeout());
  }
 catch (  OperationCanceledException e) {
    throw new ECFException(""String_Node_Str"",e);
  }
catch (  InterruptedException e) {
    return null;
  }
catch (  TimeoutException e) {
    throw new ECFException(NLS.bind(""String_Node_Str"",Long.toString(call.getTimeout())),new TimeoutException(call.getTimeout()));
  }
  return result;
}",0.6972477064220184
94411,"/** 
 * Initialization method called by Activator.
 */
public void init(){
  log(LogService.LOG_DEBUG,""String_Node_Str"");
  bt=new BundleTracker(context,36,new BundleTrackerImpl(this));
  bt.open();
  discoTrackerCustomizer=new DSTTracker(context);
  discoTracker=new ServiceTracker(context,DiscoveredServiceTracker.class.getName(),discoTrackerCustomizer);
  discoTracker.open();
  spTracker=new ServiceTracker(context,ServicePublication.class.getName(),new ServicePublicationTracker(context,this));
  spTracker.open();
}","/** 
 * Initialization method called by Activator.
 */
public void init(){
  log(LogService.LOG_DEBUG,""String_Node_Str"");
  discoTrackerCustomizer=new DSTTracker(context);
  discoTracker=new ServiceTracker(context,DiscoveredServiceTracker.class.getName(),discoTrackerCustomizer);
  discoTracker.open();
  spTracker=new ServiceTracker(context,ServicePublication.class.getName(),new ServicePublicationTracker(context,this));
  spTracker.open();
  bt=new BundleTracker(context,36,new BundleTrackerImpl(this));
  bt.open();
}",0.3838771593090211
94412,"/** 
 * the method is called when the R-OSGi bundle is about to be stopped. removes all registered proxy bundles.
 */
void cleanup(){
  final ChannelEndpoint[] c=(ChannelEndpoint[])channels.values().toArray(new ChannelEndpoint[channels.size()]);
  channels.clear();
  for (int i=0; i < c.length; i++) {
    c[i].dispose();
  }
  final Object[] factories=networkChannelFactoryTracker.getServices();
  for (int i=0; i < factories.length; i++) {
    try {
      ((NetworkChannelFactory)factories[i]).deactivate(this);
    }
 catch (    final IOException ioe) {
      if (log != null) {
        log.log(LogService.LOG_ERROR,ioe.getMessage(),ioe);
      }
    }
  }
  eventAdminTracker.close();
  remoteServiceTracker.close();
  serviceDiscoveryHandlerTracker.close();
  remoteServiceListenerTracker.close();
  networkChannelFactoryTracker.close();
}","/** 
 * the method is called when the R-OSGi bundle is about to be stopped. removes all registered proxy bundles.
 */
void cleanup(){
  final ChannelEndpoint[] c=(ChannelEndpoint[])channels.values().toArray(new ChannelEndpoint[channels.size()]);
  channels.clear();
  for (int i=0; i < c.length; i++) {
    c[i].dispose();
  }
  final Object[] factories=networkChannelFactoryTracker.getServices();
  if (factories != null) {
    for (int i=0; i < factories.length; i++) {
      try {
        ((NetworkChannelFactory)factories[i]).deactivate(this);
      }
 catch (      final IOException ioe) {
        if (log != null) {
          log.log(LogService.LOG_ERROR,ioe.getMessage(),ioe);
        }
      }
    }
  }
  eventAdminTracker.close();
  remoteServiceTracker.close();
  serviceDiscoveryHandlerTracker.close();
  remoteServiceListenerTracker.close();
  networkChannelFactoryTracker.close();
}",0.970706490522688
94413,"/** 
 * call the service synchronously.
 * @param call the call object.
 * @return the result or <code>null</code>
 * @see org.eclipse.ecf.remoteservice.IRemoteService#callSync(org.eclipse.ecf.remoteservice.IRemoteCall)
 */
public Object callSync(final IRemoteCall call) throws ECFException {
  final Class[] formalParams=new Class[call.getParameters().length];
  for (int i=0; i < formalParams.length; i++) {
    formalParams[i]=call.getParameters()[i].getClass();
  }
  IExecutor executor=new ThreadsExecutor();
  IFuture future=executor.execute(new IProgressRunnable(){
    public Object run(    IProgressMonitor monitor) throws Exception {
      return service.getClass().getMethod(call.getMethod(),formalParams).invoke(service,call.getParameters());
    }
  }
,null);
  Object result=null;
  try {
    result=future.get(call.getTimeout());
  }
 catch (  OperationCanceledException e) {
    throw new ECFException(""String_Node_Str"",e);
  }
catch (  InterruptedException e) {
    return null;
  }
catch (  TimeoutException e) {
    throw new ECFException(NLS.bind(""String_Node_Str"",Long.toString(call.getTimeout())),new TimeoutException(call.getTimeout()));
  }
  return result;
}","/** 
 * call the service synchronously.
 * @param call the call object.
 * @return the result or <code>null</code>
 * @see org.eclipse.ecf.remoteservice.IRemoteService#callSync(org.eclipse.ecf.remoteservice.IRemoteCall)
 */
public Object callSync(final IRemoteCall call) throws ECFException {
  final Class[] formalParams=new Class[call.getParameters().length];
  for (int i=0; i < formalParams.length; i++) {
    formalParams[i]=call.getParameters()[i].getClass();
  }
  IExecutor executor=new ThreadsExecutor();
  IFuture future=executor.execute(new IProgressRunnable(){
    public Object run(    IProgressMonitor monitor) throws Exception {
      return service.getClass().getMethod(call.getMethod(),formalParams).invoke(service,call.getParameters());
    }
  }
,null);
  Object result=null;
  try {
    result=future.get(call.getTimeout());
  }
 catch (  OperationCanceledException e) {
    throw new ECFException(""String_Node_Str"",e);
  }
catch (  InterruptedException e) {
    return null;
  }
catch (  TimeoutException e) {
    throw new ECFException(NLS.bind(""String_Node_Str"",Long.toString(call.getTimeout())),new TimeoutException(call.getTimeout()));
  }
  IStatus status=future.getStatus();
  if (!status.isOK())   throw new ECFException(""String_Node_Str"",status.getException());
  return result;
}",0.949438202247191
94414,"/** 
 * @param reference
 */
private void handleServicePublication(ServiceReference reference){
  Collection svcInterfaces=ServicePropertyUtils.getCollectionProperty(reference,ServicePublication.SERVICE_INTERFACE_NAME);
  if (svcInterfaces == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  IServiceProperties discoveryServiceProperties=new ServiceProperties();
  discoveryServiceProperties.setPropertyString(ServicePublication.SERVICE_INTERFACE_NAME,ServicePropertyUtils.createStringFromCollection(svcInterfaces));
  Map servicePublicationServiceProperties=ServicePropertyUtils.getMapProperty(reference,ServicePublication.SERVICE_PROPERTIES);
  if (servicePublicationServiceProperties != null)   addPropertiesToDiscoveryServiceProperties(discoveryServiceProperties,servicePublicationServiceProperties);
  ID endpointContainerID=(ID)reference.getProperty(RemoteServicePublication.ENDPOINT_CONTAINERID);
  if (endpointContainerID == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.ENDPOINT_CONTAINERID,endpointContainerID.toExternalForm().getBytes());
  String endpointNamespace=endpointContainerID.getNamespace().getName();
  discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_CONTAINERID_NAMESPACE,endpointNamespace);
  ID targetContainerID=(ID)reference.getProperty(RemoteServicePublication.TARGET_CONTAINERID);
  if (targetContainerID != null) {
    discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.TARGET_CONTAINERID,targetContainerID.toExternalForm().getBytes());
    String targetNamespace=targetContainerID.getNamespace().getName();
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.TARGET_CONTAINERID_NAMESPACE,targetNamespace);
  }
  String rsnamespace=ServicePropertyUtils.getStringProperty(reference,Constants.SERVICE_NAMESPACE);
  if (rsnamespace != null)   discoveryServiceProperties.setPropertyString(Constants.SERVICE_NAMESPACE,rsnamespace);
  byte[] remoteServiceIDAsBytes=(byte[])reference.getProperty(Constants.SERVICE_ID);
  if (remoteServiceIDAsBytes != null)   discoveryServiceProperties.setPropertyBytes(Constants.SERVICE_ID,remoteServiceIDAsBytes);
  IDiscoveryAdvertiser advertiser2=getAdvertiser();
  if (advertiser2 == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  Namespace advertiserNamespace=advertiser2.getServicesNamespace();
  IServiceInfo svcInfo=null;
  try {
    IServiceTypeID serviceTypeID=createServiceTypeID(servicePublicationServiceProperties,advertiserNamespace);
    URI uri=createURI(endpointContainerID);
    String serviceName=getPropertyWithDefault(servicePublicationServiceProperties,RemoteServicePublication.SERVICE_NAME,(RemoteServicePublication.DEFAULT_SERVICE_NAME_PREFIX + new String(remoteServiceIDAsBytes)));
    svcInfo=new ServiceInfo(uri,serviceName,serviceTypeID,discoveryServiceProperties);
  }
 catch (  IDCreateException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
catch (  URISyntaxException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
  fireHostPublishUnpublish(reference,svcInfo,true);
synchronized (serviceInfos) {
    try {
      trace(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ svcInfo);
      advertiser2.registerService(svcInfo);
      addServiceInfo(reference,svcInfo);
    }
 catch (    ECFRuntimeException e) {
      logError(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
}","/** 
 * @param reference
 */
private void handleServicePublication(ServiceReference reference){
  Collection svcInterfaces=ServicePropertyUtils.getCollectionProperty(reference,ServicePublication.SERVICE_INTERFACE_NAME);
  if (svcInterfaces == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  IServiceProperties discoveryServiceProperties=new ServiceProperties();
  discoveryServiceProperties.setPropertyString(ServicePublication.SERVICE_INTERFACE_NAME,ServicePropertyUtils.createStringFromCollection(svcInterfaces));
  Map servicePublicationServiceProperties=ServicePropertyUtils.getMapProperty(reference,ServicePublication.SERVICE_PROPERTIES);
  if (servicePublicationServiceProperties != null)   addPropertiesToDiscoveryServiceProperties(discoveryServiceProperties,servicePublicationServiceProperties);
  ID endpointContainerID=(ID)reference.getProperty(RemoteServicePublication.ENDPOINT_CONTAINERID);
  if (endpointContainerID == null) {
    logError(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.ENDPOINT_CONTAINERID,endpointContainerID.toExternalForm().getBytes());
  String endpointNamespace=endpointContainerID.getNamespace().getName();
  discoveryServiceProperties.setPropertyString(RemoteServicePublication.ENDPOINT_CONTAINERID_NAMESPACE,endpointNamespace);
  ID targetContainerID=(ID)reference.getProperty(RemoteServicePublication.TARGET_CONTAINERID);
  if (targetContainerID != null) {
    discoveryServiceProperties.setPropertyBytes(RemoteServicePublication.TARGET_CONTAINERID,targetContainerID.toExternalForm().getBytes());
    String targetNamespace=targetContainerID.getNamespace().getName();
    discoveryServiceProperties.setPropertyString(RemoteServicePublication.TARGET_CONTAINERID_NAMESPACE,targetNamespace);
  }
  String rsnamespace=ServicePropertyUtils.getStringProperty(reference,Constants.SERVICE_NAMESPACE);
  if (rsnamespace != null)   discoveryServiceProperties.setPropertyString(Constants.SERVICE_NAMESPACE,rsnamespace);
  byte[] remoteServiceIDAsBytes=(byte[])reference.getProperty(Constants.SERVICE_ID);
  if (remoteServiceIDAsBytes != null)   discoveryServiceProperties.setPropertyBytes(Constants.SERVICE_ID,remoteServiceIDAsBytes);
  IDiscoveryAdvertiser advertiser2=getAdvertiser();
  if (advertiser2 == null) {
    logInfo(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str"",null);
    return;
  }
  Namespace advertiserNamespace=advertiser2.getServicesNamespace();
  IServiceInfo svcInfo=null;
  try {
    IServiceTypeID serviceTypeID=createServiceTypeID(servicePublicationServiceProperties,advertiserNamespace);
    URI uri=createURI(endpointContainerID);
    String serviceName=getPropertyWithDefault(servicePublicationServiceProperties,RemoteServicePublication.SERVICE_NAME,(RemoteServicePublication.DEFAULT_SERVICE_NAME_PREFIX + new String(remoteServiceIDAsBytes)));
    svcInfo=new ServiceInfo(uri,serviceName,serviceTypeID,discoveryServiceProperties);
  }
 catch (  IDCreateException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
catch (  URISyntaxException e) {
    logError(""String_Node_Str"",""String_Node_Str"",e);
    return;
  }
  fireHostPublishUnpublish(reference,svcInfo,true);
synchronized (serviceInfos) {
    try {
      trace(""String_Node_Str"",""String_Node_Str"" + reference + ""String_Node_Str""+ svcInfo);
      advertiser2.registerService(svcInfo);
      addServiceInfo(reference,svcInfo);
    }
 catch (    ECFRuntimeException e) {
      logError(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
}",0.9987756767786696
94415,"private boolean removeDiscoveredServiceID(RemoteServiceEndpointDescription desc){
synchronized (serviceLocations) {
    return serviceLocations.remove(new DiscoveredServiceID(desc.getServiceID().getLocation(),desc.getRemoteServiceId()));
  }
}","private boolean removeDiscoveredServiceID(RemoteServiceEndpointDescription desc){
synchronized (serviceLocations) {
    return serviceLocations.remove(desc);
  }
}",0.8029556650246306
94416,"private boolean addDiscoveredServiceID(RemoteServiceEndpointDescription desc){
synchronized (serviceLocations) {
    return serviceLocations.add(new DiscoveredServiceID(desc.getServiceID().getLocation(),desc.getRemoteServiceId()));
  }
}","private boolean addDiscoveredServiceID(RemoteServiceEndpointDescription desc){
synchronized (serviceLocations) {
    return serviceLocations.add(desc);
  }
}",0.7969543147208121
94417,"private boolean findProxyServiceRegistration(ServiceEndpointDescription sed){
  for (Iterator i=discoveredRemoteServiceRegistrations.keySet().iterator(); i.hasNext(); ) {
    ID containerID=(ID)i.next();
    RemoteServiceRegistration reg=(RemoteServiceRegistration)discoveredRemoteServiceRegistrations.get(containerID);
    if (sed.equals(reg.getServiceEndpointDescription()))     return true;
  }
  return false;
}","private boolean findProxyServiceRegistration(RemoteServiceEndpointDescription sed){
  for (Iterator i=discoveredRemoteServiceRegistrations.keySet().iterator(); i.hasNext(); ) {
    ID containerID=(ID)i.next();
    RemoteServiceRegistration reg=(RemoteServiceRegistration)discoveredRemoteServiceRegistrations.get(containerID);
    if (sed.equals(reg.getServiceEndpointDescription()))     return true;
  }
  return false;
}",0.992822966507177
94418,"private boolean containsDiscoveredServiceID(RemoteServiceEndpointDescription desc){
synchronized (serviceLocations) {
    return serviceLocations.contains(new DiscoveredServiceID(desc.getServiceID().getLocation(),desc.getRemoteServiceId()));
  }
}","private boolean containsDiscoveredServiceID(RemoteServiceEndpointDescription desc){
synchronized (serviceLocations) {
    return serviceLocations.contains(desc);
  }
}",0.8067632850241546
94419,"public RemoteServiceEndpointDescriptionImpl(IServiceInfo serviceInfo){
  super(((ServiceProperties)serviceInfo.getServiceProperties()).asProperties());
  this.serviceId=serviceInfo.getServiceID();
  IServiceProperties serviceProperties=serviceInfo.getServiceProperties();
  final byte[] endpointBytes=serviceProperties.getPropertyBytes(RemoteServicePublication.ENDPOINT_CONTAINERID);
  if (endpointBytes == null)   throw new IDCreateException(""String_Node_Str"");
  final String endpointStr=new String(endpointBytes);
  final String namespaceStr=serviceProperties.getPropertyString(RemoteServicePublication.ENDPOINT_CONTAINERID_NAMESPACE);
  if (namespaceStr == null) {
    throw new IDCreateException(""String_Node_Str"");
  }
  endpointId=IDFactory.getDefault().createID(namespaceStr,endpointStr);
  final byte[] targetBytes=serviceProperties.getPropertyBytes(RemoteServicePublication.TARGET_CONTAINERID);
  if (targetBytes != null) {
    final String targetStr=new String(endpointBytes);
    String targetNamespaceStr=serviceProperties.getPropertyString(RemoteServicePublication.TARGET_CONTAINERID_NAMESPACE);
    if (targetNamespaceStr == null)     targetNamespaceStr=namespaceStr;
    targetId=IDFactory.getDefault().createID(targetNamespaceStr,targetStr);
  }
}","public RemoteServiceEndpointDescriptionImpl(IServiceInfo serviceInfo){
  super(((ServiceProperties)serviceInfo.getServiceProperties()).asProperties());
  this.serviceId=serviceInfo.getServiceID();
  IServiceProperties serviceProperties=serviceInfo.getServiceProperties();
  final byte[] endpointBytes=serviceProperties.getPropertyBytes(RemoteServicePublication.ENDPOINT_CONTAINERID);
  if (endpointBytes == null)   throw new IDCreateException(""String_Node_Str"");
  final String endpointStr=new String(endpointBytes);
  final String namespaceStr=serviceProperties.getPropertyString(RemoteServicePublication.ENDPOINT_CONTAINERID_NAMESPACE);
  if (namespaceStr == null) {
    throw new IDCreateException(""String_Node_Str"");
  }
  endpointId=IDFactory.getDefault().createID(namespaceStr,endpointStr);
  final byte[] targetBytes=serviceProperties.getPropertyBytes(RemoteServicePublication.TARGET_CONTAINERID);
  if (targetBytes != null) {
    final String targetStr=new String(endpointBytes);
    String targetNamespaceStr=serviceProperties.getPropertyString(RemoteServicePublication.TARGET_CONTAINERID_NAMESPACE);
    if (targetNamespaceStr == null)     targetNamespaceStr=namespaceStr;
    targetId=IDFactory.getDefault().createID(targetNamespaceStr,targetStr);
  }
  URI serviceLocation=this.serviceId.getLocation();
  long rsId=this.getRemoteServiceId();
  hashCode=31 * hashCode + (int)(rsId ^ (rsId >>> 32));
  hashCode=31 * hashCode + serviceLocation.hashCode();
}",0.926007326007326
94420,"public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((serviceId == null) ? 0 : serviceId.hashCode());
  return result;
}","public int hashCode(){
  return hashCode;
}",0.404040404040404
94421,"public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  RemoteServiceEndpointDescriptionImpl other=(RemoteServiceEndpointDescriptionImpl)obj;
  if (serviceId == null) {
    if (other.serviceId != null)     return false;
  }
 else   if (!serviceId.equals(other.serviceId))   return false;
  return true;
}","public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  RemoteServiceEndpointDescriptionImpl other=(RemoteServiceEndpointDescriptionImpl)obj;
  return this.serviceId.getLocation().equals(other.serviceId.getLocation()) && getRemoteServiceId() == other.getRemoteServiceId();
}",0.6317135549872123
94422,"public String toString(){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(getProvidedInterfaces());
  sb.append(""String_Node_Str"").append(getLocation());
  sb.append(""String_Node_Str"").append(getServiceID());
  sb.append(""String_Node_Str"").append(getEndpointID());
  sb.append(""String_Node_Str"").append(getEndpointAsID());
  sb.append(""String_Node_Str"").append(getConnectTargetID());
  sb.append(""String_Node_Str"").append(getRemoteServicesFilter());
  sb.append(""String_Node_Str"").append(getProperties()).append(""String_Node_Str"");
  return sb.toString();
}","public String toString(){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(getProvidedInterfaces());
  sb.append(""String_Node_Str"").append(getLocation());
  sb.append(""String_Node_Str"").append(getRemoteServiceId());
  sb.append(""String_Node_Str"").append(getServiceID());
  sb.append(""String_Node_Str"").append(getEndpointID());
  sb.append(""String_Node_Str"").append(getEndpointAsID());
  sb.append(""String_Node_Str"").append(getConnectTargetID());
  sb.append(""String_Node_Str"").append(getRemoteServicesFilter());
  sb.append(""String_Node_Str"").append(getProperties()).append(""String_Node_Str"");
  return sb.toString();
}",0.9517786561264822
94423,"/** 
 * @param s
 * @throws SocketException not thrown by this implementation.
 */
private void setSocket(Socket s) throws SocketException {
  socket=s;
  if (s != null)   addressPort=s.getLocalPort() + ""String_Node_Str"" + s.getInetAddress().getHostName()+ ""String_Node_Str""+ s.getPort();
 else   addressPort=""String_Node_Str"";
}","/** 
 * @param s
 * @throws SocketException not thrown by this implementation.
 */
private void setSocket(Socket s) throws SocketException {
  socket=s;
  if (s != null)   addressPort=s.getLocalPort() + ""String_Node_Str"" + getHostNameForAddressWithoutLookup(s.getInetAddress())+ ""String_Node_Str""+ s.getPort();
 else   addressPort=""String_Node_Str"";
}",0.7323529411764705
94424,"public synchronized ID getLocalID(){
  if (containerID != null)   return containerID;
  if (socket == null)   return null;
  ID retID=null;
  try {
    retID=IDFactory.getDefault().createStringID(PROTOCOL + ""String_Node_Str"" + socket.getLocalAddress().getHostName()+ ""String_Node_Str""+ socket.getLocalPort());
  }
 catch (  final Exception e) {
    traceStack(""String_Node_Str"",e);
    return null;
  }
  return retID;
}","public synchronized ID getLocalID(){
  if (containerID != null)   return containerID;
  if (socket == null)   return null;
  ID retID=null;
  try {
    retID=IDFactory.getDefault().createStringID(PROTOCOL + ""String_Node_Str"" + getHostNameForAddressWithoutLookup(socket.getLocalAddress())+ ""String_Node_Str""+ socket.getLocalPort());
  }
 catch (  final Exception e) {
    traceStack(""String_Node_Str"",e);
    return null;
  }
  return retID;
}",0.937354988399072
94425,"public SharedObjectTypeDescription getDescriptionByName(String name) throws SharedObjectCreateException {
  trace(""String_Node_Str"" + name + ""String_Node_Str"");
  SharedObjectTypeDescription res=getDescription0(name);
  if (res == null) {
    throw new SharedObjectCreateException(Messages.SharedObjectFactory_Exception_Create_Shared_Object + name + Messages.SharedObjectFactory_Exception_Create_Shared_Object_Not_Found);
  }
  return res;
}","public SharedObjectTypeDescription getDescriptionByName(String name) throws SharedObjectCreateException {
  trace(""String_Node_Str"" + name + ""String_Node_Str"");
  SharedObjectTypeDescription res=getDescription0(name);
  if (res == null) {
    throw new SharedObjectCreateException(Messages.bind(Messages.SharedObjectFactory_SharedObjectCreateException_X_Not_Found,name));
  }
  return res;
}",0.8341346153846154
94426,"public void waitToCommit() throws SharedObjectAddAbortException {
  if (getTransactionState() == ISharedObjectContainerTransaction.COMMITTED)   return;
synchronized (lock) {
    long end=System.currentTimeMillis() + getTimeout();
    try {
      while (!isVotingCompleted()) {
        long wait=end - System.currentTimeMillis();
        trace(""String_Node_Str"" + wait + ""String_Node_Str""+ getSharedObject().getID());
        if (wait <= 0L)         throw new SharedObjectAddAbortException(Messages.TwoPhaseCommitEventProcessor_Exception_Commit_Timeout + getSharedObject().getID() + Messages.TwoPhaseCommitEventProcessor_Exception_Timeout_Adding_To+ getHomeID(),(Throwable)null,getTimeout());
        lock.wait(wait);
      }
    }
 catch (    Exception except) {
      doTMAbort(except);
    }
    doTMCommit();
  }
}","public void waitToCommit() throws SharedObjectAddAbortException {
  if (getTransactionState() == ISharedObjectContainerTransaction.COMMITTED)   return;
synchronized (lock) {
    long end=System.currentTimeMillis() + getTimeout();
    try {
      while (!isVotingCompleted()) {
        long wait=end - System.currentTimeMillis();
        trace(""String_Node_Str"" + wait + ""String_Node_Str""+ getSharedObject().getID());
        if (wait <= 0L)         throw new SharedObjectAddAbortException(Messages.bind(Messages.TwoPhaseCommitEventProcessor_Exception_Commit_Timeout,new Object[]{getSharedObject().getID(),getHomeID()}),(Throwable)null,getTimeout());
        lock.wait(wait);
      }
    }
 catch (    Exception except) {
      doTMAbort(except);
    }
    doTMCommit();
  }
}",0.8178391959798995
94427,"public void removePresenceListener(IPresenceListener listener){
synchronized (presenceListeners) {
    presenceListeners.add(listener);
  }
}","public void removePresenceListener(IPresenceListener listener){
synchronized (presenceListeners) {
    presenceListeners.remove(listener);
  }
}",0.968421052631579
94428,"protected void handleShowImageStart(final ID id,final String fromUser,final ImageWrapper imageWrapper){
  final Display display=localGUI.getTextControl().getDisplay();
  display.asyncExec(new Runnable(){
    public void run(){
      ShowImageShell showImageShell=(ShowImageShell)shells.get(id);
      if (showImageShell == null) {
        showImageShell=new ShowImageShell(display,id,new DisposeListener(){
          public void widgetDisposed(          DisposeEvent e){
            shells.remove(id);
          }
        }
);
        shells.put(id,showImageShell);
      }
      showImageShell.initialize(Messages.EclipseCollabSharedObject_SCREEN_CAPTURE_FROM + fromUser,imageWrapper);
      showImageShell.open();
    }
  }
);
}","protected void handleShowImageStart(final ID id,final String fromUser,final ImageWrapper imageWrapper){
  final Display display=localGUI.getTextControl().getDisplay();
  display.asyncExec(new Runnable(){
    public void run(){
      ShowImageShell showImageShell=(ShowImageShell)shells.get(id);
      if (showImageShell == null) {
        showImageShell=new ShowImageShell(display,id,new DisposeListener(){
          public void widgetDisposed(          DisposeEvent e){
            shells.remove(id);
          }
        }
);
        shells.put(id,showImageShell);
      }
      showImageShell.initialize(Messages.bind(Messages.EclipseCollabSharedObject_SCREEN_CAPTURE_FROM,fromUser),imageWrapper);
      showImageShell.open();
    }
  }
);
}",0.987101154107264
94429,"private void launchFile(String fileName){
  try {
    Program.launch(fileName);
  }
 catch (  final IllegalArgumentException e1) {
    ClientPlugin.log(MessageLoader.getString(""String_Node_Str"") + localFile,e1);
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialog.openInformation(null,MessageLoader.getString(MessageLoader.getString(""String_Node_Str"")),MessageLoader.getString(NLS.bind(MessageLoader.getString(""String_Node_Str""),localFile.getAbsolutePath(),e1.getMessage())));
      }
    }
);
  }
}","private void launchFile(String fileName){
  try {
    Program.launch(fileName);
  }
 catch (  final IllegalArgumentException e1) {
    ClientPlugin.log(MessageLoader.getFormattedString(""String_Node_Str"",localFile),e1);
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialog.openInformation(null,MessageLoader.getString(MessageLoader.getString(""String_Node_Str"")),MessageLoader.getString(NLS.bind(MessageLoader.getString(""String_Node_Str""),localFile.getAbsolutePath(),e1.getMessage())));
      }
    }
);
  }
}",0.9863263445761168
94430,"public IContainer createContainer(String containerTypeDescriptionName,ID containerID) throws ContainerCreateException {
  return createContainer(getDescriptionByName(containerTypeDescriptionName),new Object[]{containerID});
}","public IContainer createContainer(String containerTypeDescriptionName,ID containerID) throws ContainerCreateException {
  return createContainer(getDescriptionByNameWithException(containerTypeDescriptionName),new Object[]{containerID});
}",0.9719222462203024
94431,"protected ID getIDFromArg(Object arg) throws IDCreateException {
  if (arg == null)   throw new IDCreateException(Messages.getString(""String_Node_Str""));
  if (arg instanceof ID)   return (ID)arg;
  if (arg instanceof String) {
    String val=(String)arg;
    if (val.equals(""String_Node_Str"")) {
      return IDFactory.getDefault().createGUID();
    }
    return IDFactory.getDefault().createStringID(val);
  }
 else   if (arg instanceof Integer) {
    return IDFactory.getDefault().createGUID(((Integer)arg).intValue());
  }
 else   return IDFactory.getDefault().createGUID();
}","protected ID getIDFromArg(Object arg) throws IDCreateException {
  if (arg == null)   throw new IDCreateException(Messages.getString(""String_Node_Str""));
  String val=null;
  if (arg instanceof StringID)   return (ID)arg;
 else   if (arg instanceof GUID)   val=((GUID)arg).getName();
 else   if (arg instanceof URIID)   val=((URIID)arg).toURI().toString();
 else   if (arg instanceof LongID)   val=((LongID)arg).getName();
  if (arg instanceof String)   val=(String)arg;
  if (arg instanceof Integer)   val=IDFactory.getDefault().createGUID(((Integer)arg).intValue()).getName();
  if (val == null)   val=IDFactory.getDefault().createGUID().getName();
  return IDFactory.getDefault().createStringID(val);
}",0.314396887159533
94432,"protected GenericContainerArgs getClientArgs(String[] argDefaults,Object[] args) throws IDCreateException {
  ID newID=null;
  Integer ka=null;
  if (argDefaults != null && argDefaults.length > 0) {
    if (argDefaults.length == 2) {
      newID=getIDFromArg(argDefaults[0]);
      ka=getIntegerFromArg(argDefaults[1]);
    }
 else     ka=getIntegerFromArg(argDefaults[0]);
  }
  if (args != null && args.length > 0) {
    if (args.length == 2) {
      newID=getIDFromArg(args[0]);
      ka=getIntegerFromArg(args[1]);
    }
 else     ka=getIntegerFromArg(args[0]);
  }
  if (newID == null)   newID=IDFactory.getDefault().createGUID();
  if (ka == null)   ka=new Integer(0);
  return new GenericContainerArgs(newID,ka);
}","protected GenericContainerArgs getClientArgs(String[] argDefaults,Object[] args) throws IDCreateException {
  ID newID=null;
  Integer ka=null;
  if (argDefaults != null && argDefaults.length > 0) {
    if (argDefaults.length == 2) {
      newID=getIDFromArg(argDefaults[0]);
      ka=getIntegerFromArg(argDefaults[1]);
    }
 else     ka=getIntegerFromArg(argDefaults[0]);
  }
  if (args != null && args.length > 0) {
    if (args.length == 2) {
      newID=getIDFromArg(args[0]);
      ka=getIntegerFromArg(args[1]);
    }
 else     ka=getIntegerFromArg(args[0]);
  }
  if (newID == null)   newID=IDFactory.getDefault().createStringID(IDFactory.getDefault().createGUID().getName());
  if (ka == null)   ka=new Integer(0);
  return new GenericContainerArgs(newID,ka);
}",0.9671361502347418
94433,"protected GenericContainerArgs getServerArgs(String[] argDefaults,Object[] args) throws IDCreateException {
  ID newID=null;
  Integer ka=null;
  if (argDefaults != null && argDefaults.length > 0) {
    if (argDefaults.length == 2) {
      newID=getIDFromArg(argDefaults[0]);
      ka=getIntegerFromArg(argDefaults[1]);
    }
 else     newID=getIDFromArg(argDefaults[0]);
  }
  if (args != null && args.length > 0) {
    if (args.length == 2) {
      newID=getIDFromArg(args[0]);
      ka=getIntegerFromArg(args[1]);
    }
 else     newID=getIDFromArg(args[0]);
  }
  if (newID == null)   newID=IDFactory.getDefault().createGUID();
  if (ka == null)   ka=new Integer(0);
  return new GenericContainerArgs(newID,ka);
}","protected GenericContainerArgs getServerArgs(String[] argDefaults,Object[] args) throws IDCreateException {
  ID newID=null;
  Integer ka=null;
  if (argDefaults != null && argDefaults.length > 0) {
    if (argDefaults.length == 2) {
      newID=getIDFromArg(argDefaults[0]);
      ka=getIntegerFromArg(argDefaults[1]);
    }
 else     newID=getIDFromArg(argDefaults[0]);
  }
  if (args != null && args.length > 0) {
    if (args.length == 2) {
      newID=getIDFromArg(args[0]);
      ka=getIntegerFromArg(args[1]);
    }
 else     newID=getIDFromArg(args[0]);
  }
  if (newID == null)   newID=IDFactory.getDefault().createStringID(IDFactory.getDefault().createGUID().getName());
  if (ka == null)   ka=new Integer(0);
  return new GenericContainerArgs(newID,ka);
}",0.96695886716116
94434,"/** 
 * Add identity namespace extension point extensions
 * @param members the members to add
 */
protected void addNamespaceExtensions(IConfigurationElement[] members){
  org.eclipse.ecf.core.util.Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,Activator.class,""String_Node_Str"",members);
  final String bundleName=getDefault().getBundle().getSymbolicName();
  for (int m=0; m < members.length; m++) {
    final IConfigurationElement member=members[m];
    final IExtension extension=member.getDeclaringExtension();
    String nsName=null;
    try {
      final Namespace ns=(Namespace)member.createExecutableExtension(CLASS_ATTRIBUTE);
      final String clazz=ns.getClass().getName();
      nsName=member.getAttribute(NAME_ATTRIBUTE);
      if (nsName == null) {
        nsName=clazz;
      }
      final String nsDescription=member.getAttribute(DESCRIPTION_ATTRIBUTE);
      ns.initialize(nsName,nsDescription);
      org.eclipse.ecf.core.util.Trace.trace(Activator.PLUGIN_ID,IdentityDebugOptions.DEBUG,""String_Node_Str"" + ns + ""String_Node_Str"");
      if (IDFactory.containsNamespace0(ns))       throw new CoreException(new Status(IStatus.WARNING,bundleName,FACTORY_NAME_COLLISION_ERRORCODE,""String_Node_Str"" + nsName + ""String_Node_Str""+ member.getContributor().getName()+ ""String_Node_Str""+ extension.getExtensionPointUniqueIdentifier(),null));
      IDFactory.addNamespace0(ns);
      org.eclipse.ecf.core.util.Trace.trace(Activator.PLUGIN_ID,IdentityDebugOptions.DEBUG,""String_Node_Str"" + ns + ""String_Node_Str"");
    }
 catch (    final CoreException e) {
      getDefault().log(e.getStatus());
      org.eclipse.ecf.core.util.Trace.catching(Activator.PLUGIN_ID,IdentityDebugOptions.EXCEPTIONS_CATCHING,Activator.class,""String_Node_Str"",e);
    }
catch (    final Exception e) {
      getDefault().log(new Status(IStatus.ERROR,bundleName,FACTORY_NAME_COLLISION_ERRORCODE,""String_Node_Str"" + nsName + ""String_Node_Str""+ extension.getExtensionPointUniqueIdentifier(),null));
      org.eclipse.ecf.core.util.Trace.catching(Activator.PLUGIN_ID,IdentityDebugOptions.EXCEPTIONS_CATCHING,Activator.class,""String_Node_Str"",e);
    }
  }
  org.eclipse.ecf.core.util.Trace.exiting(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_EXITING,Activator.class,""String_Node_Str"");
}","/** 
 * Add identity namespace extension point extensions
 * @param members the members to add
 */
protected void addNamespaceExtensions(IConfigurationElement[] members){
  org.eclipse.ecf.core.util.Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,Activator.class,""String_Node_Str"",members);
  final String bundleName=getDefault().getBundle().getSymbolicName();
  for (int m=0; m < members.length; m++) {
    final IConfigurationElement member=members[m];
    final IExtension extension=member.getDeclaringExtension();
    String nsName=null;
    try {
      final Namespace ns=(Namespace)member.createExecutableExtension(CLASS_ATTRIBUTE);
      final String clazz=ns.getClass().getName();
      nsName=member.getAttribute(NAME_ATTRIBUTE);
      if (nsName == null) {
        nsName=clazz;
      }
      final String nsDescription=member.getAttribute(DESCRIPTION_ATTRIBUTE);
      ns.initialize(nsName,nsDescription);
      org.eclipse.ecf.core.util.Trace.trace(Activator.PLUGIN_ID,IdentityDebugOptions.DEBUG,""String_Node_Str"" + ns + ""String_Node_Str"");
      if (!IDFactory.containsNamespace0(ns)) {
        IDFactory.addNamespace0(ns);
        org.eclipse.ecf.core.util.Trace.trace(Activator.PLUGIN_ID,IdentityDebugOptions.DEBUG,""String_Node_Str"" + ns + ""String_Node_Str"");
      }
 else {
        getDefault().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,""String_Node_Str"" + nsName,null));
      }
    }
 catch (    final CoreException e) {
      getDefault().log(e.getStatus());
      org.eclipse.ecf.core.util.Trace.catching(Activator.PLUGIN_ID,IdentityDebugOptions.EXCEPTIONS_CATCHING,Activator.class,""String_Node_Str"",e);
    }
catch (    final Exception e) {
      getDefault().log(new Status(IStatus.ERROR,bundleName,FACTORY_NAME_COLLISION_ERRORCODE,""String_Node_Str"" + nsName + ""String_Node_Str""+ extension.getExtensionPointUniqueIdentifier(),null));
      org.eclipse.ecf.core.util.Trace.catching(Activator.PLUGIN_ID,IdentityDebugOptions.EXCEPTIONS_CATCHING,Activator.class,""String_Node_Str"",e);
    }
  }
  org.eclipse.ecf.core.util.Trace.exiting(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_EXITING,Activator.class,""String_Node_Str"");
}",0.6438569206842923
94435,"public IStatus performFileTransfer(IProgressMonitor monitor){
  transferStartTime=System.currentTimeMillis();
  final byte[] buf=new byte[buff_length];
  final long totalWork=((fileLength == -1) ? 100 : fileLength);
  double factor=(totalWork > Integer.MAX_VALUE) ? (((double)Integer.MAX_VALUE) / ((double)totalWork)) : 1.0;
  int work=(totalWork > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)totalWork;
  monitor.beginTask(getRemoteFileURL().toString() + Messages.AbstractRetrieveFileTransfer_Progress_Data,work);
  InputStream readInputStream=wrapTransferReadInputStream(remoteFileContents,monitor);
  try {
    while (!isDone() && !isPaused()) {
      try {
        final int bytes=readInputStream.read(buf);
        handleReceivedData(buf,bytes,factor,monitor);
      }
 catch (      OperationCanceledException e) {
        throw new UserCancelledException(Messages.AbstractRetrieveFileTransfer_Exception_User_Cancelled);
      }
    }
  }
 catch (  final Exception e) {
    if (!isDone()) {
      setDoneException(e);
    }
  }
 finally {
    try {
      if (readInputStream != null)       readInputStream.close();
    }
 catch (    final IOException e) {
      Activator.getDefault().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,""String_Node_Str"",e));
    }
    hardClose();
    monitor.done();
    try {
      if (isPaused())       fireTransferReceivePausedEvent();
 else       fireTransferReceiveDoneEvent();
    }
 catch (    Exception e) {
      Activator.getDefault().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,Messages.AbstractRetrieveFileTransfer_EXCEPTION_IN_FINALLY,e));
    }
  }
  return getFinalStatus(exception);
}","public IStatus performFileTransfer(IProgressMonitor monitor){
  transferStartTime=System.currentTimeMillis();
  final byte[] buf=new byte[buff_length];
  final long totalWork=((fileLength == -1) ? 100 : fileLength);
  double factor=(totalWork > Integer.MAX_VALUE) ? (((double)Integer.MAX_VALUE) / ((double)totalWork)) : 1.0;
  int work=(totalWork > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)totalWork;
  monitor.beginTask(getRemoteFileURL().toString() + Messages.AbstractRetrieveFileTransfer_Progress_Data,work);
  InputStream readInputStream=wrapTransferReadInputStream(remoteFileContents,monitor);
  try {
    while (!isDone() && !isPaused()) {
      try {
        final int bytes=readInputStream.read(buf);
        handleReceivedData(buf,bytes,factor,monitor);
      }
 catch (      OperationCanceledException e) {
        throw new UserCancelledException(Messages.AbstractRetrieveFileTransfer_Exception_User_Cancelled);
      }
    }
  }
 catch (  final Exception e) {
    if (!isDone()) {
      setDoneException(e);
    }
  }
 finally {
    try {
      if (readInputStream != null)       readInputStream.close();
    }
 catch (    final IOException e) {
      Activator a=Activator.getDefault();
      if (a != null)       a.log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,""String_Node_Str"",e));
    }
    hardClose();
    monitor.done();
    try {
      if (isPaused())       fireTransferReceivePausedEvent();
 else       fireTransferReceiveDoneEvent();
    }
 catch (    Exception e) {
      Activator a=Activator.getDefault();
      if (a != null)       a.log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,Messages.AbstractRetrieveFileTransfer_EXCEPTION_IN_FINALLY,e));
    }
  }
  return getFinalStatus(exception);
}",0.9755102040816328
94436,"protected IStatus getFinalStatus(Throwable exception1){
  if (exception1 == null)   return new Status(IStatus.OK,Activator.getDefault().getBundle().getSymbolicName(),0,Messages.AbstractRetrieveFileTransfer_Status_Transfer_Completed_OK,null);
 else   if (exception1 instanceof UserCancelledException)   return new Status(IStatus.CANCEL,Activator.PLUGIN_ID,FILETRANSFER_ERRORCODE,Messages.AbstractRetrieveFileTransfer_Exception_User_Cancelled,exception1);
 else   return new Status(IStatus.ERROR,Activator.PLUGIN_ID,FILETRANSFER_ERRORCODE,Messages.AbstractRetrieveFileTransfer_Status_Transfer_Exception,exception1);
}","protected IStatus getFinalStatus(Throwable exception1){
  if (exception1 == null)   return new Status(IStatus.OK,Activator.PLUGIN_ID,0,Messages.AbstractRetrieveFileTransfer_Status_Transfer_Completed_OK,null);
 else   if (exception1 instanceof UserCancelledException)   return new Status(IStatus.CANCEL,Activator.PLUGIN_ID,FILETRANSFER_ERRORCODE,Messages.AbstractRetrieveFileTransfer_Exception_User_Cancelled,exception1);
 else   return new Status(IStatus.ERROR,Activator.PLUGIN_ID,FILETRANSFER_ERRORCODE,Messages.AbstractRetrieveFileTransfer_Status_Transfer_Exception,exception1);
}",0.95906432748538
94437,"private IRemoteServiceContainer[] findRemoteServiceContainers(ServiceReference serviceReference,String[] remoteInterfaces,String[] remoteConfigurationType,String[] remoteRequiresIntents){
  Activator activator=Activator.getDefault();
  if (activator == null)   return null;
  IHostContainerFinder[] finders=activator.getHostRemoteServiceContainerFinders();
  if (finders == null) {
    logError(""String_Node_Str"",""String_Node_Str"");
    return null;
  }
  Map rsContainers=new HashMap();
  for (int i=0; i < finders.length; i++) {
    IRemoteServiceContainer[] candidates=finders[i].findHostContainers(serviceReference,remoteInterfaces,remoteConfigurationType,remoteRequiresIntents);
    if (candidates != null) {
      for (int j=0; j < candidates.length; j++) {
        ID containerID=candidates[i].getContainer().getID();
        if (containerID != null)         rsContainers.put(containerID,candidates[i]);
      }
    }
  }
  List results=new ArrayList();
  for (Iterator i=rsContainers.keySet().iterator(); i.hasNext(); )   results.add(rsContainers.get(i.next()));
  return (IRemoteServiceContainer[])results.toArray(new IRemoteServiceContainer[]{});
}","private IRemoteServiceContainer[] findRemoteServiceContainers(ServiceReference serviceReference,String[] remoteInterfaces,String[] remoteConfigurationType,String[] remoteRequiresIntents){
  Activator activator=Activator.getDefault();
  if (activator == null)   return null;
  IHostContainerFinder[] finders=activator.getHostRemoteServiceContainerFinders();
  if (finders == null) {
    logError(""String_Node_Str"",""String_Node_Str"");
    return null;
  }
  Map rsContainers=new HashMap();
  for (int i=0; i < finders.length; i++) {
    IRemoteServiceContainer[] candidates=finders[i].findHostContainers(serviceReference,remoteInterfaces,remoteConfigurationType,remoteRequiresIntents);
    if (candidates != null) {
      for (int j=0; j < candidates.length; j++) {
        ID containerID=candidates[j].getContainer().getID();
        if (containerID != null)         rsContainers.put(containerID,candidates[j]);
      }
    }
  }
  List results=new ArrayList();
  for (Iterator i=rsContainers.keySet().iterator(); i.hasNext(); )   results.add(rsContainers.get(i.next()));
  return (IRemoteServiceContainer[])results.toArray(new IRemoteServiceContainer[]{});
}",0.998272884283247
94438,"protected Collection findRemoteContainersSatisfyingRequiredIntents(String[] remoteRequiresIntents){
  List results=new ArrayList();
  IContainer[] containers=Activator.getDefault().getContainerManager().getAllContainers();
  if (containers == null || containers.length == 0)   return null;
  for (int i=0; i < containers.length; i++) {
    IRemoteServiceContainerAdapter adapter=(IRemoteServiceContainerAdapter)containers[i].getAdapter(IRemoteServiceContainerAdapter.class);
    if (adapter == null)     continue;
    ContainerTypeDescription description=Activator.getDefault().getContainerManager().getContainerTypeDescription(containers[i].getID());
    if (description == null)     continue;
    List supportedIntents=Arrays.asList(description.getSupportedIntents());
    boolean hasIntents=true;
    if (remoteRequiresIntents != null) {
      for (int j=0; j < remoteRequiresIntents.length; j++) {
        if (!supportedIntents.contains(remoteRequiresIntents[j]))         hasIntents=false;
      }
    }
    if (hasIntents) {
      trace(""String_Node_Str"",""String_Node_Str"" + containers[i].getID());
      results.add(new RemoteServiceContainer(containers[i],adapter));
    }
 else {
      trace(""String_Node_Str"",""String_Node_Str"" + containers[i].getID() + ""String_Node_Str""+ supportedIntents);
    }
  }
  return results;
}","protected Collection findRemoteContainersSatisfyingRequiredIntents(String[] remoteRequiresIntents){
  List results=new ArrayList();
  IContainer[] containers=Activator.getDefault().getContainerManager().getAllContainers();
  if (containers == null || containers.length == 0)   return results;
  for (int i=0; i < containers.length; i++) {
    IRemoteServiceContainerAdapter adapter=(IRemoteServiceContainerAdapter)containers[i].getAdapter(IRemoteServiceContainerAdapter.class);
    if (adapter == null)     continue;
    ContainerTypeDescription description=Activator.getDefault().getContainerManager().getContainerTypeDescription(containers[i].getID());
    if (description == null)     continue;
    List supportedIntents=Arrays.asList(description.getSupportedIntents());
    boolean hasIntents=true;
    if (remoteRequiresIntents != null) {
      for (int j=0; j < remoteRequiresIntents.length; j++) {
        if (!supportedIntents.contains(remoteRequiresIntents[j]))         hasIntents=false;
      }
    }
    if (hasIntents) {
      trace(""String_Node_Str"",""String_Node_Str"" + containers[i].getID());
      results.add(new RemoteServiceContainer(containers[i],adapter));
    }
 else {
      trace(""String_Node_Str"",""String_Node_Str"" + containers[i].getID() + ""String_Node_Str""+ supportedIntents);
    }
  }
  return results;
}",0.9958662157083804
94439,"public IRemoteServiceReference[] getRemoteServiceReferences(ID[] idFilter,String clazz,String filter) throws InvalidSyntaxException {
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",new Object[]{idFilter,clazz,filter});
  if (clazz == null)   return null;
  final IRemoteFilter remoteFilter=(filter == null) ? null : new RemoteFilterImpl(filter);
  final List references=new ArrayList();
  addReferencesFromRemoteRegistrys(idFilter,clazz,remoteFilter,references);
synchronized (localRegistry) {
    addReferencesFromRegistry(clazz,remoteFilter,localRegistry,references);
  }
  if (references.size() == 0) {
    AddRegistrationRequest first=null;
    List ourAddRegistrationRequests=new ArrayList();
    if (idFilter == null) {
      first=new AddRegistrationRequest(null,clazz,filter,first);
      ourAddRegistrationRequests.add(first);
    }
 else {
      for (int i=0; i < idFilter.length; i++) {
        ID target=idFilter[i];
        if (target != null) {
          AddRegistrationRequest request=new AddRegistrationRequest(target,clazz,filter,first);
          if (i == 0)           first=request;
          ourAddRegistrationRequests.add(request);
          addRegistrationRequests.put(request.getId(),request);
          sendAddRegistrationRequest(target,request,getAddRegistrationRequestCredentials(request));
        }
      }
    }
    first.waitForResponse(ADD_REGISTRATION_REQUEST_TIMEOUT);
    addReferencesFromRemoteRegistrys(idFilter,clazz,remoteFilter,references);
    for (Iterator i=ourAddRegistrationRequests.iterator(); i.hasNext(); ) {
      AddRegistrationRequest request=(AddRegistrationRequest)i.next();
      addRegistrationRequests.remove(request.getId());
    }
  }
  final IRemoteServiceReference[] result=(IRemoteServiceReference[])references.toArray(new IRemoteServiceReference[references.size()]);
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",result);
  return (result.length == 0) ? null : result;
}","public IRemoteServiceReference[] getRemoteServiceReferences(ID[] idFilter,String clazz,String filter) throws InvalidSyntaxException {
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",new Object[]{idFilter,clazz,filter});
  if (clazz == null)   return null;
  final IRemoteFilter remoteFilter=(filter == null) ? null : new RemoteFilterImpl(filter);
  final List references=new ArrayList();
  addReferencesFromRemoteRegistrys(idFilter,clazz,remoteFilter,references);
  if (references.size() == 0) {
    AddRegistrationRequest first=null;
    List ourAddRegistrationRequests=new ArrayList();
    if (idFilter == null) {
      first=new AddRegistrationRequest(null,clazz,filter,first);
      ourAddRegistrationRequests.add(first);
    }
 else {
      for (int i=0; i < idFilter.length; i++) {
        ID target=idFilter[i];
        if (target != null) {
          AddRegistrationRequest request=new AddRegistrationRequest(target,clazz,filter,first);
          if (i == 0)           first=request;
          ourAddRegistrationRequests.add(request);
          addRegistrationRequests.put(request.getId(),request);
          sendAddRegistrationRequest(target,request,getAddRegistrationRequestCredentials(request));
        }
      }
    }
    first.waitForResponse(ADD_REGISTRATION_REQUEST_TIMEOUT);
    addReferencesFromRemoteRegistrys(idFilter,clazz,remoteFilter,references);
    for (Iterator i=ourAddRegistrationRequests.iterator(); i.hasNext(); ) {
      AddRegistrationRequest request=(AddRegistrationRequest)i.next();
      addRegistrationRequests.remove(request.getId());
    }
  }
  ID localContainerID=getLocalContainerID();
  if (idFilter == null || Arrays.asList(idFilter).contains(localContainerID)) {
synchronized (localRegistry) {
      addReferencesFromRegistry(clazz,remoteFilter,localRegistry,references);
    }
  }
  final IRemoteServiceReference[] result=(IRemoteServiceReference[])references.toArray(new IRemoteServiceReference[references.size()]);
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",result);
  return (result.length == 0) ? null : result;
}",0.9173842215499184
94440,"protected void runRequest() throws Exception {
  int code=-1;
  try {
    setupProxies();
    setupAuthentication();
    setupTimeouts();
    URLConnection urlConnection=directoryOrFile.openConnection();
    if (directoryOrFile.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
      urlConnection.setUseCaches(false);
    }
    urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    IURLConnectionModifier connectionModifier=Activator.getDefault().getURLConnectionModifier();
    if (connectionModifier != null) {
      connectionModifier.setSocketFactoryForConnection(urlConnection);
    }
    InputStream ins=urlConnection.getInputStream();
    code=getResponseCode(urlConnection);
    ins.close();
    if (isHTTP()) {
      if (code == HttpURLConnection.HTTP_NOT_FOUND) {
        throw new BrowseFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile.toString()),code);
      }
 else       if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else       if (code == HttpURLConnection.HTTP_FORBIDDEN) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else       if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else {
        throw new BrowseFileTransferException(NLS.bind(""String_Node_Str"",new Integer(code)),code);
      }
    }
    remoteFiles=new IRemoteFile[1];
    remoteFiles[0]=new URLRemoteFile(urlConnection.getLastModified(),urlConnection.getContentLength(),fileID);
  }
 catch (  Exception e) {
    Exception except=(e instanceof BrowseFileTransferException) ? e : new BrowseFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile),e,code);
    throw except;
  }
}","protected void runRequest() throws Exception {
  int code=-1;
  try {
    setupProxies();
    setupAuthentication();
    setupTimeouts();
    URLConnection urlConnection=directoryOrFile.openConnection();
    if (directoryOrFile.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
      urlConnection.setUseCaches(false);
    }
    urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    IURLConnectionModifier connectionModifier=Activator.getDefault().getURLConnectionModifier();
    if (connectionModifier != null) {
      connectionModifier.setSocketFactoryForConnection(urlConnection);
    }
    InputStream ins=urlConnection.getInputStream();
    code=getResponseCode(urlConnection);
    ins.close();
    if (isHTTP()) {
      if (code == HttpURLConnection.HTTP_OK) {
      }
 else       if (code == HttpURLConnection.HTTP_NOT_FOUND) {
        throw new BrowseFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile.toString()),code);
      }
 else       if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else       if (code == HttpURLConnection.HTTP_FORBIDDEN) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else       if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else {
        throw new BrowseFileTransferException(NLS.bind(""String_Node_Str"",new Integer(code)),code);
      }
    }
    remoteFiles=new IRemoteFile[1];
    remoteFiles[0]=new URLRemoteFile(urlConnection.getLastModified(),urlConnection.getContentLength(),fileID);
  }
 catch (  Exception e) {
    Exception except=(e instanceof BrowseFileTransferException) ? e : new BrowseFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile),e,code);
    throw except;
  }
}",0.9834374151506924
94441,"public synchronized Object connect(ID remote,Object data,int timeout) throws ECFException {
  if (connection != null)   throw new ECFException(""String_Node_Str"");
  if (timeout > 0)   SmackConfiguration.setPacketReplyTimeout(timeout);
  Roster.setDefaultSubscriptionMode(Roster.SUBSCRIPTION_MANUAL);
  final XMPPID jabberURI=getXMPPID(remote);
  String username=jabberURI.getUsername();
  String hostname=jabberURI.getHostname();
  String hostnameOverride=null;
  int atSignIdx=username.lastIndexOf('@');
  if (atSignIdx != -1) {
    hostnameOverride=hostname;
    hostname=username.substring(atSignIdx + 1);
    username=username.substring(0,atSignIdx);
  }
  if (google && hostnameOverride == null) {
    hostnameOverride=GOOGLE_TALK_HOST;
  }
  final String serviceName=hostname;
  serverPort=jabberURI.getPort();
  serverResource=jabberURI.getResourceName();
  if (serverResource == null || serverResource.equals(XMPPID.PATH_DELIMITER)) {
    serverResource=getClientIdentifier();
    jabberURI.setResourceName(serverResource);
  }
  try {
    if (hostnameOverride != null) {
      if (secure) {
        if (serverPort == -1) {
          serverPort=XMPPS_DEFAULT_PORT;
        }
        connection=new SSLXMPPConnection(hostnameOverride,serverPort,serviceName);
      }
 else {
        if (serverPort == -1) {
          serverPort=XMPP_DEFAULT_PORT;
        }
        connection=new XMPPConnection(hostnameOverride,serverPort,serviceName);
      }
    }
 else     if (serverPort == -1) {
      if (secure) {
        connection=new SSLXMPPConnection(serviceName);
      }
 else {
        connection=new XMPPConnection(serviceName);
      }
    }
 else {
      if (secure) {
        connection=new SSLXMPPConnection(serviceName,serverPort);
      }
 else {
        connection=new XMPPConnection(serviceName,serverPort);
      }
    }
    connection.addPacketListener(packetListener,null);
    connection.addConnectionListener(connectionListener);
    connection.login(username,(String)data,serverResource);
    isConnected=true;
  }
 catch (  final XMPPException e) {
    if (e.getMessage().equals(""String_Node_Str""))     throw new ContainerAuthenticationException(""String_Node_Str"",e);
    throw new ContainerConnectException(e.getLocalizedMessage(),e);
  }
  return null;
}","public synchronized Object connect(ID remote,Object data,int timeout) throws ECFException {
  if (connection != null)   throw new ECFException(""String_Node_Str"");
  if (timeout > 0)   SmackConfiguration.setPacketReplyTimeout(timeout);
  Roster.setDefaultSubscriptionMode(Roster.SUBSCRIPTION_MANUAL);
  final XMPPID jabberURI=getXMPPID(remote);
  String username=jabberURI.getNodename();
  String hostname=jabberURI.getHostname();
  String hostnameOverride=null;
  int semiColonIdx=hostname.lastIndexOf(';');
  if (semiColonIdx != -1) {
    hostnameOverride=hostname.substring(semiColonIdx + 1);
    hostname=hostname.substring(0,semiColonIdx);
  }
  if (google && hostnameOverride == null) {
    hostnameOverride=GOOGLE_TALK_HOST;
  }
  final String serviceName=hostname;
  serverPort=jabberURI.getPort();
  serverResource=jabberURI.getResourceName();
  if (serverResource == null || serverResource.equals(XMPPID.PATH_DELIMITER)) {
    serverResource=getClientIdentifier();
    jabberURI.setResourceName(serverResource);
  }
  try {
    if (hostnameOverride != null) {
      if (secure) {
        if (serverPort == -1) {
          serverPort=XMPPS_DEFAULT_PORT;
        }
        connection=new SSLXMPPConnection(hostnameOverride,serverPort,serviceName);
      }
 else {
        if (serverPort == -1) {
          serverPort=XMPP_DEFAULT_PORT;
        }
        connection=new XMPPConnection(hostnameOverride,serverPort,serviceName);
      }
    }
 else     if (serverPort == -1) {
      if (secure) {
        connection=new SSLXMPPConnection(serviceName);
      }
 else {
        connection=new XMPPConnection(serviceName);
      }
    }
 else {
      if (secure) {
        connection=new SSLXMPPConnection(serviceName,serverPort);
      }
 else {
        connection=new XMPPConnection(serviceName,serverPort);
      }
    }
    connection.addPacketListener(packetListener,null);
    connection.addConnectionListener(connectionListener);
    connection.login(username,(String)data,serverResource);
    isConnected=true;
  }
 catch (  final XMPPException e) {
    if (e.getMessage().equals(""String_Node_Str""))     throw new ContainerAuthenticationException(""String_Node_Str"",e);
    throw new ContainerConnectException(e.getLocalizedMessage(),e);
  }
  return null;
}",0.9689632401496808
94442,"public String getUsernameAtHost(){
  if (getUsername().indexOf(USER_HOST_DELIMITER) != -1)   return getUsername();
 else   return getUsername() + USER_HOST_DELIMITER + getHostname()+ ((getPort() == -1) ? ""String_Node_Str"" : ""String_Node_Str"" + getPort());
}","public String getUsernameAtHost(){
  String username=getUsername();
  String hostname=getHostname();
  int semiColonIdx=hostname.indexOf(';');
  if (semiColonIdx != -1) {
    hostname=hostname.substring(0,semiColonIdx);
  }
  return username + USER_HOST_DELIMITER + hostname+ ((getPort() == -1) ? ""String_Node_Str"" : ""String_Node_Str"" + getPort());
}",0.329489291598023
94443,"protected void runRequest() throws Exception {
  int code=-1;
  try {
    setupProxies();
    setupAuthentication();
    setupTimeouts();
    URLConnection urlConnection=directoryOrFile.openConnection();
    if (directoryOrFile.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
      urlConnection.setUseCaches(false);
    }
    urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    IURLConnectionModifier connectionModifier=Activator.getDefault().getURLConnectionModifier();
    if (connectionModifier != null) {
      connectionModifier.setSocketFactoryForConnection(urlConnection);
    }
    InputStream ins=urlConnection.getInputStream();
    code=getResponseCode(urlConnection);
    ins.close();
    if (code == HttpURLConnection.HTTP_OK) {
      remoteFiles=new IRemoteFile[1];
      remoteFiles[0]=new URLRemoteFile(urlConnection.getLastModified(),urlConnection.getContentLength(),fileID);
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      throw new BrowseFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile.toString()),code);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
      throw new BrowseFileTransferException(""String_Node_Str"",code);
    }
 else     if (code == HttpURLConnection.HTTP_FORBIDDEN) {
      throw new BrowseFileTransferException(""String_Node_Str"",code);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      throw new BrowseFileTransferException(""String_Node_Str"",code);
    }
 else {
      throw new BrowseFileTransferException(NLS.bind(""String_Node_Str"",new Integer(code)),code);
    }
  }
 catch (  Exception e) {
    Exception except=(e instanceof BrowseFileTransferException) ? e : new BrowseFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile),e,code);
    throw except;
  }
}","protected void runRequest() throws Exception {
  int code=-1;
  try {
    setupProxies();
    setupAuthentication();
    setupTimeouts();
    URLConnection urlConnection=directoryOrFile.openConnection();
    if (directoryOrFile.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
      urlConnection.setUseCaches(false);
    }
    urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    IURLConnectionModifier connectionModifier=Activator.getDefault().getURLConnectionModifier();
    if (connectionModifier != null) {
      connectionModifier.setSocketFactoryForConnection(urlConnection);
    }
    InputStream ins=urlConnection.getInputStream();
    code=getResponseCode(urlConnection);
    ins.close();
    if (isHTTP()) {
      if (code == HttpURLConnection.HTTP_NOT_FOUND) {
        throw new BrowseFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile.toString()),code);
      }
 else       if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else       if (code == HttpURLConnection.HTTP_FORBIDDEN) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else       if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
        throw new BrowseFileTransferException(""String_Node_Str"",code);
      }
 else {
        throw new BrowseFileTransferException(NLS.bind(""String_Node_Str"",new Integer(code)),code);
      }
    }
    remoteFiles=new IRemoteFile[1];
    remoteFiles[0]=new URLRemoteFile(urlConnection.getLastModified(),urlConnection.getContentLength(),fileID);
  }
 catch (  Exception e) {
    Exception except=(e instanceof BrowseFileTransferException) ? e : new BrowseFileTransferException(NLS.bind(""String_Node_Str"",directoryOrFile),e,code);
    throw except;
  }
}",0.8972168641499035
94444,"protected void openStreams() throws IncomingFileTransferException {
  int code=-1;
  try {
    setupAuthentication();
    connect();
    setRequestHeaderValues();
    setCompressionRequestHeader();
    setInputStream(getDecompressedStream());
    code=getResponseCode();
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResponseHeaderValues();
      fireReceiveStartEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      throw new IncomingFileTransferException(NLS.bind(""String_Node_Str"",getRemoteFileURL().toString()),code);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
      throw new IncomingFileTransferException(""String_Node_Str"",code);
    }
 else     if (code == HttpURLConnection.HTTP_FORBIDDEN) {
      throw new IncomingFileTransferException(""String_Node_Str"",code);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      throw new IncomingFileTransferException(""String_Node_Str"",code);
    }
 else {
      throw new IncomingFileTransferException(NLS.bind(""String_Node_Str"",new Integer(code)),code);
    }
  }
 catch (  final Exception e) {
    IncomingFileTransferException except=(e instanceof IncomingFileTransferException) ? (IncomingFileTransferException)e : new IncomingFileTransferException(NLS.bind(Messages.UrlConnectionRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,getRemoteFileURL().toString()),e,code);
    hardClose();
    throw except;
  }
}","protected void openStreams() throws IncomingFileTransferException {
  int code=-1;
  try {
    setupAuthentication();
    connect();
    setRequestHeaderValues();
    setCompressionRequestHeader();
    setInputStream(getDecompressedStream());
    code=getResponseCode();
    if (isHTTP()) {
      if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
        fireReceiveStartEvent();
      }
 else       if (code == HttpURLConnection.HTTP_NOT_FOUND) {
        throw new IncomingFileTransferException(NLS.bind(""String_Node_Str"",getRemoteFileURL().toString()),code);
      }
 else       if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
        throw new IncomingFileTransferException(""String_Node_Str"",code);
      }
 else       if (code == HttpURLConnection.HTTP_FORBIDDEN) {
        throw new IncomingFileTransferException(""String_Node_Str"",code);
      }
 else       if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
        throw new IncomingFileTransferException(""String_Node_Str"",code);
      }
 else {
        throw new IncomingFileTransferException(NLS.bind(""String_Node_Str"",new Integer(code)),code);
      }
    }
 else {
      fireReceiveStartEvent();
    }
  }
 catch (  final Exception e) {
    IncomingFileTransferException except=(e instanceof IncomingFileTransferException) ? (IncomingFileTransferException)e : new IncomingFileTransferException(NLS.bind(Messages.UrlConnectionRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,getRemoteFileURL().toString()),e,code);
    hardClose();
    throw except;
  }
}",0.9557171183079972
94445,"public List getNamespaces(){
  Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,IDFactory.class,""String_Node_Str"");
  return new ArrayList(namespaces.values());
}","public List getNamespaces(){
  Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,IDFactory.class,""String_Node_Str"");
  initialize();
  return new ArrayList(namespaces.values());
}",0.9587628865979382
94446,"protected final static boolean containsNamespace0(Namespace n){
  if (n == null)   return false;
  return namespaces.containsKey(n.getName());
}","public final static boolean containsNamespace0(Namespace n){
  if (n == null)   return false;
  return namespaces.containsKey(n.getName());
}",0.9614035087719298
94447,"public Namespace removeNamespace(Namespace n) throws SecurityException {
  Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,IDFactory.class,""String_Node_Str"",n);
  if (n == null)   return null;
  checkPermission(new NamespacePermission(n.toString(),NamespacePermission.REMOVE_NAMESPACE));
  Namespace result=removeNamespace0(n);
  Trace.exiting(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_EXITING,IDFactory.class,""String_Node_Str"",result);
  return result;
}","public Namespace removeNamespace(Namespace n) throws SecurityException {
  if (n == null)   return null;
  Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,IDFactory.class,""String_Node_Str"",n);
  checkPermission(new NamespacePermission(n.toString(),NamespacePermission.REMOVE_NAMESPACE));
  initialize();
  Namespace result=removeNamespace0(n);
  Trace.exiting(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_EXITING,IDFactory.class,""String_Node_Str"",result);
  return result;
}",0.9191919191919192
94448,"public static IIDFactory getDefault(){
  return instance;
}","public synchronized static IIDFactory getDefault(){
  return instance;
}",0.900763358778626
94449,"public boolean containsNamespace(Namespace namespace) throws SecurityException {
  Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,IDFactory.class,""String_Node_Str"",namespace);
  if (namespace == null)   return false;
  checkPermission(new NamespacePermission(namespace.toString(),NamespacePermission.CONTAINS_NAMESPACE));
  boolean result=containsNamespace0(namespace);
  Trace.exiting(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_EXITING,IDFactory.class,""String_Node_Str"",new Boolean(result));
  return result;
}","public boolean containsNamespace(Namespace namespace) throws SecurityException {
  if (namespace == null)   return false;
  Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,IDFactory.class,""String_Node_Str"",namespace);
  checkPermission(new NamespacePermission(namespace.toString(),NamespacePermission.CONTAINS_NAMESPACE));
  initialize();
  boolean result=containsNamespace0(namespace);
  Trace.exiting(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_EXITING,IDFactory.class,""String_Node_Str"",new Boolean(result));
  return result;
}",0.911070780399274
94450,"protected final static Namespace addNamespace0(Namespace namespace){
  if (namespace == null)   return null;
  return (Namespace)namespaces.put(namespace.getName(),namespace);
}","public final static Namespace addNamespace0(Namespace namespace){
  if (namespace == null)   return null;
  return (Namespace)namespaces.put(namespace.getName(),namespace);
}",0.9686609686609686
94451,"public Namespace addNamespace(Namespace namespace) throws SecurityException {
  if (namespace == null)   return null;
  Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,IDFactory.class,""String_Node_Str"",namespace);
  checkPermission(new NamespacePermission(namespace.toString(),NamespacePermission.ADD_NAMESPACE));
  Namespace result=addNamespace0(namespace);
  Trace.exiting(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_EXITING,IDFactory.class,""String_Node_Str"",result);
  return result;
}","public Namespace addNamespace(Namespace namespace) throws SecurityException {
  if (namespace == null)   return null;
  Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,IDFactory.class,""String_Node_Str"",namespace);
  checkPermission(new NamespacePermission(namespace.toString(),NamespacePermission.ADD_NAMESPACE));
  initialize();
  Namespace result=addNamespace0(namespace);
  Trace.exiting(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_EXITING,IDFactory.class,""String_Node_Str"",result);
  return result;
}",0.9847908745247148
94452,"public Namespace getNamespaceByName(String name) throws SecurityException {
  Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,IDFactory.class,""String_Node_Str"",name);
  Namespace result=getNamespace0(name);
  Trace.exiting(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_EXITING,IDFactory.class,""String_Node_Str"",result);
  return result;
}","public Namespace getNamespaceByName(String name) throws SecurityException {
  Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,IDFactory.class,""String_Node_Str"",name);
  initialize();
  Namespace result=getNamespace0(name);
  Trace.exiting(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_EXITING,IDFactory.class,""String_Node_Str"",result);
  return result;
}",0.9786096256684492
94453,"public Namespace getNamespace(Namespace namespace) throws SecurityException {
  Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,IDFactory.class,""String_Node_Str"",namespace);
  if (namespace == null)   return null;
  checkPermission(new NamespacePermission(namespace.toString(),NamespacePermission.GET_NAMESPACE));
  Namespace result=getNamespace0(namespace);
  Trace.exiting(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_EXITING,IDFactory.class,""String_Node_Str"",result);
  return result;
}","public Namespace getNamespace(Namespace namespace) throws SecurityException {
  if (namespace == null)   return null;
  Trace.entering(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_ENTERING,IDFactory.class,""String_Node_Str"",namespace);
  checkPermission(new NamespacePermission(namespace.toString(),NamespacePermission.GET_NAMESPACE));
  initialize();
  Namespace result=getNamespace0(namespace);
  Trace.exiting(Activator.PLUGIN_ID,IdentityDebugOptions.METHODS_EXITING,IDFactory.class,""String_Node_Str"",result);
  return result;
}",0.908745247148289
94454,"public void log(IStatus status){
  final LogService logService=getLogService();
  if (logService != null) {
    logService.log(LogHelper.getLogCode(status),LogHelper.getLogMessage(status),status.getException());
  }
}","public void log(IStatus status){
  if (this.context == null)   return;
  final LogService logService=getLogService();
  if (logService != null) {
    logService.log(LogHelper.getLogCode(status),LogHelper.getLogMessage(status),status.getException());
  }
}",0.9194915254237288
94455,"public void stop(BundleContext ctxt) throws Exception {
  plugin=null;
  this.context=null;
  final IExtensionRegistry registry=getExtensionRegistry();
  if (registry != null) {
    registry.removeRegistryChangeListener(registryChangeListener);
  }
  if (urlConnectionModifier != null) {
    urlConnectionModifier.dispose();
    urlConnectionModifier=null;
  }
  if (extensionRegistryTracker != null) {
    extensionRegistryTracker.close();
    extensionRegistryTracker=null;
  }
  if (fileTransferServiceRegistration != null) {
    fileTransferServiceRegistration.unregister();
    fileTransferServiceRegistration=null;
  }
  if (adapterManagerTracker != null) {
    adapterManagerTracker.close();
    adapterManagerTracker=null;
  }
  if (proxyServiceTracker != null) {
    proxyServiceTracker.close();
    proxyServiceTracker=null;
  }
  this.context=null;
  if (this.retrieveFileTransferProtocolMap != null) {
    this.retrieveFileTransferProtocolMap.clear();
    this.retrieveFileTransferProtocolMap=null;
  }
  if (this.sendFileTransferProtocolMap != null) {
    this.sendFileTransferProtocolMap.clear();
    this.sendFileTransferProtocolMap=null;
  }
  if (this.browseFileTransferProtocolMap != null) {
    this.browseFileTransferProtocolMap.clear();
    this.browseFileTransferProtocolMap=null;
  }
}","public void stop(BundleContext ctxt) throws Exception {
  final IExtensionRegistry registry=getExtensionRegistry();
  if (registry != null) {
    registry.removeRegistryChangeListener(registryChangeListener);
  }
  if (urlConnectionModifier != null) {
    urlConnectionModifier.dispose();
    urlConnectionModifier=null;
  }
  if (extensionRegistryTracker != null) {
    extensionRegistryTracker.close();
    extensionRegistryTracker=null;
  }
  if (fileTransferServiceRegistration != null) {
    fileTransferServiceRegistration.unregister();
    fileTransferServiceRegistration=null;
  }
  if (adapterManagerTracker != null) {
    adapterManagerTracker.close();
    adapterManagerTracker=null;
  }
  if (proxyServiceTracker != null) {
    proxyServiceTracker.close();
    proxyServiceTracker=null;
  }
  if (this.retrieveFileTransferProtocolMap != null) {
    this.retrieveFileTransferProtocolMap.clear();
    this.retrieveFileTransferProtocolMap=null;
  }
  if (this.sendFileTransferProtocolMap != null) {
    this.sendFileTransferProtocolMap.clear();
    this.sendFileTransferProtocolMap=null;
  }
  if (this.browseFileTransferProtocolMap != null) {
    this.browseFileTransferProtocolMap.clear();
    this.browseFileTransferProtocolMap=null;
  }
synchronized (this) {
    this.context=null;
  }
  plugin=null;
}",0.9538696149447198
94456,"protected synchronized LogService getLogService(){
  if (this.context == null)   return null;
  if (logServiceTracker == null) {
    logServiceTracker=new ServiceTracker(this.context,LogService.class.getName(),null);
    logServiceTracker.open();
  }
  return (LogService)logServiceTracker.getService();
}","protected LogService getLogService(){
synchronized (this) {
    if (this.context == null)     return null;
    if (logServiceTracker == null) {
      logServiceTracker=new ServiceTracker(this.context,LogService.class.getName(),null);
      logServiceTracker.open();
    }
    return (LogService)logServiceTracker.getService();
  }
}",0.8759811616954474
94457,"protected LogService getLogService(){
  if (logServiceTracker == null) {
    logServiceTracker=new ServiceTracker(this.context,LogService.class.getName(),null);
    logServiceTracker.open();
  }
  return (LogService)logServiceTracker.getService();
}","protected synchronized LogService getLogService(){
  if (this.context == null)   return null;
  if (logServiceTracker == null) {
    logServiceTracker=new ServiceTracker(this.context,LogService.class.getName(),null);
    logServiceTracker.open();
  }
  return (LogService)logServiceTracker.getService();
}",0.8989169675090253
94458,"public boolean removeChannel(ID channelID){
  if (channelID == null || channelID.equals(getID()))   return false;
  ISharedObject o=getContext().getSharedObjectManager().removeSharedObject(channelID);
  return (o != null);
}","public boolean removeChannel(ID channelID){
  if (channelID == null || channelID.equals(getID()))   return false;
  ISharedObject o=getContext().getSharedObjectManager().removeSharedObject(channelID);
  if (o != null && o instanceof IChannel) {
    ((IChannel)o).dispose();
    return true;
  }
  return false;
}",0.8022388059701493
94459,"/** 
 * Returns the last modified time for this file, or   {@link #NONE}if the file does not exist or the last modified time could not be computed. <p> The time is represented as the number of Universal Time (UT)  milliseconds since the epoch (00:00:00 GMT, January 1, 1970). </p>
 * @return the last modified time for this file, or {@link #NONE}
 */
public long getLastModified();","/** 
 * Returns the last modified time for this file, or   {@link #NO_LAST_MODIFIED }if the file does not exist or the last modified time could not be computed. <p> The time is represented as the number of Universal Time (UT)  milliseconds since the epoch (00:00:00 GMT, January 1, 1970). </p>
 * @return the last modified time for this file, or {@link #NO_LAST_MODIFIED } if file does not exist or last modified not known or could not be computed.
 */
public long getLastModified();",0.8773148148148148
94460,"/** 
 * Returns the length of this file, or   {@link #NONE}if the file does not exist, is a directory, or the length could not be computed.
 * @return the length of this file, or {@link #NONE}
 */
public long getLength();","/** 
 * Returns the length of this file, or   {@link #NO_LENGTH}if the file does not exist, is a directory, or the length could not be computed.
 * @return the length of this file, or {@link #NO_LENGTH}
 */
public long getLength();",0.9690265486725664
94461,"private Compression getCompressionResponseHeader(){
  String encoding=urlConnection.getContentEncoding();
  if (null == encoding) {
    return Compression.NONE;
  }
 else   if (encoding.equalsIgnoreCase(CONTENT_ENCODING_GZIP)) {
    return Compression.GZIP;
  }
  return Compression.NONE;
}","private Compression getCompressionResponseHeader(){
  String encoding=urlConnection.getContentEncoding();
  if (null == encoding) {
    return Compression.NONE;
  }
 else   if (encoding.equalsIgnoreCase(CONTENT_ENCODING_GZIP) && !targetHasGzSuffix(remoteFileName)) {
    return Compression.GZIP;
  }
  return Compression.NONE;
}",0.9385113268608414
94462,"private boolean includeRCSAForDescription(IContainer container,IRemoteServiceContainerAdapter adapter,ID endpointID,ServiceEndpointDescription description){
  if (endpointID.equals(container.getID()))   return false;
  String connectNamespaceName=(String)description.getProperty(Constants.SERVICE_CONNECT_ID_NAMESPACE);
  if (connectNamespaceName != null) {
    Namespace namespace=container.getConnectNamespace();
    if (namespace != null && namespace.getName().equals(connectNamespaceName))     return true;
  }
  return true;
}","private boolean includeRCSAForDescription(IContainer container,IRemoteServiceContainerAdapter adapter,ID endpointID,ServiceEndpointDescription description){
  if (endpointID.equals(container.getID()))   return false;
  String connectNamespaceName=(String)description.getProperty(ECFServicePublication.PROP_KEY_ENDPOINT_CONTAINERID_NAMESPACE);
  if (connectNamespaceName != null) {
    Namespace namespace=container.getConnectNamespace();
    if (namespace != null && namespace.getName().equals(connectNamespaceName))     return true;
  }
  return false;
}",0.9337016574585636
94463,"protected void testReceiveHttp(String url) throws Exception {
  assertNotNull(transferInstance);
  final IFileTransferListener listener=new IFileTransferListener(){
    public void handleTransferEvent(    IFileTransferEvent event){
      if (event instanceof IIncomingFileTransferReceiveResumedEvent) {
        try {
          IIncomingFileTransferReceiveResumedEvent rse=(IIncomingFileTransferReceiveResumedEvent)event;
          session=rse.receive(outs);
        }
 catch (        Exception e) {
          fail(e.getLocalizedMessage());
        }
      }
 else       if (event instanceof IIncomingFileTransferReceiveStartEvent) {
        IIncomingFileTransferReceiveStartEvent rse=(IIncomingFileTransferReceiveStartEvent)event;
        try {
          incomingFile=new File(FILENAME);
          outs=new FileOutputStream(incomingFile);
          session=rse.receive(outs);
          pausable=(IFileTransferPausable)session.getAdapter(IFileTransferPausable.class);
          if (pausable == null)           fail(""String_Node_Str"");
        }
 catch (        IOException e) {
          fail(e.getLocalizedMessage());
        }
      }
 else       if (event instanceof IIncomingFileTransferReceiveDataEvent) {
        System.out.println(""String_Node_Str"" + event);
      }
 else       if (event instanceof IIncomingFileTransferReceivePausedEvent) {
        System.out.println(""String_Node_Str"" + event);
      }
 else       if (event instanceof IIncomingFileTransferReceiveDoneEvent) {
        closeOutputStream();
        System.out.println(""String_Node_Str"" + event);
synchronized (notify) {
          notify.notify();
        }
      }
    }
  }
;
  transferInstance.sendRetrieveRequest(FileIDFactory.getDefault().createFileID(transferInstance.getRetrieveNamespace(),url),listener,null);
  if (pausable != null) {
    Thread.sleep(1000);
    System.out.println(""String_Node_Str"" + pausable.pause());
    System.out.println(""String_Node_Str"" + PAUSE_TIME / 1000 + ""String_Node_Str"");
    Thread.sleep(PAUSE_TIME);
    final boolean success=pausable.resume();
    System.out.println(""String_Node_Str"" + success);
    if (!success) {
      System.out.println(""String_Node_Str"" + session);
      final Exception e=session.getException();
      System.out.println(""String_Node_Str"" + e);
      if (e != null)       e.printStackTrace();
      System.out.println(""String_Node_Str"" + session.isDone());
      return;
    }
    System.out.println();
  }
synchronized (notify) {
    notify.wait();
  }
  final Exception e=session.getException();
  if (e != null)   throw e;
}","protected void testReceiveHttp(String url) throws Exception {
  assertNotNull(transferInstance);
  final IFileTransferListener listener=new IFileTransferListener(){
    public void handleTransferEvent(    IFileTransferEvent event){
      if (event instanceof IIncomingFileTransferReceiveResumedEvent) {
        try {
          IIncomingFileTransferReceiveResumedEvent rse=(IIncomingFileTransferReceiveResumedEvent)event;
          session=rse.receive(outs);
        }
 catch (        Exception e) {
          fail(e.getLocalizedMessage());
        }
      }
 else       if (event instanceof IIncomingFileTransferReceiveStartEvent) {
        IIncomingFileTransferReceiveStartEvent rse=(IIncomingFileTransferReceiveStartEvent)event;
        try {
          incomingFile=new File(FILENAME);
          outs=new FileOutputStream(incomingFile);
          session=rse.receive(outs);
          pausable=(IFileTransferPausable)session.getAdapter(IFileTransferPausable.class);
          if (pausable == null)           fail(""String_Node_Str"");
        }
 catch (        IOException e) {
          fail(e.getLocalizedMessage());
        }
      }
 else       if (event instanceof IIncomingFileTransferReceiveDataEvent) {
        System.out.println(""String_Node_Str"" + event);
      }
 else       if (event instanceof IIncomingFileTransferReceivePausedEvent) {
        System.out.println(""String_Node_Str"" + event);
      }
 else       if (event instanceof IIncomingFileTransferReceiveDoneEvent) {
        closeOutputStream();
        System.out.println(""String_Node_Str"" + event);
synchronized (notify) {
          notify.notify();
        }
      }
    }
  }
;
  transferInstance.sendRetrieveRequest(FileIDFactory.getDefault().createFileID(transferInstance.getRetrieveNamespace(),url),listener,null);
  if (pausable != null) {
    Thread.sleep(500);
    System.out.println(""String_Node_Str"" + pausable.pause());
    System.out.println(""String_Node_Str"" + PAUSE_TIME / 1000 + ""String_Node_Str"");
    Thread.sleep(PAUSE_TIME);
    final boolean success=pausable.resume();
    System.out.println(""String_Node_Str"" + success);
    if (!success) {
      System.out.println(""String_Node_Str"" + session);
      final Exception e=session.getException();
      System.out.println(""String_Node_Str"" + e);
      if (e != null)       e.printStackTrace();
      System.out.println(""String_Node_Str"" + session.isDone());
      return;
    }
    System.out.println();
  }
synchronized (notify) {
    notify.wait();
  }
  final Exception e=session.getException();
  if (e != null)   throw e;
}",0.7929892891918209
94464,"public void testReceiveGzipWithGZFile() throws Exception {
  File f=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  FileOutputStream fos=new FileOutputStream(f);
  System.out.println(f);
  ECFTransport.getInstance().download(""String_Node_Str"",fos,new NullProgressMonitor());
  fos.close();
  if (f != null) {
    System.out.println(f.length());
    assertTrue(""String_Node_Str"",f.length() < 50000);
  }
}","public void testReceiveGzipWithGZFile() throws Exception {
  File f=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  FileOutputStream fos=new FileOutputStream(f);
  System.out.println(f);
  ECFTransport.getInstance().download(HTTP_RETRIEVE_GZFILE,fos,new NullProgressMonitor());
  fos.close();
  if (f != null) {
    System.out.println(f.length());
    assertTrue(""String_Node_Str"",f.length() < 50000);
  }
}",0.9556886227544912
94465,"protected int getClientCount(){
  return 2;
}","protected int getClientCount(){
  return 1;
}",0.9777777777777776
94466,"public void testAddSharedObject() throws Exception {
  final IContainer client0Container=getClient(0);
  assertNotNull(client0Container);
  ISharedObjectContainer socontainer=(ISharedObjectContainer)client0Container.getAdapter(ISharedObjectContainer.class);
  final ISharedObjectManager manager=socontainer.getSharedObjectManager();
  assertNotNull(manager);
  final ID id=manager.addSharedObject(IDFactory.getDefault().createStringID(""String_Node_Str""),new TestSharedObject(TEST_USERNAME0),null);
  assertNotNull(id);
  final ISharedObject sharedObject=manager.getSharedObject(id);
  assertNotNull(sharedObject);
  sleep(3000);
  for (int clientIndex=0; clientIndex < getClientCount(); clientIndex++) {
    socontainer=(ISharedObjectContainer)getClient(clientIndex).getAdapter(ISharedObjectContainer.class);
    ISharedObject sharedObj=socontainer.getSharedObjectManager().getSharedObject(IDFactory.getDefault().createStringID(""String_Node_Str""));
    if (sharedObj != null) {
      System.out.println(""String_Node_Str"" + sharedObj.toString());
    }
  }
}","public void testAddSharedObject() throws Exception {
  final IContainer client0Container=getClient(0);
  assertNotNull(client0Container);
  ISharedObjectContainer socontainer=(ISharedObjectContainer)client0Container.getAdapter(ISharedObjectContainer.class);
  final ISharedObjectManager manager=socontainer.getSharedObjectManager();
  assertNotNull(manager);
  final ID id=manager.addSharedObject(IDFactory.getDefault().createStringID(""String_Node_Str""),new TestSharedObject(TEST_USERNAME0),null);
  assertNotNull(id);
  final ISharedObject sharedObject=manager.getSharedObject(id);
  assertNotNull(sharedObject);
  sleep(3000);
}",0.7468879668049793
94467,"public void testAddTwoSharedObjects() throws Exception {
  final IContainer client0Container=getClient(0);
  assertNotNull(client0Container);
  ISharedObjectContainer socontainer=(ISharedObjectContainer)client0Container.getAdapter(ISharedObjectContainer.class);
  final ISharedObjectManager manager=socontainer.getSharedObjectManager();
  assertNotNull(manager);
  final ID id0=manager.addSharedObject(IDFactory.getDefault().createStringID(""String_Node_Str""),new TestSharedObject(TEST_USERNAME0),null);
  assertNotNull(id0);
  final ID id1=manager.addSharedObject(IDFactory.getDefault().createStringID(""String_Node_Str""),new TestSharedObject(TEST_USERNAME1),null);
  assertNotNull(id1);
  final ISharedObject sharedObject0=manager.getSharedObject(id0);
  assertNotNull(sharedObject0);
  final ISharedObject sharedObject1=manager.getSharedObject(id1);
  assertNotNull(sharedObject1);
  sleep(3000);
  for (int clientIndex=0; clientIndex < getClientCount(); clientIndex++) {
    socontainer=(ISharedObjectContainer)getClient(clientIndex).getAdapter(ISharedObjectContainer.class);
    ISharedObject sharedObj=socontainer.getSharedObjectManager().getSharedObject(IDFactory.getDefault().createStringID(""String_Node_Str""));
    if (sharedObj != null) {
      System.out.println(""String_Node_Str"" + sharedObj.toString());
    }
    sharedObj=socontainer.getSharedObjectManager().getSharedObject(IDFactory.getDefault().createStringID(""String_Node_Str""));
    if (sharedObj != null) {
      System.out.println(""String_Node_Str"" + sharedObj.toString());
    }
  }
}","public void testAddTwoSharedObjects() throws Exception {
  final IContainer client0Container=getClient(0);
  assertNotNull(client0Container);
  ISharedObjectContainer socontainer=(ISharedObjectContainer)client0Container.getAdapter(ISharedObjectContainer.class);
  final ISharedObjectManager manager=socontainer.getSharedObjectManager();
  assertNotNull(manager);
  final ID id0=manager.addSharedObject(IDFactory.getDefault().createStringID(""String_Node_Str""),new TestSharedObject(TEST_USERNAME0),null);
  assertNotNull(id0);
  final ID id1=manager.addSharedObject(IDFactory.getDefault().createStringID(""String_Node_Str""),new TestSharedObject(TEST_USERNAME1),null);
  assertNotNull(id1);
  final ISharedObject sharedObject0=manager.getSharedObject(id0);
  assertNotNull(sharedObject0);
  final ISharedObject sharedObject1=manager.getSharedObject(id1);
  assertNotNull(sharedObject1);
  sleep(3000);
}",0.732681336593317
94468,"public boolean processEvent(Event event){
  if (event instanceof ISharedObjectActivatedEvent) {
    if (isPrimary() && isConnected()) {
      TestSharedObject.this.replicateToRemoteContainers(null);
    }
  }
  return false;
}","public boolean processEvent(Event event){
  if (event instanceof ISharedObjectActivatedEvent) {
    ISharedObjectActivatedEvent ae=(ISharedObjectActivatedEvent)event;
    if (ae.getActivatedID().equals(getID()) && isConnected()) {
      TestSharedObject.this.replicateToRemoteContainers(null);
    }
  }
  return false;
}",0.7897623400365631
94469,"protected void initialize() throws SharedObjectInitException {
  super.initialize();
  if (isPrimary()) {
    addEventProcessor(new IEventProcessor(){
      public boolean processEvent(      Event event){
        if (event instanceof ISharedObjectActivatedEvent) {
          if (isPrimary() && isConnected()) {
            TestSharedObject.this.replicateToRemoteContainers(null);
          }
        }
        return false;
      }
    }
);
    System.out.println(""String_Node_Str"" + getContext().getLocalContainerID() + ""String_Node_Str""+ name);
  }
 else {
    name=(String)getConfig().getProperties().get(NAME_PROPERTY);
    System.out.println(""String_Node_Str"" + getContext().getLocalContainerID() + ""String_Node_Str""+ name);
  }
}","protected void initialize() throws SharedObjectInitException {
  super.initialize();
  if (isPrimary()) {
    addEventProcessor(new IEventProcessor(){
      public boolean processEvent(      Event event){
        if (event instanceof ISharedObjectActivatedEvent) {
          ISharedObjectActivatedEvent ae=(ISharedObjectActivatedEvent)event;
          if (ae.getActivatedID().equals(getID()) && isConnected()) {
            TestSharedObject.this.replicateToRemoteContainers(null);
          }
        }
        return false;
      }
    }
);
    System.out.println(""String_Node_Str"" + getContext().getLocalContainerID() + ""String_Node_Str""+ name);
  }
 else {
    name=(String)getConfig().getProperties().get(NAME_PROPERTY);
    System.out.println(""String_Node_Str"" + getContext().getLocalContainerID() + ""String_Node_Str""+ name);
  }
}",0.9229789942711648
94470,"public String getTargetRelativePath(){
  return targetPath;
}","public String getTargetRelativePath(){
  return targetRelativePath;
}",0.9384615384615383
94471,"public void setTargetHostByURL(String url){
  this.targetURL=url;
  this.targetPath=getPathFromURL(targetURL);
  String host=getHostFromURL(targetURL);
  int port=getPortFromURL(targetURL);
  if (HttpClientRetrieveFileTransfer.urlUsesHttps(targetURL)) {
    ISSLSocketFactoryModifier sslSocketFactoryModifier=Activator.getDefault().getSSLSocketFactoryModifier();
    if (sslSocketFactoryModifier == null) {
      sslSocketFactoryModifier=new HttpClientDefaultSSLSocketFactoryModifier();
    }
    SecureProtocolSocketFactory psf=new ECFHttpClientSecureProtocolSocketFactory(sslSocketFactoryModifier,source,socketListener);
    Protocol sslProtocol=new Protocol(HttpClientRetrieveFileTransfer.HTTPS,(ProtocolSocketFactory)psf,port);
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + host + ""String_Node_Str""+ port);
    hostConfiguration.setHost(host,port,sslProtocol);
  }
 else {
    ProtocolSocketFactory psf=new ECFHttpClientProtocolSocketFactory(SocketFactory.getDefault(),source,socketListener);
    Protocol protocol=new Protocol(HttpClientRetrieveFileTransfer.HTTP,psf,port);
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + host + ""String_Node_Str""+ port);
    hostConfiguration.setHost(host,port,protocol);
  }
}","public void setTargetHostByURL(String url){
  this.targetURL=url;
  this.targetRelativePath=getTargetRelativePathFromURL(targetURL);
  String host=getHostFromURL(targetURL);
  int port=getPortFromURL(targetURL);
  if (HttpClientRetrieveFileTransfer.urlUsesHttps(targetURL)) {
    ISSLSocketFactoryModifier sslSocketFactoryModifier=Activator.getDefault().getSSLSocketFactoryModifier();
    if (sslSocketFactoryModifier == null) {
      sslSocketFactoryModifier=new HttpClientDefaultSSLSocketFactoryModifier();
    }
    SecureProtocolSocketFactory psf=new ECFHttpClientSecureProtocolSocketFactory(sslSocketFactoryModifier,source,socketListener);
    Protocol sslProtocol=new Protocol(HttpClientRetrieveFileTransfer.HTTPS,(ProtocolSocketFactory)psf,port);
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + host + ""String_Node_Str""+ port);
    hostConfiguration.setHost(host,port,sslProtocol);
  }
 else {
    ProtocolSocketFactory psf=new ECFHttpClientProtocolSocketFactory(SocketFactory.getDefault(),source,socketListener);
    Protocol protocol=new Protocol(HttpClientRetrieveFileTransfer.HTTP,psf,port);
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + host + ""String_Node_Str""+ port);
    hostConfiguration.setHost(host,port,protocol);
  }
}",0.9911646586345382
94472,"private boolean openStreamsForResume(){
  Trace.entering(Activator.PLUGIN_ID,DebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  final URL theURL=getRemoteFileURL();
  int code=-1;
  try {
    remoteFileURL=new URL(theURL.toString());
    final String urlString=getRemoteFileURL().toString();
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_READ_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    String path=hostConfigHelper.getTargetRelativePath();
    getMethod=new GzipGetMethod(path);
    getMethod.setFollowRedirects(true);
    setResumeRequestHeaderValues();
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + urlString);
    code=httpClient.executeMethod(getHostConfiguration(),getMethod);
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + code);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResumeResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsUnzippedStream());
      this.paused=false;
      fireReceiveResumedEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED || code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.getResponseBody();
      getMethod.releaseConnection();
      throw new IncomingFileTransferException(Messages.HttpClientRetrieveFileTransfer_Unauthorized,code);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
    Trace.exiting(Activator.PLUGIN_ID,DebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",Boolean.TRUE);
    return true;
  }
 catch (  final Exception e) {
    setDoneException(e);
    Trace.catching(Activator.PLUGIN_ID,DebugOptions.EXCEPTIONS_THROWING,this.getClass(),""String_Node_Str"",e);
    hardClose();
    fireTransferReceiveDoneEvent();
    Trace.exiting(Activator.PLUGIN_ID,DebugOptions.EXCEPTIONS_THROWING,this.getClass(),""String_Node_Str"",Boolean.FALSE);
    return false;
  }
}","private boolean openStreamsForResume(){
  Trace.entering(Activator.PLUGIN_ID,DebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  final String urlString=getRemoteFileURL().toString();
  this.doneFired=false;
  int code=-1;
  try {
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_READ_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(hostConfigHelper.getTargetRelativePath());
    getMethod.setFollowRedirects(true);
    getMethod.getParams().setParameter(CredentialsProvider.PROVIDER,new ECFCredentialsProvider());
    setResumeRequestHeaderValues();
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + urlString);
    fireConnectStartEvent();
    if (checkAndHandleDone()) {
      return false;
    }
    connectingSockets.clear();
    if (connectJob == null) {
      performConnect(new NullProgressMonitor());
    }
 else {
      connectJob.schedule();
      connectJob.join();
      connectJob=null;
    }
    if (checkAndHandleDone()) {
      return false;
    }
    code=responseCode;
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + code);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResumeResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsUnzippedStream());
      this.paused=false;
      fireReceiveResumedEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.releaseConnection();
      throw new LoginException(""String_Node_Str"");
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
    Trace.exiting(Activator.PLUGIN_ID,DebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",Boolean.TRUE);
    return true;
  }
 catch (  final Exception e) {
    Trace.catching(Activator.PLUGIN_ID,DebugOptions.EXCEPTIONS_CATCHING,this.getClass(),""String_Node_Str"",e);
    if (code == -1) {
      if (!isDone()) {
        setDoneException(e);
      }
    }
 else {
      setDoneException(new IncomingFileTransferException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,urlString),e,code));
    }
    fireTransferReceiveDoneEvent();
    Trace.exiting(Activator.PLUGIN_ID,DebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",Boolean.FALSE);
    return false;
  }
}",0.7462580185317177
94473,"protected static String getPathFromURL(String url){
  final int colonSlashSlash=url.indexOf(""String_Node_Str"");
  if (colonSlashSlash < 0)   return ""String_Node_Str"";
  final int requestPath=url.indexOf('/',colonSlashSlash + 3);
  if (requestPath < 0)   return ""String_Node_Str"";
  int end=url.length();
  return url.substring(requestPath,end);
}","protected static String getPathFromURL(String url){
  final int colonSlashSlash=url.indexOf(""String_Node_Str"");
  if (colonSlashSlash < 0)   return ""String_Node_Str"";
  final int requestPath=url.indexOf('/',colonSlashSlash + 3);
  if (requestPath < 0)   return ""String_Node_Str"";
  return cleanExtraSlashesFromPath(url.substring(requestPath));
}",0.9001447178002895
94474,"protected void openStreams() throws IncomingFileTransferException {
  Trace.entering(Activator.PLUGIN_ID,DebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  final String urlString=getRemoteFileURL().toString();
  this.doneFired=false;
  int code=-1;
  try {
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_READ_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(hostConfigHelper.getTargetRelativePath());
    getMethod.setFollowRedirects(true);
    getMethod.getParams().setParameter(CredentialsProvider.PROVIDER,new ECFCredentialsProvider());
    setRequestHeaderValues();
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + urlString);
    if (getFileRangeSpecification() == null)     getMethod.setRequestHeader(GzipGetMethod.ACCEPT_ENCODING,GzipGetMethod.CONTENT_ENCODING_ACCEPTED);
    fireConnectStartEvent();
    if (checkAndHandleDone()) {
      return;
    }
    connectingSockets.clear();
    if (connectJob == null) {
      performConnect(new NullProgressMonitor());
    }
 else {
      connectJob.schedule();
      connectJob.join();
      connectJob=null;
    }
    if (checkAndHandleDone()) {
      return;
    }
    code=responseCode;
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + code);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsUnzippedStream());
      fireReceiveStartEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.releaseConnection();
      throw new LoginException(""String_Node_Str"");
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
  }
 catch (  final Exception e) {
    Trace.throwing(Activator.PLUGIN_ID,DebugOptions.EXCEPTIONS_THROWING,this.getClass(),""String_Node_Str"",e);
    if (code == -1) {
      if (!isDone()) {
        setDoneException(e);
      }
      fireTransferReceiveDoneEvent();
    }
 else {
      IncomingFileTransferException ex=new IncomingFileTransferException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,urlString),e,code);
      throw ex;
    }
  }
  Trace.exiting(Activator.PLUGIN_ID,DebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}","protected void openStreams() throws IncomingFileTransferException {
  Trace.entering(Activator.PLUGIN_ID,DebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  final String urlString=getRemoteFileURL().toString();
  this.doneFired=false;
  int code=-1;
  try {
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_READ_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(hostConfigHelper.getTargetRelativePath());
    getMethod.setFollowRedirects(true);
    getMethod.getParams().setParameter(CredentialsProvider.PROVIDER,new ECFCredentialsProvider());
    setRequestHeaderValues();
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + urlString);
    if (getFileRangeSpecification() == null) {
      Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"");
      getMethod.setRequestHeader(GzipGetMethod.ACCEPT_ENCODING,GzipGetMethod.CONTENT_ENCODING_ACCEPTED);
    }
 else {
      Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"");
    }
    fireConnectStartEvent();
    if (checkAndHandleDone()) {
      return;
    }
    connectingSockets.clear();
    if (connectJob == null) {
      performConnect(new NullProgressMonitor());
    }
 else {
      connectJob.schedule();
      connectJob.join();
      connectJob=null;
    }
    if (checkAndHandleDone()) {
      return;
    }
    code=responseCode;
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + code);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsUnzippedStream());
      fireReceiveStartEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.releaseConnection();
      throw new LoginException(""String_Node_Str"");
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
  }
 catch (  final Exception e) {
    Trace.throwing(Activator.PLUGIN_ID,DebugOptions.EXCEPTIONS_THROWING,this.getClass(),""String_Node_Str"",e);
    if (code == -1) {
      if (!isDone()) {
        setDoneException(e);
      }
      fireTransferReceiveDoneEvent();
    }
 else {
      IncomingFileTransferException ex=new IncomingFileTransferException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,urlString),e,code);
      throw ex;
    }
  }
  Trace.exiting(Activator.PLUGIN_ID,DebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}",0.50332383665717
94475,"private boolean isZippedResponse(){
  boolean zipped=(null != this.getResponseHeader(CONTENT_ENCODING) && this.getResponseHeader(CONTENT_ENCODING).getValue().equals(CONTENT_ENCODING_GZIP));
  return zipped;
}","private boolean isZippedResponse(){
  boolean contentEncodingGzip=(null != this.getResponseHeader(CONTENT_ENCODING) && this.getResponseHeader(CONTENT_ENCODING).getValue().equals(CONTENT_ENCODING_GZIP));
  Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + (contentEncodingGzip ? ""String_Node_Str"" : ""String_Node_Str""));
  boolean hasGzSuffix=targetHasGzSuffix(remoteFileName);
  return contentEncodingGzip && !hasGzSuffix;
}",0.5971563981042654
94476,"protected static int getPortFromURL(String url){
  final int colonSlashSlash=url.indexOf(""String_Node_Str"");
  if (colonSlashSlash < 0)   return urlUsesHttps(url) ? HTTPS_PORT : HTTP_PORT;
  final int colonPort=url.indexOf(':',colonSlashSlash + 1);
  if (colonPort < 0)   return urlUsesHttps(url) ? HTTPS_PORT : HTTP_PORT;
  final int requestPath=url.indexOf('/',colonPort + 1);
  int end;
  if (requestPath < 0)   end=url.length();
 else   end=requestPath;
  return Integer.parseInt(url.substring(colonPort + 1,end));
}","protected static int getPortFromURL(String url){
  final int colonSlashSlash=url.indexOf(""String_Node_Str"");
  if (colonSlashSlash < 0)   return urlUsesHttps(url) ? HTTPS_PORT : HTTP_PORT;
  final int colonPort=url.indexOf(':',colonSlashSlash + 1);
  if (colonPort < 0)   return urlUsesHttps(url) ? HTTPS_PORT : HTTP_PORT;
  if (colonPort > url.indexOf('/',colonSlashSlash + 3))   return urlUsesHttps(url) ? HTTPS_PORT : HTTP_PORT;
  final int requestPath=url.indexOf('/',colonPort + 1);
  int end;
  if (requestPath < 0)   end=url.length();
 else   end=requestPath;
  return Integer.parseInt(url.substring(colonPort + 1,end));
}",0.8668407310704961
94477,"public InputStream getResponseBodyAsUnzippedStream() throws IOException {
  gzipReceived=isZippedResponse();
  InputStream input=super.getResponseBodyAsStream();
  try {
    if (gzipReceived) {
      Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"");
      return new java.util.zip.GZIPInputStream(input);
    }
  }
 catch (  IOException e) {
    Activator.getDefault().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,""String_Node_Str"",e));
    throw e;
  }
  return input;
}","public InputStream getResponseBodyAsUnzippedStream() throws IOException {
  gzipReceived=isZippedResponse();
  InputStream input=super.getResponseBodyAsStream();
  try {
    if (gzipReceived) {
      Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"");
      return new java.util.zip.GZIPInputStream(input);
    }
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"");
  }
 catch (  IOException e) {
    Activator.getDefault().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,""String_Node_Str"",e));
    throw e;
  }
  return input;
}",0.780114722753346
94478,"public String toString(){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(typeDescription).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(id).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(homeID).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(properties).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(identifier).append(""String_Node_Str"");
  return sb.toString();
}","public String toString(){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(typeDescription).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(id).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(homeID).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(identifier).append(""String_Node_Str"");
  return sb.toString();
}",0.9135802469135802
94479,"private void processFutureForRemoteServiceReferences(final ServiceEndpointDescriptionHelper sedh,final IFuture futureRemoteReferences,final ContainerHelper ch){
  Thread t=new Thread(new Runnable(){
    public void run(){
      try {
        IRemoteServiceReference[] remoteReferences=(IRemoteServiceReference[])futureRemoteReferences.get(sedh.getFutureTimeout());
        IStatus futureStatus=futureRemoteReferences.getStatus();
        if (futureStatus.isOK()) {
          trace(""String_Node_Str"",""String_Node_Str"" + ch + ""String_Node_Str""+ ((remoteReferences == null) ? ""String_Node_Str"" : Arrays.asList(remoteReferences)));
          if (remoteReferences != null) {
            registerRemoteServiceReferences(sedh,ch,remoteReferences);
          }
        }
 else {
          logError(""String_Node_Str"" + futureStatus.getMessage(),futureStatus.getException());
        }
      }
 catch (      InterruptedException e) {
        logError(""String_Node_Str"",e);
      }
catch (      OperationCanceledException e) {
        logError(""String_Node_Str"",e);
      }
catch (      TimeoutException e) {
        logError(""String_Node_Str"" + e.getDuration(),e);
      }
    }
  }
);
  t.start();
}","private void processFutureForRemoteServiceReferences(final ServiceEndpointDescriptionHelper sedh,final IFuture futureRemoteReferences,final ContainerHelper ch){
  Thread t=new Thread(new Runnable(){
    public void run(){
      try {
        IRemoteServiceReference[] remoteReferences=(IRemoteServiceReference[])futureRemoteReferences.get(sedh.getFutureTimeout());
        IStatus futureStatus=futureRemoteReferences.getStatus();
        if (futureStatus.isOK()) {
          trace(""String_Node_Str"",""String_Node_Str"" + ch + ""String_Node_Str""+ ((remoteReferences == null) ? ""String_Node_Str"" : Arrays.asList(remoteReferences).toString()));
          if (remoteReferences != null) {
            registerRemoteServiceReferences(sedh,ch,remoteReferences);
          }
        }
 else {
          logError(""String_Node_Str"" + futureStatus.getMessage(),futureStatus.getException());
        }
      }
 catch (      InterruptedException e) {
        logError(""String_Node_Str"",e);
      }
catch (      OperationCanceledException e) {
        logError(""String_Node_Str"",e);
      }
catch (      TimeoutException e) {
        logError(""String_Node_Str"" + e.getDuration(),e);
      }
    }
  }
);
  t.start();
}",0.9953994144709328
94480,"public void run(){
  try {
    IRemoteServiceReference[] remoteReferences=(IRemoteServiceReference[])futureRemoteReferences.get(sedh.getFutureTimeout());
    IStatus futureStatus=futureRemoteReferences.getStatus();
    if (futureStatus.isOK()) {
      trace(""String_Node_Str"",""String_Node_Str"" + ch + ""String_Node_Str""+ ((remoteReferences == null) ? ""String_Node_Str"" : Arrays.asList(remoteReferences)));
      if (remoteReferences != null) {
        registerRemoteServiceReferences(sedh,ch,remoteReferences);
      }
    }
 else {
      logError(""String_Node_Str"" + futureStatus.getMessage(),futureStatus.getException());
    }
  }
 catch (  InterruptedException e) {
    logError(""String_Node_Str"",e);
  }
catch (  OperationCanceledException e) {
    logError(""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    logError(""String_Node_Str"" + e.getDuration(),e);
  }
}","public void run(){
  try {
    IRemoteServiceReference[] remoteReferences=(IRemoteServiceReference[])futureRemoteReferences.get(sedh.getFutureTimeout());
    IStatus futureStatus=futureRemoteReferences.getStatus();
    if (futureStatus.isOK()) {
      trace(""String_Node_Str"",""String_Node_Str"" + ch + ""String_Node_Str""+ ((remoteReferences == null) ? ""String_Node_Str"" : Arrays.asList(remoteReferences).toString()));
      if (remoteReferences != null) {
        registerRemoteServiceReferences(sedh,ch,remoteReferences);
      }
    }
 else {
      logError(""String_Node_Str"" + futureStatus.getMessage(),futureStatus.getException());
    }
  }
 catch (  InterruptedException e) {
    logError(""String_Node_Str"",e);
  }
catch (  OperationCanceledException e) {
    logError(""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    logError(""String_Node_Str"" + e.getDuration(),e);
  }
}",0.9937677053824364
94481,"protected static String getPathFromURL(String url){
  final int colonSlashSlash=url.indexOf(""String_Node_Str"");
  final int requestPath=url.indexOf('/',colonSlashSlash + 3);
  if (requestPath < 0)   return ""String_Node_Str"";
  int end=url.length();
  return url.substring(requestPath,end);
}","protected static String getPathFromURL(String url){
  final int colonSlashSlash=url.indexOf(""String_Node_Str"");
  if (colonSlashSlash < 0)   return ""String_Node_Str"";
  final int requestPath=url.indexOf('/',colonSlashSlash + 3);
  if (requestPath < 0)   return ""String_Node_Str"";
  int end=url.length();
  return url.substring(requestPath,end);
}",0.913657770800628
94482,"protected static String getHostFromURL(String url){
  String result=url;
  final int colonSlashSlash=url.indexOf(""String_Node_Str"");
  if (colonSlashSlash >= 0) {
    result=url.substring(colonSlashSlash + 3);
  }
  final int colonPort=result.indexOf(':');
  final int requestPath=result.indexOf('/');
  int substringEnd;
  if (colonPort > 0 && requestPath > 0)   substringEnd=Math.min(colonPort,requestPath);
 else   if (colonPort > 0)   substringEnd=colonPort;
 else   if (requestPath > 0)   substringEnd=requestPath;
 else   substringEnd=result.length();
  return result.substring(0,substringEnd);
}","protected static String getHostFromURL(String url){
  String result=url;
  final int colonSlashSlash=url.indexOf(""String_Node_Str"");
  if (colonSlashSlash < 0)   return ""String_Node_Str"";
  if (colonSlashSlash >= 0) {
    result=url.substring(colonSlashSlash + 3);
  }
  final int colonPort=result.indexOf(':');
  final int requestPath=result.indexOf('/');
  int substringEnd;
  if (colonPort > 0 && requestPath > 0)   substringEnd=Math.min(colonPort,requestPath);
 else   if (colonPort > 0)   substringEnd=colonPort;
 else   if (requestPath > 0)   substringEnd=requestPath;
 else   substringEnd=result.length();
  return result.substring(0,substringEnd);
}",0.9563145353455124
94483,"protected static int getPortFromURL(String url){
  final int colonSlashSlash=url.indexOf(""String_Node_Str"");
  final int colonPort=url.indexOf(':',colonSlashSlash + 1);
  if (colonPort < 0)   return urlUsesHttps(url) ? HTTPS_PORT : HTTP_PORT;
  final int requestPath=url.indexOf('/',colonPort + 1);
  int end;
  if (requestPath < 0)   end=url.length();
 else   end=requestPath;
  return Integer.parseInt(url.substring(colonPort + 1,end));
}","protected static int getPortFromURL(String url){
  final int colonSlashSlash=url.indexOf(""String_Node_Str"");
  if (colonSlashSlash < 0)   return urlUsesHttps(url) ? HTTPS_PORT : HTTP_PORT;
  final int colonPort=url.indexOf(':',colonSlashSlash + 1);
  if (colonPort < 0)   return urlUsesHttps(url) ? HTTPS_PORT : HTTP_PORT;
  final int requestPath=url.indexOf('/',colonPort + 1);
  int end;
  if (requestPath < 0)   end=url.length();
 else   end=requestPath;
  return Integer.parseInt(url.substring(colonPort + 1,end));
}",0.9166666666666666
94484,"public Object getAdapter(Class adapter){
  return this;
}","public Object getAdapter(Class adapter){
  if (adapter == null)   return null;
  if (adapter.isInstance(this))   return this;
  return null;
}",0.5728643216080402
94485,"/** 
 * Check if 
 * @throws ContainerConnectException 
 */
public void testAddContainerWithRegisteredServices() throws ContainerConnectException {
  container.connect(null,null);
  try {
    discoveryContainer.registerService(serviceInfo);
  }
 catch (  ECFException e) {
    fail(""String_Node_Str"");
  }
  CompositeDiscoveryContainer cdc=(CompositeDiscoveryContainer)discoveryContainer;
  testDiscoveryContainer=new TestDiscoveryContainer();
  assertTrue(cdc.addContainer(testDiscoveryContainer));
  List registeredServices=testDiscoveryContainer.getRegisteredServices();
  assertEquals(""String_Node_Str"",serviceInfo,registeredServices.get(0));
}","/** 
 * Check if 
 * @throws ContainerConnectException 
 */
public void testAddContainerWithRegisteredServices() throws ContainerConnectException {
  try {
    container.connect(null,null);
    try {
      discoveryContainer.registerService(serviceInfo);
    }
 catch (    ECFException e) {
      fail(""String_Node_Str"");
    }
    CompositeDiscoveryContainer cdc=(CompositeDiscoveryContainer)discoveryContainer;
    testDiscoveryContainer=new TestDiscoveryContainer();
    assertTrue(cdc.addContainer(testDiscoveryContainer));
    List registeredServices=testDiscoveryContainer.getRegisteredServices();
    assertEquals(""String_Node_Str"",serviceInfo,registeredServices.get(0));
  }
  finally {
    CompositeDiscoveryContainer cdc=(CompositeDiscoveryContainer)discoveryContainer;
    assertTrue(cdc.removeContainer(testDiscoveryContainer));
  }
}",0.8674698795180723
94486,"public CompositeDiscoveryContainerTest(){
  super(""String_Node_Str"");
  setComparator(new CompositeServiceInfoComporator());
  setWaitTimeForProvider(Long.parseLong(System.getProperty(""String_Node_Str"",new Long(60L * 1000L).toString())));
  System.setProperty(""String_Node_Str"",SCOPE);
}","public CompositeDiscoveryContainerTest(){
  super(""String_Node_Str"");
  setComparator(new CompositeServiceInfoComporator());
  setWaitTimeForProvider(Long.parseLong(System.getProperty(""String_Node_Str"",new Long(60L * 1000L).toString())));
  setScope(IServiceTypeID.DEFAULT_SCOPE[0]);
}",0.8741258741258742
94487,"public void testAddContainerWithoutRegisteredServices() throws ContainerConnectException {
  container.connect(null,null);
  try {
    discoveryContainer.registerService(serviceInfo);
    discoveryContainer.unregisterService(serviceInfo);
  }
 catch (  ECFException e) {
    fail(""String_Node_Str"");
  }
  CompositeDiscoveryContainer cdc=(CompositeDiscoveryContainer)discoveryContainer;
  testDiscoveryContainer=new TestDiscoveryContainer();
  assertTrue(cdc.addContainer(testDiscoveryContainer));
  List registeredServices=testDiscoveryContainer.getRegisteredServices();
  assertTrue(registeredServices.isEmpty());
}","public void testAddContainerWithoutRegisteredServices() throws ContainerConnectException {
  try {
    container.connect(null,null);
    try {
      discoveryContainer.registerService(serviceInfo);
      discoveryContainer.unregisterService(serviceInfo);
    }
 catch (    ECFException e) {
      fail(""String_Node_Str"");
    }
    CompositeDiscoveryContainer cdc=(CompositeDiscoveryContainer)discoveryContainer;
    testDiscoveryContainer=new TestDiscoveryContainer();
    assertTrue(cdc.addContainer(testDiscoveryContainer));
    List registeredServices=testDiscoveryContainer.getRegisteredServices();
    assertTrue(registeredServices.isEmpty());
  }
  finally {
    CompositeDiscoveryContainer cdc=(CompositeDiscoveryContainer)discoveryContainer;
    assertTrue(cdc.removeContainer(testDiscoveryContainer));
  }
}",0.8605299860529986
94488,"public JSLPServiceInfoTest(){
  super();
  uri=createDefaultURI();
  priority=PRIORITY;
  weight=WEIGHT;
  serviceProperties=new ServiceProperties();
  serviceProperties.setProperty(""String_Node_Str"",new String(""String_Node_Str""));
  Namespace namespace=IDFactory.getDefault().getNamespaceByName(JSLPNamespace.NAME);
  try {
    serviceID=(IServiceID)IDFactory.getDefault().createID(namespace,new Object[]{SERVICE_TYPE,getHost()});
  }
 catch (  IDCreateException e) {
    fail(e.getMessage());
  }
  serviceInfo=new JSLPServiceInfo(uri,serviceID,priority,weight,serviceProperties);
}","public JSLPServiceInfoTest(){
  super();
  uri=DiscoveryTestHelper.createDefaultURI();
  priority=DiscoveryTestHelper.PRIORITY;
  weight=DiscoveryTestHelper.WEIGHT;
  serviceProperties=new ServiceProperties();
  serviceProperties.setProperty(""String_Node_Str"",new String(""String_Node_Str""));
  Namespace namespace=IDFactory.getDefault().getNamespaceByName(JSLPNamespace.NAME);
  try {
    serviceID=(IServiceID)IDFactory.getDefault().createID(namespace,new Object[]{DiscoveryTestHelper.SERVICE_TYPE,DiscoveryTestHelper.getHost()});
  }
 catch (  IDCreateException e) {
    fail(e.getMessage());
  }
  serviceInfo=new JSLPServiceInfo(uri,serviceID,priority,weight,serviceProperties);
}",0.9211356466876972
94489,"public void testjSLPDefaultsToECF2(){
  String expected=""String_Node_Str"";
  Namespace namespaceByName=IDFactory.getDefault().getNamespaceByName(namespace);
  IServiceID aServiceID=ServiceIDFactory.getDefault().createServiceID(namespaceByName,SERVICES,PROTOCOLS,expected);
  assertNotNull(aServiceID);
  IServiceTypeID stid=aServiceID.getServiceTypeID();
  assertEquals(IServiceTypeID.DEFAULT_NA,stid.getNamingAuthority());
  assertEquals(""String_Node_Str"" + IServiceTypeID.DEFAULT_SCOPE[0] + ""String_Node_Str""+ IServiceTypeID.DEFAULT_NA+ ""String_Node_Str""+ expected,aServiceID.getName());
}","public void testjSLPDefaultsToECF2(){
  String expected=""String_Node_Str"";
  Namespace namespaceByName=IDFactory.getDefault().getNamespaceByName(namespace);
  IServiceID aServiceID=ServiceIDFactory.getDefault().createServiceID(namespaceByName,DiscoveryTestHelper.SERVICES,DiscoveryTestHelper.PROTOCOLS,expected);
  assertNotNull(aServiceID);
  IServiceTypeID stid=aServiceID.getServiceTypeID();
  assertEquals(IServiceTypeID.DEFAULT_NA,stid.getNamingAuthority());
  assertEquals(""String_Node_Str"" + IServiceTypeID.DEFAULT_SCOPE[0] + ""String_Node_Str""+ IServiceTypeID.DEFAULT_NA+ ""String_Node_Str""+ expected,aServiceID.getName());
}",0.967266775777414
94490,"public void testRemoveServicePrefixECFtojSLP() throws ServiceLocationException {
  final IServiceID sid=(IServiceID)createIDFromString(SERVICE_TYPE);
  final JSLPServiceTypeID stid=(JSLPServiceTypeID)sid.getServiceTypeID();
  assertEquals(""String_Node_Str"" + SERVICES[0] + ""String_Node_Str""+ SERVICES[1]+ ""String_Node_Str""+ NAMINGAUTHORITY+ ""String_Node_Str""+ SERVICES[2],stid.getInternal());
  assertEquals(SERVICE_TYPE,stid.getName());
  assertEquals(NAMINGAUTHORITY,stid.getNamingAuthority());
  assertTrue(Arrays.equals(SERVICES,stid.getServices()));
  assertTrue(Arrays.equals(new String[]{SCOPE},stid.getScopes()));
  assertTrue(Arrays.equals(new String[]{PROTOCOL},stid.getProtocols()));
}","public void testRemoveServicePrefixECFtojSLP() throws ServiceLocationException {
  final IServiceID sid=(IServiceID)createIDFromString(DiscoveryTestHelper.SERVICE_TYPE);
  final JSLPServiceTypeID stid=(JSLPServiceTypeID)sid.getServiceTypeID();
  assertEquals(""String_Node_Str"" + DiscoveryTestHelper.SERVICES[0] + ""String_Node_Str""+ DiscoveryTestHelper.SERVICES[1]+ ""String_Node_Str""+ DiscoveryTestHelper.NAMINGAUTHORITY+ ""String_Node_Str""+ DiscoveryTestHelper.SERVICES[2],stid.getInternal());
  assertEquals(DiscoveryTestHelper.SERVICE_TYPE,stid.getName());
  assertEquals(DiscoveryTestHelper.NAMINGAUTHORITY,stid.getNamingAuthority());
  assertTrue(Arrays.equals(DiscoveryTestHelper.SERVICES,stid.getServices()));
  assertTrue(Arrays.equals(new String[]{DiscoveryTestHelper.SCOPE},stid.getScopes()));
  assertTrue(Arrays.equals(new String[]{DiscoveryTestHelper.PROTOCOL},stid.getProtocols()));
}",0.8743718592964824
94491,"public void testCreateByjSLPAndRemoveServicePrefix() throws ServiceLocationException {
  final String internalRep=""String_Node_Str"";
  final ServiceURL sUrl=new ServiceURL(internalRep + ""String_Node_Str"",ServiceURL.LIFETIME_PERMANENT);
  final IServiceInfo serviceInfo=new JSLPServiceInfo(new ServiceURLAdapter(sUrl,SERVICENAME),PRIORITY,WEIGHT,new ServicePropertiesAdapter(new ArrayList()));
  assertEquals(serviceInfo.getPriority(),PRIORITY);
  assertEquals(serviceInfo.getWeight(),WEIGHT);
  final IServiceID sid=serviceInfo.getServiceID();
  assertEquals(sid.getServiceName(),SERVICENAME);
  final IServiceTypeID stid=sid.getServiceTypeID();
  String internal=stid.getInternal();
  assertEquals(internalRep,internal);
  assertEquals(""String_Node_Str"" + IServiceTypeID.DEFAULT_PROTO[0] + ""String_Node_Str""+ IServiceTypeID.DEFAULT_SCOPE[0]+ ""String_Node_Str"",stid.getName());
  assertEquals(""String_Node_Str"",stid.getNamingAuthority());
  assertTrue(Arrays.equals(new String[]{""String_Node_Str"",""String_Node_Str""},stid.getServices()));
  assertTrue(Arrays.equals(IServiceTypeID.DEFAULT_SCOPE,stid.getScopes()));
  assertTrue(Arrays.equals(IServiceTypeID.DEFAULT_PROTO,stid.getProtocols()));
}","public void testCreateByjSLPAndRemoveServicePrefix() throws ServiceLocationException {
  final String internalRep=""String_Node_Str"";
  final ServiceURL sUrl=new ServiceURL(internalRep + ""String_Node_Str"",ServiceURL.LIFETIME_PERMANENT);
  final IServiceInfo serviceInfo=new JSLPServiceInfo(new ServiceURLAdapter(sUrl,DiscoveryTestHelper.SERVICENAME),DiscoveryTestHelper.PRIORITY,DiscoveryTestHelper.WEIGHT,new ServicePropertiesAdapter(new ArrayList()));
  assertEquals(serviceInfo.getPriority(),DiscoveryTestHelper.PRIORITY);
  assertEquals(serviceInfo.getWeight(),DiscoveryTestHelper.WEIGHT);
  final IServiceID sid=serviceInfo.getServiceID();
  assertEquals(sid.getServiceName(),DiscoveryTestHelper.SERVICENAME);
  final IServiceTypeID stid=sid.getServiceTypeID();
  String internal=stid.getInternal();
  assertEquals(internalRep,internal);
  assertEquals(""String_Node_Str"" + IServiceTypeID.DEFAULT_PROTO[0] + ""String_Node_Str""+ IServiceTypeID.DEFAULT_SCOPE[0]+ ""String_Node_Str"",stid.getName());
  assertEquals(""String_Node_Str"",stid.getNamingAuthority());
  assertTrue(Arrays.equals(new String[]{""String_Node_Str"",""String_Node_Str""},stid.getServices()));
  assertTrue(Arrays.equals(IServiceTypeID.DEFAULT_SCOPE,stid.getScopes()));
  assertTrue(Arrays.equals(IServiceTypeID.DEFAULT_PROTO,stid.getProtocols()));
}",0.9521531100478468
94492,"public void testCreateByjSLPAndRemoveServicePrefixWithServiceService() throws ServiceLocationException {
  final String internalRep=""String_Node_Str"";
  final ServiceURL sUrl=new ServiceURL(internalRep + ""String_Node_Str"",ServiceURL.LIFETIME_PERMANENT);
  final IServiceInfo serviceInfo=new JSLPServiceInfo(new ServiceURLAdapter(sUrl,SERVICENAME),PRIORITY,WEIGHT,new ServicePropertiesAdapter(new ArrayList()));
  assertEquals(serviceInfo.getPriority(),PRIORITY);
  assertEquals(serviceInfo.getWeight(),WEIGHT);
  final IServiceID sid=serviceInfo.getServiceID();
  assertEquals(sid.getServiceName(),SERVICENAME);
  final IServiceTypeID stid=sid.getServiceTypeID();
  assertEquals(internalRep,stid.getInternal());
  assertEquals(""String_Node_Str"" + IServiceTypeID.DEFAULT_PROTO[0] + ""String_Node_Str""+ IServiceTypeID.DEFAULT_SCOPE[0]+ ""String_Node_Str"",stid.getName());
  assertEquals(""String_Node_Str"",stid.getNamingAuthority());
  assertTrue(Arrays.equals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},stid.getServices()));
  assertTrue(Arrays.equals(IServiceTypeID.DEFAULT_SCOPE,stid.getScopes()));
  assertTrue(Arrays.equals(IServiceTypeID.DEFAULT_PROTO,stid.getProtocols()));
}","public void testCreateByjSLPAndRemoveServicePrefixWithServiceService() throws ServiceLocationException {
  final String internalRep=""String_Node_Str"";
  final ServiceURL sUrl=new ServiceURL(internalRep + ""String_Node_Str"",ServiceURL.LIFETIME_PERMANENT);
  final IServiceInfo serviceInfo=new JSLPServiceInfo(new ServiceURLAdapter(sUrl,DiscoveryTestHelper.SERVICENAME),DiscoveryTestHelper.PRIORITY,DiscoveryTestHelper.WEIGHT,new ServicePropertiesAdapter(new ArrayList()));
  assertEquals(serviceInfo.getPriority(),DiscoveryTestHelper.PRIORITY);
  assertEquals(serviceInfo.getWeight(),DiscoveryTestHelper.WEIGHT);
  final IServiceID sid=serviceInfo.getServiceID();
  assertEquals(sid.getServiceName(),DiscoveryTestHelper.SERVICENAME);
  final IServiceTypeID stid=sid.getServiceTypeID();
  assertEquals(internalRep,stid.getInternal());
  assertEquals(""String_Node_Str"" + IServiceTypeID.DEFAULT_PROTO[0] + ""String_Node_Str""+ IServiceTypeID.DEFAULT_SCOPE[0]+ ""String_Node_Str"",stid.getName());
  assertEquals(""String_Node_Str"",stid.getNamingAuthority());
  assertTrue(Arrays.equals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},stid.getServices()));
  assertTrue(Arrays.equals(IServiceTypeID.DEFAULT_SCOPE,stid.getScopes()));
  assertTrue(Arrays.equals(IServiceTypeID.DEFAULT_PROTO,stid.getProtocols()));
}",0.9524564183835182
94493,"public void testECFDefaultsTojSLP(){
  String expected=""String_Node_Str"";
  Namespace namespaceByName=IDFactory.getDefault().getNamespaceByName(namespace);
  IServiceID aServiceID=ServiceIDFactory.getDefault().createServiceID(namespaceByName,SERVICES,PROTOCOLS,expected);
  assertNotNull(aServiceID);
  IServiceTypeID stid=aServiceID.getServiceTypeID();
  assertTrue(Arrays.equals(SERVICES,stid.getServices()));
  assertTrue(Arrays.equals(IServiceTypeID.DEFAULT_SCOPE,stid.getScopes()));
  assertTrue(Arrays.equals(PROTOCOLS,stid.getProtocols()));
  String internal=stid.getInternal();
  assertEquals(""String_Node_Str"" + SERVICES[0] + ""String_Node_Str""+ SERVICES[1]+ ""String_Node_Str""+ SERVICES[2],internal);
}","public void testECFDefaultsTojSLP(){
  String expected=""String_Node_Str"";
  Namespace namespaceByName=IDFactory.getDefault().getNamespaceByName(namespace);
  IServiceID aServiceID=ServiceIDFactory.getDefault().createServiceID(namespaceByName,DiscoveryTestHelper.SERVICES,DiscoveryTestHelper.PROTOCOLS,expected);
  assertNotNull(aServiceID);
  IServiceTypeID stid=aServiceID.getServiceTypeID();
  assertTrue(Arrays.equals(DiscoveryTestHelper.SERVICES,stid.getServices()));
  assertTrue(Arrays.equals(IServiceTypeID.DEFAULT_SCOPE,stid.getScopes()));
  assertTrue(Arrays.equals(DiscoveryTestHelper.PROTOCOLS,stid.getProtocols()));
  String internal=stid.getInternal();
  assertEquals(""String_Node_Str"" + DiscoveryTestHelper.SERVICES[0] + ""String_Node_Str""+ DiscoveryTestHelper.SERVICES[1]+ ""String_Node_Str""+ DiscoveryTestHelper.SERVICES[2],internal);
}",0.9102564102564102
94494,"public void testjSLPDefaultsToECF(){
  String expected=""String_Node_Str"";
  Namespace namespaceByName=IDFactory.getDefault().getNamespaceByName(namespace);
  IServiceID aServiceID=ServiceIDFactory.getDefault().createServiceID(namespaceByName,SERVICES,new String[]{SCOPE},PROTOCOLS,NAMINGAUTHORITY,expected);
  assertNotNull(aServiceID);
  IServiceTypeID stid=aServiceID.getServiceTypeID();
  assertEquals(NAMINGAUTHORITY,stid.getNamingAuthority());
  assertEquals(""String_Node_Str"" + SCOPE + ""String_Node_Str""+ NAMINGAUTHORITY+ ""String_Node_Str""+ expected,aServiceID.getName());
}","public void testjSLPDefaultsToECF(){
  String expected=""String_Node_Str"";
  Namespace namespaceByName=IDFactory.getDefault().getNamespaceByName(namespace);
  IServiceID aServiceID=ServiceIDFactory.getDefault().createServiceID(namespaceByName,DiscoveryTestHelper.SERVICES,new String[]{DiscoveryTestHelper.SCOPE},DiscoveryTestHelper.PROTOCOLS,DiscoveryTestHelper.NAMINGAUTHORITY,expected);
  assertNotNull(aServiceID);
  IServiceTypeID stid=aServiceID.getServiceTypeID();
  assertEquals(DiscoveryTestHelper.NAMINGAUTHORITY,stid.getNamingAuthority());
  assertEquals(""String_Node_Str"" + DiscoveryTestHelper.SCOPE + ""String_Node_Str""+ DiscoveryTestHelper.NAMINGAUTHORITY+ ""String_Node_Str""+ expected,aServiceID.getName());
}",0.8923076923076924
94495,"protected void tearDown() throws Exception {
  discoveryContainer.unregisterService(serviceInfo);
  discoveryContainer=null;
  container.disconnect();
  container=null;
}","protected void tearDown() throws Exception {
  discoveryContainer.unregisterService(serviceInfo);
}",0.7360594795539034
94496,"protected void setUp() throws Exception {
  setClientCount(CLIENT_COUNT);
  clients=createClients();
}","protected void setUp() throws Exception {
  super.setUp();
  setClientCount(CLIENT_COUNT);
  clients=createClients();
}",0.9230769230769232
94497,"protected void runRequest() throws Exception {
  Trace.entering(Activator.PLUGIN_ID,DebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  setupProxies();
  httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
  httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
  String urlString=directoryOrFile.toString();
  setupAuthentication(urlString);
  setupHostAndPort(urlString);
  getMethod=new GetMethod(hostConfigHelper.getTargetRelativePath());
  getMethod.setFollowRedirects(true);
  getMethod.getParams().setParameter(CredentialsProvider.PROVIDER,new ECFCredentialsProvider());
  getMethod.addRequestHeader(""String_Node_Str"",""String_Node_Str"");
  long lastModified=0;
  long fileLength=-1;
  try {
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + urlString);
    int code=httpClient.executeMethod(getHostConfiguration(),getMethod);
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + code);
    if (code == HttpURLConnection.HTTP_OK) {
      fileLength=getMethod.getResponseContentLength();
      lastModified=getLastModifiedTimeFromHeader();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_FORBIDDEN) {
      throw new LoginException(""String_Node_Str"");
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
    remoteFiles=new IRemoteFile[1];
    remoteFiles[0]=new URLRemoteFile(lastModified,fileLength,fileID);
  }
 catch (  Exception e) {
    Trace.throwing(Activator.PLUGIN_ID,DebugOptions.EXCEPTIONS_THROWING,this.getClass(),""String_Node_Str"",e);
    throw e;
  }
 finally {
    getMethod.releaseConnection();
  }
}","protected void runRequest() throws Exception {
  Trace.entering(Activator.PLUGIN_ID,DebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  setupProxies();
  httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
  httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
  String urlString=directoryOrFile.toString();
  setupAuthentication(urlString);
  setupHostAndPort(urlString);
  headMethod=new HeadMethod(hostConfigHelper.getTargetRelativePath());
  headMethod.setFollowRedirects(true);
  headMethod.getParams().setParameter(CredentialsProvider.PROVIDER,new ECFCredentialsProvider());
  headMethod.addRequestHeader(""String_Node_Str"",""String_Node_Str"");
  long lastModified=0;
  long fileLength=-1;
  try {
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + urlString);
    int code=httpClient.executeMethod(getHostConfiguration(),headMethod);
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + code);
    if (code == HttpURLConnection.HTTP_OK) {
      fileLength=headMethod.getResponseContentLength();
      lastModified=getLastModifiedTimeFromHeader();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_FORBIDDEN) {
      throw new LoginException(""String_Node_Str"");
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
    remoteFiles=new IRemoteFile[1];
    remoteFiles[0]=new URLRemoteFile(lastModified,fileLength,fileID);
  }
 catch (  Exception e) {
    Trace.throwing(Activator.PLUGIN_ID,DebugOptions.EXCEPTIONS_THROWING,this.getClass(),""String_Node_Str"",e);
    throw e;
  }
 finally {
    headMethod.releaseConnection();
  }
}",0.9870310328855952
94498,"private long getLastModifiedTimeFromHeader() throws IOException {
  Header lastModifiedHeader=getMethod.getResponseHeader(""String_Node_Str"");
  if (lastModifiedHeader == null)   return 0L;
  String lastModifiedString=lastModifiedHeader.getValue();
  long lastModified=0;
  if (lastModifiedString != null) {
    try {
      lastModified=DateUtil.parseDate(lastModifiedString).getTime();
    }
 catch (    Exception e) {
      throw new IOException(Messages.HttpClientRetrieveFileTransfer_EXCEPITION_INVALID_LAST_MODIFIED_FROM_SERVER);
    }
  }
  return lastModified;
}","private long getLastModifiedTimeFromHeader() throws IOException {
  Header lastModifiedHeader=headMethod.getResponseHeader(""String_Node_Str"");
  if (lastModifiedHeader == null)   return 0L;
  String lastModifiedString=lastModifiedHeader.getValue();
  long lastModified=0;
  if (lastModifiedString != null) {
    try {
      lastModified=DateUtil.parseDate(lastModifiedString).getTime();
    }
 catch (    Exception e) {
      throw new IOException(Messages.HttpClientRetrieveFileTransfer_EXCEPITION_INVALID_LAST_MODIFIED_FROM_SERVER);
    }
  }
  return lastModified;
}",0.9938434476693052
94499,"protected static String getNTLMUserName(Proxy p){
  String domainUsername=p.getUsername();
  int slashloc=domainUsername.indexOf('\\');
  if (slashloc == -1)   return null;
  return domainUsername.substring(slashloc + 1);
}","protected static String getNTLMUserName(Proxy p){
  String domainUsername=p.getUsername();
  if (domainUsername == null)   return null;
  int slashloc=domainUsername.indexOf('\\');
  if (slashloc == -1)   return null;
  return domainUsername.substring(slashloc + 1);
}",0.9083503054989815
94500,"protected static String getNTLMDomainName(Proxy p){
  String domainUsername=p.getUsername();
  int slashloc=domainUsername.indexOf('\\');
  if (slashloc == -1)   return null;
  return domainUsername.substring(0,slashloc);
}","protected static String getNTLMDomainName(Proxy p){
  String domainUsername=p.getUsername();
  if (domainUsername == null)   return null;
  int slashloc=domainUsername.indexOf('\\');
  if (slashloc == -1)   return null;
  return domainUsername.substring(0,slashloc);
}",0.9083503054989815
94501,"public int execute(HttpState state,HttpConnection conn) throws HttpException, IOException {
  Trace.entering(Activator.PLUGIN_ID,DebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  int result=super.execute(state,conn);
  Trace.exiting(Activator.PLUGIN_ID,DebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",new Integer(result));
  return result;
}","public int execute(HttpState state,HttpConnection conn) throws HttpException, IOException {
  Trace.entering(Activator.PLUGIN_ID,DebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  int result=super.execute(state,conn);
switch (result) {
case HttpStatus.SC_MOVED_TEMPORARILY:
case HttpStatus.SC_MOVED_PERMANENTLY:
case HttpStatus.SC_SEE_OTHER:
case HttpStatus.SC_TEMPORARY_REDIRECT:
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + result + ""String_Node_Str"");
  gzipReceived=false;
removeRequestHeader(GzipGetMethod.ACCEPT_ENCODING);
default :
}
Trace.exiting(Activator.PLUGIN_ID,DebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",new Integer(result));
return result;
}",0.6623376623376623
94502,"protected void openStreams() throws IncomingFileTransferException {
  Trace.entering(Activator.PLUGIN_ID,DebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  final String urlString=getRemoteFileURL().toString();
  int code=-1;
  try {
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    getMethod.getParams().setParameter(CredentialsProvider.PROVIDER,new ECFCredentialsProvider());
    setRequestHeaderValues();
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + urlString);
    code=httpClient.executeMethod(getMethod);
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + code);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsUnzippedStream());
      fireReceiveStartEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.releaseConnection();
      throw new LoginException(""String_Node_Str"");
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
  }
 catch (  final Exception e) {
    IncomingFileTransferException ex=new IncomingFileTransferException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,urlString),e,code);
    Trace.throwing(Activator.PLUGIN_ID,DebugOptions.EXCEPTIONS_THROWING,this.getClass(),""String_Node_Str"",ex);
    throw ex;
  }
  Trace.exiting(Activator.PLUGIN_ID,DebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}","protected void openStreams() throws IncomingFileTransferException {
  Trace.entering(Activator.PLUGIN_ID,DebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  final String urlString=getRemoteFileURL().toString();
  int code=-1;
  try {
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    getMethod.getParams().setParameter(CredentialsProvider.PROVIDER,new ECFCredentialsProvider());
    setRequestHeaderValues();
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + urlString);
    if (getFileRangeSpecification() == null)     getMethod.setRequestHeader(GzipGetMethod.ACCEPT_ENCODING,GzipGetMethod.CONTENT_ENCODING_ACCEPTED);
    code=httpClient.executeMethod(getMethod);
    Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + code);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsUnzippedStream());
      fireReceiveStartEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.releaseConnection();
      throw new LoginException(""String_Node_Str"");
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
  }
 catch (  final Exception e) {
    IncomingFileTransferException ex=new IncomingFileTransferException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,urlString),e,code);
    Trace.throwing(Activator.PLUGIN_ID,DebugOptions.EXCEPTIONS_THROWING,this.getClass(),""String_Node_Str"",ex);
    throw ex;
  }
  Trace.exiting(Activator.PLUGIN_ID,DebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}",0.9704708699122108
94503,"public int execute(HttpState state,HttpConnection conn) throws HttpException, IOException {
  Trace.entering(Activator.PLUGIN_ID,DebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"" + gzipReceived);
  if (getFileRangeSpecification() == null)   this.setRequestHeader(ACCEPT_ENCODING,CONTENT_ENCODING_ACCEPTED);
  gzipReceived=false;
  int result=super.execute(state,conn);
  if (isZippedReply()) {
    gzipReceived=true;
  }
  Trace.exiting(Activator.PLUGIN_ID,DebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"" + gzipReceived,new Integer(result));
  return result;
}","public int execute(HttpState state,HttpConnection conn) throws HttpException, IOException {
  Trace.entering(Activator.PLUGIN_ID,DebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  int result=super.execute(state,conn);
  Trace.exiting(Activator.PLUGIN_ID,DebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",new Integer(result));
  return result;
}",0.7082035306334372
94504,"public InputStream getResponseBodyAsUnzippedStream() throws IOException {
  InputStream input=super.getResponseBodyAsStream();
  try {
    if (gzipReceived) {
      Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"");
      return new java.util.zip.GZIPInputStream(input);
    }
  }
 catch (  IOException e) {
    Activator.getDefault().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,""String_Node_Str"",e));
    throw e;
  }
  return input;
}","public InputStream getResponseBodyAsUnzippedStream() throws IOException {
  gzipReceived=isZippedResponse();
  InputStream input=super.getResponseBodyAsStream();
  try {
    if (gzipReceived) {
      Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"");
      return new java.util.zip.GZIPInputStream(input);
    }
  }
 catch (  IOException e) {
    Activator.getDefault().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,""String_Node_Str"",e));
    throw e;
  }
  return input;
}",0.9633507853403142
94505,"protected void setupProxies(){
  if (proxy == null) {
    try {
      IProxyService proxyService=Activator.getDefault().getProxyService();
      if (proxyService != null) {
        URL target=directoryOrFile;
        final IProxyData[] proxies=proxyService.getProxyDataForHost(target.getHost());
        IProxyData selectedProxy=selectProxyFromProxies(target.getProtocol(),proxies);
        if (selectedProxy != null) {
          proxy=new Proxy(((selectedProxy.getType().equalsIgnoreCase(IProxyData.SOCKS_PROXY_TYPE)) ? Proxy.Type.SOCKS : Proxy.Type.HTTP),new ProxyAddress(selectedProxy.getHost(),selectedProxy.getPort()),selectedProxy.getUserId(),selectedProxy.getPassword());
        }
      }
    }
 catch (    Exception e) {
      Activator.logNoProxyWarning(e);
    }
catch (    NoClassDefFoundError e) {
      Activator.logNoProxyWarning(e);
    }
  }
  if (proxy != null)   setupProxy(proxy);
}","protected void setupProxies(){
  if (proxy == null) {
    try {
      IProxyService proxyService=Activator.getDefault().getProxyService();
      if (proxyService != null && proxyService.isProxiesEnabled()) {
        URL target=directoryOrFile;
        final IProxyData[] proxies=proxyService.getProxyDataForHost(target.getHost());
        IProxyData selectedProxy=selectProxyFromProxies(target.getProtocol(),proxies);
        if (selectedProxy != null) {
          proxy=new Proxy(((selectedProxy.getType().equalsIgnoreCase(IProxyData.SOCKS_PROXY_TYPE)) ? Proxy.Type.SOCKS : Proxy.Type.HTTP),new ProxyAddress(selectedProxy.getHost(),selectedProxy.getPort()),selectedProxy.getUserId(),selectedProxy.getPassword());
        }
      }
    }
 catch (    Exception e) {
      Activator.logNoProxyWarning(e);
    }
catch (    NoClassDefFoundError e) {
      Activator.logNoProxyWarning(e);
    }
  }
  if (proxy != null)   setupProxy(proxy);
}",0.980967917346384
94506,"private Throwable createNewExceptionFor(Throwable exception2){
  Exception re=new Exception(exception2.getMessage());
  re.setStackTrace(exception2.getStackTrace());
  return re;
}","private Throwable createNewExceptionFor(Throwable exception2){
  Exception re=new Exception(exception2.getMessage());
  return re;
}",0.8461538461538461
94507,"/** 
 * Merges the given status into this multi-status. Equivalent to <code>add(status)</code> if the given status is not a multi-status. Equivalent to <code>addAll(status)</code> if the given status is a multi-status.
 * @param status the status to merge into this one
 * @see #add(IStatus)
 * @see #addAll(IStatus)
 */
public void merge(SerializableStatus status){
  Assert.isLegal(status != null);
  if (!status.isMultiStatus()) {
    add(status);
  }
 else {
    addAll(status);
  }
}","/** 
 * Merges the given status into this multi-status. Equivalent to <code>add(status)</code> if the given status is not a multi-status. Equivalent to <code>addAll(status)</code> if the given status is a multi-status.
 * @param status the status to merge into this one
 * @see #add(SerializableStatus)
 * @see #addAll(SerializableStatus)
 */
public void merge(SerializableStatus status){
  Assert.isLegal(status != null);
  if (!status.isMultiStatus()) {
    add(status);
  }
 else {
    addAll(status);
  }
}",0.9739478957915833
94508,"private void invokeAsyncListener(final Class interfaceClass,final IRemoteService remoteService,final IRemoteCall remoteCall){
  remoteService.callAsynch(remoteCall,new IRemoteCallListener(){
    public void handleEvent(    IRemoteCallEvent event){
      if (event instanceof IRemoteCallCompleteEvent) {
        final IRemoteCallCompleteEvent complete=(IRemoteCallCompleteEvent)event;
        if (complete.hadException()) {
          showException(complete.getException());
        }
 else         showResult(interfaceClass.getName(),remoteCall,complete.getResponse());
      }
    }
  }
);
}","private void invokeAsyncListener(final Class interfaceClass,final IRemoteService remoteService,final IRemoteCall remoteCall){
  remoteService.callAsync(remoteCall,new IRemoteCallListener(){
    public void handleEvent(    IRemoteCallEvent event){
      if (event instanceof IRemoteCallCompleteEvent) {
        final IRemoteCallCompleteEvent complete=(IRemoteCallCompleteEvent)event;
        if (complete.hadException()) {
          showException(complete.getException());
        }
 else         showResult(interfaceClass.getName(),remoteCall,complete.getResponse());
      }
    }
  }
);
}",0.9991532599491956
94509,"private void executeMethodInvocationDialog(final Class cls,final IRemoteService remoteService){
  final MethodInvocationDialog mid=new MethodInvocationDialog((Shell)null,cls);
  if (mid.open() == Window.OK) {
    final int timeout=(mid.getTimeout() > 0) ? mid.getTimeout() : 30000;
    final String methodName=mid.getMethod().getName();
    final Object[] methodArgs=mid.getMethodArguments();
    final IRemoteCall remoteCall=new IRemoteCall(){
      public String getMethod(){
        return methodName;
      }
      public Object[] getParameters(){
        return methodArgs;
      }
      public long getTimeout(){
        return timeout;
      }
    }
;
    final int invokeType=mid.getInvocationType();
    try {
switch (invokeType) {
case MethodInvocationDialog.ASYNC_FIRE_AND_GO:
        remoteService.callAsynch(remoteCall);
      break;
case MethodInvocationDialog.ASYNC_FUTURE_RESULT:
    invokeFuture(cls,remoteService,remoteCall);
  break;
case MethodInvocationDialog.ASYNC_LISTENER:
invokeAsyncListener(cls,remoteService,remoteCall);
break;
case MethodInvocationDialog.OSGI_SERVICE_PROXY:
throw new UnsupportedOperationException();
case MethodInvocationDialog.REMOTE_SERVICE_PROXY:
throw new UnsupportedOperationException();
case MethodInvocationDialog.SYNCHRONOUS:
throw new UnsupportedOperationException();
default :
break;
}
}
 catch (final Exception e) {
showException(e);
}
}
}","private void executeMethodInvocationDialog(final Class cls,final IRemoteService remoteService){
  final MethodInvocationDialog mid=new MethodInvocationDialog((Shell)null,cls);
  if (mid.open() == Window.OK) {
    final int timeout=(mid.getTimeout() > 0) ? mid.getTimeout() : 30000;
    final String methodName=mid.getMethod().getName();
    final Object[] methodArgs=mid.getMethodArguments();
    final IRemoteCall remoteCall=new IRemoteCall(){
      public String getMethod(){
        return methodName;
      }
      public Object[] getParameters(){
        return methodArgs;
      }
      public long getTimeout(){
        return timeout;
      }
    }
;
    final int invokeType=mid.getInvocationType();
    try {
switch (invokeType) {
case MethodInvocationDialog.ASYNC_FIRE_AND_GO:
        remoteService.callAsync(remoteCall);
      break;
case MethodInvocationDialog.ASYNC_FUTURE_RESULT:
    invokeFuture(cls,remoteService,remoteCall);
  break;
case MethodInvocationDialog.ASYNC_LISTENER:
invokeAsyncListener(cls,remoteService,remoteCall);
break;
case MethodInvocationDialog.OSGI_SERVICE_PROXY:
throw new UnsupportedOperationException();
case MethodInvocationDialog.REMOTE_SERVICE_PROXY:
throw new UnsupportedOperationException();
case MethodInvocationDialog.SYNCHRONOUS:
throw new UnsupportedOperationException();
default :
break;
}
}
 catch (final Exception e) {
showException(e);
}
}
}",0.999641705481906
94510,"protected void invokeFuture(Class cls,IRemoteService remoteService,IRemoteCall remoteCall) throws InterruptedException, InvocationTargetException, OperationCanceledException {
  final IFuture asyncResult=remoteService.callAsynch(remoteCall);
  showResult(cls.getName(),remoteCall,asyncResult.get());
}","protected void invokeFuture(Class cls,IRemoteService remoteService,IRemoteCall remoteCall) throws InterruptedException, InvocationTargetException, OperationCanceledException {
  final IFuture asyncResult=remoteService.callAsync(remoteCall);
  showResult(cls.getName(),remoteCall,asyncResult.get());
}",0.9983361064891848
94511,"public int execute(HttpState state,HttpConnection conn) throws HttpException, IOException {
  if (getFileRangeSpecification() == null)   this.setRequestHeader(ACCEPT_ENCODING,CONTENT_ENCODING_ACCEPTED);
  int result=super.execute(state,conn);
  if (isZippedReply()) {
    gzipReceived=true;
  }
  return result;
}","public int execute(HttpState state,HttpConnection conn) throws HttpException, IOException {
  if (getFileRangeSpecification() == null)   this.setRequestHeader(ACCEPT_ENCODING,CONTENT_ENCODING_ACCEPTED);
  gzipReceived=false;
  int result=super.execute(state,conn);
  if (isZippedReply()) {
    gzipReceived=true;
  }
  return result;
}",0.7592592592592593
94512,"private IDocumentChange getLocalDocumentChange(){
  final int offset=random.nextInt(document.getLength());
  final int length=random.nextInt(2);
  final String text=(random.nextInt(2) == 0) ? ""String_Node_Str"" : ""String_Node_Str"";
  return new IDocumentChange(){
    public int getLengthOfReplacedText(){
      return length;
    }
    public int getOffset(){
      return offset;
    }
    public String getText(){
      return text;
    }
    public Object getAdapter(    Class adapter){
      return null;
    }
    public void applyToModel(    Object model) throws ModelUpdateException {
      IDocument doc=(IDocument)model;
      System.out.println();
      System.out.println(name + ""String_Node_Str"" + doc.get());
      System.out.println(name + ""String_Node_Str"" + ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str""+ getOffset()+ ""String_Node_Str""+ getLengthOfReplacedText()+ ""String_Node_Str""+ getText());
      try {
        document.replace(getOffset(),getLengthOfReplacedText(),getText());
      }
 catch (      BadLocationException e) {
        throw new ModelUpdateException(""String_Node_Str"",this,model);
      }
      System.out.println(name + ""String_Node_Str"" + doc.get());
    }
  }
;
}","private IDocumentChange getLocalDocumentChange(){
  final int offset=random.nextInt(document.getLength());
  final int length=random.nextInt(2);
  final String text=(random.nextInt(2) == 0) ? ""String_Node_Str"" : ""String_Node_Str"";
  return new DocumentChangeMessage(offset,length,text);
}",0.3435013262599469
94513,"private void applyChangeToLocalDocument(boolean local,IDocumentChange change){
  System.out.println();
  System.out.println(name + ""String_Node_Str"" + document.get());
  System.out.println(name + (local ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str""+ change.getOffset()+ ""String_Node_Str""+ change.getLengthOfReplacedText()+ ""String_Node_Str""+ change.getText());
  try {
    document.replace(change.getOffset(),change.getLengthOfReplacedText(),change.getText());
  }
 catch (  BadLocationException e) {
    e.printStackTrace();
  }
  System.out.println(name + ""String_Node_Str"" + document.get());
}","private void applyChangeToLocalDocument(boolean local,IDocumentChange change){
  System.out.println(name + ""String_Node_Str"" + document.get());
  System.out.println(name + (local ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ change);
  try {
    change.applyToModel(document);
  }
 catch (  ModelUpdateException e) {
    e.printStackTrace();
  }
  System.out.println(name + ""String_Node_Str"" + document.get());
}",0.5211786372007366
94514,"private void deliverChangeToOther(IModelChangeMessage[] changeMessages){
  for (int i=0; i < changeMessages.length; i++) {
    try {
      final byte[] bytes=changeMessages[i].serialize();
      otherQueue.enqueue(bytes);
    }
 catch (    SerializationException e) {
      e.printStackTrace();
    }
  }
}","private void deliverChangeToOther(IModelChangeMessage[] changeMessages){
  for (int i=0; i < changeMessages.length; i++) {
    try {
      System.out.println(name + ""String_Node_Str"" + changeMessages[i]);
      otherQueue.enqueue(changeMessages[i].serialize());
    }
 catch (    SerializationException e) {
      e.printStackTrace();
    }
  }
}",0.7914110429447853
94515,"private void processLocalChange(IDocumentChange localChange){
  if (localChange != null) {
    applyChangeToLocalDocument(true,localChange);
    IModelChangeMessage[] changeMessages=syncStrategy.registerLocalChange(localChange);
    deliverChangeToOther(changeMessages);
  }
}","private void processLocalChange(IDocumentChange localChange){
  if (localChange != null) {
synchronized (this.getClass()) {
      applyChangeToLocalDocument(true,localChange);
      IModelChangeMessage[] changeMessages=syncStrategy.registerLocalChange(localChange);
      deliverChangeToOther(changeMessages);
    }
  }
}",0.9246231155778896
94516,"private void processRemoteMessage(byte[] msg){
  if (msg != null) {
    try {
      IModelChange change=syncStrategy.deserializeRemoteChange(msg);
      IDocumentChange[] documentChanges=(IDocumentChange[])syncStrategy.transformRemoteChange(change);
      for (int i=0; i < documentChanges.length; i++) {
        try {
          documentChanges[i].applyToModel(document);
        }
 catch (        ModelUpdateException e) {
          e.printStackTrace();
        }
      }
    }
 catch (    SerializationException e) {
      e.printStackTrace();
    }
  }
}","private void processRemoteMessage(byte[] msg){
  if (msg != null) {
    try {
synchronized (this.getClass()) {
        IModelChange change=syncStrategy.deserializeRemoteChange(msg);
        System.out.println(name + ""String_Node_Str"" + change);
        IDocumentChange[] documentChanges=(IDocumentChange[])syncStrategy.transformRemoteChange(change);
        for (int i=0; i < documentChanges.length; i++) {
          applyChangeToLocalDocument(false,documentChanges[i]);
        }
      }
    }
 catch (    SerializationException e) {
      e.printStackTrace();
    }
  }
}",0.7044247787610619
94517,"public String toString(){
  final StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(getText()).append(""String_Node_Str"").append(getOffset());
  buf.append(""String_Node_Str"").append(getLengthOfReplacedText()).append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(getLocalOperationsCount());
  buf.append(""String_Node_Str"").append(getRemoteOperationsCount()).append(""String_Node_Str"");
  return buf.toString();
}","public String toString(){
  final StringBuffer buf=new StringBuffer(""String_Node_Str"");
  String tType=""String_Node_Str"";
  if (transformType == 0) {
    tType=""String_Node_Str"";
  }
 else   if (transformType == 1) {
    tType=""String_Node_Str"";
  }
 else   if (transformType == 2) {
    tType=""String_Node_Str"";
  }
  buf.append(""String_Node_Str"" + tType);
  buf.append(""String_Node_Str"").append(getOffset());
  buf.append(""String_Node_Str"").append(getLengthOfReplacedText()).append(""String_Node_Str"").append(getText()).append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(getLocalOperationsCount());
  buf.append(""String_Node_Str"").append(getRemoteOperationsCount()).append(""String_Node_Str"");
  return buf.toString();
}",0.7433333333333333
94518,"public static ColaSynchronizationStrategy getInstanceFor(ID client,boolean isInitiator){
  if (sessionStrategies.get(client) == null) {
    sessionStrategies.put(client,new ColaSynchronizationStrategy(isInitiator));
  }
  return (ColaSynchronizationStrategy)sessionStrategies.get(client);
}","public static ColaSynchronizationStrategy getInstanceFor(ID client,boolean isInitiator){
  ColaSynchronizationStrategy existingStrategy=(ColaSynchronizationStrategy)sessionStrategies.get(client);
  if (existingStrategy != null) {
    Boolean existingStrategyIsInitiator=new Boolean(existingStrategy.isInitiator);
    if (existingStrategyIsInitiator.equals(new Boolean(isInitiator))) {
      return existingStrategy;
    }
  }
  existingStrategy=new ColaSynchronizationStrategy(isInitiator);
  sessionStrategies.put(client,existingStrategy);
  return existingStrategy;
}",0.3119906868451688
94519,"public IModelChangeMessage[] registerLocalChange(IModelChange localChange){
  Trace.entering(Activator.PLUGIN_ID,SyncDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",localChange);
  if (localChange instanceof IDocumentChange) {
    final IDocumentChange docChange=(IDocumentChange)localChange;
    final ColaDocumentChangeMessage colaMsg=new ColaDocumentChangeMessage(new DocumentChangeMessage(docChange.getOffset(),docChange.getLengthOfReplacedText(),docChange.getText()),localOperationsCount,remoteOperationsCount);
    if (!colaMsg.isReplacement()) {
      unacknowledgedLocalOperations.add(colaMsg);
      localOperationsCount++;
    }
    Trace.exiting(Activator.PLUGIN_ID,SyncDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",colaMsg);
    return new IModelChangeMessage[]{colaMsg};
  }
 else   return new IModelChangeMessage[0];
}","public IModelChangeMessage[] registerLocalChange(IModelChange localChange){
  List results=new ArrayList();
  Trace.entering(Activator.PLUGIN_ID,SyncDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",localChange);
  if (localChange instanceof IDocumentChange) {
    final IDocumentChange docChange=(IDocumentChange)localChange;
    final ColaDocumentChangeMessage colaMsg=new ColaDocumentChangeMessage(new DocumentChangeMessage(docChange.getOffset(),docChange.getLengthOfReplacedText(),docChange.getText()),localOperationsCount,remoteOperationsCount);
    if (!colaMsg.isReplacement()) {
      unacknowledgedLocalOperations.add(colaMsg);
      localOperationsCount++;
      results.add(colaMsg);
    }
 else {
      ColaDocumentChangeMessage delMsg=new ColaDocumentChangeMessage(new DocumentChangeMessage(docChange.getOffset(),docChange.getLengthOfReplacedText(),""String_Node_Str""),localOperationsCount,remoteOperationsCount);
      unacknowledgedLocalOperations.add(delMsg);
      localOperationsCount++;
      results.add(delMsg);
      ColaDocumentChangeMessage insMsg=new ColaDocumentChangeMessage(new DocumentChangeMessage(docChange.getOffset(),0,docChange.getText()),localOperationsCount,remoteOperationsCount);
      unacknowledgedLocalOperations.add(insMsg);
      localOperationsCount++;
      results.add(insMsg);
    }
    Trace.exiting(Activator.PLUGIN_ID,SyncDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",colaMsg);
  }
  return (IModelChangeMessage[])results.toArray(new IModelChangeMessage[]{});
}",0.6650041562759768
94520,"/** 
 * Handles proper transformation of incoming <code>ColaDocumentChangeMessage</code>s. Returned <code>DocumentChangeMessage</code>s can be applied directly to the shared document. The method implements the concurrency algorithm described in <code>http://wiki.eclipse.org/RT_Shared_Editing</code>
 * @param remoteMsg 
 * @return List contains <code>DocumentChangeMessage</code>s ready for sequential application to document
 */
public List transformIncomingMessage(final DocumentChangeMessage remoteMsg){
  if (!(remoteMsg instanceof ColaDocumentChangeMessage)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Trace.entering(Activator.PLUGIN_ID,SyncDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",remoteMsg);
  ColaDocumentChangeMessage transformedRemote=(ColaDocumentChangeMessage)remoteMsg;
  final List transformedRemotes=new LinkedList();
  transformedRemotes.add(transformedRemote);
  remoteOperationsCount++;
  if (!unacknowledgedLocalOperations.isEmpty()) {
    for (final Iterator it=unacknowledgedLocalOperations.iterator(); it.hasNext(); ) {
      final ColaDocumentChangeMessage unackedLocalOp=(ColaDocumentChangeMessage)it.next();
      if (transformedRemote.getRemoteOperationsCount() > unackedLocalOp.getLocalOperationsCount()) {
        Trace.trace(Activator.PLUGIN_ID,NLS.bind(""String_Node_Str"",unackedLocalOp));
        it.remove();
      }
 else {
        Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"");
        break;
      }
    }
    if (!unacknowledgedLocalOperations.isEmpty()) {
      ColaDocumentChangeMessage localOp=(ColaDocumentChangeMessage)unacknowledgedLocalOperations.getFirst();
      Assert.isTrue(transformedRemote.getRemoteOperationsCount() == localOp.getLocalOperationsCount());
      for (final ListIterator unackOpsListIt=unacknowledgedLocalOperations.listIterator(); unackOpsListIt.hasNext(); ) {
        for (final ListIterator trafoRemotesIt=transformedRemotes.listIterator(); trafoRemotesIt.hasNext(); ) {
          localOp=(ColaDocumentChangeMessage)unackOpsListIt.next();
          transformedRemote=(ColaDocumentChangeMessage)trafoRemotesIt.next();
          transformedRemote=transformedRemote.transformAgainst(localOp,isInitiator);
          if (transformedRemote.isSplitUp()) {
            trafoRemotesIt.remove();
            for (final Iterator splitUpIterator=transformedRemote.getSplitUpRepresentation().iterator(); splitUpIterator.hasNext(); ) {
              trafoRemotesIt.add(splitUpIterator.next());
            }
          }
          if (localOp.isSplitUp()) {
            unackOpsListIt.remove();
            for (final Iterator splitUpOpIterator=localOp.getSplitUpRepresentation().iterator(); splitUpOpIterator.hasNext(); ) {
              unackOpsListIt.add(splitUpOpIterator.next());
            }
          }
        }
      }
    }
  }
  Trace.exiting(Activator.PLUGIN_ID,SyncDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",transformedRemote);
  if (transformedRemotes.size() > 1) {
    final ColaDocumentChangeMessage firstOp=(ColaDocumentChangeMessage)transformedRemotes.get(0);
    if (firstOp.isDeletion()) {
      final ListIterator deletionFinalizerIt=transformedRemotes.listIterator();
      ColaDocumentChangeMessage previousDel=(ColaDocumentChangeMessage)deletionFinalizerIt.next();
      ColaDocumentChangeMessage currentDel;
      for (; deletionFinalizerIt.hasNext(); ) {
        currentDel=(ColaDocumentChangeMessage)deletionFinalizerIt.next();
        currentDel.setOffset(currentDel.getOffset() - previousDel.getLengthOfReplacedText());
        previousDel=currentDel;
      }
    }
  }
  return transformedRemotes;
}","/** 
 * Handles proper transformation of incoming <code>ColaDocumentChangeMessage</code>s. Returned <code>DocumentChangeMessage</code>s can be applied directly to the shared document. The method implements the concurrency algorithm described in <code>http://wiki.eclipse.org/RT_Shared_Editing</code>
 * @param remoteMsg 
 * @return List contains <code>DocumentChangeMessage</code>s ready for sequential application to document
 */
public List transformIncomingMessage(final DocumentChangeMessage remoteMsg){
  if (!(remoteMsg instanceof ColaDocumentChangeMessage)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Trace.entering(Activator.PLUGIN_ID,SyncDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",remoteMsg);
  ColaDocumentChangeMessage transformedRemote=(ColaDocumentChangeMessage)remoteMsg;
  final List transformedRemotes=new LinkedList();
  transformedRemotes.add(transformedRemote);
  remoteOperationsCount++;
  Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + unacknowledgedLocalOperations);
  if (!unacknowledgedLocalOperations.isEmpty()) {
    for (final Iterator it=unacknowledgedLocalOperations.iterator(); it.hasNext(); ) {
      final ColaDocumentChangeMessage unackedLocalOp=(ColaDocumentChangeMessage)it.next();
      if (transformedRemote.getRemoteOperationsCount() > unackedLocalOp.getLocalOperationsCount()) {
        Trace.trace(Activator.PLUGIN_ID,NLS.bind(""String_Node_Str"",unackedLocalOp));
        it.remove();
      }
 else {
        Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"");
        break;
      }
    }
    if (!unacknowledgedLocalOperations.isEmpty()) {
      ColaDocumentChangeMessage localOp=(ColaDocumentChangeMessage)unacknowledgedLocalOperations.get(0);
      Assert.isTrue(transformedRemote.getRemoteOperationsCount() == localOp.getLocalOperationsCount());
      for (final ListIterator unackOpsListIt=unacknowledgedLocalOperations.listIterator(); unackOpsListIt.hasNext(); ) {
        for (final ListIterator trafoRemotesIt=transformedRemotes.listIterator(); trafoRemotesIt.hasNext(); ) {
          localOp=(ColaDocumentChangeMessage)unackOpsListIt.next();
          transformedRemote=(ColaDocumentChangeMessage)trafoRemotesIt.next();
          transformedRemote=transformedRemote.transformAgainst(localOp,isInitiator);
          if (transformedRemote.isSplitUp()) {
            trafoRemotesIt.remove();
            for (final Iterator splitUpIterator=transformedRemote.getSplitUpRepresentation().iterator(); splitUpIterator.hasNext(); ) {
              trafoRemotesIt.add(splitUpIterator.next());
            }
          }
          if (localOp.isSplitUp()) {
            unackOpsListIt.remove();
            for (final Iterator splitUpOpIterator=localOp.getSplitUpRepresentation().iterator(); splitUpOpIterator.hasNext(); ) {
              unackOpsListIt.add(splitUpOpIterator.next());
            }
          }
        }
      }
    }
  }
  Trace.exiting(Activator.PLUGIN_ID,SyncDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",transformedRemote);
  if (transformedRemotes.size() > 1) {
    final ColaDocumentChangeMessage firstOp=(ColaDocumentChangeMessage)transformedRemotes.get(0);
    if (firstOp.isDeletion()) {
      final ListIterator deletionFinalizerIt=transformedRemotes.listIterator();
      ColaDocumentChangeMessage previousDel=(ColaDocumentChangeMessage)deletionFinalizerIt.next();
      ColaDocumentChangeMessage currentDel;
      for (; deletionFinalizerIt.hasNext(); ) {
        currentDel=(ColaDocumentChangeMessage)deletionFinalizerIt.next();
        currentDel.setOffset(currentDel.getOffset() - previousDel.getLengthOfReplacedText());
        previousDel=currentDel;
      }
    }
  }
  return transformedRemotes;
}",0.9872835497835498
94521,"public String toString(){
  final StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(text).append(""String_Node_Str"").append(offset);
  buf.append(""String_Node_Str"").append(length).append(""String_Node_Str"");
  return buf.toString();
}","public String toString(){
  final StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(offset);
  buf.append(""String_Node_Str"").append(length).append(""String_Node_Str"").append(text).append(""String_Node_Str"");
  return buf.toString();
}",0.6763636363636364
94522,"private boolean isZippedReply(){
  boolean zipped=(null != this.getResponseHeader(CONTENT_ENCODING) && this.getResponseHeader(CONTENT_ENCODING).getValue().equals(CONTENT_ENCODING_GZIP)) || (null != this.getResponseHeader(CONTENT_TYPE) && this.getResponseHeader(CONTENT_TYPE).getValue().equals(APPLICATION_X_GZIP));
  return zipped;
}","private boolean isZippedReply(){
  boolean zipped=(null != this.getResponseHeader(CONTENT_ENCODING) && this.getResponseHeader(CONTENT_ENCODING).getValue().equals(CONTENT_ENCODING_GZIP));
  return zipped;
}",0.7620817843866171
94523,"public InputStream getResponseBodyAsUnzippedStream() throws IOException {
  InputStream input=super.getResponseBodyAsStream();
  try {
    if (gzipReceived) {
      return new java.util.zip.GZIPInputStream(input);
    }
  }
 catch (  IOException e) {
    Activator.getDefault().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,NLS.bind(""String_Node_Str"",(gzipReceived ? ""String_Node_Str"" : (deflateReceived ? ""String_Node_Str"" : ""String_Node_Str""))),e));
  }
  return input;
}","public InputStream getResponseBodyAsUnzippedStream() throws IOException {
  InputStream input=super.getResponseBodyAsStream();
  try {
    if (gzipReceived) {
      return new java.util.zip.GZIPInputStream(input);
    }
  }
 catch (  IOException e) {
    Activator.getDefault().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,""String_Node_Str"",e));
    throw e;
  }
  return input;
}",0.8683035714285714
94524,"protected void openStreams() throws IncomingFileTransferException {
  final String urlString=getRemoteFileURL().toString();
  try {
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    getMethod.getParams().setParameter(CredentialsProvider.PROVIDER,new ECFCredentialsProvider());
    setRequestHeaderValues();
    final int code=httpClient.executeMethod(getMethod);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsUnzippedStream());
      fireReceiveStartEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED || code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.getResponseBody();
      getMethod.releaseConnection();
      throw new IncomingFileTransferException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
  }
 catch (  final Exception e) {
    throw new IncomingFileTransferException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,urlString),e,getResponseCode());
  }
}","protected void openStreams() throws IncomingFileTransferException {
  final String urlString=getRemoteFileURL().toString();
  int code=-1;
  try {
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    getMethod.getParams().setParameter(CredentialsProvider.PROVIDER,new ECFCredentialsProvider());
    setRequestHeaderValues();
    code=httpClient.executeMethod(getMethod);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsUnzippedStream());
      fireReceiveStartEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED || code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.getResponseBody();
      getMethod.releaseConnection();
      throw new IncomingFileTransferException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
  }
 catch (  final Exception e) {
    throw new IncomingFileTransferException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,urlString),e,code);
  }
}",0.98783712321523
94525,"private boolean openStreamsForResume(){
  final URL theURL=getRemoteFileURL();
  try {
    remoteFileURL=new URL(theURL.toString());
    final String urlString=getRemoteFileURL().toString();
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    setResumeRequestHeaderValues();
    final int code=httpClient.executeMethod(getMethod);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResumeResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsUnzippedStream());
      this.paused=false;
      fireReceiveResumedEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED || code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.getResponseBody();
      getMethod.releaseConnection();
      throw new IncomingFileTransferException(Messages.HttpClientRetrieveFileTransfer_Unauthorized,code);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
    return true;
  }
 catch (  final Exception e) {
    this.exception=e;
    this.done=true;
    hardClose();
    fireTransferReceiveDoneEvent();
    return false;
  }
}","private boolean openStreamsForResume(){
  final URL theURL=getRemoteFileURL();
  int code=-1;
  try {
    remoteFileURL=new URL(theURL.toString());
    final String urlString=getRemoteFileURL().toString();
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    setResumeRequestHeaderValues();
    code=httpClient.executeMethod(getMethod);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResumeResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsUnzippedStream());
      this.paused=false;
      fireReceiveResumedEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED || code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.getResponseBody();
      getMethod.releaseConnection();
      throw new IncomingFileTransferException(Messages.HttpClientRetrieveFileTransfer_Unauthorized,code);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
    return true;
  }
 catch (  final Exception e) {
    this.exception=e;
    this.done=true;
    hardClose();
    fireTransferReceiveDoneEvent();
    return false;
  }
}",0.9933422103861518
94526,"public void handleEvent(IContainerEvent event){
  final IContainerManager containerManager=Activator.getDefault().getContainerManager();
  if (containerManager == null)   return;
  IContainer container=containerManager.getContainer(event.getLocalContainerID());
  if (container == null)   return;
  if (event instanceof IContainerConnectedEvent || event instanceof IContainerDisconnectedEvent) {
    IChannelContainerAdapter cca=(IChannelContainerAdapter)container.getAdapter(IChannelContainerAdapter.class);
    if (cca == null)     return;
    ID containerID=container.getID();
    if (event instanceof IContainerConnectedEvent) {
      try {
        Activator.getDefault().addDocShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.ECFStart_ERROR_DOCUMENT_SHARE_NOT_CREATED,container.getID()),null));
      }
    }
 else     if (event instanceof IContainerDisconnectedEvent) {
      Activator.getDefault().removeDocShare(containerID);
    }
  }
 else   if (event instanceof IContainerDisposeEvent) {
    containerManager.removeListener(containerManagerListener);
    container.removeListener(containerListener);
  }
}","public void handleEvent(IContainerEvent event){
  final IContainerManager containerManager=Activator.getDefault().getContainerManager();
  if (containerManager == null)   return;
  IContainer container=containerManager.getContainer(event.getLocalContainerID());
  if (container == null)   return;
  if (event instanceof IContainerConnectedEvent || event instanceof IContainerDisconnectedEvent) {
    IChannelContainerAdapter cca=(IChannelContainerAdapter)container.getAdapter(IChannelContainerAdapter.class);
    if (cca == null)     return;
    ID containerID=container.getID();
    if (event instanceof IContainerConnectedEvent) {
      try {
        Activator.getDefault().addDocShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.ECFStart_ERROR_DOCUMENT_SHARE_NOT_CREATED,container.getID()),null));
      }
    }
 else     if (event instanceof IContainerDisconnectedEvent || event instanceof IContainerEjectedEvent) {
      DocShare docShare=Activator.getDefault().removeDocShare(containerID);
      if (docShare != null)       docShare.dispose();
    }
  }
 else   if (event instanceof IContainerDisposeEvent) {
    containerManager.removeListener(containerManagerListener);
    container.removeListener(containerListener);
  }
}",0.9341454130186524
94527,"public void dispose(){
  getRosterManager().removeRosterSubscriptionListener(subscriptionListener);
  getRosterManager().removeRosterListener(updateListener);
  container.removeListener(containerListener);
  final IContainerManager containerManager=Activator.getDefault().getContainerManager();
  if (containerManager != null) {
    containerManager.removeContainer(container);
  }
  container.dispose();
}","public void dispose(){
  getRosterManager().removeRosterSubscriptionListener(subscriptionListener);
  getRosterManager().removeRosterListener(updateListener);
  container.removeListener(containerListener);
}",0.6753670473083198
94528,"public void testCallAsynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  traceCallStart(""String_Node_Str"");
  service.callAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""),createRemoteCallListener());
  traceCallEnd(""String_Node_Str"");
  sleep(1500);
}","public void testCallAsynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  traceCallStart(""String_Node_Str"");
  service.callAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""),createRemoteCallListener());
  traceCallEnd(""String_Node_Str"");
}",0.977238239757208
94529,"protected void addRemoteServiceListeners(){
  for (int i=0; i < adapters.length; i++) {
    adapters[i].addRemoteServiceListener(createRemoteServiceListener());
  }
}","protected void addRemoteServiceListeners(){
  for (int i=0; i < adapters.length; i++) {
    adapters[i].addRemoteServiceListener(createRemoteServiceListener(i == 0));
  }
}",0.9822485207100592
94530,"protected IRemoteServiceListener createRemoteServiceListener(){
  return new IRemoteServiceListener(){
    public void handleServiceEvent(    IRemoteServiceEvent event){
      System.out.println(""String_Node_Str"" + event + ""String_Node_Str"");
    }
  }
;
}","protected IRemoteServiceListener createRemoteServiceListener(final boolean server){
  return new IRemoteServiceListener(){
    public void handleServiceEvent(    IRemoteServiceEvent event){
      System.out.println((server ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + event+ ""String_Node_Str"");
    }
  }
;
}",0.8625429553264605
94531,"public void testProxy() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  final IConcatService proxy=(IConcatService)service.getProxy();
  assertNotNull(proxy);
  traceCallStart(""String_Node_Str"");
  final String result=proxy.concat(""String_Node_Str"",""String_Node_Str"");
  traceCallEnd(""String_Node_Str"",result);
  sleep(1500);
}","public void testProxy() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  final IConcatService proxy=(IConcatService)service.getProxy();
  assertNotNull(proxy);
  traceCallStart(""String_Node_Str"");
  final String result=proxy.concat(""String_Node_Str"",""String_Node_Str"");
  traceCallEnd(""String_Node_Str"",result);
}",0.9806451612903224
94532,"public void testAsyncResult() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  traceCallStart(""String_Node_Str"");
  final IAsyncResult result=service.callAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  traceCallEnd(""String_Node_Str"",result);
  assertNotNull(result);
  sleep(4000);
}","public void testAsyncResult() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  traceCallStart(""String_Node_Str"");
  final IAsyncResult result=service.callAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  traceCallEnd(""String_Node_Str"",result);
  assertNotNull(result);
}",0.979253112033195
94533,"public void testFireAsynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  traceCallStart(""String_Node_Str"");
  service.fireAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  traceCallEnd(""String_Node_Str"");
  sleep(1500);
}","public void testFireAsynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  traceCallStart(""String_Node_Str"");
  service.fireAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  traceCallEnd(""String_Node_Str"");
}",0.975206611570248
94534,"public void handleServiceEvent(IRemoteServiceEvent event){
  System.out.println(""String_Node_Str"" + event + ""String_Node_Str"");
}","public void handleServiceEvent(IRemoteServiceEvent event){
  if (event instanceof IRemoteServiceRegisteredEvent) {
    IRemoteServiceRegisteredEvent e=(IRemoteServiceRegisteredEvent)event;
    IRemoteServiceReference ref=e.getReference();
    remoteService=adapters[1].getRemoteService(ref);
    assertNotNull(remoteService);
synchronized (lock) {
      done=true;
      lock.notify();
    }
  }
}",0.2433460076045627
94535,"protected void handleAddRegistration(ID remoteContainerID,Integer requestId,final RemoteServiceRegistrationImpl registration){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),ADD_REGISTRATION,new Object[]{remoteContainerID,registration});
  if (remoteContainerID == null || getLocalContainerID().equals(remoteContainerID)) {
    return;
  }
synchronized (remoteRegistrys) {
    RemoteServiceRegistryImpl registry=getRemoteRegistry(remoteContainerID);
    if (registry == null) {
      registry=new RemoteServiceRegistryImpl(remoteContainerID);
      addRemoteRegistry(registry);
    }
    registry.publishService(registration);
    localRegisterService(registration);
    fireRemoteServiceListeners(createRegisteredEvent(registration));
    notifyAddRegistrationResponse(requestId,null);
  }
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),ADD_REGISTRATION);
}","protected void handleAddRegistration(ID remoteContainerID,Integer requestId,final RemoteServiceRegistrationImpl registration){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),ADD_REGISTRATION,new Object[]{remoteContainerID,registration});
  if (remoteContainerID == null || getLocalContainerID().equals(remoteContainerID)) {
    return;
  }
synchronized (remoteRegistrys) {
    RemoteServiceRegistryImpl registry=getRemoteRegistry(remoteContainerID);
    if (registry == null) {
      registry=new RemoteServiceRegistryImpl(remoteContainerID);
      addRemoteRegistry(registry);
    }
    registry.publishService(registration);
    localRegisterService(registration);
    notifyAddRegistrationResponse(requestId,null);
  }
  fireRemoteServiceListeners(createRegisteredEvent(registration));
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),ADD_REGISTRATION);
}",0.9299691040164778
94536,"/** 
 * @param remoteID the ID of the remote container where the replica should be destroyed.
 * @throws IOException if the destroy message cannot be sent (i.e. due to disconnection, etc).
 */
protected void destroyRemote(ID remoteID) throws IOException {
  getContext().sendDispose(remoteID);
}","/** 
 * @param remoteID the ID of the remote container where the replica should be destroyed.
 * @throws IOException if the destroy message cannot be sent (i.e. due to disconnection, etc).
 */
protected void destroyRemote(ID remoteID) throws IOException {
  ISharedObjectContext context=getContext();
  if (context != null)   context.sendDispose(remoteID);
}",0.8361408882082695
94537,"/** 
 * @return ID that is the local container ID for this shared object.  Will not be <code>null</code>.
 */
protected ID getLocalContainerID(){
  return getContext().getLocalContainerID();
}","/** 
 * @return ID that is the local container ID for this shared object.  Will be <code>null</code> ifthe shared object is *not* in a local container (i.e. has been removed from the container).
 */
protected ID getLocalContainerID(){
  ISharedObjectContext context=getContext();
  return (context == null) ? null : context.getLocalContainerID();
}",0.6703703703703704
94538,"/** 
 * Send SharedObjectMessage to container with given ID. The toID parameter may be null, and if null the message will be delivered to <b>all</b> containers in group. The second parameter may not be null.
 * @param toID the target container ID for the SharedObjectMsg. If null, the given message is sent to all other containers currently in group
 * @param msg the message instance to send
 * @throws IOException thrown if the local container is not connected or unable to send for other reason
 */
protected void sendSharedObjectMsgTo(ID toID,SharedObjectMsg msg) throws IOException {
  Assert.isNotNull(msg,Messages.BaseSharedObject_Message_Not_Null);
  String method=""String_Node_Str"";
  traceEntering(method,new Object[]{toID,msg});
  getContext().sendMessage(toID,new SharedObjectMsgEvent(getID(),toID,msg));
  traceExiting(method);
}","/** 
 * Send SharedObjectMessage to container with given ID. The toID parameter may be null, and if null the message will be delivered to <b>all</b> containers in group. The second parameter may not be null.
 * @param toID the target container ID for the SharedObjectMsg. If null, the given message is sent to all other containers currently in group
 * @param msg the message instance to send
 * @throws IOException thrown if the local container is not connected or unable to send for other reason
 */
protected void sendSharedObjectMsgTo(ID toID,SharedObjectMsg msg) throws IOException {
  ISharedObjectContext context=getContext();
  if (context != null) {
    Assert.isNotNull(msg,Messages.BaseSharedObject_Message_Not_Null);
    String method=""String_Node_Str"";
    traceEntering(method,new Object[]{toID,msg});
    context.sendMessage(toID,new SharedObjectMsgEvent(getID(),toID,msg));
    traceExiting(method);
  }
}",0.9483834373227452
94539,"/** 
 * Get IDs of remote containers currently in this group. This method consults the current container context to retrieve the current group membership
 * @return ID[] of current group membership. Will not return null;
 * @see ISharedObjectContext#getGroupMemberIDs()
 */
protected ID[] getGroupMemberIDs(){
  return getContext().getGroupMemberIDs();
}","/** 
 * Get IDs of remote containers currently in this group. This method consults the current container context to retrieve the current group membership
 * @return ID[] of current group membership. Will not return null;
 * @see ISharedObjectContext#getGroupMemberIDs()
 */
protected ID[] getGroupMemberIDs(){
  ISharedObjectContext context=getContext();
  return (context == null) ? new ID[]{} : context.getGroupMemberIDs();
}",0.8322663252240717
94540,"/** 
 * @return ID that is the home container ID (primary) for this shared object.  Will not be <code>null</code>.
 */
protected ID getHomeContainerID(){
  return getConfig().getHomeContainerID();
}","/** 
 * @return ID that is the home container ID (primary) for this shared object.  Will not be <code>null</code> as long as the  {@link #init(ISharedObjectConfig)} method has been called (by container) as a resultof  {@link ISharedObjectManager#addSharedObject(ID,ISharedObject,Map)}.
 */
protected ID getHomeContainerID(){
  return getConfig().getHomeContainerID();
}",0.6984126984126984
94541,"/** 
 * Replicate this shared object to a given set of remote containers. This method will invoke the method getReplicaDescriptions in order to determine the set of ReplicaSharedObjectDescriptions to send to remote containers.
 * @param remoteContainers the set of remote containers to replicate to. If null, <b>all</b> containers in the current group are sent a message to create a replica of this shared object.
 */
protected void replicateToRemoteContainers(ID[] remoteContainers){
  traceEntering(""String_Node_Str"",remoteContainers);
  try {
    ReplicaSharedObjectDescription[] createInfos=getReplicaDescriptions(remoteContainers);
    if (createInfos != null) {
      if (createInfos.length == 1) {
        getContext().sendCreate((remoteContainers == null) ? null : remoteContainers[0],createInfos[0]);
      }
 else {
        for (int i=0; i < remoteContainers.length; i++) {
          getContext().sendCreate(remoteContainers[i],createInfos[i]);
        }
      }
    }
  }
 catch (  IOException e) {
    traceCatching(""String_Node_Str"" + DESTROYREMOTE_CODE,e);
    log(DESTROYREMOTE_CODE,""String_Node_Str"",e);
  }
}","/** 
 * Replicate this shared object to a given set of remote containers. This method will invoke the method getReplicaDescriptions in order to determine the set of ReplicaSharedObjectDescriptions to send to remote containers.
 * @param remoteContainers the set of remote containers to replicate to. If null, <b>all</b> containers in the current group are sent a message to create a replica of this shared object.
 */
protected void replicateToRemoteContainers(ID[] remoteContainers){
  ISharedObjectContext context=getContext();
  if (context != null) {
    traceEntering(""String_Node_Str"",remoteContainers);
    try {
      ReplicaSharedObjectDescription[] createInfos=getReplicaDescriptions(remoteContainers);
      if (createInfos != null) {
        if (createInfos.length == 1) {
          context.sendCreate((remoteContainers == null) ? null : remoteContainers[0],createInfos[0]);
        }
 else {
          for (int i=0; i < remoteContainers.length; i++) {
            context.sendCreate(remoteContainers[i],createInfos[i]);
          }
        }
      }
    }
 catch (    IOException e) {
      traceCatching(""String_Node_Str"" + DESTROYREMOTE_CODE,e);
      log(DESTROYREMOTE_CODE,""String_Node_Str"",e);
    }
  }
}",0.8884156729131175
94542,"/** 
 * Get the config for this shared object.
 * @return ISharedObjectConfig for this object.  The ISharedObjectConfig is set within  {@link #init(ISharedObjectConfig)}.  Will not be <code>null</code>.
 */
protected final ISharedObjectConfig getConfig(){
  return config;
}","/** 
 * Get the config for this shared object.
 * @return ISharedObjectConfig for this object.  The ISharedObjectConfig is set within  {@link #init(ISharedObjectConfig)}.  Will not be <code>null</code> as long as the init method is called prior to this method being called.
 */
protected final ISharedObjectConfig getConfig(){
  return config;
}",0.8852988691437803
94543,"/** 
 * @return ID the connected ID for the container that contains this shared object.  Will be non-<code>null</code>if the surrounding container is not currently connected.
 */
protected ID getConnectedID(){
  return getContext().getConnectedID();
}","/** 
 * @return ID the connected ID for the container that contains this shared object.  Will be non-<code>null</code>if the surrounding container is not currently connected.
 */
protected ID getConnectedID(){
  ISharedObjectContext context=getContext();
  return (context == null) ? null : context.getConnectedID();
}",0.7978910369068541
94544,"public void testCallAsynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  traceCallStart(""String_Node_Str"");
  service.callAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""),createRemoteCallListener());
  traceCallEnd(""String_Node_Str"");
  sleep(1500);
}","public void testCallAsynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  traceCallStart(""String_Node_Str"");
  service.callAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""),createRemoteCallListener());
  traceCallEnd(""String_Node_Str"");
  sleep(1500);
}",0.9485179407176288
94545,"protected IRemoteService getRemoteService(IRemoteServiceContainerAdapter adapter,String clazz,String filter){
  final IRemoteServiceReference[] refs=getRemoteServiceReferences(adapter,clazz,filter);
  if (refs.length == 0)   return null;
  return adapter.getRemoteService(refs[0]);
}","protected IRemoteService getRemoteService(IRemoteServiceContainerAdapter adapter,String clazz,String filter){
  final IRemoteServiceReference[] refs=getRemoteServiceReferences(adapter,clazz,filter);
  if (refs == null || refs.length == 0)   return null;
  return adapter.getRemoteService(refs[0]);
}",0.972508591065292
94546,"public void testCallSynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  traceCallStart(""String_Node_Str"");
  final Object result=service.callSynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  traceCallEnd(""String_Node_Str"",result);
  assertNotNull(result);
  assertTrue(result.equals(""String_Node_Str"".concat(""String_Node_Str"")));
}","public void testCallSynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  traceCallStart(""String_Node_Str"");
  final Object result=service.callSynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  traceCallEnd(""String_Node_Str"",result);
  assertNotNull(result);
  assertTrue(result.equals(""String_Node_Str"".concat(""String_Node_Str"")));
}",0.9590062111801242
94547,"public void testBadCallSynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  try {
    service.callSynch(createRemoteCall(""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""}));
    fail();
  }
 catch (  final ECFException e) {
  }
  try {
    service.callSynch(createRemoteCall(""String_Node_Str"",new Object[]{""String_Node_Str""}));
    fail();
  }
 catch (  final ECFException e) {
  }
}","public void testBadCallSynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  try {
    service.callSynch(createRemoteCall(""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""}));
    fail();
  }
 catch (  final ECFException e) {
  }
  try {
    service.callSynch(createRemoteCall(""String_Node_Str"",new Object[]{""String_Node_Str""}));
    fail();
  }
 catch (  final ECFException e) {
  }
}",0.9637760702524698
94548,"public void testProxy() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  final IConcatService proxy=(IConcatService)service.getProxy();
  assertNotNull(proxy);
  traceCallStart(""String_Node_Str"");
  final String result=proxy.concat(""String_Node_Str"",""String_Node_Str"");
  traceCallEnd(""String_Node_Str"",result);
  sleep(1500);
}","public void testProxy() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  final IConcatService proxy=(IConcatService)service.getProxy();
  assertNotNull(proxy);
  traceCallStart(""String_Node_Str"");
  final String result=proxy.concat(""String_Node_Str"",""String_Node_Str"");
  traceCallEnd(""String_Node_Str"",result);
  sleep(1500);
}",0.9564068692206076
94549,"public void testAsyncResult() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  traceCallStart(""String_Node_Str"");
  final IAsyncResult result=service.callAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  traceCallEnd(""String_Node_Str"",result);
  assertNotNull(result);
  sleep(4000);
}","public void testAsyncResult() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  traceCallStart(""String_Node_Str"");
  final IAsyncResult result=service.callAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  traceCallEnd(""String_Node_Str"",result);
  assertNotNull(result);
  sleep(4000);
}",0.9531914893617022
94550,"public void testGetServiceReferencesWithFilter() throws Exception {
  final IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  final Properties props=new Properties();
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  registerService(adapters[0],IConcatService.class.getName(),createService(),props,3000);
  final IRemoteServiceReference[] refs=getRemoteServiceReferences(adapters[1],IConcatService.class.getName(),getFilterFromServiceProperties(props));
  assertNotNull(refs);
  assertTrue(refs.length > 0);
}","public void testGetServiceReferencesWithFilter() throws Exception {
  final IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  final Properties props=new Properties();
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  registerService(adapters[0],IConcatService.class.getName(),createService(),props,3000);
  final IRemoteServiceReference[] refs=getRemoteServiceReferences(adapters[1],IConcatService.class.getName(),getFilterFromServiceProperties(props));
  if (refs == null)   return;
  assertNotNull(refs);
  assertTrue(refs.length > 0);
}",0.9581939799331104
94551,"public void testFireAsynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  traceCallStart(""String_Node_Str"");
  service.fireAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  traceCallEnd(""String_Node_Str"");
  sleep(1500);
}","public void testFireAsynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  traceCallStart(""String_Node_Str"");
  service.fireAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  traceCallEnd(""String_Node_Str"");
  sleep(1500);
}",0.9437819420783644
94552,"public void testGetServiceReferences() throws Exception {
  final IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  registerService(adapters[0],IConcatService.class.getName(),createService(),null,3000);
  final IRemoteServiceReference[] refs=getRemoteServiceReferences(adapters[1],IConcatService.class.getName(),null);
  assertNotNull(refs);
  assertTrue(refs.length > 0);
}","public void testGetServiceReferences() throws Exception {
  final IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  registerService(adapters[0],IConcatService.class.getName(),createService(),null,3000);
  final IRemoteServiceReference[] refs=getRemoteServiceReferences(adapters[1],IConcatService.class.getName(),null);
  if (refs == null)   return;
  assertTrue(refs.length > 0);
}",0.9436795994993742
94553,"public void testGetService() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  assertNotNull(service);
}","public void testGetService() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  if (service == null)   return;
  assertNotNull(service);
}",0.8925081433224755
94554,"public void sendOpenAndSelectForFile(User touser,String resourceName,int offset,int length){
  ID receiver=null;
  if (touser != null) {
    receiver=touser.getUserID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_OPEN_AND_SELECT_FOR_FILE_MSG,getUser(),resourceName,new SharedMarker(Messages.EclipseCollabSharedObject_MARKER_NAME,new Integer(offset),new Integer(length)));
    forwardMsgTo(receiver,m);
    if (receiver == null) {
      sendSelf(m);
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"",e);
  }
}","public void sendOpenAndSelectForFile(IUser touser,String resourceName,int offset,int length){
  ID receiver=null;
  if (touser != null) {
    receiver=touser.getID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_OPEN_AND_SELECT_FOR_FILE_MSG,getUser(),resourceName,new SharedMarker(Messages.EclipseCollabSharedObject_MARKER_NAME,new Integer(offset),new Integer(length)));
    forwardMsgTo(receiver,m);
    if (receiver == null) {
      sendSelf(m);
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"",e);
  }
}",0.9955237242614146
94555,"public void sendShowView(User touser,String id){
  ID receiver=null;
  if (touser != null) {
    receiver=touser.getUserID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_SHOW_VIEW_MSG,getUser(),id);
    forwardMsgTo(receiver,m);
    if (receiver == null) {
      sendSelf(m);
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"" + touser,e);
  }
}","public void sendShowView(IUser touser,String id){
  ID receiver=null;
  if (touser != null) {
    receiver=touser.getID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_SHOW_VIEW_MSG,getUser(),id);
    forwardMsgTo(receiver,m);
    if (receiver == null) {
      sendSelf(m);
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"" + touser,e);
  }
}",0.9936467598475224
94556,"protected void handleUserUpdate(final User ud){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      try {
        if (localGUI != null)         localGUI.changeUser(ud);
      }
 catch (      final Exception e) {
        log(""String_Node_Str"",e);
      }
    }
  }
);
}","protected void handleUserUpdate(final IUser ud){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      try {
        if (localGUI != null)         localGUI.changeUser(ud);
      }
 catch (      final Exception e) {
        log(""String_Node_Str"",e);
      }
    }
  }
);
}",0.99830220713073
94557,"public EclipseCollabSharedObject(IResource proj,IWorkbenchWindow window,User user,String downloaddir){
  this.localResource=proj;
  this.workbenchWindow=window;
  this.localUser=user;
  this.downloadDirectory=downloaddir;
  createOutputView();
  Assert.isNotNull(localGUI,""String_Node_Str"");
}","public EclipseCollabSharedObject(IResource proj,IWorkbenchWindow window,IUser user,String downloaddir){
  this.localResource=proj;
  this.workbenchWindow=window;
  this.localUser=user;
  this.downloadDirectory=downloaddir;
  createOutputView();
  Assert.isNotNull(localGUI,""String_Node_Str"");
}",0.9982964224872232
94558,"public void sendRingMessageToUser(User user,String msg){
  ID receiver=null;
  if (user != null) {
    receiver=user.getUserID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_USER_MSG,this.localUser,msg);
    forwardMsgTo(receiver,m);
    if (receiver == null)     sendSelf(m);
  }
 catch (  final Exception e) {
    log(""String_Node_Str"" + user,e);
  }
}","public void sendRingMessageToUser(IUser user,String msg){
  ID receiver=null;
  if (user != null) {
    receiver=user.getID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_USER_MSG,this.localUser,msg);
    forwardMsgTo(receiver,m);
    if (receiver == null)     sendSelf(m);
  }
 catch (  final Exception e) {
    log(""String_Node_Str"" + user,e);
  }
}",0.9935316946959896
94559,"public void receiveStart(ID from,File aFile,long length,float rate){
  final User user=getUserForID(from);
  String nick=Messages.EclipseCollabSharedObject_UNKNOWN_USERNAME;
  if (user != null) {
    nick=user.getNickname();
  }
  showRawLine(from,NLS.bind(Messages.EclipseCollabSharedObject_FILE_TRANSFER_RECEIVING,nick,aFile.getName()),null);
}","public void receiveStart(ID from,File aFile,long length,float rate){
  final IUser user=getUserForID(from);
  String nick=Messages.EclipseCollabSharedObject_UNKNOWN_USERNAME;
  if (user != null) {
    nick=user.getNickname();
  }
  showRawLine(from,NLS.bind(Messages.EclipseCollabSharedObject_FILE_TRANSFER_RECEIVING,nick,aFile.getName()),null);
}",0.9985569985569984
94560,"public void sendCVSProjectUpdateRequest(User touser,String msg){
  ID receiver=null;
  if (touser != null) {
    receiver=touser.getUserID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_CVS_PROJECT_UPDATE_REQUEST_MSG,getUser(),msg);
    forwardMsgTo(receiver,m);
    if (receiver == null) {
      sendSelf(m);
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"" + touser,e);
  }
}","public void sendCVSProjectUpdateRequest(IUser touser,String msg){
  ID receiver=null;
  if (touser != null) {
    receiver=touser.getID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_CVS_PROJECT_UPDATE_REQUEST_MSG,getUser(),msg);
    forwardMsgTo(receiver,m);
    if (receiver == null) {
      sendSelf(m);
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"" + touser,e);
  }
}",0.9941520467836256
94561,"protected void handleShowViewWithID(User fromUser,final String id,final String secID,final Integer mode){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      try {
        showViewWithID(id,secID,mode.intValue());
      }
 catch (      final Exception e) {
        log(""String_Node_Str"" + id + ""String_Node_Str""+ secID+ ""String_Node_Str""+ mode,e);
      }
    }
  }
);
}","protected void handleShowViewWithID(IUser fromUser,final String id,final String secID,final Integer mode){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      try {
        showViewWithID(id,secID,mode.intValue());
      }
 catch (      final Exception e) {
        log(""String_Node_Str"" + id + ""String_Node_Str""+ secID+ ""String_Node_Str""+ mode,e);
      }
    }
  }
);
}",0.9987357774968394
94562,"public void sendAddMarkerForFile(User touser,String resourceName,int offset,int length){
  ID receiver=null;
  if (touser != null) {
    receiver=touser.getUserID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_ADD_MARKER_FOR_FILE_MSG,getUser(),resourceName,new SharedMarker(Messages.EclipseCollabSharedObject_MARKER_NAME,new Integer(offset),new Integer(length)));
    forwardMsgTo(receiver,m);
    if (receiver == null) {
      sendSelf(m);
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"" + touser,e);
  }
}","public void sendAddMarkerForFile(IUser touser,String resourceName,int offset,int length){
  ID receiver=null;
  if (touser != null) {
    receiver=touser.getID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_ADD_MARKER_FOR_FILE_MSG,getUser(),resourceName,new SharedMarker(Messages.EclipseCollabSharedObject_MARKER_NAME,new Integer(offset),new Integer(length)));
    forwardMsgTo(receiver,m);
    if (receiver == null) {
      sendSelf(m);
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"" + touser,e);
  }
}",0.9955237242614146
94563,"public FileReceiverUI getFileReceiverUI(EclipseFileTransfer transfer,FileTransferParams params){
  return new FileReceiverUI(){
    public void receiveStart(    ID from,    File aFile,    long length,    float rate){
      final User user=getUserForID(from);
      String nick=Messages.EclipseCollabSharedObject_UNKNOWN_USERNAME;
      if (user != null) {
        nick=user.getNickname();
      }
      showRawLine(from,NLS.bind(Messages.EclipseCollabSharedObject_FILE_TRANSFER_RECEIVING,nick,aFile.getName()),null);
    }
    public void receiveData(    ID from,    File aFile,    int dataLength){
    }
    public void receiveDone(    ID from,    File aFile,    Exception e){
      final User user=getUserForID(from);
      String nick=Messages.EclipseCollabSharedObject_UNKNOWN_USERNAME;
      if (user != null) {
        nick=user.getNickname();
      }
      showRawLine(from,NLS.bind(Messages.EclipseCollabSharedObject_FILE_TRANSFER_RECEIVED,new Object[]{aFile.getName(),nick,getLocalFullDownloadPath()}),null);
      refreshProject();
    }
  }
;
}","public FileReceiverUI getFileReceiverUI(EclipseFileTransfer transfer,FileTransferParams params){
  return new FileReceiverUI(){
    public void receiveStart(    ID from,    File aFile,    long length,    float rate){
      final IUser user=getUserForID(from);
      String nick=Messages.EclipseCollabSharedObject_UNKNOWN_USERNAME;
      if (user != null) {
        nick=user.getNickname();
      }
      showRawLine(from,NLS.bind(Messages.EclipseCollabSharedObject_FILE_TRANSFER_RECEIVING,nick,aFile.getName()),null);
    }
    public void receiveData(    ID from,    File aFile,    int dataLength){
    }
    public void receiveDone(    ID from,    File aFile,    Exception e){
      final IUser user=getUserForID(from);
      String nick=Messages.EclipseCollabSharedObject_UNKNOWN_USERNAME;
      if (user != null) {
        nick=user.getNickname();
      }
      showRawLine(from,NLS.bind(Messages.EclipseCollabSharedObject_FILE_TRANSFER_RECEIVED,new Object[]{aFile.getName(),nick,getLocalFullDownloadPath()}),null);
      refreshProject();
    }
  }
;
}",0.9990530303030304
94564,"public void sendLaunchEditorForFile(User touser,String resourceName){
  ID receiver=null;
  if (touser != null) {
    receiver=touser.getUserID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_LAUNCH_EDITOR_FOR_FILE_MSG,getUser(),resourceName);
    forwardMsgTo(receiver,m);
    if (receiver == null) {
      sendSelf(m);
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"" + touser,e);
  }
}","public void sendLaunchEditorForFile(IUser touser,String resourceName){
  ID receiver=null;
  if (touser != null) {
    receiver=touser.getID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_LAUNCH_EDITOR_FOR_FILE_MSG,getUser(),resourceName);
    forwardMsgTo(receiver,m);
    if (receiver == null) {
      sendSelf(m);
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"" + touser,e);
  }
}",0.9942857142857144
94565,"protected void handleShowView(User fromUser,final String id){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      try {
        showView(id);
      }
 catch (      final Exception e) {
        log(""String_Node_Str"" + id,e);
      }
    }
  }
);
}","protected void handleShowView(IUser fromUser,final String id){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      try {
        showView(id);
      }
 catch (      final Exception e) {
        log(""String_Node_Str"" + id,e);
      }
    }
  }
);
}",0.998158379373849
94566,"public void handleNotifyUserAdded(User user){
  boolean add=false;
  try {
    final ID[] members=getContext().getGroupMemberIDs();
    for (int i=0; i < members.length; i++) {
      if (members[i].equals(user.getUserID())) {
        add=true;
        break;
      }
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"",e);
  }
  if (add) {
    boolean addUserResult=false;
    if (localGUI != null) {
      addUserResult=localGUI.addUser(user);
    }
    if (addUserResult)     sendNotifyUserAdded();
  }
}","public void handleNotifyUserAdded(IUser user){
  boolean add=false;
  try {
    final ID[] members=getContext().getGroupMemberIDs();
    for (int i=0; i < members.length; i++) {
      if (members[i].equals(user.getID())) {
        add=true;
        break;
      }
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"",e);
  }
  if (add) {
    boolean addUserResult=false;
    if (localGUI != null) {
      addUserResult=localGUI.addUser(user);
    }
    if (addUserResult)     sendNotifyUserAdded();
  }
}",0.9951876804619828
94567,"protected void handleUserMessage(final User sender,String msg){
  final String message=msg;
  if (sender == null)   return;
  if (localGUI != null) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        Display.getDefault().beep();
        final Shell[] shells=Display.getDefault().getShells();
        if (shells != null && shells.length > 0) {
          shells[0].setActive();
        }
        MessageDialog.openInformation(null,NLS.bind(Messages.EclipseCollabSharedObject_PRIVATE_MESSAGE_TEXT,sender.getNickname()),message);
      }
    }
);
  }
}","protected void handleUserMessage(final IUser sender,String msg){
  final String message=msg;
  if (sender == null)   return;
  if (localGUI != null) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        Display.getDefault().beep();
        final Shell[] shells=Display.getDefault().getShells();
        if (shells != null && shells.length > 0) {
          shells[0].setActive();
        }
        MessageDialog.openInformation(null,NLS.bind(Messages.EclipseCollabSharedObject_PRIVATE_MESSAGE_TEXT,sender.getNickname()),message);
      }
    }
);
  }
}",0.9991416309012876
94568,"public void sendShowViewWithID(User touser,String id,String secID,Integer mode){
  ID receiver=null;
  if (touser != null) {
    receiver=touser.getUserID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_SHOW_VIEW_WITH_ID_MSG,getUser(),id,secID,mode);
    forwardMsgTo(receiver,m);
    if (receiver == null) {
      sendSelf(m);
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"" + touser,e);
  }
}","public void sendShowViewWithID(IUser touser,String id,String secID,Integer mode){
  ID receiver=null;
  if (touser != null) {
    receiver=touser.getID();
  }
  try {
    final SharedObjectMsg m=SharedObjectMsg.createMsg(null,HANDLE_SHOW_VIEW_WITH_ID_MSG,getUser(),id,secID,mode);
    forwardMsgTo(receiver,m);
    if (receiver == null) {
      sendSelf(m);
    }
  }
 catch (  final Exception e) {
    log(""String_Node_Str"" + touser,e);
  }
}",0.9943757030371204
94569,"public void receiveDone(ID from,File aFile,Exception e){
  final User user=getUserForID(from);
  String nick=Messages.EclipseCollabSharedObject_UNKNOWN_USERNAME;
  if (user != null) {
    nick=user.getNickname();
  }
  showRawLine(from,NLS.bind(Messages.EclipseCollabSharedObject_FILE_TRANSFER_RECEIVED,new Object[]{aFile.getName(),nick,getLocalFullDownloadPath()}),null);
  refreshProject();
}","public void receiveDone(ID from,File aFile,Exception e){
  final IUser user=getUserForID(from);
  String nick=Messages.EclipseCollabSharedObject_UNKNOWN_USERNAME;
  if (user != null) {
    nick=user.getNickname();
  }
  showRawLine(from,NLS.bind(Messages.EclipseCollabSharedObject_FILE_TRANSFER_RECEIVED,new Object[]{aFile.getName(),nick,getLocalFullDownloadPath()}),null);
  refreshProject();
}",0.9987325728770596
94570,"public User getUserForID(final ID user){
  return (localGUI != null) ? localGUI.getUser(user) : null;
}","public IUser getUserForID(final ID user){
  return (localGUI != null) ? localGUI.getUser(user) : null;
}",0.9951690821256038
94571,"protected boolean isLocalUser(User fromuser){
  if (fromuser != null && fromuser.getUserID().equals(getUser().getUserID()))   return true;
  return false;
}","protected boolean isLocalUser(IUser fromuser){
  if (fromuser != null && fromuser.getID().equals(getUser().getID()))   return true;
  return false;
}",0.9704918032786886
94572,"protected void handleShowPrivateTextMsg(final User remote,final String aString){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      try {
        if (localGUI != null) {
          final ChatLine line=new ChatLine(aString);
          line.setOriginator(remote);
          line.setPrivate(true);
          localGUI.showLine(line);
          localGUI.toFront();
        }
      }
 catch (      final Exception e) {
        log(""String_Node_Str"",e);
      }
    }
  }
);
}","protected void handleShowPrivateTextMsg(final IUser remote,final String aString){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      try {
        if (localGUI != null) {
          final ChatLine line=new ChatLine(aString);
          line.setOriginator(remote);
          line.setPrivate(true);
          localGUI.showLine(line);
          localGUI.toFront();
        }
      }
 catch (      final Exception e) {
        log(""String_Node_Str"",e);
      }
    }
  }
);
}",0.9989909182643796
94573,"protected void handleLaunchEditorForFile(final User fromuser,final String resourceName){
  final User local=getUserForID(fromuser.getUserID());
  if (local != null) {
    final Runnable runnable=createOpenEditorForFileRunnable(resourceName);
    showEventInChatOutput(fromuser,resourceName,null,runnable);
    verifyAndOpenEditorLocally(fromuser,resourceName,runnable);
  }
}","protected void handleLaunchEditorForFile(final IUser fromuser,final String resourceName){
  final IUser local=getUserForID(fromuser.getID());
  if (local != null) {
    final Runnable runnable=createOpenEditorForFileRunnable(resourceName);
    showEventInChatOutput(fromuser,resourceName,null,runnable);
    verifyAndOpenEditorLocally(fromuser,resourceName,runnable);
  }
}",0.9919786096256684
94574,"protected void verifyAndOpenEditorLocally(final User fromuser,final String resourceName,final Runnable runnable){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (isLocalUser(fromuser)) {
        runnable.run();
      }
 else {
        if (showSharedEditorEventsImmediately()) {
          if (!askUserToDisplaySharedEditorEvents() || MessageDialog.openQuestion(null,Messages.EclipseCollabSharedObject_DIALOG_OPEN_SHARED_EDITOR_TEXT,NLS.bind(Messages.EclipseCollabSharedObject_OPEN_SHARED_EDITOR_QUESTION,resourceName,fromuser.getNickname()))) {
            runnable.run();
          }
        }
      }
    }
  }
);
}","protected void verifyAndOpenEditorLocally(final IUser fromuser,final String resourceName,final Runnable runnable){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (isLocalUser(fromuser)) {
        runnable.run();
      }
 else {
        if (showSharedEditorEventsImmediately()) {
          if (!askUserToDisplaySharedEditorEvents() || MessageDialog.openQuestion(null,Messages.EclipseCollabSharedObject_DIALOG_OPEN_SHARED_EDITOR_TEXT,NLS.bind(Messages.EclipseCollabSharedObject_OPEN_SHARED_EDITOR_QUESTION,resourceName,fromuser.getNickname()))) {
            runnable.run();
          }
        }
      }
    }
  }
);
}",0.9992313604919292
94575,"public void sendPrivateMessageToUser(User touser,String msg){
  try {
    forwardMsgTo(touser.getUserID(),SharedObjectMsg.createMsg(null,HANDLE_SHOW_PRIVATE_TEXT_MSG,localUser,msg));
  }
 catch (  final Exception e) {
    log(""String_Node_Str"",e);
  }
}","public void sendPrivateMessageToUser(IUser touser,String msg){
  try {
    forwardMsgTo(touser.getID(),SharedObjectMsg.createMsg(null,HANDLE_SHOW_PRIVATE_TEXT_MSG,localUser,msg));
  }
 catch (  final Exception e) {
    log(""String_Node_Str"",e);
  }
}",0.9900596421471172
94576,"public User getUser(){
  return localUser;
}","public IUser getUser(){
  return localUser;
}",0.9887640449438202
94577,"protected void handleOpenAndSelectForFile(final User fromuser,final String resourceName,SharedMarker marker){
  final User local=getUserForID(fromuser.getUserID());
  if (local != null) {
    final Runnable runnable=createOpenEditorAndSelectForFileRunnable(resourceName,marker);
    showEventInChatOutput(fromuser,resourceName,marker,runnable);
    verifyAndOpenEditorLocally(fromuser,resourceName,runnable);
  }
}","protected void handleOpenAndSelectForFile(final IUser fromuser,final String resourceName,SharedMarker marker){
  final IUser local=getUserForID(fromuser.getID());
  if (local != null) {
    final Runnable runnable=createOpenEditorAndSelectForFileRunnable(resourceName,marker);
    showEventInChatOutput(fromuser,resourceName,marker,runnable);
    verifyAndOpenEditorLocally(fromuser,resourceName,runnable);
  }
}",0.9927360774818402
94578,"protected synchronized void handleStartedTyping(User user){
  if (localGUI != null)   localGUI.startedTyping(user);
}","protected synchronized void handleStartedTyping(IUser user){
  if (localGUI != null)   localGUI.startedTyping(user);
}",0.9957446808510638
94579,"protected void showEventInChatOutput(User fromuser,String resourceName,SharedMarker marker,Runnable runnable){
  if (localGUI != null) {
    showRawLine(fromuser.getUserID(),createDisplayStringForEditorOpen(resourceName,marker),runnable);
  }
}","protected void showEventInChatOutput(IUser fromuser,String resourceName,SharedMarker marker,Runnable runnable){
  if (localGUI != null) {
    showRawLine(fromuser.getID(),createDisplayStringForEditorOpen(resourceName,marker),runnable);
  }
}",0.9896907216494846
94580,"protected void handleAddMarkerForFile(final User fromuser,final String resourceName,SharedMarker marker){
  addMarkerForFile(getLocalFileForRemote(resourceName),marker);
}","protected void handleAddMarkerForFile(final IUser fromuser,final String resourceName,SharedMarker marker){
  addMarkerForFile(getLocalFileForRemote(resourceName),marker);
}",0.9970845481049564
94581,"protected Object callSynch(RemoteServiceRegistrationImpl registration,IRemoteCall call) throws ECFException {
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",new Object[]{registration,call});
  boolean doneWaiting=false;
  Response response=null;
  try {
    final long requestId=sendCallRequest(registration,call);
    final long timeout=call.getTimeout() + System.currentTimeMillis();
    while ((timeout - System.currentTimeMillis()) > 0 && !doneWaiting) {
      final Request request=findRequestForId(requestId);
      if (request == null) {
        throw new NullPointerException(Messages.RegistrySharedObject_14 + requestId);
      }
synchronized (request) {
        if (request.isDone()) {
          removeRequest(request);
          Trace.trace(Activator.PLUGIN_ID,Messages.RegistrySharedObject_15 + request);
          doneWaiting=true;
          response=request.getResponse();
          if (response == null) {
            throw new NullPointerException(Messages.RegistrySharedObject_EXCEPTION_INVALID_RESPONSE);
          }
        }
 else {
          Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + RESPONSE_WAIT_INTERVAL + ""String_Node_Str""+ request);
          request.wait(RESPONSE_WAIT_INTERVAL);
        }
      }
    }
    if (!doneWaiting) {
      throw new ECFException(Messages.RegistrySharedObject_19 + call.getTimeout() + Messages.RegistrySharedObject_20);
    }
  }
 catch (  final IOException e) {
    log(CALL_REQUEST_ERROR_CODE,CALL_REQUEST_ERROR_MESSAGE,e);
    throw new ECFException(Messages.RegistrySharedObject_EXCEPTION_SENDING_REQUEST,e);
  }
catch (  final InterruptedException e) {
    log(CALL_REQUEST_TIMEOUT_ERROR_CODE,CALL_REQUEST_TIMEOUT_ERROR_MESSAGE,e);
    throw new ECFException(Messages.RegistrySharedObject_EXCEPTION_WAIT_INTERRUPTED,e);
  }
  Object result=null;
  if (response.hadException()) {
    throw new ECFException(Messages.RegistrySharedObject_EXCEPTION_IN_REMOTE_CALL,response.getException());
  }
  result=response.getResponse();
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",result);
  return result;
}","protected Object callSynch(RemoteServiceRegistrationImpl registration,IRemoteCall call) throws ECFException {
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",new Object[]{registration,call});
  boolean doneWaiting=false;
  Response response=null;
  try {
    final Request request=sendCallRequest(registration,call);
    final long timeout=call.getTimeout() + System.currentTimeMillis();
    while ((timeout - System.currentTimeMillis()) > 0 && !doneWaiting) {
synchronized (request) {
        if (request.isDone()) {
          Trace.trace(Activator.PLUGIN_ID,Messages.RegistrySharedObject_15 + request);
          doneWaiting=true;
          response=request.getResponse();
          if (response == null)           throw new ECFException(Messages.RegistrySharedObject_EXCEPTION_INVALID_RESPONSE);
        }
 else {
          Trace.trace(Activator.PLUGIN_ID,""String_Node_Str"" + RESPONSE_WAIT_INTERVAL + ""String_Node_Str""+ request);
          request.wait(RESPONSE_WAIT_INTERVAL);
        }
      }
    }
    if (!doneWaiting)     throw new ECFException(Messages.RegistrySharedObject_19 + call.getTimeout() + Messages.RegistrySharedObject_20);
  }
 catch (  final IOException e) {
    log(CALL_REQUEST_ERROR_CODE,CALL_REQUEST_ERROR_MESSAGE,e);
    throw new ECFException(Messages.RegistrySharedObject_EXCEPTION_SENDING_REQUEST,e);
  }
catch (  final InterruptedException e) {
    log(CALL_REQUEST_TIMEOUT_ERROR_CODE,CALL_REQUEST_TIMEOUT_ERROR_MESSAGE,e);
    throw new ECFException(Messages.RegistrySharedObject_EXCEPTION_WAIT_INTERRUPTED,e);
  }
  Object result=null;
  if (response.hadException())   throw new ECFException(Messages.RegistrySharedObject_EXCEPTION_IN_REMOTE_CALL,response.getException());
  result=response.getResponse();
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",result);
  return result;
}",0.9112227805695142
94582,"protected boolean addRequest(Request request){
  return requests.add(request);
}","private boolean addRequest(Request request){
  return requests.add(request);
}",0.9493670886075948
94583,"public void dispose(ID containerID){
  super.dispose(containerID);
  unregisterAllServiceRegistrations();
  remoteRegistrys.clear();
  serviceListeners.clear();
  localServiceRegistrations.clear();
  addRegistrationRequests.clear();
}","public void dispose(ID containerID){
  super.dispose(containerID);
  unregisterAllServiceRegistrations();
  remoteRegistrys.clear();
  serviceListeners.clear();
  localServiceRegistrations.clear();
  addRegistrationRequests.clear();
  requests.clear();
}",0.9590163934426228
94584,"protected void handleCallResponse(Response response){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),CALL_RESPONSE,new Object[]{response});
  final Request request=findRequestForId(response.getRequestId());
  if (request == null) {
    log(REQUEST_NOT_FOUND_ERROR_CODE,REQUEST_NOT_FOUND_ERROR_MESSAGE,new NullPointerException());
    return;
  }
  final IRemoteCallListener listener=request.getListener();
  if (listener != null) {
    fireCallCompleteEvent(listener,request.getRequestId(),response.getResponse(),response.hadException(),response.getException());
    return;
  }
synchronized (request) {
    request.setResponse(response);
    request.setDone(true);
    request.notify();
  }
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),CALL_RESPONSE);
}","protected void handleCallResponse(Response response){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),CALL_RESPONSE,new Object[]{response});
  final Request request=getRequest(response.getRequestId());
  if (request == null) {
    log(REQUEST_NOT_FOUND_ERROR_CODE,REQUEST_NOT_FOUND_ERROR_MESSAGE,new NullPointerException());
    return;
  }
  removeRequest(request);
  final IRemoteCallListener listener=request.getListener();
  if (listener != null) {
    fireCallCompleteEvent(listener,request.getRequestId(),response.getResponse(),response.hadException(),response.getException());
    return;
  }
synchronized (request) {
    request.setResponse(response);
    request.setDone(true);
    request.notify();
  }
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),CALL_RESPONSE);
}",0.9704545454545456
94585,"protected boolean removeRequest(Request request){
  return requests.remove(request);
}","private boolean removeRequest(Request request){
  return requests.remove(request);
}",0.9529411764705882
94586,"protected long sendCallRequest(RemoteServiceRegistrationImpl remoteRegistration,final IRemoteCall call) throws IOException {
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",new Object[]{remoteRegistration,call});
  final Request request=createRequest(remoteRegistration,call,null);
  addRequest(request);
  try {
    sendSharedObjectMsgTo(remoteRegistration.getContainerID(),SharedObjectMsg.createMsg(CALL_REQUEST,request));
  }
 catch (  final IOException e) {
    removeRequest(request);
    throw e;
  }
  final long requestId=request.getRequestId();
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",new Long(requestId));
  return requestId;
}","protected Request sendCallRequest(RemoteServiceRegistrationImpl remoteRegistration,final IRemoteCall call) throws IOException {
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",new Object[]{remoteRegistration,call});
  final Request request=createRequest(remoteRegistration,call,null);
  addRequest(request);
  try {
    sendSharedObjectMsgTo(remoteRegistration.getContainerID(),SharedObjectMsg.createMsg(CALL_REQUEST,request));
  }
 catch (  final IOException e) {
    removeRequest(request);
    throw e;
  }
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",request);
  return request;
}",0.943717277486911
94587,"private AdditionalClientRosterEntry updatePresenceForMatchingEntry(org.eclipse.ecf.presence.roster.RosterEntry entry,XMPPID fromID,IPresence newPresence){
  final IUser user=entry.getUser();
  XMPPID oldID=(XMPPID)user.getID();
  if (oldID.equals(fromID)) {
    entry.setPresence(newPresence);
    rosterManager.notifyRosterUpdate(entry);
  }
 else   if (oldID.getUsernameAtHost().equals(fromID.getUsernameAtHost())) {
    if (oldID.getResourceName() == null) {
      oldID.setResourceName(fromID.getResourceName());
      entry.setPresence(newPresence);
      rosterManager.notifyRosterUpdate(entry);
    }
 else     if (fromID.getResourceName() != null && !newPresence.getType().equals(IPresence.Type.UNAVAILABLE)) {
      return new AdditionalClientRosterEntry(entry.getParent(),new User(fromID,user.getName()),newPresence);
    }
  }
  return null;
}","private AdditionalClient updatePresenceForMatchingEntry(org.eclipse.ecf.presence.roster.RosterEntry entry,XMPPID fromID,IPresence newPresence){
  final IUser user=entry.getUser();
  XMPPID oldID=(XMPPID)user.getID();
  if (newPresence.getType().equals(IPresence.Type.UNAVAILABLE)) {
    if (oldID.equals(fromID))     return removeEntryFromRoster(oldID,entry,newPresence,user);
  }
 else {
    if (oldID.equals(fromID)) {
      entry.setPresence(newPresence);
      rosterManager.notifyRosterUpdate(entry);
    }
 else     if (oldID.getUsernameAtHost().equals(fromID.getUsernameAtHost())) {
      if (oldID.getResourceName() == null) {
        oldID.setResourceName(fromID.getResourceName());
        entry.setPresence(newPresence);
        rosterManager.notifyRosterUpdate(entry);
      }
 else       return new AdditionalClient(entry.getParent(),new User(fromID,user.getName()),newPresence,true);
    }
  }
  return null;
}",0.4465691788526434
94588,"private boolean removeItemFromRosterGroup(org.eclipse.ecf.presence.roster.RosterGroup group,XMPPID itemIDToRemove){
  final Collection groupEntries=group.getEntries();
synchronized (groupEntries) {
    for (final Iterator i=group.getEntries().iterator(); i.hasNext(); ) {
      final org.eclipse.ecf.presence.roster.RosterEntry entry=(org.eclipse.ecf.presence.roster.RosterEntry)i.next();
      if (entry.getUser().getID().equals(itemIDToRemove)) {
        i.remove();
        return true;
      }
    }
  }
  return false;
}","private boolean removeItemFromRosterGroup(org.eclipse.ecf.presence.roster.RosterGroup group,XMPPID itemIDToRemove){
  final Collection groupEntries=group.getEntries();
synchronized (groupEntries) {
    for (final Iterator i=group.getEntries().iterator(); i.hasNext(); ) {
      final org.eclipse.ecf.presence.roster.RosterEntry entry=(org.eclipse.ecf.presence.roster.RosterEntry)i.next();
      XMPPID entryID=(XMPPID)entry.getUser().getID();
      if (entryID.equals(itemIDToRemove)) {
        i.remove();
        return true;
      }
    }
  }
  return false;
}",0.9577205882352942
94589,"private void updatePresence(XMPPID fromID,IPresence newPresence){
  final Collection rosterItems=roster.getItems();
  List newEntrys=new ArrayList();
synchronized (rosterItems) {
    for (final Iterator i=roster.getItems().iterator(); i.hasNext(); ) {
      final IRosterItem item=(IRosterItem)i.next();
      if (item instanceof IRosterGroup) {
        AdditionalClientRosterEntry[] es=updatePresenceInGroup((IRosterGroup)item,fromID,newPresence);
        for (int j=0; j < es.length; j++) {
          newEntrys.add(es[j]);
        }
      }
 else       if (item instanceof org.eclipse.ecf.presence.roster.RosterEntry) {
        AdditionalClientRosterEntry entry=updatePresenceForMatchingEntry((org.eclipse.ecf.presence.roster.RosterEntry)item,fromID,newPresence);
        if (entry != null)         newEntrys.add(entry);
      }
    }
  }
  AdditionalClientRosterEntry[] entrys=(AdditionalClientRosterEntry[])newEntrys.toArray(new AdditionalClientRosterEntry[]{});
  IRosterEntry entry=null;
  if (entrys.length > 0) {
    for (int i=0; i < entrys.length; i++) {
      entry=new org.eclipse.ecf.presence.roster.RosterEntry(entrys[i].parent,entrys[i].user,entrys[i].presence);
    }
    rosterManager.notifyRosterUpdate(roster);
    fireSetRosterEntry(false,entry);
  }
}","private void updatePresence(XMPPID fromID,IPresence newPresence){
  final Collection rosterItems=roster.getItems();
  AdditionalClient newEntry=null;
synchronized (rosterItems) {
    for (final Iterator i=roster.getItems().iterator(); i.hasNext(); ) {
      final IRosterItem item=(IRosterItem)i.next();
      if (item instanceof IRosterGroup) {
        AdditionalClient newClient=updatePresenceInGroup((IRosterGroup)item,fromID,newPresence);
        if (newClient != null)         newEntry=newClient;
      }
 else       if (item instanceof org.eclipse.ecf.presence.roster.RosterEntry) {
        AdditionalClient newClient=updatePresenceForMatchingEntry((org.eclipse.ecf.presence.roster.RosterEntry)item,fromID,newPresence);
        if (newClient != null)         newEntry=newClient;
      }
    }
  }
  if (newEntry != null) {
    if (newEntry.add) {
      if (!rosterContainsEntry(fromID)) {
        IRosterEntry entry=new org.eclipse.ecf.presence.roster.RosterEntry(newEntry.parent,newEntry.user,newEntry.presence);
        rosterManager.notifyRosterUpdate(roster);
        fireSetRosterEntry(false,entry);
      }
    }
 else {
      removeFromRoster(fromID);
    }
  }
}",0.3578431372549019
94590,"private AdditionalClientRosterEntry[] updatePresenceInGroup(IRosterGroup group,XMPPID fromID,IPresence newPresence){
  List results=new ArrayList();
  final Collection groupEntries=group.getEntries();
synchronized (groupEntries) {
    for (final Iterator i=group.getEntries().iterator(); i.hasNext(); ) {
      AdditionalClientRosterEntry newEntry=updatePresenceForMatchingEntry((org.eclipse.ecf.presence.roster.RosterEntry)i.next(),fromID,newPresence);
      if (newEntry != null)       results.add(newEntry);
    }
  }
  return (AdditionalClientRosterEntry[])results.toArray(new AdditionalClientRosterEntry[]{});
}","private AdditionalClient updatePresenceInGroup(IRosterGroup group,XMPPID fromID,IPresence newPresence){
  final Collection groupEntries=group.getEntries();
  AdditionalClient newEntry=null;
synchronized (groupEntries) {
    for (final Iterator i=group.getEntries().iterator(); i.hasNext(); ) {
      AdditionalClient newClient=updatePresenceForMatchingEntry((org.eclipse.ecf.presence.roster.RosterEntry)i.next(),fromID,newPresence);
      if (newClient != null)       newEntry=newClient;
    }
  }
  return newEntry;
}",0.5114638447971781
94591,"protected void handleIQEvent(IQEvent evt){
  final IQ iq=evt.getIQ();
  if (iq instanceof RosterPacket) {
    final RosterPacket rosterPacket=(RosterPacket)iq;
    if (rosterPacket.getType() == IQ.Type.SET || rosterPacket.getType() == IQ.Type.RESULT) {
      for (final Iterator i=rosterPacket.getRosterItems(); i.hasNext(); ) {
        final RosterPacket.Item item=(RosterPacket.Item)i.next();
        final RosterPacket.ItemType itemType=item.getItemType();
        boolean remove=false;
        XMPPID newID=createIDFromName(item.getUser());
        final IRosterItem items[]=createRosterEntries(newID,item);
        final IRosterEntry entry=createRosterEntry(newID,item);
        if (itemType == RosterPacket.ItemType.NONE || itemType == RosterPacket.ItemType.REMOVE) {
          removeItemFromRoster(roster.getItems(),createIDFromName(item.getUser()));
          remove=true;
        }
 else {
          remove=false;
          addToRoster(items);
        }
        fireSetRosterEntry(remove,entry);
      }
    }
  }
 else {
    trace(""String_Node_Str"");
  }
}","protected void handleIQEvent(IQEvent evt){
  final IQ iq=evt.getIQ();
  if (iq instanceof RosterPacket) {
    final RosterPacket rosterPacket=(RosterPacket)iq;
    if (rosterPacket.getType() == IQ.Type.SET || rosterPacket.getType() == IQ.Type.RESULT) {
      for (final Iterator i=rosterPacket.getRosterItems(); i.hasNext(); ) {
        final RosterPacket.Item item=(RosterPacket.Item)i.next();
        final RosterPacket.ItemType itemType=item.getItemType();
        boolean remove=false;
        XMPPID newID=createIDFromName(item.getUser());
        final IRosterItem items[]=createRosterEntries(newID,item);
        final IRosterEntry entry=createRosterEntry(newID,item);
        if (itemType == RosterPacket.ItemType.NONE || itemType == RosterPacket.ItemType.REMOVE) {
          removeFromRoster(createIDFromName(item.getUser()));
          remove=true;
        }
 else {
          remove=false;
          addToRoster(items);
        }
        fireSetRosterEntry(remove,entry);
      }
    }
  }
 else {
    trace(""String_Node_Str"");
  }
}",0.9895734597156398
94592,"private void updateXMPPID(XMPPID newID,XMPPID oldID){
  String newResource=newID.getResourceName();
  String oldResource=oldID.getResourceName();
  if (oldResource == null) {
    oldID.setResourceName(newResource);
  }
 else {
    if (newResource != null && (oldResource.compareTo(newResource) < 0)) {
      oldID.setResourceName(newResource);
    }
  }
}","private void updateXMPPID(XMPPID newID,XMPPID oldID){
  String newResource=newID.getResourceName();
  String oldResource=oldID.getResourceName();
  if (oldResource == null)   oldID.setResourceName(newResource);
 else   if (newResource != null)   oldID.setResourceName(newResource);
}",0.5454545454545454
94593,"private void updatePresenceForMatchingEntry(org.eclipse.ecf.presence.roster.RosterEntry entry,XMPPID fromID,IPresence newPresence){
  final IUser user=entry.getUser();
  if (fromID.equals(user.getID())) {
    entry.setPresence(newPresence);
    rosterManager.notifyRosterUpdate(entry);
  }
}","private void updatePresenceForMatchingEntry(org.eclipse.ecf.presence.roster.RosterEntry entry,XMPPID fromID,IPresence newPresence){
  final IUser user=entry.getUser();
  ID oldID=user.getID();
  if (fromID.equals(oldID)) {
    if (oldID instanceof XMPPID)     updateXMPPID(fromID,(XMPPID)oldID);
    entry.setPresence(newPresence);
    rosterManager.notifyRosterUpdate(entry);
  }
}",0.8291233283803864
94594,"public String getFQName(){
  return getUsernameAtHost() + getResourceName();
}","public String getFQName(){
  String rn=getResourceName();
  return getUsernameAtHost() + PATH_DELIMITER + ((rn == null) ? ""String_Node_Str"" : rn);
}",0.584070796460177
94595,"public XMPPID(Namespace namespace,String unamehost) throws URISyntaxException {
  super(namespace);
  unamehost=fixPercentEscape(unamehost);
  if (unamehost == null)   throw new URISyntaxException(unamehost,Messages.XMPPID_EXCEPTION_XMPPID_USERNAME_NOT_NULL);
  int atIndex=unamehost.lastIndexOf(USER_HOST_DELIMITER);
  if (atIndex == -1)   throw new URISyntaxException(unamehost,Messages.XMPPID_EXCEPTION_HOST_PORT_NOT_VALID);
  username=fixEscapeInNode(unamehost.substring(0,atIndex));
  final String remainder=unamehost.substring(atIndex + 1);
  atIndex=remainder.lastIndexOf(PORT_DELIMITER);
  if (atIndex != -1) {
    try {
      final int slashLoc=remainder.indexOf(PATH_DELIMITER);
      if (slashLoc != -1)       port=Integer.parseInt(remainder.substring(atIndex + 1,slashLoc));
 else       port=Integer.parseInt(remainder.substring(atIndex + 1));
    }
 catch (    final NumberFormatException e) {
      throw new URISyntaxException(unamehost,Messages.XMPPID_EXCEPTION_INVALID_PORT);
    }
    hostname=remainder.substring(0,atIndex);
  }
  atIndex=remainder.indexOf(PATH_DELIMITER);
  if (atIndex != -1) {
    if (hostname == null)     hostname=remainder.substring(0,atIndex);
    resourcename=PATH_DELIMITER + remainder.substring(atIndex + 1);
  }
 else {
    resourcename=PATH_DELIMITER + ""String_Node_Str"";
  }
  if (hostname == null)   hostname=remainder;
  uri=new URI(namespace.getScheme(),username,hostname,port,resourcename,null,null);
}","public XMPPID(Namespace namespace,String unamehost) throws URISyntaxException {
  super(namespace);
  unamehost=fixPercentEscape(unamehost);
  if (unamehost == null)   throw new URISyntaxException(unamehost,Messages.XMPPID_EXCEPTION_XMPPID_USERNAME_NOT_NULL);
  int atIndex=unamehost.lastIndexOf(USER_HOST_DELIMITER);
  if (atIndex == -1)   throw new URISyntaxException(unamehost,Messages.XMPPID_EXCEPTION_HOST_PORT_NOT_VALID);
  username=fixEscapeInNode(unamehost.substring(0,atIndex));
  final String remainder=unamehost.substring(atIndex + 1);
  atIndex=remainder.lastIndexOf(PORT_DELIMITER);
  if (atIndex != -1) {
    try {
      final int slashLoc=remainder.indexOf(PATH_DELIMITER);
      if (slashLoc != -1)       port=Integer.parseInt(remainder.substring(atIndex + 1,slashLoc));
 else       port=Integer.parseInt(remainder.substring(atIndex + 1));
    }
 catch (    final NumberFormatException e) {
      throw new URISyntaxException(unamehost,Messages.XMPPID_EXCEPTION_INVALID_PORT);
    }
    hostname=remainder.substring(0,atIndex);
  }
  atIndex=remainder.indexOf(PATH_DELIMITER);
  if (atIndex != -1) {
    if (hostname == null)     hostname=remainder.substring(0,atIndex);
    setResourceName(remainder.substring(atIndex + 1));
  }
 else {
    setResourceName(null);
  }
  if (hostname == null)   hostname=remainder;
  uri=new URI(namespace.getScheme(),username,hostname,port,PATH_DELIMITER + ((resourcename == null) ? ""String_Node_Str"" : resourcename),null,null);
}",0.8361158432708689
94596,"protected void setResumeRequestHeaderValues() throws IOException {
  if (this.bytesReceived <= 0 || this.fileLength <= this.bytesReceived)   throw new IOException(Messages.UrlConnectionRetrieveFileTransfer_RESUME_START_ERROR);
  setRangeHeader(""String_Node_Str"" + this.bytesReceived + ""String_Node_Str"");
}","protected void setResumeRequestHeaderValues() throws IOException {
  if (this.bytesReceived <= 0 || this.fileLength <= this.bytesReceived)   throw new IOException(Messages.UrlConnectionRetrieveFileTransfer_RESUME_START_ERROR);
  setRangeHeader(""String_Node_Str"" + this.bytesReceived + ""String_Node_Str"");
  urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
}",0.8934306569343066
94597,"protected void setRequestHeaderValues() throws InvalidFileRangeSpecificationException {
  final IFileRangeSpecification rangeSpec=getFileRangeSpecification();
  if (rangeSpec != null && isHTTP()) {
    final long startPosition=rangeSpec.getStartPosition();
    final long endPosition=rangeSpec.getEndPosition();
    if (startPosition < 0)     throw new InvalidFileRangeSpecificationException(Messages.UrlConnectionRetrieveFileTransfer_RESUME_START_POSITION_LESS_THAN_ZERO,rangeSpec);
    if (endPosition != -1L && endPosition <= startPosition)     throw new InvalidFileRangeSpecificationException(Messages.UrlConnectionRetrieveFileTransfer_RESUME_ERROR_END_POSITION_LESS_THAN_START,rangeSpec);
    setRangeHeader(""String_Node_Str"" + startPosition + ""String_Node_Str""+ ((endPosition == -1L) ? ""String_Node_Str"" : (""String_Node_Str"" + endPosition)));
  }
  urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
}","protected void setRequestHeaderValues() throws InvalidFileRangeSpecificationException {
  final IFileRangeSpecification rangeSpec=getFileRangeSpecification();
  if (rangeSpec != null && isHTTP()) {
    final long startPosition=rangeSpec.getStartPosition();
    final long endPosition=rangeSpec.getEndPosition();
    if (startPosition < 0)     throw new InvalidFileRangeSpecificationException(Messages.UrlConnectionRetrieveFileTransfer_RESUME_START_POSITION_LESS_THAN_ZERO,rangeSpec);
    if (endPosition != -1L && endPosition <= startPosition)     throw new InvalidFileRangeSpecificationException(Messages.UrlConnectionRetrieveFileTransfer_RESUME_ERROR_END_POSITION_LESS_THAN_START,rangeSpec);
    setRangeHeader(""String_Node_Str"" + startPosition + ""String_Node_Str""+ ((endPosition == -1L) ? ""String_Node_Str"" : (""String_Node_Str"" + endPosition)));
  }
  urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
}",0.9621172807472756
94598,"protected void setResumeRequestHeaderValues() throws IOException {
  if (this.bytesReceived <= 0 || this.fileLength <= this.bytesReceived)   throw new IOException(Messages.HttpClientRetrieveFileTransfer_RESUME_START_ERROR);
  setRangeHeader(""String_Node_Str"" + this.bytesReceived + ""String_Node_Str"");
}","protected void setResumeRequestHeaderValues() throws IOException {
  if (this.bytesReceived <= 0 || this.fileLength <= this.bytesReceived)   throw new IOException(Messages.HttpClientRetrieveFileTransfer_RESUME_START_ERROR);
  setRangeHeader(""String_Node_Str"" + this.bytesReceived + ""String_Node_Str"");
  getMethod.addRequestHeader(""String_Node_Str"",""String_Node_Str"");
}",0.9004457652303121
94599,"protected void setRequestHeaderValues() throws InvalidFileRangeSpecificationException {
  final IFileRangeSpecification rangeSpec=getFileRangeSpecification();
  if (rangeSpec != null) {
    final long startPosition=rangeSpec.getStartPosition();
    final long endPosition=rangeSpec.getEndPosition();
    if (startPosition < 0)     throw new InvalidFileRangeSpecificationException(Messages.HttpClientRetrieveFileTransfer_RESUME_START_POSITION_LESS_THAN_ZERO,rangeSpec);
    if (endPosition != -1L && endPosition <= startPosition)     throw new InvalidFileRangeSpecificationException(Messages.HttpClientRetrieveFileTransfer_RESUME_ERROR_END_POSITION_LESS_THAN_START,rangeSpec);
    setRangeHeader(""String_Node_Str"" + startPosition + ""String_Node_Str""+ ((endPosition == -1L) ? ""String_Node_Str"" : (""String_Node_Str"" + endPosition)));
  }
}","protected void setRequestHeaderValues() throws InvalidFileRangeSpecificationException {
  final IFileRangeSpecification rangeSpec=getFileRangeSpecification();
  if (rangeSpec != null) {
    final long startPosition=rangeSpec.getStartPosition();
    final long endPosition=rangeSpec.getEndPosition();
    if (startPosition < 0)     throw new InvalidFileRangeSpecificationException(Messages.HttpClientRetrieveFileTransfer_RESUME_START_POSITION_LESS_THAN_ZERO,rangeSpec);
    if (endPosition != -1L && endPosition <= startPosition)     throw new InvalidFileRangeSpecificationException(Messages.HttpClientRetrieveFileTransfer_RESUME_ERROR_END_POSITION_LESS_THAN_START,rangeSpec);
    setRangeHeader(""String_Node_Str"" + startPosition + ""String_Node_Str""+ ((endPosition == -1L) ? ""String_Node_Str"" : (""String_Node_Str"" + endPosition)));
  }
  getMethod.addRequestHeader(""String_Node_Str"",""String_Node_Str"");
}",0.9614721104082806
94600,"protected void openStreams() throws IncomingFileTransferException {
  final String urlString=getRemoteFileURL().toString();
  try {
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    setRequestHeaderValues();
    final int code=httpClient.executeMethod(getMethod);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsStream());
      fireReceiveStartEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED || code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.getResponseBody();
      getMethod.releaseConnection();
      throw new IncomingFileTransferException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
  }
 catch (  final Exception e) {
    throw new IncomingFileTransferException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,urlString),e);
  }
}","protected void openStreams() throws IncomingFileTransferException {
  final String urlString=getRemoteFileURL().toString();
  try {
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    setRequestHeaderValues();
    final int code=httpClient.executeMethod(getMethod);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResponseHeaderValues();
      setInputStream(((GzipGetMethod)getMethod).getResponseBodyAsUnzippedStream());
      fireReceiveStartEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED || code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.getResponseBody();
      getMethod.releaseConnection();
      throw new IncomingFileTransferException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
  }
 catch (  final Exception e) {
    throw new IncomingFileTransferException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,urlString),e);
  }
}",0.987938288920056
94601,"private boolean openStreamsForResume(){
  final URL theURL=getRemoteFileURL();
  try {
    remoteFileURL=new URL(theURL.toString());
    final String urlString=getRemoteFileURL().toString();
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    setResumeRequestHeaderValues();
    final int code=httpClient.executeMethod(getMethod);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResumeResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsStream());
      this.paused=false;
      fireReceiveResumedEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED || code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.getResponseBody();
      getMethod.releaseConnection();
      throw new IncomingFileTransferException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
    return true;
  }
 catch (  final Exception e) {
    this.exception=e;
    this.done=true;
    hardClose();
    fireTransferReceiveDoneEvent();
    return false;
  }
}","private boolean openStreamsForResume(){
  final URL theURL=getRemoteFileURL();
  try {
    remoteFileURL=new URL(theURL.toString());
    final String urlString=getRemoteFileURL().toString();
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    setResumeRequestHeaderValues();
    final int code=httpClient.executeMethod(getMethod);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResumeResponseHeaderValues();
      setInputStream(((GzipGetMethod)getMethod).getResponseBodyAsUnzippedStream());
      this.paused=false;
      fireReceiveResumedEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED || code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.getResponseBody();
      getMethod.releaseConnection();
      throw new IncomingFileTransferException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
    return true;
  }
 catch (  final Exception e) {
    this.exception=e;
    this.done=true;
    hardClose();
    fireTransferReceiveDoneEvent();
    return false;
  }
}",0.9927980794878636
94602,"protected void openStreams() throws IncomingFileTransferException {
  final String urlString=getRemoteFileURL().toString();
  try {
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    setRequestHeaderValues();
    final int code=httpClient.executeMethod(getMethod);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResponseHeaderValues();
      setInputStream(((GzipGetMethod)getMethod).getResponseBodyAsUnzippedStream());
      fireReceiveStartEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED || code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.getResponseBody();
      getMethod.releaseConnection();
      throw new IncomingFileTransferException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
  }
 catch (  final Exception e) {
    throw new IncomingFileTransferException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,urlString),e);
  }
}","protected void openStreams() throws IncomingFileTransferException {
  final String urlString=getRemoteFileURL().toString();
  try {
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    setRequestHeaderValues();
    final int code=httpClient.executeMethod(getMethod);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsUnzippedStream());
      fireReceiveStartEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED || code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.getResponseBody();
      getMethod.releaseConnection();
      throw new IncomingFileTransferException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
  }
 catch (  final Exception e) {
    throw new IncomingFileTransferException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,urlString),e);
  }
}",0.9902043101035544
94603,"private boolean openStreamsForResume(){
  final URL theURL=getRemoteFileURL();
  try {
    remoteFileURL=new URL(theURL.toString());
    final String urlString=getRemoteFileURL().toString();
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    setResumeRequestHeaderValues();
    final int code=httpClient.executeMethod(getMethod);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResumeResponseHeaderValues();
      setInputStream(((GzipGetMethod)getMethod).getResponseBodyAsUnzippedStream());
      this.paused=false;
      fireReceiveResumedEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED || code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.getResponseBody();
      getMethod.releaseConnection();
      throw new IncomingFileTransferException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
    return true;
  }
 catch (  final Exception e) {
    this.exception=e;
    this.done=true;
    hardClose();
    fireTransferReceiveDoneEvent();
    return false;
  }
}","private boolean openStreamsForResume(){
  final URL theURL=getRemoteFileURL();
  try {
    remoteFileURL=new URL(theURL.toString());
    final String urlString=getRemoteFileURL().toString();
    httpClient.getHttpConnectionManager().getParams().setSoTimeout(DEFAULT_CONNECTION_TIMEOUT);
    httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    setupAuthentication(urlString);
    setupHostAndPort(urlString);
    getMethod=new GzipGetMethod(urlString);
    getMethod.setFollowRedirects(true);
    setResumeRequestHeaderValues();
    final int code=httpClient.executeMethod(getMethod);
    if (code == HttpURLConnection.HTTP_PARTIAL || code == HttpURLConnection.HTTP_OK) {
      getResumeResponseHeaderValues();
      setInputStream(getMethod.getResponseBodyAsUnzippedStream());
      this.paused=false;
      fireReceiveResumedEvent();
    }
 else     if (code == HttpURLConnection.HTTP_NOT_FOUND) {
      getMethod.releaseConnection();
      throw new FileNotFoundException(urlString);
    }
 else     if (code == HttpURLConnection.HTTP_UNAUTHORIZED || code == HttpURLConnection.HTTP_FORBIDDEN) {
      getMethod.getResponseBody();
      getMethod.releaseConnection();
      throw new IncomingFileTransferException(Messages.HttpClientRetrieveFileTransfer_Unauthorized);
    }
 else     if (code == HttpURLConnection.HTTP_PROXY_AUTH) {
      getMethod.releaseConnection();
      throw new LoginException(Messages.HttpClientRetrieveFileTransfer_Proxy_Auth_Required);
    }
 else {
      getMethod.releaseConnection();
      throw new IOException(NLS.bind(Messages.HttpClientRetrieveFileTransfer_ERROR_GENERAL_RESPONSE_CODE,new Integer(code)));
    }
    return true;
  }
 catch (  final Exception e) {
    this.exception=e;
    this.done=true;
    hardClose();
    fireTransferReceiveDoneEvent();
    return false;
  }
}",0.9949427734894865
94604,"public void run(){
  for (int i=0; i < 10; i++) {
    String text=fDocument.get();
    String newText=""String_Node_Str"";
    text=text.concat(newText);
    fDocument.set(text);
    IModelChange change=new DocumentChangeMessage(i + 150,1,newText);
    IModelChangeMessage[] changes=initiator.registerLocalChange(change);
    getReceiverQueue().put(changes);
  }
}","public void run(){
  for (int i=0; i < 10; i++) {
    String text=fDocument.get();
    String newText=""String_Node_Str"";
    text=text.concat(newText);
    fDocument.set(text);
    IModelChange change=new DocumentChangeMessage(i + 150,newText.length(),newText);
    IModelChangeMessage[] changes=initiator.registerLocalChange(change);
    getReceiverQueue().put(changes);
  }
}",0.9769959404600812
94605,"public ColaDocumentChangeMessage(DocumentChangeMessage msg,long localOperationsCount,long remoteOperationsCount){
  super(msg.getOffset(),msg.getLengthOfReplacedText(),msg.getText());
  this.localOperationsCount=localOperationsCount;
  this.remoteOperationsCount=remoteOperationsCount;
  this.splitUp=false;
  this.splitUpRepresentation=new LinkedList();
  if (super.getLengthOfReplacedText() == 0) {
    trafoStrat=ColaInsertionTransformationStategy.getInstance();
  }
 else {
    if (super.getText().length() == 0) {
      trafoStrat=ColaDeletionTransformationStrategy.getInstance();
    }
 else {
      trafoStrat=ColaReplacementTransformationStategy.getInstance();
    }
  }
}","public ColaDocumentChangeMessage(DocumentChangeMessage msg,long localOperationsCount,long remoteOperationsCount){
  super(msg.getOffset(),msg.getLengthOfReplacedText(),msg.getText());
  this.localOperationsCount=localOperationsCount;
  this.remoteOperationsCount=remoteOperationsCount;
  this.splitUp=false;
  this.splitUpRepresentation=new LinkedList();
  if (super.getLengthOfReplacedText() == 0) {
    transformType=0;
  }
 else {
    if (super.getText().length() == 0) {
      transformType=1;
    }
 else {
      transformType=2;
    }
  }
}",0.8368678629690048
94606,"public boolean isDeletion(){
  return (this.trafoStrat instanceof ColaDeletionTransformationStrategy);
}","public boolean isDeletion(){
  return (transformType == 1);
}",0.6424242424242425
94607,"public boolean isReplacement(){
  return (this.trafoStrat instanceof ColaReplacementTransformationStategy);
}","public boolean isReplacement(){
  return (transformType == 2);
}",0.6473988439306358
94608,"public boolean isInsertion(){
  return (this.trafoStrat instanceof ColaInsertionTransformationStategy);
}","public boolean isInsertion(){
  return (transformType == 0);
}",0.6467065868263473
94609,"public ColaDocumentChangeMessage transformAgainst(ColaDocumentChangeMessage localMsg,boolean localMsgHighPrio){
  Trace.entering(Activator.PLUGIN_ID,SyncDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",localMsg);
  final ColaDocumentChangeMessage transformedMsg=trafoStrat.getOperationalTransform(this,localMsg,localMsgHighPrio);
  Trace.entering(Activator.PLUGIN_ID,SyncDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",transformedMsg);
  return transformedMsg;
}","public ColaDocumentChangeMessage transformAgainst(ColaDocumentChangeMessage localMsg,boolean localMsgHighPrio){
  Trace.entering(Activator.PLUGIN_ID,SyncDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",localMsg);
  final ColaDocumentChangeMessage transformedMsg=getTransformationStrategy().getOperationalTransform(this,localMsg,localMsgHighPrio);
  Trace.entering(Activator.PLUGIN_ID,SyncDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"",transformedMsg);
  return transformedMsg;
}",0.9630369630369632
94610,"protected XMPPID createIDFromName(String uname){
  try {
    if (uname.indexOf('@') == -1) {
      return new XMPPID(container.getConnectNamespace(),""String_Node_Str"" + ""String_Node_Str"" + uname);
    }
    return new XMPPID(container.getConnectNamespace(),uname);
  }
 catch (  final Exception e) {
    traceStack(""String_Node_Str"",e);
    return null;
  }
}","protected XMPPID createIDFromName(String uname){
  try {
    if (uname.lastIndexOf('@') == -1) {
      return new XMPPID(container.getConnectNamespace(),""String_Node_Str"" + ""String_Node_Str"" + uname);
    }
    return new XMPPID(container.getConnectNamespace(),uname);
  }
 catch (  final Exception e) {
    traceStack(""String_Node_Str"",e);
    return null;
  }
}",0.9916897506925209
94611,"public synchronized Object connect(ID remote,Object data,int timeout) throws ECFException {
  if (connection != null)   throw new ECFException(""String_Node_Str"");
  if (timeout > 0)   SmackConfiguration.setPacketReplyTimeout(timeout);
  Roster.setDefaultSubscriptionMode(Roster.SUBSCRIPTION_MANUAL);
  final XMPPID jabberURI=getXMPPID(remote);
  final String username=jabberURI.getUsername();
  serverName=jabberURI.getHostname();
  serverPort=jabberURI.getPort();
  serverResource=jabberURI.getResourceName();
  if (serverResource == null || serverResource.equals(XMPPID.PATH_DELIMITER)) {
    serverResource=getClientIdentifier();
    jabberURI.setResourceName(serverResource);
  }
  try {
    if (google) {
      if (secure) {
        if (serverPort == -1) {
          serverPort=XMPPS_DEFAULT_PORT;
        }
        connection=new SSLXMPPConnection(GOOGLE_TALK_HOST,serverPort,jabberURI.getHostname());
      }
 else {
        if (serverPort == -1) {
          serverPort=XMPP_DEFAULT_PORT;
        }
        connection=new XMPPConnection(GOOGLE_TALK_HOST,serverPort,jabberURI.getHostname());
      }
    }
 else     if (serverPort == -1) {
      if (secure) {
        connection=new SSLXMPPConnection(serverName);
      }
 else {
        connection=new XMPPConnection(serverName);
      }
    }
 else {
      if (secure) {
        connection=new SSLXMPPConnection(serverName,serverPort);
      }
 else {
        connection=new XMPPConnection(serverName,serverPort);
      }
    }
    connection.addPacketListener(packetListener,null);
    connection.addConnectionListener(connectionListener);
    connection.login(username,(String)data,serverResource);
    isConnected=true;
  }
 catch (  final XMPPException e) {
    if (e.getMessage().equals(""String_Node_Str""))     throw new ContainerAuthenticationException(""String_Node_Str"",e);
    throw new ContainerConnectException(e.getLocalizedMessage(),e);
  }
  return null;
}","public synchronized Object connect(ID remote,Object data,int timeout) throws ECFException {
  if (connection != null)   throw new ECFException(""String_Node_Str"");
  if (timeout > 0)   SmackConfiguration.setPacketReplyTimeout(timeout);
  Roster.setDefaultSubscriptionMode(Roster.SUBSCRIPTION_MANUAL);
  final XMPPID jabberURI=getXMPPID(remote);
  final String username=jabberURI.getNodename();
  serverName=jabberURI.getHostname();
  serverPort=jabberURI.getPort();
  serverResource=jabberURI.getResourceName();
  if (serverResource == null || serverResource.equals(XMPPID.PATH_DELIMITER)) {
    serverResource=getClientIdentifier();
    jabberURI.setResourceName(serverResource);
  }
  try {
    if (google) {
      if (secure) {
        if (serverPort == -1) {
          serverPort=XMPPS_DEFAULT_PORT;
        }
        connection=new SSLXMPPConnection(GOOGLE_TALK_HOST,serverPort,jabberURI.getHostname());
      }
 else {
        if (serverPort == -1) {
          serverPort=XMPP_DEFAULT_PORT;
        }
        connection=new XMPPConnection(GOOGLE_TALK_HOST,serverPort,jabberURI.getHostname());
      }
    }
 else     if (serverPort == -1) {
      if (secure) {
        connection=new SSLXMPPConnection(serverName);
      }
 else {
        connection=new XMPPConnection(serverName);
      }
    }
 else {
      if (secure) {
        connection=new SSLXMPPConnection(serverName,serverPort);
      }
 else {
        connection=new XMPPConnection(serverName,serverPort);
      }
    }
    connection.addPacketListener(packetListener,null);
    connection.addConnectionListener(connectionListener);
    connection.login(username,(String)data,serverResource);
    isConnected=true;
  }
 catch (  final XMPPException e) {
    if (e.getMessage().equals(""String_Node_Str""))     throw new ContainerAuthenticationException(""String_Node_Str"",e);
    throw new ContainerConnectException(e.getLocalizedMessage(),e);
  }
  return null;
}",0.9979242345614946
94612,"public String getUsername(){
  return username;
}","public String getUsername(){
  return unfixEscapeInNode(username);
}",0.8376068376068376
94613,"public XMPPID(Namespace namespace,String unamehost) throws URISyntaxException {
  super(namespace);
  unamehost=fixEscape(unamehost);
  if (unamehost == null)   throw new URISyntaxException(unamehost,Messages.XMPPID_EXCEPTION_XMPPID_USERNAME_NOT_NULL);
  int atIndex=unamehost.lastIndexOf(USER_HOST_DELIMITER);
  if (atIndex == -1)   throw new URISyntaxException(unamehost,Messages.XMPPID_EXCEPTION_HOST_PORT_NOT_VALID);
  username=unamehost.substring(0,atIndex);
  final String remainder=unamehost.substring(atIndex + 1);
  atIndex=remainder.lastIndexOf(PORT_DELIMITER);
  if (atIndex != -1) {
    try {
      final int slashLoc=remainder.indexOf(PATH_DELIMITER);
      if (slashLoc != -1)       port=Integer.parseInt(remainder.substring(atIndex + 1,slashLoc));
 else       port=Integer.parseInt(remainder.substring(atIndex + 1));
    }
 catch (    final NumberFormatException e) {
      throw new URISyntaxException(unamehost,Messages.XMPPID_EXCEPTION_INVALID_PORT);
    }
    hostname=remainder.substring(0,atIndex);
  }
  atIndex=remainder.indexOf(PATH_DELIMITER);
  if (atIndex != -1) {
    if (hostname == null)     hostname=remainder.substring(0,atIndex);
    resourcename=PATH_DELIMITER + remainder.substring(atIndex + 1);
  }
 else {
    resourcename=PATH_DELIMITER + ""String_Node_Str"";
  }
  if (hostname == null)   hostname=remainder;
  uri=new URI(namespace.getScheme(),username,hostname,port,resourcename,null,null);
}","public XMPPID(Namespace namespace,String unamehost) throws URISyntaxException {
  super(namespace);
  unamehost=fixPercentEscape(unamehost);
  if (unamehost == null)   throw new URISyntaxException(unamehost,Messages.XMPPID_EXCEPTION_XMPPID_USERNAME_NOT_NULL);
  int atIndex=unamehost.lastIndexOf(USER_HOST_DELIMITER);
  if (atIndex == -1)   throw new URISyntaxException(unamehost,Messages.XMPPID_EXCEPTION_HOST_PORT_NOT_VALID);
  username=fixEscapeInNode(unamehost.substring(0,atIndex));
  final String remainder=unamehost.substring(atIndex + 1);
  atIndex=remainder.lastIndexOf(PORT_DELIMITER);
  if (atIndex != -1) {
    try {
      final int slashLoc=remainder.indexOf(PATH_DELIMITER);
      if (slashLoc != -1)       port=Integer.parseInt(remainder.substring(atIndex + 1,slashLoc));
 else       port=Integer.parseInt(remainder.substring(atIndex + 1));
    }
 catch (    final NumberFormatException e) {
      throw new URISyntaxException(unamehost,Messages.XMPPID_EXCEPTION_INVALID_PORT);
    }
    hostname=remainder.substring(0,atIndex);
  }
  atIndex=remainder.indexOf(PATH_DELIMITER);
  if (atIndex != -1) {
    if (hostname == null)     hostname=remainder.substring(0,atIndex);
    resourcename=PATH_DELIMITER + remainder.substring(atIndex + 1);
  }
 else {
    resourcename=PATH_DELIMITER + ""String_Node_Str"";
  }
  if (hostname == null)   hostname=remainder;
  uri=new URI(namespace.getScheme(),username,hostname,port,resourcename,null,null);
}",0.9916839916839916
94614,"public void stop(BundleContext ctxt) throws Exception {
  this.context=null;
  plugin=null;
}","public void stop(BundleContext ctxt) throws Exception {
  if (sslSocketFactoryModifier != null) {
    sslSocketFactoryModifier.dispose();
    sslSocketFactoryModifier=null;
  }
  if (sslSocketFactoryTracker != null) {
    sslSocketFactoryTracker.close();
  }
  if (logServiceTracker != null) {
    logServiceTracker.close();
  }
  this.context=null;
  plugin=null;
}",0.4052287581699346
94615,"public void start(BundleContext ctxt) throws Exception {
  plugin=this;
  this.context=ctxt;
}","public void start(BundleContext ctxt) throws Exception {
  plugin=this;
  this.context=ctxt;
  try {
    Class socketFactoryModifierClass=Class.forName(""String_Node_Str"");
    sslSocketFactoryModifier=(ISSLSocketFactoryModifier)socketFactoryModifierClass.newInstance();
  }
 catch (  ClassNotFoundException e) {
  }
catch (  Throwable t) {
    log(new Status(IStatus.ERROR,PLUGIN_ID,""String_Node_Str"",t));
  }
}",0.3722772277227723
94616,"public Socket createSocket(String remoteHost,int remotePort,InetAddress clientHost,int clientPort,HttpConnectionParams params) throws IOException, UnknownHostException, ConnectTimeoutException {
  final SSLSocketFactory factory=getSSLSocketFactory();
  if (factory == null)   throw new IOException(""String_Node_Str"");
  if (params == null || params.getConnectionTimeout() == 0)   return factory.createSocket(remoteHost,remotePort,clientHost,clientPort);
  if (proxy != null && !Proxy.NO_PROXY.equals(proxy)) {
    final ProxyClient proxyClient=new ProxyClient();
    final ProxyAddress address=proxy.getAddress();
    proxyClient.getHostConfiguration().setProxy(address.getHostName(),address.getPort());
    proxyClient.getHostConfiguration().setHost(remoteHost,remotePort);
    final String proxyUsername=proxy.getUsername();
    final String proxyPassword=proxy.getPassword();
    if (proxyUsername != null && !proxyUsername.equals(""String_Node_Str"")) {
      final Credentials credentials=new UsernamePasswordCredentials(proxyUsername,proxyPassword);
      final AuthScope proxyAuthScope=new AuthScope(address.getHostName(),address.getPort(),AuthScope.ANY_REALM);
      proxyClient.getState().setProxyCredentials(proxyAuthScope,credentials);
    }
    final ProxyClient.ConnectResponse response=proxyClient.connect();
    if (response.getSocket() != null) {
      final Socket sslsocket=factory.createSocket(response.getSocket(),remoteHost,remotePort,true);
      return sslsocket;
    }
  }
  final Socket socket=factory.createSocket();
  socket.bind(new InetSocketAddress(clientHost,clientPort));
  socket.connect(new InetSocketAddress(remoteHost,remotePort),params.getConnectionTimeout());
  return socket;
}","public Socket createSocket(String remoteHost,int remotePort,InetAddress clientHost,int clientPort,HttpConnectionParams params) throws IOException, UnknownHostException, ConnectTimeoutException {
  final SSLSocketFactory factory=Activator.getDefault().getSSLSocketFactory();
  if (factory == null)   throw new IOException(""String_Node_Str"");
  if (params == null || params.getConnectionTimeout() == 0)   return factory.createSocket(remoteHost,remotePort,clientHost,clientPort);
  if (proxy != null && !Proxy.NO_PROXY.equals(proxy)) {
    final ProxyClient proxyClient=new ProxyClient();
    final ProxyAddress address=proxy.getAddress();
    proxyClient.getHostConfiguration().setProxy(address.getHostName(),address.getPort());
    proxyClient.getHostConfiguration().setHost(remoteHost,remotePort);
    final String proxyUsername=proxy.getUsername();
    final String proxyPassword=proxy.getPassword();
    if (proxyUsername != null && !proxyUsername.equals(""String_Node_Str"")) {
      final Credentials credentials=new UsernamePasswordCredentials(proxyUsername,proxyPassword);
      final AuthScope proxyAuthScope=new AuthScope(address.getHostName(),address.getPort(),AuthScope.ANY_REALM);
      proxyClient.getState().setProxyCredentials(proxyAuthScope,credentials);
    }
    final ProxyClient.ConnectResponse response=proxyClient.connect();
    if (response.getSocket() != null) {
      final Socket sslsocket=factory.createSocket(response.getSocket(),remoteHost,remotePort,true);
      return sslsocket;
    }
  }
  final Socket socket=factory.createSocket(remoteHost,remotePort,clientHost,clientPort);
  return socket;
}",0.9296196466007788
94617,"public void dispose(){
  if (sslSocketFactoryTracker != null) {
    sslSocketFactoryTracker.close();
    sslSocketFactoryTracker=null;
  }
  this.context=null;
  this.proxy=null;
}","public void dispose(){
  this.proxy=null;
  Protocol.unregisterProtocol(""String_Node_Str"");
}",0.315018315018315
94618,"ChatComposite(LineChatClientView view,Composite parent,TableViewer table,String initText,ChatWindow chatWindow){
  super(parent,SWT.NONE);
  this.view=view;
  this.chatWindow=chatWindow;
  setLayout(new FillLayout());
  meColor=colorFromRGBString(ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_ME_TEXT_COLOR));
  otherColor=colorFromRGBString(ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_OTHER_TEXT_COLOR));
  systemColor=colorFromRGBString(ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_SYSTEM_TEXT_COLOR));
  ClientPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new ColorPropertyChangeListener());
  this.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      if (meColor != null) {
        meColor.dispose();
      }
      if (otherColor != null) {
        otherColor.dispose();
      }
      if (systemColor != null) {
        systemColor.dispose();
      }
    }
  }
);
  final SashForm sf=new SashForm(this,SWT.NORMAL);
  sf.setLayout(new FillLayout());
  sf.setOrientation(SWT.VERTICAL);
  tableView=table;
  textoutput=createStyledTextWidget(sf);
  textoutput.setLayoutData(new GridData(SWT.FILL));
  final String fontName=ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_CHAT_FONT);
  if (!(fontName == null) && !(fontName.equals(""String_Node_Str""))) {
    final FontRegistry fr=ClientPlugin.getDefault().getFontRegistry();
    final FontData[] newFont={new FontData(fontName)};
    fr.put(CHAT_OUTPUT_FONT,newFont);
    textoutput.setFont(fr.get(CHAT_OUTPUT_FONT));
  }
  ClientPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new FontPropertyChangeListener());
  textoutput.append(initText);
  textinput=new Text(sf,SWT.SINGLE | SWT.BORDER);
  textinput.setText(TEXT_INPUT_INIT);
  textinput.setLayoutData(new GridData(SWT.FILL));
  textinput.selectAll();
  textinput.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent evt){
      handleKeyPressed(evt);
    }
    public void keyReleased(    KeyEvent evt){
      handleKeyReleased(evt);
    }
  }
);
  textinput.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
      final String t=textinput.getText();
      if (t.equals(TEXT_INPUT_INIT)) {
        textinput.selectAll();
      }
    }
    public void focusLost(    FocusEvent e){
    }
  }
);
  textinput.addMouseListener(new MouseListener(){
    public void mouseDoubleClick(    MouseEvent e){
    }
    public void mouseDown(    MouseEvent e){
    }
    public void mouseUp(    MouseEvent e){
      final String t=textinput.getText();
      if (t.equals(TEXT_INPUT_INIT)) {
        textinput.selectAll();
      }
    }
  }
);
  textinput.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (typing && textinput.getText().trim().length() == 0)       typing=false;
 else       if (!typing) {
        typing=true;
        ChatComposite.this.view.lch.sendStartedTyping();
      }
    }
  }
);
  sf.setWeights(new int[]{90,10});
  makeActions();
  hookContextMenu();
  contributeToActionBars();
  initializeDropTargets();
}","ChatComposite(LineChatClientView view,Composite parent,TableViewer table,String initText,ChatWindow chatWindow){
  super(parent,SWT.NONE);
  this.view=view;
  this.chatWindow=chatWindow;
  setLayout(new FillLayout());
  meColor=colorFromRGBString(ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_ME_TEXT_COLOR));
  otherColor=colorFromRGBString(ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_OTHER_TEXT_COLOR));
  systemColor=colorFromRGBString(ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_SYSTEM_TEXT_COLOR));
  ClientPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new ColorPropertyChangeListener());
  this.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      if (meColor != null) {
        meColor.dispose();
      }
      if (otherColor != null) {
        otherColor.dispose();
      }
      if (systemColor != null) {
        systemColor.dispose();
      }
    }
  }
);
  final Composite chattingComposite=new Composite(this,SWT.NONE);
  GridLayout layout=new GridLayout(1,true);
  layout.marginHeight=0;
  layout.marginWidth=0;
  chattingComposite.setLayout(layout);
  tableView=table;
  textoutput=createStyledTextWidget(chattingComposite);
  textoutput.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  final String fontName=ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_CHAT_FONT);
  if (!(fontName == null) && !(fontName.equals(""String_Node_Str""))) {
    final FontRegistry fr=ClientPlugin.getDefault().getFontRegistry();
    final FontData[] newFont={new FontData(fontName)};
    fr.put(CHAT_OUTPUT_FONT,newFont);
    textoutput.setFont(fr.get(CHAT_OUTPUT_FONT));
  }
  ClientPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new FontPropertyChangeListener());
  textoutput.append(initText);
  textinput=new Text(chattingComposite,SWT.SINGLE | SWT.BORDER);
  textinput.setText(TEXT_INPUT_INIT);
  GridData gd=new GridData(SWT.FILL,SWT.CENTER,true,false);
  GC gc=new GC(textinput);
  gc.setFont(textinput.getFont());
  FontMetrics fontMetrics=gc.getFontMetrics();
  gc.dispose();
  gd.heightHint=fontMetrics.getHeight() * 2;
  textinput.setLayoutData(gd);
  textinput.selectAll();
  textinput.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent evt){
      handleKeyPressed(evt);
    }
    public void keyReleased(    KeyEvent evt){
      handleKeyReleased(evt);
    }
  }
);
  textinput.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
      final String t=textinput.getText();
      if (t.equals(TEXT_INPUT_INIT)) {
        textinput.selectAll();
      }
    }
    public void focusLost(    FocusEvent e){
    }
  }
);
  textinput.addMouseListener(new MouseListener(){
    public void mouseDoubleClick(    MouseEvent e){
    }
    public void mouseDown(    MouseEvent e){
    }
    public void mouseUp(    MouseEvent e){
      final String t=textinput.getText();
      if (t.equals(TEXT_INPUT_INIT)) {
        textinput.selectAll();
      }
    }
  }
);
  textinput.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (typing && textinput.getText().trim().length() == 0)       typing=false;
 else       if (!typing) {
        typing=true;
        ChatComposite.this.view.lch.sendStartedTyping();
      }
    }
  }
);
  makeActions();
  hookContextMenu();
  contributeToActionBars();
  initializeDropTargets();
}",0.8895109015910431
94619,"public void handleEvent(final IContainerEvent evt){
  if (evt instanceof ISharedObjectActivatedEvent) {
    final ISharedObjectActivatedEvent soae=(ISharedObjectActivatedEvent)evt;
    fireChannelContainerListeners(new IChannelContainerChannelActivatedEvent(){
      public ID getChannelID(){
        return soae.getActivatedID();
      }
      public ID getChannelContainerID(){
        return soae.getLocalContainerID();
      }
      public String toString(){
        StringBuffer buf=new StringBuffer(""String_Node_Str"");
        buf.append(""String_Node_Str"").append(soae.getActivatedID()).append(""String_Node_Str"");
        buf.append(""String_Node_Str"").append(soae.getLocalContainerID()).append(""String_Node_Str"");
        return buf.toString();
      }
    }
);
  }
 else   if (evt instanceof ISharedObjectDeactivatedEvent) {
    final ISharedObjectDeactivatedEvent sode=(ISharedObjectDeactivatedEvent)evt;
    fireChannelContainerListeners(new IChannelContainerChannelDeactivatedEvent(){
      public ID getChannelID(){
        return sode.getDeactivatedID();
      }
      public ID getChannelContainerID(){
        return sode.getLocalContainerID();
      }
      public String toString(){
        StringBuffer buf=new StringBuffer(""String_Node_Str"");
        buf.append(""String_Node_Str"").append(sode.getDeactivatedID()).append(""String_Node_Str"");
        buf.append(""String_Node_Str"").append(sode.getLocalContainerID()).append(""String_Node_Str"");
        return buf.toString();
      }
    }
);
  }
}","public void handleEvent(final IContainerEvent evt){
  if (evt instanceof ISharedObjectActivatedEvent) {
    final ISharedObjectActivatedEvent soae=(ISharedObjectActivatedEvent)evt;
    fireChannelContainerListeners(new IChannelContainerChannelActivatedEvent(){
      public ID getChannelID(){
        return soae.getActivatedID();
      }
      public ID getChannelContainerID(){
        return soae.getLocalContainerID();
      }
      public String toString(){
        final StringBuffer buf=new StringBuffer(""String_Node_Str"");
        buf.append(""String_Node_Str"").append(soae.getActivatedID()).append(""String_Node_Str"");
        buf.append(""String_Node_Str"").append(soae.getLocalContainerID()).append(""String_Node_Str"");
        return buf.toString();
      }
    }
);
  }
 else   if (evt instanceof ISharedObjectDeactivatedEvent) {
    final ISharedObjectDeactivatedEvent sode=(ISharedObjectDeactivatedEvent)evt;
    fireChannelContainerListeners(new IChannelContainerChannelDeactivatedEvent(){
      public ID getChannelID(){
        return sode.getDeactivatedID();
      }
      public ID getChannelContainerID(){
        return sode.getLocalContainerID();
      }
      public String toString(){
        final StringBuffer buf=new StringBuffer(""String_Node_Str"");
        buf.append(""String_Node_Str"").append(sode.getDeactivatedID()).append(""String_Node_Str"");
        buf.append(""String_Node_Str"").append(sode.getLocalContainerID()).append(""String_Node_Str"");
        return buf.toString();
      }
    }
);
  }
}",0.996044825313118
94620,"private ISharedObject createSharedObject(SharedObjectTypeDescription sotypedesc,IChannelListener listener) throws SharedObjectCreateException {
  Class clazz;
  try {
    clazz=Class.forName(sotypedesc.getClassName());
  }
 catch (  ClassNotFoundException e) {
    throw new SharedObjectCreateException(""String_Node_Str"" + sotypedesc.getClassName(),e);
  }
  Constructor cons=null;
  try {
    cons=clazz.getDeclaredConstructor(new Class[]{IChannelListener.class});
  }
 catch (  NoSuchMethodException e) {
    throw new SharedObjectCreateException(""String_Node_Str"" + sotypedesc.getClassName(),e);
  }
  ISharedObject so=null;
  try {
    so=(ISharedObject)cons.newInstance(new Object[]{listener});
  }
 catch (  Exception e) {
    throw new SharedObjectCreateException(""String_Node_Str"" + sotypedesc.getClassName(),e);
  }
  return so;
}","private ISharedObject createSharedObject(SharedObjectTypeDescription sotypedesc,IChannelListener listener) throws SharedObjectCreateException {
  Class clazz;
  try {
    clazz=Class.forName(sotypedesc.getClassName());
  }
 catch (  final ClassNotFoundException e) {
    throw new SharedObjectCreateException(""String_Node_Str"" + sotypedesc.getClassName(),e);
  }
  Constructor cons=null;
  try {
    cons=clazz.getDeclaredConstructor(new Class[]{IChannelListener.class});
  }
 catch (  final NoSuchMethodException e) {
    throw new SharedObjectCreateException(""String_Node_Str"" + sotypedesc.getClassName(),e);
  }
  ISharedObject so=null;
  try {
    so=(ISharedObject)cons.newInstance(new Object[]{listener});
  }
 catch (  final Exception e) {
    throw new SharedObjectCreateException(""String_Node_Str"" + sotypedesc.getClassName(),e);
  }
  return so;
}",0.9893867924528302
94621,"public static final void main(String[] args) throws Exception {
  String targetURL=""String_Node_Str"";
  if (args.length > 0) {
    targetURL=args[0];
  }
  ContainerTypeDescription contd=new ContainerTypeDescription(RssContainerInstantiator.class.getName(),RssContainerInstantiator.class.getName(),null);
  ContainerFactory.getDefault().addDescription(contd);
  RssClientSOContainer container=new RssClientSOContainer();
  ID serverID=IDFactory.getDefault().createStringID(targetURL);
  container.connect(serverID,null);
  IMergeableChannelContainerAdapter channelContainer=(IMergeableChannelContainerAdapter)container.getAdapter(IMergeableChannelContainerAdapter.class);
  final IChannelListener listener=new IChannelListener(){
    public void handleChannelEvent(    IChannelEvent event){
      System.out.println(""String_Node_Str"" + event + ""String_Node_Str"");
    }
  }
;
  ID channelID=IDFactory.getDefault().createStringID(""String_Node_Str"");
  IMergeableChannel channel=channelContainer.createMergeableChannel(channelID,listener,new HashMap());
  if (channel instanceof FeedSharedObject) {
    RssFeed remoteFeed=((FeedSharedObject)channel).getFeed();
    File feedFile=new File(""String_Node_Str"");
    RssFeed localFeed=RssFeed.load(feedFile);
    if (localFeed == null) {
      localFeed=new RssFeed(remoteFeed.getTitle(),remoteFeed.getLink(),remoteFeed.getDescription());
      localFeed.setVersion(RssVersion.RSS_2_0);
    }
    localFeed.merge(remoteFeed);
    localFeed.addItem(new RssItem(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    localFeed.save(feedFile);
    java.util.List items=localFeed.getItems();
    for (int i=0; i < items.size(); i++) {
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ ((RssItem)items.get(i)).getTitle());
    }
  }
  channelContainer.removeChannel(channelID);
  container.disconnect();
  container.dispose();
  System.out.println(""String_Node_Str"");
}","public static final void main(String[] args) throws Exception {
  String targetURL=""String_Node_Str"";
  if (args.length > 0) {
    targetURL=args[0];
  }
  final ContainerTypeDescription contd=new ContainerTypeDescription(RssContainerInstantiator.class.getName(),RssContainerInstantiator.class.getName(),null);
  ContainerFactory.getDefault().addDescription(contd);
  final RssClientSOContainer container=new RssClientSOContainer();
  final ID serverID=IDFactory.getDefault().createStringID(targetURL);
  container.connect(serverID,null);
  final IMergeableChannelContainerAdapter channelContainer=(IMergeableChannelContainerAdapter)container.getAdapter(IMergeableChannelContainerAdapter.class);
  final IChannelListener listener=new IChannelListener(){
    public void handleChannelEvent(    IChannelEvent event){
      System.out.println(""String_Node_Str"" + event + ""String_Node_Str"");
    }
  }
;
  final ID channelID=IDFactory.getDefault().createStringID(""String_Node_Str"");
  final IMergeableChannel channel=channelContainer.createMergeableChannel(channelID,listener,new HashMap());
  if (channel instanceof FeedSharedObject) {
    final RssFeed remoteFeed=((FeedSharedObject)channel).getFeed();
    final File feedFile=new File(""String_Node_Str"");
    RssFeed localFeed=RssFeed.load(feedFile);
    if (localFeed == null) {
      localFeed=new RssFeed(remoteFeed.getTitle(),remoteFeed.getLink(),remoteFeed.getDescription());
      localFeed.setVersion(RssVersion.RSS_2_0);
    }
    localFeed.merge(remoteFeed);
    localFeed.addItem(new RssItem(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    localFeed.save(feedFile);
    final java.util.List items=localFeed.getItems();
    for (int i=0; i < items.size(); i++) {
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ ((RssItem)items.get(i)).getTitle());
    }
  }
  channelContainer.removeChannel(channelID);
  container.disconnect();
  container.dispose();
  System.out.println(""String_Node_Str"");
}",0.9862104187946884
94622,"public IMergeableChannel createChannel(IChannelConfig newChannelConfig) throws ECFException {
  IChannelListener listener=newChannelConfig.getListener();
  SharedObjectDescription sodesc=new SharedObjectDescription(FeedSharedObject.class,IDFactory.getDefault().createGUID(),new HashMap());
  SharedObjectTypeDescription sotypedesc=sodesc.getTypeDescription();
  ISharedObject sharedObject=null;
  if (sotypedesc.getName() != null) {
    sharedObject=SharedObjectFactory.getDefault().createSharedObject(sotypedesc,new Object[]{listener});
  }
 else {
    sharedObject=createSharedObject(sotypedesc,listener);
  }
  IMergeableChannel channel=(IMergeableChannel)sharedObject.getAdapter(IMergeableChannel.class);
  if (channel == null) {
    throw new SharedObjectCreateException(""String_Node_Str"" + channel + ""String_Node_Str"");
  }
  ID newID=sodesc.getID();
  if (newID == null) {
    newID=IDFactory.getDefault().createGUID();
  }
  Map properties=sodesc.getProperties();
  if (properties == null) {
    properties=new HashMap();
  }
  getSharedObjectManager().addSharedObject(newID,sharedObject,properties);
  return channel;
}","public IMergeableChannel createChannel(IChannelConfig newChannelConfig) throws ECFException {
  final IChannelListener listener=newChannelConfig.getListener();
  final SharedObjectDescription sodesc=new SharedObjectDescription(FeedSharedObject.class,IDFactory.getDefault().createGUID(),new HashMap());
  final SharedObjectTypeDescription sotypedesc=sodesc.getTypeDescription();
  ISharedObject sharedObject=null;
  if (sotypedesc.getName() != null) {
    sharedObject=SharedObjectFactory.getDefault().createSharedObject(sotypedesc,new Object[]{listener});
  }
 else {
    sharedObject=createSharedObject(sotypedesc,listener);
  }
  final IMergeableChannel channel=(IMergeableChannel)sharedObject.getAdapter(IMergeableChannel.class);
  if (channel == null) {
    throw new SharedObjectCreateException(""String_Node_Str"" + channel + ""String_Node_Str"");
  }
  ID newID=sodesc.getID();
  if (newID == null) {
    newID=IDFactory.getDefault().createGUID();
  }
  Map properties=sodesc.getProperties();
  if (properties == null) {
    properties=new HashMap();
  }
  getSharedObjectManager().addSharedObject(newID,sharedObject,properties);
  return channel;
}",0.9894736842105264
94623,"protected void fireChannelContainerListeners(IChannelContainerEvent event){
synchronized (channelContainerListener) {
    for (Iterator i=channelContainerListener.iterator(); i.hasNext(); ) {
      IChannelContainerListener l=(IChannelContainerListener)i.next();
      if (l != null)       l.handleChannelContainerEvent(event);
    }
  }
}","protected void fireChannelContainerListeners(IChannelContainerEvent event){
synchronized (channelContainerListener) {
    for (final Iterator i=channelContainerListener.iterator(); i.hasNext(); ) {
      final IChannelContainerListener l=(IChannelContainerListener)i.next();
      if (l != null)       l.handleChannelContainerEvent(event);
    }
  }
}",0.982608695652174
94624,"protected ISynchAsynchConnection createConnection(ID remoteSpace,Object data) throws ConnectionCreateException {
  trace(""String_Node_Str"" + remoteSpace + ""String_Node_Str""+ data);
  ISynchAsynchConnection conn=new HttpClient(receiver);
  return conn;
}","protected ISynchAsynchConnection createConnection(ID remoteSpace,Object data) throws ConnectionCreateException {
  trace(""String_Node_Str"" + remoteSpace + ""String_Node_Str""+ data);
  final ISynchAsynchConnection conn=new HttpClient(receiver);
  return conn;
}",0.98828125
94625,"public RssFeed receiveFeed(String feedPath) throws IOException {
  RssFeed feed=null;
  ISynchAsynchConnection connection=getConnection();
synchronized (connection) {
    if (connection.isConnected()) {
      try {
        feed=FeedParser.parse((byte[])connection.sendSynch(null,feedPath.getBytes()));
      }
 catch (      ParseException e) {
        throw new IOException(e.getMessage());
      }
    }
  }
  return feed;
}","public RssFeed receiveFeed(String feedPath) throws IOException {
  RssFeed feed=null;
  final ISynchAsynchConnection connection=getConnection();
synchronized (connection) {
    if (connection.isConnected()) {
      try {
        feed=FeedParser.parse((byte[])connection.sendSynch(null,feedPath.getBytes()));
      }
 catch (      final ParseException e) {
        throw new IOException(e.getMessage());
      }
    }
  }
  return feed;
}",0.9860788863109048
94626,"public String toString(){
  StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(sode.getDeactivatedID()).append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(sode.getLocalContainerID()).append(""String_Node_Str"");
  return buf.toString();
}","public String toString(){
  final StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(sode.getDeactivatedID()).append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(sode.getLocalContainerID()).append(""String_Node_Str"");
  return buf.toString();
}",0.9898648648648648
94627,"protected void runRequest() throws Exception {
  setupProxies();
  setupAuthentication();
  URLConnection urlConnection=directoryOrFile.openConnection();
  IURLConnectionModifier connectionModifier=Activator.getDefault().getURLConnectionModifier();
  if (connectionModifier != null) {
    connectionModifier.setSocketFactoryForConnection(urlConnection);
  }
  InputStream ins=urlConnection.getInputStream();
  ins.close();
  remoteFiles=new IRemoteFile[1];
  remoteFiles[0]=new URLRemoteFile(urlConnection,fileID);
}","protected void runRequest() throws Exception {
  setupProxies();
  setupAuthentication();
  URLConnection urlConnection=directoryOrFile.openConnection();
  if (directoryOrFile.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    urlConnection.setUseCaches(false);
  }
  IURLConnectionModifier connectionModifier=Activator.getDefault().getURLConnectionModifier();
  if (connectionModifier != null) {
    connectionModifier.setSocketFactoryForConnection(urlConnection);
  }
  InputStream ins=urlConnection.getInputStream();
  ins.close();
  remoteFiles=new IRemoteFile[1];
  remoteFiles[0]=new URLRemoteFile(urlConnection,fileID);
}",0.8973913043478261
94628,"protected void openStreams() throws IncomingFileTransferException {
  try {
    setupAuthentication();
    connect();
    setRequestHeaderValues();
    setInputStream(urlConnection.getInputStream());
    getResponseHeaderValues();
    fireReceiveStartEvent();
  }
 catch (  final Exception e) {
    throw new IncomingFileTransferException(NLS.bind(Messages.UrlConnectionRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,getRemoteFileURL().toString()),e,getResponseCode());
  }
}","protected void openStreams() throws IncomingFileTransferException {
  try {
    setupAuthentication();
    connect();
    setRequestHeaderValues();
    setInputStream(urlConnection.getInputStream());
    getResponseHeaderValues();
    fireReceiveStartEvent();
  }
 catch (  final Exception e) {
    IncomingFileTransferException except=new IncomingFileTransferException(NLS.bind(Messages.UrlConnectionRetrieveFileTransfer_EXCEPTION_COULD_NOT_CONNECT,getRemoteFileURL().toString()),e,getResponseCode());
    hardClose();
    throw except;
  }
}",0.923529411764706
94629,"protected void connect() throws IOException {
  setupTimeouts();
  urlConnection=getRemoteFileURL().openConnection();
  IURLConnectionModifier connectionModifier=Activator.getDefault().getURLConnectionModifier();
  if (connectionModifier != null) {
    connectionModifier.setSocketFactoryForConnection(urlConnection);
  }
}","protected void connect() throws IOException {
  setupTimeouts();
  urlConnection=getRemoteFileURL().openConnection();
  if (getRemoteFileURL().getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    urlConnection.setUseCaches(false);
  }
  IURLConnectionModifier connectionModifier=Activator.getDefault().getURLConnectionModifier();
  if (connectionModifier != null) {
    connectionModifier.setSocketFactoryForConnection(urlConnection);
  }
}",0.8422425032594524
94630,"/** 
 * Start sharing an editor's contents between two participants. This will send a request to start sharing with the target identified by the <code>toID</code> parameter. The remote receiver will be displayed a message dialog, and given the option to start editor sharing, or not.
 * @param our the ID associated with the initiator. Must not be <code>null</code>.
 * @param fromName a name to present to the receiver. If <code>null, our.getName() will be used.
 * @param toID the ID of the intended receiver.  Must not be <code>null</code>.
 * @param fileName the file name of the file to be shared (with suffix type extension).  Must not be <code>null</code>.
 * @param editorPart the text editor currently showing the contents of this editor.  Must not be <code>null</code>.
 */
public void startShare(final IRosterManager rm,final ID our,final String fromName,final ID toID,final String fileName,final ITextEditor editorPart){
  Trace.entering(Activator.PLUGIN_ID,DocshareDebugOptions.METHODS_ENTERING,DocShare.class,""String_Node_Str"",new Object[]{our,fromName,toID,fileName,editorPart});
  Assert.isNotNull(our);
  final String fName=(fromName == null) ? our.getName() : fromName;
  Assert.isNotNull(toID);
  Assert.isNotNull(fName);
  Assert.isNotNull(editorPart);
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      try {
        final String content=editorPart.getDocumentProvider().getDocument(editorPart.getEditorInput()).get();
        send(toID,new StartMessage(our,fName,toID,content,fileName));
        localStartShare(rm,our,our,toID,editorPart);
      }
 catch (      final Exception e) {
        logError(Messages.DocShare_ERROR_STARTING_EDITOR_TITLE,e);
        showErrorToUser(Messages.DocShare_ERROR_STARTING_EDITOR_TITLE,NLS.bind(Messages.DocShare_ERROR_STARTING_EDITOR_MESSAGE,e.getLocalizedMessage()));
      }
    }
  }
);
  Trace.exiting(Activator.PLUGIN_ID,DocshareDebugOptions.METHODS_ENTERING,DocShare.class,""String_Node_Str"");
}","/** 
 * Start sharing an editor's contents between two participants. This will send a request to start sharing with the target identified by the <code>toID</code> parameter. The remote receiver will be displayed a message dialog, and given the option to start editor sharing, or not.
 * @param our the ID associated with the initiator. Must not be <code>null</code>.
 * @param fromName a name to present to the receiver. If <code>null, our.getName() will be used.
 * @param toID the ID of the intended receiver.  Must not be <code>null</code>.
 * @param fileName the file name of the file to be shared (with suffix type extension).  Must not be <code>null</code>.
 * @param editorPart the text editor currently showing the contents of this editor.  Must not be <code>null</code>.
 */
public void startShare(final ID our,final String fromName,final ID toID,final String fileName,final ITextEditor editorPart){
  Trace.entering(Activator.PLUGIN_ID,DocshareDebugOptions.METHODS_ENTERING,DocShare.class,""String_Node_Str"",new Object[]{our,fromName,toID,fileName,editorPart});
  Assert.isNotNull(our);
  final String fName=(fromName == null) ? our.getName() : fromName;
  Assert.isNotNull(toID);
  Assert.isNotNull(fName);
  Assert.isNotNull(editorPart);
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      try {
        final String content=editorPart.getDocumentProvider().getDocument(editorPart.getEditorInput()).get();
        send(toID,new StartMessage(our,fName,toID,content,fileName));
        localStartShare(getLocalRosterManager(),our,our,toID,editorPart);
      }
 catch (      final Exception e) {
        logError(Messages.DocShare_ERROR_STARTING_EDITOR_TITLE,e);
        showErrorToUser(Messages.DocShare_ERROR_STARTING_EDITOR_TITLE,NLS.bind(Messages.DocShare_ERROR_STARTING_EDITOR_MESSAGE,e.getLocalizedMessage()));
      }
    }
  }
);
  Trace.exiting(Activator.PLUGIN_ID,DocshareDebugOptions.METHODS_ENTERING,DocShare.class,""String_Node_Str"");
}",0.987641866330391
94631,"/** 
 * This method called by the   {@link #handleMessage(ID,byte[])} method ifthe type of the message received is a start message (sent by remote party via  {@link #startShare(IRosterManager,ID,String,ID,String,ITextEditor)}.
 * @param message the UpdateMessage received.
 */
protected void handleStartMessage(final StartMessage message){
  final ID senderID=message.getSenderID();
  Assert.isNotNull(senderID);
  final String senderUsername=message.getSenderUsername();
  Assert.isNotNull(senderUsername);
  final ID our=message.getReceiverID();
  Assert.isNotNull(our);
  final String filename=message.getFilename();
  Assert.isNotNull(filename);
  final String documentContent=message.getDocumentContent();
  Assert.isNotNull(documentContent);
synchronized (stateLock) {
    if (isSharing() || startContent != null) {
      sendStopMessage(senderID);
      return;
    }
    startContent=documentContent;
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      try {
        if (openReceiverDialog(senderID,senderUsername,filename)) {
          final DocShareEditorInput dsei=new DocShareEditorInput(getTempFileStore(senderUsername,filename,startContent),senderUsername,filename);
          final ITextEditor ep=(ITextEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(dsei,getEditorIdForFileName(filename));
          localStartShare(getLocalRosterManager(),our,senderID,our,ep);
        }
 else {
          sendStopMessage();
          localStopShare();
        }
      }
 catch (      final Exception e) {
        logError(Messages.DocShare_EXCEPTION_RECEIVING_MESSAGE_TITLE,e);
        showErrorToUser(Messages.DocShare_EXCEPTION_RECEIVING_MESSAGE_TITLE,NLS.bind(Messages.DocShare_EXCEPTION_RECEIVING_MESSAGE_MESSAGE,e.getLocalizedMessage()));
      }
    }
  }
);
}","/** 
 * This method called by the   {@link #handleMessage(ID,byte[])} method ifthe type of the message received is a start message (sent by remote party via  {@link #startShare(ID,String,ID,String,ITextEditor)}.
 * @param message the UpdateMessage received.
 */
protected void handleStartMessage(final StartMessage message){
  final ID senderID=message.getSenderID();
  Assert.isNotNull(senderID);
  final String senderUsername=message.getSenderUsername();
  Assert.isNotNull(senderUsername);
  final ID our=message.getReceiverID();
  Assert.isNotNull(our);
  final String filename=message.getFilename();
  Assert.isNotNull(filename);
  final String documentContent=message.getDocumentContent();
  Assert.isNotNull(documentContent);
synchronized (stateLock) {
    if (isSharing() || startContent != null) {
      sendStopMessage(senderID);
      return;
    }
    startContent=documentContent;
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      try {
        if (openReceiverDialog(senderID,senderUsername,filename)) {
          final DocShareEditorInput dsei=new DocShareEditorInput(getTempFileStore(senderUsername,filename,startContent),senderUsername,filename);
          final ITextEditor ep=(ITextEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(dsei,getEditorIdForFileName(filename));
          localStartShare(getLocalRosterManager(),our,senderID,our,ep);
        }
 else {
          sendStopMessage();
          localStopShare();
        }
      }
 catch (      final Exception e) {
        logError(Messages.DocShare_EXCEPTION_RECEIVING_MESSAGE_TITLE,e);
        showErrorToUser(Messages.DocShare_EXCEPTION_RECEIVING_MESSAGE_TITLE,NLS.bind(Messages.DocShare_EXCEPTION_RECEIVING_MESSAGE_MESSAGE,e.getLocalizedMessage()));
      }
    }
  }
);
}",0.995898277276456
94632,"/** 
 * @throws ExecutionException  
 */
public Object execute(ExecutionEvent arg0) throws ExecutionException {
  IRosterEntry rosterEntry=getRosterEntry();
  if (rosterEntry != null) {
    IRoster roster=rosterEntry.getRoster();
    IRosterManager rosterManager=roster.getPresenceContainerAdapter().getRosterManager();
    final IContainer container=(IContainer)roster.getPresenceContainerAdapter().getAdapter(IContainer.class);
    if (container.getConnectedID() == null)     showErrorMessage(Messages.DocShareRosterMenuHandler_ERROR_NOT_CONNECTED);
    final DocShare sender=Activator.getDefault().getDocShare(container.getID());
    if (sender == null)     showErrorMessage(Messages.DocShareRosterMenuHandler_ERROR_NO_SENDER);
    if (sender.isSharing())     showErrorMessage(Messages.DocShareRosterMenuHandler_ERROR_EDITOR_ALREADY_SHARING);
    final ITextEditor textEditor=getTextEditor();
    if (textEditor == null)     showErrorMessage(Messages.DocShareRosterMenuHandler_EXCEPTION_EDITOR_NOT_TEXT);
    final String fileName=getFileName(textEditor);
    if (fileName == null)     showErrorMessage(Messages.DocShareRosterMenuHandler_NO_FILENAME_WITH_CONTENT);
    final IUser user=roster.getUser();
    sender.startShare(rosterManager,user.getID(),user.getName(),rosterEntry.getUser().getID(),fileName,textEditor);
  }
  return null;
}","/** 
 * @throws ExecutionException  
 */
public Object execute(ExecutionEvent arg0) throws ExecutionException {
  IRosterEntry rosterEntry=getRosterEntry();
  if (rosterEntry != null) {
    IRoster roster=rosterEntry.getRoster();
    final IContainer container=(IContainer)roster.getPresenceContainerAdapter().getAdapter(IContainer.class);
    if (container.getConnectedID() == null)     showErrorMessage(Messages.DocShareRosterMenuHandler_ERROR_NOT_CONNECTED);
    final DocShare sender=Activator.getDefault().getDocShare(container.getID());
    if (sender == null)     showErrorMessage(Messages.DocShareRosterMenuHandler_ERROR_NO_SENDER);
    if (sender.isSharing())     showErrorMessage(Messages.DocShareRosterMenuHandler_ERROR_EDITOR_ALREADY_SHARING);
    final ITextEditor textEditor=getTextEditor();
    if (textEditor == null)     showErrorMessage(Messages.DocShareRosterMenuHandler_EXCEPTION_EDITOR_NOT_TEXT);
    final String fileName=getFileName(textEditor);
    if (fileName == null)     showErrorMessage(Messages.DocShareRosterMenuHandler_NO_FILENAME_WITH_CONTENT);
    final IUser user=roster.getUser();
    sender.startShare(user.getID(),user.getName(),rosterEntry.getUser().getID(),fileName,textEditor);
  }
  return null;
}",0.9209914794732764
94633,"/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext ctxt) throws Exception {
  if (logServiceTracker != null) {
    logServiceTracker.close();
    logServiceTracker=null;
  }
  if (adapterManagerTracker != null) {
    adapterManagerTracker.close();
    adapterManagerTracker=null;
  }
  this.context=null;
  plugin=null;
}","/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext ctxt) throws Exception {
  if (logServiceTracker != null) {
    logServiceTracker.close();
    logServiceTracker=null;
  }
  if (adapterManagerTracker != null) {
    adapterManagerTracker.close();
    adapterManagerTracker=null;
  }
  if (containerManagerTracker != null) {
    containerManagerTracker.close();
    containerManagerTracker=null;
  }
  this.context=null;
  plugin=null;
}",0.8527315914489311
94634,"public Object getAdapter(Class adapter){
  return null;
}","public Object getAdapter(Class adapter){
  if (adapter != null && adapter.isAssignableFrom(IContainer.class)) {
    IContainerManager containerManager=Activator.getDefault().getContainerManager();
    return containerManager.getContainer(getContext().getLocalContainerID());
  }
  return super.getAdapter(adapter);
}",0.2466487935656836
94635,"public void disconnect(){
  fireContainerEvent(new ContainerDisconnectingEvent(getID(),targetID));
  rootContainer.doPartChannel(targetID.getName());
  fireContainerEvent(new ContainerDisconnectedEvent(getID(),targetID));
}","public void disconnect(){
  fireContainerEvent(new ContainerDisconnectingEvent(getID(),targetID));
  if (targetID != null)   rootContainer.doPartChannel(targetID.getName());
  fireContainerEvent(new ContainerDisconnectedEvent(getID(),targetID));
}",0.948936170212766
94636,"ChatRoomTab(boolean withParticipantsList,CTabFolder parent,String name,KeyListener keyListener){
  withParticipants=withParticipantsList;
  tabItem=new CTabItem(parent,SWT.NULL);
  tabItem.setText(name);
  if (withParticipants) {
    fullChat=new SashForm(parent,SWT.HORIZONTAL);
    fullChat.setLayout(new FillLayout());
    Composite memberComp=new Composite(fullChat,SWT.NONE);
    GridLayout layout=new GridLayout(1,true);
    layout.marginWidth=0;
    layout.marginHeight=0;
    memberComp.setLayout(layout);
    participantsNumberLabel=new Label(memberComp,SWT.BORDER | SWT.READ_ONLY);
    participantsNumberLabel.setLayoutData(new GridData(SWT.FILL,SWT.BEGINNING,true,false));
    participantsNumberLabel.setAlignment(SWT.CENTER);
    participantsTable=new TableViewer(memberComp,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI);
    participantsTable.setSorter(new ViewerSorter());
    participantsTable.getTable().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    participantsTable.addOpenListener(new IOpenListener(){
      public void open(      OpenEvent event){
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        String user=((ChatRoomParticipant)selection.getFirstElement()).getName();
        if (!ChatRoomManagerView.this.localUserName.equals(user)) {
          try {
            MessagesView messagesView=getMessagesView();
            messagesView.selectTab(container.getPrivateMessageSender(),null,createStringID(localUserName),createStringID(user));
            getSite().getPage().activate(messagesView);
          }
 catch (          PartInitException e) {
            Activator.getDefault().getLog().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,NLS.bind(Messages.ChatRoomManagerView_EXCEPTION_MESSAGE_VIEW_INITIALIZATION,user),e));
          }
        }
      }
    }
);
    Composite rightComp=new Composite(fullChat,SWT.NONE);
    rightComp.setLayout(layout);
    subjectText=createStyledTextWidget(rightComp,SWT.SINGLE | SWT.BORDER);
    subjectText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
    subjectText.setEditable(false);
    subjectText.setEnabled(false);
    rightSash=new SashForm(rightComp,SWT.VERTICAL);
    rightSash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  }
 else   rightSash=new SashForm(parent,SWT.VERTICAL);
  outputText=createStyledTextWidget(rightSash,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL| SWT.MULTI| SWT.READ_ONLY);
  outputText.setEditable(false);
  outputText.setLayoutData(new GridData(GridData.FILL_BOTH));
  inputText=new Text(rightSash,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  if (keyListener != null)   inputText.addKeyListener(keyListener);
  rightSash.setWeights(new int[]{RATIO_READ_PANE,RATIO_WRITE_PANE});
  if (withParticipants) {
    fullChat.setWeights(new int[]{RATIO_PRESENCE_PANE,RATIO_READ_WRITE_PANE});
    tabItem.setControl(fullChat);
  }
 else   tabItem.setControl(rightSash);
  parent.setSelection(tabItem);
  makeActions();
  hookContextMenu();
  if (withParticipants) {
    hookParticipantsContextMenu();
  }
  StyledText st=getOutputText();
  if (st != null) {
    ScrollBar vsb=st.getVerticalBar();
    if (vsb != null) {
      vsb.addSelectionListener(scrollSelectionListener);
      vsb.addDisposeListener(new DisposeListener(){
        public void widgetDisposed(        DisposeEvent e){
          StyledText ot=getOutputText();
          if (ot != null) {
            ScrollBar sb=ot.getVerticalBar();
            if (sb != null)             sb.removeSelectionListener(scrollSelectionListener);
          }
        }
      }
);
    }
  }
}","ChatRoomTab(boolean withParticipantsList,CTabFolder parent,String name,KeyListener keyListener){
  withParticipants=withParticipantsList;
  tabItem=new CTabItem(parent,SWT.NULL);
  tabItem.setText(name);
  if (withParticipants) {
    fullChat=new SashForm(parent,SWT.HORIZONTAL);
    fullChat.setLayout(new FillLayout());
    Composite memberComp=new Composite(fullChat,SWT.NONE);
    GridLayout layout=new GridLayout(1,true);
    layout.marginWidth=0;
    layout.marginHeight=0;
    memberComp.setLayout(layout);
    participantsNumberLabel=new Label(memberComp,SWT.BORDER | SWT.READ_ONLY);
    participantsNumberLabel.setLayoutData(new GridData(SWT.FILL,SWT.BEGINNING,true,false));
    participantsNumberLabel.setAlignment(SWT.CENTER);
    participantsTable=new TableViewer(memberComp,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI);
    participantsTable.setSorter(new ViewerSorter());
    participantsTable.getTable().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    participantsTable.addOpenListener(new IOpenListener(){
      public void open(      OpenEvent event){
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        String user=((ChatRoomParticipant)selection.getFirstElement()).getName();
        if (!ChatRoomManagerView.this.localUserName.equals(user)) {
          try {
            MessagesView messagesView=getMessagesView();
            messagesView.selectTab(container.getPrivateMessageSender(),null,createStringID(localUserName),createStringID(user));
            getSite().getPage().activate(messagesView);
          }
 catch (          PartInitException e) {
            Activator.getDefault().getLog().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,NLS.bind(Messages.ChatRoomManagerView_EXCEPTION_MESSAGE_VIEW_INITIALIZATION,user),e));
          }
        }
      }
    }
);
    rightComposite=new Composite(fullChat,SWT.NONE);
    layout=new GridLayout(1,true);
    layout.marginHeight=0;
    layout.marginWidth=0;
    rightComposite.setLayout(layout);
    subjectText=createStyledTextWidget(rightComposite,SWT.SINGLE | SWT.BORDER);
    subjectText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
    subjectText.setEditable(false);
    subjectText.setEnabled(false);
  }
 else {
    rightComposite=new Composite(parent,SWT.NONE);
    GridLayout layout=new GridLayout(1,true);
    layout.marginHeight=0;
    layout.marginWidth=0;
    rightComposite.setLayout(layout);
  }
  outputText=createStyledTextWidget(rightComposite,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL| SWT.MULTI| SWT.READ_ONLY);
  outputText.setEditable(false);
  outputText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  inputText=new Text(rightComposite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.CENTER,true,false);
  GC gc=new GC(inputText);
  gc.setFont(inputText.getFont());
  FontMetrics fontMetrics=gc.getFontMetrics();
  gc.dispose();
  gd.heightHint=fontMetrics.getHeight() * 2;
  inputText.setLayoutData(gd);
  if (keyListener != null)   inputText.addKeyListener(keyListener);
  if (withParticipants) {
    fullChat.setWeights(new int[]{RATIO_PRESENCE_PANE,RATIO_READ_WRITE_PANE});
    tabItem.setControl(fullChat);
  }
 else   tabItem.setControl(rightComposite);
  parent.setSelection(tabItem);
  makeActions();
  hookContextMenu();
  if (withParticipants) {
    hookParticipantsContextMenu();
  }
  StyledText st=getOutputText();
  if (st != null) {
    ScrollBar vsb=st.getVerticalBar();
    if (vsb != null) {
      vsb.addSelectionListener(scrollSelectionListener);
      vsb.addDisposeListener(new DisposeListener(){
        public void widgetDisposed(        DisposeEvent e){
          StyledText ot=getOutputText();
          if (ot != null) {
            ScrollBar sb=ot.getVerticalBar();
            if (sb != null)             sb.removeSelectionListener(scrollSelectionListener);
          }
        }
      }
);
    }
  }
}",0.8733578560168156
94637,"/** 
 * Begin waiting for incoming messages indefinitely.
 */
public void run(){
  while (!isInterrupted()) {
    try {
      read();
    }
 catch (    IOException e) {
      return;
    }
catch (    RuntimeException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
}","/** 
 * Begin waiting for incoming messages indefinitely.
 */
public void run(){
  while (!isInterrupted()) {
    try {
      sleep(50);
      read();
    }
 catch (    InterruptedException e) {
      return;
    }
catch (    IOException e) {
      return;
    }
catch (    RuntimeException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
}",0.847953216374269
94638,"public static VCard _createVCardFromXml(String xmlText){
  VCard vCard=new VCard();
  try {
    DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
    Document document=documentBuilder.parse(new ByteArrayInputStream(xmlText.getBytes()));
    new VCardReader(vCard,document).initializeFields();
  }
 catch (  Exception e) {
    e.printStackTrace(System.err);
  }
  return vCard;
}","public static VCard _createVCardFromXml(String xmlText){
  VCard vCard=new VCard();
  try {
    DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
    byte[] bytes;
    try {
      bytes=xmlText.getBytes(""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException e) {
      bytes=xmlText.getBytes();
    }
    Document document=documentBuilder.parse(new ByteArrayInputStream(bytes));
    new VCardReader(vCard,document).initializeFields();
  }
 catch (  Exception e) {
    e.printStackTrace(System.err);
  }
  return vCard;
}",0.8333333333333334
94639,"public ID createID() throws IDCreateException {
  return IDFactory.getDefault().createID(prefs.parent().name(),prefs.name());
}","public ID createID() throws IDCreateException {
  return IDFactory.getDefault().createID(prefs.parent().name(),EncodingUtils.decodeSlashes(prefs.name()));
}",0.8975265017667845
94640,"static void open(Shell shell){
  ElementListSelectionDialog elsd=new ElementListSelectionDialog(shell,new LabelProvider(){
    public String getText(    Object element){
      String summary=((ITask)element).getSummary();
      return summary;
    }
  }
);
  elsd.setElements(CompoundContextActivationContributionItem.tasks.toArray());
  if (Window.OK == elsd.open()) {
    ActivateTaskAction action=new CompoundContextActivationContributionItem.ActivateTaskAction();
    action.setTask((ITask)elsd.getFirstResult());
    action.run();
  }
}","static void open(Shell shell){
  ElementListSelectionDialog elsd=new ElementListSelectionDialog(shell,new LabelProvider(){
    public String getText(    Object element){
      String summary=((ITask)element).getSummary();
      return summary;
    }
  }
);
  elsd.setElements(CompoundContextActivationContributionItem.tasks.toArray());
  if (Window.OK == elsd.open()) {
    ActivateTaskAction action=new CompoundContextActivationContributionItem.ActivateTaskAction();
    action.setShell(shell);
    action.setTask((ITask)elsd.getFirstResult());
    action.run();
  }
}",0.9747747747747748
94641,"protected IContributionItem[] getContributionItems(){
  int count=0;
  for (Iterator it=tasks.iterator(); it.hasNext() && count != 5; ) {
    ITask task=(ITask)it.next();
    actions[count].setTask(task);
    count++;
  }
  IContributionItem[] array=null;
  if (count == 5 && tasks.size() != 5) {
    array=new IContributionItem[7];
    array[5]=new Separator();
    array[6]=new ActionContributionItem(new Action(""String_Node_Str""){
      public void run(){
        ActivateReceivedContextHandler.open(shell);
      }
    }
);
  }
 else {
    array=new IContributionItem[count];
  }
  for (int i=0; i < count; i++) {
    array[i]=new ActionContributionItem(actions[i]);
  }
  return array;
}","protected IContributionItem[] getContributionItems(){
  int count=0;
  for (Iterator it=tasks.iterator(); it.hasNext() && count != 5; ) {
    ITask task=(ITask)it.next();
    actions[count].setShell(shell);
    actions[count].setTask(task);
    count++;
  }
  IContributionItem[] array=null;
  if (count == 5 && tasks.size() != 5) {
    array=new IContributionItem[7];
    array[5]=new Separator();
    array[6]=new ActionContributionItem(new Action(""String_Node_Str""){
      public void run(){
        ActivateReceivedContextHandler.open(shell);
      }
    }
);
  }
 else {
    array=new IContributionItem[count];
  }
  for (int i=0; i < count; i++) {
    array[i]=new ActionContributionItem(actions[i]);
  }
  return array;
}",0.9746478873239436
94642,"public void fill(Menu menu,int index){
  super.fill(menu,index);
  shell=menu.getShell();
}","public void fill(Menu menu,int index){
  shell=menu.getShell();
  super.fill(menu,index);
}",0.7252747252747253
94643,"public void linkActivated(HyperlinkEvent e){
  ActivateTaskAction action=new CompoundContextActivationContributionItem.ActivateTaskAction();
  action.setTask(task);
  action.run();
  close();
}","public void linkActivated(HyperlinkEvent e){
  ActivateTaskAction action=new CompoundContextActivationContributionItem.ActivateTaskAction();
  action.setShell(getParentShell());
  action.setTask(task);
  action.run();
  close();
}",0.9125295508274232
94644,"protected void createContentArea(Composite parent){
  Composite notificationComposite=new Composite(parent,SWT.NO_FOCUS);
  notificationComposite.setLayout(new GridLayout(2,false));
  notificationComposite.setBackground(parent.getBackground());
  final Label notificationLabelIcon=new Label(notificationComposite,SWT.LEAD);
  notificationLabelIcon.setBackground(parent.getBackground());
  notificationLabelIcon.setImage(CommonImages.getImage(CommonImages.OVERLAY_SYNC_INCOMMING_NEW));
  final TaskListHyperlink itemLink=new TaskListHyperlink(notificationComposite,SWT.BEGINNING | SWT.WRAP | SWT.NO_FOCUS);
  itemLink.setText(task.getTaskId());
  itemLink.setImage(labelProvider.getImage(task));
  itemLink.setBackground(parent.getBackground());
  itemLink.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      ActivateTaskAction action=new CompoundContextActivationContributionItem.ActivateTaskAction();
      action.setTask(task);
      action.run();
      close();
    }
  }
);
  String descriptionText=task.getSummary();
  Label descriptionLabel=new Label(notificationComposite,SWT.NO_FOCUS);
  descriptionLabel.setText(descriptionText);
  descriptionLabel.setBackground(parent.getBackground());
  GridDataFactory.fillDefaults().span(2,SWT.DEFAULT).applyTo(descriptionLabel);
}","protected void createContentArea(Composite parent){
  Composite notificationComposite=new Composite(parent,SWT.NO_FOCUS);
  notificationComposite.setLayout(new GridLayout(2,false));
  notificationComposite.setBackground(parent.getBackground());
  final Label notificationLabelIcon=new Label(notificationComposite,SWT.LEAD);
  notificationLabelIcon.setBackground(parent.getBackground());
  notificationLabelIcon.setImage(CommonImages.getImage(CommonImages.OVERLAY_SYNC_INCOMMING_NEW));
  final TaskListHyperlink itemLink=new TaskListHyperlink(notificationComposite,SWT.BEGINNING | SWT.WRAP | SWT.NO_FOCUS);
  itemLink.setText(task.getTaskId());
  itemLink.setImage(labelProvider.getImage(task));
  itemLink.setBackground(parent.getBackground());
  itemLink.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      ActivateTaskAction action=new CompoundContextActivationContributionItem.ActivateTaskAction();
      action.setShell(getParentShell());
      action.setTask(task);
      action.run();
      close();
    }
  }
);
  String descriptionText=task.getSummary();
  Label descriptionLabel=new Label(notificationComposite,SWT.NO_FOCUS);
  descriptionLabel.setText(descriptionText);
  descriptionLabel.setBackground(parent.getBackground());
  GridDataFactory.fillDefaults().span(2,SWT.DEFAULT).applyTo(descriptionLabel);
}",0.9848204368752314
94645,"public Object getAdapter(Class adapter){
  return null;
}","public Object getAdapter(Class adapter){
  if (adapter == null)   return null;
  if (adapter.isInstance(this))   return this;
  final IAdapterManager adapterManager=XmppPlugin.getDefault().getAdapterManager();
  return (adapterManager == null) ? null : adapterManager.loadAdapter(this,adapter.getName());
}",0.3140495867768595
94646,"private void fireMessageEvent(IIMMessageEvent event){
  List toNotify=null;
synchronized (messageListeners) {
    toNotify=new ArrayList(messageListeners);
  }
  for (Iterator i=toNotify.iterator(); i.hasNext(); ) {
    IIMMessageListener l=(IIMMessageListener)i.next();
    l.handleMessageEvent(event);
  }
}","private void fireMessageEvent(IIMMessageEvent event){
  List toNotify=null;
synchronized (messageListeners) {
    toNotify=new ArrayList(messageListeners);
  }
  for (final Iterator i=toNotify.iterator(); i.hasNext(); ) {
    final IIMMessageListener l=(IIMMessageListener)i.next();
    l.handleMessageEvent(event);
  }
}",0.9809523809523808
94647,"public void sendTypingMessage(ID toID,boolean isTyping,String body) throws ECFException {
  if (toID == null)   throw new ECFException(""String_Node_Str"");
  try {
    presenceHelper.sendTypingMessage(toID,isTyping,body);
  }
 catch (  Exception e) {
    throw new ECFException(""String_Node_Str"",e);
  }
}","public void sendTypingMessage(ID toID,boolean isTyping,String body) throws ECFException {
  if (toID == null)   throw new ECFException(""String_Node_Str"");
  try {
    presenceHelper.sendTypingMessage(toID,isTyping,body);
  }
 catch (  final Exception e) {
    throw new ECFException(""String_Node_Str"",e);
  }
}",0.990228013029316
94648,"public Object getAdapter(Class clazz){
  return null;
}","public Object getAdapter(Class adapter){
  if (adapter == null)   return null;
  if (adapter.isInstance(this))   return this;
  final IAdapterManager adapterManager=XmppPlugin.getDefault().getAdapterManager();
  return (adapterManager == null) ? null : adapterManager.loadAdapter(this,adapter.getName());
}",0.1939058171745152
94649,"protected void tearDown() throws Exception {
  super.tearDown();
  if (incomingFile != null)   incomingFile.delete();
  incomingFile=null;
  if (incomingDirectory != null)   incomingDirectory.delete();
  incomingDirectory=null;
}","protected void tearDown() throws Exception {
  super.tearDown();
  disconnectClients();
  if (incomingFile != null)   incomingFile.delete();
  incomingFile=null;
  if (incomingDirectory != null)   incomingDirectory.delete();
  incomingDirectory=null;
  outgoing=null;
  targetID=null;
}",0.8893203883495145
94650,"public void testTwoClientsToSendAndReceive() throws Exception {
  setClientCount(2);
  clients=createClients();
  adapter0=getOutgoingFileTransfer(0);
  adapter0.addListener(requestListener);
  adapter1=getOutgoingFileTransfer(1);
  for (int i=0; i < 2; i++) {
    connectClient(i);
  }
  final IFileID targetID=createFileID(adapter1,getServerConnectID(0),TESTSRCFILE);
  adapter1.sendOutgoingRequest(targetID,new File(TESTSRCFILE),senderTransferListener,null);
  sleep(10000);
  disconnectClients();
}","public void testTwoClientsToSendAndReceive() throws Exception {
  adapter1.sendOutgoingRequest(targetID,new File(TESTSRCFILE),senderTransferListener,null);
  sleep(5000);
}",0.5074183976261127
94651,"public synchronized void handleChannelEvent(IChannelEvent e){
  if (e instanceof IChannelMessageEvent) {
    IChannelMessageEvent msgEvent=(IChannelMessageEvent)e;
    byte[] data=msgEvent.getData();
    File file=new File(getStateLocation().toFile(),""String_Node_Str"");
    try {
      FileOutputStream fos=new FileOutputStream(file);
      fos.write(data);
      List tasks=TasksUiPlugin.getTaskListManager().getTaskListWriter().readTasks(file);
      final AbstractTask task=(AbstractTask)tasks.get(0);
      Set repositories=TasksUiPlugin.getTaskListManager().getTaskListWriter().readRepositories(file);
      TasksUiPlugin.getRepositoryManager().insertRepositories(repositories,TasksUiPlugin.getDefault().getRepositoriesFilePath());
      InteractionContext context=ContextCorePlugin.getContextManager().loadContext(task.getHandleIdentifier(),file);
      CompoundContextActivationContributionItem.enqueue(task,context);
      IWorkbenchWindow[] windows=PlatformUI.getWorkbench().getWorkbenchWindows();
      Shell aShell=null;
      for (int i=0; i < windows.length; i++) {
        aShell=windows[i].getShell();
        if (aShell != null) {
          break;
        }
      }
      if (aShell == null) {
        return;
      }
      final Shell shell=aShell;
      UIJob job=new UIJob(""String_Node_Str""){
        public IStatus runInUIThread(        IProgressMonitor monitor){
          final IncomingSharedTaskNotificationPopup popup=new IncomingSharedTaskNotificationPopup(shell);
          popup.setTask(task);
          popup.open();
          new UIJob(shell.getDisplay(),""String_Node_Str""){
            public IStatus runInUIThread(            IProgressMonitor monitor){
              Shell shell=popup.getShell();
              if (shell != null && !shell.isDisposed()) {
                popup.close();
              }
              monitor.done();
              return Status.OK_STATUS;
            }
          }
.schedule(5000);
          return Status.OK_STATUS;
        }
      }
;
      job.schedule();
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
 finally {
      file.delete();
    }
  }
}","public synchronized void handleChannelEvent(IChannelEvent e){
  if (e instanceof IChannelMessageEvent) {
    IChannelMessageEvent msgEvent=(IChannelMessageEvent)e;
    byte[] data=msgEvent.getData();
    File file=new File(getStateLocation().toFile(),""String_Node_Str"");
    try {
      FileOutputStream fos=new FileOutputStream(file);
      fos.write(data);
      List tasks=TasksUiPlugin.getTaskListManager().getTaskListWriter().readTasks(file);
      final ITask task=(ITask)tasks.get(0);
      Set repositories=TasksUiPlugin.getTaskListManager().getTaskListWriter().readRepositories(file);
      TasksUiPlugin.getRepositoryManager().insertRepositories(repositories,TasksUiPlugin.getDefault().getRepositoriesFilePath());
      IInteractionContext context=ContextCore.getContextStore().importContext(task.getHandleIdentifier(),file);
      CompoundContextActivationContributionItem.enqueue(task,context);
      IWorkbenchWindow[] windows=PlatformUI.getWorkbench().getWorkbenchWindows();
      Shell aShell=null;
      for (int i=0; i < windows.length; i++) {
        aShell=windows[i].getShell();
        if (aShell != null) {
          break;
        }
      }
      if (aShell == null) {
        return;
      }
      final Shell shell=aShell;
      UIJob job=new UIJob(""String_Node_Str""){
        public IStatus runInUIThread(        IProgressMonitor monitor){
          final IncomingSharedTaskNotificationPopup popup=new IncomingSharedTaskNotificationPopup(shell);
          popup.setTask(task);
          popup.open();
          new UIJob(shell.getDisplay(),""String_Node_Str""){
            public IStatus runInUIThread(            IProgressMonitor monitor){
              Shell shell=popup.getShell();
              if (shell != null && !shell.isDisposed()) {
                popup.close();
              }
              monitor.done();
              return Status.OK_STATUS;
            }
          }
.schedule(5000);
          return Status.OK_STATUS;
        }
      }
;
      job.schedule();
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
 finally {
      file.delete();
    }
  }
}",0.9875264768180748
94652,"protected IContributionItem[] getContributionItems(){
  int count=0;
  for (Iterator it=tasks.iterator(); it.hasNext() && count != 5; ) {
    AbstractTask task=(AbstractTask)it.next();
    actions[count].setTask(task);
    count++;
  }
  IContributionItem[] array=null;
  if (count == 5 && tasks.size() != 5) {
    array=new IContributionItem[7];
    array[5]=new Separator();
    array[6]=new ActionContributionItem(new Action(""String_Node_Str""){
      public void run(){
        ActivateReceivedContextHandler.open(shell);
      }
    }
);
  }
 else {
    array=new IContributionItem[count];
  }
  for (int i=0; i < count; i++) {
    array[i]=new ActionContributionItem(actions[i]);
  }
  return array;
}","protected IContributionItem[] getContributionItems(){
  int count=0;
  for (Iterator it=tasks.iterator(); it.hasNext() && count != 5; ) {
    ITask task=(ITask)it.next();
    actions[count].setTask(task);
    count++;
  }
  IContributionItem[] array=null;
  if (count == 5 && tasks.size() != 5) {
    array=new IContributionItem[7];
    array[5]=new Separator();
    array[6]=new ActionContributionItem(new Action(""String_Node_Str""){
      public void run(){
        ActivateReceivedContextHandler.open(shell);
      }
    }
);
  }
 else {
    array=new IContributionItem[count];
  }
  for (int i=0; i < count; i++) {
    array[i]=new ActionContributionItem(actions[i]);
  }
  return array;
}",0.9871244635193132
94653,"public IStatus runInUIThread(IProgressMonitor monitor){
  TasksUiPlugin.getTaskListManager().activateTask((AbstractTask)task);
  return Status.OK_STATUS;
}","public IStatus runInUIThread(IProgressMonitor monitor){
  TasksUi.getTaskActivityManager().activateTask(task);
  return Status.OK_STATUS;
}",0.9047619047619048
94654,"protected IStatus run(IProgressMonitor monitor){
  ContextCorePlugin.getContextManager().importContext(context);
  taskList.insertTask(task,null,null);
  scheduleTaskActivationJob();
  return Status.OK_STATUS;
}","protected IStatus run(IProgressMonitor monitor){
  ((LocalContextStore)ContextCore.getContextStore()).importContext(context);
  taskList.addTask(task);
  scheduleTaskActivationJob();
  return Status.OK_STATUS;
}",0.7203791469194313
94655,"private void scheduleTaskActivationJob(){
  UIJob job=new UIJob(shell.getDisplay(),""String_Node_Str""){
    public IStatus runInUIThread(    IProgressMonitor monitor){
      TasksUiPlugin.getTaskListManager().activateTask((AbstractTask)task);
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
}","private void scheduleTaskActivationJob(){
  UIJob job=new UIJob(shell.getDisplay(),""String_Node_Str""){
    public IStatus runInUIThread(    IProgressMonitor monitor){
      TasksUi.getTaskActivityManager().activateTask(task);
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
}",0.918918918918919
94656,"protected void createContentArea(Composite parent){
  Composite notificationComposite=new Composite(parent,SWT.NO_FOCUS);
  notificationComposite.setLayout(new GridLayout(2,false));
  notificationComposite.setBackground(parent.getBackground());
  final Label notificationLabelIcon=new Label(notificationComposite,SWT.LEAD);
  notificationLabelIcon.setBackground(parent.getBackground());
  notificationLabelIcon.setImage(TasksUiImages.getImage(TasksUiImages.OVERLAY_INCOMMING));
  final TaskListHyperlink itemLink=new TaskListHyperlink(notificationComposite,SWT.BEGINNING | SWT.WRAP | SWT.NO_FOCUS);
  itemLink.setText(task.getTaskId());
  itemLink.setImage(labelProvider.getImage(task));
  itemLink.setBackground(parent.getBackground());
  itemLink.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      ActivateTaskAction action=new CompoundContextActivationContributionItem.ActivateTaskAction();
      action.setTask(task);
      action.run();
      close();
    }
  }
);
  String descriptionText=task.getSummary();
  Label descriptionLabel=new Label(notificationComposite,SWT.NO_FOCUS);
  descriptionLabel.setText(descriptionText);
  descriptionLabel.setBackground(parent.getBackground());
  GridDataFactory.fillDefaults().span(2,SWT.DEFAULT).applyTo(descriptionLabel);
}","protected void createContentArea(Composite parent){
  Composite notificationComposite=new Composite(parent,SWT.NO_FOCUS);
  notificationComposite.setLayout(new GridLayout(2,false));
  notificationComposite.setBackground(parent.getBackground());
  final Label notificationLabelIcon=new Label(notificationComposite,SWT.LEAD);
  notificationLabelIcon.setBackground(parent.getBackground());
  notificationLabelIcon.setImage(CommonImages.getImage(CommonImages.OVERLAY_SYNC_INCOMMING_NEW));
  final TaskListHyperlink itemLink=new TaskListHyperlink(notificationComposite,SWT.BEGINNING | SWT.WRAP | SWT.NO_FOCUS);
  itemLink.setText(task.getTaskId());
  itemLink.setImage(labelProvider.getImage(task));
  itemLink.setBackground(parent.getBackground());
  itemLink.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      ActivateTaskAction action=new CompoundContextActivationContributionItem.ActivateTaskAction();
      action.setTask(task);
      action.run();
      close();
    }
  }
);
  String descriptionText=task.getSummary();
  Label descriptionLabel=new Label(notificationComposite,SWT.NO_FOCUS);
  descriptionLabel.setText(descriptionText);
  descriptionLabel.setBackground(parent.getBackground());
  GridDataFactory.fillDefaults().span(2,SWT.DEFAULT).applyTo(descriptionLabel);
}",0.9747455710516396
94657,"ChatRoomTab(boolean withParticipantsList,CTabFolder parent,String name,KeyListener keyListener){
  withParticipants=withParticipantsList;
  tabItem=new CTabItem(parent,SWT.NULL);
  tabItem.setText(name);
  if (withParticipants) {
    fullChat=new SashForm(parent,SWT.HORIZONTAL);
    fullChat.setLayout(new FillLayout());
    Composite memberComp=new Composite(fullChat,SWT.NONE);
    GridLayout layout=new GridLayout(1,true);
    layout.marginWidth=0;
    layout.marginHeight=0;
    memberComp.setLayout(layout);
    participantsNumberLabel=new Label(memberComp,SWT.BORDER | SWT.READ_ONLY);
    participantsNumberLabel.setLayoutData(new GridData(SWT.FILL,SWT.BEGINNING,true,false));
    participantsNumberLabel.setAlignment(SWT.CENTER);
    participantsTable=new TableViewer(memberComp,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI);
    participantsTable.setSorter(new ViewerSorter());
    participantsTable.getTable().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    participantsTable.addOpenListener(new IOpenListener(){
      public void open(      OpenEvent event){
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        String user=((ChatRoomParticipant)selection.getFirstElement()).getName();
        if (!ChatRoomManagerView.this.localUserName.equals(user)) {
          try {
            MessagesView messagesView=getMessagesView();
            messagesView.selectTab(container.getPrivateMessageSender(),null,createStringID(localUserName),createStringID(user));
            getSite().getPage().activate(messagesView);
          }
 catch (          PartInitException e) {
            Activator.getDefault().getLog().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,NLS.bind(Messages.ChatRoomManagerView_EXCEPTION_MESSAGE_VIEW_INITIALIZATION,user),e));
          }
        }
      }
    }
);
    Composite rightComp=new Composite(fullChat,SWT.NONE);
    rightComp.setLayout(layout);
    subjectText=createStyledTextWidget(rightComp,SWT.SINGLE | SWT.BORDER);
    subjectText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
    subjectText.addKeyListener(new KeyAdapter(){
      public void keyPressed(      KeyEvent evt){
        if (evt.character == SWT.CR || evt.character == SWT.KEYPAD_CR) {
          ChatRoom chatroom=(ChatRoom)chatRooms.get(tabItem.getText());
          if (chatroom != null) {
            IChatRoomAdminSender chatRoomAdminSender=chatroom.chatRoomContainer.getChatRoomAdminSender();
            try {
              if (chatRoomAdminSender != null) {
                chatRoomAdminSender.sendSubjectChange(subjectText.getText());
              }
            }
 catch (            ECFException e) {
              disconnected();
            }
          }
        }
      }
    }
);
    rightSash=new SashForm(rightComp,SWT.VERTICAL);
    rightSash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  }
 else   rightSash=new SashForm(parent,SWT.VERTICAL);
  outputText=createStyledTextWidget(rightSash,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL| SWT.MULTI| SWT.READ_ONLY);
  outputText.setEditable(false);
  outputText.setLayoutData(new GridData(GridData.FILL_BOTH));
  inputText=new Text(rightSash,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  if (keyListener != null)   inputText.addKeyListener(keyListener);
  rightSash.setWeights(new int[]{RATIO_READ_PANE,RATIO_WRITE_PANE});
  if (withParticipants) {
    fullChat.setWeights(new int[]{RATIO_PRESENCE_PANE,RATIO_READ_WRITE_PANE});
    tabItem.setControl(fullChat);
  }
 else   tabItem.setControl(rightSash);
  parent.setSelection(tabItem);
  makeActions();
  hookContextMenu();
  if (withParticipants) {
    hookParticipantsContextMenu();
  }
  StyledText st=getOutputText();
  if (st != null) {
    ScrollBar vsb=st.getVerticalBar();
    if (vsb != null) {
      vsb.addSelectionListener(scrollSelectionListener);
      vsb.addDisposeListener(new DisposeListener(){
        public void widgetDisposed(        DisposeEvent e){
          StyledText ot=getOutputText();
          if (ot != null) {
            ScrollBar sb=ot.getVerticalBar();
            if (sb != null)             sb.removeSelectionListener(scrollSelectionListener);
          }
        }
      }
);
    }
  }
}","ChatRoomTab(boolean withParticipantsList,CTabFolder parent,String name,KeyListener keyListener){
  withParticipants=withParticipantsList;
  tabItem=new CTabItem(parent,SWT.NULL);
  tabItem.setText(name);
  if (withParticipants) {
    fullChat=new SashForm(parent,SWT.HORIZONTAL);
    fullChat.setLayout(new FillLayout());
    Composite memberComp=new Composite(fullChat,SWT.NONE);
    GridLayout layout=new GridLayout(1,true);
    layout.marginWidth=0;
    layout.marginHeight=0;
    memberComp.setLayout(layout);
    participantsNumberLabel=new Label(memberComp,SWT.BORDER | SWT.READ_ONLY);
    participantsNumberLabel.setLayoutData(new GridData(SWT.FILL,SWT.BEGINNING,true,false));
    participantsNumberLabel.setAlignment(SWT.CENTER);
    participantsTable=new TableViewer(memberComp,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI);
    participantsTable.setSorter(new ViewerSorter());
    participantsTable.getTable().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    participantsTable.addOpenListener(new IOpenListener(){
      public void open(      OpenEvent event){
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        String user=((ChatRoomParticipant)selection.getFirstElement()).getName();
        if (!ChatRoomManagerView.this.localUserName.equals(user)) {
          try {
            MessagesView messagesView=getMessagesView();
            messagesView.selectTab(container.getPrivateMessageSender(),null,createStringID(localUserName),createStringID(user));
            getSite().getPage().activate(messagesView);
          }
 catch (          PartInitException e) {
            Activator.getDefault().getLog().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,NLS.bind(Messages.ChatRoomManagerView_EXCEPTION_MESSAGE_VIEW_INITIALIZATION,user),e));
          }
        }
      }
    }
);
    Composite rightComp=new Composite(fullChat,SWT.NONE);
    rightComp.setLayout(layout);
    subjectText=createStyledTextWidget(rightComp,SWT.SINGLE | SWT.BORDER);
    subjectText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
    subjectText.setEditable(false);
    subjectText.setEnabled(false);
    rightSash=new SashForm(rightComp,SWT.VERTICAL);
    rightSash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  }
 else   rightSash=new SashForm(parent,SWT.VERTICAL);
  outputText=createStyledTextWidget(rightSash,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL| SWT.MULTI| SWT.READ_ONLY);
  outputText.setEditable(false);
  outputText.setLayoutData(new GridData(GridData.FILL_BOTH));
  inputText=new Text(rightSash,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  if (keyListener != null)   inputText.addKeyListener(keyListener);
  rightSash.setWeights(new int[]{RATIO_READ_PANE,RATIO_WRITE_PANE});
  if (withParticipants) {
    fullChat.setWeights(new int[]{RATIO_PRESENCE_PANE,RATIO_READ_WRITE_PANE});
    tabItem.setControl(fullChat);
  }
 else   tabItem.setControl(rightSash);
  parent.setSelection(tabItem);
  makeActions();
  hookContextMenu();
  if (withParticipants) {
    hookParticipantsContextMenu();
  }
  StyledText st=getOutputText();
  if (st != null) {
    ScrollBar vsb=st.getVerticalBar();
    if (vsb != null) {
      vsb.addSelectionListener(scrollSelectionListener);
      vsb.addDisposeListener(new DisposeListener(){
        public void widgetDisposed(        DisposeEvent e){
          StyledText ot=getOutputText();
          if (ot != null) {
            ScrollBar sb=ot.getVerticalBar();
            if (sb != null)             sb.removeSelectionListener(scrollSelectionListener);
          }
        }
      }
);
    }
  }
}",0.9103815439219166
94658,"public void handleSubjectChange(ID from,final String newSubject){
  chatRoomTab.getInputText().getDisplay().asyncExec(new Runnable(){
    public void run(){
      chatRoomTab.setSubject(newSubject);
    }
  }
);
}","public void handleSubjectChange(ID from,final String newSubject){
  if (!chatRoomTab.getInputText().isDisposed()) {
    chatRoomTab.getInputText().getDisplay().asyncExec(new Runnable(){
      public void run(){
        chatRoomTab.setSubject(newSubject);
      }
    }
);
  }
}",0.8571428571428571
94659,"ChatRoom(IChatRoomContainer container,ChatRoomTab tabItem){
  Assert.isNotNull(container);
  Assert.isNotNull(tabItem);
  this.chatRoomContainer=container;
  this.chatRoomMessageSender=container.getChatRoomMessageSender();
  this.chatRoomTab=tabItem;
  options=new ArrayList();
  this.chatRoomTab.setKeyListener(this);
  this.chatRoomParticipantsLabel=tabItem.getParticipantsLabel();
  this.chatRoomParticipantViewer=tabItem.getParticipantsViewer();
  chatRoomContainer.addChatRoomAdminListener(new IChatRoomAdminListener(){
    public void handleSubjectChange(    ID from,    final String newSubject){
      chatRoomTab.getInputText().getDisplay().asyncExec(new Runnable(){
        public void run(){
          chatRoomTab.setSubject(newSubject);
        }
      }
);
    }
  }
);
  rootTabFolder.setUnselectedCloseVisible(true);
  rootTabFolder.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      itemSelected=(CTabItem)e.item;
      if (itemSelected == chatRoomTab.tabItem)       makeTabItemNormal();
      if (rootChannelTab != null && itemSelected == rootChannelTab.tabItem)       rootChannelTab.makeTabItemNormal();
    }
  }
);
  StyledText st=getOutputText();
  if (st != null) {
    ScrollBar vsb=st.getVerticalBar();
    if (vsb != null) {
      vsb.addSelectionListener(scrollSelectionListener);
      vsb.addDisposeListener(new DisposeListener(){
        public void widgetDisposed(        DisposeEvent e){
          StyledText ot=getOutputText();
          if (ot != null) {
            ScrollBar vb=ot.getVerticalBar();
            if (vb != null)             vb.removeSelectionListener(scrollSelectionListener);
          }
        }
      }
);
    }
  }
}","ChatRoom(IChatRoomContainer container,ChatRoomTab tabItem){
  Assert.isNotNull(container);
  Assert.isNotNull(tabItem);
  this.chatRoomContainer=container;
  this.chatRoomMessageSender=container.getChatRoomMessageSender();
  this.chatRoomTab=tabItem;
  options=new ArrayList();
  this.chatRoomTab.setKeyListener(this);
  this.chatRoomParticipantsLabel=tabItem.getParticipantsLabel();
  this.chatRoomParticipantViewer=tabItem.getParticipantsViewer();
  chatRoomContainer.addChatRoomAdminListener(new IChatRoomAdminListener(){
    public void handleSubjectChange(    ID from,    final String newSubject){
      if (!chatRoomTab.getInputText().isDisposed()) {
        chatRoomTab.getInputText().getDisplay().asyncExec(new Runnable(){
          public void run(){
            chatRoomTab.setSubject(newSubject);
          }
        }
);
      }
    }
  }
);
  rootTabFolder.setUnselectedCloseVisible(true);
  rootTabFolder.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      itemSelected=(CTabItem)e.item;
      if (itemSelected == chatRoomTab.tabItem)       makeTabItemNormal();
      if (rootChannelTab != null && itemSelected == rootChannelTab.tabItem)       rootChannelTab.makeTabItemNormal();
    }
  }
);
  StyledText st=getOutputText();
  if (st != null) {
    ScrollBar vsb=st.getVerticalBar();
    if (vsb != null) {
      vsb.addSelectionListener(scrollSelectionListener);
      vsb.addDisposeListener(new DisposeListener(){
        public void widgetDisposed(        DisposeEvent e){
          StyledText ot=getOutputText();
          if (ot != null) {
            ScrollBar vb=ot.getVerticalBar();
            if (vb != null)             vb.removeSelectionListener(scrollSelectionListener);
          }
        }
      }
);
    }
  }
}",0.9803063457330417
94660,"/** 
 * Deactivate the factory.
 * @see ch.ethz.iks.r_osgi.channels.NetworkChannelFactory#deactivate(ch.ethz.iks.r_osgi.Remoting)
 */
public void deactivate(final Remoting remoting) throws IOException {
  thread.interrupt();
  this.remoting=null;
}","/** 
 * Deactivate the factory.
 * @see ch.ethz.iks.r_osgi.channels.NetworkChannelFactory#deactivate(ch.ethz.iks.r_osgi.Remoting)
 */
public void deactivate(final Remoting remoting) throws IOException {
  if (thread != null)   thread.interrupt();
  this.remoting=null;
}",0.9575289575289576
94661,"/** 
 * Read the contents of the packet being sent from the server and handle any events accordingly.
 * @return the String returned from {@link Session#read()}
 */
String read() throws IOException {
  final String input=super.read();
  if (input == null) {
    return null;
  }
  final String[] lines=StringUtils.split(input,""String_Node_Str"");
  for (int i=0; i < lines.length; i++) {
    if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] split=StringUtils.splitOnSpace(lines[i]);
      Contact contact=contactList.getContact(split[4]);
      if (contact == null) {
        contact=new Contact(split[4],split[5]);
      }
      contacts.add(contact);
      fireContactJoinedEvent(contact);
    }
 else     if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] split=StringUtils.splitOnSpace(lines[i]);
      Contact contact=contactList.getContact(split[2]);
      if (contact == null) {
        contact=new Contact(split[1],split[2]);
      }
      contacts.add(contact);
      fireContactJoinedEvent(contact);
    }
 else     if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] split=StringUtils.splitOnSpace(lines[i]);
      if (split.length == 2) {
        final Contact contact=findContact(split[1]);
        contacts.remove(contact);
        fireContactLeftEvent(contact);
        if (contacts.isEmpty()) {
          close();
        }
      }
 else {
        fireSessionTimedOutEvent();
        close();
      }
    }
 else     if (lines[i].startsWith(""String_Node_Str"")) {
      if (input.indexOf(""String_Node_Str"") != -1) {
        final String trim=input.substring(input.indexOf(""String_Node_Str""));
        final String content=StringUtils.splitSubstring(trim,""String_Node_Str"",3);
        fireContactIsTypingEvent(findContact(StringUtils.splitOnSpace(content)[1]));
      }
 else       if (input.indexOf(""String_Node_Str"") != -1) {
        final int index=input.indexOf(""String_Node_Str"") == -1 ? 2 : 3;
        final String[] contents=StringUtils.split(input,""String_Node_Str"",index);
        String[] split=StringUtils.splitOnSpace(contents[index - 2]);
        final Contact contact=findContact(split[1]);
        final int count=Integer.parseInt(split[3]);
        split=StringUtils.split(contents[index - 1],""String_Node_Str"");
        final int text=count - (split[0].getBytes(""String_Node_Str"").length + 4);
        fireMessageReceivedEvent(contact,new String(split[1].getBytes(""String_Node_Str""),0,text,""String_Node_Str""));
      }
    }
  }
  return input;
}","/** 
 * Read the contents of the packet being sent from the server and handle any events accordingly.
 * @return the String returned from {@link Session#read()}
 */
String read() throws IOException {
  final String input=super.read();
  if (input == null) {
    return null;
  }
  final String[] lines=StringUtils.split(input,""String_Node_Str"");
  for (int i=0; i < lines.length; i++) {
    if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] split=StringUtils.splitOnSpace(lines[i]);
      Contact contact=contactList.getContact(split[4]);
      if (contact == null) {
        contact=new Contact(split[4],split[5]);
      }
      contacts.add(contact);
      fireContactJoinedEvent(contact);
    }
 else     if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] split=StringUtils.splitOnSpace(lines[i]);
      Contact contact=contactList.getContact(split[2]);
      if (contact == null) {
        contact=new Contact(split[1],split[2]);
      }
      contacts.add(contact);
      fireContactJoinedEvent(contact);
    }
 else     if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] split=StringUtils.splitOnSpace(lines[i]);
      if (split.length == 2) {
        final Contact contact=findContact(split[1]);
        contacts.remove(contact);
        fireContactLeftEvent(contact);
        if (contacts.isEmpty()) {
          close();
        }
      }
 else {
        fireSessionTimedOutEvent();
        close();
      }
    }
 else     if (lines[i].startsWith(""String_Node_Str"")) {
      if (input.indexOf(""String_Node_Str"") != -1) {
        final String trim=input.substring(input.indexOf(""String_Node_Str""));
        final String content=StringUtils.splitSubstring(trim,""String_Node_Str"",3);
        fireContactIsTypingEvent(findContact(StringUtils.splitOnSpace(content)[1]));
      }
 else       if (input.indexOf(""String_Node_Str"") != -1) {
        final int index=input.indexOf(""String_Node_Str"") == -1 ? 2 : 3;
        final String[] contents=StringUtils.split(input,""String_Node_Str"",index);
        String[] split=StringUtils.splitOnSpace(contents[index - 2]);
        final Contact contact=findContact(split[1]);
        final int count=Integer.parseInt(split[3]);
        split=StringUtils.split(contents[index - 1],""String_Node_Str"",2);
        final int text=count - (split[0].getBytes(""String_Node_Str"").length + 4);
        fireMessageReceivedEvent(contact,new String(split[1].getBytes(""String_Node_Str""),0,text,""String_Node_Str""));
      }
    }
  }
  return input;
}",0.9996041171813144
94662,"/** 
 * Connects to the server specified during this DispatchSession's construction and attempts to retrieve a viable notification server address.
 * @param username the name to use for authentication
 * @return a ResponseCommand which holds the information received from thedispatch server
 * @throws ConnectException If the MSN servers did not respond as expected.
 * @throws IOException If an I/O error occurs during the read or write operations
 */
ResponseCommand connect(String username) throws ConnectException, IOException {
  write(""String_Node_Str"",""String_Node_Str"");
  String input=super.read();
  if (!input.startsWith(""String_Node_Str"")) {
    throw new ConnectException(""String_Node_Str"");
  }
  write(""String_Node_Str"",""String_Node_Str"" + username);
  input=super.read();
  if (!input.startsWith(""String_Node_Str"")) {
    throw new ConnectException(""String_Node_Str"");
  }
  write(""String_Node_Str"",""String_Node_Str"" + username);
  return new ResponseCommand(super.read());
}","/** 
 * Connects to the server specified during this DispatchSession's construction and attempts to retrieve a viable notification server address.
 * @param username the name to use for authentication
 * @return a ResponseCommand which holds the information received from thedispatch server
 * @throws ConnectException If the MSN servers did not respond as expected.
 * @throws IOException If an I/O error occurs during the read or write operations
 */
ResponseCommand connect(String username) throws ConnectException, IOException {
  write(""String_Node_Str"",""String_Node_Str"");
  String input=super.read().trim();
  if (!input.startsWith(""String_Node_Str"")) {
    throw new ConnectException(""String_Node_Str"");
  }
  write(""String_Node_Str"",""String_Node_Str"" + username);
  input=super.read().trim();
  if (!input.startsWith(""String_Node_Str"")) {
    throw new ConnectException(""String_Node_Str"");
  }
  write(""String_Node_Str"",""String_Node_Str"" + username);
  return new ResponseCommand(super.read().trim());
}",0.9895157264103844
94663,"/** 
 * Reads data from the channel and returns it as a String.
 * @return the contents that have been read, or <code>null</code> ifnothing is currently available
 * @throws IOException If an I/O error occurred while reading from the channel.
 */
String read() throws IOException {
  int read=is.read(buffer);
  if (read < 1) {
    return null;
  }
  return new String(buffer,0,read,""String_Node_Str"").trim();
}","/** 
 * Reads data from the channel and returns it as a String.
 * @return the contents that have been read, or <code>null</code> ifnothing is currently available
 * @throws IOException If an I/O error occurred while reading from the channel.
 */
String read() throws IOException {
  int read=is.read(buffer);
  if (read < 1) {
    return null;
  }
  return new String(buffer,0,read,""String_Node_Str"");
}",0.9914110429447852
94664,"/** 
 * Begin waiting for incoming messages indefinitely.
 */
public void run(){
  while (!isInterrupted()) {
    try {
      read();
    }
 catch (    IOException e) {
      return;
    }
  }
}","/** 
 * Begin waiting for incoming messages indefinitely.
 */
public void run(){
  while (!isInterrupted()) {
    try {
      read();
    }
 catch (    IOException e) {
      return;
    }
catch (    RuntimeException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
}",0.7575150300601202
94665,"private StyledText createStyledTextWidget(Composite parent,int styles){
  try {
    SourceViewer result=new SourceViewer(parent,null,null,true,styles);
    result.configure(new ChatRoomViewerConfiguration(EditorsUI.getPreferenceStore(),container,ChatRoomManagerView.this));
    result.setDocument(new Document());
    return result.getTextWidget();
  }
 catch (  Exception e) {
    Activator.getDefault().getLog().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,Messages.ChatRoomManagerView_WARNING_HYPERLINKING_NOT_AVAILABLE,e));
    return new StyledText(parent,styles);
  }
catch (  NoClassDefFoundError e) {
    Activator.getDefault().getLog().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,Messages.ChatRoomManagerView_WARNING_HYPERLINKING_NOT_AVAILABLE,e));
    return new StyledText(parent,styles);
  }
}","private StyledText createStyledTextWidget(Composite parent,int styles){
  SourceViewer result=null;
  try {
    result=new SourceViewer(parent,null,null,true,styles);
  }
 catch (  NoClassDefFoundError e) {
    Activator.getDefault().getLog().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,Messages.ChatRoomManagerView_WARNING_HYPERLINKING_NOT_AVAILABLE,e));
    return new StyledText(parent,styles);
  }
  result.configure(new ChatRoomViewerConfiguration(EditorsUI.getPreferenceStore(),container,ChatRoomManagerView.this));
  result.setDocument(new Document());
  return result.getTextWidget();
}",0.5194274028629857
94666,"protected Map getHyperlinkDetectorTargets(ISourceViewer sourceViewer){
  Map hyperlinkDetectorTargets=super.getHyperlinkDetectorTargets(sourceViewer);
  hyperlinkDetectorTargets.put(container.getClass().getPackage().getName(),view);
  return hyperlinkDetectorTargets;
}","protected Map getHyperlinkDetectorTargets(ISourceViewer sourceViewer){
  Map hyperlinkDetectorTargets=super.getHyperlinkDetectorTargets(sourceViewer);
  if (container != null)   hyperlinkDetectorTargets.put(container.getClass().getPackage().getName(),view);
  return hyperlinkDetectorTargets;
}",0.955595026642984
94667,"protected void setupTreeViewer(Composite parent){
  treeViewer=new TreeViewer(parent,SWT.BORDER | SWT.SINGLE | SWT.V_SCROLL);
  getSite().setSelectionProvider(treeViewer);
  presenceListener=new PresenceListener();
  treeViewer.setContentProvider(new MultiRosterContentProvider());
  treeViewer.setLabelProvider(new MultiRosterLabelProvider());
  treeViewer.addFilter(hideOfflineFilter);
  treeViewer.addFilter(hideEmptyGroupsFilter);
  treeViewer.setInput(rosterAccounts);
  treeViewer.addOpenListener(new IOpenListener(){
    public void open(    OpenEvent e){
      message((IStructuredSelection)e.getSelection());
    }
  }
);
  ToolTip toolTip=new ViewerToolTip(treeViewer.getControl());
  toolTip.setHideOnMouseDown(false);
  toolTip.setPopupDelay(200);
  toolTip.setShift(new Point(5,5));
  makeActions();
  hookContextMenu();
  contributeToActionBars();
  retrieveServices();
  hookDropSupport();
  treeViewer.expandToLevel(DEFAULT_EXPAND_LEVEL);
}","protected void setupTreeViewer(Composite parent){
  treeViewer=new TreeViewer(parent,SWT.BORDER | SWT.SINGLE | SWT.V_SCROLL);
  getSite().setSelectionProvider(treeViewer);
  presenceListener=new PresenceListener();
  treeViewer.setContentProvider(new MultiRosterContentProvider());
  treeViewer.setLabelProvider(new MultiRosterLabelProvider());
  treeViewer.addFilter(hideOfflineFilter);
  treeViewer.addFilter(hideEmptyGroupsFilter);
  treeViewer.setInput(rosterAccounts);
  treeViewer.addOpenListener(new IOpenListener(){
    public void open(    OpenEvent e){
      message((IStructuredSelection)e.getSelection());
    }
  }
);
  ToolTip toolTip=new ViewerToolTip(treeViewer.getControl());
  toolTip.setHideOnMouseDown(false);
  toolTip.setPopupDelay(200);
  toolTip.setShift(new Point(5,5));
  makeActions();
  hookContextMenu();
  contributeToActionBars();
  hookDropSupport();
  retrieveServices();
  treeViewer.expandToLevel(DEFAULT_EXPAND_LEVEL);
}",0.9769874476987448
94668,"public void createPartControl(Composite parent){
  pageBook=new PageBook(parent,SWT.NONE);
  createHelpMessage(pageBook);
  setupTreeViewer(pageBook);
  pageBook.showPage(helpMessageLabel);
}","public void createPartControl(Composite parent){
  pageBook=new PageBook(parent,SWT.NONE);
  createHelpMessage(pageBook);
  setupTreeViewer(pageBook);
  if (rosterAccounts.size() == 0)   pageBook.showPage(helpMessageLabel);
}",0.9182692307692308
94669,"public void widgetSelected(SelectionEvent e){
  verify();
}","public void widgetSelected(SelectionEvent e){
  verify(true);
}",0.9672131147540984
94670,"public void widgetDefaultSelected(SelectionEvent e){
  verify();
}","public void widgetDefaultSelected(SelectionEvent e){
  verify(true);
}",0.9705882352941176
94671,"public void modifyText(ModifyEvent e){
  verify();
}","public void modifyText(ModifyEvent e){
  verify(false);
}",0.9541284403669724
94672,"private void verify(){
  String email=emailText.getText().trim();
  if (email.equals(""String_Node_Str"")) {
    setErrorMessage(Messages.MSNConnectWizardPage_EmailAddressRequired);
  }
 else {
    Matcher matcher=emailPattern.matcher(email);
    if (!matcher.matches()) {
      setErrorMessage(Messages.MSNConnectWizardPage_EmailAddressInvalid);
    }
 else {
      restorePassword(email);
      if (passwordText.getText().equals(""String_Node_Str"")) {
        setErrorMessage(Messages.MSNConnectWizardPage_PasswordRequired);
      }
 else {
        setErrorMessage(null);
      }
    }
  }
}","/** 
 * Verifies the user's input to the wizard. Optionally sets the password for the specified email if one has been stored and is recognized.
 * @param restorePassword <tt>true</tt> if the password field should be set if a password can be found
 */
private void verify(boolean restorePassword){
  String email=emailText.getText().trim();
  if (email.equals(""String_Node_Str"")) {
    setErrorMessage(Messages.MSNConnectWizardPage_EmailAddressRequired);
  }
 else {
    Matcher matcher=emailPattern.matcher(email);
    if (!matcher.matches()) {
      setErrorMessage(Messages.MSNConnectWizardPage_EmailAddressInvalid);
    }
 else {
      if (restorePassword) {
        restorePassword(email);
      }
      if (passwordText.getText().equals(""String_Node_Str"")) {
        setErrorMessage(Messages.MSNConnectWizardPage_PasswordRequired);
      }
 else {
        setErrorMessage(null);
      }
    }
  }
}",0.7903549899531145
94673,"private void addListeners(){
  emailText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      verify();
    }
  }
);
  emailText.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
      verify();
    }
    public void widgetSelected(    SelectionEvent e){
      verify();
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      verify();
    }
  }
);
}","private void addListeners(){
  emailText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      verify(true);
    }
  }
);
  emailText.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
      verify(true);
    }
    public void widgetSelected(    SelectionEvent e){
      verify(true);
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      verify(false);
    }
  }
);
}",0.9511025886864812
94674,"public void createControl(Composite parent){
  parent=new Composite(parent,SWT.NONE);
  parent.setLayout(new GridLayout(2,false));
  GridData data=new GridData(SWT.FILL,SWT.CENTER,true,false);
  Label label=new Label(parent,SWT.LEFT);
  label.setText(Messages.MSNConnectWizardPage_EmailAddressLabel);
  emailText=new Combo(parent,SWT.SINGLE | SWT.BORDER | SWT.DROP_DOWN);
  emailText.setLayoutData(data);
  label=new Label(parent,SWT.LEFT);
  label.setText(Messages.MSNConnectWizardPage_PasswordLabel);
  passwordText=new Text(parent,SWT.SINGLE | SWT.PASSWORD | SWT.BORDER);
  passwordText.setLayoutData(data);
  restoreCombo();
  addListeners();
  if (username != null) {
    emailText.setText(username);
    restorePassword(username);
    passwordText.setFocus();
  }
  Dialog.applyDialogFont(parent);
  setControl(parent);
}","public void createControl(Composite parent){
  parent=new Composite(parent,SWT.NONE);
  parent.setLayout(new GridLayout(2,false));
  GridData data=new GridData(SWT.FILL,SWT.CENTER,true,false);
  Label label=new Label(parent,SWT.LEFT);
  label.setText(Messages.MSNConnectWizardPage_EmailAddressLabel);
  emailText=new Combo(parent,SWT.SINGLE | SWT.BORDER | SWT.DROP_DOWN);
  emailText.setLayoutData(data);
  label=new Label(parent,SWT.LEFT);
  label.setText(Messages.MSNConnectWizardPage_PasswordLabel);
  passwordText=new Text(parent,SWT.SINGLE | SWT.PASSWORD | SWT.BORDER);
  passwordText.setLayoutData(data);
  addListeners();
  restoreCombo();
  if (username != null) {
    emailText.setText(username);
    restorePassword(username);
    passwordText.setFocus();
  }
  Dialog.applyDialogFont(parent);
  setControl(parent);
}",0.9782345828295044
94675,"/** 
 * Add container to the roster view. The container provided should adapter to the IPresenceContainerAdapter. If it does not, then false will be returned.
 * @param container The container provided should adapter to the IPresenceContainerAdapter. If it does not, then false will be returned.
 * @return true if the given container can be added to this roster view.False if not.
 */
public boolean addContainer(IContainer container);","/** 
 * Add container to the roster view. The container provided should adapter to the IPresenceContainerAdapter. If it does not, then false will be returned.  Note that this method should only be called by the user interface thread, and not by some other thread.
 * @param container The container provided should adapter to the IPresenceContainerAdapter. If it does not (because container is already present in this view part), then false will be returned.
 * @return <code>true</code> if the given container can be added to this roster view.<code>false</code> if not.  If the container has already been added to this view part, then will return <code>false</code>.
 */
public boolean addContainer(IContainer container);",0.7260155574762316
94676,"public boolean addContainer(IContainer container){
  if (container == null)   return false;
  IPresenceContainerAdapter containerAdapter=(IPresenceContainerAdapter)container.getAdapter(IPresenceContainerAdapter.class);
  if (containerAdapter == null)   return false;
  MultiRosterAccount account=new MultiRosterAccount(this,container,containerAdapter);
  if (!addRosterAccount(account)) {
    return false;
  }
  IRosterManager manager=containerAdapter.getRosterManager();
  try {
    if (setAvailableAction.isChecked() || setOfflineAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.AVAILABLE));
      setOfflineAction.setChecked(false);
      setAvailableAction.setChecked(true);
    }
 else     if (setAwayAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.AWAY));
    }
 else     if (setDNDAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.DND));
    }
 else     if (setInvisibleAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.INVISIBLE));
    }
  }
 catch (  ECFException e) {
    Activator.getDefault().getLog().log(e.getStatus());
  }
  containerAdapter.getRosterManager().addPresenceListener(presenceListener);
  setStatusMenu.setVisible(true);
  getViewSite().getActionBars().getMenuManager().update(true);
  treeViewer.add(treeViewer.getInput(),account.getRoster());
  pageBook.showPage(treeViewer.getControl());
  return true;
}","public boolean addContainer(IContainer container){
  if (container == null)   return false;
  IPresenceContainerAdapter containerAdapter=(IPresenceContainerAdapter)container.getAdapter(IPresenceContainerAdapter.class);
  if (containerAdapter == null)   return false;
  if (containerPresent(container))   return false;
  MultiRosterAccount account=new MultiRosterAccount(this,container,containerAdapter);
  if (!addRosterAccount(account))   return false;
  IRosterManager manager=containerAdapter.getRosterManager();
  try {
    if (setAvailableAction.isChecked() || setOfflineAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.AVAILABLE));
      setOfflineAction.setChecked(false);
      setAvailableAction.setChecked(true);
    }
 else     if (setAwayAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.AWAY));
    }
 else     if (setDNDAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.DND));
    }
 else     if (setInvisibleAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.INVISIBLE));
    }
  }
 catch (  ECFException e) {
    Activator.getDefault().getLog().log(e.getStatus());
  }
  containerAdapter.getRosterManager().addPresenceListener(presenceListener);
  setStatusMenu.setVisible(true);
  getViewSite().getActionBars().getMenuManager().update(true);
  treeViewer.add(treeViewer.getInput(),account.getRoster());
  pageBook.showPage(treeViewer.getControl());
  return true;
}",0.9727411944869832
94677,"protected boolean addRosterAccount(MultiRosterAccount account){
  boolean result=account != null && rosterAccounts.add(account);
  if (result)   setLocalPullDownEnabled(true);
  return result;
}","protected boolean addRosterAccount(MultiRosterAccount account){
  if (account == null)   return false;
  boolean result=rosterAccounts.add(account);
  if (result)   setLocalPullDownEnabled(true);
  return result;
}",0.6323529411764706
94678,"protected void processDisconnect(DisconnectEvent e){
  final IAsynchConnection conn=(IAsynchConnection)e.getConnection();
  ID fromID=null;
synchronized (getGroupMembershipLock()) {
    fromID=getIDForConnection(conn);
    if (fromID == null)     return;
    handleLeave(fromID,conn);
  }
  if (fromID != null)   fireContainerEvent(new ContainerDisconnectedEvent(getID(),fromID));
}","protected void processDisconnect(DisconnectEvent e){
  final IAsynchConnection conn=(IAsynchConnection)e.getConnection();
  ID fromID=null;
synchronized (getGroupMembershipLock()) {
    fromID=getIDForConnection(conn);
    if (fromID == null)     return;
    handleLeave(fromID,conn);
  }
  if (fromID != null)   fireContainerEvent(new ContainerEjectedEvent(getID(),fromID,e.getException()));
}",0.9664948453608248
94679,"public void handleEvent(IContainerEvent event){
  if (event instanceof IContainerDisconnectedEvent) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MultiRosterAccount.this.multiRosterView.rosterAccountDisconnected(MultiRosterAccount.this);
      }
    }
);
  }
}","public void handleEvent(IContainerEvent event){
  if (event instanceof IContainerDisconnectedEvent || event instanceof IContainerEjectedEvent) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MultiRosterAccount.this.multiRosterView.rosterAccountDisconnected(MultiRosterAccount.this);
      }
    }
);
  }
}",0.9331259720062208
94680,"public void handleEvent(final IContainerEvent evt){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      if (evt instanceof IContainerDisconnectedEvent) {
        IContainerDisconnectedEvent cd=(IContainerDisconnectedEvent)evt;
        final ID departedContainerID=cd.getTargetID();
        ID connectedID=targetID;
        if (connectedID == null || connectedID.equals(departedContainerID)) {
          chatroomview.disconnected();
          isContainerConnected=false;
        }
      }
 else       if (evt instanceof IContainerConnectedEvent) {
        isContainerConnected=true;
        chatroomview.setEnabled(true);
        String[] roomsForTarget=getRoomsForTarget();
        for (int i=0; i < roomsForTarget.length; i++) {
          IChatRoomInfo info=manager.getChatRoomInfo(roomsForTarget[i]);
          chatroomview.joinRoom(info,getPasswordForChatRoomConnect(info));
        }
      }
    }
  }
);
}","public void handleEvent(final IContainerEvent evt){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      if (evt instanceof IContainerDisconnectedEvent || evt instanceof IContainerEjectedEvent) {
        final ID departedContainerID=((evt instanceof IContainerDisconnectedEvent) ? ((IContainerDisconnectedEvent)evt).getTargetID() : ((IContainerEjectedEvent)evt).getTargetID());
        ID connectedID=targetID;
        if (connectedID == null || connectedID.equals(departedContainerID)) {
          chatroomview.disconnected();
          isContainerConnected=false;
        }
      }
 else       if (evt instanceof IContainerConnectedEvent) {
        isContainerConnected=true;
        chatroomview.setEnabled(true);
        String[] roomsForTarget=getRoomsForTarget();
        for (int i=0; i < roomsForTarget.length; i++) {
          IChatRoomInfo info=manager.getChatRoomInfo(roomsForTarget[i]);
          chatroomview.joinRoom(info,getPasswordForChatRoomConnect(info));
        }
      }
    }
  }
);
}",0.8478371501272265
94681,"private void setupNewView() throws Exception {
  IChatRoomInfo roomInfo=manager.getChatRoomInfo(null);
  Assert.isNotNull(roomInfo,Messages.ChatRoomManagerUI_EXCEPTION_NO_ROOT_CHAT_ROOM_MANAGER);
  final IChatRoomContainer managerChatRoom=roomInfo.createChatRoomContainer();
  chatroomview.initializeWithManager(ChatRoomManagerView.getUsernameFromID(targetID),ChatRoomManagerView.getHostnameFromID(targetID),managerChatRoom,this,createChatRoomViewCloseListener());
  chatroomview.setMessageRenderer(getDefaultMessageRenderer());
  container.addListener(new IContainerListener(){
    public void handleEvent(    final IContainerEvent evt){
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          if (evt instanceof IContainerDisconnectedEvent) {
            IContainerDisconnectedEvent cd=(IContainerDisconnectedEvent)evt;
            final ID departedContainerID=cd.getTargetID();
            ID connectedID=targetID;
            if (connectedID == null || connectedID.equals(departedContainerID)) {
              chatroomview.disconnected();
              isContainerConnected=false;
            }
          }
 else           if (evt instanceof IContainerConnectedEvent) {
            isContainerConnected=true;
            chatroomview.setEnabled(true);
            String[] roomsForTarget=getRoomsForTarget();
            for (int i=0; i < roomsForTarget.length; i++) {
              IChatRoomInfo info=manager.getChatRoomInfo(roomsForTarget[i]);
              chatroomview.joinRoom(info,getPasswordForChatRoomConnect(info));
            }
          }
        }
      }
);
    }
  }
);
  managerChatRoom.addMessageListener(new IIMMessageListener(){
    public void handleMessageEvent(    IIMMessageEvent messageEvent){
      if (messageEvent instanceof IChatRoomMessageEvent) {
        IChatRoomMessage m=((IChatRoomMessageEvent)messageEvent).getChatRoomMessage();
        chatroomview.handleMessage(m.getFromID(),m.getMessage());
      }
 else       if (messageEvent instanceof IChatMessageEvent) {
        final IChatMessage chatMessage=((IChatMessageEvent)messageEvent).getChatMessage();
        chatroomview.handleChatMessage(chatMessage);
      }
    }
  }
);
}","private void setupNewView() throws Exception {
  IChatRoomInfo roomInfo=manager.getChatRoomInfo(null);
  Assert.isNotNull(roomInfo,Messages.ChatRoomManagerUI_EXCEPTION_NO_ROOT_CHAT_ROOM_MANAGER);
  final IChatRoomContainer managerChatRoom=roomInfo.createChatRoomContainer();
  chatroomview.initializeWithManager(ChatRoomManagerView.getUsernameFromID(targetID),ChatRoomManagerView.getHostnameFromID(targetID),managerChatRoom,this,createChatRoomViewCloseListener());
  chatroomview.setMessageRenderer(getDefaultMessageRenderer());
  container.addListener(new IContainerListener(){
    public void handleEvent(    final IContainerEvent evt){
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          if (evt instanceof IContainerDisconnectedEvent || evt instanceof IContainerEjectedEvent) {
            final ID departedContainerID=((evt instanceof IContainerDisconnectedEvent) ? ((IContainerDisconnectedEvent)evt).getTargetID() : ((IContainerEjectedEvent)evt).getTargetID());
            ID connectedID=targetID;
            if (connectedID == null || connectedID.equals(departedContainerID)) {
              chatroomview.disconnected();
              isContainerConnected=false;
            }
          }
 else           if (evt instanceof IContainerConnectedEvent) {
            isContainerConnected=true;
            chatroomview.setEnabled(true);
            String[] roomsForTarget=getRoomsForTarget();
            for (int i=0; i < roomsForTarget.length; i++) {
              IChatRoomInfo info=manager.getChatRoomInfo(roomsForTarget[i]);
              chatroomview.joinRoom(info,getPasswordForChatRoomConnect(info));
            }
          }
        }
      }
);
    }
  }
);
  managerChatRoom.addMessageListener(new IIMMessageListener(){
    public void handleMessageEvent(    IIMMessageEvent messageEvent){
      if (messageEvent instanceof IChatRoomMessageEvent) {
        IChatRoomMessage m=((IChatRoomMessageEvent)messageEvent).getChatRoomMessage();
        chatroomview.handleMessage(m.getFromID(),m.getMessage());
      }
 else       if (messageEvent instanceof IChatMessageEvent) {
        final IChatMessage chatMessage=((IChatMessageEvent)messageEvent).getChatMessage();
        chatroomview.handleChatMessage(chatMessage);
      }
    }
  }
);
}",0.9446051167964404
94682,"protected void doJoinRoom(final IChatRoomInfo roomInfo,final String password){
  final ID targetRoomID=roomInfo.getRoomID();
  final String targetRoomName=targetRoomID.getName();
  ChatRoom room=(ChatRoom)chatRooms.get(targetRoomName);
  if (room != null && room.isConnected()) {
    room.setSelected();
    return;
  }
  try {
    final IChatRoomContainer chatRoomContainer=roomInfo.createChatRoomContainer();
    final ChatRoom chatroom=new ChatRoom(chatRoomContainer,new ChatRoomTab(rootTabFolder,targetRoomName));
    chatRoomContainer.addMessageListener(new IIMMessageListener(){
      public void handleMessageEvent(      IIMMessageEvent messageEvent){
        if (messageEvent instanceof IChatRoomMessageEvent) {
          IChatRoomMessage m=((IChatRoomMessageEvent)messageEvent).getChatRoomMessage();
          chatroom.handleMessage(m.getFromID(),m.getMessage());
        }
      }
    }
);
    chatRoomContainer.addChatRoomParticipantListener(new IChatRoomParticipantListener(){
      public void handlePresenceUpdated(      ID fromID,      IPresence presence){
        chatroom.handlePresence(fromID,presence);
      }
      public void handleArrived(      IUser participant){
      }
      public void handleUpdated(      IUser updatedParticipant){
      }
      public void handleDeparted(      IUser participant){
      }
    }
);
    chatRoomContainer.addListener(new IContainerListener(){
      public void handleEvent(      IContainerEvent evt){
        if (evt instanceof IContainerDisconnectedEvent) {
          chatroom.disconnected();
        }
      }
    }
);
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        try {
          chatRoomContainer.connect(targetRoomID,ConnectContextFactory.createPasswordConnectContext(password));
          chatRooms.put(targetRoomName,chatroom);
        }
 catch (        Exception e) {
          MessageDialog.openError(getSite().getShell(),""String_Node_Str"",NLS.bind(""String_Node_Str"",targetRoomName,e.getLocalizedMessage()));
        }
      }
    }
);
  }
 catch (  Exception e) {
    MessageDialog.openError(getSite().getShell(),""String_Node_Str"",NLS.bind(""String_Node_Str"",targetRoomName,e.getLocalizedMessage()));
  }
}","protected void doJoinRoom(final IChatRoomInfo roomInfo,final String password){
  final ID targetRoomID=roomInfo.getRoomID();
  final String targetRoomName=targetRoomID.getName();
  ChatRoom room=(ChatRoom)chatRooms.get(targetRoomName);
  if (room != null && room.isConnected()) {
    room.setSelected();
    return;
  }
  try {
    final IChatRoomContainer chatRoomContainer=roomInfo.createChatRoomContainer();
    final ChatRoom chatroom=new ChatRoom(chatRoomContainer,new ChatRoomTab(rootTabFolder,targetRoomName));
    chatRoomContainer.addMessageListener(new IIMMessageListener(){
      public void handleMessageEvent(      IIMMessageEvent messageEvent){
        if (messageEvent instanceof IChatRoomMessageEvent) {
          IChatRoomMessage m=((IChatRoomMessageEvent)messageEvent).getChatRoomMessage();
          chatroom.handleMessage(m.getFromID(),m.getMessage());
        }
      }
    }
);
    chatRoomContainer.addChatRoomParticipantListener(new IChatRoomParticipantListener(){
      public void handlePresenceUpdated(      ID fromID,      IPresence presence){
        chatroom.handlePresence(fromID,presence);
      }
      public void handleArrived(      IUser participant){
      }
      public void handleUpdated(      IUser updatedParticipant){
      }
      public void handleDeparted(      IUser participant){
      }
    }
);
    chatRoomContainer.addListener(new IContainerListener(){
      public void handleEvent(      IContainerEvent evt){
        if (evt instanceof IContainerDisconnectedEvent || evt instanceof IContainerEjectedEvent) {
          chatroom.disconnected();
        }
      }
    }
);
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        try {
          chatRoomContainer.connect(targetRoomID,ConnectContextFactory.createPasswordConnectContext(password));
          chatRooms.put(targetRoomName,chatroom);
        }
 catch (        Exception e) {
          MessageDialog.openError(getSite().getShell(),""String_Node_Str"",NLS.bind(""String_Node_Str"",targetRoomName,e.getLocalizedMessage()));
        }
      }
    }
);
  }
 catch (  Exception e) {
    MessageDialog.openError(getSite().getShell(),""String_Node_Str"",NLS.bind(""String_Node_Str"",targetRoomName,e.getLocalizedMessage()));
  }
}",0.9908297919928428
94683,"public void handleEvent(IContainerEvent evt){
  if (evt instanceof IContainerDisconnectedEvent) {
    chatroom.disconnected();
  }
}","public void handleEvent(IContainerEvent evt){
  if (evt instanceof IContainerDisconnectedEvent || evt instanceof IContainerEjectedEvent) {
    chatroom.disconnected();
  }
}",0.8655737704918033
94684,"public void handleEvent(IContainerEvent evt){
  if (evt instanceof IContainerDisconnectedEvent) {
    chatroom.disconnected();
  }
}","public void handleEvent(IContainerEvent evt){
  if (evt instanceof IContainerDisconnectedEvent || evt instanceof IContainerEjectedEvent) {
    chatroom.disconnected();
  }
}",0.8655737704918033
94685,"protected void doJoinRoom(final String target,final String key){
  ChatRoom room=(ChatRoom)chatRooms.get(target);
  if (room != null && room.isConnected()) {
    room.setSelected();
    return;
  }
  IChatRoomInfo roomInfo=rootChatRoomManager.getChatRoomInfo(target);
  if (roomInfo == null)   return;
 else {
    try {
      final IChatRoomContainer chatRoomContainer=roomInfo.createChatRoomContainer();
      final ChatRoom chatroom=new ChatRoom(chatRoomContainer,new ChatRoomTab(rootTabFolder,target));
      chatRoomContainer.addMessageListener(new IIMMessageListener(){
        public void handleMessageEvent(        IIMMessageEvent messageEvent){
          if (messageEvent instanceof IChatRoomMessageEvent) {
            IChatRoomMessage m=((IChatRoomMessageEvent)messageEvent).getChatRoomMessage();
            chatroom.handleMessage(m.getFromID(),m.getMessage());
          }
        }
      }
);
      chatRoomContainer.addChatRoomParticipantListener(new IChatRoomParticipantListener(){
        public void handlePresenceUpdated(        ID fromID,        IPresence presence){
          chatroom.handlePresence(fromID,presence);
        }
        public void handleArrived(        IUser participant){
        }
        public void handleUpdated(        IUser updatedParticipant){
        }
        public void handleDeparted(        IUser participant){
        }
      }
);
      chatRoomContainer.addListener(new IContainerListener(){
        public void handleEvent(        IContainerEvent evt){
          if (evt instanceof IContainerDisconnectedEvent) {
            chatroom.disconnected();
          }
        }
      }
);
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          try {
            chatRoomContainer.connect(IDFactory.getDefault().createID(chatRoomContainer.getConnectNamespace(),target),ConnectContextFactory.createPasswordConnectContext(key));
            chatRooms.put(target,chatroom);
          }
 catch (          Exception e) {
            MessageDialog.openError(getSite().getShell(),""String_Node_Str"",NLS.bind(""String_Node_Str"",target,e.getLocalizedMessage()));
          }
        }
      }
);
    }
 catch (    Exception e) {
      MessageDialog.openError(getSite().getShell(),""String_Node_Str"",NLS.bind(""String_Node_Str"",target,e.getLocalizedMessage()));
    }
  }
}","protected void doJoinRoom(final String target,final String key){
  ChatRoom room=(ChatRoom)chatRooms.get(target);
  if (room != null && room.isConnected()) {
    room.setSelected();
    return;
  }
  IChatRoomInfo roomInfo=rootChatRoomManager.getChatRoomInfo(target);
  if (roomInfo == null)   return;
 else {
    try {
      final IChatRoomContainer chatRoomContainer=roomInfo.createChatRoomContainer();
      final ChatRoom chatroom=new ChatRoom(chatRoomContainer,new ChatRoomTab(rootTabFolder,target));
      chatRoomContainer.addMessageListener(new IIMMessageListener(){
        public void handleMessageEvent(        IIMMessageEvent messageEvent){
          if (messageEvent instanceof IChatRoomMessageEvent) {
            IChatRoomMessage m=((IChatRoomMessageEvent)messageEvent).getChatRoomMessage();
            chatroom.handleMessage(m.getFromID(),m.getMessage());
          }
        }
      }
);
      chatRoomContainer.addChatRoomParticipantListener(new IChatRoomParticipantListener(){
        public void handlePresenceUpdated(        ID fromID,        IPresence presence){
          chatroom.handlePresence(fromID,presence);
        }
        public void handleArrived(        IUser participant){
        }
        public void handleUpdated(        IUser updatedParticipant){
        }
        public void handleDeparted(        IUser participant){
        }
      }
);
      chatRoomContainer.addListener(new IContainerListener(){
        public void handleEvent(        IContainerEvent evt){
          if (evt instanceof IContainerDisconnectedEvent || evt instanceof IContainerEjectedEvent) {
            chatroom.disconnected();
          }
        }
      }
);
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          try {
            chatRoomContainer.connect(IDFactory.getDefault().createID(chatRoomContainer.getConnectNamespace(),target),ConnectContextFactory.createPasswordConnectContext(key));
            chatRooms.put(target,chatroom);
          }
 catch (          Exception e) {
            MessageDialog.openError(getSite().getShell(),""String_Node_Str"",NLS.bind(""String_Node_Str"",target,e.getLocalizedMessage()));
          }
        }
      }
);
    }
 catch (    Exception e) {
      MessageDialog.openError(getSite().getShell(),""String_Node_Str"",NLS.bind(""String_Node_Str"",target,e.getLocalizedMessage()));
    }
  }
}",0.9913190768579292
94686,"protected void closeProjectGroup(User user){
  if (MessageDialog.openConfirm(null,MessageLoader.getString(""String_Node_Str""),MessageLoader.getString(""String_Node_Str"") + this.view.name + ""String_Node_Str"")) {
    this.view.lch.chatGUIDestroy();
  }
}","protected void closeProjectGroup(User user){
  if (MessageDialog.openConfirm(null,MessageLoader.getString(""String_Node_Str""),MessageLoader.getFormattedString(""String_Node_Str"",this.view.name))) {
    this.view.lch.chatGUIDestroy();
  }
}",0.9281314168377824
94687,"public void handleEvent(IContainerEvent event){
  Activator activator=Activator.getDefault();
  if (activator == null)   return;
  final IContainerManager containerManager=activator.getContainerManager();
  if (containerManager == null)   return;
  IContainer container=containerManager.getContainer(event.getLocalContainerID());
  if (container == null)   return;
  if (event instanceof IContainerConnectedEvent || event instanceof IContainerDisconnectedEvent) {
    IChannelContainerAdapter cca=(IChannelContainerAdapter)container.getAdapter(IChannelContainerAdapter.class);
    if (cca == null)     return;
    ID containerID=container.getID();
    if (event instanceof IContainerConnectedEvent) {
      try {
        activator.addDocShare(containerID,cca);
      }
 catch (      ECFException e) {
        activator.getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ECFStart_ERROR_DOCUMENT_SHARE_NOT_CREATED,container.getID()),null));
      }
    }
 else     if (event instanceof IContainerDisconnectedEvent || event instanceof IContainerEjectedEvent) {
      DocShare docShare=Activator.getDefault().removeDocShare(containerID);
      if (docShare != null) {
        docShare.dispose();
      }
    }
  }
 else   if (event instanceof IContainerDisposeEvent) {
    containerManager.removeListener(containerManagerListener);
    container.removeListener(containerListener);
  }
}","public void handleEvent(IContainerEvent event){
  Activator activator=Activator.getDefault();
  if (activator == null)   return;
  final IContainerManager containerManager=activator.getContainerManager();
  if (containerManager == null)   return;
  IContainer container=containerManager.getContainer(event.getLocalContainerID());
  if (container == null)   return;
  if (event instanceof IContainerConnectedEvent || event instanceof IContainerDisconnectedEvent || event instanceof IContainerEjectedEvent) {
    IChannelContainerAdapter cca=(IChannelContainerAdapter)container.getAdapter(IChannelContainerAdapter.class);
    if (cca == null)     return;
    ID containerID=container.getID();
    if (event instanceof IContainerConnectedEvent) {
      try {
        activator.addDocShare(containerID,cca);
      }
 catch (      ECFException e) {
        activator.getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ECFStart_ERROR_DOCUMENT_SHARE_NOT_CREATED,container.getID()),null));
      }
    }
 else     if (event instanceof IContainerDisconnectedEvent || event instanceof IContainerEjectedEvent) {
      DocShare docShare=Activator.getDefault().removeDocShare(containerID);
      if (docShare != null) {
        docShare.dispose();
      }
    }
  }
 else   if (event instanceof IContainerDisposeEvent) {
    containerManager.removeListener(containerManagerListener);
    container.removeListener(containerListener);
  }
}",0.9850746268656716
94688,"protected void testReceiveHttp(final long start,final long end,String url) throws Exception {
  assertNotNull(transferInstance);
  final IFileTransferListener listener=new IFileTransferListener(){
    public void handleTransferEvent(    IFileTransferEvent event){
      if (event instanceof IIncomingFileTransferReceiveResumedEvent) {
        try {
          IIncomingFileTransferReceiveResumedEvent rse=(IIncomingFileTransferReceiveResumedEvent)event;
          session=rse.receive(outs);
        }
 catch (        Exception e) {
          fail(e.getLocalizedMessage());
        }
      }
 else       if (event instanceof IIncomingFileTransferReceiveStartEvent) {
        IIncomingFileTransferReceiveStartEvent rse=(IIncomingFileTransferReceiveStartEvent)event;
        try {
          outs=new FileOutputStream(FILENAME);
          session=rse.receive(outs);
          pausable=(IFileTransferPausable)session.getAdapter(IFileTransferPausable.class);
          if (pausable == null)           fail(""String_Node_Str"");
        }
 catch (        IOException e) {
          fail(e.getLocalizedMessage());
        }
      }
 else       if (event instanceof IIncomingFileTransferReceiveDataEvent) {
        System.out.println(""String_Node_Str"" + event);
      }
 else       if (event instanceof IIncomingFileTransferReceivePausedEvent) {
        System.out.println(""String_Node_Str"" + event);
      }
 else       if (event instanceof IIncomingFileTransferReceiveDoneEvent) {
        closeOutputStream();
        System.out.println(""String_Node_Str"" + event);
synchronized (notify) {
          isDone=true;
          notify.notify();
        }
      }
    }
  }
;
  final IFileID fileID=FileIDFactory.getDefault().createFileID(transferInstance.getRetrieveNamespace(),url);
  IFileRangeSpecification rangeSpecification=null;
  if (start != -1) {
    rangeSpecification=new IFileRangeSpecification(){
      public long getEndPosition(){
        return end;
      }
      public long getStartPosition(){
        return start;
      }
    }
;
  }
  transferInstance.sendRetrieveRequest(fileID,rangeSpecification,listener,null);
  if (!isDone) {
synchronized (notify) {
      notify.wait();
    }
  }
  final Exception e=session.getException();
  if (e != null)   throw e;
  incomingFile=new File(FILENAME);
  final long fileLength=incomingFile.length();
  final long bytesReceived=session.getBytesReceived();
  System.out.println(""String_Node_Str"" + start);
  System.out.println(""String_Node_Str"" + end);
  System.out.println(""String_Node_Str"" + bytesReceived);
  System.out.println(""String_Node_Str"" + fileLength);
  if (start != -1) {
    assertTrue(fileLength == bytesReceived);
    if (end != -1) {
      assertTrue(fileLength == (end - start + 1));
    }
  }
}","protected void testReceiveHttp(final long start,final long end,String url) throws Exception {
  assertNotNull(transferInstance);
  final IFileTransferListener listener=new IFileTransferListener(){
    public void handleTransferEvent(    IFileTransferEvent event){
      if (event instanceof IIncomingFileTransferReceiveResumedEvent) {
        try {
          final IIncomingFileTransferReceiveResumedEvent rse=(IIncomingFileTransferReceiveResumedEvent)event;
          session=rse.receive(outs);
        }
 catch (        final Exception e) {
          fail(e.getLocalizedMessage());
        }
      }
 else       if (event instanceof IIncomingFileTransferReceiveStartEvent) {
        final IIncomingFileTransferReceiveStartEvent rse=(IIncomingFileTransferReceiveStartEvent)event;
        try {
          outs=new FileOutputStream(FILENAME);
          session=rse.receive(outs);
          pausable=(IFileTransferPausable)session.getAdapter(IFileTransferPausable.class);
          if (pausable == null)           fail(""String_Node_Str"");
        }
 catch (        final IOException e) {
          fail(e.getLocalizedMessage());
        }
      }
 else       if (event instanceof IIncomingFileTransferReceiveDataEvent) {
        System.out.println(""String_Node_Str"" + event);
      }
 else       if (event instanceof IIncomingFileTransferReceivePausedEvent) {
        System.out.println(""String_Node_Str"" + event);
      }
 else       if (event instanceof IIncomingFileTransferReceiveDoneEvent) {
        closeOutputStream();
        System.out.println(""String_Node_Str"" + event);
synchronized (notify) {
          isDone=true;
          notify.notify();
        }
      }
    }
  }
;
  final IFileID fileID=FileIDFactory.getDefault().createFileID(transferInstance.getRetrieveNamespace(),url);
  IFileRangeSpecification rangeSpecification=null;
  if (start != -1) {
    rangeSpecification=new IFileRangeSpecification(){
      public long getEndPosition(){
        return end;
      }
      public long getStartPosition(){
        return start;
      }
    }
;
  }
  transferInstance.sendRetrieveRequest(fileID,rangeSpecification,listener,null);
  if (!isDone) {
synchronized (notify) {
      notify.wait();
    }
  }
  final Exception e=session.getException();
  if (e != null)   throw e;
  incomingFile=new File(FILENAME);
  final long fileLength=incomingFile.length();
  final long bytesReceived=session.getBytesReceived();
  System.out.println(""String_Node_Str"" + start);
  System.out.println(""String_Node_Str"" + end);
  System.out.println(""String_Node_Str"" + bytesReceived);
  System.out.println(""String_Node_Str"" + fileLength);
  if (start != -1) {
    assertTrue(fileLength == bytesReceived);
    if (end != -1) {
      assertTrue(fileLength == (end - start + 1));
    }
  }
}",0.9956647398843932
94689,"public void testReceivePartialFile3() throws Exception {
  try {
    testReceiveHttp(10,5,HTTP_RETRIEVE);
    fail();
  }
 catch (  final Exception e) {
  }
}","public void testReceivePartialFile3() throws Exception {
  try {
    testReceiveHttp(10,5,HTTP_RETRIEVE);
    fail();
  }
 catch (  final IncomingFileTransferException e) {
    final Throwable t=e.getCause();
    if (t != null && t instanceof InvalidFileRangeSpecificationException)     return;
    fail();
  }
}",0.6723404255319149
94690,"public void handleTransferEvent(IFileTransferEvent event){
  if (event instanceof IIncomingFileTransferReceiveResumedEvent) {
    try {
      IIncomingFileTransferReceiveResumedEvent rse=(IIncomingFileTransferReceiveResumedEvent)event;
      session=rse.receive(outs);
    }
 catch (    Exception e) {
      fail(e.getLocalizedMessage());
    }
  }
 else   if (event instanceof IIncomingFileTransferReceiveStartEvent) {
    IIncomingFileTransferReceiveStartEvent rse=(IIncomingFileTransferReceiveStartEvent)event;
    try {
      outs=new FileOutputStream(FILENAME);
      session=rse.receive(outs);
      pausable=(IFileTransferPausable)session.getAdapter(IFileTransferPausable.class);
      if (pausable == null)       fail(""String_Node_Str"");
    }
 catch (    IOException e) {
      fail(e.getLocalizedMessage());
    }
  }
 else   if (event instanceof IIncomingFileTransferReceiveDataEvent) {
    System.out.println(""String_Node_Str"" + event);
  }
 else   if (event instanceof IIncomingFileTransferReceivePausedEvent) {
    System.out.println(""String_Node_Str"" + event);
  }
 else   if (event instanceof IIncomingFileTransferReceiveDoneEvent) {
    closeOutputStream();
    System.out.println(""String_Node_Str"" + event);
synchronized (notify) {
      isDone=true;
      notify.notify();
    }
  }
}","public void handleTransferEvent(IFileTransferEvent event){
  if (event instanceof IIncomingFileTransferReceiveResumedEvent) {
    try {
      final IIncomingFileTransferReceiveResumedEvent rse=(IIncomingFileTransferReceiveResumedEvent)event;
      session=rse.receive(outs);
    }
 catch (    final Exception e) {
      fail(e.getLocalizedMessage());
    }
  }
 else   if (event instanceof IIncomingFileTransferReceiveStartEvent) {
    final IIncomingFileTransferReceiveStartEvent rse=(IIncomingFileTransferReceiveStartEvent)event;
    try {
      outs=new FileOutputStream(FILENAME);
      session=rse.receive(outs);
      pausable=(IFileTransferPausable)session.getAdapter(IFileTransferPausable.class);
      if (pausable == null)       fail(""String_Node_Str"");
    }
 catch (    final IOException e) {
      fail(e.getLocalizedMessage());
    }
  }
 else   if (event instanceof IIncomingFileTransferReceiveDataEvent) {
    System.out.println(""String_Node_Str"" + event);
  }
 else   if (event instanceof IIncomingFileTransferReceivePausedEvent) {
    System.out.println(""String_Node_Str"" + event);
  }
 else   if (event instanceof IIncomingFileTransferReceiveDoneEvent) {
    closeOutputStream();
    System.out.println(""String_Node_Str"" + event);
synchronized (notify) {
      isDone=true;
      notify.notify();
    }
  }
}",0.990874524714829
94691,"public void disconnect(){
synchronized (getConnectLock()) {
    if (isConnected()) {
      final ID groupID=getConnectedID();
      fireContainerEvent(new ContainerDisconnectingEvent(this.getID(),groupID));
synchronized (connection) {
        try {
          connection.sendSynch(groupID,serialize(ContainerMessage.createLeaveGroupMessage(getID(),groupID,getNextSequenceNumber(),getLeaveData(groupID))));
        }
 catch (        final Exception e) {
          ProviderPlugin.getDefault().log(new Status(IStatus.ERROR,ProviderPlugin.PLUGIN_ID,IStatus.ERROR,""String_Node_Str"",e));
        }
synchronized (getGroupMembershipLock()) {
          handleLeave(groupID,connection);
        }
      }
      fireContainerEvent(new ContainerDisconnectedEvent(this.getID(),groupID));
    }
  }
}","protected void disconnect(Throwable exception){
synchronized (getConnectLock()) {
    if (isConnected()) {
      final ID groupID=getConnectedID();
      if (exception == null)       fireContainerEvent(new ContainerDisconnectingEvent(this.getID(),groupID));
synchronized (connection) {
        try {
          connection.sendSynch(groupID,serialize(ContainerMessage.createLeaveGroupMessage(getID(),groupID,getNextSequenceNumber(),getLeaveData(groupID))));
        }
 catch (        final Exception e) {
          ProviderPlugin.getDefault().log(new Status(IStatus.ERROR,ProviderPlugin.PLUGIN_ID,IStatus.ERROR,""String_Node_Str"",e));
        }
synchronized (getGroupMembershipLock()) {
          handleLeave(groupID,connection);
        }
      }
      if (exception == null)       fireContainerEvent(new ContainerDisconnectedEvent(this.getID(),groupID));
 else       fireContainerEvent(new ContainerEjectedEvent(this.getID(),groupID,exception));
    }
  }
}",0.8788052843193567
94692,"protected void processDisconnect(DisconnectEvent evt){
  disconnect();
}","protected void processDisconnect(DisconnectEvent evt){
  disconnect(evt.getException());
}",0.8888888888888888
94693,"public void connectionClosed(){
  handleConnectionClosed(null);
}","public void connectionClosed(){
  handleConnectionClosed(new IOException(""String_Node_Str""));
}",0.775
94694,"public void disconnect() throws IOException {
  trace(""String_Node_Str"");
  if (socket != null) {
    socket.close();
    socket=null;
  }
}","public void disconnect(){
  trace(""String_Node_Str"");
  if (socket != null) {
    try {
      socket.close();
    }
 catch (    IOException e) {
    }
    socket=null;
  }
}",0.7667731629392971
94695,"public Object connect(ID remote,Object data,int timeout) throws IOException {
  trace(""String_Node_Str"" + remote + ""String_Node_Str""+ data+ ""String_Node_Str""+ timeout+ ""String_Node_Str"");
  if (socket != null) {
    throw new ConnectException(""String_Node_Str"" + getURL(null));
  }
  URL url=new URL(remote.getName());
  int port=url.getPort() != -1 ? url.getPort() : DEFAULT_PORT;
  socket=new Socket(url.getHost(),port);
  return null;
}","public Object connect(ID remote,Object data,int timeout) throws ECFException {
  try {
    trace(""String_Node_Str"" + remote + ""String_Node_Str""+ data+ ""String_Node_Str""+ timeout+ ""String_Node_Str"");
    if (socket != null) {
      throw new ECFException(""String_Node_Str"" + getURL(null));
    }
    URL url=new URL(remote.getName());
    int port=url.getPort() != -1 ? url.getPort() : DEFAULT_PORT;
    socket=new Socket(url.getHost(),port);
  }
 catch (  IOException e) {
    throw new ECFException(e);
  }
  return null;
}",0.8681204569055037
94696,"public void widgetSelected(SelectionEvent e){
  verifyEmail();
}","public void widgetSelected(SelectionEvent e){
  verify();
}",0.959349593495935
94697,"public void widgetDefaultSelected(SelectionEvent e){
  verifyEmail();
}","public void widgetDefaultSelected(SelectionEvent e){
  verify();
}",0.9635036496350364
94698,"public void modifyText(ModifyEvent e){
  verifyPassword();
}","public void modifyText(ModifyEvent e){
  verify();
}",0.9285714285714286
94699,"private void addListeners(){
  emailText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      verifyEmail();
    }
  }
);
  emailText.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
      verifyEmail();
    }
    public void widgetSelected(    SelectionEvent e){
      verifyEmail();
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      verifyPassword();
    }
  }
);
}","private void addListeners(){
  emailText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      verify();
    }
  }
);
  emailText.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
      verify();
    }
    public void widgetSelected(    SelectionEvent e){
      verify();
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      verify();
    }
  }
);
}",0.9437559580552908
94700,"public void createControl(Composite parent){
  parent=new Composite(parent,SWT.NONE);
  parent.setLayout(new GridLayout(2,false));
  GridData data=new GridData(SWT.FILL,SWT.CENTER,true,false);
  Label label=new Label(parent,SWT.LEFT);
  label.setText(Messages.MSNConnectWizardPage_EmailAddressLabel);
  emailText=new Combo(parent,SWT.SINGLE | SWT.BORDER | SWT.DROP_DOWN);
  emailText.setLayoutData(data);
  label=new Label(parent,SWT.LEFT);
  label.setText(Messages.MSNConnectWizardPage_PasswordLabel);
  passwordText=new Text(parent,SWT.SINGLE | SWT.PASSWORD | SWT.BORDER);
  passwordText.setLayoutData(data);
  addListeners();
  restoreCombo();
  if (username != null) {
    emailText.setText(username);
    restorePassword(username);
    passwordText.setFocus();
  }
  org.eclipse.jface.dialogs.Dialog.applyDialogFont(parent);
  setControl(parent);
}","public void createControl(Composite parent){
  parent=new Composite(parent,SWT.NONE);
  parent.setLayout(new GridLayout(2,false));
  GridData data=new GridData(SWT.FILL,SWT.CENTER,true,false);
  Label label=new Label(parent,SWT.LEFT);
  label.setText(Messages.MSNConnectWizardPage_EmailAddressLabel);
  emailText=new Combo(parent,SWT.SINGLE | SWT.BORDER | SWT.DROP_DOWN);
  emailText.setLayoutData(data);
  label=new Label(parent,SWT.LEFT);
  label.setText(Messages.MSNConnectWizardPage_PasswordLabel);
  passwordText=new Text(parent,SWT.SINGLE | SWT.PASSWORD | SWT.BORDER);
  passwordText.setLayoutData(data);
  restoreCombo();
  addListeners();
  if (username != null) {
    emailText.setText(username);
    restorePassword(username);
    passwordText.setFocus();
  }
  Dialog.applyDialogFont(parent);
  setControl(parent);
}",0.963095238095238
94701,"public void dispose(){
  if (presenceHelper != null) {
    presenceHelperID=null;
    presenceHelper=null;
  }
  if (chatRoomManager != null)   chatRoomManager.dispose();
  chatRoomManager=null;
  if (accountManager != null)   accountManager.dispose();
  accountManager=null;
  if (outgoingFileTransferContainerAdapter != null)   outgoingFileTransferContainerAdapter.dispose();
  outgoingFileTransferContainerAdapter=null;
  super.dispose();
}","public void dispose(){
  chatRoomManager.dispose();
  accountManager.dispose();
  outgoingFileTransferContainerAdapter.dispose();
  super.dispose();
}",0.4721753794266441
94702,"public URLConnection openConnection(URL u) throws IOException {
  throw new IOException(NLS.bind(Messages.Activator_EXCEPTION_URLConnection_CANNOT_BE_CREATED,u.toExternalForm()));
}","public URLConnection openConnection(URL u) throws IOException {
  throw new IOException(NLS.bind(""String_Node_Str"",u.toExternalForm()));
}",0.7774294670846394
94703,"void addBrowseExtensions(IConfigurationElement[] configElements){
  String[] existingSchemes=getPlatformSupportedSchemes();
  for (int i=0; i < configElements.length; i++) {
    final String protocol=configElements[i].getAttribute(PROTOCOL_ATTR);
    if (protocol == null || ""String_Node_Str"".equals(protocol))     return;
    String CONTRIBUTION_WARNING=Messages.Activator_WARNING_BROWSE_CONTRIBUTION_PREFIX;
    try {
      final IRemoteFileSystemBrowserFactory clazz=(IRemoteFileSystemBrowserFactory)configElements[i].createExecutableExtension(CLASS_ATTR);
      int priority=getPriority(configElements[i],CONTRIBUTION_WARNING,protocol);
      String contributorName=configElements[i].getDeclaringExtension().getContributor().getName();
      ProtocolFactory newProtocolFactory=new ProtocolFactory(clazz,priority,contributorName);
synchronized (browseFileTransferProtocolMap) {
        ProtocolFactory oldProtocolFactory=(ProtocolFactory)browseFileTransferProtocolMap.get(protocol);
        if (oldProtocolFactory != null) {
          int result=oldProtocolFactory.compareTo(newProtocolFactory);
          if (result < 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.Activator_WARNING_EXISTING_HIGHER_PRIORITY,new Object[]{CONTRIBUTION_WARNING,protocol,contributorName}),null));
            continue;
          }
 else           if (result == 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.Activator_WARNING_SAME_PRIORITY,new Object[]{CONTRIBUTION_WARNING,protocol,contributorName,new Integer(priority)}),null));
          }
 else           if (result > 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.Activator_WARNING_NEW_HIGHER_PRIORITY,new Object[]{CONTRIBUTION_WARNING,protocol,contributorName,new Integer(priority),new Integer(oldProtocolFactory.priority)}),null));
          }
        }
        if (!isSchemeRegistered(protocol,existingSchemes))         registerScheme(protocol);
        browseFileTransferProtocolMap.put(protocol,newProtocolFactory);
      }
    }
 catch (    final CoreException e) {
      Activator.getDefault().log(new Status(IStatus.ERROR,PLUGIN_ID,IStatus.ERROR,NLS.bind(Messages.Activator_EXCEPTION_LOADING_EXTENSION_POINT,BROWSE_FILETRANSFER_PROTOCOL_FACTORY_EPOINT),e));
    }
  }
}","void addBrowseExtensions(IConfigurationElement[] configElements){
  String[] existingSchemes=getPlatformSupportedSchemes();
  for (int i=0; i < configElements.length; i++) {
    final String protocol=configElements[i].getAttribute(PROTOCOL_ATTR);
    if (protocol == null || ""String_Node_Str"".equals(protocol))     return;
    String CONTRIBUTION_WARNING=""String_Node_Str"";
    try {
      final IRemoteFileSystemBrowserFactory clazz=(IRemoteFileSystemBrowserFactory)configElements[i].createExecutableExtension(CLASS_ATTR);
      int priority=getPriority(configElements[i],CONTRIBUTION_WARNING,protocol);
      String contributorName=configElements[i].getDeclaringExtension().getContributor().getName();
      ProtocolFactory newProtocolFactory=new ProtocolFactory(clazz,priority,contributorName);
synchronized (browseFileTransferProtocolMap) {
        ProtocolFactory oldProtocolFactory=(ProtocolFactory)browseFileTransferProtocolMap.get(protocol);
        if (oldProtocolFactory != null) {
          int result=oldProtocolFactory.compareTo(newProtocolFactory);
          if (result < 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(""String_Node_Str"",new Object[]{CONTRIBUTION_WARNING,protocol,contributorName}),null));
            continue;
          }
 else           if (result == 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(""String_Node_Str"",new Object[]{CONTRIBUTION_WARNING,protocol,contributorName,new Integer(priority)}),null));
          }
 else           if (result > 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(""String_Node_Str"",new Object[]{CONTRIBUTION_WARNING,protocol,contributorName,new Integer(priority),new Integer(oldProtocolFactory.priority)}),null));
          }
        }
        if (!isSchemeRegistered(protocol,existingSchemes))         registerScheme(protocol);
        browseFileTransferProtocolMap.put(protocol,newProtocolFactory);
      }
    }
 catch (    final CoreException e) {
      Activator.getDefault().log(new Status(IStatus.ERROR,PLUGIN_ID,IStatus.ERROR,NLS.bind(""String_Node_Str"",BROWSE_FILETRANSFER_PROTOCOL_FACTORY_EPOINT),e));
    }
  }
}",0.9301729660474056
94704,"void addRetrieveExtensions(IConfigurationElement[] configElements){
  String[] existingSchemes=getPlatformSupportedSchemes();
  for (int i=0; i < configElements.length; i++) {
    final String protocol=configElements[i].getAttribute(PROTOCOL_ATTR);
    if (protocol == null || ""String_Node_Str"".equals(protocol))     return;
    String CONTRIBUTION_WARNING=Messages.Activator_WARNING_RETRIEVE_CONTRIBUTION_PREFIX;
    try {
      final IRetrieveFileTransferFactory clazz=(IRetrieveFileTransferFactory)configElements[i].createExecutableExtension(CLASS_ATTR);
      int priority=getPriority(configElements[i],CONTRIBUTION_WARNING,protocol);
      String contributorName=configElements[i].getDeclaringExtension().getContributor().getName();
      ProtocolFactory newProtocolFactory=new ProtocolFactory(clazz,priority,contributorName);
synchronized (retrieveFileTransferProtocolMap) {
        ProtocolFactory oldProtocolFactory=(ProtocolFactory)retrieveFileTransferProtocolMap.get(protocol);
        if (oldProtocolFactory != null) {
          int result=oldProtocolFactory.compareTo(newProtocolFactory);
          if (result < 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.Activator_WARNING_EXISTING_HIGHER_PRIORITY,new Object[]{CONTRIBUTION_WARNING,protocol,contributorName}),null));
            continue;
          }
 else           if (result == 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.Activator_WARNING_SAME_PRIORITY,new Object[]{CONTRIBUTION_WARNING,protocol,contributorName,new Integer(priority)}),null));
          }
 else           if (result > 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.Activator_WARNING_NEW_HIGHER_PRIORITY,new Object[]{CONTRIBUTION_WARNING,protocol,contributorName,new Integer(priority),new Integer(oldProtocolFactory.priority)}),null));
          }
        }
        if (!isSchemeRegistered(protocol,existingSchemes))         registerScheme(protocol);
        retrieveFileTransferProtocolMap.put(protocol,newProtocolFactory);
      }
    }
 catch (    final CoreException e) {
      Activator.getDefault().log(new Status(IStatus.ERROR,PLUGIN_ID,IStatus.ERROR,NLS.bind(Messages.Activator_EXCEPTION_LOADING_EXTENSION_POINT,RETRIEVE_FILETRANSFER_PROTOCOL_FACTORY_EPOINT),e));
    }
  }
}","void addRetrieveExtensions(IConfigurationElement[] configElements){
  String[] existingSchemes=getPlatformSupportedSchemes();
  for (int i=0; i < configElements.length; i++) {
    final String protocol=configElements[i].getAttribute(PROTOCOL_ATTR);
    if (protocol == null || ""String_Node_Str"".equals(protocol))     return;
    String CONTRIBUTION_WARNING=""String_Node_Str"";
    try {
      final IRetrieveFileTransferFactory clazz=(IRetrieveFileTransferFactory)configElements[i].createExecutableExtension(CLASS_ATTR);
      int priority=getPriority(configElements[i],CONTRIBUTION_WARNING,protocol);
      String contributorName=configElements[i].getDeclaringExtension().getContributor().getName();
      ProtocolFactory newProtocolFactory=new ProtocolFactory(clazz,priority,contributorName);
synchronized (retrieveFileTransferProtocolMap) {
        ProtocolFactory oldProtocolFactory=(ProtocolFactory)retrieveFileTransferProtocolMap.get(protocol);
        if (oldProtocolFactory != null) {
          int result=oldProtocolFactory.compareTo(newProtocolFactory);
          if (result < 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(""String_Node_Str"",new Object[]{CONTRIBUTION_WARNING,protocol,contributorName}),null));
            continue;
          }
 else           if (result == 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(""String_Node_Str"",new Object[]{CONTRIBUTION_WARNING,protocol,contributorName,new Integer(priority)}),null));
          }
 else           if (result > 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(""String_Node_Str"",new Object[]{CONTRIBUTION_WARNING,protocol,contributorName,new Integer(priority),new Integer(oldProtocolFactory.priority)}),null));
          }
        }
        if (!isSchemeRegistered(protocol,existingSchemes))         registerScheme(protocol);
        retrieveFileTransferProtocolMap.put(protocol,newProtocolFactory);
      }
    }
 catch (    final CoreException e) {
      Activator.getDefault().log(new Status(IStatus.ERROR,PLUGIN_ID,IStatus.ERROR,NLS.bind(""String_Node_Str"",RETRIEVE_FILETRANSFER_PROTOCOL_FACTORY_EPOINT),e));
    }
  }
}",0.9298955891753676
94705,"void addSendExtensions(IConfigurationElement[] configElements){
  String[] existingSchemes=getPlatformSupportedSchemes();
  for (int i=0; i < configElements.length; i++) {
    final String protocol=configElements[i].getAttribute(PROTOCOL_ATTR);
    if (protocol == null || ""String_Node_Str"".equals(protocol))     return;
    String CONTRIBUTION_WARNING=Messages.Activator_WARNING_SEND_CONTRIBUTION_PREFIX;
    try {
      final ISendFileTransferFactory clazz=(ISendFileTransferFactory)configElements[i].createExecutableExtension(CLASS_ATTR);
      int priority=getPriority(configElements[i],CONTRIBUTION_WARNING,protocol);
      String contributorName=configElements[i].getDeclaringExtension().getContributor().getName();
      ProtocolFactory newProtocolFactory=new ProtocolFactory(clazz,priority,contributorName);
synchronized (sendFileTransferProtocolMap) {
        ProtocolFactory oldProtocolFactory=(ProtocolFactory)sendFileTransferProtocolMap.get(protocol);
        if (oldProtocolFactory != null) {
          int result=oldProtocolFactory.compareTo(newProtocolFactory);
          if (result < 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.Activator_WARNING_EXISTING_HIGHER_PRIORITY,new Object[]{CONTRIBUTION_WARNING,protocol,contributorName}),null));
            continue;
          }
 else           if (result == 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.Activator_WARNING_SAME_PRIORITY,new Object[]{CONTRIBUTION_WARNING,protocol,contributorName,new Integer(priority)}),null));
          }
 else           if (result > 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.Activator_WARNING_NEW_HIGHER_PRIORITY,new Object[]{CONTRIBUTION_WARNING,protocol,contributorName,new Integer(priority),new Integer(oldProtocolFactory.priority)}),null));
          }
        }
        if (!isSchemeRegistered(protocol,existingSchemes))         registerScheme(protocol);
        sendFileTransferProtocolMap.put(protocol,newProtocolFactory);
      }
    }
 catch (    final CoreException e) {
      Activator.getDefault().log(new Status(IStatus.ERROR,PLUGIN_ID,IStatus.ERROR,NLS.bind(Messages.Activator_EXCEPTION_LOADING_EXTENSION_POINT,SEND_FILETRANSFER_PROTOCOL_FACTORY_EPOINT),e));
    }
  }
}","void addSendExtensions(IConfigurationElement[] configElements){
  String[] existingSchemes=getPlatformSupportedSchemes();
  for (int i=0; i < configElements.length; i++) {
    final String protocol=configElements[i].getAttribute(PROTOCOL_ATTR);
    if (protocol == null || ""String_Node_Str"".equals(protocol))     return;
    String CONTRIBUTION_WARNING=""String_Node_Str"";
    try {
      final ISendFileTransferFactory clazz=(ISendFileTransferFactory)configElements[i].createExecutableExtension(CLASS_ATTR);
      int priority=getPriority(configElements[i],CONTRIBUTION_WARNING,protocol);
      String contributorName=configElements[i].getDeclaringExtension().getContributor().getName();
      ProtocolFactory newProtocolFactory=new ProtocolFactory(clazz,priority,contributorName);
synchronized (sendFileTransferProtocolMap) {
        ProtocolFactory oldProtocolFactory=(ProtocolFactory)sendFileTransferProtocolMap.get(protocol);
        if (oldProtocolFactory != null) {
          int result=oldProtocolFactory.compareTo(newProtocolFactory);
          if (result < 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(""String_Node_Str"",new Object[]{CONTRIBUTION_WARNING,protocol,contributorName}),null));
            continue;
          }
 else           if (result == 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(""String_Node_Str"",new Object[]{CONTRIBUTION_WARNING,protocol,contributorName,new Integer(priority)}),null));
          }
 else           if (result > 0) {
            Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(""String_Node_Str"",new Object[]{CONTRIBUTION_WARNING,protocol,contributorName,new Integer(priority),new Integer(oldProtocolFactory.priority)}),null));
          }
        }
        if (!isSchemeRegistered(protocol,existingSchemes))         registerScheme(protocol);
        sendFileTransferProtocolMap.put(protocol,newProtocolFactory);
      }
    }
 catch (    final CoreException e) {
      Activator.getDefault().log(new Status(IStatus.ERROR,PLUGIN_ID,IStatus.ERROR,NLS.bind(""String_Node_Str"",SEND_FILETRANSFER_PROTOCOL_FACTORY_EPOINT),e));
    }
  }
}",0.9298510684221888
94706,"private int getPriority(IConfigurationElement configElement,String warning,String protocol){
  final String priorityString=configElement.getAttribute(PRIORITY_ATTR);
  int priority=DEFAULT_PRIORITY;
  if (priorityString != null) {
    try {
      priority=new Integer(priorityString).intValue();
      priority=(priority < 0) ? 0 : priority;
    }
 catch (    NumberFormatException e) {
      Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.Activator_WARNING_PRIORITY_ERROR,new Object[]{warning,protocol,configElement.getDeclaringExtension().getContributor().getName(),priorityString,String.valueOf(DEFAULT_PRIORITY)}),null));
    }
  }
  return priority;
}","private int getPriority(IConfigurationElement configElement,String warning,String protocol){
  final String priorityString=configElement.getAttribute(PRIORITY_ATTR);
  int priority=DEFAULT_PRIORITY;
  if (priorityString != null) {
    try {
      priority=new Integer(priorityString).intValue();
      priority=(priority < 0) ? 0 : priority;
    }
 catch (    NumberFormatException e) {
      Activator.getDefault().log(new Status(IStatus.WARNING,PLUGIN_ID,IStatus.WARNING,NLS.bind(""String_Node_Str"",new Object[]{warning,protocol,configElement.getDeclaringExtension().getContributor().getName(),priorityString,String.valueOf(DEFAULT_PRIORITY)}),null));
    }
  }
  return priority;
}",0.9611510791366906
94707,"public FileTransferInfo(File file,Map properties,String description,String mimeType){
  Assert.isNotNull(file,Messages.BaseFileTransferInfo_File_Not_Null);
  this.file=file;
  this.properties=(properties == null) ? defaultProperties : properties;
  this.description=description;
  this.mimeType=mimeType;
}","public FileTransferInfo(File file,Map properties,String description,String mimeType){
  Assert.isNotNull(file,Messages.BaseFileTransferInfo_File_Not_Null);
  this.file=file;
  this.properties=(properties == null) ? new HashMap() : properties;
  this.description=description;
  this.mimeType=mimeType;
}",0.8453947368421053
94708,"public boolean addContainer(IContainer container){
  if (container == null)   return false;
  IPresenceContainerAdapter containerAdapter=(IPresenceContainerAdapter)container.getAdapter(IPresenceContainerAdapter.class);
  if (containerAdapter == null)   return false;
  MultiRosterAccount account=new MultiRosterAccount(this,container,containerAdapter);
  if (!addRosterAccount(account))   return false;
  IRosterManager manager=containerAdapter.getRosterManager();
  try {
    if (setAvailableAction.isChecked() || setOfflineAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.AVAILABLE));
      setOfflineAction.setChecked(false);
      setAvailableAction.setChecked(true);
    }
 else     if (setAwayAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.AWAY));
    }
 else     if (setDNDAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.DND));
    }
 else     if (setInvisibleAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.INVISIBLE));
    }
  }
 catch (  ECFException e) {
    Activator.getDefault().getLog().log(e.getStatus());
  }
  containerAdapter.getRosterManager().addPresenceListener(presenceListener);
  setStatusMenu.setVisible(true);
  getViewSite().getActionBars().getMenuManager().update(true);
  treeViewer.add(treeViewer.getInput(),account.getRoster());
  return true;
}","public boolean addContainer(IContainer container){
  if (container == null)   return false;
  IPresenceContainerAdapter containerAdapter=(IPresenceContainerAdapter)container.getAdapter(IPresenceContainerAdapter.class);
  if (containerAdapter == null)   return false;
  MultiRosterAccount account=new MultiRosterAccount(this,container,containerAdapter);
  if (!addRosterAccount(account)) {
    return false;
  }
  IRosterManager manager=containerAdapter.getRosterManager();
  try {
    if (setAvailableAction.isChecked() || setOfflineAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.AVAILABLE));
      setOfflineAction.setChecked(false);
      setAvailableAction.setChecked(true);
    }
 else     if (setAwayAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.AWAY));
    }
 else     if (setDNDAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.DND));
    }
 else     if (setInvisibleAction.isChecked()) {
      manager.getPresenceSender().sendPresenceUpdate(null,new Presence(null,null,IPresence.Mode.INVISIBLE));
    }
  }
 catch (  ECFException e) {
    Activator.getDefault().getLog().log(e.getStatus());
  }
  containerAdapter.getRosterManager().addPresenceListener(presenceListener);
  setStatusMenu.setVisible(true);
  getViewSite().getActionBars().getMenuManager().update(true);
  treeViewer.add(treeViewer.getInput(),account.getRoster());
  return true;
}",0.9974375400384368
94709,"protected void getResponseHeaderValues() throws IOException {
  if (getResponseCode() == -1)   throw new IOException(Messages.HttpClientRetrieveFileTransfer_INVALID_SERVER_RESPONSE_TO_PARTIAL_RANGE_REQUEST);
  Header lastModifiedHeader=getMethod.getResponseHeader(LAST_MODIFIED_HEADER);
  if (lastModifiedHeader != null) {
    lastModifiedTime=getLastModifiedTimeFromHeader();
  }
  setFileLength(getMethod.getResponseContentLength());
  fileid=new FileTransferID(getRetrieveNamespace(),getRemoteFileURL());
  Header contentDispositionHeader=getMethod.getResponseHeader(HttpHelper.CONTENT_DISPOSITION_HEADER);
  if (contentDispositionHeader != null) {
    remoteFileName=HttpHelper.getRemoteFileNameFromContentDispositionHeader(contentDispositionHeader.getValue());
  }
  if (remoteFileName == null) {
    String pathStr=getMethod.getPath();
    if (pathStr != null && pathStr.length() > 0) {
      IPath path=Path.fromPortableString(pathStr);
      if (path.segmentCount() > 0)       remoteFileName=path.lastSegment();
    }
    if (remoteFileName == null)     remoteFileName=super.getRemoteFileName();
  }
}","protected void getResponseHeaderValues() throws IOException {
  if (getResponseCode() == -1)   throw new IOException(Messages.HttpClientRetrieveFileTransfer_INVALID_SERVER_RESPONSE_TO_PARTIAL_RANGE_REQUEST);
  Header lastModifiedHeader=getMethod.getResponseHeader(LAST_MODIFIED_HEADER);
  if (lastModifiedHeader != null) {
    setLastModifiedTime(getLastModifiedTimeFromHeader());
  }
  setFileLength(getMethod.getResponseContentLength());
  fileid=new FileTransferID(getRetrieveNamespace(),getRemoteFileURL());
  Header contentDispositionHeader=getMethod.getResponseHeader(HttpHelper.CONTENT_DISPOSITION_HEADER);
  if (contentDispositionHeader != null) {
    remoteFileName=HttpHelper.getRemoteFileNameFromContentDispositionHeader(contentDispositionHeader.getValue());
  }
  if (remoteFileName == null) {
    String pathStr=getMethod.getPath();
    if (pathStr != null && pathStr.length() > 0) {
      IPath path=Path.fromPortableString(pathStr);
      if (path.segmentCount() > 0)       remoteFileName=path.lastSegment();
    }
    if (remoteFileName == null)     remoteFileName=super.getRemoteFileName();
  }
}",0.9963996399639964
94710,"public void handleEvent(IContainerEvent event){
  Activator activator=Activator.getDefault();
  if (activator == null)   return;
  final IContainerManager containerManager=activator.getContainerManager();
  if (containerManager == null)   return;
  IContainer container=containerManager.getContainer(event.getLocalContainerID());
  if (container == null)   return;
  if (event instanceof IContainerConnectedEvent || event instanceof IContainerDisconnectedEvent) {
    IChannelContainerAdapter cca=(IChannelContainerAdapter)container.getAdapter(IChannelContainerAdapter.class);
    if (cca == null)     return;
    ID containerID=container.getID();
    if (event instanceof IContainerConnectedEvent) {
      try {
        activator.addDocShare(containerID,cca);
      }
 catch (      ECFException e) {
        activator.getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ECFStart_ERROR_DOCUMENT_SHARE_NOT_CREATED,container.getID()),null));
      }
    }
 else     if (event instanceof IContainerDisconnectedEvent) {
      Activator.getDefault().removeDocShare(containerID);
    }
  }
 else   if (event instanceof IContainerDisposeEvent) {
    containerManager.removeListener(containerManagerListener);
    container.removeListener(containerListener);
  }
}","public void handleEvent(IContainerEvent event){
  Activator activator=Activator.getDefault();
  if (activator == null)   return;
  final IContainerManager containerManager=activator.getContainerManager();
  if (containerManager == null)   return;
  IContainer container=containerManager.getContainer(event.getLocalContainerID());
  if (container == null)   return;
  if (event instanceof IContainerConnectedEvent || event instanceof IContainerDisconnectedEvent) {
    IChannelContainerAdapter cca=(IChannelContainerAdapter)container.getAdapter(IChannelContainerAdapter.class);
    if (cca == null)     return;
    ID containerID=container.getID();
    if (event instanceof IContainerConnectedEvent) {
      try {
        activator.addDocShare(containerID,cca);
      }
 catch (      ECFException e) {
        activator.getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ECFStart_ERROR_DOCUMENT_SHARE_NOT_CREATED,container.getID()),null));
      }
    }
 else     if (event instanceof IContainerDisconnectedEvent || event instanceof IContainerEjectedEvent) {
      DocShare docShare=Activator.getDefault().removeDocShare(containerID);
      if (docShare != null) {
        docShare.dispose();
      }
    }
  }
 else   if (event instanceof IContainerDisposeEvent) {
    containerManager.removeListener(containerManagerListener);
    container.removeListener(containerListener);
  }
}",0.931759498340096
94711,"public void dispose(){
  getRosterManager().removeRosterSubscriptionListener(subscriptionListener);
  getRosterManager().removeRosterListener(updateListener);
  container.removeListener(containerListener);
}","public void dispose(){
  getRosterManager().removeRosterSubscriptionListener(subscriptionListener);
  getRosterManager().removeRosterListener(updateListener);
  container.removeListener(containerListener);
  final IContainerManager containerManager=Activator.getDefault().getContainerManager();
  if (containerManager != null) {
    containerManager.removeContainer(container);
  }
  container.dispose();
}",0.6753670473083198
94712,"public void handleEvent(IContainerEvent event){
  Activator activator=Activator.getDefault();
  if (activator == null)   return;
  final IContainerManager containerManager=activator.getContainerManager();
  if (containerManager == null)   return;
  IContainer container=containerManager.getContainer(event.getLocalContainerID());
  if (container == null)   return;
  if (event instanceof IContainerConnectedEvent || event instanceof IContainerDisconnectedEvent) {
    IChannelContainerAdapter cca=(IChannelContainerAdapter)container.getAdapter(IChannelContainerAdapter.class);
    if (cca == null)     return;
    ID containerID=container.getID();
    if (event instanceof IContainerConnectedEvent) {
      try {
        URLShare.addURLShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_URLSHARE_NOT_CREATED,container.getID()),null));
      }
      try {
        ViewShare.addViewShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_VIEWSHARE_NOT_CREATED,container.getID()),null));
      }
      try {
        ConsoleShare.addStackShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_CAPTURESHARE_NOT_CREATED,container.getID()),null));
      }
      try {
        ScreenCaptureShare.addScreenCaptureShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_SCREENCAPTURESHARE_NOT_CREATED,container.getID()),null));
      }
    }
 else     if (event instanceof IContainerDisconnectedEvent || event instanceof IContainerEjectedEvent) {
      URLShare.removeURLShare(containerID);
      ViewShare.removeViewShare(containerID);
      ConsoleShare.removeStackShare(containerID);
      ScreenCaptureShare.removeScreenCaptureShare(containerID);
    }
  }
 else   if (event instanceof IContainerDisposeEvent) {
    containerManager.removeListener(containerManagerListener);
    container.removeListener(containerListener);
  }
}","public void handleEvent(IContainerEvent event){
  Activator activator=Activator.getDefault();
  if (activator == null)   return;
  final IContainerManager containerManager=activator.getContainerManager();
  if (containerManager == null)   return;
  IContainer container=containerManager.getContainer(event.getLocalContainerID());
  if (container == null)   return;
  if (event instanceof IContainerConnectedEvent || event instanceof IContainerDisconnectedEvent) {
    IChannelContainerAdapter cca=(IChannelContainerAdapter)container.getAdapter(IChannelContainerAdapter.class);
    if (cca == null)     return;
    ID containerID=container.getID();
    if (event instanceof IContainerConnectedEvent) {
      try {
        URLShare.addURLShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_URLSHARE_NOT_CREATED,container.getID()),null));
      }
      try {
        ViewShare.addViewShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_VIEWSHARE_NOT_CREATED,container.getID()),null));
      }
      try {
        ScreenCaptureShare.addScreenCaptureShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_SCREENCAPTURESHARE_NOT_CREATED,container.getID()),null));
      }
    }
 else     if (event instanceof IContainerDisconnectedEvent || event instanceof IContainerEjectedEvent) {
      URLShare urlShare=URLShare.removeURLShare(containerID);
      if (urlShare != null) {
        urlShare.dispose();
      }
      ViewShare viewShare=ViewShare.removeViewShare(containerID);
      if (viewShare != null) {
        viewShare.dispose();
      }
      ScreenCaptureShare scShare=ScreenCaptureShare.removeScreenCaptureShare(containerID);
      if (scShare != null) {
        scShare.dispose();
      }
    }
  }
 else   if (event instanceof IContainerDisposeEvent) {
    containerManager.removeListener(containerManagerListener);
    container.removeListener(containerListener);
  }
}",0.7787242883856222
94713,"private void getOrCreateChannel(IChannelContainerAdapter containerAdapter,ID channelID,Map options) throws ECFException {
  if (channelID == null)   channelID=IDFactory.getDefault().createStringID(this.getClass().getName());
  channel=containerAdapter.getChannel(channelID);
  if (channel == null)   channel=containerAdapter.createChannel(channelID,listener,options);
}","private void getOrCreateChannel(IChannelContainerAdapter containerAdapter,ID channelID,Map options) throws ECFException {
  if (channelID == null)   channelID=IDFactory.getDefault().createStringID(this.getClass().getName());
  channel=containerAdapter.getChannel(channelID);
  if (channel == null)   channel=containerAdapter.createChannel(channelID,listener,options);
  adapter=containerAdapter;
}",0.9634464751958224
94714,"public synchronized void dispose(){
  if (channel != null) {
    channel.dispose();
    channel=null;
  }
}","public synchronized void dispose(){
  if (channel != null) {
    adapter.removeChannel(channel.getID());
    channel=null;
    adapter=null;
  }
}",0.7984189723320159
94715,"protected void openStreams() throws IncomingFileTransferException {
  try {
    final IFileStore fileStore=EFS.getStore(new URI(getRemoteFileURL().getPath()));
    final IFileInfo info=fileStore.fetchInfo();
    setFileLength(info.getLength());
    setInputStream(fileStore.openInputStream(0,null));
    listener.handleTransferEvent(new IIncomingFileTransferReceiveStartEvent(){
      private static final long serialVersionUID=5693211912862160540L;
      public IFileID getFileID(){
        return remoteFileID;
      }
      public IIncomingFileTransfer receive(      File localFileToSave) throws IOException {
        return receive(localFileToSave,null);
      }
      public IIncomingFileTransfer receive(      File localFileToSave,      FileTransferJob fileTransferJob) throws IOException {
        setOutputStream(new BufferedOutputStream(new FileOutputStream(localFileToSave)));
        setupAndScheduleJob(fileTransferJob);
        return RetrieveFileTransfer.this;
      }
      public String toString(){
        final StringBuffer sb=new StringBuffer(""String_Node_Str"");
        sb.append(""String_Node_Str"").append(done).append(""String_Node_Str"");
        sb.append(""String_Node_Str"").append(bytesReceived).append(""String_Node_Str"");
        return sb.toString();
      }
      public void cancel(){
        hardClose();
      }
      /** 
 * @param streamToStore
 * @return incoming file transfer instance.
 * @throws IOException not thrown in this implementation.
 */
      public IIncomingFileTransfer receive(      OutputStream streamToStore) throws IOException {
        return receive(streamToStore,null);
      }
      /** 
 * @throws IOException not actually thrown by this implementation.
 */
      public IIncomingFileTransfer receive(      OutputStream streamToStore,      FileTransferJob fileTransferJob) throws IOException {
        setOutputStream(streamToStore);
        setCloseOutputStream(false);
        setupAndScheduleJob(fileTransferJob);
        return RetrieveFileTransfer.this;
      }
    }
);
  }
 catch (  final Exception e) {
    throw new IncomingFileTransferException(e);
  }
}","protected void openStreams() throws IncomingFileTransferException {
  try {
    final IFileStore fileStore=EFS.getStore(new URI(getRemoteFileURL().getPath()));
    final IFileInfo info=fileStore.fetchInfo();
    setFileLength(info.getLength());
    setInputStream(fileStore.openInputStream(0,null));
    setLastModifiedTime(info.getLastModified());
    fileName=info.getName();
    listener.handleTransferEvent(new IIncomingFileTransferReceiveStartEvent(){
      private static final long serialVersionUID=590077256618427122L;
      public IIncomingFileTransfer getSource(){
        return RetrieveFileTransfer.this;
      }
      public IFileID getFileID(){
        return remoteFileID;
      }
      public IIncomingFileTransfer receive(      File localFileToSave) throws IOException {
        return receive(localFileToSave,null);
      }
      public IIncomingFileTransfer receive(      File localFileToSave,      FileTransferJob fileTransferJob) throws IOException {
        setOutputStream(new BufferedOutputStream(new FileOutputStream(localFileToSave)));
        setupAndScheduleJob(fileTransferJob);
        return RetrieveFileTransfer.this;
      }
      public String toString(){
        final StringBuffer sb=new StringBuffer(""String_Node_Str"");
        sb.append(""String_Node_Str"").append(done).append(""String_Node_Str"");
        sb.append(""String_Node_Str"").append(bytesReceived).append(""String_Node_Str"");
        return sb.toString();
      }
      public void cancel(){
        hardClose();
      }
      /** 
 * @param streamToStore
 * @return incoming file transfer instance.
 * @throws IOException not thrown in this implementation.
 */
      public IIncomingFileTransfer receive(      OutputStream streamToStore) throws IOException {
        return receive(streamToStore,null);
      }
      /** 
 * @throws IOException not actually thrown by this implementation.
 */
      public IIncomingFileTransfer receive(      OutputStream streamToStore,      FileTransferJob fileTransferJob) throws IOException {
        setOutputStream(streamToStore);
        setCloseOutputStream(false);
        setupAndScheduleJob(fileTransferJob);
        return RetrieveFileTransfer.this;
      }
    }
);
  }
 catch (  final Exception e) {
    throw new IncomingFileTransferException(e);
  }
}",0.9544527532290958
94716,"private void invokeRemoteEnvironmentInfo(final IRemoteCall remoteCall,IRemoteEnvironmentInfo proxy) throws Exception {
  Object result=null;
  if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getProperty((String)remoteCall.getParameters()[0]);
  }
 else   if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getCommandLineArgs();
  }
 else   if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getFrameworkArgs();
  }
 else   if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getNL();
  }
 else   if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getNonFrameworkArgs();
  }
 else   if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getOS();
  }
 else   if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getOSArch();
  }
 else   if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getWS();
  }
 else {
    showException(new Exception(""String_Node_Str""));
    return;
  }
  showResult(IRemoteEnvironmentInfo.class.getName(),remoteCall,result);
}","private void invokeRemoteEnvironmentInfo(final IRemoteCall remoteCall,IRemoteEnvironmentInfo proxy) throws Exception {
  Object result=null;
  if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getCommandLineArgs();
  }
 else   if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getFrameworkArgs();
  }
 else   if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getNL();
  }
 else   if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getNonFrameworkArgs();
  }
 else   if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getOS();
  }
 else   if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getOSArch();
  }
 else   if (remoteCall.getMethod().equals(""String_Node_Str"")) {
    result=proxy.getWS();
  }
 else {
    showException(new Exception(""String_Node_Str""));
    return;
  }
  showResult(IRemoteEnvironmentInfo.class.getName(),remoteCall,result);
}",0.9349786426198388
94717,"protected void handleEnter(){
  Text inputText=getRootTextInput();
  if (inputText.getText().trim().length() > 0)   handleTextInput(inputText.getText());
  clearInput();
  scrollToEnd(getRootTextOutput());
  rootChannelTab.makeTabItemNormal();
}","protected void handleEnter(){
  Text inputText=getRootTextInput();
  if (inputText.getText().trim().length() > 0)   handleTextInput(inputText.getText());
  clearInput();
  scrollToEnd(getRootTextOutput());
  if (rootChannelTab != null)   rootChannelTab.makeTabItemNormal();
}",0.9423076923076924
94718,"public void handleMessage(final ID fromID,final String messageBody){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (rootDisposed)       return;
      appendText(rootChannelTab,getRootTextOutput(),new ChatLine(messageBody,new ChatRoomParticipant(fromID)));
      if (rootChannelTab != null)       rootChannelTab.makeTabItemBold();
    }
  }
);
}","public void handleMessage(final ID fromID,final String messageBody){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (rootDisposed)       return;
      if (rootChannelTab != null) {
        appendText(rootChannelTab,getRootTextOutput(),new ChatLine(messageBody,new ChatRoomParticipant(fromID)));
        rootChannelTab.makeTabItemBold();
      }
    }
  }
);
}",0.8989637305699482
94719,"ChatRoom(IChatRoomContainer container,ChatRoomTab tabItem){
  Assert.isNotNull(container);
  Assert.isNotNull(tabItem);
  this.chatRoomContainer=container;
  this.chatRoomMessageSender=container.getChatRoomMessageSender();
  this.chatRoomTab=tabItem;
  options=new ArrayList();
  this.chatRoomTab.setKeyListener(this);
  this.chatRoomParticipantsLabel=tabItem.getParticipantsLabel();
  this.chatRoomParticipantViewer=tabItem.getParticipantsViewer();
  chatRoomContainer.addChatRoomAdminListener(new IChatRoomAdminListener(){
    public void handleSubjectChange(    ID from,    final String newSubject){
      chatRoomTab.getInputText().getDisplay().asyncExec(new Runnable(){
        public void run(){
          chatRoomTab.setSubject(newSubject);
        }
      }
);
    }
  }
);
  rootTabFolder.setUnselectedCloseVisible(true);
  rootTabFolder.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      itemSelected=(CTabItem)e.item;
      if (itemSelected == chatRoomTab.tabItem)       makeTabItemNormal();
      if (itemSelected == rootChannelTab.tabItem)       rootChannelTab.makeTabItemNormal();
    }
  }
);
  StyledText st=getOutputText();
  if (st != null) {
    ScrollBar vsb=st.getVerticalBar();
    if (vsb != null) {
      vsb.addSelectionListener(scrollSelectionListener);
      vsb.addDisposeListener(new DisposeListener(){
        public void widgetDisposed(        DisposeEvent e){
          StyledText ot=getOutputText();
          if (ot != null) {
            ScrollBar vb=ot.getVerticalBar();
            if (vb != null)             vb.removeSelectionListener(scrollSelectionListener);
          }
        }
      }
);
    }
  }
}","ChatRoom(IChatRoomContainer container,ChatRoomTab tabItem){
  Assert.isNotNull(container);
  Assert.isNotNull(tabItem);
  this.chatRoomContainer=container;
  this.chatRoomMessageSender=container.getChatRoomMessageSender();
  this.chatRoomTab=tabItem;
  options=new ArrayList();
  this.chatRoomTab.setKeyListener(this);
  this.chatRoomParticipantsLabel=tabItem.getParticipantsLabel();
  this.chatRoomParticipantViewer=tabItem.getParticipantsViewer();
  chatRoomContainer.addChatRoomAdminListener(new IChatRoomAdminListener(){
    public void handleSubjectChange(    ID from,    final String newSubject){
      chatRoomTab.getInputText().getDisplay().asyncExec(new Runnable(){
        public void run(){
          chatRoomTab.setSubject(newSubject);
        }
      }
);
    }
  }
);
  rootTabFolder.setUnselectedCloseVisible(true);
  rootTabFolder.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      itemSelected=(CTabItem)e.item;
      if (itemSelected == chatRoomTab.tabItem)       makeTabItemNormal();
      if (rootChannelTab != null && itemSelected == rootChannelTab.tabItem)       rootChannelTab.makeTabItemNormal();
    }
  }
);
  StyledText st=getOutputText();
  if (st != null) {
    ScrollBar vsb=st.getVerticalBar();
    if (vsb != null) {
      vsb.addSelectionListener(scrollSelectionListener);
      vsb.addDisposeListener(new DisposeListener(){
        public void widgetDisposed(        DisposeEvent e){
          StyledText ot=getOutputText();
          if (ot != null) {
            ScrollBar vb=ot.getVerticalBar();
            if (vb != null)             vb.removeSelectionListener(scrollSelectionListener);
          }
        }
      }
);
    }
  }
}",0.9926925238898258
94720,"public AbstractShare(IChannelContainerAdapter adapter,ID channelID,Map options) throws ECFException {
  Assert.isNotNull(adapter);
  Assert.isNotNull(channelID);
  channel=adapter.createChannel(channelID,listener,options);
}","public AbstractShare(IChannelContainerAdapter adapter,ID channelID,Map options) throws ECFException {
  Assert.isNotNull(adapter);
  Assert.isNotNull(channelID);
  getOrCreateChannel(adapter,channelID,options);
}",0.8073394495412844
94721,"public void handleEvent(IContainerEvent event){
  Activator activator=Activator.getDefault();
  if (activator == null)   return;
  final IContainerManager containerManager=activator.getContainerManager();
  if (containerManager == null)   return;
  IContainer container=containerManager.getContainer(event.getLocalContainerID());
  if (container == null)   return;
  if (event instanceof IContainerConnectedEvent || event instanceof IContainerDisconnectedEvent) {
    IChannelContainerAdapter cca=(IChannelContainerAdapter)container.getAdapter(IChannelContainerAdapter.class);
    if (cca == null)     return;
    ID containerID=container.getID();
    if (event instanceof IContainerConnectedEvent) {
      try {
        URLShare.addURLShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_URLSHARE_NOT_CREATED,container.getID()),null));
      }
      try {
        ViewShare.addViewShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_VIEWSHARE_NOT_CREATED,container.getID()),null));
      }
      try {
        ConsoleShare.addStackShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_CAPTURESHARE_NOT_CREATED,container.getID()),null));
      }
      try {
        ScreenCaptureShare.addScreenCaptureShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_SCREENCAPTURESHARE_NOT_CREATED,container.getID()),null));
      }
    }
 else     if (event instanceof IContainerDisconnectedEvent) {
      URLShare.removeURLShare(containerID);
      ViewShare.removeViewShare(containerID);
      ConsoleShare.removeStackShare(containerID);
      ScreenCaptureShare.removeScreenCaptureShare(containerID);
    }
  }
 else   if (event instanceof IContainerDisposeEvent) {
    containerManager.removeListener(containerManagerListener);
    container.removeListener(containerListener);
  }
}","public void handleEvent(IContainerEvent event){
  Activator activator=Activator.getDefault();
  if (activator == null)   return;
  final IContainerManager containerManager=activator.getContainerManager();
  if (containerManager == null)   return;
  IContainer container=containerManager.getContainer(event.getLocalContainerID());
  if (container == null)   return;
  if (event instanceof IContainerConnectedEvent || event instanceof IContainerDisconnectedEvent) {
    IChannelContainerAdapter cca=(IChannelContainerAdapter)container.getAdapter(IChannelContainerAdapter.class);
    if (cca == null)     return;
    ID containerID=container.getID();
    if (event instanceof IContainerConnectedEvent) {
      try {
        URLShare.addURLShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_URLSHARE_NOT_CREATED,container.getID()),null));
      }
      try {
        ViewShare.addViewShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_VIEWSHARE_NOT_CREATED,container.getID()),null));
      }
      try {
        ConsoleShare.addStackShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_CAPTURESHARE_NOT_CREATED,container.getID()),null));
      }
      try {
        ScreenCaptureShare.addScreenCaptureShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,IStatus.INFO,NLS.bind(Messages.ShareReceiversECFStart_STATUS_SCREENCAPTURESHARE_NOT_CREATED,container.getID()),null));
      }
    }
 else     if (event instanceof IContainerDisconnectedEvent || event instanceof IContainerEjectedEvent) {
      URLShare.removeURLShare(containerID);
      ViewShare.removeViewShare(containerID);
      ConsoleShare.removeStackShare(containerID);
      ScreenCaptureShare.removeScreenCaptureShare(containerID);
    }
  }
 else   if (event instanceof IContainerDisposeEvent) {
    containerManager.removeListener(containerManagerListener);
    container.removeListener(containerListener);
  }
}",0.9911722438924244
94722,"protected void fireReceiveStartEvent(){
  listener.handleTransferEvent(new IIncomingFileTransferReceiveStartEvent(){
    private static final long serialVersionUID=-59096575294481755L;
    public IFileID getFileID(){
      return remoteFileID;
    }
    public IIncomingFileTransfer receive(    File localFileToSave) throws IOException {
      return receive(localFileToSave,null);
    }
    public IIncomingFileTransfer receive(    File localFileToSave,    FileTransferJob fileTransferJob) throws IOException {
      setOutputStream(new BufferedOutputStream(new FileOutputStream(localFileToSave)));
      setupAndScheduleJob(fileTransferJob);
      return AbstractRetrieveFileTransfer.this;
    }
    /** 
 * @param streamToStore
 * @return incoming file transfer instance.
 * @throws IOException not thrown in this implementation.
 */
    public IIncomingFileTransfer receive(    OutputStream streamToStore) throws IOException {
      return receive(streamToStore,null);
    }
    /** 
 * @throws IOException not actually thrown by this implementation.
 */
    public IIncomingFileTransfer receive(    OutputStream streamToStore,    FileTransferJob fileTransferJob) throws IOException {
      setOutputStream(streamToStore);
      setCloseOutputStream(false);
      setupAndScheduleJob(fileTransferJob);
      return AbstractRetrieveFileTransfer.this;
    }
    public void cancel(){
      hardClose();
    }
    public String toString(){
      final StringBuffer sb=new StringBuffer(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(done).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(bytesReceived).append(""String_Node_Str"");
      return sb.toString();
    }
  }
);
}","protected void fireReceiveStartEvent(){
  listener.handleTransferEvent(new IIncomingFileTransferReceiveStartEvent(){
    private static final long serialVersionUID=-513800598918052184L;
    public IIncomingFileTransfer getSource(){
      return AbstractRetrieveFileTransfer.this;
    }
    public IFileID getFileID(){
      return remoteFileID;
    }
    public IIncomingFileTransfer receive(    File localFileToSave) throws IOException {
      return receive(localFileToSave,null);
    }
    public IIncomingFileTransfer receive(    File localFileToSave,    FileTransferJob fileTransferJob) throws IOException {
      setOutputStream(new BufferedOutputStream(new FileOutputStream(localFileToSave)));
      setupAndScheduleJob(fileTransferJob);
      return AbstractRetrieveFileTransfer.this;
    }
    /** 
 * @param streamToStore
 * @return incoming file transfer instance.
 * @throws IOException not thrown in this implementation.
 */
    public IIncomingFileTransfer receive(    OutputStream streamToStore) throws IOException {
      return receive(streamToStore,null);
    }
    /** 
 * @throws IOException not actually thrown by this implementation.
 */
    public IIncomingFileTransfer receive(    OutputStream streamToStore,    FileTransferJob fileTransferJob) throws IOException {
      setOutputStream(streamToStore);
      setCloseOutputStream(false);
      setupAndScheduleJob(fileTransferJob);
      return AbstractRetrieveFileTransfer.this;
    }
    public void cancel(){
      hardClose();
    }
    public String toString(){
      final StringBuffer sb=new StringBuffer(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(done).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(bytesReceived).append(""String_Node_Str"");
      return sb.toString();
    }
  }
);
}",0.9650071123755334
94723,"protected void getResponseHeaderValues() throws IOException {
  if (!isConnected())   throw new ConnectException(Messages.UrlConnectionRetrieveFileTransfer_CONNECT_EXCEPTION_NOT_CONNECTED);
  if (getResponseCode() == -1)   throw new IOException(Messages.UrlConnectionRetrieveFileTransfer_EXCEPTION_INVALID_SERVER_RESPONSE);
  lastModifiedTime=urlConnection.getLastModified();
  setFileLength(urlConnection.getContentLength());
  String contentDispositionValue=urlConnection.getHeaderField(HttpHelper.CONTENT_DISPOSITION_HEADER);
  if (contentDispositionValue != null) {
    remoteFileName=HttpHelper.getRemoteFileNameFromContentDispositionHeader(contentDispositionValue);
  }
  if (remoteFileName == null) {
    remoteFileName=super.getRemoteFileName();
  }
}","protected void getResponseHeaderValues() throws IOException {
  if (!isConnected())   throw new ConnectException(Messages.UrlConnectionRetrieveFileTransfer_CONNECT_EXCEPTION_NOT_CONNECTED);
  if (getResponseCode() == -1)   throw new IOException(Messages.UrlConnectionRetrieveFileTransfer_EXCEPTION_INVALID_SERVER_RESPONSE);
  setLastModifiedTime(urlConnection.getLastModified());
  setFileLength(urlConnection.getContentLength());
  String contentDispositionValue=urlConnection.getHeaderField(HttpHelper.CONTENT_DISPOSITION_HEADER);
  if (contentDispositionValue != null) {
    remoteFileName=HttpHelper.getRemoteFileNameFromContentDispositionHeader(contentDispositionValue);
  }
  if (remoteFileName == null) {
    remoteFileName=super.getRemoteFileName();
  }
}",0.9947437582128776
94724,"protected Control createDialogArea(Composite parent){
  parent=(Composite)super.createDialogArea(parent);
  final Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  composite.setLayout(new FillLayout());
  composite.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      e.gc.drawImage(image,0,0);
    }
  }
);
  return parent;
}","protected Control createDialogArea(Composite parent){
  final Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(width,height));
  composite.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      e.gc.drawImage(image,0,0);
    }
  }
);
  return composite;
}",0.7714987714987716
94725,"public IStatus runInUIThread(IProgressMonitor monitor){
  final Display display=getDisplay();
  final GC context=new GC(display);
  final Image image=new Image(display,display.getBounds());
  context.copyArea(image,0,0);
  context.dispose();
  final Shell shell=new Shell(display,SWT.NO_TRIM);
  shell.setLayout(new FillLayout());
  shell.setBounds(display.getBounds());
  final GC gc=new GC(shell);
  shell.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      gc.drawImage(image,0,0);
    }
  }
);
  shell.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.character == SWT.ESC)       shell.close();
    }
    public void keyReleased(    KeyEvent e){
      if (e.character == SWT.ESC)       shell.close();
    }
  }
);
  shell.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      isDragging=true;
      downX=e.x;
      downY=e.y;
    }
    public void mouseUp(    MouseEvent e){
      isDragging=false;
      final int width=Math.max(downX,e.x) - Math.min(downX,e.x);
      final int height=Math.max(downY,e.y) - Math.min(downY,e.y);
      if (width != 0 && height != 0) {
        final Image copy=new Image(display,width,height);
        gc.copyArea(copy,Math.min(downX,e.x),Math.min(downY,e.y));
        blackColor.dispose();
        whiteColor.dispose();
        final Dialog dialog=new ScreenCaptureConfirmationDialog(shell,targetID,nickName,copy,width,height,imageSender);
        dialog.open();
        shell.close();
        image.dispose();
      }
    }
  }
);
  shell.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      if (isDragging) {
        gc.drawImage(image,0,0);
        gc.setForeground(blackColor);
        gc.drawRectangle(downX,downY,e.x - downX,e.y - downY);
        gc.setForeground(whiteColor);
        gc.drawRectangle(downX - 1,downY - 1,e.x - downX + 2,e.y - downY + 2);
      }
    }
  }
);
  shell.setCursor(new Cursor(getDisplay(),SWT.CURSOR_CROSS));
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return Status.OK_STATUS;
}","public IStatus runInUIThread(IProgressMonitor monitor){
  final Display display=getDisplay();
  final GC context=new GC(display);
  final Rectangle displayBounds=display.getBounds();
  final Image image=new Image(display,displayBounds);
  context.copyArea(image,displayBounds.x,displayBounds.y);
  context.dispose();
  final Shell shell=new Shell(display,SWT.NO_TRIM);
  shell.setLayout(new FillLayout());
  shell.setBounds(displayBounds);
  final GC gc=new GC(shell);
  shell.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      gc.drawImage(image,0,0);
    }
  }
);
  shell.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.character == SWT.ESC)       shell.close();
    }
    public void keyReleased(    KeyEvent e){
      if (e.character == SWT.ESC)       shell.close();
    }
  }
);
  shell.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      isDragging=true;
      downX=e.x;
      downY=e.y;
    }
    public void mouseUp(    MouseEvent e){
      isDragging=false;
      final int width=Math.max(downX,e.x) - Math.min(downX,e.x);
      final int height=Math.max(downY,e.y) - Math.min(downY,e.y);
      if (width != 0 && height != 0) {
        final Image copy=new Image(display,width,height);
        gc.copyArea(copy,Math.min(downX,e.x),Math.min(downY,e.y));
        blackColor.dispose();
        whiteColor.dispose();
        final Dialog dialog=new ScreenCaptureConfirmationDialog(shell,targetID,nickName,copy,width,height,imageSender);
        dialog.open();
        shell.close();
        image.dispose();
      }
    }
  }
);
  shell.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      if (isDragging) {
        gc.drawImage(image,0,0);
        gc.setForeground(blackColor);
        gc.drawRectangle(downX,downY,e.x - downX,e.y - downY);
        gc.setForeground(whiteColor);
        gc.drawRectangle(downX - 1,downY - 1,e.x - downX + 2,e.y - downY + 2);
      }
    }
  }
);
  shell.setCursor(new Cursor(getDisplay(),SWT.CURSOR_CROSS));
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return Status.OK_STATUS;
}",0.9777378007645604
94726,"public void open(){
  shell.open();
}","public void open(){
  if (shell != null)   shell.open();
}",0.7789473684210526
94727,"public ShowImageShell(Display display,ID senderID,ImageWrapper imageWrapper,final DisposeListener disposeListener){
  this.shell=new Shell(display);
  this.senderID=senderID;
  this.imageWrapper=imageWrapper;
  this.shell.setBounds(0,0,imageWrapper.width,imageWrapper.height);
  this.imageData=new ArrayList();
  this.shell.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      disposeListener.widgetDisposed(e);
      ShowImageShell.this.senderID=null;
      ShowImageShell.this.imageWrapper=null;
      ShowImageShell.this.imageData=null;
    }
  }
);
}","public ShowImageShell(Display display,ID senderID,final DisposeListener disposeListener){
  this.shell=new Shell(display);
  this.senderID=senderID;
  this.shell.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      disposeListener.widgetDisposed(e);
      ShowImageShell.this.senderID=null;
      ShowImageShell.this.imageWrapper=null;
      ShowImageShell.this.imageData=null;
    }
  }
);
}",0.8442307692307692
94728,"public IContributionItem[] getContributionsForService(IServiceInfo serviceInfo){
  IServiceID serviceID=serviceInfo.getServiceID();
  List serviceTypes=Arrays.asList(serviceID.getServiceTypeID().getServices());
  String protocol=null;
  if (serviceTypes.size() == 1 && serviceTypes.contains(""String_Node_Str""))   protocol=""String_Node_Str"";
 else   if (serviceTypes.size() == 1 && serviceTypes.contains(""String_Node_Str""))   protocol=""String_Node_Str"";
 else   if (serviceTypes.size() == 1 && serviceTypes.contains(""String_Node_Str""))   protocol=""String_Node_Str"";
  if (protocol == null)   return EMPTY_CONTRIBUTION;
  URI location=serviceInfo.getLocation();
  StringBuffer buf=new StringBuffer(protocol);
  buf.append(""String_Node_Str"").append(location.getHost());
  if (location.getPort() != -1)   buf.append(""String_Node_Str"").append(location.getPort());
  IServiceProperties svcProps=serviceInfo.getServiceProperties();
  final String path=svcProps.getPropertyString(RFC2782_PATH);
  if (path != null) {
    if (path.startsWith(""String_Node_Str""))     buf.append(""String_Node_Str"");
    buf.append(path);
  }
  final String urlString=buf.toString();
  Action action=new Action(){
    public void run(){
      openBrowser(urlString);
    }
  }
;
  action.setText(NLS.bind(Messages.HttpServiceAccessHandler_MENU_TEXT,urlString));
  return new IContributionItem[]{new ActionContributionItem(action)};
}","public IContributionItem[] getContributionsForService(IServiceInfo serviceInfo){
  IServiceID serviceID=serviceInfo.getServiceID();
  List serviceTypes=Arrays.asList(serviceID.getServiceTypeID().getServices());
  String protocol=null;
  if (serviceTypes.size() == 1 && serviceTypes.contains(""String_Node_Str""))   protocol=""String_Node_Str"";
 else   if (serviceTypes.size() == 1 && serviceTypes.contains(""String_Node_Str""))   protocol=""String_Node_Str"";
 else   if (serviceTypes.size() == 1 && serviceTypes.contains(""String_Node_Str""))   protocol=""String_Node_Str"";
  if (protocol == null)   return EMPTY_CONTRIBUTION;
  URI location=serviceInfo.getLocation();
  StringBuffer buf=new StringBuffer(protocol);
  buf.append(""String_Node_Str"").append(location.getHost());
  if (location.getPort() != -1)   buf.append(""String_Node_Str"").append(location.getPort());
  IServiceProperties svcProps=serviceInfo.getServiceProperties();
  final String path=svcProps.getPropertyString(RFC2782_PATH);
  if (path != null) {
    if (!path.startsWith(""String_Node_Str""))     buf.append(""String_Node_Str"");
    buf.append(path);
  }
  final String urlString=buf.toString();
  Action action=new Action(){
    public void run(){
      openBrowser(urlString);
    }
  }
;
  action.setText(NLS.bind(Messages.HttpServiceAccessHandler_MENU_TEXT,urlString));
  return new IContributionItem[]{new ActionContributionItem(action)};
}",0.9996440014239945
94729,"public void sendRosterRemove(ID userID) throws ECFException {
  try {
    if (!(userID instanceof XMPPID))     throw new ECFException(""String_Node_Str"");
    XMPPID xmppID=(XMPPID)userID;
    getConnectionOrThrowIfNull().sendRosterRemove(xmppID.getUsernameAtHost());
  }
 catch (  Exception e) {
    traceAndThrowECFException(""String_Node_Str"",e);
  }
}","public void sendRosterRemove(ID userID) throws ECFException {
  try {
    if (!(userID instanceof XMPPID))     throw new ECFException(""String_Node_Str"");
    final XMPPID xmppID=(XMPPID)userID;
    getConnectionOrThrowIfNull().sendRosterRemove(xmppID.getUsernameAtHost());
  }
 catch (  final Exception e) {
    traceAndThrowECFException(""String_Node_Str"",e);
  }
}",0.9832869080779943
94730,"protected XMPPID createIDFromName(String uname){
  try {
    return new XMPPID(container.getConnectNamespace(),uname);
  }
 catch (  final Exception e) {
    traceStack(""String_Node_Str"",e);
    return null;
  }
}","protected XMPPID createIDFromName(String uname){
  try {
    if (uname.indexOf('@') == -1) {
      return new XMPPID(container.getConnectNamespace(),""String_Node_Str"" + ""String_Node_Str"" + uname);
    }
    return new XMPPID(container.getConnectNamespace(),uname);
  }
 catch (  final Exception e) {
    traceStack(""String_Node_Str"",e);
    return null;
  }
}",0.7447552447552448
94731,"public void sendPresenceUpdate(ID toID,org.eclipse.ecf.presence.IPresence presence) throws ECFException {
  try {
    getConnectionOrThrowIfNull().sendPresenceUpdate(toID,createPresence(presence));
  }
 catch (  IOException e) {
    traceAndThrowECFException(""String_Node_Str"",e);
  }
}","public void sendPresenceUpdate(ID toID,org.eclipse.ecf.presence.IPresence presence) throws ECFException {
  try {
    getConnectionOrThrowIfNull().sendPresenceUpdate(toID,createPresence(presence));
  }
 catch (  final IOException e) {
    traceAndThrowECFException(""String_Node_Str"",e);
  }
}",0.9896193771626296
94732,"public void sendRosterAdd(String user,String name,String[] groups) throws ECFException {
  try {
    getConnectionOrThrowIfNull().sendRosterAdd(user,name,groups);
  }
 catch (  Exception e) {
    traceAndThrowECFException(""String_Node_Str"",e);
  }
}","public void sendRosterAdd(String user,String name,String[] groups) throws ECFException {
  try {
    getConnectionOrThrowIfNull().sendRosterAdd(user,name,groups);
  }
 catch (  final Exception e) {
    traceAndThrowECFException(""String_Node_Str"",e);
  }
}",0.988095238095238
94733,"public void deactivated(){
  super.deactivated();
synchronized (this) {
    if (localGUI != null) {
      localGUI.disposeClient();
      localGUI=null;
    }
  }
  if (showImageShell != null) {
    showImageShell.close();
  }
  if (sharedObjectEventListener != null) {
    sharedObjectEventListener=null;
  }
  if (workbenchWindow != null) {
    workbenchWindow=null;
  }
  if (localResource != null) {
    localResource=null;
  }
}","public void deactivated(){
  super.deactivated();
synchronized (this) {
    if (localGUI != null) {
      localGUI.disposeClient();
      localGUI=null;
    }
  }
  shells.clear();
  if (sharedObjectEventListener != null) {
    sharedObjectEventListener=null;
  }
  if (workbenchWindow != null) {
    workbenchWindow=null;
  }
  if (localResource != null) {
    localResource=null;
  }
}",0.5609756097560976
94734,"protected void handleShowImageData(final ID id,final byte[] data,final Boolean done){
  final Display display=localGUI.getTextControl().getDisplay();
  display.asyncExec(new Runnable(){
    public void run(){
      if (showImageShell != null && showImageShell.getSenderID().equals(id)) {
        showImageShell.addData(data);
        if (done.booleanValue())         showImageShell.showImage();
      }
    }
  }
);
}","protected void handleShowImageData(final ID id,final byte[] data,final Boolean done){
  final ShowImageShell showImageShell=(ShowImageShell)shells.get(id);
  if (showImageShell != null) {
    final Display display=showImageShell.getDisplay();
    if (display != null) {
      display.asyncExec(new Runnable(){
        public void run(){
          showImageShell.addData(data);
          if (done.booleanValue())           showImageShell.showImage();
        }
      }
);
    }
  }
}",0.6451612903225806
94735,"public void widgetDisposed(DisposeEvent e){
  showImageShell=null;
}","public void widgetDisposed(DisposeEvent e){
  shells.remove(id);
}",0.8059701492537313
94736,"protected void handleShowImageStart(final ID id,final String fromUser,final ImageWrapper imageWrapper){
  final Display display=localGUI.getTextControl().getDisplay();
  display.asyncExec(new Runnable(){
    public void run(){
      if (showImageShell == null) {
        showImageShell=new ShowImageShell(display,id,imageWrapper,new DisposeListener(){
          public void widgetDisposed(          DisposeEvent e){
            showImageShell=null;
          }
        }
);
        showImageShell.setText(Messages.EclipseCollabSharedObject_SCREEN_CAPTURE_FROM + fromUser);
        showImageShell.open();
      }
    }
  }
);
}","protected void handleShowImageStart(final ID id,final String fromUser,final ImageWrapper imageWrapper){
  final Display display=localGUI.getTextControl().getDisplay();
  display.asyncExec(new Runnable(){
    public void run(){
      ShowImageShell showImageShell=(ShowImageShell)shells.get(id);
      if (showImageShell == null) {
        showImageShell=new ShowImageShell(display,id,new DisposeListener(){
          public void widgetDisposed(          DisposeEvent e){
            shells.remove(id);
          }
        }
);
        shells.put(id,showImageShell);
      }
      showImageShell.initialize(Messages.EclipseCollabSharedObject_SCREEN_CAPTURE_FROM + fromUser,imageWrapper);
      showImageShell.open();
    }
  }
);
}",0.8008849557522124
94737,"private void retrieveBuddyList() throws IOException {
  write(""String_Node_Str"",""String_Node_Str"");
  BufferedReader reader=new BufferedReader(new InputStreamReader(getInputStream(),""String_Node_Str""));
  String input=reader.readLine();
  while (input == null || !input.startsWith(""String_Node_Str"")) {
    input=reader.readLine();
  }
  String[] split=StringUtils.splitOnSpace(input);
  int contacts=Integer.parseInt(split[4]);
  while (!input.startsWith(""String_Node_Str"")) {
    if (input.startsWith(""String_Node_Str"")) {
      client.internalSetDisplayName(StringUtils.splitSubstring(input,""String_Node_Str"",2));
    }
 else     if (input.startsWith(""String_Node_Str"")) {
      split=StringUtils.splitOnSpace(input);
      list.addGroup(split[2],new Group(URLDecoder.decode(split[1])));
    }
    input=reader.readLine();
  }
  int count=0;
  while (true) {
    if (input.startsWith(""String_Node_Str"")) {
      count++;
      String[] contact=StringUtils.splitOnSpace(input);
      String email=contact[1].substring(2);
switch (contact.length) {
case 3:
        list.internalAddContact(email,email);
      break;
case 5:
    list.addContact(email,email,contact[3].substring(2));
  break;
default :
list.addContact(contact[2].substring(2),email,contact[3].substring(2),contact[5]);
break;
}
if (count == contacts) {
break;
}
}
input=reader.readLine();
}
write(""String_Node_Str"",client.getStatus().getLiteral() + ""String_Node_Str"");
idle();
ping();
}","private void retrieveBuddyList() throws IOException {
  write(""String_Node_Str"",""String_Node_Str"");
  BufferedReader reader=new BufferedReader(new InputStreamReader(getInputStream(),""String_Node_Str""));
  String input=reader.readLine();
  while (input == null || !input.startsWith(""String_Node_Str"")) {
    input=reader.readLine();
  }
  String[] split=StringUtils.splitOnSpace(input);
  int contacts=Integer.parseInt(split[4]);
  while (!input.startsWith(""String_Node_Str"")) {
    if (input.startsWith(""String_Node_Str"")) {
      client.internalSetDisplayName(StringUtils.splitSubstring(input,""String_Node_Str"",2));
    }
 else     if (input.startsWith(""String_Node_Str"")) {
      split=StringUtils.splitOnSpace(input);
      list.addGroup(split[2],new Group(URLDecoder.decode(split[1])));
    }
    input=reader.readLine();
  }
  int count=0;
  while (true) {
    if (input.startsWith(""String_Node_Str"")) {
      count++;
      String[] contact=StringUtils.splitOnSpace(input);
      String email=contact[1].substring(2);
      if (email.indexOf('@') != -1) {
switch (contact.length) {
case 3:
          list.internalAddContact(email,email);
        break;
case 5:
      list.addContact(email,email,contact[3].substring(2));
    break;
default :
  list.addContact(contact[2].substring(2),email,contact[3].substring(2),contact[5]);
break;
}
}
if (count == contacts) {
break;
}
}
input=reader.readLine();
}
write(""String_Node_Str"",client.getStatus().getLiteral() + ""String_Node_Str"");
idle();
ping();
}",0.983073798239675
94738,"protected void buttonPressed(int buttonId){
  if (buttonId == IDialogConstants.OK_ID) {
    userid=useridText.getText();
    passwd=passwordText.getText();
    filename=fileLocation.getText();
    File f=new File(filename);
    if (f.exists()) {
      if (MessageDialog.openQuestion(getShell(),Messages.getString(""String_Node_Str""),NLS.bind(Messages.getString(""String_Node_Str""),filename))) {
        super.buttonPressed(buttonId);
      }
      fileLocation.setFocus();
      return;
    }
  }
  super.buttonPressed(buttonId);
}","protected void buttonPressed(int buttonId){
  if (buttonId == IDialogConstants.OK_ID) {
    userid=useridText.getText();
    passwd=passwordText.getText();
    filename=fileLocation.getText();
    File f=new File(filename);
    if (f.exists()) {
      if (MessageDialog.openQuestion(getShell(),Messages.getString(""String_Node_Str""),NLS.bind(Messages.getString(""String_Node_Str""),filename))) {
        super.buttonPressed(buttonId);
      }
 else       fileLocation.setFocus();
      return;
    }
  }
  super.buttonPressed(buttonId);
}",0.9943609022556392
94739,"private void verify(){
  String text=connectText.getText();
  passwordText.setText(""String_Node_Str"");
  if (text.equals(""String_Node_Str"")) {
    updateStatus(Messages.XMPPConnectWizardPage_WIZARD_STATUS);
  }
 else   if (text.indexOf('@') == -1) {
    updateStatus(Messages.XMPPConnectWizardPage_WIZARD_STATUS_INCOMPLETE);
  }
 else {
    updateStatus(null);
    restorePassword(text);
  }
}","private void verify(){
  String text=connectText.getText();
  if (text.equals(""String_Node_Str"")) {
    updateStatus(Messages.XMPPConnectWizardPage_WIZARD_STATUS);
  }
 else   if (text.indexOf('@') == -1) {
    updateStatus(Messages.XMPPConnectWizardPage_WIZARD_STATUS_INCOMPLETE);
  }
 else {
    updateStatus(null);
    restorePassword(text);
  }
}",0.9421265141318976
94740,"private void verify(){
  String text=connectText.getText();
  passwordText.setText(""String_Node_Str"");
  if (text.equals(""String_Node_Str"")) {
    updateStatus(Messages.XMPPSConnectWizardPage_WIZARD_PAGE_STATUS);
  }
 else   if (text.indexOf('@') == -1) {
    updateStatus(Messages.XMPPConnectWizardPage_WIZARD_STATUS_INCOMPLETE);
  }
 else {
    updateStatus(null);
    restorePassword(text);
  }
}","private void verify(){
  String text=connectText.getText();
  if (text.equals(""String_Node_Str"")) {
    updateStatus(Messages.XMPPSConnectWizardPage_WIZARD_PAGE_STATUS);
  }
 else   if (text.indexOf('@') == -1) {
    updateStatus(Messages.XMPPConnectWizardPage_WIZARD_STATUS_INCOMPLETE);
  }
 else {
    updateStatus(null);
    restorePassword(text);
  }
}",0.943046357615894
94741,"public void handleEvent(IContainerEvent event){
  final IContainerManager containerManager=Activator.getDefault().getContainerManager();
  if (containerManager == null)   return;
  IContainer container=containerManager.getContainer(event.getLocalContainerID());
  if (container == null)   return;
  if (event instanceof IContainerConnectedEvent || event instanceof IContainerDisconnectedEvent) {
    IChannelContainerAdapter cca=(IChannelContainerAdapter)container.getAdapter(IChannelContainerAdapter.class);
    if (cca == null)     return;
    ID containerID=container.getID();
    if (event instanceof IContainerConnectedEvent) {
      try {
        Activator.getDefault().addDocShare(containerID,cca);
      }
 catch (      ECFException e) {
        Activator.getDefault().getLog().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.ECFStart_ERROR_DOCUMENT_SHARE_NOT_CREATED,container.getID()),null));
      }
    }
 else     if (event instanceof IContainerDisconnectedEvent) {
      Activator.getDefault().removeDocShare(containerID);
    }
  }
 else   if (event instanceof IContainerDisposeEvent) {
    containerManager.removeListener(containerManagerListener);
    container.removeListener(containerListener);
  }
}","public void handleEvent(IContainerEvent event){
  Activator activator=Activator.getDefault();
  if (activator == null)   return;
  final IContainerManager containerManager=activator.getContainerManager();
  if (containerManager == null)   return;
  IContainer container=containerManager.getContainer(event.getLocalContainerID());
  if (container == null)   return;
  if (event instanceof IContainerConnectedEvent || event instanceof IContainerDisconnectedEvent) {
    IChannelContainerAdapter cca=(IChannelContainerAdapter)container.getAdapter(IChannelContainerAdapter.class);
    if (cca == null)     return;
    ID containerID=container.getID();
    if (event instanceof IContainerConnectedEvent) {
      try {
        activator.addDocShare(containerID,cca);
      }
 catch (      ECFException e) {
        activator.getLog().log(new Status(IStatus.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,NLS.bind(Messages.ECFStart_ERROR_DOCUMENT_SHARE_NOT_CREATED,container.getID()),null));
      }
    }
 else     if (event instanceof IContainerDisconnectedEvent) {
      Activator.getDefault().removeDocShare(containerID);
    }
  }
 else   if (event instanceof IContainerDisposeEvent) {
    containerManager.removeListener(containerManagerListener);
    container.removeListener(containerListener);
  }
}",0.8238057948316366
94742,"private void verifyEmail(){
  String email=emailText.getText().trim();
  passwordText.setText(""String_Node_Str"");
  if (email.equals(""String_Node_Str"")) {
    setErrorMessage(Messages.MSNConnectWizardPage_EmailAddressRequired);
  }
 else   if (email.indexOf('@') == -1) {
    setErrorMessage(Messages.MSNConnectWizardPage_EmailAddressInvalid);
  }
 else {
    setErrorMessage(null);
    restorePassword(email);
  }
}","private void verifyEmail(){
  String email=emailText.getText().trim();
  if (email.equals(""String_Node_Str"")) {
    setErrorMessage(Messages.MSNConnectWizardPage_EmailAddressRequired);
  }
 else   if (email.indexOf('@') == -1) {
    setErrorMessage(Messages.MSNConnectWizardPage_EmailAddressInvalid);
  }
 else {
    setErrorMessage(null);
    restorePassword(email);
  }
}",0.9455006337135616
94743,"protected void openStreams() throws IncomingFileTransferException {
  try {
    final IFileStore fileStore=EFS.getStore(new URI(getRemoteFileURL().getPath()));
    final IFileInfo info=fileStore.fetchInfo();
    setFileLength(info.getLength());
    setInputStream(fileStore.openInputStream(0,null));
    listener.handleTransferEvent(new IIncomingFileTransferReceiveStartEvent(){
      private static final long serialVersionUID=5693211912862160540L;
      public IFileID getFileID(){
        return remoteFileID;
      }
      public IIncomingFileTransfer receive(      File localFileToSave) throws IOException {
        setOutputStream(new BufferedOutputStream(new FileOutputStream(localFileToSave)));
        job=new FileTransferJob(getRemoteFileURL().toString());
        job.schedule();
        return RetrieveFileTransfer.this;
      }
      public String toString(){
        final StringBuffer sb=new StringBuffer(""String_Node_Str"");
        sb.append(""String_Node_Str"").append(done).append(""String_Node_Str"");
        sb.append(""String_Node_Str"").append(bytesReceived).append(""String_Node_Str"");
        return sb.toString();
      }
      public void cancel(){
        hardClose();
      }
      public IIncomingFileTransfer receive(      OutputStream streamToStore) throws IOException {
        setOutputStream(streamToStore);
        setCloseOutputStream(false);
        job=new FileTransferJob(getRemoteFileURL().toString());
        job.schedule();
        return RetrieveFileTransfer.this;
      }
    }
);
  }
 catch (  final Exception e) {
    throw new IncomingFileTransferException(e);
  }
}","protected void openStreams() throws IncomingFileTransferException {
  try {
    final IFileStore fileStore=EFS.getStore(new URI(getRemoteFileURL().getPath()));
    final IFileInfo info=fileStore.fetchInfo();
    setFileLength(info.getLength());
    setInputStream(fileStore.openInputStream(0,null));
    listener.handleTransferEvent(new IIncomingFileTransferReceiveStartEvent(){
      private static final long serialVersionUID=5693211912862160540L;
      public IFileID getFileID(){
        return remoteFileID;
      }
      public IIncomingFileTransfer receive(      File localFileToSave) throws IOException {
        return receive(localFileToSave,null);
      }
      public IIncomingFileTransfer receive(      File localFileToSave,      FileTransferJob fileTransferJob) throws IOException {
        setOutputStream(new BufferedOutputStream(new FileOutputStream(localFileToSave)));
        setupAndScheduleJob(fileTransferJob);
        return RetrieveFileTransfer.this;
      }
      public String toString(){
        final StringBuffer sb=new StringBuffer(""String_Node_Str"");
        sb.append(""String_Node_Str"").append(done).append(""String_Node_Str"");
        sb.append(""String_Node_Str"").append(bytesReceived).append(""String_Node_Str"");
        return sb.toString();
      }
      public void cancel(){
        hardClose();
      }
      /** 
 * @param streamToStore
 * @return incoming file transfer instance.
 * @throws IOException not thrown in this implementation.
 */
      public IIncomingFileTransfer receive(      OutputStream streamToStore) throws IOException {
        return receive(streamToStore,null);
      }
      /** 
 * @throws IOException not actually thrown by this implementation.
 */
      public IIncomingFileTransfer receive(      OutputStream streamToStore,      FileTransferJob fileTransferJob) throws IOException {
        setOutputStream(streamToStore);
        setCloseOutputStream(false);
        setupAndScheduleJob(fileTransferJob);
        return RetrieveFileTransfer.this;
      }
    }
);
  }
 catch (  final Exception e) {
    throw new IncomingFileTransferException(e);
  }
}",0.4335927019050174
94744,"public IIncomingFileTransfer receive(OutputStream streamToStore) throws IOException {
  setOutputStream(streamToStore);
  setCloseOutputStream(false);
  job=new FileTransferJob(getRemoteFileURL().toString());
  job.schedule();
  return RetrieveFileTransfer.this;
}","/** 
 * @throws IOException not actually thrown by this implementation.
 */
public IIncomingFileTransfer receive(OutputStream streamToStore,FileTransferJob fileTransferJob) throws IOException {
  setOutputStream(streamToStore);
  setCloseOutputStream(false);
  setupAndScheduleJob(fileTransferJob);
  return RetrieveFileTransfer.this;
}",0.5533333333333333
94745,"protected void openStreams() throws SendFileTransferException {
  try {
    setInputStream(new BufferedInputStream(new FileInputStream(getFileTransferInfo().getFile())));
    final IFileStore fileStore=EFS.getStore(new URI(getRemoteFileURL().getPath()));
    setOutputStream(fileStore.openOutputStream(0,null));
    listener.handleTransferEvent(new IOutgoingFileTransferResponseEvent(){
      private static final long serialVersionUID=8414116325104138848L;
      public String toString(){
        final StringBuffer sb=new StringBuffer(""String_Node_Str"");
        sb.append(""String_Node_Str"").append(done).append(""String_Node_Str"");
        sb.append(""String_Node_Str"").append(bytesSent).append(""String_Node_Str"");
        return sb.toString();
      }
      public boolean requestAccepted(){
        return true;
      }
      public IOutgoingFileTransfer getSource(){
        return SendFileTransfer.this;
      }
    }
);
  }
 catch (  final Exception e) {
    throw new SendFileTransferException(e);
  }
}","protected void openStreams() throws SendFileTransferException {
  try {
    setInputStream(new BufferedInputStream(new FileInputStream(getFileTransferInfo().getFile())));
    final IFileStore fileStore=EFS.getStore(new URI(getRemoteFileURL().getPath()));
    setOutputStream(fileStore.openOutputStream(0,null));
  }
 catch (  final Exception e) {
    throw new SendFileTransferException(e);
  }
}",0.5633001422475107
94746,"protected void setupAndScheduleJob(){
  job=new FileTransferJob(getRemoteFileURL().toString());
  job.schedule();
}","protected void setupAndScheduleJob(){
  if (fileTransferJob == null)   fileTransferJob=new FileTransferJob(createJobName());
  fileTransferJob.setFileTransferRunnable(fileTransferRunnable);
  job=fileTransferJob;
  job.schedule();
}",0.3342939481268011
94747,"protected void fireSendStartEvent(){
  listener.handleTransferEvent(new IOutgoingFileTransferResponseEvent(){
    private static final long serialVersionUID=2171381825030082432L;
    public String toString(){
      final StringBuffer sb=new StringBuffer(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(done).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(bytesSent).append(""String_Node_Str"");
      return sb.toString();
    }
    public boolean requestAccepted(){
      return true;
    }
    public IOutgoingFileTransfer getSource(){
      return AbstractOutgoingFileTransfer.this;
    }
  }
);
}","protected void fireSendStartEvent(){
  listener.handleTransferEvent(new IOutgoingFileTransferResponseEvent(){
    private static final long serialVersionUID=2171381825030082432L;
    public String toString(){
      final StringBuffer sb=new StringBuffer(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(done).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(bytesSent).append(""String_Node_Str"");
      return sb.toString();
    }
    public boolean requestAccepted(){
      return true;
    }
    public IOutgoingFileTransfer getSource(){
      return AbstractOutgoingFileTransfer.this;
    }
    public void setFileTransferJob(    org.eclipse.ecf.filetransfer.FileTransferJob ftj){
      AbstractOutgoingFileTransfer.this.fileTransferJob=ftj;
    }
  }
);
}",0.8856140350877193
94748,"protected void openStreams() throws SendFileTransferException {
  try {
    File localFile=getFileTransferInfo().getFile();
    setInputStream(new BufferedInputStream(new FileInputStream(localFile)));
    connect();
    setOutputStream(urlConnection.getOutputStream());
    fireSendStartEvent();
  }
 catch (  final Exception e) {
    throw new SendFileTransferException(NLS.bind(Messages.UrlConnectionOutgoingFileTransfer_EXCEPTION_COULD_NOT_CONNECT,getRemoteFileURL().toString()),e);
  }
}","protected void openStreams() throws SendFileTransferException {
  try {
    File localFile=getFileTransferInfo().getFile();
    setInputStream(new BufferedInputStream(new FileInputStream(localFile)));
    connect();
    setOutputStream(urlConnection.getOutputStream());
  }
 catch (  final Exception e) {
    throw new SendFileTransferException(NLS.bind(Messages.UrlConnectionOutgoingFileTransfer_EXCEPTION_COULD_NOT_CONNECT,getRemoteFileURL().toString()),e);
  }
}",0.9728033472803348
94749,"protected void openStreams() throws SendFileTransferException {
  IFileTransferInfo localFileTransferInfo=getFileTransferInfo();
  Assert.isNotNull(localFileTransferInfo);
  File inputFile=localFileTransferInfo.getFile();
  try {
    setInputStream(new BufferedInputStream(new FileInputStream(inputFile)));
  }
 catch (  Exception e) {
    hardClose();
    throw new SendFileTransferException(NLS.bind(Messages.LocalFileOutgoingFileTransfer_EXCEPTION_OPENING_FOR_INPUT,inputFile));
  }
  URL url=getRemoteFileURL();
  Assert.isNotNull(url);
  try {
    File outputFile=new File(url.getPath());
    setOutputStream(new BufferedOutputStream(new FileOutputStream(outputFile)));
  }
 catch (  Exception e) {
    hardClose();
    throw new SendFileTransferException(NLS.bind(Messages.LocalFileOutgoingFileTransfer_EXCEPTION_OPENING_FOR_OUTPUT,url));
  }
  fireSendStartEvent();
}","protected void openStreams() throws SendFileTransferException {
  IFileTransferInfo localFileTransferInfo=getFileTransferInfo();
  Assert.isNotNull(localFileTransferInfo);
  File inputFile=localFileTransferInfo.getFile();
  try {
    setInputStream(new BufferedInputStream(new FileInputStream(inputFile)));
  }
 catch (  Exception e) {
    hardClose();
    throw new SendFileTransferException(NLS.bind(Messages.LocalFileOutgoingFileTransfer_EXCEPTION_OPENING_FOR_INPUT,inputFile));
  }
  URL url=getRemoteFileURL();
  Assert.isNotNull(url);
  try {
    File outputFile=new File(url.getPath());
    setOutputStream(new BufferedOutputStream(new FileOutputStream(outputFile)));
  }
 catch (  Exception e) {
    hardClose();
    throw new SendFileTransferException(NLS.bind(Messages.LocalFileOutgoingFileTransfer_EXCEPTION_OPENING_FOR_OUTPUT,url));
  }
}",0.9860788863109048
94750,"protected void openStreams() throws SendFileTransferException {
  try {
    final File localFile=getFileTransferInfo().getFile();
    setInputStream(new BufferedInputStream(new FileInputStream(localFile)));
    final URL url=getRemoteFileURL();
    this.username=url.getUserInfo();
    scpUtil=new ScpUtil(this);
    final Session s=scpUtil.getSession();
    s.connect();
    final String targetFileName=scpUtil.trimTargetFile(url.getPath());
    final String command=SCP_COMMAND + targetFileName;
    channel=s.openChannel(SCP_EXEC);
    ((ChannelExec)channel).setCommand(command);
    final OutputStream outs=channel.getOutputStream();
    responseStream=channel.getInputStream();
    channel.connect();
    scpUtil.checkAck(responseStream);
    sendFileNameAndSize(localFile,targetFileName,outs,responseStream);
    setOutputStream(outs);
    fireSendStartEvent();
  }
 catch (  final Exception e) {
    throw new SendFileTransferException(NLS.bind(Messages.ScpOutgoingFileTransfer_EXCEPTION_CONNECTING,getRemoteFileURL().toString()),e);
  }
}","protected void openStreams() throws SendFileTransferException {
  try {
    final File localFile=getFileTransferInfo().getFile();
    setInputStream(new BufferedInputStream(new FileInputStream(localFile)));
    final URL url=getRemoteFileURL();
    this.username=url.getUserInfo();
    scpUtil=new ScpUtil(this);
    final Session s=scpUtil.getSession();
    s.connect();
    final String targetFileName=scpUtil.trimTargetFile(url.getPath());
    final String command=SCP_COMMAND + targetFileName;
    channel=s.openChannel(SCP_EXEC);
    ((ChannelExec)channel).setCommand(command);
    final OutputStream outs=channel.getOutputStream();
    responseStream=channel.getInputStream();
    channel.connect();
    scpUtil.checkAck(responseStream);
    sendFileNameAndSize(localFile,targetFileName,outs,responseStream);
    setOutputStream(outs);
  }
 catch (  final Exception e) {
    throw new SendFileTransferException(NLS.bind(Messages.ScpOutgoingFileTransfer_EXCEPTION_CONNECTING,getRemoteFileURL().toString()),e);
  }
}",0.9874152952565344
94751,"public void run(){
  setStatus(outgoingFileTransfer.getStatus());
  boolean negotiation=true;
  while (negotiation) {
    try {
      Thread.sleep(300);
    }
 catch (    final InterruptedException e) {
      return;
    }
    final Status s=progress.getStatus();
    setStatus(s);
    final boolean negotiated=getStatus().equals(Status.NEGOTIATED);
    if (s.equals(Status.NEGOTIATED) || s.equals(Status.CANCLED) || s.equals(Status.COMPLETE)|| s.equals(Status.ERROR)|| s.equals(Status.REFUSED)) {
      fireTransferListenerEvent(new IOutgoingFileTransferResponseEvent(){
        private static final long serialVersionUID=-5940612388464073240L;
        public boolean requestAccepted(){
          return negotiated;
        }
        public IOutgoingFileTransfer getSource(){
          return XMPPOutgoingFileTransfer.this;
        }
        public String toString(){
          final StringBuffer buf=new StringBuffer(""String_Node_Str"");
          buf.append(""String_Node_Str"").append(requestAccepted()).append(""String_Node_Str"");
          return buf.toString();
        }
      }
);
      negotiation=false;
    }
  }
  final OutputStream outs=progress.getOutputStream();
  if (outs == null)   return;
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(XMPPOutgoingFileTransfer.this.localFile);
    writeToStream(inputStream,outs);
  }
 catch (  final FileNotFoundException e) {
    setStatus(FileTransfer.Status.ERROR);
    setException(e);
  }
catch (  final XMPPException e) {
    setStatus(FileTransfer.Status.ERROR);
    setException(e);
  }
 finally {
    setStatus(Status.COMPLETE);
    try {
      if (inputStream != null) {
        inputStream.close();
      }
    }
 catch (    final IOException e) {
    }
    try {
      outs.flush();
      outs.close();
    }
 catch (    final IOException e) {
    }
    fireTransferListenerEvent(new IOutgoingFileTransferSendDoneEvent(){
      private static final long serialVersionUID=-6315336868737148845L;
      public IOutgoingFileTransfer getSource(){
        return XMPPOutgoingFileTransfer.this;
      }
      public String toString(){
        final StringBuffer buf=new StringBuffer(""String_Node_Str"");
        buf.append(""String_Node_Str"" + getSource().isDone());
        buf.append(""String_Node_Str"").append(getSource().getBytesSent()).append(""String_Node_Str"");
        return buf.toString();
      }
    }
);
  }
}","public void run(){
  setStatus(outgoingFileTransfer.getStatus());
  boolean negotiation=true;
  while (negotiation) {
    try {
      Thread.sleep(300);
    }
 catch (    final InterruptedException e) {
      return;
    }
    final Status s=progress.getStatus();
    setStatus(s);
    final boolean negotiated=getStatus().equals(Status.NEGOTIATED);
    if (s.equals(Status.NEGOTIATED) || s.equals(Status.CANCLED) || s.equals(Status.COMPLETE)|| s.equals(Status.ERROR)|| s.equals(Status.REFUSED)) {
      fireTransferListenerEvent(new IOutgoingFileTransferResponseEvent(){
        private static final long serialVersionUID=-5940612388464073240L;
        public boolean requestAccepted(){
          return negotiated;
        }
        public IOutgoingFileTransfer getSource(){
          return XMPPOutgoingFileTransfer.this;
        }
        public String toString(){
          final StringBuffer buf=new StringBuffer(""String_Node_Str"");
          buf.append(""String_Node_Str"").append(requestAccepted()).append(""String_Node_Str"");
          return buf.toString();
        }
        public void setFileTransferJob(        FileTransferJob job){
        }
      }
);
      negotiation=false;
    }
  }
  final OutputStream outs=progress.getOutputStream();
  if (outs == null)   return;
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(XMPPOutgoingFileTransfer.this.localFile);
    writeToStream(inputStream,outs);
  }
 catch (  final FileNotFoundException e) {
    setStatus(FileTransfer.Status.ERROR);
    setException(e);
  }
catch (  final XMPPException e) {
    setStatus(FileTransfer.Status.ERROR);
    setException(e);
  }
 finally {
    setStatus(Status.COMPLETE);
    try {
      if (inputStream != null) {
        inputStream.close();
      }
    }
 catch (    final IOException e) {
    }
    try {
      outs.flush();
      outs.close();
    }
 catch (    final IOException e) {
    }
    fireTransferListenerEvent(new IOutgoingFileTransferSendDoneEvent(){
      private static final long serialVersionUID=-6315336868737148845L;
      public IOutgoingFileTransfer getSource(){
        return XMPPOutgoingFileTransfer.this;
      }
      public String toString(){
        final StringBuffer buf=new StringBuffer(""String_Node_Str"");
        buf.append(""String_Node_Str"" + getSource().isDone());
        buf.append(""String_Node_Str"").append(getSource().getBytesSent()).append(""String_Node_Str"");
        return buf.toString();
      }
    }
);
  }
}",0.983828045035824
94752,"public synchronized void startSend(File localFile,String description) throws XMPPException {
  this.localFile=localFile;
  this.fileSize=localFile.length();
  setStatus(Status.INITIAL);
  outgoingFileTransfer.sendFile(localFile.getAbsolutePath(),this.fileSize,description,progress);
  final Thread transferThread=new Thread(new Runnable(){
    public void run(){
      setStatus(outgoingFileTransfer.getStatus());
      boolean negotiation=true;
      while (negotiation) {
        try {
          Thread.sleep(300);
        }
 catch (        final InterruptedException e) {
          return;
        }
        final Status s=progress.getStatus();
        setStatus(s);
        final boolean negotiated=getStatus().equals(Status.NEGOTIATED);
        if (s.equals(Status.NEGOTIATED) || s.equals(Status.CANCLED) || s.equals(Status.COMPLETE)|| s.equals(Status.ERROR)|| s.equals(Status.REFUSED)) {
          fireTransferListenerEvent(new IOutgoingFileTransferResponseEvent(){
            private static final long serialVersionUID=-5940612388464073240L;
            public boolean requestAccepted(){
              return negotiated;
            }
            public IOutgoingFileTransfer getSource(){
              return XMPPOutgoingFileTransfer.this;
            }
            public String toString(){
              final StringBuffer buf=new StringBuffer(""String_Node_Str"");
              buf.append(""String_Node_Str"").append(requestAccepted()).append(""String_Node_Str"");
              return buf.toString();
            }
          }
);
          negotiation=false;
        }
      }
      final OutputStream outs=progress.getOutputStream();
      if (outs == null)       return;
      InputStream inputStream=null;
      try {
        inputStream=new FileInputStream(XMPPOutgoingFileTransfer.this.localFile);
        writeToStream(inputStream,outs);
      }
 catch (      final FileNotFoundException e) {
        setStatus(FileTransfer.Status.ERROR);
        setException(e);
      }
catch (      final XMPPException e) {
        setStatus(FileTransfer.Status.ERROR);
        setException(e);
      }
 finally {
        setStatus(Status.COMPLETE);
        try {
          if (inputStream != null) {
            inputStream.close();
          }
        }
 catch (        final IOException e) {
        }
        try {
          outs.flush();
          outs.close();
        }
 catch (        final IOException e) {
        }
        fireTransferListenerEvent(new IOutgoingFileTransferSendDoneEvent(){
          private static final long serialVersionUID=-6315336868737148845L;
          public IOutgoingFileTransfer getSource(){
            return XMPPOutgoingFileTransfer.this;
          }
          public String toString(){
            final StringBuffer buf=new StringBuffer(""String_Node_Str"");
            buf.append(""String_Node_Str"" + getSource().isDone());
            buf.append(""String_Node_Str"").append(getSource().getBytesSent()).append(""String_Node_Str"");
            return buf.toString();
          }
        }
);
      }
    }
  }
,""String_Node_Str"");
  transferThread.start();
}","public synchronized void startSend(File localFile,String description) throws XMPPException {
  this.localFile=localFile;
  this.fileSize=localFile.length();
  setStatus(Status.INITIAL);
  outgoingFileTransfer.sendFile(localFile.getAbsolutePath(),this.fileSize,description,progress);
  final Thread transferThread=new Thread(new Runnable(){
    public void run(){
      setStatus(outgoingFileTransfer.getStatus());
      boolean negotiation=true;
      while (negotiation) {
        try {
          Thread.sleep(300);
        }
 catch (        final InterruptedException e) {
          return;
        }
        final Status s=progress.getStatus();
        setStatus(s);
        final boolean negotiated=getStatus().equals(Status.NEGOTIATED);
        if (s.equals(Status.NEGOTIATED) || s.equals(Status.CANCLED) || s.equals(Status.COMPLETE)|| s.equals(Status.ERROR)|| s.equals(Status.REFUSED)) {
          fireTransferListenerEvent(new IOutgoingFileTransferResponseEvent(){
            private static final long serialVersionUID=-5940612388464073240L;
            public boolean requestAccepted(){
              return negotiated;
            }
            public IOutgoingFileTransfer getSource(){
              return XMPPOutgoingFileTransfer.this;
            }
            public String toString(){
              final StringBuffer buf=new StringBuffer(""String_Node_Str"");
              buf.append(""String_Node_Str"").append(requestAccepted()).append(""String_Node_Str"");
              return buf.toString();
            }
            public void setFileTransferJob(            FileTransferJob job){
            }
          }
);
          negotiation=false;
        }
      }
      final OutputStream outs=progress.getOutputStream();
      if (outs == null)       return;
      InputStream inputStream=null;
      try {
        inputStream=new FileInputStream(XMPPOutgoingFileTransfer.this.localFile);
        writeToStream(inputStream,outs);
      }
 catch (      final FileNotFoundException e) {
        setStatus(FileTransfer.Status.ERROR);
        setException(e);
      }
catch (      final XMPPException e) {
        setStatus(FileTransfer.Status.ERROR);
        setException(e);
      }
 finally {
        setStatus(Status.COMPLETE);
        try {
          if (inputStream != null) {
            inputStream.close();
          }
        }
 catch (        final IOException e) {
        }
        try {
          outs.flush();
          outs.close();
        }
 catch (        final IOException e) {
        }
        fireTransferListenerEvent(new IOutgoingFileTransferSendDoneEvent(){
          private static final long serialVersionUID=-6315336868737148845L;
          public IOutgoingFileTransfer getSource(){
            return XMPPOutgoingFileTransfer.this;
          }
          public String toString(){
            final StringBuffer buf=new StringBuffer(""String_Node_Str"");
            buf.append(""String_Node_Str"" + getSource().isDone());
            buf.append(""String_Node_Str"").append(getSource().getBytesSent()).append(""String_Node_Str"");
            return buf.toString();
          }
        }
);
      }
    }
  }
,""String_Node_Str"");
  transferThread.start();
}",0.9855164730224416
94753,"IServiceInfo createIServiceInfoFromServiceInfo(final ServiceInfo serviceInfo) throws Exception {
  if (serviceInfo == null)   return null;
  String st=serviceInfo.getType();
  String n=serviceInfo.getName();
  if (st == null || n == null)   throw new InvalidObjectException(Messages.JMDNSDiscoveryContainer_EXCEPTION_SERVICEINFO_INVALID);
  final ServiceID sID=createServiceID(serviceInfo.getType(),serviceInfo.getName());
  if (sID == null)   throw new InvalidObjectException(Messages.JMDNSDiscoveryContainer_EXCEPTION_SERVICEINFO_INVALID);
  final InetAddress addr=serviceInfo.getAddress();
  final int port=serviceInfo.getPort();
  final int priority=serviceInfo.getPriority();
  final int weight=serviceInfo.getWeight();
  final Properties props=new Properties();
  for (final Enumeration e=serviceInfo.getPropertyNames(); e.hasMoreElements(); ) {
    final String name=(String)e.nextElement();
    Object value=serviceInfo.getPropertyString(name);
    if (value == null)     value=serviceInfo.getPropertyBytes(name);
    if (value != null)     props.put(name,value);
  }
  final ServiceProperties svcProperties=new ServiceProperties(props);
  final IServiceInfo newInfo=new JMDNSServiceInfo(addr,sID,port,priority,weight,svcProperties);
  return newInfo;
}","IServiceInfo createIServiceInfoFromServiceInfo(final ServiceInfo serviceInfo) throws Exception {
  if (serviceInfo == null)   return null;
  String st=serviceInfo.getType();
  String n=serviceInfo.getName();
  if (st == null || n == null)   throw new InvalidObjectException(Messages.JMDNSDiscoveryContainer_EXCEPTION_SERVICEINFO_INVALID);
  final ServiceID sID=createServiceID(serviceInfo.getType(),serviceInfo.getName());
  if (sID == null)   throw new InvalidObjectException(Messages.JMDNSDiscoveryContainer_EXCEPTION_SERVICEINFO_INVALID);
  final InetAddress addr=serviceInfo.getAddress();
  final int port=serviceInfo.getPort();
  final int priority=serviceInfo.getPriority();
  final int weight=serviceInfo.getWeight();
  final Properties props=new Properties();
  String uriProtocol=null;
  for (final Enumeration e=serviceInfo.getPropertyNames(); e.hasMoreElements(); ) {
    final String name=(String)e.nextElement();
    if (name.equals(SCHEME_PROPERTY))     uriProtocol=serviceInfo.getPropertyString(name);
 else {
      Object value=serviceInfo.getPropertyString(name);
      if (value == null)       value=serviceInfo.getPropertyBytes(name);
      if (value != null)       props.put(name,value);
    }
  }
  return new org.eclipse.ecf.discovery.ServiceInfo(uriProtocol,addr.getHostAddress(),port,sID,priority,weight,new ServiceProperties(props));
}",0.8355589469668065
94754,"private ServiceInfo createServiceInfoFromIServiceInfo(IServiceInfo serviceInfo){
  if (serviceInfo == null)   return null;
  final IServiceID sID=serviceInfo.getServiceID();
  final Hashtable props=new Hashtable();
  final IServiceProperties svcProps=serviceInfo.getServiceProperties();
  if (svcProps != null) {
    for (final Enumeration e=svcProps.getPropertyNames(); e.hasMoreElements(); ) {
      final String key=(String)e.nextElement();
      final Object val=svcProps.getProperty(key);
      if (val != null) {
        props.put(key,val);
      }
    }
  }
  final ServiceInfo si=new ServiceInfo(sID.getServiceTypeID().getInternal(),sID.getServiceName(),serviceInfo.getLocation().getPort(),serviceInfo.getPriority(),serviceInfo.getWeight(),props);
  return si;
}","private ServiceInfo createServiceInfoFromIServiceInfo(IServiceInfo serviceInfo){
  if (serviceInfo == null)   return null;
  final IServiceID sID=serviceInfo.getServiceID();
  final Hashtable props=new Hashtable();
  final IServiceProperties svcProps=serviceInfo.getServiceProperties();
  if (svcProps != null) {
    for (final Enumeration e=svcProps.getPropertyNames(); e.hasMoreElements(); ) {
      final String key=(String)e.nextElement();
      final Object val=svcProps.getProperty(key);
      if (val != null) {
        props.put(key,val);
      }
    }
  }
  URI location=serviceInfo.getLocation();
  props.put(SCHEME_PROPERTY,location.getScheme());
  final ServiceInfo si=new ServiceInfo(sID.getServiceTypeID().getInternal(),sID.getServiceName(),location.getPort(),serviceInfo.getPriority(),serviceInfo.getWeight(),props);
  return si;
}",0.9220297029702972
94755,"private void hookActionBars(){
  final IActionBars bars=this.getViewSite().getActionBars();
  bars.getMenuManager().add(refreshAction);
  bars.getToolBarManager().add(refreshAction);
}","private void hookActionBars(){
  final IActionBars bars=this.getViewSite().getActionBars();
  bars.getToolBarManager().add(refreshAction);
}",0.8641975308641975
94756,"private void send(ID fromID,ID roomID,String target,String msg){
  if (isProcessed(roomID,target,msg)) {
    return;
  }
  Matcher cmdMatcher=null;
  Enumeration keys=commands.keys();
  while (keys.hasMoreElements()) {
    String key=(String)keys.nextElement();
    Pattern pattern=Pattern.compile(key);
    cmdMatcher=pattern.matcher(msg);
    if (cmdMatcher.matches()) {
      break;
    }
  }
  if (cmdMatcher != null && cmdMatcher.matches()) {
    if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        learn(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        update(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        remove(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      msg=cmdMatcher.group(2);
      int index=msg.indexOf('c');
      if (index == -1) {
        try {
          Integer.parseInt(msg);
          sendBug(roomID,target,msg,null);
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        try {
          Integer.parseInt(msg.substring(0,index));
          sendBug(roomID,target,msg.substring(0,index),msg.substring(index + 1));
        }
 catch (        NumberFormatException e) {
        }
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendJavaDoc(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendNewsgroupSearch(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendGoogle(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendWiki(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendEclipseHelp(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendMessageList(roomID,target);
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendSearchPlugins(roomID,target,cmdMatcher.group(2));
    }
  }
}","private void send(ID fromID,ID roomID,String target,String msg){
  if (isProcessed(roomID,target,msg)) {
    return;
  }
  Matcher cmdMatcher=null;
  Enumeration keys=commands.keys();
  while (keys.hasMoreElements()) {
    String key=(String)keys.nextElement();
    Pattern pattern=Pattern.compile(key);
    cmdMatcher=pattern.matcher(msg);
    if (cmdMatcher.matches()) {
      break;
    }
  }
  if (cmdMatcher != null && cmdMatcher.matches()) {
    if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        learn(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        update(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        remove(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      msg=cmdMatcher.group(2);
      int index=msg.indexOf('c');
      if (index == -1) {
        try {
          Integer.parseInt(msg);
          sendBug(roomID,target,msg,null);
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        try {
          Integer.parseInt(msg.substring(0,index));
          sendBug(roomID,target,msg.substring(0,index),msg.substring(index + 1));
        }
 catch (        NumberFormatException e) {
        }
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      msg=cmdMatcher.group(2);
      int index=msg.indexOf('c');
      if (index == -1) {
        try {
          Integer.parseInt(msg);
          sendCQ(roomID,target,msg,null);
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        try {
          Integer.parseInt(msg.substring(0,index));
          sendCQ(roomID,target,msg.substring(0,index),msg.substring(index + 1));
        }
 catch (        NumberFormatException e) {
        }
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendJavaDoc(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendNewsgroupSearch(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendGoogle(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendWiki(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendEclipseHelp(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendMessageList(roomID,target);
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendSearchPlugins(roomID,target,cmdMatcher.group(2));
    }
  }
}",0.8833634719710669
94757,"private void send(ID fromID,ID roomID,String target,String msg){
  if (isProcessed(roomID,target,msg)) {
    return;
  }
  Matcher cmdMatcher=null;
  Enumeration keys=commands.keys();
  while (keys.hasMoreElements()) {
    String key=(String)keys.nextElement();
    Pattern pattern=Pattern.compile(key);
    cmdMatcher=pattern.matcher(msg);
    if (cmdMatcher.matches()) {
      break;
    }
  }
  if (cmdMatcher != null && cmdMatcher.matches()) {
    if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        learn(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        update(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        remove(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      msg=cmdMatcher.group(2);
      int index=msg.indexOf('c');
      if (index == -1) {
        try {
          Integer.parseInt(msg);
          sendBug(roomID,target,msg,null);
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        try {
          Integer.parseInt(msg.substring(0,index));
          sendBug(roomID,target,msg.substring(0,index),msg.substring(index + 1));
        }
 catch (        NumberFormatException e) {
        }
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendJavaDoc(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendNewsgroupSearch(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendGoogle(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendWiki(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendEclipseHelp(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendMessageList(roomID,target);
    }
  }
}","private void send(ID fromID,ID roomID,String target,String msg){
  if (isProcessed(roomID,target,msg)) {
    return;
  }
  Matcher cmdMatcher=null;
  Enumeration keys=commands.keys();
  while (keys.hasMoreElements()) {
    String key=(String)keys.nextElement();
    Pattern pattern=Pattern.compile(key);
    cmdMatcher=pattern.matcher(msg);
    if (cmdMatcher.matches()) {
      break;
    }
  }
  if (cmdMatcher != null && cmdMatcher.matches()) {
    if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        learn(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        update(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        remove(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      msg=cmdMatcher.group(2);
      int index=msg.indexOf('c');
      if (index == -1) {
        try {
          Integer.parseInt(msg);
          sendBug(roomID,target,msg,null);
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        try {
          Integer.parseInt(msg.substring(0,index));
          sendBug(roomID,target,msg.substring(0,index),msg.substring(index + 1));
        }
 catch (        NumberFormatException e) {
        }
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendJavaDoc(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendNewsgroupSearch(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendGoogle(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendWiki(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendEclipseHelp(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendMessageList(roomID,target);
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendSearchPlugins(roomID,target,cmdMatcher.group(2));
    }
  }
}",0.97818366311517
94758,"private void registerRemoteService(String className,Object service){
  try {
    final IRemoteServiceContainerAdapter containerAdapter=(IRemoteServiceContainerAdapter)serviceHostContainer.getAdapter(IRemoteServiceContainerAdapter.class);
    Assert.isNotNull(containerAdapter);
    containerAdapter.registerRemoteService(new String[]{className},service,new RemoteServiceProperties(ECF_GENERIC_CLIENT,serviceHostContainer));
    System.out.println(""String_Node_Str"" + className);
    final String serviceName=System.getProperty(""String_Node_Str"") + System.currentTimeMillis();
    final IServiceID serviceID=ServiceIDFactory.getDefault().createServiceID(discovery.getServicesNamespace(),REMOTE_SERVICE_TYPE,serviceName);
    serviceInfo=new ServiceInfo(null,80,serviceID,new ServiceProperties(new DiscoveryProperties(className,ECF_GENERIC_CLIENT,serviceHostContainer)));
    discovery.registerService(serviceInfo);
    System.out.println(""String_Node_Str"" + serviceID);
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
}","private void registerRemoteService(String className,Object service){
  try {
    final IRemoteServiceContainerAdapter containerAdapter=(IRemoteServiceContainerAdapter)serviceHostContainer.getAdapter(IRemoteServiceContainerAdapter.class);
    Assert.isNotNull(containerAdapter);
    containerAdapter.registerRemoteService(new String[]{className},service,new RemoteServiceProperties(ECF_GENERIC_CLIENT,serviceHostContainer));
    System.out.println(""String_Node_Str"" + className);
    final String serviceName=System.getProperty(""String_Node_Str"") + System.currentTimeMillis();
    final IServiceID serviceID=ServiceIDFactory.getDefault().createServiceID(discovery.getServicesNamespace(),REMOTE_SERVICE_TYPE,serviceName);
    serviceInfo=new ServiceInfo(Constants.DISCOVERY_SERVICE_TYPE,null,80,serviceID,new ServiceProperties(new DiscoveryProperties(className,ECF_GENERIC_CLIENT,serviceHostContainer)));
    discovery.registerService(serviceInfo);
    System.out.println(""String_Node_Str"" + serviceID);
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
}",0.9842931937172776
94759,"private void registerService(String serviceType1,String serviceName1,String updateSiteName1,String servicePath1) throws Exception {
  try {
    serviceInfo=new ServiceInfo(null,getServicePort(),ServiceIDFactory.getDefault().createServiceID(discovery.getServicesNamespace(),serviceType1,serviceName1),new ServiceProperties(new UpdateSiteProperties(serviceName1,servicePath1).toProperties()));
    discovery.registerService(serviceInfo);
  }
 catch (  final Exception e) {
    e.printStackTrace();
    throw e;
  }
}","private void registerService(String serviceType1,String serviceName1,String updateSiteName1,String servicePath1) throws Exception {
  try {
    serviceInfo=new ServiceInfo(UPDATE_SITE_SERVICE_TYPE,null,getServicePort(),ServiceIDFactory.getDefault().createServiceID(discovery.getServicesNamespace(),serviceType1,serviceName1),new ServiceProperties(new UpdateSiteProperties(serviceName1,servicePath1).toProperties()));
    discovery.registerService(serviceInfo);
  }
 catch (  final Exception e) {
    e.printStackTrace();
    throw e;
  }
}",0.976258309591643
94760,"protected IDiscoveryContainerAdapter getAdapter(Class clazz){
  IDiscoveryService discoveryService=Activator.getDefault().getDiscoveryService();
  assertNotNull(discoveryService);
  return discoveryService;
}","protected IDiscoveryContainerAdapter getAdapter(Class clazz){
  final IDiscoveryService discoveryService=Activator.getDefault().getDiscoveryService();
  assertNotNull(discoveryService);
  return discoveryService;
}",0.985781990521327
94761,"/** 
 * @param name
 */
public DiscoveryServiceTest(String name,long aDiscoveryContainerInterval){
  super(name,aDiscoveryContainerInterval);
}","/** 
 * @param name
 * @param aDiscoveryContainerInterval 
 */
public DiscoveryServiceTest(String name,long aDiscoveryContainerInterval){
  super(name,aDiscoveryContainerInterval);
}",0.88
94762,"/** 
 * Test method for   {@link org.eclipse.ecf.discovery.ServiceInfo()}.
 */
public void testServiceInfo(){
  IServiceInfo si=null;
  try {
    si=getServiceInfo(serviceInfo);
  }
 catch (  IDCreateException e) {
    fail();
  }
catch (  SecurityException e) {
    fail();
  }
  assertTrue(serviceInfoComparator.compare(si,serviceInfo) == 0);
}","/** 
 * Test method for   {@link org.eclipse.ecf.discovery.ServiceInfo}.
 */
public void testServiceInfo(){
  IServiceInfo si=null;
  try {
    si=getServiceInfo(serviceInfo);
  }
 catch (  final IDCreateException e) {
    fail();
  }
catch (  final SecurityException e) {
    fail();
  }
  assertTrue(serviceInfoComparator.compare(si,serviceInfo) == 0);
}",0.98005698005698
94763,"/** 
 * Test method for   {@link org.eclipse.ecf.discovery.ServiceInfo#getServiceProperties()}.
 */
public void testGetServiceProperties(){
  IServiceProperties sprops=serviceInfo.getServiceProperties();
  assertEquals(sprops,serviceProperties);
}","/** 
 * Test method for   {@link org.eclipse.ecf.discovery.ServiceInfo#getServiceProperties()}.
 */
public void testGetServiceProperties(){
  final IServiceProperties sprops=serviceInfo.getServiceProperties();
  assertEquals(sprops,serviceProperties);
}",0.988
94764,"public void handleRoomMessage(IChatRoomMessage message){
  ID fromID=message.getFromID();
  if (fromID.getName().equals(""String_Node_Str"")) {
    return;
  }
  String msg=message.getMessage();
switch (msg.charAt(0)) {
case '~':
case '!':
    handleMessage(fromID,message.getChatRoomID(),msg.substring(1).trim());
  break;
default :
String upperCase=msg.toUpperCase();
if (upperCase.startsWith(""String_Node_Str"") || upperCase.startsWith(""String_Node_Str"")) {
msg=upperCase.substring(8).trim();
switch (msg.charAt(0)) {
case '~':
case '!':
  handleMessage(fromID,message.getChatRoomID(),msg.substring(1).trim());
break;
}
}
 else {
String[] split=msg.split(""String_Node_Str"");
for (int i=0; i < split.length; i++) {
switch (split[i].charAt(0)) {
case '~':
case '!':
handleMessage(fromID,message.getChatRoomID(),split[i].substring(1).trim());
break;
}
}
}
break;
}
}","public void handleRoomMessage(IChatRoomMessage message){
  ID fromID=message.getFromID();
  String name=fromID.getName();
  if (name.charAt(0) == '#' || name.equals(""String_Node_Str"")) {
    return;
  }
  String msg=message.getMessage();
switch (msg.charAt(0)) {
case '~':
case '!':
    handleMessage(fromID,message.getChatRoomID(),msg.substring(1).trim());
  break;
default :
String upperCase=msg.toUpperCase();
if (upperCase.startsWith(""String_Node_Str"") || upperCase.startsWith(""String_Node_Str"")) {
msg=upperCase.substring(8).trim();
switch (msg.charAt(0)) {
case '~':
case '!':
  handleMessage(fromID,message.getChatRoomID(),msg.substring(1).trim());
break;
}
}
 else {
String[] split=msg.split(""String_Node_Str"");
for (int i=0; i < split.length; i++) {
if (split[i].length() > 0) {
switch (split[i].charAt(0)) {
case '~':
case '!':
  handleMessage(fromID,message.getChatRoomID(),split[i].substring(1).trim());
break;
}
}
}
}
break;
}
}",0.9368070953436808
94765,"private void sendWiki(ID roomID,String target,String articleName){
  articleName=articleName.replace(' ','_');
  if (target == null) {
    sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.Wiki),articleName));
  }
 else {
    sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.Wiki_Reply),target,articleName));
  }
}","private void sendWiki(ID roomID,String target,String articleName){
  articleName=articleName.replace(' ','_');
  sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + NLS.bind(CustomMessages.getString(CustomMessages.Wiki),articleName));
}",0.6527331189710611
94766,"private void sendMessageList(ID roomID,String target){
  if (target == null) {
    sendMessage(roomID,CustomMessages.getString(CustomMessages.MessageList));
  }
 else {
    sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.MessageList_Reply),target));
  }
}","private void sendMessageList(ID roomID,String target){
  sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + CustomMessages.getString(CustomMessages.MessageList));
}",0.5010526315789474
94767,"private void sendGoogle(ID roomID,String target,String searchString){
  searchString=searchString.replace(' ','+');
  if (target == null) {
    sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.Google),searchString));
  }
 else {
    sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.Google_Reply),target,searchString));
  }
}","private void sendGoogle(ID roomID,String target,String searchString){
  searchString=searchString.replace(' ','+');
  sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + NLS.bind(CustomMessages.getString(CustomMessages.Google),searchString));
}",0.6583463338533542
94768,"private void sendBug(ID roomID,String target,String number,String comment){
  String urlString=BUG_DATABASE_PREFIX + number;
  if (comment != null) {
    urlString=urlString + ""String_Node_Str"" + comment;
  }
  if (target == null) {
    try {
      HttpURLConnection hURL=(HttpURLConnection)new URL(BUG_DATABASE_PREFIX + number + BUG_DATABASE_POSTFIX).openConnection();
      hURL.setAllowUserInteraction(true);
      hURL.connect();
      BufferedReader reader=new BufferedReader(new InputStreamReader(hURL.getInputStream()));
      StringBuffer buffer=new StringBuffer();
      try {
        if (hURL.getResponseCode() != HttpURLConnection.HTTP_OK) {
          sendMessage(roomID,NLS.bind(CustomMessages.Bug,number,urlString));
          return;
        }
        String input=reader.readLine();
        buffer.append(input);
        while (input.indexOf(SUM_CLOSE_TAG) == -1) {
          input=reader.readLine();
          buffer.append(input);
        }
        hURL.disconnect();
      }
 catch (      EOFException e) {
        hURL.disconnect();
        sendMessage(roomID,NLS.bind(CustomMessages.Bug,number,urlString));
        e.printStackTrace();
        return;
      }
      String webPage=buffer.toString();
      int summaryStartIndex=webPage.indexOf(SUM_OPEN_TAG);
      int summaryEndIndex=webPage.indexOf(SUM_CLOSE_TAG,summaryStartIndex);
      if (summaryStartIndex != -1 & summaryEndIndex != -1) {
        String summary=webPage.substring(summaryStartIndex + SUM_OPEN_TAG.length(),summaryEndIndex);
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.BugContent),new Object[]{number,xmlDecode(summary),urlString}));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.BugContent),new Object[]{number,urlString}));
      }
    }
 catch (    IOException e) {
      sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.Bug),new Object[]{number,urlString}));
      e.printStackTrace();
    }
  }
 else {
    try {
      HttpURLConnection hURL=(HttpURLConnection)new URL(BUG_DATABASE_PREFIX + number + BUG_DATABASE_POSTFIX).openConnection();
      hURL.setAllowUserInteraction(true);
      hURL.connect();
      BufferedReader reader=new BufferedReader(new InputStreamReader(hURL.getInputStream()));
      StringBuffer buffer=new StringBuffer();
      try {
        if (hURL.getResponseCode() != HttpURLConnection.HTTP_OK) {
          sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.Bug_Reply),new Object[]{target,number,urlString}));
          return;
        }
        String input=reader.readLine();
        buffer.append(input);
        while (input.indexOf(SUM_CLOSE_TAG) == -1) {
          input=reader.readLine();
          buffer.append(input);
        }
        hURL.disconnect();
      }
 catch (      EOFException e) {
        hURL.disconnect();
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.Bug_Reply),new Object[]{target,number,urlString}));
        return;
      }
      String webPage=buffer.toString();
      int summaryStartIndex=webPage.indexOf(SUM_OPEN_TAG);
      int summaryEndIndex=webPage.indexOf(SUM_CLOSE_TAG,summaryStartIndex);
      if (summaryStartIndex != -1 & summaryEndIndex != -1) {
        String summary=webPage.substring(summaryStartIndex + SUM_OPEN_TAG.length(),summaryEndIndex);
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.BugContent_Reply),new Object[]{target,number,xmlDecode(summary),urlString}));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.BugContent_Reply),new Object[]{target,number,urlString}));
      }
    }
 catch (    IOException e) {
      sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.getString(CustomMessages.Bug_Reply)),new Object[]{target,number,urlString}));
    }
  }
}","private void sendBug(ID roomID,String target,String number,String comment){
  String urlString=BUG_DATABASE_PREFIX + number;
  if (comment != null) {
    urlString=urlString + ""String_Node_Str"" + comment;
  }
  try {
    HttpURLConnection hURL=(HttpURLConnection)new URL(BUG_DATABASE_PREFIX + number + BUG_DATABASE_POSTFIX).openConnection();
    hURL.setAllowUserInteraction(true);
    hURL.connect();
    BufferedReader reader=new BufferedReader(new InputStreamReader(hURL.getInputStream()));
    StringBuffer buffer=new StringBuffer();
    try {
      if (hURL.getResponseCode() != HttpURLConnection.HTTP_OK) {
        sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + NLS.bind(CustomMessages.Bug,number,urlString));
        return;
      }
      String input=reader.readLine();
      buffer.append(input);
      while (input != null && input.indexOf(SUM_CLOSE_TAG) == -1) {
        if (input.indexOf(BUG_NOT_FOUND_TAG) >= 0) {
          sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + NLS.bind(CustomMessages.getString(CustomMessages.Bug_Not_Found),number));
          return;
        }
        input=reader.readLine();
        buffer.append(input);
      }
      hURL.disconnect();
    }
 catch (    EOFException e) {
      hURL.disconnect();
      sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + NLS.bind(CustomMessages.Bug,number,urlString));
      e.printStackTrace();
      return;
    }
    String webPage=buffer.toString();
    int summaryStartIndex=webPage.indexOf(SUM_OPEN_TAG);
    int summaryEndIndex=webPage.indexOf(SUM_CLOSE_TAG,summaryStartIndex);
    if (summaryStartIndex != -1 & summaryEndIndex != -1) {
      String summary=webPage.substring(summaryStartIndex + SUM_OPEN_TAG.length(),summaryEndIndex);
      sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + NLS.bind(CustomMessages.getString(CustomMessages.BugContent),new Object[]{number,xmlDecode(summary),urlString}));
    }
 else {
      sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + NLS.bind(CustomMessages.getString(CustomMessages.BugContent),new Object[]{number,urlString}));
    }
  }
 catch (  IOException e) {
    sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + NLS.bind(CustomMessages.getString(CustomMessages.Bug),new Object[]{number,urlString}));
    e.printStackTrace();
  }
}",0.5806350204338259
94769,"private void sendJavaDoc(ID roomID,String target,String parameter){
  String append=target == null ? ""String_Node_Str"" : target + ""String_Node_Str"";
  String message=null;
  int index=parameter.indexOf('#');
  if (index == -1) {
    message=analyzer.getJavadocs(parameter);
  }
 else {
    String className=parameter.substring(0,index);
    parameter=parameter.substring(index + 1);
    index=parameter.indexOf('(');
    if (index == -1) {
      message=className + '#' + parameter+ ""String_Node_Str""+ analyzer.getJavadocs(className,parameter);
    }
 else {
      String method=parameter.substring(0,index);
      parameter=parameter.substring(index + 1);
      parameter=parameter.substring(0,parameter.indexOf(')'));
      String[] parameters=parameter.split(""String_Node_Str"");
      for (int i=0; i < parameters.length; i++) {
        parameters[i]=parameters[i].trim();
      }
      message=className + '#' + method+ ""String_Node_Str""+ analyzer.getJavadocs(className,method,parameters);
    }
  }
  sendMessage(roomID,append + message);
}","private void sendJavaDoc(ID roomID,String target,String parameter){
  String message=null;
  int index=parameter.indexOf('#');
  if (index == -1) {
    message=analyzer.getJavadocs(parameter);
  }
 else {
    String className=parameter.substring(0,index);
    parameter=parameter.substring(index + 1);
    index=parameter.indexOf('(');
    if (index == -1) {
      message=className + '#' + parameter+ ""String_Node_Str""+ analyzer.getJavadocs(className,parameter);
    }
 else {
      String method=parameter.substring(0,index);
      parameter=parameter.substring(index + 1);
      parameter=parameter.substring(0,parameter.indexOf(')'));
      String[] parameters=parameter.split(""String_Node_Str"");
      for (int i=0; i < parameters.length; i++) {
        parameters[i]=parameters[i].trim();
      }
      message=className + '#' + method+ ""String_Node_Str""+ analyzer.getJavadocs(className,method,parameters);
    }
  }
  sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + message);
}",0.9264990328820116
94770,"private void sendNewsgroupSearch(ID roomID,String target,String query){
  String[] strings=query.split(""String_Node_Str"");
  if (strings.length == 1) {
    return;
  }
  for (int i=0; i < strings.length; i++) {
    try {
      strings[i]=URLEncoder.encode(strings[i].trim(),""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException e) {
      strings[i]=URLEncoder.encode(strings[i].trim());
    }
  }
  String newsgroup=(String)newsgroups.get(strings[0]);
  if (target == null) {
    StringBuffer buffer=new StringBuffer();
synchronized (buffer) {
      for (int i=1; i < strings.length; i++) {
        buffer.append(strings[i] + '+');
      }
      buffer.deleteCharAt(buffer.length() - 1);
    }
    sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.NewsgroupSearch),buffer.toString(),newsgroup));
  }
 else {
    StringBuffer buffer=new StringBuffer();
synchronized (buffer) {
      for (int i=1; i < strings.length; i++) {
        buffer.append(strings[i] + '+');
      }
      buffer.deleteCharAt(buffer.length() - 1);
    }
    sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.NewsgroupSearch_Reply),new Object[]{target,buffer.toString(),newsgroup}));
  }
}","private void sendNewsgroupSearch(ID roomID,String target,String query){
  String[] strings=query.split(""String_Node_Str"");
  if (strings.length == 1) {
    sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + CustomMessages.getString(CustomMessages.NewsgroupSearch_Invalid));
    return;
  }
  for (int i=0; i < strings.length; i++) {
    System.out.println(i + ""String_Node_Str"" + strings[i]);
    try {
      strings[i]=URLEncoder.encode(strings[i].trim(),""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException e) {
      strings[i]=URLEncoder.encode(strings[i].trim());
    }
  }
  String newsgroup=strings[0].startsWith(""String_Node_Str"") ? ""String_Node_Str"" + strings[0] : (String)newsgroups.get(strings[0]);
  if (newsgroup == null) {
    sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + CustomMessages.getString(CustomMessages.NewsgroupSearch_InvalidGroup));
    return;
  }
  StringBuffer buffer=new StringBuffer();
synchronized (buffer) {
    for (int i=1; i < strings.length; i++) {
      buffer.append(strings[i] + '+');
    }
    buffer.deleteCharAt(buffer.length() - 1);
  }
  sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + NLS.bind(CustomMessages.getString(CustomMessages.NewsgroupSearch),newsgroup,buffer.toString()));
}",0.6625145971195018
94771,"private void sendEclipseHelp(ID roomID,String target,String searchString){
  searchString=searchString.replace(' ','+');
  if (target == null) {
    sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.EclipseHelp),searchString));
  }
 else {
    sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.EclipseHelp_Reply),target,searchString));
  }
}","private void sendEclipseHelp(ID roomID,String target,String searchString){
  searchString=searchString.replace(' ','+');
  sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + NLS.bind(CustomMessages.getString(CustomMessages.EclipseHelp),searchString));
}",0.6636636636636637
94772,"private String formatTableRow(String key,String val){
  return ""String_Node_Str"" + key + ""String_Node_Str""+ text2html(val)+ ""String_Node_Str"";
}","private String formatTableRow(String key,String val){
  return ""String_Node_Str"" + key.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ text2html(val)+ ""String_Node_Str"";
}",0.8571428571428571
94773,"private String text2html(String val){
  StringTokenizer st=new StringTokenizer(val,""String_Node_Str"",true);
  StringBuffer sb=new StringBuffer();
  while (st.hasMoreTokens()) {
    String tok=st.nextToken();
    Matcher patternMatcher=URL_PATTERN.matcher(tok);
    if (patternMatcher.matches()) {
      sb.append(""String_Node_Str"");
      sb.append(patternMatcher.group(1));
      sb.append(""String_Node_Str"");
      sb.append(patternMatcher.group(1));
      sb.append(""String_Node_Str"");
    }
 else {
      Matcher cmdMatcher=CMD_PATTERN.matcher(tok);
      if (cmdMatcher.matches()) {
        sb.append(""String_Node_Str"");
        sb.append(cmdMatcher.group(1));
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(tok);
      }
    }
  }
  return sb.toString();
}","private String text2html(String val){
  StringTokenizer st=new StringTokenizer(val,""String_Node_Str"",true);
  StringBuffer sb=new StringBuffer();
  while (st.hasMoreTokens()) {
    String tok=st.nextToken();
    Matcher patternMatcher=URL_PATTERN.matcher(tok);
    if (patternMatcher.matches()) {
      sb.append(""String_Node_Str"");
      sb.append(patternMatcher.group(1));
      sb.append(""String_Node_Str"");
      if (patternMatcher.group(1).length() >= 120) {
        StringTokenizer st2=new StringTokenizer(patternMatcher.group(1),""String_Node_Str"",true);
        StringBuffer sb2=new StringBuffer();
        while (st2.hasMoreTokens()) {
          sb2.append(st2.nextToken());
          if (sb2.length() >= 100) {
            sb2.append(""String_Node_Str"");
          }
        }
        sb.append(sb2.toString().replaceAll(BINDING_REGEX,""String_Node_Str""));
      }
 else {
        sb.append(patternMatcher.group(1).replaceAll(BINDING_REGEX,""String_Node_Str""));
      }
      sb.append(""String_Node_Str"");
    }
 else {
      Matcher cmdMatcher=CMD_PATTERN.matcher(tok);
      if (cmdMatcher.matches()) {
        sb.append(""String_Node_Str"");
        sb.append(cmdMatcher.group(1));
        sb.append(""String_Node_Str"");
      }
 else {
        Matcher bindingMatcher=BINDING_PATTERN.matcher(tok);
        if (bindingMatcher.matches()) {
          sb.append(""String_Node_Str"");
          sb.append(bindingMatcher.group(1));
          sb.append(""String_Node_Str"");
        }
 else {
          sb.append(tok);
        }
      }
    }
  }
  return sb.toString();
}",0.6516567544604928
94774,"private boolean isProcessed(ID roomID,String target,String msg){
  String reply=(String)messages.get(msg);
  if (reply == null) {
    return false;
  }
  if (target == null) {
    sendMessage(roomID,reply);
  }
 else {
    sendMessage(roomID,target + ""String_Node_Str"" + reply);
  }
  return true;
}","private boolean isProcessed(ID roomID,String target,String msg){
  String reply=(String)messages.get(msg);
  if (reply == null) {
    return false;
  }
  sendMessage(roomID,(target != null ? target + ""String_Node_Str"" : ""String_Node_Str"") + reply);
  return true;
}",0.6524822695035462
94775,"private void send(ID fromID,ID roomID,String target,String msg){
  if (isProcessed(roomID,target,msg)) {
    return;
  }
  Matcher cmdMatcher=null;
  Enumeration keys=commands.keys();
  while (keys.hasMoreElements()) {
    String key=(String)keys.nextElement();
    Pattern pattern=Pattern.compile(key);
    cmdMatcher=pattern.matcher(msg);
    if (cmdMatcher.matches()) {
      break;
    }
  }
  if (cmdMatcher != null && cmdMatcher.matches()) {
    if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        learn(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        update(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        remove(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      msg=cmdMatcher.group(2);
      int index=msg.indexOf('c');
      if (index == -1) {
        try {
          Integer.parseInt(msg);
          sendBug(roomID,target,msg,null);
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        try {
          Integer.parseInt(msg.substring(0,index));
          sendBug(roomID,target,msg.substring(0,index),msg.substring(index + 1));
        }
 catch (        NumberFormatException e) {
        }
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendJavaDoc(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendNewsgroupSearch(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendGoogle(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendWiki(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendEclipseHelp(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendMessageList(roomID,target);
    }
  }
}","private void send(ID fromID,ID roomID,String target,String msg){
  if (isProcessed(roomID,target,msg)) {
    return;
  }
  Matcher cmdMatcher=null;
  Enumeration keys=commands.keys();
  while (keys.hasMoreElements()) {
    String key=(String)keys.nextElement();
    Pattern pattern=Pattern.compile(key);
    cmdMatcher=pattern.matcher(msg);
    if (cmdMatcher.matches()) {
      break;
    }
  }
  if (cmdMatcher != null && cmdMatcher.matches()) {
    if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        learn(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        update(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      if (operators.contains(fromID.getName())) {
        remove(roomID,cmdMatcher.group(2));
      }
 else {
        sendMessage(roomID,NLS.bind(CustomMessages.getString(CustomMessages.No_Operation_Privileges),fromID.getName()));
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      msg=cmdMatcher.group(2);
      int index=msg.indexOf('c');
      if (index == -1) {
        try {
          Integer.parseInt(msg);
          sendBug(roomID,target,msg,null);
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        try {
          Integer.parseInt(msg.substring(0,index));
          sendBug(roomID,target,msg.substring(0,index),msg.substring(index + 1));
        }
 catch (        NumberFormatException e) {
        }
      }
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendJavaDoc(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"") || cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendNewsgroupSearch(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendGoogle(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendWiki(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendEclipseHelp(roomID,target,cmdMatcher.group(2));
    }
 else     if (cmdMatcher.group(1).equals(""String_Node_Str"")) {
      sendMessageList(roomID,target);
    }
  }
}",0.9914559721011332
94776,"public int getResponseCode(){
  if (responseCode != -1)   return responseCode;
  if (isHTTP()) {
    final String response=urlConnection.getHeaderField(0);
    if (response == null) {
      responseCode=-1;
      httpVersion=1;
      return responseCode;
    }
    if (response == null || !response.startsWith(""String_Node_Str""))     return -1;
    response.trim();
    final int mark=response.indexOf(""String_Node_Str"") + 1;
    if (mark == 0)     return -1;
    if (response.charAt(mark - 2) != '1')     httpVersion=0;
    int last=mark + 3;
    if (last > response.length())     last=response.length();
    responseCode=Integer.parseInt(response.substring(mark,last));
    if (last + 1 <= response.length())     responseMessage=response.substring(last + 1);
  }
 else {
    responseCode=OK_RESPONSE_CODE;
    responseMessage=""String_Node_Str"";
  }
  return responseCode;
}","public int getResponseCode(){
  if (responseCode != -1)   return responseCode;
  if (isHTTP()) {
    String response=urlConnection.getHeaderField(0);
    if (response == null) {
      responseCode=-1;
      httpVersion=1;
      return responseCode;
    }
    if (!response.startsWith(""String_Node_Str""))     return -1;
    response=response.trim();
    final int mark=response.indexOf(""String_Node_Str"") + 1;
    if (mark == 0)     return -1;
    if (response.charAt(mark - 2) != '1')     httpVersion=0;
    int last=mark + 3;
    if (last > response.length())     last=response.length();
    responseCode=Integer.parseInt(response.substring(mark,last));
    if (last + 1 <= response.length())     responseMessage=response.substring(last + 1);
  }
 else {
    responseCode=OK_RESPONSE_CODE;
    responseMessage=""String_Node_Str"";
  }
  return responseCode;
}",0.979803808424697
94777,"/** 
 * Returns the string resulting from replacing all occurrences of the target with the replace string.  Note that the target matches literally, and this is not the same behavior as the  String.replaceAll, which uses regular expressions for doing the matching.  
 * @param string the start string.  Must not be <code>null</code>.
 * @param target the target to search for in the start string.  Must not be <code>null</code>.
 * @param replace the replacement string to substitute when the target is found.  Must not be <code>null</code>.
 * @return String result.  Will not be <code>null</code>.   If target is not found in the given string,then the result will be the entire input string.  
 */
public static String replaceAll(String string,String target,String replace){
  final int index=string.indexOf(target);
  if (index == -1)   return string;
  return string.substring(0,index) + replace + replaceAll(string.substring(index + replace.length()),target,replace);
}","/** 
 * Returns the string resulting from replacing all occurrences of the target with the replace string.  Note that the target matches literally, and this is not the same behavior as the  String.replaceAll, which uses regular expressions for doing the matching.  
 * @param string the start string.  Must not be <code>null</code>.
 * @param target the target to search for in the start string.  Must not be <code>null</code>.
 * @param replace the replacement string to substitute when the target is found.  Must not be <code>null</code>.
 * @return String result.  Will not be <code>null</code>.   If target is not found in the given string,then the result will be the entire input string.  
 */
public static String replaceAll(String string,String target,String replace){
  final int index=string.indexOf(target);
  if (index == -1)   return string;
  return string.substring(0,index) + replace + replaceAll(string.substring(index + target.length()),target,replace);
}",0.9933161953727506
94778,"public IRemoteServiceReference[] getRemoteServiceReferences(ID[] idFilter,String clazz,String filter){
  return registry.getRemoteServiceReferences(idFilter,clazz,filter);
}","public IRemoteServiceReference[] getRemoteServiceReferences(ID[] idFilter,String clazz,String filter) throws InvalidSyntaxException {
  return registry.getRemoteServiceReferences(idFilter,clazz,filter);
}",0.9177718832891246
94779,"protected IRemoteServiceReference[] getRemoteServiceReferences(IRemoteServiceContainerAdapter adapter,String clazz){
  return adapter.getRemoteServiceReferences(null,clazz,null);
}","protected IRemoteServiceReference[] getRemoteServiceReferences(IRemoteServiceContainerAdapter adapter,String clazz){
  try {
    return adapter.getRemoteServiceReferences(null,clazz,null);
  }
 catch (  final InvalidSyntaxException e) {
    fail(""String_Node_Str"");
  }
  return null;
}",0.7725321888412017
94780,"protected IRemoteServiceRegistration registerService(IRemoteServiceContainerAdapter adapter,String serviceInterface,Object service,int sleepTime){
  IRemoteServiceRegistration result=adapter.registerRemoteService(new String[]{serviceInterface},service,null);
  sleep(sleepTime);
  return result;
}","protected IRemoteServiceRegistration registerService(IRemoteServiceContainerAdapter adapter,String serviceInterface,Object service,int sleepTime){
  final IRemoteServiceRegistration result=adapter.registerRemoteService(new String[]{serviceInterface},service,null);
  sleep(sleepTime);
  return result;
}",0.99
94781,"protected IRemoteService getRemoteService(IRemoteServiceContainerAdapter adapter,String clazz){
  IRemoteServiceReference[] refs=getRemoteServiceReferences(adapter,clazz);
  if (refs.length == 0)   return null;
  return adapter.getRemoteService(refs[0]);
}","protected IRemoteService getRemoteService(IRemoteServiceContainerAdapter adapter,String clazz){
  final IRemoteServiceReference[] refs=getRemoteServiceReferences(adapter,clazz);
  if (refs.length == 0)   return null;
  return adapter.getRemoteService(refs[0]);
}",0.9884169884169884
94782,"protected void setupRemoteServiceAdapters() throws Exception {
  int clientCount=getClientCount();
  for (int i=0; i < clientCount; i++) {
    adapters[i]=(IRemoteServiceContainerAdapter)getClients()[i].getAdapter(IRemoteServiceContainerAdapter.class);
  }
}","protected void setupRemoteServiceAdapters() throws Exception {
  final int clientCount=getClientCount();
  for (int i=0; i < clientCount; i++) {
    adapters[i]=(IRemoteServiceContainerAdapter)getClients()[i].getAdapter(IRemoteServiceContainerAdapter.class);
  }
}",0.9885057471264368
94783,"protected IRemoteService registerAndGetRemoteService(){
  final IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  final ID targetID=getClients()[1].getConnectedID();
  final String serviceName=IConcatService.class.getName();
  final Dictionary props=new Hashtable();
  props.put(Constants.SERVICE_REGISTRATION_TARGETS,targetID);
  adapters[0].registerRemoteService(new String[]{serviceName},createService(),props);
  sleep(1500);
  final IRemoteServiceContainerAdapter adapter=adapters[1];
  final IRemoteServiceReference[] refs=adapter.getRemoteServiceReferences(null,serviceName,null);
  if (refs.length == 0)   return null;
  return adapter.getRemoteService(refs[0]);
}","protected IRemoteService registerAndGetRemoteService() throws Exception {
  final IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  final ID targetID=getClients()[1].getConnectedID();
  final String serviceName=IConcatService.class.getName();
  final Dictionary props=new Hashtable();
  props.put(Constants.SERVICE_REGISTRATION_TARGETS,targetID);
  adapters[0].registerRemoteService(new String[]{serviceName},createService(),props);
  sleep(1500);
  final IRemoteServiceContainerAdapter adapter=adapters[1];
  final IRemoteServiceReference[] refs=adapter.getRemoteServiceReferences(null,serviceName,null);
  if (refs.length == 0)   return null;
  return adapter.getRemoteService(refs[0]);
}",0.9871977240398292
94784,"/** 
 * Returns an array of <code>IRemoteServiceReference</code> objects. The returned array of <code>IRemoteServiceReference</code> objects contains services that were registered under the specified class and match the specified idFilter, and filter criteria. <p> The list is valid at the time of the call to this method, however since the Framework is a very dynamic environment, services can be modified or unregistered at anytime. <p> <code>idFilter</code> is used to select a registered services that were registered by a given set of containers with id in idFilter. Only services exposed by a container with id in idFilter will be returned. <p> If <code>idFilter</code> is <code>null</code>, all containers are considered to match the filter. <p> <code>filter</code> is used to select the registered service whose properties objects contain keys and values which satisfy the filter. See  {@link Filter} for a description of the filter string syntax.<p> If <code>filter</code> is <code>null</code>, all registered services are considered to match the filter. If <code>filter</code> cannot be parsed, an  {@link InvalidSyntaxException} will be thrown with a humanreadable message where the filter became unparsable.
 * @param idFilter an array of ID instances that will restrict the search for matching container ids If null, all remote containers will be considered in search for matching IRemoteServiceReference instances. May be <code>null</code> .
 * @param clazz the fully qualified name of the interface class that describes the desired service. Must not be <code>null</code> .
 * @param filter The filter criteria. May be <code>null</code> .
 * @return IRemoteServiceReference [] the matching IRemoteServiceReferences
 */
public IRemoteServiceReference[] getRemoteServiceReferences(ID[] idFilter,String clazz,String filter);","/** 
 * Returns an array of <code>IRemoteServiceReference</code> objects. The returned array of <code>IRemoteServiceReference</code> objects contains services that were registered under the specified class and match the specified idFilter, and filter criteria. <p> The list is valid at the time of the call to this method, however since the Framework is a very dynamic environment, services can be modified or unregistered at anytime. <p> <code>idFilter</code> is used to select a registered services that were registered by a given set of containers with id in idFilter. Only services exposed by a container with id in idFilter will be returned. <p> If <code>idFilter</code> is <code>null</code>, all containers are considered to match the filter. <p> <code>filter</code> is used to select the registered service whose properties objects contain keys and values which satisfy the filter. See  {@link Filter} for a description of the filter string syntax.<p> If <code>filter</code> is <code>null</code>, all registered services are considered to match the filter. If <code>filter</code> cannot be parsed, an  {@link InvalidSyntaxException} will be thrown with a humanreadable message where the filter became unparsable.
 * @param idFilter an array of ID instances that will restrict the search for matching container ids If null, all remote containers will be considered in search for matching IRemoteServiceReference instances. May be <code>null</code> .
 * @param clazz the fully qualified name of the interface class that describes the desired service. Must not be <code>null</code> .
 * @param filter The filter criteria. May be <code>null</code> .
 * @return IRemoteServiceReference [] the matching IRemoteServiceReferences
 * @throws InvalidSyntaxException If filter contains an invalid filter string that cannot be parsed.
 */
public IRemoteServiceReference[] getRemoteServiceReferences(ID[] idFilter,String clazz,String filter) throws InvalidSyntaxException ;",0.9652814308258812
94785,"/** 
 * This method is called upon plug-in activation
 * @param context 
 * @throws Exception 
 */
public void start(BundleContext context) throws Exception {
  this.context=context;
}","/** 
 * This method is called upon plug-in activation
 * @param context 
 * @throws Exception 
 */
public void start(BundleContext context) throws Exception {
  this.context=context;
  services=new HashMap();
}",0.934010152284264
94786,"public void disconnect(){
  final ID groupID=getConnectedID();
  fireContainerEvent(new ContainerDisconnectingEvent(this.getID(),groupID));
synchronized (getConnectLock()) {
    if (isConnected()) {
      final ISynchAsynchConnection conn=getConnection();
synchronized (conn) {
synchronized (getGroupMembershipLock()) {
          handleLeave(groupID,conn);
        }
      }
    }
    this.connection=null;
    remoteServerID=null;
    accountManager.setConnection(null);
    chatRoomManager.setConnection(null,null,null);
    outgoingFileTransferContainerAdapter.setConnection(null);
    presenceHelper.disconnect();
    getSharedObjectManager().removeSharedObject(presenceHelperID);
  }
  fireContainerEvent(new ContainerDisconnectedEvent(this.getID(),groupID));
}","public void disconnect(){
  final ID groupID=getConnectedID();
  fireContainerEvent(new ContainerDisconnectingEvent(this.getID(),groupID));
synchronized (getConnectLock()) {
    if (isConnected()) {
      XmppPlugin.getDefault().unregisterService(this);
      final ISynchAsynchConnection conn=getConnection();
synchronized (conn) {
synchronized (getGroupMembershipLock()) {
          handleLeave(groupID,conn);
        }
      }
    }
    this.connection=null;
    remoteServerID=null;
    accountManager.setConnection(null);
    chatRoomManager.setConnection(null,null,null);
    outgoingFileTransferContainerAdapter.setConnection(null);
    presenceHelper.disconnect();
    getSharedObjectManager().removeSharedObject(presenceHelperID);
  }
  fireContainerEvent(new ContainerDisconnectedEvent(this.getID(),groupID));
}",0.9653434152488972
94787,"public void connect(ID remote,IConnectContext joinContext) throws ContainerConnectException {
  try {
    getSharedObjectManager().addSharedObject(presenceHelperID,presenceHelper,null);
    super.connect(remote,joinContext);
  }
 catch (  final ContainerConnectException e) {
    disconnect();
    throw e;
  }
catch (  final SharedObjectAddException e1) {
    disconnect();
    throw new ContainerConnectException(NLS.bind(Messages.XMPPContainer_EXCEPTION_ADDING_SHARED_OBJECT,presenceHelperID),e1);
  }
}","public void connect(ID remote,IConnectContext joinContext) throws ContainerConnectException {
  try {
    getSharedObjectManager().addSharedObject(presenceHelperID,presenceHelper,null);
    super.connect(remote,joinContext);
    XmppPlugin.getDefault().registerService(this);
  }
 catch (  final ContainerConnectException e) {
    disconnect();
    throw e;
  }
catch (  final SharedObjectAddException e1) {
    disconnect();
    throw new ContainerConnectException(NLS.bind(Messages.XMPPContainer_EXCEPTION_ADDING_SHARED_OBJECT,presenceHelperID),e1);
  }
}",0.9520225776105362
94788,"/** 
 * Read the contents of the packet being sent from the server and handle any events accordingly.
 * @return the String returned from {@link Session#read()}
 */
String read() throws IOException {
  final String input=super.read();
  if (input == null) {
    return null;
  }
  final String[] lines=StringUtils.split(input,""String_Node_Str"");
  for (int i=0; i < lines.length; i++) {
    if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] split=StringUtils.splitOnSpace(lines[i]);
      Contact contact=contactList.getContact(split[4]);
      if (contact == null) {
        contact=new Contact(split[4],split[5]);
      }
      contacts.add(contact);
      fireContactJoinedEvent(contact);
    }
 else     if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] split=StringUtils.splitOnSpace(lines[i]);
      Contact contact=contactList.getContact(split[2]);
      if (contact == null) {
        contact=new Contact(split[1],split[2]);
      }
      contacts.add(contact);
      joined=true;
      fireContactJoinedEvent(contact);
    }
 else     if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] split=StringUtils.splitOnSpace(lines[i]);
      if (split.length == 2) {
        final Contact contact=findContact(split[1]);
        contacts.remove(contact);
        fireContactLeftEvent(contact);
        if (contacts.isEmpty()) {
          close();
        }
      }
 else {
        fireSessionTimedOutEvent();
        close();
      }
    }
 else     if (lines[i].startsWith(""String_Node_Str"")) {
      if (input.indexOf(""String_Node_Str"") != -1) {
        final String trim=input.substring(input.indexOf(""String_Node_Str""));
        final String content=StringUtils.splitSubstring(trim,""String_Node_Str"",3);
        fireContactIsTypingEvent(findContact(StringUtils.splitOnSpace(content)[1]));
      }
 else       if (input.indexOf(""String_Node_Str"") != -1) {
        final int index=input.indexOf(""String_Node_Str"") == -1 ? 2 : 3;
        final String[] contents=StringUtils.split(input,""String_Node_Str"",index);
        String[] split=StringUtils.splitOnSpace(contents[index - 2]);
        final Contact contact=findContact(split[1]);
        final int count=Integer.parseInt(split[3]);
        split=StringUtils.split(contents[index - 1],""String_Node_Str"");
        final int text=count - (split[0].length() + 4);
        fireMessageReceivedEvent(contact,split[1].substring(0,text));
      }
    }
  }
  return input;
}","/** 
 * Read the contents of the packet being sent from the server and handle any events accordingly.
 * @return the String returned from {@link Session#read()}
 */
String read() throws IOException {
  final String input=super.read();
  if (input == null) {
    return null;
  }
  final String[] lines=StringUtils.split(input,""String_Node_Str"");
  for (int i=0; i < lines.length; i++) {
    if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] split=StringUtils.splitOnSpace(lines[i]);
      Contact contact=contactList.getContact(split[4]);
      if (contact == null) {
        contact=new Contact(split[4],split[5]);
      }
      contacts.add(contact);
      fireContactJoinedEvent(contact);
    }
 else     if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] split=StringUtils.splitOnSpace(lines[i]);
      Contact contact=contactList.getContact(split[2]);
      if (contact == null) {
        contact=new Contact(split[1],split[2]);
      }
      contacts.add(contact);
      fireContactJoinedEvent(contact);
    }
 else     if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] split=StringUtils.splitOnSpace(lines[i]);
      if (split.length == 2) {
        final Contact contact=findContact(split[1]);
        contacts.remove(contact);
        fireContactLeftEvent(contact);
        if (contacts.isEmpty()) {
          close();
        }
      }
 else {
        fireSessionTimedOutEvent();
        close();
      }
    }
 else     if (lines[i].startsWith(""String_Node_Str"")) {
      if (input.indexOf(""String_Node_Str"") != -1) {
        final String trim=input.substring(input.indexOf(""String_Node_Str""));
        final String content=StringUtils.splitSubstring(trim,""String_Node_Str"",3);
        fireContactIsTypingEvent(findContact(StringUtils.splitOnSpace(content)[1]));
      }
 else       if (input.indexOf(""String_Node_Str"") != -1) {
        final int index=input.indexOf(""String_Node_Str"") == -1 ? 2 : 3;
        final String[] contents=StringUtils.split(input,""String_Node_Str"",index);
        String[] split=StringUtils.splitOnSpace(contents[index - 2]);
        final Contact contact=findContact(split[1]);
        final int count=Integer.parseInt(split[3]);
        split=StringUtils.split(contents[index - 1],""String_Node_Str"");
        final int text=count - (split[0].getBytes(""String_Node_Str"").length + 4);
        fireMessageReceivedEvent(contact,new String(split[1].getBytes(""String_Node_Str""),0,text,""String_Node_Str""));
      }
    }
  }
  return input;
}",0.976781425140112
94789,"/** 
 * Sends a message to the users connected to this chat session.
 * @param message the message to be sent
 * @throws IOException If an I/O occurs when sending the message to the server
 */
public void sendMessage(String message) throws IOException {
  message=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ message;
  write(""String_Node_Str"",""String_Node_Str"" + message.length() + ""String_Node_Str""+ message,false);
}","/** 
 * Sends a message to the users connected to this chat session.
 * @param message the message to be sent
 * @throws IOException If an I/O occurs when sending the message to the server
 */
public void sendMessage(String message) throws IOException {
  message=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ message;
  write(""String_Node_Str"",""String_Node_Str"" + message.getBytes(""String_Node_Str"").length + ""String_Node_Str""+ message,false);
}",0.9663677130044844
94790,"/** 
 * Invites the user with the specified email to this chat session.
 * @param email the user's email address
 * @throws IOException If an I/O error occurs while attempting to send the invitation to the user
 */
public void invite(String email) throws IOException {
synchronized (contacts) {
    for (int i=0; i < contacts.size(); i++) {
      if (((Contact)contacts.get(i)).getEmail().equals(email)) {
        return;
      }
    }
  }
  write(""String_Node_Str"",email);
  while (!joined)   ;
  joined=false;
}","/** 
 * Invites the user with the specified email to this chat session.
 * @param email the user's email address
 * @throws IOException If an I/O error occurs while attempting to send the invitation to the user
 */
public void invite(String email) throws IOException {
synchronized (contacts) {
    for (int i=0; i < contacts.size(); i++) {
      if (((Contact)contacts.get(i)).getEmail().equals(email)) {
        return;
      }
    }
  }
  write(""String_Node_Str"",email);
}",0.9615384615384616
94791,"private void retrieveBuddyList() throws IOException {
  write(""String_Node_Str"",""String_Node_Str"");
  BufferedReader reader=new BufferedReader(new InputStreamReader(getInputStream()));
  String input=reader.readLine();
  while (input == null || !input.startsWith(""String_Node_Str"")) {
    input=reader.readLine();
  }
  String[] split=StringUtils.splitOnSpace(input);
  int contacts=Integer.parseInt(split[4]);
  while (!input.startsWith(""String_Node_Str"")) {
    if (input.startsWith(""String_Node_Str"")) {
      client.internalSetDisplayName(StringUtils.splitSubstring(input,""String_Node_Str"",2));
    }
 else     if (input.startsWith(""String_Node_Str"")) {
      split=StringUtils.splitOnSpace(input);
      list.addGroup(split[2],new Group(URLDecoder.decode(split[1])));
    }
    input=reader.readLine();
  }
  int count=0;
  while (true) {
    if (input.startsWith(""String_Node_Str"")) {
      count++;
      String[] contact=StringUtils.splitOnSpace(input);
      String email=contact[1].substring(2);
switch (contact.length) {
case 3:
        list.internalAddContact(email,email);
      break;
case 5:
    list.addContact(email,email,contact[3].substring(2));
  break;
default :
list.addContact(contact[2].substring(2),email,contact[3].substring(2),contact[5]);
break;
}
if (count == contacts) {
break;
}
}
input=reader.readLine();
}
write(""String_Node_Str"",client.getStatus().getLiteral() + ""String_Node_Str"");
idle();
ping();
}","private void retrieveBuddyList() throws IOException {
  write(""String_Node_Str"",""String_Node_Str"");
  BufferedReader reader=new BufferedReader(new InputStreamReader(getInputStream(),""String_Node_Str""));
  String input=reader.readLine();
  while (input == null || !input.startsWith(""String_Node_Str"")) {
    input=reader.readLine();
  }
  String[] split=StringUtils.splitOnSpace(input);
  int contacts=Integer.parseInt(split[4]);
  while (!input.startsWith(""String_Node_Str"")) {
    if (input.startsWith(""String_Node_Str"")) {
      client.internalSetDisplayName(StringUtils.splitSubstring(input,""String_Node_Str"",2));
    }
 else     if (input.startsWith(""String_Node_Str"")) {
      split=StringUtils.splitOnSpace(input);
      list.addGroup(split[2],new Group(URLDecoder.decode(split[1])));
    }
    input=reader.readLine();
  }
  int count=0;
  while (true) {
    if (input.startsWith(""String_Node_Str"")) {
      count++;
      String[] contact=StringUtils.splitOnSpace(input);
      String email=contact[1].substring(2);
switch (contact.length) {
case 3:
        list.internalAddContact(email,email);
      break;
case 5:
    list.addContact(email,email,contact[3].substring(2));
  break;
default :
list.addContact(contact[2].substring(2),email,contact[3].substring(2),contact[5]);
break;
}
if (count == contacts) {
break;
}
}
input=reader.readLine();
}
write(""String_Node_Str"",client.getStatus().getLiteral() + ""String_Node_Str"");
idle();
ping();
}",0.9937629937629938
94792,"/** 
 * Reads data from the channel and returns it as a String.
 * @return the contents that have been read, or <code>null</code> ifnothing is currently available
 * @throws IOException If an I/O error occurred while reading from the channel.
 */
String read() throws IOException {
  int read=is.read(buffer);
  if (read < 1) {
    return null;
  }
 else {
    return new String(buffer,0,read).trim();
  }
}","/** 
 * Reads data from the channel and returns it as a String.
 * @return the contents that have been read, or <code>null</code> ifnothing is currently available
 * @throws IOException If an I/O error occurred while reading from the channel.
 */
String read() throws IOException {
  int read=is.read(buffer);
  if (read < 1) {
    return null;
  }
  return new String(buffer,0,read,""String_Node_Str"").trim();
}",0.960880195599022
94793,"public void stop(BundleContext context) throws Exception {
  if (containerManagerTracker != null) {
    containerManagerTracker.close();
    containerManagerTracker=null;
  }
  plugin=null;
  context=null;
  super.stop(context);
}","public void stop(BundleContext context) throws Exception {
  super.stop(context);
  if (containerManagerTracker != null) {
    containerManagerTracker.close();
    containerManagerTracker=null;
  }
  plugin=null;
  this.context=null;
}",0.843010752688172
94794,"public void sendPresenceUpdate(ID toID,IPresence presence) throws ECFException {
  if (presence == null || client == null) {
    throw new ECFException();
  }
  IPresence.Mode mode=presence.getMode();
  try {
    if (presence.getType() == IPresence.Type.UNAVAILABLE) {
      disconnect();
    }
 else     if (mode == IPresence.Mode.AVAILABLE || mode == IPresence.Mode.CHAT) {
      client.setStatus(Status.ONLINE);
    }
 else     if (mode == IPresence.Mode.AWAY || mode == IPresence.Mode.EXTENDED_AWAY) {
      client.setStatus(Status.AWAY);
    }
 else     if (mode == IPresence.Mode.DND) {
      client.setStatus(Status.BUSY);
    }
 else {
      client.setStatus(Status.APPEAR_OFFLINE);
    }
    client.setPersonalMessage(presence.getStatus());
  }
 catch (  IOException e) {
    throw new ECFException(e);
  }
}","public void sendPresenceUpdate(ID toID,IPresence presence) throws ECFException {
  if (presence == null || client == null) {
    throw new ECFException();
  }
  IPresence.Mode mode=presence.getMode();
  try {
    client.setPersonalMessage(presence.getStatus());
    if (presence.getType() == IPresence.Type.UNAVAILABLE) {
      disconnect();
    }
 else     if (mode == IPresence.Mode.AVAILABLE || mode == IPresence.Mode.CHAT) {
      client.setStatus(Status.ONLINE);
    }
 else     if (mode == IPresence.Mode.AWAY || mode == IPresence.Mode.EXTENDED_AWAY) {
      client.setStatus(Status.AWAY);
    }
 else     if (mode == IPresence.Mode.DND) {
      client.setStatus(Status.BUSY);
    }
 else {
      client.setStatus(Status.APPEAR_OFFLINE);
    }
  }
 catch (  IOException e) {
    throw new ECFException(e);
  }
}",0.9351285189718482
94795,"/** 
 * Notifies attached   {@link ChatSessionListeners} that this session has nowtimed out.
 */
private void fireSessionTimedOutEvent(){
synchronized (listeners) {
    for (int i=0; i < listeners.size(); i++) {
      ((IChatSessionListener)listeners.get(i)).sessionTimedOut();
    }
  }
}","/** 
 * Notifies attached   {@link IChatSessionListener} that this session has nowtimed out.
 */
private void fireSessionTimedOutEvent(){
synchronized (listeners) {
    for (int i=0; i < listeners.size(); i++) {
      ((IChatSessionListener)listeners.get(i)).sessionTimedOut();
    }
  }
}",0.9965397923875432
94796,"/** 
 * Invokes the   {@link IContactListener#nameChanged(Status)} method on everylistener within  {@link #listeners}. This method is automatically invoked when   {@link #setDisplayName(String)} is called.
 * @param name the new name of this contact
 */
private void fireNameChanged(String name){
synchronized (listeners) {
    for (int i=0; i < listeners.size(); i++) {
      ((IContactListener)listeners.get(i)).nameChanged(name);
    }
  }
}","/** 
 * Invokes the   {@link IContactListener#nameChanged(String)} method on everylistener within  {@link #listeners}. This method is automatically invoked when   {@link #setDisplayName(String)} is called.
 * @param name1 the new name of this contact
 */
private void fireNameChanged(String name1){
synchronized (listeners) {
    for (int i=0; i < listeners.size(); i++) {
      ((IContactListener)listeners.get(i)).nameChanged(name1);
    }
  }
}",0.9876543209876544
94797,"/** 
 * Sets the user name of this contact with the given name. Developers are highly discouraged from calling this method since if the value of <code>newName</code> differs from the current name, the  {@link IContactListener#nameChanged(Status)} method will be invoked onall the listeners attached to this contact.
 * @param newName the new user name of this Contact
 */
void setDisplayName(String newName){
  newName=URLDecoder.decode(newName);
  if (!newName.equals(name)) {
    this.name=newName;
    fireNameChanged(newName);
  }
}","/** 
 * Sets the user name of this contact with the given name. Developers are highly discouraged from calling this method since if the value of <code>newName</code> differs from the current name, the  {@link IContactListener#nameChanged(String)} method will be invoked onall the listeners attached to this contact.
 * @param newName the new user name of this Contact
 */
void setDisplayName(String newName){
  newName=URLDecoder.decode(newName);
  if (!newName.equals(name)) {
    this.name=newName;
    fireNameChanged(newName);
  }
}",0.9925373134328358
94798,"/** 
 * Sets this contact's status to the given status. Developers are highly discouraged from calling this method since if the user's status actually did change, the   {@link IContactListener#nameChanged(Status)} method willbe invoked on all the listeners attached to this contact.
 * @param status the status that this contact is now in
 */
void setStatus(Status status){
  if (this.status != status) {
    this.status=status;
    fireStatusChanged(status);
  }
}","/** 
 * Sets this contact's status to the given status. Developers are highly discouraged from calling this method since if the user's status actually did change, the   {@link IContactListener#nameChanged(String)} method willbe invoked on all the listeners attached to this contact.
 * @param status the status that this contact is now in
 */
void setStatus(Status status){
  if (this.status != status) {
    this.status=status;
    fireStatusChanged(status);
  }
}",0.9913978494623656
94799,"/** 
 * Invokes the   {@link IContactListener#statusChanged(Status)} method onevery listener within  {@link #listeners}. This method is automatically invoked when   {@link #setStatus(int)} is called.
 * @param status the status that this contact has now switched to
 */
private void fireStatusChanged(Status status){
synchronized (listeners) {
    for (int i=0; i < listeners.size(); i++) {
      ((IContactListener)listeners.get(i)).statusChanged(status);
    }
  }
}","/** 
 * Invokes the   {@link IContactListener#statusChanged(Status)} method onevery listener within  {@link #listeners}. This method is automatically invoked when   {@link #setStatus(Status)} is called.
 * @param status1 the status that this contact has now switched to
 */
private void fireStatusChanged(Status status1){
synchronized (listeners) {
    for (int i=0; i < listeners.size(); i++) {
      ((IContactListener)listeners.get(i)).statusChanged(status1);
    }
  }
}",0.9872611464968152
94800,"/** 
 * Creates a new DispatchSocket to connect to the given hostname and port.
 * @param hostname the host to be connected to
 * @param port the corresponding port number
 * @param client the client that that invoked this dispatch session
 * @throws IOException If an I/O error occurs while attempting to open the SocketChannel
 */
DispatchSession(String hostname,int port) throws IOException {
  super(hostname,port,null);
}","/** 
 * Creates a new DispatchSocket to connect to the given hostname and port.
 * @param hostname the host to be connected to
 * @param port the corresponding port number
 * @throws IOException If an I/O error occurs while attempting to open the SocketChannel
 */
DispatchSession(String hostname,int port) throws IOException {
  super(hostname,port,null);
}",0.9132653061224488
94801,"/** 
 * Retrieves information from   {@link #PASSPORT_NEXUS} and stores it in{@link #passportInfo}.
 * @return <code>true</code> if the retrieval process completedsuccessfully
 * @throws IOException If an I/O error occurs while attempting to connect to the Passport Nexus page
 */
private boolean getLoginServerAddress() throws IOException {
  request=(HttpURLConnection)new URL(PASSPORT_NEXUS).openConnection();
  if (request.getResponseCode() == HttpURLConnection.HTTP_OK) {
    daLoginURL=StringUtils.splitSubstring(request.getHeaderField(""String_Node_Str""),""String_Node_Str"",1);
    daLoginURL=""String_Node_Str"" + daLoginURL.substring(daLoginURL.indexOf('=') + 1);
    request.disconnect();
    return true;
  }
  request.disconnect();
  return false;
}","/** 
 * Retrieves information from   {@link #PASSPORT_NEXUS} and stores it in{@link #daLoginURL}.
 * @return <code>true</code> if the retrieval process completedsuccessfully
 * @throws IOException If an I/O error occurs while attempting to connect to the Passport Nexus page
 */
private boolean getLoginServerAddress() throws IOException {
  request=(HttpURLConnection)new URL(PASSPORT_NEXUS).openConnection();
  if (request.getResponseCode() == HttpURLConnection.HTTP_OK) {
    daLoginURL=StringUtils.splitSubstring(request.getHeaderField(""String_Node_Str""),""String_Node_Str"",1);
    daLoginURL=""String_Node_Str"" + daLoginURL.substring(daLoginURL.indexOf('=') + 1);
    request.disconnect();
    return true;
  }
  request.disconnect();
  return false;
}",0.9854497354497356
94802,"/** 
 * Creates a new URL hyperlink.
 * @param region
 * @param urlString
 */
public BitTorrentHyperlink(IRegion region,URI uri){
  super(region,uri);
}","/** 
 * Creates a new URL hyperlink.
 * @param region
 * @param uri
 */
public BitTorrentHyperlink(IRegion region,URI uri){
  super(region,uri);
}",0.9798657718120806
94803,"/** 
 * @return
 */
public IContainerManager getContainerManager(){
  if (containerManagerTracker == null) {
    containerManagerTracker=new ServiceTracker(context,IContainerManager.class.getName(),null);
    containerManagerTracker.open();
  }
  return (IContainerManager)containerManagerTracker.getService();
}","/** 
 * @return container manager.
 */
public IContainerManager getContainerManager(){
  if (containerManagerTracker == null) {
    containerManagerTracker=new ServiceTracker(context,IContainerManager.class.getName(),null);
    containerManagerTracker.open();
  }
  return (IContainerManager)containerManagerTracker.getService();
}",0.9704510108864696
94804,"protected IContainer[] getContainers(){
  IContainerManager manager=Activator.getDefault().getContainerManager();
  if (manager == null)   return EMPTY;
  List results=new ArrayList();
  IContainer[] containers=manager.getAllContainers();
  for (int i=0; i < containers.length; i++) {
    ID connectedID=containers[i].getConnectedID();
    if (connectedID != null && ((isXMPPS && containers[i] instanceof XMPPSContainer) || (!isXMPPS && containers[i] instanceof XMPPContainer)))     results.add(containers[i]);
  }
  return (IContainer[])results.toArray(EMPTY);
}","protected IContainer[] getContainers(){
  final IContainerManager manager=Activator.getDefault().getContainerManager();
  if (manager == null)   return EMPTY;
  final List results=new ArrayList();
  final IContainer[] containers=manager.getAllContainers();
  for (int i=0; i < containers.length; i++) {
    final ID connectedID=containers[i].getConnectedID();
    if (connectedID != null && ((isXMPPS && containers[i] instanceof XMPPSContainer) || (!isXMPPS && containers[i] instanceof XMPPContainer)))     results.add(containers[i]);
  }
  return (IContainer[])results.toArray(EMPTY);
}",0.9791304347826087
94805,"private void openMessagesView(IChatManager chatManager,ID localID,ID targetID) throws PartInitException {
  IChatMessageSender icms=chatManager.getChatMessageSender();
  ITypingMessageSender itms=chatManager.getTypingMessageSender();
  IWorkbenchWindow ww=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  MessagesView view=(MessagesView)ww.getActivePage().showView(MessagesView.VIEW_ID);
  view.selectTab(icms,itms,localID,targetID);
}","private void openMessagesView(IChatManager chatManager,ID localID,ID targetID) throws PartInitException {
  final IChatMessageSender icms=chatManager.getChatMessageSender();
  final ITypingMessageSender itms=chatManager.getTypingMessageSender();
  final IWorkbenchWindow ww=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  final MessagesView view=(MessagesView)ww.getActivePage().showView(MessagesView.VIEW_ID);
  view.selectTab(icms,itms,localID,targetID);
}",0.973568281938326
94806,"public String getText(Object element){
  IRosterManager manager=((IPresenceContainerAdapter)element).getRosterManager();
  if (manager == null)   return null;
  return manager.getRoster().getUser().getID().getName();
}","public String getText(Object element){
  final IRosterManager manager=((IPresenceContainerAdapter)element).getRosterManager();
  if (manager == null)   return null;
  return manager.getRoster().getUser().getID().getName();
}",0.986425339366516
94807,"protected IConnectWizard createConnectWizard(){
  String auth=getURI().getAuthority();
  if (isXMPPS)   return new XMPPSConnectWizard(auth);
 else   return new XMPPConnectWizard(auth);
}","protected IConnectWizard createConnectWizard(){
  final String auth=getURI().getAuthority();
  if (isXMPPS)   return new XMPPSConnectWizard(auth);
 else   return new XMPPConnectWizard(auth);
}",0.984126984126984
94808,"/** 
 * @param adapters
 */
private void chooseAccount(final IContainer[] containers){
  if (containers.length == 1) {
    openContainer(containers[0]);
    return;
  }
 else {
    final IPresenceContainerAdapter[] adapters=new IPresenceContainerAdapter[containers.length];
    for (int i=0; i < containers.length; i++)     adapters[i]=(IPresenceContainerAdapter)containers[i].getAdapter(IPresenceContainerAdapter.class);
    ListDialog dialog=new ListDialog(null);
    dialog.setContentProvider(new IStructuredContentProvider(){
      public Object[] getElements(      Object inputElement){
        return adapters;
      }
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
    }
);
    dialog.setInput(adapters);
    dialog.setAddCancelButton(true);
    dialog.setBlockOnOpen(true);
    dialog.setTitle(Messages.XMPPHyperlink_SELECT_ACCOUNT_TITLE);
    dialog.setMessage(Messages.XMPPHyperlink_SELECT_ACCOUNT_MESSAGE);
    dialog.setHeightInChars(adapters.length > 4 ? adapters.length : 4);
    dialog.setInitialSelections(new IPresenceContainerAdapter[]{adapters[0]});
    dialog.setLabelProvider(new ILabelProvider(){
      public Image getImage(      Object element){
        return null;
      }
      public String getText(      Object element){
        IRosterManager manager=((IPresenceContainerAdapter)element).getRosterManager();
        if (manager == null)         return null;
        return manager.getRoster().getUser().getID().getName();
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void dispose(){
      }
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void removeListener(      ILabelProviderListener listener){
      }
    }
);
    int result=dialog.open();
    if (result == ListDialog.OK) {
      Object[] res=dialog.getResult();
      if (res.length > 0)       openContainer((IContainer)res[0]);
    }
  }
}","/** 
 * @param adapters
 */
private void chooseAccount(final IContainer[] containers){
  if (containers.length == 1) {
    openContainer(containers[0]);
    return;
  }
 else {
    final IPresenceContainerAdapter[] adapters=new IPresenceContainerAdapter[containers.length];
    for (int i=0; i < containers.length; i++)     adapters[i]=(IPresenceContainerAdapter)containers[i].getAdapter(IPresenceContainerAdapter.class);
    final ListDialog dialog=new ListDialog(null);
    dialog.setContentProvider(new IStructuredContentProvider(){
      public Object[] getElements(      Object inputElement){
        return adapters;
      }
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
    }
);
    dialog.setInput(adapters);
    dialog.setAddCancelButton(true);
    dialog.setBlockOnOpen(true);
    dialog.setTitle(Messages.XMPPHyperlink_SELECT_ACCOUNT_TITLE);
    dialog.setMessage(Messages.XMPPHyperlink_SELECT_ACCOUNT_MESSAGE);
    dialog.setHeightInChars(adapters.length > 4 ? adapters.length : 4);
    dialog.setInitialSelections(new IPresenceContainerAdapter[]{adapters[0]});
    dialog.setLabelProvider(new ILabelProvider(){
      public Image getImage(      Object element){
        return null;
      }
      public String getText(      Object element){
        final IRosterManager manager=((IPresenceContainerAdapter)element).getRosterManager();
        if (manager == null)         return null;
        return manager.getRoster().getUser().getID().getName();
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void dispose(){
      }
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void removeListener(      ILabelProviderListener listener){
      }
    }
);
    final int result=dialog.open();
    if (result == ListDialog.OK) {
      final Object[] res=dialog.getResult();
      if (res.length > 0)       openContainer((IContainer)res[0]);
    }
  }
}",0.9941916747337852
94809,"/** 
 * Creates a new URL hyperlink.
 * @param region
 * @param urlString
 */
public XMPPHyperlink(IRegion region,URI uri){
  super(region,uri);
  isXMPPS=getURI().getScheme().equalsIgnoreCase(XMPPHyperlinkDetector.XMPPS_PROTOCOL);
}","/** 
 * Creates a new URL hyperlink.
 * @param region
 * @param uri
 */
public XMPPHyperlink(IRegion region,URI uri){
  super(region,uri);
  isXMPPS=getURI().getScheme().equalsIgnoreCase(XMPPHyperlinkDetector.XMPPS_PROTOCOL);
}",0.982608695652174
94810,"/** 
 * @param presenceContainerAdapter
 */
private void openContainer(IContainer container){
  IPresenceContainerAdapter presenceContainerAdapter=(IPresenceContainerAdapter)container.getAdapter(IPresenceContainerAdapter.class);
  IChatManager chatManager=presenceContainerAdapter.getChatManager();
  IRosterManager rosterManager=presenceContainerAdapter.getRosterManager();
  if (chatManager != null && rosterManager != null) {
    try {
      XMPPID localID=(XMPPID)rosterManager.getRoster().getUser().getID();
      Namespace ns=container.getConnectNamespace();
      XMPPID targetID=(isXMPPS) ? new XMPPSID(ns,getURI().getAuthority()) : new XMPPID(ns,getURI().getAuthority());
      if (localID.equals(targetID)) {
        MessageDialog.openError(null,Messages.XMPPHyperlink_MESSAGING_ERROR_TITLE,Messages.XMPPHyperlink_MESSAGING_ERROR_MESSAGE);
        return;
      }
 else {
        String localHost=localID.getHostname();
        String targetHost=targetID.getHostname();
        if (localHost.equals(targetHost)) {
          openMessagesView(chatManager,localID,targetID);
        }
 else {
          MessageDialog messageDialog=new MessageDialog(null,Messages.XMPPHyperlink_SELECT_ACTION_DIALOG_TITLE,null,NLS.bind(Messages.XMPPHyperlink_SELECT_ACTION_DIALOG_MESSAGE,new Object[]{targetHost,localHost,targetID.getName(),localID.getName()}),MessageDialog.QUESTION,new String[]{Messages.XMPPHyperlink_SELECT_ACTION_DIALOG_BUTTON_SEND_MESSAGE,Messages.XMPPHyperlink_SELECT_ACTION_DIALOG_BUTTON_CONNECT,Messages.XMPPHyperlink_SELECT_ACTION_DIALOG_BUTTON_CANCEL},2);
          int selected=messageDialog.open();
switch (selected) {
case 0:
            openMessagesView(chatManager,localID,targetID);
          return;
case 1:
        super.open();
      return;
default :
    return;
}
}
}
}
 catch (Exception e) {
MessageDialog.openError(null,Messages.XMPPHyperlink_ERROR_OPEN_MESSAGE_VIEW_DIALOG_TITLE,NLS.bind(Messages.XMPPHyperlink_ERROR_OPEN_MESSAGE_VIEW_DIALOG_MESSAGE,e.getLocalizedMessage()));
Activator.getDefault().getLog().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,Messages.XMPPHyperlink_ERROR_OPEN_MESSAGE_VIEW_LOG_STATUS_MESSAGE,e));
}
}
}","/** 
 * @param presenceContainerAdapter
 */
private void openContainer(IContainer container){
  final IPresenceContainerAdapter presenceContainerAdapter=(IPresenceContainerAdapter)container.getAdapter(IPresenceContainerAdapter.class);
  final IChatManager chatManager=presenceContainerAdapter.getChatManager();
  final IRosterManager rosterManager=presenceContainerAdapter.getRosterManager();
  if (chatManager != null && rosterManager != null) {
    try {
      final XMPPID localID=(XMPPID)rosterManager.getRoster().getUser().getID();
      final Namespace ns=container.getConnectNamespace();
      final XMPPID targetID=(isXMPPS) ? new XMPPSID(ns,getURI().getAuthority()) : new XMPPID(ns,getURI().getAuthority());
      if (localID.equals(targetID)) {
        MessageDialog.openError(null,Messages.XMPPHyperlink_MESSAGING_ERROR_TITLE,Messages.XMPPHyperlink_MESSAGING_ERROR_MESSAGE);
        return;
      }
 else {
        final String localHost=localID.getHostname();
        final String targetHost=targetID.getHostname();
        if (localHost.equals(targetHost)) {
          openMessagesView(chatManager,localID,targetID);
        }
 else {
          final MessageDialog messageDialog=new MessageDialog(null,Messages.XMPPHyperlink_SELECT_ACTION_DIALOG_TITLE,null,NLS.bind(Messages.XMPPHyperlink_SELECT_ACTION_DIALOG_MESSAGE,new Object[]{targetHost,localHost,targetID.getName(),localID.getName()}),MessageDialog.QUESTION,new String[]{Messages.XMPPHyperlink_SELECT_ACTION_DIALOG_BUTTON_SEND_MESSAGE,Messages.XMPPHyperlink_SELECT_ACTION_DIALOG_BUTTON_CONNECT,Messages.XMPPHyperlink_SELECT_ACTION_DIALOG_BUTTON_CANCEL},2);
          final int selected=messageDialog.open();
switch (selected) {
case 0:
            openMessagesView(chatManager,localID,targetID);
          return;
case 1:
        super.open();
      return;
default :
    return;
}
}
}
}
 catch (final Exception e) {
MessageDialog.openError(null,Messages.XMPPHyperlink_ERROR_OPEN_MESSAGE_VIEW_DIALOG_TITLE,NLS.bind(Messages.XMPPHyperlink_ERROR_OPEN_MESSAGE_VIEW_DIALOG_MESSAGE,e.getLocalizedMessage()));
Activator.getDefault().getLog().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,Messages.XMPPHyperlink_ERROR_OPEN_MESSAGE_VIEW_LOG_STATUS_MESSAGE,e));
}
}
}",0.9850746268656716
94811,"public void open(){
  IContainer[] containers=getContainers();
  if (containers.length > 0) {
    chooseAccount(containers);
  }
 else {
    if (MessageDialog.openQuestion(null,Messages.XMPPHyperlink_CONNECT_ACCOUNT_DIALOG_TITLE,NLS.bind(Messages.XMPPHyperlink_CONNECT_ACCOUNT_DIALOG_MESSAGE,getURI().getAuthority()))) {
      super.open();
    }
  }
}","public void open(){
  final IContainer[] containers=getContainers();
  if (containers.length > 0) {
    chooseAccount(containers);
  }
 else {
    if (MessageDialog.openQuestion(null,Messages.XMPPHyperlink_CONNECT_ACCOUNT_DIALOG_TITLE,NLS.bind(Messages.XMPPHyperlink_CONNECT_ACCOUNT_DIALOG_MESSAGE,getURI().getAuthority()))) {
      super.open();
    }
  }
}",0.991549295774648
94812,"/** 
 */
public IContainer[] getContainers(){
  ServiceTracker tracker=new ServiceTracker(context,IContainerManager.class.getName(),null);
  tracker.open();
  return (IContainer[])((IContainerManager)tracker.getService()).getAllContainers();
}","/** 
 * @return array of containers.
 */
public IContainer[] getContainers(){
  final ServiceTracker tracker=new ServiceTracker(context,IContainerManager.class.getName(),null);
  tracker.open();
  return ((IContainerManager)tracker.getService()).getAllContainers();
}",0.8941176470588236
94813,"/** 
 * Creates a new URL hyperlink.
 * @param region
 * @param urlString
 */
public MSNHyperlink(IRegion region,URI uri){
  super(region,uri);
}","/** 
 * Creates a new URL hyperlink.
 * @param region
 * @param uri
 */
public MSNHyperlink(IRegion region,URI uri){
  super(region,uri);
}",0.9788732394366196
94814,"/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  plugin=null;
}","/** 
 * This method is called when the plug-in is stopped
 * @param context 
 * @throws Exception 
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  plugin=null;
}",0.8864265927977839
94815,"/** 
 * This method is called upon plug-in activation
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  ClientPreferencePage p=new ClientPreferencePage();
  p.initializeDefaults();
  sessionNames=new ArrayList();
}","/** 
 * This method is called upon plug-in activation
 * @param context 
 * @throws Exception 
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  final ClientPreferencePage p=new ClientPreferencePage();
  p.initializeDefaults();
  sessionNames=new ArrayList();
}",0.9153153153153152
94816,"public void addSession(String channelID,String sessionName){
  sessionNames.add(new SessionInstance(channelID,sessionName,getPreferenceStore().getString(ClientPreferencePage.LOCAL_NAME),Calendar.getInstance().getTime()));
  if (presenceChannel != null) {
    try {
      presenceChannel.sendMessage((new SharedEditorSessionList(sessionNames)).toByteArray());
    }
 catch (    ECFException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","public void addSession(String channelID,String sessionName){
  sessionNames.add(new SessionInstance(channelID,sessionName,getPreferenceStore().getString(ClientPreferencePage.LOCAL_NAME),Calendar.getInstance().getTime()));
  if (presenceChannel != null) {
    try {
      presenceChannel.sendMessage((new SharedEditorSessionList(sessionNames)).toByteArray());
    }
 catch (    final ECFException e) {
      e.printStackTrace();
    }
catch (    final IOException e) {
      e.printStackTrace();
    }
  }
}",0.988
94817,"public IChannel intializePresenceSession(IChannelListener clistener) throws ECFException {
  presenceContainer=ContainerFactory.getDefault().createContainer(Activator.getDefault().getPreferenceStore().getString(ClientPreferencePage.CONTAINER_TYPE));
  IChannelContainerAdapter channelContainer=(IChannelContainerAdapter)presenceContainer.getAdapter(IChannelContainerAdapter.class);
  final ID channelID=IDFactory.getDefault().createID(channelContainer.getChannelNamespace(),Activator.getDefault().getPreferenceStore().getString(ClientPreferencePage.CHANNEL_ID) + ""String_Node_Str"");
  presenceChannel=channelContainer.createChannel(channelID,clistener,new HashMap());
  this.presenceChannelListener=clistener;
  presenceContainer.connect(IDFactory.getDefault().createID(presenceContainer.getConnectNamespace(),Activator.getDefault().getPreferenceStore().getString(ClientPreferencePage.TARGET_SERVER)),null);
  return presenceChannel;
}","public IChannel intializePresenceSession(IChannelListener clistener) throws ECFException {
  presenceContainer=ContainerFactory.getDefault().createContainer(Activator.getDefault().getPreferenceStore().getString(ClientPreferencePage.CONTAINER_TYPE));
  final IChannelContainerAdapter channelContainer=(IChannelContainerAdapter)presenceContainer.getAdapter(IChannelContainerAdapter.class);
  final ID channelID=IDFactory.getDefault().createID(channelContainer.getChannelNamespace(),Activator.getDefault().getPreferenceStore().getString(ClientPreferencePage.CHANNEL_ID) + ""String_Node_Str"");
  presenceChannel=channelContainer.createChannel(channelID,clistener,new HashMap());
  this.presenceChannelListener=clistener;
  presenceContainer.connect(IDFactory.getDefault().createID(presenceContainer.getConnectNamespace(),Activator.getDefault().getPreferenceStore().getString(ClientPreferencePage.TARGET_SERVER)),null);
  return presenceChannel;
}",0.9968017057569296
94818,"/** 
 * Creates a new URL hyperlink.
 * @param region
 * @param urlString
 */
public IRCHyperlink(IRegion region,URI uri){
  super(region,uri);
}","/** 
 * Creates a new URL hyperlink.
 * @param region
 * @param uri
 */
public IRCHyperlink(IRegion region,URI uri){
  super(region,uri);
}",0.9788732394366196
94819,"protected IConnectWizard createConnectWizard(){
  URI uri=getURI();
  String authAndPath=uri.getSchemeSpecificPart();
  while (authAndPath.startsWith(""String_Node_Str""))   authAndPath=authAndPath.substring(1);
  String fragment=uri.getFragment();
  if (fragment != null) {
    StringBuffer buf=new StringBuffer(authAndPath);
    buf.append(""String_Node_Str"").append(fragment);
    authAndPath=buf.toString();
  }
  return new IRCConnectWizard(authAndPath);
}","protected IConnectWizard createConnectWizard(){
  final URI uri=getURI();
  String authAndPath=uri.getSchemeSpecificPart();
  while (authAndPath.startsWith(""String_Node_Str""))   authAndPath=authAndPath.substring(1);
  final String fragment=uri.getFragment();
  if (fragment != null) {
    final StringBuffer buf=new StringBuffer(authAndPath);
    buf.append(""String_Node_Str"").append(fragment);
    authAndPath=buf.toString();
  }
  return new IRCConnectWizard(authAndPath);
}",0.9807280513918628
94820,"private long getLastModifiedTimeFromHeader() throws IOException {
  Header lastModifiedHeader=getMethod.getResponseHeader(LAST_MODIFIED_HEADER);
  if (lastModifiedHeader == null)   throw new IOException(Messages.HttpClientRetrieveFileTransfer_INVALID_LAST_MODIFIED_TIME);
  String lastModifiedString=lastModifiedHeader.getValue();
  long lastModified=0;
  if (lastModifiedString != null) {
    try {
      lastModified=new SimpleDateFormat(""String_Node_Str"").parse(lastModifiedString).getTime();
    }
 catch (    Exception e) {
      throw new IOException(Messages.HttpClientRetrieveFileTransfer_EXCEPITION_INVALID_LAST_MODIFIED_FROM_SERVER);
    }
  }
  return lastModified;
}","private long getLastModifiedTimeFromHeader() throws IOException {
  Header lastModifiedHeader=getMethod.getResponseHeader(LAST_MODIFIED_HEADER);
  if (lastModifiedHeader == null)   throw new IOException(Messages.HttpClientRetrieveFileTransfer_INVALID_LAST_MODIFIED_TIME);
  String lastModifiedString=lastModifiedHeader.getValue();
  long lastModified=0;
  if (lastModifiedString != null) {
    try {
      lastModified=RFC1123.parse(lastModifiedString).getTime();
    }
 catch (    Exception e) {
      throw new IOException(Messages.HttpClientRetrieveFileTransfer_EXCEPITION_INVALID_LAST_MODIFIED_FROM_SERVER);
    }
  }
  return lastModified;
}",0.9652567975830816
94821,"/** 
 * @return
 */
public ID[] getChatRoomParticipants(){
  return (ID[])chatRoomContainerParticipants.toArray(new ID[]{});
}","/** 
 * @return array of IDs of chat room participants.
 */
public ID[] getChatRoomParticipants(){
  return (ID[])chatRoomContainerParticipants.toArray(new ID[]{});
}",0.863013698630137
94822,"/** 
 * The action has been activated. The argument of the method represents the 'real' action sitting in the workbench UI.
 * @see IWorkbenchWindowActionDelegate#run
 */
public void run(){
  try {
    makeCall();
  }
 catch (  Exception e) {
    if (exceptionHandler != null)     exceptionHandler.handleException(e);
 else     Activator.getDefault().getLog().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,Messages.CallAction_Exception_CallAction_Run,e));
  }
}","/** 
 * The action has been activated. The argument of the method represents the 'real' action sitting in the workbench UI.
 */
public void run(){
  try {
    makeCall();
  }
 catch (  Exception e) {
    if (exceptionHandler != null)     exceptionHandler.handleException(e);
 else     Activator.getDefault().getLog().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,Messages.CallAction_Exception_CallAction_Run,e));
  }
}",0.9529025191675794
94823,"public void init(ISharedObjectConfig config) throws SharedObjectInitException {
  super.init(config);
  Map props=config.getProperties();
  Object[] args=(Object[])props.get(ARGS_PROPERTY_NAME);
  if (args != null && args.length == 2) {
    transferParams=(FileTransferParams)args[0];
    sharedObjectID=(ID)args[1];
    progressListener=this;
  }
  if (args != null && args.length == 5) {
    senderUI=(FileSenderUI)args[0];
    targetReceiver=(ID)args[1];
    setInputStream((InputStream)args[2]);
    transferParams=(FileTransferParams)args[3];
    sharedObjectID=(ID)args[4];
    progressListener=this;
  }
}","public void init(ISharedObjectConfig config) throws SharedObjectInitException {
  super.init(config);
  final Map props=config.getProperties();
  final Object[] args=(Object[])props.get(ARGS_PROPERTY_NAME);
  if (args != null && args.length == 2) {
    transferParams=(FileTransferParams)args[0];
    sharedObjectID=(ID)args[1];
    progressListener=this;
  }
  if (args != null && args.length == 5) {
    senderUI=(FileSenderUI)args[0];
    targetReceiver=(ID)args[1];
    setInputStream((InputStream)args[2]);
    transferParams=(FileTransferParams)args[3];
    sharedObjectID=(ID)args[4];
    progressListener=this;
  }
}",0.9902912621359224
94824,"public void run(){
  if (ClientPlugin.getDefault().getPluginPreferences().getBoolean(ClientPlugin.PREF_CONFIRM_FILE_RECEIVE)) {
    MessageDialog dialog=new MessageDialog(ClientPlugin.getDefault().getActiveShell(),""String_Node_Str"",null,""String_Node_Str"",MessageDialog.QUESTION,null,0);
    dialog.setBlockOnOpen(true);
    int response=dialog.open();
    if (response == MessageDialog.CANCEL)     return;
  }
  receiver=(EclipseCollabSharedObject)getContext().getSharedObjectManager().getSharedObject(sharedObjectID);
  receiverUI=receiver.getFileReceiverUI(EclipseFileTransfer.this,transferParams);
  localFile=createPath(receiver,getContext().isGroupManager(),aFile,length,rate);
  transferParams.setRemoteFile(localFile);
  if (receiverUI != null)   receiverUI.receiveStart(getHomeContainerID(),localFile,length,rate);
}","public void run(){
  if (ClientPlugin.getDefault().getPluginPreferences().getBoolean(ClientPlugin.PREF_CONFIRM_FILE_RECEIVE)) {
    final MessageDialog dialog=new MessageDialog(ClientPlugin.getDefault().getActiveShell(),""String_Node_Str"",null,""String_Node_Str"",MessageDialog.QUESTION,null,0);
    dialog.setBlockOnOpen(true);
    final int response=dialog.open();
    if (response == MessageDialog.CANCEL)     return;
  }
  receiver=(EclipseCollabSharedObject)getContext().getSharedObjectManager().getSharedObject(sharedObjectID);
  receiverUI=receiver.getFileReceiverUI(EclipseFileTransfer.this,transferParams);
  localFile=createPath(receiver,getContext().isGroupManager(),aFile,length,rate);
  transferParams.setRemoteFile(localFile);
  if (receiverUI != null)   receiverUI.receiveStart(getHomeContainerID(),localFile,length,rate);
}",0.9927710843373494
94825,"protected ReplicaSharedObjectDescription getReplicaDescription(ID remoteMember){
  HashMap map=new HashMap();
  map.put(ARGS_PROPERTY_NAME,new Object[]{transferParams,sharedObjectID});
  return new ReplicaSharedObjectDescription(getClass(),getID(),getConfig().getHomeContainerID(),map,getNextReplicateID());
}","protected ReplicaSharedObjectDescription getReplicaDescription(ID remoteMember){
  final HashMap map=new HashMap();
  map.put(ARGS_PROPERTY_NAME,new Object[]{transferParams,sharedObjectID});
  return new ReplicaSharedObjectDescription(getClass(),getID(),getConfig().getHomeContainerID(),map,getNextReplicateID());
}",0.9903846153846154
94826,"protected void addRemoteParticipants(ID ids[]){
  ID groupID=getContext().getConnectedID();
  if (ids != null && participantIDs != null) {
    for (int i=0; i < ids.length; i++) {
      if (groupID != null && groupID.equals(ids[i]))       continue;
      if (targetReceiver == null) {
        if (!getHomeContainerID().equals(ids[i]))         participantIDs.add(ids[i]);
      }
 else {
        if (targetReceiver.equals(ids[i]))         participantIDs.add(ids[i]);
      }
    }
  }
}","protected void addRemoteParticipants(ID ids[]){
  final ID groupID=getContext().getConnectedID();
  if (ids != null && participantIDs != null) {
    for (int i=0; i < ids.length; i++) {
      if (groupID != null && groupID.equals(ids[i]))       continue;
      if (targetReceiver == null) {
        if (!getHomeContainerID().equals(ids[i]))         participantIDs.add(ids[i]);
      }
 else {
        if (targetReceiver.equals(ids[i]))         participantIDs.add(ids[i]);
      }
    }
  }
}",0.9938524590163934
94827,"protected File createPath(EclipseCollabSharedObject sharedObject,boolean server,File file,long length,float rate){
  File downloadDir=new File(sharedObject.getLocalFullDownloadPath());
  downloadDir.mkdirs();
  File retFile=new File(downloadDir,file.getName());
  return retFile;
}","protected File createPath(EclipseCollabSharedObject sharedObject,boolean server,File file,long length,float rate){
  final File downloadDir=new File(sharedObject.getLocalFullDownloadPath());
  downloadDir.mkdirs();
  final File retFile=new File(downloadDir,file.getName());
  return retFile;
}",0.9790940766550522
94828,"/** 
 * Send a message with data to remote replica(s). This method is called by the SharedObjectOutputStream when sends some data via the replicated object. The replicated object that implements this interface should send a message to one or all remote replicas that contains the information contained in this method signature. Remote replicas should then turn around and call the 'add' method on their SharedObjectInputStream to receive the data.
 * @param bytesSentCount the length of the data (assuming data are compressed)
 * @param data the actual data to send
 */
public void sendDataMsg(int currentCount,byte[] data);","/** 
 * Send a message with data to remote replica(s). This method is called by the SharedObjectOutputStream when sends some data via the replicated object. The replicated object that implements this interface should send a message to one or all remote replicas that contains the information contained in this method signature. Remote replicas should then turn around and call the 'add' method on their SharedObjectInputStream to receive the data.
 * @param currentCount the length of the data (assuming data are compressed)
 * @param data the actual data to send
 */
public void sendDataMsg(int currentCount,byte[] data);",0.9919743178170144
94829,"protected ImageRegistry createImageRegistry(){
  ImageRegistry registry=super.createImageRegistry();
  registry.put(ClientPluginConstants.DECORATION_DEFAULT_PROVIDER,AbstractUIPlugin.imageDescriptorFromPlugin(PLUGIN_ID,""String_Node_Str"").createImage());
  return registry;
}","protected ImageRegistry createImageRegistry(){
  final ImageRegistry registry=super.createImageRegistry();
  registry.put(ClientPluginConstants.DECORATION_DEFAULT_PROVIDER,AbstractUIPlugin.imageDescriptorFromPlugin(PLUGIN_ID,""String_Node_Str"").createImage());
  return registry;
}",0.9891696750902528
94830,"/** 
 * This method is called upon plug-in activation
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  setPreferenceDefaults();
}","/** 
 * This method is called upon plug-in activation
 * @param context 
 * @throws Exception 
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  setPreferenceDefaults();
}",0.8923884514435696
94831,"public IDiscoveryController getDiscoveryController(){
  return new IDiscoveryController(){
    public void connectToService(    IServiceInfo service){
synchronized (ClientPlugin.this) {
        if (discoveryStartup == null)         return;
        discoveryStartup.connectToServiceFromInfo(service);
      }
    }
    public void startDiscovery(){
      try {
        getDefault().initDiscovery();
      }
 catch (      Exception e) {
        ClientPlugin.log(""String_Node_Str"",e);
      }
    }
    public void stopDiscovery(){
      getDefault().disposeDiscovery();
    }
    public IDiscoveryContainerAdapter getDiscoveryContainer(){
synchronized (ClientPlugin.this) {
        if (discoveryStartup == null)         return null;
        return discoveryStartup.getDiscoveryContainer();
      }
    }
    public IContainer getContainer(){
synchronized (ClientPlugin.this) {
        if (discoveryStartup == null)         return null;
        return discoveryStartup.getContainer();
      }
    }
    public String[] getServiceTypes(){
      return serviceTypes;
    }
    public boolean isDiscoveryStarted(){
      return getDefault().isDiscoveryActive();
    }
  }
;
}","public IDiscoveryController getDiscoveryController(){
  return new IDiscoveryController(){
    public void connectToService(    IServiceInfo service){
synchronized (ClientPlugin.this) {
        if (discoveryStartup == null)         return;
        discoveryStartup.connectToServiceFromInfo(service);
      }
    }
    public void startDiscovery(){
      try {
        getDefault().initDiscovery();
      }
 catch (      final Exception e) {
        ClientPlugin.log(""String_Node_Str"",e);
      }
    }
    public void stopDiscovery(){
      getDefault().disposeDiscovery();
    }
    public IDiscoveryContainerAdapter getDiscoveryContainer(){
synchronized (ClientPlugin.this) {
        if (discoveryStartup == null)         return null;
        return discoveryStartup.getDiscoveryContainer();
      }
    }
    public IContainer getContainer(){
synchronized (ClientPlugin.this) {
        if (discoveryStartup == null)         return null;
        return discoveryStartup.getContainer();
      }
    }
    public String[] getServiceTypes(){
      return serviceTypes;
    }
    public boolean isDiscoveryStarted(){
      return getDefault().isDiscoveryActive();
    }
  }
;
}",0.9974402730375428
94832,"public void startDiscovery(){
  try {
    getDefault().initDiscovery();
  }
 catch (  Exception e) {
    ClientPlugin.log(""String_Node_Str"",e);
  }
}","public void startDiscovery(){
  try {
    getDefault().initDiscovery();
  }
 catch (  final Exception e) {
    ClientPlugin.log(""String_Node_Str"",e);
  }
}",0.9802631578947368
94833,"/** 
 * Returns the shared instance.
 */
public static ClientPlugin getDefault(){
  return plugin;
}","/** 
 * Returns the shared instance.
 * @return default client plugin
 */
public static ClientPlugin getDefault(){
  return plugin;
}",0.8583690987124464
94834,"/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  plugin=null;
  disposeServer();
  disposeDiscovery();
}","/** 
 * This method is called when the plug-in is stopped
 * @param context 
 * @throws Exception 
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  plugin=null;
  disposeServer();
  disposeDiscovery();
}",0.90744920993228
94835,"/** 
 * Gets a string from the resource bundle and formats it with arguments
 */
public static String getFormattedString(String key,Object[] args){
  return MessageFormat.format(getString(key),args);
}","/** 
 * Gets a string from the resource bundle and formats it with arguments
 * @param key 
 * @param args 
 * @return formatted string.
 */
public static String getFormattedString(String key,Object[] args){
  return MessageFormat.format(getString(key),args);
}",0.8701298701298701
94836,"public static String getString(String key){
  try {
    return fgResourceBundle.getString(key);
  }
 catch (  MissingResourceException e) {
    return '!' + key + '!';
  }
}","public static String getString(String key){
  try {
    return fgResourceBundle.getString(key);
  }
 catch (  final MissingResourceException e) {
    return '!' + key + '!';
  }
}",0.9829545454545454
94837,"/** 
 * Creates a new URL hyperlink.
 * @param region
 * @param urlString
 */
public ECFGenericHyperlink(IRegion region,URI uri){
  super(region,uri);
}","/** 
 * Creates a new URL hyperlink.
 * @param region
 * @param uri
 */
public ECFGenericHyperlink(IRegion region,URI uri){
  super(region,uri);
}",0.9798657718120806
94838,"/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  instance=null;
}","/** 
 * This method is called when the plug-in is stopped
 * @param context 
 * @throws Exception 
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  instance=null;
}",0.8876712328767123
94839,"/** 
 * This method is called upon plug-in activation
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
}","/** 
 * This method is called upon plug-in activation
 * @param context 
 * @throws Exception 
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
}",0.8746177370030581
94840,"/** 
 * @param fileToSend
 * @return
 */
private IFileTransferInfo createFileTransferInfoFromFile(final File fileToSend){
  return new FileTransferInfo(fileToSend);
}","/** 
 * @param fileToSend
 * @return file transfer info for given file.
 */
private IFileTransferInfo createFileTransferInfoFromFile(final File fileToSend){
  return new FileTransferInfo(fileToSend);
}",0.904632152588556
94841,"/** 
 */
public BundleContext getContext(){
  return context;
}","/** 
 * @return context.
 */
public BundleContext getContext(){
  return context;
}",0.863013698630137
94842,"/** 
 * Start ECF client or server.
 * @return IStatus the status of the start
 * @throws ECFStartException if some exception thrown during start
 */
public IStatus startup(IProgressMonitor monitor);","/** 
 * Start ECF client or server.
 * @return IStatus the status of the start
 */
public IStatus startup(IProgressMonitor monitor);",0.797583081570997
94843,"/** 
 * Get the InvocationTargetException that occured during invocation. If null, no exception was thrown
 * @return InvocationTargetException if an exception occurred (available via{@link InvocationTargetException#getCause()}. Null if no exception has occurred
 */
public abstract InvocationTargetException getException();","/** 
 * Get the InvocationTargetException that occured during invocation. If null, no exception was thrown
 * @return InvocationTargetException if an exception occurred. <code>Null</code> if noexception has occurred
 */
public abstract InvocationTargetException getException();",0.8785357737104825
94844,"/** 
 * Handle reception of an IChannelEvent.  
 * @param event the IChannelEvent received.  This implementation detects instances of  {@link IChannelMessageEvent} andcalls  {@link #handleMessage(ID,byte[])} if found.  All otherchannel events are ignored.  Subclasses may override to detect and respond to other channel events as desired.
 */
protected void handleChannelEvent(IChannelEvent event){
  if (event instanceof IChannelMessageEvent) {
    IChannelMessageEvent cme=(IChannelMessageEvent)event;
    handleMessage(cme.getFromContainerID(),cme.getData());
  }
 else   if (event instanceof IChannelConnectEvent) {
    IChannelConnectEvent cce=(IChannelConnectEvent)event;
    handleConnectEvent(cce);
  }
 else   if (event instanceof IChannelDisconnectEvent) {
    IChannelDisconnectEvent cde=(IChannelDisconnectEvent)event;
    handleDisconnectEvent(cde);
  }
}","/** 
 * Handle reception of an IChannelEvent.  
 * @param event the IChannelEvent received.  This implementation detects instances of  {@link IChannelMessageEvent} andcalls  {@link #handleMessage(ID,byte[])} if found.  All otherchannel events are ignored.  Subclasses may override to detect and respond to other channel events as desired.
 */
protected void handleChannelEvent(IChannelEvent event){
  if (event instanceof IChannelMessageEvent) {
    final IChannelMessageEvent cme=(IChannelMessageEvent)event;
    handleMessage(cme.getFromContainerID(),cme.getData());
  }
 else   if (event instanceof IChannelConnectEvent) {
    final IChannelConnectEvent cce=(IChannelConnectEvent)event;
    handleConnectEvent(cce);
  }
 else   if (event instanceof IChannelDisconnectEvent) {
    final IChannelDisconnectEvent cde=(IChannelDisconnectEvent)event;
    handleDisconnectEvent(cde);
  }
}",0.9897377423033068
94845,"/** 
 */
public IDiscoveryService getDiscoveryService(){
  return (IDiscoveryService)tracker.getService();
}","/** 
 * @return discovery service
 */
public IDiscoveryService getDiscoveryService(){
  return (IDiscoveryService)tracker.getService();
}",0.8816326530612245
94846,"public void start(BundleContext context) throws Exception {
  plugin=this;
  IContainer container=ContainerFactory.getDefault().createContainer(""String_Node_Str"");
  container.connect(null,null);
  discoveryRegistration=context.registerService(IDiscoveryService.class.getName(),container,null);
  tracker=new ServiceTracker(context,IDiscoveryService.class.getName(),null);
  tracker.open();
}","public void start(BundleContext context) throws Exception {
  plugin=this;
  final IContainer container=ContainerFactory.getDefault().createContainer(""String_Node_Str"");
  container.connect(null,null);
  discoveryRegistration=context.registerService(IDiscoveryService.class.getName(),container,null);
  tracker=new ServiceTracker(context,IDiscoveryService.class.getName(),null);
  tracker.open();
}",0.9924050632911392
94847,"/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  plugin=null;
}","/** 
 * This method is called when the plug-in is stopped
 * @param context 
 * @throws Exception 
 */
public void stop(BundleContext context) throws Exception {
  plugin=null;
}",0.8698412698412699
94848,"/** 
 * This method is called upon plug-in activation
 */
public void start(BundleContext context) throws Exception {
}","/** 
 * This method is called upon plug-in activation
 * @param context 
 * @throws Exception 
 */
public void start(BundleContext context) throws Exception {
}",0.8530465949820788
94849,"/** 
 * Returns the shared instance.
 */
public synchronized static DiscoveryPlugin getDefault(){
  if (plugin == null) {
    plugin=new DiscoveryPlugin();
  }
  return plugin;
}","/** 
 * Returns the shared instance.
 * @return default discovery plugin instance.
 */
public synchronized static DiscoveryPlugin getDefault(){
  if (plugin == null) {
    plugin=new DiscoveryPlugin();
  }
  return plugin;
}",0.8855721393034826
94850,"/** 
 * Returns true if the forum member is also a member of the group.
 * @param group
 * @return
 */
public boolean isMemberOf(IMemberGroup group);","/** 
 * Returns true if the forum member is also a member of the group.
 * @param group
 * @return <code>true</code> if this is member of given group, <code>false</code> otherwise.
 */
public boolean isMemberOf(IMemberGroup group);",0.7842105263157895
94851,"/** 
 * Returns the groups this member is part of or an empty list. Note: this method may return only a partial list.
 * @return
 */
public Collection getGroups();","/** 
 * Returns the groups this member is part of or an empty list. Note: this method may return only a partial list.
 * @return Collection of groups associated with this member.
 */
public Collection getGroups();",0.8670212765957447
94852,"/** 
 * Returns the moment in time when this message was posted. TODO Design timezone handling.
 * @return
 */
public Date getTimePosted();","/** 
 * Returns the moment in time when this message was posted. TODO Design timezone handling.
 * @return date that the message was posted.
 */
public Date getTimePosted();",0.8910256410256411
94853,"/** 
 * Destroy an ISharedObjectConnector instance.
 * @param connector the connector previously created via connectSharedObjects
 * @throws SharedObjectConnectException thrown if specified connector does not exist in the context of this container
 */
public void disconnectSharedObjects(ISharedObjectConnector connector) throws SharedObjectDisconnectException ;","/** 
 * Destroy an ISharedObjectConnector instance.
 * @param connector the connector previously created via connectSharedObjects
 * @throws SharedObjectDisconnectException thrown if specified connector does not exist in the context of this container
 */
public void disconnectSharedObjects(ISharedObjectConnector connector) throws SharedObjectDisconnectException ;",0.9931224209078404
94854,"/** 
 * Commit a set of Event instances previously prepared via  {@link #enqueue_prepare(Event[])}
 * @param enqueue_key the transaction key previously returned from the call to {@link #enqueue_prepare(Event[])}
 * @throws QueueException if commit cannot occur
 */
void enqueue_commit(Object enqueue_key);","/** 
 * Commit a set of Event instances previously prepared via  {@link #enqueue_prepare(Event[])}
 * @param enqueue_key the transaction key previously returned from the call to {@link #enqueue_prepare(Event[])}
 */
void enqueue_commit(Object enqueue_key);",0.9126559714795008
94855,"/** 
 * @return
 */
public IContainerManager getContainerManager(){
  return (IContainerManager)containerManagerServiceTracker.getService();
}","/** 
 * @return container manager.
 */
public IContainerManager getContainerManager(){
  return (IContainerManager)containerManagerServiceTracker.getService();
}",0.9372937293729372
94856,"protected void fireReceiveStartEvent(){
  listener.handleTransferEvent(new IIncomingFileTransferReceiveStartEvent(){
    private static final long serialVersionUID=-59096575294481755L;
    public IFileID getFileID(){
      return remoteFileID;
    }
    public IIncomingFileTransfer receive(    File localFileToSave) throws IOException {
      setOutputStream(new BufferedOutputStream(new FileOutputStream(localFileToSave)));
      setupAndScheduleJob();
      return AbstractRetrieveFileTransfer.this;
    }
    public String toString(){
      final StringBuffer sb=new StringBuffer(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(done).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(bytesReceived).append(""String_Node_Str"");
      return sb.toString();
    }
    public void cancel(){
      hardClose();
    }
    /** 
 * @param streamToStore
 * @return
 * @throws IOException not thrown in this implementation.
 */
    public IIncomingFileTransfer receive(    OutputStream streamToStore) throws IOException {
      setOutputStream(streamToStore);
      setCloseOutputStream(false);
      setupAndScheduleJob();
      return AbstractRetrieveFileTransfer.this;
    }
  }
);
}","protected void fireReceiveStartEvent(){
  listener.handleTransferEvent(new IIncomingFileTransferReceiveStartEvent(){
    private static final long serialVersionUID=-59096575294481755L;
    public IFileID getFileID(){
      return remoteFileID;
    }
    public IIncomingFileTransfer receive(    File localFileToSave) throws IOException {
      setOutputStream(new BufferedOutputStream(new FileOutputStream(localFileToSave)));
      setupAndScheduleJob();
      return AbstractRetrieveFileTransfer.this;
    }
    public String toString(){
      final StringBuffer sb=new StringBuffer(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(done).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(bytesReceived).append(""String_Node_Str"");
      return sb.toString();
    }
    public void cancel(){
      hardClose();
    }
    /** 
 * @param streamToStore
 * @return incoming file transfer instance.
 * @throws IOException not thrown in this implementation.
 */
    public IIncomingFileTransfer receive(    OutputStream streamToStore) throws IOException {
      setOutputStream(streamToStore);
      setCloseOutputStream(false);
      setupAndScheduleJob();
      return AbstractRetrieveFileTransfer.this;
    }
  }
);
}",0.9865689865689866
94857,"protected void fireReceiveResumedEvent(){
  listener.handleTransferEvent(new IIncomingFileTransferReceiveResumedEvent(){
    private static final long serialVersionUID=7111739642849612839L;
    public IFileID getFileID(){
      return remoteFileID;
    }
    public IIncomingFileTransfer receive(    File localFileToSave) throws IOException {
      setOutputStream(new BufferedOutputStream(new FileOutputStream(localFileToSave)));
      setupAndScheduleJob();
      return AbstractRetrieveFileTransfer.this;
    }
    public String toString(){
      final StringBuffer sb=new StringBuffer(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(done).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(bytesReceived).append(""String_Node_Str"");
      return sb.toString();
    }
    public void cancel(){
      hardClose();
    }
    /** 
 * @param streamToStore
 * @return
 * @throws IOException not thrown in this implementation.
 */
    public IIncomingFileTransfer receive(    OutputStream streamToStore) throws IOException {
      setOutputStream(streamToStore);
      setCloseOutputStream(false);
      setupAndScheduleJob();
      return AbstractRetrieveFileTransfer.this;
    }
  }
);
}","protected void fireReceiveResumedEvent(){
  listener.handleTransferEvent(new IIncomingFileTransferReceiveResumedEvent(){
    private static final long serialVersionUID=7111739642849612839L;
    public IFileID getFileID(){
      return remoteFileID;
    }
    public IIncomingFileTransfer receive(    File localFileToSave) throws IOException {
      setOutputStream(new BufferedOutputStream(new FileOutputStream(localFileToSave)));
      setupAndScheduleJob();
      return AbstractRetrieveFileTransfer.this;
    }
    public String toString(){
      final StringBuffer sb=new StringBuffer(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(done).append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(bytesReceived).append(""String_Node_Str"");
      return sb.toString();
    }
    public void cancel(){
      hardClose();
    }
    /** 
 * @param streamToStore
 * @return incoming file transfer instance.
 * @throws IOException not thrown in this implementation.
 */
    public IIncomingFileTransfer receive(    OutputStream streamToStore) throws IOException {
      setOutputStream(streamToStore);
      setCloseOutputStream(false);
      setupAndScheduleJob();
      return AbstractRetrieveFileTransfer.this;
    }
  }
);
}",0.9866234292663154
94858,"/** 
 * @param streamToStore
 * @return
 * @throws IOException not thrown in this implementation.
 */
public IIncomingFileTransfer receive(OutputStream streamToStore) throws IOException {
  setOutputStream(streamToStore);
  setCloseOutputStream(false);
  setupAndScheduleJob();
  return AbstractRetrieveFileTransfer.this;
}","/** 
 * @param streamToStore
 * @return incoming file transfer instance.
 * @throws IOException not thrown in this implementation.
 */
public IIncomingFileTransfer receive(OutputStream streamToStore) throws IOException {
  setOutputStream(streamToStore);
  setCloseOutputStream(false);
  setupAndScheduleJob();
  return AbstractRetrieveFileTransfer.this;
}",0.95139911634757
94859,"/** 
 * @return
 */
private boolean openStreamsForResume(){
  final URL theURL=getRemoteFileURL();
  try {
    remoteFileURL=new URL(theURL.toString());
    connect();
    setResumeRequestHeaderValues();
    setInputStream(urlConnection.getInputStream());
    getResumeResponseHeaderValues();
    this.paused=false;
    fireReceiveResumedEvent();
    return true;
  }
 catch (  final Exception e) {
    this.exception=e;
    this.done=true;
    hardClose();
    fireTransferReceiveDoneEvent();
    return false;
  }
}","/** 
 * @return <code>true</code> if streams successfully, <code>false</code> otherwise.
 */
private boolean openStreamsForResume(){
  final URL theURL=getRemoteFileURL();
  try {
    remoteFileURL=new URL(theURL.toString());
    connect();
    setResumeRequestHeaderValues();
    setInputStream(urlConnection.getInputStream());
    getResumeResponseHeaderValues();
    this.paused=false;
    fireReceiveResumedEvent();
    return true;
  }
 catch (  final Exception e) {
    this.exception=e;
    this.done=true;
    hardClose();
    fireTransferReceiveDoneEvent();
    return false;
  }
}",0.934056007226739
94860,"public void stop(BundleContext context) throws Exception {
  plugin=null;
  super.stop(context);
}","/** 
 * @see org.eclipse.core.runtime.Plugin#stop(org.osgi.framework.BundleContext)
 */
public void stop(BundleContext context) throws Exception {
  plugin=null;
  super.stop(context);
}",0.6901408450704225
94861,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}","/** 
 * @see org.eclipse.core.runtime.Plugin#start(org.osgi.framework.BundleContext)
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}",0.6920415224913494
94862,"public void setProxy(Proxy proxy){
  this.proxy=proxy;
}","/** 
 * @see org.eclipse.ecf.filetransfer.IRetrieveFileTransferContainerAdapter#setProxy(org.eclipse.ecf.core.util.Proxy)
 */
public void setProxy(Proxy proxy){
  this.proxy=proxy;
}",0.4705882352941176
94863,"public ID getID(){
  return remoteFileID;
}","/** 
 * @see org.eclipse.ecf.core.identity.IIdentifiable#getID()
 */
public ID getID(){
  return remoteFileID;
}",0.5548387096774193
94864,"public void setConnectContextForAuthentication(IConnectContext connectContext){
  this.connectContext=connectContext;
}","/** 
 * @see org.eclipse.ecf.filetransfer.IRetrieveFileTransferContainerAdapter#setConnectContextForAuthentication(org.eclipse.ecf.core.security.IConnectContext)
 */
public void setConnectContextForAuthentication(IConnectContext connectContext){
  this.connectContext=connectContext;
}",0.5891089108910891
94865,"public IRetrieveFileTransfer newInstance(){
  return new EFSRetrieveFileTransfer();
}","/** 
 * @see org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory#newInstance()
 */
public IRetrieveFileTransfer newInstance(){
  return new EFSRetrieveFileTransfer();
}",0.6367041198501873
94866,"public Object getAdapter(Class adapter){
  IAdapterManager adapterManager=Activator.getDefault().getAdapterManager();
  if (adapterManager == null)   return null;
  return adapterManager.getAdapter(this,adapter);
}","public Object getAdapter(Class adapter){
  final IAdapterManager adapterManager=Activator.getDefault().getAdapterManager();
  if (adapterManager == null)   return null;
  return adapterManager.getAdapter(this,adapter);
}",0.9861751152073732
94867,"/** 
 * @deprecated Connection status should be the business of the maincontainer.
 */
public boolean isConnected(){
  return getID() != null;
}","/** 
 * @return <code>true</code> if connected, <code>false</code> otherwise.
 * @deprecated Connection status should be the business of the maincontainer.
 */
public boolean isConnected(){
  return getID() != null;
}",0.7977839335180056
94868,"public IMember getMember(ID id) throws BBException {
  if (cachedMembers.containsKey(id)) {
    return cachedMembers.get(id);
  }
 else {
    WebRequest request=createMemberPageRequest(id);
    try {
      request.execute();
      String str=request.getResponseBodyAsString();
      request.releaseConnection();
      IMember member=parser.parseMemberPageForName(str,id);
      if (member != null) {
        ((AbstractBBObject)member).setBulletinBoard(this);
        cachedMembers.put(member.getID(),member);
        return member;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
}","public IMember getMember(ID id) throws BBException {
  if (cachedMembers.containsKey(id)) {
    return cachedMembers.get(id);
  }
 else {
    final WebRequest request=createMemberPageRequest(id);
    try {
      request.execute();
      final String str=request.getResponseBodyAsString();
      request.releaseConnection();
      final IMember member=parser.parseMemberPageForName(str,id);
      if (member != null) {
        ((AbstractBBObject)member).setBulletinBoard(this);
        cachedMembers.put(member.getID(),member);
        return member;
      }
    }
 catch (    final Exception e) {
      e.printStackTrace();
    }
    return null;
  }
}",0.98125
94869,"public Collection<IMemberGroup> getMemberGroups() throws BBException {
  if (cachedMemberGroups.isEmpty()) {
    WebRequest request=createMemberGroupListRequest();
    try {
      request.execute();
      String str=request.getResponseBodyAsString();
      request.releaseConnection();
      cachedMemberGroups=parser.parseMemberGroups(str);
      for (      IMemberGroup grp : cachedMemberGroups.values()) {
        ((AbstractBBObject)grp).setBulletinBoard(this);
      }
    }
 catch (    IOException e) {
    }
  }
  return new HashSet<IMemberGroup>(cachedMemberGroups.values());
}","public Collection<IMemberGroup> getMemberGroups() throws BBException {
  if (cachedMemberGroups.isEmpty()) {
    final WebRequest request=createMemberGroupListRequest();
    try {
      request.execute();
      final String str=request.getResponseBodyAsString();
      request.releaseConnection();
      cachedMemberGroups=parser.parseMemberGroups(str);
      for (      final IMemberGroup grp : cachedMemberGroups.values()) {
        ((AbstractBBObject)grp).setBulletinBoard(this);
      }
    }
 catch (    final IOException e) {
    }
  }
  return new HashSet<IMemberGroup>(cachedMemberGroups.values());
}",0.9798657718120806
94870,"public void postConnect(){
  try {
    this.url=new URL(getID().toExternalForm());
    MultiThreadedHttpConnectionManager connectionManager=new MultiThreadedHttpConnectionManager();
    httpClient=new HttpClient(connectionManager);
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
}","public void postConnect(){
  try {
    this.url=new URL(getID().toExternalForm());
    final MultiThreadedHttpConnectionManager connectionManager=new MultiThreadedHttpConnectionManager();
    httpClient=new HttpClient(connectionManager);
  }
 catch (  final MalformedURLException e) {
    e.printStackTrace();
  }
}",0.9805825242718448
94871,"/** 
 * @deprecated Connection status should be the business of the maincontainer.
 */
public void close() throws BBException {
  if (isConnected()) {
    mainContainer.disconnect();
  }
 else {
    throw new BBException(""String_Node_Str"");
  }
}","/** 
 * @throws BBException 
 * @deprecated Connection status should be the business of the maincontainer.
 */
public void close() throws BBException {
  if (isConnected()) {
    mainContainer.disconnect();
  }
 else {
    throw new BBException(""String_Node_Str"");
  }
}",0.9534883720930232
94872,"public List<IMember> getMembers() throws BBException {
  if (cachedMembers.isEmpty()) {
    WebRequest request=createMemberListRequest();
    try {
      request.execute();
      String str=request.getResponseBodyAsString();
      request.releaseConnection();
      cachedMembers=parser.parseMembers(str);
      for (      IMember member : cachedMembers.values()) {
        ((AbstractBBObject)member).setBulletinBoard(this);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return new ArrayList<IMember>(cachedMembers.values());
}","public List<IMember> getMembers() throws BBException {
  if (cachedMembers.isEmpty()) {
    final WebRequest request=createMemberListRequest();
    try {
      request.execute();
      final String str=request.getResponseBodyAsString();
      request.releaseConnection();
      cachedMembers=parser.parseMembers(str);
      for (      final IMember member : cachedMembers.values()) {
        ((AbstractBBObject)member).setBulletinBoard(this);
      }
    }
 catch (    final IOException e) {
      e.printStackTrace();
    }
  }
  return new ArrayList<IMember>(cachedMembers.values());
}",0.9791304347826087
94873,"/** 
 * Creates a named and identified IBBObject implementation.
 * @param id the object's identifier
 * @param name the object's name
 * @return the created IBBObject implementation
 */
public IBBObject createBBObject(ID id,String name,Map<String,Object> parameters);","/** 
 * Creates a named and identified IBBObject implementation.
 * @param id the object's identifier
 * @param name the object's name
 * @param parameters any parameters
 * @return the created IBBObject implementation
 */
public IBBObject createBBObject(ID id,String name,Map<String,Object> parameters);",0.9370629370629372
94874,"public XMPPConnection getXMPPConnection(){
  ECFConnection conn=getECFConnection();
  if (conn == null)   return null;
 else   return conn.getXMPPConnection();
}","public XMPPConnection getXMPPConnection(){
  final ECFConnection conn=getECFConnection();
  if (conn == null)   return null;
 else   return conn.getXMPPConnection();
}",0.9817073170731708
94875,"public void disconnect(){
  ID groupID=getConnectedID();
  fireContainerEvent(new ContainerDisconnectingEvent(this.getID(),groupID));
synchronized (getConnectLock()) {
    if (isConnected()) {
      ISynchAsynchConnection conn=getConnection();
synchronized (conn) {
synchronized (getGroupMembershipLock()) {
          handleLeave(groupID,conn);
        }
      }
    }
    this.connection=null;
    remoteServerID=null;
    accountManager.setConnection(null);
    chatRoomManager.setConnection(null,null,null);
    outgoingFileTransferContainerAdapter.setConnection(null);
    presenceHelper.disconnect();
    getSharedObjectManager().removeSharedObject(presenceHelperID);
  }
  fireContainerEvent(new ContainerDisconnectedEvent(this.getID(),groupID));
}","public void disconnect(){
  final ID groupID=getConnectedID();
  fireContainerEvent(new ContainerDisconnectingEvent(this.getID(),groupID));
synchronized (getConnectLock()) {
    if (isConnected()) {
      final ISynchAsynchConnection conn=getConnection();
synchronized (conn) {
synchronized (getGroupMembershipLock()) {
          handleLeave(groupID,conn);
        }
      }
    }
    this.connection=null;
    remoteServerID=null;
    accountManager.setConnection(null);
    chatRoomManager.setConnection(null,null,null);
    outgoingFileTransferContainerAdapter.setConnection(null);
    presenceHelper.disconnect();
    getSharedObjectManager().removeSharedObject(presenceHelperID);
  }
  fireContainerEvent(new ContainerDisconnectedEvent(this.getID(),groupID));
}",0.9921052631578948
94876,"protected Object createConnectData(ID target,Callback[] cbs,Object data){
  if (cbs.length > 0) {
    if (cbs[0] instanceof ObjectCallback) {
      ObjectCallback cb=(ObjectCallback)cbs[0];
      return cb.getObject();
    }
  }
  return data;
}","protected Object createConnectData(ID target,Callback[] cbs,Object data){
  if (cbs.length > 0) {
    if (cbs[0] instanceof ObjectCallback) {
      final ObjectCallback cb=(ObjectCallback)cbs[0];
      return cb.getObject();
    }
  }
  return data;
}",0.9879032258064516
94877,"protected boolean isGoogle(ID remoteSpace){
  if (remoteSpace instanceof XMPPID) {
    XMPPID theID=(XMPPID)remoteSpace;
    String host=theID.getHostname();
    return googleNames.contains(host.toLowerCase());
  }
  return false;
}","protected boolean isGoogle(ID remoteSpace){
  if (remoteSpace instanceof XMPPID) {
    final XMPPID theID=(XMPPID)remoteSpace;
    final String host=theID.getHostname();
    if (host == null)     return false;
    return googleNames.contains(host.toLowerCase());
  }
  return false;
}",0.8992248062015504
94878,"protected ID handleConnectResponse(ID originalTarget,Object serverData) throws Exception {
  if (originalTarget != null && !originalTarget.equals(getID())) {
    addNewRemoteMember(originalTarget,null);
    ECFConnection conn=getECFConnection();
    accountManager.setConnection(conn.getXMPPConnection());
    chatRoomManager.setConnection(getConnectNamespace(),originalTarget,conn);
    presenceHelper.setUser(new User(originalTarget));
    outgoingFileTransferContainerAdapter.setConnection(conn.getXMPPConnection());
    return originalTarget;
  }
 else   throw new ConnectException(Messages.XMPPContainer_EXCEPTION_INVALID_RESPONSE_FROM_SERVER);
}","protected ID handleConnectResponse(ID originalTarget,Object serverData) throws Exception {
  if (originalTarget != null && !originalTarget.equals(getID())) {
    addNewRemoteMember(originalTarget,null);
    final ECFConnection conn=getECFConnection();
    accountManager.setConnection(conn.getXMPPConnection());
    chatRoomManager.setConnection(getConnectNamespace(),originalTarget,conn);
    presenceHelper.setUser(new User(originalTarget));
    outgoingFileTransferContainerAdapter.setConnection(conn.getXMPPConnection());
    return originalTarget;
  }
 else   throw new ConnectException(Messages.XMPPContainer_EXCEPTION_INVALID_RESPONSE_FROM_SERVER);
}",0.9954128440366972
94879,"protected Callback[] createAuthorizationCallbacks(){
  Callback[] cbs=new Callback[1];
  cbs[0]=new ObjectCallback();
  return cbs;
}","protected Callback[] createAuthorizationCallbacks(){
  final Callback[] cbs=new Callback[1];
  cbs[0]=new ObjectCallback();
  return cbs;
}",0.9779411764705882
94880,"public void connect(ID remote,IConnectContext joinContext) throws ContainerConnectException {
  try {
    getSharedObjectManager().addSharedObject(presenceHelperID,presenceHelper,null);
    super.connect(remote,joinContext);
  }
 catch (  ContainerConnectException e) {
    disconnect();
    throw e;
  }
catch (  SharedObjectAddException e1) {
    disconnect();
    throw new ContainerConnectException(NLS.bind(Messages.XMPPContainer_EXCEPTION_ADDING_SHARED_OBJECT,presenceHelperID),e1);
  }
}","public void connect(ID remote,IConnectContext joinContext) throws ContainerConnectException {
  try {
    getSharedObjectManager().addSharedObject(presenceHelperID,presenceHelper,null);
    super.connect(remote,joinContext);
  }
 catch (  final ContainerConnectException e) {
    disconnect();
    throw e;
  }
catch (  final SharedObjectAddException e1) {
    disconnect();
    throw new ContainerConnectException(NLS.bind(Messages.XMPPContainer_EXCEPTION_ADDING_SHARED_OBJECT,presenceHelperID),e1);
  }
}",0.988
94881,"protected boolean handleAsExtension(Packet packet){
  Iterator i=packet.getExtensions();
  for (; i.hasNext(); ) {
    Object extension=i.next();
    if (extension instanceof XHTMLExtension) {
      XHTMLExtension xhtmlExtension=(XHTMLExtension)extension;
      deliverEvent(new MessageEvent((Message)packet,xhtmlExtension.getBodies()));
      return true;
    }
    if (packet instanceof Presence && extension instanceof MUCUser) {
      return true;
    }
  }
  return false;
}","protected boolean handleAsExtension(Packet packet){
  final Iterator i=packet.getExtensions();
  for (; i.hasNext(); ) {
    final Object extension=i.next();
    if (extension instanceof XHTMLExtension) {
      final XHTMLExtension xhtmlExtension=(XHTMLExtension)extension;
      deliverEvent(new MessageEvent((Message)packet,xhtmlExtension.getBodies()));
      return true;
    }
    if (packet instanceof Presence && extension instanceof MUCUser) {
      return true;
    }
  }
  return false;
}",0.9815573770491804
94882,"protected ISynchAsynchConnection createConnection(ID remoteSpace,Object data) throws ConnectionCreateException {
  boolean google=isGoogle(remoteSpace);
  return new ECFConnection(google,getConnectNamespace(),receiver);
}","protected ISynchAsynchConnection createConnection(ID remoteSpace,Object data) throws ConnectionCreateException {
  final boolean google=isGoogle(remoteSpace);
  return new ECFConnection(google,getConnectNamespace(),receiver);
}",0.9866071428571428
94883,"protected void deliverEvent(Event evt){
  SOWrapper wrap=getSharedObjectWrapper(presenceHelperID);
  if (wrap != null)   wrap.deliverEvent(evt);
}","protected void deliverEvent(Event evt){
  final SOWrapper wrap=getSharedObjectWrapper(presenceHelperID);
  if (wrap != null)   wrap.deliverEvent(evt);
}",0.9798657718120806
94884,"protected Object getConnectData(ID remote,IConnectContext joinContext) throws IOException, UnsupportedCallbackException {
  Callback[] callbacks=createAuthorizationCallbacks();
  if (joinContext != null && callbacks != null && callbacks.length > 0) {
    CallbackHandler handler=joinContext.getCallbackHandler();
    if (handler != null) {
      handler.handle(callbacks);
    }
    if (callbacks[0] instanceof ObjectCallback) {
      ObjectCallback cb=(ObjectCallback)callbacks[0];
      return cb.getObject();
    }
  }
  return null;
}","protected Object getConnectData(ID remote,IConnectContext joinContext) throws IOException, UnsupportedCallbackException {
  final Callback[] callbacks=createAuthorizationCallbacks();
  if (joinContext != null && callbacks != null && callbacks.length > 0) {
    final CallbackHandler handler=joinContext.getCallbackHandler();
    if (handler != null) {
      handler.handle(callbacks);
    }
    if (callbacks[0] instanceof ObjectCallback) {
      final ObjectCallback cb=(ObjectCallback)callbacks[0];
      return cb.getObject();
    }
  }
  return null;
}",0.9835466179159048
94885,"protected Roster getRoster() throws IOException {
  ECFConnection connection=getECFConnection();
  if (connection != null) {
    return connection.getRoster();
  }
 else   return null;
}","protected Roster getRoster() throws IOException {
  final ECFConnection connection=getECFConnection();
  if (connection != null) {
    return connection.getRoster();
  }
 else   return null;
}",0.984126984126984
94886,"protected void processAsynch(AsynchEvent e){
  try {
    if (e instanceof ECFConnectionPacketEvent) {
      handleXMPPMessage((Packet)e.getData());
      return;
    }
 else     if (e instanceof ECFConnectionObjectPacketEvent) {
      ECFConnectionObjectPacketEvent evt=(ECFConnectionObjectPacketEvent)e;
      Object obj=evt.getObjectValue();
      Object cm=deserializeContainerMessage((byte[])obj);
      if (cm == null)       throw new IOException(Messages.XMPPContainer_EXCEPTION_DESERIALIZED_OBJECT_NULL);
      ContainerMessage contMessage=(ContainerMessage)cm;
      IChatRoomContainer chat=chatRoomManager.findReceiverChatRoom(contMessage.getToContainerID());
      if (chat != null && chat instanceof XMPPChatRoomContainer) {
        XMPPChatRoomContainer cont=(XMPPChatRoomContainer)chat;
        cont.handleContainerMessage(contMessage);
        return;
      }
      Object data=contMessage.getData();
      if (data instanceof ContainerMessage.CreateMessage) {
        handleCreateMessage(contMessage);
      }
 else       if (data instanceof ContainerMessage.CreateResponseMessage) {
        handleCreateResponseMessage(contMessage);
      }
 else       if (data instanceof ContainerMessage.SharedObjectMessage) {
        handleSharedObjectMessage(contMessage);
      }
 else       if (data instanceof ContainerMessage.SharedObjectDisposeMessage) {
        handleSharedObjectDisposeMessage(contMessage);
      }
 else {
        debug(NLS.bind(Messages.XMPPContainer_UNRECOGONIZED_CONTAINER_MESSAGE,contMessage));
      }
    }
 else {
      log(NLS.bind(Messages.XMPPContainer_UNEXPECTED_EVENT,e),null);
    }
  }
 catch (  Exception except) {
    log(NLS.bind(Messages.XMPPContainer_EXCEPTION_HANDLING_ASYCH_EVENT,e),except);
  }
}","protected void processAsynch(AsynchEvent e){
  try {
    if (e instanceof ECFConnectionPacketEvent) {
      handleXMPPMessage((Packet)e.getData());
      return;
    }
 else     if (e instanceof ECFConnectionObjectPacketEvent) {
      final ECFConnectionObjectPacketEvent evt=(ECFConnectionObjectPacketEvent)e;
      final Object obj=evt.getObjectValue();
      final Object cm=deserializeContainerMessage((byte[])obj);
      if (cm == null)       throw new IOException(Messages.XMPPContainer_EXCEPTION_DESERIALIZED_OBJECT_NULL);
      final ContainerMessage contMessage=(ContainerMessage)cm;
      final IChatRoomContainer chat=chatRoomManager.findReceiverChatRoom(contMessage.getToContainerID());
      if (chat != null && chat instanceof XMPPChatRoomContainer) {
        final XMPPChatRoomContainer cont=(XMPPChatRoomContainer)chat;
        cont.handleContainerMessage(contMessage);
        return;
      }
      final Object data=contMessage.getData();
      if (data instanceof ContainerMessage.CreateMessage) {
        handleCreateMessage(contMessage);
      }
 else       if (data instanceof ContainerMessage.CreateResponseMessage) {
        handleCreateResponseMessage(contMessage);
      }
 else       if (data instanceof ContainerMessage.SharedObjectMessage) {
        handleSharedObjectMessage(contMessage);
      }
 else       if (data instanceof ContainerMessage.SharedObjectDisposeMessage) {
        handleSharedObjectDisposeMessage(contMessage);
      }
 else {
        debug(NLS.bind(Messages.XMPPContainer_UNRECOGONIZED_CONTAINER_MESSAGE,contMessage));
      }
    }
 else {
      log(NLS.bind(Messages.XMPPContainer_UNEXPECTED_EVENT,e),null);
    }
  }
 catch (  final Exception except) {
    log(NLS.bind(Messages.XMPPContainer_EXCEPTION_HANDLING_ASYCH_EVENT,e),except);
  }
}",0.9864483342744212
94887,"public XMPPID(Namespace namespace,String unamehost) throws URISyntaxException {
  super(namespace);
  unamehost=fixEscape(unamehost);
  if (unamehost == null)   throw new URISyntaxException(unamehost,""String_Node_Str"");
  int atIndex=unamehost.lastIndexOf(USER_HOST_DELIMITER);
  if (atIndex == -1)   throw new URISyntaxException(unamehost,""String_Node_Str"");
  username=unamehost.substring(0,atIndex);
  final String remainder=unamehost.substring(atIndex + 1);
  atIndex=remainder.lastIndexOf(PORT_DELIMITER);
  if (atIndex != -1) {
    try {
      final int slashLoc=remainder.indexOf(PATH_DELIMITER);
      if (slashLoc != -1)       port=Integer.parseInt(remainder.substring(atIndex + 1,slashLoc));
 else       port=Integer.parseInt(remainder.substring(atIndex + 1));
    }
 catch (    final NumberFormatException e) {
      throw new URISyntaxException(unamehost,""String_Node_Str"");
    }
    hostname=remainder.substring(0,atIndex);
  }
  atIndex=remainder.indexOf(PATH_DELIMITER);
  if (atIndex != -1) {
    if (hostname == null)     hostname=remainder.substring(0,atIndex);
    resourcename=PATH_DELIMITER + remainder.substring(atIndex + 1);
  }
 else {
    resourcename=PATH_DELIMITER + ECFConnection.CLIENT_TYPE;
  }
  uri=new URI(namespace.getScheme(),username,hostname,port,resourcename,null,null);
}","public XMPPID(Namespace namespace,String unamehost) throws URISyntaxException {
  super(namespace);
  unamehost=fixEscape(unamehost);
  if (unamehost == null)   throw new URISyntaxException(unamehost,""String_Node_Str"");
  int atIndex=unamehost.lastIndexOf(USER_HOST_DELIMITER);
  if (atIndex == -1)   throw new URISyntaxException(unamehost,""String_Node_Str"");
  username=unamehost.substring(0,atIndex);
  final String remainder=unamehost.substring(atIndex + 1);
  atIndex=remainder.lastIndexOf(PORT_DELIMITER);
  if (atIndex != -1) {
    try {
      final int slashLoc=remainder.indexOf(PATH_DELIMITER);
      if (slashLoc != -1)       port=Integer.parseInt(remainder.substring(atIndex + 1,slashLoc));
 else       port=Integer.parseInt(remainder.substring(atIndex + 1));
    }
 catch (    final NumberFormatException e) {
      throw new URISyntaxException(unamehost,""String_Node_Str"");
    }
    hostname=remainder.substring(0,atIndex);
  }
  atIndex=remainder.indexOf(PATH_DELIMITER);
  if (atIndex != -1) {
    if (hostname == null)     hostname=remainder.substring(0,atIndex);
    resourcename=PATH_DELIMITER + remainder.substring(atIndex + 1);
  }
 else {
    resourcename=PATH_DELIMITER + ECFConnection.CLIENT_TYPE;
  }
  if (hostname == null)   hostname=remainder;
  uri=new URI(namespace.getScheme(),username,hostname,port,resourcename,null,null);
}",0.9827586206896552
94888,"protected boolean namespaceEquals(BaseID o){
  if (!(o instanceof XMPPID)) {
    return false;
  }
  XMPPID other=(XMPPID)o;
  return getUsernameAtHost().equals(other.getUsernameAtHost());
}","protected boolean namespaceEquals(BaseID o){
  if (!(o instanceof XMPPID)) {
    return false;
  }
  final XMPPID other=(XMPPID)o;
  return getUsernameAtHost().equals(other.getUsernameAtHost());
}",0.9844559585492229
94889,"public String toString(){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(uri.toString()).append(""String_Node_Str"");
  return sb.toString();
}","public String toString(){
  final StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(uri.toString()).append(""String_Node_Str"");
  return sb.toString();
}",0.9817073170731708
94890,"public XMPPID(Namespace namespace,String unamehost) throws URISyntaxException {
  super(namespace);
  unamehost=fixEscape(unamehost);
  if (unamehost == null)   throw new URISyntaxException(unamehost,""String_Node_Str"");
  int atIndex=unamehost.lastIndexOf(USER_HOST_DELIMITER);
  if (atIndex == -1)   throw new URISyntaxException(unamehost,""String_Node_Str"");
  username=unamehost.substring(0,atIndex);
  hostname=unamehost.substring(atIndex + 1);
  atIndex=hostname.lastIndexOf(PORT_DELIMITER);
  if (atIndex != -1) {
    try {
      port=Integer.parseInt(hostname.substring(atIndex + 1));
    }
 catch (    NumberFormatException e) {
      throw new URISyntaxException(unamehost,""String_Node_Str"");
    }
    hostname=hostname.substring(0,atIndex);
  }
  atIndex=hostname.lastIndexOf(PATH_DELIMITER);
  if (atIndex != -1) {
    resourcename=PATH_DELIMITER + hostname.substring(atIndex + 1);
    hostname=hostname.substring(0,atIndex);
  }
 else {
    resourcename=PATH_DELIMITER + ECFConnection.CLIENT_TYPE;
  }
  uri=new URI(namespace.getScheme(),username,hostname,port,resourcename,null,null);
}","public XMPPID(Namespace namespace,String unamehost) throws URISyntaxException {
  super(namespace);
  unamehost=fixEscape(unamehost);
  if (unamehost == null)   throw new URISyntaxException(unamehost,""String_Node_Str"");
  int atIndex=unamehost.lastIndexOf(USER_HOST_DELIMITER);
  if (atIndex == -1)   throw new URISyntaxException(unamehost,""String_Node_Str"");
  username=unamehost.substring(0,atIndex);
  final String remainder=unamehost.substring(atIndex + 1);
  atIndex=remainder.lastIndexOf(PORT_DELIMITER);
  if (atIndex != -1) {
    try {
      final int slashLoc=remainder.indexOf(PATH_DELIMITER);
      if (slashLoc != -1)       port=Integer.parseInt(remainder.substring(atIndex + 1,slashLoc));
 else       port=Integer.parseInt(remainder.substring(atIndex + 1));
    }
 catch (    final NumberFormatException e) {
      throw new URISyntaxException(unamehost,""String_Node_Str"");
    }
    hostname=remainder.substring(0,atIndex);
  }
  atIndex=remainder.indexOf(PATH_DELIMITER);
  if (atIndex != -1) {
    if (hostname == null)     hostname=remainder.substring(0,atIndex);
    resourcename=PATH_DELIMITER + remainder.substring(atIndex + 1);
  }
 else {
    resourcename=PATH_DELIMITER + ECFConnection.CLIENT_TYPE;
  }
  uri=new URI(namespace.getScheme(),username,hostname,port,resourcename,null,null);
}",0.6240663900414938
94891,"protected void handleUnregister(ID containerID,Long serviceId){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",new Object[]{containerID,serviceId});
synchronized (remoteRegistrys) {
    final RemoteServiceRegistryImpl serviceRegistry=(RemoteServiceRegistryImpl)remoteRegistrys.get(containerID);
    if (serviceRegistry != null) {
      final RemoteServiceRegistrationImpl registration=serviceRegistry.findRegistrationForServiceId(serviceId.longValue());
      if (registration != null) {
        serviceRegistry.unpublishService(registration);
        unpublishServiceRegistration(registration.getContainerID());
        fireRemoteServiceListeners(createUnregisteredEvent(registration));
      }
    }
  }
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}","protected void handleUnregister(ID containerID,Long serviceId){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",new Object[]{containerID,serviceId});
synchronized (remoteRegistrys) {
    final RemoteServiceRegistryImpl serviceRegistry=(RemoteServiceRegistryImpl)remoteRegistrys.get(containerID);
    if (serviceRegistry != null) {
      final RemoteServiceRegistrationImpl registration=serviceRegistry.findRegistrationForServiceId(serviceId.longValue());
      if (registration != null) {
        serviceRegistry.unpublishService(registration);
        unpublishServiceRegistrationsForContainer(registration.getContainerID());
        fireRemoteServiceListeners(createUnregisteredEvent(registration));
      }
    }
  }
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}",0.9928767123287672
94892,"public void dispose(ID containerID){
  super.dispose(containerID);
  remoteRegistrys.clear();
  serviceListeners.clear();
  serviceRegistrationMap.clear();
}","public void dispose(ID containerID){
  super.dispose(containerID);
  remoteRegistrys.clear();
  serviceListeners.clear();
  unpublishAllServiceRegistrations();
  localServiceRegistrations.clear();
}",0.8732394366197183
94893,"private void localRegisterService(RemoteServiceRegistrationImpl registration){
  final Object localServiceRegistrationValue=registration.getProperty(Constants.LOCAL_SERVICE_REGISTRATION);
  if (localServiceRegistrationValue != null) {
    final BundleContext context=Activator.getDefault().getContext();
    if (context == null)     return;
    final RemoteServiceImpl remoteServiceImpl=new RemoteServiceImpl(this,registration);
    Object service;
    try {
      service=remoteServiceImpl.getProxy();
    }
 catch (    final ECFException e) {
      e.printStackTrace();
      log(""String_Node_Str"",e);
      return;
    }
    final Hashtable properties=new Hashtable();
    final String[] keys=registration.getPropertyKeys();
    for (int i=0; i < keys.length; i++) {
      final Object value=registration.getProperty(keys[i]);
      if (value != null) {
        properties.put(keys[i],value);
      }
    }
    final ID remoteContainerID=registration.getContainerID();
    properties.put(Constants.SERVICE_REGISTRATION_CONTAINER_ID,remoteContainerID.getName());
    final ServiceRegistration reg=context.registerService(registration.getClasses(),service,properties);
    System.out.println(""String_Node_Str"" + reg);
    serviceRegistrationMap.put(remoteContainerID,reg);
  }
}","private void localRegisterService(RemoteServiceRegistrationImpl registration){
  final Object localServiceRegistrationValue=registration.getProperty(Constants.LOCAL_SERVICE_REGISTRATION);
  if (localServiceRegistrationValue != null) {
    final BundleContext context=Activator.getDefault().getContext();
    if (context == null)     return;
    final RemoteServiceImpl remoteServiceImpl=new RemoteServiceImpl(this,registration);
    Object service;
    try {
      service=remoteServiceImpl.getProxy();
    }
 catch (    final ECFException e) {
      e.printStackTrace();
      log(""String_Node_Str"",e);
      return;
    }
    final Hashtable properties=new Hashtable();
    final String[] keys=registration.getPropertyKeys();
    for (int i=0; i < keys.length; i++) {
      final Object value=registration.getProperty(keys[i]);
      if (value != null) {
        properties.put(keys[i],value);
      }
    }
    final ID remoteContainerID=registration.getContainerID();
    properties.put(Constants.SERVICE_REGISTRATION_CONTAINER_ID,remoteContainerID.getName());
    properties.put(Constants.REMOTE_SERVICE,remoteServiceImpl);
    final ServiceRegistration serviceRegistration=context.registerService(registration.getClasses(),service,properties);
    addLocalServiceRegistration(remoteContainerID,serviceRegistration);
  }
}",0.9201841903300076
94894,"protected void handleContainerDisconnectedEvent(IContainerDisconnectedEvent event){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",event);
  final ID targetID=event.getTargetID();
synchronized (remoteRegistrys) {
    final RemoteServiceRegistryImpl registry=getRemoteRegistry(targetID);
    if (registry != null) {
      removeRemoteRegistry(targetID);
      final RemoteServiceRegistrationImpl registrations[]=registry.getRegistrations();
      if (registrations != null) {
        for (int i=0; i < registrations.length; i++) {
          registry.unpublishService(registrations[i]);
          unpublishServiceRegistration(registrations[i].getContainerID());
          fireRemoteServiceListeners(createUnregisteredEvent(registrations[i]));
        }
      }
    }
  }
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}","protected void handleContainerDisconnectedEvent(IContainerDisconnectedEvent event){
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"",event);
  final ID targetID=event.getTargetID();
synchronized (remoteRegistrys) {
    final RemoteServiceRegistryImpl registry=getRemoteRegistry(targetID);
    if (registry != null) {
      removeRemoteRegistry(targetID);
      final RemoteServiceRegistrationImpl registrations[]=registry.getRegistrations();
      if (registrations != null) {
        for (int i=0; i < registrations.length; i++) {
          registry.unpublishService(registrations[i]);
          unpublishServiceRegistrationsForContainer(registrations[i].getContainerID());
          fireRemoteServiceListeners(createUnregisteredEvent(registrations[i]));
        }
      }
    }
  }
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}",0.9933367503844184
94895,"private void retrieveBuddyList() throws IOException {
  write(""String_Node_Str"",""String_Node_Str"");
  BufferedReader reader=new BufferedReader(new InputStreamReader(getInputStream()));
  String input=reader.readLine();
  while (input == null || !input.startsWith(""String_Node_Str"")) {
    input=reader.readLine();
  }
  String[] split=StringUtils.splitOnSpace(input);
  int contacts=Integer.parseInt(split[4]);
  while (!input.startsWith(""String_Node_Str"")) {
    if (input.startsWith(""String_Node_Str"")) {
      client.internalSetDisplayName(StringUtils.splitSubstring(input,""String_Node_Str"",2));
    }
 else     if (input.startsWith(""String_Node_Str"")) {
      split=StringUtils.splitOnSpace(input);
      list.addGroup(split[2],new Group(split[1]));
    }
    input=reader.readLine();
  }
  int count=0;
  while (true) {
    if (input.startsWith(""String_Node_Str"")) {
      count++;
      String[] contact=StringUtils.splitOnSpace(input);
      String email=contact[1].substring(2);
switch (contact.length) {
case 3:
        list.internalAddContact(email,email);
      break;
case 5:
    list.addContact(email,email,contact[3].substring(2));
  break;
default :
list.addContact(contact[2].substring(2),email,contact[3].substring(2),contact[5]);
break;
}
if (count == contacts) {
break;
}
}
input=reader.readLine();
}
write(""String_Node_Str"",client.getStatus().getLiteral() + ""String_Node_Str"");
idle();
ping();
}","private void retrieveBuddyList() throws IOException {
  write(""String_Node_Str"",""String_Node_Str"");
  BufferedReader reader=new BufferedReader(new InputStreamReader(getInputStream()));
  String input=reader.readLine();
  while (input == null || !input.startsWith(""String_Node_Str"")) {
    input=reader.readLine();
  }
  String[] split=StringUtils.splitOnSpace(input);
  int contacts=Integer.parseInt(split[4]);
  while (!input.startsWith(""String_Node_Str"")) {
    if (input.startsWith(""String_Node_Str"")) {
      client.internalSetDisplayName(StringUtils.splitSubstring(input,""String_Node_Str"",2));
    }
 else     if (input.startsWith(""String_Node_Str"")) {
      split=StringUtils.splitOnSpace(input);
      list.addGroup(split[2],new Group(URLDecoder.decode(split[1])));
    }
    input=reader.readLine();
  }
  int count=0;
  while (true) {
    if (input.startsWith(""String_Node_Str"")) {
      count++;
      String[] contact=StringUtils.splitOnSpace(input);
      String email=contact[1].substring(2);
switch (contact.length) {
case 3:
        list.internalAddContact(email,email);
      break;
case 5:
    list.addContact(email,email,contact[3].substring(2));
  break;
default :
list.addContact(contact[2].substring(2),email,contact[3].substring(2),contact[5]);
break;
}
if (count == contacts) {
break;
}
}
input=reader.readLine();
}
write(""String_Node_Str"",client.getStatus().getLiteral() + ""String_Node_Str"");
idle();
ping();
}",0.9933309933309932
94896,"public void testCallAsynch() throws Exception {
  IRemoteService service=registerAndGetRemoteService();
  System.out.println(""String_Node_Str"");
  service.callAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""),createRemoteCallListener());
  System.out.println(""String_Node_Str"");
  sleep(1500);
}","public void testCallAsynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  System.out.println(""String_Node_Str"");
  service.callAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""),createRemoteCallListener());
  System.out.println(""String_Node_Str"");
  sleep(1500);
}",0.990353697749196
94897,"public void testProxy() throws Exception {
  IRemoteService service=registerAndGetRemoteService();
  IConcatService proxy=(IConcatService)service.getProxy();
  assertNotNull(proxy);
  System.out.println(""String_Node_Str"");
  String result=proxy.concat(""String_Node_Str"",""String_Node_Str"");
  System.out.println(""String_Node_Str"" + result);
  sleep(1500);
}","public void testProxy() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  final IConcatService proxy=(IConcatService)service.getProxy();
  assertNotNull(proxy);
  System.out.println(""String_Node_Str"");
  final String result=proxy.concat(""String_Node_Str"",""String_Node_Str"");
  System.out.println(""String_Node_Str"" + result);
  sleep(1500);
}",0.9753424657534246
94898,"public String concat(String string1,String string2){
  String result=string1.concat(string2);
  System.out.println(""String_Node_Str"" + string1 + ""String_Node_Str""+ string2+ ""String_Node_Str""+ result);
  return string1.concat(string2);
}","public String concat(String string1,String string2){
  final String result=string1.concat(string2);
  System.out.println(""String_Node_Str"" + string1 + ""String_Node_Str""+ string2+ ""String_Node_Str""+ result);
  return string1.concat(string2);
}",0.98744769874477
94899,"public void testRegisterService() throws Exception {
  IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  IRemoteServiceRegistration reg=registerService(adapters[0],IConcatService.class.getName(),createService(),1500);
  assertNotNull(reg);
  assertNotNull(reg.getContainerID());
}","public void testRegisterService() throws Exception {
  final IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  final IRemoteServiceRegistration reg=registerService(adapters[0],IConcatService.class.getName(),createService(),1500);
  assertNotNull(reg);
  assertNotNull(reg.getContainerID());
}",0.9805194805194806
94900,"protected IRemoteService registerAndGetRemoteService(){
  IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  return registerAndGetRemoteService(adapters[0],adapters[1],IConcatService.class.getName(),1500);
}","protected IRemoteService registerAndGetRemoteService(){
  final IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  return registerAndGetRemoteService(adapters[0],adapters[1],IConcatService.class.getName(),1500);
}",0.987012987012987
94901,"public void testFireAsynch() throws Exception {
  IRemoteService service=registerAndGetRemoteService();
  System.out.println(""String_Node_Str"");
  service.fireAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  System.out.println(""String_Node_Str"");
  sleep(1500);
}","public void testFireAsynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  System.out.println(""String_Node_Str"");
  service.fireAsynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  System.out.println(""String_Node_Str"");
  sleep(1500);
}",0.98943661971831
94902,"protected Object createService(){
  return new IConcatService(){
    public String concat(    String string1,    String string2){
      String result=string1.concat(string2);
      System.out.println(""String_Node_Str"" + string1 + ""String_Node_Str""+ string2+ ""String_Node_Str""+ result);
      return string1.concat(string2);
    }
  }
;
}","protected Object createService(){
  return new IConcatService(){
    public String concat(    String string1,    String string2){
      final String result=string1.concat(string2);
      System.out.println(""String_Node_Str"" + string1 + ""String_Node_Str""+ string2+ ""String_Node_Str""+ result);
      return string1.concat(string2);
    }
  }
;
}",0.9911764705882352
94903,"public void testGetServiceReference() throws Exception {
  IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  registerService(adapters[0],IConcatService.class.getName(),createService(),3000);
  IRemoteServiceReference[] refs=getRemoteServiceReferences(adapters[1],IConcatService.class.getName());
  assertNotNull(refs);
  assertTrue(refs.length == 1);
}","public void testGetServiceReference() throws Exception {
  final IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  registerService(adapters[0],IConcatService.class.getName(),createService(),3000);
  final IRemoteServiceReference[] refs=getRemoteServiceReferences(adapters[1],IConcatService.class.getName());
  assertNotNull(refs);
  assertTrue(refs.length > 0);
}",0.9749670619235836
94904,"public void testGetService() throws Exception {
  IRemoteService service=registerAndGetRemoteService();
  assertNotNull(service);
}","public void testGetService() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  assertNotNull(service);
}",0.9776119402985076
94905,"public void testUnregisterService() throws Exception {
  IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  IRemoteServiceRegistration reg=registerService(adapters[0],IConcatService.class.getName(),createService(),1500);
  assertNotNull(reg);
  assertNotNull(reg.getContainerID());
  reg.unregister();
}","public void testUnregisterService() throws Exception {
  final IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  final IRemoteServiceRegistration reg=registerService(adapters[0],IConcatService.class.getName(),createService(),1500);
  assertNotNull(reg);
  assertNotNull(reg.getContainerID());
  reg.unregister();
}",0.9818181818181818
94906,"public void testCallSynch() throws Exception {
  IRemoteService service=registerAndGetRemoteService();
  System.out.println(""String_Node_Str"");
  Object result=service.callSynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  System.out.println(""String_Node_Str"" + result);
  assertNotNull(result);
  assertTrue(result.equals(""String_Node_Str"".concat(""String_Node_Str"")));
}","public void testCallSynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  System.out.println(""String_Node_Str"");
  final Object result=service.callSynch(createRemoteConcat(""String_Node_Str"",""String_Node_Str""));
  System.out.println(""String_Node_Str"" + result);
  assertNotNull(result);
  assertTrue(result.equals(""String_Node_Str"".concat(""String_Node_Str"")));
}",0.9846938775510204
94907,"public void testBadCallSynch() throws Exception {
  IRemoteService service=registerAndGetRemoteService();
  try {
    service.callSynch(createRemoteCall(""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""}));
    fail();
  }
 catch (  ECFException e) {
  }
  try {
    service.callSynch(createRemoteCall(""String_Node_Str"",new Object[]{""String_Node_Str""}));
    fail();
  }
 catch (  ECFException e) {
  }
}","public void testBadCallSynch() throws Exception {
  final IRemoteService service=registerAndGetRemoteService();
  try {
    service.callSynch(createRemoteCall(""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""}));
    fail();
  }
 catch (  final ECFException e) {
  }
  try {
    service.callSynch(createRemoteCall(""String_Node_Str"",new Object[]{""String_Node_Str""}));
    fail();
  }
 catch (  final ECFException e) {
  }
}",0.9790697674418604
94908,"public void testRemoteServiceAdapters() throws Exception {
  IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  assertNotNull(adapters);
  for (int i=0; i < adapters.length; i++)   assertNotNull(adapters[i]);
}","public void testRemoteServiceAdapters() throws Exception {
  final IRemoteServiceContainerAdapter[] adapters=getRemoteServiceAdapters();
  assertNotNull(adapters);
  for (int i=0; i < adapters.length; i++)   assertNotNull(adapters[i]);
}",0.9871794871794872
94909,"public ID getConnectedID(){
synchronized (getConnectLock()) {
    return remoteServerID;
  }
}","public ID getConnectedID(){
  return remoteServerID;
}",0.7297297297297297
94910,"public boolean processEvent(Event arg0){
  if (arg0 instanceof IContainerConnectedEvent) {
    handleContainerConnectedEvent((IContainerConnectedEvent)arg0);
  }
 else   if (arg0 instanceof IContainerDisconnectedEvent) {
    handleContainerDisconnectedEvent((IContainerDisconnectedEvent)arg0);
  }
  return false;
}","public boolean processEvent(Event arg0){
  if (arg0 instanceof IContainerConnectedEvent) {
    handleContainerConnectedEvent((IContainerConnectedEvent)arg0);
  }
 else   if (arg0 instanceof IContainerDisconnectedEvent) {
    handleContainerDisconnectedEvent((IContainerDisconnectedEvent)arg0);
  }
 else   if (arg0 instanceof ISharedObjectActivatedEvent) {
    if (getConfig().getContext().getConnectedID() != null) {
      sendRegistryUpdateRequest();
    }
  }
  return false;
}",0.7622641509433963
94911,"public void initialize() throws SharedObjectInitException {
  super.initialize();
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  super.addEventProcessor(new IEventProcessor(){
    public boolean processEvent(    Event arg0){
      if (arg0 instanceof IContainerConnectedEvent) {
        handleContainerConnectedEvent((IContainerConnectedEvent)arg0);
      }
 else       if (arg0 instanceof IContainerDisconnectedEvent) {
        handleContainerDisconnectedEvent((IContainerDisconnectedEvent)arg0);
      }
      return false;
    }
  }
);
  localRegistry=new RemoteServiceRegistryImpl(getLocalContainerID());
  if (getConfig().getContext().getConnectedID() != null) {
    sendRegistryUpdateRequest();
  }
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}","public void initialize() throws SharedObjectInitException {
  super.initialize();
  Trace.entering(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_ENTERING,this.getClass(),""String_Node_Str"");
  super.addEventProcessor(new IEventProcessor(){
    public boolean processEvent(    Event arg0){
      if (arg0 instanceof IContainerConnectedEvent) {
        handleContainerConnectedEvent((IContainerConnectedEvent)arg0);
      }
 else       if (arg0 instanceof IContainerDisconnectedEvent) {
        handleContainerDisconnectedEvent((IContainerDisconnectedEvent)arg0);
      }
 else       if (arg0 instanceof ISharedObjectActivatedEvent) {
        if (getConfig().getContext().getConnectedID() != null) {
          sendRegistryUpdateRequest();
        }
      }
      return false;
    }
  }
);
  localRegistry=new RemoteServiceRegistryImpl(getLocalContainerID());
  Trace.exiting(Activator.PLUGIN_ID,IRemoteServiceProviderDebugOptions.METHODS_EXITING,this.getClass(),""String_Node_Str"");
}",0.8474042999475616
94912,"ChatRoomTab(boolean withParticipantsList,CTabFolder parent,String name,KeyListener keyListener){
  withParticipants=withParticipantsList;
  tabItem=new CTabItem(parent,SWT.NULL);
  tabItem.setText(name);
  if (withParticipants) {
    fullChat=new SashForm(parent,SWT.HORIZONTAL);
    fullChat.setLayout(new FillLayout());
    Composite memberComp=new Composite(fullChat,SWT.NONE);
    GridLayout layout=new GridLayout(1,true);
    layout.marginWidth=0;
    layout.marginHeight=0;
    memberComp.setLayout(layout);
    participantsNumberLabel=new Label(memberComp,SWT.BORDER | SWT.READ_ONLY);
    participantsNumberLabel.setLayoutData(new GridData(SWT.FILL,SWT.BEGINNING,true,false));
    participantsNumberLabel.setAlignment(SWT.CENTER);
    participantsTable=new TableViewer(memberComp,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI);
    participantsTable.setSorter(new ViewerSorter());
    participantsTable.getTable().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    participantsTable.addOpenListener(new IOpenListener(){
      public void open(      OpenEvent event){
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        String user=((ChatRoomParticipant)selection.getFirstElement()).getName();
        if (!ChatRoomManagerView.this.localUserName.equals(user)) {
          try {
            MessagesView messagesView=getMessagesView();
            messagesView.selectTab(container.getPrivateMessageSender(),null,createStringID(localUserName),createStringID(user));
            getSite().getPage().activate(messagesView);
          }
 catch (          PartInitException e) {
            Activator.getDefault().getLog().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,NLS.bind(Messages.ChatRoomManagerView_EXCEPTION_MESSAGE_VIEW_INITIALIZATION,user),e));
          }
        }
      }
    }
);
    Composite rightComp=new Composite(fullChat,SWT.NONE);
    rightComp.setLayout(layout);
    subjectText=new Text(rightComp,SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);
    subjectText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
    rightSash=new SashForm(rightComp,SWT.VERTICAL);
    rightSash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  }
 else   rightSash=new SashForm(parent,SWT.VERTICAL);
  outputText=createStyledTextWidget(rightSash);
  outputText.setEditable(false);
  outputText.setLayoutData(new GridData(GridData.FILL_BOTH));
  inputText=new Text(rightSash,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  if (keyListener != null)   inputText.addKeyListener(keyListener);
  rightSash.setWeights(new int[]{RATIO_READ_PANE,RATIO_WRITE_PANE});
  if (withParticipants) {
    fullChat.setWeights(new int[]{RATIO_PRESENCE_PANE,RATIO_READ_WRITE_PANE});
    tabItem.setControl(fullChat);
  }
 else   tabItem.setControl(rightSash);
  parent.setSelection(tabItem);
  makeActions();
  hookContextMenu();
  if (withParticipants) {
    hookParticipantsContextMenu();
  }
  StyledText st=getOutputText();
  if (st != null) {
    ScrollBar vsb=st.getVerticalBar();
    if (vsb != null) {
      vsb.addSelectionListener(scrollSelectionListener);
      vsb.addDisposeListener(new DisposeListener(){
        public void widgetDisposed(        DisposeEvent e){
          StyledText ot=getOutputText();
          if (ot != null) {
            ScrollBar sb=ot.getVerticalBar();
            if (sb != null)             sb.removeSelectionListener(scrollSelectionListener);
          }
        }
      }
);
    }
  }
}","ChatRoomTab(boolean withParticipantsList,CTabFolder parent,String name,KeyListener keyListener){
  withParticipants=withParticipantsList;
  tabItem=new CTabItem(parent,SWT.NULL);
  tabItem.setText(name);
  if (withParticipants) {
    fullChat=new SashForm(parent,SWT.HORIZONTAL);
    fullChat.setLayout(new FillLayout());
    Composite memberComp=new Composite(fullChat,SWT.NONE);
    GridLayout layout=new GridLayout(1,true);
    layout.marginWidth=0;
    layout.marginHeight=0;
    memberComp.setLayout(layout);
    participantsNumberLabel=new Label(memberComp,SWT.BORDER | SWT.READ_ONLY);
    participantsNumberLabel.setLayoutData(new GridData(SWT.FILL,SWT.BEGINNING,true,false));
    participantsNumberLabel.setAlignment(SWT.CENTER);
    participantsTable=new TableViewer(memberComp,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI);
    participantsTable.setSorter(new ViewerSorter());
    participantsTable.getTable().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    participantsTable.addOpenListener(new IOpenListener(){
      public void open(      OpenEvent event){
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        String user=((ChatRoomParticipant)selection.getFirstElement()).getName();
        if (!ChatRoomManagerView.this.localUserName.equals(user)) {
          try {
            MessagesView messagesView=getMessagesView();
            messagesView.selectTab(container.getPrivateMessageSender(),null,createStringID(localUserName),createStringID(user));
            getSite().getPage().activate(messagesView);
          }
 catch (          PartInitException e) {
            Activator.getDefault().getLog().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,NLS.bind(Messages.ChatRoomManagerView_EXCEPTION_MESSAGE_VIEW_INITIALIZATION,user),e));
          }
        }
      }
    }
);
    Composite rightComp=new Composite(fullChat,SWT.NONE);
    rightComp.setLayout(layout);
    subjectText=new Text(rightComp,SWT.SINGLE | SWT.BORDER);
    subjectText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
    subjectText.addKeyListener(new KeyAdapter(){
      public void keyPressed(      KeyEvent evt){
        if (evt.character == SWT.CR || evt.character == SWT.KEYPAD_CR) {
          ChatRoom chatroom=(ChatRoom)chatRooms.get(tabItem.getText());
          if (chatroom != null) {
            IChatRoomAdminSender chatRoomAdminSender=chatroom.chatRoomContainer.getChatRoomAdminSender();
            try {
              if (chatRoomAdminSender != null) {
                chatRoomAdminSender.sendSubjectChange(subjectText.getText());
              }
            }
 catch (            ECFException e) {
              disconnected();
            }
          }
        }
      }
    }
);
    rightSash=new SashForm(rightComp,SWT.VERTICAL);
    rightSash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  }
 else   rightSash=new SashForm(parent,SWT.VERTICAL);
  outputText=createStyledTextWidget(rightSash);
  outputText.setEditable(false);
  outputText.setLayoutData(new GridData(GridData.FILL_BOTH));
  inputText=new Text(rightSash,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  if (keyListener != null)   inputText.addKeyListener(keyListener);
  rightSash.setWeights(new int[]{RATIO_READ_PANE,RATIO_WRITE_PANE});
  if (withParticipants) {
    fullChat.setWeights(new int[]{RATIO_PRESENCE_PANE,RATIO_READ_WRITE_PANE});
    tabItem.setControl(fullChat);
  }
 else   tabItem.setControl(rightSash);
  parent.setSelection(tabItem);
  makeActions();
  hookContextMenu();
  if (withParticipants) {
    hookParticipantsContextMenu();
  }
  StyledText st=getOutputText();
  if (st != null) {
    ScrollBar vsb=st.getVerticalBar();
    if (vsb != null) {
      vsb.addSelectionListener(scrollSelectionListener);
      vsb.addDisposeListener(new DisposeListener(){
        public void widgetDisposed(        DisposeEvent e){
          StyledText ot=getOutputText();
          if (ot != null) {
            ScrollBar sb=ot.getVerticalBar();
            if (sb != null)             sb.removeSelectionListener(scrollSelectionListener);
          }
        }
      }
);
    }
  }
}",0.8893229166666666
94913,"protected IChatRoomViewCloseListener createChatRoomViewCloseListener(){
  return new IChatRoomViewCloseListener(){
    public void chatRoomViewClosing(){
      container.dispose();
    }
  }
;
}","protected IChatRoomViewCloseListener createChatRoomViewCloseListener(){
  return new IChatRoomViewCloseListener(){
    public void chatRoomViewClosing(){
      container.disconnect();
    }
  }
;
}",0.9820971867007672
94914,"public void chatRoomViewClosing(){
  container.dispose();
}","public void chatRoomViewClosing(){
  container.disconnect();
}",0.9421487603305784
94915,"public void disconnect(){
  if (rootCloseListener != null) {
    rootCloseListener.chatRoomViewClosing();
  }
  for (Iterator i=chatRooms.values().iterator(); i.hasNext(); ) {
    ChatRoom chatRoom=(ChatRoom)i.next();
    IChatRoomContainer container=chatRoom.chatRoomContainer;
    if (container != null)     container.dispose();
  }
  rootMessageSender=null;
  rootCloseListener=null;
  chatRooms.clear();
}","public void disconnect(){
  if (rootCloseListener != null) {
    rootCloseListener.chatRoomViewClosing();
  }
  for (Iterator i=chatRooms.values().iterator(); i.hasNext(); ) {
    ChatRoom chatRoom=(ChatRoom)i.next();
    IChatRoomContainer container=chatRoom.chatRoomContainer;
    if (container != null)     container.disconnect();
  }
  rootMessageSender=null;
  rootCloseListener=null;
  chatRooms.clear();
}",0.9866017052375152
94916,"public void stop(BundleContext context) throws Exception {
  plugin=null;
  if (tracker != null) {
    tracker.close();
    tracker=null;
  }
}","public void stop(BundleContext context) throws Exception {
  if (tracker != null) {
    tracker.close();
    tracker=null;
  }
  if (discoveryRegistration != null) {
    discoveryRegistration.unregister();
    discoveryRegistration=null;
  }
  plugin=null;
}",0.6384039900249376
94917,"public void start(BundleContext context) throws Exception {
  plugin=this;
  tracker=new ServiceTracker(context,IDiscoveryService.class.getName(),null);
  tracker.open();
}","public void start(BundleContext context) throws Exception {
  plugin=this;
  IContainer container=ContainerFactory.getDefault().createContainer(""String_Node_Str"");
  container.connect(null,null);
  discoveryRegistration=context.registerService(IDiscoveryService.class.getName(),container,null);
  tracker=new ServiceTracker(context,IDiscoveryService.class.getName(),null);
  tracker.open();
}",0.4964539007092198
94918,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DiscoveryTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DiscoveryTest.class);
  suite.addTestSuite(DiscoveryServiceTest.class);
  return suite;
}",0.8484848484848485
94919,"protected String[] getRoomsForTarget(){
  String initialRooms=null;
  try {
    URI targetURI=new URI(targetID.getName());
    initialRooms=targetURI.getPath();
  }
 catch (  URISyntaxException e) {
  }
  if (initialRooms == null || initialRooms.equals(""String_Node_Str"") || initialRooms.equals(""String_Node_Str""))   return new String[0];
  while (initialRooms.charAt(0) == '/')   initialRooms=initialRooms.substring(1);
  if (initialRooms.startsWith(CHANNEL_PREFIX))   return new String[]{initialRooms};
 else   return super.getRoomsForTarget();
}","protected String[] getRoomsForTarget(){
  String initialChannels=targetID.getName();
  int protocolSeparator=initialChannels.indexOf(""String_Node_Str"");
  if (protocolSeparator != -1)   initialChannels=initialChannels.substring(protocolSeparator + 3);
  int index=initialChannels.lastIndexOf(""String_Node_Str"");
  if (index != -1) {
    initialChannels=initialChannels.substring(index + 1);
    while (initialChannels.startsWith(""String_Node_Str""))     initialChannels=initialChannels.substring(1);
  }
 else   initialChannels=null;
  if (initialChannels == null || initialChannels.equals(""String_Node_Str"") || initialChannels.equals(""String_Node_Str""))   return new String[0];
  StringTokenizer toks=new StringTokenizer(initialChannels,ROOM_DELIMITER);
  String[] results=new String[toks.countTokens()];
  for (int i=0; i < results.length; i++) {
    results[i]=toks.nextToken();
    if (results[i].startsWith(""String_Node_Str"")) {
      results[i]=""String_Node_Str"" + results[i].substring(3);
    }
 else     if (!results[i].startsWith(""String_Node_Str""))     results[i]=""String_Node_Str"" + results[i];
  }
  return results;
}",0.2708830548926014
94920,"String getConnectID(){
  String clean=connectText.getText().replaceAll(""String_Node_Str"",""String_Node_Str"");
  connectText.setText(clean);
  return clean;
}","String getConnectID(){
  return connectText.getText();
}",0.5
94921,"protected IStatus getFinalStatus(Throwable exception){
  return (exception == null) ? new Status(IStatus.OK,Activator.getDefault().getBundle().getSymbolicName(),0,Messages.AbstractRetrieveFileTransfer_Status_Transfer_Completed_OK,null) : new Status(IStatus.ERROR,Activator.getDefault().getBundle().getSymbolicName(),FILETRANSFER_ERRORCODE,Messages.AbstractRetrieveFileTransfer_Status_Transfer_Exception,exception);
}","protected IStatus getFinalStatus(Throwable exception){
  return (exception == null) ? new Status(IStatus.OK,Activator.getDefault().getBundle().getSymbolicName(),0,Messages.AbstractRetrieveFileTransfer_Status_Transfer_Completed_OK,null) : new Status(IStatus.CANCEL,Activator.PLUGIN_ID,FILETRANSFER_ERRORCODE,Messages.AbstractRetrieveFileTransfer_Status_Transfer_Exception,exception);
}",0.925
94922,"protected IStatus getFinalStatus(Throwable exception){
  return (exception == null) ? new Status(IStatus.OK,Activator.getDefault().getBundle().getSymbolicName(),0,Messages.AbstractRetrieveFileTransfer_Status_Transfer_Completed_OK,null) : new Status(IStatus.CANCEL,Activator.PLUGIN_ID,FILETRANSFER_ERRORCODE,Messages.AbstractRetrieveFileTransfer_Status_Transfer_Exception,exception);
}","protected IStatus getFinalStatus(Throwable exception){
  if (exception == null)   return new Status(IStatus.OK,Activator.getDefault().getBundle().getSymbolicName(),0,Messages.AbstractRetrieveFileTransfer_Status_Transfer_Completed_OK,null);
 else   if (exception instanceof UserCancelledException)   return new Status(IStatus.CANCEL,Activator.PLUGIN_ID,FILETRANSFER_ERRORCODE,Messages.AbstractRetrieveFileTransfer_Exception_User_Cancelled,exception);
 else   return new Status(IStatus.ERROR,Activator.PLUGIN_ID,FILETRANSFER_ERRORCODE,Messages.AbstractRetrieveFileTransfer_Status_Transfer_Exception,exception);
}",0.7545271629778671
94923,"/** 
 * Returns whether the user has connected with the notification server successfully or not. If the connecting process failed,   {@link #reset()}should be called so that a connection attempt can be made to the server that the user has been redirected to.
 * @param username the user's MSN email address login
 * @param password the user's password
 * @return <tt>true</tt> if the login completed successfully,<tt>false</tt> otherwise
 * @throws IOException If an I/O error occurs while attempting to authenticate with the servers
 */
boolean login(String username,String password) throws IOException {
  response=connect(username);
  if (response.getCommand().equals(""String_Node_Str"")) {
    String ticket=request.getTicket(username,password,response.getParam(3));
    password=null;
    write(""String_Node_Str"",""String_Node_Str"" + ticket);
    ticket=null;
    String input=super.read();
    if (!input.startsWith(""String_Node_Str"")) {
      throw new ConnectException(""String_Node_Str"" + ""String_Node_Str"");
    }
    retrieveBuddyList();
    this.username=username;
    return true;
  }
 else   if (!response.getCommand().equals(""String_Node_Str"")) {
    throw new ConnectException(""String_Node_Str"");
  }
 else {
    alternateServer=response.getParam(2);
    return false;
  }
}","/** 
 * Returns whether the user has connected with the notification server successfully or not. If the connecting process failed,   {@link #reset()}should be called so that a connection attempt can be made to the server that the user has been redirected to.
 * @param username the user's MSN email address login
 * @param password the user's password
 * @return <tt>true</tt> if the login completed successfully,<tt>false</tt> otherwise
 * @throws IOException If an I/O error occurs while attempting to authenticate with the servers
 */
boolean login(String username,String password) throws IOException {
  response=connect(username);
  if (response.getCommand().equals(""String_Node_Str"")) {
    String ticket=request.getTicket(username,password,response.getParam(3));
    password=null;
    if (ticket == null) {
      throw new ConnectException(""String_Node_Str"");
    }
 else {
      write(""String_Node_Str"",""String_Node_Str"" + ticket);
      ticket=null;
      String input=super.read();
      if (!input.startsWith(""String_Node_Str"")) {
        throw new ConnectException(""String_Node_Str"" + ""String_Node_Str"");
      }
      retrieveBuddyList();
      this.username=username;
      return true;
    }
  }
 else   if (!response.getCommand().equals(""String_Node_Str"")) {
    throw new ConnectException(""String_Node_Str"");
  }
 else {
    alternateServer=response.getParam(2);
    return false;
  }
}",0.8547008547008547
94924,"/** 
 * Retrieves the client ticket that is associated with the given username, password, and challenge string.
 * @param username the user's email address
 * @param password the user's password
 * @param challengeString the challenge string received from the notification session
 * @return the client ticket
 * @throws IOException If an I/O error occurs while connecting to the Passport Nexus page or when getting the response codes from the connection
 */
public synchronized String getTicket(String username,String password,String challengeString) throws IOException {
  if (getLoginServerAddress()) {
    username=URLEncoder.encode(username);
    password=URLEncoder.encode(password);
    try {
      while (!cancelled) {
        request=(HttpURLConnection)new URL(daLoginURL).openConnection();
        request.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + username + ""String_Node_Str""+ password+ ','+ challengeString);
        if (request.getResponseCode() == HttpURLConnection.HTTP_OK) {
          password=null;
          String authenticationInfo=request.getHeaderField(""String_Node_Str"");
          int start=authenticationInfo.indexOf('\'');
          int end=authenticationInfo.lastIndexOf('\'');
          request.disconnect();
          return authenticationInfo.substring(start + 1,end);
        }
 else         if (request.getResponseCode() == HttpURLConnection.HTTP_MOVED_TEMP) {
          daLoginURL=request.getHeaderField(""String_Node_Str"");
          daLoginURL=daLoginURL.substring(1,daLoginURL.length() - 1);
        }
      }
    }
 catch (    Exception e) {
      if (request.getResponseCode() == HttpURLConnection.HTTP_UNAUTHORIZED) {
        return ""String_Node_Str"";
      }
      e.printStackTrace();
    }
 finally {
      request.disconnect();
    }
  }
  return ""String_Node_Str"";
}","/** 
 * Retrieves the client ticket that is associated with the given username, password, and challenge string.
 * @param username the user's email address
 * @param password the user's password
 * @param challengeString the challenge string received from the notification session
 * @return the client ticket if login info is correct, <code>null</code> otherwise
 * @throws IOException If an I/O error occurs while connecting to the Passport Nexus page or when getting the response codes from the connection
 */
public synchronized String getTicket(String username,String password,String challengeString) throws IOException {
  if (getLoginServerAddress()) {
    username=URLEncoder.encode(username);
    password=URLEncoder.encode(password);
    try {
      while (!cancelled) {
        request=(HttpURLConnection)new URL(daLoginURL).openConnection();
        request.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + username + ""String_Node_Str""+ password+ ','+ challengeString);
        if (request.getResponseCode() == HttpURLConnection.HTTP_OK) {
          password=null;
          String authenticationInfo=request.getHeaderField(""String_Node_Str"");
          int start=authenticationInfo.indexOf('\'');
          int end=authenticationInfo.lastIndexOf('\'');
          request.disconnect();
          return authenticationInfo.substring(start + 1,end);
        }
 else         if (request.getResponseCode() == HttpURLConnection.HTTP_MOVED_TEMP) {
          daLoginURL=request.getHeaderField(""String_Node_Str"");
          daLoginURL=daLoginURL.substring(1,daLoginURL.length() - 1);
        }
 else         if (request.getResponseCode() == HttpURLConnection.HTTP_UNAUTHORIZED) {
          request.disconnect();
          return null;
        }
      }
    }
 catch (    Exception e) {
      if (request.getResponseCode() == HttpURLConnection.HTTP_UNAUTHORIZED) {
        return ""String_Node_Str"";
      }
      e.printStackTrace();
    }
 finally {
      request.disconnect();
    }
  }
  return ""String_Node_Str"";
}",0.926031663638723
94925,"private void addListeners(){
  inputText.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
switch (e.keyCode) {
case SWT.CR:
case SWT.KEYPAD_CR:
        if (e.stateMask == 0) {
          String text=inputText.getText();
          inputText.setText(""String_Node_Str"");
          try {
            if (!text.equals(""String_Node_Str"")) {
              icms.sendChatMessage(remoteID,text);
            }
            append(localID,text);
          }
 catch (          ECFException ex) {
            setContentDescription(Messages.MessagesView_CouldNotSendMessage);
          }
          e.doit=false;
          sendTyping=false;
        }
      break;
  }
}
}
);
inputText.addModifyListener(new ModifyListener(){
public void modifyText(ModifyEvent e){
  if (!sendTyping && itms != null) {
    sendTyping=true;
    try {
      itms.sendTypingMessage(remoteID,true,null);
    }
 catch (    ECFException ex) {
      return;
    }
  }
}
}
);
}","private void addListeners(){
  inputText.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
switch (e.keyCode) {
case SWT.CR:
case SWT.KEYPAD_CR:
        if (e.stateMask == 0) {
          String text=inputText.getText();
          inputText.setText(""String_Node_Str"");
          try {
            if (!text.equals(""String_Node_Str"")) {
              icms.sendChatMessage(remoteID,text);
            }
            append(localID,text);
          }
 catch (          ECFException ex) {
            setContentDescription(Messages.MessagesView_CouldNotSendMessage);
          }
          e.doit=false;
          sendTyping=false;
        }
      break;
  }
}
}
);
inputText.addModifyListener(new ModifyListener(){
public void modifyText(ModifyEvent e){
  if (!sendTyping && itms != null) {
    sendTyping=true;
    try {
      itms.sendTypingMessage(remoteID,true,null);
    }
 catch (    ECFException ex) {
      return;
    }
  }
}
}
);
ScrollBar vscrollBar=chatText.getVerticalBar();
if (vscrollBar != null) {
vscrollBar.addSelectionListener(scrollSelectionListener);
chatText.addDisposeListener(new DisposeListener(){
  public void widgetDisposed(  DisposeEvent e){
    ScrollBar bar=chatText.getVerticalBar();
    if (bar != null)     bar.removeSelectionListener(scrollSelectionListener);
  }
}
);
}
}",0.8393013100436681
94926,"private void append(ID fromID,String body){
  if (!isFirstMessage) {
    chatText.append(Text.DELIMITER);
  }
  int length=chatText.getCharCount();
  String name=getUserName(fromID);
  if (fromID.equals(remoteID)) {
    if (showTimestamps) {
      chatText.append(FORMATTER.format(new Date(System.currentTimeMillis())) + ' ');
      chatText.setStyleRange(new StyleRange(length,13,redColor,null));
      length=chatText.getCharCount();
    }
    chatText.append(name + ""String_Node_Str"" + body);
    chatText.setStyleRange(new StyleRange(length,name.length() + 1,redColor,null,SWT.BOLD));
    setContentDescription(""String_Node_Str"");
    if (isFirstMessage) {
      final MessageNotificationPopup popup=new MessageNotificationPopup(getSite().getWorkbenchWindow(),tabFolder.getShell(),remoteID);
      popup.setContent(name,body);
      popup.open();
      new UIJob(tabFolder.getDisplay(),""String_Node_Str""){
        public IStatus runInUIThread(        IProgressMonitor monitor){
          Shell shell=popup.getShell();
          if (shell != null && !shell.isDisposed()) {
            popup.close();
          }
          return Status.OK_STATUS;
        }
      }
.schedule(5000);
    }
  }
 else {
    if (showTimestamps) {
      chatText.append(FORMATTER.format(new Date(System.currentTimeMillis())) + ' ');
      chatText.setStyleRange(new StyleRange(length,13,blueColor,null));
      length=chatText.getCharCount();
    }
    chatText.append(name + ""String_Node_Str"" + body);
    chatText.setStyleRange(new StyleRange(length,name.length() + 1,blueColor,null,SWT.BOLD));
  }
  isFirstMessage=false;
  chatText.invokeAction(ST.PAGE_DOWN);
}","private void append(ID fromID,String body){
  boolean scrollToEnd=shouldScrollToEnd(chatText);
  if (!isFirstMessage) {
    chatText.append(Text.DELIMITER);
  }
  int length=chatText.getCharCount();
  String name=getUserName(fromID);
  if (fromID.equals(remoteID)) {
    if (showTimestamps) {
      chatText.append(FORMATTER.format(new Date(System.currentTimeMillis())) + ' ');
      chatText.setStyleRange(new StyleRange(length,13,redColor,null));
      length=chatText.getCharCount();
    }
    chatText.append(name + ""String_Node_Str"" + body);
    chatText.setStyleRange(new StyleRange(length,name.length() + 1,redColor,null,SWT.BOLD));
    setContentDescription(""String_Node_Str"");
    if (isFirstMessage) {
      final MessageNotificationPopup popup=new MessageNotificationPopup(getSite().getWorkbenchWindow(),tabFolder.getShell(),remoteID);
      popup.setContent(name,body);
      popup.open();
      new UIJob(tabFolder.getDisplay(),""String_Node_Str""){
        public IStatus runInUIThread(        IProgressMonitor monitor){
          Shell shell=popup.getShell();
          if (shell != null && !shell.isDisposed()) {
            popup.close();
          }
          return Status.OK_STATUS;
        }
      }
.schedule(5000);
    }
  }
 else {
    if (showTimestamps) {
      chatText.append(FORMATTER.format(new Date(System.currentTimeMillis())) + ' ');
      chatText.setStyleRange(new StyleRange(length,13,blueColor,null));
      length=chatText.getCharCount();
    }
    chatText.append(name + ""String_Node_Str"" + body);
    chatText.setStyleRange(new StyleRange(length,name.length() + 1,blueColor,null,SWT.BOLD));
  }
  isFirstMessage=false;
  if (scrollToEnd)   chatText.invokeAction(ST.TEXT_END);
  boldTabTitle(!scrollToEnd);
}",0.9672662931288706
94927,"protected void appendText(StyledText st,ChatLine text){
  if (st == null || text == null) {
    return;
  }
  int startRange=st.getText().length();
  StringBuffer sb=new StringBuffer();
  boolean nickContained=text.getText().indexOf(localUserName) != -1;
  if (text.getOriginator() != null) {
    nickContained=!text.getOriginator().getName().equals(localUserName) && nickContained;
    sb.append(NLS.bind(Messages.ChatRoomManagerView_MESSAGE_DATE,getCurrentDate(DEFAULT_TIME_FORMAT)));
    StyleRange dateStyle=new StyleRange();
    dateStyle.start=startRange;
    dateStyle.length=sb.length();
    dateStyle.foreground=dateColor;
    dateStyle.fontStyle=SWT.NORMAL;
    st.append(sb.toString());
    st.setStyleRange(dateStyle);
    sb=new StringBuffer();
    sb.append(text.getOriginator().getName()).append(""String_Node_Str"");
    StyleRange sr=new StyleRange();
    sr.start=startRange + dateStyle.length;
    sr.length=sb.length();
    sr.fontStyle=SWT.BOLD;
    sr.foreground=nickContained ? highlightColor : otherColor;
    st.append(sb.toString());
    st.setStyleRange(sr);
  }
  int beforeMessageIndex=st.getText().length();
  st.append(text.getText());
  if (text.getOriginator() == null) {
    StyleRange sr=new StyleRange();
    sr.start=beforeMessageIndex;
    sr.length=text.getText().length();
    sr.foreground=systemColor;
    sr.fontStyle=SWT.BOLD;
    st.setStyleRange(sr);
  }
 else   if (nickContained) {
    StyleRange sr=new StyleRange();
    sr.start=beforeMessageIndex;
    sr.length=text.getText().length();
    sr.foreground=highlightColor;
    st.setStyleRange(sr);
  }
  if (!text.isNoCRLF()) {
    st.append(""String_Node_Str"");
  }
  String t=st.getText();
  if (t == null)   return;
  st.setSelection(t.length());
  IWorkbenchSiteProgressService pservice=(IWorkbenchSiteProgressService)this.getSite().getAdapter(IWorkbenchSiteProgressService.class);
  pservice.warnOfContentChange();
}","protected void appendText(StyledText st,ChatLine text){
  if (st == null || text == null) {
    return;
  }
  boolean scrollToBottom=shouldScrollToEnd(st);
  int startRange=st.getText().length();
  StringBuffer sb=new StringBuffer();
  boolean nickContained=text.getText().indexOf(localUserName) != -1;
  if (text.getOriginator() != null) {
    nickContained=!text.getOriginator().getName().equals(localUserName) && nickContained;
    sb.append(NLS.bind(Messages.ChatRoomManagerView_MESSAGE_DATE,getCurrentDate(DEFAULT_TIME_FORMAT)));
    StyleRange dateStyle=new StyleRange();
    dateStyle.start=startRange;
    dateStyle.length=sb.length();
    dateStyle.foreground=dateColor;
    dateStyle.fontStyle=SWT.NORMAL;
    st.append(sb.toString());
    st.setStyleRange(dateStyle);
    sb=new StringBuffer();
    sb.append(text.getOriginator().getName()).append(""String_Node_Str"");
    StyleRange sr=new StyleRange();
    sr.start=startRange + dateStyle.length;
    sr.length=sb.length();
    sr.fontStyle=SWT.BOLD;
    sr.foreground=nickContained ? highlightColor : otherColor;
    st.append(sb.toString());
    st.setStyleRange(sr);
  }
  int beforeMessageIndex=st.getText().length();
  st.append(text.getText());
  if (text.getOriginator() == null) {
    StyleRange sr=new StyleRange();
    sr.start=beforeMessageIndex;
    sr.length=text.getText().length();
    sr.foreground=systemColor;
    sr.fontStyle=SWT.BOLD;
    st.setStyleRange(sr);
  }
 else   if (nickContained) {
    StyleRange sr=new StyleRange();
    sr.start=beforeMessageIndex;
    sr.length=text.getText().length();
    sr.foreground=highlightColor;
    st.setStyleRange(sr);
  }
  if (!text.isNoCRLF()) {
    st.append(""String_Node_Str"");
  }
  String t=st.getText();
  if (t == null)   return;
  if (scrollToBottom)   st.setSelection(t.length());
  IWorkbenchSiteProgressService pservice=(IWorkbenchSiteProgressService)this.getSite().getAdapter(IWorkbenchSiteProgressService.class);
  pservice.warnOfContentChange();
}",0.982078853046595
94928,"public void widgetSelected(SelectionEvent e){
  itemSelected=(CTabItem)e.item;
  if (itemSelected == chatRoomTab.tabItem)   makeTabItemNormal();
}","public void widgetSelected(SelectionEvent e){
  if (shouldScrollToEnd(getOutputText())) {
    makeTabItemNormal();
  }
}",0.6165413533834586
94929,"ChatRoom(IChatRoomContainer container,ChatRoomTab tabItem){
  Assert.isNotNull(container);
  Assert.isNotNull(tabItem);
  this.chatRoomContainer=container;
  this.chatRoomMessageSender=container.getChatRoomMessageSender();
  this.chatRoomTab=tabItem;
  chatRoomParticipantViewer=this.chatRoomTab.getListViewer();
  options=new ArrayList();
  this.chatRoomTab.setKeyListener(this);
  rootTabFolder.setUnselectedCloseVisible(true);
  rootTabFolder.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      itemSelected=(CTabItem)e.item;
      if (itemSelected == chatRoomTab.tabItem)       makeTabItemNormal();
    }
  }
);
}","ChatRoom(IChatRoomContainer container,ChatRoomTab tabItem){
  Assert.isNotNull(container);
  Assert.isNotNull(tabItem);
  this.chatRoomContainer=container;
  this.chatRoomMessageSender=container.getChatRoomMessageSender();
  this.chatRoomTab=tabItem;
  chatRoomParticipantViewer=this.chatRoomTab.getListViewer();
  options=new ArrayList();
  this.chatRoomTab.setKeyListener(this);
  rootTabFolder.setUnselectedCloseVisible(true);
  rootTabFolder.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      itemSelected=(CTabItem)e.item;
      if (itemSelected == chatRoomTab.tabItem)       makeTabItemNormal();
    }
  }
);
  StyledText st=getOutputText();
  if (st != null) {
    ScrollBar vsb=st.getVerticalBar();
    if (vsb != null) {
      vsb.addSelectionListener(scrollSelectionListener);
      vsb.addDisposeListener(new DisposeListener(){
        public void widgetDisposed(        DisposeEvent e){
          StyledText st=getOutputText();
          if (st != null) {
            ScrollBar vsb=st.getVerticalBar();
            if (vsb != null)             vsb.removeSelectionListener(scrollSelectionListener);
          }
        }
      }
);
    }
  }
}",0.7328699106256207
94930,"public synchronized Object connect(ID remote,Object data,int timeout) throws ECFException {
  if (connection != null)   throw new ECFException(""String_Node_Str"");
  if (timeout > 0)   SmackConfiguration.setPacketReplyTimeout(timeout);
  Roster.setDefaultSubscriptionMode(Roster.SUBSCRIPTION_MANUAL);
  XMPPID jabberURI=getXMPPID(remote);
  String username=jabberURI.getUsername();
  serverName=jabberURI.getHostname();
  serverPort=jabberURI.getPort();
  try {
    if (google) {
      connection=new GoogleTalkConnection();
    }
 else     if (serverPort == -1) {
      if (secure) {
        connection=new SSLXMPPConnection(serverName);
      }
 else {
        connection=new XMPPConnection(serverName);
      }
    }
 else {
      if (secure) {
        connection=new SSLXMPPConnection(serverName,serverPort);
      }
 else {
        connection=new XMPPConnection(serverName,serverPort);
      }
    }
    connection.addPacketListener(packetListener,null);
    connection.addConnectionListener(connectionListener);
    connection.login(username,(String)data,CLIENT_TYPE);
    isConnected=true;
  }
 catch (  XMPPException e) {
    if (connection != null) {
      connection.close();
    }
    if (e.getMessage().equals(""String_Node_Str""))     throw new ContainerAuthenticationException(""String_Node_Str"",e);
    throw new ContainerConnectException(e.getLocalizedMessage(),e);
  }
  return null;
}","public synchronized Object connect(ID remote,Object data,int timeout) throws ECFException {
  if (connection != null)   throw new ECFException(""String_Node_Str"");
  if (timeout > 0)   SmackConfiguration.setPacketReplyTimeout(timeout);
  Roster.setDefaultSubscriptionMode(Roster.SUBSCRIPTION_MANUAL);
  XMPPID jabberURI=getXMPPID(remote);
  String username=jabberURI.getUsername();
  serverName=jabberURI.getHostname();
  serverPort=jabberURI.getPort();
  try {
    if (google) {
      if (secure) {
        connection=new SSLXMPPConnection(GOOGLE_TALK_HOST,XMPPS_DEFAULT_PORT,jabberURI.getHostname());
      }
 else {
        connection=new XMPPConnection(GOOGLE_TALK_HOST,XMPP_DEFAULT_PORT,jabberURI.getHostname());
      }
    }
 else     if (serverPort == -1) {
      if (secure) {
        connection=new SSLXMPPConnection(serverName);
      }
 else {
        connection=new XMPPConnection(serverName);
      }
    }
 else {
      if (secure) {
        connection=new SSLXMPPConnection(serverName,serverPort);
      }
 else {
        connection=new XMPPConnection(serverName,serverPort);
      }
    }
    connection.addPacketListener(packetListener,null);
    connection.addConnectionListener(connectionListener);
    connection.login(username,(String)data,CLIENT_TYPE);
    isConnected=true;
  }
 catch (  XMPPException e) {
    if (connection != null) {
      connection.close();
    }
    if (e.getMessage().equals(""String_Node_Str""))     throw new ContainerAuthenticationException(""String_Node_Str"",e);
    throw new ContainerConnectException(e.getLocalizedMessage(),e);
  }
  return null;
}",0.9262595929262596
94931,"protected ISynchAsynchConnection createConnection(ID remoteSpace,Object data) throws ConnectionCreateException {
  boolean google=isGoogle(remoteSpace);
  boolean secure=!google;
  return new ECFConnection(google,getConnectNamespace(),receiver,secure);
}","protected ISynchAsynchConnection createConnection(ID remoteSpace,Object data) throws ConnectionCreateException {
  boolean google=isGoogle(remoteSpace);
  return new ECFConnection(google,getConnectNamespace(),receiver,true);
}",0.6791666666666667
94932,"protected String getPasswordKeyFromUserName(String username){
  if (username == null || username.equals(""String_Node_Str""))   return null;
 else {
    return username.substring(0,username.indexOf(""String_Node_Str""));
  }
}","protected String getPasswordKeyFromUserName(String username){
  if (username == null || username.equals(""String_Node_Str""))   return null;
 else {
    int slashIndex=username.indexOf(""String_Node_Str"");
    if (slashIndex == -1)     return username;
 else     return username.substring(0,username.indexOf(""String_Node_Str""));
  }
}",0.6980108499095841
94933,"private void defineLayout(IPageLayout layout){
  String editorArea=layout.getEditorArea();
  layout.createFolder(""String_Node_Str"",IPageLayout.LEFT,0.26f,editorArea);
  IFolderLayout bottomLeft=layout.createFolder(""String_Node_Str"",IPageLayout.BOTTOM,0.50f,""String_Node_Str"");
  bottomLeft.addView(IPageLayout.ID_OUTLINE);
  IFolderLayout bottomRight=layout.createFolder(""String_Node_Str"",IPageLayout.BOTTOM,0.66f,editorArea);
  bottomRight.addView(IPageLayout.ID_PROBLEM_VIEW);
  bottomRight.addView(IPageLayout.ID_TASK_LIST);
}","private void defineLayout(IPageLayout layout){
  String editorArea=layout.getEditorArea();
  IFolderLayout topLeft=layout.createFolder(""String_Node_Str"",IPageLayout.LEFT,0.26f,editorArea);
  topLeft.addView(IPageLayout.ID_RES_NAV);
  IFolderLayout bottomLeft=layout.createFolder(""String_Node_Str"",IPageLayout.BOTTOM,0.50f,""String_Node_Str"");
  bottomLeft.addView(IPageLayout.ID_OUTLINE);
  IFolderLayout bottomRight=layout.createFolder(""String_Node_Str"",IPageLayout.BOTTOM,0.66f,editorArea);
  bottomRight.addView(IPageLayout.ID_PROBLEM_VIEW);
  bottomRight.addView(IPageLayout.ID_TASK_LIST);
}",0.942119323241318
94934,"protected IServiceInfo createIServiceInfoFromServiceInfo(final ServiceInfo serviceInfo){
  if (serviceInfo == null)   return null;
  ServiceID sID=createServiceID(serviceInfo.getType(),serviceInfo.getName());
  InetAddress addr=serviceInfo.getAddress();
  int port=serviceInfo.getPort();
  int priority=serviceInfo.getPriority();
  int weight=serviceInfo.getWeight();
  Properties props=new Properties();
  for (Enumeration e=serviceInfo.getPropertyNames(); e.hasMoreElements(); ) {
    String name=(String)e.nextElement();
    Object value=serviceInfo.getPropertyString(name);
    if (value == null)     value=serviceInfo.getPropertyBytes(name);
    if (value != null)     props.put(name,value);
  }
  final ServiceProperties svcProperties=new ServiceProperties(props);
  IServiceProperties newProps=new IServiceProperties(){
    public Enumeration getPropertyNames(){
      return svcProperties.getPropertyNames();
    }
    public String getPropertyString(    String name){
      return svcProperties.getPropertyString(name);
    }
    public byte[] getPropertyBytes(    String name){
      return svcProperties.getPropertyBytes(name);
    }
    public Object getProperty(    String name){
      return svcProperties.getPropertyBytes(name);
    }
    public Object setProperty(    String name,    Object value){
      return svcProperties.setProperty(name,value);
    }
    public Object setPropertyBytes(    String name,    byte[] value){
      return svcProperties.setPropertyBytes(name,value);
    }
    public Object setPropertyString(    String name,    String value){
      return svcProperties.setPropertyString(name,value);
    }
  }
;
  IServiceInfo newInfo=new JMDNSServiceInfo(addr,sID,port,priority,weight,newProps);
  return newInfo;
}","protected IServiceInfo createIServiceInfoFromServiceInfo(final ServiceInfo serviceInfo){
  if (serviceInfo == null)   return null;
  ServiceID sID=createServiceID(serviceInfo.getType(),serviceInfo.getName());
  InetAddress addr=serviceInfo.getAddress();
  int port=serviceInfo.getPort();
  int priority=serviceInfo.getPriority();
  int weight=serviceInfo.getWeight();
  Properties props=new Properties();
  for (Enumeration e=serviceInfo.getPropertyNames(); e.hasMoreElements(); ) {
    String name=(String)e.nextElement();
    Object value=serviceInfo.getPropertyString(name);
    if (value == null)     value=serviceInfo.getPropertyBytes(name);
    if (value != null)     props.put(name,value);
  }
  final ServiceProperties svcProperties=new ServiceProperties(props);
  IServiceProperties newProps=new IServiceProperties(){
    public Enumeration getPropertyNames(){
      return svcProperties.getPropertyNames();
    }
    public String getPropertyString(    String name){
      return svcProperties.getPropertyString(name);
    }
    public byte[] getPropertyBytes(    String name){
      return svcProperties.getPropertyBytes(name);
    }
    public Object getProperty(    String name){
      return svcProperties.getProperty(name);
    }
    public Object setProperty(    String name,    Object value){
      return svcProperties.setProperty(name,value);
    }
    public Object setPropertyBytes(    String name,    byte[] value){
      return svcProperties.setPropertyBytes(name,value);
    }
    public Object setPropertyString(    String name,    String value){
      return svcProperties.setPropertyString(name,value);
    }
  }
;
  IServiceInfo newInfo=new JMDNSServiceInfo(addr,sID,port,priority,weight,newProps);
  return newInfo;
}",0.9985702030311696
94935,"public Object getProperty(String name){
  return svcProperties.getPropertyBytes(name);
}","public Object getProperty(String name){
  return svcProperties.getProperty(name);
}",0.9707602339181286
94936,"protected Control createDialogArea(Composite parent){
  Composite container=(Composite)super.createDialogArea(parent);
  final GridLayout gridLayout=new GridLayout();
  gridLayout.horizontalSpacing=0;
  container.setLayout(gridLayout);
  final Composite composite=new Composite(container,SWT.NONE);
  final GridLayout gridLayout_2=new GridLayout();
  gridLayout_2.numColumns=2;
  composite.setLayout(gridLayout_2);
  final Label label_3=new Label(composite,SWT.NONE);
  label_3.setText(Messages.ChangePasswordDialog_NEW_PASSWORD_LABEL);
  p1=new Text(composite,SWT.BORDER);
  p1.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  p1.setEchoChar('*');
  final Label label_2=new Label(composite,SWT.NONE);
  label_2.setText(Messages.ChangePasswordDialog_REENTER_PASSWORD_LABEL);
  p2=new Text(composite,SWT.BORDER);
  final GridData gridData_1=new GridData(GridData.FILL_HORIZONTAL);
  gridData_1.widthHint=192;
  p2.setLayoutData(gridData_1);
  p2.setEchoChar('*');
  return container;
}","protected Control createDialogArea(Composite parent){
  Composite container=(Composite)super.createDialogArea(parent);
  final GridLayout gridLayout=new GridLayout();
  gridLayout.horizontalSpacing=0;
  container.setLayout(gridLayout);
  final Composite composite=new Composite(container,SWT.NONE);
  final GridLayout gridLayout_2=new GridLayout();
  gridLayout_2.numColumns=2;
  composite.setLayout(gridLayout_2);
  Label l=new Label(composite,SWT.NONE);
  l.setText(accountName);
  new Label(composite,SWT.NONE);
  final Label label_3=new Label(composite,SWT.NONE);
  label_3.setText(Messages.ChangePasswordDialog_NEW_PASSWORD_LABEL);
  password1=new Text(composite,SWT.BORDER);
  password1.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  password1.setEchoChar('*');
  final Label label_2=new Label(composite,SWT.NONE);
  label_2.setText(Messages.ChangePasswordDialog_REENTER_PASSWORD_LABEL);
  password2=new Text(composite,SWT.BORDER);
  final GridData gridData_1=new GridData(GridData.FILL_HORIZONTAL);
  gridData_1.widthHint=192;
  password2.setLayoutData(gridData_1);
  password2.setEchoChar('*');
  return container;
}",0.9335827876520112
94937,"public ChangePasswordDialog(Shell parentShell){
  super(parentShell);
}","public ChangePasswordDialog(Shell parentShell,String accountName){
  super(parentShell);
  this.accountName=accountName;
}",0.7357512953367875
94938,"public void buttonPressed(int button){
  result=button;
  if (button == Window.OK) {
    pass1=p1.getText();
    pass2=p2.getText();
    if (!pass1.equals(pass2)) {
      MessageDialog.openError(getShell(),Messages.ChangePasswordDialog_PASSWORDS_NO_MATCH_TITLE,Messages.ChangePasswordDialog_PASSWORDS_NO_MATCH_MESSAGE);
      p1.setText(""String_Node_Str"");
      p2.setText(""String_Node_Str"");
      p1.setFocus();
      return;
    }
  }
  close();
}","public void buttonPressed(int button){
  result=button;
  if (button == Window.OK) {
    pass1=password1.getText();
    pass2=password2.getText();
    if (!pass1.equals(pass2)) {
      MessageDialog.openError(getShell(),Messages.ChangePasswordDialog_PASSWORDS_NO_MATCH_TITLE,Messages.ChangePasswordDialog_PASSWORDS_NO_MATCH_MESSAGE);
      password1.setText(""String_Node_Str"");
      password2.setText(""String_Node_Str"");
      password1.setFocus();
      return;
    }
  }
  close();
}",0.9626467449306296
94939,"protected void createButtonsForButtonBar(Composite parent){
  createButton(parent,AUTHORIZE_AND_ADD,Messages.ReceiveAuthorizeRequestDialog_BUTTON_AUTHORIZE_AND_ADD,false);
  createButton(parent,AUTHORIZE_ID,Messages.ReceiveAuthorizeRequestDialog_BUTTON_AUTHORIZE_ONLY,false);
  createButton(parent,REFUSE_ID,Messages.ReceiveAuthorizeRequestDialog_BUTTON_REFUSE,true);
}","protected void createButtonsForButtonBar(Composite parent){
  createButton(parent,AUTHORIZE_ID,Messages.ReceiveAuthorizeRequestDialog_BUTTON_AUTHORIZE_ONLY,false);
  createButton(parent,REFUSE_ID,Messages.ReceiveAuthorizeRequestDialog_BUTTON_REFUSE,true);
}",0.8210862619808307
94940,"protected void refreshTreeViewer(Object val,boolean labels){
  if (treeViewer != null) {
    Control c=treeViewer.getControl();
    if (c != null && !c.isDisposed()) {
      if (val != null) {
        treeViewer.refresh(val,labels);
      }
 else {
        treeViewer.refresh(labels);
      }
      treeViewer.expandToLevel(DEFAULT_EXPAND_LEVEL);
    }
  }
}","protected void refreshTreeViewer(Object val,boolean labels){
  if (treeViewer != null) {
    Control c=treeViewer.getControl();
    if (c != null && !c.isDisposed()) {
      if (val != null) {
        treeViewer.refresh(val,labels);
        ViewerFilter[] filters=treeViewer.getFilters();
        if (filters.length != 0) {
          treeViewer.refresh(labels);
        }
      }
 else {
        treeViewer.refresh(labels);
      }
      treeViewer.expandToLevel(DEFAULT_EXPAND_LEVEL);
    }
  }
}",0.8374269005847953
94941,"protected void removeRosterAccount(MultiRosterAccount account){
  account.getRosterManager().removeRosterSubscriptionListener(subscriptionListener);
  account.getRosterManager().removePresenceListener(presenceListener);
  if (treeViewer != null)   treeViewer.remove(account.getRoster());
  rosterAccounts.remove(account);
  disconnectAllAccountsAction.setEnabled(rosterAccounts.size() > 0);
  account.dispose();
  refreshTreeViewer(null,true);
}","protected void removeRosterAccount(MultiRosterAccount account){
  account.getRosterManager().removeRosterSubscriptionListener(subscriptionListener);
  account.getRosterManager().removePresenceListener(presenceListener);
  if (treeViewer != null)   treeViewer.remove(account.getRoster());
  rosterAccounts.remove(account);
  setLocalPullDownEnabled(rosterAccounts.size() > 0);
  account.dispose();
  refreshTreeViewer(null,true);
}",0.9462857142857144
94942,"private void makeActions(){
  imAction=new Action(){
    public void run(){
      message((IStructuredSelection)treeViewer.getSelection());
    }
  }
;
  imAction.setImageDescriptor(SharedImages.getImageDescriptor(SharedImages.IMG_MESSAGE));
  removeAction=new Action(){
    public void run(){
      IStructuredSelection iss=(IStructuredSelection)treeViewer.getSelection();
      remove((IRosterEntry)iss.getFirstElement());
    }
  }
;
  removeAction.setText(Messages.MultiRosterView_Remove);
  removeAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
  setAvailableAction=new Action(Messages.MultiRosterView_SetAvailable,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.AVAILABLE);
      }
    }
  }
;
  setAwayAction=new Action(Messages.MultiRosterView_SetAway,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.AWAY);
      }
    }
  }
;
  setDNDAction=new Action(Messages.MultiRosterView_SetDoNotDisturb,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.DND);
      }
    }
  }
;
  setInvisibleAction=new Action(Messages.MultiRosterView_SetInvisible,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.INVISIBLE);
      }
    }
  }
;
  setOfflineAction=new Action(Messages.MultiRosterView_SetOffline,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        for (int i=0; i < rosterAccounts.size(); i++) {
          MultiRosterAccount account=(MultiRosterAccount)rosterAccounts.get(i);
          account.getRosterManager().removeRosterSubscriptionListener(subscriptionListener);
          treeViewer.remove(account);
        }
        rosterAccounts.clear();
        refreshTreeViewer(null,false);
        setStatusMenu.setVisible(false);
        getViewSite().getActionBars().getMenuManager().update(false);
      }
    }
  }
;
  setOfflineAction.setChecked(true);
  openChatRoomAction=new Action(){
    public void run(){
      selectAndJoinChatRoomForAccounts((MultiRosterAccount[])rosterAccounts.toArray(new MultiRosterAccount[]{}));
    }
  }
;
  openChatRoomAction.setText(Messages.MultiRosterView_ENTER_CHATROOM_ACTION_TEXT);
  openChatRoomAction.setToolTipText(Messages.MultiRosterView_ENTER_CHATROOM_TOOLTIP_TEXT);
  openChatRoomAction.setImageDescriptor(SharedImages.getImageDescriptor(SharedImages.IMG_ADD_CHAT));
  openChatRoomAction.setEnabled(true);
  openAccountChatRoomAction=new Action(){
    public void run(){
      IStructuredSelection iss=(IStructuredSelection)treeViewer.getSelection();
      IRoster roster=(IRoster)iss.getFirstElement();
      MultiRosterAccount account=findAccountForUser(roster.getUser().getID());
      if (account != null)       selectAndJoinChatRoomForAccounts(new MultiRosterAccount[]{account});
    }
  }
;
  openAccountChatRoomAction.setText(Messages.MultiRosterView_SHOW_CHAT_ROOMS_FOR_ACCOUNT_ACTION_TEXT);
  openAccountChatRoomAction.setEnabled(true);
  openAccountChatRoomAction.setImageDescriptor(SharedImages.getImageDescriptor(SharedImages.IMG_ADD_CHAT));
  disconnectAllAccountsAction=new Action(){
    public void run(){
      if (MessageDialog.openQuestion(getViewSite().getShell(),Messages.MultiRosterView_DISCONNECT_QUESTION_TITLE,Messages.MultiRosterView_DISCONNECT_ALL_ACCOUNTS_QUESTION_MESSAGE)) {
        disconnectAccounts((MultiRosterAccount[])rosterAccounts.toArray(new MultiRosterAccount[]{}));
      }
    }
  }
;
  disconnectAllAccountsAction.setText(Messages.MultiRosterView_DISCONNECT_ALL_ACCOUNTS_ACTION_TEXT);
  disconnectAllAccountsAction.setEnabled(true);
  disconnectAllAccountsAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
  disconnectAccountAction=new Action(){
    public void run(){
      IStructuredSelection iss=(IStructuredSelection)treeViewer.getSelection();
      IRoster roster=(IRoster)iss.getFirstElement();
      MultiRosterAccount account=findAccountForUser(roster.getUser().getID());
      ID connectedID=account.getContainer().getConnectedID();
      if (account != null && connectedID != null && MessageDialog.openQuestion(getViewSite().getShell(),Messages.MultiRosterView_DISCONNECT_QUESTION_TITLE,NLS.bind(Messages.MultiRosterView_DISCONNECT_ACCOUNT_QUESTION_MESSAGE,connectedID.getName()))) {
        disconnectAccounts(new MultiRosterAccount[]{account});
      }
    }
  }
;
  disconnectAccountAction.setText(Messages.MultiRosterView_DISCONNECT_ACCOUNT_ACTION_TEXT);
  disconnectAccountAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
}","private void makeActions(){
  imAction=new Action(){
    public void run(){
      message((IStructuredSelection)treeViewer.getSelection());
    }
  }
;
  imAction.setImageDescriptor(SharedImages.getImageDescriptor(SharedImages.IMG_MESSAGE));
  removeAction=new Action(){
    public void run(){
      IStructuredSelection iss=(IStructuredSelection)treeViewer.getSelection();
      remove((IRosterEntry)iss.getFirstElement());
    }
  }
;
  removeAction.setText(Messages.MultiRosterView_Remove);
  removeAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
  setAvailableAction=new Action(Messages.MultiRosterView_SetAvailable,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.AVAILABLE);
      }
    }
  }
;
  setAwayAction=new Action(Messages.MultiRosterView_SetAway,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.AWAY);
      }
    }
  }
;
  setDNDAction=new Action(Messages.MultiRosterView_SetDoNotDisturb,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.DND);
      }
    }
  }
;
  setInvisibleAction=new Action(Messages.MultiRosterView_SetInvisible,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.INVISIBLE);
      }
    }
  }
;
  setOfflineAction=new Action(Messages.MultiRosterView_SetOffline,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        for (int i=0; i < rosterAccounts.size(); i++) {
          MultiRosterAccount account=(MultiRosterAccount)rosterAccounts.get(i);
          account.getRosterManager().removeRosterSubscriptionListener(subscriptionListener);
          treeViewer.remove(account);
        }
        rosterAccounts.clear();
        refreshTreeViewer(null,false);
        setStatusMenu.setVisible(false);
        getViewSite().getActionBars().getMenuManager().update(false);
      }
    }
  }
;
  setOfflineAction.setChecked(true);
  showOfflineAction=new Action(Messages.MultiRosterView_ShowOffline,Action.AS_CHECK_BOX){
    public void run(){
      if (isChecked()) {
        treeViewer.removeFilter(hideOfflineFilter);
      }
 else {
        treeViewer.addFilter(hideOfflineFilter);
      }
    }
  }
;
  showEmptyGroupsAction=new Action(Messages.MultiRosterView_ShowEmptyGroups,Action.AS_CHECK_BOX){
    public void run(){
      if (isChecked()) {
        treeViewer.removeFilter(hideEmptyGroupsFilter);
      }
 else {
        treeViewer.addFilter(hideEmptyGroupsFilter);
      }
    }
  }
;
  addContactAction=new Action(Messages.MultiRosterView_AddContact,SharedImages.getImageDescriptor(SharedImages.IMG_ADD_BUDDY)){
    public void run(){
      AddContactDialog dialog=new AddContactDialog(treeViewer.getControl().getShell());
      dialog.setInput(rosterAccounts);
      if (Window.OK == dialog.open()) {
        IPresenceContainerAdapter ipca=dialog.getSelection();
        IRosterSubscriptionSender sender=ipca.getRosterManager().getRosterSubscriptionSender();
        try {
          sender.sendRosterAdd(dialog.getAccountID(),dialog.getAlias(),null);
        }
 catch (        ECFException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  openChatRoomAction=new Action(){
    public void run(){
      selectAndJoinChatRoomForAccounts((MultiRosterAccount[])rosterAccounts.toArray(new MultiRosterAccount[]{}));
    }
  }
;
  openChatRoomAction.setText(Messages.MultiRosterView_ENTER_CHATROOM_ACTION_TEXT);
  openChatRoomAction.setToolTipText(Messages.MultiRosterView_ENTER_CHATROOM_TOOLTIP_TEXT);
  openChatRoomAction.setImageDescriptor(SharedImages.getImageDescriptor(SharedImages.IMG_ADD_CHAT));
  openChatRoomAction.setEnabled(true);
  openAccountChatRoomAction=new Action(){
    public void run(){
      IStructuredSelection iss=(IStructuredSelection)treeViewer.getSelection();
      IRoster roster=(IRoster)iss.getFirstElement();
      MultiRosterAccount account=findAccountForUser(roster.getUser().getID());
      if (account != null)       selectAndJoinChatRoomForAccounts(new MultiRosterAccount[]{account});
    }
  }
;
  openAccountChatRoomAction.setText(Messages.MultiRosterView_SHOW_CHAT_ROOMS_FOR_ACCOUNT_ACTION_TEXT);
  openAccountChatRoomAction.setEnabled(true);
  openAccountChatRoomAction.setImageDescriptor(SharedImages.getImageDescriptor(SharedImages.IMG_ADD_CHAT));
  disconnectAllAccountsAction=new Action(){
    public void run(){
      if (MessageDialog.openQuestion(getViewSite().getShell(),Messages.MultiRosterView_DISCONNECT_QUESTION_TITLE,Messages.MultiRosterView_DISCONNECT_ALL_ACCOUNTS_QUESTION_MESSAGE)) {
        disconnectAccounts((MultiRosterAccount[])rosterAccounts.toArray(new MultiRosterAccount[]{}));
      }
    }
  }
;
  disconnectAllAccountsAction.setText(Messages.MultiRosterView_DISCONNECT_ALL_ACCOUNTS_ACTION_TEXT);
  disconnectAllAccountsAction.setEnabled(true);
  disconnectAllAccountsAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
  disconnectAccountAction=new Action(){
    public void run(){
      IStructuredSelection iss=(IStructuredSelection)treeViewer.getSelection();
      IRoster roster=(IRoster)iss.getFirstElement();
      MultiRosterAccount account=findAccountForUser(roster.getUser().getID());
      ID connectedID=account.getContainer().getConnectedID();
      if (account != null && connectedID != null && MessageDialog.openQuestion(getViewSite().getShell(),Messages.MultiRosterView_DISCONNECT_QUESTION_TITLE,NLS.bind(Messages.MultiRosterView_DISCONNECT_ACCOUNT_QUESTION_MESSAGE,connectedID.getName()))) {
        disconnectAccounts(new MultiRosterAccount[]{account});
      }
    }
  }
;
  disconnectAccountAction.setText(Messages.MultiRosterView_DISCONNECT_ACCOUNT_ACTION_TEXT);
  disconnectAccountAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
}",0.8861527152439584
94943,"private void fillLocalPullDown(IMenuManager manager){
  setStatusMenu=new MenuManager(Messages.MultiRosterView_SetStatusAs,null);
  setStatusMenu.add(setAvailableAction);
  setStatusMenu.add(setAwayAction);
  setStatusMenu.add(setDNDAction);
  setStatusMenu.add(setInvisibleAction);
  setStatusMenu.add(setOfflineAction);
  setStatusMenu.setVisible(false);
  manager.add(setStatusMenu);
  manager.add(new Separator());
  manager.add(new Action(Messages.MultiRosterView_ShowOffline,Action.AS_CHECK_BOX){
    public void run(){
      if (isChecked()) {
        treeViewer.removeFilter(hideOfflineFilter);
      }
 else {
        treeViewer.addFilter(hideOfflineFilter);
      }
    }
  }
);
  IAction showEmptyGroupsAction=new Action(Messages.MultiRosterView_ShowEmptyGroups,Action.AS_CHECK_BOX){
    public void run(){
      if (isChecked()) {
        treeViewer.removeFilter(hideEmptyGroupsFilter);
      }
 else {
        treeViewer.addFilter(hideEmptyGroupsFilter);
      }
    }
  }
;
  manager.add(showEmptyGroupsAction);
  manager.add(new Separator());
  manager.add(new Action(Messages.MultiRosterView_AddContact,SharedImages.getImageDescriptor(SharedImages.IMG_ADD_BUDDY)){
    public void run(){
      AddContactDialog dialog=new AddContactDialog(treeViewer.getControl().getShell());
      dialog.setInput(rosterAccounts);
      if (Window.OK == dialog.open()) {
        IPresenceContainerAdapter ipca=dialog.getSelection();
        IRosterSubscriptionSender sender=ipca.getRosterManager().getRosterSubscriptionSender();
        try {
          sender.sendRosterAdd(dialog.getAccountID(),dialog.getAlias(),null);
        }
 catch (        ECFException e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  manager.add(new Separator());
  manager.add(openChatRoomAction);
  manager.add(new Separator());
  manager.add(disconnectAllAccountsAction);
}","private void fillLocalPullDown(IMenuManager manager){
  setStatusMenu=new MenuManager(Messages.MultiRosterView_SetStatusAs,null);
  setStatusMenu.add(setAvailableAction);
  setStatusMenu.add(setAwayAction);
  setStatusMenu.add(setDNDAction);
  setStatusMenu.add(setInvisibleAction);
  setStatusMenu.add(setOfflineAction);
  manager.add(setStatusMenu);
  manager.add(new Separator());
  manager.add(showOfflineAction);
  manager.add(showEmptyGroupsAction);
  manager.add(new Separator());
  manager.add(addContactAction);
  manager.add(new Separator());
  manager.add(openChatRoomAction);
  manager.add(new Separator());
  manager.add(disconnectAllAccountsAction);
  setLocalPullDownEnabled(false);
}",0.2638132295719844
94944,"protected boolean addRosterAccount(MultiRosterAccount account){
  boolean result=account != null && rosterAccounts.add(account);
  if (result)   disconnectAllAccountsAction.setEnabled(true);
  return result;
}","protected boolean addRosterAccount(MultiRosterAccount account){
  boolean result=account != null && rosterAccounts.add(account);
  if (result)   setLocalPullDownEnabled(true);
  return result;
}",0.8982630272952854
94945,"ChatRoomTab(boolean withParticipantsList,CTabFolder parent,String name,KeyListener keyListener){
  withParticipants=withParticipantsList;
  tabItem=new CTabItem(parent,SWT.NULL);
  tabItem.setText(name);
  if (withParticipants) {
    fullChat=new SashForm(parent,SWT.HORIZONTAL);
    fullChat.setLayout(new FillLayout());
    Composite memberComp=new Composite(fullChat,SWT.NONE);
    memberComp.setLayout(new FillLayout());
    listViewer=new ListViewer(memberComp,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
    listViewer.setSorter(new ViewerSorter());
    Composite rightComp=new Composite(fullChat,SWT.NONE);
    rightComp.setLayout(new FillLayout());
    rightSash=new SashForm(rightComp,SWT.VERTICAL);
  }
 else   rightSash=new SashForm(parent,SWT.VERTICAL);
  Composite readInlayComp=new Composite(rightSash,SWT.FILL);
  readInlayComp.setLayout(new GridLayout());
  readInlayComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  SourceViewer result=new SourceViewer(readInlayComp,null,null,true,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL| SWT.MULTI| SWT.H_SCROLL| SWT.READ_ONLY);
  result.configure(new TextSourceViewerConfiguration(EditorsUI.getPreferenceStore()));
  result.setDocument(new Document());
  outputText=result.getTextWidget();
  outputText.setEditable(false);
  outputText.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite writeComp=new Composite(rightSash,SWT.NONE);
  writeComp.setLayout(new FillLayout());
  inputText=new Text(writeComp,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  if (keyListener != null)   inputText.addKeyListener(keyListener);
  rightSash.setWeights(new int[]{RATIO_READ_PANE,RATIO_WRITE_PANE});
  if (withParticipants) {
    fullChat.setWeights(new int[]{RATIO_PRESENCE_PANE,RATIO_READ_WRITE_PANE});
    tabItem.setControl(fullChat);
  }
 else   tabItem.setControl(rightSash);
  parent.setSelection(tabItem);
  makeActions();
  hookContextMenu();
}","ChatRoomTab(boolean withParticipantsList,CTabFolder parent,String name,KeyListener keyListener){
  withParticipants=withParticipantsList;
  tabItem=new CTabItem(parent,SWT.NULL);
  tabItem.setText(name);
  if (withParticipants) {
    fullChat=new SashForm(parent,SWT.HORIZONTAL);
    fullChat.setLayout(new FillLayout());
    Composite memberComp=new Composite(fullChat,SWT.NONE);
    memberComp.setLayout(new FillLayout());
    listViewer=new ListViewer(memberComp,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
    listViewer.setSorter(new ViewerSorter());
    Composite rightComp=new Composite(fullChat,SWT.NONE);
    rightComp.setLayout(new FillLayout());
    rightSash=new SashForm(rightComp,SWT.VERTICAL);
  }
 else   rightSash=new SashForm(parent,SWT.VERTICAL);
  SourceViewer result=new SourceViewer(rightSash,null,null,true,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL| SWT.MULTI| SWT.H_SCROLL| SWT.READ_ONLY);
  result.configure(new TextSourceViewerConfiguration(EditorsUI.getPreferenceStore()));
  result.setDocument(new Document());
  outputText=result.getTextWidget();
  outputText.setEditable(false);
  outputText.setLayoutData(new GridData(GridData.FILL_BOTH));
  inputText=new Text(rightSash,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  if (keyListener != null)   inputText.addKeyListener(keyListener);
  rightSash.setWeights(new int[]{RATIO_READ_PANE,RATIO_WRITE_PANE});
  if (withParticipants) {
    fullChat.setWeights(new int[]{RATIO_PRESENCE_PANE,RATIO_READ_WRITE_PANE});
    tabItem.setControl(fullChat);
  }
 else   tabItem.setControl(rightSash);
  parent.setSelection(tabItem);
  makeActions();
  hookContextMenu();
}",0.8981664315937941
94946,"ChatComposite(LineChatClientView view,Composite parent,TableViewer table,String initText,ChatWindow chatWindow){
  super(parent,SWT.NONE);
  this.view=view;
  this.chatWindow=chatWindow;
  meColor=colorFromRGBString(ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_ME_TEXT_COLOR));
  otherColor=colorFromRGBString(ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_OTHER_TEXT_COLOR));
  systemColor=colorFromRGBString(ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_SYSTEM_TEXT_COLOR));
  ClientPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new ColorPropertyChangeListener());
  this.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      if (meColor != null) {
        meColor.dispose();
      }
      if (otherColor != null) {
        otherColor.dispose();
      }
      if (systemColor != null) {
        systemColor.dispose();
      }
    }
  }
);
  tableView=table;
  setLayout(new GridLayout(1,true));
  SourceViewer result=new SourceViewer(this,null,null,true,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL| SWT.MULTI| SWT.H_SCROLL| SWT.READ_ONLY);
  result.configure(new TextSourceViewerConfiguration(EditorsUI.getPreferenceStore()));
  result.setDocument(new Document());
  textoutput=result.getTextWidget();
  textoutput.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  String fontName=ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_CHAT_FONT);
  if (!(fontName == null) && !(fontName.equals(""String_Node_Str""))) {
    FontRegistry fr=ClientPlugin.getDefault().getFontRegistry();
    FontData[] newFont={new FontData(fontName)};
    fr.put(CHAT_OUTPUT_FONT,newFont);
    textoutput.setFont(fr.get(CHAT_OUTPUT_FONT));
  }
  ClientPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new FontPropertyChangeListener());
  textoutput.append(initText);
  textinput=new Text(this,SWT.SINGLE | SWT.BORDER);
  textinput.setText(TEXT_INPUT_INIT);
  textinput.setLayoutData(new GridData(SWT.FILL,SWT.BEGINNING,true,false));
  textinput.selectAll();
  textinput.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent evt){
      handleKeyPressed(evt);
    }
    public void keyReleased(    KeyEvent evt){
      handleKeyReleased(evt);
    }
  }
);
  textinput.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
      String t=textinput.getText();
      if (t.equals(TEXT_INPUT_INIT)) {
        textinput.selectAll();
      }
    }
    public void focusLost(    FocusEvent e){
    }
  }
);
  textinput.addMouseListener(new MouseListener(){
    public void mouseDoubleClick(    MouseEvent e){
    }
    public void mouseDown(    MouseEvent e){
    }
    public void mouseUp(    MouseEvent e){
      String t=textinput.getText();
      if (t.equals(TEXT_INPUT_INIT)) {
        textinput.selectAll();
      }
    }
  }
);
  textinput.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (typing && textinput.getText().trim().length() == 0)       typing=false;
 else       if (!typing) {
        typing=true;
        ChatComposite.this.view.lch.sendStartedTyping();
      }
    }
  }
);
  makeActions();
  hookContextMenu();
  contributeToActionBars();
  initializeDropTargets();
}","ChatComposite(LineChatClientView view,Composite parent,TableViewer table,String initText,ChatWindow chatWindow){
  super(parent,SWT.NONE);
  this.view=view;
  this.chatWindow=chatWindow;
  setLayout(new FillLayout());
  meColor=colorFromRGBString(ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_ME_TEXT_COLOR));
  otherColor=colorFromRGBString(ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_OTHER_TEXT_COLOR));
  systemColor=colorFromRGBString(ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_SYSTEM_TEXT_COLOR));
  ClientPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new ColorPropertyChangeListener());
  this.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      if (meColor != null) {
        meColor.dispose();
      }
      if (otherColor != null) {
        otherColor.dispose();
      }
      if (systemColor != null) {
        systemColor.dispose();
      }
    }
  }
);
  SashForm sf=new SashForm(this,SWT.NORMAL);
  sf.setLayout(new FillLayout());
  sf.setOrientation(SWT.VERTICAL);
  tableView=table;
  SourceViewer result=new SourceViewer(sf,null,null,true,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL| SWT.MULTI| SWT.H_SCROLL| SWT.READ_ONLY);
  result.configure(new TextSourceViewerConfiguration(EditorsUI.getPreferenceStore()));
  result.setDocument(new Document());
  textoutput=result.getTextWidget();
  textoutput.setLayoutData(new GridData(SWT.FILL));
  String fontName=ClientPlugin.getDefault().getPluginPreferences().getString(ClientPlugin.PREF_CHAT_FONT);
  if (!(fontName == null) && !(fontName.equals(""String_Node_Str""))) {
    FontRegistry fr=ClientPlugin.getDefault().getFontRegistry();
    FontData[] newFont={new FontData(fontName)};
    fr.put(CHAT_OUTPUT_FONT,newFont);
    textoutput.setFont(fr.get(CHAT_OUTPUT_FONT));
  }
  ClientPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new FontPropertyChangeListener());
  textoutput.append(initText);
  textinput=new Text(sf,SWT.SINGLE | SWT.BORDER);
  textinput.setText(TEXT_INPUT_INIT);
  textinput.setLayoutData(new GridData(SWT.FILL));
  textinput.selectAll();
  textinput.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent evt){
      handleKeyPressed(evt);
    }
    public void keyReleased(    KeyEvent evt){
      handleKeyReleased(evt);
    }
  }
);
  textinput.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
      String t=textinput.getText();
      if (t.equals(TEXT_INPUT_INIT)) {
        textinput.selectAll();
      }
    }
    public void focusLost(    FocusEvent e){
    }
  }
);
  textinput.addMouseListener(new MouseListener(){
    public void mouseDoubleClick(    MouseEvent e){
    }
    public void mouseDown(    MouseEvent e){
    }
    public void mouseUp(    MouseEvent e){
      String t=textinput.getText();
      if (t.equals(TEXT_INPUT_INIT)) {
        textinput.selectAll();
      }
    }
  }
);
  textinput.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (typing && textinput.getText().trim().length() == 0)       typing=false;
 else       if (!typing) {
        typing=true;
        ChatComposite.this.view.lch.sendStartedTyping();
      }
    }
  }
);
  sf.setWeights(new int[]{90,10});
  makeActions();
  hookContextMenu();
  contributeToActionBars();
  initializeDropTargets();
}",0.9600468315527588
94947,"protected void makeActions(){
  outputSelectAll=new Action(){
    public void run(){
      outputSelectAll();
    }
  }
;
  outputSelectAll.setText(MessageLoader.getString(""String_Node_Str""));
  outputSelectAll.setToolTipText(MessageLoader.getString(""String_Node_Str""));
  outputSelectAll.setAccelerator(SWT.CTRL | 'A');
  outputCopy=new Action(){
    public void run(){
      outputCopy();
    }
  }
;
  outputCopy.setText(MessageLoader.getString(""String_Node_Str""));
  outputCopy.setToolTipText(MessageLoader.getString(""String_Node_Str""));
  outputCopy.setAccelerator(SWT.CTRL | 'C');
  outputCopy.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_COPY));
  outputClear=new Action(){
    public void run(){
      outputClear();
    }
  }
;
  outputClear.setText(MessageLoader.getString(""String_Node_Str""));
  outputClear.setToolTipText(MessageLoader.getString(""String_Node_Str""));
  outputPaste=new Action(){
    public void run(){
      outputPaste();
    }
  }
;
  outputPaste.setText(MessageLoader.getString(""String_Node_Str""));
  outputPaste.setToolTipText(MessageLoader.getString(""String_Node_Str""));
  outputPaste.setAccelerator(SWT.CTRL | 'V');
  outputPaste.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_PASTE));
  sendFileToGroup=new Action(){
    public void run(){
      sendFileToGroup(false);
    }
  }
;
  sendFileToGroup.setText(MessageLoader.getString(""String_Node_Str""));
  sendFileToGroup.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJ_FILE));
  sendFileToGroup.setEnabled(false);
  coBrowseURL=new Action(){
    public void run(){
      sendCoBrowseToUser(null);
    }
  }
;
  coBrowseURL.setText(MessageLoader.getString(""String_Node_Str""));
  startProgram=new Action(){
    public void run(){
      startProgram(null);
    }
  }
;
  startProgram.setText(MessageLoader.getString(""String_Node_Str""));
  appShare=new Action(){
    public void run(){
      sendAppShare(null);
    }
  }
;
  appShare.setText(MessageLoader.getString(""String_Node_Str""));
  appShare.setEnabled(Platform.getOS().equalsIgnoreCase(Platform.OS_WIN32));
  sendMessage=new Action(){
    public void run(){
      sendMessageToGroup();
    }
  }
;
  sendMessage.setText(MessageLoader.getString(""String_Node_Str""));
  sendComponent=new Action(){
    public void run(){
      sendRepObjectToGroup(null);
    }
  }
;
  sendComponent.setText(MessageLoader.getString(""String_Node_Str""));
  sendComponentToServer=new Action(){
    public void run(){
      sendRepObjectToServer();
    }
  }
;
  sendComponentToServer.setText(MessageLoader.getString(""String_Node_Str""));
  sendComponentToServer.setEnabled(false);
  closeGroup=new Action(){
    public void run(){
      closeProjectGroup(null);
    }
  }
;
  closeGroup.setText(MessageLoader.getString(""String_Node_Str""));
  closeGroup.setEnabled(true);
  sendShowViewRequest=new Action(){
    public void run(){
      sendShowViewRequest(null);
    }
  }
;
  sendShowViewRequest.setText(MessageLoader.getString(""String_Node_Str""));
  sendShowViewRequest.setEnabled(true);
  if (chatWindow != null) {
    showChatWindow=new Action(){
      public void run(){
        chatWindow.open();
        if (!chatWindow.hasFocus())         chatWindow.getShell().forceActive();
      }
    }
;
    showChatWindow.setText(""String_Node_Str"");
  }
}","protected void makeActions(){
  outputSelectAll=new Action(){
    public void run(){
      outputSelectAll();
    }
  }
;
  outputSelectAll.setText(MessageLoader.getString(""String_Node_Str""));
  outputSelectAll.setToolTipText(MessageLoader.getString(""String_Node_Str""));
  outputSelectAll.setAccelerator(SWT.CTRL | 'A');
  outputCopy=new Action(){
    public void run(){
      outputCopy();
    }
  }
;
  outputCopy.setText(MessageLoader.getString(""String_Node_Str""));
  outputCopy.setToolTipText(MessageLoader.getString(""String_Node_Str""));
  outputCopy.setAccelerator(SWT.CTRL | 'C');
  outputCopy.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_COPY));
  outputClear=new Action(){
    public void run(){
      outputClear();
    }
  }
;
  outputClear.setText(MessageLoader.getString(""String_Node_Str""));
  outputClear.setToolTipText(MessageLoader.getString(""String_Node_Str""));
  outputPaste=new Action(){
    public void run(){
      outputPaste();
    }
  }
;
  outputPaste.setText(MessageLoader.getString(""String_Node_Str""));
  outputPaste.setToolTipText(MessageLoader.getString(""String_Node_Str""));
  outputPaste.setAccelerator(SWT.CTRL | 'V');
  outputPaste.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_PASTE));
  sendFileToGroup=new Action(){
    public void run(){
      sendFileToGroup(false);
    }
  }
;
  sendFileToGroup.setText(MessageLoader.getString(""String_Node_Str""));
  sendFileToGroup.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJ_FILE));
  sendFileToGroup.setEnabled(false);
  coBrowseURL=new Action(){
    public void run(){
      sendCoBrowseToUser(null);
    }
  }
;
  coBrowseURL.setText(MessageLoader.getString(""String_Node_Str""));
  startProgram=new Action(){
    public void run(){
      startProgram(null);
    }
  }
;
  startProgram.setText(MessageLoader.getString(""String_Node_Str""));
  appShare=new Action(){
    public void run(){
    }
  }
;
  appShare.setText(MessageLoader.getString(""String_Node_Str""));
  appShare.setEnabled(Platform.getOS().equalsIgnoreCase(Platform.OS_WIN32));
  sendMessage=new Action(){
    public void run(){
      sendMessageToGroup();
    }
  }
;
  sendMessage.setText(MessageLoader.getString(""String_Node_Str""));
  sendComponent=new Action(){
    public void run(){
      sendRepObjectToGroup(null);
    }
  }
;
  sendComponent.setText(MessageLoader.getString(""String_Node_Str""));
  sendComponentToServer=new Action(){
    public void run(){
      sendRepObjectToServer();
    }
  }
;
  sendComponentToServer.setText(MessageLoader.getString(""String_Node_Str""));
  sendComponentToServer.setEnabled(false);
  closeGroup=new Action(){
    public void run(){
      closeProjectGroup(null);
    }
  }
;
  closeGroup.setText(MessageLoader.getString(""String_Node_Str""));
  closeGroup.setEnabled(true);
  sendShowViewRequest=new Action(){
    public void run(){
      sendShowViewRequest(null);
    }
  }
;
  sendShowViewRequest.setText(MessageLoader.getString(""String_Node_Str""));
  sendShowViewRequest.setEnabled(true);
  if (chatWindow != null) {
    showChatWindow=new Action(){
      public void run(){
        chatWindow.open();
        if (!chatWindow.hasFocus())         chatWindow.getShell().forceActive();
      }
    }
;
    showChatWindow.setText(""String_Node_Str"");
  }
}",0.9962065946892326
94948,"public void disposeClient(){
  myNames.clear();
  users.clear();
  if (teamChat != null) {
    final ChatWindow chatWindow=teamChat.chatWindow;
    if (chatWindow != null && !Display.getDefault().isDisposed()) {
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          chatWindow.close();
        }
      }
);
    }
    teamChat=null;
  }
  if (lch != null) {
    lch=null;
  }
  view.disposeClient(this);
}","public void disposeClient(){
  myNames.clear();
  users.clear();
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      if (!teamChat.isDisposed() && teamChat.chatWindow != null)       teamChat.chatWindow.close();
    }
  }
);
  view.disposeClient(this);
}",0.2510460251046025
94949,"protected boolean changeUserInTree(final User userdata){
  for (int i=0; i < users.size(); i++) {
    final User user=(User)users.get(i);
    if (user.getUserID().equals(userdata.getUserID())) {
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          TableViewer view=teamChat.getTableViewer();
          view.remove(user);
          users.remove(user);
          view.add(userdata);
          users.add(userdata);
        }
      }
);
      return true;
    }
  }
  return false;
}","protected boolean changeUserInTree(final User userdata){
  for (int i=0; i < users.size(); i++) {
    final User user=(User)users.get(i);
    if (user.getUserID().equals(userdata.getUserID())) {
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          if (!teamChat.isDisposed()) {
            TableViewer view=teamChat.getTableViewer();
            view.remove(user);
            users.remove(user);
            view.add(userdata);
            users.add(userdata);
          }
        }
      }
);
      return true;
    }
  }
  return false;
}",0.8080438756855576
94950,"public void run(){
  if (teamChat != null)   teamChat.setStatus(user.getNickname() + ""String_Node_Str"");
}","public void run(){
  if (!teamChat.isDisposed())   teamChat.setStatus(user.getNickname() + ""String_Node_Str"");
}",0.8990825688073395
94951,"protected void removeUserFromTree(ID id){
  if (id == null) {
    return;
  }
 else {
    for (int i=0; i < users.size(); i++) {
      final User user=(User)users.get(i);
      if (user.getUserID().equals(id)) {
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            teamChat.getTableViewer().remove(user);
          }
        }
);
        users.remove(i);
        break;
      }
    }
  }
}","protected void removeUserFromTree(ID id){
  if (id == null) {
    return;
  }
 else {
    for (int i=0; i < users.size(); i++) {
      final User user=(User)users.get(i);
      if (user.getUserID().equals(id)) {
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            if (!teamChat.isDisposed())             teamChat.getTableViewer().remove(user);
          }
        }
);
        users.remove(i);
        break;
      }
    }
  }
}",0.9557522123893806
94952,"protected void appendAndScrollToBottom(final ChatLine str){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (teamChat != null)       teamChat.appendText(str);
    }
  }
);
}","protected void appendAndScrollToBottom(final ChatLine str){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (!teamChat.isDisposed())       teamChat.appendText(str);
    }
  }
);
}",0.9473684210526316
94953,"protected void refreshTreeView(){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (teamChat != null) {
        try {
          teamChat.getTableViewer().refresh();
        }
 catch (        Exception e) {
        }
      }
    }
  }
);
}","protected void refreshTreeView(){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (!teamChat.isDisposed())       teamChat.getTableViewer().refresh();
    }
  }
);
}",0.7837259100642399
94954,"protected void addUserToTree(final User user){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      users.add(user);
      teamChat.getTableViewer().add(user);
    }
  }
);
}","protected void addUserToTree(final User user){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      users.add(user);
      if (!teamChat.isDisposed())       teamChat.getTableViewer().add(user);
    }
  }
);
}",0.9212962962962964
94955,"public void startedTyping(final User user){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (teamChat != null)       teamChat.setStatus(user.getNickname() + ""String_Node_Str"");
    }
  }
);
}","public void startedTyping(final User user){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (!teamChat.isDisposed())       teamChat.setStatus(user.getNickname() + ""String_Node_Str"");
    }
  }
);
}",0.9515418502202644
94956,"private void showErrorMessage(String channel,String msg){
  IRCChannelContainer msgChannel=getChannel(channel);
  if (msgChannel != null)   msgChannel.fireMessageListeners((username == null) ? getSystemID() : createIDFromString(username),msg);
 else   fireMessageListeners((username == null) ? getSystemID() : createIDFromString(username),msg);
}","private void showErrorMessage(String channel,String msg){
  IRCChannelContainer msgChannel=getChannel(channel);
  if (msgChannel != null)   msgChannel.fireChatRoomMessageEvent((username == null) ? getSystemID() : createIDFromString(username),msg);
 else   fireChatRoomMessageEvent((username == null) ? getSystemID() : createIDFromString(username),msg);
}",0.9371428571428572
94957,"private void showMessage(String channel,String user,String msg){
  IRCChannelContainer msgChannel=getChannel(channel);
  if (msgChannel != null)   msgChannel.fireMessageListeners(createIDFromString(user),msg);
 else   fireMessageListeners(createIDFromString(user),msg);
}","private void showMessage(String channel,String user,String msg){
  IRCChannelContainer msgChannel=getChannel(channel);
  if (msgChannel != null) {
    msgChannel.fireChatRoomMessageEvent(createIDFromString(user),msg);
  }
 else {
    fireChatMessageEvent(createIDFromString(user),msg);
    for (Iterator it=channels.values().iterator(); it.hasNext(); ) {
      msgChannel=(IRCChannelContainer)it.next();
      msgChannel.fireChatMessageEvent(createIDFromString(user),msg);
    }
  }
}",0.6596026490066225
94958,"/** 
 * Add chat room admin listener to listen for room admin changes.
 * @param adminListener the listener to add.  Must not be <code>null</code>.
 */
public void addChatRoomAdminListener(IChatRoomAdminListener adminListener);","/** 
 * Add chat room admin listener to listen for room admin changes.
 * @param adminListener the listener to add. Must not be <code>null</code>.
 */
public void addChatRoomAdminListener(IChatRoomAdminListener adminListener);",0.9977924944812362
94959,"/** 
 * Remove chat room admin listener.
 * @param adminListener the listener to remove.  Must not be <code>null</code>.
 */
public void removeChatRoomAdminListener(IChatRoomAdminListener adminListener);","/** 
 * Remove chat room admin listener.
 * @param adminListener the listener to remove. Must not be <code>null</code>.
 */
public void removeChatRoomAdminListener(IChatRoomAdminListener adminListener);",0.9975308641975308
94960,"public synchronized void selectTab(IChatMessageSender messageSender,ITypingMessageSender typingSender,ID localID,ID userID){
  ChatTab tab=getTab(messageSender,typingSender,localID,userID);
  for (int i=0; i < switchActions.size(); i++) {
    IAction action=((ActionContributionItem)switchActions.get(i)).getAction();
    action.setChecked(false);
  }
  tab.switchItem.getAction().setChecked(true);
  tabFolder.setSelection(tab.item);
  tab.inputText.setFocus();
}","public synchronized void selectTab(IChatMessageSender messageSender,ITypingMessageSender typingSender,ID localID,ID userID){
  ChatTab tab=getTab(messageSender,typingSender,localID,userID);
  tabFolder.setSelection(tab.item);
  tab.inputText.setFocus();
}",0.5479833101529903
94961,"public void keyPressed(KeyEvent e){
switch (e.keyCode) {
case SWT.CR:
case SWT.KEYPAD_CR:
    if (e.stateMask == 0) {
      String text=inputText.getText();
      inputText.setText(""String_Node_Str"");
      try {
        if (!text.equals(""String_Node_Str"")) {
          icms.sendChatMessage(remoteID,text);
        }
        append(localID,text);
      }
 catch (      ECFException ex) {
        form.setMessage(NLS.bind(Messages.MessagesView_CouldNotSendMessage,text),IMessageProvider.ERROR);
      }
      e.doit=false;
      sendTyping=false;
    }
  break;
}
}","public void keyPressed(KeyEvent e){
switch (e.keyCode) {
case SWT.CR:
case SWT.KEYPAD_CR:
    if (e.stateMask == 0) {
      String text=inputText.getText();
      inputText.setText(""String_Node_Str"");
      try {
        if (!text.equals(""String_Node_Str"")) {
          icms.sendChatMessage(remoteID,text);
        }
        append(localID,text);
      }
 catch (      ECFException ex) {
        notificationLabel.setText(Messages.MessagesView_CouldNotSendMessage);
      }
      e.doit=false;
      sendTyping=false;
    }
  break;
}
}",0.9345454545454546
94962,"public void run(){
  item.dispose();
  removeTab(ChatTab.this);
  switchActions.remove(switchItem);
  menuManagers.remove(manager);
  for (int i=0; i < menuManagers.size(); i++) {
    IMenuManager manager=(IMenuManager)menuManagers.get(i);
    manager.remove(switchItem);
    manager.update(true);
  }
}","public void run(){
  CTabItem item=tabFolder.getSelection();
  if (item != null) {
    Iterator iterator=tabs.values().iterator();
    while (iterator.hasNext()) {
      ChatTab tab=(ChatTab)iterator.next();
      if (tab.item == item) {
        if (MessageDialog.openConfirm(tabFolder.getShell(),Messages.MessagesView_ClearChatLogDialogTitle,NLS.bind(Messages.MessagesView_ClearChatLogDialogMessage,getUserName(tab.remoteID)))) {
synchronized (tab) {
            tab.chatText.setText(""String_Node_Str"");
          }
        }
        return;
      }
    }
  }
}",0.0855491329479768
94963,"private void showIsTyping(boolean isTyping){
  form.setMessage(isTyping ? NLS.bind(Messages.MessagesView_TypingNotification,getUserName(remoteID)) : null);
}","private void showIsTyping(boolean isTyping){
  notificationLabel.setText(isTyping ? NLS.bind(Messages.MessagesView_TypingNotification,getUserName(remoteID)) : ""String_Node_Str"");
}",0.8664688427299704
94964,"private void constructWidgets(){
  item=new CTabItem(tabFolder,SWT.NONE);
  form=toolkit.createForm(tabFolder);
  form.setImage(image);
  toolkit.decorateFormHeading(form);
  form.setText(getUserName(remoteID));
  form.getBody().setLayout(new GridLayout());
  SashForm sash=new SashForm(form.getBody(),SWT.VERTICAL);
  sash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Composite client=toolkit.createComposite(sash);
  client.setLayout(new FillLayout());
  SourceViewer result=new SourceViewer(client,null,null,true,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL| SWT.MULTI| SWT.READ_ONLY);
  result.configure(new TextSourceViewerConfiguration(EditorsUI.getPreferenceStore()));
  result.setDocument(new Document());
  chatText=result.getTextWidget();
  client=toolkit.createComposite(sash);
  client.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  client.setLayout(new FillLayout());
  inputText=new Text(client,SWT.MULTI | SWT.BORDER | SWT.V_SCROLL);
  sash.setWeights(WEIGHTS);
  Menu menu=new Menu(chatText);
  MenuItem mi=new MenuItem(menu,SWT.PUSH);
  mi.setText(Messages.MessagesView_Copy);
  mi.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(org.eclipse.ui.ISharedImages.IMG_TOOL_COPY));
  mi.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String text=chatText.getSelectionText();
      if (!text.equals(""String_Node_Str"")) {
        chatText.copy();
      }
    }
  }
);
  mi=new MenuItem(menu,SWT.PUSH);
  mi.setText(Messages.MessagesView_SelectAll);
  mi.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      chatText.selectAll();
    }
  }
);
  chatText.setMenu(menu);
  IAction action=new Action(getUserName(remoteID) + '\t',IAction.AS_RADIO_BUTTON){
    public void run(){
      tabFolder.setSelection(item);
    }
  }
;
  switchItem=new ActionContributionItem(action);
  manager=form.getMenuManager();
  switchActions.add(switchItem);
  menuManagers.add(manager);
  for (int i=menuManagers.size() - 1; i > -1; i--) {
    IMenuManager manager=(IMenuManager)menuManagers.get(i);
    manager.removeAll();
    for (int j=0; j < switchActions.size(); j++) {
      IAction switchAction=((ActionContributionItem)switchActions.get(j)).getAction();
      switchAction.setChecked(false);
      manager.add(new ActionContributionItem(switchAction));
    }
    manager.update();
  }
  action.setChecked(true);
  action=new Action(){
    public void run(){
      item.dispose();
      removeTab(ChatTab.this);
      switchActions.remove(switchItem);
      menuManagers.remove(manager);
      for (int i=0; i < menuManagers.size(); i++) {
        IMenuManager manager=(IMenuManager)menuManagers.get(i);
        manager.remove(switchItem);
        manager.update(true);
      }
    }
  }
;
  action.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
  form.getToolBarManager().add(action);
  form.getToolBarManager().update(true);
  item.setControl(form);
  item.setText(getUserName(remoteID));
  toolkit.paintBordersFor(form.getBody());
}","private void constructWidgets(){
  item=new CTabItem(tabFolder,SWT.NONE);
  Composite parent=new Composite(tabFolder,SWT.NONE);
  parent.setLayout(new GridLayout());
  notificationLabel=new Label(parent,SWT.BEGINNING);
  notificationLabel.setLayoutData(new GridData(SWT.FILL,SWT.BEGINNING,true,false));
  SashForm sash=new SashForm(parent,SWT.VERTICAL);
  sash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Composite client=new Composite(sash,SWT.NONE);
  client.setLayout(new FillLayout());
  SourceViewer result=new SourceViewer(client,null,null,true,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL| SWT.MULTI| SWT.READ_ONLY);
  result.configure(new TextSourceViewerConfiguration(EditorsUI.getPreferenceStore()));
  result.setDocument(new Document());
  chatText=result.getTextWidget();
  inputText=new Text(sash,SWT.MULTI | SWT.BORDER | SWT.V_SCROLL);
  sash.setWeights(WEIGHTS);
  Menu menu=new Menu(chatText);
  MenuItem mi=new MenuItem(menu,SWT.PUSH);
  mi.setText(Messages.MessagesView_Copy);
  mi.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(org.eclipse.ui.ISharedImages.IMG_TOOL_COPY));
  mi.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String text=chatText.getSelectionText();
      if (!text.equals(""String_Node_Str"")) {
        chatText.copy();
      }
    }
  }
);
  mi=new MenuItem(menu,SWT.PUSH);
  mi.setText(Messages.MessagesView_SelectAll);
  mi.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      chatText.selectAll();
    }
  }
);
  chatText.setMenu(menu);
  item.setControl(parent);
  item.setText(getUserName(remoteID));
}",0.5771784232365145
94965,"public void dispose(){
  toolkit.dispose();
  redColor.dispose();
  blueColor.dispose();
  super.dispose();
}","public void dispose(){
  redColor.dispose();
  blueColor.dispose();
  super.dispose();
}",0.8934010152284264
94966,"public void createPartControl(Composite parent){
  tabFolder=new CTabFolder(parent,SWT.NONE);
  tabFolder.setTabPosition(SWT.BOTTOM);
  toolkit=new FormToolkit(tabFolder.getDisplay());
  tabFolder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Iterator it=tabs.values().iterator();
      while (it.hasNext()) {
        ChatTab tab=(ChatTab)it.next();
        if (tab.item == e.item) {
          tab.switchItem.getAction().setChecked(true);
          tab.inputText.setFocus();
        }
 else {
          tab.switchItem.getAction().setChecked(false);
        }
      }
    }
  }
);
  IMenuManager manager=getViewSite().getActionBars().getMenuManager();
  IAction timestampAction=new Action(Messages.MessagesView_ShowTimestamps,IAction.AS_CHECK_BOX){
    public void run(){
      showTimestamps=!showTimestamps;
    }
  }
;
  timestampAction.setChecked(true);
  IAction clearChatLogAction=new Action(Messages.MessagesView_ClearChatLog){
    public void run(){
      CTabItem item=tabFolder.getSelection();
      if (item != null) {
        Iterator iterator=tabs.values().iterator();
        while (iterator.hasNext()) {
          ChatTab tab=(ChatTab)iterator.next();
          if (tab.item == item) {
            if (MessageDialog.openConfirm(tabFolder.getShell(),Messages.MessagesView_ClearChatLogDialogTitle,NLS.bind(Messages.MessagesView_ClearChatLogDialogMessage,MessagesView.getUserName(tab.remoteID)))) {
synchronized (tab) {
                tab.chatText.setText(""String_Node_Str"");
              }
            }
            return;
          }
        }
      }
    }
  }
;
  manager.add(clearChatLogAction);
  manager.add(timestampAction);
  redColor=new Color(parent.getDisplay(),255,0,0);
  blueColor=new Color(parent.getDisplay(),0,0,255);
}","public void createPartControl(Composite parent){
  tabFolder=new CTabFolder(parent,SWT.CLOSE);
  tabFolder.setTabPosition(SWT.BOTTOM);
  tabFolder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Iterator it=tabs.values().iterator();
      while (it.hasNext()) {
        ChatTab tab=(ChatTab)it.next();
        if (tab.item == e.item) {
          tab.inputText.setFocus();
          break;
        }
      }
    }
  }
);
  IMenuManager manager=getViewSite().getActionBars().getMenuManager();
  IAction timestampAction=new Action(Messages.MessagesView_ShowTimestamps,IAction.AS_CHECK_BOX){
    public void run(){
      showTimestamps=!showTimestamps;
    }
  }
;
  timestampAction.setChecked(true);
  IAction clearChatLogAction=new Action(Messages.MessagesView_ClearChatLog){
    public void run(){
      CTabItem item=tabFolder.getSelection();
      if (item != null) {
        Iterator iterator=tabs.values().iterator();
        while (iterator.hasNext()) {
          ChatTab tab=(ChatTab)iterator.next();
          if (tab.item == item) {
            if (MessageDialog.openConfirm(tabFolder.getShell(),Messages.MessagesView_ClearChatLogDialogTitle,NLS.bind(Messages.MessagesView_ClearChatLogDialogMessage,getUserName(tab.remoteID)))) {
synchronized (tab) {
                tab.chatText.setText(""String_Node_Str"");
              }
            }
            return;
          }
        }
      }
    }
  }
;
  manager.add(clearChatLogAction);
  manager.add(timestampAction);
  redColor=new Color(parent.getDisplay(),255,0,0);
  blueColor=new Color(parent.getDisplay(),0,0,255);
}",0.9265602322206096
94967,"private void addListeners(){
  inputText.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
switch (e.keyCode) {
case SWT.CR:
case SWT.KEYPAD_CR:
        if (e.stateMask == 0) {
          String text=inputText.getText();
          inputText.setText(""String_Node_Str"");
          try {
            if (!text.equals(""String_Node_Str"")) {
              icms.sendChatMessage(remoteID,text);
            }
            append(localID,text);
          }
 catch (          ECFException ex) {
            form.setMessage(NLS.bind(Messages.MessagesView_CouldNotSendMessage,text),IMessageProvider.ERROR);
          }
          e.doit=false;
          sendTyping=false;
        }
      break;
  }
}
}
);
inputText.addModifyListener(new ModifyListener(){
public void modifyText(ModifyEvent e){
  if (!sendTyping && itms != null) {
    sendTyping=true;
    try {
      itms.sendTypingMessage(remoteID,true,null);
    }
 catch (    ECFException ex) {
      return;
    }
  }
}
}
);
}","private void addListeners(){
  inputText.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
switch (e.keyCode) {
case SWT.CR:
case SWT.KEYPAD_CR:
        if (e.stateMask == 0) {
          String text=inputText.getText();
          inputText.setText(""String_Node_Str"");
          try {
            if (!text.equals(""String_Node_Str"")) {
              icms.sendChatMessage(remoteID,text);
            }
            append(localID,text);
          }
 catch (          ECFException ex) {
            notificationLabel.setText(Messages.MessagesView_CouldNotSendMessage);
          }
          e.doit=false;
          sendTyping=false;
        }
      break;
  }
}
}
);
inputText.addModifyListener(new ModifyListener(){
public void modifyText(ModifyEvent e){
  if (!sendTyping && itms != null) {
    sendTyping=true;
    try {
      itms.sendTypingMessage(remoteID,true,null);
    }
 catch (    ECFException ex) {
      return;
    }
  }
}
}
);
}",0.963265306122449
94968,"public MessagesView(){
  menuManagers=new ArrayList();
  switchActions=new ArrayList();
  tabs=new HashMap();
}","public MessagesView(){
  tabs=new HashMap();
}",0.5859872611464968
94969,"private void append(ID fromID,String body){
  if (!isFirstMessage) {
    chatText.append(Text.DELIMITER);
  }
  int length=chatText.getCharCount();
  String name=getUserName(fromID);
  if (fromID.equals(remoteID)) {
    if (showTimestamps) {
      chatText.append(FORMATTER.format(new Date(System.currentTimeMillis())) + ' ');
      chatText.setStyleRange(new StyleRange(length,13,redColor,null));
      length=chatText.getCharCount();
    }
    chatText.append(name + ""String_Node_Str"" + body);
    chatText.setStyleRange(new StyleRange(length,name.length() + 1,redColor,null,SWT.BOLD));
    form.setMessage(null);
    if (isFirstMessage) {
      final MessageNotificationPopup popup=new MessageNotificationPopup(getSite().getWorkbenchWindow(),tabFolder.getShell(),remoteID);
      popup.setContent(name,body);
      popup.open();
      new UIJob(tabFolder.getDisplay(),""String_Node_Str""){
        public IStatus runInUIThread(        IProgressMonitor monitor){
          Shell shell=popup.getShell();
          if (shell != null && !shell.isDisposed()) {
            popup.close();
          }
          return Status.OK_STATUS;
        }
      }
.schedule(5000);
    }
  }
 else {
    if (showTimestamps) {
      chatText.append(FORMATTER.format(new Date(System.currentTimeMillis())) + ' ');
      chatText.setStyleRange(new StyleRange(length,13,blueColor,null));
      length=chatText.getCharCount();
    }
    chatText.append(name + ""String_Node_Str"" + body);
    chatText.setStyleRange(new StyleRange(length,name.length() + 1,blueColor,null,SWT.BOLD));
  }
  isFirstMessage=false;
  chatText.invokeAction(ST.PAGE_DOWN);
}","private void append(ID fromID,String body){
  if (!isFirstMessage) {
    chatText.append(Text.DELIMITER);
  }
  int length=chatText.getCharCount();
  String name=getUserName(fromID);
  if (fromID.equals(remoteID)) {
    if (showTimestamps) {
      chatText.append(FORMATTER.format(new Date(System.currentTimeMillis())) + ' ');
      chatText.setStyleRange(new StyleRange(length,13,redColor,null));
      length=chatText.getCharCount();
    }
    chatText.append(name + ""String_Node_Str"" + body);
    chatText.setStyleRange(new StyleRange(length,name.length() + 1,redColor,null,SWT.BOLD));
    notificationLabel.setText(""String_Node_Str"");
    if (isFirstMessage) {
      final MessageNotificationPopup popup=new MessageNotificationPopup(getSite().getWorkbenchWindow(),tabFolder.getShell(),remoteID);
      popup.setContent(name,body);
      popup.open();
      new UIJob(tabFolder.getDisplay(),""String_Node_Str""){
        public IStatus runInUIThread(        IProgressMonitor monitor){
          Shell shell=popup.getShell();
          if (shell != null && !shell.isDisposed()) {
            popup.close();
          }
          return Status.OK_STATUS;
        }
      }
.schedule(5000);
    }
  }
 else {
    if (showTimestamps) {
      chatText.append(FORMATTER.format(new Date(System.currentTimeMillis())) + ' ');
      chatText.setStyleRange(new StyleRange(length,13,blueColor,null));
      length=chatText.getCharCount();
    }
    chatText.append(name + ""String_Node_Str"" + body);
    chatText.setStyleRange(new StyleRange(length,name.length() + 1,blueColor,null,SWT.BOLD));
  }
  isFirstMessage=false;
  chatText.invokeAction(ST.PAGE_DOWN);
}",0.9813854134879464
94970,"public void disconnect(){
  ID groupID=getConnectedID();
  fireContainerEvent(new ContainerDisconnectingEvent(this.getID(),groupID));
synchronized (getConnectLock()) {
    if (isConnected()) {
      try {
        multiuserchat.leave();
      }
 catch (      Exception e) {
        traceStack(""String_Node_Str"",e);
      }
    }
    connectionState=DISCONNECTED;
    remoteServerID=null;
    containerHelper.setRoomID(null);
    this.connection=null;
  }
  fireContainerEvent(new ContainerDisconnectedEvent(this.getID(),groupID));
}","public void disconnect(){
  ID groupID=getConnectedID();
  fireContainerEvent(new ContainerDisconnectingEvent(this.getID(),groupID));
synchronized (getConnectLock()) {
    if (isConnected()) {
      try {
        multiuserchat.leave();
      }
 catch (      Exception e) {
        traceStack(""String_Node_Str"",e);
      }
    }
    connectionState=DISCONNECTED;
    remoteServerID=null;
    if (containerHelper != null)     containerHelper.setRoomID(null);
    this.connection=null;
  }
  fireContainerEvent(new ContainerDisconnectedEvent(this.getID(),groupID));
}",0.96986301369863
94971,"public ContainerCreateErrorDialog(Shell parentShell,Throwable exception){
  super(parentShell,Messages.ContainerCreateErrorDialog_CREATE_CONTAINER_ERROR_TITLE,Messages.ContainerCreateErrorDialog_CREATE_CONTAINER_ERROR_MESSAGE,new MultiStatus(Activator.PLUGIN_ID,IStatus.ERROR,new IStatus[]{new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,(exception != null) ? exception.getLocalizedMessage() : Messages.ContainerCreateErrorDialog_CREATE_CONTAINER_ERROR_MESSAGE,exception)},(exception != null) ? exception.getLocalizedMessage() : Messages.ContainerCreateErrorDialog_CREATE_CONTAINER_ERROR_MESSAGE,exception),IStatus.ERROR);
}","public ContainerCreateErrorDialog(Shell parentShell,Throwable exception){
  super(parentShell,Messages.ContainerCreateErrorDialog_CREATE_CONTAINER_ERROR_TITLE,Messages.ContainerCreateErrorDialog_CREATE_CONTAINER_ERROR_MESSAGE,new Status(IStatus.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,(exception != null) ? exception.getLocalizedMessage() : Messages.ContainerCreateErrorDialog_CREATE_CONTAINER_ERROR_MESSAGE,exception),IStatus.ERROR);
}",0.7880485527544351
94972,"protected ID handleConnectResponse(ID orginalTarget,Object serverData) throws Exception {
  ContainerMessage aPacket=(ContainerMessage)serverData;
  ID fromID=aPacket.getFromContainerID();
  if (fromID == null)   throw new NullPointerException(Messages.ClientSOContainer_ServerID_Cannot_Be_Null);
  ContainerMessage.ViewChangeMessage viewChangeMessage=(ContainerMessage.ViewChangeMessage)aPacket.getData();
  if (!viewChangeMessage.isAdd()) {
    Object data=viewChangeMessage.getData();
    if (data != null && data instanceof Exception)     throw (Exception)data;
 else     throw new NullPointerException(Messages.ClientSOContainer_Invalid_Server_Response);
  }
  ID[] ids=viewChangeMessage.getChangeIDs();
  if (ids == null)   throw new NullPointerException(Messages.ClientSOContainer_Exception_ID_Array_Null);
  for (int i=0; i < ids.length; i++) {
    ID id=ids[i];
    if (id != null && !id.equals(getID())) {
      addNewRemoteMember(id,null);
      fireContainerEvent(new ContainerConnectedEvent(this.getID(),id));
    }
  }
  return fromID;
}","protected ID handleConnectResponse(ID orginalTarget,Object serverData) throws Exception {
  ContainerMessage aPacket=(ContainerMessage)serverData;
  ID fromID=aPacket.getFromContainerID();
  Assert.isNotNull(fromID,Messages.ClientSOContainer_ServerID_Cannot_Be_Null);
  ContainerMessage.ViewChangeMessage viewChangeMessage=(ContainerMessage.ViewChangeMessage)aPacket.getData();
  if (!viewChangeMessage.isAdd()) {
    Object data=viewChangeMessage.getData();
    if (data != null && data instanceof Exception)     throw (Exception)data;
 else     throw new NullPointerException(Messages.ClientSOContainer_Invalid_Server_Response);
  }
  ID[] ids=viewChangeMessage.getChangeIDs();
  Assert.isNotNull(ids,Messages.ClientSOContainer_Exception_ID_Array_Null);
  for (int i=0; i < ids.length; i++) {
    ID id=ids[i];
    if (id != null && !id.equals(getID()))     addNewRemoteMember(id,null);
  }
  return fromID;
}",0.8460754332313966
94973,"public void connect(ID remote,IConnectContext joinContext) throws ContainerConnectException {
  try {
    if (isClosing)     throw new IllegalStateException(Messages.ClientSOContainer_Container_Closing);
    debug(""String_Node_Str"" + remote + ""String_Node_Str""+ joinContext+ ""String_Node_Str"");
    Object response=null;
synchronized (getConnectLock()) {
      if (isConnected())       throw new IllegalStateException(Messages.ClientSOContainer_Already_Connected + getConnectedID());
      if (isConnecting())       throw new IllegalStateException(Messages.ClientSOContainer_Currently_Connecting);
      fireContainerEvent(new ContainerConnectingEvent(this.getID(),remote,joinContext));
      ISynchAsynchConnection aConnection=createConnection(remote,joinContext);
      setStateConnecting(aConnection);
synchronized (aConnection) {
        Object connectData=getConnectData(remote,joinContext);
        int connectTimeout=getConnectTimeout();
        try {
          response=aConnection.connect(remote,connectData,connectTimeout);
        }
 catch (        IOException e) {
          if (getConnection() != aConnection)           killConnection(aConnection);
 else           setStateDisconnected(aConnection);
          throw e;
        }
        if (getConnection() != aConnection) {
          killConnection(aConnection);
          throw new IllegalStateException(Messages.ClientSOContainer_Connect_Failed_Incorrect_State);
        }
        ID serverID=null;
        try {
          serverID=handleConnectResponse(remote,response);
        }
 catch (        Exception e) {
          setStateDisconnected(aConnection);
          throw e;
        }
        aConnection.start();
        setStateConnected(serverID,aConnection);
      }
    }
  }
 catch (  Exception e) {
    traceStack(""String_Node_Str"",e);
    ContainerConnectException except=new ContainerConnectException(Messages.ClientSOContainer_Exception_Connecting + remote.getName(),e);
    throw except;
  }
}","public void connect(ID remote,IConnectContext joinContext) throws ContainerConnectException {
  try {
    if (isClosing)     throw new IllegalStateException(Messages.ClientSOContainer_Container_Closing);
    debug(""String_Node_Str"" + remote + ""String_Node_Str""+ joinContext+ ""String_Node_Str"");
    Object response=null;
synchronized (getConnectLock()) {
      if (isConnected())       throw new IllegalStateException(Messages.ClientSOContainer_Already_Connected + getConnectedID());
      if (isConnecting())       throw new IllegalStateException(Messages.ClientSOContainer_Currently_Connecting);
      fireContainerEvent(new ContainerConnectingEvent(this.getID(),remote,joinContext));
      ISynchAsynchConnection aConnection=createConnection(remote,joinContext);
      setStateConnecting(aConnection);
synchronized (aConnection) {
        Object connectData=getConnectData(remote,joinContext);
        int connectTimeout=getConnectTimeout();
        try {
          response=aConnection.connect(remote,connectData,connectTimeout);
        }
 catch (        IOException e) {
          if (getConnection() != aConnection)           killConnection(aConnection);
 else           setStateDisconnected(aConnection);
          throw e;
        }
        if (getConnection() != aConnection) {
          killConnection(aConnection);
          throw new IllegalStateException(Messages.ClientSOContainer_Connect_Failed_Incorrect_State);
        }
        ID serverID=null;
        try {
          serverID=handleConnectResponse(remote,response);
        }
 catch (        Exception e) {
          setStateDisconnected(aConnection);
          throw e;
        }
        setStateConnected(serverID,aConnection);
        fireContainerEvent(new ContainerConnectedEvent(this.getID(),remoteServerID));
        aConnection.start();
      }
    }
  }
 catch (  Exception e) {
    traceStack(""String_Node_Str"",e);
    ContainerConnectException except=new ContainerConnectException(Messages.ClientSOContainer_Exception_Connecting + remote.getName(),e);
    throw except;
  }
}",0.9642679900744416
94974,"public DebugOptions getDebugOptions(){
  if (debugOptionsTracker == null) {
    debugOptionsTracker=new ServiceTracker(context,DebugOptions.class.getName(),null);
    debugOptionsTracker.open();
  }
  return (DebugOptions)debugOptionsTracker.getService();
}","public DebugOptions getDebugOptions(){
  if (context == null)   return null;
  if (debugOptionsTracker == null) {
    debugOptionsTracker=new ServiceTracker(context,DebugOptions.class.getName(),null);
    debugOptionsTracker.open();
  }
  return (DebugOptions)debugOptionsTracker.getService();
}",0.9311594202898552
94975,"public void handleRosterUpdate(final IRoster roster,final IRosterItem changedValue){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      MultiRosterAccount.this.multiRosterView.refreshTreeViewer(changedValue,true);
    }
  }
);
}","public void handleRosterUpdate(final IRoster roster,final IRosterItem changedValue){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      MultiRosterAccount.this.multiRosterView.refreshTreeViewer(changedValue,true);
    }
  }
);
}",0.9980353634577604
94976,"private void removeItemFromRosterGroup(org.eclipse.ecf.presence.roster.RosterGroup group,XMPPID itemIDToRemove){
  for (Iterator i=group.getEntries().iterator(); i.hasNext(); ) {
    org.eclipse.ecf.presence.roster.RosterEntry entry=(org.eclipse.ecf.presence.roster.RosterEntry)i.next();
    if (entry.getUser().getID().equals(itemIDToRemove)) {
      group.remove(entry);
      rosterManager.notifyRosterUpdate(group);
    }
  }
}","private boolean removeItemFromRosterGroup(org.eclipse.ecf.presence.roster.RosterGroup group,XMPPID itemIDToRemove){
  for (Iterator i=group.getEntries().iterator(); i.hasNext(); ) {
    org.eclipse.ecf.presence.roster.RosterEntry entry=(org.eclipse.ecf.presence.roster.RosterEntry)i.next();
    if (entry.getUser().getID().equals(itemIDToRemove)) {
      i.remove();
      return true;
    }
  }
  return false;
}",0.8744075829383886
94977,"private void removeItemFromRoster(Collection rosterItems,XMPPID itemIDToRemove){
synchronized (rosterItems) {
    for (Iterator i=rosterItems.iterator(); i.hasNext(); ) {
      IRosterItem item=(IRosterItem)i.next();
      if (item instanceof org.eclipse.ecf.presence.roster.RosterGroup) {
        org.eclipse.ecf.presence.roster.RosterGroup group=(org.eclipse.ecf.presence.roster.RosterGroup)item;
        removeItemFromRosterGroup(group,itemIDToRemove);
        if (group.getEntries().size() == 0)         roster.removeItem(item);
        rosterManager.notifyRosterUpdate(roster);
      }
 else       if (item instanceof org.eclipse.ecf.presence.roster.RosterEntry) {
        if (((org.eclipse.ecf.presence.roster.RosterEntry)item).getUser().getID().equals(itemIDToRemove)) {
          roster.removeItem(item);
          rosterManager.notifyRosterUpdate(roster);
        }
      }
    }
  }
}","private void removeItemFromRoster(Collection rosterItems,XMPPID itemIDToRemove){
  boolean removed=false;
  for (Iterator i=rosterItems.iterator(); i.hasNext(); ) {
    IRosterItem item=(IRosterItem)i.next();
    if (item instanceof org.eclipse.ecf.presence.roster.RosterGroup) {
      org.eclipse.ecf.presence.roster.RosterGroup group=(org.eclipse.ecf.presence.roster.RosterGroup)item;
      removed=removeItemFromRosterGroup(group,itemIDToRemove);
      if (group.getEntries().size() == 0)       i.remove();
    }
 else     if (item instanceof org.eclipse.ecf.presence.roster.RosterEntry) {
      if (((org.eclipse.ecf.presence.roster.RosterEntry)item).getUser().getID().equals(itemIDToRemove)) {
        i.remove();
        removed=true;
      }
    }
  }
  if (removed)   rosterManager.notifyRosterUpdate(roster);
}",0.4051371862230006
94978,"public void sendRosterRemove(ID userID) throws ECFException {
  try {
    if (!(userID instanceof XMPPID))     throw new ECFException(""String_Node_Str"");
    XMPPID xmppID=(XMPPID)userID;
    getConnectionOrThrowIfNull().sendRosterRemove(xmppID.getUsernameAtHost());
  }
 catch (  IOException e) {
    traceAndThrowECFException(""String_Node_Str"",e);
  }
}","public void sendRosterRemove(ID userID) throws ECFException {
  try {
    if (!(userID instanceof XMPPID))     throw new ECFException(""String_Node_Str"");
    XMPPID xmppID=(XMPPID)userID;
    getConnectionOrThrowIfNull().sendRosterRemove(xmppID.getUsernameAtHost());
  }
 catch (  Exception e) {
    traceAndThrowECFException(""String_Node_Str"",e);
  }
}",0.9971751412429378
94979,"public void sendRosterAdd(String user,String name,String[] groups) throws ECFException {
  try {
    getConnectionOrThrowIfNull().sendRosterAdd(user,name,groups);
  }
 catch (  IOException e) {
    traceAndThrowECFException(""String_Node_Str"",e);
  }
}","public void sendRosterAdd(String user,String name,String[] groups) throws ECFException {
  try {
    getConnectionOrThrowIfNull().sendRosterAdd(user,name,groups);
  }
 catch (  Exception e) {
    traceAndThrowECFException(""String_Node_Str"",e);
  }
}",0.996
94980,"public void sendRosterRemove(String user) throws IOException {
  Roster r=getRoster();
  RosterEntry re=r.getEntry(user);
  try {
    r.removeEntry(re);
  }
 catch (  XMPPException e) {
    e.printStackTrace();
  }
}","public void sendRosterRemove(String user) throws XMPPException, IOException {
  Roster r=getRoster();
  RosterEntry re=r.getEntry(user);
  r.removeEntry(re);
}",0.768
94981,"public void sendRosterAdd(String user,String name,String[] groups) throws IOException {
  Roster r=getRoster();
  try {
    r.createEntry(user,name,groups);
  }
 catch (  XMPPException e) {
    e.printStackTrace();
  }
}","public void sendRosterAdd(String user,String name,String[] groups) throws IOException, XMPPException {
  Roster r=getRoster();
  r.createEntry(user,name,groups);
}",0.7728459530026109
94982,"private void fillContextMenu(IMenuManager manager){
  IStructuredSelection iss=(IStructuredSelection)treeViewer.getSelection();
  Object element=iss.getFirstElement();
  if (element instanceof IRosterEntry) {
    IRosterEntry entry=(IRosterEntry)element;
    manager.add(imAction);
    imAction.setText(Messages.MultiRosterView_SendIM);
    imAction.setEnabled(entry.getPresence().getType() == IPresence.Type.AVAILABLE);
    manager.add(removeAction);
  }
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","private void fillContextMenu(IMenuManager manager){
  IStructuredSelection iss=(IStructuredSelection)treeViewer.getSelection();
  Object element=iss.getFirstElement();
  if (element instanceof IRosterEntry) {
    IRosterEntry entry=(IRosterEntry)element;
    manager.add(imAction);
    imAction.setText(Messages.MultiRosterView_SendIM);
    imAction.setEnabled(entry.getPresence().getType() == IPresence.Type.AVAILABLE);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    manager.add(removeAction);
  }
 else   if (element instanceof IRoster) {
    manager.add(openAccountChatRoomAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  }
 else {
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  }
}",0.7588325652841782
94983,"private void fillLocalPullDown(IMenuManager manager){
  setStatusMenu=new MenuManager(Messages.MultiRosterView_SetStatusAs,null);
  setStatusMenu.add(setAvailableAction);
  setStatusMenu.add(setAwayAction);
  setStatusMenu.add(setDNDAction);
  setStatusMenu.add(setInvisibleAction);
  setStatusMenu.add(setOfflineAction);
  setStatusMenu.setVisible(false);
  manager.add(setStatusMenu);
  manager.add(new Separator());
  manager.add(new Action(Messages.MultiRosterView_ShowOffline,Action.AS_CHECK_BOX){
    public void run(){
      if (isChecked()) {
        treeViewer.addFilter(showOfflineFilter);
      }
 else {
        treeViewer.removeFilter(showOfflineFilter);
      }
    }
  }
);
  IAction showEmptyGroupsAction=new Action(Messages.MultiRosterView_ShowEmptyGroups,Action.AS_CHECK_BOX){
    public void run(){
      if (isChecked()) {
        treeViewer.addFilter(showEmptyGroupsFilter);
      }
 else {
        treeViewer.removeFilter(showEmptyGroupsFilter);
      }
    }
  }
;
  showEmptyGroupsAction.setChecked(true);
  manager.add(showEmptyGroupsAction);
  manager.add(new Separator());
  manager.add(new Action(Messages.MultiRosterView_AddContact){
    public void run(){
      AddContactDialog dialog=new AddContactDialog(treeViewer.getControl().getShell());
      dialog.setInput(rosterAccounts);
      if (Window.OK == dialog.open()) {
        IPresenceContainerAdapter ipca=dialog.getSelection();
        IRosterSubscriptionSender sender=ipca.getRosterManager().getRosterSubscriptionSender();
        try {
          sender.sendRosterAdd(dialog.getAccountID(),dialog.getAlias(),null);
        }
 catch (        ECFException e) {
          e.printStackTrace();
        }
      }
    }
  }
);
}","private void fillLocalPullDown(IMenuManager manager){
  setStatusMenu=new MenuManager(Messages.MultiRosterView_SetStatusAs,null);
  setStatusMenu.add(setAvailableAction);
  setStatusMenu.add(setAwayAction);
  setStatusMenu.add(setDNDAction);
  setStatusMenu.add(setInvisibleAction);
  setStatusMenu.add(setOfflineAction);
  setStatusMenu.setVisible(false);
  manager.add(setStatusMenu);
  manager.add(new Separator());
  manager.add(new Action(Messages.MultiRosterView_ShowOffline,Action.AS_CHECK_BOX){
    public void run(){
      if (isChecked()) {
        treeViewer.addFilter(showOfflineFilter);
      }
 else {
        treeViewer.removeFilter(showOfflineFilter);
      }
    }
  }
);
  IAction showEmptyGroupsAction=new Action(Messages.MultiRosterView_ShowEmptyGroups,Action.AS_CHECK_BOX){
    public void run(){
      if (isChecked()) {
        treeViewer.addFilter(showEmptyGroupsFilter);
      }
 else {
        treeViewer.removeFilter(showEmptyGroupsFilter);
      }
    }
  }
;
  showEmptyGroupsAction.setChecked(true);
  manager.add(showEmptyGroupsAction);
  manager.add(new Separator());
  manager.add(new Action(Messages.MultiRosterView_AddContact){
    public void run(){
      AddContactDialog dialog=new AddContactDialog(treeViewer.getControl().getShell());
      dialog.setInput(rosterAccounts);
      if (Window.OK == dialog.open()) {
        IPresenceContainerAdapter ipca=dialog.getSelection();
        IRosterSubscriptionSender sender=ipca.getRosterManager().getRosterSubscriptionSender();
        try {
          sender.sendRosterAdd(dialog.getAccountID(),dialog.getAlias(),null);
        }
 catch (        ECFException e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  manager.add(new Separator());
  manager.add(openChatRoomAction);
}",0.9807857757384572
94984,"private void makeActions(){
  imAction=new Action(){
    public void run(){
      message((IStructuredSelection)treeViewer.getSelection());
    }
  }
;
  imAction.setImageDescriptor(SharedImages.getImageDescriptor(SharedImages.IMG_MESSAGE));
  removeAction=new Action(){
    public void run(){
      IStructuredSelection iss=(IStructuredSelection)treeViewer.getSelection();
      remove((IRosterEntry)iss.getFirstElement());
    }
  }
;
  removeAction.setText(Messages.MultiRosterView_Remove);
  removeAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
  setAvailableAction=new Action(Messages.MultiRosterView_SetAvailable,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.AVAILABLE);
      }
    }
  }
;
  setAwayAction=new Action(Messages.MultiRosterView_SetAway,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.AWAY);
      }
    }
  }
;
  setDNDAction=new Action(Messages.MultiRosterView_SetDoNotDisturb,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.DND);
      }
    }
  }
;
  setInvisibleAction=new Action(Messages.MultiRosterView_SetInvisible,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.INVISIBLE);
      }
    }
  }
;
  setOfflineAction=new Action(Messages.MultiRosterView_SetOffline,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        for (int i=0; i < rosterAccounts.size(); i++) {
          MultiRosterAccount account=(MultiRosterAccount)rosterAccounts.get(i);
          account.getRosterManager().removeRosterSubscriptionListener(subscriptionListener);
          treeViewer.remove(account);
        }
        rosterAccounts.clear();
        refreshTreeViewer(null,false);
        setStatusMenu.setVisible(false);
        getViewSite().getActionBars().getMenuManager().update(false);
      }
    }
  }
;
  setOfflineAction.setChecked(true);
}","private void makeActions(){
  imAction=new Action(){
    public void run(){
      message((IStructuredSelection)treeViewer.getSelection());
    }
  }
;
  imAction.setImageDescriptor(SharedImages.getImageDescriptor(SharedImages.IMG_MESSAGE));
  removeAction=new Action(){
    public void run(){
      IStructuredSelection iss=(IStructuredSelection)treeViewer.getSelection();
      remove((IRosterEntry)iss.getFirstElement());
    }
  }
;
  removeAction.setText(Messages.MultiRosterView_Remove);
  removeAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
  setAvailableAction=new Action(Messages.MultiRosterView_SetAvailable,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.AVAILABLE);
      }
    }
  }
;
  setAwayAction=new Action(Messages.MultiRosterView_SetAway,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.AWAY);
      }
    }
  }
;
  setDNDAction=new Action(Messages.MultiRosterView_SetDoNotDisturb,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.DND);
      }
    }
  }
;
  setInvisibleAction=new Action(Messages.MultiRosterView_SetInvisible,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        sendPresence(IPresence.Mode.INVISIBLE);
      }
    }
  }
;
  setOfflineAction=new Action(Messages.MultiRosterView_SetOffline,IAction.AS_RADIO_BUTTON){
    public void run(){
      if (isChecked()) {
        for (int i=0; i < rosterAccounts.size(); i++) {
          MultiRosterAccount account=(MultiRosterAccount)rosterAccounts.get(i);
          account.getRosterManager().removeRosterSubscriptionListener(subscriptionListener);
          treeViewer.remove(account);
        }
        rosterAccounts.clear();
        refreshTreeViewer(null,false);
        setStatusMenu.setVisible(false);
        getViewSite().getActionBars().getMenuManager().update(false);
      }
    }
  }
;
  setOfflineAction.setChecked(true);
  openChatRoomAction=new Action(){
    public void run(){
      List list=new ArrayList();
      for (Iterator i=rosterAccounts.iterator(); i.hasNext(); ) {
        MultiRosterAccount acct=(MultiRosterAccount)i.next();
        IChatRoomManager man=acct.getPresenceContainerAdapter().getChatRoomManager();
        if (man != null) {
          list.add(man);
        }
      }
      showChatRooms((IChatRoomManager[])list.toArray(new IChatRoomManager[]{}));
    }
  }
;
  openChatRoomAction.setText(""String_Node_Str"");
  openChatRoomAction.setToolTipText(""String_Node_Str"");
  openChatRoomAction.setImageDescriptor(SharedImages.getImageDescriptor(SharedImages.IMG_ADD_CHAT));
  openChatRoomAction.setEnabled(true);
  openAccountChatRoomAction=new Action(){
    public void run(){
      IStructuredSelection iss=(IStructuredSelection)treeViewer.getSelection();
      IRoster roster=(IRoster)iss.getFirstElement();
      showChatRooms(new IChatRoomManager[]{roster.getPresenceContainerAdapter().getChatRoomManager()});
    }
  }
;
  openAccountChatRoomAction.setText(""String_Node_Str"");
  openAccountChatRoomAction.setEnabled(true);
  openAccountChatRoomAction.setImageDescriptor(SharedImages.getImageDescriptor(SharedImages.IMG_ADD_CHAT));
}",0.7729025151459519
94985,"public void sessionConnected(ChatSession session){
  try {
    Contact contact=session.getParticipants()[0];
    final ID toID=namespace.createInstance(new Object[]{contact.getEmail(),contact.getDisplayName()});
    chatSessions.put(toID,session);
    session.addChatSessionListener(new ChatSessionListener(toID));
  }
 catch (  IDCreateException e) {
    e.printStackTrace();
  }
}","public void sessionConnected(ChatSession session){
  try {
    Contact contact=session.getParticipants()[0];
    final ID toID=namespace.createInstance(new Object[]{contact.getEmail()});
    chatSessions.put(toID,session);
    session.addChatSessionListener(new ChatSessionListener(toID));
  }
 catch (  IDCreateException e) {
    e.printStackTrace();
  }
}",0.96617050067659
94986,"public void contactAdded(Contact contact){
  final MSNRosterEntry entry=new MSNRosterEntry(MSNContainer.this,contact,namespace);
  for (int i=0; i < entries.size(); i++) {
    Object e=entries.get(i);
    if (e instanceof MSNRosterGroup) {
      MSNRosterGroup group=(MSNRosterGroup)e;
      if (group.getGroup().contains(contact)) {
        MSNRosterEntry check=group.getEntryFor(contact);
        if (check == null) {
          check=entry;
          contact.addContactListener(new IContactListener(){
            public void nameChanged(            String name){
              fireRosterUpdate(entry);
              fireRosterEntryUpdated(entry);
            }
            public void personalMessageChanged(            String personalMessage){
              entry.updatePersonalMessage();
              fireRosterUpdate(entry);
              fireRosterEntryUpdated(entry);
            }
            public void statusChanged(            Status status){
              fireRosterUpdate(entry);
              fireRosterEntryUpdated(entry);
            }
          }
);
          group.add(check);
        }
        fireRosterUpdate(group);
        fireRosterEntryAdded(check);
        return;
      }
    }
 else {
      MSNRosterEntry check=(MSNRosterEntry)e;
      if (entry.getContact().equals(check.getContact())) {
        fireRosterEntryAdded(check);
        return;
      }
    }
  }
  entries.add(entry);
  entry.setParent(MSNContainer.this);
  fireRosterEntryAdded(entry);
}","public void contactAdded(Contact contact){
  final MSNRosterEntry entry=new MSNRosterEntry(MSNContainer.this,contact,namespace);
  for (int i=0; i < entries.size(); i++) {
    Object e=entries.get(i);
    if (e instanceof MSNRosterGroup) {
      MSNRosterGroup group=(MSNRosterGroup)e;
      if (group.getGroup().contains(contact)) {
        MSNRosterEntry check=group.getEntryFor(contact);
        if (check == null) {
          check=entry;
          contact.addContactListener(new IContactListener(){
            public void nameChanged(            String name){
              fireRosterUpdate(entry);
              fireRosterEntryUpdated(entry);
            }
            public void personalMessageChanged(            String personalMessage){
              entry.updatePersonalMessage();
              fireRosterUpdate(entry);
              fireRosterEntryUpdated(entry);
            }
            public void statusChanged(            Status status){
              fireRosterUpdate(entry);
              fireRosterEntryUpdated(entry);
            }
          }
);
          group.add(check);
        }
        fireRosterUpdate(group);
        fireRosterEntryAdded(check);
        return;
      }
    }
 else {
      MSNRosterEntry check=(MSNRosterEntry)e;
      if (entry.getContact().equals(check.getContact())) {
        fireRosterEntryAdded(check);
        return;
      }
    }
  }
  contact.addContactListener(new IContactListener(){
    public void nameChanged(    String name){
      fireRosterUpdate(entry);
      fireRosterEntryUpdated(entry);
    }
    public void personalMessageChanged(    String personalMessage){
      entry.updatePersonalMessage();
      fireRosterUpdate(entry);
      fireRosterEntryUpdated(entry);
    }
    public void statusChanged(    Status status){
      fireRosterUpdate(entry);
      fireRosterEntryUpdated(entry);
    }
  }
);
  entries.add(entry);
  entry.setParent(MSNContainer.this);
  fireRosterEntryAdded(entry);
}",0.8600405679513184
94987,"public void connect(ID targetID,IConnectContext connectContext) throws ContainerConnectException {
  if (!(targetID instanceof MSNID)) {
    throw new ContainerConnectException();
  }
  connectID=(MSNID)targetID;
  client=new MsnClient();
  ObjectCallback[] cb={new ObjectCallback()};
  try {
    connectContext.getCallbackHandler().handle(cb);
    client.addSessionListener(new ISessionListener(){
      public void sessionConnected(      ChatSession session){
        try {
          Contact contact=session.getParticipants()[0];
          final ID toID=namespace.createInstance(new Object[]{contact.getEmail(),contact.getDisplayName()});
          chatSessions.put(toID,session);
          session.addChatSessionListener(new ChatSessionListener(toID));
        }
 catch (        IDCreateException e) {
          e.printStackTrace();
        }
      }
    }
);
    client.getContactList().addContactListListener(new IContactListListener(){
      public void contactAdded(      Contact contact){
        final MSNRosterEntry entry=new MSNRosterEntry(MSNContainer.this,contact,namespace);
        for (int i=0; i < entries.size(); i++) {
          Object e=entries.get(i);
          if (e instanceof MSNRosterGroup) {
            MSNRosterGroup group=(MSNRosterGroup)e;
            if (group.getGroup().contains(contact)) {
              MSNRosterEntry check=group.getEntryFor(contact);
              if (check == null) {
                check=entry;
                contact.addContactListener(new IContactListener(){
                  public void nameChanged(                  String name){
                    fireRosterUpdate(entry);
                    fireRosterEntryUpdated(entry);
                  }
                  public void personalMessageChanged(                  String personalMessage){
                    entry.updatePersonalMessage();
                    fireRosterUpdate(entry);
                    fireRosterEntryUpdated(entry);
                  }
                  public void statusChanged(                  Status status){
                    fireRosterUpdate(entry);
                    fireRosterEntryUpdated(entry);
                  }
                }
);
                group.add(check);
              }
              fireRosterUpdate(group);
              fireRosterEntryAdded(check);
              return;
            }
          }
 else {
            MSNRosterEntry check=(MSNRosterEntry)e;
            if (entry.getContact().equals(check.getContact())) {
              fireRosterEntryAdded(check);
              return;
            }
          }
        }
        entries.add(entry);
        entry.setParent(MSNContainer.this);
        fireRosterEntryAdded(entry);
      }
      public void contactRemoved(      Contact contact){
        IRosterEntry entry=findEntry(entries,contact.getEmail());
        if (entry != null) {
          fireHandleUnsubscribed(entry.getUser().getID());
        }
      }
      public void contactAddedUser(      String email){
        try {
          fireHandleSubscriptionRequest(namespace.createInstance(new Object[]{email}));
        }
 catch (        IDCreateException e) {
        }
      }
      public void contactRemovedUser(      String email){
      }
      public void groupAdded(      Group group){
        entries.add(new MSNRosterGroup(MSNContainer.this,group));
      }
    }
);
    fireContainerEvent(new ContainerConnectingEvent(guid,connectID));
    client.connect(connectID.getName(),(String)cb[0].getObject());
    fireContainerEvent(new ContainerConnectedEvent(guid,connectID));
  }
 catch (  UnsupportedCallbackException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public void connect(ID targetID,IConnectContext connectContext) throws ContainerConnectException {
  if (!(targetID instanceof MSNID)) {
    throw new ContainerConnectException();
  }
  connectID=(MSNID)targetID;
  client=new MsnClient();
  ObjectCallback[] cb={new ObjectCallback()};
  try {
    connectContext.getCallbackHandler().handle(cb);
    client.addSessionListener(new ISessionListener(){
      public void sessionConnected(      ChatSession session){
        try {
          Contact contact=session.getParticipants()[0];
          final ID toID=namespace.createInstance(new Object[]{contact.getEmail()});
          chatSessions.put(toID,session);
          session.addChatSessionListener(new ChatSessionListener(toID));
        }
 catch (        IDCreateException e) {
          e.printStackTrace();
        }
      }
    }
);
    client.getContactList().addContactListListener(new IContactListListener(){
      public void contactAdded(      Contact contact){
        final MSNRosterEntry entry=new MSNRosterEntry(MSNContainer.this,contact,namespace);
        for (int i=0; i < entries.size(); i++) {
          Object e=entries.get(i);
          if (e instanceof MSNRosterGroup) {
            MSNRosterGroup group=(MSNRosterGroup)e;
            if (group.getGroup().contains(contact)) {
              MSNRosterEntry check=group.getEntryFor(contact);
              if (check == null) {
                check=entry;
                contact.addContactListener(new IContactListener(){
                  public void nameChanged(                  String name){
                    fireRosterUpdate(entry);
                    fireRosterEntryUpdated(entry);
                  }
                  public void personalMessageChanged(                  String personalMessage){
                    entry.updatePersonalMessage();
                    fireRosterUpdate(entry);
                    fireRosterEntryUpdated(entry);
                  }
                  public void statusChanged(                  Status status){
                    fireRosterUpdate(entry);
                    fireRosterEntryUpdated(entry);
                  }
                }
);
                group.add(check);
              }
              fireRosterUpdate(group);
              fireRosterEntryAdded(check);
              return;
            }
          }
 else {
            MSNRosterEntry check=(MSNRosterEntry)e;
            if (entry.getContact().equals(check.getContact())) {
              fireRosterEntryAdded(check);
              return;
            }
          }
        }
        contact.addContactListener(new IContactListener(){
          public void nameChanged(          String name){
            fireRosterUpdate(entry);
            fireRosterEntryUpdated(entry);
          }
          public void personalMessageChanged(          String personalMessage){
            entry.updatePersonalMessage();
            fireRosterUpdate(entry);
            fireRosterEntryUpdated(entry);
          }
          public void statusChanged(          Status status){
            fireRosterUpdate(entry);
            fireRosterEntryUpdated(entry);
          }
        }
);
        entries.add(entry);
        entry.setParent(MSNContainer.this);
        fireRosterEntryAdded(entry);
      }
      public void contactRemoved(      Contact contact){
        IRosterEntry entry=findEntry(entries,contact.getEmail());
        if (entry != null) {
          fireHandleUnsubscribed(entry.getUser().getID());
        }
      }
      public void contactAddedUser(      String email){
        try {
          fireHandleSubscriptionRequest(namespace.createInstance(new Object[]{email}));
        }
 catch (        IDCreateException e) {
        }
      }
      public void contactRemovedUser(      String email){
      }
      public void groupAdded(      Group group){
        entries.add(new MSNRosterGroup(MSNContainer.this,group));
      }
    }
);
    fireContainerEvent(new ContainerConnectingEvent(guid,connectID));
    client.connect(connectID.getName(),(String)cb[0].getObject());
    fireContainerEvent(new ContainerConnectedEvent(guid,connectID));
  }
 catch (  UnsupportedCallbackException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.922671353251318
94988,"synchronized void openTab(IChatMessageSender icms,ID userID,ID threadID){
  tabFolder.setSelection(getTab(icms,userID,threadID).getCTab());
}","synchronized void openTab(IChatMessageSender icms,ID userID,ID threadID){
  ChatTab tab=getTab(icms,userID,threadID);
  for (int i=0; i < switchActions.size(); i++) {
    IAction action=((ActionContributionItem)switchActions.get(i)).getAction();
    action.setChecked(false);
  }
  tab.switchItem.getAction().setChecked(true);
  tabFolder.setSelection(tab.getCTab());
}",0.4627450980392157
94989,"public void fireMessageListeners(ID sender,String msg){
  for (Iterator i=msgListeners.iterator(); i.hasNext(); ) {
    IIMMessageListener l=(IIMMessageListener)i.next();
    l.handleMessageEvent(new ChatRoomMessageEvent(sender,new ChatRoomMessage(sender,msg)));
  }
}","public void fireMessageListeners(ID sender,String msg){
  for (Iterator i=msgListeners.iterator(); i.hasNext(); ) {
    IIMMessageListener l=(IIMMessageListener)i.next();
    l.handleMessageEvent(new ChatRoomMessageEvent(sender,new ChatRoomMessage(sender,targetID,msg)));
  }
}",0.98348623853211
94990,"public void disconnect(){
  ID groupID=getConnectedID();
  fireContainerEvent(new ContainerDisconnectingEvent(this.getID(),groupID));
synchronized (getConnectLock()) {
    if (isConnected()) {
      try {
        multiuserchat.leave();
      }
 catch (      Exception e) {
        traceStack(""String_Node_Str"",e);
      }
    }
    connectionState=DISCONNECTED;
    remoteServerID=null;
    this.connection=null;
  }
  fireContainerEvent(new ContainerDisconnectedEvent(this.getID(),groupID));
}","public void disconnect(){
  ID groupID=getConnectedID();
  fireContainerEvent(new ContainerDisconnectingEvent(this.getID(),groupID));
synchronized (getConnectLock()) {
    if (isConnected()) {
      try {
        multiuserchat.leave();
      }
 catch (      Exception e) {
        traceStack(""String_Node_Str"",e);
      }
    }
    connectionState=DISCONNECTED;
    remoteServerID=null;
    containerHelper.setRoomID(null);
    this.connection=null;
  }
  fireContainerEvent(new ContainerDisconnectedEvent(this.getID(),groupID));
}",0.9639024390243902
94991,"protected void fireMessageListeners(ID from,String body){
  for (Iterator i=messageListeners.iterator(); i.hasNext(); ) {
    IIMMessageListener l=(IIMMessageListener)i.next();
    l.handleMessageEvent(new ChatRoomMessageEvent(from,new ChatRoomMessage(from,body)));
  }
}","protected void fireMessageListeners(ID from,String body){
  for (Iterator i=messageListeners.iterator(); i.hasNext(); ) {
    IIMMessageListener l=(IIMMessageListener)i.next();
    l.handleMessageEvent(new ChatRoomMessageEvent(from,new ChatRoomMessage(from,roomID,body)));
  }
}",0.9872495446265938
94992,"public XMPPOutgoingFileTransfer(FileTransferManager manager,XMPPID remoteTarget,IFileTransferInfo fileTransferInfo,IFileTransferListener listener){
  this.manager=manager;
  this.remoteTarget=remoteTarget;
  this.transferInfo=fileTransferInfo;
  this.listener=listener;
  this.sessionID=createSessionID();
  outgoingFileTransfer=manager.createOutgoingFileTransfer(remoteTarget.getName() + XMPPID.PATH_DELIMITER + remoteTarget.getResourceName());
}","public XMPPOutgoingFileTransfer(FileTransferManager manager,XMPPID remoteTarget,IFileTransferInfo fileTransferInfo,IFileTransferListener listener){
  this.manager=manager;
  this.remoteTarget=remoteTarget;
  this.transferInfo=fileTransferInfo;
  this.listener=listener;
  this.sessionID=createSessionID();
  String fullyQualifiedName=remoteTarget.getFQName();
  outgoingFileTransfer=manager.createOutgoingFileTransfer(fullyQualifiedName);
}",0.7282976324689966
94993,"public XMPPID(Namespace namespace,String unamehost) throws URISyntaxException {
  super(namespace);
  unamehost=fixEscape(unamehost);
  if (unamehost == null)   throw new URISyntaxException(unamehost,""String_Node_Str"");
  int atIndex=unamehost.lastIndexOf(USER_HOST_DELIMITER);
  if (atIndex == -1)   throw new URISyntaxException(unamehost,""String_Node_Str"");
  username=unamehost.substring(0,atIndex);
  hostname=unamehost.substring(atIndex + 1);
  atIndex=hostname.lastIndexOf(PORT_DELIMITER);
  if (atIndex != -1) {
    try {
      port=Integer.parseInt(hostname.substring(atIndex + 1));
    }
 catch (    NumberFormatException e) {
      throw new URISyntaxException(unamehost,""String_Node_Str"");
    }
    hostname=hostname.substring(0,atIndex);
  }
  atIndex=hostname.lastIndexOf(PATH_DELIMITER);
  if (atIndex != -1) {
    resourcename=PATH_DELIMITER + hostname.substring(atIndex + 1);
    hostname=hostname.substring(0,atIndex);
  }
  uri=new URI(namespace.getScheme(),username,hostname,port,resourcename,null,null);
}","public XMPPID(Namespace namespace,String unamehost) throws URISyntaxException {
  super(namespace);
  unamehost=fixEscape(unamehost);
  if (unamehost == null)   throw new URISyntaxException(unamehost,""String_Node_Str"");
  int atIndex=unamehost.lastIndexOf(USER_HOST_DELIMITER);
  if (atIndex == -1)   throw new URISyntaxException(unamehost,""String_Node_Str"");
  username=unamehost.substring(0,atIndex);
  hostname=unamehost.substring(atIndex + 1);
  atIndex=hostname.lastIndexOf(PORT_DELIMITER);
  if (atIndex != -1) {
    try {
      port=Integer.parseInt(hostname.substring(atIndex + 1));
    }
 catch (    NumberFormatException e) {
      throw new URISyntaxException(unamehost,""String_Node_Str"");
    }
    hostname=hostname.substring(0,atIndex);
  }
  atIndex=hostname.lastIndexOf(PATH_DELIMITER);
  if (atIndex != -1) {
    resourcename=PATH_DELIMITER + hostname.substring(atIndex + 1);
    hostname=hostname.substring(0,atIndex);
  }
 else {
    resourcename=PATH_DELIMITER + ECFConnection.CLIENT_TYPE;
  }
  uri=new URI(namespace.getScheme(),username,hostname,port,resourcename,null,null);
}",0.9656470588235294
94994,"Manager(boolean withParticipantsList,CTabFolder parent,String name,KeyListener keyListener){
  tabItem=new CTabItem(parent,SWT.NULL);
  tabItem.setText(name);
  if (withParticipantsList) {
    fullChat=new SashForm(parent,SWT.HORIZONTAL);
    fullChat.setLayout(new FillLayout());
    Composite memberComp=new Composite(fullChat,SWT.NONE);
    memberComp.setLayout(new FillLayout());
    listViewer=new ListViewer(memberComp,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
    listViewer.setSorter(new ViewerSorter());
    Composite rightComp=new Composite(fullChat,SWT.NONE);
    rightComp.setLayout(new FillLayout());
    rightSash=new SashForm(rightComp,SWT.VERTICAL);
  }
 else   rightSash=new SashForm(parent,SWT.VERTICAL);
  Composite readInlayComp=new Composite(rightSash,SWT.FILL);
  readInlayComp.setLayout(new GridLayout());
  readInlayComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  textOutput=new SimpleLinkTextViewer(readInlayComp,SWT.V_SCROLL | SWT.H_SCROLL | SWT.WRAP);
  textOutput.getTextWidget().setEditable(false);
  textOutput.getTextWidget().setLayoutData(new GridData(GridData.FILL_BOTH));
  textOutput.getTextWidget().addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
      textInput.setFocus();
    }
    public void focusLost(    FocusEvent e){
    }
  }
);
  Composite writeComp=new Composite(rightSash,SWT.NONE);
  writeComp.setLayout(new FillLayout());
  textInput=new Text(writeComp,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  if (keyListener != null)   textInput.addKeyListener(keyListener);
  rightSash.setWeights(new int[]{RATIO_READ_PANE,RATIO_WRITE_PANE});
  if (withParticipantsList) {
    fullChat.setWeights(new int[]{RATIO_PRESENCE_PANE,RATIO_READ_WRITE_PANE});
    tabItem.setControl(fullChat);
  }
 else   tabItem.setControl(rightSash);
  parent.setSelection(tabItem);
  makeActions();
  hookContextMenu();
}","Manager(boolean withParticipantsList,CTabFolder parent,String name,KeyListener keyListener){
  tabItem=new CTabItem(parent,SWT.NULL);
  tabItem.setText(name);
  if (withParticipantsList) {
    fullChat=new SashForm(parent,SWT.HORIZONTAL);
    fullChat.setLayout(new FillLayout());
    Composite memberComp=new Composite(fullChat,SWT.NONE);
    memberComp.setLayout(new FillLayout());
    listViewer=new ListViewer(memberComp,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
    listViewer.setSorter(new ViewerSorter());
    Composite rightComp=new Composite(fullChat,SWT.NONE);
    rightComp.setLayout(new FillLayout());
    rightSash=new SashForm(rightComp,SWT.VERTICAL);
  }
 else   rightSash=new SashForm(parent,SWT.VERTICAL);
  Composite readInlayComp=new Composite(rightSash,SWT.FILL);
  readInlayComp.setLayout(new GridLayout());
  readInlayComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  textOutput=new SimpleLinkTextViewer(readInlayComp,SWT.V_SCROLL | SWT.H_SCROLL | SWT.WRAP);
  textOutput.getTextWidget().setEditable(false);
  textOutput.getTextWidget().setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite writeComp=new Composite(rightSash,SWT.NONE);
  writeComp.setLayout(new FillLayout());
  textInput=new Text(writeComp,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  if (keyListener != null)   textInput.addKeyListener(keyListener);
  rightSash.setWeights(new int[]{RATIO_READ_PANE,RATIO_WRITE_PANE});
  if (withParticipantsList) {
    fullChat.setWeights(new int[]{RATIO_PRESENCE_PANE,RATIO_READ_WRITE_PANE});
    tabItem.setControl(fullChat);
  }
 else   tabItem.setControl(rightSash);
  parent.setSelection(tabItem);
  makeActions();
  hookContextMenu();
}",0.9424902289223898
94995,"public void dispose(){
synchronized (accounts) {
    for (Iterator i=accounts.keySet().iterator(); i.hasNext(); ) {
      ID serviceID=(ID)i.next();
      RosterUserAccount account=getAccount(serviceID);
      if (account != null) {
        ILocalInputHandler handler=account.getInputHandler();
        if (handler != null) {
          handler.disconnect();
        }
      }
    }
    accounts.clear();
  }
  super.dispose();
}","public void dispose(){
  List handlers=new ArrayList();
synchronized (accounts) {
    for (Iterator i=accounts.keySet().iterator(); i.hasNext(); ) {
      RosterUserAccount account=getAccount((ID)i.next());
      handlers.add(account.getInputHandler());
    }
  }
  for (Iterator i=handlers.iterator(); i.hasNext(); ) {
    ILocalInputHandler handler=(ILocalInputHandler)i.next();
    handler.disconnect();
  }
  super.dispose();
}",0.5075669383003493
94996,"public void run(){
  setStatus(outgoingFileTransfer.getStatus());
  boolean negotiation=true;
  while (negotiation) {
    try {
      Thread.sleep(300);
    }
 catch (    InterruptedException e) {
      return;
    }
    Status s=progress.getStatus();
    setStatus(s);
    final boolean negotiated=getStatus().equals(Status.NEGOTIATED);
    if (s.equals(Status.NEGOTIATED) || s.equals(Status.CANCLED) || s.equals(Status.COMPLETE)|| s.equals(Status.ERROR)|| s.equals(Status.REFUSED)) {
      fireTransferListenerEvent(new IOutgoingFileTransferResponseEvent(){
        private static final long serialVersionUID=-5940612388464073240L;
        public boolean requestAccepted(){
          return negotiated;
        }
        public IOutgoingFileTransfer getSource(){
          return XMPPOutgoingFileTransfer.this;
        }
        public String toString(){
          StringBuffer buf=new StringBuffer(""String_Node_Str"");
          buf.append(""String_Node_Str"").append(requestAccepted());
          buf.append(""String_Node_Str"").append(getSource()).append(""String_Node_Str"");
          return buf.toString();
        }
      }
);
      negotiation=false;
    }
  }
  OutputStream outs=progress.getOutputStream();
  if (outs == null)   return;
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(XMPPOutgoingFileTransfer.this.localFile);
    writeToStream(inputStream,outs);
  }
 catch (  FileNotFoundException e) {
    setStatus(FileTransfer.Status.ERROR);
    setException(e);
  }
catch (  XMPPException e) {
    setStatus(FileTransfer.Status.ERROR);
    setException(e);
  }
 finally {
    setStatus(Status.COMPLETE);
    try {
      if (inputStream != null) {
        inputStream.close();
      }
    }
 catch (    IOException e) {
    }
    try {
      outs.flush();
      outs.close();
    }
 catch (    IOException e) {
    }
    fireTransferListenerEvent(new IOutgoingFileTransferSendDoneEvent(){
      private static final long serialVersionUID=-6315336868737148845L;
      public IOutgoingFileTransfer getSource(){
        return XMPPOutgoingFileTransfer.this;
      }
      public String toString(){
        StringBuffer buf=new StringBuffer(""String_Node_Str"");
        buf.append(""String_Node_Str"").append(getSource());
        buf.append(""String_Node_Str"").append(getSource().getPercentComplete()).append(""String_Node_Str"");
        return buf.toString();
      }
    }
);
  }
}","public void run(){
  setStatus(outgoingFileTransfer.getStatus());
  boolean negotiation=true;
  while (negotiation) {
    try {
      Thread.sleep(300);
    }
 catch (    InterruptedException e) {
      return;
    }
    Status s=progress.getStatus();
    setStatus(s);
    final boolean negotiated=getStatus().equals(Status.NEGOTIATED);
    if (s.equals(Status.NEGOTIATED) || s.equals(Status.CANCLED) || s.equals(Status.COMPLETE)|| s.equals(Status.ERROR)|| s.equals(Status.REFUSED)) {
      fireTransferListenerEvent(new IOutgoingFileTransferResponseEvent(){
        private static final long serialVersionUID=-5940612388464073240L;
        public boolean requestAccepted(){
          return negotiated;
        }
        public IOutgoingFileTransfer getSource(){
          return XMPPOutgoingFileTransfer.this;
        }
        public String toString(){
          StringBuffer buf=new StringBuffer(""String_Node_Str"");
          buf.append(""String_Node_Str"").append(requestAccepted()).append(""String_Node_Str"");
          return buf.toString();
        }
      }
);
      negotiation=false;
    }
  }
  OutputStream outs=progress.getOutputStream();
  if (outs == null)   return;
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(XMPPOutgoingFileTransfer.this.localFile);
    writeToStream(inputStream,outs);
  }
 catch (  FileNotFoundException e) {
    setStatus(FileTransfer.Status.ERROR);
    setException(e);
  }
catch (  XMPPException e) {
    setStatus(FileTransfer.Status.ERROR);
    setException(e);
  }
 finally {
    setStatus(Status.COMPLETE);
    try {
      if (inputStream != null) {
        inputStream.close();
      }
    }
 catch (    IOException e) {
    }
    try {
      outs.flush();
      outs.close();
    }
 catch (    IOException e) {
    }
    fireTransferListenerEvent(new IOutgoingFileTransferSendDoneEvent(){
      private static final long serialVersionUID=-6315336868737148845L;
      public IOutgoingFileTransfer getSource(){
        return XMPPOutgoingFileTransfer.this;
      }
      public String toString(){
        StringBuffer buf=new StringBuffer(""String_Node_Str"");
        buf.append(""String_Node_Str"").append(getSource().getBytesSent()).append(""String_Node_Str"");
        return buf.toString();
      }
    }
);
  }
}",0.9663829787234044
94997,"protected void writeToStream(final InputStream in,final OutputStream out) throws XMPPException {
  final byte[] b=new byte[BUFFER_SIZE];
  int count=0;
  amountWritten=0;
  do {
    try {
      out.write(b,0,count);
    }
 catch (    IOException e) {
      throw new XMPPException(""String_Node_Str"",e);
    }
    amountWritten+=count;
    if (count > 0) {
      fireTransferListenerEvent(new IOutgoingFileTransferSendDataEvent(){
        private static final long serialVersionUID=2327297070577249812L;
        public IOutgoingFileTransfer getSource(){
          return XMPPOutgoingFileTransfer.this;
        }
        public String toString(){
          StringBuffer buf=new StringBuffer(""String_Node_Str"");
          buf.append(""String_Node_Str"").append(getSource());
          buf.append(""String_Node_Str"").append(getSource().getBytesSent());
          buf.append(""String_Node_Str"").append(getSource().getPercentComplete()).append(""String_Node_Str"");
          return buf.toString();
        }
      }
);
    }
    try {
      count=in.read(b);
    }
 catch (    IOException e) {
      throw new XMPPException(""String_Node_Str"",e);
    }
  }
 while (count != -1 && !getStatus().equals(Status.CANCLED));
  if (!getStatus().equals(Status.CANCLED) && amountWritten != fileSize) {
    setStatus(Status.ERROR);
  }
}","protected void writeToStream(final InputStream in,final OutputStream out) throws XMPPException {
  final byte[] b=new byte[BUFFER_SIZE];
  int count=0;
  amountWritten=0;
  do {
    try {
      out.write(b,0,count);
    }
 catch (    IOException e) {
      throw new XMPPException(""String_Node_Str"",e);
    }
    amountWritten+=count;
    if (count > 0) {
      fireTransferListenerEvent(new IOutgoingFileTransferSendDataEvent(){
        private static final long serialVersionUID=2327297070577249812L;
        public IOutgoingFileTransfer getSource(){
          return XMPPOutgoingFileTransfer.this;
        }
        public String toString(){
          StringBuffer buf=new StringBuffer(""String_Node_Str"");
          buf.append(""String_Node_Str"").append(getSource().getBytesSent());
          buf.append(""String_Node_Str"").append(getSource().getPercentComplete()).append(""String_Node_Str"");
          return buf.toString();
        }
      }
);
    }
    try {
      count=in.read(b);
    }
 catch (    IOException e) {
      throw new XMPPException(""String_Node_Str"",e);
    }
  }
 while (count != -1 && !getStatus().equals(Status.CANCLED));
  if (!getStatus().equals(Status.CANCLED) && amountWritten != fileSize) {
    setStatus(Status.ERROR);
  }
}",0.9762368523568368
94998,"public String toString(){
  StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(getSource());
  buf.append(""String_Node_Str"").append(getSource().getBytesSent());
  buf.append(""String_Node_Str"").append(getSource().getPercentComplete()).append(""String_Node_Str"");
  return buf.toString();
}","public String toString(){
  StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(getSource().getBytesSent());
  buf.append(""String_Node_Str"").append(getSource().getPercentComplete()).append(""String_Node_Str"");
  return buf.toString();
}",0.912396694214876
94999,"public synchronized void startSend(File localFile,String description) throws XMPPException {
  this.localFile=localFile;
  this.fileSize=localFile.length();
  setStatus(Status.INITIAL);
  outgoingFileTransfer.sendFile(localFile.getAbsolutePath(),this.fileSize,description,progress);
  Thread transferThread=new Thread(new Runnable(){
    public void run(){
      setStatus(outgoingFileTransfer.getStatus());
      boolean negotiation=true;
      while (negotiation) {
        try {
          Thread.sleep(300);
        }
 catch (        InterruptedException e) {
          return;
        }
        Status s=progress.getStatus();
        setStatus(s);
        final boolean negotiated=getStatus().equals(Status.NEGOTIATED);
        if (s.equals(Status.NEGOTIATED) || s.equals(Status.CANCLED) || s.equals(Status.COMPLETE)|| s.equals(Status.ERROR)|| s.equals(Status.REFUSED)) {
          fireTransferListenerEvent(new IOutgoingFileTransferResponseEvent(){
            private static final long serialVersionUID=-5940612388464073240L;
            public boolean requestAccepted(){
              return negotiated;
            }
            public IOutgoingFileTransfer getSource(){
              return XMPPOutgoingFileTransfer.this;
            }
            public String toString(){
              StringBuffer buf=new StringBuffer(""String_Node_Str"");
              buf.append(""String_Node_Str"").append(requestAccepted());
              buf.append(""String_Node_Str"").append(getSource()).append(""String_Node_Str"");
              return buf.toString();
            }
          }
);
          negotiation=false;
        }
      }
      OutputStream outs=progress.getOutputStream();
      if (outs == null)       return;
      InputStream inputStream=null;
      try {
        inputStream=new FileInputStream(XMPPOutgoingFileTransfer.this.localFile);
        writeToStream(inputStream,outs);
      }
 catch (      FileNotFoundException e) {
        setStatus(FileTransfer.Status.ERROR);
        setException(e);
      }
catch (      XMPPException e) {
        setStatus(FileTransfer.Status.ERROR);
        setException(e);
      }
 finally {
        setStatus(Status.COMPLETE);
        try {
          if (inputStream != null) {
            inputStream.close();
          }
        }
 catch (        IOException e) {
        }
        try {
          outs.flush();
          outs.close();
        }
 catch (        IOException e) {
        }
        fireTransferListenerEvent(new IOutgoingFileTransferSendDoneEvent(){
          private static final long serialVersionUID=-6315336868737148845L;
          public IOutgoingFileTransfer getSource(){
            return XMPPOutgoingFileTransfer.this;
          }
          public String toString(){
            StringBuffer buf=new StringBuffer(""String_Node_Str"");
            buf.append(""String_Node_Str"").append(getSource());
            buf.append(""String_Node_Str"").append(getSource().getPercentComplete()).append(""String_Node_Str"");
            return buf.toString();
          }
        }
);
      }
    }
  }
,""String_Node_Str"");
  transferThread.start();
}","public synchronized void startSend(File localFile,String description) throws XMPPException {
  this.localFile=localFile;
  this.fileSize=localFile.length();
  setStatus(Status.INITIAL);
  outgoingFileTransfer.sendFile(localFile.getAbsolutePath(),this.fileSize,description,progress);
  Thread transferThread=new Thread(new Runnable(){
    public void run(){
      setStatus(outgoingFileTransfer.getStatus());
      boolean negotiation=true;
      while (negotiation) {
        try {
          Thread.sleep(300);
        }
 catch (        InterruptedException e) {
          return;
        }
        Status s=progress.getStatus();
        setStatus(s);
        final boolean negotiated=getStatus().equals(Status.NEGOTIATED);
        if (s.equals(Status.NEGOTIATED) || s.equals(Status.CANCLED) || s.equals(Status.COMPLETE)|| s.equals(Status.ERROR)|| s.equals(Status.REFUSED)) {
          fireTransferListenerEvent(new IOutgoingFileTransferResponseEvent(){
            private static final long serialVersionUID=-5940612388464073240L;
            public boolean requestAccepted(){
              return negotiated;
            }
            public IOutgoingFileTransfer getSource(){
              return XMPPOutgoingFileTransfer.this;
            }
            public String toString(){
              StringBuffer buf=new StringBuffer(""String_Node_Str"");
              buf.append(""String_Node_Str"").append(requestAccepted()).append(""String_Node_Str"");
              return buf.toString();
            }
          }
);
          negotiation=false;
        }
      }
      OutputStream outs=progress.getOutputStream();
      if (outs == null)       return;
      InputStream inputStream=null;
      try {
        inputStream=new FileInputStream(XMPPOutgoingFileTransfer.this.localFile);
        writeToStream(inputStream,outs);
      }
 catch (      FileNotFoundException e) {
        setStatus(FileTransfer.Status.ERROR);
        setException(e);
      }
catch (      XMPPException e) {
        setStatus(FileTransfer.Status.ERROR);
        setException(e);
      }
 finally {
        setStatus(Status.COMPLETE);
        try {
          if (inputStream != null) {
            inputStream.close();
          }
        }
 catch (        IOException e) {
        }
        try {
          outs.flush();
          outs.close();
        }
 catch (        IOException e) {
        }
        fireTransferListenerEvent(new IOutgoingFileTransferSendDoneEvent(){
          private static final long serialVersionUID=-6315336868737148845L;
          public IOutgoingFileTransfer getSource(){
            return XMPPOutgoingFileTransfer.this;
          }
          public String toString(){
            StringBuffer buf=new StringBuffer(""String_Node_Str"");
            buf.append(""String_Node_Str"").append(getSource().getBytesSent()).append(""String_Node_Str"");
            return buf.toString();
          }
        }
);
      }
    }
  }
,""String_Node_Str"");
  transferThread.start();
}",0.9459993414553836
95000,"protected Control createDialogArea(Composite parent){
  Composite container=(Composite)super.createDialogArea(parent);
  final GridLayout gridLayout=new GridLayout();
  gridLayout.horizontalSpacing=0;
  container.setLayout(gridLayout);
  final Composite composite=new Composite(container,SWT.NONE);
  final GridLayout gridLayout_2=new GridLayout();
  gridLayout_2.numColumns=2;
  composite.setLayout(gridLayout_2);
  final Label label_4=new Label(composite,SWT.NONE);
  label_4.setText(""String_Node_Str"");
  final Label label_3=new Label(composite,SWT.NONE);
  label_3.setText(""String_Node_Str"");
  usertext=new Text(composite,SWT.BORDER);
  usertext.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  if (user != null) {
    usertext.setText(user);
    usertext.setEnabled(false);
  }
  usertext.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (user != null || (usertext.getText().length() > 3 && usertext.getText().indexOf(""String_Node_Str"") != -1)) {
        okButton.setEnabled(true);
      }
 else {
        okButton.setEnabled(false);
      }
    }
  }
);
  final Label label_2=new Label(composite,SWT.NONE);
  label_2.setText(""String_Node_Str"");
  nicknametext=new Text(composite,SWT.BORDER);
  final GridData gridData_1=new GridData(GridData.FILL_HORIZONTAL);
  gridData_1.widthHint=192;
  nicknametext.setLayoutData(gridData_1);
  if (user != null) {
    nicknametext.setFocus();
  }
  return container;
}","protected Control createDialogArea(Composite parent){
  Composite container=(Composite)super.createDialogArea(parent);
  final GridLayout gridLayout=new GridLayout();
  gridLayout.horizontalSpacing=0;
  container.setLayout(gridLayout);
  final Composite composite=new Composite(container,SWT.NONE);
  final GridLayout gridLayout_2=new GridLayout();
  gridLayout_2.numColumns=2;
  composite.setLayout(gridLayout_2);
  final Label label_3=new Label(composite,SWT.NONE);
  label_3.setText(""String_Node_Str"");
  usertext=new Text(composite,SWT.BORDER);
  usertext.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  if (user != null) {
    usertext.setText(user);
    usertext.setEnabled(false);
  }
  usertext.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (user != null || (usertext.getText().length() > 3 && usertext.getText().indexOf(""String_Node_Str"") != -1)) {
        okButton.setEnabled(true);
      }
 else {
        okButton.setEnabled(false);
      }
    }
  }
);
  new Label(composite,SWT.NONE);
  final Label label_4=new Label(composite,SWT.NONE);
  label_4.setText(""String_Node_Str"");
  final Label label_2=new Label(composite,SWT.NONE);
  label_2.setText(""String_Node_Str"");
  nicknametext=new Text(composite,SWT.BORDER);
  final GridData gridData_1=new GridData(GridData.FILL_HORIZONTAL);
  gridData_1.widthHint=192;
  nicknametext.setLayoutData(gridData_1);
  if (user != null) {
    nicknametext.setFocus();
  }
  return container;
}",0.9278765514927876
